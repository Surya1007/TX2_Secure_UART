
/home/smanupa/Secure_UART/cboot/out/build-t186/lk.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000096000000 <_start>:
#define RELOC_R_AARCH64_RELATIVE_TYPE	1027

.section .text.boot
.globl _start
FUNCTION(_start)
	b .L__real_start
    96000000:	14000008 	b	96000020 <GicCpuBase+0x4>
    96000004:	d503201f 	nop

0000000096000008 <CpuBlParamsPtr>:
    96000008:	0c39096c 	.word	0x0c39096c
    9600000c:	00000000 	.word	0x00000000

0000000096000010 <CpuBlParams>:
	...

0000000096000018 <GicDistBase>:
    96000018:	03881000 	.word	0x03881000

000000009600001c <GicCpuBase>:
    9600001c:	03882000 	.word	0x03882000
GicCpuBase:
	.word 0x03882000

.L__real_start:
	/* Update the .rela.dyn offsets */
	adr x4, _start
    96000020:	10ffff04 	adr	x4, 96000000 <_start>
	ldr x5, =MEMBASE
    96000024:	58000ba5 	ldr	x5, 96000198 <skip_shift+0x114>
	/* Calculate offset of load address relative to link address */
	sub x18, x4, x5
    96000028:	cb050092 	sub	x18, x4, x5
	adr x4, __reloc_begin
    9600002c:	101b4f24 	adr	x4, 96036a10 <__reloc_begin>
	adr x5, __reloc_end
    96000030:	101cd445 	adr	x5, 96039ab8 <__exidx_end>
	b reloc_point
    96000034:	1400000a 	b	9600005c <reloc_point>

0000000096000038 <reloc_loop>:
	/* Add offsets to relocation table */
reloc_loop:
	/* Check if reloc type is R_AARCH64_RELATIVE*/
	ldr x0, [x4, #8]
    96000038:	f9400480 	ldr	x0, [x4, #8]
	cmp w0, #RELOC_R_AARCH64_RELATIVE_TYPE
    9600003c:	71100c1f 	cmp	w0, #0x403
	b.ne incr_loop
    96000040:	540000c1 	b.ne	96000058 <incr_loop>  // b.any
	/* Load r_offset */
	ldr x0, [x4]
    96000044:	f9400080 	ldr	x0, [x4]
	add x0, x0, x18
    96000048:	8b120000 	add	x0, x0, x18
	/* Load r_addend */
	ldr x1, [x4, #16]
    9600004c:	f9400881 	ldr	x1, [x4, #16]
	add x1, x1, x18
    96000050:	8b120021 	add	x1, x1, x18
	/* Store addend at updated offset */
	str x1, [x0]
    96000054:	f9000001 	str	x1, [x0]

0000000096000058 <incr_loop>:
incr_loop:
	add x4, x4, #24
    96000058:	91006084 	add	x4, x4, #0x18

000000009600005c <reloc_point>:
reloc_point:
	cmp x4, x5
    9600005c:	eb05009f 	cmp	x4, x5
	b.lo reloc_loop
    96000060:	54fffec3 	b.cc	96000038 <reloc_loop>  // b.lo, b.ul, b.last

	/* Read the scratch register and save the CPUBL-params pointer */
	ldr x10, CpuBlParamsPtr
    96000064:	58fffd2a 	ldr	x10, 96000008 <CpuBlParamsPtr>
	adr x11, CpuBlParams
    96000068:	10fffd4b 	adr	x11, 96000010 <CpuBlParams>
	mov x19, xzr
    9600006c:	aa1f03f3 	mov	x19, xzr
	ldr w19, [x10]
    96000070:	b9400153 	ldr	w19, [x10]
	ldr w20, =0x80000000 /* Start of SDRAM address*/
    96000074:	18000914 	ldr	w20, 96000194 <skip_shift+0x110>
	cmp x19, x20
    96000078:	eb14027f 	cmp	x19, x20
	/*
	 * Absolute address is passed if it lies above start of DRAM address
	 * So skip restoring it
	 */
	bge skip_shift
    9600007c:	5400004a 	b.ge	96000084 <skip_shift>  // b.tcont
	lsl x19, x19, #(CONFIG_PAGE_SIZE_LOG2)
    96000080:	d370be73 	lsl	x19, x19, #16

0000000096000084 <skip_shift>:
skip_shift:
	str x19, [x11]
    96000084:	f9000173 	str	x19, [x11]

	mrs x0, CurrentEL
    96000088:	d5384240 	mrs	x0, currentel
	cmp x0, #0xc
    9600008c:	f100301f 	cmp	x0, #0xc
	bne .L__configure_el2
    96000090:	54000541 	b.ne	96000138 <skip_shift+0xb4>  // b.any

.L__configure_el3:
	mov x0, #0x30
    96000094:	d2800600 	mov	x0, #0x30                  	// #48
	orr x0, x0, #(1 << 10)	/* Ensure 64bit EL2 */
    96000098:	b2760000 	orr	x0, x0, #0x400
	orr x0, x0, #(1 << 0)	/* Ensure non-secure lower EL */
    9600009c:	b2400000 	orr	x0, x0, #0x1
	msr scr_el3, x0
    960000a0:	d51e1100 	msr	scr_el3, x0

	/* Disable coprocessor traps to EL3 */
	msr cptr_el3, xzr
    960000a4:	d51e115f 	msr	cptr_el3, xzr

	msr sctlr_el2, xzr
    960000a8:	d51c101f 	msr	sctlr_el2, xzr

	/* If Secure-OS is loaded, skip GIC programming */
	ldr x20, [x19, #(CPUPARAMS_TOS_START_OFFSET)]
    960000ac:	f9523674 	ldr	x20, [x19, #9320]
	cbnz x20, .L__configure_gic_done
    960000b0:	b50002f4 	cbnz	x20, 9600010c <skip_shift+0x88>

	/* Configure GIC */
.L_configure_gic:
	adr x0, GicDistBase
    960000b4:	10fffb20 	adr	x0, 96000018 <GicDistBase>
	ldr w1, [x0]
    960000b8:	b9400001 	ldr	w1, [x0]
	mrs x0, mpidr_el1
    960000bc:	d53800a0 	mrs	x0, mpidr_el1
	tst x0, #0xf
    960000c0:	f2400c1f 	tst	x0, #0xf
	bne .L__configure_gic_dist_local
    960000c4:	54000161 	b.ne	960000f0 <skip_shift+0x6c>  // b.any
.L__configure_gic_dist:
	/* Enable Group0 and Group 1 interrupts */
	mov w0, #3
    960000c8:	52800060 	mov	w0, #0x3                   	// #3
	str w0, [x1, #0x0] /* GICD_CTRL */
    960000cc:	b9000020 	str	w0, [x1]
	add x2, x1, #0x84  /* GICD_IGROUP1 */
    960000d0:	91021022 	add	x2, x1, #0x84
	/* Configure all SPIs as non-secure interrupts on core-0 */
	movn w3, #0
    960000d4:	12800003 	mov	w3, #0xffffffff            	// #-1
	str w3, [x2], #4
    960000d8:	b8004443 	str	w3, [x2], #4
	str w3, [x2], #4
    960000dc:	b8004443 	str	w3, [x2], #4
	str w3, [x2], #4
    960000e0:	b8004443 	str	w3, [x2], #4
	str w3, [x2], #4
    960000e4:	b8004443 	str	w3, [x2], #4
	str w3, [x2], #4
    960000e8:	b8004443 	str	w3, [x2], #4
	str w3, [x2], #4
    960000ec:	b8004443 	str	w3, [x2], #4
.L__configure_gic_dist_local:
	/* SGIs and PPIs for all cores are marked non-secure */
	str w3, [x1, #0x80]
    960000f0:	b9008023 	str	w3, [x1, #128]
.L__configure_gic_cpu:
	adr x0, GicCpuBase
    960000f4:	10fff940 	adr	x0, 9600001c <GicCpuBase>
	ldr w2, [x0]
    960000f8:	b9400002 	ldr	w2, [x0]
	mov x0, #3
    960000fc:	d2800060 	mov	x0, #0x3                   	// #3
	str w0, [x2]	   /* GICC_CTRL */
    96000100:	b9000040 	str	w0, [x2]
	mov x0, #1 << 7    /* Allow NS access to GICC_PMR */
    96000104:	d2801000 	mov	x0, #0x80                  	// #128
	str w0, [x2, #4]   /* GICC_PMR */
    96000108:	b9000440 	str	w0, [x2, #4]
	/* Jump to EL3 configure routine */
	bl nvtboot_cpu_tzinit
#endif

	/* Prepare for jump to SecureOS */
	ldr x10, CpuBlParams
    9600010c:	58fff82a 	ldr	x10, 96000010 <CpuBlParams>
	ldr x8, [x10, #(CPUPARAMS_TOS_START_OFFSET)]
    96000110:	f9523548 	ldr	x8, [x10, #9320]
	/* If TLK is not loaded (SecureOsAddr = 0) skip jump to SecureOS */
	cbz x8, .L__configure_el2
    96000114:	b4000128 	cbz	x8, 96000138 <skip_shift+0xb4>

	mov x11, #(CPUPARAMS_TOS_PARAMS_OFFSET)
    96000118:	d284890b 	mov	x11, #0x2448                	// #9288
	add x11, x10, x11
    9600011c:	8b0b014b 	add	x11, x10, x11
	ldp x0, x1, [x11, #0x00]
    96000120:	a9400560 	ldp	x0, x1, [x11]
	ldp x2, x3, [x11, #0x10]
    96000124:	a9410d62 	ldp	x2, x3, [x11, #16]
	cbz x2, 1f
    96000128:	b4000062 	cbz	x2, 96000134 <skip_shift+0xb0>
	/*
	 * Fill in non-secure world's entrypoint address; Tboot-BPMP stores
	 * a pointer in x2 that the secure monitor would use during its
	 * boot.
	 */
	adr x10, .L__real_start
    9600012c:	10fff7aa 	adr	x10, 96000020 <GicCpuBase+0x4>
	str x10, [x2]
    96000130:	f900004a 	str	x10, [x2]
1:
	blr x8
    96000134:	d63f0100 	blr	x8

.L__configure_el2:
	mrs x0, CurrentEL
    96000138:	d5384240 	mrs	x0, currentel
	cmp x0, #0x4
    9600013c:	f100101f 	cmp	x0, #0x4
	blt .L__configure_el2_skip
    96000140:	540000ab 	b.lt	96000154 <skip_shift+0xd0>  // b.tstop

	mov x0, #(1 << 31)		/* Ensure 64bit EL1 */
    96000144:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
	orr x0, x0, #(1 << 27)  /* Route non-secure interrupts to EL2 */
    96000148:	b2650000 	orr	x0, x0, #0x8000000
	orr x0, x0, #(1 << 5)	/* Take async-aborts in EL2 */
    9600014c:	b27b0000 	orr	x0, x0, #0x20
	msr hcr_el2, x0
    96000150:	d51c1100 	msr	hcr_el2, x0
.L__configure_el2_skip:

	/* Allow FPU accesses */
	mov x0, #(3 << 20)
    96000154:	d2a00600 	mov	x0, #0x300000              	// #3145728
	msr cpacr_el1, x0
    96000158:	d5181040 	msr	cpacr_el1, x0

	/* Ensure we use exception stack */
	msr spsel, #1
    9600015c:	d50041bf 	msr	spsel, #0x1
	adr x0, __stack_end
    96000160:	1036f500 	adr	x0, 9606e000 <__bss_start>
	mov sp, x0
    96000164:	9100001f 	mov	sp, x0

	/* clear bss */
.L__do_bss:
	/* NOTE: relies on __bss_start and __bss_end being 8 byte aligned */
	adr x0, __bss_start
    96000168:	1036f4c0 	adr	x0, 9606e000 <__bss_start>
	adr x1, __bss_end
    9600016c:	103b5ca1 	adr	x1, 96076d00 <__bss_end>
	mov x2, #0
    96000170:	d2800002 	mov	x2, #0x0                   	// #0
	sub x1, x1, x0
    96000174:	cb000021 	sub	x1, x1, x0
	cbz x1, 2f
    96000178:	b4000081 	cbz	x1, 96000188 <skip_shift+0x104>
1:
	sub x1, x1, #8
    9600017c:	d1002021 	sub	x1, x1, #0x8
	str x2, [x0], #8
    96000180:	f8008402 	str	x2, [x0], #8
	cbnz x1, 1b
    96000184:	b5ffffc1 	cbnz	x1, 9600017c <skip_shift+0xf8>
2:

#if WITH_CPU_EARLY_INIT
	/* call platform/arch/etc specific init code */
	bl __cpu_early_init
    96000188:	940085d0 	bl	960218c8 <__cpu_early_init>
#endif

	bl	lk_main
    9600018c:	94000eba 	bl	96003c74 <lk_main>
	b	.
    96000190:	14000000 	b	96000190 <skip_shift+0x10c>
    96000194:	80000000 	.word	0x80000000
    96000198:	96000000 	.word	0x96000000
	...

0000000096001000 <arm64_exception_base>:

FUNCTION(arm64_exception_base)

/* exceptions from current EL, using SP0 */
LOCAL_FUNCTION(arm64_sync_exc_current_el_SP0)
    invalid_exception 0
    96001000:	d51bd040 	msr	tpidr_el0, x0
    96001004:	d518d09e 	msr	tpidr_el1, x30
    96001008:	94000206 	bl	96001820 <vfp_save_long>
    9600100c:	d53bd040 	mrs	x0, tpidr_el0
    96001010:	d10083ff 	sub	sp, sp, #0x20
    96001014:	9400024d 	bl	96001948 <gpr_save_long>
    96001018:	d538d09e 	mrs	x30, tpidr_el1
    9600101c:	9103c3e0 	add	x0, sp, #0xf0
    96001020:	d53c4021 	mrs	x1, elr_el2
    96001024:	d53c4002 	mrs	x2, spsr_el2
    96001028:	a90f03fe 	stp	x30, x0, [sp, #240]
    9600102c:	a9100be1 	stp	x1, x2, [sp, #256]
    96001030:	d2800001 	mov	x1, #0x0                   	// #0
    96001034:	910003e0 	mov	x0, sp
    96001038:	940008ba 	bl	96003320 <arm64_invalid_exception>
    9600103c:	14000000 	b	9600103c <arm64_exception_base+0x3c>
	...

0000000096001080 <arm64_irq_current_el_SP0>:

.org 0x080
LOCAL_FUNCTION(arm64_irq_current_el_SP0)
    invalid_exception 1
    96001080:	d51bd040 	msr	tpidr_el0, x0
    96001084:	d518d09e 	msr	tpidr_el1, x30
    96001088:	940001e6 	bl	96001820 <vfp_save_long>
    9600108c:	d53bd040 	mrs	x0, tpidr_el0
    96001090:	d10083ff 	sub	sp, sp, #0x20
    96001094:	9400022d 	bl	96001948 <gpr_save_long>
    96001098:	d538d09e 	mrs	x30, tpidr_el1
    9600109c:	9103c3e0 	add	x0, sp, #0xf0
    960010a0:	d53c4021 	mrs	x1, elr_el2
    960010a4:	d53c4002 	mrs	x2, spsr_el2
    960010a8:	a90f03fe 	stp	x30, x0, [sp, #240]
    960010ac:	a9100be1 	stp	x1, x2, [sp, #256]
    960010b0:	d2800021 	mov	x1, #0x1                   	// #1
    960010b4:	910003e0 	mov	x0, sp
    960010b8:	9400089a 	bl	96003320 <arm64_invalid_exception>
    960010bc:	14000000 	b	960010bc <arm64_irq_current_el_SP0+0x3c>
	...

0000000096001100 <arm64_fiq_current_el_SP0>:

.org 0x100
LOCAL_FUNCTION(arm64_fiq_current_el_SP0)
    invalid_exception 2
    96001100:	d51bd040 	msr	tpidr_el0, x0
    96001104:	d518d09e 	msr	tpidr_el1, x30
    96001108:	940001c6 	bl	96001820 <vfp_save_long>
    9600110c:	d53bd040 	mrs	x0, tpidr_el0
    96001110:	d10083ff 	sub	sp, sp, #0x20
    96001114:	9400020d 	bl	96001948 <gpr_save_long>
    96001118:	d538d09e 	mrs	x30, tpidr_el1
    9600111c:	9103c3e0 	add	x0, sp, #0xf0
    96001120:	d53c4021 	mrs	x1, elr_el2
    96001124:	d53c4002 	mrs	x2, spsr_el2
    96001128:	a90f03fe 	stp	x30, x0, [sp, #240]
    9600112c:	a9100be1 	stp	x1, x2, [sp, #256]
    96001130:	d2800041 	mov	x1, #0x2                   	// #2
    96001134:	910003e0 	mov	x0, sp
    96001138:	9400087a 	bl	96003320 <arm64_invalid_exception>
    9600113c:	14000000 	b	9600113c <arm64_fiq_current_el_SP0+0x3c>
	...

0000000096001180 <arm64_err_exc_current_el_SP0>:

.org 0x180
LOCAL_FUNCTION(arm64_err_exc_current_el_SP0)
    invalid_exception 3
    96001180:	d51bd040 	msr	tpidr_el0, x0
    96001184:	d518d09e 	msr	tpidr_el1, x30
    96001188:	940001a6 	bl	96001820 <vfp_save_long>
    9600118c:	d53bd040 	mrs	x0, tpidr_el0
    96001190:	d10083ff 	sub	sp, sp, #0x20
    96001194:	940001ed 	bl	96001948 <gpr_save_long>
    96001198:	d538d09e 	mrs	x30, tpidr_el1
    9600119c:	9103c3e0 	add	x0, sp, #0xf0
    960011a0:	d53c4021 	mrs	x1, elr_el2
    960011a4:	d53c4002 	mrs	x2, spsr_el2
    960011a8:	a90f03fe 	stp	x30, x0, [sp, #240]
    960011ac:	a9100be1 	stp	x1, x2, [sp, #256]
    960011b0:	d2800061 	mov	x1, #0x3                   	// #3
    960011b4:	910003e0 	mov	x0, sp
    960011b8:	9400085a 	bl	96003320 <arm64_invalid_exception>
    960011bc:	14000000 	b	960011bc <arm64_err_exc_current_el_SP0+0x3c>
	...

0000000096001200 <arm64_sync_exc_current_el_SPx>:

/* exceptions from current EL, using SPx */
.org 0x200
LOCAL_FUNCTION(arm64_sync_exc_current_el_SPx)
    regsave_long
    96001200:	d51bd040 	msr	tpidr_el0, x0
    96001204:	d518d09e 	msr	tpidr_el1, x30
    96001208:	94000186 	bl	96001820 <vfp_save_long>
    9600120c:	d53bd040 	mrs	x0, tpidr_el0
    96001210:	d10083ff 	sub	sp, sp, #0x20
    96001214:	940001cd 	bl	96001948 <gpr_save_long>
    96001218:	d538d09e 	mrs	x30, tpidr_el1
    9600121c:	9103c3e0 	add	x0, sp, #0xf0
    96001220:	d53c4021 	mrs	x1, elr_el2
    96001224:	d53c4002 	mrs	x2, spsr_el2
    96001228:	a90f03fe 	stp	x30, x0, [sp, #240]
    9600122c:	a9100be1 	stp	x1, x2, [sp, #256]
    mov x0, sp
    96001230:	910003e0 	mov	x0, sp
    bl  arm64_sync_exception
    96001234:	9400081b 	bl	960032a0 <arm64_sync_exception>
    b  arm64_exc_shared_restore_long
    96001238:	14000162 	b	960017c0 <arm64_exc_shared_restore_long>
	...

0000000096001280 <arm64_irq_current_el_SPx>:

.org 0x280
LOCAL_FUNCTION(arm64_irq_current_el_SPx)
    regsave_short
    96001280:	d51bd040 	msr	tpidr_el0, x0
    96001284:	d518d09e 	msr	tpidr_el1, x30
    96001288:	9400017b 	bl	96001874 <vfp_save_short>
    9600128c:	d53bd040 	mrs	x0, tpidr_el0
    96001290:	d10083ff 	sub	sp, sp, #0x20
    96001294:	940001bd 	bl	96001988 <gpr_save_short>
    96001298:	d538d09e 	mrs	x30, tpidr_el1
    9600129c:	910243e0 	add	x0, sp, #0x90
    960012a0:	d53c4021 	mrs	x1, elr_el2
    960012a4:	d53c4002 	mrs	x2, spsr_el2
    960012a8:	a90903fe 	stp	x30, x0, [sp, #144]
    960012ac:	a90a0be1 	stp	x1, x2, [sp, #160]
    mov x0, sp
    960012b0:	910003e0 	mov	x0, sp
    bl  platform_irq
    960012b4:	94008186 	bl	960218cc <platform_irq>
    b  arm64_exc_shared_restore_short
    960012b8:	1400014e 	b	960017f0 <arm64_exc_shared_restore_short>
	...

0000000096001300 <arm64_fiq_current_el_SPx>:

.org 0x300
LOCAL_FUNCTION(arm64_fiq_current_el_SPx)
    regsave_short
    96001300:	d51bd040 	msr	tpidr_el0, x0
    96001304:	d518d09e 	msr	tpidr_el1, x30
    96001308:	9400015b 	bl	96001874 <vfp_save_short>
    9600130c:	d53bd040 	mrs	x0, tpidr_el0
    96001310:	d10083ff 	sub	sp, sp, #0x20
    96001314:	9400019d 	bl	96001988 <gpr_save_short>
    96001318:	d538d09e 	mrs	x30, tpidr_el1
    9600131c:	910243e0 	add	x0, sp, #0x90
    96001320:	d53c4021 	mrs	x1, elr_el2
    96001324:	d53c4002 	mrs	x2, spsr_el2
    96001328:	a90903fe 	stp	x30, x0, [sp, #144]
    9600132c:	a90a0be1 	stp	x1, x2, [sp, #160]
    mov x0, sp
    96001330:	910003e0 	mov	x0, sp
    bl  platform_fiq
    96001334:	94008195 	bl	96021988 <platform_fiq>
    b  arm64_exc_shared_restore_short
    96001338:	1400012e 	b	960017f0 <arm64_exc_shared_restore_short>
	...

0000000096001380 <arm64_err_exc_current_el_SPx>:

.org 0x380
LOCAL_FUNCTION(arm64_err_exc_current_el_SPx)
    invalid_exception 0x13
    96001380:	d51bd040 	msr	tpidr_el0, x0
    96001384:	d518d09e 	msr	tpidr_el1, x30
    96001388:	94000126 	bl	96001820 <vfp_save_long>
    9600138c:	d53bd040 	mrs	x0, tpidr_el0
    96001390:	d10083ff 	sub	sp, sp, #0x20
    96001394:	9400016d 	bl	96001948 <gpr_save_long>
    96001398:	d538d09e 	mrs	x30, tpidr_el1
    9600139c:	9103c3e0 	add	x0, sp, #0xf0
    960013a0:	d53c4021 	mrs	x1, elr_el2
    960013a4:	d53c4002 	mrs	x2, spsr_el2
    960013a8:	a90f03fe 	stp	x30, x0, [sp, #240]
    960013ac:	a9100be1 	stp	x1, x2, [sp, #256]
    960013b0:	d2800261 	mov	x1, #0x13                  	// #19
    960013b4:	910003e0 	mov	x0, sp
    960013b8:	940007da 	bl	96003320 <arm64_invalid_exception>
    960013bc:	14000000 	b	960013bc <arm64_err_exc_current_el_SPx+0x3c>
	...

0000000096001400 <arm64_sync_exc_lower_el_64>:

/* exceptions from lower EL, running arm64 */
.org 0x400
LOCAL_FUNCTION(arm64_sync_exc_lower_el_64)
    invalid_exception 0x20
    96001400:	d51bd040 	msr	tpidr_el0, x0
    96001404:	d518d09e 	msr	tpidr_el1, x30
    96001408:	94000106 	bl	96001820 <vfp_save_long>
    9600140c:	d53bd040 	mrs	x0, tpidr_el0
    96001410:	d10083ff 	sub	sp, sp, #0x20
    96001414:	9400014d 	bl	96001948 <gpr_save_long>
    96001418:	d538d09e 	mrs	x30, tpidr_el1
    9600141c:	9103c3e0 	add	x0, sp, #0xf0
    96001420:	d53c4021 	mrs	x1, elr_el2
    96001424:	d53c4002 	mrs	x2, spsr_el2
    96001428:	a90f03fe 	stp	x30, x0, [sp, #240]
    9600142c:	a9100be1 	stp	x1, x2, [sp, #256]
    96001430:	d2800401 	mov	x1, #0x20                  	// #32
    96001434:	910003e0 	mov	x0, sp
    96001438:	940007ba 	bl	96003320 <arm64_invalid_exception>
    9600143c:	14000000 	b	9600143c <arm64_sync_exc_lower_el_64+0x3c>
	...

0000000096001480 <arm64_irq_lower_el_64>:

.org 0x480
LOCAL_FUNCTION(arm64_irq_lower_el_64)
    invalid_exception 0x21
    96001480:	d51bd040 	msr	tpidr_el0, x0
    96001484:	d518d09e 	msr	tpidr_el1, x30
    96001488:	940000e6 	bl	96001820 <vfp_save_long>
    9600148c:	d53bd040 	mrs	x0, tpidr_el0
    96001490:	d10083ff 	sub	sp, sp, #0x20
    96001494:	9400012d 	bl	96001948 <gpr_save_long>
    96001498:	d538d09e 	mrs	x30, tpidr_el1
    9600149c:	9103c3e0 	add	x0, sp, #0xf0
    960014a0:	d53c4021 	mrs	x1, elr_el2
    960014a4:	d53c4002 	mrs	x2, spsr_el2
    960014a8:	a90f03fe 	stp	x30, x0, [sp, #240]
    960014ac:	a9100be1 	stp	x1, x2, [sp, #256]
    960014b0:	d2800421 	mov	x1, #0x21                  	// #33
    960014b4:	910003e0 	mov	x0, sp
    960014b8:	9400079a 	bl	96003320 <arm64_invalid_exception>
    960014bc:	14000000 	b	960014bc <arm64_irq_lower_el_64+0x3c>
	...

0000000096001500 <arm64_fiq_lower_el_64>:

.org 0x500
LOCAL_FUNCTION(arm64_fiq_lower_el_64)
    invalid_exception 0x22
    96001500:	d51bd040 	msr	tpidr_el0, x0
    96001504:	d518d09e 	msr	tpidr_el1, x30
    96001508:	940000c6 	bl	96001820 <vfp_save_long>
    9600150c:	d53bd040 	mrs	x0, tpidr_el0
    96001510:	d10083ff 	sub	sp, sp, #0x20
    96001514:	9400010d 	bl	96001948 <gpr_save_long>
    96001518:	d538d09e 	mrs	x30, tpidr_el1
    9600151c:	9103c3e0 	add	x0, sp, #0xf0
    96001520:	d53c4021 	mrs	x1, elr_el2
    96001524:	d53c4002 	mrs	x2, spsr_el2
    96001528:	a90f03fe 	stp	x30, x0, [sp, #240]
    9600152c:	a9100be1 	stp	x1, x2, [sp, #256]
    96001530:	d2800441 	mov	x1, #0x22                  	// #34
    96001534:	910003e0 	mov	x0, sp
    96001538:	9400077a 	bl	96003320 <arm64_invalid_exception>
    9600153c:	14000000 	b	9600153c <arm64_fiq_lower_el_64+0x3c>
	...

0000000096001580 <arm64_err_exc_lower_el_64>:

.org 0x580
LOCAL_FUNCTION(arm64_err_exc_lower_el_64)
    invalid_exception 0x23
    96001580:	d51bd040 	msr	tpidr_el0, x0
    96001584:	d518d09e 	msr	tpidr_el1, x30
    96001588:	940000a6 	bl	96001820 <vfp_save_long>
    9600158c:	d53bd040 	mrs	x0, tpidr_el0
    96001590:	d10083ff 	sub	sp, sp, #0x20
    96001594:	940000ed 	bl	96001948 <gpr_save_long>
    96001598:	d538d09e 	mrs	x30, tpidr_el1
    9600159c:	9103c3e0 	add	x0, sp, #0xf0
    960015a0:	d53c4021 	mrs	x1, elr_el2
    960015a4:	d53c4002 	mrs	x2, spsr_el2
    960015a8:	a90f03fe 	stp	x30, x0, [sp, #240]
    960015ac:	a9100be1 	stp	x1, x2, [sp, #256]
    960015b0:	d2800461 	mov	x1, #0x23                  	// #35
    960015b4:	910003e0 	mov	x0, sp
    960015b8:	9400075a 	bl	96003320 <arm64_invalid_exception>
    960015bc:	14000000 	b	960015bc <arm64_err_exc_lower_el_64+0x3c>
	...

0000000096001600 <arm64_sync_exc_lower_el_32>:

/* exceptions from lower EL, running arm32 */
.org 0x600
LOCAL_FUNCTION(arm64_sync_exc_lower_el_32)
    invalid_exception 0x30
    96001600:	d51bd040 	msr	tpidr_el0, x0
    96001604:	d518d09e 	msr	tpidr_el1, x30
    96001608:	94000086 	bl	96001820 <vfp_save_long>
    9600160c:	d53bd040 	mrs	x0, tpidr_el0
    96001610:	d10083ff 	sub	sp, sp, #0x20
    96001614:	940000cd 	bl	96001948 <gpr_save_long>
    96001618:	d538d09e 	mrs	x30, tpidr_el1
    9600161c:	9103c3e0 	add	x0, sp, #0xf0
    96001620:	d53c4021 	mrs	x1, elr_el2
    96001624:	d53c4002 	mrs	x2, spsr_el2
    96001628:	a90f03fe 	stp	x30, x0, [sp, #240]
    9600162c:	a9100be1 	stp	x1, x2, [sp, #256]
    96001630:	d2800601 	mov	x1, #0x30                  	// #48
    96001634:	910003e0 	mov	x0, sp
    96001638:	9400073a 	bl	96003320 <arm64_invalid_exception>
    9600163c:	14000000 	b	9600163c <arm64_sync_exc_lower_el_32+0x3c>
	...

0000000096001680 <arm64_irq_lower_el_32>:

.org 0x680
LOCAL_FUNCTION(arm64_irq_lower_el_32)
    invalid_exception 0x31
    96001680:	d51bd040 	msr	tpidr_el0, x0
    96001684:	d518d09e 	msr	tpidr_el1, x30
    96001688:	94000066 	bl	96001820 <vfp_save_long>
    9600168c:	d53bd040 	mrs	x0, tpidr_el0
    96001690:	d10083ff 	sub	sp, sp, #0x20
    96001694:	940000ad 	bl	96001948 <gpr_save_long>
    96001698:	d538d09e 	mrs	x30, tpidr_el1
    9600169c:	9103c3e0 	add	x0, sp, #0xf0
    960016a0:	d53c4021 	mrs	x1, elr_el2
    960016a4:	d53c4002 	mrs	x2, spsr_el2
    960016a8:	a90f03fe 	stp	x30, x0, [sp, #240]
    960016ac:	a9100be1 	stp	x1, x2, [sp, #256]
    960016b0:	d2800621 	mov	x1, #0x31                  	// #49
    960016b4:	910003e0 	mov	x0, sp
    960016b8:	9400071a 	bl	96003320 <arm64_invalid_exception>
    960016bc:	14000000 	b	960016bc <arm64_irq_lower_el_32+0x3c>
	...

0000000096001700 <arm64_fiq_lower_el_32>:

.org 0x700
LOCAL_FUNCTION(arm64_fiq_lower_el_32)
    invalid_exception 0x32
    96001700:	d51bd040 	msr	tpidr_el0, x0
    96001704:	d518d09e 	msr	tpidr_el1, x30
    96001708:	94000046 	bl	96001820 <vfp_save_long>
    9600170c:	d53bd040 	mrs	x0, tpidr_el0
    96001710:	d10083ff 	sub	sp, sp, #0x20
    96001714:	9400008d 	bl	96001948 <gpr_save_long>
    96001718:	d538d09e 	mrs	x30, tpidr_el1
    9600171c:	9103c3e0 	add	x0, sp, #0xf0
    96001720:	d53c4021 	mrs	x1, elr_el2
    96001724:	d53c4002 	mrs	x2, spsr_el2
    96001728:	a90f03fe 	stp	x30, x0, [sp, #240]
    9600172c:	a9100be1 	stp	x1, x2, [sp, #256]
    96001730:	d2800641 	mov	x1, #0x32                  	// #50
    96001734:	910003e0 	mov	x0, sp
    96001738:	940006fa 	bl	96003320 <arm64_invalid_exception>
    9600173c:	14000000 	b	9600173c <arm64_fiq_lower_el_32+0x3c>
	...

0000000096001780 <arm64_err_exc_lower_el_32>:

.org 0x780
LOCAL_FUNCTION(arm64_err_exc_lower_el_32)
    invalid_exception 0x33
    96001780:	d51bd040 	msr	tpidr_el0, x0
    96001784:	d518d09e 	msr	tpidr_el1, x30
    96001788:	94000026 	bl	96001820 <vfp_save_long>
    9600178c:	d53bd040 	mrs	x0, tpidr_el0
    96001790:	d10083ff 	sub	sp, sp, #0x20
    96001794:	9400006d 	bl	96001948 <gpr_save_long>
    96001798:	d538d09e 	mrs	x30, tpidr_el1
    9600179c:	9103c3e0 	add	x0, sp, #0xf0
    960017a0:	d53c4021 	mrs	x1, elr_el2
    960017a4:	d53c4002 	mrs	x2, spsr_el2
    960017a8:	a90f03fe 	stp	x30, x0, [sp, #240]
    960017ac:	a9100be1 	stp	x1, x2, [sp, #256]
    960017b0:	d2800661 	mov	x1, #0x33                  	// #51
    960017b4:	910003e0 	mov	x0, sp
    960017b8:	940006da 	bl	96003320 <arm64_invalid_exception>
    960017bc:	14000000 	b	960017bc <arm64_err_exc_lower_el_32+0x3c>

00000000960017c0 <arm64_exc_shared_restore_long>:

LOCAL_FUNCTION(arm64_exc_shared_restore_long)
    regrestore_long
    960017c0:	9103c3ff 	add	sp, sp, #0xf0
    960017c4:	f84107fe 	ldr	x30, [sp], #16
    960017c8:	d518d09e 	msr	tpidr_el1, x30
    960017cc:	a8c10be1 	ldp	x1, x2, [sp], #16
    960017d0:	d51c4021 	msr	elr_el2, x1
    960017d4:	d51c4002 	msr	spsr_el2, x2
    960017d8:	94000038 	bl	960018b8 <vfp_restore_long>
    960017dc:	d10c83ff 	sub	sp, sp, #0x320
    960017e0:	94000074 	bl	960019b0 <gpr_restore_long>
    960017e4:	d538d09e 	mrs	x30, tpidr_el1
    960017e8:	9108c3ff 	add	sp, sp, #0x230
    eret
    960017ec:	d69f03e0 	eret

00000000960017f0 <arm64_exc_shared_restore_short>:

LOCAL_FUNCTION(arm64_exc_shared_restore_short)
	regrestore_short
    960017f0:	910243ff 	add	sp, sp, #0x90
    960017f4:	f84107fe 	ldr	x30, [sp], #16
    960017f8:	d518d09e 	msr	tpidr_el1, x30
    960017fc:	a8c10be1 	ldp	x1, x2, [sp], #16
    96001800:	d51c4021 	msr	elr_el2, x1
    96001804:	d51c4002 	msr	spsr_el2, x2
    96001808:	94000040 	bl	96001908 <vfp_restore_short>
    9600180c:	d10903ff 	sub	sp, sp, #0x240
    96001810:	94000078 	bl	960019f0 <gpr_restore_short>
    96001814:	d538d09e 	mrs	x30, tpidr_el1
    96001818:	9106c3ff 	add	sp, sp, #0x1b0
	eret
    9600181c:	d69f03e0 	eret

0000000096001820 <vfp_save_long>:
.macro pop_fp ra, rb
ldp \ra, \rb, [sp], #32
.endm

LOCAL_FUNCTION(vfp_save_long)
	mrs x0, fpcr
    96001820:	d53b4400 	mrs	x0, fpcr
	str x0, [sp,#-8]!
    96001824:	f81f8fe0 	str	x0, [sp, #-8]!
	mrs x0, fpsr
    96001828:	d53b4420 	mrs	x0, fpsr
	str x0, [sp,#-8]!
    9600182c:	f81f8fe0 	str	x0, [sp, #-8]!
	push_fp q30, q31
    96001830:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
	push_fp q28, q29
    96001834:	adbf77fc 	stp	q28, q29, [sp, #-32]!
	push_fp q26, q27
    96001838:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
	push_fp q24, q25
    9600183c:	adbf67f8 	stp	q24, q25, [sp, #-32]!
	push_fp q22, q23
    96001840:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
	push_fp q20, q21
    96001844:	adbf57f4 	stp	q20, q21, [sp, #-32]!
	push_fp q18, q19
    96001848:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
	push_fp q16, q17
    9600184c:	adbf47f0 	stp	q16, q17, [sp, #-32]!
	push_fp q14, q15
    96001850:	adbf3fee 	stp	q14, q15, [sp, #-32]!
	push_fp q12, q13
    96001854:	adbf37ec 	stp	q12, q13, [sp, #-32]!
	push_fp q10, q11
    96001858:	adbf2fea 	stp	q10, q11, [sp, #-32]!
	push_fp q8, q9
    9600185c:	adbf27e8 	stp	q8, q9, [sp, #-32]!
	push_fp q6, q7
    96001860:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
	push_fp q4, q5
    96001864:	adbf17e4 	stp	q4, q5, [sp, #-32]!
	push_fp q2, q3
    96001868:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
	push_fp q0, q1
    9600186c:	adbf07e0 	stp	q0, q1, [sp, #-32]!
	ret
    96001870:	d65f03c0 	ret

0000000096001874 <vfp_save_short>:

LOCAL_FUNCTION(vfp_save_short)
	mrs x0, fpcr
    96001874:	d53b4400 	mrs	x0, fpcr
	str x0, [sp,#-8]!
    96001878:	f81f8fe0 	str	x0, [sp, #-8]!
	mrs x0, fpsr
    9600187c:	d53b4420 	mrs	x0, fpsr
	str x0, [sp,#-8]!
    96001880:	f81f8fe0 	str	x0, [sp, #-8]!
	push_fp q30, q31
    96001884:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
	push_fp q28, q29
    96001888:	adbf77fc 	stp	q28, q29, [sp, #-32]!
	push_fp q26, q27
    9600188c:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
	push_fp q24, q25
    96001890:	adbf67f8 	stp	q24, q25, [sp, #-32]!
	push_fp q22, q23
    96001894:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
	push_fp q20, q21
    96001898:	adbf57f4 	stp	q20, q21, [sp, #-32]!
	push_fp q18, q19
    9600189c:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
	push_fp q16, q17
    960018a0:	adbf47f0 	stp	q16, q17, [sp, #-32]!
	push_fp q6, q7
    960018a4:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
	push_fp q4, q5
    960018a8:	adbf17e4 	stp	q4, q5, [sp, #-32]!
	push_fp q2, q3
    960018ac:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
	push_fp q0, q1
    960018b0:	adbf07e0 	stp	q0, q1, [sp, #-32]!
	ret
    960018b4:	d65f03c0 	ret

00000000960018b8 <vfp_restore_long>:

LOCAL_FUNCTION(vfp_restore_long)
	pop_fp q0, q1
    960018b8:	acc107e0 	ldp	q0, q1, [sp], #32
	pop_fp q2, q3
    960018bc:	acc10fe2 	ldp	q2, q3, [sp], #32
	pop_fp q4, q5
    960018c0:	acc117e4 	ldp	q4, q5, [sp], #32
	pop_fp q6, q7
    960018c4:	acc11fe6 	ldp	q6, q7, [sp], #32
	pop_fp q8, q9
    960018c8:	acc127e8 	ldp	q8, q9, [sp], #32
	pop_fp q10, q11
    960018cc:	acc12fea 	ldp	q10, q11, [sp], #32
	pop_fp q12, q13
    960018d0:	acc137ec 	ldp	q12, q13, [sp], #32
	pop_fp q14, q15
    960018d4:	acc13fee 	ldp	q14, q15, [sp], #32
	pop_fp q16, q17
    960018d8:	acc147f0 	ldp	q16, q17, [sp], #32
	pop_fp q18, q19
    960018dc:	acc14ff2 	ldp	q18, q19, [sp], #32
	pop_fp q20, q21
    960018e0:	acc157f4 	ldp	q20, q21, [sp], #32
	pop_fp q22, q23
    960018e4:	acc15ff6 	ldp	q22, q23, [sp], #32
	pop_fp q24, q25
    960018e8:	acc167f8 	ldp	q24, q25, [sp], #32
	pop_fp q26, q27
    960018ec:	acc16ffa 	ldp	q26, q27, [sp], #32
	pop_fp q28, q29
    960018f0:	acc177fc 	ldp	q28, q29, [sp], #32
	pop_fp q30, q31
    960018f4:	acc17ffe 	ldp	q30, q31, [sp], #32
	pop x0, x1
    960018f8:	a8c107e0 	ldp	x0, x1, [sp], #16
	msr fpsr, x0
    960018fc:	d51b4420 	msr	fpsr, x0
	msr fpcr, x1
    96001900:	d51b4401 	msr	fpcr, x1
	ret
    96001904:	d65f03c0 	ret

0000000096001908 <vfp_restore_short>:

LOCAL_FUNCTION(vfp_restore_short)
	pop_fp q0, q1
    96001908:	acc107e0 	ldp	q0, q1, [sp], #32
	pop_fp q2, q3
    9600190c:	acc10fe2 	ldp	q2, q3, [sp], #32
	pop_fp q4, q5
    96001910:	acc117e4 	ldp	q4, q5, [sp], #32
	pop_fp q6, q7
    96001914:	acc11fe6 	ldp	q6, q7, [sp], #32
	pop_fp q16, q17
    96001918:	acc147f0 	ldp	q16, q17, [sp], #32
	pop_fp q18, q19
    9600191c:	acc14ff2 	ldp	q18, q19, [sp], #32
	pop_fp q20, q21
    96001920:	acc157f4 	ldp	q20, q21, [sp], #32
	pop_fp q22, q23
    96001924:	acc15ff6 	ldp	q22, q23, [sp], #32
	pop_fp q24, q25
    96001928:	acc167f8 	ldp	q24, q25, [sp], #32
	pop_fp q26, q27
    9600192c:	acc16ffa 	ldp	q26, q27, [sp], #32
	pop_fp q28, q29
    96001930:	acc177fc 	ldp	q28, q29, [sp], #32
	pop_fp q30, q31
    96001934:	acc17ffe 	ldp	q30, q31, [sp], #32
	pop x0, x1
    96001938:	a8c107e0 	ldp	x0, x1, [sp], #16
	msr fpsr, x0
    9600193c:	d51b4420 	msr	fpsr, x0
	msr fpcr, x1
    96001940:	d51b4401 	msr	fpcr, x1
	ret
    96001944:	d65f03c0 	ret

0000000096001948 <gpr_save_long>:

LOCAL_FUNCTION(gpr_save_long)
	push x28, x29
    96001948:	a9bf77fc 	stp	x28, x29, [sp, #-16]!
	push x26, x27
    9600194c:	a9bf6ffa 	stp	x26, x27, [sp, #-16]!
	push x24, x25
    96001950:	a9bf67f8 	stp	x24, x25, [sp, #-16]!
	push x22, x23
    96001954:	a9bf5ff6 	stp	x22, x23, [sp, #-16]!
	push x20, x21
    96001958:	a9bf57f4 	stp	x20, x21, [sp, #-16]!
	push x18, x19
    9600195c:	a9bf4ff2 	stp	x18, x19, [sp, #-16]!
	push x16, x17
    96001960:	a9bf47f0 	stp	x16, x17, [sp, #-16]!
	push x14, x15
    96001964:	a9bf3fee 	stp	x14, x15, [sp, #-16]!
	push x12, x13
    96001968:	a9bf37ec 	stp	x12, x13, [sp, #-16]!
	push x10, x11
    9600196c:	a9bf2fea 	stp	x10, x11, [sp, #-16]!
	push x8, x9
    96001970:	a9bf27e8 	stp	x8, x9, [sp, #-16]!
	push x6, x7
    96001974:	a9bf1fe6 	stp	x6, x7, [sp, #-16]!
	push x4, x5
    96001978:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
	push x2, x3
    9600197c:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
	push x0, x1
    96001980:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
	ret
    96001984:	d65f03c0 	ret

0000000096001988 <gpr_save_short>:

LOCAL_FUNCTION(gpr_save_short)
	push x16, x17
    96001988:	a9bf47f0 	stp	x16, x17, [sp, #-16]!
	push x14, x15
    9600198c:	a9bf3fee 	stp	x14, x15, [sp, #-16]!
	push x12, x13
    96001990:	a9bf37ec 	stp	x12, x13, [sp, #-16]!
	push x10, x11
    96001994:	a9bf2fea 	stp	x10, x11, [sp, #-16]!
	push x8, x9
    96001998:	a9bf27e8 	stp	x8, x9, [sp, #-16]!
	push x6, x7
    9600199c:	a9bf1fe6 	stp	x6, x7, [sp, #-16]!
	push x4, x5
    960019a0:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
	push x2, x3
    960019a4:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
	push x0, x1
    960019a8:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
	ret
    960019ac:	d65f03c0 	ret

00000000960019b0 <gpr_restore_long>:

LOCAL_FUNCTION(gpr_restore_long)
	pop x0, x1
    960019b0:	a8c107e0 	ldp	x0, x1, [sp], #16
	pop x2, x3
    960019b4:	a8c10fe2 	ldp	x2, x3, [sp], #16
	pop x4, x5
    960019b8:	a8c117e4 	ldp	x4, x5, [sp], #16
	pop x6, x7
    960019bc:	a8c11fe6 	ldp	x6, x7, [sp], #16
	pop x8, x9
    960019c0:	a8c127e8 	ldp	x8, x9, [sp], #16
	pop x10, x11
    960019c4:	a8c12fea 	ldp	x10, x11, [sp], #16
	pop x12, x13
    960019c8:	a8c137ec 	ldp	x12, x13, [sp], #16
	pop x14, x15
    960019cc:	a8c13fee 	ldp	x14, x15, [sp], #16
	pop x16, x17
    960019d0:	a8c147f0 	ldp	x16, x17, [sp], #16
	pop x18, x19
    960019d4:	a8c14ff2 	ldp	x18, x19, [sp], #16
	pop x20, x21
    960019d8:	a8c157f4 	ldp	x20, x21, [sp], #16
	pop x22, x23
    960019dc:	a8c15ff6 	ldp	x22, x23, [sp], #16
	pop x24, x25
    960019e0:	a8c167f8 	ldp	x24, x25, [sp], #16
	pop x26, x27
    960019e4:	a8c16ffa 	ldp	x26, x27, [sp], #16
	pop x28, x29
    960019e8:	a8c177fc 	ldp	x28, x29, [sp], #16
	ret
    960019ec:	d65f03c0 	ret

00000000960019f0 <gpr_restore_short>:

LOCAL_FUNCTION(gpr_restore_short)
	pop x0, x1
    960019f0:	a8c107e0 	ldp	x0, x1, [sp], #16
	pop x2, x3
    960019f4:	a8c10fe2 	ldp	x2, x3, [sp], #16
	pop x4, x5
    960019f8:	a8c117e4 	ldp	x4, x5, [sp], #16
	pop x6, x7
    960019fc:	a8c11fe6 	ldp	x6, x7, [sp], #16
	pop x8, x9
    96001a00:	a8c127e8 	ldp	x8, x9, [sp], #16
	pop x10, x11
    96001a04:	a8c12fea 	ldp	x10, x11, [sp], #16
	pop x12, x13
    96001a08:	a8c137ec 	ldp	x12, x13, [sp], #16
	pop x14, x15
    96001a0c:	a8c13fee 	ldp	x14, x15, [sp], #16
	pop x16, x17
    96001a10:	a8c147f0 	ldp	x16, x17, [sp], #16
	ret
    96001a14:	d65f03c0 	ret

0000000096001a18 <platform_early_init>:

	return TEGRABL_NO_ERROR;
}

status_t platform_early_init(void)
{
    96001a18:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96001a1c:	910003fd 	mov	x29, sp
    96001a20:	a90153f3 	stp	x19, x20, [sp, #16]
    96001a24:	a9025bf5 	stp	x21, x22, [sp, #32]
	status_t error;
	carve_out_type_t carveout;
	/* IPC initialization to use BPMP for clk config*/
	error = tegrabl_ipc_init();
    96001a28:	94006f0f 	bl	9601d664 <tegrabl_ipc_init>
    96001a2c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96001a30:	35000120 	cbnz	w0, 96001a54 <platform_early_init+0x3c>
		goto fail;
	}

	if (boot_params == NULL) {
    96001a34:	b00003b3 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96001a38:	aa1303f5 	mov	x21, x19
    96001a3c:	f9462260 	ldr	x0, [x19, #3136]
    96001a40:	b5000140 	cbnz	x0, 96001a68 <platform_early_init+0x50>
		pr_critical("boot_param is null\n");
		error = TEGRABL_ERR_INVALID;
    96001a44:	52800053 	mov	w19, #0x2                   	// #2
		pr_critical("boot_param is null\n");
    96001a48:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001a4c:	912ae000 	add	x0, x0, #0xab8
    96001a50:	94008308 	bl	96022670 <tegrabl_printf>
	/* initialize the timer block */
	platform_init_timer();

fail:
	return error;
}
    96001a54:	2a1303e0 	mov	w0, w19
    96001a58:	a94153f3 	ldp	x19, x20, [sp, #16]
    96001a5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96001a60:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96001a64:	d65f03c0 	ret
	int64_t cboot_init_timestamp = tegrabl_get_timestamp_us();
    96001a68:	94007885 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96001a6c:	aa0003f4 	mov	x20, x0
	tegrabl_profiler_init(boot_params->global_data.profiling_carveout,
    96001a70:	f9462260 	ldr	x0, [x19, #3136]
    96001a74:	52820002 	mov	w2, #0x1000                	// #4096
    96001a78:	528a0001 	mov	w1, #0x5000                	// #20480
    96001a7c:	f9401800 	ldr	x0, [x0, #48]
    96001a80:	940070ff 	bl	9601de7c <tegrabl_profiler_init>
	tegrabl_profiler_record("CBoot start", cboot_init_timestamp, MINIMAL);
    96001a84:	aa1403e1 	mov	x1, x20
    96001a88:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001a8c:	912b3c00 	add	x0, x0, #0xacf
    96001a90:	940070c8 	bl	9601ddb0 <tegrabl_profiler_add_record>
	error = tegrabl_brbct_init(boot_params->global_data.brbct_carveout);
    96001a94:	f9462260 	ldr	x0, [x19, #3136]
    96001a98:	f9401400 	ldr	x0, [x0, #40]
    96001a9c:	94007d1a 	bl	96020f04 <tegrabl_brbct_init>
    96001aa0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96001aa4:	340000a0 	cbz	w0, 96001ab8 <platform_early_init+0xa0>
		pr_critical("Failed to initialize brbct\n");
    96001aa8:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001aac:	912b6c00 	add	x0, x0, #0xadb
			pr_error("Failed to Scrub DRAM\n");
    96001ab0:	940082f0 	bl	96022670 <tegrabl_printf>
			goto fail;
    96001ab4:	17ffffe8 	b	96001a54 <platform_early_init+0x3c>
	tegrabl_wdt_enable(TEGRABL_WDT_LCCPLEX, 0, 0, TEGRABL_WDT_SRC_TSCCNT_29_0);
    96001ab8:	52800043 	mov	w3, #0x2                   	// #2
    96001abc:	52800002 	mov	w2, #0x0                   	// #0
    96001ac0:	52800001 	mov	w1, #0x0                   	// #0
    96001ac4:	52800020 	mov	w0, #0x1                   	// #1
    96001ac8:	94008242 	bl	960223d0 <tegrabl_wdt_enable>
	error = tegrabl_console_register(TEGRABL_CONSOLE_UART,
    96001acc:	d2800002 	mov	x2, #0x0                   	// #0
    96001ad0:	52800041 	mov	w1, #0x2                   	// #2
    96001ad4:	52800000 	mov	w0, #0x0                   	// #0
    96001ad8:	9400827e 	bl	960224d0 <tegrabl_console_register>
	error = tegrabl_console_register(TEGRABL_CONSOLE_UART,
    96001adc:	f94622a0 	ldr	x0, [x21, #3136]
    96001ae0:	d2800002 	mov	x2, #0x0                   	// #0
    96001ae4:	b9641c01 	ldr	w1, [x0, #9244]
    96001ae8:	52800000 	mov	w0, #0x0                   	// #0
    96001aec:	94008279 	bl	960224d0 <tegrabl_console_register>
    96001af0:	2a0003f3 	mov	w19, w0
	tegrabl_profiler_record("Console register", 0, DETAILED);
    96001af4:	d2800001 	mov	x1, #0x0                   	// #0
    96001af8:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001afc:	912be800 	add	x0, x0, #0xafa
    96001b00:	940070ac 	bl	9601ddb0 <tegrabl_profiler_add_record>
	if ((error != TEGRABL_NO_ERROR) &&
    96001b04:	34000093 	cbz	w19, 96001b14 <platform_early_init+0xfc>
    96001b08:	12001e60 	and	w0, w19, #0xff
    96001b0c:	7100041f 	cmp	w0, #0x1
    96001b10:	54fffa21 	b.ne	96001a54 <platform_early_init+0x3c>  // b.any
	if (boot_params->enable_log != 0) {
    96001b14:	f94622a0 	ldr	x0, [x21, #3136]
    96001b18:	b9642000 	ldr	w0, [x0, #9248]
    96001b1c:	34000480 	cbz	w0, 96001bac <platform_early_init+0x194>
		error = tegrabl_debug_init();
    96001b20:	940082c6 	bl	96022638 <tegrabl_debug_init>
    96001b24:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    96001b28:	35fff960 	cbnz	w0, 96001a54 <platform_early_init+0x3c>
	pr_info("Welcome to Cboot\n");
    96001b2c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001b30:	912c2c00 	add	x0, x0, #0xb0b
    96001b34:	940082cf 	bl	96022670 <tegrabl_printf>
	pr_info("Cboot Version: %s\n", (char *) &__version_start);
    96001b38:	d0000241 	adrp	x1, 9604b000 <partition_names.3562+0x190>
    96001b3c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001b40:	911f2021 	add	x1, x1, #0x7c8
    96001b44:	912c8000 	add	x0, x0, #0xb20
    96001b48:	940082ca 	bl	96022670 <tegrabl_printf>
	pr_info("CPU-BL  @ %p\n", boot_params);
    96001b4c:	f94622a1 	ldr	x1, [x21, #3136]
    96001b50:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001b54:	912cd800 	add	x0, x0, #0xb36
    96001b58:	940082c6 	bl	96022670 <tegrabl_printf>
	pr_info("UART is.....\n");
    96001b5c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001b60:	912d1c00 	add	x0, x0, #0xb47
    96001b64:	940082c3 	bl	96022670 <tegrabl_printf>
	pr_info("Hey, the UART is : %d\n", CONFIG_ENABLE_UART);
    96001b68:	52800021 	mov	w1, #0x1                   	// #1
    96001b6c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001b70:	912d6000 	add	x0, x0, #0xb58
    96001b74:	940082bf 	bl	96022670 <tegrabl_printf>
	if (cboot_dram_ecc_enabled() &&
    96001b78:	94000433 	bl	96002c44 <cboot_dram_ecc_enabled>
    96001b7c:	72001c1f 	tst	w0, #0xff
    96001b80:	540001a0 	b.eq	96001bb4 <platform_early_init+0x19c>  // b.none
			(boot_params->global_data.disable_staged_scrub == 0)) {
    96001b84:	f94622a0 	ldr	x0, [x21, #3136]
    96001b88:	91400800 	add	x0, x0, #0x2, lsl #12
	if (cboot_dram_ecc_enabled() &&
    96001b8c:	394cc400 	ldrb	w0, [x0, #817]
    96001b90:	35000120 	cbnz	w0, 96001bb4 <platform_early_init+0x19c>
		error = cb_dram_ecc_scrub();
    96001b94:	9400038b 	bl	960029c0 <cb_dram_ecc_scrub>
    96001b98:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    96001b9c:	340000c0 	cbz	w0, 96001bb4 <platform_early_init+0x19c>
			pr_error("Failed to Scrub DRAM\n");
    96001ba0:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001ba4:	912dc800 	add	x0, x0, #0xb72
    96001ba8:	17ffffc2 	b	96001ab0 <platform_early_init+0x98>
		tegrabl_debug_deinit();
    96001bac:	940082ae 	bl	96022664 <tegrabl_debug_deinit>
    96001bb0:	17ffffdf 	b	96001b2c <platform_early_init+0x114>
		pr_info("%2u) Base:0x%08"PRIx64" Size:0x%08"PRIx64"\n", carveout,
    96001bb4:	900001d6 	adrp	x22, 96039000 <__reloc_begin+0x25f0>
    96001bb8:	912e2ed6 	add	x22, x22, #0xb8b
	for (carveout = 0; carveout < CARVEOUT_NUM; carveout++) {
    96001bbc:	52800014 	mov	w20, #0x0                   	// #0
    96001bc0:	f94622a0 	ldr	x0, [x21, #3136]
    96001bc4:	d37c7e81 	ubfiz	x1, x20, #4, #32
    96001bc8:	8b010000 	add	x0, x0, x1
		pr_info("%2u) Base:0x%08"PRIx64" Size:0x%08"PRIx64"\n", carveout,
    96001bcc:	2a1403e1 	mov	w1, w20
	for (carveout = 0; carveout < CARVEOUT_NUM; carveout++) {
    96001bd0:	11000694 	add	w20, w20, #0x1
		pr_info("%2u) Base:0x%08"PRIx64" Size:0x%08"PRIx64"\n", carveout,
    96001bd4:	a9440c02 	ldp	x2, x3, [x0, #64]
    96001bd8:	aa1603e0 	mov	x0, x22
    96001bdc:	940082a5 	bl	96022670 <tegrabl_printf>
	for (carveout = 0; carveout < CARVEOUT_NUM; carveout++) {
    96001be0:	7100b29f 	cmp	w20, #0x2c
    96001be4:	54fffee1 	b.ne	96001bc0 <platform_early_init+0x1a8>  // b.any
};

static inline void arm64_enable_serror(void)
{
    CF;
    __asm__ volatile("msr daifclr, #4" ::: "memory");
    96001be8:	d50344ff 	msr	daifclr, #0x4
	tegrabl_profiler_record("ARM64 enable serror", 0, DETAILED);
    96001bec:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001bf0:	912eb800 	add	x0, x0, #0xbae
    96001bf4:	d2800001 	mov	x1, #0x0                   	// #0
    96001bf8:	9400706e 	bl	9601ddb0 <tegrabl_profiler_add_record>
	platform_init_interrupts();
    96001bfc:	94007f6b 	bl	960219a8 <platform_init_interrupts>
	tegrabl_profiler_record("Platform: init interrupts", 0, DETAILED);
    96001c00:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001c04:	912f0800 	add	x0, x0, #0xbc2
    96001c08:	d2800001 	mov	x1, #0x0                   	// #0
    96001c0c:	94007069 	bl	9601ddb0 <tegrabl_profiler_add_record>
	platform_init_timer();
    96001c10:	94008040 	bl	96021d10 <platform_init_timer>
	return error;
    96001c14:	17ffff90 	b	96001a54 <platform_early_init+0x3c>

0000000096001c18 <platform_init_mmu_mappings>:
	/* Use only the mappings specified in this file. */
	return 0;
}

void platform_init_mmu_mappings(void)
{
    96001c18:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96001c1c:	f0000220 	adrp	x0, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96001c20:	9103c000 	add	x0, x0, #0xf0
    96001c24:	910003fd 	mov	x29, sp
    96001c28:	a90153f3 	stp	x19, x20, [sp, #16]
    96001c2c:	91002014 	add	x20, x0, #0x8
    96001c30:	9111a013 	add	x19, x0, #0x468
	uint32_t idx, i;
	struct tegrabl_linuxboot_memblock *free_dram_regions = NULL;
    96001c34:	f90017bf 	str	xzr, [x29, #40]
	uint32_t free_dram_block_count;

	for (idx = 0; idx < ARRAY_SIZE(mmio_mappings); idx++) {
		arm64_mmu_map(mmio_mappings[idx].addr, mmio_mappings[idx].addr,
    96001c38:	f85f8281 	ldur	x1, [x20, #-8]
    96001c3c:	52800383 	mov	w3, #0x1c                  	// #28
    96001c40:	f8410682 	ldr	x2, [x20], #16
    96001c44:	aa0103e0 	mov	x0, x1
    96001c48:	94000705 	bl	9600385c <arm64_mmu_map>
	for (idx = 0; idx < ARRAY_SIZE(mmio_mappings); idx++) {
    96001c4c:	eb13029f 	cmp	x20, x19
    96001c50:	54ffff41 	b.ne	96001c38 <platform_init_mmu_mappings+0x20>  // b.any
	temp = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_7);
    96001c54:	d2812d80 	mov	x0, #0x96c                 	// #2412
	platform_init_boot_param();
	/*
	 * Map the complete CARVEOUT_CPUBL_PARAMS to access CPUBL Params, BR-BCT
	 * profiler, GR
	*/
	arm64_mmu_map((uintptr_t)boot_params, (uintptr_t)boot_params,
    96001c58:	52800123 	mov	w3, #0x9                   	// #9
	temp = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_7);
    96001c5c:	f2a18720 	movk	x0, #0xc39, lsl #16
					TEGRABL_CARVEOUT_CPUBL_PARAMS_SIZE,
					MMU_FLAG_CACHED | MMU_FLAG_READWRITE);

	free_dram_block_count = get_free_dram_regions_info(&free_dram_regions);

	for (i = 0; i < free_dram_block_count; i++) {
    96001c60:	d2800013 	mov	x19, #0x0                   	// #0
	temp = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_7);
    96001c64:	b9400002 	ldr	w2, [x0]
	boot_params = (struct tboot_cpubl_params *)(uintptr_t)
    96001c68:	7100005f 	cmp	w2, #0x0
    96001c6c:	2a0203e0 	mov	w0, w2
	arm64_mmu_map((uintptr_t)boot_params, (uintptr_t)boot_params,
    96001c70:	d2a00c02 	mov	x2, #0x600000              	// #6291456
	boot_params = (struct tboot_cpubl_params *)(uintptr_t)
    96001c74:	d370bc01 	lsl	x1, x0, #16
    96001c78:	9a80a021 	csel	x1, x1, x0, ge  // ge = tcont
    96001c7c:	b00003a0 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96001c80:	f9062001 	str	x1, [x0, #3136]
	arm64_mmu_map((uintptr_t)boot_params, (uintptr_t)boot_params,
    96001c84:	aa0103e0 	mov	x0, x1
    96001c88:	940006f5 	bl	9600385c <arm64_mmu_map>
	free_dram_block_count = get_free_dram_regions_info(&free_dram_regions);
    96001c8c:	9100a3a0 	add	x0, x29, #0x28
    96001c90:	94008dc6 	bl	960253a8 <get_free_dram_regions_info>
    96001c94:	2a0003f4 	mov	w20, w0
	for (i = 0; i < free_dram_block_count; i++) {
    96001c98:	6b13029f 	cmp	w20, w19
    96001c9c:	54000088 	b.hi	96001cac <platform_init_mmu_mappings+0x94>  // b.pmore
		arm64_mmu_map((uintptr_t)free_dram_regions[i].base,
				(uintptr_t)free_dram_regions[i].base, free_dram_regions[i].size,
				MMU_FLAG_CACHED | MMU_FLAG_READWRITE);
	}
}
    96001ca0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96001ca4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96001ca8:	d65f03c0 	ret
		arm64_mmu_map((uintptr_t)free_dram_regions[i].base,
    96001cac:	f94017a1 	ldr	x1, [x29, #40]
    96001cb0:	d37cee60 	lsl	x0, x19, #4
    96001cb4:	52800123 	mov	w3, #0x9                   	// #9
    96001cb8:	91000673 	add	x19, x19, #0x1
    96001cbc:	8b000022 	add	x2, x1, x0
    96001cc0:	f8606821 	ldr	x1, [x1, x0]
    96001cc4:	f9400442 	ldr	x2, [x2, #8]
    96001cc8:	aa0103e0 	mov	x0, x1
    96001ccc:	940006e4 	bl	9600385c <arm64_mmu_map>
    96001cd0:	17fffff2 	b	96001c98 <platform_init_mmu_mappings+0x80>

0000000096001cd4 <platform_uninit>:
		}
#endif
}

void platform_uninit(void)
{
    96001cd4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
#if defined(CONFIG_ENABLE_WDT)
	/* disable cpu-wdt before kernel handoff */
	tegrabl_wdt_disable(TEGRABL_WDT_LCCPLEX);
    96001cd8:	52800020 	mov	w0, #0x1                   	// #1
{
    96001cdc:	910003fd 	mov	x29, sp
	tegrabl_wdt_disable(TEGRABL_WDT_LCCPLEX);
    96001ce0:	940081a7 	bl	9602237c <tegrabl_wdt_disable>
#endif /* CONFIG_ENABLE_WDT */

	platform_uninit_timer();
    96001ce4:	9400800c 	bl	96021d14 <platform_uninit_timer>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96001ce8:	d50343df 	msr	daifset, #0x3
	arch_disable_ints();
#if defined(CONFIG_DYNAMIC_LOAD_ADDRESS)
	tegrabl_dealloc_free_dram_region();
    96001cec:	94008de1 	bl	96025470 <tegrabl_dealloc_free_dram_region>
#endif
#if WITH_MMU
	arch_disable_mmu();
    96001cf0:	94000730 	bl	960039b0 <arch_disable_mmu>
	tegrabl_mce_roc_cache_flush();
    96001cf4:	9400792f 	bl	960201b0 <tegrabl_mce_roc_cache_flush>
	tegrabl_mce_roc_cache_clean();
    96001cf8:	94007947 	bl	96020214 <tegrabl_mce_roc_cache_clean>
	err = tegrabl_car_clk_disable(TEGRABL_MODULE_SE, 0);
    96001cfc:	52800001 	mov	w1, #0x0                   	// #0
    96001d00:	52800080 	mov	w0, #0x4                   	// #4
    96001d04:	94007757 	bl	9601fa60 <tegrabl_car_clk_disable>
	if (err != TEGRABL_NO_ERROR) {
    96001d08:	34000080 	cbz	w0, 96001d18 <platform_uninit+0x44>
		pr_error("Failed to disable SE clk\n");
    96001d0c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001d10:	913c4400 	add	x0, x0, #0xf11
    96001d14:	94008257 	bl	96022670 <tegrabl_printf>
		if (is_ufs_storage == true) {
    96001d18:	b0000360 	adrp	x0, 9606e000 <__bss_start>
    96001d1c:	39400000 	ldrb	w0, [x0]
    96001d20:	34000180 	cbz	w0, 96001d50 <platform_uninit+0x7c>
			odmdata = tegrabl_odmdata_get();
    96001d24:	9400c4f6 	bl	960330fc <tegrabl_odmdata_get>
			if ((odmdata & UPHY_ODM_BIT) != 0) {
    96001d28:	7204001f 	tst	w0, #0x10000000
    96001d2c:	540000e0 	b.eq	96001d48 <platform_uninit+0x74>  // b.none
				err = tegrabl_ufs_change_gear(1);
    96001d30:	52800020 	mov	w0, #0x1                   	// #1
    96001d34:	940062c0 	bl	9601a834 <tegrabl_ufs_change_gear>
				if (err != TEGRABL_NO_ERROR)
    96001d38:	34000080 	cbz	w0, 96001d48 <platform_uninit+0x74>
					pr_critical("pwm mode switch failed\n");
    96001d3c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001d40:	913cb800 	add	x0, x0, #0xf2e
    96001d44:	9400824b 	bl	96022670 <tegrabl_printf>
			tegrabl_ufs_default_state();
    96001d48:	94006708 	bl	9601b968 <tegrabl_ufs_default_state>
			tegrabl_ufs_clock_deinit();
    96001d4c:	9400775b 	bl	9601fab8 <tegrabl_ufs_clock_deinit>
}

static inline void arm64_disable_serror(void)
{
    __asm__ volatile("msr daifset, #4" ::: "memory");
    96001d50:	d50344df 	msr	daifset, #0x4
#endif
	platform_disable_clocks();
	arm64_disable_serror();

	tegrabl_profiler_record("CBoot end (platform uninit)", 0, MINIMAL);
}
    96001d54:	a8c17bfd 	ldp	x29, x30, [sp], #16
	tegrabl_profiler_record("CBoot end (platform uninit)", 0, MINIMAL);
    96001d58:	d2800001 	mov	x1, #0x0                   	// #0
    96001d5c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001d60:	913d2400 	add	x0, x0, #0xf49
    96001d64:	14007013 	b	9601ddb0 <tegrabl_profiler_add_record>

0000000096001d68 <platform_init>:
fail:
	return err;
}

void platform_init(void)
{
    96001d68:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
#endif
	struct board_id_info *id_info;
	struct tegrabl_rollback *rb;
	bool hang_up = false;

	tegrabl_profiler_record("Platform_init start", 0, DETAILED);
    96001d6c:	d2800001 	mov	x1, #0x0                   	// #0
    96001d70:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001d74:	912f7000 	add	x0, x0, #0xbdc
{
    96001d78:	910003fd 	mov	x29, sp
    96001d7c:	a90153f3 	stp	x19, x20, [sp, #16]

	err = tegrabl_register_prod_settings(
			(uint32_t *)(uintptr_t)boot_params->controller_prod_settings,
    96001d80:	b00003b3 	adrp	x19, 96076000 <free_dram_block+0x38e8>
{
    96001d84:	f90013f5 	str	x21, [sp, #32]
	void *kernel_dtb = NULL;
    96001d88:	f9001fbf 	str	xzr, [x29, #56]
	tegrabl_profiler_record("Platform_init start", 0, DETAILED);
    96001d8c:	94007009 	bl	9601ddb0 <tegrabl_profiler_add_record>
			(uint32_t *)(uintptr_t)boot_params->controller_prod_settings,
    96001d90:	f9462260 	ldr	x0, [x19, #3136]
	err = tegrabl_register_prod_settings(
    96001d94:	b9644001 	ldr	w1, [x0, #9280]
    96001d98:	f9521c00 	ldr	x0, [x0, #9272]
    96001d9c:	94007dff 	bl	96021598 <tegrabl_register_prod_settings>
			boot_params->controller_prod_settings_size);
	if (err != TEGRABL_NO_ERROR)
    96001da0:	34000160 	cbz	w0, 96001dcc <platform_init+0x64>
	bool hang_up = false;
    96001da4:	52800013 	mov	w19, #0x0                   	// #0
	tegrabl_profiler_record("Init display", 0, DETAILED);
#endif

skip_display:
fail:
	tegrabl_profiler_record("Platform_init end", 0, DETAILED);
    96001da8:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001dac:	d2800001 	mov	x1, #0x0                   	// #0
    96001db0:	913bbc00 	add	x0, x0, #0xeef
    96001db4:	94006fff 	bl	9601ddb0 <tegrabl_profiler_add_record>

	if (hang_up) {
    96001db8:	34002153 	cbz	w19, 960021e0 <platform_init+0x478>
		pr_error("hang up ...\n");
    96001dbc:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001dc0:	913c0400 	add	x0, x0, #0xf01
    96001dc4:	9400822b 	bl	96022670 <tegrabl_printf>
    96001dc8:	14000000 	b	96001dc8 <platform_init+0x60>
	rb = (struct tegrabl_rollback *)boot_params->rollback_data_address;
    96001dcc:	f9462260 	ldr	x0, [x19, #3136]
	err = tegrabl_init_rollback_data(rb);
    96001dd0:	f9524400 	ldr	x0, [x0, #9352]
    96001dd4:	94007931 	bl	96020298 <tegrabl_init_rollback_data>
	if (err != TEGRABL_NO_ERROR) {
    96001dd8:	35fffe60 	cbnz	w0, 96001da4 <platform_init+0x3c>
	tegrabl_profiler_record("Init rollback data", 0, DETAILED);
    96001ddc:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001de0:	912fc000 	add	x0, x0, #0xbf0
    96001de4:	d2800001 	mov	x1, #0x0                   	// #0
    96001de8:	94006ff2 	bl	9601ddb0 <tegrabl_profiler_add_record>
	err = tegrabl_exit_register();
    96001dec:	94000e5d 	bl	96005760 <tegrabl_exit_register>
	if (err != TEGRABL_NO_ERROR)
    96001df0:	35fffda0 	cbnz	w0, 96001da4 <platform_init+0x3c>
	tegrabl_i2c_register();
    96001df4:	9400320b 	bl	9600e620 <tegrabl_i2c_register>
			(uint32_t *)(uintptr_t)boot_params->i2c_bus_frequency_address,
    96001df8:	f9462260 	ldr	x0, [x19, #3136]
	err = tegrabl_i2c_set_bus_freq_info(
    96001dfc:	52800121 	mov	w1, #0x9                   	// #9
    96001e00:	f9521800 	ldr	x0, [x0, #9264]
    96001e04:	940031cb 	bl	9600e530 <tegrabl_i2c_set_bus_freq_info>
	if (err != TEGRABL_NO_ERROR) {
    96001e08:	340000a0 	cbz	w0, 96001e1c <platform_init+0xb4>
		pr_error("Error while saving i2c frequency info.\n");
    96001e0c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001e10:	91300c00 	add	x0, x0, #0xc03
		pr_error("Kernel-dtb init failed\n");
    96001e14:	94008217 	bl	96022670 <tegrabl_printf>
    96001e18:	17ffffe3 	b	96001da4 <platform_init+0x3c>
	bl_dtb = (void *)boot_params->bl_dtb_load_address;
    96001e1c:	f9462261 	ldr	x1, [x19, #3136]
    96001e20:	aa1303f5 	mov	x21, x19
    96001e24:	f9524033 	ldr	x19, [x1, #9344]
	err = tegrabl_dt_set_fdt_handle(TEGRABL_DT_BL, bl_dtb);
    96001e28:	aa1303e1 	mov	x1, x19
    96001e2c:	9400bc01 	bl	96030e30 <tegrabl_dt_set_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    96001e30:	34000080 	cbz	w0, 96001e40 <platform_init+0xd8>
		pr_error("Bl-dtb init failed\n");
    96001e34:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001e38:	9130b800 	add	x0, x0, #0xc2e
    96001e3c:	17fffff6 	b	96001e14 <platform_init+0xac>
	pr_info("Bl_dtb @%p\n", bl_dtb);
    96001e40:	aa1303e1 	mov	x1, x19
    96001e44:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001e48:	91311400 	add	x0, x0, #0xc45
    96001e4c:	94008209 	bl	96022670 <tegrabl_printf>
	tegrabl_profiler_record("DTB load", 0, DETAILED);
    96001e50:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001e54:	91315000 	add	x0, x0, #0xc54
    96001e58:	d2800001 	mov	x1, #0x0                   	// #0
    96001e5c:	94006fd5 	bl	9601ddb0 <tegrabl_profiler_add_record>
	gpio_framework_init();
    96001e60:	94002f52 	bl	9600dba8 <gpio_framework_init>
	err = tegrabl_gpio_driver_init();
    96001e64:	94002e9d 	bl	9600d8d8 <tegrabl_gpio_driver_init>
	if (err != TEGRABL_NO_ERROR) {
    96001e68:	34000080 	cbz	w0, 96001e78 <platform_init+0x110>
		pr_error("GPIO driver init failed\n");
    96001e6c:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001e70:	91317400 	add	x0, x0, #0xc5d
    96001e74:	17ffffe8 	b	96001e14 <platform_init+0xac>
	pr_info("GPIO framework and drivers are initialized.\n");
    96001e78:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001e7c:	9131e400 	add	x0, x0, #0xc79
    96001e80:	940081fc 	bl	96022670 <tegrabl_printf>
	tegrabl_blockdev_init();
    96001e84:	94006942 	bl	9601c38c <tegrabl_blockdev_init>
					boot_params->dev_params_address;
    96001e88:	f94622a0 	ldr	x0, [x21, #3136]
	dev_param = (struct tegrabl_mb1bct_device_params *)(uintptr_t)
    96001e8c:	f9521414 	ldr	x20, [x0, #9256]
	if (boot_params->boot_from_sd) {
    96001e90:	b9649c00 	ldr	w0, [x0, #9372]
    96001e94:	34000200 	cbz	w0, 96001ed4 <platform_init+0x16c>
	err = tegrabl_gpio_driver_get(chipid, &gpio_drv);
    96001e98:	910103a1 	add	x1, x29, #0x40
    96001e9c:	52800000 	mov	w0, #0x0                   	// #0
	struct gpio_driver *gpio_drv = NULL;
    96001ea0:	f90023bf 	str	xzr, [x29, #64]
	err = tegrabl_gpio_driver_get(chipid, &gpio_drv);
    96001ea4:	94002f0b 	bl	9600dad0 <tegrabl_gpio_driver_get>
    96001ea8:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96001eac:	340002e0 	cbz	w0, 96001f08 <platform_init+0x1a0>
		pr_error("Get gpio driver for chipid: %u failed: %u\n", chipid, err);
    96001eb0:	2a0003e2 	mov	w2, w0
    96001eb4:	52800001 	mov	w1, #0x0                   	// #0
    96001eb8:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001ebc:	9132a400 	add	x0, x0, #0xca9
    96001ec0:	940081ec 	bl	96022670 <tegrabl_printf>
			pr_warn("Get gpio driver phandle failed: %u\n", err);
    96001ec4:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001ec8:	2a1303e1 	mov	w1, w19
    96001ecc:	91335c00 	add	x0, x0, #0xcd7
    96001ed0:	940081e8 	bl	96022670 <tegrabl_printf>
	err = tegrabl_soc_get_bootdev(&boot_device, &instance);
    96001ed4:	910103a1 	add	x1, x29, #0x40
    96001ed8:	9100d3a0 	add	x0, x29, #0x34
    96001edc:	94007ce9 	bl	96021280 <tegrabl_soc_get_bootdev>
    96001ee0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96001ee4:	340003e0 	cbz	w0, 96001f60 <platform_init+0x1f8>
		pr_critical("Failed to get boot device information\n");
    96001ee8:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001eec:	9134f000 	add	x0, x0, #0xd3c
		pr_error("Failed to initialize boot device\n");
    96001ef0:	940081e0 	bl	96022670 <tegrabl_printf>
		pr_error("Platform storage init failed: %d\n", err);
    96001ef4:	2a1303e1 	mov	w1, w19
    96001ef8:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001efc:	91362c00 	add	x0, x0, #0xd8b
    96001f00:	940081dc 	bl	96022670 <tegrabl_printf>
    96001f04:	17ffffa8 	b	96001da4 <platform_init+0x3c>
	*out = gpio_drv->phandle;
    96001f08:	f94023a0 	ldr	x0, [x29, #64]
			err = tegrabl_storage_init_dev(TEGRABL_STORAGE_SDCARD, sd_params.sd_instance,
    96001f0c:	52800005 	mov	w5, #0x0                   	// #0
    96001f10:	52800024 	mov	w4, #0x1                   	// #1
    96001f14:	910123a3 	add	x3, x29, #0x48
    96001f18:	aa1403e2 	mov	x2, x20
	*out = gpio_drv->phandle;
    96001f1c:	b9400000 	ldr	w0, [x0]
    96001f20:	290903bf 	stp	wzr, w0, [x29, #72]
			sd_params.cd_gpio.pin = boot_params->cd_gpio;
    96001f24:	f94622a0 	ldr	x0, [x21, #3136]
			sd_params.en_vdd_sd_gpio = 0;
    96001f28:	b9005bbf 	str	wzr, [x29, #88]
			sd_params.cd_gpio.pin = boot_params->cd_gpio;
    96001f2c:	b964a401 	ldr	w1, [x0, #9380]
    96001f30:	b90053a1 	str	w1, [x29, #80]
			sd_params.cd_gpio.flags = boot_params->cd_gpio_polarity;
    96001f34:	b964a801 	ldr	w1, [x0, #9384]
    96001f38:	b90057a1 	str	w1, [x29, #84]
			sd_params.sd_instance = boot_params->sd_instance;
    96001f3c:	b964a001 	ldr	w1, [x0, #9376]
			err = tegrabl_storage_init_dev(TEGRABL_STORAGE_SDCARD, sd_params.sd_instance,
    96001f40:	528000c0 	mov	w0, #0x6                   	// #6
			sd_params.sd_instance = boot_params->sd_instance;
    96001f44:	b9005fa1 	str	w1, [x29, #92]
			err = tegrabl_storage_init_dev(TEGRABL_STORAGE_SDCARD, sd_params.sd_instance,
    96001f48:	94006ff4 	bl	9601df18 <tegrabl_storage_init_dev>
			if (err != TEGRABL_NO_ERROR)
    96001f4c:	34000580 	cbz	w0, 96001ffc <platform_init+0x294>
				pr_warn("Initialzing SD card failed! Will boot from other devices.\n");
    96001f50:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001f54:	9133f800 	add	x0, x0, #0xcfe
    96001f58:	940081c6 	bl	96022670 <tegrabl_printf>
    96001f5c:	17ffffde 	b	96001ed4 <platform_init+0x16c>
	if (boot_device == TEGRABL_STORAGE_QSPI_FLASH) {
    96001f60:	b94037a0 	ldr	w0, [x29, #52]
    96001f64:	71000c1f 	cmp	w0, #0x3
    96001f68:	54000041 	b.ne	96001f70 <platform_init+0x208>  // b.any
		dev_param->qspi.dma_type = DMA_GPC;
    96001f6c:	b900129f 	str	wzr, [x20, #16]
	err = tegrabl_storage_init_dev(boot_device, instance, dev_param, NULL, true, false);
    96001f70:	b94043a1 	ldr	w1, [x29, #64]
    96001f74:	52800005 	mov	w5, #0x0                   	// #0
    96001f78:	52800024 	mov	w4, #0x1                   	// #1
    96001f7c:	d2800003 	mov	x3, #0x0                   	// #0
    96001f80:	aa1403e2 	mov	x2, x20
    96001f84:	94006fe5 	bl	9601df18 <tegrabl_storage_init_dev>
    96001f88:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96001f8c:	34000080 	cbz	w0, 96001f9c <platform_init+0x234>
		pr_error("Failed to initialize boot device\n");
    96001f90:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96001f94:	91359800 	add	x0, x0, #0xd66
    96001f98:	17ffffd6 	b	96001ef0 <platform_init+0x188>
	storage_devs = boot_params->storage_devices;
    96001f9c:	f94622a0 	ldr	x0, [x21, #3136]
    96001fa0:	d2849201 	mov	x1, #0x2490                	// #9360
    96001fa4:	b94037a2 	ldr	w2, [x29, #52]
    96001fa8:	8b010015 	add	x21, x0, x1
	if ((boot_params->version < 5) || (storage_devs[0].type == 0)) {
    96001fac:	b9641801 	ldr	w1, [x0, #9240]
    96001fb0:	7100103f 	cmp	w1, #0x4
    96001fb4:	54000089 	b.ls	96001fc4 <platform_init+0x25c>  // b.plast
    96001fb8:	91400800 	add	x0, x0, #0x2, lsl #12
    96001fbc:	39524000 	ldrb	w0, [x0, #1168]
    96001fc0:	35000440 	cbnz	w0, 96002048 <platform_init+0x2e0>
		if (boot_device == TEGRABL_STORAGE_QSPI_FLASH) {
    96001fc4:	71000c5f 	cmp	w2, #0x3
    96001fc8:	540002c0 	b.eq	96002020 <platform_init+0x2b8>  // b.none
		if (tegrabl_is_ufs_enable()) {
    96001fcc:	94007da0 	bl	9602164c <tegrabl_is_ufs_enable>
    96001fd0:	72001c1f 	tst	w0, #0xff
    96001fd4:	54000140 	b.eq	96001ffc <platform_init+0x294>  // b.none
			err = tegrabl_storage_init_dev(TEGRABL_STORAGE_UFS, 0,
    96001fd8:	52800025 	mov	w5, #0x1                   	// #1
    96001fdc:	52800004 	mov	w4, #0x0                   	// #0
    96001fe0:	d2800003 	mov	x3, #0x0                   	// #0
    96001fe4:	aa1403e2 	mov	x2, x20
    96001fe8:	52800001 	mov	w1, #0x0                   	// #0
    96001fec:	528000e0 	mov	w0, #0x7                   	// #7
    96001ff0:	94006fca 	bl	9601df18 <tegrabl_storage_init_dev>
    96001ff4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96001ff8:	35fff7e0 	cbnz	w0, 96001ef4 <platform_init+0x18c>
	tegrabl_profiler_record("Init storage devs", 0, DETAILED);
    96001ffc:	900001c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96002000:	9136c000 	add	x0, x0, #0xdb0
    96002004:	d2800001 	mov	x1, #0x0                   	// #0
    96002008:	94006f6a 	bl	9601ddb0 <tegrabl_profiler_add_record>
	err = tegrabl_partition_manager_init();
    9600200c:	94009622 	bl	96027894 <tegrabl_partition_manager_init>
	if (err != TEGRABL_NO_ERROR) {
    96002010:	34000380 	cbz	w0, 96002080 <platform_init+0x318>
		pr_critical("partition manager init failed\n");
    96002014:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96002018:	91370800 	add	x0, x0, #0xdc2
    9600201c:	17ffff7e 	b	96001e14 <platform_init+0xac>
			err = tegrabl_storage_init_dev(TEGRABL_STORAGE_SDMMC_BOOT, 0,
    96002020:	52800025 	mov	w5, #0x1                   	// #1
    96002024:	52800004 	mov	w4, #0x0                   	// #0
    96002028:	d2800003 	mov	x3, #0x0                   	// #0
    9600202c:	aa1403e2 	mov	x2, x20
    96002030:	52800001 	mov	w1, #0x0                   	// #0
    96002034:	52800000 	mov	w0, #0x0                   	// #0
    96002038:	94006fb8 	bl	9601df18 <tegrabl_storage_init_dev>
    9600203c:	2a0003f3 	mov	w19, w0
			if (err != TEGRABL_NO_ERROR) {
    96002040:	34fffc60 	cbz	w0, 96001fcc <platform_init+0x264>
    96002044:	17ffffac 	b	96001ef4 <platform_init+0x18c>
		err = tegrabl_storage_init_storage_devs(storage_devs, dev_param, boot_device, false, true);
    96002048:	52800024 	mov	w4, #0x1                   	// #1
    9600204c:	52800003 	mov	w3, #0x0                   	// #0
    96002050:	aa1403e1 	mov	x1, x20
    96002054:	aa1503e0 	mov	x0, x21
    96002058:	94007052 	bl	9601e1a0 <tegrabl_storage_init_storage_devs>
    9600205c:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96002060:	35fff4a0 	cbnz	w0, 96001ef4 <platform_init+0x18c>
		is_ufs_storage = tegrabl_storage_is_storage_enabled(storage_devs,
    96002064:	528000e1 	mov	w1, #0x7                   	// #7
    96002068:	52800002 	mov	w2, #0x0                   	// #0
    9600206c:	aa1503e0 	mov	x0, x21
    96002070:	94007086 	bl	9601e288 <tegrabl_storage_is_storage_enabled>
    96002074:	90000361 	adrp	x1, 9606e000 <__bss_start>
    96002078:	39000020 	strb	w0, [x1]
    9600207c:	17ffffe0 	b	96001ffc <platform_init+0x294>
	tegrabl_profiler_record("Partition manager", 0, DETAILED);
    96002080:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96002084:	91379000 	add	x0, x0, #0xde4
    96002088:	d2800001 	mov	x1, #0x0                   	// #0
    9600208c:	94006f49 	bl	9601ddb0 <tegrabl_profiler_add_record>
	err = update_ratchet_fuse();
    96002090:	9400005e 	bl	96002208 <update_ratchet_fuse>
	if (err != TEGRABL_NO_ERROR) {
    96002094:	35000a20 	cbnz	w0, 960021d8 <platform_init+0x470>
	err = tegrabl_alloc_u_boot_top(BOOT_IMAGE_MAX_SIZE);
    96002098:	d2a08000 	mov	x0, #0x4000000             	// #67108864
    9600209c:	94008d1d 	bl	96025510 <tegrabl_alloc_u_boot_top>
	if (err != TEGRABL_NO_ERROR) {
    960020a0:	34000080 	cbz	w0, 960020b0 <platform_init+0x348>
		pr_error("No memory for U-Boot to relocate\n");
    960020a4:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    960020a8:	9137d800 	add	x0, x0, #0xdf6
    960020ac:	17ffff5a 	b	96001e14 <platform_init+0xac>
	err = tegrabl_load_binary(TEGRABL_BINARY_KERNEL_DTB, &kernel_dtb, NULL);
    960020b0:	d2800002 	mov	x2, #0x0                   	// #0
    960020b4:	9100e3a1 	add	x1, x29, #0x38
    960020b8:	528002a0 	mov	w0, #0x15                  	// #21
    960020bc:	9400aa22 	bl	9602c944 <tegrabl_load_binary>
	if (err != TEGRABL_NO_ERROR) {
    960020c0:	34000080 	cbz	w0, 960020d0 <platform_init+0x368>
		pr_error("Kernel-dtb loading failed\n");
    960020c4:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    960020c8:	91386c00 	add	x0, x0, #0xe1b
    960020cc:	17ffff52 	b	96001e14 <platform_init+0xac>
	err = tegrabl_dt_set_fdt_handle(TEGRABL_DT_KERNEL, kernel_dtb);
    960020d0:	f9401fa1 	ldr	x1, [x29, #56]
    960020d4:	52800020 	mov	w0, #0x1                   	// #1
    960020d8:	9400bb56 	bl	96030e30 <tegrabl_dt_set_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    960020dc:	34000080 	cbz	w0, 960020ec <platform_init+0x384>
		pr_error("Kernel-dtb init failed\n");
    960020e0:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    960020e4:	9138e400 	add	x0, x0, #0xe39
    960020e8:	17ffff4b 	b	96001e14 <platform_init+0xac>
	pr_info("Kernel_dtb @%p\n", kernel_dtb);
    960020ec:	f9401fa1 	ldr	x1, [x29, #56]
    960020f0:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    960020f4:	91395000 	add	x0, x0, #0xe54
    960020f8:	9400815e 	bl	96022670 <tegrabl_printf>
	err = tegrabl_tca9539_init();
    960020fc:	94002f73 	bl	9600dec8 <tegrabl_tca9539_init>
	if (err != TEGRABL_NO_ERROR) {
    96002100:	34000080 	cbz	w0, 96002110 <platform_init+0x3a8>
		pr_error("GPIO TCA9539 driver init failed\n");
    96002104:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96002108:	91399c00 	add	x0, x0, #0xe67
    9600210c:	94008159 	bl	96022670 <tegrabl_printf>
	tegrabl_profiler_record("Init GPIO driver", 0, DETAILED);
    96002110:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96002114:	913a2c00 	add	x0, x0, #0xe8b
    96002118:	d2800001 	mov	x1, #0x0                   	// #0
    9600211c:	94006f25 	bl	9601ddb0 <tegrabl_profiler_add_record>
	tegrabl_pmic_init();
    96002120:	940035cb 	bl	9600f84c <tegrabl_pmic_init>
	err = tegrabl_regulator_init();
    96002124:	94004526 	bl	960135bc <tegrabl_regulator_init>
	if (TEGRABL_NO_ERROR != err)
    96002128:	35000300 	cbnz	w0, 96002188 <platform_init+0x420>
	err = tegrabl_max77620_init(TEGRABL_INSTANCE_POWER_I2C_BPMPFW);
    9600212c:	52800080 	mov	w0, #0x4                   	// #4
    96002130:	9400367a 	bl	9600fb18 <tegrabl_max77620_init>
	if (TEGRABL_NO_ERROR != err)
    96002134:	350002a0 	cbnz	w0, 96002188 <platform_init+0x420>
	tegrabl_profiler_record("Power init", 0, DETAILED);
    96002138:	d2800001 	mov	x1, #0x0                   	// #0
    9600213c:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96002140:	913a7000 	add	x0, x0, #0xe9c
    96002144:	94006f1b 	bl	9601ddb0 <tegrabl_profiler_add_record>
	id_info = tegrabl_malloc(sizeof(struct board_id_info));
    96002148:	d2813580 	mov	x0, #0x9ac                 	// #2476
    9600214c:	9400924b 	bl	96026a78 <tegrabl_malloc>
    96002150:	aa0003f3 	mov	x19, x0
	if (id_info == NULL) {
    96002154:	b4ffe280 	cbz	x0, 96001da4 <platform_init+0x3c>
	err = tegrabl_get_board_ids(id_info);
    96002158:	9400ae51 	bl	9602da9c <tegrabl_get_board_ids>
	if (err == TEGRABL_NO_ERROR) {
    9600215c:	340001c0 	cbz	w0, 96002194 <platform_init+0x42c>
	err = tegrabl_display_init();
    96002160:	94000edf 	bl	96005cdc <tegrabl_display_init>
	if (err != TEGRABL_NO_ERROR) {
    96002164:	34000080 	cbz	w0, 96002174 <platform_init+0x40c>
		pr_warn("display init failed\n");
    96002168:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    9600216c:	913b2800 	add	x0, x0, #0xeca
    96002170:	94008140 	bl	96022670 <tegrabl_printf>
	tegrabl_profiler_record("Init display", 0, DETAILED);
    96002174:	d2800001 	mov	x1, #0x0                   	// #0
    96002178:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    9600217c:	913b8800 	add	x0, x0, #0xee2
    96002180:	94006f0c 	bl	9601ddb0 <tegrabl_profiler_add_record>
    96002184:	17ffff08 	b	96001da4 <platform_init+0x3c>
	if (TEGRABL_NO_ERROR != err) {
    96002188:	f2405c1f 	tst	x0, #0xffffff
    9600218c:	54ffe0c1 	b.ne	96001da4 <platform_init+0x3c>  // b.any
    96002190:	17ffffea 	b	96002138 <platform_init+0x3d0>
		tegrabl_profiler_record("Get board IDs", 0, DETAILED);
    96002194:	d2800001 	mov	x1, #0x0                   	// #0
    96002198:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
		if (!strncmp((char *)id_info->part[0].part_no, "4581", 4))
    9600219c:	91005673 	add	x19, x19, #0x15
		tegrabl_profiler_record("Get board IDs", 0, DETAILED);
    960021a0:	913a9c00 	add	x0, x0, #0xea7
    960021a4:	94006f03 	bl	9601ddb0 <tegrabl_profiler_add_record>
		if (!strncmp((char *)id_info->part[0].part_no, "4581", 4))
    960021a8:	f00001a1 	adrp	x1, 96039000 <__reloc_begin+0x25f0>
    960021ac:	d2800082 	mov	x2, #0x4                   	// #4
    960021b0:	913ad421 	add	x1, x1, #0xeb5
    960021b4:	aa1303e0 	mov	x0, x19
    960021b8:	9400a031 	bl	9602a27c <strncmp>
    960021bc:	34ffdf40 	cbz	w0, 96001da4 <platform_init+0x3c>
		if (!strcmp((char *)id_info->part[0].part_no, "3310-1000-B00-A"))
    960021c0:	f00001a1 	adrp	x1, 96039000 <__reloc_begin+0x25f0>
    960021c4:	aa1303e0 	mov	x0, x19
    960021c8:	913ae821 	add	x1, x1, #0xeba
    960021cc:	9400a020 	bl	9602a24c <strcmp>
    960021d0:	34ffdea0 	cbz	w0, 96001da4 <platform_init+0x3c>
    960021d4:	17ffffe3 	b	96002160 <platform_init+0x3f8>
		hang_up = true;
    960021d8:	52800033 	mov	w19, #0x1                   	// #1
    960021dc:	17fffef3 	b	96001da8 <platform_init+0x40>
		while (1)
			;
	}

	return;
}
    960021e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960021e4:	f94013f5 	ldr	x21, [sp, #32]
    960021e8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960021ec:	d65f03c0 	ret

00000000960021f0 <platform_init_heap>:

status_t platform_init_heap(void)
{
	const size_t heap_size = CBOOT_HEAP_LEN;
    960021f0:	900003a1 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    960021f4:	91340021 	add	x1, x1, #0xd00
	return tegrabl_heap_init(TEGRABL_HEAP_DEFAULT, CBOOT_HEAP_START,
    960021f8:	d2b38002 	mov	x2, #0x9c000000            	// #2617245696
    960021fc:	52800000 	mov	w0, #0x0                   	// #0
    96002200:	cb010042 	sub	x2, x2, x1
    96002204:	140091fe 	b	960269fc <tegrabl_heap_init>

0000000096002208 <update_ratchet_fuse>:
fail:
	return err;
}

tegrabl_error_t update_ratchet_fuse(void)
{
    96002208:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t odm_fuse;

	/* Check if opt-in fuse is set */
	err = tegrabl_fuse_read(FUSE_ODM_INFO, &odm_fuse, sizeof(odm_fuse));
    9600220c:	52800082 	mov	w2, #0x4                   	// #4
    96002210:	528006c0 	mov	w0, #0x36                  	// #54
{
    96002214:	910003fd 	mov	x29, sp
    96002218:	a90153f3 	stp	x19, x20, [sp, #16]
	err = tegrabl_fuse_read(FUSE_ODM_INFO, &odm_fuse, sizeof(odm_fuse));
    9600221c:	9100d3a1 	add	x1, x29, #0x34
{
    96002220:	a9025bf5 	stp	x21, x22, [sp, #32]
	err = tegrabl_fuse_read(FUSE_ODM_INFO, &odm_fuse, sizeof(odm_fuse));
    96002224:	9400716c 	bl	9601e7d4 <tegrabl_fuse_read>
	if (err != TEGRABL_NO_ERROR) {
    96002228:	34000140 	cbz	w0, 96002250 <update_ratchet_fuse+0x48>
		pr_warn("Failed to read opt-in fuse\n");
    9600222c:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    96002230:	913d9400 	add	x0, x0, #0xf65
		goto fail;
	}

	if ((odm_fuse & OPT_IN_FUSE_MASK) == 0) {
		pr_warn("opt-in fuse is not set, skip fuse_burning\n");
		err = TEGRABL_NO_ERROR;
    96002234:	52800013 	mov	w19, #0x0                   	// #0
		pr_warn("opt-in fuse is not set, skip fuse_burning\n");
    96002238:	9400810e 	bl	96022670 <tegrabl_printf>

	err = update_mts_ratchet_fuse();

fail:
	return err;
}
    9600223c:	2a1303e0 	mov	w0, w19
    96002240:	a94153f3 	ldp	x19, x20, [sp, #16]
    96002244:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96002248:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600224c:	d65f03c0 	ret
	if ((odm_fuse & OPT_IN_FUSE_MASK) == 0) {
    96002250:	b94037a0 	ldr	w0, [x29, #52]
    96002254:	37700080 	tbnz	w0, #14, 96002264 <update_ratchet_fuse+0x5c>
		pr_warn("opt-in fuse is not set, skip fuse_burning\n");
    96002258:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    9600225c:	913e1000 	add	x0, x0, #0xf84
    96002260:	17fffff5 	b	96002234 <update_ratchet_fuse+0x2c>
	scratch_rsv54_val = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE +
    96002264:	d2810000 	mov	x0, #0x800                 	// #2048
	bool are_sc7_bins_same = false;
    96002268:	3900cfbf 	strb	wzr, [x29, #51]
	scratch_rsv54_val = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE +
    9600226c:	f2a18720 	movk	x0, #0xc39, lsl #16
    96002270:	b9400014 	ldr	w20, [x0]
	mb1_oem_sw_ver = (scratch_rsv54_val & MB1_FIELD_RATCHET_MASK) >>
    96002274:	12003e81 	and	w1, w20, #0xffff
    96002278:	b9003ba1 	str	w1, [x29, #56]
	if (oem_sw_ratchet_ver & (oem_sw_ratchet_ver + 1)) {
    9600227c:	11000420 	add	w0, w1, #0x1
    96002280:	6a01001f 	tst	w0, w1
    96002284:	54000120 	b.eq	960022a8 <update_ratchet_fuse+0xa0>  // b.none
		pr_error("Received OEM SW ratchet version (0x%08x) is not "
    96002288:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    9600228c:	913ec800 	add	x0, x0, #0xfb2
    96002290:	940080f8 	bl	96022670 <tegrabl_printf>
		pr_error("Sanity checks on MB1 OEM ratchet failed, skip fuse burning\n");
    96002294:	52802053 	mov	w19, #0x102                 	// #258
    96002298:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    9600229c:	913fe800 	add	x0, x0, #0xffa
    960022a0:	940080f4 	bl	96022670 <tegrabl_printf>
    960022a4:	17ffffe6 	b	9600223c <update_ratchet_fuse+0x34>
	sc7_oem_sw_ver = (scratch_rsv54_val & SC7_FIELD_RATCHET_MASK) >>
    960022a8:	53107e94 	lsr	w20, w20, #16
	if ((is_sc7_fw_present) && (mb1_oem_sw_ver != sc7_oem_sw_ver)) {
    960022ac:	7100029f 	cmp	w20, #0x0
    960022b0:	7a541024 	ccmp	w1, w20, #0x4, ne  // ne = any
    960022b4:	540001c0 	b.eq	960022ec <update_ratchet_fuse+0xe4>  // b.none
     return (32 - __builtin_clz(therm_encoded_val));
    960022b8:	5ac01021 	clz	w1, w1
    960022bc:	5ac01282 	clz	w2, w20
    960022c0:	52800400 	mov	w0, #0x20                  	// #32
		pr_error("MB1(%u) and SC7(%u) are not at the same ratchet "
    960022c4:	4b020002 	sub	w2, w0, w2
    960022c8:	4b010001 	sub	w1, w0, w1
    960022cc:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960022d0:	9100e400 	add	x0, x0, #0x39
    960022d4:	940080e7 	bl	96022670 <tegrabl_printf>
		pr_error("Need to keep both of them to the latest ratchet version\n");
    960022d8:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_VERSION, 0);
    960022dc:	528003d3 	mov	w19, #0x1e                  	// #30
		pr_error("Need to keep both of them to the latest ratchet version\n");
    960022e0:	9101d400 	add	x0, x0, #0x75
    960022e4:	940080e3 	bl	96022670 <tegrabl_printf>
    960022e8:	17ffffd5 	b	9600223c <update_ratchet_fuse+0x34>
	err = tegrabl_fuse_read(FUSE_HYPERVOLTAGING, &val, sizeof(val));
    960022ec:	52800082 	mov	w2, #0x4                   	// #4
    960022f0:	9100f3a1 	add	x1, x29, #0x3c
    960022f4:	528002e0 	mov	w0, #0x17                  	// #23
    960022f8:	94007137 	bl	9601e7d4 <tegrabl_fuse_read>
    960022fc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96002300:	340000a0 	cbz	w0, 96002314 <update_ratchet_fuse+0x10c>
		pr_error("Failed to read MB1 OEM HW ratchet\n");
    96002304:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002308:	9102c400 	add	x0, x0, #0xb1
		pr_error("Failed to update MTS ratchet fuse\n");
    9600230c:	940080d9 	bl	96022670 <tegrabl_printf>
    96002310:	17ffffcb 	b	9600223c <update_ratchet_fuse+0x34>
	current_fuse_val = val;
    96002314:	294757a1 	ldp	w1, w21, [x29, #56]
	mb1_oem_hw_ver = (val << MB1_FIELD_RATCHET_FUSE_SHIFT) &
    96002318:	12003eb6 	and	w22, w21, #0xffff
	if (mb1_oem_sw_ver < mb1_oem_hw_ver) {
    9600231c:	6b0102df 	cmp	w22, w1
    96002320:	540000e9 	b.ls	9600233c <update_ratchet_fuse+0x134>  // b.plast
		pr_error("Bug: MB1 OEM SW ratchet version (0x%08x) older than "
    96002324:	2a1603e2 	mov	w2, w22
    96002328:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9600232c:	52804053 	mov	w19, #0x202                 	// #514
		pr_error("Bug: MB1 OEM SW ratchet version (0x%08x) older than "
    96002330:	91035c00 	add	x0, x0, #0xd7
    96002334:	940080cf 	bl	96022670 <tegrabl_printf>
    96002338:	17ffffc1 	b	9600223c <update_ratchet_fuse+0x34>
	} else if (mb1_oem_sw_ver == mb1_oem_hw_ver) {
    9600233c:	540001c0 	b.eq	96002374 <update_ratchet_fuse+0x16c>  // b.none
	if (is_sc7_fw_present) {
    96002340:	34000414 	cbz	w20, 960023c0 <update_ratchet_fuse+0x1b8>
		err = is_sc7_update_successful(&are_sc7_bins_same);
    96002344:	9100cfa0 	add	x0, x29, #0x33
    96002348:	940000af 	bl	96002604 <load_and_compare_sc7_images>
    9600234c:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96002350:	34000080 	cbz	w0, 96002360 <update_ratchet_fuse+0x158>
			pr_error("Failed to check SC7 update status, skip fuse burning\n");
    96002354:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002358:	9104cc00 	add	x0, x0, #0x133
    9600235c:	17ffffec 	b	9600230c <update_ratchet_fuse+0x104>
		if (are_sc7_bins_same == false) {
    96002360:	3940cfa0 	ldrb	w0, [x29, #51]
    96002364:	35000340 	cbnz	w0, 960023cc <update_ratchet_fuse+0x1c4>
			pr_error("Skip fuse burning as SC7 FW is not latest\n");
    96002368:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    9600236c:	9105b000 	add	x0, x0, #0x16c
    96002370:	940080c0 	bl	96022670 <tegrabl_printf>
	mts_oem_sw_ver = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE +
    96002374:	d280fe80 	mov	x0, #0x7f4                 	// #2036
    96002378:	f2a18720 	movk	x0, #0xc39, lsl #16
    9600237c:	b9400001 	ldr	w1, [x0]
	val = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + MTS_SCRATCH_SCR_OFFSET);
    96002380:	d2901a00 	mov	x0, #0x80d0                	// #32976
    96002384:	f2a18720 	movk	x0, #0xc39, lsl #16
	mts_oem_sw_ver = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE +
    96002388:	b9003ba1 	str	w1, [x29, #56]
	val = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + MTS_SCRATCH_SCR_OFFSET);
    9600238c:	b9400000 	ldr	w0, [x0]
    96002390:	b9003fa0 	str	w0, [x29, #60]
	if ((~val) & (0x1 << DPMU_BIT_WR)) {
    96002394:	37700460 	tbnz	w0, #14, 96002420 <update_ratchet_fuse+0x218>
		pr_error("SCR setting (0x%08x) doesn't provide write permission\n",
    96002398:	2a0003e1 	mov	w1, w0
    9600239c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960023a0:	910a0800 	add	x0, x0, #0x282
    960023a4:	940080b3 	bl	96022670 <tegrabl_printf>
		pr_error("Cannot trust the OEM SW ratchet for MTS (0x%08x) received\n"
    960023a8:	b9403ba1 	ldr	w1, [x29, #56]
    960023ac:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    960023b0:	52806053 	mov	w19, #0x302                 	// #770
		pr_error("Cannot trust the OEM SW ratchet for MTS (0x%08x) received\n"
    960023b4:	910af000 	add	x0, x0, #0x2bc
    960023b8:	940080ae 	bl	96022670 <tegrabl_printf>
    960023bc:	17ffffa0 	b	9600223c <update_ratchet_fuse+0x34>
		pr_info("SC7 FW is not present on the system, skip it's check before "
    960023c0:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960023c4:	91066800 	add	x0, x0, #0x19a
    960023c8:	940080aa 	bl	96022670 <tegrabl_printf>
	pr_info("MB1 OEM HW ratchet version (0x%08x) older than "
    960023cc:	b9403ba2 	ldr	w2, [x29, #56]
    960023d0:	2a1603e1 	mov	w1, w22
    960023d4:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960023d8:	91079c00 	add	x0, x0, #0x1e7
	current_fuse_val = current_fuse_val & (~MB1_FIELD_RATCHET_MASK);
    960023dc:	12103eb5 	and	w21, w21, #0xffff0000
	pr_info("MB1 OEM HW ratchet version (0x%08x) older than "
    960023e0:	940080a4 	bl	96022670 <tegrabl_printf>
	pr_info("Updating ratchet fuse ...\n");
    960023e4:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960023e8:	9108f800 	add	x0, x0, #0x23e
    960023ec:	940080a1 	bl	96022670 <tegrabl_printf>
	mb1_oem_sw_ver = mb1_oem_sw_ver | current_fuse_val;
    960023f0:	910103a1 	add	x1, x29, #0x40
    960023f4:	b9403ba0 	ldr	w0, [x29, #56]
	err = tegrabl_fuse_write(FUSE_HYPERVOLTAGING, &mb1_oem_sw_ver,
    960023f8:	52800082 	mov	w2, #0x4                   	// #4
	mb1_oem_sw_ver = mb1_oem_sw_ver | current_fuse_val;
    960023fc:	2a150015 	orr	w21, w0, w21
	err = tegrabl_fuse_write(FUSE_HYPERVOLTAGING, &mb1_oem_sw_ver,
    96002400:	528002e0 	mov	w0, #0x17                  	// #23
	mb1_oem_sw_ver = mb1_oem_sw_ver | current_fuse_val;
    96002404:	b81f8c35 	str	w21, [x1, #-8]!
	err = tegrabl_fuse_write(FUSE_HYPERVOLTAGING, &mb1_oem_sw_ver,
    96002408:	9400726e 	bl	9601edc0 <tegrabl_fuse_write>
    9600240c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96002410:	34fffb20 	cbz	w0, 96002374 <update_ratchet_fuse+0x16c>
		pr_error("Failed to update MB1 ratchet fuse\n");
    96002414:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002418:	91097000 	add	x0, x0, #0x25c
    9600241c:	17ffffbc 	b	9600230c <update_ratchet_fuse+0x104>
	if (oem_sw_ratchet_ver > max_ver) {
    96002420:	7103fc3f 	cmp	w1, #0xff
    96002424:	54000129 	b.ls	96002448 <update_ratchet_fuse+0x240>  // b.plast
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96002428:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("Received OEM SW ratchet version (0x%08x) exceeds\n"
    9600242c:	52801fe2 	mov	w2, #0xff                  	// #255
    96002430:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002434:	910c4c00 	add	x0, x0, #0x313
    96002438:	9400808e 	bl	96022670 <tegrabl_printf>
		pr_error("Sanity checks on MTS OEM ratchet failed, skip fuse "
    9600243c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002440:	910da400 	add	x0, x0, #0x369
    96002444:	17ffffb2 	b	9600230c <update_ratchet_fuse+0x104>
	if (oem_sw_ratchet_ver & (oem_sw_ratchet_ver + 1)) {
    96002448:	11000420 	add	w0, w1, #0x1
    9600244c:	6a01001f 	tst	w0, w1
    96002450:	540000c0 	b.eq	96002468 <update_ratchet_fuse+0x260>  // b.none
		pr_error("Received OEM SW ratchet version (0x%08x) is not "
    96002454:	f00001a0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96002458:	52802053 	mov	w19, #0x102                 	// #258
		pr_error("Received OEM SW ratchet version (0x%08x) is not "
    9600245c:	913ec800 	add	x0, x0, #0xfb2
    96002460:	94008084 	bl	96022670 <tegrabl_printf>
    96002464:	17fffff6 	b	9600243c <update_ratchet_fuse+0x234>
	err = tegrabl_fuse_read(FUSE_HYPERVOLTAGING, &val, sizeof(val));
    96002468:	52800082 	mov	w2, #0x4                   	// #4
    9600246c:	9100f3a1 	add	x1, x29, #0x3c
    96002470:	528002e0 	mov	w0, #0x17                  	// #23
    96002474:	940070d8 	bl	9601e7d4 <tegrabl_fuse_read>
    96002478:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9600247c:	34000080 	cbz	w0, 9600248c <update_ratchet_fuse+0x284>
		pr_error("Failed to read MTS OEM HW ratchet\n");
    96002480:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002484:	910ea000 	add	x0, x0, #0x3a8
    96002488:	17ffffa1 	b	9600230c <update_ratchet_fuse+0x104>
	current_fuse_val = val;
    9600248c:	294753a1 	ldp	w1, w20, [x29, #56]
	val = val >> MTS_FIELD_RATCHET_FUSE_SHIFT;
    96002490:	53187e80 	lsr	w0, w20, #24
    96002494:	b9003fa0 	str	w0, [x29, #60]
	if (mts_oem_sw_ver < mts_oem_hw_ver) {
    96002498:	6b01001f 	cmp	w0, w1
    9600249c:	540000e9 	b.ls	960024b8 <update_ratchet_fuse+0x2b0>  // b.plast
		pr_error("Bug: MTS OEM SW ratchet version (0x%08x) older than\n"
    960024a0:	2a0003e2 	mov	w2, w0
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    960024a4:	52808053 	mov	w19, #0x402                 	// #1026
		pr_error("Bug: MTS OEM SW ratchet version (0x%08x) older than\n"
    960024a8:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960024ac:	910f3800 	add	x0, x0, #0x3ce
    960024b0:	94008070 	bl	96022670 <tegrabl_printf>
    960024b4:	17ffff62 	b	9600223c <update_ratchet_fuse+0x34>
	} else if (mts_oem_sw_ver == mts_oem_hw_ver) {
    960024b8:	54ffec20 	b.eq	9600223c <update_ratchet_fuse+0x34>  // b.none
	pr_info("MTS OEM HW ratchet (0x%08x) older than "
    960024bc:	2a0103e2 	mov	w2, w1
    960024c0:	2a0003e1 	mov	w1, w0
    960024c4:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960024c8:	9110a800 	add	x0, x0, #0x42a
    960024cc:	94008069 	bl	96022670 <tegrabl_printf>
	current_fuse_val = current_fuse_val & (~MTS_FIELD_RATCHET_MASK);
    960024d0:	12003e94 	and	w20, w20, #0xffff
	pr_info("Updating ratchet fuse ...\n");
    960024d4:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960024d8:	9108f800 	add	x0, x0, #0x23e
    960024dc:	94008065 	bl	96022670 <tegrabl_printf>
		((mts_oem_sw_ver << MTS_FIELD_RATCHET_FUSE_SHIFT) |
    960024e0:	b9403ba0 	ldr	w0, [x29, #56]
	err = tegrabl_fuse_write(FUSE_HYPERVOLTAGING, &mts_oem_sw_ver,
    960024e4:	52800082 	mov	w2, #0x4                   	// #4
			(mts_oem_sw_ver << MTS_FIELD_RATCHET_FUSE_REDUNDANT_SHIFT)) &
    960024e8:	53103c01 	lsl	w1, w0, #16
		((mts_oem_sw_ver << MTS_FIELD_RATCHET_FUSE_SHIFT) |
    960024ec:	2a006020 	orr	w0, w1, w0, lsl #24
	mts_oem_sw_ver = mts_oem_sw_ver | current_fuse_val;
    960024f0:	910103a1 	add	x1, x29, #0x40
    960024f4:	2a140000 	orr	w0, w0, w20
    960024f8:	b81f8c20 	str	w0, [x1, #-8]!
	err = tegrabl_fuse_write(FUSE_HYPERVOLTAGING, &mts_oem_sw_ver,
    960024fc:	528002e0 	mov	w0, #0x17                  	// #23
    96002500:	94007230 	bl	9601edc0 <tegrabl_fuse_write>
    96002504:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96002508:	34ffe9a0 	cbz	w0, 9600223c <update_ratchet_fuse+0x34>
		pr_error("Failed to update MTS ratchet fuse\n");
    9600250c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002510:	9111c400 	add	x0, x0, #0x471
    96002514:	17ffff7e 	b	9600230c <update_ratchet_fuse+0x104>

0000000096002518 <tegrabl_storage_get_bin_size.part.0>:


#define IMAGE_CHUNK_SIZE  (8 * 1024)


static tegrabl_error_t tegrabl_storage_get_bin_size(
    96002518:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600251c:	910003fd 	mov	x29, sp
    96002520:	a9025bf5 	stp	x21, x22, [sp, #32]
    96002524:	aa0003f5 	mov	x21, x0

	case TEGRABL_BINARY_SC7_RESUME_FW:

		pr_debug("Get bin: (%s) size\n", bin_name);

		if (partition->partition_info == NULL) {
    96002528:	f9400020 	ldr	x0, [x1]
static tegrabl_error_t tegrabl_storage_get_bin_size(
    9600252c:	a90153f3 	stp	x19, x20, [sp, #16]
    96002530:	a90363f7 	stp	x23, x24, [sp, #48]
		if (partition->partition_info == NULL) {
    96002534:	b5000160 	cbnz	x0, 96002560 <tegrabl_storage_get_bin_size.part.0+0x48>
			pr_error("Invalid partition info\n");
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    96002538:	52806053 	mov	w19, #0x302                 	// #770
			pr_error("Invalid partition info\n");
    9600253c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002540:	91184c00 	add	x0, x0, #0x613
    96002544:	9400804b 	bl	96022670 <tegrabl_printf>
fail:
	if (buffer) {
		tegrabl_free(buffer);
	}
	return err;
}
    96002548:	2a1303e0 	mov	w0, w19
    9600254c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96002550:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96002554:	a94363f7 	ldp	x23, x24, [sp, #48]
    96002558:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600255c:	d65f03c0 	ret
		block_dev = partition->block_device;
    96002560:	f9400437 	ldr	x23, [x1, #8]
    96002564:	aa0203f4 	mov	x20, x2
		start_block = partition->partition_info->start_sector;
    96002568:	f9403c18 	ldr	x24, [x0, #120]
		load_size = ROUND_UP_POW2(sizeof(NvBootWb0RecoveryHeader),
    9600256c:	52800020 	mov	w0, #0x1                   	// #1
    96002570:	5280a3e2 	mov	w2, #0x51f                 	// #1311
		num_blocks = DIV_CEIL_LOG2(load_size, block_size_log2);
    96002574:	d2800033 	mov	x19, #0x1                   	// #1
		block_size_log2 = TEGRABL_BLOCKDEV_BLOCK_SIZE_LOG2(block_dev);
    96002578:	b94022e3 	ldr	w3, [x23, #32]
		load_size = ROUND_UP_POW2(sizeof(NvBootWb0RecoveryHeader),
    9600257c:	1ac32001 	lsl	w1, w0, w3
    96002580:	4b0103e0 	neg	w0, w1
    96002584:	0a020000 	and	w0, w0, w2
		num_blocks = DIV_CEIL_LOG2(load_size, block_size_log2);
    96002588:	9ac32273 	lsl	x19, x19, x3
    9600258c:	0b010000 	add	w0, w0, w1
    96002590:	d1000673 	sub	x19, x19, #0x1
    96002594:	8b000273 	add	x19, x19, x0
    96002598:	9ac32673 	lsr	x19, x19, x3
		buffer = tegrabl_malloc(load_size);
    9600259c:	94009137 	bl	96026a78 <tegrabl_malloc>
    960025a0:	aa0003f6 	mov	x22, x0
		if (buffer == NULL) {
    960025a4:	b50000c0 	cbnz	x0, 960025bc <tegrabl_storage_get_bin_size.part.0+0xa4>
			pr_error("Failed to allocate memory\n");
    960025a8:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
			err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    960025ac:	52802073 	mov	w19, #0x103                 	// #259
			pr_error("Failed to allocate memory\n");
    960025b0:	9118b800 	add	x0, x0, #0x62e
    960025b4:	9400802f 	bl	96022670 <tegrabl_printf>
    960025b8:	17ffffe4 	b	96002548 <tegrabl_storage_get_bin_size.part.0+0x30>
		err = block_dev->read_block(block_dev, buffer, start_block, num_blocks);
    960025bc:	f94026e4 	ldr	x4, [x23, #72]
    960025c0:	2a1303e3 	mov	w3, w19
    960025c4:	aa0003e1 	mov	x1, x0
    960025c8:	2a1803e2 	mov	w2, w24
    960025cc:	aa1703e0 	mov	x0, x23
    960025d0:	d63f0080 	blr	x4
    960025d4:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    960025d8:	34000100 	cbz	w0, 960025f8 <tegrabl_storage_get_bin_size.part.0+0xe0>
			pr_error("Failed to load header of bin: %s from storage into "
    960025dc:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960025e0:	aa1503e1 	mov	x1, x21
    960025e4:	91193000 	add	x0, x0, #0x64c
    960025e8:	94008022 	bl	96022670 <tegrabl_printf>
		tegrabl_free(buffer);
    960025ec:	aa1603e0 	mov	x0, x22
    960025f0:	94009132 	bl	96026ab8 <tegrabl_free>
    960025f4:	17ffffd5 	b	96002548 <tegrabl_storage_get_bin_size.part.0+0x30>
		*image_size = ((NvBootWb0RecoveryHeader *)buffer)->LengthInsecure;
    960025f8:	b94002c0 	ldr	w0, [x22]
    960025fc:	b9000280 	str	w0, [x20]
    96002600:	17fffffb 	b	960025ec <tegrabl_storage_get_bin_size.part.0+0xd4>

0000000096002604 <load_and_compare_sc7_images>:

tegrabl_error_t load_and_compare_sc7_images(bool *are_bins_same)
{
    96002604:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    96002608:	910003fd 	mov	x29, sp
    9600260c:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t recovery_image_size;
	tegrabl_error_t err = TEGRABL_NO_ERROR;


	/* Get partition info of primary SC7 image */
	err = tegrabl_partition_open("sc7", &partition1);
    96002610:	900001d4 	adrp	x20, 9603a000 <__exidx_end+0x548>
    96002614:	91125e94 	add	x20, x20, #0x497
{
    96002618:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600261c:	a90363f7 	stp	x23, x24, [sp, #48]
	err = tegrabl_partition_open("sc7", &partition1);
    96002620:	910203a1 	add	x1, x29, #0x80
{
    96002624:	a9046bf9 	stp	x25, x26, [sp, #64]
    96002628:	a90573fb 	stp	x27, x28, [sp, #80]
    9600262c:	f90037a0 	str	x0, [x29, #104]
	err = tegrabl_partition_open("sc7", &partition1);
    96002630:	aa1403e0 	mov	x0, x20
	struct tegrabl_partition partition1 = {0};
    96002634:	a9087fbf 	stp	xzr, xzr, [x29, #128]
    96002638:	f9004bbf 	str	xzr, [x29, #144]
	struct tegrabl_partition partition2 = {0};
    9600263c:	a909ffbf 	stp	xzr, xzr, [x29, #152]
    96002640:	f90057bf 	str	xzr, [x29, #168]
	err = tegrabl_partition_open("sc7", &partition1);
    96002644:	9400936e 	bl	960273fc <tegrabl_partition_open>
	if (err != TEGRABL_NO_ERROR) {
    96002648:	34000240 	cbz	w0, 96002690 <load_and_compare_sc7_images+0x8c>
    9600264c:	2a0003f3 	mov	w19, w0
		pr_error("Failed to get partiton info of image: %s\n", "sc7");
    96002650:	aa1403e1 	mov	x1, x20


	/* Get partition info of recovery SC7 image */
	err = tegrabl_partition_open("sc7_b", &partition2);
	if (err != TEGRABL_NO_ERROR) {
		pr_error("Failed to get partiton info of image: %s\n", "sc7-r");
    96002654:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002658:	91126c00 	add	x0, x0, #0x49b
    9600265c:	94008005 	bl	96022670 <tegrabl_printf>
		tegrabl_free(primary_buffer);
	}
	if (recovery_buffer) {
		tegrabl_free(recovery_buffer);
	}
	tegrabl_partition_close(&partition1);
    96002660:	910203a0 	add	x0, x29, #0x80
    96002664:	940093b0 	bl	96027524 <tegrabl_partition_close>
	tegrabl_partition_close(&partition2);
    96002668:	910263a0 	add	x0, x29, #0x98
    9600266c:	940093ae 	bl	96027524 <tegrabl_partition_close>

	return err;
}
    96002670:	2a1303e0 	mov	w0, w19
    96002674:	a94153f3 	ldp	x19, x20, [sp, #16]
    96002678:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600267c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96002680:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96002684:	a94573fb 	ldp	x27, x28, [sp, #80]
    96002688:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9600268c:	d65f03c0 	ret
    96002690:	9101e3a2 	add	x2, x29, #0x78
    96002694:	910203a1 	add	x1, x29, #0x80
    96002698:	aa1403e0 	mov	x0, x20
    9600269c:	97ffff9f 	bl	96002518 <tegrabl_storage_get_bin_size.part.0>
    960026a0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960026a4:	35fffde0 	cbnz	w0, 96002660 <load_and_compare_sc7_images+0x5c>
	err = tegrabl_partition_open("sc7_b", &partition2);
    960026a8:	900001d4 	adrp	x20, 9603a000 <__exidx_end+0x548>
    960026ac:	91132294 	add	x20, x20, #0x4c8
    960026b0:	910263a1 	add	x1, x29, #0x98
    960026b4:	aa1403e0 	mov	x0, x20
    960026b8:	94009351 	bl	960273fc <tegrabl_partition_open>
    960026bc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960026c0:	34000080 	cbz	w0, 960026d0 <load_and_compare_sc7_images+0xcc>
		pr_error("Failed to get partiton info of image: %s\n", "sc7-r");
    960026c4:	900001c1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960026c8:	91133821 	add	x1, x1, #0x4ce
    960026cc:	17ffffe2 	b	96002654 <load_and_compare_sc7_images+0x50>
    960026d0:	9101f3a2 	add	x2, x29, #0x7c
    960026d4:	910263a1 	add	x1, x29, #0x98
    960026d8:	aa1403e0 	mov	x0, x20
    960026dc:	97ffff8f 	bl	96002518 <tegrabl_storage_get_bin_size.part.0>
	if (err != TEGRABL_NO_ERROR) {
    960026e0:	35000c20 	cbnz	w0, 96002864 <load_and_compare_sc7_images+0x260>
	if (primary_image_size != recovery_image_size) {
    960026e4:	294f0ba1 	ldp	w1, w2, [x29, #120]
    960026e8:	6b02003f 	cmp	w1, w2
    960026ec:	540000c0 	b.eq	96002704 <load_and_compare_sc7_images+0x100>  // b.none
		pr_error("Length of primary(%u bytes) and recovery(%u bytes) image of "
    960026f0:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    960026f4:	52802053 	mov	w19, #0x102                 	// #258
		pr_error("Length of primary(%u bytes) and recovery(%u bytes) image of "
    960026f8:	91135000 	add	x0, x0, #0x4d4
    960026fc:	94007fdd 	bl	96022670 <tegrabl_printf>
    96002700:	17ffffd8 	b	96002660 <load_and_compare_sc7_images+0x5c>
	primary_buffer = tegrabl_malloc(IMAGE_CHUNK_SIZE);
    96002704:	d2840000 	mov	x0, #0x2000                	// #8192
	block_dev1 = partition1.block_device;
    96002708:	f94047bb 	ldr	x27, [x29, #136]
	block_dev2 = partition2.block_device;
    9600270c:	f94053bc 	ldr	x28, [x29, #160]
	primary_buffer = tegrabl_malloc(IMAGE_CHUNK_SIZE);
    96002710:	940090da 	bl	96026a78 <tegrabl_malloc>
    96002714:	aa0003f6 	mov	x22, x0
	if (primary_buffer == NULL) {
    96002718:	b50000c0 	cbnz	x0, 96002730 <load_and_compare_sc7_images+0x12c>
		pr_error("Failed to allocate memory to primary image buffer\n");
    9600271c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96002720:	52800073 	mov	w19, #0x3                   	// #3
		pr_error("Failed to allocate memory to primary image buffer\n");
    96002724:	9114a400 	add	x0, x0, #0x529
    96002728:	94007fd2 	bl	96022670 <tegrabl_printf>
    9600272c:	17ffffcd 	b	96002660 <load_and_compare_sc7_images+0x5c>
	recovery_buffer = tegrabl_malloc(IMAGE_CHUNK_SIZE);
    96002730:	d2840000 	mov	x0, #0x2000                	// #8192
    96002734:	940090d1 	bl	96026a78 <tegrabl_malloc>
    96002738:	aa0003f5 	mov	x21, x0
	if (recovery_buffer == NULL) {
    9600273c:	b5000160 	cbnz	x0, 96002768 <load_and_compare_sc7_images+0x164>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96002740:	52802073 	mov	w19, #0x103                 	// #259
		pr_error("Failed to allocate memory to recovery image buffer\n");
    96002744:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002748:	91157c00 	add	x0, x0, #0x55f
    9600274c:	94007fc9 	bl	96022670 <tegrabl_printf>
		tegrabl_free(primary_buffer);
    96002750:	aa1603e0 	mov	x0, x22
    96002754:	940090d9 	bl	96026ab8 <tegrabl_free>
	if (recovery_buffer) {
    96002758:	b4fff855 	cbz	x21, 96002660 <load_and_compare_sc7_images+0x5c>
		tegrabl_free(recovery_buffer);
    9600275c:	aa1503e0 	mov	x0, x21
    96002760:	940090d6 	bl	96026ab8 <tegrabl_free>
    96002764:	17ffffbf 	b	96002660 <load_and_compare_sc7_images+0x5c>
	block_size_log2 = TEGRABL_BLOCKDEV_BLOCK_SIZE_LOG2(block_dev1);
    96002768:	b9402360 	ldr	w0, [x27, #32]
		num_blocks = DIV_CEIL_LOG2(IMAGE_CHUNK_SIZE, block_size_log2);
    9600276c:	d2800037 	mov	x23, #0x1                   	// #1
    96002770:	d283ffe1 	mov	x1, #0x1fff                	// #8191
	remaining_size = (int32_t)primary_image_size;
    96002774:	b9407bb9 	ldr	w25, [x29, #120]
	already_read_num_blocks = 0;
    96002778:	52800018 	mov	w24, #0x0                   	// #0
		num_blocks = DIV_CEIL_LOG2(IMAGE_CHUNK_SIZE, block_size_log2);
    9600277c:	9ac022f4 	lsl	x20, x23, x0
    96002780:	8b010294 	add	x20, x20, x1
    96002784:	9ac02694 	lsr	x20, x20, x0
    96002788:	2a1403fa 	mov	w26, w20
	while(remaining_size > 0) {
    9600278c:	7100033f 	cmp	w25, #0x0
    96002790:	5400006c 	b.gt	9600279c <load_and_compare_sc7_images+0x198>
fail:
    96002794:	52800013 	mov	w19, #0x0                   	// #0
    96002798:	17ffffee 	b	96002750 <load_and_compare_sc7_images+0x14c>
		memset(primary_buffer, 0, IMAGE_CHUNK_SIZE);
    9600279c:	d2840002 	mov	x2, #0x2000                	// #8192
    960027a0:	52800001 	mov	w1, #0x0                   	// #0
    960027a4:	aa1603e0 	mov	x0, x22
    960027a8:	94009da0 	bl	96029e28 <memset>
		memset(recovery_buffer, 0, IMAGE_CHUNK_SIZE);
    960027ac:	d2840002 	mov	x2, #0x2000                	// #8192
    960027b0:	52800001 	mov	w1, #0x0                   	// #0
    960027b4:	aa1503e0 	mov	x0, x21
    960027b8:	94009d9c 	bl	96029e28 <memset>
		start_block = partition1.partition_info->start_sector +
    960027bc:	f94043a0 	ldr	x0, [x29, #128]
		err = block_dev1->read_block(block_dev1, primary_buffer, start_block,
    960027c0:	2a1a03e3 	mov	w3, w26
    960027c4:	f9402765 	ldr	x5, [x27, #72]
    960027c8:	aa1603e1 	mov	x1, x22
		start_block = partition1.partition_info->start_sector +
    960027cc:	f9403c02 	ldr	x2, [x0, #120]
		err = block_dev1->read_block(block_dev1, primary_buffer, start_block,
    960027d0:	aa1b03e0 	mov	x0, x27
    960027d4:	0b020302 	add	w2, w24, w2
    960027d8:	d63f00a0 	blr	x5
    960027dc:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    960027e0:	340000c0 	cbz	w0, 960027f8 <load_and_compare_sc7_images+0x1f4>
			pr_error("Failed to read %u blocks from storage into primary "
    960027e4:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960027e8:	2a1403e1 	mov	w1, w20
    960027ec:	91165800 	add	x0, x0, #0x596
			pr_error("Failed to read %u blocks from storage into recovery "
    960027f0:	94007fa0 	bl	96022670 <tegrabl_printf>
			goto fail;
    960027f4:	17ffffd7 	b	96002750 <load_and_compare_sc7_images+0x14c>
		start_block = partition2.partition_info->start_sector +
    960027f8:	f9404fa0 	ldr	x0, [x29, #152]
		err = block_dev2->read_block(block_dev2, recovery_buffer, start_block,
    960027fc:	2a1a03e3 	mov	w3, w26
    96002800:	f9402785 	ldr	x5, [x28, #72]
    96002804:	aa1503e1 	mov	x1, x21
		start_block = partition2.partition_info->start_sector +
    96002808:	f9403c02 	ldr	x2, [x0, #120]
		err = block_dev2->read_block(block_dev2, recovery_buffer, start_block,
    9600280c:	aa1c03e0 	mov	x0, x28
    96002810:	0b020302 	add	w2, w24, w2
    96002814:	d63f00a0 	blr	x5
    96002818:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9600281c:	340000a0 	cbz	w0, 96002830 <load_and_compare_sc7_images+0x22c>
			pr_error("Failed to read %u blocks from storage into recovery "
    96002820:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002824:	2a1403e1 	mov	w1, w20
    96002828:	91175000 	add	x0, x0, #0x5d4
    9600282c:	17fffff1 	b	960027f0 <load_and_compare_sc7_images+0x1ec>
		if (memcmp(primary_buffer, recovery_buffer, IMAGE_CHUNK_SIZE)) {
    96002830:	d2840002 	mov	x2, #0x2000                	// #8192
    96002834:	aa1503e1 	mov	x1, x21
    96002838:	aa1603e0 	mov	x0, x22
    9600283c:	94009e0d 	bl	9602a070 <memcmp>
    96002840:	34000080 	cbz	w0, 96002850 <load_and_compare_sc7_images+0x24c>
			*are_bins_same = false;
    96002844:	f94037a0 	ldr	x0, [x29, #104]
    96002848:	3900001f 	strb	wzr, [x0]
			goto fail;
    9600284c:	17ffffc1 	b	96002750 <load_and_compare_sc7_images+0x14c>
			*are_bins_same = true;
    96002850:	f94037a0 	ldr	x0, [x29, #104]
		remaining_size = remaining_size - IMAGE_CHUNK_SIZE;
    96002854:	51400b39 	sub	w25, w25, #0x2, lsl #12
		num_blocks = DIV_CEIL_LOG2(IMAGE_CHUNK_SIZE, block_size_log2);
    96002858:	2a1a03f8 	mov	w24, w26
			*are_bins_same = true;
    9600285c:	39000017 	strb	w23, [x0]
    96002860:	17ffffcb 	b	9600278c <load_and_compare_sc7_images+0x188>
fail:
    96002864:	2a0003f3 	mov	w19, w0
    96002868:	17ffff7e 	b	96002660 <load_and_compare_sc7_images+0x5c>

000000009600286c <cb_dram_ecc_scrub_alignment_check.constprop.1>:
 * MB if size > 1MB
 * KB if size < 1MB
*/
static void cb_dram_ecc_scrub_alignment_check(struct vic_transfer_config *p_vic_config)
{
	if (p_vic_config->size >= SIZE_1M) {
    9600286c:	90000361 	adrp	x1, 9606e000 <__bss_start>
    96002870:	12bffe03 	mov	w3, #0xfffff               	// #1048575
    96002874:	9102e022 	add	x2, x1, #0xb8
    96002878:	b940b820 	ldr	w0, [x1, #184]
    9600287c:	6b03001f 	cmp	w0, w3
    96002880:	540000e9 	b.ls	9600289c <cb_dram_ecc_scrub_alignment_check.constprop.1+0x30>  // b.plast
		if (p_vic_config->dest_addr_phy & VIC_ADDR_ALIGN_MASK1) {
    96002884:	f9400842 	ldr	x2, [x2, #16]
    96002888:	f2404c42 	ands	x2, x2, #0xfffff
    9600288c:	540000a0 	b.eq	960028a0 <cb_dram_ecc_scrub_alignment_check.constprop.1+0x34>  // b.none
			 * When the addr is not 1MB aligned, Reduce the size to be
			 * aligned in KB, so that scrubbing for KB aligned Addr
			 * can happen
			*/
			p_vic_config->size =
				(SIZE_1M - ((p_vic_config->dest_addr_phy + SIZE_1M) % SIZE_1M));
    96002890:	52a00200 	mov	w0, #0x100000              	// #1048576
    96002894:	4b020002 	sub	w2, w0, w2
			p_vic_config->size =
    96002898:	b900b822 	str	w2, [x1, #184]
				/*  Make the Size 1MB aligned */
				p_vic_config->size -= (p_vic_config->size % SIZE_1M);
			}
		}
	}
}
    9600289c:	d65f03c0 	ret
			if (p_vic_config->size & VIC_SIZE_ALIGN_MASK1) {
    960028a0:	f2404c1f 	tst	x0, #0xfffff
    960028a4:	54ffffc0 	b.eq	9600289c <cb_dram_ecc_scrub_alignment_check.constprop.1+0x30>  // b.none
				p_vic_config->size -= (p_vic_config->size % SIZE_1M);
    960028a8:	120c2c00 	and	w0, w0, #0xfff00000
    960028ac:	b900b820 	str	w0, [x1, #184]
    960028b0:	17fffffb 	b	9600289c <cb_dram_ecc_scrub_alignment_check.constprop.1+0x30>

00000000960028b4 <cb_dram_ecc_vic_scrub_addr_range.constprop.0>:
 *          ScrubSize       - Size of the DRAM to be scrubbed starting from Dest
 *          ScrubBlockSize  - Size of block which contains fixed pattern
 *                              starting from Src
 * Return:  Error
*/
static tegrabl_error_t cb_dram_ecc_vic_scrub_addr_range(uint64_t dest,
    960028b4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960028b8:	910003fd 	mov	x29, sp
    960028bc:	a90153f3 	stp	x19, x20, [sp, #16]
		uint32_t type) {
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint64_t end = (dest + scrubsize);
	struct vic_transfer_config *p_vic_transfer_config = &s_vic_transfer_config;

	memset(p_vic_transfer_config, 0, sizeof(struct vic_transfer_config));
    960028c0:	90000374 	adrp	x20, 9606e000 <__bss_start>
    960028c4:	9102e293 	add	x19, x20, #0xb8
static tegrabl_error_t cb_dram_ecc_vic_scrub_addr_range(uint64_t dest,
    960028c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960028cc:	aa0203f5 	mov	x21, x2
    960028d0:	a90363f7 	stp	x23, x24, [sp, #48]
	uint64_t end = (dest + scrubsize);
    960028d4:	8b020016 	add	x22, x0, x2
static tegrabl_error_t cb_dram_ecc_vic_scrub_addr_range(uint64_t dest,
    960028d8:	aa0003f7 	mov	x23, x0
    960028dc:	aa0103f8 	mov	x24, x1
	memset(p_vic_transfer_config, 0, sizeof(struct vic_transfer_config));
    960028e0:	d2800302 	mov	x2, #0x18                  	// #24
    960028e4:	52800001 	mov	w1, #0x0                   	// #0
    960028e8:	aa1303e0 	mov	x0, x19
    960028ec:	94009d4f 	bl	96029e28 <memset>
	pr_debug("Src:0x%lx Dest:0x%lx ScrubSize:0x%lx ScrubBlockSize:0x%u\n",
			 src, dest, scrubsize, scrub_block_size);

	p_vic_transfer_config->src_addr_phy = src;
	p_vic_transfer_config->dest_addr_phy = dest;
	p_vic_transfer_config->size = scrubsize;
    960028f0:	b900ba95 	str	w21, [x20, #184]
    960028f4:	aa1403f5 	mov	x21, x20
	p_vic_transfer_config->dest_addr_phy = dest;
    960028f8:	a900de78 	stp	x24, x23, [x19, #8]

		/*
		 * Re-init the Size with  original ScrubBlockSize so that we can again
		 * check for alignments and attempt maximum scrub size possible
		*/
		p_vic_transfer_config->size = scrub_block_size;
    960028fc:	52a00817 	mov	w23, #0x400000              	// #4194304
	cb_dram_ecc_scrub_alignment_check(&s_vic_transfer_config);
    96002900:	97ffffdb 	bl	9600286c <cb_dram_ecc_scrub_alignment_check.constprop.1>
	while (p_vic_transfer_config->dest_addr_phy < end) {
    96002904:	f9400a60 	ldr	x0, [x19, #16]
    96002908:	eb0002df 	cmp	x22, x0
    9600290c:	54000068 	b.hi	96002918 <cb_dram_ecc_vic_scrub_addr_range.constprop.0+0x64>  // b.pmore
    96002910:	52800014 	mov	w20, #0x0                   	// #0
    96002914:	14000012 	b	9600295c <cb_dram_ecc_vic_scrub_addr_range.constprop.0+0xa8>
		err = cb_vic_scrub(0, CB_VIC_TRANSFER, p_vic_transfer_config);
    96002918:	aa1303e2 	mov	x2, x19
    9600291c:	52800001 	mov	w1, #0x0                   	// #0
    96002920:	52800000 	mov	w0, #0x0                   	// #0
    96002924:	94007500 	bl	9601fd24 <cb_vic_scrub>
    96002928:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    9600292c:	34000240 	cbz	w0, 96002974 <cb_dram_ecc_vic_scrub_addr_range.constprop.0+0xc0>
			pr_error("VIC: Transfer Error\n");
    96002930:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002934:	911f5c00 	add	x0, x0, #0x7d7
			pr_error("VIC: Wait Error\n");
    96002938:	94007f4e 	bl	96022670 <tegrabl_printf>
		cb_dram_ecc_scrub_alignment_check(&s_vic_transfer_config);
	}

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s:VIC scrub error  = %x, Dest = 0x%lx\n", __func__, err,
    9600293c:	9102e2a0 	add	x0, x21, #0xb8
    96002940:	900001c1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96002944:	2a1403e2 	mov	w2, w20
    96002948:	911a2821 	add	x1, x1, #0x68a
    9600294c:	f9400803 	ldr	x3, [x0, #16]
    96002950:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002954:	91200c00 	add	x0, x0, #0x803
    96002958:	94007f46 	bl	96022670 <tegrabl_printf>
				 p_vic_transfer_config->dest_addr_phy);
	}
	return err;
}
    9600295c:	2a1403e0 	mov	w0, w20
    96002960:	a94153f3 	ldp	x19, x20, [sp, #16]
    96002964:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96002968:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600296c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96002970:	d65f03c0 	ret
		err = cb_vic_scrub(0, CB_VIC_WAIT_FOR_TRANSFER_COMPLETE,
    96002974:	d2800022 	mov	x2, #0x1                   	// #1
    96002978:	2a0203e1 	mov	w1, w2
    9600297c:	940074ea 	bl	9601fd24 <cb_vic_scrub>
    96002980:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96002984:	34000080 	cbz	w0, 96002994 <cb_dram_ecc_vic_scrub_addr_range.constprop.0+0xe0>
			pr_error("VIC: Wait Error\n");
    96002988:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    9600298c:	911fbc00 	add	x0, x0, #0x7ef
    96002990:	17ffffea 	b	96002938 <cb_dram_ecc_vic_scrub_addr_range.constprop.0+0x84>
		p_vic_transfer_config->dest_addr_phy += p_vic_transfer_config->size;
    96002994:	f9400a61 	ldr	x1, [x19, #16]
    96002998:	b9400260 	ldr	w0, [x19]
    9600299c:	8b010000 	add	x0, x0, x1
    960029a0:	f9000a60 	str	x0, [x19, #16]
		if ((p_vic_transfer_config->dest_addr_phy +
    960029a4:	91500001 	add	x1, x0, #0x400, lsl #12
		p_vic_transfer_config->size = scrub_block_size;
    960029a8:	4b0002c0 	sub	w0, w22, w0
    960029ac:	eb0102df 	cmp	x22, x1
    960029b0:	1a8022e0 	csel	w0, w23, w0, cs  // cs = hs, nlast
    960029b4:	b9000260 	str	w0, [x19]
		cb_dram_ecc_scrub_alignment_check(&s_vic_transfer_config);
    960029b8:	97ffffad 	bl	9600286c <cb_dram_ecc_scrub_alignment_check.constprop.1>
    960029bc:	17ffffd2 	b	96002904 <cb_dram_ecc_vic_scrub_addr_range.constprop.0+0x50>

00000000960029c0 <cb_dram_ecc_scrub>:
#endif
}

/* Scrub Function */
tegrabl_error_t cb_dram_ecc_scrub(void)
{
    960029c0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	uint64_t scrub_size = 0;
	uint32_t count = 0;
	uint64_t src = 0;
	uint64_t total_scrub_size = 0;

	pr_info("Dram Scrub in progress\n");
    960029c4:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960029c8:	911af400 	add	x0, x0, #0x6bd
{
    960029cc:	910003fd 	mov	x29, sp
    960029d0:	a90153f3 	stp	x19, x20, [sp, #16]
	dram_start = RAM_BASE;
	dram_end = dram_start + cb_get_dram_size();

	carveout = boot_params->global_data.carveout;
    960029d4:	900003b3 	adrp	x19, 96076000 <free_dram_block+0x38e8>
{
    960029d8:	a9025bf5 	stp	x21, x22, [sp, #32]
	dram_start = RAM_BASE;
    960029dc:	900003b5 	adrp	x21, 96076000 <free_dram_block+0x38e8>
{
    960029e0:	a90363f7 	stp	x23, x24, [sp, #48]
	dram_end = dram_start + cb_get_dram_size();
    960029e4:	900003b7 	adrp	x23, 96076000 <free_dram_block+0x38e8>
{
    960029e8:	a9046bf9 	stp	x25, x26, [sp, #64]
	carveout = boot_params->global_data.carveout;
    960029ec:	900003b9 	adrp	x25, 96076000 <free_dram_block+0x38e8>
{
    960029f0:	a90573fb 	stp	x27, x28, [sp, #80]
	pr_info("Dram Scrub in progress\n");
    960029f4:	94007f1f 	bl	96022670 <tegrabl_printf>
	sdram_size = (NV_READ32(NV_ADDRESS_MAP_MCB_BASE + MC_EMEM_CFG_0) & 0x3FFF);
    960029f8:	d2800a00 	mov	x0, #0x50                  	// #80
	dram_start = RAM_BASE;
    960029fc:	d2b00001 	mov	x1, #0x80000000            	// #2147483648
	sdram_size = (NV_READ32(NV_ADDRESS_MAP_MCB_BASE + MC_EMEM_CFG_0) & 0x3FFF);
    96002a00:	f2a05820 	movk	x0, #0x2c1, lsl #16
	dram_start = RAM_BASE;
    96002a04:	f9062ea1 	str	x1, [x21, #3160]
	sdram_size = (NV_READ32(NV_ADDRESS_MAP_MCB_BASE + MC_EMEM_CFG_0) & 0x3FFF);
    96002a08:	b9400000 	ldr	w0, [x0]
	dram_end = dram_start + cb_get_dram_size();
    96002a0c:	d36c3400 	ubfiz	x0, x0, #20, #14
    96002a10:	8b010000 	add	x0, x0, x1
    96002a14:	f90626e0 	str	x0, [x23, #3144]
	carveout = boot_params->global_data.carveout;
    96002a18:	f9462320 	ldr	x0, [x25, #3136]
    96002a1c:	91010000 	add	x0, x0, #0x40
    96002a20:	f9062a60 	str	x0, [x19, #3152]
#if defined(CONFIG_VIC_SCRUB)
	pr_debug("VIC Scrub Enabled\n");
	/* Initialize the VIC Engine */
	err = cb_vic_init();
    96002a24:	9400757c 	bl	96020014 <cb_vic_init>
    96002a28:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96002a2c:	340000a0 	cbz	w0, 96002a40 <cb_dram_ecc_scrub+0x80>
		pr_error("VIC: Init Error\n");
    96002a30:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002a34:	911b6000 	add	x0, x0, #0x6d8
	pr_debug("Total size Scrubbed 0x%"PRIx64"\n", total_scrub_size);
#if defined(CONFIG_VIC_SCRUB)
	/*  Power off the VIC FC */
	err = cb_vic_exit();
	if (err != TEGRABL_NO_ERROR) {
		pr_error("VIC: Exit Error\n");
    96002a38:	94007f0e 	bl	96022670 <tegrabl_printf>
		goto fail;
    96002a3c:	14000072 	b	96002c04 <cb_dram_ecc_scrub+0x244>
	src = carveout[CARVEOUT_CPUBL].base + carveout[CARVEOUT_CPUBL].size -
    96002a40:	f9462a60 	ldr	x0, [x19, #3152]
    96002a44:	91080000 	add	x0, x0, #0x200
    96002a48:	f9403816 	ldr	x22, [x0, #112]
    96002a4c:	f9403c00 	ldr	x0, [x0, #120]
    96002a50:	8b0002d6 	add	x22, x22, x0
	if (src == 0) {
    96002a54:	f15002d6 	subs	x22, x22, #0x400, lsl #12
    96002a58:	54000181 	b.ne	96002a88 <cb_dram_ecc_scrub+0xc8>  // b.any
		pr_error("VIC: Memory allocation error\n");
    96002a5c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002a60:	911bb000 	add	x0, x0, #0x6ec
	}
#endif
	pr_info("DRAM Scrub Successful\n");
    96002a64:	94007f03 	bl	96022670 <tegrabl_printf>
fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s:DRAM ECC scrub failed, error: %u", __func__, err);
	}
	return err;
}
    96002a68:	2a1403e0 	mov	w0, w20
    96002a6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96002a70:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96002a74:	a94363f7 	ldp	x23, x24, [sp, #48]
    96002a78:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96002a7c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96002a80:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96002a84:	d65f03c0 	ret
	err = tegrabl_init_scrub_dma(src, 0, FIXED_PATTERN,
    96002a88:	52975742 	mov	w2, #0xbaba                	// #47802
    96002a8c:	528000c4 	mov	w4, #0x6                   	// #6
    96002a90:	52a00803 	mov	w3, #0x400000              	// #4194304
    96002a94:	72b75742 	movk	w2, #0xbaba, lsl #16
    96002a98:	d2800001 	mov	x1, #0x0                   	// #0
    96002a9c:	aa1603e0 	mov	x0, x22
    96002aa0:	94002abc 	bl	9600d590 <tegrabl_init_scrub_dma>
    96002aa4:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96002aa8:	34000080 	cbz	w0, 96002ab8 <cb_dram_ecc_scrub+0xf8>
		pr_error("VIC: Write to scrub block failed\n");
    96002aac:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002ab0:	911c3400 	add	x0, x0, #0x70d
    96002ab4:	17ffffe1 	b	96002a38 <cb_dram_ecc_scrub+0x78>
    96002ab8:	aa1303f8 	mov	x24, x19
		if ((carveout[cotype].base < dram_start) ||
    96002abc:	f9462ea6 	ldr	x6, [x21, #3160]
	dram_carveouts_count = 0;
    96002ac0:	90000373 	adrp	x19, 9606e000 <__bss_start>
			(carveout[cotype].base > dram_end) ||
    96002ac4:	f94626e7 	ldr	x7, [x23, #3144]
		dram_carveouts[dram_carveouts_count] = (uint32_t)cotype;
    96002ac8:	90000363 	adrp	x3, 9606e000 <__bss_start>
    96002acc:	91001063 	add	x3, x3, #0x4
    96002ad0:	f9462b00 	ldr	x0, [x24, #3152]
			(carveout[cotype].base > dram_end) ||
    96002ad4:	52800004 	mov	w4, #0x0                   	// #0
	dram_carveouts_count = 0;
    96002ad8:	b900b67f 	str	wzr, [x19, #180]
			(carveout[cotype].base > dram_end) ||
    96002adc:	52800002 	mov	w2, #0x0                   	// #0
    96002ae0:	91006000 	add	x0, x0, #0x18
	for (cotype = CARVEOUT_NVDEC; cotype < CARVEOUT_NUM; cotype++) {
    96002ae4:	52800021 	mov	w1, #0x1                   	// #1
		if ((carveout[cotype].base < dram_start) ||
    96002ae8:	f85f8005 	ldur	x5, [x0, #-8]
    96002aec:	eb0600bf 	cmp	x5, x6
    96002af0:	54000163 	b.cc	96002b1c <cb_dram_ecc_scrub+0x15c>  // b.lo, b.ul, b.last
    96002af4:	eb0700bf 	cmp	x5, x7
    96002af8:	54000128 	b.hi	96002b1c <cb_dram_ecc_scrub+0x15c>  // b.pmore
			(carveout[cotype].base > dram_end) ||
    96002afc:	f9400005 	ldr	x5, [x0]
    96002b00:	b40000e5 	cbz	x5, 96002b1c <cb_dram_ecc_scrub+0x15c>
			(carveout[cotype].size == 0) || (cotype == CARVEOUT_PRIMARY) ||
    96002b04:	51008425 	sub	w5, w1, #0x21
    96002b08:	710004bf 	cmp	w5, #0x1
    96002b0c:	54000089 	b.ls	96002b1c <cb_dram_ecc_scrub+0x15c>  // b.plast
		dram_carveouts[dram_carveouts_count] = (uint32_t)cotype;
    96002b10:	b8225861 	str	w1, [x3, w2, uxtw #2]
		dram_carveouts_count++;
    96002b14:	11000442 	add	w2, w2, #0x1
    96002b18:	52800024 	mov	w4, #0x1                   	// #1
	for (cotype = CARVEOUT_NVDEC; cotype < CARVEOUT_NUM; cotype++) {
    96002b1c:	11000421 	add	w1, w1, #0x1
    96002b20:	91004000 	add	x0, x0, #0x10
    96002b24:	7100b03f 	cmp	w1, #0x2c
    96002b28:	54fffe01 	b.ne	96002ae8 <cb_dram_ecc_scrub+0x128>  // b.any
    96002b2c:	34000044 	cbz	w4, 96002b34 <cb_dram_ecc_scrub+0x174>
    96002b30:	b900b662 	str	w2, [x19, #180]
	tegrabl_sort((struct tegrabl_carveout_info *)boot_params->global_data.carveout,
    96002b34:	b940b662 	ldr	w2, [x19, #180]
    96002b38:	90000374 	adrp	x20, 9606e000 <__bss_start>
    96002b3c:	f9462320 	ldr	x0, [x25, #3136]
    96002b40:	9100129a 	add	x26, x20, #0x4
    96002b44:	aa1a03e1 	mov	x1, x26
	while (count < dram_carveouts_count) {
    96002b48:	9102d279 	add	x25, x19, #0xb4
	tegrabl_sort((struct tegrabl_carveout_info *)boot_params->global_data.carveout,
    96002b4c:	91010000 	add	x0, x0, #0x40
	uint32_t count = 0;
    96002b50:	5280001b 	mov	w27, #0x0                   	// #0
	tegrabl_sort((struct tegrabl_carveout_info *)boot_params->global_data.carveout,
    96002b54:	94008bca 	bl	96025a7c <tegrabl_sort>
	scrub_base = dram_start;
    96002b58:	f9462eb5 	ldr	x21, [x21, #3160]
    96002b5c:	d2a8001c 	mov	x28, #0x40000000            	// #1073741824
	while (count < dram_carveouts_count) {
    96002b60:	b9400320 	ldr	w0, [x25]
    96002b64:	6b1b001f 	cmp	w0, w27
    96002b68:	540001a8 	b.hi	96002b9c <cb_dram_ecc_scrub+0x1dc>  // b.pmore
	if (scrub_base < dram_end) {
    96002b6c:	f94626e2 	ldr	x2, [x23, #3144]
    96002b70:	eb15005f 	cmp	x2, x21
    96002b74:	54000569 	b.ls	96002c20 <cb_dram_ecc_scrub+0x260>  // b.plast
	return cb_dram_ecc_vic_scrub_addr_range(dest, src, scrubsize,
    96002b78:	cb150042 	sub	x2, x2, x21
    96002b7c:	aa1603e1 	mov	x1, x22
    96002b80:	aa1503e0 	mov	x0, x21
    96002b84:	97ffff4c 	bl	960028b4 <cb_dram_ecc_vic_scrub_addr_range.constprop.0>
    96002b88:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96002b8c:	340004a0 	cbz	w0, 96002c20 <cb_dram_ecc_scrub+0x260>
			pr_error("Scrub Failed at end of dram\n");
    96002b90:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002b94:	911d8800 	add	x0, x0, #0x762
    96002b98:	17ffffa8 	b	96002a38 <cb_dram_ecc_scrub+0x78>
		if (scrub_base == carveout[dram_carveouts[count]].base) {
    96002b9c:	b87b5b40 	ldr	w0, [x26, w27, uxtw #2]
    96002ba0:	f9462b01 	ldr	x1, [x24, #3152]
    96002ba4:	d37cec00 	lsl	x0, x0, #4
    96002ba8:	8b000023 	add	x3, x1, x0
    96002bac:	f8606822 	ldr	x2, [x1, x0]
    96002bb0:	eb15005f 	cmp	x2, x21
    96002bb4:	540000c1 	b.ne	96002bcc <cb_dram_ecc_scrub+0x20c>  // b.any
			scrub_base += carveout[dram_carveouts[count]].size;
    96002bb8:	f9400462 	ldr	x2, [x3, #8]
			count++;
    96002bbc:	1100077b 	add	w27, w27, #0x1
			scrub_base += carveout[dram_carveouts[count]].size;
    96002bc0:	8b0202a2 	add	x2, x21, x2
		dram_carveouts_count++;
    96002bc4:	aa0203f5 	mov	x21, x2
    96002bc8:	17ffffe6 	b	96002b60 <cb_dram_ecc_scrub+0x1a0>
		scrub_size = carveout[dram_carveouts[count]].base - scrub_base;
    96002bcc:	cb150042 	sub	x2, x2, x21
	return cb_dram_ecc_vic_scrub_addr_range(dest, src, scrubsize,
    96002bd0:	aa1603e1 	mov	x1, x22
    96002bd4:	eb1c005f 	cmp	x2, x28
    96002bd8:	aa1503e0 	mov	x0, x21
    96002bdc:	9a9c9053 	csel	x19, x2, x28, ls  // ls = plast
    96002be0:	aa1303e2 	mov	x2, x19
    96002be4:	97ffff34 	bl	960028b4 <cb_dram_ecc_vic_scrub_addr_range.constprop.0>
    96002be8:	2a0003f4 	mov	w20, w0
    96002bec:	8b150262 	add	x2, x19, x21
		if (err != TEGRABL_NO_ERROR) {
    96002bf0:	34fffea0 	cbz	w0, 96002bc4 <cb_dram_ecc_scrub+0x204>
			pr_error("Scrub failed, Scrub_Base: %lx Scrub_End: %lx", scrub_base,
    96002bf4:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002bf8:	aa1503e1 	mov	x1, x21
    96002bfc:	911cc800 	add	x0, x0, #0x732
    96002c00:	94007e9c 	bl	96022670 <tegrabl_printf>
		pr_error("%s:DRAM ECC scrub failed, error: %u", __func__, err);
    96002c04:	2a1403e2 	mov	w2, w20
    96002c08:	900001c1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96002c0c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002c10:	911aac21 	add	x1, x1, #0x6ab
    96002c14:	911ec000 	add	x0, x0, #0x7b0
    96002c18:	94007e96 	bl	96022670 <tegrabl_printf>
    96002c1c:	17ffff93 	b	96002a68 <cb_dram_ecc_scrub+0xa8>
	err = cb_vic_exit();
    96002c20:	94007543 	bl	9602012c <cb_vic_exit>
    96002c24:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96002c28:	34000080 	cbz	w0, 96002c38 <cb_dram_ecc_scrub+0x278>
		pr_error("VIC: Exit Error\n");
    96002c2c:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002c30:	911e0800 	add	x0, x0, #0x782
    96002c34:	17ffff81 	b	96002a38 <cb_dram_ecc_scrub+0x78>
	pr_info("DRAM Scrub Successful\n");
    96002c38:	900001c0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96002c3c:	911e5800 	add	x0, x0, #0x796
    96002c40:	17ffff89 	b	96002a64 <cb_dram_ecc_scrub+0xa4>

0000000096002c44 <cboot_dram_ecc_enabled>:

bool cboot_dram_ecc_enabled(void)
{
	bool dram_ecc_enabled;

	dram_ecc_enabled = NV_DRF_VAL(MC, ECC_CONTROL, ECC_ENABLE,
    96002c44:	d2831000 	mov	x0, #0x1880                	// #6272
    96002c48:	f2a05820 	movk	x0, #0x2c1, lsl #16
    96002c4c:	b9400000 	ldr	w0, [x0]
			NV_READ32(NV_ADDRESS_MAP_MCB_BASE + MC_ECC_CONTROL_0));

	return dram_ecc_enabled;
}
    96002c50:	12000000 	and	w0, w0, #0x1
    96002c54:	d65f03c0 	ret

0000000096002c58 <arm64_context_switch>:
.endm

/* void arm64_context_switch(vaddr_t *old_sp, vaddr_t new_sp); */
FUNCTION(arm64_context_switch)
    /* save old frame */
    push d14, d15
    96002c58:	6dbf3fee 	stp	d14, d15, [sp, #-16]!
    push d12, d13
    96002c5c:	6dbf37ec 	stp	d12, d13, [sp, #-16]!
    push d10, d11
    96002c60:	6dbf2fea 	stp	d10, d11, [sp, #-16]!
    push d8, d9
    96002c64:	6dbf27e8 	stp	d8, d9, [sp, #-16]!

    push x28, x29
    96002c68:	a9bf77fc 	stp	x28, x29, [sp, #-16]!
    push x26, x27
    96002c6c:	a9bf6ffa 	stp	x26, x27, [sp, #-16]!
    push x24, x25
    96002c70:	a9bf67f8 	stp	x24, x25, [sp, #-16]!
    push x22, x23
    96002c74:	a9bf5ff6 	stp	x22, x23, [sp, #-16]!
    push x20, x21
    96002c78:	a9bf57f4 	stp	x20, x21, [sp, #-16]!
    push x18, x19
    96002c7c:	a9bf4ff2 	stp	x18, x19, [sp, #-16]!
    str  x30, [sp,#-8]!
    96002c80:	f81f8ffe 	str	x30, [sp, #-8]!

    /* save old sp */
    mov  x15, sp
    96002c84:	910003ef 	mov	x15, sp
    str  x15, [x0]
    96002c88:	f900000f 	str	x15, [x0]

    /* load new sp */
    mov  sp, x1
    96002c8c:	9100003f 	mov	sp, x1

    /* restore new frame */
    ldr  x30, [sp], #8
    96002c90:	f84087fe 	ldr	x30, [sp], #8
    pop  x18, x19
    96002c94:	a8c14ff2 	ldp	x18, x19, [sp], #16
    pop  x20, x21
    96002c98:	a8c157f4 	ldp	x20, x21, [sp], #16
    pop  x22, x23
    96002c9c:	a8c15ff6 	ldp	x22, x23, [sp], #16
    pop  x24, x25
    96002ca0:	a8c167f8 	ldp	x24, x25, [sp], #16
    pop  x26, x27
    96002ca4:	a8c16ffa 	ldp	x26, x27, [sp], #16
    pop  x28, x29
    96002ca8:	a8c177fc 	ldp	x28, x29, [sp], #16

    pop  d8, d9
    96002cac:	6cc127e8 	ldp	d8, d9, [sp], #16
    pop  d10, d11
    96002cb0:	6cc12fea 	ldp	d10, d11, [sp], #16
    pop  d12, d13
    96002cb4:	6cc137ec 	ldp	d12, d13, [sp], #16
    pop  d14, d15
    96002cb8:	6cc13fee 	ldp	d14, d15, [sp], #16

    ret
    96002cbc:	d65f03c0 	ret

0000000096002cc0 <arm64_el3_to_el1>:

FUNCTION(arm64_el3_to_el1)
    mrs x0, scr_el3
    96002cc0:	d53e1100 	mrs	x0, scr_el3
    orr x0, x0, #(1<<10) /* Set RW bit (64bit lower-el) */
    96002cc4:	b2760000 	orr	x0, x0, #0x400
    msr scr_el3, x0
    96002cc8:	d51e1100 	msr	scr_el3, x0

    /* set EL1 to 64bit */
    mov x0, #(1<<31)
    96002ccc:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
    msr hcr_el2, x0
    96002cd0:	d51c1100 	msr	hcr_el2, x0

    /* disable EL2 coprocessor traps */
    mov x0, #0x33ff
    96002cd4:	d2867fe0 	mov	x0, #0x33ff                	// #13311
    msr cptr_el2, x0
    96002cd8:	d51c1140 	msr	cptr_el2, x0

    /* disable EL1 FPU traps */
    mov x0, #(0b11<<20)
    96002cdc:	d2a00600 	mov	x0, #0x300000              	// #3145728
    msr cpacr_el1, x0
    96002ce0:	d5181040 	msr	cpacr_el1, x0

    /* set up the EL1 bounce interrupt */
    mov x0, sp
    96002ce4:	910003e0 	mov	x0, sp
    msr sp_el1, x0
    96002ce8:	d51c4100 	msr	sp_el1, x0

    adr x0, .Ltarget_el1
    96002cec:	100000c0 	adr	x0, 96002d04 <arm64_el3_to_el1+0x44>
    msr elr_el3, x0
    96002cf0:	d51e4020 	msr	elr_el3, x0

    mov x0, #((0b1111 << 6) | (0b0101)) /* EL1h runlevel */
    96002cf4:	d28078a0 	mov	x0, #0x3c5                 	// #965
    msr spsr_el3, x0
    96002cf8:	d51e4000 	msr	spsr_el3, x0
    isb
    96002cfc:	d5033fdf 	isb

    eret
    96002d00:	d69f03e0 	eret

.Ltarget_el1:
    ret
    96002d04:	d65f03c0 	ret

0000000096002d08 <arm64_el3_to_el2>:

FUNCTION(arm64_el3_to_el2)
	msr sctlr_el2, xzr
    96002d08:	d51c101f 	msr	sctlr_el2, xzr

	mov x0, #0x30
    96002d0c:	d2800600 	mov	x0, #0x30                  	// #48
    orr x0, x0, #(1<<10) /* Set RW bit (64bit lower-el) */
    96002d10:	b2760000 	orr	x0, x0, #0x400
    orr x0, x0, #(1<<0)  /* Set NS bit */
    96002d14:	b2400000 	orr	x0, x0, #0x1
    msr scr_el3, x0
    96002d18:	d51e1100 	msr	scr_el3, x0

    /* disable coprocessor traps to EL3 */
    msr cptr_el3, xzr
    96002d1c:	d51e115f 	msr	cptr_el3, xzr

    /* disable EL1 FPU traps */
    mov x0, #(0b11<<20)
    96002d20:	d2a00600 	mov	x0, #0x300000              	// #3145728
    msr cpacr_el1, x0
    96002d24:	d5181040 	msr	cpacr_el1, x0

    /* set up the EL2 bounce interrupt */
    mov x0, sp
    96002d28:	910003e0 	mov	x0, sp
    msr sp_el2, x0
    96002d2c:	d51e4100 	msr	sp_el2, x0

    adr x0, .Ltarget_el2
    96002d30:	100000c0 	adr	x0, 96002d48 <arm64_el3_to_el2+0x40>
    msr elr_el3, x0
    96002d34:	d51e4020 	msr	elr_el3, x0

    mov x0, #((0b1111 << 6) | (0b1001)) /* EL2h runlevel */
    96002d38:	d2807920 	mov	x0, #0x3c9                 	// #969
    msr spsr_el3, x0
    96002d3c:	d51e4000 	msr	spsr_el3, x0
    isb
    96002d40:	d5033fdf 	isb

    eret
    96002d44:	d69f03e0 	eret

.Ltarget_el2:
    ret
    96002d48:	d65f03c0 	ret

0000000096002d4c <arm64_send_smc>:
 * Reference: ARM SMC Calling convention (ARM DEN 0028A)
 *
 * void arm64_send_smc(struct arm64_smc_regs *regs)
 */
FUNCTION(arm64_send_smc)
	sub sp, sp, #16
    96002d4c:	d10043ff 	sub	sp, sp, #0x10
	/* Only x19 is used as scratch register, but need to keep sp aligned to
	 * 16-bytes across function-calls */
	stp x19, x20, [sp]
    96002d50:	a90053f3 	stp	x19, x20, [sp]
	/* Use x19 as scratch register to store 'regs' pointer as this is
	 * guaranteed to be preserved across SMC calls */
	mov x19, x0
    96002d54:	aa0003f3 	mov	x19, x0
	/* Load parameters (func-id in x0 and params in x1..x6) */
	ldp x0, x1, [x19, #00]
    96002d58:	a9400660 	ldp	x0, x1, [x19]
	ldp x2, x3, [x19, #16]
    96002d5c:	a9410e62 	ldp	x2, x3, [x19, #16]
	ldp x4, x5, [x19, #32]
    96002d60:	a9421664 	ldp	x4, x5, [x19, #32]
	ldr x6, [x19, #48]
    96002d64:	f9401a66 	ldr	x6, [x19, #48]
	isb
    96002d68:	d5033fdf 	isb
	smc #0
    96002d6c:	d4000003 	smc	#0x0
	/* Restore result (4 registers) */
	stp x0, x1, [x19, #00]
    96002d70:	a9000660 	stp	x0, x1, [x19]
	stp x2, x3, [x19, #16]
    96002d74:	a9010e62 	stp	x2, x3, [x19, #16]
	ldp x19, x20, [sp], #16
    96002d78:	a8c153f3 	ldp	x19, x20, [sp], #16
	ret
    96002d7c:	d65f03c0 	ret

0000000096002d80 <tegrabl_arch_disable_cache>:
.endm

#if ARM_WITH_CACHE
/* void tegrabl_arch_disable_cache(uint flags); */
FUNCTION(tegrabl_arch_disable_cache)
	mrs x15, daif
    96002d80:	d53b422f 	mrs	x15, daif
	msr daifset, #3
    96002d84:	d50343df 	msr	daifset, #0x3
	tst w0, #DCACHE
    96002d88:	721f001f 	tst	w0, #0x2
	beq .Licache_disable
    96002d8c:	540004e0 	b.eq	96002e28 <tegrabl_arch_disable_cache+0xa8>  // b.none
.Ldcache_disable:
	mrs x0, SCTLR_ELx
    96002d90:	d53c1000 	mrs	x0, sctlr_el2
	mov x9, #SCTLR_C
    96002d94:	d2800089 	mov	x9, #0x4                   	// #4
	bic x0, x0, x9
    96002d98:	8a290000 	bic	x0, x0, x9
	msr SCTLR_ELx, x0
    96002d9c:	d51c1000 	msr	sctlr_el2, x0

	/* Now clean+invalidate data/unified cache to PoC */
	dcache_op_setway cisw
    96002da0:	d5390026 	mrs	x6, clidr_el1
    96002da4:	120808c3 	and	w3, w6, #0x7000000
    96002da8:	53177c63 	lsr	w3, w3, #23
    96002dac:	340003e3 	cbz	w3, 96002e28 <tegrabl_arch_disable_cache+0xa8>
    96002db0:	2a1f03ea 	mov	w10, wzr
    96002db4:	5280002e 	mov	w14, #0x1                   	// #1
    96002db8:	0b4a0542 	add	w2, w10, w10, lsr #1
    96002dbc:	1ac224c1 	lsr	w1, w6, w2
    96002dc0:	12000821 	and	w1, w1, #0x7
    96002dc4:	6b02003f 	cmp	w1, w2
    96002dc8:	5400028b 	b.lt	96002e18 <tegrabl_arch_disable_cache+0x98>  // b.tstop
    96002dcc:	d51a000a 	msr	csselr_el1, x10
    96002dd0:	d5033fdf 	isb
    96002dd4:	d5390001 	mrs	x1, ccsidr_el1
    96002dd8:	12000822 	and	w2, w1, #0x7
    96002ddc:	11001042 	add	w2, w2, #0x4
    96002de0:	53033024 	ubfx	w4, w1, #3, #10
    96002de4:	5ac01085 	clz	w5, w4
    96002de8:	1ac52089 	lsl	w9, w4, w5
    96002dec:	1ac521cc 	lsl	w12, w14, w5
    96002df0:	530d6c27 	ubfx	w7, w1, #13, #15
    96002df4:	1ac220e7 	lsl	w7, w7, w2
    96002df8:	1ac221cd 	lsl	w13, w14, w2
    96002dfc:	2a09014b 	orr	w11, w10, w9
    96002e00:	2a07016b 	orr	w11, w11, w7
    96002e04:	d5087e4b 	dc	cisw, x11
    96002e08:	6b0d00e7 	subs	w7, w7, w13
    96002e0c:	54ffff8a 	b.ge	96002dfc <tegrabl_arch_disable_cache+0x7c>  // b.tcont
    96002e10:	eb0c0129 	subs	x9, x9, x12
    96002e14:	54fffeea 	b.ge	96002df0 <tegrabl_arch_disable_cache+0x70>  // b.tcont
    96002e18:	1100094a 	add	w10, w10, #0x2
    96002e1c:	6b0a007f 	cmp	w3, w10
    96002e20:	d5033f9f 	dsb	sy
    96002e24:	54fffcac 	b.gt	96002db8 <tegrabl_arch_disable_cache+0x38>

.Licache_disable:
	tst w0, #ICACHE
    96002e28:	7200001f 	tst	w0, #0x1
	beq .Lcache_disable_done
    96002e2c:	540000c0 	b.eq	96002e44 <tegrabl_arch_disable_cache+0xc4>  // b.none
	mrs x0, SCTLR_ELx
    96002e30:	d53c1000 	mrs	x0, sctlr_el2
	mov x9, #SCTLR_I
    96002e34:	d2820009 	mov	x9, #0x1000                	// #4096
	bic x0, x0, x9
    96002e38:	8a290000 	bic	x0, x0, x9
	msr SCTLR_ELx, x0
    96002e3c:	d51c1000 	msr	sctlr_el2, x0
	ic  iallu	   /* invalidate I-cache to PoU */
    96002e40:	d508751f 	ic	iallu
.Lcache_disable_done:
	msr daif, x15
    96002e44:	d51b422f 	msr	daif, x15
	ret
    96002e48:	d65f03c0 	ret

0000000096002e4c <tegrabl_arch_enable_cache>:

/* void tegrabl_arch_enable_cache(uint flags); */
FUNCTION(tegrabl_arch_enable_cache)
	mrs x15, daif
    96002e4c:	d53b422f 	mrs	x15, daif
	msr daifset, #3
    96002e50:	d50343df 	msr	daifset, #0x3
	tst w0, #DCACHE
    96002e54:	721f001f 	tst	w0, #0x2
	beq .Licache_enable
    96002e58:	540004c0 	b.eq	96002ef0 <tegrabl_arch_enable_cache+0xa4>  // b.none

.Ldcache_enable:
	/* First invalidate data/unified cache to PoC */
	dcache_op_setway isw
    96002e5c:	d5390026 	mrs	x6, clidr_el1
    96002e60:	120808c3 	and	w3, w6, #0x7000000
    96002e64:	53177c63 	lsr	w3, w3, #23
    96002e68:	340003e3 	cbz	w3, 96002ee4 <tegrabl_arch_enable_cache+0x98>
    96002e6c:	2a1f03ea 	mov	w10, wzr
    96002e70:	5280002e 	mov	w14, #0x1                   	// #1
    96002e74:	0b4a0542 	add	w2, w10, w10, lsr #1
    96002e78:	1ac224c1 	lsr	w1, w6, w2
    96002e7c:	12000821 	and	w1, w1, #0x7
    96002e80:	6b02003f 	cmp	w1, w2
    96002e84:	5400028b 	b.lt	96002ed4 <tegrabl_arch_enable_cache+0x88>  // b.tstop
    96002e88:	d51a000a 	msr	csselr_el1, x10
    96002e8c:	d5033fdf 	isb
    96002e90:	d5390001 	mrs	x1, ccsidr_el1
    96002e94:	12000822 	and	w2, w1, #0x7
    96002e98:	11001042 	add	w2, w2, #0x4
    96002e9c:	53033024 	ubfx	w4, w1, #3, #10
    96002ea0:	5ac01085 	clz	w5, w4
    96002ea4:	1ac52089 	lsl	w9, w4, w5
    96002ea8:	1ac521cc 	lsl	w12, w14, w5
    96002eac:	530d6c27 	ubfx	w7, w1, #13, #15
    96002eb0:	1ac220e7 	lsl	w7, w7, w2
    96002eb4:	1ac221cd 	lsl	w13, w14, w2
    96002eb8:	2a09014b 	orr	w11, w10, w9
    96002ebc:	2a07016b 	orr	w11, w11, w7
    96002ec0:	d508764b 	dc	isw, x11
    96002ec4:	6b0d00e7 	subs	w7, w7, w13
    96002ec8:	54ffff8a 	b.ge	96002eb8 <tegrabl_arch_enable_cache+0x6c>  // b.tcont
    96002ecc:	eb0c0129 	subs	x9, x9, x12
    96002ed0:	54fffeea 	b.ge	96002eac <tegrabl_arch_enable_cache+0x60>  // b.tcont
    96002ed4:	1100094a 	add	w10, w10, #0x2
    96002ed8:	6b0a007f 	cmp	w3, w10
    96002edc:	d5033f9f 	dsb	sy
    96002ee0:	54fffcac 	b.gt	96002e74 <tegrabl_arch_enable_cache+0x28>

	mrs x0, SCTLR_ELx
    96002ee4:	d53c1000 	mrs	x0, sctlr_el2
	orr x0, x0, #SCTLR_C
    96002ee8:	b27e0000 	orr	x0, x0, #0x4
	msr SCTLR_ELx, x0
    96002eec:	d51c1000 	msr	sctlr_el2, x0
.Licache_enable:
	tst w0, #ICACHE
    96002ef0:	7200001f 	tst	w0, #0x1
	beq .Lcache_enable_done
    96002ef4:	540000a0 	b.eq	96002f08 <tegrabl_arch_enable_cache+0xbc>  // b.none
	ic  iallu	   /* invalidate I-cache to PoU */
    96002ef8:	d508751f 	ic	iallu
	mrs x0, SCTLR_ELx
    96002efc:	d53c1000 	mrs	x0, sctlr_el2
	orr x0, x0, #SCTLR_I
    96002f00:	b2740000 	orr	x0, x0, #0x1000
	msr SCTLR_ELx, x0
    96002f04:	d51c1000 	msr	sctlr_el2, x0
.Lcache_enable_done:
	msr daif, x15
    96002f08:	d51b422f 	msr	daif, x15
	ret
    96002f0c:	d65f03c0 	ret

0000000096002f10 <tegrabl_arch_clean_dcache_range>:

/* void tegrabl_arch_clean_dcache_range(addr_t start, size_t len); */
FUNCTION(tegrabl_arch_clean_dcache_range)
	mrs x15, daif
    96002f10:	d53b422f 	mrs	x15, daif
	msr daifset, #3
    96002f14:	d50343df 	msr	daifset, #0x3
	add x2, x0, x1 /* calculate the end address */
    96002f18:	8b010002 	add	x2, x0, x1
	bic x0, x0, #(CACHE_LINE - 1) /* align the start with a cache line */
    96002f1c:	927ae400 	and	x0, x0, #0xffffffffffffffc0
1:
	dc cvac, x0 /* clean cache to PoC by VA */
    96002f20:	d50b7a20 	dc	cvac, x0
	add x0, x0, #CACHE_LINE
    96002f24:	91010000 	add	x0, x0, #0x40
	cmp x0, x2
    96002f28:	eb02001f 	cmp	x0, x2
	blt 1b
    96002f2c:	54ffffab 	b.lt	96002f20 <tegrabl_arch_clean_dcache_range+0x10>  // b.tstop
	mov x0, xzr
    96002f30:	aa1f03e0 	mov	x0, xzr
	dsb sy
    96002f34:	d5033f9f 	dsb	sy
	msr daif, x15
    96002f38:	d51b422f 	msr	daif, x15
	ret
    96002f3c:	d65f03c0 	ret

0000000096002f40 <tegrabl_arch_invalidate_dcache_range>:

/* void tegrabl_arch_invalidate_dcache_range(addr_t start, size_t len); */
FUNCTION(tegrabl_arch_invalidate_dcache_range)
	mrs x15, daif
    96002f40:	d53b422f 	mrs	x15, daif
	msr daifset, #3
    96002f44:	d50343df 	msr	daifset, #0x3
	add x2, x0, x1 /* calculate the end address */
    96002f48:	8b010002 	add	x2, x0, x1
	bic x0, x0, #(CACHE_LINE - 1) /* align the start with a cache line */
    96002f4c:	927ae400 	and	x0, x0, #0xffffffffffffffc0
1:
	dc ivac, x0 /* invalidate cache to PoC by VA */
    96002f50:	d5087620 	dc	ivac, x0
	add x0, x0, #CACHE_LINE
    96002f54:	91010000 	add	x0, x0, #0x40
	cmp x0, x2
    96002f58:	eb02001f 	cmp	x0, x2
	blt 1b
    96002f5c:	54ffffab 	b.lt	96002f50 <tegrabl_arch_invalidate_dcache_range+0x10>  // b.tstop
	mov x0, xzr
    96002f60:	aa1f03e0 	mov	x0, xzr
	dsb sy
    96002f64:	d5033f9f 	dsb	sy
	msr daif, x15
    96002f68:	d51b422f 	msr	daif, x15
	ret
    96002f6c:	d65f03c0 	ret

0000000096002f70 <tegrabl_arch_clean_invalidate_dcache_range>:

/* void tegrabl_arch_clean_invalidate_dcache_range(addr_t start, size_t len); */
FUNCTION(tegrabl_arch_clean_invalidate_dcache_range)
	mrs x15, daif
    96002f70:	d53b422f 	mrs	x15, daif
	msr daifset, #3
    96002f74:	d50343df 	msr	daifset, #0x3
	add x2, x0, x1 /* calculate the end address */
    96002f78:	8b010002 	add	x2, x0, x1
	bic x0, x0, #(CACHE_LINE - 1) /* align the start with a cache line */
    96002f7c:	927ae400 	and	x0, x0, #0xffffffffffffffc0
1:
	dc civac, x0 /* clean invalidate cache to PoC by VA */
    96002f80:	d50b7e20 	dc	civac, x0
	add x0, x0, #CACHE_LINE
    96002f84:	91010000 	add	x0, x0, #0x40
	cmp x0, x2
    96002f88:	eb02001f 	cmp	x0, x2
	blt 1b
    96002f8c:	54ffffab 	b.lt	96002f80 <tegrabl_arch_clean_invalidate_dcache_range+0x10>  // b.tstop
	mov x0, xzr
    96002f90:	aa1f03e0 	mov	x0, xzr
	dsb sy
    96002f94:	d5033f9f 	dsb	sy
	msr daif, x15
    96002f98:	d51b422f 	msr	daif, x15
	ret
    96002f9c:	d65f03c0 	ret

0000000096002fa0 <tegrabl_arch_sync_dcache_range>:

/* void tegrabl_arch_sync_dcache_range(addr_t start, size_t len); */
FUNCTION(tegrabl_arch_sync_dcache_range)
	mrs x15, daif
    96002fa0:	d53b422f 	mrs	x15, daif
	msr daifset, #3
    96002fa4:	d50343df 	msr	daifset, #0x3
	add x2, x0, x1 /* calculate the end address */
    96002fa8:	8b010002 	add	x2, x0, x1
	mov x4, x2
    96002fac:	aa0203e4 	mov	x4, x2
	bic x0, x0, #(CACHE_LINE - 1) /* align the start with a cache line */
    96002fb0:	927ae400 	and	x0, x0, #0xffffffffffffffc0
	mov x3, x0
    96002fb4:	aa0003e3 	mov	x3, x0
1:
	dc cvac, x0 /* clean d-cache to PoC by VA */
    96002fb8:	d50b7a20 	dc	cvac, x0
	add x0, x0, #CACHE_LINE
    96002fbc:	91010000 	add	x0, x0, #0x40
	cmp x0, x2
    96002fc0:	eb02001f 	cmp	x0, x2
	blt 1b
    96002fc4:	54ffffab 	b.lt	96002fb8 <tegrabl_arch_sync_dcache_range+0x18>  // b.tstop
	dsb sy
    96002fc8:	d5033f9f 	dsb	sy
	mov x0, x3
    96002fcc:	aa0303e0 	mov	x0, x3
	mov x2, x4
    96002fd0:	aa0403e2 	mov	x2, x4
1:
	ic ivau, x0 /* invalidate i-cache to PoU by VA */
    96002fd4:	d50b7520 	ic	ivau, x0
	add x0, x0, #CACHE_LINE
    96002fd8:	91010000 	add	x0, x0, #0x40
	cmp x0, x2
    96002fdc:	eb02001f 	cmp	x0, x2
	blt 1b
    96002fe0:	54ffffab 	b.lt	96002fd4 <tegrabl_arch_sync_dcache_range+0x34>  // b.tstop
	isb
    96002fe4:	d5033fdf 	isb
	mov x0, xzr
    96002fe8:	aa1f03e0 	mov	x0, xzr
	msr daif, x15
    96002fec:	d51b422f 	msr	daif, x15
	ret
    96002ff0:	d65f03c0 	ret

0000000096002ff4 <arch_early_init>:
void *_heap_end = &_end_of_ram;

void print_cpuid(void);

void arch_early_init(void)
{
    96002ff4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    /* set the vector base */
    ARM64_WRITE_TARGET_SYSREG(VBAR_ELx, (uint64_t)&arm64_exception_base);
    96002ff8:	f0ffffe0 	adrp	x0, 96001000 <arm64_exception_base>
    96002ffc:	91000000 	add	x0, x0, #0x0
{
    96003000:	910003fd 	mov	x29, sp
    ARM64_WRITE_TARGET_SYSREG(VBAR_ELx, (uint64_t)&arm64_exception_base);
    96003004:	d51cc000 	msr	vbar_el2, x0
    96003008:	d5033fdf 	isb

    /* switch from EL3 */
    unsigned int current_el = ARM64_READ_SYSREG(CURRENTEL) >> 2;
    9600300c:	d5384240 	mrs	x0, currentel
    96003010:	d342fc00 	lsr	x0, x0, #2
#if ARM64_WITH_EL2
    if (current_el > 2) {
    96003014:	7100081f 	cmp	w0, #0x2
    96003018:	54000049 	b.ls	96003020 <arch_early_init+0x2c>  // b.plast
        arm64_el3_to_el2();
    9600301c:	97ffff3b 	bl	96002d08 <arm64_el3_to_el2>
        arm64_el3_to_el1();
    }
#endif

#if WITH_MMU
	arm64_mmu_init();
    96003020:	9400022c 	bl	960038d0 <arm64_mmu_init>

	platform_init_mmu_mappings();
#endif
}
    96003024:	a8c17bfd 	ldp	x29, x30, [sp], #16
	platform_init_mmu_mappings();
    96003028:	17fffafc 	b	96001c18 <platform_init_mmu_mappings>

000000009600302c <arch_init>:

void arch_init(void)
{
	print_cpuid();
    9600302c:	140000fc 	b	9600341c <print_cpuid>

0000000096003030 <arch_idle>:
{
}

void arch_idle(void)
{
    __asm__ volatile("wfi");
    96003030:	d503207f 	wfi
}
    96003034:	d65f03c0 	ret

0000000096003038 <dump_esr>:
	printf("spsr 0x%16" PRIx64"\n", iframe->spsr);

}

static void dump_esr(void)
{
    96003038:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600303c:	910003fd 	mov	x29, sp
    96003040:	a90153f3 	stp	x19, x20, [sp, #16]
    96003044:	a9025bf5 	stp	x21, x22, [sp, #32]
    96003048:	f9001bf7 	str	x23, [sp, #48]
	uint32_t esr = ARM64_READ_TARGET_SYSREG(ESR_ELx);
    9600304c:	d53c5214 	mrs	x20, esr_el2
	uint32_t ec = esr >> 26;
    96003050:	531a7e93 	lsr	w19, w20, #26
	uint32_t il = (esr >> 25) & 0x1;
    96003054:	53196696 	ubfx	w22, w20, #25, #1
	uint32_t iss = esr & ((1<<24) - 1);
    96003058:	12005e97 	and	w23, w20, #0xffffff
	uint64_t far = ARM64_READ_TARGET_SYSREG(FAR_ELx);
    9600305c:	d53c6015 	mrs	x21, far_el2

	switch (ec) {
    96003060:	7100867f 	cmp	w19, #0x21
    96003064:	54000880 	b.eq	96003174 <dump_esr+0x13c>  // b.none
    96003068:	54000468 	b.hi	960030f4 <dump_esr+0xbc>  // b.pmore
    9600306c:	71003a7f 	cmp	w19, #0xe
    96003070:	54000760 	b.eq	9600315c <dump_esr+0x124>  // b.none
    96003074:	54000328 	b.hi	960030d8 <dump_esr+0xa0>  // b.pmore
    96003078:	34000653 	cbz	w19, 96003140 <dump_esr+0x108>
    9600307c:	71001e7f 	cmp	w19, #0x7
    96003080:	54000680 	b.eq	96003150 <dump_esr+0x118>  // b.none
		case 0x2F:
			printf("SERROR\n");
			break;
		return;
	}
	printf("-----------------------------------------------\n");
    96003084:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003088:	91213800 	add	x0, x0, #0x84e
    9600308c:	940095d9 	bl	960287f0 <_printf>
	if (ec == 0x25) {
    96003090:	7100967f 	cmp	w19, #0x25
    96003094:	540000c1 	b.ne	960030ac <dump_esr+0x74>  // b.any
#if ARM64_WITH_EL2
		asm volatile ("at s1e2w, %0" : : "r"(far));
    96003098:	d50c7835 	at	s1e2w, x21
#else
		asm volatile ("at s1e1w, %0" : : "r"(far));
#endif
		printf("PAR_ELX: 0x%" PRIx64"\n", ARM64_READ_SYSREG(PAR_EL1));
    9600309c:	d5387401 	mrs	x1, par_el1
    960030a0:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960030a4:	91263800 	add	x0, x0, #0x98e
    960030a8:	940095d2 	bl	960287f0 <_printf>
	}
	printf("\nESR 0x%x: ec 0x%x, il 0x%x, iss 0x%x\n", esr, ec, il, iss);
    960030ac:	2a1703e4 	mov	w4, w23
    960030b0:	2a1603e3 	mov	w3, w22
    960030b4:	2a1303e2 	mov	w2, w19
    960030b8:	2a1403e1 	mov	w1, w20
}
    960030bc:	a94153f3 	ldp	x19, x20, [sp, #16]
	printf("\nESR 0x%x: ec 0x%x, il 0x%x, iss 0x%x\n", esr, ec, il, iss);
    960030c0:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
}
    960030c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
	printf("\nESR 0x%x: ec 0x%x, il 0x%x, iss 0x%x\n", esr, ec, il, iss);
    960030c8:	91267800 	add	x0, x0, #0x99e
}
    960030cc:	f9401bf7 	ldr	x23, [sp, #48]
    960030d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
	printf("\nESR 0x%x: ec 0x%x, il 0x%x, iss 0x%x\n", esr, ec, il, iss);
    960030d4:	140095c7 	b	960287f0 <_printf>
	switch (ec) {
    960030d8:	7100567f 	cmp	w19, #0x15
    960030dc:	54000460 	b.eq	96003168 <dump_esr+0x130>  // b.none
    960030e0:	7100827f 	cmp	w19, #0x20
    960030e4:	54fffd01 	b.ne	96003084 <dump_esr+0x4c>  // b.any
			printf("INSTRUCTION ABORT FROM LOWER EL\n");
    960030e8:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960030ec:	9123dc00 	add	x0, x0, #0x8f7
    960030f0:	14000016 	b	96003148 <dump_esr+0x110>
	switch (ec) {
    960030f4:	7100967f 	cmp	w19, #0x25
    960030f8:	540004a0 	b.eq	9600318c <dump_esr+0x154>  // b.none
    960030fc:	54000108 	b.hi	9600311c <dump_esr+0xe4>  // b.pmore
    96003100:	71008a7f 	cmp	w19, #0x22
    96003104:	540003e0 	b.eq	96003180 <dump_esr+0x148>  // b.none
    96003108:	7100927f 	cmp	w19, #0x24
    9600310c:	54fffbc1 	b.ne	96003084 <dump_esr+0x4c>  // b.any
			printf("DATA ABORT FROM LOWER EL\n");
    96003110:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003114:	9124e400 	add	x0, x0, #0x939
    96003118:	1400000c 	b	96003148 <dump_esr+0x110>
	switch (ec) {
    9600311c:	7100a27f 	cmp	w19, #0x28
    96003120:	54000400 	b.eq	960031a0 <dump_esr+0x168>  // b.none
    96003124:	7100be7f 	cmp	w19, #0x2f
    96003128:	54000420 	b.eq	960031ac <dump_esr+0x174>  // b.none
    9600312c:	71009a7f 	cmp	w19, #0x26
    96003130:	54fffaa1 	b.ne	96003084 <dump_esr+0x4c>  // b.any
			printf("SP ALIGNMENT\n");
    96003134:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003138:	9125a800 	add	x0, x0, #0x96a
    9600313c:	14000003 	b	96003148 <dump_esr+0x110>
			printf("UNKNOWN EXCEPTION\n");
    96003140:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003144:	9122b400 	add	x0, x0, #0x8ad
			printf("SERROR\n");
    96003148:	940095aa 	bl	960287f0 <_printf>
			break;
    9600314c:	17ffffce 	b	96003084 <dump_esr+0x4c>
			printf("ACCESS TO ASIMD/FPU\n");
    96003150:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003154:	91230000 	add	x0, x0, #0x8c0
    96003158:	17fffffc 	b	96003148 <dump_esr+0x110>
			printf("ILLEGAL INSTRUCTION SET\n");
    9600315c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003160:	91235400 	add	x0, x0, #0x8d5
    96003164:	17fffff9 	b	96003148 <dump_esr+0x110>
			printf("SYSCALL\n");
    96003168:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    9600316c:	9123b800 	add	x0, x0, #0x8ee
    96003170:	17fffff6 	b	96003148 <dump_esr+0x110>
			printf("INSTRUCTION ABORT\n");
    96003174:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003178:	91246000 	add	x0, x0, #0x918
    9600317c:	17fffff3 	b	96003148 <dump_esr+0x110>
			printf("PC ALIGNMENT\n");
    96003180:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003184:	9124ac00 	add	x0, x0, #0x92b
    96003188:	17fffff0 	b	96003148 <dump_esr+0x110>
			printf("DATA ABORT (FAR: %" PRIx64")\n", far);
    9600318c:	aa1503e1 	mov	x1, x21
    96003190:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003194:	91254c00 	add	x0, x0, #0x953
    96003198:	94009596 	bl	960287f0 <_printf>
			break;
    9600319c:	17ffffba 	b	96003084 <dump_esr+0x4c>
			printf("FP EXCEPTION\n");
    960031a0:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960031a4:	9125e000 	add	x0, x0, #0x978
    960031a8:	17ffffe8 	b	96003148 <dump_esr+0x110>
			printf("SERROR\n");
    960031ac:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960031b0:	91261800 	add	x0, x0, #0x986
    960031b4:	17ffffe5 	b	96003148 <dump_esr+0x110>

00000000960031b8 <dump_iframe>:
{
    960031b8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	printf("iframe %p:\n", iframe);
    960031bc:	aa0003e1 	mov	x1, x0
{
    960031c0:	910003fd 	mov	x29, sp
    960031c4:	f9000bf3 	str	x19, [sp, #16]
    960031c8:	aa0003f3 	mov	x19, x0
	printf("iframe %p:\n", iframe);
    960031cc:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960031d0:	91271400 	add	x0, x0, #0x9c5
    960031d4:	94009587 	bl	960287f0 <_printf>
	printf("x0  0x%16" PRIx64" x1  0x%16" PRIx64" x2  0x%16" PRIx64" x3  0x%16" PRIx64"\n",
    960031d8:	a9400a61 	ldp	x1, x2, [x19]
    960031dc:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960031e0:	a9411263 	ldp	x3, x4, [x19, #16]
    960031e4:	91274400 	add	x0, x0, #0x9d1
    960031e8:	94009582 	bl	960287f0 <_printf>
	printf("x4  0x%16" PRIx64" x5  0x%16" PRIx64" x6  0x%16" PRIx64" x7  0x%16" PRIx64"\n",
    960031ec:	a9420a61 	ldp	x1, x2, [x19, #32]
    960031f0:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960031f4:	a9431263 	ldp	x3, x4, [x19, #48]
    960031f8:	91280800 	add	x0, x0, #0xa02
    960031fc:	9400957d 	bl	960287f0 <_printf>
	printf("x8  0x%16" PRIx64" x9  0x%16" PRIx64" x10 0x%16" PRIx64" x11 0x%16" PRIx64"\n",
    96003200:	a9440a61 	ldp	x1, x2, [x19, #64]
    96003204:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003208:	a9451263 	ldp	x3, x4, [x19, #80]
    9600320c:	9128cc00 	add	x0, x0, #0xa33
    96003210:	94009578 	bl	960287f0 <_printf>
	printf("x12 0x%16" PRIx64" x13 0x%16" PRIx64" x14 0x%16" PRIx64" x15 0x%16" PRIx64"\n",
    96003214:	a9460a61 	ldp	x1, x2, [x19, #96]
    96003218:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    9600321c:	a9471263 	ldp	x3, x4, [x19, #112]
    96003220:	91299000 	add	x0, x0, #0xa64
    96003224:	94009573 	bl	960287f0 <_printf>
	printf("x16 0x%16" PRIx64" x17 0x%16" PRIx64" x18 0x%16" PRIx64" x19 0x%16" PRIx64"\n",
    96003228:	a9480a61 	ldp	x1, x2, [x19, #128]
    9600322c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003230:	a9491263 	ldp	x3, x4, [x19, #144]
    96003234:	912a5400 	add	x0, x0, #0xa95
    96003238:	9400956e 	bl	960287f0 <_printf>
	printf("x20 0x%16" PRIx64" x21 0x%16" PRIx64" x22 0x%16" PRIx64" x23 0x%16" PRIx64"\n",
    9600323c:	a94a0a61 	ldp	x1, x2, [x19, #160]
    96003240:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003244:	a94b1263 	ldp	x3, x4, [x19, #176]
    96003248:	912b1800 	add	x0, x0, #0xac6
    9600324c:	94009569 	bl	960287f0 <_printf>
	printf("x24 0x%16" PRIx64" x25 0x%16" PRIx64" x26 0x%16" PRIx64" x27 0x%16" PRIx64"\n",
    96003250:	a94c0a61 	ldp	x1, x2, [x19, #192]
    96003254:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003258:	a94d1263 	ldp	x3, x4, [x19, #208]
    9600325c:	912bdc00 	add	x0, x0, #0xaf7
    96003260:	94009564 	bl	960287f0 <_printf>
	printf("x28 0x%16" PRIx64" x29 0x%16" PRIx64" lr  0x%16" PRIx64" sp  0x%16" PRIx64"\n",
    96003264:	a94e0a61 	ldp	x1, x2, [x19, #224]
    96003268:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    9600326c:	a94f1263 	ldp	x3, x4, [x19, #240]
    96003270:	912ca000 	add	x0, x0, #0xb28
    96003274:	9400955f 	bl	960287f0 <_printf>
	printf("elr 0x%16" PRIx64"\n", iframe->elr);
    96003278:	f9408261 	ldr	x1, [x19, #256]
    9600327c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003280:	912d6400 	add	x0, x0, #0xb59
    96003284:	9400955b 	bl	960287f0 <_printf>
	printf("spsr 0x%16" PRIx64"\n", iframe->spsr);
    96003288:	f9408661 	ldr	x1, [x19, #264]
    9600328c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
}
    96003290:	f9400bf3 	ldr	x19, [sp, #16]
	printf("spsr 0x%16" PRIx64"\n", iframe->spsr);
    96003294:	912d9800 	add	x0, x0, #0xb66
}
    96003298:	a8c27bfd 	ldp	x29, x30, [sp], #32
	printf("spsr 0x%16" PRIx64"\n", iframe->spsr);
    9600329c:	14009555 	b	960287f0 <_printf>

00000000960032a0 <arm64_sync_exception>:

void arm64_sync_exception(struct arm64_iframe_long *iframe)
{
    960032a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960032a4:	910003fd 	mov	x29, sp
    960032a8:	a90153f3 	stp	x19, x20, [sp, #16]
    960032ac:	aa0003f4 	mov	x20, x0
    960032b0:	f90013f5 	str	x21, [sp, #32]
	printf("\n-----------------------------------------------\n");
    960032b4:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960032b8:	aa1e03f5 	mov	x21, x30
    960032bc:	91213400 	add	x0, x0, #0x84d
    960032c0:	9400954c 	bl	960287f0 <_printf>
	printf("Synchronous Exception: ");
	dump_esr();
	printf("-----------------------------------------------\n");
    960032c4:	f00001b3 	adrp	x19, 9603a000 <__exidx_end+0x548>
	printf("Synchronous Exception: ");
    960032c8:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960032cc:	9121fc00 	add	x0, x0, #0x87f
    960032d0:	94009548 	bl	960287f0 <_printf>
	printf("-----------------------------------------------\n");
    960032d4:	91213a73 	add	x19, x19, #0x84e
	dump_esr();
    960032d8:	97ffff58 	bl	96003038 <dump_esr>
	printf("-----------------------------------------------\n");
    960032dc:	aa1303e0 	mov	x0, x19
    960032e0:	94009544 	bl	960287f0 <_printf>
	printf(" [Stack Trace]\n\n");
    960032e4:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960032e8:	91225c00 	add	x0, x0, #0x897
    960032ec:	94009541 	bl	960287f0 <_printf>
	print_stacktrace(iframe);
    960032f0:	aa1403e0 	mov	x0, x20
    960032f4:	940001b7 	bl	960039d0 <print_stacktrace>
	printf("-----------------------------------------------\n");
    960032f8:	aa1303e0 	mov	x0, x19
    960032fc:	9400953d 	bl	960287f0 <_printf>
	dump_iframe(iframe);
    96003300:	aa1403e0 	mov	x0, x20
    96003304:	97ffffad 	bl	960031b8 <dump_iframe>
	printf("-----------------------------------------------\n");
    96003308:	aa1303e0 	mov	x0, x19
    9600330c:	94009539 	bl	960287f0 <_printf>
	panic("die\n");
    96003310:	f00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96003314:	aa1503e0 	mov	x0, x21
    96003318:	9122a021 	add	x1, x1, #0x8a8
    9600331c:	9400920a 	bl	96027b44 <_panic>

0000000096003320 <arm64_invalid_exception>:
}

void arm64_invalid_exception(struct arm64_iframe_long *iframe, unsigned int which)
{
    96003320:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96003324:	910003fd 	mov	x29, sp
    96003328:	a90153f3 	stp	x19, x20, [sp, #16]
	printf("-----------------------------------------------\n");
    9600332c:	f00001b3 	adrp	x19, 9603a000 <__exidx_end+0x548>
    96003330:	91213a73 	add	x19, x19, #0x84e
    96003334:	aa1e03f4 	mov	x20, x30
{
    96003338:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600333c:	aa0003f5 	mov	x21, x0
    96003340:	2a0103f6 	mov	w22, w1
	printf("-----------------------------------------------\n");
    96003344:	aa1303e0 	mov	x0, x19
    96003348:	9400952a 	bl	960287f0 <_printf>
	printf("invalid exception, which 0x%x\n", which);
    9600334c:	2a1603e1 	mov	w1, w22
    96003350:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003354:	9120b800 	add	x0, x0, #0x82e
    96003358:	94009526 	bl	960287f0 <_printf>
	dump_esr();
    9600335c:	97ffff37 	bl	96003038 <dump_esr>
	printf("-----------------------------------------------\n");
    96003360:	aa1303e0 	mov	x0, x19
    96003364:	94009523 	bl	960287f0 <_printf>
	dump_iframe(iframe);
    96003368:	aa1503e0 	mov	x0, x21
    9600336c:	97ffff93 	bl	960031b8 <dump_iframe>
	printf("-----------------------------------------------\n");
    96003370:	aa1303e0 	mov	x0, x19
    96003374:	9400951f 	bl	960287f0 <_printf>

	panic("die\n");
    96003378:	f00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    9600337c:	aa1403e0 	mov	x0, x20
    96003380:	9122a021 	add	x1, x1, #0x8a8
    96003384:	940091f0 	bl	96027b44 <_panic>

0000000096003388 <initial_thread_func>:

extern void arm64_context_switch(addr_t *old_sp, addr_t new_sp);

void initial_thread_func(void) __NO_RETURN;
void initial_thread_func(void)
{
    96003388:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9600338c:	910003fd 	mov	x29, sp
}

static inline __ALWAYS_INLINE void exit_critical_section(void)
{
	CF;
	critical_section_count--;
    96003390:	f0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96003394:	b94c9820 	ldr	w0, [x1, #3224]
    96003398:	51000400 	sub	w0, w0, #0x1
    9600339c:	b90c9820 	str	w0, [x1, #3224]
	if (critical_section_count == 0)
    960033a0:	35000040 	cbnz	w0, 960033a8 <initial_thread_func+0x20>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    960033a4:	d50343ff 	msr	daifclr, #0x3
    LTRACEF("initial_thread_func: thread %p calling %p with arg %p\n", current_thread, current_thread->entry, current_thread->arg);

    /* exit the implicit critical section we're within */
    exit_critical_section();

    ret = current_thread->entry(current_thread->arg);
    960033a8:	f0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960033ac:	f9463000 	ldr	x0, [x0, #3168]
    960033b0:	a9468001 	ldp	x1, x0, [x0, #104]
    960033b4:	d63f0020 	blr	x1

    LTRACEF("initial_thread_func: thread %p exiting with %d\n", current_thread, ret);

    thread_exit(ret);
    960033b8:	94000740 	bl	960050b8 <thread_exit>

00000000960033bc <arch_thread_initialize>:
}

void arch_thread_initialize(thread_t *t)
{
    960033bc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!

    struct context_switch_frame *frame = (struct context_switch_frame *)(stack_top);
    frame--;

    // fill it in
    memset(frame, 0, sizeof(*frame));
    960033c0:	d2801502 	mov	x2, #0xa8                  	// #168
    960033c4:	52800001 	mov	w1, #0x0                   	// #0
{
    960033c8:	910003fd 	mov	x29, sp
    960033cc:	a90153f3 	stp	x19, x20, [sp, #16]
    960033d0:	aa0003f4 	mov	x20, x0
    vaddr_t stack_top = (vaddr_t)t->stack + t->stack_size;
    960033d4:	a9458013 	ldp	x19, x0, [x0, #88]
{
    960033d8:	f90013f5 	str	x21, [sp, #32]
    vaddr_t stack_top = (vaddr_t)t->stack + t->stack_size;
    960033dc:	8b000273 	add	x19, x19, x0
    stack_top = ROUNDDOWN(stack_top, 16);
    960033e0:	927cee73 	and	x19, x19, #0xfffffffffffffff0
    frame--;
    960033e4:	d102a275 	sub	x21, x19, #0xa8
    memset(frame, 0, sizeof(*frame));
    960033e8:	aa1503e0 	mov	x0, x21
    960033ec:	94009a8f 	bl	96029e28 <memset>
    frame->lr = (vaddr_t)&initial_thread_func;
    960033f0:	90000000 	adrp	x0, 96003000 <arch_early_init+0xc>
    960033f4:	910e2000 	add	x0, x0, #0x388
    960033f8:	f8158260 	stur	x0, [x19, #-168]

    // set the stack pointer
    t->arch.sp = (vaddr_t)frame;
    960033fc:	f9002a95 	str	x21, [x20, #80]
}
    96003400:	a94153f3 	ldp	x19, x20, [sp, #16]
    96003404:	f94013f5 	ldr	x21, [sp, #32]
    96003408:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600340c:	d65f03c0 	ret

0000000096003410 <arch_context_switch>:

void arch_context_switch(thread_t *oldthread, thread_t *newthread)
{
    LTRACEF("old %p (%s), new %p (%s)\n", oldthread, oldthread->name, newthread, newthread->name);
    arm64_context_switch(&oldthread->arch.sp, newthread->arch.sp);
    96003410:	f9402821 	ldr	x1, [x1, #80]
    96003414:	91014000 	add	x0, x0, #0x50
    96003418:	17fffe10 	b	96002c58 <arm64_context_switch>

000000009600341c <print_cpuid>:
		NULL,
	},
};

void print_cpuid(void)
{
    9600341c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96003420:	910003fd 	mov	x29, sp
    96003424:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t midr, mpidr;
	struct cpu_id *cpu;

	mpidr = (uint32_t)ARM64_READ_SYSREG(MPIDR_EL1);
    96003428:	d53800b4 	mrs	x20, mpidr_el1
	midr = (uint32_t)ARM64_READ_SYSREG(MIDR_EL1);
    9600342c:	d5380013 	mrs	x19, midr_el1
	for (cpu = cpu_id_table; cpu->midr != 0x0; cpu++) {
		/* Mask the major and minor version number fields of MIDR and compare */
		if (cpu->midr == (midr & 0xFF8FFFF0)) {
    96003430:	121c6e61 	and	w1, w19, #0xfffffff0
	for (cpu = cpu_id_table; cpu->midr != 0x0; cpu++) {
    96003434:	b0000220 	adrp	x0, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
		if (cpu->midr == (midr & 0xFF8FFFF0)) {
    96003438:	12097021 	and	w1, w1, #0xff8fffff
	for (cpu = cpu_id_table; cpu->midr != 0x0; cpu++) {
    9600343c:	91154000 	add	x0, x0, #0x550
    96003440:	b9400003 	ldr	w3, [x0]
    96003444:	340000e3 	cbz	w3, 96003460 <print_cpuid+0x44>
		if (cpu->midr == (midr & 0xFF8FFFF0)) {
    96003448:	6b03003f 	cmp	w1, w3
    9600344c:	54000181 	b.ne	9600347c <print_cpuid+0x60>  // b.any
			dprintf(SPEW, "CPU: %s\n", cpu->name);
    96003450:	f9400401 	ldr	x1, [x0, #8]
    96003454:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003458:	912dd000 	add	x0, x0, #0xb74
    9600345c:	9400918a 	bl	96027a84 <_dprintf>
			break;
		}
	}
	dprintf(SPEW, "CPU: MIDR: 0x%08X, MPIDR: 0x%08X\n", midr, mpidr);
    96003460:	2a1403e2 	mov	w2, w20
    96003464:	2a1303e1 	mov	w1, w19
}
    96003468:	a94153f3 	ldp	x19, x20, [sp, #16]
	dprintf(SPEW, "CPU: MIDR: 0x%08X, MPIDR: 0x%08X\n", midr, mpidr);
    9600346c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
}
    96003470:	a8c27bfd 	ldp	x29, x30, [sp], #32
	dprintf(SPEW, "CPU: MIDR: 0x%08X, MPIDR: 0x%08X\n", midr, mpidr);
    96003474:	912df400 	add	x0, x0, #0xb7d
    96003478:	14009183 	b	96027a84 <_dprintf>
	for (cpu = cpu_id_table; cpu->midr != 0x0; cpu++) {
    9600347c:	91004000 	add	x0, x0, #0x10
    96003480:	17fffff0 	b	96003440 <print_cpuid+0x24>

0000000096003484 <allocate_tt_page>:
/* Free pages are marked as 1 */
static uint64_t free_page_table_bitmap = ((1UL << NUM_PAGE_TABLE_PAGES) - 1);

/* Allocates a free page for translation tables (TT) */
static uint64_t *allocate_tt_page(void)
{
    96003484:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96003488:	910003fd 	mov	x29, sp
    9600348c:	a90153f3 	stp	x19, x20, [sp, #16]
	static uint64_t *result = NULL;
	uint32_t i = 0;

	while ((i < (sizeof(free_page_table_bitmap) * 8)) &&
		   (i < NUM_PAGE_TABLE_PAGES)) {
		if (free_page_table_bitmap & (1UL << i)) {
    96003490:	b0000234 	adrp	x20, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
	uint32_t i = 0;
    96003494:	52800013 	mov	w19, #0x0                   	// #0
		if (free_page_table_bitmap & (1UL << i)) {
    96003498:	f942ca80 	ldr	x0, [x20, #1424]
    9600349c:	9ad32401 	lsr	x1, x0, x19
    960034a0:	36000381 	tbz	w1, #0, 96003510 <allocate_tt_page+0x8c>
			result = (uint64_t *)tt_base + (i * PTES_PER_PAGE);
    960034a4:	d3745a60 	ubfiz	x0, x19, #12, #23
    960034a8:	b0000241 	adrp	x1, 9604c000 <tt_base>
    960034ac:	91000021 	add	x1, x1, #0x0
			memset(result, 0, PAGE_SIZE);
    960034b0:	d2820002 	mov	x2, #0x1000                	// #4096
			result = (uint64_t *)tt_base + (i * PTES_PER_PAGE);
    960034b4:	8b010000 	add	x0, x0, x1
    960034b8:	f0000341 	adrp	x1, 9606e000 <__bss_start>
    960034bc:	f9006820 	str	x0, [x1, #208]
			memset(result, 0, PAGE_SIZE);
    960034c0:	52800001 	mov	w1, #0x0                   	// #0
    960034c4:	94009a59 	bl	96029e28 <memset>
			free_page_table_bitmap &= ~(1UL << i);
    960034c8:	d2800020 	mov	x0, #0x1                   	// #1
    960034cc:	9ad32013 	lsl	x19, x0, x19
    960034d0:	f942ca80 	ldr	x0, [x20, #1424]
    960034d4:	8a330013 	bic	x19, x0, x19
    960034d8:	f902ca93 	str	x19, [x20, #1424]
		}
		i++;
	}
	LTRACEF("free_page_table_bitmap: 0x%" PRIx64"\n", free_page_table_bitmap);

	if (result)
    960034dc:	f0000340 	adrp	x0, 9606e000 <__bss_start>
    960034e0:	aa0003f3 	mov	x19, x0
    960034e4:	f9406801 	ldr	x1, [x0, #208]
    960034e8:	b50000c1 	cbnz	x1, 96003500 <allocate_tt_page+0x7c>
		LTRACEF("next_tt: %p\n", result);
	else
		dprintf(CRITICAL, "%s:  No free pages available for TT\n", __func__);
    960034ec:	f00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960034f0:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    960034f4:	912f2c21 	add	x1, x1, #0xbcb
    960034f8:	912f7000 	add	x0, x0, #0xbdc
    960034fc:	94009162 	bl	96027a84 <_dprintf>
	return result;
}
    96003500:	f9406a60 	ldr	x0, [x19, #208]
    96003504:	a94153f3 	ldp	x19, x20, [sp, #16]
    96003508:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600350c:	d65f03c0 	ret
		i++;
    96003510:	11000673 	add	w19, w19, #0x1
	while ((i < (sizeof(free_page_table_bitmap) * 8)) &&
    96003514:	7100827f 	cmp	w19, #0x20
    96003518:	54fffc21 	b.ne	9600349c <allocate_tt_page+0x18>  // b.any
    9600351c:	17fffff0 	b	960034dc <allocate_tt_page+0x58>

0000000096003520 <arm64_mmu_map_level>:
}

/* Returns the amount of memory actually mapped */
static addr_t arm64_mmu_map_level(uint64_t *tt, uint32_t level, addr_t vaddr,
		addr_t paddr, addr_t size, uint32_t flags)
{
    96003520:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
    96003524:	910003fd 	mov	x29, sp
    96003528:	a90153f3 	stp	x19, x20, [sp, #16]
	addr_t total_size = 0;
	uint64_t attribs;
	bool needs_flush;
	uint64_t old_mem_attrib, new_mem_attrib;

	index = (vaddr >> tt_level[level].shift) & ((1 << PAGE_INDEX_SIZE) - 1);
    9600352c:	f00001b4 	adrp	x20, 9603a000 <__exidx_end+0x548>
    96003530:	91336294 	add	x20, x20, #0xcd8
{
    96003534:	a9046bf9 	stp	x25, x26, [sp, #64]
    96003538:	a90903be 	stp	x30, x0, [x29, #144]
    9600353c:	2a0103e0 	mov	w0, w1
    96003540:	aa0003f9 	mov	x25, x0
	index = (vaddr >> tt_level[level].shift) & ((1 << PAGE_INDEX_SIZE) - 1);
    96003544:	f9003ba0 	str	x0, [x29, #112]
    96003548:	8b001280 	add	x0, x20, x0, lsl #4
    9600354c:	f9404fa1 	ldr	x1, [x29, #152]
{
    96003550:	a90363f7 	stp	x23, x24, [sp, #48]
    96003554:	aa0203f3 	mov	x19, x2
    96003558:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600355c:	aa0403fa 	mov	x26, x4
	index = (vaddr >> tt_level[level].shift) & ((1 << PAGE_INDEX_SIZE) - 1);
    96003560:	b9400800 	ldr	w0, [x0, #8]
{
    96003564:	aa0303f5 	mov	x21, x3
    96003568:	2a0503f6 	mov	w22, w5
    9600356c:	a90573fb 	stp	x27, x28, [sp, #80]
	addr_t total_size = 0;
    96003570:	d2800017 	mov	x23, #0x0                   	// #0

	LTRACEF("TT: %p, L%d, VA:0x%lx, PA:0x%lx, SZ:0x%lx, FLAGS:0x%08X\n",
			tt, level, vaddr, paddr, size, flags);

	for (; (index < PTES_PER_PAGE) && (size > 0); index++) {
    96003574:	d280001b 	mov	x27, #0x0                   	// #0
	index = (vaddr >> tt_level[level].shift) & ((1 << PAGE_INDEX_SIZE) - 1);
    96003578:	9ac02440 	lsr	x0, x2, x0
    9600357c:	12002000 	and	w0, w0, #0x1ff
    96003580:	f90043a0 	str	x0, [x29, #128]
    96003584:	8b000c38 	add	x24, x1, x0, lsl #3
    96003588:	b9008fa0 	str	w0, [x29, #140]
    9600358c:	11000720 	add	w0, w25, #0x1
    96003590:	b9008ba0 	str	w0, [x29, #136]
		paddr += tt_level[level].size;
    96003594:	8b20d280 	add	x0, x20, w0, sxtw #4
    96003598:	f90037a0 	str	x0, [x29, #104]
	for (; (index < PTES_PER_PAGE) && (size > 0); index++) {
    9600359c:	b9408fa0 	ldr	w0, [x29, #140]
    960035a0:	0b1b0000 	add	w0, w0, w27
    960035a4:	7107fc1f 	cmp	w0, #0x1ff
    960035a8:	fa409b44 	ccmp	x26, #0x0, #0x4, ls  // ls = plast
    960035ac:	54000121 	b.ne	960035d0 <arm64_mmu_map_level+0xb0>  // b.any
			total_size += tt_level[level].size;
		}
	}

	return total_size;
}
    960035b0:	aa1703e0 	mov	x0, x23
    960035b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960035b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960035bc:	a94363f7 	ldp	x23, x24, [sp, #48]
    960035c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960035c4:	a94573fb 	ldp	x27, x28, [sp, #80]
    960035c8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    960035cc:	d65f03c0 	ret
		if (((tt_level[level].size > MAX_MAPPING_ALLOWED) ||
    960035d0:	f9403ba0 	ldr	x0, [x29, #112]
    960035d4:	f87b7b06 	ldr	x6, [x24, x27, lsl #3]
    960035d8:	d37cec00 	lsl	x0, x0, #4
    960035dc:	f8606a9c 	ldr	x28, [x20, x0]
    960035e0:	d2a80000 	mov	x0, #0x40000000            	// #1073741824
    960035e4:	eb00039f 	cmp	x28, x0
    960035e8:	f94043a0 	ldr	x0, [x29, #128]
    960035ec:	8b000363 	add	x3, x27, x0
    960035f0:	540000c8 	b.hi	96003608 <arm64_mmu_map_level+0xe8>  // b.pmore
			((vaddr & (tt_level[level].size - 1)) != 0) ||
    960035f4:	d1000780 	sub	x0, x28, #0x1
		if (((tt_level[level].size > MAX_MAPPING_ALLOWED) ||
    960035f8:	ea13001f 	tst	x0, x19
    960035fc:	54000061 	b.ne	96003608 <arm64_mmu_map_level+0xe8>  // b.any
			((vaddr & (tt_level[level].size - 1)) != 0) ||
    96003600:	eb1a039f 	cmp	x28, x26
    96003604:	54000989 	b.ls	96003734 <arm64_mmu_map_level+0x214>  // b.plast
			(size < tt_level[level].size)) && (level < LAST_LEVEL)) {
    96003608:	71000f3f 	cmp	w25, #0x3
    9600360c:	54000940 	b.eq	96003734 <arm64_mmu_map_level+0x214>  // b.none
    96003610:	f9404fa0 	ldr	x0, [x29, #152]
    96003614:	8b030c00 	add	x0, x0, x3, lsl #3
    96003618:	f9003fa0 	str	x0, [x29, #120]
			if (tt[index] & PTE_VALID) {
    9600361c:	360007e6 	tbz	w6, #0, 96003718 <arm64_mmu_map_level+0x1f8>
				if (tt[index] & PTE_TABLE) {
    96003620:	36080226 	tbz	w6, #1, 96003664 <arm64_mmu_map_level+0x144>
					next_tt = (uint64_t *)(tt[index] &
    96003624:	92746cc6 	and	x6, x6, #0xfffffff000
			map_size = arm64_mmu_map_level(next_tt, level+1, vaddr, paddr,
    96003628:	b9408ba1 	ldr	w1, [x29, #136]
			map_size = (size < tt_level[level].size) ? size :
    9600362c:	eb1a039f 	cmp	x28, x26
			map_size = arm64_mmu_map_level(next_tt, level+1, vaddr, paddr,
    96003630:	9a9a9384 	csel	x4, x28, x26, ls  // ls = plast
    96003634:	aa1503e3 	mov	x3, x21
    96003638:	aa1303e2 	mov	x2, x19
    9600363c:	2a1603e5 	mov	w5, w22
    96003640:	aa0603e0 	mov	x0, x6
    96003644:	97ffffb7 	bl	96003520 <arm64_mmu_map_level>
				size -= map_size;
    96003648:	eb000341 	subs	x1, x26, x0
			vaddr += map_size;
    9600364c:	8b000273 	add	x19, x19, x0
			paddr += map_size;
    96003650:	8b0002b5 	add	x21, x21, x0
				size -= map_size;
    96003654:	9a9f203a 	csel	x26, x1, xzr, cs  // cs = hs, nlast
			total_size += tt_level[level].size;
    96003658:	8b0002f7 	add	x23, x23, x0
    9600365c:	9100077b 	add	x27, x27, #0x1
    96003660:	17ffffcf 	b	9600359c <arm64_mmu_map_level+0x7c>
					next_tt = allocate_tt_page();
    96003664:	97ffff88 	bl	96003484 <allocate_tt_page>
    96003668:	aa0003e6 	mov	x6, x0
					assert(next_tt != NULL);
    9600366c:	b5000140 	cbnz	x0, 96003694 <arm64_mmu_map_level+0x174>
    96003670:	f00001a4 	adrp	x4, 9603a000 <__exidx_end+0x548>
    96003674:	9130a484 	add	x4, x4, #0xc29
    96003678:	528027e3 	mov	w3, #0x13f                 	// #319
				assert(next_tt != NULL);
    9600367c:	f9404ba0 	ldr	x0, [x29, #144]
    96003680:	f00001a2 	adrp	x2, 9603a000 <__exidx_end+0x548>
    96003684:	f00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96003688:	91310042 	add	x2, x2, #0xc40
    9600368c:	91323c21 	add	x1, x1, #0xc8f
    96003690:	9400912d 	bl	96027b44 <_panic>
					fill_tt(next_tt, level+1, tt[index]);
    96003694:	f87b7b00 	ldr	x0, [x24, x27, lsl #3]
			tt[i] = (paddr & PTE_OUTPUT_ADDR_MASK) | \
    96003698:	d2808065 	mov	x5, #0x403                 	// #1027
		paddr += tt_level[level].size;
    9600369c:	f94037a1 	ldr	x1, [x29, #104]
    960036a0:	d2800002 	mov	x2, #0x0                   	// #0
	uint64_t paddr = (template_pte & PTE_OUTPUT_ADDR_MASK);
    960036a4:	92746c03 	and	x3, x0, #0xfffffff000
    960036a8:	927ecc00 	and	x0, x0, #0x3ffffffffffffc
    960036ac:	924c5c00 	and	x0, x0, #0xfff0000000000fff
			tt[i] = (paddr & PTE_OUTPUT_ADDR_MASK) | \
    960036b0:	aa050005 	orr	x5, x0, x5
		paddr += tt_level[level].size;
    960036b4:	f9400029 	ldr	x9, [x1]
			tt[i] = (paddr & PTE_OUTPUT_ADDR_MASK) | \
    960036b8:	d2808021 	mov	x1, #0x401                 	// #1025
    960036bc:	aa010000 	orr	x0, x0, x1
    960036c0:	b9408ba4 	ldr	w4, [x29, #136]
    960036c4:	92746c61 	and	x1, x3, #0xfffffff000
    960036c8:	aa0100aa 	orr	x10, x5, x1
    960036cc:	aa010001 	orr	x1, x0, x1
    960036d0:	7100089f 	cmp	w4, #0x2
		paddr += tt_level[level].size;
    960036d4:	8b090063 	add	x3, x3, x9
			tt[i] = (paddr & PTE_OUTPUT_ADDR_MASK) | \
    960036d8:	9a8a0021 	csel	x1, x1, x10, eq  // eq = none
    960036dc:	f82278c1 	str	x1, [x6, x2, lsl #3]
    960036e0:	91000442 	add	x2, x2, #0x1
	for ( i = 0; i < PTES_PER_PAGE; i++) {
    960036e4:	f108005f 	cmp	x2, #0x200
    960036e8:	54fffec1 	b.ne	960036c0 <arm64_mmu_map_level+0x1a0>  // b.any
	tegrabl_arch_clean_dcache_range((addr_t)tt, PAGE_SIZE);
    960036ec:	aa0603e0 	mov	x0, x6
    960036f0:	f90033a6 	str	x6, [x29, #96]
    960036f4:	d2820001 	mov	x1, #0x1000                	// #4096
    960036f8:	97fffe06 	bl	96002f10 <tegrabl_arch_clean_dcache_range>
					tt[index] = (((uint64_t) next_tt & PTE_NEXT_LEVEL_TABLE_ADDR_MASK) |
    960036fc:	f94033a6 	ldr	x6, [x29, #96]
				tt[index] = (((uint64_t)next_tt & PTE_NEXT_LEVEL_TABLE_ADDR_MASK) |
    96003700:	92746cc0 	and	x0, x6, #0xfffffff000
					PTE_TABLE | PTE_VALID);
    96003704:	b2400400 	orr	x0, x0, #0x3
				tt[index] = (((uint64_t)next_tt & PTE_NEXT_LEVEL_TABLE_ADDR_MASK) |
    96003708:	f83b7b00 	str	x0, [x24, x27, lsl #3]
				asm volatile ("dc civac, %0\n" : : "r" (tt + index));
    9600370c:	f9403fa0 	ldr	x0, [x29, #120]
    96003710:	d50b7e20 	dc	civac, x0
    96003714:	17ffffc5 	b	96003628 <arm64_mmu_map_level+0x108>
				next_tt = allocate_tt_page();
    96003718:	97ffff5b 	bl	96003484 <allocate_tt_page>
    9600371c:	aa0003e6 	mov	x6, x0
				assert(next_tt != NULL);
    96003720:	b5ffff00 	cbnz	x0, 96003700 <arm64_mmu_map_level+0x1e0>
    96003724:	f00001a4 	adrp	x4, 9603a000 <__exidx_end+0x548>
    96003728:	52802923 	mov	w3, #0x149                 	// #329
    9600372c:	9130a484 	add	x4, x4, #0xc29
    96003730:	17ffffd3 	b	9600367c <arm64_mmu_map_level+0x15c>
    96003734:	f9404fa0 	ldr	x0, [x29, #152]
    96003738:	8b030c03 	add	x3, x0, x3, lsl #3
			if (tt[index] & PTE_VALID) {
    9600373c:	36000846 	tbz	w6, #0, 96003844 <arm64_mmu_map_level+0x324>
				old_mem_attrib = tt[index] & PTE_MEMATTR_INDEX_MASK;
    96003740:	927e08c5 	and	x5, x6, #0x1c
				if ((level < LAST_LEVEL) && (tt[index] & PTE_TABLE)) {
    96003744:	71000f3f 	cmp	w25, #0x3
    96003748:	54000260 	b.eq	96003794 <arm64_mmu_map_level+0x274>  // b.none
    9600374c:	36080246 	tbz	w6, #1, 96003794 <arm64_mmu_map_level+0x274>
					next_tt = (uint64_t *)(tt[index] &
    96003750:	92746cc2 	and	x2, x6, #0xfffffff000
	uint32_t index = (((uint64_t)tt - (uint64_t)tt_base) >> LEVEL3_PAGE_SHIFT);
    96003754:	b0000240 	adrp	x0, 9604c000 <tt_base>
    96003758:	91000000 	add	x0, x0, #0x0
    9600375c:	cb000040 	sub	x0, x2, x0
    96003760:	d34cfc00 	lsr	x0, x0, #12
	if (((uint64_t)tt & (PAGE_SIZE - 1)) || (index >= NUM_PAGE_TABLE_PAGES)) {
    96003764:	71007c1f 	cmp	w0, #0x1f
    96003768:	540000a9 	b.ls	9600377c <arm64_mmu_map_level+0x25c>  // b.plast
		panic("invalid tt: %p used in free_tt()\n", tt);
    9600376c:	f9404ba0 	ldr	x0, [x29, #144]
    96003770:	f00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96003774:	9132cc21 	add	x1, x1, #0xcb3
    96003778:	940090f3 	bl	96027b44 <_panic>
	free_page_table_bitmap |= (1UL << index);
    9600377c:	b0000222 	adrp	x2, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96003780:	d2800021 	mov	x1, #0x1                   	// #1
    96003784:	9ac02020 	lsl	x0, x1, x0
    96003788:	f942c841 	ldr	x1, [x2, #1424]
    9600378c:	aa010000 	orr	x0, x0, x1
    96003790:	f902c840 	str	x0, [x2, #1424]
			if (flags & MMU_FLAG_DEVICE) {
    96003794:	371005d6 	tbnz	w22, #2, 9600384c <arm64_mmu_map_level+0x32c>
				if (flags & MMU_FLAG_CACHED) {
    96003798:	360005f6 	tbz	w22, #0, 96003854 <arm64_mmu_map_level+0x334>
						new_mem_attrib = MEM_TYPE_NORMAL_WT;
    9600379c:	f27f02df 	tst	x22, #0x2
    960037a0:	d2800182 	mov	x2, #0xc                   	// #12
    960037a4:	d2800100 	mov	x0, #0x8                   	// #8
    960037a8:	9a800042 	csel	x2, x2, x0, eq  // eq = none
						   (old_mem_attrib != MEM_TYPE_DEVICE_SO) &&
    960037ac:	f27d04bf 	tst	x5, #0x18
    960037b0:	54000140 	b.eq	960037d8 <arm64_mmu_map_level+0x2b8>  // b.none
			if (needs_flush) {
    960037b4:	eb0200bf 	cmp	x5, x2
    960037b8:	54000100 	b.eq	960037d8 <arm64_mmu_map_level+0x2b8>  // b.none
    960037bc:	f90033a2 	str	x2, [x29, #96]
				tegrabl_arch_clean_invalidate_dcache_range(vaddr,
    960037c0:	aa1c03e1 	mov	x1, x28
    960037c4:	f9003fa3 	str	x3, [x29, #120]
    960037c8:	aa1303e0 	mov	x0, x19
    960037cc:	97fffde9 	bl	96002f70 <tegrabl_arch_clean_invalidate_dcache_range>
    960037d0:	f94033a2 	ldr	x2, [x29, #96]
    960037d4:	f9403fa3 	ldr	x3, [x29, #120]
			if (flags & MMU_FLAG_EXECUTE_NOT)
    960037d8:	36200056 	tbz	w22, #4, 960037e0 <arm64_mmu_map_level+0x2c0>
				attribs |= PTE_XN | PTE_PXN;
    960037dc:	b24b0442 	orr	x2, x2, #0x60000000000000
			if (flags & MMU_FLAG_READWRITE)
    960037e0:	37180056 	tbnz	w22, #3, 960037e8 <arm64_mmu_map_level+0x2c8>
				attribs |= PTE_PERM_READONLY;
    960037e4:	b2790042 	orr	x2, x2, #0x80
    960037e8:	92746ea0 	and	x0, x21, #0xfffffff000
				tt[index] = (paddr & PTE_OUTPUT_ADDR_MASK) | attribs |
    960037ec:	d280c024 	mov	x4, #0x601                 	// #1537
    960037f0:	d280c061 	mov	x1, #0x603                 	// #1539
    960037f4:	aa010001 	orr	x1, x0, x1
    960037f8:	aa040000 	orr	x0, x0, x4
    960037fc:	aa020021 	orr	x1, x1, x2
    96003800:	71000f3f 	cmp	w25, #0x3
    96003804:	aa020002 	orr	x2, x0, x2
    96003808:	9a811042 	csel	x2, x2, x1, ne  // ne = any
    9600380c:	f83b7b02 	str	x2, [x24, x27, lsl #3]
			__asm__ volatile ("dc civac, %0\n" : : "r" (tt + index));
    96003810:	d50b7e23 	dc	civac, x3
			__asm__ volatile ("tlbi vae2, %0\n" : : "r" (paddr >> 12));
    96003814:	d34cfea0 	lsr	x0, x21, #12
    96003818:	d50c8720 	tlbi	vae2, x0
			DSB;
    9600381c:	d5033f9f 	dsb	sy
			ISB;
    96003820:	d5033fdf 	isb
			if (tt_level[level].size > size)
    96003824:	f9403ba0 	ldr	x0, [x29, #112]
    96003828:	d37cec00 	lsl	x0, x0, #4
    9600382c:	f8606a80 	ldr	x0, [x20, x0]
				size -= tt_level[level].size;
    96003830:	eb000341 	subs	x1, x26, x0
			paddr += tt_level[level].size;
    96003834:	8b0002b5 	add	x21, x21, x0
				size -= tt_level[level].size;
    96003838:	9a9f203a 	csel	x26, x1, xzr, cs  // cs = hs, nlast
			vaddr += tt_level[level].size;
    9600383c:	8b000273 	add	x19, x19, x0
    96003840:	17ffff86 	b	96003658 <arm64_mmu_map_level+0x138>
			old_mem_attrib = 0x0;
    96003844:	d2800005 	mov	x5, #0x0                   	// #0
    96003848:	17ffffd3 	b	96003794 <arm64_mmu_map_level+0x274>
				new_mem_attrib = MEM_TYPE_DEVICE_SO;
    9600384c:	d2800002 	mov	x2, #0x0                   	// #0
    96003850:	17ffffd7 	b	960037ac <arm64_mmu_map_level+0x28c>
					new_mem_attrib = MEM_TYPE_NORMAL_UC;
    96003854:	d2800082 	mov	x2, #0x4                   	// #4
    96003858:	17ffffd5 	b	960037ac <arm64_mmu_map_level+0x28c>

000000009600385c <arm64_mmu_map>:
	DSB;
	ISB;
}

void arm64_mmu_map(addr_t paddr, addr_t vaddr, addr_t size, uint32_t flags)
{
    9600385c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96003860:	910003fd 	mov	x29, sp
    96003864:	f9000bf3 	str	x19, [sp, #16]
	if (critical_section_count == 0)
    96003868:	f0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    9600386c:	b94c9a64 	ldr	w4, [x19, #3224]
    96003870:	35000044 	cbnz	w4, 96003878 <arm64_mmu_map+0x1c>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96003874:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96003878:	b94c9a66 	ldr	w6, [x19, #3224]
    9600387c:	110004c6 	add	w6, w6, #0x1
    96003880:	b90c9a66 	str	w6, [x19, #3224]
	enter_critical_section();
	arm64_mmu_map_level((uint64_t *)tt_base, FIRST_LEVEL,
    96003884:	2a0303e5 	mov	w5, w3
    96003888:	aa0203e4 	mov	x4, x2
    9600388c:	aa0003e3 	mov	x3, x0
    96003890:	aa0103e2 	mov	x2, x1
    96003894:	b0000240 	adrp	x0, 9604c000 <tt_base>
    96003898:	52800021 	mov	w1, #0x1                   	// #1
    9600389c:	91000000 	add	x0, x0, #0x0
    960038a0:	97ffff20 	bl	96003520 <arm64_mmu_map_level>
	asm volatile ("tlbi alle2is\n");
    960038a4:	d50c831f 	tlbi	alle2is
	DSB;
    960038a8:	d5033f9f 	dsb	sy
	ISB;
    960038ac:	d5033fdf 	isb
	critical_section_count--;
    960038b0:	b94c9a60 	ldr	w0, [x19, #3224]
    960038b4:	51000400 	sub	w0, w0, #0x1
    960038b8:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    960038bc:	35000040 	cbnz	w0, 960038c4 <arm64_mmu_map+0x68>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    960038c0:	d50343ff 	msr	daifclr, #0x3
			vaddr, paddr, size, flags);
	arm64_invalidate_tlb();
	exit_critical_section();
}
    960038c4:	f9400bf3 	ldr	x19, [sp, #16]
    960038c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960038cc:	d65f03c0 	ret

00000000960038d0 <arm64_mmu_init>:
		*boot_params = (struct tboot_cpubl_params *)(uintptr_t)scratch7;
	}
}

void arm64_mmu_init(void)
{
    960038d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	uint64_t reg;
	struct tboot_cpubl_params *boot_params;

	/* Initialize SCTLR with sane value */
	ARM64_WRITE_TARGET_SYSREG(SCTLR_ELx, 0x30D00800);
    960038d4:	52810000 	mov	w0, #0x800                 	// #2048
    960038d8:	72a61a00 	movk	w0, #0x30d0, lsl #16
{
    960038dc:	910003fd 	mov	x29, sp
    960038e0:	f9000bf3 	str	x19, [sp, #16]
	ARM64_WRITE_TARGET_SYSREG(SCTLR_ELx, 0x30D00800);
    960038e4:	d51c1000 	msr	sctlr_el2, x0
    960038e8:	d5033fdf 	isb

	/* initialize MAIR */
	LTRACEF("MAIR: 0x%llx\n", MAIR_VALUE);
	ARM64_WRITE_TARGET_SYSREG(MAIR_ELx, MAIR_VALUE);
    960038ec:	d2888000 	mov	x0, #0x4400                	// #17408
    960038f0:	f2bff100 	movk	x0, #0xff88, lsl #16
    960038f4:	d51ca200 	msr	mair_el2, x0
    960038f8:	d5033fdf 	isb
#if ARM64_WITH_EL2
	reg |= TCR_PS_1TB;
#else
	reg |= TCR_IPS_1TB;
#endif
	dprintf(SPEW, "TCR: 0x%" PRIx64"\n", reg);
    960038fc:	d284a333 	mov	x19, #0x2519                	// #9497
    96003900:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003904:	f2a01053 	movk	x19, #0x82, lsl #16
    96003908:	91300400 	add	x0, x0, #0xc01
    9600390c:	aa1303e1 	mov	x1, x19
    96003910:	9400905d 	bl	96027a84 <_dprintf>
	ARM64_WRITE_TARGET_SYSREG(TCR_ELx, reg);
    96003914:	d51c2053 	msr	tcr_el2, x19
    96003918:	d5033fdf 	isb

	LTRACEF("free_page_table_bitmap: 0x%" PRIx64"\n", free_page_table_bitmap);
	/* Marked the first page as allocated for TT-base */
	free_page_table_bitmap &= ~1UL;
    9600391c:	b0000221 	adrp	x1, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
	memset(tt_base, 0, PAGE_SIZE);
    96003920:	d2820002 	mov	x2, #0x1000                	// #4096
    96003924:	b0000253 	adrp	x19, 9604c000 <tt_base>
    96003928:	91000273 	add	x19, x19, #0x0
	free_page_table_bitmap &= ~1UL;
    9600392c:	f942c820 	ldr	x0, [x1, #1424]
    96003930:	927ff800 	and	x0, x0, #0xfffffffffffffffe
    96003934:	f902c820 	str	x0, [x1, #1424]
	memset(tt_base, 0, PAGE_SIZE);
    96003938:	52800001 	mov	w1, #0x0                   	// #0
    9600393c:	aa1303e0 	mov	x0, x19
    96003940:	9400993a 	bl	96029e28 <memset>
	LTRACEF("free_page_table_bitmap: 0x%" PRIx64"\n", free_page_table_bitmap);
	dprintf(SPEW, "Translation Table Base: %p\n", tt_base);
    96003944:	aa1303e1 	mov	x1, x19
    96003948:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    9600394c:	91303400 	add	x0, x0, #0xc0d
    96003950:	9400904d 	bl	96027a84 <_dprintf>
	/* set up the translation table base */
	ARM64_WRITE_TARGET_SYSREG(TTBR0_ELx, (uint64_t)tt_base);
    96003954:	d51c2013 	msr	ttbr0_el2, x19
    96003958:	d5033fdf 	isb
	scratch7 = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_7);
    9600395c:	d2812d80 	mov	x0, #0x96c                 	// #2412
	/* Read boot param pointer from scratch7 register to get carveout info shared from previous boot stage */
	arm64_init_boot_param(&boot_params);

#if defined(IS_T186)
	/* Map cboot region */
	arm64_mmu_map(boot_params->global_data.carveout[CARVEOUT_CPUBL].base,
    96003960:	52800123 	mov	w3, #0x9                   	// #9
	scratch7 = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_7);
    96003964:	f2a18720 	movk	x0, #0xc39, lsl #16
    96003968:	b9400002 	ldr	w2, [x0]
		*boot_params = (struct tboot_cpubl_params *)(uintptr_t)((uint64_t)scratch7 << CONFIG_PAGE_SIZE_LOG2);
    9600396c:	7100005f 	cmp	w2, #0x0
    96003970:	2a0203e1 	mov	w1, w2
    96003974:	d370bc20 	lsl	x0, x1, #16
    96003978:	9a81a000 	csel	x0, x0, x1, ge  // ge = tcont
	arm64_mmu_map(boot_params->global_data.carveout[CARVEOUT_CPUBL].base,
    9600397c:	f9415801 	ldr	x1, [x0, #688]
    96003980:	f9415c02 	ldr	x2, [x0, #696]
    96003984:	aa0103e0 	mov	x0, x1
    96003988:	97ffffb5 	bl	9600385c <arm64_mmu_map>
				  (addr_t)boot_params->carveout_info[CARVEOUT_CPUBL].size,
				  MMU_FLAG_CACHED | MMU_FLAG_READWRITE);
#endif

	/* turn on the mmu */
	ARM64_WRITE_TARGET_SYSREG(SCTLR_ELx, ARM64_READ_TARGET_SYSREG(SCTLR_ELx) | SCTLR_M  | SCTLR_I | SCTLR_C);
    9600398c:	d53c1000 	mrs	x0, sctlr_el2
    96003990:	d28200a1 	mov	x1, #0x1005                	// #4101
    96003994:	aa010000 	orr	x0, x0, x1
    96003998:	d51c1000 	msr	sctlr_el2, x0
    9600399c:	d5033fdf 	isb
	ISB;
    960039a0:	d5033fdf 	isb
}
    960039a4:	f9400bf3 	ldr	x19, [sp, #16]
    960039a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960039ac:	d65f03c0 	ret

00000000960039b0 <arch_disable_mmu>:
void arch_disable_mmu(void)
{
	uint64_t val;

	/* disable mmu and cache */
	val = ARM64_READ_TARGET_SYSREG(SCTLR_ELx);
    960039b0:	d53c1000 	mrs	x0, sctlr_el2
	val &= ~(SCTLR_I | SCTLR_C | SCTLR_M);
    960039b4:	928200a1 	mov	x1, #0xffffffffffffeffa    	// #-4102
    960039b8:	8a010000 	and	x0, x0, x1
	ARM64_WRITE_TARGET_SYSREG(SCTLR_ELx, val);
    960039bc:	d51c1000 	msr	sctlr_el2, x0
    960039c0:	d5033fdf 	isb
	ISB;
    960039c4:	d5033fdf 	isb

	/* flush caches */
	tegrabl_arch_disable_cache(UCACHE);
    960039c8:	52800060 	mov	w0, #0x3                   	// #3
    960039cc:	17fffced 	b	96002d80 <tegrabl_arch_disable_cache>

00000000960039d0 <print_stacktrace>:
 */

extern void initial_thread_func(void);

void print_stacktrace(struct arm64_iframe_long *iframe)
{
    960039d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960039d4:	910003fd 	mov	x29, sp
    960039d8:	a90153f3 	stp	x19, x20, [sp, #16]
	unsigned long fp, sp, pc;
	unsigned long stack_size;

	fp = iframe->r[29];
    960039dc:	f9407413 	ldr	x19, [x0, #232]
	sp = iframe->r[31];
	pc = iframe->elr;
    960039e0:	f9408001 	ldr	x1, [x0, #256]
{
    960039e4:	f9001bf7 	str	x23, [sp, #48]
	sp = iframe->r[31];
    960039e8:	f9407c17 	ldr	x23, [x0, #248]
{
    960039ec:	a9025bf5 	stp	x21, x22, [sp, #32]
	stack_size = sp;

	while (1) {
		dprintf(CRITICAL, "=> pc:0x%08lX, sp:0x%08lX\n", pc, sp);
    960039f0:	f00001b5 	adrp	x21, 9603a000 <__exidx_end+0x548>
		if (!fp || fp < sp || fp & 0xf)
			break;

		sp = fp;
		pc = readl(fp+8); /* LR = PC for the first function in thread */
		if (pc != (unsigned long)initial_thread_func)
    960039f4:	90000016 	adrp	x22, 96003000 <arch_early_init+0xc>
		dprintf(CRITICAL, "=> pc:0x%08lX, sp:0x%08lX\n", pc, sp);
    960039f8:	913462b5 	add	x21, x21, #0xd18
		if (pc != (unsigned long)initial_thread_func)
    960039fc:	910e22d6 	add	x22, x22, #0x388
	sp = iframe->r[31];
    96003a00:	aa1703f4 	mov	x20, x23
		dprintf(CRITICAL, "=> pc:0x%08lX, sp:0x%08lX\n", pc, sp);
    96003a04:	aa1403e2 	mov	x2, x20
    96003a08:	aa1503e0 	mov	x0, x21
    96003a0c:	9400901e 	bl	96027a84 <_dprintf>
		if (!fp || fp < sp || fp & 0xf)
    96003a10:	f100027f 	cmp	x19, #0x0
    96003a14:	fa541260 	ccmp	x19, x20, #0x0, ne  // ne = any
    96003a18:	540001a3 	b.cc	96003a4c <print_stacktrace+0x7c>  // b.lo, b.ul, b.last
    96003a1c:	f2400e7f 	tst	x19, #0xf
    96003a20:	54000161 	b.ne	96003a4c <print_stacktrace+0x7c>  // b.any
		pc = readl(fp+8); /* LR = PC for the first function in thread */
    96003a24:	b9400a61 	ldr	w1, [x19, #8]
    96003a28:	2a0103e1 	mov	w1, w1
		if (pc != (unsigned long)initial_thread_func)
    96003a2c:	eb16003f 	cmp	x1, x22
    96003a30:	54000060 	b.eq	96003a3c <print_stacktrace+0x6c>  // b.none
			pc = readl(fp+8) - 4; /* LR = PC at function-call + 4 */
    96003a34:	b9400a61 	ldr	w1, [x19, #8]
    96003a38:	51001021 	sub	w1, w1, #0x4
		fp = readl(fp);
    96003a3c:	b9400260 	ldr	w0, [x19]
		dprintf(CRITICAL, "=> pc:0x%08lX, sp:0x%08lX\n", pc, sp);
    96003a40:	aa1303f4 	mov	x20, x19
		fp = readl(fp);
    96003a44:	2a0003f3 	mov	w19, w0
		dprintf(CRITICAL, "=> pc:0x%08lX, sp:0x%08lX\n", pc, sp);
    96003a48:	17ffffef 	b	96003a04 <print_stacktrace+0x34>
	}

	stack_size = sp - stack_size;
    96003a4c:	cb170281 	sub	x1, x20, x23
	if (stack_size >= ARCH_DEFAULT_STACK_SIZE)
    96003a50:	d283ffe0 	mov	x0, #0x1fff                	// #8191
    96003a54:	eb00003f 	cmp	x1, x0
    96003a58:	54000109 	b.ls	96003a78 <print_stacktrace+0xa8>  // b.plast
		dprintf(CRITICAL, "\n Using %lu bytes - STACK OVERFLOW !!!\n",
				stack_size);
}
    96003a5c:	a94153f3 	ldp	x19, x20, [sp, #16]
		dprintf(CRITICAL, "\n Using %lu bytes - STACK OVERFLOW !!!\n",
    96003a60:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
}
    96003a64:	a9425bf5 	ldp	x21, x22, [sp, #32]
		dprintf(CRITICAL, "\n Using %lu bytes - STACK OVERFLOW !!!\n",
    96003a68:	9134cc00 	add	x0, x0, #0xd33
}
    96003a6c:	f9401bf7 	ldr	x23, [sp, #48]
    96003a70:	a8c47bfd 	ldp	x29, x30, [sp], #64
		dprintf(CRITICAL, "\n Using %lu bytes - STACK OVERFLOW !!!\n",
    96003a74:	14009004 	b	96027a84 <_dprintf>
}
    96003a78:	a94153f3 	ldp	x19, x20, [sp, #16]
    96003a7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96003a80:	f9401bf7 	ldr	x23, [sp, #48]
    96003a84:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96003a88:	d65f03c0 	ret

0000000096003a8c <tegrabl_dma_unmap_buffer>:
}

void tegrabl_dma_unmap_buffer(tegrabl_module_t module, uint8_t instance,
							  void *buffer, size_t size,
							  tegrabl_dma_data_direction direction)
{
    96003a8c:	aa0203e0 	mov	x0, x2
    96003a90:	aa0303e1 	mov	x1, x3
	TEGRABL_UNUSED(module);
	TEGRABL_UNUSED(instance);

	if (direction & TEGRABL_DMA_FROM_DEVICE)
    96003a94:	721f009f 	tst	w4, #0x2
    96003a98:	54000040 	b.eq	96003aa0 <tegrabl_dma_unmap_buffer+0x14>  // b.none
		tegrabl_arch_invalidate_dcache_range((uintptr_t)buffer, size);
    96003a9c:	17fffd29 	b	96002f40 <tegrabl_arch_invalidate_dcache_range>
}
    96003aa0:	d65f03c0 	ret

0000000096003aa4 <tegrabl_dma_va_to_pa>:
	TEGRABL_UNUSED(module);

	virt_addr = (uintptr_t)va;

	/* Do Stage-1 EL2 VA-PA address-translations */
	asm volatile ("at s1e2r, %[va]" : : [va]"r"(virt_addr));
    96003aa4:	d50c7801 	at	s1e2r, x1
	asm volatile ("mrs %[par], par_el1" : [par]"=r"(par_el1));
    96003aa8:	d5387402 	mrs	x2, par_el1

	/* PAR_EL1[0] == 1 means translation was unsuccessful, so return 0
	 * otherwise PAR_EL1[47:12] holds the PA corresponding to VA[63:12] */
	retval = (par_el1 & 1LLU) ?
		0LLU : ((par_el1 & 0xFFFFFFFFF000LLU) | (virt_addr & 0xFFFLLU));
    96003aac:	92748c40 	and	x0, x2, #0xfffffffff000
    96003ab0:	92402c21 	and	x1, x1, #0xfff
    96003ab4:	aa010000 	orr	x0, x0, x1
    96003ab8:	f240005f 	tst	x2, #0x1

	return retval;
}
    96003abc:	9a9f0000 	csel	x0, x0, xzr, eq  // eq = none
    96003ac0:	d65f03c0 	ret

0000000096003ac4 <tegrabl_dma_map_buffer>:
{
    96003ac4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96003ac8:	aa0303e1 	mov	x1, x3
	if (direction & TEGRABL_DMA_TO_DEVICE) {
    96003acc:	7200009f 	tst	w4, #0x1
{
    96003ad0:	910003fd 	mov	x29, sp
    96003ad4:	a90153f3 	stp	x19, x20, [sp, #16]
    96003ad8:	2a0003f4 	mov	w20, w0
    96003adc:	aa0203f3 	mov	x19, x2
		tegrabl_arch_clean_invalidate_dcache_range((uintptr_t)buffer, size);
    96003ae0:	aa0203e0 	mov	x0, x2
	if (direction & TEGRABL_DMA_TO_DEVICE) {
    96003ae4:	540000e0 	b.eq	96003b00 <tegrabl_dma_map_buffer+0x3c>  // b.none
		tegrabl_arch_clean_invalidate_dcache_range((uintptr_t)buffer, size);
    96003ae8:	97fffd22 	bl	96002f70 <tegrabl_arch_clean_invalidate_dcache_range>
	return tegrabl_dma_va_to_pa(module, buffer);
    96003aec:	aa1303e1 	mov	x1, x19
    96003af0:	2a1403e0 	mov	w0, w20
}
    96003af4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96003af8:	a8c27bfd 	ldp	x29, x30, [sp], #32
	return tegrabl_dma_va_to_pa(module, buffer);
    96003afc:	17ffffea 	b	96003aa4 <tegrabl_dma_va_to_pa>
		tegrabl_arch_invalidate_dcache_range((uintptr_t)buffer, size);
    96003b00:	97fffd10 	bl	96002f40 <tegrabl_arch_invalidate_dcache_range>
    96003b04:	17fffffa 	b	96003aec <tegrabl_dma_map_buffer+0x28>

0000000096003b08 <lk_init_level>:
extern const struct lk_init_struct __lk_init_end[];

static uint last_init_level = 0;

int lk_init_level(uint level)
{
    96003b08:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    LTRACEF("level %#x, last_init_level %#x\n", level, last_init_level);

    uint last_called_level = last_init_level;
    const struct lk_init_struct *last = NULL;
    96003b0c:	d2800003 	mov	x3, #0x0                   	// #0
{
    96003b10:	910003fd 	mov	x29, sp
    96003b14:	a90153f3 	stp	x19, x20, [sp, #16]
    uint last_called_level = last_init_level;
    96003b18:	f0000354 	adrp	x20, 9606e000 <__bss_start>
{
    96003b1c:	a9025bf5 	stp	x21, x22, [sp, #32]
        /* search for the lowest uncalled hook to call */
        LTRACEF("last %p, last_called_level %#x\n", last, last_called_level);

        const struct lk_init_struct *found = NULL;
        bool seen_last = false;
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
    96003b20:	b0000235 	adrp	x21, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    uint last_called_level = last_init_level;
    96003b24:	b940da82 	ldr	w2, [x20, #216]
{
    96003b28:	2a0003f6 	mov	w22, w0
    96003b2c:	a90363f7 	stp	x23, x24, [sp, #48]
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
    96003b30:	9103b2b5 	add	x21, x21, #0xec
                continue;
            if (found && found->level <= ptr->level)
                continue;

            /* keep the lowest one we haven't called yet */
            if (ptr->level > last_init_level && ptr->level > last_called_level) {
    96003b34:	91036298 	add	x24, x20, #0xd8
{
    96003b38:	f90023f9 	str	x25, [sp, #64]
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
    96003b3c:	b0000237 	adrp	x23, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
                seen_last = true;
    96003b40:	52800039 	mov	w25, #0x1                   	// #1
            if (ptr->level > last_init_level && ptr->level > last_called_level) {
    96003b44:	b9400305 	ldr	w5, [x24]
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
    96003b48:	9103b2e0 	add	x0, x23, #0xec
        bool seen_last = false;
    96003b4c:	52800004 	mov	w4, #0x0                   	// #0
        const struct lk_init_struct *found = NULL;
    96003b50:	d2800013 	mov	x19, #0x0                   	// #0
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
    96003b54:	eb15001f 	cmp	x0, x21
    96003b58:	54000141 	b.ne	96003b80 <lk_init_level+0x78>  // b.any
                found = ptr;
                break;
            }
        }

        if (!found)
    96003b5c:	b50003d3 	cbnz	x19, 96003bd4 <lk_init_level+0xcc>
        found->hook(found->level);
        last_called_level = found->level;
        last = found;
    }

    last_init_level = level;
    96003b60:	b900da96 	str	w22, [x20, #216]

    return 0;
}
    96003b64:	52800000 	mov	w0, #0x0                   	// #0
    96003b68:	a94153f3 	ldp	x19, x20, [sp, #16]
    96003b6c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96003b70:	a94363f7 	ldp	x23, x24, [sp, #48]
    96003b74:	f94023f9 	ldr	x25, [sp, #64]
    96003b78:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96003b7c:	d65f03c0 	ret
            if (ptr->level > level)
    96003b80:	b9400001 	ldr	w1, [x0]
                seen_last = true;
    96003b84:	eb00007f 	cmp	x3, x0
    96003b88:	1a991084 	csel	w4, w4, w25, ne  // ne = any
            if (ptr->level > level)
    96003b8c:	6b16003f 	cmp	w1, w22
    96003b90:	54000308 	b.hi	96003bf0 <lk_init_level+0xe8>  // b.pmore
            if (ptr->level < last_called_level)
    96003b94:	6b01005f 	cmp	w2, w1
    96003b98:	540002c8 	b.hi	96003bf0 <lk_init_level+0xe8>  // b.pmore
            if (found && found->level <= ptr->level)
    96003b9c:	b4000093 	cbz	x19, 96003bac <lk_init_level+0xa4>
    96003ba0:	b9400266 	ldr	w6, [x19]
    96003ba4:	6b06003f 	cmp	w1, w6
    96003ba8:	54000242 	b.cs	96003bf0 <lk_init_level+0xe8>  // b.hs, b.nlast
            if (ptr->level > last_init_level && ptr->level > last_called_level) {
    96003bac:	6b05003f 	cmp	w1, w5
    96003bb0:	54000069 	b.ls	96003bbc <lk_init_level+0xb4>  // b.plast
    96003bb4:	6b01005f 	cmp	w2, w1
    96003bb8:	540001a3 	b.cc	96003bec <lk_init_level+0xe4>  // b.lo, b.ul, b.last
            if (ptr->level == last_called_level && ptr != last && seen_last) {
    96003bbc:	6b01005f 	cmp	w2, w1
    96003bc0:	54000181 	b.ne	96003bf0 <lk_init_level+0xe8>  // b.any
    96003bc4:	7100009f 	cmp	w4, #0x0
    96003bc8:	fa401064 	ccmp	x3, x0, #0x4, ne  // ne = any
    96003bcc:	54000120 	b.eq	96003bf0 <lk_init_level+0xe8>  // b.none
    96003bd0:	aa0003f3 	mov	x19, x0
        found->hook(found->level);
    96003bd4:	b9400260 	ldr	w0, [x19]
    96003bd8:	f9400661 	ldr	x1, [x19, #8]
    96003bdc:	d63f0020 	blr	x1
    for (;;) {
    96003be0:	aa1303e3 	mov	x3, x19
        last_called_level = found->level;
    96003be4:	b9400262 	ldr	w2, [x19]
    for (;;) {
    96003be8:	17ffffd7 	b	96003b44 <lk_init_level+0x3c>
    96003bec:	aa0003f3 	mov	x19, x0
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
    96003bf0:	91006000 	add	x0, x0, #0x18
    96003bf4:	17ffffd8 	b	96003b54 <lk_init_level+0x4c>

0000000096003bf8 <bootstrap2>:
	// become the idle thread and enable interrupts to start the scheduler
	thread_become_idle();
}

static int bootstrap2(void *arg)
{
    96003bf8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	dprintf(SPEW, "top of bootstrap2()\n");
    96003bfc:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003c00:	91356c00 	add	x0, x0, #0xd5b
{
    96003c04:	910003fd 	mov	x29, sp
	dprintf(SPEW, "top of bootstrap2()\n");
    96003c08:	94008f9f 	bl	96027a84 <_dprintf>

	lk_init_level(LK_INIT_LEVEL_ARCH - 1);
    96003c0c:	12bfff20 	mov	w0, #0x6ffff               	// #458751
    96003c10:	97ffffbe 	bl	96003b08 <lk_init_level>
	arch_init();
    96003c14:	97fffd06 	bl	9600302c <arch_init>

	// Call all functions at LEVEL_ARCH
	lk_init_level(LK_INIT_LEVEL_PLATFORM - 1);
    96003c18:	12bfff00 	mov	w0, #0x7ffff               	// #524287
    96003c1c:	97ffffbb 	bl	96003b08 <lk_init_level>

	// initialize the rest of the platform
	dprintf(SPEW, "initializing platform\n");
    96003c20:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003c24:	9135c000 	add	x0, x0, #0xd70
    96003c28:	94008f97 	bl	96027a84 <_dprintf>
	platform_init();
    96003c2c:	97fff84f 	bl	96001d68 <platform_init>

	// Call all functions at LEVEL_PLATFORM
	lk_init_level(LK_INIT_LEVEL_TARGET - 1);
    96003c30:	12bffee0 	mov	w0, #0x8ffff               	// #589823
    96003c34:	97ffffb5 	bl	96003b08 <lk_init_level>

	// initialize the target
	dprintf(SPEW, "initializing target\n");
    96003c38:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003c3c:	91361c00 	add	x0, x0, #0xd87
    96003c40:	94008f91 	bl	96027a84 <_dprintf>
	target_init();
    96003c44:	9400787e 	bl	96021e3c <target_init>

	// Call all functions at LEVEL_TARGET
	lk_init_level(LK_INIT_LEVEL_APPS - 1);
    96003c48:	12bffec0 	mov	w0, #0x9ffff               	// #655359
    96003c4c:	97ffffaf 	bl	96003b08 <lk_init_level>
	// Initialize OF layer
	dprintf(SPEW, "initializing OF layer\n");
	of_init_all_drivers();
#endif

	dprintf(SPEW, "calling apps_init()\n");
    96003c50:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003c54:	91367000 	add	x0, x0, #0xd9c
    96003c58:	94008f8b 	bl	96027a84 <_dprintf>
	apps_init();
    96003c5c:	94000051 	bl	96003da0 <apps_init>

	// Call all the rest
	lk_init_level(LK_INIT_LEVEL_LAST);
    96003c60:	12800000 	mov	w0, #0xffffffff            	// #-1
    96003c64:	97ffffa9 	bl	96003b08 <lk_init_level>
	return 0;
}
    96003c68:	52800000 	mov	w0, #0x0                   	// #0
    96003c6c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96003c70:	d65f03c0 	ret

0000000096003c74 <lk_main>:
{
    96003c74:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	CF;
	return critical_section_count > 0;
}

/* only used by interrupt glue */
static inline void inc_critical_section(void) { critical_section_count++; }
    96003c78:	f0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96003c7c:	910003fd 	mov	x29, sp
    96003c80:	b94c9820 	ldr	w0, [x1, #3224]
    96003c84:	a90153f3 	stp	x19, x20, [sp, #16]
    96003c88:	90000254 	adrp	x20, 9604b000 <partition_names.3562+0x190>
    96003c8c:	11000400 	add	w0, w0, #0x1
    96003c90:	a9025bf5 	stp	x21, x22, [sp, #32]
    96003c94:	b90c9820 	str	w0, [x1, #3224]
    96003c98:	aa1e03f6 	mov	x22, x30
    96003c9c:	911a2294 	add	x20, x20, #0x688
	dprintf(SPEW, "calling constructors\n");
    96003ca0:	d2800015 	mov	x21, #0x0                   	// #0
	thread_init_early();
    96003ca4:	94000372 	bl	96004a6c <thread_init_early>
	lk_init_level(LK_INIT_LEVEL_ARCH_EARLY - 1);
    96003ca8:	529fffe0 	mov	w0, #0xffff                	// #65535
    96003cac:	97ffff97 	bl	96003b08 <lk_init_level>
	arch_early_init();
    96003cb0:	97fffcd1 	bl	96002ff4 <arch_early_init>
	lk_init_level(LK_INIT_LEVEL_PLATFORM_EARLY - 1);
    96003cb4:	12bfffc0 	mov	w0, #0x1ffff               	// #131071
    96003cb8:	97ffff94 	bl	96003b08 <lk_init_level>
	platform_early_init();
    96003cbc:	97fff757 	bl	96001a18 <platform_early_init>
	lk_init_level(LK_INIT_LEVEL_TARGET_EARLY - 1);
    96003cc0:	12bfffa0 	mov	w0, #0x2ffff               	// #196607
    96003cc4:	97ffff91 	bl	96003b08 <lk_init_level>
	target_early_init();
    96003cc8:	9400785c 	bl	96021e38 <target_early_init>
	dprintf(SPEW, "calling constructors\n");
    96003ccc:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003cd0:	9136c400 	add	x0, x0, #0xdb1
    96003cd4:	94008f6c 	bl	96027a84 <_dprintf>
    96003cd8:	90000240 	adrp	x0, 9604b000 <partition_names.3562+0x190>
    96003cdc:	911a2000 	add	x0, x0, #0x688
    96003ce0:	cb000294 	sub	x20, x20, x0
		func = (void (*)(void))*ctor;
    96003ce4:	aa0003f3 	mov	x19, x0
	while (ctor != &__ctor_end) {
    96003ce8:	eb1402bf 	cmp	x21, x20
    96003cec:	54000181 	b.ne	96003d1c <lk_main+0xa8>  // b.any
	tegrabl_printf("initializing heap\n");
    96003cf0:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003cf4:	91371c00 	add	x0, x0, #0xdc7
    96003cf8:	94007a5e 	bl	96022670 <tegrabl_printf>
	lk_init_level(LK_INIT_LEVEL_HEAP - 1);
    96003cfc:	12bfff80 	mov	w0, #0x3ffff               	// #262143
    96003d00:	97ffff82 	bl	96003b08 <lk_init_level>
	if (platform_init_heap() != TEGRABL_NO_ERROR)
    96003d04:	97fff93b 	bl	960021f0 <platform_init_heap>
    96003d08:	34000120 	cbz	w0, 96003d2c <lk_main+0xb8>
		panic("Heap Init Failed\n");
    96003d0c:	f00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96003d10:	aa1603e0 	mov	x0, x22
    96003d14:	91376821 	add	x1, x1, #0xdda
    96003d18:	94008f8b 	bl	96027b44 <_panic>
		func();
    96003d1c:	f8736aa0 	ldr	x0, [x21, x19]
    96003d20:	910022b5 	add	x21, x21, #0x8
    96003d24:	d63f0000 	blr	x0
    96003d28:	17fffff0 	b	96003ce8 <lk_main+0x74>
	lk_init_level(LK_INIT_LEVEL_KERNEL - 1);
    96003d2c:	12bfff60 	mov	w0, #0x4ffff               	// #327679
    96003d30:	97ffff76 	bl	96003b08 <lk_init_level>
	kernel_init();
    96003d34:	940000b3 	bl	96004000 <kernel_init>
	lk_init_level(LK_INIT_LEVEL_THREADING - 1);
    96003d38:	12bfff40 	mov	w0, #0x5ffff               	// #393215
    96003d3c:	97ffff73 	bl	96003b08 <lk_init_level>
	dprintf(SPEW, "creating bootstrap completion thread\n");
    96003d40:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003d44:	9137b000 	add	x0, x0, #0xdec
    96003d48:	94008f4f 	bl	96027a84 <_dprintf>
	thread_t *t = thread_create("bootstrap2", &bootstrap2, NULL,
    96003d4c:	90000001 	adrp	x1, 96003000 <arch_early_init+0xc>
    96003d50:	912fe021 	add	x1, x1, #0xbf8
    96003d54:	d2840004 	mov	x4, #0x2000                	// #8192
    96003d58:	52800203 	mov	w3, #0x10                  	// #16
    96003d5c:	d2800002 	mov	x2, #0x0                   	// #0
    96003d60:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003d64:	91384800 	add	x0, x0, #0xe12
    96003d68:	9400022b 	bl	96004614 <thread_create>
    96003d6c:	aa0003f3 	mov	x19, x0
	thread_detach(t);
    96003d70:	94000499 	bl	96004fd4 <thread_detach>
	thread_resume(t);
    96003d74:	aa1303e0 	mov	x0, x19
    96003d78:	94000263 	bl	96004704 <thread_resume>
	thread_become_idle();
    96003d7c:	9400037b 	bl	96004b68 <thread_become_idle>

0000000096003d80 <app_thread_entry>:
		}
	}
}

static int app_thread_entry(void *arg)
{
    96003d80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	const struct app_descriptor *app = (const struct app_descriptor *)arg;

	app->entry(app, NULL);
    96003d84:	d2800001 	mov	x1, #0x0                   	// #0
{
    96003d88:	910003fd 	mov	x29, sp
	app->entry(app, NULL);
    96003d8c:	f9400802 	ldr	x2, [x0, #16]
    96003d90:	d63f0040 	blr	x2

	return 0;
}
    96003d94:	52800000 	mov	w0, #0x0                   	// #0
    96003d98:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96003d9c:	d65f03c0 	ret

0000000096003da0 <apps_init>:
{
    96003da0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96003da4:	d29999a0 	mov	x0, #0xcccd                	// #52429
    96003da8:	f2b99980 	movk	x0, #0xcccc, lsl #16
    96003dac:	910003fd 	mov	x29, sp
    96003db0:	a90153f3 	stp	x19, x20, [sp, #16]
    96003db4:	90000253 	adrp	x19, 9604b000 <partition_names.3562+0x190>
    96003db8:	a9025bf5 	stp	x21, x22, [sp, #32]
    96003dbc:	90000254 	adrp	x20, 9604b000 <partition_names.3562+0x190>
    96003dc0:	91190275 	add	x21, x19, #0x640
    96003dc4:	9119a294 	add	x20, x20, #0x668
    96003dc8:	cb150294 	sub	x20, x20, x21
    96003dcc:	f2d99980 	movk	x0, #0xcccc, lsl #32
    96003dd0:	f2e19980 	movk	x0, #0xccc, lsl #48
    96003dd4:	f9001bf7 	str	x23, [sp, #48]
    96003dd8:	d343fe94 	lsr	x20, x20, #3
    96003ddc:	9b007e94 	mul	x20, x20, x0
    96003de0:	d2800500 	mov	x0, #0x28                  	// #40
    96003de4:	9240f294 	and	x20, x20, #0x1fffffffffffffff
    96003de8:	9b005694 	madd	x20, x20, x0, x21
	for (app = &__apps_start; app != &__apps_end; app++) {
    96003dec:	eb1402bf 	cmp	x21, x20
    96003df0:	540001a1 	b.ne	96003e24 <apps_init+0x84>  // b.any

static void start_app(const struct app_descriptor *app)
{
	uint32_t stack_size = (app->flags & APP_FLAG_CUSTOM_STACK_SIZE) ? app->stack_size : DEFAULT_STACK_SIZE;

	printf("starting app %s\n", app->name);
    96003df4:	f00001b4 	adrp	x20, 9603a000 <__exidx_end+0x548>
	thread_t *t = thread_create(app->name, &app_thread_entry, (void *)app, DEFAULT_PRIORITY, stack_size);
    96003df8:	90000016 	adrp	x22, 96003000 <arch_early_init+0xc>
	for (app = &__apps_start; app != &__apps_end; app++) {
    96003dfc:	91190273 	add	x19, x19, #0x640
	printf("starting app %s\n", app->name);
    96003e00:	91387694 	add	x20, x20, #0xe1d
	thread_t *t = thread_create(app->name, &app_thread_entry, (void *)app, DEFAULT_PRIORITY, stack_size);
    96003e04:	913602d6 	add	x22, x22, #0xd80
	for (app = &__apps_start; app != &__apps_end; app++) {
    96003e08:	eb1302bf 	cmp	x21, x19
    96003e0c:	54000181 	b.ne	96003e3c <apps_init+0x9c>  // b.any
}
    96003e10:	a94153f3 	ldp	x19, x20, [sp, #16]
    96003e14:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96003e18:	f9401bf7 	ldr	x23, [sp, #48]
    96003e1c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96003e20:	d65f03c0 	ret
		if (app->init)
    96003e24:	f94006a1 	ldr	x1, [x21, #8]
    96003e28:	b4000061 	cbz	x1, 96003e34 <apps_init+0x94>
			app->init(app);
    96003e2c:	aa1503e0 	mov	x0, x21
    96003e30:	d63f0020 	blr	x1
	for (app = &__apps_start; app != &__apps_end; app++) {
    96003e34:	9100a2b5 	add	x21, x21, #0x28
    96003e38:	17ffffed 	b	96003dec <apps_init+0x4c>
		if (app->entry && (app->flags & APP_FLAG_DONT_START_ON_BOOT) == 0) {
    96003e3c:	f9400a60 	ldr	x0, [x19, #16]
    96003e40:	b4000240 	cbz	x0, 96003e88 <apps_init+0xe8>
    96003e44:	b9401a60 	ldr	w0, [x19, #24]
    96003e48:	37000200 	tbnz	w0, #0, 96003e88 <apps_init+0xe8>
	uint32_t stack_size = (app->flags & APP_FLAG_CUSTOM_STACK_SIZE) ? app->stack_size : DEFAULT_STACK_SIZE;
    96003e4c:	36080220 	tbz	w0, #1, 96003e90 <apps_init+0xf0>
    96003e50:	b9402277 	ldr	w23, [x19, #32]
	printf("starting app %s\n", app->name);
    96003e54:	f9400261 	ldr	x1, [x19]
    96003e58:	aa1403e0 	mov	x0, x20
    96003e5c:	94009265 	bl	960287f0 <_printf>
	thread_t *t = thread_create(app->name, &app_thread_entry, (void *)app, DEFAULT_PRIORITY, stack_size);
    96003e60:	f9400260 	ldr	x0, [x19]
    96003e64:	2a1703e4 	mov	w4, w23
    96003e68:	aa1303e2 	mov	x2, x19
    96003e6c:	aa1603e1 	mov	x1, x22
    96003e70:	52800203 	mov	w3, #0x10                  	// #16
    96003e74:	940001e8 	bl	96004614 <thread_create>
    96003e78:	aa0003f7 	mov	x23, x0
	thread_detach(t);
    96003e7c:	94000456 	bl	96004fd4 <thread_detach>
	thread_resume(t);
    96003e80:	aa1703e0 	mov	x0, x23
    96003e84:	94000220 	bl	96004704 <thread_resume>
	for (app = &__apps_start; app != &__apps_end; app++) {
    96003e88:	9100a273 	add	x19, x19, #0x28
    96003e8c:	17ffffdf 	b	96003e08 <apps_init+0x68>
	uint32_t stack_size = (app->flags & APP_FLAG_CUSTOM_STACK_SIZE) ? app->stack_size : DEFAULT_STACK_SIZE;
    96003e90:	52840017 	mov	w23, #0x2000                	// #8192
    96003e94:	17fffff0 	b	96003e54 <apps_init+0xb4>

0000000096003e98 <kernel_boot_init>:
}

static void kernel_boot_init(const struct app_descriptor *app)
{
	return;
}
    96003e98:	d65f03c0 	ret

0000000096003e9c <load_and_boot_kernel>:
{
    96003e9c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	kernel->load_from_storage = true;
    96003ea0:	52800021 	mov	w1, #0x1                   	// #1
	err = tegrabl_load_kernel_and_dtb(kernel, &kernel_entry_point,
    96003ea4:	52800005 	mov	w5, #0x0                   	// #0
    96003ea8:	d2800004 	mov	x4, #0x0                   	// #0
{
    96003eac:	910003fd 	mov	x29, sp
	callbacks.verify_boot = NULL;
    96003eb0:	910143a3 	add	x3, x29, #0x50
{
    96003eb4:	f9000bf3 	str	x19, [sp, #16]
	kernel->load_from_storage = true;
    96003eb8:	39001001 	strb	w1, [x0, #4]
	err = tegrabl_load_kernel_and_dtb(kernel, &kernel_entry_point,
    96003ebc:	9100a3a2 	add	x2, x29, #0x28
    96003ec0:	910083a1 	add	x1, x29, #0x20
	void *kernel_dtb = NULL;
    96003ec4:	a9027fbf 	stp	xzr, xzr, [x29, #32]
	callbacks.verify_boot = NULL;
    96003ec8:	f81e0c7f 	str	xzr, [x3, #-32]!
	err = tegrabl_load_kernel_and_dtb(kernel, &kernel_entry_point,
    96003ecc:	94008871 	bl	96026090 <tegrabl_load_kernel_and_dtb>
    96003ed0:	2a0003f3 	mov	w19, w0
	tegrabl_a_b_update_smd();
    96003ed4:	9400a5aa 	bl	9602d57c <tegrabl_a_b_update_smd>
	if (err != TEGRABL_NO_ERROR) {
    96003ed8:	34000193 	cbz	w19, 96003f08 <load_and_boot_kernel+0x6c>
 * @return new error value.
 */
static TEGRABL_INLINE tegrabl_error_t tegrabl_err_set_highest_module(
		tegrabl_error_t error, tegrabl_err_module_t module)
{
	BITFIELD_SET(error, module, TEGRABL_ERR_MODULE_WIDTH, TEGRABL_ERR_HIGHEST_MODULE_SHIFT);
    96003edc:	52aa0000 	mov	w0, #0x50000000            	// #1342177280
    96003ee0:	12005e73 	and	w19, w19, #0xffffff
    96003ee4:	2a000273 	orr	w19, w19, w0
		pr_error("kernel boot failed, will reset.\n");
    96003ee8:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003eec:	913a9c00 	add	x0, x0, #0xea7
    96003ef0:	940079e0 	bl	96022670 <tegrabl_printf>
		tegrabl_reset();
    96003ef4:	9400651d 	bl	9601d368 <tegrabl_reset>
}
    96003ef8:	2a1303e0 	mov	w0, w19
    96003efc:	f9400bf3 	ldr	x19, [sp, #16]
    96003f00:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96003f04:	d65f03c0 	ret
	image.format = TEGRABL_IMAGE_FORMAT_BMP;
    96003f08:	a903ffbf 	stp	xzr, xzr, [x29, #56]
	ret = tegrabl_display_clear();
    96003f0c:	9400081f 	bl	96005f88 <tegrabl_display_clear>
	if (ret != TEGRABL_NO_ERROR) {
    96003f10:	35000260 	cbnz	w0, 96003f5c <load_and_boot_kernel+0xc0>
	ret = tegrabl_display_show_image(&image);
    96003f14:	9100e3a0 	add	x0, x29, #0x38
    96003f18:	940007bd 	bl	96005e0c <tegrabl_display_show_image>
	if (ret != TEGRABL_NO_ERROR) {
    96003f1c:	35000200 	cbnz	w0, 96003f5c <load_and_boot_kernel+0xc0>
	tegrabl_profiler_record("kernel_boot exit", 0, DETAILED);
    96003f20:	d2800001 	mov	x1, #0x0                   	// #0
    96003f24:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003f28:	913b2c00 	add	x0, x0, #0xecb
    96003f2c:	940067a1 	bl	9601ddb0 <tegrabl_profiler_add_record>
	pr_info("Kernel EP: %p, DTB: %p\n", kernel_entry_point, kernel_dtb);
    96003f30:	a9420ba1 	ldp	x1, x2, [x29, #32]
    96003f34:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003f38:	913b7000 	add	x0, x0, #0xedc
    96003f3c:	940079cd 	bl	96022670 <tegrabl_printf>
	platform_uninit();
    96003f40:	97fff765 	bl	96001cd4 <platform_uninit>
	kernel_entry((uint64_t)kernel_dtb, 0, 0, 0);
    96003f44:	a94203a4 	ldp	x4, x0, [x29, #32]
    96003f48:	d2800003 	mov	x3, #0x0                   	// #0
    96003f4c:	d2800002 	mov	x2, #0x0                   	// #0
    96003f50:	d2800001 	mov	x1, #0x0                   	// #0
    96003f54:	d63f0080 	blr	x4
	return TEGRABL_NO_ERROR;
    96003f58:	17ffffe8 	b	96003ef8 <load_and_boot_kernel+0x5c>
		pr_warn("Boot logo display failed...\n");
    96003f5c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003f60:	913bdc00 	add	x0, x0, #0xef7
    96003f64:	940079c3 	bl	96022670 <tegrabl_printf>
    96003f68:	17ffffee 	b	96003f20 <load_and_boot_kernel+0x84>

0000000096003f6c <kernel_boot_entry>:
	tegrabl_profiler_record("kernel_boot entry", 0, DETAILED);
    96003f6c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003f70:	9138b800 	add	x0, x0, #0xe2e

static void kernel_boot_entry(const struct app_descriptor *app, void *args)
{
    96003f74:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	tegrabl_profiler_record("kernel_boot entry", 0, DETAILED);
    96003f78:	d2800001 	mov	x1, #0x0                   	// #0
{
    96003f7c:	910003fd 	mov	x29, sp
	tegrabl_profiler_record("kernel_boot entry", 0, DETAILED);
    96003f80:	9400678c 	bl	9601ddb0 <tegrabl_profiler_add_record>
	menu_init();
    96003f84:	9400060d 	bl	960057b8 <menu_init>
	tegrabl_profiler_record("menu init", 0, DETAILED);
    96003f88:	d2800001 	mov	x1, #0x0                   	// #0
    96003f8c:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003f90:	91390000 	add	x0, x0, #0xe40
    96003f94:	94006787 	bl	9601ddb0 <tegrabl_profiler_add_record>
	err = tegrabl_load_bmp_blob("BMP");
    96003f98:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003f9c:	91392800 	add	x0, x0, #0xe4a
    96003fa0:	94008c80 	bl	960271a0 <tegrabl_load_bmp_blob>
	if (err != TEGRABL_NO_ERROR)
    96003fa4:	34000080 	cbz	w0, 96003fb4 <kernel_boot_entry+0x48>
		pr_warn("Loading bmp blob to memory failed\n");
    96003fa8:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003fac:	91393800 	add	x0, x0, #0xe4e
    96003fb0:	940079b0 	bl	96022670 <tegrabl_printf>
	tegrabl_profiler_record("Load BMP blob", 0, DETAILED);
    96003fb4:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003fb8:	9139d000 	add	x0, x0, #0xe74
    96003fbc:	d2800001 	mov	x1, #0x0                   	// #0
    96003fc0:	9400677c 	bl	9601ddb0 <tegrabl_profiler_add_record>
	kernel.bin_type = tegrabl_get_kernel_type();
    96003fc4:	9400755e 	bl	9602153c <tegrabl_get_kernel_type>
    96003fc8:	9100c3a1 	add	x1, x29, #0x30
    96003fcc:	b81e8c20 	str	w0, [x1, #-24]!
	err = load_and_boot_kernel(&kernel);
    96003fd0:	aa0103e0 	mov	x0, x1
    96003fd4:	97ffffb2 	bl	96003e9c <load_and_boot_kernel>
#if defined(CONFIG_ENABLE_A_B_SLOT)
	status_t err = NO_ERROR;
	err = kernel_boot();
	if (err != NO_ERROR && !tegrabl_is_wdt_enable()) {
    96003fd8:	34000100 	cbz	w0, 96003ff8 <kernel_boot_entry+0x8c>
    96003fdc:	94007544 	bl	960214ec <tegrabl_is_wdt_enable>
    96003fe0:	72001c1f 	tst	w0, #0xff
    96003fe4:	540000a1 	b.ne	96003ff8 <kernel_boot_entry+0x8c>  // b.any
		pr_critical("failed to load kernel, reboot it\n");
    96003fe8:	f00001a0 	adrp	x0, 9603a000 <__exidx_end+0x548>
    96003fec:	913a0800 	add	x0, x0, #0xe82
    96003ff0:	940079a0 	bl	96022670 <tegrabl_printf>
		tegrabl_reset();
    96003ff4:	940064dd 	bl	9601d368 <tegrabl_reset>
	}
#else
	kernel_boot();
#endif
}
    96003ff8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96003ffc:	d65f03c0 	ret

0000000096004000 <kernel_init>:
#include <kernel/thread.h>
#include <kernel/timer.h>
#include <kernel/debug.h>

void kernel_init(void)
{
    96004000:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	// if enabled, configure the kernel's event log
	kernel_evlog_init();

	// initialize the threading system
	dprintf(SPEW, "initializing threads\n");
    96004004:	f00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96004008:	910fe000 	add	x0, x0, #0x3f8
{
    9600400c:	910003fd 	mov	x29, sp
	dprintf(SPEW, "initializing threads\n");
    96004010:	94008e9d 	bl	96027a84 <_dprintf>
	thread_init();
    96004014:	940002ce 	bl	96004b4c <thread_init>

	// initialize kernel timers
	dprintf(SPEW, "initializing timers\n");
    96004018:	f00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    9600401c:	91103800 	add	x0, x0, #0x40e
    96004020:	94008e99 	bl	96027a84 <_dprintf>
	timer_init();
}
    96004024:	a8c17bfd 	ldp	x29, x30, [sp], #16
	timer_init();
    96004028:	1400059f 	b	960056a4 <timer_init>

000000009600402c <mutex_init>:
/**
 * @brief  Initialize a mutex_t
 */
void mutex_init(mutex_t *m)
{
	*m = (mutex_t)MUTEX_INITIAL_VALUE(*m);
    9600402c:	528e8f02 	mov	w2, #0x7478                	// #29816
    96004030:	91008001 	add	x1, x0, #0x20
    96004034:	72adaea2 	movk	w2, #0x6d75, lsl #16
    96004038:	b9000002 	str	w2, [x0]
    9600403c:	528d2e82 	mov	w2, #0x6974                	// #26996
    96004040:	f900041f 	str	xzr, [x0, #8]
    96004044:	72aeec22 	movk	w2, #0x7761, lsl #16
    96004048:	b900101f 	str	wzr, [x0, #16]
    9600404c:	b9001802 	str	w2, [x0, #24]
    96004050:	a9020401 	stp	x1, x1, [x0, #32]
    96004054:	b900301f 	str	wzr, [x0, #48]
}
    96004058:	d65f03c0 	ret

000000009600405c <list_delete>:

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
	item->next->prev = item->prev;
    9600405c:	a9400402 	ldp	x2, x1, [x0]
    96004060:	f9000022 	str	x2, [x1]
	item->prev->next = item->next;
    96004064:	f9400002 	ldr	x2, [x0]
    96004068:	f9000441 	str	x1, [x2, #8]
	item->prev = item->next = 0;
    9600406c:	a9007c1f 	stp	xzr, xzr, [x0]
}
    96004070:	d65f03c0 	ret

0000000096004074 <thread_resched>:
 *
 * This is probably not the function you're looking for. See
 * thread_yield() instead.
 */
void thread_resched(void)
{
    96004074:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96004078:	910003fd 	mov	x29, sp
    9600407c:	a90153f3 	stp	x19, x20, [sp, #16]
    96004080:	a9025bf5 	stp	x21, x22, [sp, #32]
    96004084:	aa1e03f5 	mov	x21, x30
    96004088:	a90363f7 	stp	x23, x24, [sp, #48]
    9600408c:	a9046bf9 	stp	x25, x26, [sp, #64]
	return critical_section_count > 0;
    96004090:	d0000394 	adrp	x20, 96076000 <free_dram_block+0x38e8>

//	printf("thread_resched: current %p: ", current_thread);
//	dump_thread(current_thread);

#if THREAD_CHECKS
	ASSERT(in_critical_section());
    96004094:	b94c9a80 	ldr	w0, [x20, #3224]
    96004098:	7100001f 	cmp	w0, #0x0
    9600409c:	5400014c 	b.gt	960040c4 <thread_resched+0x50>
    960040a0:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960040a4:	91141884 	add	x4, x4, #0x506
    960040a8:	528031c3 	mov	w3, #0x18e                 	// #398
	// at the moment, can't deal with more than 32 priority levels
	ASSERT(NUM_PRIORITIES <= 32);

	// should at least find the idle thread
#if THREAD_CHECKS
	ASSERT(run_queue_bitmap != 0);
    960040ac:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960040b0:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960040b4:	91147042 	add	x2, x2, #0x51c
    960040b8:	91325421 	add	x1, x1, #0xc95
    960040bc:	aa1503e0 	mov	x0, x21
    960040c0:	94008ea1 	bl	96027b44 <_panic>
	THREAD_STATS_INC(reschedules);
    960040c4:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    960040c8:	9131a022 	add	x2, x1, #0xc68
	oldthread = current_thread;
    960040cc:	d0000397 	adrp	x23, 96076000 <free_dram_block+0x38e8>
    960040d0:	aa0103f9 	mov	x25, x1
	THREAD_STATS_INC(reschedules);
    960040d4:	b9401040 	ldr	w0, [x2, #16]
	oldthread = current_thread;
    960040d8:	f94632f6 	ldr	x22, [x23, #3168]
	THREAD_STATS_INC(reschedules);
    960040dc:	11000400 	add	w0, w0, #0x1
    960040e0:	b9001040 	str	w0, [x2, #16]
	ASSERT(run_queue_bitmap != 0);
    960040e4:	d0000340 	adrp	x0, 9606e000 <__bss_start>
    960040e8:	aa0003e5 	mov	x5, x0
    960040ec:	b943a008 	ldr	w8, [x0, #928]
    960040f0:	350000a8 	cbnz	w8, 96004104 <thread_resched+0x90>
    960040f4:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960040f8:	52803343 	mov	w3, #0x19a                 	// #410
    960040fc:	9115a884 	add	x4, x4, #0x56a
    96004100:	17ffffeb 	b	960040ac <thread_resched+0x38>
#endif

	int next_queue = HIGHEST_PRIORITY - __builtin_clz(run_queue_bitmap) - (32 - NUM_PRIORITIES);
    96004104:	5ac01106 	clz	w6, w8
    96004108:	528003e0 	mov	w0, #0x1f                  	// #31
    9600410c:	4b060006 	sub	w6, w0, w6
	//dprintf(SPEW, "bitmap 0x%x, next %d\n", run_queue_bitmap, next_queue);

	newthread = list_remove_head_type(&run_queue[next_queue], thread_t, queue_node);
    96004110:	d0000340 	adrp	x0, 9606e000 <__bss_start>
    96004114:	91068004 	add	x4, x0, #0x1a0
    96004118:	aa0003e3 	mov	x3, x0
    9600411c:	93407cc7 	sxtw	x7, w6
    96004120:	8b071084 	add	x4, x4, x7, lsl #4

static inline struct list_node* list_remove_head(struct list_node *list) {
	if (list->next != list) {
    96004124:	f9400493 	ldr	x19, [x4, #8]
    96004128:	eb13009f 	cmp	x4, x19
    9600412c:	54000201 	b.ne	9600416c <thread_resched+0xf8>  // b.any
    96004130:	d2800013 	mov	x19, #0x0                   	// #0
		(temp_entry) = containerof((temp_entry)->member.next,\
		type, member))

static inline bool list_is_empty(struct list_node *list)
{
	return (list->next == list) ? true : false;
    96004134:	91068060 	add	x0, x3, #0x1a0
    96004138:	8b071000 	add	x0, x0, x7, lsl #4

	if (list_is_empty(&run_queue[next_queue]))
    9600413c:	f9400400 	ldr	x0, [x0, #8]
    96004140:	eb00009f 	cmp	x4, x0
    96004144:	540000a1 	b.ne	96004158 <thread_resched+0xe4>  // b.any
		run_queue_bitmap &= ~(1<<next_queue);
    96004148:	52800020 	mov	w0, #0x1                   	// #1
    9600414c:	1ac62000 	lsl	w0, w0, w6
    96004150:	0a200100 	bic	w0, w8, w0
    96004154:	b903a0a0 	str	w0, [x5, #928]

#if THREAD_CHECKS
	ASSERT(newthread);
    96004158:	b5000153 	cbnz	x19, 96004180 <thread_resched+0x10c>
    9600415c:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004160:	528034c3 	mov	w3, #0x1a6                 	// #422
    96004164:	91160084 	add	x4, x4, #0x580
    96004168:	17ffffd1 	b	960040ac <thread_resched+0x38>
		list_delete(item);
    9600416c:	aa1303e0 	mov	x0, x19
    96004170:	97ffffbb 	bl	9600405c <list_delete>
	newthread = list_remove_head_type(&run_queue[next_queue], thread_t, queue_node);
    96004174:	b4fffdf3 	cbz	x19, 96004130 <thread_resched+0xbc>
    96004178:	d1006273 	sub	x19, x19, #0x18
    9600417c:	17ffffee 	b	96004134 <thread_resched+0xc0>
#endif

//	printf("newthread: ");
//	dump_thread(newthread);

	newthread->state = THREAD_RUNNING;
    96004180:	52800040 	mov	w0, #0x2                   	// #2
    96004184:	b9002e60 	str	w0, [x19, #44]

	if (newthread == oldthread)
    96004188:	eb16027f 	cmp	x19, x22
    9600418c:	540006a0 	b.eq	96004260 <thread_resched+0x1ec>  // b.none
		return;

	/* set up quantum for the new thread if it was consumed */
	if (newthread->remaining_quantum <= 0) {
    96004190:	b9403660 	ldr	w0, [x19, #52]
    96004194:	7100001f 	cmp	w0, #0x0
    96004198:	5400006c 	b.gt	960041a4 <thread_resched+0x130>
		newthread->remaining_quantum = 5; // XXX make this smarter
    9600419c:	528000a0 	mov	w0, #0x5                   	// #5
    960041a0:	b9003660 	str	w0, [x19, #52]
	}

#if THREAD_STATS
	THREAD_STATS_INC(context_switches);
    960041a4:	9131a33a 	add	x26, x25, #0xc68
    960041a8:	b9401740 	ldr	w0, [x26, #20]
    960041ac:	11000400 	add	w0, w0, #0x1
    960041b0:	b9001740 	str	w0, [x26, #20]

	if (oldthread == idle_thread) {
    960041b4:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960041b8:	aa0003f8 	mov	x24, x0
    960041bc:	f9465001 	ldr	x1, [x0, #3232]
    960041c0:	eb16003f 	cmp	x1, x22
    960041c4:	540000e1 	b.ne	960041e0 <thread_resched+0x16c>  // b.any
		lk_bigtime_t now = current_time_hires();
    960041c8:	940076e0 	bl	96021d48 <current_time_hires>
		thread_stats.idle_time += now - thread_stats.last_idle_timestamp;
    960041cc:	f9463722 	ldr	x2, [x25, #3176]
    960041d0:	f9400741 	ldr	x1, [x26, #8]
    960041d4:	cb010042 	sub	x2, x2, x1
    960041d8:	8b000040 	add	x0, x2, x0
    960041dc:	f9063720 	str	x0, [x25, #3176]
	}
	if (newthread == idle_thread) {
    960041e0:	f9465300 	ldr	x0, [x24, #3232]
    960041e4:	eb00027f 	cmp	x19, x0
    960041e8:	54000081 	b.ne	960041f8 <thread_resched+0x184>  // b.any
		thread_stats.last_idle_timestamp = current_time_hires();
    960041ec:	940076d7 	bl	96021d48 <current_time_hires>
    960041f0:	9131a321 	add	x1, x25, #0xc68
    960041f4:	f9000420 	str	x0, [x1, #8]
#endif

	KEVLOG_THREAD_SWITCH(oldthread, newthread);

#if THREAD_CHECKS
	ASSERT(critical_section_count > 0);
    960041f8:	b94c9a80 	ldr	w0, [x20, #3224]
    960041fc:	7100001f 	cmp	w0, #0x0
    96004200:	540000ac 	b.gt	96004214 <thread_resched+0x1a0>
    96004204:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004208:	528038a3 	mov	w3, #0x1c5                 	// #453
    9600420c:	91166c84 	add	x4, x4, #0x59b
    96004210:	17ffffa7 	b	960040ac <thread_resched+0x38>
	ASSERT(newthread->saved_critical_section_count > 0);
    96004214:	b9403261 	ldr	w1, [x19, #48]
    96004218:	7100003f 	cmp	w1, #0x0
    9600421c:	540000ac 	b.gt	96004230 <thread_resched+0x1bc>
    96004220:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004224:	528038c3 	mov	w3, #0x1c6                 	// #454
    96004228:	91162884 	add	x4, x4, #0x58a
    9600422c:	17ffffa0 	b	960040ac <thread_resched+0x38>
	/* set some optional target debug leds */
	target_set_debug_led(0, newthread != idle_thread);

	/* do the switch */
	oldthread->saved_critical_section_count = critical_section_count;
	current_thread = newthread;
    96004230:	f90632f3 	str	x19, [x23, #3168]
	critical_section_count = newthread->saved_critical_section_count;
	arch_context_switch(oldthread, newthread);
    96004234:	aa1303e1 	mov	x1, x19
}
    96004238:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600423c:	a9446bf9 	ldp	x25, x26, [sp, #64]
	oldthread->saved_critical_section_count = critical_section_count;
    96004240:	b90032c0 	str	w0, [x22, #48]
	critical_section_count = newthread->saved_critical_section_count;
    96004244:	b9403260 	ldr	w0, [x19, #48]
    96004248:	b90c9a80 	str	w0, [x20, #3224]
	arch_context_switch(oldthread, newthread);
    9600424c:	aa1603e0 	mov	x0, x22
}
    96004250:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004254:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96004258:	a8c57bfd 	ldp	x29, x30, [sp], #80
	arch_context_switch(oldthread, newthread);
    9600425c:	17fffc6d 	b	96003410 <arch_context_switch>
}
    96004260:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004264:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96004268:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600426c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96004270:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96004274:	d65f03c0 	ret

0000000096004278 <insert_in_run_queue_tail>:
{
    96004278:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	ASSERT(t->magic == THREAD_MAGIC);
    9600427c:	528e4c81 	mov	w1, #0x7264                	// #29284
    96004280:	72ae8d01 	movk	w1, #0x7468, lsl #16
{
    96004284:	910003fd 	mov	x29, sp
	ASSERT(t->magic == THREAD_MAGIC);
    96004288:	b9400002 	ldr	w2, [x0]
    9600428c:	6b01005f 	cmp	w2, w1
    96004290:	54000140 	b.eq	960042b8 <insert_in_run_queue_tail+0x40>  // b.none
    96004294:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004298:	91108c84 	add	x4, x4, #0x423
    9600429c:	52800d83 	mov	w3, #0x6c                  	// #108
	ASSERT(t->state == THREAD_READY);
    960042a0:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960042a4:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960042a8:	91147042 	add	x2, x2, #0x51c
    960042ac:	91325421 	add	x1, x1, #0xc95
    960042b0:	aa1e03e0 	mov	x0, x30
    960042b4:	94008e24 	bl	96027b44 <_panic>
    960042b8:	b9402c01 	ldr	w1, [x0, #44]
    960042bc:	7100043f 	cmp	w1, #0x1
    960042c0:	540000a0 	b.eq	960042d4 <insert_in_run_queue_tail+0x5c>  // b.none
    960042c4:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960042c8:	52800da3 	mov	w3, #0x6d                  	// #109
    960042cc:	9110f084 	add	x4, x4, #0x43c
    960042d0:	17fffff4 	b	960042a0 <insert_in_run_queue_tail+0x28>
	if ((item->prev == 0) && (item->next == 0)) {
    960042d4:	f9400c02 	ldr	x2, [x0, #24]
	ASSERT(!list_in_list(&t->queue_node));
    960042d8:	91006005 	add	x5, x0, #0x18
    960042dc:	b5000162 	cbnz	x2, 96004308 <insert_in_run_queue_tail+0x90>
    960042e0:	f9401002 	ldr	x2, [x0, #32]
    960042e4:	b5000122 	cbnz	x2, 96004308 <insert_in_run_queue_tail+0x90>
    960042e8:	d0000382 	adrp	x2, 96076000 <free_dram_block+0x38e8>
	ASSERT(in_critical_section());
    960042ec:	b94c9842 	ldr	w2, [x2, #3224]
    960042f0:	7100005f 	cmp	w2, #0x0
    960042f4:	5400012c 	b.gt	96004318 <insert_in_run_queue_tail+0xa0>
    960042f8:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960042fc:	52800de3 	mov	w3, #0x6f                  	// #111
    96004300:	91141884 	add	x4, x4, #0x506
    96004304:	17ffffe7 	b	960042a0 <insert_in_run_queue_tail+0x28>
	ASSERT(!list_in_list(&t->queue_node));
    96004308:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    9600430c:	52800dc3 	mov	w3, #0x6e                  	// #110
    96004310:	91115484 	add	x4, x4, #0x455
    96004314:	17ffffe3 	b	960042a0 <insert_in_run_queue_tail+0x28>
	list_add_tail(&run_queue[t->priority], &t->queue_node);
    96004318:	b9402804 	ldr	w4, [x0, #40]
	item->prev = list->prev;
    9600431c:	d0000342 	adrp	x2, 9606e000 <__bss_start>
    96004320:	91068042 	add	x2, x2, #0x1a0
    96004324:	937c7c83 	sbfiz	x3, x4, #4, #32
	run_queue_bitmap |= (1<<t->priority);
    96004328:	1ac42021 	lsl	w1, w1, w4
    9600432c:	8b030046 	add	x6, x2, x3
    96004330:	f8636847 	ldr	x7, [x2, x3]
	item->next = list;
    96004334:	a9019807 	stp	x7, x6, [x0, #24]
	list->prev->next = item;
    96004338:	f8636840 	ldr	x0, [x2, x3]
    9600433c:	f9000405 	str	x5, [x0, #8]
    96004340:	d0000340 	adrp	x0, 9606e000 <__bss_start>
	list->prev = item;
    96004344:	f8236845 	str	x5, [x2, x3]
    96004348:	b943a002 	ldr	w2, [x0, #928]
}
    9600434c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	run_queue_bitmap |= (1<<t->priority);
    96004350:	2a020021 	orr	w1, w1, w2
    96004354:	b903a001 	str	w1, [x0, #928]
}
    96004358:	d65f03c0 	ret

000000009600435c <insert_in_run_queue_head>:
{
    9600435c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	ASSERT(t->magic == THREAD_MAGIC);
    96004360:	528e4c81 	mov	w1, #0x7264                	// #29284
    96004364:	72ae8d01 	movk	w1, #0x7468, lsl #16
{
    96004368:	910003fd 	mov	x29, sp
	ASSERT(t->magic == THREAD_MAGIC);
    9600436c:	b9400002 	ldr	w2, [x0]
    96004370:	6b01005f 	cmp	w2, w1
    96004374:	54000140 	b.eq	9600439c <insert_in_run_queue_head+0x40>  // b.none
    96004378:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    9600437c:	91108c84 	add	x4, x4, #0x423
    96004380:	52800be3 	mov	w3, #0x5f                  	// #95
	ASSERT(t->state == THREAD_READY);
    96004384:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96004388:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    9600438c:	91147042 	add	x2, x2, #0x51c
    96004390:	91325421 	add	x1, x1, #0xc95
    96004394:	aa1e03e0 	mov	x0, x30
    96004398:	94008deb 	bl	96027b44 <_panic>
    9600439c:	b9402c02 	ldr	w2, [x0, #44]
    960043a0:	7100045f 	cmp	w2, #0x1
    960043a4:	540000a0 	b.eq	960043b8 <insert_in_run_queue_head+0x5c>  // b.none
    960043a8:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960043ac:	52800c03 	mov	w3, #0x60                  	// #96
    960043b0:	9110f084 	add	x4, x4, #0x43c
    960043b4:	17fffff4 	b	96004384 <insert_in_run_queue_head+0x28>
	if ((item->prev == 0) && (item->next == 0)) {
    960043b8:	f9400c01 	ldr	x1, [x0, #24]
	ASSERT(!list_in_list(&t->queue_node));
    960043bc:	91006004 	add	x4, x0, #0x18
    960043c0:	b5000161 	cbnz	x1, 960043ec <insert_in_run_queue_head+0x90>
    960043c4:	f9401001 	ldr	x1, [x0, #32]
    960043c8:	b5000121 	cbnz	x1, 960043ec <insert_in_run_queue_head+0x90>
    960043cc:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
	ASSERT(in_critical_section());
    960043d0:	b94c9821 	ldr	w1, [x1, #3224]
    960043d4:	7100003f 	cmp	w1, #0x0
    960043d8:	5400012c 	b.gt	960043fc <insert_in_run_queue_head+0xa0>
    960043dc:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960043e0:	52800c43 	mov	w3, #0x62                  	// #98
    960043e4:	91141884 	add	x4, x4, #0x506
    960043e8:	17ffffe7 	b	96004384 <insert_in_run_queue_head+0x28>
	ASSERT(!list_in_list(&t->queue_node));
    960043ec:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960043f0:	52800c23 	mov	w3, #0x61                  	// #97
    960043f4:	91115484 	add	x4, x4, #0x455
    960043f8:	17ffffe3 	b	96004384 <insert_in_run_queue_head+0x28>
	list_add_head(&run_queue[t->priority], &t->queue_node);
    960043fc:	b9402803 	ldr	w3, [x0, #40]
	item->next = list->next;
    96004400:	d0000341 	adrp	x1, 9606e000 <__bss_start>
    96004404:	91068021 	add	x1, x1, #0x1a0
    96004408:	8b23d021 	add	x1, x1, w3, sxtw #4
	run_queue_bitmap |= (1<<t->priority);
    9600440c:	1ac32042 	lsl	w2, w2, w3
    96004410:	f9400425 	ldr	x5, [x1, #8]
    96004414:	a9019401 	stp	x1, x5, [x0, #24]
	list->next->prev = item;
    96004418:	f9400420 	ldr	x0, [x1, #8]
    9600441c:	f9000004 	str	x4, [x0]
    96004420:	d0000340 	adrp	x0, 9606e000 <__bss_start>
	list->next = item;
    96004424:	f9000424 	str	x4, [x1, #8]
    96004428:	b943a001 	ldr	w1, [x0, #928]
}
    9600442c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	run_queue_bitmap |= (1<<t->priority);
    96004430:	2a010042 	orr	w2, w2, w1
    96004434:	b903a002 	str	w2, [x0, #928]
}
    96004438:	d65f03c0 	ret

000000009600443c <thread_sleep_handler>:
		return INT_NO_RESCHEDULE;
}

/* timer callback to wake up a sleeping thread */
static enum handler_return thread_sleep_handler(timer_t *timer, lk_time_t now, void *arg)
{
    9600443c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	thread_t *t = (thread_t *)arg;

#if THREAD_CHECKS
	ASSERT(t->magic == THREAD_MAGIC);
    96004440:	528e4c81 	mov	w1, #0x7264                	// #29284
    96004444:	72ae8d01 	movk	w1, #0x7468, lsl #16
    96004448:	aa1e03e0 	mov	x0, x30
{
    9600444c:	910003fd 	mov	x29, sp
	ASSERT(t->magic == THREAD_MAGIC);
    96004450:	b9400043 	ldr	w3, [x2]
{
    96004454:	f9000bf3 	str	x19, [sp, #16]
	ASSERT(t->magic == THREAD_MAGIC);
    96004458:	6b01007f 	cmp	w3, w1
    9600445c:	54000120 	b.eq	96004480 <thread_sleep_handler+0x44>  // b.none
    96004460:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004464:	91108c84 	add	x4, x4, #0x423
    96004468:	52804a03 	mov	w3, #0x250                 	// #592
	ASSERT(t->state == THREAD_SLEEPING);
    9600446c:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96004470:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96004474:	91147042 	add	x2, x2, #0x51c
    96004478:	91325421 	add	x1, x1, #0xc95
    9600447c:	94008db2 	bl	96027b44 <_panic>
    96004480:	b9402c41 	ldr	w1, [x2, #44]
    96004484:	7100103f 	cmp	w1, #0x4
    96004488:	540000a0 	b.eq	9600449c <thread_sleep_handler+0x60>  // b.none
    9600448c:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004490:	52804a23 	mov	w3, #0x251                 	// #593
    96004494:	91173c84 	add	x4, x4, #0x5cf
    96004498:	17fffff5 	b	9600446c <thread_sleep_handler+0x30>
#endif

	t->state = THREAD_READY;
    9600449c:	52800033 	mov	w19, #0x1                   	// #1
    960044a0:	b9002c53 	str	w19, [x2, #44]
	insert_in_run_queue_head(t);
    960044a4:	aa0203e0 	mov	x0, x2
    960044a8:	97ffffad 	bl	9600435c <insert_in_run_queue_head>

	return INT_RESCHEDULE;
}
    960044ac:	2a1303e0 	mov	w0, w19
    960044b0:	f9400bf3 	ldr	x19, [sp, #16]
    960044b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960044b8:	d65f03c0 	ret

00000000960044bc <thread_create_etc>:
{
    960044bc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960044c0:	910003fd 	mov	x29, sp
    960044c4:	a90153f3 	stp	x19, x20, [sp, #16]
    960044c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960044cc:	aa0503f6 	mov	x22, x5
    960044d0:	a90363f7 	stp	x23, x24, [sp, #48]
    960044d4:	aa0603f5 	mov	x21, x6
    960044d8:	a9046bf9 	stp	x25, x26, [sp, #64]
    960044dc:	aa0303f8 	mov	x24, x3
    960044e0:	aa0103fa 	mov	x26, x1
    960044e4:	aa0203f9 	mov	x25, x2
    960044e8:	2a0403f7 	mov	w23, w4
	if (!t) {
    960044ec:	b50001c0 	cbnz	x0, 96004524 <thread_create_etc+0x68>
		t = malloc(sizeof(thread_t));
    960044f0:	d2801800 	mov	x0, #0xc0                  	// #192
		flags |= THREAD_FLAG_FREE_STRUCT;
    960044f4:	52800094 	mov	w20, #0x4                   	// #4
		t = malloc(sizeof(thread_t));
    960044f8:	940090b0 	bl	960287b8 <malloc>
    960044fc:	aa0003f3 	mov	x19, x0
		if (!t)
    96004500:	b5000160 	cbnz	x0, 9600452c <thread_create_etc+0x70>
			return NULL;
    96004504:	d2800013 	mov	x19, #0x0                   	// #0
}
    96004508:	aa1303e0 	mov	x0, x19
    9600450c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004510:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96004514:	a94363f7 	ldp	x23, x24, [sp, #48]
    96004518:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600451c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96004520:	d65f03c0 	ret
    96004524:	aa0003f3 	mov	x19, x0
	unsigned int flags = 0;
    96004528:	52800014 	mov	w20, #0x0                   	// #0
	memset(t, 0, sizeof(thread_t));
    9600452c:	d2801802 	mov	x2, #0xc0                  	// #192
    96004530:	52800001 	mov	w1, #0x0                   	// #0
    96004534:	aa1303e0 	mov	x0, x19
    96004538:	9400963c 	bl	96029e28 <memset>
	t->magic = THREAD_MAGIC;
    9600453c:	aa1303e0 	mov	x0, x19
    96004540:	528e4c81 	mov	w1, #0x7264                	// #29284
    96004544:	72ae8d01 	movk	w1, #0x7468, lsl #16
	strlcpy(t->name, name, sizeof(t->name));
    96004548:	d2800402 	mov	x2, #0x20                  	// #32
	t->magic = THREAD_MAGIC;
    9600454c:	b80a0401 	str	w1, [x0], #160
	strlcpy(t->name, name, sizeof(t->name));
    96004550:	aa1a03e1 	mov	x1, x26
    96004554:	94009776 	bl	9602a32c <strlcpy>
	t->state = THREAD_SUSPENDED;
    96004558:	29057e77 	stp	w23, wzr, [x19, #40]
 * @defgroup  wait  Wait Queue
 * @{
 */
void wait_queue_init(wait_queue_t *wait)
{
	*wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    9600455c:	528d2e82 	mov	w2, #0x6974                	// #26996
	t->saved_critical_section_count = 1; /* we always start inside a critical section */
    96004560:	52800020 	mov	w0, #0x1                   	// #1
	*wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    96004564:	91022261 	add	x1, x19, #0x88
    96004568:	72aeec22 	movk	w2, #0x7761, lsl #16
	t->saved_critical_section_count = 1; /* we always start inside a critical section */
    9600456c:	b9003260 	str	w0, [x19, #48]
	t->blocking_wait_queue = NULL;
    96004570:	f900227f 	str	xzr, [x19, #64]
	t->wait_queue_block_ret = NO_ERROR;
    96004574:	b9004a7f 	str	wzr, [x19, #72]
	t->arg = arg;
    96004578:	a906e279 	stp	x25, x24, [x19, #104]
	t->retcode = 0;
    9600457c:	b9007a7f 	str	wzr, [x19, #120]
	*wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    96004580:	b9008262 	str	w2, [x19, #128]
    96004584:	a9088661 	stp	x1, x1, [x19, #136]
    96004588:	b9009a7f 	str	wzr, [x19, #152]
	if (!stack) {
    9600458c:	b5000156 	cbnz	x22, 960045b4 <thread_create_etc+0xf8>
		t->stack = malloc(stack_size);
    96004590:	aa1503e0 	mov	x0, x21
    96004594:	94009089 	bl	960287b8 <malloc>
    96004598:	f9002e60 	str	x0, [x19, #88]
		if (!t->stack) {
    9600459c:	b50000a0 	cbnz	x0, 960045b0 <thread_create_etc+0xf4>
			if (flags & THREAD_FLAG_FREE_STRUCT)
    960045a0:	34fffb34 	cbz	w20, 96004504 <thread_create_etc+0x48>
				free(t);
    960045a4:	aa1303e0 	mov	x0, x19
    960045a8:	94009085 	bl	960287bc <free>
    960045ac:	17ffffd6 	b	96004504 <thread_create_etc+0x48>
		flags |= THREAD_FLAG_FREE_STACK;
    960045b0:	321f0294 	orr	w20, w20, #0x2
	t->flags = flags;
    960045b4:	b9003a74 	str	w20, [x19, #56]
	arch_thread_initialize(t);
    960045b8:	aa1303e0 	mov	x0, x19
	t->stack_size = stack_size;
    960045bc:	f9003275 	str	x21, [x19, #96]
	arch_thread_initialize(t);
    960045c0:	97fffb7f 	bl	960033bc <arch_thread_initialize>
	if (critical_section_count == 0)
    960045c4:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960045c8:	b94c9801 	ldr	w1, [x0, #3224]
    960045cc:	35000041 	cbnz	w1, 960045d4 <thread_create_etc+0x118>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    960045d0:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    960045d4:	b94c9801 	ldr	w1, [x0, #3224]
    960045d8:	11000421 	add	w1, w1, #0x1
    960045dc:	b90c9801 	str	w1, [x0, #3224]
	item->next = list->next;
    960045e0:	d0000341 	adrp	x1, 9606e000 <__bss_start>
    960045e4:	910ea021 	add	x1, x1, #0x3a8
	list_add_head(&thread_list, &t->thread_list_node);
    960045e8:	91002262 	add	x2, x19, #0x8
    960045ec:	f9400423 	ldr	x3, [x1, #8]
    960045f0:	a9008e61 	stp	x1, x3, [x19, #8]
	list->next->prev = item;
    960045f4:	f9000062 	str	x2, [x3]
	list->next = item;
    960045f8:	f9000422 	str	x2, [x1, #8]
	critical_section_count--;
    960045fc:	b94c9801 	ldr	w1, [x0, #3224]
    96004600:	51000421 	sub	w1, w1, #0x1
    96004604:	b90c9801 	str	w1, [x0, #3224]
	if (critical_section_count == 0)
    96004608:	35000041 	cbnz	w1, 96004610 <thread_create_etc+0x154>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    9600460c:	d50343ff 	msr	daifclr, #0x3
	return t;
    96004610:	17ffffbe 	b	96004508 <thread_create_etc+0x4c>

0000000096004614 <thread_create>:
	return thread_create_etc(NULL, name, entry, arg, priority, NULL, stack_size);
    96004614:	aa0403e6 	mov	x6, x4
    96004618:	d2800005 	mov	x5, #0x0                   	// #0
    9600461c:	2a0303e4 	mov	w4, w3
    96004620:	aa0203e3 	mov	x3, x2
    96004624:	aa0103e2 	mov	x2, x1
    96004628:	aa0003e1 	mov	x1, x0
    9600462c:	d2800000 	mov	x0, #0x0                   	// #0
    96004630:	17ffffa3 	b	960044bc <thread_create_etc>

0000000096004634 <thread_yield>:
{
    96004634:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	ASSERT(current_thread->magic == THREAD_MAGIC);
    96004638:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9600463c:	528e4c83 	mov	w3, #0x7264                	// #29284
    96004640:	aa1e03e0 	mov	x0, x30
{
    96004644:	910003fd 	mov	x29, sp
	ASSERT(current_thread->magic == THREAD_MAGIC);
    96004648:	f9463022 	ldr	x2, [x1, #3168]
    9600464c:	72ae8d03 	movk	w3, #0x7468, lsl #16
    96004650:	b9400044 	ldr	w4, [x2]
{
    96004654:	f9000bf3 	str	x19, [sp, #16]
	ASSERT(current_thread->magic == THREAD_MAGIC);
    96004658:	6b03009f 	cmp	w4, w3
    9600465c:	54000120 	b.eq	96004680 <thread_yield+0x4c>  // b.none
    96004660:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004664:	9118f084 	add	x4, x4, #0x63c
    96004668:	52803d43 	mov	w3, #0x1ea                 	// #490
	ASSERT(current_thread->state == THREAD_RUNNING);
    9600466c:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96004670:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96004674:	91147042 	add	x2, x2, #0x51c
    96004678:	91325421 	add	x1, x1, #0xc95
    9600467c:	94008d32 	bl	96027b44 <_panic>
    96004680:	b9402c42 	ldr	w2, [x2, #44]
    96004684:	7100085f 	cmp	w2, #0x2
    96004688:	540000a0 	b.eq	9600469c <thread_yield+0x68>  // b.none
    9600468c:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004690:	52803d63 	mov	w3, #0x1eb                 	// #491
    96004694:	91198884 	add	x4, x4, #0x662
    96004698:	17fffff5 	b	9600466c <thread_yield+0x38>
	if (critical_section_count == 0)
    9600469c:	d0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    960046a0:	b94c9a60 	ldr	w0, [x19, #3224]
    960046a4:	35000040 	cbnz	w0, 960046ac <thread_yield+0x78>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    960046a8:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    960046ac:	b94c9a60 	ldr	w0, [x19, #3224]
    960046b0:	11000400 	add	w0, w0, #0x1
    960046b4:	b90c9a60 	str	w0, [x19, #3224]
	THREAD_STATS_INC(yields);
    960046b8:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960046bc:	9131a000 	add	x0, x0, #0xc68
    960046c0:	b9401c02 	ldr	w2, [x0, #28]
    960046c4:	11000442 	add	w2, w2, #0x1
    960046c8:	b9001c02 	str	w2, [x0, #28]
	current_thread->state = THREAD_READY;
    960046cc:	f9463020 	ldr	x0, [x1, #3168]
    960046d0:	52800021 	mov	w1, #0x1                   	// #1
    960046d4:	b9002c01 	str	w1, [x0, #44]
	current_thread->remaining_quantum = 0;
    960046d8:	b900341f 	str	wzr, [x0, #52]
	insert_in_run_queue_tail(current_thread);
    960046dc:	97fffee7 	bl	96004278 <insert_in_run_queue_tail>
	thread_resched();
    960046e0:	97fffe65 	bl	96004074 <thread_resched>
	critical_section_count--;
    960046e4:	b94c9a60 	ldr	w0, [x19, #3224]
    960046e8:	51000400 	sub	w0, w0, #0x1
    960046ec:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    960046f0:	35000040 	cbnz	w0, 960046f8 <thread_yield+0xc4>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    960046f4:	d50343ff 	msr	daifclr, #0x3
}
    960046f8:	f9400bf3 	ldr	x19, [sp, #16]
    960046fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96004700:	d65f03c0 	ret

0000000096004704 <thread_resume>:
{
    96004704:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	ASSERT(t->magic == THREAD_MAGIC);
    96004708:	528e4c81 	mov	w1, #0x7264                	// #29284
    9600470c:	72ae8d01 	movk	w1, #0x7468, lsl #16
{
    96004710:	910003fd 	mov	x29, sp
	ASSERT(t->magic == THREAD_MAGIC);
    96004714:	b9400002 	ldr	w2, [x0]
{
    96004718:	f9000bf3 	str	x19, [sp, #16]
	ASSERT(t->magic == THREAD_MAGIC);
    9600471c:	6b01005f 	cmp	w2, w1
    96004720:	54000140 	b.eq	96004748 <thread_resume+0x44>  // b.none
    96004724:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004728:	91108c84 	add	x4, x4, #0x423
    9600472c:	52801c43 	mov	w3, #0xe2                  	// #226
	ASSERT(t->state != THREAD_DEATH);
    96004730:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96004734:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96004738:	91147042 	add	x2, x2, #0x51c
    9600473c:	91325421 	add	x1, x1, #0xc95
    96004740:	aa1e03e0 	mov	x0, x30
    96004744:	94008d00 	bl	96027b44 <_panic>
    96004748:	b9402c01 	ldr	w1, [x0, #44]
    9600474c:	7100143f 	cmp	w1, #0x5
    96004750:	540000a1 	b.ne	96004764 <thread_resume+0x60>  // b.any
    96004754:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004758:	52801c63 	mov	w3, #0xe3                  	// #227
    9600475c:	9116d884 	add	x4, x4, #0x5b6
    96004760:	17fffff4 	b	96004730 <thread_resume+0x2c>
	if (critical_section_count == 0)
    96004764:	d0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96004768:	b94c9a61 	ldr	w1, [x19, #3224]
    9600476c:	35000041 	cbnz	w1, 96004774 <thread_resume+0x70>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96004770:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96004774:	b94c9a61 	ldr	w1, [x19, #3224]
    96004778:	11000421 	add	w1, w1, #0x1
    9600477c:	b90c9a61 	str	w1, [x19, #3224]
	if (t->state == THREAD_SUSPENDED) {
    96004780:	b9402c01 	ldr	w1, [x0, #44]
    96004784:	350000a1 	cbnz	w1, 96004798 <thread_resume+0x94>
		t->state = THREAD_READY;
    96004788:	52800021 	mov	w1, #0x1                   	// #1
    9600478c:	b9002c01 	str	w1, [x0, #44]
		insert_in_run_queue_head(t);
    96004790:	97fffef3 	bl	9600435c <insert_in_run_queue_head>
		thread_yield();
    96004794:	97ffffa8 	bl	96004634 <thread_yield>
	critical_section_count--;
    96004798:	b94c9a60 	ldr	w0, [x19, #3224]
    9600479c:	51000400 	sub	w0, w0, #0x1
    960047a0:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    960047a4:	35000040 	cbnz	w0, 960047ac <thread_resume+0xa8>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    960047a8:	d50343ff 	msr	daifclr, #0x3
}
    960047ac:	52800000 	mov	w0, #0x0                   	// #0
    960047b0:	f9400bf3 	ldr	x19, [sp, #16]
    960047b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960047b8:	d65f03c0 	ret

00000000960047bc <thread_preempt>:
{
    960047bc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960047c0:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    960047c4:	528e4c83 	mov	w3, #0x7264                	// #29284
    960047c8:	aa1e03e0 	mov	x0, x30
{
    960047cc:	910003fd 	mov	x29, sp
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960047d0:	f9463022 	ldr	x2, [x1, #3168]
    960047d4:	72ae8d03 	movk	w3, #0x7468, lsl #16
    960047d8:	b9400044 	ldr	w4, [x2]
{
    960047dc:	f9000bf3 	str	x19, [sp, #16]
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960047e0:	6b03009f 	cmp	w4, w3
    960047e4:	54000120 	b.eq	96004808 <thread_preempt+0x4c>  // b.none
    960047e8:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960047ec:	9118f084 	add	x4, x4, #0x63c
    960047f0:	528041a3 	mov	w3, #0x20d                 	// #525
	ASSERT(current_thread->state == THREAD_RUNNING);
    960047f4:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960047f8:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960047fc:	91147042 	add	x2, x2, #0x51c
    96004800:	91325421 	add	x1, x1, #0xc95
    96004804:	94008cd0 	bl	96027b44 <_panic>
    96004808:	b9402c42 	ldr	w2, [x2, #44]
    9600480c:	7100085f 	cmp	w2, #0x2
    96004810:	540000a0 	b.eq	96004824 <thread_preempt+0x68>  // b.none
    96004814:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004818:	528041c3 	mov	w3, #0x20e                 	// #526
    9600481c:	91198884 	add	x4, x4, #0x662
    96004820:	17fffff5 	b	960047f4 <thread_preempt+0x38>
	if (critical_section_count == 0)
    96004824:	d0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96004828:	b94c9a60 	ldr	w0, [x19, #3224]
    9600482c:	35000040 	cbnz	w0, 96004834 <thread_preempt+0x78>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96004830:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96004834:	b94c9a60 	ldr	w0, [x19, #3224]
    96004838:	11000400 	add	w0, w0, #0x1
    9600483c:	b90c9a60 	str	w0, [x19, #3224]
	if (current_thread != idle_thread)
    96004840:	f9463020 	ldr	x0, [x1, #3168]
    96004844:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96004848:	f9465021 	ldr	x1, [x1, #3232]
    9600484c:	eb01001f 	cmp	x0, x1
    96004850:	540000c0 	b.eq	96004868 <thread_preempt+0xac>  // b.none
		THREAD_STATS_INC(preempts); /* only track when a meaningful preempt happens */
    96004854:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96004858:	9131a021 	add	x1, x1, #0xc68
    9600485c:	b9401822 	ldr	w2, [x1, #24]
    96004860:	11000442 	add	w2, w2, #0x1
    96004864:	b9001822 	str	w2, [x1, #24]
	current_thread->state = THREAD_READY;
    96004868:	52800021 	mov	w1, #0x1                   	// #1
    9600486c:	b9002c01 	str	w1, [x0, #44]
	if (current_thread->remaining_quantum > 0)
    96004870:	b9403401 	ldr	w1, [x0, #52]
    96004874:	7100003f 	cmp	w1, #0x0
    96004878:	5400016d 	b.le	960048a4 <thread_preempt+0xe8>
		insert_in_run_queue_head(current_thread);
    9600487c:	97fffeb8 	bl	9600435c <insert_in_run_queue_head>
	thread_resched();
    96004880:	97fffdfd 	bl	96004074 <thread_resched>
	critical_section_count--;
    96004884:	b94c9a60 	ldr	w0, [x19, #3224]
    96004888:	51000400 	sub	w0, w0, #0x1
    9600488c:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    96004890:	35000040 	cbnz	w0, 96004898 <thread_preempt+0xdc>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96004894:	d50343ff 	msr	daifclr, #0x3
}
    96004898:	f9400bf3 	ldr	x19, [sp, #16]
    9600489c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960048a0:	d65f03c0 	ret
		insert_in_run_queue_tail(current_thread); /* if we're out of quantum, go to the tail of the queue */
    960048a4:	97fffe75 	bl	96004278 <insert_in_run_queue_tail>
    960048a8:	17fffff6 	b	96004880 <thread_preempt+0xc4>

00000000960048ac <thread_block>:
{
    960048ac:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960048b0:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    960048b4:	528e4c82 	mov	w2, #0x7264                	// #29284
    960048b8:	aa1e03e0 	mov	x0, x30
{
    960048bc:	910003fd 	mov	x29, sp
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960048c0:	f9463021 	ldr	x1, [x1, #3168]
    960048c4:	72ae8d02 	movk	w2, #0x7468, lsl #16
    960048c8:	b9400023 	ldr	w3, [x1]
{
    960048cc:	f9000bf3 	str	x19, [sp, #16]
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960048d0:	6b02007f 	cmp	w3, w2
    960048d4:	54000120 	b.eq	960048f8 <thread_block+0x4c>  // b.none
    960048d8:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960048dc:	9118f084 	add	x4, x4, #0x63c
    960048e0:	52804643 	mov	w3, #0x232                 	// #562
	ASSERT(current_thread->state == THREAD_BLOCKED);
    960048e4:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960048e8:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960048ec:	91147042 	add	x2, x2, #0x51c
    960048f0:	91325421 	add	x1, x1, #0xc95
    960048f4:	94008c94 	bl	96027b44 <_panic>
    960048f8:	b9402c21 	ldr	w1, [x1, #44]
    960048fc:	71000c3f 	cmp	w1, #0x3
    96004900:	540000a0 	b.eq	96004914 <thread_block+0x68>  // b.none
    96004904:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004908:	52804663 	mov	w3, #0x233                 	// #563
    9600490c:	9111e084 	add	x4, x4, #0x478
    96004910:	17fffff5 	b	960048e4 <thread_block+0x38>
	if (critical_section_count == 0)
    96004914:	d0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96004918:	b94c9a60 	ldr	w0, [x19, #3224]
    9600491c:	35000040 	cbnz	w0, 96004924 <thread_block+0x78>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96004920:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96004924:	b94c9a60 	ldr	w0, [x19, #3224]
    96004928:	11000400 	add	w0, w0, #0x1
    9600492c:	b90c9a60 	str	w0, [x19, #3224]
	thread_resched();
    96004930:	97fffdd1 	bl	96004074 <thread_resched>
	critical_section_count--;
    96004934:	b94c9a60 	ldr	w0, [x19, #3224]
    96004938:	51000400 	sub	w0, w0, #0x1
    9600493c:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    96004940:	35000040 	cbnz	w0, 96004948 <thread_block+0x9c>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96004944:	d50343ff 	msr	daifclr, #0x3
}
    96004948:	f9400bf3 	ldr	x19, [sp, #16]
    9600494c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96004950:	d65f03c0 	ret

0000000096004954 <thread_timer_tick>:
	if (current_thread == idle_thread)
    96004954:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96004958:	f9463001 	ldr	x1, [x0, #3168]
    9600495c:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96004960:	f9465000 	ldr	x0, [x0, #3232]
    96004964:	eb00003f 	cmp	x1, x0
    96004968:	540000e0 	b.eq	96004984 <thread_timer_tick+0x30>  // b.none
	current_thread->remaining_quantum--;
    9600496c:	b9403420 	ldr	w0, [x1, #52]
    96004970:	51000400 	sub	w0, w0, #0x1
    96004974:	b9003420 	str	w0, [x1, #52]
	if (current_thread->remaining_quantum <= 0)
    96004978:	7100001f 	cmp	w0, #0x0
    9600497c:	1a9fc7e0 	cset	w0, le
}
    96004980:	d65f03c0 	ret
		return INT_NO_RESCHEDULE;
    96004984:	52800000 	mov	w0, #0x0                   	// #0
    96004988:	17fffffe 	b	96004980 <thread_timer_tick+0x2c>

000000009600498c <thread_sleep>:
{
    9600498c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	ASSERT(current_thread->magic == THREAD_MAGIC);
    96004990:	528e4c81 	mov	w1, #0x7264                	// #29284
    96004994:	72ae8d01 	movk	w1, #0x7468, lsl #16
{
    96004998:	910003fd 	mov	x29, sp
    9600499c:	a90153f3 	stp	x19, x20, [sp, #16]
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960049a0:	d0000394 	adrp	x20, 96076000 <free_dram_block+0x38e8>
{
    960049a4:	f90013f5 	str	x21, [sp, #32]
    960049a8:	aa0003f5 	mov	x21, x0
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960049ac:	f9463280 	ldr	x0, [x20, #3168]
    960049b0:	b9400002 	ldr	w2, [x0]
    960049b4:	6b01005f 	cmp	w2, w1
    960049b8:	54000140 	b.eq	960049e0 <thread_sleep+0x54>  // b.none
    960049bc:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960049c0:	9118f084 	add	x4, x4, #0x63c
    960049c4:	52804d23 	mov	w3, #0x269                 	// #617
	ASSERT(current_thread->state == THREAD_RUNNING);
    960049c8:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960049cc:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960049d0:	91147042 	add	x2, x2, #0x51c
    960049d4:	91325421 	add	x1, x1, #0xc95
    960049d8:	aa1e03e0 	mov	x0, x30
    960049dc:	94008c5a 	bl	96027b44 <_panic>
    960049e0:	b9402c00 	ldr	w0, [x0, #44]
    960049e4:	7100081f 	cmp	w0, #0x2
    960049e8:	540000a0 	b.eq	960049fc <thread_sleep+0x70>  // b.none
    960049ec:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960049f0:	52804d43 	mov	w3, #0x26a                 	// #618
    960049f4:	91198884 	add	x4, x4, #0x662
    960049f8:	17fffff4 	b	960049c8 <thread_sleep+0x3c>
	timer_initialize(&timer);
    960049fc:	9100e3a0 	add	x0, x29, #0x38
    96004a00:	940002f6 	bl	960055d8 <timer_initialize>
	if (critical_section_count == 0)
    96004a04:	d0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96004a08:	b94c9a60 	ldr	w0, [x19, #3224]
    96004a0c:	35000040 	cbnz	w0, 96004a14 <thread_sleep+0x88>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96004a10:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96004a14:	b94c9a60 	ldr	w0, [x19, #3224]
    96004a18:	11000400 	add	w0, w0, #0x1
    96004a1c:	b90c9a60 	str	w0, [x19, #3224]
	timer_set_oneshot(&timer, delay, thread_sleep_handler, (void *)current_thread);
    96004a20:	f9463283 	ldr	x3, [x20, #3168]
    96004a24:	aa1503e1 	mov	x1, x21
    96004a28:	9100e3a0 	add	x0, x29, #0x38
    96004a2c:	90000002 	adrp	x2, 96004000 <kernel_init>
    96004a30:	9110f042 	add	x2, x2, #0x43c
    96004a34:	940002f0 	bl	960055f4 <timer_set_oneshot>
	current_thread->state = THREAD_SLEEPING;
    96004a38:	f9463280 	ldr	x0, [x20, #3168]
    96004a3c:	52800081 	mov	w1, #0x4                   	// #4
    96004a40:	b9002c01 	str	w1, [x0, #44]
	thread_resched();
    96004a44:	97fffd8c 	bl	96004074 <thread_resched>
	critical_section_count--;
    96004a48:	b94c9a60 	ldr	w0, [x19, #3224]
    96004a4c:	51000400 	sub	w0, w0, #0x1
    96004a50:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    96004a54:	35000040 	cbnz	w0, 96004a5c <thread_sleep+0xd0>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96004a58:	d50343ff 	msr	daifclr, #0x3
}
    96004a5c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004a60:	f94013f5 	ldr	x21, [sp, #32]
    96004a64:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96004a68:	d65f03c0 	ret

0000000096004a6c <thread_init_early>:
{
    96004a6c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96004a70:	d0000340 	adrp	x0, 9606e000 <__bss_start>
    96004a74:	91068000 	add	x0, x0, #0x1a0
    96004a78:	910003fd 	mov	x29, sp
    96004a7c:	91002001 	add	x1, x0, #0x8
    96004a80:	91082000 	add	x0, x0, #0x208
    96004a84:	a90153f3 	stp	x19, x20, [sp, #16]
    96004a88:	f90013f5 	str	x21, [sp, #32]
    96004a8c:	d1002022 	sub	x2, x1, #0x8
	list->prev = list->next = list;
    96004a90:	a93f8822 	stp	x2, x2, [x1, #-8]
    96004a94:	91004021 	add	x1, x1, #0x10
	for (i=0; i < NUM_PRIORITIES; i++)
    96004a98:	eb00003f 	cmp	x1, x0
    96004a9c:	54ffff81 	b.ne	96004a8c <thread_init_early+0x20>  // b.any
    96004aa0:	d0000340 	adrp	x0, 9606e000 <__bss_start>
    96004aa4:	910ea014 	add	x20, x0, #0x3a8
	memset(t, 0, sizeof(thread_t));
    96004aa8:	d0000355 	adrp	x21, 9606e000 <__bss_start>
    96004aac:	910382b3 	add	x19, x21, #0xe0
    96004ab0:	f901d414 	str	x20, [x0, #936]
    96004ab4:	d2801802 	mov	x2, #0xc0                  	// #192
    96004ab8:	52800001 	mov	w1, #0x0                   	// #0
    96004abc:	aa1303e0 	mov	x0, x19
    96004ac0:	f9000694 	str	x20, [x20, #8]
    96004ac4:	940094d9 	bl	96029e28 <memset>
	t->magic = THREAD_MAGIC;
    96004ac8:	528e4c80 	mov	w0, #0x7264                	// #29284
	strlcpy(t->name, name, sizeof(t->name));
    96004acc:	d2800402 	mov	x2, #0x20                  	// #32
	t->magic = THREAD_MAGIC;
    96004ad0:	72ae8d00 	movk	w0, #0x7468, lsl #16
	strlcpy(t->name, name, sizeof(t->name));
    96004ad4:	f00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
	t->magic = THREAD_MAGIC;
    96004ad8:	b900e2a0 	str	w0, [x21, #224]
	strlcpy(t->name, name, sizeof(t->name));
    96004adc:	91131021 	add	x1, x1, #0x4c4
    96004ae0:	91028260 	add	x0, x19, #0xa0
    96004ae4:	94009612 	bl	9602a32c <strlcpy>
	t->priority = HIGHEST_PRIORITY;
    96004ae8:	528003e0 	mov	w0, #0x1f                  	// #31
    96004aec:	b9002a60 	str	w0, [x19, #40]
	t->state = THREAD_RUNNING;
    96004af0:	52800040 	mov	w0, #0x2                   	// #2
    96004af4:	b9002e60 	str	w0, [x19, #44]
	t->saved_critical_section_count = 1;
    96004af8:	52800020 	mov	w0, #0x1                   	// #1
    96004afc:	b9003260 	str	w0, [x19, #48]
	t->flags = THREAD_FLAG_DETACHED;
    96004b00:	b9003a60 	str	w0, [x19, #56]
	*wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    96004b04:	528d2e80 	mov	w0, #0x6974                	// #26996
    96004b08:	72aeec20 	movk	w0, #0x7761, lsl #16
    96004b0c:	b9008260 	str	w0, [x19, #128]
    96004b10:	91022260 	add	x0, x19, #0x88
    96004b14:	a9088260 	stp	x0, x0, [x19, #136]
	item->prev = list;
    96004b18:	aa1303e0 	mov	x0, x19
	item->next = list->next;
    96004b1c:	f9400681 	ldr	x1, [x20, #8]
}
    96004b20:	f94013f5 	ldr	x21, [sp, #32]
    96004b24:	f9000a61 	str	x1, [x19, #16]
	item->prev = list;
    96004b28:	f8008c14 	str	x20, [x0, #8]!
	*wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    96004b2c:	b9009a7f 	str	wzr, [x19, #152]
	list->next->prev = item;
    96004b30:	f9000020 	str	x0, [x1]
	list->next = item;
    96004b34:	f9000680 	str	x0, [x20, #8]
	current_thread = t;
    96004b38:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96004b3c:	f9063013 	str	x19, [x0, #3168]
}
    96004b40:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004b44:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96004b48:	d65f03c0 	ret

0000000096004b4c <thread_init>:
}
    96004b4c:	d65f03c0 	ret

0000000096004b50 <thread_set_name>:
	strlcpy(current_thread->name, name, sizeof(current_thread->name));
    96004b50:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96004b54:	d2800402 	mov	x2, #0x20                  	// #32
    96004b58:	f9463023 	ldr	x3, [x1, #3168]
    96004b5c:	aa0003e1 	mov	x1, x0
    96004b60:	91028060 	add	x0, x3, #0xa0
    96004b64:	140095f2 	b	9602a32c <strlcpy>

0000000096004b68 <thread_become_idle>:
{
    96004b68:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	thread_set_name("idle");
    96004b6c:	f00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96004b70:	9111cc00 	add	x0, x0, #0x473
{
    96004b74:	910003fd 	mov	x29, sp
	thread_set_name("idle");
    96004b78:	97fffff6 	bl	96004b50 <thread_set_name>
	current_thread->priority = priority;
    96004b7c:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
	idle_thread = current_thread;
    96004b80:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
	current_thread->priority = priority;
    96004b84:	f9463000 	ldr	x0, [x0, #3168]
	idle_thread = current_thread;
    96004b88:	f9065020 	str	x0, [x1, #3232]
	current_thread->priority = priority;
    96004b8c:	b900281f 	str	wzr, [x0, #40]
	critical_section_count--;
    96004b90:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96004b94:	b94c9820 	ldr	w0, [x1, #3224]
    96004b98:	51000400 	sub	w0, w0, #0x1
    96004b9c:	b90c9820 	str	w0, [x1, #3224]
	if (critical_section_count == 0)
    96004ba0:	35000040 	cbnz	w0, 96004ba8 <thread_become_idle+0x40>
    96004ba4:	d50343ff 	msr	daifclr, #0x3
	thread_yield();
    96004ba8:	97fffea3 	bl	96004634 <thread_yield>
		arch_idle();
    96004bac:	97fff921 	bl	96003030 <arch_idle>
    96004bb0:	17ffffff 	b	96004bac <thread_become_idle+0x44>

0000000096004bb4 <wait_queue_block>:
 *
 * @return ERR_TIMED_OUT on timeout, else returns the return
 * value specified when the queue was woken by wait_queue_wake_one().
 */
status_t wait_queue_block(wait_queue_t *wait, lk_time_t timeout)
{
    96004bb4:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96004bb8:	910003fd 	mov	x29, sp
    96004bbc:	a90153f3 	stp	x19, x20, [sp, #16]
    96004bc0:	aa0103f4 	mov	x20, x1
	timer_t timer;

#if THREAD_CHECKS
	ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    96004bc4:	b9400002 	ldr	w2, [x0]
    96004bc8:	528d2e81 	mov	w1, #0x6974                	// #26996
    96004bcc:	72aeec21 	movk	w1, #0x7761, lsl #16
    96004bd0:	6b01005f 	cmp	w2, w1
    96004bd4:	54000140 	b.eq	96004bfc <wait_queue_block+0x48>  // b.none
    96004bd8:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004bdc:	911a2884 	add	x4, x4, #0x68a
    96004be0:	52806543 	mov	w3, #0x32a                 	// #810
	ASSERT(current_thread->state == THREAD_RUNNING);
    96004be4:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96004be8:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96004bec:	91147042 	add	x2, x2, #0x51c
    96004bf0:	91325421 	add	x1, x1, #0xc95
    96004bf4:	aa1e03e0 	mov	x0, x30
    96004bf8:	94008bd3 	bl	96027b44 <_panic>
    96004bfc:	d0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96004c00:	f9463261 	ldr	x1, [x19, #3168]
    96004c04:	b9402c21 	ldr	w1, [x1, #44]
    96004c08:	7100083f 	cmp	w1, #0x2
    96004c0c:	540000a0 	b.eq	96004c20 <wait_queue_block+0x6c>  // b.none
    96004c10:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004c14:	52806563 	mov	w3, #0x32b                 	// #811
    96004c18:	91198884 	add	x4, x4, #0x662
    96004c1c:	17fffff2 	b	96004be4 <wait_queue_block+0x30>
	return critical_section_count > 0;
    96004c20:	d0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
	ASSERT(in_critical_section());
    96004c24:	b94c9821 	ldr	w1, [x1, #3224]
    96004c28:	7100003f 	cmp	w1, #0x0
    96004c2c:	540000ac 	b.gt	96004c40 <wait_queue_block+0x8c>
    96004c30:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004c34:	52806583 	mov	w3, #0x32c                 	// #812
    96004c38:	91141884 	add	x4, x4, #0x506
    96004c3c:	17ffffea 	b	96004be4 <wait_queue_block+0x30>
#endif

	if (timeout == 0)
    96004c40:	b4000494 	cbz	x20, 96004cd0 <wait_queue_block+0x11c>
	item->prev = list->prev;
    96004c44:	aa0003e2 	mov	x2, x0
		return ERR_TIMED_OUT;

	list_add_tail(&wait->list, &current_thread->queue_node);
    96004c48:	f9463261 	ldr	x1, [x19, #3168]
	current_thread->state = THREAD_BLOCKED;
	current_thread->blocking_wait_queue = wait;
	current_thread->wait_queue_block_ret = NO_ERROR;

	/* if the timeout is nonzero or noninfinite, set a callback to yank us out of the queue */
	if (timeout != INFINITE_TIME) {
    96004c4c:	b100069f 	cmn	x20, #0x1
	list_add_tail(&wait->list, &current_thread->queue_node);
    96004c50:	91006023 	add	x3, x1, #0x18
    96004c54:	f8408c44 	ldr	x4, [x2, #8]!
	item->next = list;
    96004c58:	a9018824 	stp	x4, x2, [x1, #24]
	list->prev->next = item;
    96004c5c:	f9400402 	ldr	x2, [x0, #8]
    96004c60:	f9000443 	str	x3, [x2, #8]
	wait->count++;
    96004c64:	b9401802 	ldr	w2, [x0, #24]
	list->prev = item;
    96004c68:	f9000403 	str	x3, [x0, #8]
    96004c6c:	11000442 	add	w2, w2, #0x1
    96004c70:	b9001802 	str	w2, [x0, #24]
	current_thread->blocking_wait_queue = wait;
    96004c74:	f9002020 	str	x0, [x1, #64]
	current_thread->state = THREAD_BLOCKED;
    96004c78:	52800062 	mov	w2, #0x3                   	// #3
    96004c7c:	b9002c22 	str	w2, [x1, #44]
	current_thread->wait_queue_block_ret = NO_ERROR;
    96004c80:	b900483f 	str	wzr, [x1, #72]
	if (timeout != INFINITE_TIME) {
    96004c84:	54000120 	b.eq	96004ca8 <wait_queue_block+0xf4>  // b.none
		timer_initialize(&timer);
    96004c88:	9100a3a0 	add	x0, x29, #0x28
    96004c8c:	94000253 	bl	960055d8 <timer_initialize>
		timer_set_oneshot(&timer, timeout, wait_queue_timeout_handler, (void *)current_thread);
    96004c90:	f9463263 	ldr	x3, [x19, #3168]
    96004c94:	b0000002 	adrp	x2, 96005000 <thread_detach+0x2c>
    96004c98:	aa1403e1 	mov	x1, x20
    96004c9c:	910b2042 	add	x2, x2, #0x2c8
    96004ca0:	9100a3a0 	add	x0, x29, #0x28
    96004ca4:	94000254 	bl	960055f4 <timer_set_oneshot>
	}

	thread_block();
    96004ca8:	97ffff01 	bl	960048ac <thread_block>

	/* we don't really know if the timer fired or not, so it's better safe to try to cancel it */
	if (timeout != INFINITE_TIME) {
    96004cac:	b100069f 	cmn	x20, #0x1
    96004cb0:	54000060 	b.eq	96004cbc <wait_queue_block+0x108>  // b.none
		timer_cancel(&timer);
    96004cb4:	9100a3a0 	add	x0, x29, #0x28
    96004cb8:	94000255 	bl	9600560c <timer_cancel>
	}

	return current_thread->wait_queue_block_ret;
    96004cbc:	f9463260 	ldr	x0, [x19, #3168]
    96004cc0:	b9404800 	ldr	w0, [x0, #72]
}
    96004cc4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004cc8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96004ccc:	d65f03c0 	ret
		return ERR_TIMED_OUT;
    96004cd0:	12800180 	mov	w0, #0xfffffff3            	// #-13
    96004cd4:	17fffffc 	b	96004cc4 <wait_queue_block+0x110>

0000000096004cd8 <thread_join>:
{
    96004cd8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96004cdc:	910003fd 	mov	x29, sp
    96004ce0:	a90153f3 	stp	x19, x20, [sp, #16]
    96004ce4:	aa0003f3 	mov	x19, x0
    96004ce8:	a9025bf5 	stp	x21, x22, [sp, #32]
    96004cec:	aa0103f6 	mov	x22, x1
    96004cf0:	aa0203e1 	mov	x1, x2
	ASSERT(t->magic == THREAD_MAGIC);
    96004cf4:	b9400002 	ldr	w2, [x0]
    96004cf8:	528e4c80 	mov	w0, #0x7264                	// #29284
    96004cfc:	aa1e03f5 	mov	x21, x30
    96004d00:	72ae8d00 	movk	w0, #0x7468, lsl #16
    96004d04:	6b00005f 	cmp	w2, w0
    96004d08:	54000140 	b.eq	96004d30 <thread_join+0x58>  // b.none
    96004d0c:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004d10:	91108c84 	add	x4, x4, #0x423
    96004d14:	52801fa3 	mov	w3, #0xfd                  	// #253
	ASSERT(t->magic == THREAD_MAGIC);
    96004d18:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96004d1c:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96004d20:	91147042 	add	x2, x2, #0x51c
    96004d24:	91325421 	add	x1, x1, #0xc95
    96004d28:	aa1503e0 	mov	x0, x21
    96004d2c:	94008b86 	bl	96027b44 <_panic>
	if (critical_section_count == 0)
    96004d30:	d0000394 	adrp	x20, 96076000 <free_dram_block+0x38e8>
    96004d34:	b94c9a80 	ldr	w0, [x20, #3224]
    96004d38:	35000040 	cbnz	w0, 96004d40 <thread_join+0x68>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96004d3c:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96004d40:	b94c9a80 	ldr	w0, [x20, #3224]
    96004d44:	11000400 	add	w0, w0, #0x1
    96004d48:	b90c9a80 	str	w0, [x20, #3224]
	if (t->flags & THREAD_FLAG_DETACHED) {
    96004d4c:	b9403a60 	ldr	w0, [x19, #56]
    96004d50:	36000160 	tbz	w0, #0, 96004d7c <thread_join+0xa4>
	critical_section_count--;
    96004d54:	b94c9a80 	ldr	w0, [x20, #3224]
    96004d58:	51000400 	sub	w0, w0, #0x1
    96004d5c:	b90c9a80 	str	w0, [x20, #3224]
	if (critical_section_count == 0)
    96004d60:	35000040 	cbnz	w0, 96004d68 <thread_join+0x90>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96004d64:	d50343ff 	msr	daifclr, #0x3
		return ERR_THREAD_DETACHED;
    96004d68:	12800320 	mov	w0, #0xffffffe6            	// #-26
}
    96004d6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004d70:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96004d74:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96004d78:	d65f03c0 	ret
	if (t->state != THREAD_DEATH) {
    96004d7c:	b9402e60 	ldr	w0, [x19, #44]
    96004d80:	7100141f 	cmp	w0, #0x5
    96004d84:	54000140 	b.eq	96004dac <thread_join+0xd4>  // b.none
		status_t err = wait_queue_block(&t->retcode_wait_queue, timeout);
    96004d88:	91020260 	add	x0, x19, #0x80
    96004d8c:	97ffff8a 	bl	96004bb4 <wait_queue_block>
		if (err < 0) {
    96004d90:	36f800e0 	tbz	w0, #31, 96004dac <thread_join+0xd4>
	critical_section_count--;
    96004d94:	b94c9a81 	ldr	w1, [x20, #3224]
    96004d98:	51000421 	sub	w1, w1, #0x1
    96004d9c:	b90c9a81 	str	w1, [x20, #3224]
	if (critical_section_count == 0)
    96004da0:	35000041 	cbnz	w1, 96004da8 <thread_join+0xd0>
    96004da4:	d50343ff 	msr	daifclr, #0x3
			return err;
    96004da8:	17fffff1 	b	96004d6c <thread_join+0x94>
	ASSERT(t->magic == THREAD_MAGIC);
    96004dac:	b9400261 	ldr	w1, [x19]
    96004db0:	528e4c80 	mov	w0, #0x7264                	// #29284
    96004db4:	72ae8d00 	movk	w0, #0x7468, lsl #16
    96004db8:	6b00003f 	cmp	w1, w0
    96004dbc:	540000a0 	b.eq	96004dd0 <thread_join+0xf8>  // b.none
    96004dc0:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004dc4:	52802243 	mov	w3, #0x112                 	// #274
    96004dc8:	91108c84 	add	x4, x4, #0x423
    96004dcc:	17ffffd3 	b	96004d18 <thread_join+0x40>
	ASSERT(t->state == THREAD_DEATH);
    96004dd0:	b9402e60 	ldr	w0, [x19, #44]
    96004dd4:	7100141f 	cmp	w0, #0x5
    96004dd8:	540000a0 	b.eq	96004dec <thread_join+0x114>  // b.none
    96004ddc:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004de0:	52802263 	mov	w3, #0x113                 	// #275
    96004de4:	91133884 	add	x4, x4, #0x4ce
    96004de8:	17ffffcc 	b	96004d18 <thread_join+0x40>
	ASSERT(t->blocking_wait_queue == NULL);
    96004dec:	f9402260 	ldr	x0, [x19, #64]
    96004df0:	b40000a0 	cbz	x0, 96004e04 <thread_join+0x12c>
    96004df4:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004df8:	52802283 	mov	w3, #0x114                 	// #276
    96004dfc:	91139c84 	add	x4, x4, #0x4e7
    96004e00:	17ffffc6 	b	96004d18 <thread_join+0x40>
	if ((item->prev == 0) && (item->next == 0)) {
    96004e04:	f9400e60 	ldr	x0, [x19, #24]
    96004e08:	b50002e0 	cbnz	x0, 96004e64 <thread_join+0x18c>
    96004e0c:	f9401260 	ldr	x0, [x19, #32]
    96004e10:	b50002a0 	cbnz	x0, 96004e64 <thread_join+0x18c>
	if (retcode)
    96004e14:	b5000316 	cbnz	x22, 96004e74 <thread_join+0x19c>
	list_delete(&t->thread_list_node);
    96004e18:	91002260 	add	x0, x19, #0x8
    96004e1c:	97fffc90 	bl	9600405c <list_delete>
	t->magic = 0;
    96004e20:	b900027f 	str	wzr, [x19]
	critical_section_count--;
    96004e24:	b94c9a80 	ldr	w0, [x20, #3224]
    96004e28:	51000400 	sub	w0, w0, #0x1
    96004e2c:	b90c9a80 	str	w0, [x20, #3224]
	if (critical_section_count == 0)
    96004e30:	35000040 	cbnz	w0, 96004e38 <thread_join+0x160>
    96004e34:	d50343ff 	msr	daifclr, #0x3
	if (t->flags & THREAD_FLAG_FREE_STACK && t->stack)
    96004e38:	b9403a60 	ldr	w0, [x19, #56]
    96004e3c:	36080080 	tbz	w0, #1, 96004e4c <thread_join+0x174>
    96004e40:	f9402e60 	ldr	x0, [x19, #88]
    96004e44:	b4000040 	cbz	x0, 96004e4c <thread_join+0x174>
		free(t->stack);
    96004e48:	94008e5d 	bl	960287bc <free>
	if (t->flags & THREAD_FLAG_FREE_STRUCT)
    96004e4c:	b9403a60 	ldr	w0, [x19, #56]
    96004e50:	36100060 	tbz	w0, #2, 96004e5c <thread_join+0x184>
		free(t);
    96004e54:	aa1303e0 	mov	x0, x19
    96004e58:	94008e59 	bl	960287bc <free>
	return NO_ERROR;
    96004e5c:	52800000 	mov	w0, #0x0                   	// #0
    96004e60:	17ffffc3 	b	96004d6c <thread_join+0x94>
	ASSERT(!list_in_list(&t->queue_node));
    96004e64:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004e68:	528022a3 	mov	w3, #0x115                 	// #277
    96004e6c:	91115484 	add	x4, x4, #0x455
    96004e70:	17ffffaa 	b	96004d18 <thread_join+0x40>
		*retcode = t->retcode;
    96004e74:	b9407a60 	ldr	w0, [x19, #120]
    96004e78:	b90002c0 	str	w0, [x22]
    96004e7c:	17ffffe7 	b	96004e18 <thread_join+0x140>

0000000096004e80 <wait_queue_wake_all>:
 * from wait_queue_block().
 *
 * @return  The number of threads woken (zero or one)
 */
int wait_queue_wake_all(wait_queue_t *wait, bool reschedule, status_t wait_queue_error)
{
    96004e80:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96004e84:	910003fd 	mov	x29, sp
    96004e88:	a90153f3 	stp	x19, x20, [sp, #16]
    96004e8c:	aa0003f3 	mov	x19, x0
    96004e90:	a9025bf5 	stp	x21, x22, [sp, #32]
    96004e94:	12001c36 	and	w22, w1, #0xff
    96004e98:	a90363f7 	stp	x23, x24, [sp, #48]
    96004e9c:	aa1e03f5 	mov	x21, x30
	thread_t *t;
	int ret = 0;

#if THREAD_CHECKS
	ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    96004ea0:	b9400001 	ldr	w1, [x0]
    96004ea4:	528d2e80 	mov	w0, #0x6974                	// #26996
{
    96004ea8:	f90023f9 	str	x25, [sp, #64]
	ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    96004eac:	72aeec20 	movk	w0, #0x7761, lsl #16
    96004eb0:	6b00003f 	cmp	w1, w0
    96004eb4:	54000140 	b.eq	96004edc <wait_queue_wake_all+0x5c>  // b.none
    96004eb8:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004ebc:	911a2884 	add	x4, x4, #0x68a
    96004ec0:	52807203 	mov	w3, #0x390                 	// #912
	ASSERT(in_critical_section());
    96004ec4:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96004ec8:	d00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96004ecc:	91147042 	add	x2, x2, #0x51c
    96004ed0:	91325421 	add	x1, x1, #0xc95
    96004ed4:	aa1503e0 	mov	x0, x21
    96004ed8:	94008b1b 	bl	96027b44 <_panic>
	return critical_section_count > 0;
    96004edc:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96004ee0:	b94c9800 	ldr	w0, [x0, #3224]
    96004ee4:	7100001f 	cmp	w0, #0x0
    96004ee8:	540000ac 	b.gt	96004efc <wait_queue_wake_all+0x7c>
    96004eec:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004ef0:	52807223 	mov	w3, #0x391                 	// #913
    96004ef4:	91141884 	add	x4, x4, #0x506
    96004ef8:	17fffff3 	b	96004ec4 <wait_queue_wake_all+0x44>
    96004efc:	2a0203f7 	mov	w23, w2
#endif

	if (reschedule && wait->count > 0) {
    96004f00:	34000136 	cbz	w22, 96004f24 <wait_queue_wake_all+0xa4>
    96004f04:	b9401a60 	ldr	w0, [x19, #24]
    96004f08:	7100001f 	cmp	w0, #0x0
    96004f0c:	540000cd 	b.le	96004f24 <wait_queue_wake_all+0xa4>
		/* if we're instructed to reschedule, stick the current thread on the head
		 * of the run queue first, so that the newly awakened threads get a chance to run
		 * before the current one, but the current one doesn't get unnecessarilly punished.
		 */
		current_thread->state = THREAD_READY;
    96004f10:	d0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96004f14:	52800021 	mov	w1, #0x1                   	// #1
    96004f18:	f9463000 	ldr	x0, [x0, #3168]
    96004f1c:	b9002c01 	str	w1, [x0, #44]
		insert_in_run_queue_head(current_thread);
    96004f20:	97fffd0f 	bl	9600435c <insert_in_run_queue_head>
	}

	/* pop all the threads off the wait queue into the run queue */
	while ((t = list_remove_head_type(&wait->list, thread_t, queue_node))) {
    96004f24:	91002278 	add	x24, x19, #0x8
{
    96004f28:	52800014 	mov	w20, #0x0                   	// #0
		wait->count--;
#if THREAD_CHECKS
		ASSERT(t->state == THREAD_BLOCKED);
#endif
		t->state = THREAD_READY;
    96004f2c:	52800039 	mov	w25, #0x1                   	// #1
	if (list->next != list) {
    96004f30:	f9400a63 	ldr	x3, [x19, #16]
    96004f34:	eb18007f 	cmp	x3, x24
    96004f38:	540001a1 	b.ne	96004f6c <wait_queue_wake_all+0xec>  // b.any
		insert_in_run_queue_head(t);
		ret++;
	}

#if THREAD_CHECKS
	ASSERT(wait->count == 0);
    96004f3c:	b9401a60 	ldr	w0, [x19, #24]
    96004f40:	34000340 	cbz	w0, 96004fa8 <wait_queue_wake_all+0x128>
    96004f44:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004f48:	52807583 	mov	w3, #0x3ac                 	// #940
    96004f4c:	911aa884 	add	x4, x4, #0x6aa
    96004f50:	17ffffdd 	b	96004ec4 <wait_queue_wake_all+0x44>
		t->state = THREAD_READY;
    96004f54:	b9002c19 	str	w25, [x0, #44]
		ret++;
    96004f58:	11000694 	add	w20, w20, #0x1
		t->blocking_wait_queue = NULL;
    96004f5c:	f900201f 	str	xzr, [x0, #64]
		t->wait_queue_block_ret = wait_queue_error;
    96004f60:	b9004817 	str	w23, [x0, #72]
		insert_in_run_queue_head(t);
    96004f64:	97fffcfe 	bl	9600435c <insert_in_run_queue_head>
    96004f68:	17fffff2 	b	96004f30 <wait_queue_wake_all+0xb0>
		list_delete(item);
    96004f6c:	aa0303e0 	mov	x0, x3
    96004f70:	97fffc3b 	bl	9600405c <list_delete>
	while ((t = list_remove_head_type(&wait->list, thread_t, queue_node))) {
    96004f74:	b4fffe43 	cbz	x3, 96004f3c <wait_queue_wake_all+0xbc>
    96004f78:	f1006060 	subs	x0, x3, #0x18
    96004f7c:	b9401a61 	ldr	w1, [x19, #24]
    96004f80:	54fffde0 	b.eq	96004f3c <wait_queue_wake_all+0xbc>  // b.none
		wait->count--;
    96004f84:	51000421 	sub	w1, w1, #0x1
    96004f88:	b9001a61 	str	w1, [x19, #24]
		ASSERT(t->state == THREAD_BLOCKED);
    96004f8c:	b9402c01 	ldr	w1, [x0, #44]
    96004f90:	71000c3f 	cmp	w1, #0x3
    96004f94:	54fffe00 	b.eq	96004f54 <wait_queue_wake_all+0xd4>  // b.none
    96004f98:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004f9c:	52807423 	mov	w3, #0x3a1                 	// #929
    96004fa0:	911aec84 	add	x4, x4, #0x6bb
    96004fa4:	17ffffc8 	b	96004ec4 <wait_queue_wake_all+0x44>
#endif

	if (reschedule && ret > 0)
    96004fa8:	7100029f 	cmp	w20, #0x0
    96004fac:	7a40cac4 	ccmp	w22, #0x0, #0x4, gt
    96004fb0:	54000040 	b.eq	96004fb8 <wait_queue_wake_all+0x138>  // b.none
		thread_resched();
    96004fb4:	97fffc30 	bl	96004074 <thread_resched>

	return ret;
}
    96004fb8:	2a1403e0 	mov	w0, w20
    96004fbc:	f94023f9 	ldr	x25, [sp, #64]
    96004fc0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96004fc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96004fc8:	a94363f7 	ldp	x23, x24, [sp, #48]
    96004fcc:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96004fd0:	d65f03c0 	ret

0000000096004fd4 <thread_detach>:
{
    96004fd4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96004fd8:	910003fd 	mov	x29, sp
    96004fdc:	a90153f3 	stp	x19, x20, [sp, #16]
    96004fe0:	aa0003f4 	mov	x20, x0
	ASSERT(t->magic == THREAD_MAGIC);
    96004fe4:	b9400001 	ldr	w1, [x0]
    96004fe8:	528e4c80 	mov	w0, #0x7264                	// #29284
    96004fec:	72ae8d00 	movk	w0, #0x7468, lsl #16
    96004ff0:	6b00003f 	cmp	w1, w0
    96004ff4:	54000140 	b.eq	9600501c <thread_detach+0x48>  // b.none
    96004ff8:	f00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96004ffc:	f00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96005000:	b00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96005004:	91108c84 	add	x4, x4, #0x423
    96005008:	52802623 	mov	w3, #0x131                 	// #305
    9600500c:	91147042 	add	x2, x2, #0x51c
    96005010:	91325421 	add	x1, x1, #0xc95
    96005014:	aa1e03e0 	mov	x0, x30
    96005018:	94008acb 	bl	96027b44 <_panic>
	if (critical_section_count == 0)
    9600501c:	b0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96005020:	b94c9a60 	ldr	w0, [x19, #3224]
    96005024:	35000040 	cbnz	w0, 9600502c <thread_detach+0x58>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96005028:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    9600502c:	b94c9a60 	ldr	w0, [x19, #3224]
    96005030:	11000400 	add	w0, w0, #0x1
    96005034:	b90c9a60 	str	w0, [x19, #3224]
	wait_queue_wake_all(&t->retcode_wait_queue, false, ERR_THREAD_DETACHED);
    96005038:	12800322 	mov	w2, #0xffffffe6            	// #-26
    9600503c:	52800001 	mov	w1, #0x0                   	// #0
    96005040:	91020280 	add	x0, x20, #0x80
    96005044:	97ffff8f 	bl	96004e80 <wait_queue_wake_all>
	if (t->state == THREAD_DEATH) {
    96005048:	b9402e80 	ldr	w0, [x20, #44]
    9600504c:	7100141f 	cmp	w0, #0x5
    96005050:	b9403a80 	ldr	w0, [x20, #56]
    96005054:	540001c1 	b.ne	9600508c <thread_detach+0xb8>  // b.any
		t->flags &= ~THREAD_FLAG_DETACHED; /* makes sure thread_join continues */
    96005058:	121f7800 	and	w0, w0, #0xfffffffe
    9600505c:	b9003a80 	str	w0, [x20, #56]
	critical_section_count--;
    96005060:	b94c9a60 	ldr	w0, [x19, #3224]
    96005064:	51000400 	sub	w0, w0, #0x1
    96005068:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    9600506c:	35000040 	cbnz	w0, 96005074 <thread_detach+0xa0>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96005070:	d50343ff 	msr	daifclr, #0x3
		return thread_join(t, NULL, 0);
    96005074:	aa1403e0 	mov	x0, x20
    96005078:	d2800002 	mov	x2, #0x0                   	// #0
}
    9600507c:	a94153f3 	ldp	x19, x20, [sp, #16]
		return thread_join(t, NULL, 0);
    96005080:	d2800001 	mov	x1, #0x0                   	// #0
}
    96005084:	a8c27bfd 	ldp	x29, x30, [sp], #32
		return thread_join(t, NULL, 0);
    96005088:	17ffff14 	b	96004cd8 <thread_join>
		t->flags |= THREAD_FLAG_DETACHED;
    9600508c:	32000000 	orr	w0, w0, #0x1
    96005090:	b9003a80 	str	w0, [x20, #56]
	critical_section_count--;
    96005094:	b94c9a60 	ldr	w0, [x19, #3224]
    96005098:	51000400 	sub	w0, w0, #0x1
    9600509c:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    960050a0:	35000040 	cbnz	w0, 960050a8 <thread_detach+0xd4>
    960050a4:	d50343ff 	msr	daifclr, #0x3
}
    960050a8:	52800000 	mov	w0, #0x0                   	// #0
    960050ac:	a94153f3 	ldp	x19, x20, [sp, #16]
    960050b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960050b4:	d65f03c0 	ret

00000000960050b8 <thread_exit>:
{
    960050b8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960050bc:	528e4c82 	mov	w2, #0x7264                	// #29284
    960050c0:	72ae8d02 	movk	w2, #0x7468, lsl #16
{
    960050c4:	910003fd 	mov	x29, sp
    960050c8:	a90153f3 	stp	x19, x20, [sp, #16]
	ASSERT(current_thread->magic == THREAD_MAGIC);
    960050cc:	b0000393 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    960050d0:	aa1e03f4 	mov	x20, x30
    960050d4:	f9463261 	ldr	x1, [x19, #3168]
    960050d8:	b9400023 	ldr	w3, [x1]
    960050dc:	6b02007f 	cmp	w3, w2
    960050e0:	54000140 	b.eq	96005108 <thread_exit+0x50>  // b.none
    960050e4:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960050e8:	9118f084 	add	x4, x4, #0x63c
    960050ec:	52802a03 	mov	w3, #0x150                 	// #336
	ASSERT(current_thread->state == THREAD_RUNNING);
    960050f0:	d00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960050f4:	b00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960050f8:	91147042 	add	x2, x2, #0x51c
    960050fc:	91325421 	add	x1, x1, #0xc95
    96005100:	aa1403e0 	mov	x0, x20
    96005104:	94008a90 	bl	96027b44 <_panic>
    96005108:	b9402c21 	ldr	w1, [x1, #44]
    9600510c:	7100083f 	cmp	w1, #0x2
    96005110:	540000a0 	b.eq	96005124 <thread_exit+0x6c>  // b.none
    96005114:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96005118:	52802a23 	mov	w3, #0x151                 	// #337
    9600511c:	91198884 	add	x4, x4, #0x662
    96005120:	17fffff4 	b	960050f0 <thread_exit+0x38>
	if (critical_section_count == 0)
    96005124:	b0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96005128:	b94c9822 	ldr	w2, [x1, #3224]
    9600512c:	35000042 	cbnz	w2, 96005134 <thread_exit+0x7c>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96005130:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96005134:	b94c9822 	ldr	w2, [x1, #3224]
    96005138:	11000442 	add	w2, w2, #0x1
    9600513c:	b90c9822 	str	w2, [x1, #3224]
	current_thread->state = THREAD_DEATH;
    96005140:	f9463263 	ldr	x3, [x19, #3168]
    96005144:	528000a1 	mov	w1, #0x5                   	// #5
	current_thread->retcode = retcode;
    96005148:	b9007860 	str	w0, [x3, #120]
	if (current_thread->flags & THREAD_FLAG_DETACHED) {
    9600514c:	b9403860 	ldr	w0, [x3, #56]
	current_thread->state = THREAD_DEATH;
    96005150:	b9002c61 	str	w1, [x3, #44]
	if (current_thread->flags & THREAD_FLAG_DETACHED) {
    96005154:	36000260 	tbz	w0, #0, 960051a0 <thread_exit+0xe8>
		list_delete(&current_thread->thread_list_node);
    96005158:	91002060 	add	x0, x3, #0x8
    9600515c:	97fffbc0 	bl	9600405c <list_delete>
		current_thread->magic = 0;
    96005160:	f9463260 	ldr	x0, [x19, #3168]
		if (current_thread->flags & THREAD_FLAG_FREE_STACK && current_thread->stack)
    96005164:	b9403801 	ldr	w1, [x0, #56]
		current_thread->magic = 0;
    96005168:	b900001f 	str	wzr, [x0]
		if (current_thread->flags & THREAD_FLAG_FREE_STACK && current_thread->stack)
    9600516c:	36080081 	tbz	w1, #1, 9600517c <thread_exit+0xc4>
    96005170:	f9402c00 	ldr	x0, [x0, #88]
    96005174:	b4000040 	cbz	x0, 9600517c <thread_exit+0xc4>
			free(current_thread->stack);
    96005178:	94008d91 	bl	960287bc <free>
		if (current_thread->flags & THREAD_FLAG_FREE_STRUCT)
    9600517c:	f9463260 	ldr	x0, [x19, #3168]
    96005180:	b9403801 	ldr	w1, [x0, #56]
    96005184:	36100041 	tbz	w1, #2, 9600518c <thread_exit+0xd4>
			free(current_thread);
    96005188:	94008d8d 	bl	960287bc <free>
	thread_resched();
    9600518c:	97fffbba 	bl	96004074 <thread_resched>
	panic("somehow fell through thread_exit()\n");
    96005190:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96005194:	aa1403e0 	mov	x0, x20
    96005198:	91128021 	add	x1, x1, #0x4a0
    9600519c:	94008a6a 	bl	96027b44 <_panic>
		wait_queue_wake_all(&current_thread->retcode_wait_queue, false, 0);
    960051a0:	52800002 	mov	w2, #0x0                   	// #0
    960051a4:	52800001 	mov	w1, #0x0                   	// #0
    960051a8:	91020060 	add	x0, x3, #0x80
    960051ac:	97ffff35 	bl	96004e80 <wait_queue_wake_all>
    960051b0:	17fffff7 	b	9600518c <thread_exit+0xd4>

00000000960051b4 <thread_unblock_from_wait_queue>:
 *   from wait_queue_block().
 *
 * @return ERR_NOT_BLOCKED if thread was not in any wait queue.
 */
status_t thread_unblock_from_wait_queue(thread_t *t, status_t wait_queue_error)
{
    960051b4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960051b8:	aa0003e3 	mov	x3, x0
    960051bc:	910003fd 	mov	x29, sp
	return critical_section_count > 0;
    960051c0:	b0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
#if THREAD_CHECKS
	ASSERT(in_critical_section());
    960051c4:	b94c9800 	ldr	w0, [x0, #3224]
    960051c8:	7100001f 	cmp	w0, #0x0
    960051cc:	5400014c 	b.gt	960051f4 <thread_unblock_from_wait_queue+0x40>
    960051d0:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960051d4:	91141884 	add	x4, x4, #0x506
    960051d8:	52807a63 	mov	w3, #0x3d3                 	// #979
	ASSERT(t->magic == THREAD_MAGIC);
    960051dc:	d00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960051e0:	b00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960051e4:	91147042 	add	x2, x2, #0x51c
    960051e8:	91325421 	add	x1, x1, #0xc95
    960051ec:	aa1e03e0 	mov	x0, x30
    960051f0:	94008a55 	bl	96027b44 <_panic>
    960051f4:	2a0103e4 	mov	w4, w1
    960051f8:	b9400061 	ldr	w1, [x3]
    960051fc:	528e4c80 	mov	w0, #0x7264                	// #29284
    96005200:	72ae8d00 	movk	w0, #0x7468, lsl #16
    96005204:	6b00003f 	cmp	w1, w0
    96005208:	540000a0 	b.eq	9600521c <thread_unblock_from_wait_queue+0x68>  // b.none
    9600520c:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96005210:	52807a83 	mov	w3, #0x3d4                 	// #980
    96005214:	91108c84 	add	x4, x4, #0x423
    96005218:	17fffff1 	b	960051dc <thread_unblock_from_wait_queue+0x28>
#endif

	if (t->state != THREAD_BLOCKED)
    9600521c:	b9402c60 	ldr	w0, [x3, #44]
    96005220:	71000c1f 	cmp	w0, #0x3
    96005224:	540004e1 	b.ne	960052c0 <thread_unblock_from_wait_queue+0x10c>  // b.any
		return ERR_NOT_BLOCKED;

#if THREAD_CHECKS
	ASSERT(t->blocking_wait_queue != NULL);
    96005228:	f9402060 	ldr	x0, [x3, #64]
    9600522c:	b50000a0 	cbnz	x0, 96005240 <thread_unblock_from_wait_queue+0x8c>
    96005230:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96005234:	52807b63 	mov	w3, #0x3db                 	// #987
    96005238:	9117ac84 	add	x4, x4, #0x5eb
    9600523c:	17ffffe8 	b	960051dc <thread_unblock_from_wait_queue+0x28>
	ASSERT(t->blocking_wait_queue->magic == WAIT_QUEUE_MAGIC);
    96005240:	b9400001 	ldr	w1, [x0]
    96005244:	528d2e80 	mov	w0, #0x6974                	// #26996
    96005248:	72aeec20 	movk	w0, #0x7761, lsl #16
    9600524c:	6b00003f 	cmp	w1, w0
    96005250:	540000a0 	b.eq	96005264 <thread_unblock_from_wait_queue+0xb0>  // b.none
    96005254:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96005258:	52807b83 	mov	w3, #0x3dc                 	// #988
    9600525c:	91182884 	add	x4, x4, #0x60a
    96005260:	17ffffdf 	b	960051dc <thread_unblock_from_wait_queue+0x28>
	if ((item->prev == 0) && (item->next == 0)) {
    96005264:	f9400c61 	ldr	x1, [x3, #24]
	ASSERT(list_in_list(&t->queue_node));
    96005268:	91006060 	add	x0, x3, #0x18
    9600526c:	b50000e1 	cbnz	x1, 96005288 <thread_unblock_from_wait_queue+0xd4>
    96005270:	f9401061 	ldr	x1, [x3, #32]
    96005274:	b50000a1 	cbnz	x1, 96005288 <thread_unblock_from_wait_queue+0xd4>
    96005278:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    9600527c:	52807ba3 	mov	w3, #0x3dd                 	// #989
    96005280:	91115884 	add	x4, x4, #0x456
    96005284:	17ffffd6 	b	960051dc <thread_unblock_from_wait_queue+0x28>
#endif

	list_delete(&t->queue_node);
    96005288:	97fffb75 	bl	9600405c <list_delete>
	t->blocking_wait_queue->count--;
    9600528c:	f9402062 	ldr	x2, [x3, #64]
    96005290:	b9401840 	ldr	w0, [x2, #24]
    96005294:	51000400 	sub	w0, w0, #0x1
    96005298:	b9001840 	str	w0, [x2, #24]
	t->blocking_wait_queue = NULL;
    9600529c:	f900207f 	str	xzr, [x3, #64]
	t->state = THREAD_READY;
    960052a0:	52800020 	mov	w0, #0x1                   	// #1
    960052a4:	b9002c60 	str	w0, [x3, #44]
	t->wait_queue_block_ret = wait_queue_error;
	insert_in_run_queue_head(t);
    960052a8:	aa0303e0 	mov	x0, x3
	t->wait_queue_block_ret = wait_queue_error;
    960052ac:	b9004864 	str	w4, [x3, #72]
	insert_in_run_queue_head(t);
    960052b0:	97fffc2b 	bl	9600435c <insert_in_run_queue_head>

	return NO_ERROR;
    960052b4:	52800000 	mov	w0, #0x0                   	// #0
}
    960052b8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960052bc:	d65f03c0 	ret
		return ERR_NOT_BLOCKED;
    960052c0:	12800160 	mov	w0, #0xfffffff4            	// #-12
    960052c4:	17fffffd 	b	960052b8 <thread_unblock_from_wait_queue+0x104>

00000000960052c8 <wait_queue_timeout_handler>:
{
    960052c8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	ASSERT(thread->magic == THREAD_MAGIC);
    960052cc:	528e4c81 	mov	w1, #0x7264                	// #29284
    960052d0:	72ae8d01 	movk	w1, #0x7468, lsl #16
{
    960052d4:	910003fd 	mov	x29, sp
	ASSERT(thread->magic == THREAD_MAGIC);
    960052d8:	b9400043 	ldr	w3, [x2]
    960052dc:	6b01007f 	cmp	w3, w1
    960052e0:	54000140 	b.eq	96005308 <wait_queue_timeout_handler+0x40>  // b.none
    960052e4:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960052e8:	d00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    960052ec:	b00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960052f0:	aa1e03e0 	mov	x0, x30
    960052f4:	91191084 	add	x4, x4, #0x644
    960052f8:	52806143 	mov	w3, #0x30a                 	// #778
    960052fc:	91147042 	add	x2, x2, #0x51c
    96005300:	91325421 	add	x1, x1, #0xc95
    96005304:	94008a10 	bl	96027b44 <_panic>
	if (thread_unblock_from_wait_queue(thread, ERR_TIMED_OUT) >= NO_ERROR)
    96005308:	12800181 	mov	w1, #0xfffffff3            	// #-13
    9600530c:	aa0203e0 	mov	x0, x2
    96005310:	97ffffa9 	bl	960051b4 <thread_unblock_from_wait_queue>
    96005314:	2a2003e0 	mvn	w0, w0
}
    96005318:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600531c:	531f7c00 	lsr	w0, w0, #31
    96005320:	d65f03c0 	ret

0000000096005324 <insert_timer_in_queue>:
{
	timer_t *entry;

	LTRACEF("timer %p, scheduled %lu, periodic %lu\n", timer, timer->scheduled_time, timer->periodic_time);

	list_for_every_entry(&timer_queue, entry, timer_t, node) {
    96005324:	b0000342 	adrp	x2, 9606e000 <__bss_start>
    96005328:	910ee042 	add	x2, x2, #0x3b8
    9600532c:	f9400441 	ldr	x1, [x2, #8]
    96005330:	d1002021 	sub	x1, x1, #0x8
    96005334:	91002024 	add	x4, x1, #0x8
    96005338:	eb02009f 	cmp	x4, x2
    9600533c:	540000e1 	b.ne	96005358 <insert_timer_in_queue+0x34>  // b.any
	item->prev = list->prev;
    96005340:	f9400043 	ldr	x3, [x2]
			return;
		}
	}

	/* walked off the end of the list */
	list_add_tail(&timer_queue, &timer->node);
    96005344:	91002001 	add	x1, x0, #0x8
	item->next = list;
    96005348:	a9008803 	stp	x3, x2, [x0, #8]
	list->prev = item;
    9600534c:	f9000041 	str	x1, [x2]
	list->prev->next = item;
    96005350:	f9000461 	str	x1, [x3, #8]
    96005354:	1400000c 	b	96005384 <insert_timer_in_queue+0x60>
		if (TIME_GT(entry->scheduled_time, timer->scheduled_time)) {
    96005358:	f9400c05 	ldr	x5, [x0, #24]
    9600535c:	f9400c23 	ldr	x3, [x1, #24]
    96005360:	cb050063 	sub	x3, x3, x5
    96005364:	f100007f 	cmp	x3, #0x0
    96005368:	5400010d 	b.le	96005388 <insert_timer_in_queue+0x64>
	item->prev = list->prev;
    9600536c:	f9400423 	ldr	x3, [x1, #8]
			list_add_before(&entry->node, &timer->node);
    96005370:	91002002 	add	x2, x0, #0x8
	item->next = list;
    96005374:	a9009003 	stp	x3, x4, [x0, #8]
	list->prev->next = item;
    96005378:	f9400420 	ldr	x0, [x1, #8]
    9600537c:	f9000402 	str	x2, [x0, #8]
	list->prev = item;
    96005380:	f9000422 	str	x2, [x1, #8]
}
    96005384:	d65f03c0 	ret
	list_for_every_entry(&timer_queue, entry, timer_t, node) {
    96005388:	f9400821 	ldr	x1, [x1, #16]
    9600538c:	17ffffe9 	b	96005330 <insert_timer_in_queue+0xc>

0000000096005390 <timer_tick>:
	exit_critical_section();
}

/* called at interrupt time to process any pending timers */
static enum handler_return timer_tick(void *arg, lk_time_t now)
{
    96005390:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	timer_t *timer;
	enum handler_return ret = INT_NO_RESCHEDULE;

	THREAD_STATS_INC(timer_ints);
    96005394:	b0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96005398:	9131a000 	add	x0, x0, #0xc68
{
    9600539c:	910003fd 	mov	x29, sp
    960053a0:	a9046bf9 	stp	x25, x26, [sp, #64]
    960053a4:	aa0103fa 	mov	x26, x1
	THREAD_STATS_INC(timer_ints);
    960053a8:	b9402401 	ldr	w1, [x0, #36]
		bool periodic = timer->periodic_time > 0;

		LTRACEF("timer %p firing callback %p, arg %p\n", timer, timer->callback, timer->arg);
		KEVLOG_TIMER_CALL(timer->callback, timer->arg);
		if (timer->callback(timer, now, timer->arg) == INT_RESCHEDULE)
			ret = INT_RESCHEDULE;
    960053ac:	52800039 	mov	w25, #0x1                   	// #1
{
    960053b0:	a90153f3 	stp	x19, x20, [sp, #16]
		THREAD_STATS_INC(timers);
    960053b4:	aa0003f4 	mov	x20, x0
{
    960053b8:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (list->next != list) {
    960053bc:	b0000356 	adrp	x22, 9606e000 <__bss_start>
    960053c0:	a90363f7 	stp	x23, x24, [sp, #48]
    960053c4:	910ee2d6 	add	x22, x22, #0x3b8
		DEBUG_ASSERT(timer && timer->magic == TIMER_MAGIC);
    960053c8:	528dae58 	mov	w24, #0x6d72                	// #28018
{
    960053cc:	f9002bfb 	str	x27, [sp, #80]
    960053d0:	aa1e03f7 	mov	x23, x30
	THREAD_STATS_INC(timer_ints);
    960053d4:	11000421 	add	w1, w1, #0x1
	enum handler_return ret = INT_NO_RESCHEDULE;
    960053d8:	52800015 	mov	w21, #0x0                   	// #0
		DEBUG_ASSERT(timer && timer->magic == TIMER_MAGIC);
    960053dc:	72ae8d38 	movk	w24, #0x7469, lsl #16
	THREAD_STATS_INC(timer_ints);
    960053e0:	b9002401 	str	w1, [x0, #36]
    960053e4:	f94006c0 	ldr	x0, [x22, #8]
    960053e8:	eb16001f 	cmp	x0, x22
    960053ec:	540005e0 	b.eq	960054a8 <timer_tick+0x118>  // b.none
		timer = list_peek_head_type(&timer_queue, timer_t, node);
    960053f0:	b40005c0 	cbz	x0, 960054a8 <timer_tick+0x118>
		if (likely(timer == 0))
    960053f4:	f100201f 	cmp	x0, #0x8
    960053f8:	54000580 	b.eq	960054a8 <timer_tick+0x118>  // b.none
		timer = list_peek_head_type(&timer_queue, timer_t, node);
    960053fc:	d1002013 	sub	x19, x0, #0x8
		if (likely(TIME_LT(now, timer->scheduled_time)))
    96005400:	f9400e61 	ldr	x1, [x19, #24]
    96005404:	cb010341 	sub	x1, x26, x1
    96005408:	b7f80501 	tbnz	x1, #63, 960054a8 <timer_tick+0x118>
		DEBUG_ASSERT(timer && timer->magic == TIMER_MAGIC);
    9600540c:	b85f8000 	ldur	w0, [x0, #-8]
    96005410:	6b18001f 	cmp	w0, w24
    96005414:	54000140 	b.eq	9600543c <timer_tick+0xac>  // b.none
    96005418:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    9600541c:	911bc084 	add	x4, x4, #0x6f0
    96005420:	52801be3 	mov	w3, #0xdf                  	// #223
	/* in case of dynamic timer, the scheduler will set up a periodic timer */
	if (thread_timer_tick() == INT_RESCHEDULE)
		ret = INT_RESCHEDULE;
#endif

	DEBUG_ASSERT(in_critical_section());
    96005424:	d00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96005428:	b00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    9600542c:	911c5442 	add	x2, x2, #0x715
    96005430:	91323c21 	add	x1, x1, #0xc8f
    96005434:	aa1703e0 	mov	x0, x23
    96005438:	940089c3 	bl	96027b44 <_panic>
	item->next->prev = item->prev;
    9600543c:	a9408261 	ldp	x1, x0, [x19, #8]
		if (timer->callback(timer, now, timer->arg) == INT_RESCHEDULE)
    96005440:	a9420e7b 	ldp	x27, x3, [x19, #32]
    96005444:	f9401a62 	ldr	x2, [x19, #48]
    96005448:	f9000001 	str	x1, [x0]
	item->prev->next = item->next;
    9600544c:	f9400661 	ldr	x1, [x19, #8]
    96005450:	f9000420 	str	x0, [x1, #8]
    96005454:	aa1a03e1 	mov	x1, x26
		THREAD_STATS_INC(timers);
    96005458:	b9402a80 	ldr	w0, [x20, #40]
	item->prev = item->next = 0;
    9600545c:	a900fe7f 	stp	xzr, xzr, [x19, #8]
    96005460:	11000400 	add	w0, w0, #0x1
    96005464:	b9002a80 	str	w0, [x20, #40]
		if (timer->callback(timer, now, timer->arg) == INT_RESCHEDULE)
    96005468:	aa1303e0 	mov	x0, x19
    9600546c:	d63f0060 	blr	x3
			ret = INT_RESCHEDULE;
    96005470:	7100041f 	cmp	w0, #0x1
    96005474:	1a9912b5 	csel	w21, w21, w25, ne  // ne = any
		if (periodic && !list_in_list(&timer->node) && timer->periodic_time > 0) {
    96005478:	b4fffb7b 	cbz	x27, 960053e4 <timer_tick+0x54>
	if ((item->prev == 0) && (item->next == 0)) {
    9600547c:	f9400660 	ldr	x0, [x19, #8]
    96005480:	b5fffb20 	cbnz	x0, 960053e4 <timer_tick+0x54>
    96005484:	f9400a60 	ldr	x0, [x19, #16]
    96005488:	b5fffae0 	cbnz	x0, 960053e4 <timer_tick+0x54>
    9600548c:	f9401260 	ldr	x0, [x19, #32]
    96005490:	b4fffaa0 	cbz	x0, 960053e4 <timer_tick+0x54>
			timer->scheduled_time = now + timer->periodic_time;
    96005494:	8b1a0000 	add	x0, x0, x26
    96005498:	f9000e60 	str	x0, [x19, #24]
			insert_timer_in_queue(timer);
    9600549c:	aa1303e0 	mov	x0, x19
    960054a0:	97ffffa1 	bl	96005324 <insert_timer_in_queue>
    960054a4:	17ffffd0 	b	960053e4 <timer_tick+0x54>
	if (thread_timer_tick() == INT_RESCHEDULE)
    960054a8:	97fffd2b 	bl	96004954 <thread_timer_tick>
		ret = INT_RESCHEDULE;
    960054ac:	7100041f 	cmp	w0, #0x1
    960054b0:	1a9f16b5 	csinc	w21, w21, wzr, ne  // ne = any
    960054b4:	b0000380 	adrp	x0, 96076000 <free_dram_block+0x38e8>
	DEBUG_ASSERT(in_critical_section());
    960054b8:	b94c9800 	ldr	w0, [x0, #3224]
    960054bc:	7100001f 	cmp	w0, #0x0
    960054c0:	540000ac 	b.gt	960054d4 <timer_tick+0x144>
    960054c4:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    960054c8:	52802143 	mov	w3, #0x10a                 	// #266
    960054cc:	91141884 	add	x4, x4, #0x506
    960054d0:	17ffffd5 	b	96005424 <timer_tick+0x94>
	return ret;
}
    960054d4:	2a1503e0 	mov	w0, w21
    960054d8:	f9402bfb 	ldr	x27, [sp, #80]
    960054dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960054e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960054e4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960054e8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960054ec:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960054f0:	d65f03c0 	ret

00000000960054f4 <timer_set>:
{
    960054f4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960054f8:	910003fd 	mov	x29, sp
    960054fc:	a90153f3 	stp	x19, x20, [sp, #16]
    96005500:	aa0103f4 	mov	x20, x1
    96005504:	a9025bf5 	stp	x21, x22, [sp, #32]
    96005508:	aa0003f3 	mov	x19, x0
	DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    9600550c:	b9400001 	ldr	w1, [x0]
    96005510:	528dae40 	mov	w0, #0x6d72                	// #28018
{
    96005514:	f9001bf7 	str	x23, [sp, #48]
	DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    96005518:	72ae8d20 	movk	w0, #0x7469, lsl #16
    9600551c:	6b00003f 	cmp	w1, w0
    96005520:	54000140 	b.eq	96005548 <timer_set+0x54>  // b.none
    96005524:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96005528:	d00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    9600552c:	b00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96005530:	911be484 	add	x4, x4, #0x6f9
    96005534:	52800a83 	mov	w3, #0x54                  	// #84
    96005538:	911c5442 	add	x2, x2, #0x715
    9600553c:	91323c21 	add	x1, x1, #0xc8f
    96005540:	aa1e03e0 	mov	x0, x30
    96005544:	94008980 	bl	96027b44 <_panic>
    96005548:	f9400660 	ldr	x0, [x19, #8]
    9600554c:	b5000380 	cbnz	x0, 960055bc <timer_set+0xc8>
    96005550:	f9400a60 	ldr	x0, [x19, #16]
    96005554:	b5000340 	cbnz	x0, 960055bc <timer_set+0xc8>
    96005558:	aa0203f7 	mov	x23, x2
    9600555c:	aa0303f6 	mov	x22, x3
    96005560:	aa0403f5 	mov	x21, x4
	now = current_time();
    96005564:	940071e7 	bl	96021d00 <current_time>
	timer->arg = arg;
    96005568:	a902d676 	stp	x22, x21, [x19, #40]
	timer->scheduled_time = now + delay;
    9600556c:	8b140000 	add	x0, x0, x20
	timer->periodic_time = period;
    96005570:	a901de60 	stp	x0, x23, [x19, #24]
	if (critical_section_count == 0)
    96005574:	b0000386 	adrp	x6, 96076000 <free_dram_block+0x38e8>
    96005578:	b94c98c0 	ldr	w0, [x6, #3224]
    9600557c:	340002a0 	cbz	w0, 960055d0 <timer_set+0xdc>
	critical_section_count++;
    96005580:	b94c98c0 	ldr	w0, [x6, #3224]
    96005584:	11000400 	add	w0, w0, #0x1
    96005588:	b90c98c0 	str	w0, [x6, #3224]
	insert_timer_in_queue(timer);
    9600558c:	aa1303e0 	mov	x0, x19
    96005590:	97ffff65 	bl	96005324 <insert_timer_in_queue>
	critical_section_count--;
    96005594:	b94c98c0 	ldr	w0, [x6, #3224]
    96005598:	51000400 	sub	w0, w0, #0x1
    9600559c:	b90c98c0 	str	w0, [x6, #3224]
	if (critical_section_count == 0)
    960055a0:	35000040 	cbnz	w0, 960055a8 <timer_set+0xb4>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    960055a4:	d50343ff 	msr	daifclr, #0x3
}
    960055a8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960055ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960055b0:	f9401bf7 	ldr	x23, [sp, #48]
    960055b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960055b8:	d65f03c0 	ret
		panic("timer %p already in list\n", timer);
    960055bc:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    960055c0:	aa1303e2 	mov	x2, x19
    960055c4:	911b5821 	add	x1, x1, #0x6d6
    960055c8:	aa1e03e0 	mov	x0, x30
    960055cc:	9400895e 	bl	96027b44 <_panic>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    960055d0:	d50343df 	msr	daifset, #0x3
    CF;
    960055d4:	17ffffeb 	b	96005580 <timer_set+0x8c>

00000000960055d8 <timer_initialize>:
	*timer = (timer_t)TIMER_INITIAL_VALUE(*timer);
    960055d8:	528dae41 	mov	w1, #0x6d72                	// #28018
    960055dc:	a900fc1f 	stp	xzr, xzr, [x0, #8]
    960055e0:	72ae8d21 	movk	w1, #0x7469, lsl #16
    960055e4:	b9000001 	str	w1, [x0]
    960055e8:	a901fc1f 	stp	xzr, xzr, [x0, #24]
    960055ec:	a902fc1f 	stp	xzr, xzr, [x0, #40]
}
    960055f0:	d65f03c0 	ret

00000000960055f4 <timer_set_oneshot>:
		delay = 1;
    960055f4:	f100003f 	cmp	x1, #0x0
	timer_set(timer, delay, 0, callback, arg);
    960055f8:	aa0303e4 	mov	x4, x3
    960055fc:	9a9f1421 	csinc	x1, x1, xzr, ne  // ne = any
    96005600:	aa0203e3 	mov	x3, x2
    96005604:	d2800002 	mov	x2, #0x0                   	// #0
    96005608:	17ffffbb 	b	960054f4 <timer_set>

000000009600560c <timer_cancel>:
	DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    9600560c:	b9400002 	ldr	w2, [x0]
    96005610:	528dae41 	mov	w1, #0x6d72                	// #28018
    96005614:	72ae8d21 	movk	w1, #0x7469, lsl #16
    96005618:	6b01005f 	cmp	w2, w1
    9600561c:	54000180 	b.eq	9600564c <timer_cancel+0x40>  // b.none
{
    96005620:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    96005624:	d00001a4 	adrp	x4, 9603b000 <tt_level+0x328>
    96005628:	d00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    9600562c:	b00001a1 	adrp	x1, 9603a000 <__exidx_end+0x548>
{
    96005630:	910003fd 	mov	x29, sp
    96005634:	aa1e03e0 	mov	x0, x30
	DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    96005638:	911be484 	add	x4, x4, #0x6f9
    9600563c:	52801403 	mov	w3, #0xa0                  	// #160
    96005640:	911c5442 	add	x2, x2, #0x715
    96005644:	91323c21 	add	x1, x1, #0xc8f
    96005648:	9400893f 	bl	96027b44 <_panic>
	if (critical_section_count == 0)
    9600564c:	b0000381 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96005650:	b94c9822 	ldr	w2, [x1, #3224]
    96005654:	35000042 	cbnz	w2, 9600565c <timer_cancel+0x50>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96005658:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    9600565c:	b94c9822 	ldr	w2, [x1, #3224]
    96005660:	11000442 	add	w2, w2, #0x1
    96005664:	b90c9822 	str	w2, [x1, #3224]
	CF;
    96005668:	a9408803 	ldp	x3, x2, [x0, #8]
    9600566c:	b5000043 	cbnz	x3, 96005674 <timer_cancel+0x68>
    96005670:	b40000a2 	cbz	x2, 96005684 <timer_cancel+0x78>
	item->next->prev = item->prev;
    96005674:	f9000043 	str	x3, [x2]
	item->prev->next = item->next;
    96005678:	f9400403 	ldr	x3, [x0, #8]
    9600567c:	f9000462 	str	x2, [x3, #8]
	item->prev = item->next = 0;
    96005680:	a900fc1f 	stp	xzr, xzr, [x0, #8]
	timer->callback = NULL;
    96005684:	a9027c1f 	stp	xzr, xzr, [x0, #32]
	timer->arg = NULL;
    96005688:	f900181f 	str	xzr, [x0, #48]
	critical_section_count--;
    9600568c:	b94c9820 	ldr	w0, [x1, #3224]
    96005690:	51000400 	sub	w0, w0, #0x1
    96005694:	b90c9820 	str	w0, [x1, #3224]
	if (critical_section_count == 0)
    96005698:	35000040 	cbnz	w0, 960056a0 <timer_cancel+0x94>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    9600569c:	d50343ff 	msr	daifclr, #0x3
	CF;
    960056a0:	d65f03c0 	ret

00000000960056a4 <timer_init>:
	list->prev = list->next = list;
    960056a4:	b0000341 	adrp	x1, 9606e000 <__bss_start>
    960056a8:	910ee020 	add	x0, x1, #0x3b8
{
	list_initialize(&timer_queue);

#if !PLATFORM_HAS_DYNAMIC_TIMER
	/* register for a periodic timer tick */
	platform_set_periodic_timer(timer_tick, NULL, 10); /* 10ms */
    960056ac:	d2800142 	mov	x2, #0xa                   	// #10
    960056b0:	f901dc20 	str	x0, [x1, #952]
    960056b4:	d2800001 	mov	x1, #0x0                   	// #0
    960056b8:	f9000400 	str	x0, [x0, #8]
    960056bc:	90000000 	adrp	x0, 96005000 <thread_detach+0x2c>
    960056c0:	910e4000 	add	x0, x0, #0x390
    960056c4:	1400715c 	b	96021c34 <platform_set_periodic_timer>

00000000960056c8 <reset>:
	/* Should not arrive here */
	return TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
}

static tegrabl_error_t reset(void *param)
{
    960056c8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960056cc:	910003fd 	mov	x29, sp
	TEGRABL_UNUSED(param);
#if defined(CONFIG_ENABLE_DISPLAY)
	tegrabl_display_shutdown();
    960056d0:	94000256 	bl	96006028 <tegrabl_display_shutdown>
#endif
	tegrabl_psci_sys_reset();
    960056d4:	94006201 	bl	9601ded8 <tegrabl_psci_sys_reset>
	/* Should not arrive here */
	return TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
}
    960056d8:	528002e0 	mov	w0, #0x17                  	// #23
    960056dc:	72aa6a60 	movk	w0, #0x5353, lsl #16
    960056e0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960056e4:	d65f03c0 	ret

00000000960056e8 <reboot_forced_recovery>:
	/* Should not arrive here */
	return TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
}

static tegrabl_error_t reboot_forced_recovery(void *param)
{
    960056e8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	/* set recovery bit */
	tegrabl_set_pmc_scratch0_flag(TEGRABL_PMC_SCRATCH0_FLAG_FORCED_RECOVERY,
    960056ec:	52800021 	mov	w1, #0x1                   	// #1
    960056f0:	52800020 	mov	w0, #0x1                   	// #1
{
    960056f4:	910003fd 	mov	x29, sp
	tegrabl_set_pmc_scratch0_flag(TEGRABL_PMC_SCRATCH0_FLAG_FORCED_RECOVERY,
    960056f8:	94006f35 	bl	960213cc <tegrabl_set_pmc_scratch0_flag>
	tegrabl_display_shutdown();
    960056fc:	9400024b 	bl	96006028 <tegrabl_display_shutdown>
	tegrabl_psci_sys_reset();
    96005700:	940061f6 	bl	9601ded8 <tegrabl_psci_sys_reset>
								  true);
	reset(NULL);
	/* Should not arrive here */
	return TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
}
    96005704:	528002e0 	mov	w0, #0x17                  	// #23
    96005708:	72aa6a60 	movk	w0, #0x5353, lsl #16
    9600570c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96005710:	d65f03c0 	ret

0000000096005714 <reboot_fastboot>:
{
    96005714:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	tegrabl_set_pmc_scratch0_flag(TEGRABL_PMC_SCRATCH0_FLAG_FASTBOOT, true);
    96005718:	52800021 	mov	w1, #0x1                   	// #1
    9600571c:	528003c0 	mov	w0, #0x1e                  	// #30
{
    96005720:	910003fd 	mov	x29, sp
	tegrabl_set_pmc_scratch0_flag(TEGRABL_PMC_SCRATCH0_FLAG_FASTBOOT, true);
    96005724:	94006f2a 	bl	960213cc <tegrabl_set_pmc_scratch0_flag>
	tegrabl_display_shutdown();
    96005728:	94000240 	bl	96006028 <tegrabl_display_shutdown>
	tegrabl_psci_sys_reset();
    9600572c:	940061eb 	bl	9601ded8 <tegrabl_psci_sys_reset>
}
    96005730:	528002e0 	mov	w0, #0x17                  	// #23
    96005734:	72aa6a60 	movk	w0, #0x5353, lsl #16
    96005738:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600573c:	d65f03c0 	ret

0000000096005740 <power_off>:
{
    96005740:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96005744:	910003fd 	mov	x29, sp
	tegrabl_display_shutdown();
    96005748:	94000238 	bl	96006028 <tegrabl_display_shutdown>
	tegrabl_psci_sys_off();
    9600574c:	940061eb 	bl	9601def8 <tegrabl_psci_sys_off>
}
    96005750:	528002e0 	mov	w0, #0x17                  	// #23
    96005754:	72aa6a60 	movk	w0, #0x5353, lsl #16
    96005758:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600575c:	d65f03c0 	ret

0000000096005760 <tegrabl_exit_register>:

tegrabl_error_t tegrabl_exit_register(void)
{
    96005760:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96005764:	910003fd 	mov	x29, sp
	struct tegrabl_exit_ops *ops;

	ops = tegrabl_exit_get_ops();
    96005768:	94005efd 	bl	9601d35c <tegrabl_exit_get_ops>
	if (!ops)
    9600576c:	b4000200 	cbz	x0, 960057ac <tegrabl_exit_register+0x4c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);

	/* Register cboot exit APIs to the exit framework in common repo */
	ops->sys_power_off = power_off;
    96005770:	90000001 	adrp	x1, 96005000 <thread_detach+0x2c>
    96005774:	911d0021 	add	x1, x1, #0x740
    96005778:	f9000001 	str	x1, [x0]
	ops->sys_reset = reset;
    9600577c:	90000001 	adrp	x1, 96005000 <thread_detach+0x2c>
    96005780:	911b2021 	add	x1, x1, #0x6c8
    96005784:	f9000401 	str	x1, [x0, #8]
	ops->sys_reboot_fastboot = reboot_fastboot;
    96005788:	90000001 	adrp	x1, 96005000 <thread_detach+0x2c>
    9600578c:	911c5021 	add	x1, x1, #0x714
    96005790:	f9000801 	str	x1, [x0, #16]
	ops->sys_reboot_forced_recovery = reboot_forced_recovery;
    96005794:	90000001 	adrp	x1, 96005000 <thread_detach+0x2c>
    96005798:	911ba021 	add	x1, x1, #0x6e8
    9600579c:	f9000c01 	str	x1, [x0, #24]

	return TEGRABL_NO_ERROR;
    960057a0:	52800000 	mov	w0, #0x0                   	// #0
}
    960057a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960057a8:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960057ac:	52800040 	mov	w0, #0x2                   	// #2
    960057b0:	72aa6a60 	movk	w0, #0x5353, lsl #16
    960057b4:	17fffffc 	b	960057a4 <tegrabl_exit_register+0x44>

00000000960057b8 <menu_init>:

static bool s_is_menu_initialised;
static mutex_t menu_mutex;

inline void menu_init(void)
{
    960057b8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960057bc:	910003fd 	mov	x29, sp
    960057c0:	f9000bf3 	str	x19, [sp, #16]
	if (s_is_menu_initialised)
    960057c4:	b0000353 	adrp	x19, 9606e000 <__bss_start>
    960057c8:	39500260 	ldrb	w0, [x19, #1024]
    960057cc:	350000c0 	cbnz	w0, 960057e4 <menu_init+0x2c>
		return;
	mutex_init(&menu_mutex);
    960057d0:	b0000340 	adrp	x0, 9606e000 <__bss_start>
    960057d4:	910f2000 	add	x0, x0, #0x3c8
    960057d8:	97fffa15 	bl	9600402c <mutex_init>

	s_is_menu_initialised = true;
    960057dc:	52800020 	mov	w0, #0x1                   	// #1
    960057e0:	39100260 	strb	w0, [x19, #1024]
}
    960057e4:	f9400bf3 	ldr	x19, [sp, #16]
    960057e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960057ec:	d65f03c0 	ret

00000000960057f0 <tegrabl_arm64_send_smc64>:
 * Reference: ARM SMC Calling convention (ARM DEN 0028A)
 *
 * void tegrabl_arm64_send_smc64(struct tegrabl_arch_smc64_params *regs)
 */
FUNCTION(tegrabl_arm64_send_smc64)
	sub sp, sp, #16
    960057f0:	d10043ff 	sub	sp, sp, #0x10
	/* Only x19 is used as scratch register, but need to keep sp aligned to
	 * 16-bytes across function-calls */
	stp x19, x20, [sp]
    960057f4:	a90053f3 	stp	x19, x20, [sp]
	/* Use x19 as scratch register to store 'regs' pointer as this is
	 * guaranteed to be preserved across SMC calls */
	mov x19, x0
    960057f8:	aa0003f3 	mov	x19, x0
	/* Load parameters (func-id in x0 and params in x1..x6) */
	ldp x0, x1, [x19, #00]
    960057fc:	a9400660 	ldp	x0, x1, [x19]
	ldp x2, x3, [x19, #16]
    96005800:	a9410e62 	ldp	x2, x3, [x19, #16]
	ldp x4, x5, [x19, #32]
    96005804:	a9421664 	ldp	x4, x5, [x19, #32]
	ldr x6, [x19, #48]
    96005808:	f9401a66 	ldr	x6, [x19, #48]
	isb
    9600580c:	d5033fdf 	isb
	smc #0
    96005810:	d4000003 	smc	#0x0
	/* Restore result (4 registers) */
	stp x0, x1, [x19, #00]
    96005814:	a9000660 	stp	x0, x1, [x19]
	stp x2, x3, [x19, #16]
    96005818:	a9010e62 	stp	x2, x3, [x19, #16]
	ldp x19, x20, [sp], #16
    9600581c:	a8c153f3 	ldp	x19, x20, [sp], #16
	ret
    96005820:	d65f03c0 	ret

0000000096005824 <tegrabl_crypto_init>:
tegrabl_error_t tegrabl_crypto_init(tegrabl_crypto_mode_t mode,
		union tegrabl_crypto_context *context)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (context == NULL) {
    96005824:	b4000f01 	cbz	x1, 96005a04 <tegrabl_crypto_init+0x1e0>
{
    96005828:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600582c:	910003fd 	mov	x29, sp
    96005830:	a90153f3 	stp	x19, x20, [sp, #16]
    96005834:	aa0103f3 	mov	x19, x1
    96005838:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600583c:	a90363f7 	stp	x23, x24, [sp, #48]
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	context->mode = mode;
    96005840:	b9000020 	str	w0, [x1]

	switch (mode) {
    96005844:	340000a0 	cbz	w0, 96005858 <tegrabl_crypto_init+0x34>
    96005848:	7100041f 	cmp	w0, #0x1
    9600584c:	540007e0 	b.eq	96005948 <tegrabl_crypto_init+0x124>  // b.none
	case TEGRABL_CRYPTO_ECC:
		error = tegrabl_crypto_init_ecdsa(&context->ecdsa);
		break;
#endif
	default:
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96005850:	52800020 	mov	w0, #0x1                   	// #1
    96005854:	14000019 	b	960058b8 <tegrabl_crypto_init+0x94>
		temp = crypto_aes_buffer_free & (1U << i);
    96005858:	f0000200 	adrp	x0, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    9600585c:	b0000355 	adrp	x21, 9606e000 <__bss_start>
    96005860:	aa0003e1 	mov	x1, x0
    96005864:	39566003 	ldrb	w3, [x0, #1432]
		if (temp != 0U) {
    96005868:	370002c3 	tbnz	w3, #0, 960058c0 <tegrabl_crypto_init+0x9c>
	for (i = 0; i < TEGRABL_CRYPTO_AES_BUFFERS; i++) {
    9600586c:	52800054 	mov	w20, #0x2                   	// #2
		if (temp != 0U) {
    96005870:	360801a3 	tbz	w3, #1, 960058a4 <tegrabl_crypto_init+0x80>
	for (i = 0; i < TEGRABL_CRYPTO_AES_BUFFERS; i++) {
    96005874:	52800034 	mov	w20, #0x1                   	// #1
	if (crypto_aes_buffers[i] == NULL) {
    96005878:	911022b6 	add	x22, x21, #0x408
    9600587c:	93407e97 	sxtw	x23, w20
	crypto_aes_buffer_free &= (~(1U << i));
    96005880:	52800020 	mov	w0, #0x1                   	// #1
    96005884:	1ad42002 	lsl	w2, w0, w20
    96005888:	0a220062 	bic	w2, w3, w2
    9600588c:	39166022 	strb	w2, [x1, #1432]
	if (crypto_aes_buffers[i] == NULL) {
    96005890:	f8777ac1 	ldr	x1, [x22, x23, lsl #3]
    96005894:	b5000081 	cbnz	x1, 960058a4 <tegrabl_crypto_init+0x80>
		crypto_aes_buffers[i] = tegrabl_alloc(TEGRABL_HEAP_DMA,
    96005898:	d2800a01 	mov	x1, #0x50                  	// #80
    9600589c:	9400847a 	bl	96026a84 <tegrabl_alloc>
    960058a0:	f8377ac0 	str	x0, [x22, x23, lsl #3]
	buf = crypto_aes_buffers[context->buffer_id];
    960058a4:	911022b5 	add	x21, x21, #0x408
	context->buffer_id = tegrabl_crypto_alloc_aes_buffer();
    960058a8:	39018274 	strb	w20, [x19, #96]
	buf = crypto_aes_buffers[context->buffer_id];
    960058ac:	f874dab4 	ldr	x20, [x21, w20, sxtw #3]
	if (buf == NULL) {
    960058b0:	b50000d4 	cbnz	x20, 960058c8 <tegrabl_crypto_init+0xa4>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960058b4:	52800060 	mov	w0, #0x3                   	// #3
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    960058b8:	72a2a2a0 	movk	w0, #0x1515, lsl #16
		break;
	}

fail:
	return error;
    960058bc:	1400001e 	b	96005934 <tegrabl_crypto_init+0x110>
	for (i = 0; i < TEGRABL_CRYPTO_AES_BUFFERS; i++) {
    960058c0:	52800014 	mov	w20, #0x0                   	// #0
    960058c4:	17ffffed 	b	96005878 <tegrabl_crypto_init+0x54>
	se_aes_context->pk1 = buf;
    960058c8:	91008275 	add	x21, x19, #0x20
	buf += SE_AES_BLOCK_LENGTH;
    960058cc:	91004280 	add	x0, x20, #0x10
	buf += SE_AES_BLOCK_LENGTH;
    960058d0:	91008296 	add	x22, x20, #0x20
	(void)memset(buf , 0, SE_AES_BLOCK_LENGTH);
    960058d4:	d2800202 	mov	x2, #0x10                  	// #16
    960058d8:	52800001 	mov	w1, #0x0                   	// #0
	se_aes_context->pk2 = buf;
    960058dc:	a90202b4 	stp	x20, x0, [x21, #32]
	(void)memset(buf , 0, SE_AES_BLOCK_LENGTH);
    960058e0:	aa1603e0 	mov	x0, x22
    960058e4:	94009151 	bl	96029e28 <memset>
	se_aes_context->iv_encrypt = buf;
    960058e8:	f9000ab6 	str	x22, [x21, #16]
	if (se_aes_context->is_hash == true) {
    960058ec:	39400aa0 	ldrb	w0, [x21, #2]
    960058f0:	340001c0 	cbz	w0, 96005928 <tegrabl_crypto_init+0x104>
		buf += SE_AES_BLOCK_LENGTH;
    960058f4:	9100c296 	add	x22, x20, #0x30
		memset(buf, 0x0, CMAC_HASH_SIZE_BYTES);
    960058f8:	52800001 	mov	w1, #0x0                   	// #0
    960058fc:	d2800202 	mov	x2, #0x10                  	// #16
    96005900:	aa1603e0 	mov	x0, x22
    96005904:	94009149 	bl	96029e28 <memset>
		if (context->in_hash != NULL) {
    96005908:	f9402e61 	ldr	x1, [x19, #88]
		se_aes_context->phash = buf;
    9600590c:	f9000eb6 	str	x22, [x21, #24]
		if (context->in_hash != NULL) {
    96005910:	b40000c1 	cbz	x1, 96005928 <tegrabl_crypto_init+0x104>
			buf += CMAC_HASH_SIZE_BYTES;
    96005914:	91010294 	add	x20, x20, #0x40
			memcpy(buf, context->in_hash, CMAC_HASH_SIZE_BYTES);
    96005918:	d2800202 	mov	x2, #0x10                  	// #16
    9600591c:	aa1403e0 	mov	x0, x20
    96005920:	94009181 	bl	96029f24 <memcpy>
			context->in_hash  = buf;
    96005924:	f9002e74 	str	x20, [x19, #88]
	context->se_input_params.size_left = se_aes_context->total_size;
    96005928:	b94006a0 	ldr	w0, [x21, #4]
    9600592c:	b9001e60 	str	w0, [x19, #28]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96005930:	52800000 	mov	w0, #0x0                   	// #0
}
    96005934:	a94153f3 	ldp	x19, x20, [sp, #16]
    96005938:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600593c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96005940:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96005944:	d65f03c0 	ret
	context->salt_length = SHA256_SIZE_BYTES;
    96005948:	52800401 	mov	w1, #0x20                  	// #32
	se_sha_input_params->size_left = se_sha_context->input_size;
    9600594c:	91002276 	add	x22, x19, #0x8
	context->salt_length = SHA256_SIZE_BYTES;
    96005950:	b9002a61 	str	w1, [x19, #40]
	se_sha_context->hash_algorithm = SE_SHAMODE_SHA256;
    96005954:	528000a1 	mov	w1, #0x5                   	// #5
    96005958:	39009261 	strb	w1, [x19, #36]
    9600595c:	b0000355 	adrp	x21, 9606e000 <__bss_start>
	se_sha_input_params->size_left = se_sha_context->input_size;
    96005960:	b9402261 	ldr	w1, [x19, #32]
    96005964:	b9000ec1 	str	w1, [x22, #12]
		temp = crypto_rsa_pss_buffer_free & (1U << i);
    96005968:	f0000201 	adrp	x1, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    9600596c:	39566423 	ldrb	w3, [x1, #1433]
		if (temp != 0U) {
    96005970:	37000463 	tbnz	w3, #0, 960059fc <tegrabl_crypto_init+0x1d8>
	for (i = 0; i < TEGRABL_CRYPTO_RSA_PSS_BUFFERS; i++) {
    96005974:	52800054 	mov	w20, #0x2                   	// #2
		if (temp != 0U) {
    96005978:	360801a3 	tbz	w3, #1, 960059ac <tegrabl_crypto_init+0x188>
	for (i = 0; i < TEGRABL_CRYPTO_RSA_PSS_BUFFERS; i++) {
    9600597c:	2a0003f4 	mov	w20, w0
	if (crypto_rsa_pss_buffers[i] == NULL) {
    96005980:	911082b7 	add	x23, x21, #0x420
    96005984:	93407e98 	sxtw	x24, w20
	crypto_rsa_pss_buffer_free &= (~(1U << i));
    96005988:	52800020 	mov	w0, #0x1                   	// #1
    9600598c:	1ad42002 	lsl	w2, w0, w20
    96005990:	0a220062 	bic	w2, w3, w2
    96005994:	39166422 	strb	w2, [x1, #1433]
	if (crypto_rsa_pss_buffers[i] == NULL) {
    96005998:	f8787ae1 	ldr	x1, [x23, x24, lsl #3]
    9600599c:	b5000081 	cbnz	x1, 960059ac <tegrabl_crypto_init+0x188>
		crypto_rsa_pss_buffers[i] = tegrabl_alloc(TEGRABL_HEAP_DMA,
    960059a0:	d2802c01 	mov	x1, #0x160                 	// #352
    960059a4:	94008438 	bl	96026a84 <tegrabl_alloc>
    960059a8:	f8387ae0 	str	x0, [x23, x24, lsl #3]
	buf = crypto_rsa_pss_buffers[context->buffer_id];
    960059ac:	911082b5 	add	x21, x21, #0x420
	context->buffer_id = tegrabl_crypto_alloc_rsa_pss_buffer();
    960059b0:	39014274 	strb	w20, [x19, #80]
	buf = crypto_rsa_pss_buffers[context->buffer_id];
    960059b4:	f874dab4 	ldr	x20, [x21, w20, sxtw #3]
	if (buf == NULL) {
    960059b8:	b4fff7f4 	cbz	x20, 960058b4 <tegrabl_crypto_init+0x90>
	memset(buf, 0x0, SHA256_SIZE_BYTES);
    960059bc:	52800001 	mov	w1, #0x0                   	// #0
    960059c0:	d2800402 	mov	x2, #0x20                  	// #32
    960059c4:	aa1403e0 	mov	x0, x20
    960059c8:	94009118 	bl	96029e28 <memset>
	if (context->signature != NULL) {
    960059cc:	f9402261 	ldr	x1, [x19, #64]
	se_sha_input_params->hash_addr = (uintptr_t)buf;
    960059d0:	f9000ad4 	str	x20, [x22, #16]
	if (context->signature != NULL) {
    960059d4:	b40000c1 	cbz	x1, 960059ec <tegrabl_crypto_init+0x1c8>
	buf += SHA256_SIZE_BYTES;
    960059d8:	91008295 	add	x21, x20, #0x20
		memcpy(buf, context->signature, RSA_2048_KEY_SIZE_BITS / 8UL);
    960059dc:	d2802002 	mov	x2, #0x100                 	// #256
    960059e0:	aa1503e0 	mov	x0, x21
    960059e4:	94009150 	bl	96029f24 <memcpy>
		context->signature = (uint32_t *)buf;
    960059e8:	f9002275 	str	x21, [x19, #64]
	buf += (RSA_2048_KEY_SIZE_BITS / 8UL);
    960059ec:	91048294 	add	x20, x20, #0x120
	context->short_packet_offset = 0;
    960059f0:	b900367f 	str	wzr, [x19, #52]
	context->short_packet = buf;
    960059f4:	f9002674 	str	x20, [x19, #72]
    960059f8:	17ffffce 	b	96005930 <tegrabl_crypto_init+0x10c>
	for (i = 0; i < TEGRABL_CRYPTO_RSA_PSS_BUFFERS; i++) {
    960059fc:	52800014 	mov	w20, #0x0                   	// #0
    96005a00:	17ffffe0 	b	96005980 <tegrabl_crypto_init+0x15c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96005a04:	52800040 	mov	w0, #0x2                   	// #2
    96005a08:	72a2a2a0 	movk	w0, #0x1515, lsl #16
}
    96005a0c:	d65f03c0 	ret

0000000096005a10 <tegrabl_crypto_process_block>:
#endif

tegrabl_error_t tegrabl_crypto_process_block(
		union tegrabl_crypto_context *context, void *buffer, uint32_t size,
		void *dest)
{
    96005a10:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96005a14:	910003fd 	mov	x29, sp
    96005a18:	a90153f3 	stp	x19, x20, [sp, #16]
    96005a1c:	aa0003f3 	mov	x19, x0
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	switch (context->mode) {
    96005a20:	b9400000 	ldr	w0, [x0]
{
    96005a24:	2a0203f4 	mov	w20, w2
    96005a28:	a9025bf5 	stp	x21, x22, [sp, #32]
    96005a2c:	aa0103f6 	mov	x22, x1
    96005a30:	a90363f7 	stp	x23, x24, [sp, #48]
    96005a34:	a9046bf9 	stp	x25, x26, [sp, #64]
	switch (context->mode) {
    96005a38:	340000c0 	cbz	w0, 96005a50 <tegrabl_crypto_process_block+0x40>
    96005a3c:	7100041f 	cmp	w0, #0x1
    96005a40:	54000200 	b.eq	96005a80 <tegrabl_crypto_process_block+0x70>  // b.none
		error = tegrabl_crypto_process_ecdsa_sha(&context->ecdsa, buffer,
				size, dest);
		break;
#endif
	default:
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96005a44:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96005a48:	72a2a2a0 	movk	w0, #0x1515, lsl #16
		break;
	}

	return error;
    96005a4c:	14000027 	b	96005ae8 <tegrabl_crypto_process_block+0xd8>
	aes_input->src = buffer;
    96005a50:	91002260 	add	x0, x19, #0x8
	if (size > aes_input->size_left) {
    96005a54:	b9401401 	ldr	w1, [x0, #20]
	aes_input->src = buffer;
    96005a58:	f9000676 	str	x22, [x19, #8]
	if (size > aes_input->size_left) {
    96005a5c:	6b01005f 	cmp	w2, w1
	aes_input->dst = dest;
    96005a60:	f9000403 	str	x3, [x0, #8]
	aes_input->input_size = size;
    96005a64:	b9001002 	str	w2, [x0, #16]
	if (size > aes_input->size_left) {
    96005a68:	54000788 	b.hi	96005b58 <tegrabl_crypto_process_block+0x148>  // b.pmore
	error = tegrabl_se_aes_process_block(aes_input, &context->se_context);
    96005a6c:	91008261 	add	x1, x19, #0x20
    96005a70:	9400965d 	bl	9602b3e4 <tegrabl_se_aes_process_block>
	if (error != TEGRABL_NO_ERROR) {
    96005a74:	35000340 	cbnz	w0, 96005adc <tegrabl_crypto_process_block+0xcc>
		memcpy(context->short_packet, buffer, size);
    96005a78:	52800000 	mov	w0, #0x0                   	// #0
    96005a7c:	1400001b 	b	96005ae8 <tegrabl_crypto_process_block+0xd8>
	short_packet_offset = context->short_packet_offset;
    96005a80:	b9403675 	ldr	w21, [x19, #52]
	sha_input = &context->se_input_params;
    96005a84:	91002278 	add	x24, x19, #0x8
	if (short_packet_offset != 0UL) {
    96005a88:	34000435 	cbz	w21, 96005b0c <tegrabl_crypto_process_block+0xfc>
		chunk_size = TEGRABL_CRYPTO_SHA_MIN_BUF_SIZE - short_packet_offset;
    96005a8c:	5280081a 	mov	w26, #0x40                  	// #64
    96005a90:	4b150357 	sub	w23, w26, w21
		chunk_size = MIN(size, chunk_size);
    96005a94:	6b17005f 	cmp	w2, w23
		memcpy(context->short_packet + short_packet_offset, buffer, chunk_size);
    96005a98:	f9402660 	ldr	x0, [x19, #72]
		chunk_size = MIN(size, chunk_size);
    96005a9c:	1a979057 	csel	w23, w2, w23, ls  // ls = plast
		memcpy(context->short_packet + short_packet_offset, buffer, chunk_size);
    96005aa0:	2a1703f9 	mov	w25, w23
    96005aa4:	8b354000 	add	x0, x0, w21, uxtw
    96005aa8:	aa1903e2 	mov	x2, x25
    96005aac:	9400911e 	bl	96029f24 <memcpy>
		sha_input->block_addr = (uintptr_t)context->short_packet;
    96005ab0:	f9402660 	ldr	x0, [x19, #72]
		short_packet_offset += chunk_size;
    96005ab4:	0b1702b5 	add	w21, w21, w23
		sha_input->block_addr = (uintptr_t)context->short_packet;
    96005ab8:	f9000660 	str	x0, [x19, #8]
		if (short_packet_offset != TEGRABL_CRYPTO_SHA_MIN_BUF_SIZE) {
    96005abc:	6b1a02bf 	cmp	w21, w26
		sha_input->block_size = TEGRABL_CRYPTO_SHA_MIN_BUF_SIZE;
    96005ac0:	b9000b1a 	str	w26, [x24, #8]
		context->short_packet_offset = short_packet_offset;
    96005ac4:	b9003675 	str	w21, [x19, #52]
		if (short_packet_offset != TEGRABL_CRYPTO_SHA_MIN_BUF_SIZE) {
    96005ac8:	54fffd81 	b.ne	96005a78 <tegrabl_crypto_process_block+0x68>  // b.any
		error = tegrabl_se_sha_process_block(sha_input, &context->se_context);
    96005acc:	91008261 	add	x1, x19, #0x20
    96005ad0:	aa1803e0 	mov	x0, x24
    96005ad4:	9400961d 	bl	9602b348 <tegrabl_se_sha_process_block>
		if (error != TEGRABL_NO_ERROR) {
    96005ad8:	34000140 	cbz	w0, 96005b00 <tegrabl_crypto_process_block+0xf0>
    96005adc:	12005c00 	and	w0, w0, #0xffffff
    96005ae0:	52a2a001 	mov	w1, #0x15000000            	// #352321536
    96005ae4:	2a010000 	orr	w0, w0, w1
}
    96005ae8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96005aec:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96005af0:	a94363f7 	ldp	x23, x24, [sp, #48]
    96005af4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96005af8:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96005afc:	d65f03c0 	ret
		size -= chunk_size;
    96005b00:	4b170294 	sub	w20, w20, w23
		buffer = (void *)((uintptr_t)buffer + chunk_size);
    96005b04:	8b1902d6 	add	x22, x22, x25
		context->short_packet_offset = 0;
    96005b08:	b900367f 	str	wzr, [x19, #52]
	if (size != 0UL) {
    96005b0c:	34fffb74 	cbz	w20, 96005a78 <tegrabl_crypto_process_block+0x68>
		if (sha_input->size_left < size) {
    96005b10:	b9400f00 	ldr	w0, [x24, #12]
			chunk_size = ROUND_DOWN_POW2(size, TEGRABL_CRYPTO_SHA_MIN_BUF_SIZE);
    96005b14:	121a6682 	and	w2, w20, #0xffffffc0
		sha_input->block_addr = (uintptr_t)buffer;
    96005b18:	f9000676 	str	x22, [x19, #8]
		error = tegrabl_se_sha_process_block(sha_input, &context->se_context);
    96005b1c:	91008261 	add	x1, x19, #0x20
			chunk_size = ROUND_DOWN_POW2(size, TEGRABL_CRYPTO_SHA_MIN_BUF_SIZE);
    96005b20:	6b00029f 	cmp	w20, w0
		error = tegrabl_se_sha_process_block(sha_input, &context->se_context);
    96005b24:	aa1803e0 	mov	x0, x24
			chunk_size = ROUND_DOWN_POW2(size, TEGRABL_CRYPTO_SHA_MIN_BUF_SIZE);
    96005b28:	1a948055 	csel	w21, w2, w20, hi  // hi = pmore
		sha_input->block_size = chunk_size;
    96005b2c:	b9000b15 	str	w21, [x24, #8]
		error = tegrabl_se_sha_process_block(sha_input, &context->se_context);
    96005b30:	94009606 	bl	9602b348 <tegrabl_se_sha_process_block>
		if (error != TEGRABL_NO_ERROR) {
    96005b34:	35fffd40 	cbnz	w0, 96005adc <tegrabl_crypto_process_block+0xcc>
		buffer = (void *)((uintptr_t)buffer + chunk_size);
    96005b38:	8b3542c1 	add	x1, x22, w21, uxtw
	if (size != 0U) {
    96005b3c:	6b150282 	subs	w2, w20, w21
    96005b40:	54fff9c0 	b.eq	96005a78 <tegrabl_crypto_process_block+0x68>  // b.none
		memcpy(context->short_packet, buffer, size);
    96005b44:	f9402660 	ldr	x0, [x19, #72]
		context->short_packet_offset = size;
    96005b48:	b9003662 	str	w2, [x19, #52]
		memcpy(context->short_packet, buffer, size);
    96005b4c:	2a0203e2 	mov	w2, w2
    96005b50:	940090f5 	bl	96029f24 <memcpy>
    96005b54:	17ffffc9 	b	96005a78 <tegrabl_crypto_process_block+0x68>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96005b58:	52800080 	mov	w0, #0x4                   	// #4
    96005b5c:	17ffffbb 	b	96005a48 <tegrabl_crypto_process_block+0x38>

0000000096005b60 <tegrabl_crypto_finalize>:

tegrabl_error_t tegrabl_crypto_finalize(union tegrabl_crypto_context *context)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (context == NULL) {
    96005b60:	b4000700 	cbz	x0, 96005c40 <tegrabl_crypto_finalize+0xe0>
{
    96005b64:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96005b68:	910003fd 	mov	x29, sp
    96005b6c:	f9000bf3 	str	x19, [sp, #16]
    96005b70:	aa0003f3 	mov	x19, x0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
		goto fail;
	}

	pr_debug("Finalizing crypto operation %d\n", context->mode);
	switch (context->mode) {
    96005b74:	b9400000 	ldr	w0, [x0]
    96005b78:	340000a0 	cbz	w0, 96005b8c <tegrabl_crypto_finalize+0x2c>
    96005b7c:	7100041f 	cmp	w0, #0x1
    96005b80:	54000220 	b.eq	96005bc4 <tegrabl_crypto_finalize+0x64>  // b.none
		}
		break;
	}
#endif
	default:
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96005b84:	52800020 	mov	w0, #0x1                   	// #1
    96005b88:	1400002c 	b	96005c38 <tegrabl_crypto_finalize+0xd8>
		if (!aes_op->is_verify) {
    96005b8c:	39418661 	ldrb	w1, [x19, #97]
    96005b90:	34000141 	cbz	w1, 96005bb8 <tegrabl_crypto_finalize+0x58>
		void *in_hash = aes_op->in_hash;
    96005b94:	f9402e60 	ldr	x0, [x19, #88]
		if (in_hash == NULL) {
    96005b98:	b40005a0 	cbz	x0, 96005c4c <tegrabl_crypto_finalize+0xec>
		if (memcmp(in_hash, computed_hash,
    96005b9c:	f9401e61 	ldr	x1, [x19, #56]
    96005ba0:	d2800202 	mov	x2, #0x10                  	// #16
    96005ba4:	94009133 	bl	9602a070 <memcmp>
			error = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 0);
    96005ba8:	7100001f 	cmp	w0, #0x0
    96005bac:	52800300 	mov	w0, #0x18                  	// #24
    96005bb0:	72a2a2a0 	movk	w0, #0x1515, lsl #16
    96005bb4:	1a8003e0 	csel	w0, wzr, w0, eq  // eq = none
		break;
	}

fail:
	return error;
}
    96005bb8:	f9400bf3 	ldr	x19, [sp, #16]
    96005bbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96005bc0:	d65f03c0 	ret
		exponent[0] = TEGRABL_RSA_EXPONENT;
    96005bc4:	320083e1 	mov	w1, #0x10001               	// #65537
    96005bc8:	b9002ba1 	str	w1, [x29, #40]
		if (rsa_pss_context->signature == NULL) {
    96005bcc:	f9402261 	ldr	x1, [x19, #64]
    96005bd0:	b4000321 	cbz	x1, 96005c34 <tegrabl_crypto_finalize+0xd4>
		error = tegrabl_se_rsa_write_key(rsa_pss_context->key,
    96005bd4:	2a0003e3 	mov	w3, w0
    96005bd8:	b9402e61 	ldr	w1, [x19, #44]
    96005bdc:	f9401e60 	ldr	x0, [x19, #56]
    96005be0:	52800002 	mov	w2, #0x0                   	// #0
    96005be4:	94009541 	bl	9602b0e8 <tegrabl_se_rsa_write_key>
		if (error != TEGRABL_NO_ERROR) {
    96005be8:	340000a0 	cbz	w0, 96005bfc <tegrabl_crypto_finalize+0x9c>
    96005bec:	12005c00 	and	w0, w0, #0xffffff
    96005bf0:	52a2a003 	mov	w3, #0x15000000            	// #352321536
    96005bf4:	2a030000 	orr	w0, w0, w3
			goto fail;
    96005bf8:	17fffff0 	b	96005bb8 <tegrabl_crypto_finalize+0x58>
		error = tegrabl_se_rsa_write_key(exponent, 32, 0, SELECT_EXPONENT);
    96005bfc:	52800003 	mov	w3, #0x0                   	// #0
    96005c00:	52800002 	mov	w2, #0x0                   	// #0
    96005c04:	52800401 	mov	w1, #0x20                  	// #32
    96005c08:	9100a3a0 	add	x0, x29, #0x28
    96005c0c:	94009537 	bl	9602b0e8 <tegrabl_se_rsa_write_key>
		if (error != TEGRABL_NO_ERROR) {
    96005c10:	35fffee0 	cbnz	w0, 96005bec <tegrabl_crypto_finalize+0x8c>
		error = tegrabl_se_rsa_pss_verify(
    96005c14:	39409264 	ldrb	w4, [x19, #36]
    96005c18:	52800000 	mov	w0, #0x0                   	// #0
    96005c1c:	29450665 	ldp	w5, w1, [x19, #40]
    96005c20:	f9400e62 	ldr	x2, [x19, #24]
    96005c24:	f9402263 	ldr	x3, [x19, #64]
    96005c28:	940098ca 	bl	9602bf50 <tegrabl_se_rsa_pss_verify>
		if (error != TEGRABL_NO_ERROR) {
    96005c2c:	34fffc60 	cbz	w0, 96005bb8 <tegrabl_crypto_finalize+0x58>
    96005c30:	17ffffef 	b	96005bec <tegrabl_crypto_finalize+0x8c>
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    96005c34:	52806040 	mov	w0, #0x302                 	// #770
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    96005c38:	72a2a2a0 	movk	w0, #0x1515, lsl #16
    96005c3c:	17ffffdf 	b	96005bb8 <tegrabl_crypto_finalize+0x58>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96005c40:	52802040 	mov	w0, #0x102                 	// #258
    96005c44:	72a2a2a0 	movk	w0, #0x1515, lsl #16
}
    96005c48:	d65f03c0 	ret
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    96005c4c:	52804040 	mov	w0, #0x202                 	// #514
    96005c50:	17fffffa 	b	96005c38 <tegrabl_crypto_finalize+0xd8>

0000000096005c54 <tegrabl_crypto_close>:

tegrabl_error_t tegrabl_crypto_close(union tegrabl_crypto_context *context)
{
	uint32_t flag = 0U;
	if (context == NULL) {
    96005c54:	b4000400 	cbz	x0, 96005cd4 <tegrabl_crypto_close+0x80>
		return TEGRABL_NO_ERROR;
	}

	switch (context->mode) {
    96005c58:	b9400001 	ldr	w1, [x0]
    96005c5c:	340000c1 	cbz	w1, 96005c74 <tegrabl_crypto_close+0x20>
    96005c60:	7100043f 	cmp	w1, #0x1
    96005c64:	540002c0 	b.eq	96005cbc <tegrabl_crypto_close+0x68>  // b.none
	default:
		flag++;
		break;
	}
	if (flag != 0U) {
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    96005c68:	52808040 	mov	w0, #0x402                 	// #1026
    96005c6c:	72a2a2a0 	movk	w0, #0x1515, lsl #16
	}
	return TEGRABL_NO_ERROR;
}
    96005c70:	d65f03c0 	ret
{
    96005c74:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96005c78:	910003fd 	mov	x29, sp
    96005c7c:	f9000bf3 	str	x19, [sp, #16]
    96005c80:	aa0003f3 	mov	x19, x0
		if (se_context->is_decrypt == true) {
    96005c84:	39408000 	ldrb	w0, [x0, #32]
    96005c88:	34000040 	cbz	w0, 96005c90 <tegrabl_crypto_close+0x3c>
			tegrabl_se_aes_close();
    96005c8c:	940098b0 	bl	9602bf4c <tegrabl_se_aes_close>
	crypto_aes_buffer_free |= (1U << i);
    96005c90:	39418262 	ldrb	w2, [x19, #96]
    96005c94:	f0000201 	adrp	x1, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96005c98:	52800020 	mov	w0, #0x1                   	// #1
}
    96005c9c:	f9400bf3 	ldr	x19, [sp, #16]
    96005ca0:	a8c27bfd 	ldp	x29, x30, [sp], #32
	crypto_aes_buffer_free |= (1U << i);
    96005ca4:	1ac22000 	lsl	w0, w0, w2
    96005ca8:	39566022 	ldrb	w2, [x1, #1432]
    96005cac:	2a020000 	orr	w0, w0, w2
    96005cb0:	39166020 	strb	w0, [x1, #1432]
	return TEGRABL_NO_ERROR;
    96005cb4:	52800000 	mov	w0, #0x0                   	// #0
}
    96005cb8:	d65f03c0 	ret
	crypto_rsa_pss_buffer_free |= (1U << i);
    96005cbc:	39414000 	ldrb	w0, [x0, #80]
    96005cc0:	f0000202 	adrp	x2, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96005cc4:	1ac02021 	lsl	w1, w1, w0
    96005cc8:	39566440 	ldrb	w0, [x2, #1433]
    96005ccc:	2a000021 	orr	w1, w1, w0
    96005cd0:	39166441 	strb	w1, [x2, #1433]
		return TEGRABL_NO_ERROR;
    96005cd4:	52800000 	mov	w0, #0x0                   	// #0
    96005cd8:	d65f03c0 	ret

0000000096005cdc <tegrabl_display_init>:
	uint32_t n_du;
};
static struct tegrabl_display *hdisplay;

tegrabl_error_t tegrabl_display_init(void)
{
    96005cdc:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96005ce0:	910003fd 	mov	x29, sp
    96005ce4:	a90153f3 	stp	x19, x20, [sp, #16]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t n_du = 0;
	struct tegrabl_display_list *du_list = NULL;

	if (hdisplay) {
    96005ce8:	b0000353 	adrp	x19, 9606e000 <__bss_start>
{
    96005cec:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (hdisplay) {
    96005cf0:	f9421e60 	ldr	x0, [x19, #1080]
{
    96005cf4:	a90363f7 	stp	x23, x24, [sp, #48]
	struct tegrabl_display_list *du_list = NULL;
    96005cf8:	f9002fbf 	str	xzr, [x29, #88]
{
    96005cfc:	f90023f9 	str	x25, [sp, #64]
	if (hdisplay) {
    96005d00:	b4000080 	cbz	x0, 96005d10 <tegrabl_display_init+0x34>
		if (hdisplay->n_du > 0) {
    96005d04:	b9402801 	ldr	w1, [x0, #40]
    96005d08:	350007e1 	cbnz	w1, 96005e04 <tegrabl_display_init+0x128>
			pr_debug("Display already initialized\n");
			goto fail;
		} else {
			tegrabl_free(hdisplay);
    96005d0c:	9400836b 	bl	96026ab8 <tegrabl_free>
		}
	}

	hdisplay = tegrabl_malloc(sizeof(struct tegrabl_display));
    96005d10:	d2800600 	mov	x0, #0x30                  	// #48
    96005d14:	94008359 	bl	96026a78 <tegrabl_malloc>
    96005d18:	f9021e60 	str	x0, [x19, #1080]
	if (hdisplay == NULL) {
    96005d1c:	b40005e0 	cbz	x0, 96005dd8 <tegrabl_display_init+0xfc>
		pr_debug("memory allocation failed\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
		goto fail;
	}
	hdisplay->n_du = 0;
    96005d20:	b900281f 	str	wzr, [x0, #40]

	tegrabl_display_unpowergate();
    96005d24:	94001c02 	bl	9600cd2c <tegrabl_display_unpowergate>

	err = tegrabl_display_get_du_list(&du_list);
    96005d28:	910163a0 	add	x0, x29, #0x58
    96005d2c:	9400156e 	bl	9600b2e4 <tegrabl_display_get_du_list>
    96005d30:	2a0003f5 	mov	w21, w0
	if (err != TEGRABL_NO_ERROR || (du_list == NULL)) {
    96005d34:	35000560 	cbnz	w0, 96005de0 <tegrabl_display_init+0x104>
    96005d38:	f9402fa0 	ldr	x0, [x29, #88]
    96005d3c:	b4000520 	cbz	x0, 96005de0 <tegrabl_display_init+0x104>
		pr_debug("initialize du = %d, type = %d\n", n_du, du_list->du_type);
		hdisplay->du[n_du] = tegrabl_display_unit_init(du_list->du_type,
													   du_list->pdata);
		if (hdisplay->du[n_du] == NULL) {
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
			pr_error("%s: Initialize du %d failed\n", __func__, n_du);
    96005d40:	d00001b6 	adrp	x22, 9603b000 <tt_level+0x328>
    96005d44:	d00001b7 	adrp	x23, 9603b000 <tt_level+0x328>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96005d48:	52800058 	mov	w24, #0x2                   	// #2
			pr_error("%s: Initialize du %d failed\n", __func__, n_du);
    96005d4c:	912faad6 	add	x22, x22, #0xbea
    96005d50:	9132eaf7 	add	x23, x23, #0xcba
	uint32_t n_du = 0;
    96005d54:	52800014 	mov	w20, #0x0                   	// #0
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96005d58:	72a8c8d8 	movk	w24, #0x4646, lsl #16
	while (du_list != NULL) {
    96005d5c:	f9402fa0 	ldr	x0, [x29, #88]
    96005d60:	b5000100 	cbnz	x0, 96005d80 <tegrabl_display_init+0xa4>
			tegrabl_free(hdisplay);
			hdisplay = NULL;
		}
	}
	return err;
}
    96005d64:	2a1503e0 	mov	w0, w21
    96005d68:	f94023f9 	ldr	x25, [sp, #64]
    96005d6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96005d70:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96005d74:	a94363f7 	ldp	x23, x24, [sp, #48]
    96005d78:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96005d7c:	d65f03c0 	ret
		hdisplay->du[n_du] = tegrabl_display_unit_init(du_list->du_type,
    96005d80:	f9400401 	ldr	x1, [x0, #8]
    96005d84:	b9400000 	ldr	w0, [x0]
    96005d88:	f9421e79 	ldr	x25, [x19, #1080]
    96005d8c:	9400015d 	bl	96006300 <tegrabl_display_unit_init>
    96005d90:	2a1403e1 	mov	w1, w20
    96005d94:	f8217b20 	str	x0, [x25, x1, lsl #3]
		if (hdisplay->du[n_du] == NULL) {
    96005d98:	f9421e60 	ldr	x0, [x19, #1080]
    96005d9c:	f8617801 	ldr	x1, [x0, x1, lsl #3]
    96005da0:	b5000141 	cbnz	x1, 96005dc8 <tegrabl_display_init+0xec>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96005da4:	2a1803f5 	mov	w21, w24
			pr_error("%s: Initialize du %d failed\n", __func__, n_du);
    96005da8:	2a1403e2 	mov	w2, w20
    96005dac:	aa1603e1 	mov	x1, x22
    96005db0:	aa1703e0 	mov	x0, x23
    96005db4:	9400722f 	bl	96022670 <tegrabl_printf>
		du_list = du_list->next;
    96005db8:	f9402fa0 	ldr	x0, [x29, #88]
    96005dbc:	f9400800 	ldr	x0, [x0, #16]
    96005dc0:	f9002fa0 	str	x0, [x29, #88]
    96005dc4:	17ffffe6 	b	96005d5c <tegrabl_display_init+0x80>
			n_du = ++hdisplay->n_du;
    96005dc8:	b9402814 	ldr	w20, [x0, #40]
    96005dcc:	11000694 	add	w20, w20, #0x1
    96005dd0:	b9002814 	str	w20, [x0, #40]
    96005dd4:	17fffff9 	b	96005db8 <tegrabl_display_init+0xdc>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96005dd8:	52800075 	mov	w21, #0x3                   	// #3
    96005ddc:	72a8c8d5 	movk	w21, #0x4646, lsl #16
	if (hdisplay) {
    96005de0:	f9421e60 	ldr	x0, [x19, #1080]
    96005de4:	b4fffc00 	cbz	x0, 96005d64 <tegrabl_display_init+0x88>
		if (hdisplay->n_du == 0) {
    96005de8:	b9402800 	ldr	w0, [x0, #40]
    96005dec:	35fffbc0 	cbnz	w0, 96005d64 <tegrabl_display_init+0x88>
			tegrabl_display_powergate();
    96005df0:	94001bf5 	bl	9600cdc4 <tegrabl_display_powergate>
			tegrabl_free(hdisplay);
    96005df4:	f9421e60 	ldr	x0, [x19, #1080]
    96005df8:	94008330 	bl	96026ab8 <tegrabl_free>
			hdisplay = NULL;
    96005dfc:	f9021e7f 	str	xzr, [x19, #1080]
    96005e00:	17ffffd9 	b	96005d64 <tegrabl_display_init+0x88>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96005e04:	52800015 	mov	w21, #0x0                   	// #0
    96005e08:	17fffff8 	b	96005de8 <tegrabl_display_init+0x10c>

0000000096005e0c <tegrabl_display_show_image>:
fail:
	return err;
}

tegrabl_error_t tegrabl_display_show_image(struct tegrabl_image_info *image)
{
    96005e0c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96005e10:	910003fd 	mov	x29, sp
    96005e14:	a90363f7 	stp	x23, x24, [sp, #48]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	struct tegrabl_display_unit_params *disp_param = NULL;
	struct tegrabl_bmp_image bmp_img = {0};
	uint32_t du_idx = 0;

	if (!hdisplay) {
    96005e18:	b0000357 	adrp	x23, 9606e000 <__bss_start>
{
    96005e1c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96005e20:	aa0003f5 	mov	x21, x0
	if (!hdisplay) {
    96005e24:	f9421ee0 	ldr	x0, [x23, #1080]
{
    96005e28:	a90153f3 	stp	x19, x20, [sp, #16]
	struct tegrabl_bmp_image bmp_img = {0};
    96005e2c:	a904ffbf 	stp	xzr, xzr, [x29, #72]
    96005e30:	a905ffbf 	stp	xzr, xzr, [x29, #88]
    96005e34:	f90037bf 	str	xzr, [x29, #104]
	if (!hdisplay) {
    96005e38:	b50001c0 	cbnz	x0, 96005e70 <tegrabl_display_show_image+0x64>
		pr_error("%s: display is not initialized\n", __func__);
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 1);
    96005e3c:	52802413 	mov	w19, #0x120                 	// #288
		pr_error("%s: display is not initialized\n", __func__);
    96005e40:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96005e44:	d00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96005e48:	912ffc21 	add	x1, x1, #0xbff
    96005e4c:	91336800 	add	x0, x0, #0xcda
    96005e50:	94007208 	bl	96022670 <tegrabl_printf>

	pr_debug("%s: Show image for %d display(s)\n", __func__, hdisplay->n_du);

	disp_param = tegrabl_malloc(sizeof(struct tegrabl_display_unit_params));
	if (!disp_param) {
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96005e54:	72a8c8d3 	movk	w19, #0x4646, lsl #16
fail:
	if (disp_param)
		tegrabl_free(disp_param);

	return err;
}
    96005e58:	2a1303e0 	mov	w0, w19
    96005e5c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96005e60:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96005e64:	a94363f7 	ldp	x23, x24, [sp, #48]
    96005e68:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96005e6c:	d65f03c0 	ret
	bmp_img.img_type = image->type;
    96005e70:	b94002a0 	ldr	w0, [x21]
    96005e74:	b9004ba0 	str	w0, [x29, #72]
	disp_param = tegrabl_malloc(sizeof(struct tegrabl_display_unit_params));
    96005e78:	d2800600 	mov	x0, #0x30                  	// #48
    96005e7c:	940082ff 	bl	96026a78 <tegrabl_malloc>
    96005e80:	aa0003f6 	mov	x22, x0
	if (!disp_param) {
    96005e84:	b40007e0 	cbz	x0, 96005f80 <tegrabl_display_show_image+0x174>
	for (du_idx = 0; du_idx < hdisplay->n_du; du_idx++) {
    96005e88:	52800014 	mov	w20, #0x0                   	// #0
    96005e8c:	f9421ee0 	ldr	x0, [x23, #1080]
    96005e90:	b9402801 	ldr	w1, [x0, #40]
    96005e94:	6b01029f 	cmp	w20, w1
    96005e98:	54000063 	b.cc	96005ea4 <tegrabl_display_show_image+0x98>  // b.lo, b.ul, b.last
fail:
    96005e9c:	52800013 	mov	w19, #0x0                   	// #0
    96005ea0:	14000011 	b	96005ee4 <tegrabl_display_show_image+0xd8>
		if (image->type == IMAGE_USER_DEFINED) /*skip parsing bmp blob*/ {
    96005ea4:	b94002a1 	ldr	w1, [x21]
    96005ea8:	2a1403f8 	mov	w24, w20
    96005eac:	7100303f 	cmp	w1, #0xc
    96005eb0:	540004c0 	b.eq	96005f48 <tegrabl_display_show_image+0x13c>  // b.none
		err = tegrabl_display_unit_ioctl(hdisplay->du[du_idx],
    96005eb4:	f8787800 	ldr	x0, [x0, x24, lsl #3]
    96005eb8:	aa1603e2 	mov	x2, x22
    96005ebc:	52800021 	mov	w1, #0x1                   	// #1
    96005ec0:	94000174 	bl	96006490 <tegrabl_display_unit_ioctl>
    96005ec4:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96005ec8:	34000140 	cbz	w0, 96005ef0 <tegrabl_display_show_image+0xe4>
			pr_error("%s: failed to process du %d\n", __func__, du_idx);
    96005ecc:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96005ed0:	d00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96005ed4:	2a1403e2 	mov	w2, w20
    96005ed8:	912ffc21 	add	x1, x1, #0xbff
    96005edc:	91349000 	add	x0, x0, #0xd24
			pr_error("%s, du %d failed to show image\n", __func__, du_idx);
    96005ee0:	940071e4 	bl	96022670 <tegrabl_printf>
		tegrabl_free(disp_param);
    96005ee4:	aa1603e0 	mov	x0, x22
    96005ee8:	940082f4 	bl	96026ab8 <tegrabl_free>
    96005eec:	17ffffdb 	b	96005e58 <tegrabl_display_show_image+0x4c>
		if (!bmp_img.is_panel_portrait)
    96005ef0:	394193a0 	ldrb	w0, [x29, #100]
    96005ef4:	350001e0 	cbnz	w0, 96005f30 <tegrabl_display_show_image+0x124>
			bmp_img.panel_resolution = disp_param->height;
    96005ef8:	b9401ac0 	ldr	w0, [x22, #24]
			bmp_img.panel_resolution = disp_param->width;
    96005efc:	b90063a0 	str	w0, [x29, #96]
		if (image->format == TEGRABL_IMAGE_FORMAT_BMP) {
    96005f00:	b94006a0 	ldr	w0, [x21, #4]
    96005f04:	35000220 	cbnz	w0, 96005f48 <tegrabl_display_show_image+0x13c>
			err = tegrabl_get_bmp(&bmp_img);
    96005f08:	910123a0 	add	x0, x29, #0x48
    96005f0c:	940084d7 	bl	96027268 <tegrabl_get_bmp>
    96005f10:	2a0003f3 	mov	w19, w0
			if (err != TEGRABL_NO_ERROR) {
    96005f14:	34000120 	cbz	w0, 96005f38 <tegrabl_display_show_image+0x12c>
				pr_error("%s, du %d failed to read bmp from blob\n",
    96005f18:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96005f1c:	d00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96005f20:	2a1403e2 	mov	w2, w20
    96005f24:	912ffc21 	add	x1, x1, #0xbff
    96005f28:	91351000 	add	x0, x0, #0xd44
    96005f2c:	17ffffed 	b	96005ee0 <tegrabl_display_show_image+0xd4>
			bmp_img.panel_resolution = disp_param->width;
    96005f30:	b9401ec0 	ldr	w0, [x22, #28]
    96005f34:	17fffff2 	b	96005efc <tegrabl_display_show_image+0xf0>
			image->image_buf = bmp_img.bmp;
    96005f38:	f9402ba0 	ldr	x0, [x29, #80]
    96005f3c:	f90006a0 	str	x0, [x21, #8]
			image->size = bmp_img.image_size;
    96005f40:	f9402fa0 	ldr	x0, [x29, #88]
    96005f44:	f9000aa0 	str	x0, [x21, #16]
		err = tegrabl_display_unit_show_image(hdisplay->du[du_idx], image);
    96005f48:	f9421ee0 	ldr	x0, [x23, #1080]
    96005f4c:	aa1503e1 	mov	x1, x21
    96005f50:	f8787800 	ldr	x0, [x0, x24, lsl #3]
    96005f54:	94000095 	bl	960061a8 <tegrabl_display_unit_show_image>
    96005f58:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96005f5c:	340000e0 	cbz	w0, 96005f78 <tegrabl_display_show_image+0x16c>
			pr_error("%s, du %d failed to show image\n", __func__, du_idx);
    96005f60:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96005f64:	d00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96005f68:	2a1403e2 	mov	w2, w20
    96005f6c:	912ffc21 	add	x1, x1, #0xbff
    96005f70:	9135bc00 	add	x0, x0, #0xd6f
    96005f74:	17ffffdb 	b	96005ee0 <tegrabl_display_show_image+0xd4>
	for (du_idx = 0; du_idx < hdisplay->n_du; du_idx++) {
    96005f78:	11000694 	add	w20, w20, #0x1
    96005f7c:	17ffffc4 	b	96005e8c <tegrabl_display_show_image+0x80>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96005f80:	52802073 	mov	w19, #0x103                 	// #259
    96005f84:	17ffffb4 	b	96005e54 <tegrabl_display_show_image+0x48>

0000000096005f88 <tegrabl_display_clear>:

tegrabl_error_t tegrabl_display_clear(void)
{
    96005f88:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t du_idx = 0;

	if (!hdisplay) {
    96005f8c:	b0000340 	adrp	x0, 9606e000 <__bss_start>
{
    96005f90:	910003fd 	mov	x29, sp
	if (!hdisplay) {
    96005f94:	f9421c01 	ldr	x1, [x0, #1080]
{
    96005f98:	a90153f3 	stp	x19, x20, [sp, #16]
    96005f9c:	f90013f5 	str	x21, [sp, #32]
	if (!hdisplay) {
    96005fa0:	b50003e1 	cbnz	x1, 9600601c <tegrabl_display_clear+0x94>
		pr_error("%s: display is not initialized\n", __func__);
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 2);
    96005fa4:	52804414 	mov	w20, #0x220                 	// #544
		pr_error("%s: display is not initialized\n", __func__);
    96005fa8:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 2);
    96005fac:	72a8c8d4 	movk	w20, #0x4646, lsl #16
		pr_error("%s: display is not initialized\n", __func__);
    96005fb0:	91306821 	add	x1, x1, #0xc1a
    96005fb4:	d00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96005fb8:	91336800 	add	x0, x0, #0xcda
    96005fbc:	940071ad 	bl	96022670 <tegrabl_printf>
		}
	}

fail:
	return err;
}
    96005fc0:	2a1403e0 	mov	w0, w20
    96005fc4:	f94013f5 	ldr	x21, [sp, #32]
    96005fc8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96005fcc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96005fd0:	d65f03c0 	ret
		err = tegrabl_display_unit_clear(hdisplay->du[du_idx]);
    96005fd4:	f8735800 	ldr	x0, [x0, w19, uxtw #3]
    96005fd8:	940000a3 	bl	96006264 <tegrabl_display_unit_clear>
    96005fdc:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96005fe0:	34000100 	cbz	w0, 96006000 <tegrabl_display_clear+0x78>
			pr_error("%s, du %d failed to clear display unit\n", __func__,
    96005fe4:	2a1303e2 	mov	w2, w19
    96005fe8:	d00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96005fec:	d00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96005ff0:	91306821 	add	x1, x1, #0xc1a
    96005ff4:	91319000 	add	x0, x0, #0xc64
    96005ff8:	9400719e 	bl	96022670 <tegrabl_printf>
			goto fail;
    96005ffc:	17fffff1 	b	96005fc0 <tegrabl_display_clear+0x38>
	for (du_idx = 0; du_idx < hdisplay->n_du; du_idx++) {
    96006000:	11000673 	add	w19, w19, #0x1
    96006004:	f9421ea0 	ldr	x0, [x21, #1080]
    96006008:	b9402801 	ldr	w1, [x0, #40]
    9600600c:	6b01027f 	cmp	w19, w1
    96006010:	54fffe23 	b.cc	96005fd4 <tegrabl_display_clear+0x4c>  // b.lo, b.ul, b.last
fail:
    96006014:	52800014 	mov	w20, #0x0                   	// #0
	return err;
    96006018:	17ffffea 	b	96005fc0 <tegrabl_display_clear+0x38>
    9600601c:	52800013 	mov	w19, #0x0                   	// #0
    96006020:	aa0003f5 	mov	x21, x0
    96006024:	17fffff8 	b	96006004 <tegrabl_display_clear+0x7c>

0000000096006028 <tegrabl_display_shutdown>:
fail:
	return err;
}

tegrabl_error_t tegrabl_display_shutdown(void)
{
    96006028:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t du_idx = 0;

	if (!hdisplay) {
    9600602c:	90000340 	adrp	x0, 9606e000 <__bss_start>
{
    96006030:	910003fd 	mov	x29, sp
	if (!hdisplay) {
    96006034:	f9421c01 	ldr	x1, [x0, #1080]
{
    96006038:	a90153f3 	stp	x19, x20, [sp, #16]
    9600603c:	f90013f5 	str	x21, [sp, #32]
	if (!hdisplay) {
    96006040:	b50003e1 	cbnz	x1, 960060bc <tegrabl_display_shutdown+0x94>
		pr_error("%s: display is not initialized\n", __func__);
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 4);
    96006044:	52808414 	mov	w20, #0x420                 	// #1056
		pr_error("%s: display is not initialized\n", __func__);
    96006048:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 4);
    9600604c:	72a8c8d4 	movk	w20, #0x4646, lsl #16
		pr_error("%s: display is not initialized\n", __func__);
    96006050:	9130c021 	add	x1, x1, #0xc30
    96006054:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006058:	91336800 	add	x0, x0, #0xcda
    9600605c:	94007185 	bl	96022670 <tegrabl_printf>
		}
	}

fail:
	return err;
}
    96006060:	2a1403e0 	mov	w0, w20
    96006064:	f94013f5 	ldr	x21, [sp, #32]
    96006068:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600606c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96006070:	d65f03c0 	ret
		err = tegrabl_display_unit_shutdown(hdisplay->du[du_idx]);
    96006074:	f8735800 	ldr	x0, [x0, w19, uxtw #3]
    96006078:	9400015b 	bl	960065e4 <tegrabl_display_unit_shutdown>
    9600607c:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96006080:	34000100 	cbz	w0, 960060a0 <tegrabl_display_shutdown+0x78>
			pr_error("%s, du %d failed to shutdown display unit\n", __func__,
    96006084:	2a1303e2 	mov	w2, w19
    96006088:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    9600608c:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006090:	9130c021 	add	x1, x1, #0xc30
    96006094:	91364800 	add	x0, x0, #0xd92
    96006098:	94007176 	bl	96022670 <tegrabl_printf>
			goto fail;
    9600609c:	17fffff1 	b	96006060 <tegrabl_display_shutdown+0x38>
	for (du_idx = 0; du_idx < hdisplay->n_du; du_idx++) {
    960060a0:	11000673 	add	w19, w19, #0x1
    960060a4:	f9421ea0 	ldr	x0, [x21, #1080]
    960060a8:	b9402801 	ldr	w1, [x0, #40]
    960060ac:	6b01027f 	cmp	w19, w1
    960060b0:	54fffe23 	b.cc	96006074 <tegrabl_display_shutdown+0x4c>  // b.lo, b.ul, b.last
fail:
    960060b4:	52800014 	mov	w20, #0x0                   	// #0
	return err;
    960060b8:	17ffffea 	b	96006060 <tegrabl_display_shutdown+0x38>
    960060bc:	52800013 	mov	w19, #0x0                   	// #0
    960060c0:	aa0003f5 	mov	x21, x0
    960060c4:	17fffff8 	b	960060a4 <tegrabl_display_shutdown+0x7c>

00000000960060c8 <tegrabl_display_get_params>:

tegrabl_error_t tegrabl_display_get_params(
	uint32_t du_idx, struct tegrabl_display_unit_params *disp_param)
{
    960060c8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (!hdisplay || du_idx >= hdisplay->n_du) {
    960060cc:	90000342 	adrp	x2, 9606e000 <__bss_start>
{
    960060d0:	910003fd 	mov	x29, sp
	if (!hdisplay || du_idx >= hdisplay->n_du) {
    960060d4:	f9421c43 	ldr	x3, [x2, #1080]
{
    960060d8:	a90153f3 	stp	x19, x20, [sp, #16]
	if (!hdisplay || du_idx >= hdisplay->n_du) {
    960060dc:	b40002a3 	cbz	x3, 96006130 <tegrabl_display_get_params+0x68>
    960060e0:	b9402862 	ldr	w2, [x3, #40]
    960060e4:	6b00005f 	cmp	w2, w0
    960060e8:	54000249 	b.ls	96006130 <tegrabl_display_get_params+0x68>  // b.plast
    960060ec:	2a0003f3 	mov	w19, w0
    960060f0:	aa0103e2 	mov	x2, x1
		goto fail;
	}
	pr_debug("%s: Get disp_params of du %d from %d display(s)\n", __func__,
			 du_idx, hdisplay->n_du);

	err = tegrabl_display_unit_ioctl(hdisplay->du[du_idx],
    960060f4:	52800021 	mov	w1, #0x1                   	// #1
    960060f8:	f8735860 	ldr	x0, [x3, w19, uxtw #3]
    960060fc:	940000e5 	bl	96006490 <tegrabl_display_unit_ioctl>
    96006100:	2a0003f4 	mov	w20, w0
			DISPLAY_UNIT_IOCTL_GET_DISPLAY_PARAMS, (void *)disp_param);
	if (err != TEGRABL_NO_ERROR) {
    96006104:	340000e0 	cbz	w0, 96006120 <tegrabl_display_get_params+0x58>
		pr_error("%s, du %d failed to get display params\n", __func__, du_idx);
    96006108:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    9600610c:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006110:	2a1303e2 	mov	w2, w19
    96006114:	91312421 	add	x1, x1, #0xc49
    96006118:	91323c00 	add	x0, x0, #0xc8f
    9600611c:	94007155 	bl	96022670 <tegrabl_printf>
		goto fail;
	}

fail:
	return err;
}
    96006120:	2a1403e0 	mov	w0, w20
    96006124:	a94153f3 	ldp	x19, x20, [sp, #16]
    96006128:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600612c:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 5);
    96006130:	5280a414 	mov	w20, #0x520                 	// #1312
    96006134:	72a8c8d4 	movk	w20, #0x4646, lsl #16
	return err;
    96006138:	17fffffa 	b	96006120 <tegrabl_display_get_params+0x58>

000000009600613c <display_unit_set_surface>:
tegrabl_error_t display_unit_set_surface(struct tegrabl_display_unit *du,
	uint32_t win_idx, struct tegrabl_surface *surf)
{
	dma_addr_t dma_addr;

	if ((du == NULL) || (du->nvdisp == NULL) || (surf == NULL))
    9600613c:	b4000300 	cbz	x0, 9600619c <display_unit_set_surface+0x60>
    96006140:	f9401805 	ldr	x5, [x0, #48]
    96006144:	b40002c5 	cbz	x5, 9600619c <display_unit_set_surface+0x60>
    96006148:	b40002a2 	cbz	x2, 9600619c <display_unit_set_surface+0x60>
{
    9600614c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);

	pr_debug("%s: du instance %d, type %d, win_id %d, surf 0x%lx\n", __func__,
			 du->nvdisp->instance, du->type, du->win_id, (unsigned long)surf);

	du->surf[win_idx] = surf;
    96006150:	8b214c01 	add	x1, x0, w1, uxtw #3

	dma_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    96006154:	52800024 	mov	w4, #0x1                   	// #1
{
    96006158:	910003fd 	mov	x29, sp
	dma_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    9600615c:	b9401843 	ldr	w3, [x2, #24]
{
    96006160:	f9000bf3 	str	x19, [sp, #16]
    96006164:	aa0003f3 	mov	x19, x0
	du->surf[win_idx] = surf;
    96006168:	f9000c22 	str	x2, [x1, #24]
	dma_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    9600616c:	52800480 	mov	w0, #0x24                  	// #36
    96006170:	394000a1 	ldrb	w1, [x5]
    96006174:	f9400842 	ldr	x2, [x2, #16]
    96006178:	97fff653 	bl	96003ac4 <tegrabl_dma_map_buffer>
		du->nvdisp->instance, (void *)(surf->base), surf->size,
		TEGRABL_DMA_TO_DEVICE);

	tegrabl_nvdisp_win_set_surface(du->nvdisp, du->win_id, dma_addr);
    9600617c:	aa0003e2 	mov	x2, x0
    96006180:	b9401661 	ldr	w1, [x19, #20]
    96006184:	f9401a60 	ldr	x0, [x19, #48]
    96006188:	94000369 	bl	96006f2c <tegrabl_nvdisp_win_set_surface>

	return TEGRABL_NO_ERROR;
}
    9600618c:	f9400bf3 	ldr	x19, [sp, #16]
	return TEGRABL_NO_ERROR;
    96006190:	52800000 	mov	w0, #0x0                   	// #0
}
    96006194:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96006198:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9600619c:	52802040 	mov	w0, #0x102                 	// #258
    960061a0:	72a8c8c0 	movk	w0, #0x4646, lsl #16
}
    960061a4:	d65f03c0 	ret

00000000960061a8 <tegrabl_display_unit_show_image>:
	return err;
}

tegrabl_error_t tegrabl_display_unit_show_image(struct tegrabl_display_unit *du,
	struct tegrabl_image_info *image_info)
{
    960061a8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960061ac:	910003fd 	mov	x29, sp
    960061b0:	a90153f3 	stp	x19, x20, [sp, #16]
    960061b4:	f90013f5 	str	x21, [sp, #32]
	struct tegrabl_surface *surf;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (du == NULL || du->nvdisp == NULL) {
    960061b8:	b4000080 	cbz	x0, 960061c8 <tegrabl_display_unit_show_image+0x20>
    960061bc:	aa0003f4 	mov	x20, x0
    960061c0:	f9401800 	ldr	x0, [x0, #48]
    960061c4:	b50001e0 	cbnz	x0, 96006200 <tegrabl_display_unit_show_image+0x58>
		pr_error("display unit or nvdisp handle is null\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    960061c8:	52808053 	mov	w19, #0x402                 	// #1026
		pr_error("display unit or nvdisp handle is null\n");
    960061cc:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    960061d0:	913b9800 	add	x0, x0, #0xee6
    960061d4:	94007127 	bl	96022670 <tegrabl_printf>

	/* get the surface, update it with text */
	surf = display_unit_get_surface(du, 0);
	if (surf == NULL) {
		pr_error("surface is not assigned\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    960061d8:	72a8c8d3 	movk	w19, #0x4646, lsl #16
    960061dc:	52a8c000 	mov	w0, #0x46000000            	// #1174405120
    960061e0:	12005e73 	and	w19, w19, #0xffffff
    960061e4:	2a000273 	orr	w19, w19, w0
	pr_debug("%s: exit\n", __func__);
	return err;

fail:
	TEGRABL_SET_HIGHEST_MODULE(err);
	pr_error("%s: exit error\n", __func__);
    960061e8:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    960061ec:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    960061f0:	91378c21 	add	x1, x1, #0xde3
    960061f4:	913b4c00 	add	x0, x0, #0xed3
    960061f8:	9400711e 	bl	96022670 <tegrabl_printf>

	return err;
    960061fc:	14000015 	b	96006250 <tegrabl_display_unit_show_image+0xa8>
	return du->surf[win_idx];
    96006200:	f9400e95 	ldr	x21, [x20, #24]
	if (surf == NULL) {
    96006204:	b50000d5 	cbnz	x21, 9600621c <tegrabl_display_unit_show_image+0x74>
		pr_error("surface is not assigned\n");
    96006208:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    9600620c:	5280a053 	mov	w19, #0x502                 	// #1282
		pr_error("surface is not assigned\n");
    96006210:	913adc00 	add	x0, x0, #0xeb7
    96006214:	94007117 	bl	96022670 <tegrabl_printf>
    96006218:	17fffff0 	b	960061d8 <tegrabl_display_unit_show_image+0x30>
	err = tegrabl_render_image(surf, image_info->image_buf, image_info->size,
    9600621c:	b9400423 	ldr	w3, [x1, #4]
    96006220:	aa1503e0 	mov	x0, x21
    96006224:	b9401022 	ldr	w2, [x1, #16]
    96006228:	f9400421 	ldr	x1, [x1, #8]
    9600622c:	94008b96 	bl	96029084 <tegrabl_render_image>
    96006230:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96006234:	35fffd40 	cbnz	w0, 960061dc <tegrabl_display_unit_show_image+0x34>
	err = display_unit_set_surface(du, 0, surf);
    96006238:	aa1503e2 	mov	x2, x21
    9600623c:	52800001 	mov	w1, #0x0                   	// #0
    96006240:	aa1403e0 	mov	x0, x20
    96006244:	97ffffbe 	bl	9600613c <display_unit_set_surface>
    96006248:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9600624c:	35fffc80 	cbnz	w0, 960061dc <tegrabl_display_unit_show_image+0x34>
}
    96006250:	2a1303e0 	mov	w0, w19
    96006254:	f94013f5 	ldr	x21, [sp, #32]
    96006258:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600625c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96006260:	d65f03c0 	ret

0000000096006264 <tegrabl_display_unit_clear>:

tegrabl_error_t tegrabl_display_unit_clear(struct tegrabl_display_unit *du)
{
    96006264:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96006268:	910003fd 	mov	x29, sp
    9600626c:	a90153f3 	stp	x19, x20, [sp, #16]
	struct tegrabl_surface *surf;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (du == NULL || du->nvdisp == NULL) {
    96006270:	b4000080 	cbz	x0, 96006280 <tegrabl_display_unit_clear+0x1c>
    96006274:	aa0003f3 	mov	x19, x0
    96006278:	f9401800 	ldr	x0, [x0, #48]
    9600627c:	b5000180 	cbnz	x0, 960062ac <tegrabl_display_unit_clear+0x48>
		pr_error("display unit or nvdisp handle is null\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    96006280:	5280c053 	mov	w19, #0x602                 	// #1538
		pr_error("display unit or nvdisp handle is null\n");
    96006284:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006288:	913b9800 	add	x0, x0, #0xee6
    9600628c:	940070f9 	bl	96022670 <tegrabl_printf>
			 du->nvdisp->instance, du->type);

	/* get the surface, clear the contents, set text position to 0,0 */
	surf = display_unit_get_surface(du, 0);
	if (surf == NULL) {
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    96006290:	72a8c8d3 	movk	w19, #0x4646, lsl #16
	tegrabl_render_text_set_position(0, 0);
	tegrabl_render_text_set_font(FONT_DEFAULT, 2);

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s: exit error\n", __func__);
    96006294:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96006298:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    9600629c:	91380c21 	add	x1, x1, #0xe03
    960062a0:	913b4c00 	add	x0, x0, #0xed3
    960062a4:	940070f3 	bl	96022670 <tegrabl_printf>
	}
	return err;
    960062a8:	14000010 	b	960062e8 <tegrabl_display_unit_clear+0x84>
	return du->surf[win_idx];
    960062ac:	f9400e74 	ldr	x20, [x19, #24]
	if (surf == NULL) {
    960062b0:	b4000254 	cbz	x20, 960062f8 <tegrabl_display_unit_clear+0x94>
	tegrabl_surface_clear(surf);
    960062b4:	aa1403e0 	mov	x0, x20
    960062b8:	940089a2 	bl	96028940 <tegrabl_surface_clear>
	display_unit_set_surface(du, 0, surf);
    960062bc:	aa1403e2 	mov	x2, x20
    960062c0:	52800001 	mov	w1, #0x0                   	// #0
    960062c4:	aa1303e0 	mov	x0, x19
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    960062c8:	52800013 	mov	w19, #0x0                   	// #0
	display_unit_set_surface(du, 0, surf);
    960062cc:	97ffff9c 	bl	9600613c <display_unit_set_surface>
	tegrabl_render_text_set_position(0, 0);
    960062d0:	52800001 	mov	w1, #0x0                   	// #0
    960062d4:	52800000 	mov	w0, #0x0                   	// #0
    960062d8:	94008a30 	bl	96028b98 <tegrabl_render_text_set_position>
	tegrabl_render_text_set_font(FONT_DEFAULT, 2);
    960062dc:	52800041 	mov	w1, #0x2                   	// #2
    960062e0:	52800000 	mov	w0, #0x0                   	// #0
    960062e4:	94008a32 	bl	96028bac <tegrabl_render_text_set_font>
}
    960062e8:	2a1303e0 	mov	w0, w19
    960062ec:	a94153f3 	ldp	x19, x20, [sp, #16]
    960062f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960062f4:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    960062f8:	5280e053 	mov	w19, #0x702                 	// #1794
    960062fc:	17ffffe5 	b	96006290 <tegrabl_display_unit_clear+0x2c>

0000000096006300 <tegrabl_display_unit_init>:
{
    96006300:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96006304:	910003fd 	mov	x29, sp
    96006308:	a90153f3 	stp	x19, x20, [sp, #16]
    9600630c:	aa0103f4 	mov	x20, x1
    96006310:	a9025bf5 	stp	x21, x22, [sp, #32]
    96006314:	2a0003f6 	mov	w22, w0
    96006318:	f9001bf7 	str	x23, [sp, #48]
	du = tegrabl_malloc(sizeof(struct tegrabl_display_unit));
    9600631c:	d2800700 	mov	x0, #0x38                  	// #56
    96006320:	940081d6 	bl	96026a78 <tegrabl_malloc>
    96006324:	aa0003f3 	mov	x19, x0
	if (du == NULL) {
    96006328:	b4000a20 	cbz	x0, 9600646c <tegrabl_display_unit_init+0x16c>
	du->win_id = pdata->win_id;
    9600632c:	b9400680 	ldr	w0, [x20, #4]
    96006330:	b9001660 	str	w0, [x19, #20]
	if (pdata->mode == NULL) {
    96006334:	f9400a80 	ldr	x0, [x20, #16]
	du->type = type;
    96006338:	b9000276 	str	w22, [x19]
	if (pdata->mode == NULL) {
    9600633c:	b5000580 	cbnz	x0, 960063ec <tegrabl_display_unit_init+0xec>
	mode = tegrabl_malloc(sizeof(struct nvdisp_mode));
    96006340:	d2800780 	mov	x0, #0x3c                  	// #60
    96006344:	940081cd 	bl	96026a78 <tegrabl_malloc>
    96006348:	aa0003f7 	mov	x23, x0
	if (mode == NULL) {
    9600634c:	b4000460 	cbz	x0, 960063d8 <tegrabl_display_unit_init+0xd8>
	if (du_type == DISPLAY_OUT_DP) {
    96006350:	71000edf 	cmp	w22, #0x3
    96006354:	54000181 	b.ne	96006384 <tegrabl_display_unit_init+0x84>  // b.any
		err = tegrabl_edid_get_mode(mode, TEGRABL_MODULE_DPAUX, pdata->sor_dtb.dpaux_instance);
    96006358:	b9409682 	ldr	w2, [x20, #148]
    9600635c:	528003e1 	mov	w1, #0x1f                  	// #31
		err = tegrabl_edid_get_mode(mode, TEGRABL_MODULE_I2C, i2c_instance);
    96006360:	940012bf 	bl	9600ae5c <tegrabl_edid_get_mode>
    96006364:	2a0003f5 	mov	w21, w0
	if (err != TEGRABL_NO_ERROR) {
    96006368:	34000400 	cbz	w0, 960063e8 <tegrabl_display_unit_init+0xe8>
		pr_error("%s, get edid failed", __func__);
    9600636c:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96006370:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006374:	91371421 	add	x1, x1, #0xdc5
    96006378:	913a0000 	add	x0, x0, #0xe80
    9600637c:	940070bd 	bl	96022670 <tegrabl_printf>
    96006380:	14000013 	b	960063cc <tegrabl_display_unit_init+0xcc>
	} else if (du_type == DISPLAY_OUT_HDMI) {
    96006384:	710006df 	cmp	w22, #0x1
    96006388:	54000141 	b.ne	960063b0 <tegrabl_display_unit_init+0xb0>  // b.any
		err = tegrabl_display_get_i2c(pdata->sor_dtb.sor_instance, &i2c_instance);
    9600638c:	b9409280 	ldr	w0, [x20, #144]
    96006390:	910133a1 	add	x1, x29, #0x4c
    96006394:	94001ab2 	bl	9600ce5c <tegrabl_display_get_i2c>
    96006398:	2a0003f5 	mov	w21, w0
		if (err != TEGRABL_NO_ERROR) {
    9600639c:	35000180 	cbnz	w0, 960063cc <tegrabl_display_unit_init+0xcc>
		err = tegrabl_edid_get_mode(mode, TEGRABL_MODULE_I2C, i2c_instance);
    960063a0:	528001a1 	mov	w1, #0xd                   	// #13
    960063a4:	aa1703e0 	mov	x0, x23
    960063a8:	b9404fa2 	ldr	w2, [x29, #76]
    960063ac:	17ffffed 	b	96006360 <tegrabl_display_unit_init+0x60>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    960063b0:	52800015 	mov	w21, #0x0                   	// #0
		pr_error("%s: display type %d is not supported\n", __func__, du_type);
    960063b4:	2a1603e2 	mov	w2, w22
    960063b8:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    960063bc:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    960063c0:	91371421 	add	x1, x1, #0xdc5
    960063c4:	91395c00 	add	x0, x0, #0xe57
    960063c8:	940070aa 	bl	96022670 <tegrabl_printf>
		tegrabl_free(mode);
    960063cc:	aa1703e0 	mov	x0, x23
    960063d0:	940081ba 	bl	96026ab8 <tegrabl_free>
		if (err != TEGRABL_NO_ERROR) {
    960063d4:	340000d5 	cbz	w21, 960063ec <tegrabl_display_unit_init+0xec>
		tegrabl_free(du);
    960063d8:	aa1303e0 	mov	x0, x19
	return NULL;
    960063dc:	d2800013 	mov	x19, #0x0                   	// #0
		tegrabl_free(du);
    960063e0:	940081b6 	bl	96026ab8 <tegrabl_free>
    960063e4:	14000022 	b	9600646c <tegrabl_display_unit_init+0x16c>
	pdata->mode = mode;
    960063e8:	f9000a97 	str	x23, [x20, #16]
	nvdisp = tegrabl_nvdisp_init(type, pdata);
    960063ec:	2a1603e0 	mov	w0, w22
    960063f0:	aa1403e1 	mov	x1, x20
    960063f4:	94000243 	bl	96006d00 <tegrabl_nvdisp_init>
    960063f8:	aa0003f6 	mov	x22, x0
	if (nvdisp == NULL) {
    960063fc:	b4fffee0 	cbz	x0, 960063d8 <tegrabl_display_unit_init+0xd8>
	tegrabl_nvdisp_list_windows(nvdisp, &count);
    96006400:	910133a1 	add	x1, x29, #0x4c
    96006404:	9400028c 	bl	96006e34 <tegrabl_nvdisp_list_windows>
	surf = tegrabl_malloc(sizeof(struct tegrabl_surface));
    96006408:	d2800600 	mov	x0, #0x30                  	// #48
    9600640c:	9400819b 	bl	96026a78 <tegrabl_malloc>
    96006410:	aa0003f5 	mov	x21, x0
	if (surf == NULL) {
    96006414:	b4fffe20 	cbz	x0, 960063d8 <tegrabl_display_unit_init+0xd8>
	surf->height = pdata->mode->v_active;
    96006418:	f9400a81 	ldr	x1, [x20, #16]
    9600641c:	b9402422 	ldr	w2, [x1, #36]
	surf->width = pdata->mode->h_active;
    96006420:	b9402021 	ldr	w1, [x1, #32]
	surf->height = pdata->mode->v_active;
    96006424:	29000801 	stp	w1, w2, [x0]
	err = tegrabl_surface_setup(surf);
    96006428:	9400894a 	bl	96028950 <tegrabl_surface_setup>
	if (err != TEGRABL_NO_ERROR) {
    9600642c:	350002c0 	cbnz	w0, 96006484 <tegrabl_display_unit_init+0x184>
	tegrabl_nvdisp_configure_window(nvdisp, du->win_id, surf);
    96006430:	b9401661 	ldr	w1, [x19, #20]
    96006434:	aa1503e2 	mov	x2, x21
    96006438:	aa1603e0 	mov	x0, x22
    9600643c:	94000280 	bl	96006e3c <tegrabl_nvdisp_configure_window>
	du->nvdisp = nvdisp;
    96006440:	f9001a76 	str	x22, [x19, #48]
	display_unit_set_surface(du, 0, surf);
    96006444:	aa1503e2 	mov	x2, x21
    96006448:	52800001 	mov	w1, #0x0                   	// #0
    9600644c:	aa1303e0 	mov	x0, x19
    96006450:	97ffff3b 	bl	9600613c <display_unit_set_surface>
	du->is_init_done = true;
    96006454:	52800020 	mov	w0, #0x1                   	// #1
    96006458:	3900b260 	strb	w0, [x19, #44]
	err = tegrabl_display_unit_clear(du);
    9600645c:	aa1303e0 	mov	x0, x19
    96006460:	97ffff81 	bl	96006264 <tegrabl_display_unit_clear>
	if (err != TEGRABL_NO_ERROR) {
    96006464:	35000100 	cbnz	w0, 96006484 <tegrabl_display_unit_init+0x184>
	tegrabl_render_text_set_rotation_angle(rotation);
    96006468:	940089b3 	bl	96028b34 <tegrabl_render_text_set_rotation_angle>
}
    9600646c:	aa1303e0 	mov	x0, x19
    96006470:	f9401bf7 	ldr	x23, [sp, #48]
    96006474:	a94153f3 	ldp	x19, x20, [sp, #16]
    96006478:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600647c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96006480:	d65f03c0 	ret
		tegrabl_free(surf);
    96006484:	aa1503e0 	mov	x0, x21
    96006488:	9400818c 	bl	96026ab8 <tegrabl_free>
    9600648c:	17ffffd3 	b	960063d8 <tegrabl_display_unit_init+0xd8>

0000000096006490 <tegrabl_display_unit_ioctl>:

tegrabl_error_t tegrabl_display_unit_ioctl(struct tegrabl_display_unit *du,
										   uint32_t ioctl, void *args)
{
    96006490:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96006494:	910003fd 	mov	x29, sp
    96006498:	a90153f3 	stp	x19, x20, [sp, #16]
	struct tegrabl_nvdisp *nvdisp;
	uint32_t position;

	pr_debug("display console ioctl = %d\n", ioctl);

	if (du == NULL) {
    9600649c:	b5000180 	cbnz	x0, 960064cc <tegrabl_display_unit_ioctl+0x3c>
		pr_error("display unit handle is null\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 8);
    960064a0:	52810053 	mov	w19, #0x802                 	// #2050
		pr_error("display unit handle is null\n");
    960064a4:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    960064a8:	913a5c00 	add	x0, x0, #0xe97
    960064ac:	94007071 	bl	96022670 <tegrabl_printf>

	case DISPLAY_UNIT_IOCTL_GET_DISPLAY_PARAMS:
		disp_params = (struct tegrabl_display_unit_params *)args;
		surf = display_unit_get_surface(du, 0);
		if (!surf) {
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 10);
    960064b0:	72a8c8d3 	movk	w19, #0x4646, lsl #16
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
		break;
	}
fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s: exit error\n", __func__);
    960064b4:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    960064b8:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    960064bc:	91387821 	add	x1, x1, #0xe1e
    960064c0:	913b4c00 	add	x0, x0, #0xed3
    960064c4:	9400706b 	bl	96022670 <tegrabl_printf>
    960064c8:	14000010 	b	96006508 <tegrabl_display_unit_ioctl+0x78>
	switch (ioctl) {
    960064cc:	7100103f 	cmp	w1, #0x4
    960064d0:	540007a8 	b.hi	960065c4 <tegrabl_display_unit_ioctl+0x134>  // b.pmore
    960064d4:	aa0003f3 	mov	x19, x0
    960064d8:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    960064dc:	91370000 	add	x0, x0, #0xdc0
    960064e0:	38614800 	ldrb	w0, [x0, w1, uxtw]
    960064e4:	10000061 	adr	x1, 960064f0 <tegrabl_display_unit_ioctl+0x60>
    960064e8:	8b208820 	add	x0, x1, w0, sxtb #2
    960064ec:	d61f0000 	br	x0
		rotation_angle = *(uint32_t *)args;
    960064f0:	b9400053 	ldr	w19, [x2]
		tegrabl_render_text_set_rotation_angle(rotation_angle);
    960064f4:	2a1303e0 	mov	w0, w19
    960064f8:	9400898f 	bl	96028b34 <tegrabl_render_text_set_rotation_angle>
		tegrabl_render_image_set_rotation_angle(rotation_angle);
    960064fc:	2a1303e0 	mov	w0, w19
    96006500:	940089b4 	bl	96028bd0 <tegrabl_render_image_set_rotation_angle>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96006504:	52800013 	mov	w19, #0x0                   	// #0
	}
	return err;
}
    96006508:	2a1303e0 	mov	w0, w19
    9600650c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96006510:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96006514:	d65f03c0 	ret
		if (font == NULL) {
    96006518:	b40005a2 	cbz	x2, 960065cc <tegrabl_display_unit_ioctl+0x13c>
		tegrabl_render_text_set_font(font->type, font->size);
    9600651c:	29400440 	ldp	w0, w1, [x2]
    96006520:	940089a3 	bl	96028bac <tegrabl_render_text_set_font>
    96006524:	17fffff8 	b	96006504 <tegrabl_display_unit_ioctl+0x74>
	return du->surf[win_idx];
    96006528:	f9400e60 	ldr	x0, [x19, #24]
		if (!surf) {
    9600652c:	b4000540 	cbz	x0, 960065d4 <tegrabl_display_unit_ioctl+0x144>
		disp_params->size = surf->size;
    96006530:	b9401801 	ldr	w1, [x0, #24]
    96006534:	b9000041 	str	w1, [x2]
		disp_params->height = surf->height;
    96006538:	b9400401 	ldr	w1, [x0, #4]
    9600653c:	b9001841 	str	w1, [x2, #24]
		disp_params->width = surf->width;
    96006540:	b9400001 	ldr	w1, [x0]
		disp_params->addr = (uintptr_t)surf->base;
    96006544:	f9400800 	ldr	x0, [x0, #16]
    96006548:	f9000440 	str	x0, [x2, #8]
		nvdisp = du->nvdisp;
    9600654c:	f9401a60 	ldr	x0, [x19, #48]
		disp_params->width = surf->width;
    96006550:	b9001c41 	str	w1, [x2, #28]
		disp_params->instance = nvdisp->instance;
    96006554:	b9400001 	ldr	w1, [x0]
		disp_params->lut_addr = nvdisp->cmu_base_addr;
    96006558:	f9402800 	ldr	x0, [x0, #80]
    9600655c:	f9001040 	str	x0, [x2, #32]
		disp_params->lut_size = sizeof(struct nvdisp_cmu);
    96006560:	52840100 	mov	w0, #0x2008                	// #8200
    96006564:	b9002840 	str	w0, [x2, #40]
		disp_params->rotation_angle = du->rotation_angle;
    96006568:	b9402a60 	ldr	w0, [x19, #40]
		disp_params->instance = nvdisp->instance;
    9600656c:	b9001041 	str	w1, [x2, #16]
		disp_params->rotation_angle = du->rotation_angle;
    96006570:	b9001440 	str	w0, [x2, #20]
    96006574:	17ffffe4 	b	96006504 <tegrabl_display_unit_ioctl+0x74>
		position = *(uint32_t *)args;
    96006578:	b9400054 	ldr	w20, [x2]
		font = tegrabl_render_text_get_font();
    9600657c:	94008984 	bl	96028b8c <tegrabl_render_text_get_font>
		if (position == CURSOR_START)
    96006580:	350000b4 	cbnz	w20, 96006594 <tegrabl_display_unit_ioctl+0x104>
			tegrabl_render_text_set_position(0 , 0);
    96006584:	52800001 	mov	w1, #0x0                   	// #0
			tegrabl_render_text_set_position(0 , surf->height - end_rows *
    96006588:	52800000 	mov	w0, #0x0                   	// #0
    9600658c:	94008983 	bl	96028b98 <tegrabl_render_text_set_position>
    96006590:	17ffffdd 	b	96006504 <tegrabl_display_unit_ioctl+0x74>
		else if (position == CURSOR_CENTER)
    96006594:	7100069f 	cmp	w20, #0x1
	return du->surf[win_idx];
    96006598:	f9400e62 	ldr	x2, [x19, #24]
		else if (position == CURSOR_CENTER)
    9600659c:	54000081 	b.ne	960065ac <tegrabl_display_unit_ioctl+0x11c>  // b.any
			tegrabl_render_text_set_position(0 , surf->height / 2);
    960065a0:	b9400441 	ldr	w1, [x2, #4]
    960065a4:	53017c21 	lsr	w1, w1, #1
    960065a8:	17fffff8 	b	96006588 <tegrabl_display_unit_ioctl+0xf8>
		else if (position == CURSOR_END)
    960065ac:	71000a9f 	cmp	w20, #0x2
    960065b0:	54000161 	b.ne	960065dc <tegrabl_display_unit_ioctl+0x14c>  // b.any
			tegrabl_render_text_set_position(0 , surf->height - end_rows *
    960065b4:	b9401400 	ldr	w0, [x0, #20]
    960065b8:	b9400441 	ldr	w1, [x2, #4]
    960065bc:	4b000421 	sub	w1, w1, w0, lsl #1
    960065c0:	17fffff2 	b	96006588 <tegrabl_display_unit_ioctl+0xf8>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
    960065c4:	52816053 	mov	w19, #0xb02                 	// #2818
    960065c8:	17ffffba 	b	960064b0 <tegrabl_display_unit_ioctl+0x20>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
    960065cc:	52812053 	mov	w19, #0x902                 	// #2306
    960065d0:	17ffffb8 	b	960064b0 <tegrabl_display_unit_ioctl+0x20>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 10);
    960065d4:	52814053 	mov	w19, #0xa02                 	// #2562
    960065d8:	17ffffb6 	b	960064b0 <tegrabl_display_unit_ioctl+0x20>
			return TEGRABL_ERR_INVALID_CONFIG;
    960065dc:	52800393 	mov	w19, #0x1c                  	// #28
    960065e0:	17ffffca 	b	96006508 <tegrabl_display_unit_ioctl+0x78>

00000000960065e4 <tegrabl_display_unit_shutdown>:

tegrabl_error_t tegrabl_display_unit_shutdown(struct tegrabl_display_unit *du)
{
    960065e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960065e8:	910003fd 	mov	x29, sp
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	struct tegrabl_nvdisp *nvdisp;

	if (du == NULL || du->nvdisp == NULL) {
    960065ec:	b4000080 	cbz	x0, 960065fc <tegrabl_display_unit_shutdown+0x18>
    960065f0:	aa0003e1 	mov	x1, x0
    960065f4:	f9401800 	ldr	x0, [x0, #48]
    960065f8:	b50001a0 	cbnz	x0, 9600662c <tegrabl_display_unit_shutdown+0x48>
		pr_error("du or nvdisp handle is null\n");
    960065fc:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006600:	913c4000 	add	x0, x0, #0xf10
    96006604:	9400701b 	bl	96022670 <tegrabl_printf>
	/* TODO: Handle this while enabling DSI */
	/* tegrabl_panel_shutdown(); */

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s: exit error\n", __func__);
    96006608:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    9600660c:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006610:	9138e421 	add	x1, x1, #0xe39
    96006614:	913b4c00 	add	x0, x0, #0xed3
    96006618:	94007016 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
    9600661c:	52818040 	mov	w0, #0xc02                 	// #3074
    96006620:	72a8c8c0 	movk	w0, #0x4646, lsl #16
	}

	return err;
}
    96006624:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96006628:	d65f03c0 	ret
	if (du->is_init_done != true) {
    9600662c:	3940b021 	ldrb	w1, [x1, #44]
    96006630:	340000c1 	cbz	w1, 96006648 <tegrabl_display_unit_shutdown+0x64>
	if (nvdisp->out_ops && nvdisp->out_ops->disable) {
    96006634:	f9403401 	ldr	x1, [x0, #104]
    96006638:	b4000081 	cbz	x1, 96006648 <tegrabl_display_unit_shutdown+0x64>
    9600663c:	f9400c21 	ldr	x1, [x1, #24]
    96006640:	b4000041 	cbz	x1, 96006648 <tegrabl_display_unit_shutdown+0x64>
		nvdisp->out_ops->disable(nvdisp);
    96006644:	d63f0020 	blr	x1
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96006648:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    9600664c:	17fffff6 	b	96006624 <tegrabl_display_unit_shutdown+0x40>

0000000096006650 <nvdisp_set_head_clk>:
fail:
	return err;
}

static void nvdisp_set_head_clk(uint32_t module, uint32_t instance, uint32_t clk_src, uint32_t rate)
{
    96006650:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96006654:	910003fd 	mov	x29, sp
    96006658:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t rate_khz;

	tegrabl_car_rst_set(module, instance);
    9600665c:	12001c33 	and	w19, w1, #0xff
{
    96006660:	a9025bf5 	stp	x21, x22, [sp, #32]
    96006664:	2a0003f4 	mov	w20, w0
    96006668:	2a0203f6 	mov	w22, w2
    9600666c:	2a0303f5 	mov	w21, w3
	tegrabl_car_rst_set(module, instance);
    96006670:	2a1303e1 	mov	w1, w19
    96006674:	94006503 	bl	9601fa80 <tegrabl_car_rst_set>
	tegrabl_car_set_clk_src(module, instance, clk_src);
    96006678:	2a1603e2 	mov	w2, w22
    9600667c:	2a1303e1 	mov	w1, w19
    96006680:	2a1403e0 	mov	w0, w20
    96006684:	94006431 	bl	9601f748 <tegrabl_car_set_clk_src>
	if (rate != 0) {
    96006688:	340000d5 	cbz	w21, 960066a0 <nvdisp_set_head_clk+0x50>
		tegrabl_car_set_clk_rate(module, instance, rate, &rate_khz);
    9600668c:	9100f3a3 	add	x3, x29, #0x3c
    96006690:	2a1503e2 	mov	w2, w21
    96006694:	2a1303e1 	mov	w1, w19
    96006698:	2a1403e0 	mov	w0, w20
    9600669c:	940064dc 	bl	9601fa0c <tegrabl_car_set_clk_rate>
	}
	tegrabl_udelay(5);
    960066a0:	d28000a0 	mov	x0, #0x5                   	// #5
    960066a4:	94006580 	bl	9601fca4 <tegrabl_udelay>

	tegrabl_car_clk_enable(module, instance, NULL);
    960066a8:	d2800002 	mov	x2, #0x0                   	// #0
    960066ac:	2a1303e1 	mov	w1, w19
    960066b0:	2a1403e0 	mov	w0, w20
    960066b4:	94006486 	bl	9601f8cc <tegrabl_car_clk_enable>
	tegrabl_car_rst_clear(module, instance);
    960066b8:	2a1303e1 	mov	w1, w19
    960066bc:	2a1403e0 	mov	w0, w20
    960066c0:	940064f7 	bl	9601fa9c <tegrabl_car_rst_clear>
	tegrabl_udelay(5);
    960066c4:	d28000a0 	mov	x0, #0x5                   	// #5
    960066c8:	94006577 	bl	9601fca4 <tegrabl_udelay>
}
    960066cc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960066d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960066d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960066d8:	d65f03c0 	ret

00000000960066dc <nvdisp_clk_setup>:

void nvdisp_clk_setup(struct tegrabl_nvdisp *nvdisp)
{
    960066dc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960066e0:	910003fd 	mov	x29, sp
    960066e4:	a90153f3 	stp	x19, x20, [sp, #16]
    960066e8:	aa0003f3 	mov	x19, x0
	int32_t i;
	uint32_t rate_khz;
	uint32_t pclk = (nvdisp->mode->pclk / KHZ);
    960066ec:	f9402400 	ldr	x0, [x0, #72]
{
    960066f0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960066f4:	a90363f7 	stp	x23, x24, [sp, #48]
	uint32_t pclk = (nvdisp->mode->pclk / KHZ);
    960066f8:	b9400014 	ldr	w20, [x0]
    960066fc:	52807d00 	mov	w0, #0x3e8                 	// #1000
    96006700:	1ac00a94 	udiv	w20, w20, w0
	 * divider to divide it down.
	 */
	if (clk_src_rate < 27000) {
		pr_debug("%s: clk_src_rate %d KHz < 27000 KHz, set to %d KHz\n", __func__, clk_src_rate,
				 clk_src_rate * 2);
		clk_src_rate *= 2;
    96006704:	528d2ee0 	mov	w0, #0x6977                	// #26999
    96006708:	6b00029f 	cmp	w20, w0
	}

	if (nvdisp->parent_clk == TEGRABL_CLK_SRC_PLLD3_OUT0) {
    9600670c:	b9400660 	ldr	w0, [x19, #4]
		clk_src_rate *= 2;
    96006710:	531f7a81 	lsl	w1, w20, #1
    96006714:	1a949021 	csel	w1, w1, w20, ls  // ls = plast
	if (nvdisp->parent_clk == TEGRABL_CLK_SRC_PLLD3_OUT0) {
    96006718:	7100441f 	cmp	w0, #0x11
    9600671c:	540013c1 	b.ne	96006994 <nvdisp_clk_setup+0x2b8>  // b.any
		tegrabl_car_init_pll_with_rate(TEGRABL_CLK_PLL_ID_PLLD3, clk_src_rate, NULL);
    96006720:	d2800002 	mov	x2, #0x0                   	// #0
    96006724:	528001c0 	mov	w0, #0xe                   	// #14
	} else if (nvdisp->parent_clk == TEGRABL_CLK_SRC_PLLD2_OUT0) {
		tegrabl_car_init_pll_with_rate(TEGRABL_CLK_PLL_ID_PLLD2, clk_src_rate, NULL);
    96006728:	94006442 	bl	9601f830 <tegrabl_car_init_pll_with_rate>
		tegrabl_car_init_pll_with_rate(TEGRABL_CLK_PLL_ID_PLLD, clk_src_rate, NULL);
	} else {
		pr_critical("%s: invalid clock source for nvdisp\n", __func__);
	}

	if (nvdisp->type == DISPLAY_OUT_DP) {
    9600672c:	b9403a60 	ldr	w0, [x19, #56]
    96006730:	71000c1f 	cmp	w0, #0x3
    96006734:	540000c1 	b.ne	9600674c <nvdisp_clk_setup+0x70>  // b.any
		tegrabl_car_init_pll_with_rate(TEGRABL_CLK_PLL_ID_PLLDP, TEGRABL_DP_CLK, NULL);
    96006738:	5283d601 	mov	w1, #0x1eb0                	// #7856
    9600673c:	d2800002 	mov	x2, #0x0                   	// #0
    96006740:	72a00081 	movk	w1, #0x4, lsl #16
    96006744:	52800080 	mov	w0, #0x4                   	// #4
    96006748:	9400643a 	bl	9601f830 <tegrabl_car_init_pll_with_rate>
	}

	if (!is_initialized) {
    9600674c:	90000355 	adrp	x21, 9606e000 <__bss_start>
    96006750:	395112a0 	ldrb	w0, [x21, #1092]
    96006754:	350002c0 	cbnz	w0, 960067ac <nvdisp_clk_setup+0xd0>
		/* Set HOST1X clock */
		tegrabl_car_rst_set(nvdisp->module_host1x, 0);
    96006758:	b9401660 	ldr	w0, [x19, #20]
    9600675c:	52800001 	mov	w1, #0x0                   	// #0
    96006760:	940064c8 	bl	9601fa80 <tegrabl_car_rst_set>
		tegrabl_car_set_clk_src(nvdisp->module_host1x, 0, TEGRABL_CLK_SRC_PLLP_OUT0);
    96006764:	b9401660 	ldr	w0, [x19, #20]
    96006768:	52800062 	mov	w2, #0x3                   	// #3
    9600676c:	52800001 	mov	w1, #0x0                   	// #0
    96006770:	940063f6 	bl	9601f748 <tegrabl_car_set_clk_src>
		tegrabl_udelay(5);
    96006774:	d28000a0 	mov	x0, #0x5                   	// #5
    96006778:	9400654b 	bl	9601fca4 <tegrabl_udelay>
		tegrabl_car_clk_enable(nvdisp->module_host1x, 0, NULL);
    9600677c:	b9401660 	ldr	w0, [x19, #20]
    96006780:	d2800002 	mov	x2, #0x0                   	// #0
    96006784:	52800001 	mov	w1, #0x0                   	// #0
    96006788:	94006451 	bl	9601f8cc <tegrabl_car_clk_enable>
		tegrabl_car_rst_clear(nvdisp->module_host1x, 0);
    9600678c:	b9401660 	ldr	w0, [x19, #20]
    96006790:	52800001 	mov	w1, #0x0                   	// #0
    96006794:	940064c2 	bl	9601fa9c <tegrabl_car_rst_clear>
		tegrabl_udelay(5);
    96006798:	d28000a0 	mov	x0, #0x5                   	// #5
    9600679c:	94006542 	bl	9601fca4 <tegrabl_udelay>

		tegrabl_car_rst_set(TEGRABL_MODULE_NVDISPLAY0_HEAD, 0);
    960067a0:	52800001 	mov	w1, #0x0                   	// #0
    960067a4:	52800480 	mov	w0, #0x24                  	// #36
    960067a8:	940064b6 	bl	9601fa80 <tegrabl_car_rst_set>
	}
	tegrabl_car_rst_set(TEGRABL_MODULE_NVDISPLAY0_HEAD, nvdisp->instance);
    960067ac:	39400261 	ldrb	w1, [x19]
    960067b0:	52800480 	mov	w0, #0x24                  	// #36
    960067b4:	940064b3 	bl	9601fa80 <tegrabl_car_rst_set>

	if (!is_initialized) {
    960067b8:	395112a0 	ldrb	w0, [x21, #1092]
    960067bc:	35000160 	cbnz	w0, 960067e8 <nvdisp_clk_setup+0x10c>
		for (i = 0; i < N_WINDOWS; i++) {
    960067c0:	52800016 	mov	w22, #0x0                   	// #0
			tegrabl_car_rst_set(TEGRABL_MODULE_NVDISPLAY0_WGRP, i);
    960067c4:	2a1603e1 	mov	w1, w22
    960067c8:	528004a0 	mov	w0, #0x25                  	// #37
		for (i = 0; i < N_WINDOWS; i++) {
    960067cc:	110006d6 	add	w22, w22, #0x1
			tegrabl_car_rst_set(TEGRABL_MODULE_NVDISPLAY0_WGRP, i);
    960067d0:	940064ac 	bl	9601fa80 <tegrabl_car_rst_set>
		for (i = 0; i < N_WINDOWS; i++) {
    960067d4:	71001adf 	cmp	w22, #0x6
    960067d8:	54ffff61 	b.ne	960067c4 <nvdisp_clk_setup+0xe8>  // b.any
		}

		tegrabl_car_rst_set(TEGRABL_MODULE_NVDISPLAY0_MISC, 0);
    960067dc:	52800001 	mov	w1, #0x0                   	// #0
    960067e0:	528004c0 	mov	w0, #0x26                  	// #38
    960067e4:	940064a7 	bl	9601fa80 <tegrabl_car_rst_set>
    960067e8:	90000357 	adrp	x23, 9606e000 <__bss_start>

	for (i = 0; i < NVDISP_MAX_HEADS; i++) {
		if (nvdisp->instance == i) {
			nvdisp_set_head_clk(nvdisp->module_nvdisp_p0, i, nvdisp->parent_clk, pclk);
			is_head_initialized[i] = true;
		} else if (is_head_initialized[i] != true) {
    960067ec:	911102f7 	add	x23, x23, #0x440
		for (i = 0; i < N_WINDOWS; i++) {
    960067f0:	d2800016 	mov	x22, #0x0                   	// #0
			is_head_initialized[i] = true;
    960067f4:	52800038 	mov	w24, #0x1                   	// #1
		if (nvdisp->instance == i) {
    960067f8:	b9400261 	ldr	w1, [x19]
    960067fc:	6b16003f 	cmp	w1, w22
    96006800:	54000ea1 	b.ne	960069d4 <nvdisp_clk_setup+0x2f8>  // b.any
			nvdisp_set_head_clk(nvdisp->module_nvdisp_p0, i, nvdisp->parent_clk, pclk);
    96006804:	b9400662 	ldr	w2, [x19, #4]
    96006808:	2a1403e3 	mov	w3, w20
    9600680c:	b9402260 	ldr	w0, [x19, #32]
    96006810:	97ffff90 	bl	96006650 <nvdisp_set_head_clk>
			is_head_initialized[i] = true;
    96006814:	38376ad8 	strb	w24, [x22, x23]
    96006818:	910006d6 	add	x22, x22, #0x1
	for (i = 0; i < NVDISP_MAX_HEADS; i++) {
    9600681c:	f1000edf 	cmp	x22, #0x3
    96006820:	54fffec1 	b.ne	960067f8 <nvdisp_clk_setup+0x11c>  // b.any
			nvdisp_set_head_clk(nvdisp->module_nvdisp_p0, i, TEGRABL_CLK_SRC_CLK_M, 0);
		}
	}

	if (!is_initialized) {
    96006824:	395112a0 	ldrb	w0, [x21, #1092]
    96006828:	35000260 	cbnz	w0, 96006874 <nvdisp_clk_setup+0x198>
		/* Set NVDISP_HUB clock */
		tegrabl_car_rst_set(nvdisp->module_nvdisp_hub, 0);
    9600682c:	b9401a60 	ldr	w0, [x19, #24]
    96006830:	52800001 	mov	w1, #0x0                   	// #0
    96006834:	94006493 	bl	9601fa80 <tegrabl_car_rst_set>
		tegrabl_car_set_clk_src(nvdisp->module_nvdisp_hub, 0, TEGRABL_CLK_SRC_PLLDISPHUB);
    96006838:	b9401a60 	ldr	w0, [x19, #24]
    9600683c:	528003a2 	mov	w2, #0x1d                  	// #29
    96006840:	52800001 	mov	w1, #0x0                   	// #0
    96006844:	940063c1 	bl	9601f748 <tegrabl_car_set_clk_src>
		tegrabl_udelay(5);
    96006848:	d28000a0 	mov	x0, #0x5                   	// #5
    9600684c:	94006516 	bl	9601fca4 <tegrabl_udelay>
		tegrabl_car_clk_enable(nvdisp->module_nvdisp_hub, 0, NULL);
    96006850:	b9401a60 	ldr	w0, [x19, #24]
    96006854:	d2800002 	mov	x2, #0x0                   	// #0
    96006858:	52800001 	mov	w1, #0x0                   	// #0
    9600685c:	9400641c 	bl	9601f8cc <tegrabl_car_clk_enable>
		tegrabl_car_rst_clear(nvdisp->module_nvdisp_hub, 0);
    96006860:	b9401a60 	ldr	w0, [x19, #24]
    96006864:	52800001 	mov	w1, #0x0                   	// #0
    96006868:	9400648d 	bl	9601fa9c <tegrabl_car_rst_clear>
		tegrabl_udelay(5);
    9600686c:	d28000a0 	mov	x0, #0x5                   	// #5
    96006870:	9400650d 	bl	9601fca4 <tegrabl_udelay>
	}

	if (pclk > max_disp_clk) {
    96006874:	90000356 	adrp	x22, 9606e000 <__bss_start>
    96006878:	b9444ac0 	ldr	w0, [x22, #1096]
    9600687c:	6b14001f 	cmp	w0, w20
    96006880:	54000042 	b.cs	96006888 <nvdisp_clk_setup+0x1ac>  // b.hs, b.nlast
		max_disp_clk = pclk;  /*disp clk should always be max of all the head clks*/
    96006884:	b9044ad4 	str	w20, [x22, #1096]
	}

	/* Set NVDISP_DISP clock */
	tegrabl_car_rst_set(nvdisp->module_nvdisp, 0);
    96006888:	b9401260 	ldr	w0, [x19, #16]
    9600688c:	52800001 	mov	w1, #0x0                   	// #0
    96006890:	9400647c 	bl	9601fa80 <tegrabl_car_rst_set>
	tegrabl_car_set_clk_src(nvdisp->module_nvdisp, 0, TEGRABL_CLK_SRC_NVDISPLAY_P0_CLK + nvdisp->instance);
    96006894:	b9401260 	ldr	w0, [x19, #16]
    96006898:	52800001 	mov	w1, #0x0                   	// #0
    9600689c:	b9400262 	ldr	w2, [x19]
    960068a0:	11004c42 	add	w2, w2, #0x13
    960068a4:	940063a9 	bl	9601f748 <tegrabl_car_set_clk_src>
	tegrabl_car_set_clk_rate(nvdisp->module_nvdisp, 0, max_disp_clk, &rate_khz);
    960068a8:	b9444ac2 	ldr	w2, [x22, #1096]
    960068ac:	910133a3 	add	x3, x29, #0x4c
    960068b0:	b9401260 	ldr	w0, [x19, #16]
    960068b4:	52800001 	mov	w1, #0x0                   	// #0
    960068b8:	94006455 	bl	9601fa0c <tegrabl_car_set_clk_rate>
	tegrabl_udelay(5);
    960068bc:	d28000a0 	mov	x0, #0x5                   	// #5
    960068c0:	940064f9 	bl	9601fca4 <tegrabl_udelay>
	tegrabl_car_clk_enable(nvdisp->module_nvdisp, 0, NULL);
    960068c4:	b9401260 	ldr	w0, [x19, #16]
    960068c8:	d2800002 	mov	x2, #0x0                   	// #0
    960068cc:	52800001 	mov	w1, #0x0                   	// #0
    960068d0:	940063ff 	bl	9601f8cc <tegrabl_car_clk_enable>
	tegrabl_car_rst_clear(nvdisp->module_nvdisp, 0);
    960068d4:	b9401260 	ldr	w0, [x19, #16]
    960068d8:	52800001 	mov	w1, #0x0                   	// #0
    960068dc:	94006470 	bl	9601fa9c <tegrabl_car_rst_clear>
	tegrabl_udelay(5);
    960068e0:	d28000a0 	mov	x0, #0x5                   	// #5
    960068e4:	940064f0 	bl	9601fca4 <tegrabl_udelay>

	if (!is_initialized) {
    960068e8:	395112a0 	ldrb	w0, [x21, #1092]
    960068ec:	35000400 	cbnz	w0, 9600696c <nvdisp_clk_setup+0x290>
	#if defined(IS_T186) /*DSC is deprecated in T194*/
		/* Set NVDISP_DSC clock */
		tegrabl_car_rst_set(nvdisp->module_nvdisp_dsc, 0);
    960068f0:	b9401e60 	ldr	w0, [x19, #28]
    960068f4:	52800001 	mov	w1, #0x0                   	// #0
		tegrabl_car_clk_enable(nvdisp->module_nvdisp_dsc, 0, NULL);
		tegrabl_car_rst_clear(nvdisp->module_nvdisp_dsc, 0);
		tegrabl_udelay(5);
	#endif

		for (i = 0; i < N_WINDOWS; i++) {
    960068f8:	52800014 	mov	w20, #0x0                   	// #0
		tegrabl_car_rst_set(nvdisp->module_nvdisp_dsc, 0);
    960068fc:	94006461 	bl	9601fa80 <tegrabl_car_rst_set>
		tegrabl_car_set_clk_src(nvdisp->module_nvdisp_dsc, 0, TEGRABL_CLK_SRC_NVDISPLAY_P0_CLK);
    96006900:	b9401e60 	ldr	w0, [x19, #28]
    96006904:	52800262 	mov	w2, #0x13                  	// #19
    96006908:	52800001 	mov	w1, #0x0                   	// #0
    9600690c:	9400638f 	bl	9601f748 <tegrabl_car_set_clk_src>
		tegrabl_udelay(5);
    96006910:	d28000a0 	mov	x0, #0x5                   	// #5
    96006914:	940064e4 	bl	9601fca4 <tegrabl_udelay>
		tegrabl_car_clk_enable(nvdisp->module_nvdisp_dsc, 0, NULL);
    96006918:	b9401e60 	ldr	w0, [x19, #28]
    9600691c:	d2800002 	mov	x2, #0x0                   	// #0
    96006920:	52800001 	mov	w1, #0x0                   	// #0
    96006924:	940063ea 	bl	9601f8cc <tegrabl_car_clk_enable>
		tegrabl_car_rst_clear(nvdisp->module_nvdisp_dsc, 0);
    96006928:	b9401e60 	ldr	w0, [x19, #28]
    9600692c:	52800001 	mov	w1, #0x0                   	// #0
    96006930:	9400645b 	bl	9601fa9c <tegrabl_car_rst_clear>
		tegrabl_udelay(5);
    96006934:	d28000a0 	mov	x0, #0x5                   	// #5
    96006938:	940064db 	bl	9601fca4 <tegrabl_udelay>
			tegrabl_car_rst_clear(TEGRABL_MODULE_NVDISPLAY0_WGRP, i);
    9600693c:	2a1403e1 	mov	w1, w20
    96006940:	528004a0 	mov	w0, #0x25                  	// #37
		for (i = 0; i < N_WINDOWS; i++) {
    96006944:	11000694 	add	w20, w20, #0x1
			tegrabl_car_rst_clear(TEGRABL_MODULE_NVDISPLAY0_WGRP, i);
    96006948:	94006455 	bl	9601fa9c <tegrabl_car_rst_clear>
		for (i = 0; i < N_WINDOWS; i++) {
    9600694c:	71001a9f 	cmp	w20, #0x6
    96006950:	54ffff61 	b.ne	9600693c <nvdisp_clk_setup+0x260>  // b.any
		}

		tegrabl_car_rst_clear(TEGRABL_MODULE_NVDISPLAY0_MISC, 0);
    96006954:	52800001 	mov	w1, #0x0                   	// #0
    96006958:	528004c0 	mov	w0, #0x26                  	// #38
    9600695c:	94006450 	bl	9601fa9c <tegrabl_car_rst_clear>
		tegrabl_car_rst_clear(TEGRABL_MODULE_NVDISPLAY0_HEAD, 0);
    96006960:	52800001 	mov	w1, #0x0                   	// #0
    96006964:	52800480 	mov	w0, #0x24                  	// #36
    96006968:	9400644d 	bl	9601fa9c <tegrabl_car_rst_clear>
	}
	tegrabl_car_rst_clear(TEGRABL_MODULE_NVDISPLAY0_HEAD, nvdisp->instance);
    9600696c:	39400261 	ldrb	w1, [x19]
    96006970:	52800480 	mov	w0, #0x24                  	// #36
    96006974:	9400644a 	bl	9601fa9c <tegrabl_car_rst_clear>

	is_initialized = true;
    96006978:	52800020 	mov	w0, #0x1                   	// #1
    9600697c:	391112a0 	strb	w0, [x21, #1092]
}
    96006980:	a94153f3 	ldp	x19, x20, [sp, #16]
    96006984:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96006988:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600698c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96006990:	d65f03c0 	ret
	} else if (nvdisp->parent_clk == TEGRABL_CLK_SRC_PLLD2_OUT0) {
    96006994:	7100401f 	cmp	w0, #0x10
    96006998:	54000081 	b.ne	960069a8 <nvdisp_clk_setup+0x2cc>  // b.any
		tegrabl_car_init_pll_with_rate(TEGRABL_CLK_PLL_ID_PLLD2, clk_src_rate, NULL);
    9600699c:	d2800002 	mov	x2, #0x0                   	// #0
    960069a0:	52800060 	mov	w0, #0x3                   	// #3
    960069a4:	17ffff61 	b	96006728 <nvdisp_clk_setup+0x4c>
	} else if (nvdisp->parent_clk == TEGRABL_CLK_SRC_PLLD_OUT1) {
    960069a8:	71003c1f 	cmp	w0, #0xf
    960069ac:	54000081 	b.ne	960069bc <nvdisp_clk_setup+0x2e0>  // b.any
		tegrabl_car_init_pll_with_rate(TEGRABL_CLK_PLL_ID_PLLD, clk_src_rate, NULL);
    960069b0:	d2800002 	mov	x2, #0x0                   	// #0
    960069b4:	52800040 	mov	w0, #0x2                   	// #2
    960069b8:	17ffff5c 	b	96006728 <nvdisp_clk_setup+0x4c>
		pr_critical("%s: invalid clock source for nvdisp\n", __func__);
    960069bc:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    960069c0:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    960069c4:	913d2021 	add	x1, x1, #0xf48
    960069c8:	913db400 	add	x0, x0, #0xf6d
    960069cc:	94006f29 	bl	96022670 <tegrabl_printf>
    960069d0:	17ffff57 	b	9600672c <nvdisp_clk_setup+0x50>
		} else if (is_head_initialized[i] != true) {
    960069d4:	38776ac0 	ldrb	w0, [x22, x23]
    960069d8:	35fff200 	cbnz	w0, 96006818 <nvdisp_clk_setup+0x13c>
			nvdisp_set_head_clk(nvdisp->module_nvdisp_p0, i, TEGRABL_CLK_SRC_CLK_M, 0);
    960069dc:	b9402260 	ldr	w0, [x19, #32]
    960069e0:	52800003 	mov	w3, #0x0                   	// #0
    960069e4:	52800022 	mov	w2, #0x1                   	// #1
    960069e8:	2a1603e1 	mov	w1, w22
    960069ec:	97ffff19 	bl	96006650 <nvdisp_set_head_clk>
    960069f0:	17ffff8a 	b	96006818 <nvdisp_clk_setup+0x13c>

00000000960069f4 <nvdisp_enable>:
tegrabl_error_t nvdisp_enable(struct tegrabl_nvdisp *nvdisp)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t val;

	if (!nvdisp || !nvdisp->out_ops) {
    960069f4:	b40017c0 	cbz	x0, 96006cec <nvdisp_enable+0x2f8>
{
    960069f8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960069fc:	910003fd 	mov	x29, sp
	if (!nvdisp || !nvdisp->out_ops) {
    96006a00:	f9403401 	ldr	x1, [x0, #104]
{
    96006a04:	a90153f3 	stp	x19, x20, [sp, #16]
    96006a08:	aa0003f3 	mov	x19, x0
	if (!nvdisp || !nvdisp->out_ops) {
    96006a0c:	b4001761 	cbz	x1, 96006cf8 <nvdisp_enable+0x304>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
		goto fail;
	}

	nvdisp_clk_setup(nvdisp);
    96006a10:	97ffff33 	bl	960066dc <nvdisp_clk_setup>

	/* Disable interrupts during initialization */
	nvdisp_writel(nvdisp, CMD_INT_MASK, 0);
    96006a14:	f9400660 	ldr	x0, [x19, #8]
	nvdisp_writel(nvdisp, CMD_STATE_ACCESS, val);
    96006a18:	528000a1 	mov	w1, #0x5                   	// #5
		val |= NV_DRF_DEF(DC, CMD_INT_ENABLE, MSF_INT_ENABLE, ENABLE);
    96006a1c:	528200c2 	mov	w2, #0x1006                	// #4102
    96006a20:	72a03002 	movk	w2, #0x180, lsl #16
	nvdisp_writel(nvdisp, CMD_INT_MASK, 0);
    96006a24:	b900e01f 	str	wzr, [x0, #224]
	nvdisp_writel(nvdisp, CMD_STATE_ACCESS, val);
    96006a28:	b9010001 	str	w1, [x0, #256]
	nvdisp_writel(nvdisp, CMD_GENERAL_INCR_SYNCPT_CNTRL, val);
    96006a2c:	52802001 	mov	w1, #0x100                 	// #256
    96006a30:	b9000401 	str	w1, [x0, #4]
	nvdisp_writel(nvdisp, CMD_INT_TYPE, val);
    96006a34:	52a78001 	mov	w1, #0x3c000000            	// #1006632960
    96006a38:	b900e801 	str	w1, [x0, #232]
	nvdisp_writel(nvdisp, CMD_INT_TYPE, val);
    96006a3c:	b900e801 	str	w1, [x0, #232]
	nvdisp_writel(nvdisp, CMD_INT_POLARITY, val);
    96006a40:	52821ec1 	mov	w1, #0x10f6                	// #4342
    96006a44:	72a7b001 	movk	w1, #0x3d80, lsl #16
    96006a48:	b900ec01 	str	w1, [x0, #236]
	if (nvdisp->flags & NVDISP_OUT_ONE_SHOT_MODE)
    96006a4c:	f9401661 	ldr	x1, [x19, #40]
		val |= NV_DRF_DEF(DC, CMD_INT_ENABLE, MSF_INT_ENABLE, ENABLE);
    96006a50:	f27d003f 	tst	x1, #0x8
    96006a54:	528000c1 	mov	w1, #0x6                   	// #6
    96006a58:	72a03001 	movk	w1, #0x180, lsl #16
    96006a5c:	1a820021 	csel	w1, w1, w2, eq  // eq = none
	nvdisp_writel(nvdisp, CMD_INT_ENABLE, val);
    96006a60:	b900e401 	str	w1, [x0, #228]
	nvdisp_writel(nvdisp, CMD_INT_MASK, val);
    96006a64:	52a01001 	mov	w1, #0x800000              	// #8388608
    96006a68:	b900e001 	str	w1, [x0, #224]
	cmu = tegrabl_memalign(CMU_ALLIGNMENT_SIZE, sizeof(struct nvdisp_cmu));
    96006a6c:	d2840101 	mov	x1, #0x2008                	// #8200
	nvdisp_writel(nvdisp, DISP_BLEND_BACKGROUND_COLOR, NO_COLOR);
    96006a70:	b913901f 	str	wzr, [x0, #5008]
	cmu = tegrabl_memalign(CMU_ALLIGNMENT_SIZE, sizeof(struct nvdisp_cmu));
    96006a74:	d2820000 	mov	x0, #0x1000                	// #4096
    96006a78:	94008043 	bl	96026b84 <tegrabl_memalign>
    96006a7c:	aa0003f4 	mov	x20, x0
	if (!cmu) {
    96006a80:	b4000fa0 	cbz	x0, 96006c74 <nvdisp_enable+0x280>
	nvdisp_cmu_init_defaults(cmu);
    96006a84:	940001b8 	bl	96007164 <nvdisp_cmu_init_defaults>
	uint32_t val = nvdisp_readl(nvdisp, DISP_DISP_COLOR_CONTROL);
    96006a88:	f9400661 	ldr	x1, [x19, #8]
	switch (nvdisp->depth) {
    96006a8c:	b9404262 	ldr	w2, [x19, #64]
	uint32_t val = nvdisp_readl(nvdisp, DISP_DISP_COLOR_CONTROL);
    96006a90:	b950c020 	ldr	w0, [x1, #4288]
	switch (nvdisp->depth) {
    96006a94:	7100285f 	cmp	w2, #0xa
    96006a98:	121c6c00 	and	w0, w0, #0xfffffff0
    96006a9c:	540001e0 	b.eq	96006ad8 <nvdisp_enable+0xe4>  // b.none
    96006aa0:	7100305f 	cmp	w2, #0xc
    96006aa4:	540001e0 	b.eq	96006ae0 <nvdisp_enable+0xec>  // b.none
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, BASE_COLOR_SIZE,
    96006aa8:	321d0003 	orr	w3, w0, #0x8
    96006aac:	7100005f 	cmp	w2, #0x0
    96006ab0:	1a801060 	csel	w0, w3, w0, ne  // ne = any
	switch (nvdisp->dither) {
    96006ab4:	b9404663 	ldr	w3, [x19, #68]
    96006ab8:	7100107f 	cmp	w3, #0x4
    96006abc:	540001a8 	b.hi	96006af0 <nvdisp_enable+0xfc>  // b.pmore
    96006ac0:	b00001a2 	adrp	x2, 9603b000 <tt_level+0x328>
    96006ac4:	913cc042 	add	x2, x2, #0xf30
    96006ac8:	38634842 	ldrb	w2, [x2, w3, uxtw]
    96006acc:	10000063 	adr	x3, 96006ad8 <nvdisp_enable+0xe4>
    96006ad0:	8b228862 	add	x2, x3, w2, sxtb #2
    96006ad4:	d61f0040 	br	x2
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, BASE_COLOR_SIZE,
    96006ad8:	2a020000 	orr	w0, w0, w2
    96006adc:	17fffff6 	b	96006ab4 <nvdisp_enable+0xc0>
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, BASE_COLOR_SIZE,
    96006ae0:	321e0400 	orr	w0, w0, #0xc
    96006ae4:	17fffff4 	b	96006ab4 <nvdisp_enable+0xc0>
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, DITHER_CONTROL,
    96006ae8:	12167400 	and	w0, w0, #0xfffffcff
	nvdisp_writel(nvdisp, DISP_DISP_COLOR_CONTROL, val);
    96006aec:	b910c020 	str	w0, [x1, #4288]
	nvdisp_cmu_set(nvdisp, cmu);
    96006af0:	aa1403e1 	mov	x1, x20
    96006af4:	aa1303e0 	mov	x0, x19
    96006af8:	940001a7 	bl	96007194 <nvdisp_cmu_set>
	nvdisp_program_mode(nvdisp, nvdisp->mode);
    96006afc:	f9402660 	ldr	x0, [x19, #72]
	if (mode->h_ref_to_sync + mode->h_sync_width + mode->h_back_porch <= 20) {
    96006b00:	b9400805 	ldr	w5, [x0, #8]
    96006b04:	b9401003 	ldr	w3, [x0, #16]
    96006b08:	b9401802 	ldr	w2, [x0, #24]
    96006b0c:	0b0300a1 	add	w1, w5, w3
    96006b10:	0b020021 	add	w1, w1, w2
    96006b14:	7100503f 	cmp	w1, #0x14
    96006b18:	54000649 	b.ls	96006be0 <nvdisp_enable+0x1ec>  // b.plast
	if (mode->v_ref_to_sync + mode->v_sync_width + mode->v_back_porch <= 1) {
    96006b1c:	b9400c04 	ldr	w4, [x0, #12]
    96006b20:	b9401401 	ldr	w1, [x0, #20]
    96006b24:	b9401c02 	ldr	w2, [x0, #28]
    96006b28:	0b010086 	add	w6, w4, w1
    96006b2c:	0b0200c6 	add	w6, w6, w2
    96006b30:	710004df 	cmp	w6, #0x1
    96006b34:	54000569 	b.ls	96006be0 <nvdisp_enable+0x1ec>  // b.plast
	if (mode->v_front_porch + mode->v_sync_width + mode->v_back_porch <= 1) {
    96006b38:	b9402c06 	ldr	w6, [x0, #44]
    96006b3c:	0b020022 	add	w2, w1, w2
    96006b40:	0b060042 	add	w2, w2, w6
    96006b44:	7100045f 	cmp	w2, #0x1
    96006b48:	540004c9 	b.ls	96006be0 <nvdisp_enable+0x1ec>  // b.plast
	if (mode->v_sync_width < 1 || mode->h_sync_width < 1) {
    96006b4c:	340004a1 	cbz	w1, 96006be0 <nvdisp_enable+0x1ec>
    96006b50:	34000483 	cbz	w3, 96006be0 <nvdisp_enable+0x1ec>
	if (mode->v_ref_to_sync < 1) {
    96006b54:	34000464 	cbz	w4, 96006be0 <nvdisp_enable+0x1ec>
	if (mode->v_front_porch < mode->v_ref_to_sync + 1 ||
    96006b58:	11000484 	add	w4, w4, #0x1
    96006b5c:	6b0400df 	cmp	w6, w4
    96006b60:	54000403 	b.cc	96006be0 <nvdisp_enable+0x1ec>  // b.lo, b.ul, b.last
    96006b64:	b9402802 	ldr	w2, [x0, #40]
		mode->h_front_porch < mode->h_ref_to_sync + 1) {
    96006b68:	110004a5 	add	w5, w5, #0x1
	if (mode->v_front_porch < mode->v_ref_to_sync + 1 ||
    96006b6c:	6b05005f 	cmp	w2, w5
    96006b70:	54000383 	b.cc	96006be0 <nvdisp_enable+0x1ec>  // b.lo, b.ul, b.last
	if (mode->h_active < 16 || mode->v_active < 16) {
    96006b74:	b9402002 	ldr	w2, [x0, #32]
    96006b78:	71003c5f 	cmp	w2, #0xf
    96006b7c:	54000329 	b.ls	96006be0 <nvdisp_enable+0x1ec>  // b.plast
    96006b80:	b9402402 	ldr	w2, [x0, #36]
    96006b84:	71003c5f 	cmp	w2, #0xf
    96006b88:	540002c9 	b.ls	96006be0 <nvdisp_enable+0x1ec>  // b.plast
	nvdisp_writel(nvdisp, DISP_SYNC_WIDTH, val);
    96006b8c:	f9400662 	ldr	x2, [x19, #8]
	val = NV_DRF_NUM(DC, DISP_SYNC_WIDTH, H_SYNC_WIDTH, mode->h_sync_width) |
    96006b90:	92403863 	and	x3, x3, #0x7fff
		NV_DRF_NUM(DC, DISP_SYNC_WIDTH, V_SYNC_WIDTH, mode->v_sync_width);
    96006b94:	d3703821 	ubfiz	x1, x1, #16, #15
	val = NV_DRF_NUM(DC, DISP_SYNC_WIDTH, H_SYNC_WIDTH, mode->h_sync_width) |
    96006b98:	aa030021 	orr	x1, x1, x3
	nvdisp_writel(nvdisp, DISP_SYNC_WIDTH, val);
    96006b9c:	b9101c41 	str	w1, [x2, #4124]
		NV_DRF_NUM(DC, DISP_BACK_PORCH, V_BACK_PORCH, mode->v_back_porch);
    96006ba0:	29430403 	ldp	w3, w1, [x0, #24]
	val = NV_DRF_NUM(DC, DISP_BACK_PORCH, H_BACK_PORCH, mode->h_back_porch) |
    96006ba4:	92403863 	and	x3, x3, #0x7fff
		NV_DRF_NUM(DC, DISP_BACK_PORCH, V_BACK_PORCH, mode->v_back_porch);
    96006ba8:	d3703821 	ubfiz	x1, x1, #16, #15
	val = NV_DRF_NUM(DC, DISP_BACK_PORCH, H_BACK_PORCH, mode->h_back_porch) |
    96006bac:	aa030021 	orr	x1, x1, x3
	nvdisp_writel(nvdisp, DISP_BACK_PORCH, val);
    96006bb0:	b9102041 	str	w1, [x2, #4128]
		| NV_DRF_NUM(DC, DISP_FRONT_PORCH, V_FRONT_PORCH, mode->v_front_porch);
    96006bb4:	29450403 	ldp	w3, w1, [x0, #40]
	val = NV_DRF_NUM(DC, DISP_FRONT_PORCH, H_FRONT_PORCH, mode->h_front_porch)
    96006bb8:	92403863 	and	x3, x3, #0x7fff
		| NV_DRF_NUM(DC, DISP_FRONT_PORCH, V_FRONT_PORCH, mode->v_front_porch);
    96006bbc:	d3703821 	ubfiz	x1, x1, #16, #15
	val = NV_DRF_NUM(DC, DISP_FRONT_PORCH, H_FRONT_PORCH, mode->h_front_porch)
    96006bc0:	aa030021 	orr	x1, x1, x3
	nvdisp_writel(nvdisp, DISP_FRONT_PORCH, val);
    96006bc4:	b9102841 	str	w1, [x2, #4136]
			NV_DRF_NUM(DC, DISP_DISP_ACTIVE, V_DISP_ACTIVE, mode->v_active);
    96006bc8:	b9402401 	ldr	w1, [x0, #36]
	val = NV_DRF_NUM(DC, DISP_DISP_ACTIVE, H_DISP_ACTIVE, mode->h_active) |
    96006bcc:	b9402000 	ldr	w0, [x0, #32]
			NV_DRF_NUM(DC, DISP_DISP_ACTIVE, V_DISP_ACTIVE, mode->v_active);
    96006bd0:	d3703821 	ubfiz	x1, x1, #16, #15
	val = NV_DRF_NUM(DC, DISP_DISP_ACTIVE, H_DISP_ACTIVE, mode->h_active) |
    96006bd4:	92403800 	and	x0, x0, #0x7fff
    96006bd8:	aa000020 	orr	x0, x1, x0
	nvdisp_writel(nvdisp, DISP_DISP_ACTIVE, val);
    96006bdc:	b9102440 	str	w0, [x2, #4132]
	if (nvdisp->type == DISPLAY_OUT_HDMI) {
    96006be0:	b9403a62 	ldr	w2, [x19, #56]
    96006be4:	7100045f 	cmp	w2, #0x1
    96006be8:	54000500 	b.eq	96006c88 <nvdisp_enable+0x294>  // b.none
	} else if (nvdisp->type == DISPLAY_OUT_DP) {
    96006bec:	71000c5f 	cmp	w2, #0x3
    96006bf0:	54000620 	b.eq	96006cb4 <nvdisp_enable+0x2c0>  // b.none
	} else if (nvdisp->type == DISPLAY_OUT_DSI) {
    96006bf4:	7100085f 	cmp	w2, #0x2
    96006bf8:	54000341 	b.ne	96006c60 <nvdisp_enable+0x26c>  // b.any
		nvdisp_writel(nvdisp, DISP_CORE_DSI_SET_CONTROL, protocol);
    96006bfc:	f9400660 	ldr	x0, [x19, #8]
    96006c00:	52810001 	mov	w1, #0x800                 	// #2048
    96006c04:	b9101401 	str	w1, [x0, #4116]
		nvdisp_clk_disable(nvdisp);
		err = TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
		goto fail;
	}

	if (nvdisp->out_ops && nvdisp->out_ops->enable) {
    96006c08:	f9403660 	ldr	x0, [x19, #104]
    96006c0c:	b5000640 	cbnz	x0, 96006cd4 <nvdisp_enable+0x2e0>
		}
	}

	val = NV_DRF_DEF(DC, CMD_STATE_CONTROL, GENERAL_ACT_REQ, ENABLE) |
			NV_DRF_DEF(DC, CMD_STATE_CONTROL, WIN_A_ACT_REQ, ENABLE);
	nvdisp_writel(nvdisp, CMD_STATE_CONTROL, val);
    96006c10:	f9400660 	ldr	x0, [x19, #8]
    96006c14:	52800061 	mov	w1, #0x3                   	// #3
    96006c18:	b9010401 	str	w1, [x0, #260]

	val = NV_DRF_DEF(DC, CMD_STATE_CONTROL, GENERAL_UPDATE, ENABLE) |
			NV_DRF_DEF(DC, CMD_STATE_CONTROL, WIN_A_UPDATE, ENABLE);
	nvdisp_writel(nvdisp, CMD_STATE_CONTROL, val);
    96006c1c:	52806001 	mov	w1, #0x300                 	// #768
    96006c20:	b9010401 	str	w1, [x0, #260]

	nvdisp->flags &= ~NVDISP_OUT_INITIALIZED_MODE;
    96006c24:	f9401660 	ldr	x0, [x19, #40]
    96006c28:	9279f800 	and	x0, x0, #0xffffffffffffffbf
    96006c2c:	f9001660 	str	x0, [x19, #40]
    96006c30:	52800000 	mov	w0, #0x0                   	// #0
	pr_debug("%s: EXIT\n", __func__);

fail:
	return err;
}
    96006c34:	a94153f3 	ldp	x19, x20, [sp, #16]
    96006c38:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96006c3c:	d65f03c0 	ret
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, DITHER_CONTROL,
    96006c40:	12167400 	and	w0, w0, #0xfffffcff
    96006c44:	32170000 	orr	w0, w0, #0x200
    96006c48:	17ffffa9 	b	96006aec <nvdisp_enable+0xf8>
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, DITHER_CONTROL,
    96006c4c:	32180400 	orr	w0, w0, #0x300
    96006c50:	17ffffa7 	b	96006aec <nvdisp_enable+0xf8>
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, DITHER_CONTROL,
    96006c54:	12167400 	and	w0, w0, #0xfffffcff
    96006c58:	32180000 	orr	w0, w0, #0x100
    96006c5c:	17ffffa4 	b	96006aec <nvdisp_enable+0xf8>
		pr_error("%s: unsupported out_type=%d\n", __func__, nvdisp->type);
    96006c60:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96006c64:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006c68:	913cd421 	add	x1, x1, #0xf35
    96006c6c:	913e5400 	add	x0, x0, #0xf95
			pr_error("%s: invalid sor_num:%d\n", __func__, sor_instance);
    96006c70:	94006e80 	bl	96022670 <tegrabl_printf>
		nvdisp_writel(nvdisp, CMD_INT_MASK, 0);
    96006c74:	f9400660 	ldr	x0, [x19, #8]
    96006c78:	b900e01f 	str	wzr, [x0, #224]
		err = TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
    96006c7c:	52800240 	mov	w0, #0x12                  	// #18
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
    96006c80:	72a90900 	movk	w0, #0x4848, lsl #16
	return err;
    96006c84:	17ffffec 	b	96006c34 <nvdisp_enable+0x240>
		protocol = NV_DRF_DEF(DC, DISP_CORE_SOR_SET_CONTROL, PROTOCOL, SINGLE_TMDS_A);
    96006c88:	52802000 	mov	w0, #0x100                 	// #256
		switch (sor_instance) {
    96006c8c:	90000341 	adrp	x1, 9606e000 <__bss_start>
    96006c90:	b9444c22 	ldr	w2, [x1, #1100]
    96006c94:	34000142 	cbz	w2, 96006cbc <nvdisp_enable+0x2c8>
    96006c98:	7100045f 	cmp	w2, #0x1
    96006c9c:	54000160 	b.eq	96006cc8 <nvdisp_enable+0x2d4>  // b.none
			pr_error("%s: invalid sor_num:%d\n", __func__, sor_instance);
    96006ca0:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96006ca4:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006ca8:	913cd421 	add	x1, x1, #0xf35
    96006cac:	913ed400 	add	x0, x0, #0xfb5
    96006cb0:	17fffff0 	b	96006c70 <nvdisp_enable+0x27c>
		protocol = NV_DRF_DEF(DC, DISP_CORE_SOR_SET_CONTROL, PROTOCOL, DP_A);
    96006cb4:	5280c000 	mov	w0, #0x600                 	// #1536
    96006cb8:	17fffff5 	b	96006c8c <nvdisp_enable+0x298>
			nvdisp_writel(nvdisp, DISP_CORE_SOR_SET_CONTROL, protocol);
    96006cbc:	f9400661 	ldr	x1, [x19, #8]
    96006cc0:	b9100c20 	str	w0, [x1, #4108]
    96006cc4:	17ffffd1 	b	96006c08 <nvdisp_enable+0x214>
			nvdisp_writel(nvdisp, DISP_CORE_SOR1_SET_CONTROL, protocol);
    96006cc8:	f9400661 	ldr	x1, [x19, #8]
    96006ccc:	b9101020 	str	w0, [x1, #4112]
    96006cd0:	17ffffce 	b	96006c08 <nvdisp_enable+0x214>
	if (nvdisp->out_ops && nvdisp->out_ops->enable) {
    96006cd4:	f9400801 	ldr	x1, [x0, #16]
    96006cd8:	b4fff9c1 	cbz	x1, 96006c10 <nvdisp_enable+0x21c>
		err = nvdisp->out_ops->enable(nvdisp);
    96006cdc:	aa1303e0 	mov	x0, x19
    96006ce0:	d63f0020 	blr	x1
		if (err != TEGRABL_NO_ERROR) {
    96006ce4:	34fff960 	cbz	w0, 96006c10 <nvdisp_enable+0x21c>
    96006ce8:	17ffffd3 	b	96006c34 <nvdisp_enable+0x240>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
    96006cec:	52818040 	mov	w0, #0xc02                 	// #3074
    96006cf0:	72a90900 	movk	w0, #0x4848, lsl #16
}
    96006cf4:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
    96006cf8:	52818040 	mov	w0, #0xc02                 	// #3074
    96006cfc:	17ffffe1 	b	96006c80 <nvdisp_enable+0x28c>

0000000096006d00 <tegrabl_nvdisp_init>:

	return err;
}

struct tegrabl_nvdisp *tegrabl_nvdisp_init(int32_t out_type, struct tegrabl_display_pdata *pdata)
{
    96006d00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96006d04:	910003fd 	mov	x29, sp
    96006d08:	a90153f3 	stp	x19, x20, [sp, #16]
    96006d0c:	aa0103f4 	mov	x20, x1
    96006d10:	f90013f5 	str	x21, [sp, #32]
    96006d14:	2a0003f5 	mov	w21, w0
	struct tegrabl_nvdisp *nvdisp = NULL;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	pr_debug("%s: entry\n", __func__);

	nvdisp = tegrabl_malloc(sizeof(struct tegrabl_nvdisp));
    96006d18:	d2804100 	mov	x0, #0x208                 	// #520
    96006d1c:	94007f57 	bl	96026a78 <tegrabl_malloc>
    96006d20:	aa0003f3 	mov	x19, x0
	if (!nvdisp) {
    96006d24:	b5000160 	cbnz	x0, 96006d50 <tegrabl_nvdisp_init+0x50>
		pr_error("%s, memory alloc failed for nvdisp\n", __func__);
    96006d28:	b00001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    96006d2c:	b00001a0 	adrp	x0, 9603b000 <tt_level+0x328>
    96006d30:	913d6421 	add	x1, x1, #0xf59
    96006d34:	913f4000 	add	x0, x0, #0xfd0
    96006d38:	94006e4e 	bl	96022670 <tegrabl_printf>
	if (nvdisp) {
		tegrabl_free(nvdisp);
	}

	return NULL;
}
    96006d3c:	aa1303e0 	mov	x0, x19
    96006d40:	f94013f5 	ldr	x21, [sp, #32]
    96006d44:	a94153f3 	ldp	x19, x20, [sp, #16]
    96006d48:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96006d4c:	d65f03c0 	ret
	nvdisp->base_addr = (uintptr_t) nvdisp_base_addr[pdata->nvdisp_instance];
    96006d50:	b9400a81 	ldr	w1, [x20, #8]
    96006d54:	d0000200 	adrp	x0, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96006d58:	91167000 	add	x0, x0, #0x59c
	switch (nvdisp->type) {
    96006d5c:	710006bf 	cmp	w21, #0x1
	nvdisp->base_addr = (uintptr_t) nvdisp_base_addr[pdata->nvdisp_instance];
    96006d60:	b861d800 	ldr	w0, [x0, w1, sxtw #2]
    96006d64:	f9000660 	str	x0, [x19, #8]
	nvdisp->parent_clk = pdata->disp_clk_src;
    96006d68:	b9400e80 	ldr	w0, [x20, #12]
	nvdisp->instance = pdata->nvdisp_instance;
    96006d6c:	b9000261 	str	w1, [x19]
	sor_instance = pdata->sor_dtb.sor_instance;
    96006d70:	b9409281 	ldr	w1, [x20, #144]
	nvdisp->parent_clk = pdata->disp_clk_src;
    96006d74:	b9000660 	str	w0, [x19, #4]
	sor_instance = pdata->sor_dtb.sor_instance;
    96006d78:	90000340 	adrp	x0, 9606e000 <__bss_start>
	nvdisp->type = out_type;
    96006d7c:	b9003a75 	str	w21, [x19, #56]
	sor_instance = pdata->sor_dtb.sor_instance;
    96006d80:	b9044c01 	str	w1, [x0, #1100]
	nvdisp->module_nvdisp = TEGRABL_MODULE_NVDISPLAY_DISP;
    96006d84:	d2800440 	mov	x0, #0x22                  	// #34
    96006d88:	f2c00160 	movk	x0, #0xb, lsl #32
    96006d8c:	f9000a60 	str	x0, [x19, #16]
	nvdisp->module_host1x = TEGRABL_MODULE_HOST1X;
    96006d90:	d2800400 	mov	x0, #0x20                  	// #32
    96006d94:	f2c00420 	movk	x0, #0x21, lsl #32
    96006d98:	f9000e60 	str	x0, [x19, #24]
	nvdisp->module_nvdisp_dsc = TEGRABL_MODULE_NVDISPLAY_DSC;
    96006d9c:	52800460 	mov	w0, #0x23                  	// #35
    96006da0:	b9002260 	str	w0, [x19, #32]
	nvdisp->mode = pdata->mode;
    96006da4:	f9400a80 	ldr	x0, [x20, #16]
    96006da8:	f9002660 	str	x0, [x19, #72]
	nvdisp->depth = 8;
    96006dac:	d2800100 	mov	x0, #0x8                   	// #8
    96006db0:	f9002260 	str	x0, [x19, #64]
	nvdisp->flags = pdata->flags;
    96006db4:	b9400280 	ldr	w0, [x20]
    96006db8:	f9001660 	str	x0, [x19, #40]
	nvdisp->n_windows = N_WINDOWS;
    96006dbc:	528000c0 	mov	w0, #0x6                   	// #6
    96006dc0:	b9020260 	str	w0, [x19, #512]
	switch (nvdisp->type) {
    96006dc4:	54000260 	b.eq	96006e10 <tegrabl_nvdisp_init+0x110>  // b.none
		nvdisp->out_ops = NULL;
    96006dc8:	71000ebf 	cmp	w21, #0x3
    96006dcc:	f0000200 	adrp	x0, 96049000 <default_srgb_lut+0xa28>
    96006dd0:	91182000 	add	x0, x0, #0x608
    96006dd4:	9a9f0000 	csel	x0, x0, xzr, eq  // eq = none
		nvdisp->out_ops = &hdmi_ops;
    96006dd8:	f9003660 	str	x0, [x19, #104]
	if (nvdisp->out_ops && nvdisp->out_ops->init) {
    96006ddc:	f9403660 	ldr	x0, [x19, #104]
    96006de0:	b40001e0 	cbz	x0, 96006e1c <tegrabl_nvdisp_init+0x11c>
    96006de4:	f9400002 	ldr	x2, [x0]
    96006de8:	b40001a2 	cbz	x2, 96006e1c <tegrabl_nvdisp_init+0x11c>
		err = nvdisp->out_ops->init(nvdisp, pdata);
    96006dec:	aa1403e1 	mov	x1, x20
    96006df0:	aa1303e0 	mov	x0, x19
    96006df4:	d63f0040 	blr	x2
		if (err != TEGRABL_NO_ERROR) {
    96006df8:	34000120 	cbz	w0, 96006e1c <tegrabl_nvdisp_init+0x11c>
			nvdisp->out_ops = NULL;
    96006dfc:	f900367f 	str	xzr, [x19, #104]
		tegrabl_free(nvdisp);
    96006e00:	aa1303e0 	mov	x0, x19
	return NULL;
    96006e04:	d2800013 	mov	x19, #0x0                   	// #0
		tegrabl_free(nvdisp);
    96006e08:	94007f2c 	bl	96026ab8 <tegrabl_free>
    96006e0c:	17ffffcc 	b	96006d3c <tegrabl_nvdisp_init+0x3c>
		nvdisp->out_ops = &hdmi_ops;
    96006e10:	f0000200 	adrp	x0, 96049000 <default_srgb_lut+0xa28>
    96006e14:	91178000 	add	x0, x0, #0x5e0
    96006e18:	17fffff0 	b	96006dd8 <tegrabl_nvdisp_init+0xd8>
	err = nvdisp_enable(nvdisp);
    96006e1c:	aa1303e0 	mov	x0, x19
    96006e20:	97fffef5 	bl	960069f4 <nvdisp_enable>
	if (err != TEGRABL_NO_ERROR) {
    96006e24:	35fffee0 	cbnz	w0, 96006e00 <tegrabl_nvdisp_init+0x100>
		nvdisp->enabled = 1;
    96006e28:	52800020 	mov	w0, #0x1                   	// #1
    96006e2c:	39081260 	strb	w0, [x19, #516]
	return nvdisp;
    96006e30:	17ffffc3 	b	96006d3c <tegrabl_nvdisp_init+0x3c>

0000000096006e34 <tegrabl_nvdisp_list_windows>:

void tegrabl_nvdisp_list_windows(struct tegrabl_nvdisp *nvdisp, uint32_t *count)
{
	TEGRABL_UNUSED(nvdisp);
	nvdisp_win_list(count);
    96006e34:	aa0103e0 	mov	x0, x1
    96006e38:	1400004b 	b	96006f64 <nvdisp_win_list>

0000000096006e3c <tegrabl_nvdisp_configure_window>:
}

tegrabl_error_t tegrabl_nvdisp_configure_window(struct tegrabl_nvdisp *nvdisp,
	uint32_t win_id, struct tegrabl_surface *surf)
{
    96006e3c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96006e40:	910003fd 	mov	x29, sp
    96006e44:	a90153f3 	stp	x19, x20, [sp, #16]
    96006e48:	aa0003f3 	mov	x19, x0
    96006e4c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96006e50:	2a0103f4 	mov	w20, w1
    96006e54:	f9001bf7 	str	x23, [sp, #48]
    96006e58:	aa0203f5 	mov	x21, x2
	struct nvdisp_csc *csc = NULL;
	struct nvdisp_cp *cp = NULL;

	pr_debug("%s: entry\n", __func__);

	csc = tegrabl_malloc(sizeof(struct nvdisp_csc));
    96006e5c:	d2800600 	mov	x0, #0x30                  	// #48
    96006e60:	94007f06 	bl	96026a78 <tegrabl_malloc>
	if (!csc) {
    96006e64:	b4000600 	cbz	x0, 96006f24 <tegrabl_nvdisp_configure_window+0xe8>
    96006e68:	aa0003f6 	mov	x22, x0
		pr_debug("memory allocation failed\n");
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 2);
	}
	cp = tegrabl_memalign(CP_ALLIGNMENT_SIZE, sizeof(struct nvdisp_cp));
    96006e6c:	d2810001 	mov	x1, #0x800                 	// #2048
    96006e70:	d2820000 	mov	x0, #0x1000                	// #4096
    96006e74:	94007f44 	bl	96026b84 <tegrabl_memalign>
    96006e78:	aa0003f7 	mov	x23, x0
	if (!cp) {
    96006e7c:	b50000c0 	cbnz	x0, 96006e94 <tegrabl_nvdisp_configure_window+0x58>
		pr_debug("memory allocation failed\n");
		tegrabl_free(csc);
    96006e80:	aa1603e0 	mov	x0, x22
    96006e84:	94007f0d 	bl	96026ab8 <tegrabl_free>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 3);
    96006e88:	52806060 	mov	w0, #0x303                 	// #771
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 2);
    96006e8c:	72a90900 	movk	w0, #0x4848, lsl #16
    96006e90:	14000020 	b	96006f10 <tegrabl_nvdisp_configure_window+0xd4>
	}

	win->surf = surf;
    96006e94:	d37a7e80 	ubfiz	x0, x20, #6, #32
	win->pitch = surf->pitch;
    96006e98:	b9400aa1 	ldr	w1, [x21, #8]
	win->surf = surf;
    96006e9c:	8b000260 	add	x0, x19, x0
	win->pitch = surf->pitch;
    96006ea0:	b900b801 	str	w1, [x0, #184]
	win->x = 0;
	win->y = 0;
	win->w = surf->width;
    96006ea4:	b94002a1 	ldr	w1, [x21]
    96006ea8:	b9008c01 	str	w1, [x0, #140]
	win->h = surf->height;
    96006eac:	b94006a1 	ldr	w1, [x21, #4]
	win->x = 0;
    96006eb0:	f808401f 	stur	xzr, [x0, #132]
	win->h = surf->height;
    96006eb4:	b9009001 	str	w1, [x0, #144]
	win->surf = surf;
    96006eb8:	f9005415 	str	x21, [x0, #168]

	nvdisp->color_format = surf->pixel_format;
    96006ebc:	b94022a0 	ldr	w0, [x21, #32]
    96006ec0:	b9003260 	str	w0, [x19, #48]

	nvdisp_win_csc_init_defaults(csc);
    96006ec4:	aa1603e0 	mov	x0, x22
    96006ec8:	94000054 	bl	96007018 <nvdisp_win_csc_init_defaults>
	nvdisp_win_csc_set(nvdisp, win_id, csc);
    96006ecc:	aa1603e2 	mov	x2, x22
    96006ed0:	2a1403e1 	mov	w1, w20
    96006ed4:	aa1303e0 	mov	x0, x19
    96006ed8:	94000054 	bl	96007028 <nvdisp_win_csc_set>
	nvdisp_win_cp_init_defaults(cp);
    96006edc:	aa1703e0 	mov	x0, x23
    96006ee0:	9400007e 	bl	960070d8 <nvdisp_win_cp_init_defaults>
	nvdisp_win_cp_set(nvdisp, win_id, cp);
    96006ee4:	aa1703e2 	mov	x2, x23
    96006ee8:	2a1403e1 	mov	w1, w20
    96006eec:	aa1303e0 	mov	x0, x19
    96006ef0:	94000083 	bl	960070fc <nvdisp_win_cp_set>
	nvdisp_win_set_owner(nvdisp, win_id);
    96006ef4:	2a1403e1 	mov	w1, w20
    96006ef8:	aa1303e0 	mov	x0, x19
    96006efc:	9400001d 	bl	96006f70 <nvdisp_win_set_owner>
	nvdisp_win_config(nvdisp, win_id);
    96006f00:	aa1303e0 	mov	x0, x19
    96006f04:	2a1403e1 	mov	w1, w20
    96006f08:	94000024 	bl	96006f98 <nvdisp_win_config>

	return err;
    96006f0c:	52800000 	mov	w0, #0x0                   	// #0
}
    96006f10:	a94153f3 	ldp	x19, x20, [sp, #16]
    96006f14:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96006f18:	f9401bf7 	ldr	x23, [sp, #48]
    96006f1c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96006f20:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 2);
    96006f24:	52804060 	mov	w0, #0x203                 	// #515
    96006f28:	17ffffd9 	b	96006e8c <tegrabl_nvdisp_configure_window+0x50>

0000000096006f2c <tegrabl_nvdisp_win_set_surface>:
void tegrabl_nvdisp_win_set_surface(struct tegrabl_nvdisp *nvdisp,
	uint32_t win_id, uintptr_t surf_buf)
{
	pr_debug("%s: entry\n", __func__);

	nvdisp_win_set_buf(nvdisp, win_id, surf_buf);
    96006f2c:	14000006 	b	96006f44 <nvdisp_win_set_buf>

0000000096006f30 <nvdisp_win_select>:
	uint32_t val = 0;

	val = NV_DRF_DEF(DC, CMD_DISPLAY_WINDOW_HEADER, WINDOW_A_SELECT, ENABLE);
	val = val << win_id;
	pr_debug("win header = %x\n", val);
	nvdisp_writel(nvdisp, CMD_DISPLAY_WINDOW_HEADER, val);
    96006f30:	f9400400 	ldr	x0, [x0, #8]
	val = val << win_id;
    96006f34:	52800202 	mov	w2, #0x10                  	// #16
    96006f38:	1ac12041 	lsl	w1, w2, w1
	nvdisp_writel(nvdisp, CMD_DISPLAY_WINDOW_HEADER, val);
    96006f3c:	b9010801 	str	w1, [x0, #264]
}
    96006f40:	d65f03c0 	ret

0000000096006f44 <nvdisp_win_set_buf>:
	uint32_t val;
	uint64_t addr;

	pr_debug("%s: entry\n", __func__);
	win = nvdisp_win_get(nvdisp, win_id);
	win->buf = buf;
    96006f44:	d37a7c21 	ubfiz	x1, x1, #6, #32
    96006f48:	8b010001 	add	x1, x0, x1
    96006f4c:	f9005822 	str	x2, [x1, #176]

	addr = (uint64_t) buf;
	val = (uint32_t) addr;
	nvdisp_writel(nvdisp, WINBUF_A_START_ADDR, val);
    96006f50:	f9400400 	ldr	x0, [x0, #8]
    96006f54:	b9200002 	str	w2, [x0, #8192]

	val = (uint32_t) (addr >> 32);
    96006f58:	d360fc42 	lsr	x2, x2, #32
	nvdisp_writel(nvdisp, WINBUF_A_START_ADDR_HI, val);
    96006f5c:	b9203402 	str	w2, [x0, #8244]
}
    96006f60:	d65f03c0 	ret

0000000096006f64 <nvdisp_win_list>:

void nvdisp_win_list(uint32_t *count)
{
	*count = N_WINDOWS;
    96006f64:	528000c1 	mov	w1, #0x6                   	// #6
    96006f68:	b9000001 	str	w1, [x0]
}
    96006f6c:	d65f03c0 	ret

0000000096006f70 <nvdisp_win_set_owner>:
	nvdisp_writel(nvdisp, WIN_A_WIN_OPTIONS, val);
	pr_debug("%s: exit\n", __func__);
}

void nvdisp_win_set_owner(struct tegrabl_nvdisp *nvdisp, uint32_t win_id)
{
    96006f70:	aa0003e3 	mov	x3, x0
    96006f74:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96006f78:	910003fd 	mov	x29, sp
	uint32_t val;

	nvdisp_win_select(nvdisp, win_id);
    96006f7c:	97ffffed 	bl	96006f30 <nvdisp_win_select>

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CONTROL, A_OWNER,
					 nvdisp->instance);

	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CONTROL, val);
    96006f80:	f9400461 	ldr	x1, [x3, #8]
	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CONTROL, A_OWNER,
    96006f84:	b9400060 	ldr	w0, [x3]
    96006f88:	12000c00 	and	w0, w0, #0xf
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CONTROL, val);
    96006f8c:	b91c0820 	str	w0, [x1, #7176]
}
    96006f90:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96006f94:	d65f03c0 	ret

0000000096006f98 <nvdisp_win_config>:

void nvdisp_win_config(struct tegrabl_nvdisp *nvdisp, uint32_t win_id)
{
    96006f98:	aa0003e4 	mov	x4, x0
    96006f9c:	2a0103e3 	mov	w3, w1
    96006fa0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96006fa4:	910003fd 	mov	x29, sp

	pr_debug("%s: entry\n", __func__);

	win = nvdisp_win_get(nvdisp, win_id);

	nvdisp_win_select(nvdisp, win_id);
    96006fa8:	97ffffe2 	bl	96006f30 <nvdisp_win_select>

	pr_debug("win -> h = %d\n", win->out_h);
	val = NV_DRF_NUM(DC, WIN_A_POSITION, A_H_POSITION, 0) |
		NV_DRF_NUM(DC, WIN_A_POSITION, A_V_POSITION, 0);
	nvdisp_writel(nvdisp, WIN_A_POSITION, val);
    96006fac:	f9400480 	ldr	x0, [x4, #8]
    96006fb0:	d37a7c61 	ubfiz	x1, x3, #6, #32
    96006fb4:	8b010081 	add	x1, x4, x1
    96006fb8:	b91c101f 	str	wzr, [x0, #7184]

	val = NV_DRF_NUM(DC, WIN_A_SIZE, A_H_SIZE, win->w) |
		NV_DRF_NUM(DC, WIN_A_SIZE, A_V_SIZE, win->h);
    96006fbc:	29518823 	ldp	w3, w2, [x1, #140]
	val = NV_DRF_NUM(DC, WIN_A_SIZE, A_H_SIZE, win->w) |
    96006fc0:	12003863 	and	w3, w3, #0x7fff
		NV_DRF_NUM(DC, WIN_A_SIZE, A_V_SIZE, win->h);
    96006fc4:	53103842 	ubfiz	w2, w2, #16, #15
	val = NV_DRF_NUM(DC, WIN_A_SIZE, A_H_SIZE, win->w) |
    96006fc8:	2a030042 	orr	w2, w2, w3
	nvdisp_writel(nvdisp, WIN_A_SIZE, val);
    96006fcc:	b91c1402 	str	w2, [x0, #7188]

	if (nvdisp->color_format == PIXEL_FORMAT_A8B8G8R8)
		val = NV_DRF_NUM(DC, WIN_A_COLOR_DEPTH, A_COLOR_DEPTH, 13); /*R8G8B8A8*/
	else if (nvdisp->color_format == PIXEL_FORMAT_A8R8G8B8)
    96006fd0:	b9403082 	ldr	w2, [x4, #48]
		val = NV_DRF_NUM(DC, WIN_A_COLOR_DEPTH, A_COLOR_DEPTH, 12); /*B8G8R8A8*/
	else
		val = NV_DRF_NUM(DC, WIN_A_COLOR_DEPTH, A_COLOR_DEPTH, 13); /*R8G8B8A8*/
    96006fd4:	7100005f 	cmp	w2, #0x0
    96006fd8:	1a9f07e2 	cset	w2, ne  // ne = any
    96006fdc:	11003042 	add	w2, w2, #0xc

	nvdisp_writel(nvdisp, WIN_A_COLOR_DEPTH, val);
    96006fe0:	b91c0c02 	str	w2, [x0, #7180]

	val = NV_DRF_NUM(DC, WIN_A_PCALC_WINDOW_SET_CROPPED_SIZE_IN, A_WIDTH,
					 win->w) |
		NV_DRF_NUM(DC, WIN_A_PCALC_WINDOW_SET_CROPPED_SIZE_IN, A_HEIGHT,
    96006fe4:	29518823 	ldp	w3, w2, [x1, #140]
	val = NV_DRF_NUM(DC, WIN_A_PCALC_WINDOW_SET_CROPPED_SIZE_IN, A_WIDTH,
    96006fe8:	12003863 	and	w3, w3, #0x7fff
		NV_DRF_NUM(DC, WIN_A_PCALC_WINDOW_SET_CROPPED_SIZE_IN, A_HEIGHT,
    96006fec:	53103842 	ubfiz	w2, w2, #16, #15
	val = NV_DRF_NUM(DC, WIN_A_PCALC_WINDOW_SET_CROPPED_SIZE_IN, A_WIDTH,
    96006ff0:	2a030042 	orr	w2, w2, w3
				   win->h);

	nvdisp_writel(nvdisp, WIN_A_PCALC_WINDOW_SET_CROPPED_SIZE_IN, val);
    96006ff4:	b91c1802 	str	w2, [x0, #7192]

	val = NV_DRF_NUM(DC, WIN_A_WINDOW_SET_PLANAR_STORAGE, A_PITCH,
    96006ff8:	b940b821 	ldr	w1, [x1, #184]
    96006ffc:	d3464821 	ubfx	x1, x1, #6, #13
					 win->pitch / NVDISP_PITCH_UNIT);
	nvdisp_writel(nvdisp, WIN_A_WINDOW_SET_PLANAR_STORAGE, val);
    96007000:	b91c2401 	str	w1, [x0, #7204]

	val = nvdisp_readl(nvdisp, WIN_A_WIN_OPTIONS);
    96007004:	b95c0001 	ldr	w1, [x0, #7168]
	val = NV_FLD_SET_DRF_DEF(DC, WIN_A_WIN_OPTIONS, A_WIN_ENABLE, ENABLE, val);
    96007008:	32020021 	orr	w1, w1, #0x40000000
	nvdisp_writel(nvdisp, WIN_A_WIN_OPTIONS, val);
    9600700c:	b91c0001 	str	w1, [x0, #7168]

	pr_debug("%s: exit\n", __func__);
}
    96007010:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96007014:	d65f03c0 	ret

0000000096007018 <nvdisp_win_csc_init_defaults>:

void nvdisp_win_csc_init_defaults(struct nvdisp_csc *csc)
{
	pr_debug("%s: entry\n", __func__);
	memcpy(csc, &default_csc, sizeof(struct nvdisp_csc));
    96007018:	d2800602 	mov	x2, #0x30                  	// #48
    9600701c:	b0000201 	adrp	x1, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96007020:	9116a021 	add	x1, x1, #0x5a8
    96007024:	14008bc0 	b	96029f24 <memcpy>

0000000096007028 <nvdisp_win_csc_set>:
	struct nvdisp_win *win;

	pr_debug("%s: entry\n", __func__);

	win = nvdisp_win_get(nvdisp, win_id);
	win->csc = csc;
    96007028:	d37a7c23 	ubfiz	x3, x1, #6, #32
    9600702c:	8b030003 	add	x3, x0, x3
    96007030:	f9004c62 	str	x2, [x3, #152]
	val = NV_DRF_DEF(DC, CMD_DISPLAY_WINDOW_HEADER, WINDOW_A_SELECT, ENABLE);
	val = val << win_id;
    96007034:	52800203 	mov	w3, #0x10                  	// #16
    96007038:	1ac12061 	lsl	w1, w3, w1
	nvdisp_writel(nvdisp, CMD_DISPLAY_WINDOW_HEADER, val);
    9600703c:	f9400400 	ldr	x0, [x0, #8]
    96007040:	b9010801 	str	w1, [x0, #264]

	/* 1 to 4 registers */
	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_RED2RED, A_COEFF,
    96007044:	b9401841 	ldr	w1, [x2, #24]
    96007048:	12004821 	and	w1, w1, #0x7ffff
					 csc->red2red);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_RED2RED, val);
    9600704c:	b91cc401 	str	w1, [x0, #7364]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_GREEN2RED, A_COEFF,
    96007050:	b9401441 	ldr	w1, [x2, #20]
    96007054:	12004821 	and	w1, w1, #0x7ffff
					 csc->green2red);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_GREEN2RED, val);
    96007058:	b91cc801 	str	w1, [x0, #7368]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_BLUE2RED, A_COEFF,
    9600705c:	b9401041 	ldr	w1, [x2, #16]
    96007060:	12004821 	and	w1, w1, #0x7ffff
					 csc->blue2red);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_BLUE2RED, val);
    96007064:	b91ccc01 	str	w1, [x0, #7372]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_CONSTANT2RED, A_COEFF,
    96007068:	b9401c41 	ldr	w1, [x2, #28]
    9600706c:	12004821 	and	w1, w1, #0x7ffff
					 csc->const2red);
	nvdisp_writel(nvdisp,  WIN_A_CORE_WINDOWGROUP_SET_CSC_CONSTANT2RED, val);
    96007070:	b91cd001 	str	w1, [x0, #7376]

	/* 5 to 8 registers */
	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_RED2GREEN, A_COEFF,
    96007074:	b9400441 	ldr	w1, [x2, #4]
    96007078:	12004821 	and	w1, w1, #0x7ffff
					 csc->red2green);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_RED2GREEN, val);
    9600707c:	b91cd401 	str	w1, [x0, #7380]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_GREEN2GREEN, A_COEFF,
    96007080:	b9400841 	ldr	w1, [x2, #8]
    96007084:	12004821 	and	w1, w1, #0x7ffff
					 csc->green2green);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_GREEN2GREEN, val);
    96007088:	b91cd801 	str	w1, [x0, #7384]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_BLUE2GREEN, A_COEFF,
    9600708c:	b9400041 	ldr	w1, [x2]
    96007090:	12004821 	and	w1, w1, #0x7ffff
					 csc->blue2green);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_BLUE2GREEN, val);
    96007094:	b91cdc01 	str	w1, [x0, #7388]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_CONSTANT2GREEN, A_COEFF,
    96007098:	b9400c41 	ldr	w1, [x2, #12]
    9600709c:	12004821 	and	w1, w1, #0x7ffff
					 csc->const2green);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_CONSTANT2GREEN, val);
    960070a0:	b91ce001 	str	w1, [x0, #7392]

	/* 9 to 12 registers */
	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_RED2BLUE, A_COEFF,
    960070a4:	b9402441 	ldr	w1, [x2, #36]
    960070a8:	12004821 	and	w1, w1, #0x7ffff
					 csc->red2blue);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_RED2BLUE, val);
    960070ac:	b91ce401 	str	w1, [x0, #7396]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_GREEN2BLUE, A_COEFF,
    960070b0:	b9402041 	ldr	w1, [x2, #32]
    960070b4:	12004821 	and	w1, w1, #0x7ffff
					 csc->green2blue);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_GREEN2BLUE, val);
    960070b8:	b91ce801 	str	w1, [x0, #7400]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_BLUE2BLUE, A_COEFF,
    960070bc:	b9402841 	ldr	w1, [x2, #40]
    960070c0:	12004821 	and	w1, w1, #0x7ffff
					 csc->blue2blue);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_BLUE2BLUE, val);
    960070c4:	b91cec01 	str	w1, [x0, #7404]

	val = NV_DRF_NUM(DC, WIN_A_CORE_WINDOWGROUP_SET_CSC_CONSTANT2BLUE, A_COEFF,
    960070c8:	b9402c41 	ldr	w1, [x2, #44]
    960070cc:	12004821 	and	w1, w1, #0x7ffff
					 csc->const2blue);
	nvdisp_writel(nvdisp, WIN_A_CORE_WINDOWGROUP_SET_CSC_CONSTANT2BLUE, val);
    960070d0:	b91cf001 	str	w1, [x0, #7408]

	pr_debug("%s: exit\n", __func__);
}
    960070d4:	d65f03c0 	ret

00000000960070d8 <nvdisp_win_cp_init_defaults>:

void nvdisp_win_cp_init_defaults(struct nvdisp_cp *cp)
{
	uint64_t i;

	for (i = 0; i < 256; i++) {
    960070d8:	d2800001 	mov	x1, #0x0                   	// #0
		cp->rgb[i] = ((i << 40) | (i << 24) | (i << 8));
    960070dc:	d3585c22 	lsl	x2, x1, #40
    960070e0:	aa016042 	orr	x2, x2, x1, lsl #24
    960070e4:	aa012042 	orr	x2, x2, x1, lsl #8
    960070e8:	f8217802 	str	x2, [x0, x1, lsl #3]
	for (i = 0; i < 256; i++) {
    960070ec:	91000421 	add	x1, x1, #0x1
    960070f0:	f104003f 	cmp	x1, #0x100
    960070f4:	54ffff41 	b.ne	960070dc <nvdisp_win_cp_init_defaults+0x4>  // b.any
	}
}
    960070f8:	d65f03c0 	ret

00000000960070fc <nvdisp_win_cp_set>:

void nvdisp_win_cp_set(struct tegrabl_nvdisp *nvdisp,
	uint32_t win_id, struct nvdisp_cp *cp)
{
    960070fc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	win->cp = cp;
	val = NV_DRF_DEF(DC, CMD_DISPLAY_WINDOW_HEADER, WINDOW_A_SELECT, ENABLE);
	val = val << win_id;
	nvdisp_writel(nvdisp, CMD_DISPLAY_WINDOW_HEADER, val);

	cp_base_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    96007100:	52800024 	mov	w4, #0x1                   	// #1
    96007104:	d2810003 	mov	x3, #0x800                 	// #2048
{
    96007108:	910003fd 	mov	x29, sp
    9600710c:	f9000bf3 	str	x19, [sp, #16]
    96007110:	aa0003f3 	mov	x19, x0
	win->cp = cp;
    96007114:	d37a7c20 	ubfiz	x0, x1, #6, #32
    96007118:	8b000260 	add	x0, x19, x0
    9600711c:	f9005002 	str	x2, [x0, #160]
	val = val << win_id;
    96007120:	52800200 	mov	w0, #0x10                  	// #16
    96007124:	1ac12001 	lsl	w1, w0, w1
	nvdisp_writel(nvdisp, CMD_DISPLAY_WINDOW_HEADER, val);
    96007128:	f9400660 	ldr	x0, [x19, #8]
    9600712c:	b9010801 	str	w1, [x0, #264]
	cp_base_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    96007130:	52800480 	mov	w0, #0x24                  	// #36
    96007134:	39400261 	ldrb	w1, [x19]
    96007138:	97fff263 	bl	96003ac4 <tegrabl_dma_map_buffer>
		nvdisp->instance, (void *)(cp), sizeof(struct nvdisp_cp),
		TEGRABL_DMA_TO_DEVICE);
	nvdisp_writel(nvdisp, WIN_A_COREPVT_WINDOWGROUP_SET_INPUT_LUT_BASE,
    9600713c:	f9400661 	ldr	x1, [x19, #8]
				  U64_TO_U32_HI(cp_base_addr));

	val = nvdisp_readl(nvdisp, WIN_A_WIN_OPTIONS);
	val = NV_FLD_SET_DRF_DEF(DC, WIN_A_WIN_OPTIONS, A_CP_ENABLE, ENABLE, val);
	nvdisp_writel(nvdisp, WIN_A_WIN_OPTIONS, val);
}
    96007140:	f9400bf3 	ldr	x19, [sp, #16]
	nvdisp_writel(nvdisp, WIN_A_COREPVT_WINDOWGROUP_SET_INPUT_LUT_BASE,
    96007144:	b91c8020 	str	w0, [x1, #7296]
	nvdisp_writel(nvdisp, WIN_A_COREPVT_WINDOWGROUP_SET_INPUT_LUT_BASE_HI,
    96007148:	d360fc00 	lsr	x0, x0, #32
    9600714c:	b91c8420 	str	w0, [x1, #7300]
	val = nvdisp_readl(nvdisp, WIN_A_WIN_OPTIONS);
    96007150:	b95c0020 	ldr	w0, [x1, #7168]
	val = NV_FLD_SET_DRF_DEF(DC, WIN_A_WIN_OPTIONS, A_CP_ENABLE, ENABLE, val);
    96007154:	32100000 	orr	w0, w0, #0x10000
	nvdisp_writel(nvdisp, WIN_A_WIN_OPTIONS, val);
    96007158:	b91c0020 	str	w0, [x1, #7168]
}
    9600715c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96007160:	d65f03c0 	ret

0000000096007164 <nvdisp_cmu_init_defaults>:
{
	uint32_t i;
	uint64_t r = 0;

	for (i = 0; i < NVDISP_LUT_SIZE; i++) {
		r = default_srgb_lut[i];
    96007164:	b0000204 	adrp	x4, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96007168:	91176084 	add	x4, x4, #0x5d8
{
    9600716c:	d2800001 	mov	x1, #0x0                   	// #0
		r = default_srgb_lut[i];
    96007170:	b8617883 	ldr	w3, [x4, x1, lsl #2]
		cmu->rgb[i] = (r << 32) | (r << 16) | r;
    96007174:	d370bc62 	lsl	x2, x3, #16
    96007178:	aa038042 	orr	x2, x2, x3, lsl #32
    9600717c:	aa030042 	orr	x2, x2, x3
    96007180:	f8217802 	str	x2, [x0, x1, lsl #3]
    96007184:	91000421 	add	x1, x1, #0x1
	for (i = 0; i < NVDISP_LUT_SIZE; i++) {
    96007188:	f110043f 	cmp	x1, #0x401
    9600718c:	54ffff21 	b.ne	96007170 <nvdisp_cmu_init_defaults+0xc>  // b.any
	}
}
    96007190:	d65f03c0 	ret

0000000096007194 <nvdisp_cmu_set>:

void nvdisp_cmu_set(struct tegrabl_nvdisp *nvdisp, struct nvdisp_cmu *cmu)
{
    96007194:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	uint32_t val;
	dma_addr_t cmu_base_addr;

	pr_debug("%s: entry\n", __func__);

	cmu_base_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    96007198:	aa0103e2 	mov	x2, x1
    9600719c:	52800024 	mov	w4, #0x1                   	// #1
    960071a0:	d2840103 	mov	x3, #0x2008                	// #8200
{
    960071a4:	910003fd 	mov	x29, sp
	cmu_base_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    960071a8:	39400001 	ldrb	w1, [x0]
{
    960071ac:	f9000bf3 	str	x19, [sp, #16]
    960071b0:	aa0003f3 	mov	x19, x0
	cmu_base_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_NVDISPLAY0_HEAD,
    960071b4:	52800480 	mov	w0, #0x24                  	// #36
    960071b8:	97fff243 	bl	96003ac4 <tegrabl_dma_map_buffer>
		nvdisp->instance, (void *)(cmu), sizeof(struct nvdisp_cmu),
		TEGRABL_DMA_TO_DEVICE);

	nvdisp->cmu_base_addr = (uintptr_t)cmu_base_addr;
    960071bc:	f9002a60 	str	x0, [x19, #80]

	nvdisp_writel(nvdisp, DISP_COREPVT_HEAD_SET_OUTPUT_LUT_BASE,
    960071c0:	f9400661 	ldr	x1, [x19, #8]
    960071c4:	12800cc2 	mov	w2, #0xffffff99            	// #-103
	val = NV_FLD_SET_DRF_DEF(DC_DISP, CORE_HEAD_SET_CONTROL_OUTPUT_LUT,
							 SIZE, SIZE_1025, val);
	nvdisp_writel(nvdisp, DISP_CORE_HEAD_SET_CONTROL_OUTPUT_LUT, val);

	val = nvdisp_readl(nvdisp, DISP_DISP_COLOR_CONTROL);
	if (nvdisp->flags & NVDISP_FLAG_CMU_ENABLE)
    960071c8:	f9401663 	ldr	x3, [x19, #40]
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, CMU_ENABLE,
								 DISABLE, val);
	nvdisp_writel(nvdisp, DISP_DISP_COLOR_CONTROL, val);

	pr_debug("%s: exit\n", __func__);
}
    960071cc:	f9400bf3 	ldr	x19, [sp, #16]
	nvdisp_writel(nvdisp, DISP_COREPVT_HEAD_SET_OUTPUT_LUT_BASE,
    960071d0:	b910c820 	str	w0, [x1, #4296]
	nvdisp_writel(nvdisp, DISP_COREPVT_HEAD_SET_OUTPUT_LUT_BASE_HI,
    960071d4:	d360fc00 	lsr	x0, x0, #32
    960071d8:	b910cc20 	str	w0, [x1, #4300]
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, CMU_ENABLE,
    960071dc:	f27f007f 	tst	x3, #0x2
	val = nvdisp_readl(nvdisp, DISP_CORE_HEAD_SET_CONTROL_OUTPUT_LUT);
    960071e0:	b950c420 	ldr	w0, [x1, #4292]
    960071e4:	0a020000 	and	w0, w0, w2
	val = NV_FLD_SET_DRF_DEF(DC_DISP, CORE_HEAD_SET_CONTROL_OUTPUT_LUT,
    960071e8:	52800482 	mov	w2, #0x24                  	// #36
    960071ec:	2a020000 	orr	w0, w0, w2
	nvdisp_writel(nvdisp, DISP_CORE_HEAD_SET_CONTROL_OUTPUT_LUT, val);
    960071f0:	b910c420 	str	w0, [x1, #4292]
	val = nvdisp_readl(nvdisp, DISP_DISP_COLOR_CONTROL);
    960071f4:	b950c020 	ldr	w0, [x1, #4288]
		val = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_COLOR_CONTROL, CMU_ENABLE,
    960071f8:	320c0002 	orr	w2, w0, #0x100000
    960071fc:	120b7800 	and	w0, w0, #0xffefffff
    96007200:	1a820000 	csel	w0, w0, w2, eq  // eq = none
	nvdisp_writel(nvdisp, DISP_DISP_COLOR_CONTROL, val);
    96007204:	b910c020 	str	w0, [x1, #4288]
}
    96007208:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600720c:	d65f03c0 	ret

0000000096007210 <hdmi_setup_clk>:

static uint64_t hdmi_setup_clk(struct tegrabl_nvdisp *nvdisp, uint32_t clk_id)
{
	/* Dummy function */
	return TEGRABL_NO_ERROR;
}
    96007210:	d2800000 	mov	x0, #0x0                   	// #0
    96007214:	d65f03c0 	ret

0000000096007218 <hdmi_disable>:

static tegrabl_error_t hdmi_disable(struct tegrabl_nvdisp *nvdisp)
{
	/* Dummy function */
	return TEGRABL_NO_ERROR;
}
    96007218:	52800000 	mov	w0, #0x0                   	// #0
    9600721c:	d65f03c0 	ret

0000000096007220 <hdmi_v2_x_mon_config>:
{
    96007220:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		reg = (HDMI_SCDC_TMDS_CONFIG_BIT_CLK_RATIO_40 | HDMI_SCDC_TMDS_CONFIG_SCRAMBLING_EN);
    96007224:	72001c1f 	tst	w0, #0xff
    96007228:	52800060 	mov	w0, #0x3                   	// #3
    9600722c:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
{
    96007230:	910003fd 	mov	x29, sp
		reg = (HDMI_SCDC_TMDS_CONFIG_BIT_CLK_RATIO_40 | HDMI_SCDC_TMDS_CONFIG_SCRAMBLING_EN);
    96007234:	910083a1 	add	x1, x29, #0x20
	err = tegrabl_i2c_dev_write(hi2c, &reg, offset, sizeof(uint8_t));
    96007238:	52800023 	mov	w3, #0x1                   	// #1
    9600723c:	52800402 	mov	w2, #0x20                  	// #32
		reg = (HDMI_SCDC_TMDS_CONFIG_BIT_CLK_RATIO_40 | HDMI_SCDC_TMDS_CONFIG_SCRAMBLING_EN);
    96007240:	381ffc20 	strb	w0, [x1, #-1]!
	err = tegrabl_i2c_dev_write(hi2c, &reg, offset, sizeof(uint8_t));
    96007244:	f0000320 	adrp	x0, 9606e000 <__bss_start>
    96007248:	f9422800 	ldr	x0, [x0, #1104]
    9600724c:	940020be 	bl	9600f544 <tegrabl_i2c_dev_write>
	if (err != TEGRABL_NO_ERROR) {
    96007250:	34000100 	cbz	w0, 96007270 <hdmi_v2_x_mon_config+0x50>
		pr_error("%s: i2c write failed for SCDC slave\n", __func__);
    96007254:	b00001a1 	adrp	x1, 9603c000 <__func__.4414+0x9>
    96007258:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600725c:	91004c21 	add	x1, x1, #0x13
    96007260:	91056400 	add	x0, x0, #0x159
    96007264:	94006d03 	bl	96022670 <tegrabl_printf>
    96007268:	52800340 	mov	w0, #0x1a                  	// #26
    9600726c:	72a94940 	movk	w0, #0x4a4a, lsl #16
}
    96007270:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96007274:	d65f03c0 	ret

0000000096007278 <hdmi_init>:
{
    96007278:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600727c:	910003fd 	mov	x29, sp
    96007280:	a90153f3 	stp	x19, x20, [sp, #16]
    96007284:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (!nvdisp || !nvdisp->mode) {
    96007288:	b4000080 	cbz	x0, 96007298 <hdmi_init+0x20>
    9600728c:	aa0003f4 	mov	x20, x0
    96007290:	f9402400 	ldr	x0, [x0, #72]
    96007294:	b50001a0 	cbnz	x0, 960072c8 <hdmi_init+0x50>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96007298:	52800055 	mov	w21, #0x2                   	// #2
		pr_error("%s: nvdisp or nvdisp->mode is NULL\n", __func__);
    9600729c:	900001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    960072a0:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960072a4:	913fdc21 	add	x1, x1, #0xff7
    960072a8:	91044400 	add	x0, x0, #0x111
    960072ac:	94006cf1 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960072b0:	72a94955 	movk	w21, #0x4a4a, lsl #16
}
    960072b4:	2a1503e0 	mov	w0, w21
    960072b8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960072bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960072c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960072c4:	d65f03c0 	ret
    960072c8:	aa0103f6 	mov	x22, x1
	hdmi = tegrabl_calloc(1, sizeof(struct hdmi));
    960072cc:	d2800020 	mov	x0, #0x1                   	// #1
    960072d0:	d2800701 	mov	x1, #0x38                  	// #56
    960072d4:	94007dfc 	bl	96026ac4 <tegrabl_calloc>
    960072d8:	aa0003f3 	mov	x19, x0
	if (!hdmi) {
    960072dc:	b5000100 	cbnz	x0, 960072fc <hdmi_init+0x84>
		pr_error("%s, memory allocation failed\n", __func__);
    960072e0:	900001a1 	adrp	x1, 9603b000 <tt_level+0x328>
    960072e4:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960072e8:	913fdc21 	add	x1, x1, #0xff7
    960072ec:	9104e000 	add	x0, x0, #0x138
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960072f0:	52800075 	mov	w21, #0x3                   	// #3
		pr_error("%s, memory allocation failed\n", __func__);
    960072f4:	94006cdf 	bl	96022670 <tegrabl_printf>
    960072f8:	17ffffee 	b	960072b0 <hdmi_init+0x38>
	memset(hdmi, 0, sizeof(struct hdmi));
    960072fc:	d2800702 	mov	x2, #0x38                  	// #56
    96007300:	52800001 	mov	w1, #0x0                   	// #0
    96007304:	94008ac9 	bl	96029e28 <memset>
	err = sor_init(&sor, &(pdata->sor_dtb));
    96007308:	910242c1 	add	x1, x22, #0x90
    9600730c:	9100e3a0 	add	x0, x29, #0x38
    96007310:	94000863 	bl	9600949c <sor_init>
    96007314:	2a0003f5 	mov	w21, w0
	if (err != TEGRABL_NO_ERROR) {
    96007318:	34000080 	cbz	w0, 96007328 <hdmi_init+0xb0>
		tegrabl_free(hdmi);
    9600731c:	aa1303e0 	mov	x0, x19
    96007320:	94007de6 	bl	96026ab8 <tegrabl_free>
    96007324:	17ffffe4 	b	960072b4 <hdmi_init+0x3c>
	sor->nvdisp = nvdisp;
    96007328:	f9401fa0 	ldr	x0, [x29, #56]
	sor->parent_clk = pdata->disp_clk_src;
    9600732c:	b9400ec1 	ldr	w1, [x22, #12]
	sor->nvdisp = nvdisp;
    96007330:	f9000014 	str	x20, [x0]
	sor->parent_clk = pdata->disp_clk_src;
    96007334:	b9002c01 	str	w1, [x0, #44]
	hdmi->sor = sor;
    96007338:	f9000a60 	str	x0, [x19, #16]
	hdmi->hdmi_dtb = &pdata->hdmi_dtb;
    9600733c:	910062c0 	add	x0, x22, #0x18
	hdmi->nvdisp = nvdisp;
    96007340:	f9000274 	str	x20, [x19]
	hdmi->hdmi_dtb = &pdata->hdmi_dtb;
    96007344:	f9000660 	str	x0, [x19, #8]
	hdmi->is_panel_hdmi = tegrabl_edid_is_panel_hdmi();
    96007348:	94000ef9 	bl	9600af2c <tegrabl_edid_is_panel_hdmi>
    9600734c:	3900c260 	strb	w0, [x19, #48]
	nvdisp->out_data = hdmi;
    96007350:	f9003e93 	str	x19, [x20, #120]
	memcpy(sor->xbar_ctrl, pdata->sor_dtb.xbar_ctrl, XBAR_CNT * sizeof(uint32_t));
    96007354:	d2800282 	mov	x2, #0x14                  	// #20
    96007358:	f9401fa0 	ldr	x0, [x29, #56]
    9600735c:	910262c1 	add	x1, x22, #0x98
    96007360:	91006000 	add	x0, x0, #0x18
    96007364:	94008af0 	bl	96029f24 <memcpy>
	return err;
    96007368:	17ffffd3 	b	960072b4 <hdmi_init+0x3c>

000000009600736c <hdmi_v2_x_config>:
{
    9600736c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96007370:	910003fd 	mov	x29, sp
    96007374:	a90153f3 	stp	x19, x20, [sp, #16]
    96007378:	aa0003f4 	mov	x20, x0
	err = hdmi_v2_x_mon_config(false);
    9600737c:	52800000 	mov	w0, #0x0                   	// #0
    96007380:	97ffffa8 	bl	96007220 <hdmi_v2_x_mon_config>
    96007384:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96007388:	350002e0 	cbnz	w0, 960073e4 <hdmi_v2_x_config+0x78>
		sor_writel_def(SOR_HDMI2_CTRL, SCRAMBLE, DISABLE, val);
    9600738c:	f9400a80 	ldr	x0, [x20, #16]
    96007390:	f9400400 	ldr	x0, [x0, #8]
void sor_config_prod_settings(struct sor_data *sor, struct prod_list *prod_list,
	struct prod_pair *node, uint32_t clk);

static inline uint32_t sor_readl(struct sor_data *sor, uint32_t reg)
{
	return NV_READ32(sor->base + reg * 4);
    96007394:	b944f801 	ldr	w1, [x0, #1272]
    96007398:	121f7821 	and	w1, w1, #0xfffffffe
}

static inline void sor_writel(struct sor_data *sor, uint32_t reg, uint32_t val)
{
	NV_WRITE32(sor->base + reg * 4, val);
    9600739c:	b904f801 	str	w1, [x0, #1272]
	return NV_READ32(sor->base + reg * 4);
    960073a0:	b944f801 	ldr	w1, [x0, #1272]
		sor_writel_def(SOR_HDMI2_CTRL, CLOCK_MODE, NORMAL, val);
    960073a4:	121e7821 	and	w1, w1, #0xfffffffd
	NV_WRITE32(sor->base + reg * 4, val);
    960073a8:	b904f801 	str	w1, [x0, #1272]
	err = hdmi_v2_x_mon_config(true);
    960073ac:	52800020 	mov	w0, #0x1                   	// #1
    960073b0:	97ffff9c 	bl	96007220 <hdmi_v2_x_mon_config>
    960073b4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960073b8:	35000160 	cbnz	w0, 960073e4 <hdmi_v2_x_config+0x78>
	tegrabl_mdelay(SCDC_STABILIZATION_DELAY_MS);
    960073bc:	d2800280 	mov	x0, #0x14                  	// #20
    960073c0:	94006256 	bl	9601fd18 <tegrabl_mdelay>
		sor_writel_def(SOR_HDMI2_CTRL, SCRAMBLE, ENABLE, val);
    960073c4:	f9400a80 	ldr	x0, [x20, #16]
    960073c8:	f9400400 	ldr	x0, [x0, #8]
	return NV_READ32(sor->base + reg * 4);
    960073cc:	b944f801 	ldr	w1, [x0, #1272]
    960073d0:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32(sor->base + reg * 4, val);
    960073d4:	b904f801 	str	w1, [x0, #1272]
	return NV_READ32(sor->base + reg * 4);
    960073d8:	b944f801 	ldr	w1, [x0, #1272]
		sor_writel_def(SOR_HDMI2_CTRL, CLOCK_MODE, MODE_DIV_BY_4, val);
    960073dc:	321f0021 	orr	w1, w1, #0x2
	NV_WRITE32(sor->base + reg * 4, val);
    960073e0:	b904f801 	str	w1, [x0, #1272]
}
    960073e4:	2a1303e0 	mov	w0, w19
    960073e8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960073ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960073f0:	d65f03c0 	ret

00000000960073f4 <monitor_scdc_block>:
{
    960073f4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960073f8:	910003fd 	mov	x29, sp
    960073fc:	a90153f3 	stp	x19, x20, [sp, #16]
    96007400:	aa0003f3 	mov	x19, x0
		err = tegrabl_i2c_dev_read(hi2c, &reg, offset, sizeof(uint8_t));
    96007404:	f0000334 	adrp	x20, 9606e000 <__bss_start>
    96007408:	f9422a80 	ldr	x0, [x20, #1104]
    9600740c:	52800023 	mov	w3, #0x1                   	// #1
		reg = 0x0;
    96007410:	3900bfbf 	strb	wzr, [x29, #47]
		err = tegrabl_i2c_dev_read(hi2c, &reg, offset, sizeof(uint8_t));
    96007414:	52800402 	mov	w2, #0x20                  	// #32
    96007418:	9100bfa1 	add	x1, x29, #0x2f
    9600741c:	94001fa9 	bl	9600f2c0 <tegrabl_i2c_dev_read>
		if (err != TEGRABL_NO_ERROR) {
    96007420:	34000100 	cbz	w0, 96007440 <monitor_scdc_block+0x4c>
			pr_error("%s: i2c read failed for SCDC slave\n", __func__);
    96007424:	b00001a1 	adrp	x1, 9603c000 <__func__.4414+0x9>
    96007428:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600742c:	9100a021 	add	x1, x1, #0x28
    96007430:	91060400 	add	x0, x0, #0x181
    96007434:	94006c8f 	bl	96022670 <tegrabl_printf>
				thread_exit(0);
    96007438:	52800000 	mov	w0, #0x0                   	// #0
    9600743c:	97fff71f 	bl	960050b8 <thread_exit>
		if (reg == 0) {
    96007440:	3940bfa0 	ldrb	w0, [x29, #47]
    96007444:	35000100 	cbnz	w0, 96007464 <monitor_scdc_block+0x70>
			err = hdmi_v2_x_config(hdmi);
    96007448:	aa1303e0 	mov	x0, x19
    9600744c:	97ffffc8 	bl	9600736c <hdmi_v2_x_config>
			if (err != TEGRABL_NO_ERROR) {
    96007450:	340000a0 	cbz	w0, 96007464 <monitor_scdc_block+0x70>
				pr_error("programming scdc block failed\n");
    96007454:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007458:	9106a000 	add	x0, x0, #0x1a8
    9600745c:	94006c85 	bl	96022670 <tegrabl_printf>
    96007460:	17fffff6 	b	96007438 <monitor_scdc_block+0x44>
		thread_sleep(SCDC_THREAD_SLEEP_MS);
    96007464:	d2827100 	mov	x0, #0x1388                	// #5000
    96007468:	97fff549 	bl	9600498c <thread_sleep>
		reg = 0x0;
    9600746c:	17ffffe7 	b	96007408 <monitor_scdc_block+0x14>

0000000096007470 <hdmi_enable>:
{
    96007470:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96007474:	910003fd 	mov	x29, sp
    96007478:	a90153f3 	stp	x19, x20, [sp, #16]
	struct hdmi *hdmi = nvdisp->out_data;
    9600747c:	f9403c13 	ldr	x19, [x0, #120]
{
    96007480:	a9025bf5 	stp	x21, x22, [sp, #32]
    96007484:	aa0003f5 	mov	x21, x0
    96007488:	a90363f7 	stp	x23, x24, [sp, #48]
	pr_info("%s, starting HDMI initialisation\n", __func__);
    9600748c:	b00001b6 	adrp	x22, 9603c000 <__func__.4414+0x9>
	struct sor_data *sor = hdmi->sor;
    96007490:	f9400a74 	ldr	x20, [x19, #16]
	pr_info("%s, starting HDMI initialisation\n", __func__);
    96007494:	9100eec1 	add	x1, x22, #0x3b
    96007498:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600749c:	91011c00 	add	x0, x0, #0x47
    960074a0:	94006c74 	bl	96022670 <tegrabl_printf>
		sor->clk_type = TEGRA_SOR_SAFE_CLK;
    960074a4:	52800037 	mov	w23, #0x1                   	// #1
		tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_SAFE, 0, TEGRABL_CLK_SRC_PLLP_OUT0);
    960074a8:	52800062 	mov	w2, #0x3                   	// #3
    960074ac:	52800001 	mov	w1, #0x0                   	// #0
    960074b0:	528001c0 	mov	w0, #0xe                   	// #14
    960074b4:	940060a5 	bl	9601f748 <tegrabl_car_set_clk_src>
		tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_SAFE, 0, NULL);
    960074b8:	d2800002 	mov	x2, #0x0                   	// #0
    960074bc:	52800001 	mov	w1, #0x0                   	// #0
    960074c0:	528001c0 	mov	w0, #0xe                   	// #14
    960074c4:	94006102 	bl	9601f8cc <tegrabl_car_clk_enable>
		tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_OUT, sor->instance, TEGRABL_CLK_SRC_SOR_SAFE_CLK);
    960074c8:	39404281 	ldrb	w1, [x20, #16]
    960074cc:	52800302 	mov	w2, #0x18                  	// #24
    960074d0:	528003a0 	mov	w0, #0x1d                  	// #29
	uint32_t clk_rate = 0;
    960074d4:	910143b8 	add	x24, x29, #0x50
		tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_OUT, sor->instance, TEGRABL_CLK_SRC_SOR_SAFE_CLK);
    960074d8:	9400609c 	bl	9601f748 <tegrabl_car_set_clk_src>
		tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_OUT, sor->instance, NULL);
    960074dc:	39404281 	ldrb	w1, [x20, #16]
    960074e0:	d2800002 	mov	x2, #0x0                   	// #0
    960074e4:	528003a0 	mov	w0, #0x1d                  	// #29
    960074e8:	940060f9 	bl	9601f8cc <tegrabl_car_clk_enable>
		tegrabl_udelay(20);
    960074ec:	d2800280 	mov	x0, #0x14                  	// #20
    960074f0:	940061ed 	bl	9601fca4 <tegrabl_udelay>
		tegrabl_car_rst_set(TEGRABL_MODULE_SOR, sor->instance);
    960074f4:	39404281 	ldrb	w1, [x20, #16]
    960074f8:	52800380 	mov	w0, #0x1c                  	// #28
    960074fc:	94006161 	bl	9601fa80 <tegrabl_car_rst_set>
		tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR, sor->instance, sor->parent_clk);
    96007500:	39404281 	ldrb	w1, [x20, #16]
    96007504:	52800380 	mov	w0, #0x1c                  	// #28
    96007508:	b9402e82 	ldr	w2, [x20, #44]
    9600750c:	9400608f 	bl	9601f748 <tegrabl_car_set_clk_src>
		tegrabl_car_clk_enable(TEGRABL_MODULE_SOR, sor->instance, NULL);
    96007510:	39404281 	ldrb	w1, [x20, #16]
    96007514:	d2800002 	mov	x2, #0x0                   	// #0
    96007518:	52800380 	mov	w0, #0x1c                  	// #28
    9600751c:	940060ec 	bl	9601f8cc <tegrabl_car_clk_enable>
		tegrabl_car_rst_clear(TEGRABL_MODULE_SOR, sor->instance);
    96007520:	39404281 	ldrb	w1, [x20, #16]
    96007524:	52800380 	mov	w0, #0x1c                  	// #28
    96007528:	9400615d 	bl	9601fa9c <tegrabl_car_rst_clear>
		tegrabl_udelay(20);
    9600752c:	d2800280 	mov	x0, #0x14                  	// #20
    96007530:	940061dd 	bl	9601fca4 <tegrabl_udelay>
	sor_writel(sor, SOR_NV_PDISP_SOR_SEQ_INST0_0, 0x8080);
    96007534:	f9400680 	ldr	x0, [x20, #8]
    96007538:	52901001 	mov	w1, #0x8080                	// #32896
		sor->clk_type = TEGRA_SOR_SAFE_CLK;
    9600753c:	39005697 	strb	w23, [x20, #21]
    96007540:	b9008801 	str	w1, [x0, #136]
	sor_config_hdmi_clk(sor, nvdisp->mode->pclk);
    96007544:	f94026a0 	ldr	x0, [x21, #72]
    96007548:	b9400001 	ldr	w1, [x0]
    9600754c:	aa1403e0 	mov	x0, x20
    96007550:	940008b3 	bl	9600981c <sor_config_hdmi_clk>
	sor_config_prod_settings(sor, hdmi->hdmi_dtb->prod_list, tmds_config_modes, nvdisp->mode->pclk);
    96007554:	f9400660 	ldr	x0, [x19, #8]
    96007558:	d0000202 	adrp	x2, 96049000 <default_srgb_lut+0xa28>
    9600755c:	f94026a1 	ldr	x1, [x21, #72]
    96007560:	912c6042 	add	x2, x2, #0xb18
    96007564:	b9400023 	ldr	w3, [x1]
    96007568:	f9400c01 	ldr	x1, [x0, #24]
    9600756c:	aa1403e0 	mov	x0, x20
    96007570:	94000a3a 	bl	96009e58 <sor_config_prod_settings>
	sor_hdmi_pad_power_up(sor);
    96007574:	aa1403e0 	mov	x0, x20
    96007578:	940008cc 	bl	960098a8 <sor_hdmi_pad_power_up>
	sor_power_lanes(sor, 4, true);
    9600757c:	2a1703e2 	mov	w2, w23
    96007580:	52800081 	mov	w1, #0x4                   	// #4
    96007584:	aa1403e0 	mov	x0, x20
    96007588:	94000824 	bl	96009618 <sor_power_lanes>
	sor_config_xbar(sor);
    9600758c:	aa1403e0 	mov	x0, x20
    96007590:	94000994 	bl	96009be0 <sor_config_xbar>
	hdmi_clock_config(nvdisp->mode->pclk, sor, TEGRA_SOR_LINK_CLK);
    96007594:	f94026a0 	ldr	x0, [x21, #72]
    96007598:	b9401281 	ldr	w1, [x20, #16]
    9600759c:	b9400017 	ldr	w23, [x0]
	uint32_t pclk = clk / KHZ;
    960075a0:	52807d00 	mov	w0, #0x3e8                 	// #1000
	uint32_t clk_rate = 0;
    960075a4:	b81fcf1f 	str	wzr, [x24, #-4]!
			tegrabl_car_set_clk_rate(TEGRABL_MODULE_SOR, sor->instance, pclk >> 1, &clk_rate);
    960075a8:	aa1803e3 	mov	x3, x24
	uint32_t pclk = clk / KHZ;
    960075ac:	1ac00af7 	udiv	w23, w23, w0
		if (pclk > (MAX_1_4_FREQUENCY / KHZ)) {
    960075b0:	52860400 	mov	w0, #0x3020                	// #12320
    960075b4:	72a000a0 	movk	w0, #0x5, lsl #16
    960075b8:	6b0002ff 	cmp	w23, w0
    960075bc:	54001889 	b.ls	960078cc <hdmi_enable+0x45c>  // b.plast
			tegrabl_car_set_clk_rate(TEGRABL_MODULE_SOR, sor->instance, pclk >> 1, &clk_rate);
    960075c0:	53017ee2 	lsr	w2, w23, #1
			tegrabl_car_set_clk_rate(TEGRABL_MODULE_SOR, sor->instance, pclk, &clk_rate);
    960075c4:	52800380 	mov	w0, #0x1c                  	// #28
    960075c8:	94006111 	bl	9601fa0c <tegrabl_car_set_clk_rate>
		tegrabl_car_set_clk_rate(TEGRABL_MODULE_SOR_PAD_CLKOUT, sor->instance, pclk, &clk_rate);
    960075cc:	39404281 	ldrb	w1, [x20, #16]
    960075d0:	aa1803e3 	mov	x3, x24
    960075d4:	2a1703e2 	mov	w2, w23
    960075d8:	528003c0 	mov	w0, #0x1e                  	// #30
    960075dc:	9400610c 	bl	9601fa0c <tegrabl_car_set_clk_rate>
		tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_PAD_CLKOUT, sor->instance, NULL);
    960075e0:	39404281 	ldrb	w1, [x20, #16]
    960075e4:	d2800002 	mov	x2, #0x0                   	// #0
    960075e8:	528003c0 	mov	w0, #0x1e                  	// #30
    960075ec:	940060b8 	bl	9601f8cc <tegrabl_car_clk_enable>
		switch (sor->instance) {
    960075f0:	b9401281 	ldr	w1, [x20, #16]
    960075f4:	34001701 	cbz	w1, 960078d4 <hdmi_enable+0x464>
    960075f8:	7100043f 	cmp	w1, #0x1
    960075fc:	54001800 	b.eq	960078fc <hdmi_enable+0x48c>  // b.none
			pr_error("%s: invalid SOR instance %d\n", __func__, sor->instance);
    96007600:	2a0103e2 	mov	w2, w1
    96007604:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007608:	b00001a1 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600760c:	9101b000 	add	x0, x0, #0x6c
    96007610:	91000421 	add	x1, x1, #0x1
    96007614:	94006c17 	bl	96022670 <tegrabl_printf>
		sor->clk_type = TEGRA_SOR_LINK_CLK;
    96007618:	52800040 	mov	w0, #0x2                   	// #2
    9600761c:	39005680 	strb	w0, [x20, #21]
	sor_set_internal_panel(sor, false);
    96007620:	52800001 	mov	w1, #0x0                   	// #0
    96007624:	aa1403e0 	mov	x0, x20
    96007628:	94000929 	bl	96009acc <sor_set_internal_panel>
	struct sor_data *sor = hdmi->sor;
    9600762c:	f9400a77 	ldr	x23, [x19, #16]
	struct tegrabl_nvdisp *nvdisp = hdmi->nvdisp;
    96007630:	f9400278 	ldr	x24, [x19]
	reg_val = sor_readl(sor, SOR_NV_PDISP_INPUT_CONTROL_0);
    96007634:	f94006e1 	ldr	x1, [x23, #8]
	hblank = nvdisp->mode->h_sync_width + nvdisp->mode->h_back_porch + nvdisp->mode->h_front_porch;
    96007638:	f9402702 	ldr	x2, [x24, #72]
	return NV_READ32(sor->base + reg * 4);
    9600763c:	b943a020 	ldr	w0, [x1, #928]
	reg_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, INPUT_CONTROL, ARM_VIDEO_RANGE, LIMITED, reg_val);
    96007640:	321f0000 	orr	w0, w0, #0x2
	NV_WRITE32(sor->base + reg * 4, val);
    96007644:	b903a020 	str	w0, [x1, #928]
	max_ac = (hblank - rekey - 18) / 32;
    96007648:	b9401843 	ldr	w3, [x2, #24]
    9600764c:	b9401040 	ldr	w0, [x2, #16]
    96007650:	b9402842 	ldr	w2, [x2, #40]
    96007654:	0b030000 	add	w0, w0, w3
	val |= hdmi->is_panel_hdmi ? NV_DRF_DEF(SOR_NV_PDISP, SOR_HDMI_CTRL, ENABLE, EN) : 0x0;
    96007658:	3940c263 	ldrb	w3, [x19, #48]
	max_ac = (hblank - rekey - 18) / 32;
    9600765c:	51012842 	sub	w2, w2, #0x4a
    96007660:	0b020000 	add	w0, w0, w2
	val |= hdmi->is_panel_hdmi ? NV_DRF_DEF(SOR_NV_PDISP, SOR_HDMI_CTRL, ENABLE, EN) : 0x0;
    96007664:	7100007f 	cmp	w3, #0x0
    96007668:	1a9f07e2 	cset	w2, ne  // ne = any
	max_ac = (hblank - rekey - 18) / 32;
    9600766c:	53057c00 	lsr	w0, w0, #5
	val |= NV_SOR_HDMI_CTRL_MAX_AC_PACKET(max_ac);
    96007670:	53101000 	ubfiz	w0, w0, #16, #5
    96007674:	321d0800 	orr	w0, w0, #0x38
    96007678:	2a027800 	orr	w0, w0, w2, lsl #30
    9600767c:	b9030020 	str	w0, [x1, #768]
	if (!hdmi->is_panel_hdmi) {
    96007680:	340006a3 	cbz	w3, 96007754 <hdmi_enable+0x2e4>
    96007684:	b9027c3f 	str	wzr, [x1, #636]
	memset(&hdmi->avi, 0, sizeof(hdmi->avi));
    96007688:	d2800202 	mov	x2, #0x10                  	// #16
    9600768c:	52800001 	mov	w1, #0x0                   	// #0
    96007690:	91006260 	add	x0, x19, #0x18
    96007694:	940089e5 	bl	96029e28 <memset>
	avi->scan = HDMI_AVI_UNDERSCAN;
    96007698:	39406660 	ldrb	w0, [x19, #25]
    9600769c:	52800041 	mov	w1, #0x2                   	// #2
    960076a0:	33000420 	bfxil	w0, w1, #0, #2
	avi->act_format = HDMI_AVI_ACTIVE_FORMAT_SAME;
    960076a4:	52800101 	mov	w1, #0x8                   	// #8
	avi->rgb_ycc = HDMI_AVI_RGB;
    960076a8:	12196800 	and	w0, w0, #0xffffff83
    960076ac:	39006660 	strb	w0, [x19, #25]
	avi->act_format = HDMI_AVI_ACTIVE_FORMAT_SAME;
    960076b0:	39406a60 	ldrb	w0, [x19, #26]
    960076b4:	33000c20 	bfxil	w0, w1, #0, #4
    960076b8:	39006a60 	strb	w0, [x19, #26]
	switch (hdmi->nvdisp->mode->avi_m) {
    960076bc:	f9400260 	ldr	x0, [x19]
    960076c0:	f9402400 	ldr	x0, [x0, #72]
    960076c4:	3940d000 	ldrb	w0, [x0, #52]
    960076c8:	7100041f 	cmp	w0, #0x1
    960076cc:	54000080 	b.eq	960076dc <hdmi_enable+0x26c>  // b.none
		aspect_ratio = HDMI_AVI_ASPECT_RATIO_NO_DATA;
    960076d0:	7100081f 	cmp	w0, #0x2
    960076d4:	1a9f17e0 	cset	w0, eq  // eq = none
    960076d8:	531f7800 	lsl	w0, w0, #1
	avi->aspect_ratio = hdmi_get_aspect_ratio(hdmi);
    960076dc:	39406a61 	ldrb	w1, [x19, #26]
	avi->it_content = HDMI_AVI_IT_CONTENT_FALSE;
    960076e0:	39006e7f 	strb	wzr, [x19, #27]
	avi->aspect_ratio = hdmi_get_aspect_ratio(hdmi);
    960076e4:	331c0401 	bfi	w1, w0, #4, #2
	avi->video_format = nvdisp->mode->vic;
    960076e8:	39407260 	ldrb	w0, [x19, #28]
	avi->colorimetry = HDMI_AVI_COLORIMETRY_DEFAULT;
    960076ec:	12001421 	and	w1, w1, #0x3f
    960076f0:	39006a61 	strb	w1, [x19, #26]
	avi->video_format = nvdisp->mode->vic;
    960076f4:	f9402701 	ldr	x1, [x24, #72]
    960076f8:	b9403821 	ldr	w1, [x1, #56]
	avi->pix_rep = HDMI_AVI_NO_PIX_REPEAT;
    960076fc:	7801d27f 	sturh	wzr, [x19, #29]
	avi->left_bar_end_pixel_low_byte = 0;
    96007700:	79004a7f 	strh	wzr, [x19, #36]
	avi->video_format = nvdisp->mode->vic;
    96007704:	33001820 	bfxil	w0, w1, #0, #7
    96007708:	39007260 	strb	w0, [x19, #28]
	sor_writel(sor, header_reg, val);
    9600770c:	f9400a60 	ldr	x0, [x19, #16]
    96007710:	52805041 	mov	w1, #0x282                 	// #642
	avi->right_bar_start_pixel_low_byte = 0;
    96007714:	39009a7f 	strb	wzr, [x19, #38]
    96007718:	72a001a1 	movk	w1, #0xd, lsl #16
	sor_writel(sor, header_reg, val);
    9600771c:	f9400400 	ldr	x0, [x0, #8]
	avi->top_bar_end_line_high_byte = 0;
    96007720:	b900227f 	str	wzr, [x19, #32]
    96007724:	b9028401 	str	w1, [x0, #644]
		sor_writel(sor, data_reg, *data);
    96007728:	b9401a61 	ldr	w1, [x19, #24]
    9600772c:	b9028801 	str	w1, [x0, #648]
    96007730:	b9401e61 	ldr	w1, [x19, #28]
    96007734:	b9028c01 	str	w1, [x0, #652]
    96007738:	b9402261 	ldr	w1, [x19, #32]
    9600773c:	b9029001 	str	w1, [x0, #656]
    96007740:	b9402661 	ldr	w1, [x19, #36]
    96007744:	b9029401 	str	w1, [x0, #660]
	sor_writel(sor, SOR_NV_PDISP_SOR_HDMI_AVI_INFOFRAME_CTRL_0,
    96007748:	f94006e0 	ldr	x0, [x23, #8]
    9600774c:	52804021 	mov	w1, #0x201                 	// #513
    96007750:	b9027c01 	str	w1, [x0, #636]
	if (!hdmi->is_panel_hdmi) {
    96007754:	3940c260 	ldrb	w0, [x19, #48]
    96007758:	34000580 	cbz	w0, 96007808 <hdmi_enable+0x398>
	struct sor_data *sor = hdmi->sor;
    9600775c:	f9400a77 	ldr	x23, [x19, #16]
	memset(&hdmi->vsi, 0, sizeof(hdmi->vsi));
    96007760:	d2800102 	mov	x2, #0x8                   	// #8
    96007764:	52800001 	mov	w1, #0x0                   	// #0
	sor_writel(sor, SOR_NV_PDISP_SOR_HDMI_VSI_INFOFRAME_CTRL_0, 0);
    96007768:	f94006e0 	ldr	x0, [x23, #8]
    9600776c:	b9048c1f 	str	wzr, [x0, #1164]
	struct tegrabl_nvdisp *nvdisp = hdmi->nvdisp;
    96007770:	aa1303e0 	mov	x0, x19
    96007774:	f8428418 	ldr	x24, [x0], #40
	memset(&hdmi->vsi, 0, sizeof(hdmi->vsi));
    96007778:	940089ac 	bl	96029e28 <memset>
	vsi->oui = HDMI_LICENSING_LLC_OUI;
    9600777c:	b9402a60 	ldr	w0, [x19, #40]
    96007780:	52818061 	mov	w1, #0xc03                 	// #3075
    96007784:	33185c20 	bfi	w0, w1, #8, #24
    96007788:	b9002a60 	str	w0, [x19, #40]
	if ((nvdisp->mode->pclk == CLK_4K_30) && ((nvdisp->mode->h_active == WIDTH_4K_3840) ||
    9600778c:	529b8800 	mov	w0, #0xdc40                	// #56384
    96007790:	f9402701 	ldr	x1, [x24, #72]
    96007794:	72a23660 	movk	w0, #0x11b3, lsl #16
    96007798:	b9400022 	ldr	w2, [x1]
    9600779c:	6b00005f 	cmp	w2, w0
    960077a0:	3940b260 	ldrb	w0, [x19, #44]
    960077a4:	54000b01 	b.ne	96007904 <hdmi_enable+0x494>  // b.any
    960077a8:	b9402022 	ldr	w2, [x1, #32]
    960077ac:	52820003 	mov	w3, #0x1000                	// #4096
    960077b0:	713c005f 	cmp	w2, #0xf00
    960077b4:	7a431044 	ccmp	w2, w3, #0x4, ne  // ne = any
    960077b8:	54000a61 	b.ne	96007904 <hdmi_enable+0x494>  // b.any
		(nvdisp->mode->h_active == WIDTH_4K_4096)) && (nvdisp->mode->v_active == HEIGHT_4K)) {
    960077bc:	b9402421 	ldr	w1, [x1, #36]
    960077c0:	7121c03f 	cmp	w1, #0x870
    960077c4:	54000a01 	b.ne	96007904 <hdmi_enable+0x494>  // b.any
		vsi->video_format = HDMI_VENDOR_VIDEO_FORMAT_EXTENDED;
    960077c8:	52800021 	mov	w1, #0x1                   	// #1
		vsi->extended_vic = 1;
    960077cc:	3900b661 	strb	w1, [x19, #45]
		vsi->video_format = HDMI_VENDOR_VIDEO_FORMAT_EXTENDED;
    960077d0:	331b0820 	bfi	w0, w1, #5, #3
    960077d4:	3900b260 	strb	w0, [x19, #44]
	sor_writel(sor, header_reg, val);
    960077d8:	f9400a60 	ldr	x0, [x19, #16]
    960077dc:	52803021 	mov	w1, #0x181                 	// #385
    960077e0:	72a000c1 	movk	w1, #0x6, lsl #16
    960077e4:	f9400400 	ldr	x0, [x0, #8]
    960077e8:	b9049401 	str	w1, [x0, #1172]
		sor_writel(sor, data_reg, *data);
    960077ec:	b9402a61 	ldr	w1, [x19, #40]
    960077f0:	b9049801 	str	w1, [x0, #1176]
    960077f4:	b9402e61 	ldr	w1, [x19, #44]
    960077f8:	b9049c01 	str	w1, [x0, #1180]
	sor_writel(sor, SOR_NV_PDISP_SOR_HDMI_VSI_INFOFRAME_CTRL_0,
    960077fc:	f94006e0 	ldr	x0, [x23, #8]
    96007800:	52804021 	mov	w1, #0x201                 	// #513
    96007804:	b9048c01 	str	w1, [x0, #1164]
	status = sor_set_power_state(sor, 1);
    96007808:	52800021 	mov	w1, #0x1                   	// #1
    9600780c:	aa1403e0 	mov	x0, x20
    96007810:	940007e0 	bl	96009790 <sor_set_power_state>
    96007814:	2a0003f7 	mov	w23, w0
	if (status != TEGRABL_NO_ERROR) {
    96007818:	350004e0 	cbnz	w0, 960078b4 <hdmi_enable+0x444>
	sor_attach(sor);
    9600781c:	aa1403e0 	mov	x0, x20
    96007820:	94000904 	bl	96009c30 <sor_attach>
	if (nvdisp->mode->pclk > MAX_1_4_FREQUENCY) {
    96007824:	f94026a0 	ldr	x0, [x21, #72]
    96007828:	b9400001 	ldr	w1, [x0]
    9600782c:	529fa000 	mov	w0, #0xfd00                	// #64768
    96007830:	72a28860 	movk	w0, #0x1443, lsl #16
    96007834:	6b00003f 	cmp	w1, w0
    96007838:	54000329 	b.ls	9600789c <hdmi_enable+0x42c>  // b.plast
		hi2c = tegrabl_i2c_dev_open(TEGRABL_INSTANCE_I2C4, SCDC_SLAVE, 1, 1);
    9600783c:	52800023 	mov	w3, #0x1                   	// #1
    96007840:	52801501 	mov	w1, #0xa8                  	// #168
    96007844:	2a0303e2 	mov	w2, w3
    96007848:	52800060 	mov	w0, #0x3                   	// #3
    9600784c:	94001e6a 	bl	9600f1f4 <tegrabl_i2c_dev_open>
    96007850:	f0000321 	adrp	x1, 9606e000 <__bss_start>
    96007854:	f9022820 	str	x0, [x1, #1104]
		if (!hi2c) {
    96007858:	b4000740 	cbz	x0, 96007940 <hdmi_enable+0x4d0>
		if (hdmi_v2_x_config(hdmi) == TEGRABL_NO_ERROR) {
    9600785c:	aa1303e0 	mov	x0, x19
    96007860:	97fffec3 	bl	9600736c <hdmi_v2_x_config>
    96007864:	350001c0 	cbnz	w0, 9600789c <hdmi_enable+0x42c>
	t = thread_create("monitor_scdc_block", monitor_scdc_block, hdmi, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    96007868:	aa1303e2 	mov	x2, x19
    9600786c:	d2840004 	mov	x4, #0x2000                	// #8192
    96007870:	52800203 	mov	w3, #0x10                  	// #16
    96007874:	90000001 	adrp	x1, 96007000 <nvdisp_win_config+0x68>
    96007878:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600787c:	910fd021 	add	x1, x1, #0x3f4
    96007880:	91023000 	add	x0, x0, #0x8c
    96007884:	97fff364 	bl	96004614 <thread_create>
    96007888:	aa0003f3 	mov	x19, x0
	if (!t)
    9600788c:	b5000440 	cbnz	x0, 96007914 <hdmi_enable+0x4a4>
		pr_error("thread creation failed\n");
    96007890:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007894:	91027c00 	add	x0, x0, #0x9f
			pr_error("thread resume failed\n");
    96007898:	94006b76 	bl	96022670 <tegrabl_printf>
	sor_dump_registers(sor);
    9600789c:	aa1403e0 	mov	x0, x20
    960078a0:	94000996 	bl	96009ef8 <sor_dump_registers>
	pr_info("%s, HDMI initialisation complete\n", __func__);
    960078a4:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960078a8:	9100eec1 	add	x1, x22, #0x3b
    960078ac:	9103b000 	add	x0, x0, #0xec
    960078b0:	94006b70 	bl	96022670 <tegrabl_printf>
}
    960078b4:	2a1703e0 	mov	w0, w23
    960078b8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960078bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960078c0:	a94363f7 	ldp	x23, x24, [sp, #48]
    960078c4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960078c8:	d65f03c0 	ret
			tegrabl_car_set_clk_rate(TEGRABL_MODULE_SOR, sor->instance, pclk, &clk_rate);
    960078cc:	2a1703e2 	mov	w2, w23
    960078d0:	17ffff3d 	b	960075c4 <hdmi_enable+0x154>
			parent_pad_clk = TEGRABL_CLK_SRC_SOR0_PAD_CLKOUT;
    960078d4:	52800322 	mov	w2, #0x19                  	// #25
			tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_OUT, sor->instance, parent_pad_clk);
    960078d8:	528003a0 	mov	w0, #0x1d                  	// #29
    960078dc:	94005f9b 	bl	9601f748 <tegrabl_car_set_clk_src>
			tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_OUT, sor->instance, NULL);
    960078e0:	39404281 	ldrb	w1, [x20, #16]
    960078e4:	d2800002 	mov	x2, #0x0                   	// #0
    960078e8:	528003a0 	mov	w0, #0x1d                  	// #29
    960078ec:	94005ff8 	bl	9601f8cc <tegrabl_car_clk_enable>
			tegrabl_udelay(250);
    960078f0:	d2801f40 	mov	x0, #0xfa                  	// #250
    960078f4:	940060ec 	bl	9601fca4 <tegrabl_udelay>
    960078f8:	17ffff48 	b	96007618 <hdmi_enable+0x1a8>
			parent_pad_clk = TEGRABL_CLK_SRC_SOR1_PAD_CLKOUT;
    960078fc:	52800342 	mov	w2, #0x1a                  	// #26
    96007900:	17fffff6 	b	960078d8 <hdmi_enable+0x468>
		vsi->video_format = HDMI_VENDOR_VIDEO_FORMAT_NONE;
    96007904:	12001000 	and	w0, w0, #0x1f
    96007908:	3900b260 	strb	w0, [x19, #44]
		vsi->extended_vic = 0;
    9600790c:	3900b67f 	strb	wzr, [x19, #45]
    96007910:	17ffffb2 	b	960077d8 <hdmi_enable+0x368>
		if (thread_detach(t))
    96007914:	97fff5b0 	bl	96004fd4 <thread_detach>
    96007918:	34000080 	cbz	w0, 96007928 <hdmi_enable+0x4b8>
			pr_error("thread detach failed\n");
    9600791c:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007920:	9102e800 	add	x0, x0, #0xba
    96007924:	17ffffdd 	b	96007898 <hdmi_enable+0x428>
		else if (thread_resume(t))
    96007928:	aa1303e0 	mov	x0, x19
    9600792c:	97fff376 	bl	96004704 <thread_resume>
    96007930:	34fffb60 	cbz	w0, 9600789c <hdmi_enable+0x42c>
			pr_error("thread resume failed\n");
    96007934:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007938:	91034c00 	add	x0, x0, #0xd3
    9600793c:	17ffffd7 	b	96007898 <hdmi_enable+0x428>
			return TEGRABL_ERROR(TEGRABL_ERR_I2C_DEV, 0);
    96007940:	528004f7 	mov	w23, #0x27                  	// #39
    96007944:	72a94957 	movk	w23, #0x4a4a, lsl #16
    96007948:	17ffffdb 	b	960078b4 <hdmi_enable+0x444>

000000009600794c <tegrabl_dp_setup_clk>:
/* Setup clock for Nvdisp and DP */
uint64_t tegrabl_dp_setup_clk(struct tegrabl_nvdisp *nvdisp, uint32_t clk_id)
{
	/*dummy func*/
	return 0;
}
    9600794c:	d2800000 	mov	x0, #0x0                   	// #0
    96007950:	d65f03c0 	ret

0000000096007954 <dp_link_cal>:
	if (dp->pdata->br_prod_list == NULL) {
    96007954:	f9408401 	ldr	x1, [x0, #264]
    96007958:	f9402021 	ldr	x1, [x1, #64]
    9600795c:	b4000221 	cbz	x1, 960079a0 <dp_link_cal+0x4c>
{
    96007960:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96007964:	910003fd 	mov	x29, sp
	switch (cfg->link_bw) {
    96007968:	3940e003 	ldrb	w3, [x0, #56]
    9600796c:	7100287f 	cmp	w3, #0xa
    96007970:	540000a0 	b.eq	96007984 <dp_link_cal+0x30>  // b.none
    96007974:	7100507f 	cmp	w3, #0x14
    96007978:	54000060 	b.eq	96007984 <dp_link_cal+0x30>  // b.none
    9600797c:	7100187f 	cmp	w3, #0x6
    96007980:	54000161 	b.ne	960079ac <dp_link_cal+0x58>  // b.any
		sor_config_prod_settings(dp->sor, dp->pdata->br_prod_list, dp_br_nodes, SOR_LINK_SPEED_G5_4);
    96007984:	f9400800 	ldr	x0, [x0, #16]
    96007988:	d0000202 	adrp	x2, 96049000 <default_srgb_lut+0xa28>
    9600798c:	912b4042 	add	x2, x2, #0xad0
    96007990:	94000932 	bl	96009e58 <sor_config_prod_settings>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96007994:	52800000 	mov	w0, #0x0                   	// #0
}
    96007998:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600799c:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    960079a0:	52800380 	mov	w0, #0x1c                  	// #28
    960079a4:	72ac2c20 	movk	w0, #0x6161, lsl #16
}
    960079a8:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 1);
    960079ac:	52802380 	mov	w0, #0x11c                 	// #284
    960079b0:	72ac2c20 	movk	w0, #0x6161, lsl #16
	return err;
    960079b4:	17fffff9 	b	96007998 <dp_link_cal+0x44>

00000000960079b8 <tegrabl_dp_init>:
{
    960079b8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960079bc:	910003fd 	mov	x29, sp
    960079c0:	a90153f3 	stp	x19, x20, [sp, #16]
    960079c4:	aa0103f4 	mov	x20, x1
    960079c8:	a9025bf5 	stp	x21, x22, [sp, #32]
	dp = tegrabl_calloc(1, sizeof(struct tegrabl_dp));
    960079cc:	d2803001 	mov	x1, #0x180                 	// #384
{
    960079d0:	aa0003f6 	mov	x22, x0
    960079d4:	f9001bf7 	str	x23, [sp, #48]
	dp = tegrabl_calloc(1, sizeof(struct tegrabl_dp));
    960079d8:	d2800020 	mov	x0, #0x1                   	// #1
    960079dc:	94007c3a 	bl	96026ac4 <tegrabl_calloc>
	if (!dp) {
    960079e0:	b50001c0 	cbnz	x0, 96007a18 <tegrabl_dp_init+0x60>
		ret = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960079e4:	52800075 	mov	w21, #0x3                   	// #3
		pr_error("%s, memory allocation failed\n", __func__);
    960079e8:	b00001a1 	adrp	x1, 9603c000 <__func__.4414+0x9>
		ret = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960079ec:	72ac2c35 	movk	w21, #0x6161, lsl #16
		pr_error("%s, memory allocation failed\n", __func__);
    960079f0:	91078821 	add	x1, x1, #0x1e2
    960079f4:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960079f8:	9104e000 	add	x0, x0, #0x138
    960079fc:	94006b1d 	bl	96022670 <tegrabl_printf>
}
    96007a00:	2a1503e0 	mov	w0, w21
    96007a04:	f9401bf7 	ldr	x23, [sp, #48]
    96007a08:	a94153f3 	ldp	x19, x20, [sp, #16]
    96007a0c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96007a10:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96007a14:	d65f03c0 	ret
	memset(dp, 0, sizeof(struct tegrabl_dp));
    96007a18:	d2803002 	mov	x2, #0x180                 	// #384
    96007a1c:	52800001 	mov	w1, #0x0                   	// #0
    96007a20:	aa0003f3 	mov	x19, x0
	struct tegrabl_display_sor_dtb *sor_dtb = &(pdata->sor_dtb);
    96007a24:	91024297 	add	x23, x20, #0x90
	memset(dp, 0, sizeof(struct tegrabl_dp));
    96007a28:	94008900 	bl	96029e28 <memset>
	ret = sor_init(&sor, sor_dtb);
    96007a2c:	aa1703e1 	mov	x1, x23
    96007a30:	910123a0 	add	x0, x29, #0x48
    96007a34:	9400069a 	bl	9600949c <sor_init>
    96007a38:	2a0003f5 	mov	w21, w0
	if (ret != TEGRABL_NO_ERROR) {
    96007a3c:	35000320 	cbnz	w0, 96007aa0 <tegrabl_dp_init+0xe8>
	sor->nvdisp = nvdisp;
    96007a40:	f94027a0 	ldr	x0, [x29, #72]
	sor->link_cfg = &(dp->link_cfg);
    96007a44:	9100a261 	add	x1, x19, #0x28
	memcpy(sor->xbar_ctrl, sor_dtb->xbar_ctrl, XBAR_CNT * sizeof(uint32_t));
    96007a48:	d2800282 	mov	x2, #0x14                  	// #20
    96007a4c:	91006000 	add	x0, x0, #0x18
	sor->nvdisp = nvdisp;
    96007a50:	f81e8016 	stur	x22, [x0, #-24]
	sor->link_cfg = &(dp->link_cfg);
    96007a54:	f9000c01 	str	x1, [x0, #24]
	memcpy(sor->xbar_ctrl, sor_dtb->xbar_ctrl, XBAR_CNT * sizeof(uint32_t));
    96007a58:	91026281 	add	x1, x20, #0x98
	dp->pdata = &(pdata->dp_dtb);
    96007a5c:	9100e294 	add	x20, x20, #0x38
	memcpy(sor->xbar_ctrl, sor_dtb->xbar_ctrl, XBAR_CNT * sizeof(uint32_t));
    96007a60:	94008931 	bl	96029f24 <memcpy>
	dp->mode = nvdisp->mode;
    96007a64:	f94026c0 	ldr	x0, [x22, #72]
	tegrabl_dp_lt_init(&dp->lt_data, dp);
    96007a68:	aa1303e1 	mov	x1, x19
	dp->mode = nvdisp->mode;
    96007a6c:	a9018276 	stp	x22, x0, [x19, #24]
	dp->sor = sor;
    96007a70:	f94027a0 	ldr	x0, [x29, #72]
    96007a74:	f9000a60 	str	x0, [x19, #16]
	tegrabl_dp_lt_init(&dp->lt_data, dp);
    96007a78:	91044260 	add	x0, x19, #0x110
	dp->enabled = false;
    96007a7c:	3904027f 	strb	wzr, [x19, #256]
	dp->pdata = &(pdata->dp_dtb);
    96007a80:	f9008674 	str	x20, [x19, #264]
	nvdisp->out_data = dp;
    96007a84:	f9003ed3 	str	x19, [x22, #120]
	tegrabl_dp_lt_init(&dp->lt_data, dp);
    96007a88:	94000682 	bl	96009490 <tegrabl_dp_lt_init>
	return tegrabl_dpaux_init_aux(sor_dtb->dpaux_instance, &(dp->hdpaux));
    96007a8c:	b94006e0 	ldr	w0, [x23, #4]
    96007a90:	91002261 	add	x1, x19, #0x8
    96007a94:	9400867e 	bl	9602948c <tegrabl_dpaux_init_aux>
    96007a98:	2a0003f5 	mov	w21, w0
    96007a9c:	17ffffd9 	b	96007a00 <tegrabl_dp_init+0x48>
		tegrabl_free(dp);
    96007aa0:	aa1303e0 	mov	x0, x19
    96007aa4:	94007c05 	bl	96026ab8 <tegrabl_free>
    96007aa8:	17ffffd6 	b	96007a00 <tegrabl_dp_init+0x48>

0000000096007aac <dp_tu_config.isra.2>:
	val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum);
    96007aac:	39405002 	ldrb	w2, [x0, #20]
    96007ab0:	f9400404 	ldr	x4, [x0, #8]
    96007ab4:	11013042 	add	w2, w2, #0x4c
	val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_DP_LINKCTL0, TUSIZE,
    96007ab8:	b9401c23 	ldr	w3, [x1, #28]
	return NV_READ32(sor->base + reg * 4);
    96007abc:	d37e2042 	ubfiz	x2, x2, #2, #9
    96007ac0:	531e1863 	ubfiz	w3, w3, #2, #7
    96007ac4:	b8626885 	ldr	w5, [x4, x2]
    96007ac8:	121760a5 	and	w5, w5, #0xfffffe03
    96007acc:	2a050063 	orr	w3, w3, w5
	NV_WRITE32(sor->base + reg * 4, val);
    96007ad0:	b8226883 	str	w3, [x4, x2]
	val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_CONFIG0_0 + sor->portnum));
    96007ad4:	39405003 	ldrb	w3, [x0, #20]
	val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_DP_CONFIG0, WATERMARK,
    96007ad8:	b9402422 	ldr	w2, [x1, #36]
	val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_CONFIG0_0 + sor->portnum));
    96007adc:	11016063 	add	w3, w3, #0x58
	val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_DP_CONFIG0, WATERMARK,
    96007ae0:	12001442 	and	w2, w2, #0x3f
	return NV_READ32(sor->base + reg * 4);
    96007ae4:	d37e2063 	ubfiz	x3, x3, #2, #9
    96007ae8:	b8636880 	ldr	w0, [x4, x3]
    96007aec:	121a6400 	and	w0, w0, #0xffffffc0
    96007af0:	2a000042 	orr	w2, w2, w0
	val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_DP_CONFIG0, ACTIVESYM_COUNT,
    96007af4:	b9401820 	ldr	w0, [x1, #24]
    96007af8:	12116042 	and	w2, w2, #0xffff80ff
    96007afc:	53181800 	ubfiz	w0, w0, #8, #7
    96007b00:	2a020000 	orr	w0, w0, w2
	val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_DP_CONFIG0, ACTIVESYM_FRAC,
    96007b04:	120c6c02 	and	w2, w0, #0xfff0ffff
    96007b08:	b9402020 	ldr	w0, [x1, #32]
    96007b0c:	53100c00 	ubfiz	w0, w0, #16, #4
    96007b10:	2a020000 	orr	w0, w0, w2
	val = cfg->activepolarity ?
    96007b14:	b9401422 	ldr	w2, [x1, #20]
    96007b18:	32080001 	orr	w1, w0, #0x1000000
    96007b1c:	12077800 	and	w0, w0, #0xfeffffff
    96007b20:	7100005f 	cmp	w2, #0x0
    96007b24:	1a810000 	csel	w0, w0, w1, eq  // eq = none
	val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_CONFIG0, RD_RESET_VAL,
    96007b28:	52b08001 	mov	w1, #0x84000000            	// #-2080374784
    96007b2c:	2a010000 	orr	w0, w0, w1
	NV_WRITE32(sor->base + reg * 4, val);
    96007b30:	b8236880 	str	w0, [x4, x3]
}
    96007b34:	d65f03c0 	ret

0000000096007b38 <tegrabl_dp_clock_config>:
{
    96007b38:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	if (clk_type == TEGRA_SOR_SAFE_CLK) {
    96007b3c:	7100045f 	cmp	w2, #0x1
{
    96007b40:	910003fd 	mov	x29, sp
    96007b44:	a90153f3 	stp	x19, x20, [sp, #16]
    96007b48:	2a0103f4 	mov	w20, w1
    96007b4c:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint32_t clk_rate = 0;
    96007b50:	b9003fbf 	str	wzr, [x29, #60]
	if (clk_type == TEGRA_SOR_SAFE_CLK) {
    96007b54:	54000721 	b.ne	96007c38 <tegrabl_dp_clock_config+0x100>  // b.any
		CHECK_RET(tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_SAFE, 0, TEGRABL_CLK_SRC_PLLP_OUT0));
    96007b58:	52800062 	mov	w2, #0x3                   	// #3
    96007b5c:	52800001 	mov	w1, #0x0                   	// #0
    96007b60:	528001c0 	mov	w0, #0xe                   	// #14
    96007b64:	94005ef9 	bl	9601f748 <tegrabl_car_set_clk_src>
    96007b68:	2a0003f3 	mov	w19, w0
    96007b6c:	350005c0 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_SAFE, 0, NULL));
    96007b70:	d2800002 	mov	x2, #0x0                   	// #0
    96007b74:	52800001 	mov	w1, #0x0                   	// #0
    96007b78:	528001c0 	mov	w0, #0xe                   	// #14
    96007b7c:	94005f54 	bl	9601f8cc <tegrabl_car_clk_enable>
    96007b80:	2a0003f3 	mov	w19, w0
    96007b84:	35000500 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_OUT, instance, TEGRABL_CLK_SRC_SOR_SAFE_CLK));
    96007b88:	12001e94 	and	w20, w20, #0xff
    96007b8c:	52800302 	mov	w2, #0x18                  	// #24
    96007b90:	2a1403e1 	mov	w1, w20
    96007b94:	528003a0 	mov	w0, #0x1d                  	// #29
    96007b98:	94005eec 	bl	9601f748 <tegrabl_car_set_clk_src>
    96007b9c:	2a0003f3 	mov	w19, w0
    96007ba0:	35000420 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_OUT, instance, NULL));
    96007ba4:	d2800002 	mov	x2, #0x0                   	// #0
    96007ba8:	2a1403e1 	mov	w1, w20
    96007bac:	528003a0 	mov	w0, #0x1d                  	// #29
    96007bb0:	94005f47 	bl	9601f8cc <tegrabl_car_clk_enable>
    96007bb4:	2a0003f3 	mov	w19, w0
    96007bb8:	35000360 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		tegrabl_udelay(20);
    96007bbc:	d2800280 	mov	x0, #0x14                  	// #20
    96007bc0:	94006039 	bl	9601fca4 <tegrabl_udelay>
		CHECK_RET(tegrabl_car_rst_set(TEGRABL_MODULE_SOR, instance));
    96007bc4:	2a1403e1 	mov	w1, w20
    96007bc8:	52800380 	mov	w0, #0x1c                  	// #28
    96007bcc:	94005fad 	bl	9601fa80 <tegrabl_car_rst_set>
    96007bd0:	2a0003f3 	mov	w19, w0
    96007bd4:	35000280 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR, instance, TEGRABL_CLK_SRC_PLLDP));
    96007bd8:	52800242 	mov	w2, #0x12                  	// #18
    96007bdc:	2a1403e1 	mov	w1, w20
    96007be0:	52800380 	mov	w0, #0x1c                  	// #28
    96007be4:	94005ed9 	bl	9601f748 <tegrabl_car_set_clk_src>
    96007be8:	2a0003f3 	mov	w19, w0
    96007bec:	350001c0 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_clk_enable(TEGRABL_MODULE_SOR, instance, NULL));
    96007bf0:	d2800002 	mov	x2, #0x0                   	// #0
    96007bf4:	2a1403e1 	mov	w1, w20
    96007bf8:	52800380 	mov	w0, #0x1c                  	// #28
    96007bfc:	94005f34 	bl	9601f8cc <tegrabl_car_clk_enable>
    96007c00:	2a0003f3 	mov	w19, w0
    96007c04:	35000100 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_rst_clear(TEGRABL_MODULE_SOR, instance));
    96007c08:	2a1403e1 	mov	w1, w20
    96007c0c:	52800380 	mov	w0, #0x1c                  	// #28
    96007c10:	94005fa3 	bl	9601fa9c <tegrabl_car_rst_clear>
    96007c14:	2a0003f3 	mov	w19, w0
    96007c18:	35000060 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		tegrabl_udelay(20);
    96007c1c:	d2800280 	mov	x0, #0x14                  	// #20
			tegrabl_udelay(250);
    96007c20:	94006021 	bl	9601fca4 <tegrabl_udelay>
}
    96007c24:	2a1303e0 	mov	w0, w19
    96007c28:	a94153f3 	ldp	x19, x20, [sp, #16]
    96007c2c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96007c30:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96007c34:	d65f03c0 	ret
	} else if (clk_type == TEGRA_SOR_LINK_CLK) {
    96007c38:	7100085f 	cmp	w2, #0x2
    96007c3c:	54000681 	b.ne	96007d0c <tegrabl_dp_clock_config+0x1d4>  // b.any
	uint32_t pclk = nvdisp->mode->pclk / 1000;
    96007c40:	f9402400 	ldr	x0, [x0, #72]
		CHECK_RET(tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_PAD_CLKOUT, instance, TEGRABL_CLK_SRC_PLLDP));
    96007c44:	12001c35 	and	w21, w1, #0xff
    96007c48:	52800242 	mov	w2, #0x12                  	// #18
    96007c4c:	2a1503e1 	mov	w1, w21
	uint32_t pclk = nvdisp->mode->pclk / 1000;
    96007c50:	b9400016 	ldr	w22, [x0]
		CHECK_RET(tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_PAD_CLKOUT, instance, TEGRABL_CLK_SRC_PLLDP));
    96007c54:	528003c0 	mov	w0, #0x1e                  	// #30
    96007c58:	94005ebc 	bl	9601f748 <tegrabl_car_set_clk_src>
    96007c5c:	2a0003f3 	mov	w19, w0
    96007c60:	35fffe20 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_set_clk_rate(TEGRABL_MODULE_SOR_PAD_CLKOUT, instance, pclk, &clk_rate));
    96007c64:	52807d02 	mov	w2, #0x3e8                 	// #1000
    96007c68:	9100f3a3 	add	x3, x29, #0x3c
    96007c6c:	2a1503e1 	mov	w1, w21
    96007c70:	528003c0 	mov	w0, #0x1e                  	// #30
    96007c74:	1ac20ac2 	udiv	w2, w22, w2
    96007c78:	94005f65 	bl	9601fa0c <tegrabl_car_set_clk_rate>
    96007c7c:	2a0003f3 	mov	w19, w0
    96007c80:	35fffd20 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		CHECK_RET(tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_PAD_CLKOUT, instance, NULL));
    96007c84:	d2800002 	mov	x2, #0x0                   	// #0
    96007c88:	2a1503e1 	mov	w1, w21
    96007c8c:	528003c0 	mov	w0, #0x1e                  	// #30
    96007c90:	94005f0f 	bl	9601f8cc <tegrabl_car_clk_enable>
    96007c94:	2a0003f3 	mov	w19, w0
    96007c98:	35fffc60 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
		switch (instance) {
    96007c9c:	34000194 	cbz	w20, 96007ccc <tegrabl_dp_clock_config+0x194>
    96007ca0:	7100069f 	cmp	w20, #0x1
    96007ca4:	54000300 	b.eq	96007d04 <tegrabl_dp_clock_config+0x1cc>  // b.none
			ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    96007ca8:	52800393 	mov	w19, #0x1c                  	// #28
			pr_error("%s: invalid SOR instance %d\n", __func__, instance);
    96007cac:	2a1403e2 	mov	w2, w20
    96007cb0:	b00001a1 	adrp	x1, 9603c000 <__func__.4414+0x9>
    96007cb4:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007cb8:	91072821 	add	x1, x1, #0x1ca
    96007cbc:	9101b000 	add	x0, x0, #0x6c
    96007cc0:	94006a6c 	bl	96022670 <tegrabl_printf>
		ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96007cc4:	72ac2c33 	movk	w19, #0x6161, lsl #16
    96007cc8:	17ffffd7 	b	96007c24 <tegrabl_dp_clock_config+0xec>
			parent_pad_clk = TEGRABL_CLK_SRC_SOR0_PAD_CLKOUT;
    96007ccc:	52800322 	mov	w2, #0x19                  	// #25
			CHECK_RET(tegrabl_car_set_clk_src(TEGRABL_MODULE_SOR_OUT, instance, parent_pad_clk));
    96007cd0:	2a1503e1 	mov	w1, w21
    96007cd4:	528003a0 	mov	w0, #0x1d                  	// #29
    96007cd8:	94005e9c 	bl	9601f748 <tegrabl_car_set_clk_src>
    96007cdc:	2a0003f3 	mov	w19, w0
    96007ce0:	35fffa20 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
			CHECK_RET(tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_OUT, instance, NULL));
    96007ce4:	d2800002 	mov	x2, #0x0                   	// #0
    96007ce8:	2a1503e1 	mov	w1, w21
    96007cec:	528003a0 	mov	w0, #0x1d                  	// #29
    96007cf0:	94005ef7 	bl	9601f8cc <tegrabl_car_clk_enable>
    96007cf4:	2a0003f3 	mov	w19, w0
    96007cf8:	35fff960 	cbnz	w0, 96007c24 <tegrabl_dp_clock_config+0xec>
			tegrabl_udelay(250);
    96007cfc:	d2801f40 	mov	x0, #0xfa                  	// #250
    96007d00:	17ffffc8 	b	96007c20 <tegrabl_dp_clock_config+0xe8>
			parent_pad_clk = TEGRABL_CLK_SRC_SOR1_PAD_CLKOUT;
    96007d04:	52800342 	mov	w2, #0x1a                  	// #26
    96007d08:	17fffff2 	b	96007cd0 <tegrabl_dp_clock_config+0x198>
		pr_error("%s: invalid clk type\n", __func__);
    96007d0c:	b00001a1 	adrp	x1, 9603c000 <__func__.4414+0x9>
    96007d10:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007d14:	91072821 	add	x1, x1, #0x1ca
    96007d18:	9107c800 	add	x0, x0, #0x1f2
		ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96007d1c:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("%s: invalid clk type\n", __func__);
    96007d20:	94006a54 	bl	96022670 <tegrabl_printf>
    96007d24:	17ffffe8 	b	96007cc4 <tegrabl_dp_clock_config+0x18c>

0000000096007d28 <tegrabl_dp_dpcd_read>:
{
    96007d28:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	ret = tegrabl_dpaux_read(dp->hdpaux, AUX_CMD_AUXRD, addr, data_ptr, &size,
    96007d2c:	aa0203e3 	mov	x3, x2
{
    96007d30:	910003fd 	mov	x29, sp
	uint32_t status = 0;
    96007d34:	9100c3a5 	add	x5, x29, #0x30
	ret = tegrabl_dpaux_read(dp->hdpaux, AUX_CMD_AUXRD, addr, data_ptr, &size,
    96007d38:	f9400400 	ldr	x0, [x0, #8]
{
    96007d3c:	a90153f3 	stp	x19, x20, [sp, #16]
    96007d40:	2a0103f4 	mov	w20, w1
	uint32_t size = 1;
    96007d44:	52800021 	mov	w1, #0x1                   	// #1
	ret = tegrabl_dpaux_read(dp->hdpaux, AUX_CMD_AUXRD, addr, data_ptr, &size,
    96007d48:	9100a3a4 	add	x4, x29, #0x28
	uint32_t status = 0;
    96007d4c:	b81fccbf 	str	wzr, [x5, #-4]!
	ret = tegrabl_dpaux_read(dp->hdpaux, AUX_CMD_AUXRD, addr, data_ptr, &size,
    96007d50:	2a1403e2 	mov	w2, w20
	uint32_t size = 1;
    96007d54:	b9002ba1 	str	w1, [x29, #40]
	ret = tegrabl_dpaux_read(dp->hdpaux, AUX_CMD_AUXRD, addr, data_ptr, &size,
    96007d58:	52800121 	mov	w1, #0x9                   	// #9
    96007d5c:	9400874e 	bl	96029a94 <tegrabl_dpaux_read>
    96007d60:	2a0003f3 	mov	w19, w0
	if (ret != TEGRABL_NO_ERROR) {
    96007d64:	340000c0 	cbz	w0, 96007d7c <tegrabl_dp_dpcd_read+0x54>
		pr_error("dp: Failed to read DPCD data. CMD 0x%x, Status 0x%x\n", addr,
    96007d68:	b9402fa2 	ldr	w2, [x29, #44]
    96007d6c:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007d70:	2a1403e1 	mov	w1, w20
    96007d74:	91082c00 	add	x0, x0, #0x20b
    96007d78:	94006a3e 	bl	96022670 <tegrabl_printf>
}
    96007d7c:	2a1303e0 	mov	w0, w19
    96007d80:	a94153f3 	ldp	x19, x20, [sp, #16]
    96007d84:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96007d88:	d65f03c0 	ret

0000000096007d8c <tegrabl_dp_dpcd_write>:
{
    96007d8c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96007d90:	910003fd 	mov	x29, sp
	uint32_t status = 0;
    96007d94:	910103a5 	add	x5, x29, #0x40
	ret = tegrabl_dpaux_write(dp->hdpaux, AUX_CMD_AUXWR, addr, &data, &size,
    96007d98:	f9400400 	ldr	x0, [x0, #8]
{
    96007d9c:	a90153f3 	stp	x19, x20, [sp, #16]
    96007da0:	2a0103f4 	mov	w20, w1
	uint32_t size = 1;
    96007da4:	52800021 	mov	w1, #0x1                   	// #1
{
    96007da8:	3900bfa2 	strb	w2, [x29, #47]
	uint32_t status = 0;
    96007dac:	b81fccbf 	str	wzr, [x5, #-4]!
	ret = tegrabl_dpaux_write(dp->hdpaux, AUX_CMD_AUXWR, addr, &data, &size,
    96007db0:	9100e3a4 	add	x4, x29, #0x38
	uint32_t size = 1;
    96007db4:	b9003ba1 	str	w1, [x29, #56]
	ret = tegrabl_dpaux_write(dp->hdpaux, AUX_CMD_AUXWR, addr, &data, &size,
    96007db8:	9100bfa3 	add	x3, x29, #0x2f
    96007dbc:	2a1403e2 	mov	w2, w20
    96007dc0:	52800101 	mov	w1, #0x8                   	// #8
    96007dc4:	94008670 	bl	96029784 <tegrabl_dpaux_write>
    96007dc8:	2a0003f3 	mov	w19, w0
	if (ret != TEGRABL_NO_ERROR) {
    96007dcc:	340000c0 	cbz	w0, 96007de4 <tegrabl_dp_dpcd_write+0x58>
		pr_error("dp: Failed to write DPCD data. CMD 0x%x, Status 0x%x\n", addr,
    96007dd0:	b9403fa2 	ldr	w2, [x29, #60]
    96007dd4:	b00001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96007dd8:	2a1403e1 	mov	w1, w20
    96007ddc:	91090c00 	add	x0, x0, #0x243
    96007de0:	94006a24 	bl	96022670 <tegrabl_printf>
}
    96007de4:	2a1303e0 	mov	w0, w19
    96007de8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96007dec:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96007df0:	d65f03c0 	ret

0000000096007df4 <tegrabl_dp_dpcd_write_field>:
{
    96007df4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96007df8:	910003fd 	mov	x29, sp
    96007dfc:	a90153f3 	stp	x19, x20, [sp, #16]
    96007e00:	12001c54 	and	w20, w2, #0xff
    96007e04:	a9025bf5 	stp	x21, x22, [sp, #32]
    96007e08:	12001c73 	and	w19, w3, #0xff
    96007e0c:	aa0003f5 	mov	x21, x0
    96007e10:	2a0103f6 	mov	w22, w1
	CHECK_RET(tegrabl_dp_dpcd_read(dp, cmd, &dpcd_data));
    96007e14:	9100ffa2 	add	x2, x29, #0x3f
    96007e18:	97ffffc4 	bl	96007d28 <tegrabl_dp_dpcd_read>
    96007e1c:	35000120 	cbnz	w0, 96007e40 <tegrabl_dp_dpcd_write_field+0x4c>
	dpcd_data &= ~mask;
    96007e20:	3940ffa2 	ldrb	w2, [x29, #63]
	CHECK_RET(tegrabl_dp_dpcd_write(dp, cmd, dpcd_data));
    96007e24:	2a1603e1 	mov	w1, w22
    96007e28:	aa1503e0 	mov	x0, x21
	dpcd_data &= ~mask;
    96007e2c:	0a340042 	bic	w2, w2, w20
	dpcd_data |= data;
    96007e30:	2a020262 	orr	w2, w19, w2
    96007e34:	12001c42 	and	w2, w2, #0xff
    96007e38:	3900ffa2 	strb	w2, [x29, #63]
	CHECK_RET(tegrabl_dp_dpcd_write(dp, cmd, dpcd_data));
    96007e3c:	97ffffd4 	bl	96007d8c <tegrabl_dp_dpcd_write>
}
    96007e40:	a94153f3 	ldp	x19, x20, [sp, #16]
    96007e44:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96007e48:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96007e4c:	d65f03c0 	ret

0000000096007e50 <tegrabl_dp_calc_config>:
	const uint32_t link_rate = 27 * cfg->link_bw * 1000 * 1000;
    96007e50:	39404047 	ldrb	w7, [x2, #16]
    96007e54:	529f9803 	mov	w3, #0xfcc0                	// #64704
    96007e58:	72a03363 	movk	w3, #0x19b, lsl #16
	cfg->is_valid = false;
    96007e5c:	3900005f 	strb	wzr, [x2]
	const uint32_t link_rate = 27 * cfg->link_bw * 1000 * 1000;
    96007e60:	1b037ce7 	mul	w7, w7, w3
	if (!link_rate || !cfg->lane_count || !rate || !cfg->bits_per_pixel) {
    96007e64:	34001647 	cbz	w7, 9600812c <tegrabl_dp_calc_config+0x2dc>
    96007e68:	3940444c 	ldrb	w12, [x2, #17]
    96007e6c:	3400160c 	cbz	w12, 9600812c <tegrabl_dp_calc_config+0x2dc>
	rate = dp->mode->pclk;
    96007e70:	f9401000 	ldr	x0, [x0, #32]
    96007e74:	b9400003 	ldr	w3, [x0]
    96007e78:	2a0303ef 	mov	w15, w3
	if (!link_rate || !cfg->lane_count || !rate || !cfg->bits_per_pixel) {
    96007e7c:	b400158f 	cbz	x15, 9600812c <tegrabl_dp_calc_config+0x2dc>
    96007e80:	b9400846 	ldr	w6, [x2, #8]
    96007e84:	34001546 	cbz	w6, 9600812c <tegrabl_dp_calc_config+0x2dc>
		(uint64_t)link_rate * 8 * cfg->lane_count) {
    96007e88:	93407cf0 	sxtw	x16, w7
    96007e8c:	d37d1d80 	ubfiz	x0, x12, #3, #8
	if ((uint64_t)rate * cfg->bits_per_pixel >=
    96007e90:	9ba37cc3 	umull	x3, w6, w3
		(uint64_t)link_rate * 8 * cfg->lane_count) {
    96007e94:	9b107c00 	mul	x0, x0, x16
	if ((uint64_t)rate * cfg->bits_per_pixel >=
    96007e98:	eb00007f 	cmp	x3, x0
    96007e9c:	54001482 	b.cs	9600812c <tegrabl_dp_calc_config+0x2dc>  // b.hs, b.nlast
{
    96007ea0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	ratio_f = (uint64_t)rate * cfg->bits_per_pixel * f;
    96007ea4:	d290d404 	mov	x4, #0x86a0                	// #34464
    96007ea8:	f2a00024 	movk	x4, #0x1, lsl #16
	ratio_f = tegra_div64(ratio_f, link_rate * cfg->lane_count);
    96007eac:	1b077d87 	mul	w7, w12, w7
{
    96007eb0:	910003fd 	mov	x29, sp
		(uint64_t)link_rate * mode->h_active, rate);
    96007eb4:	b9402025 	ldr	w5, [x1, #32]
	ratio_f = (uint64_t)rate * cfg->bits_per_pixel * f;
    96007eb8:	9b047c63 	mul	x3, x3, x4
{
    96007ebc:	a90153f3 	stp	x19, x20, [sp, #16]
	do_div(dividend, divisor);
    96007ec0:	d2800809 	mov	x9, #0x40                  	// #64
    96007ec4:	d29c8013 	mov	x19, #0xe400                	// #58368
{
    96007ec8:	a9025bf5 	stp	x21, x22, [sp, #32]
		(uint64_t)link_rate * mode->h_active, rate);
    96007ecc:	2a0503e8 	mov	w8, w5
	ratio_f /= 8;
    96007ed0:	d343fc63 	lsr	x3, x3, #3
	uint64_t lowest_neg_error_f = 64 * f;
    96007ed4:	d2950011 	mov	x17, #0xa800                	// #43008
	do_div(dividend, divisor);
    96007ed8:	f2aa8173 	movk	x19, #0x540b, lsl #16
			if (frac_f > (15 * f))
    96007edc:	d29c6c15 	mov	x21, #0xe360                	// #58208
	uint32_t lowest_neg_tusize = 64;
    96007ee0:	2a0903ed 	mov	w13, w9
	num_linkclk_line = (uint32_t)tegra_div64(
    96007ee4:	9b107d08 	mul	x8, x8, x16
{
    96007ee8:	a90363f7 	stp	x23, x24, [sp, #48]
	do_div(dividend, divisor);
    96007eec:	9ac70863 	udiv	x3, x3, x7
	uint64_t lowest_neg_error_f = 64 * f;
    96007ef0:	f2a00c31 	movk	x17, #0x61, lsl #16
	uint64_t lowest_neg_activefrac = 0;
    96007ef4:	d280001e 	mov	x30, #0x0                   	// #0
	uint32_t lowest_neg_activepolarity = 0;
    96007ef8:	52800012 	mov	w18, #0x0                   	// #0
	uint32_t lowest_neg_activecount = 0;
    96007efc:	5280000e 	mov	w14, #0x0                   	// #0
	uint32_t activefrac = 0;
    96007f00:	52800007 	mov	w7, #0x0                   	// #0
	do_div(dividend, divisor);
    96007f04:	9acf0908 	udiv	x8, x8, x15
		if (frac_f < (f / 2)) /* fraction < 0.5 */
    96007f08:	d29869f4 	mov	x20, #0xc34f                	// #49999
    96007f0c:	d37ae46a 	lsl	x10, x3, #6
	do_div(dividend, divisor);
    96007f10:	f2c00053 	movk	x19, #0x2, lsl #32
			if (frac_f > (15 * f))
    96007f14:	f2a002d5 	movk	x21, #0x16, lsl #16
				activefrac = activepolarity ? 1 : 15;
    96007f18:	528001f6 	mov	w22, #0xf                   	// #15
    96007f1c:	92407d08 	and	x8, x8, #0xffffffff
	do_div(dividend, divisor);
    96007f20:	9ac4094b 	udiv	x11, x10, x4
		activecount_f = tegra_div64(activesym_f, (uint32_t)f) * f;
    96007f24:	9b047d6b 	mul	x11, x11, x4
    96007f28:	cb0b0140 	sub	x0, x10, x11
		if (frac_f < (f / 2)) /* fraction < 0.5 */
    96007f2c:	eb14001f 	cmp	x0, x20
    96007f30:	540001a9 	b.ls	96007f64 <tegrabl_dp_calc_config+0x114>  // b.plast
			frac_f = f - frac_f;
    96007f34:	cb000080 	sub	x0, x4, x0
			activepolarity = 1;
    96007f38:	52800037 	mov	w23, #0x1                   	// #1
	do_div(dividend, divisor);
    96007f3c:	9ac00a60 	udiv	x0, x19, x0
			if (frac_f > (15 * f))
    96007f40:	eb15001f 	cmp	x0, x21
    96007f44:	54000169 	b.ls	96007f70 <tegrabl_dp_calc_config+0x120>  // b.plast
				activefrac = activepolarity ? 1 : 15;
    96007f48:	710002ff 	cmp	w23, #0x0
    96007f4c:	1a9612e7 	csel	w7, w23, w22, ne  // ne = any
	do_div(dividend, divisor);
    96007f50:	2a0703e0 	mov	w0, w7
    96007f54:	52800017 	mov	w23, #0x0                   	// #0
    96007f58:	9ac00880 	udiv	x0, x4, x0
				activecount_f + tegra_div64(f, activefrac) : activecount_f;
    96007f5c:	8b0b0000 	add	x0, x0, x11
    96007f60:	1400000d 	b	96007f94 <tegrabl_dp_calc_config+0x144>
		if (frac_f != 0) {
    96007f64:	b40007a0 	cbz	x0, 96008058 <tegrabl_dp_calc_config+0x208>
			activepolarity = 0;
    96007f68:	52800017 	mov	w23, #0x0                   	// #0
    96007f6c:	17fffff4 	b	96007f3c <tegrabl_dp_calc_config+0xec>
    96007f70:	9ac40800 	udiv	x0, x0, x4
    96007f74:	2a0003e7 	mov	w7, w0
					(uint32_t)tegra_div64(frac_f, (uint32_t)f) + 1 :
    96007f78:	34fffed7 	cbz	w23, 96007f50 <tegrabl_dp_calc_config+0x100>
    96007f7c:	11000400 	add	w0, w0, #0x1
			approx_value_f = activefrac ? tegra_div64(
    96007f80:	cb130178 	sub	x24, x11, x19
					(uint32_t)tegra_div64(frac_f, (uint32_t)f) + 1 :
    96007f84:	aa0003e7 	mov	x7, x0
			approx_value_f = activefrac ? tegra_div64(
    96007f88:	9b136000 	madd	x0, x0, x19, x24
    96007f8c:	1b047cf8 	mul	w24, w7, w4
	do_div(dividend, divisor);
    96007f90:	9ad80800 	udiv	x0, x0, x24
		if (activesym_f < approx_value_f) {
    96007f94:	eb0a001f 	cmp	x0, x10
    96007f98:	540006c9 	b.ls	96008070 <tegrabl_dp_calc_config+0x220>  // b.plast
				tegra_div64(approx_value_f - activesym_f, i);
    96007f9c:	cb0a0000 	sub	x0, x0, x10
			neg = true;
    96007fa0:	52800038 	mov	w24, #0x1                   	// #1
	do_div(dividend, divisor);
    96007fa4:	9ac90800 	udiv	x0, x0, x9
			accumulated_error_f = num_linkclk_line *
    96007fa8:	9b087c00 	mul	x0, x0, x8
		if ((neg && (lowest_neg_error_f > accumulated_error_f)) ||
    96007fac:	7100031f 	cmp	w24, #0x0
    96007fb0:	fa511002 	ccmp	x0, x17, #0x2, ne  // ne = any
    96007fb4:	54000043 	b.cc	96007fbc <tegrabl_dp_calc_config+0x16c>  // b.lo, b.ul, b.last
    96007fb8:	b50000e0 	cbnz	x0, 96007fd4 <tegrabl_dp_calc_config+0x184>
		activecount = (uint32_t)tegra_div64(activecount_f, (uint32_t)f);
    96007fbc:	9ac4096e 	udiv	x14, x11, x4
			lowest_neg_tusize = i;
    96007fc0:	2a0903ed 	mov	w13, w9
			lowest_neg_activefrac = activefrac;
    96007fc4:	2a0703fe 	mov	w30, w7
			if (accumulated_error_f == 0) {
    96007fc8:	b40005e0 	cbz	x0, 96008084 <tegrabl_dp_calc_config+0x234>
    96007fcc:	aa0003f1 	mov	x17, x0
    96007fd0:	2a1703f2 	mov	w18, w23
    96007fd4:	d1000529 	sub	x9, x9, #0x1
    96007fd8:	cb03014a 	sub	x10, x10, x3
	for (i = 64; i >= 32; --i) {
    96007fdc:	f1007d3f 	cmp	x9, #0x1f
    96007fe0:	54fffa01 	b.ne	96007f20 <tegrabl_dp_calc_config+0xd0>  // b.any
	if (lowest_neg_activefrac == 0) {
    96007fe4:	b500057e 	cbnz	x30, 96008090 <tegrabl_dp_calc_config+0x240>
			lowest_neg_activecount : lowest_neg_activecount - 1;
    96007fe8:	7100025f 	cmp	w18, #0x0
    96007fec:	1a9f17e0 	cset	w0, eq  // eq = none
    96007ff0:	4b0001ce 	sub	w14, w14, w0
		cfg->active_frac    = 1;
    96007ff4:	52800020 	mov	w0, #0x1                   	// #1
		cfg->active_count   = lowest_neg_activepolarity ?
    96007ff8:	2902b85f 	stp	wzr, w14, [x2, #20]
		cfg->active_frac    = 1;
    96007ffc:	2903804d 	stp	w13, w0, [x2, #28]
	watermark_f = tegra_div64(ratio_f * cfg->tu_size * (f - ratio_f), f);
    96008000:	d290d404 	mov	x4, #0x86a0                	// #34464
    96008004:	f2a00024 	movk	x4, #0x1, lsl #16
    96008008:	cb030080 	sub	x0, x4, x3
    9600800c:	9b037c03 	mul	x3, x0, x3
					+ cfg->bits_per_pixel / 4 - 1;
    96008010:	53027cc0 	lsr	w0, w6, #2
    96008014:	51000400 	sub	w0, w0, #0x1
	watermark_f = tegra_div64(ratio_f * cfg->tu_size * (f - ratio_f), f);
    96008018:	9b0d7c63 	mul	x3, x3, x13
	do_div(dividend, divisor);
    9600801c:	9ac40863 	udiv	x3, x3, x4
	cfg->watermark = (uint32_t)tegra_div64(watermark_f + lowest_neg_error_f, f)
    96008020:	8b110071 	add	x17, x3, x17
	do_div(dividend, divisor);
    96008024:	9ac40a31 	udiv	x17, x17, x4
					+ cfg->bits_per_pixel / 4 - 1;
    96008028:	0b110011 	add	w17, w0, w17
	cfg->watermark = (uint32_t)tegra_div64(watermark_f + lowest_neg_error_f, f)
    9600802c:	b9002451 	str	w17, [x2, #36]
	if (cfg->watermark > 30) {
    96008030:	71007a3f 	cmp	w17, #0x1e
    96008034:	54000349 	b.ls	9600809c <tegrabl_dp_calc_config+0x24c>  // b.plast
		cfg->watermark = 30;
    96008038:	528003c0 	mov	w0, #0x1e                  	// #30
    9600803c:	b9002440 	str	w0, [x2, #36]
		return false;
    96008040:	52800000 	mov	w0, #0x0                   	// #0
}
    96008044:	a94153f3 	ldp	x19, x20, [sp, #16]
    96008048:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600804c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96008050:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96008054:	d65f03c0 	ret
		if (activefrac == 1) {
    96008058:	710004ff 	cmp	w7, #0x1
    9600805c:	54fff7a0 	b.eq	96007f50 <tegrabl_dp_calc_config+0x100>  // b.none
				activecount_f + tegra_div64(f, activefrac) : activecount_f;
    96008060:	35fff787 	cbnz	w7, 96007f50 <tegrabl_dp_calc_config+0x100>
    96008064:	52800017 	mov	w23, #0x0                   	// #0
    96008068:	aa0b03e0 	mov	x0, x11
    9600806c:	17ffffca 	b	96007f94 <tegrabl_dp_calc_config+0x144>
				tegra_div64(activesym_f - approx_value_f, i);
    96008070:	cb000140 	sub	x0, x10, x0
			neg = false;
    96008074:	52800018 	mov	w24, #0x0                   	// #0
	do_div(dividend, divisor);
    96008078:	9ac90800 	udiv	x0, x0, x9
			accumulated_error_f = num_linkclk_line *
    9600807c:	9b087c00 	mul	x0, x0, x8
    96008080:	17ffffcb 	b	96007fac <tegrabl_dp_calc_config+0x15c>
    96008084:	d2800011 	mov	x17, #0x0                   	// #0
    96008088:	2a1703f2 	mov	w18, w23
    9600808c:	17ffffd6 	b	96007fe4 <tegrabl_dp_calc_config+0x194>
		cfg->active_count   = (uint32_t)lowest_neg_activecount;
    96008090:	2902b852 	stp	w18, w14, [x2, #20]
		cfg->active_frac    = (uint32_t)lowest_neg_activefrac;
    96008094:	2903f84d 	stp	w13, w30, [x2, #28]
    96008098:	17ffffda 	b	96008000 <tegrabl_dp_calc_config+0x1b0>
	num_symbols_per_line = (mode->h_active * cfg->bits_per_pixel) /
    9600809c:	1b057cc6 	mul	w6, w6, w5
						(8 * cfg->lane_count);
    960080a0:	531d7180 	lsl	w0, w12, #3
	num_symbols_per_line = (mode->h_active * cfg->bits_per_pixel) /
    960080a4:	1ac008c6 	udiv	w6, w6, w0
	} else if (cfg->watermark > num_symbols_per_line) {
    960080a8:	6b06023f 	cmp	w17, w6
    960080ac:	54000069 	b.ls	960080b8 <tegrabl_dp_calc_config+0x268>  // b.plast
		cfg->watermark = num_symbols_per_line;
    960080b0:	b9002446 	str	w6, [x2, #36]
    960080b4:	17ffffe3 	b	96008040 <tegrabl_dp_calc_config+0x1f0>
		mode->h_front_porch + mode->h_sync_width - 7) * link_rate, rate) - 3
    960080b8:	b9401820 	ldr	w0, [x1, #24]
	cfg->vblank_sym = (int)tegra_div64((uint64_t)(mode->h_active - 25)
    960080bc:	510064a5 	sub	w5, w5, #0x19
		mode->h_front_porch + mode->h_sync_width - 7) * link_rate, rate) - 3
    960080c0:	b9402823 	ldr	w3, [x1, #40]
    960080c4:	b9401021 	ldr	w1, [x1, #16]
    960080c8:	0b030000 	add	w0, w0, w3
    960080cc:	51001c21 	sub	w1, w1, #0x7
	cfg->hblank_sym = (int)tegra_div64((uint64_t)(mode->h_back_porch +
    960080d0:	0b010000 	add	w0, w0, w1
    960080d4:	9b107c00 	mul	x0, x0, x16
	cfg->vblank_sym = (int)tegra_div64((uint64_t)(mode->h_active - 25)
    960080d8:	9b107cb0 	mul	x16, x5, x16
	do_div(dividend, divisor);
    960080dc:	9acf0801 	udiv	x1, x0, x15
		* cfg->enhanced_framing - (12 / cfg->lane_count);
    960080e0:	39404840 	ldrb	w0, [x2, #18]
	do_div(dividend, divisor);
    960080e4:	9acf0a0f 	udiv	x15, x16, x15
		* cfg->enhanced_framing - (12 / cfg->lane_count);
    960080e8:	4b000800 	sub	w0, w0, w0, lsl #2
		mode->h_front_porch + mode->h_sync_width - 7) * link_rate, rate) - 3
    960080ec:	0b010000 	add	w0, w0, w1
		* cfg->enhanced_framing - (12 / cfg->lane_count);
    960080f0:	12800161 	mov	w1, #0xfffffff4            	// #-12
    960080f4:	1acc0c21 	sdiv	w1, w1, w12
	cfg->hblank_sym = (int)tegra_div64((uint64_t)(mode->h_back_porch +
    960080f8:	2b010000 	adds	w0, w0, w1
    960080fc:	1a9f5000 	csel	w0, w0, wzr, pl  // pl = nfrst
    96008100:	b9002840 	str	w0, [x2, #40]
		* link_rate, rate) - (36 / cfg->lane_count) - 4;
    96008104:	12800460 	mov	w0, #0xffffffdc            	// #-36
    96008108:	1acc0c0c 	sdiv	w12, w0, w12
	cfg->is_valid = true;
    9600810c:	52800020 	mov	w0, #0x1                   	// #1
    96008110:	39000040 	strb	w0, [x2]
	return true;
    96008114:	52800020 	mov	w0, #0x1                   	// #1
		* link_rate, rate) - (36 / cfg->lane_count) - 4;
    96008118:	0b0f018c 	add	w12, w12, w15
	cfg->vblank_sym = (int)tegra_div64((uint64_t)(mode->h_active - 25)
    9600811c:	7100118c 	subs	w12, w12, #0x4
    96008120:	1a9f518c 	csel	w12, w12, wzr, pl  // pl = nfrst
    96008124:	b9002c4c 	str	w12, [x2, #44]
	return true;
    96008128:	17ffffc7 	b	96008044 <tegrabl_dp_calc_config+0x1f4>
		return false;
    9600812c:	52800000 	mov	w0, #0x0                   	// #0
}
    96008130:	d65f03c0 	ret

0000000096008134 <tegrabl_dp_enable>:
{
    96008134:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96008138:	910003fd 	mov	x29, sp
    9600813c:	a90153f3 	stp	x19, x20, [sp, #16]
	struct tegrabl_dp *dp = nvdisp->out_data;
    96008140:	f9403c13 	ldr	x19, [x0, #120]
{
    96008144:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (dp->enabled) {
    96008148:	39440261 	ldrb	w1, [x19, #256]
{
    9600814c:	f9001bf7 	str	x23, [sp, #48]
	if (dp->enabled) {
    96008150:	35002321 	cbnz	w1, 960085b4 <tegrabl_dp_enable+0x480>
	struct sor_data *sor = dp->sor;
    96008154:	f9400a75 	ldr	x21, [x19, #16]
    96008158:	aa0003f7 	mov	x23, x0
    9600815c:	52800094 	mov	w20, #0x4                   	// #4
		ret = tegrabl_dp_dpcd_write(dp, DPCD_SET_POWER, state);
    96008160:	52800022 	mov	w2, #0x1                   	// #1
    96008164:	5280c001 	mov	w1, #0x600                 	// #1536
    96008168:	aa1303e0 	mov	x0, x19
    9600816c:	97ffff08 	bl	96007d8c <tegrabl_dp_dpcd_write>
	} while ((state != DPCD_SET_POWER_VAL_D3_PWRDWN) &&
    96008170:	71000694 	subs	w20, w20, #0x1
    96008174:	54001c00 	b.eq	960084f4 <tegrabl_dp_enable+0x3c0>  // b.none
		(retry++ < DP_POWER_ON_MAX_TRIES) && ret);
    96008178:	35ffff40 	cbnz	w0, 96008160 <tegrabl_dp_enable+0x2c>
	uint32_t size_ieee_oui = 3, auxstat;
    9600817c:	52800060 	mov	w0, #0x3                   	// #3
    96008180:	b9004ba0 	str	w0, [x29, #72]
	uint8_t data_ieee_oui_be[3] = {
    96008184:	f0000180 	adrp	x0, 9603b000 <tt_level+0x328>
    96008188:	912d9000 	add	x0, x0, #0xb64
	if (tegrabl_dp_dpcd_read(dp, DPCD_REV, &dp->revision)) {
    9600818c:	91040662 	add	x2, x19, #0x101
	uint8_t data_ieee_oui_be[3] = {
    96008190:	79400001 	ldrh	w1, [x0]
    96008194:	39400800 	ldrb	w0, [x0, #2]
    96008198:	790083a1 	strh	w1, [x29, #64]
	if (tegrabl_dp_dpcd_read(dp, DPCD_REV, &dp->revision)) {
    9600819c:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t data_ieee_oui_be[3] = {
    960081a0:	39010ba0 	strb	w0, [x29, #66]
	if (tegrabl_dp_dpcd_read(dp, DPCD_REV, &dp->revision)) {
    960081a4:	aa1303e0 	mov	x0, x19
    960081a8:	97fffee0 	bl	96007d28 <tegrabl_dp_dpcd_read>
    960081ac:	34000080 	cbz	w0, 960081bc <tegrabl_dp_enable+0x88>
		pr_error("dp: failed to read the revision number from sink\n");
    960081b0:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960081b4:	910ac000 	add	x0, x0, #0x2b0
    960081b8:	9400692e 	bl	96022670 <tegrabl_printf>
	if (dp->sink_cap_valid)
    960081bc:	3945f260 	ldrb	w0, [x19, #380]
	struct tegrabl_dp_link_config *cfg = &dp->link_cfg;
    960081c0:	9100a274 	add	x20, x19, #0x28
	if (dp->sink_cap_valid)
    960081c4:	34001b20 	cbz	w0, 96008528 <tegrabl_dp_enable+0x3f4>
		dpcd_data = dp->sink_cap[DPCD_MAX_LANE_COUNT];
    960081c8:	3945ca60 	ldrb	w0, [x19, #370]
    960081cc:	390133a0 	strb	w0, [x29, #76]
	cfg->max_lane_count = dpcd_data & DPCD_MAX_LANE_COUNT_MASK;
    960081d0:	394133a0 	ldrb	w0, [x29, #76]
    960081d4:	12001001 	and	w1, w0, #0x1f
    960081d8:	39000a81 	strb	w1, [x20, #2]
	if (cfg->max_lane_count >= 4)
    960081dc:	71000c3f 	cmp	w1, #0x3
    960081e0:	54001b69 	b.ls	9600854c <tegrabl_dp_enable+0x418>  // b.plast
		cfg->max_lane_count = 4;
    960081e4:	52800081 	mov	w1, #0x4                   	// #4
		cfg->max_lane_count = 2;
    960081e8:	39000a81 	strb	w1, [x20, #2]
	if (dp->pdata && dp->pdata->lanes && (dp->pdata->lanes < cfg->max_lane_count)) {
    960081ec:	f9408661 	ldr	x1, [x19, #264]
    960081f0:	b40000e1 	cbz	x1, 9600820c <tegrabl_dp_enable+0xd8>
    960081f4:	b9400421 	ldr	w1, [x1, #4]
    960081f8:	340000a1 	cbz	w1, 9600820c <tegrabl_dp_enable+0xd8>
    960081fc:	39400a82 	ldrb	w2, [x20, #2]
    96008200:	6b02003f 	cmp	w1, w2
    96008204:	54000042 	b.cs	9600820c <tegrabl_dp_enable+0xd8>  // b.hs, b.nlast
			cfg->max_lane_count = dp->pdata->lanes;
    96008208:	39000a81 	strb	w1, [x20, #2]
		cfg->tps = TRAINING_PATTERN_3;
    9600820c:	f27a001f 	tst	x0, #0x40
		true : false;
    96008210:	53077c00 	lsr	w0, w0, #7
    96008214:	39001280 	strb	w0, [x20, #4]
		cfg->tps = TRAINING_PATTERN_3;
    96008218:	52800061 	mov	w1, #0x3                   	// #3
	if (dp->sink_cap_valid)
    9600821c:	3945f260 	ldrb	w0, [x19, #380]
		cfg->tps = TRAINING_PATTERN_3;
    96008220:	52800042 	mov	w2, #0x2                   	// #2
    96008224:	1a821022 	csel	w2, w1, w2, ne  // ne = any
    96008228:	b9006682 	str	w2, [x20, #100]
	if (dp->sink_cap_valid)
    9600822c:	34001980 	cbz	w0, 9600855c <tegrabl_dp_enable+0x428>
		dpcd_data = dp->sink_cap[DPCD_MAX_DOWNSPREAD];
    96008230:	3945ce60 	ldrb	w0, [x19, #371]
    96008234:	390133a0 	strb	w0, [x29, #76]
		true : false;
    96008238:	394133a0 	ldrb	w0, [x29, #76]
	CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_TRAINING_AUX_RD_INTERVAL,
    9600823c:	910133a2 	add	x2, x29, #0x4c
		true : false;
    96008240:	12000001 	and	w1, w0, #0x1
    96008244:	39000e81 	strb	w1, [x20, #3]
		DPCD_MAX_DOWNSPREAD_NO_AUX_HANDSHAKE_LT_T) ? true : false;
    96008248:	d3461800 	ubfx	x0, x0, #6, #1
    9600824c:	39003e80 	strb	w0, [x20, #15]
	CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_TRAINING_AUX_RD_INTERVAL,
    96008250:	528001c1 	mov	w1, #0xe                   	// #14
    96008254:	aa1303e0 	mov	x0, x19
    96008258:	97fffeb4 	bl	96007d28 <tegrabl_dp_dpcd_read>
    9600825c:	35001700 	cbnz	w0, 9600853c <tegrabl_dp_enable+0x408>
	cfg->aux_rd_interval = dpcd_data & DPCD_TRAINING_AUX_RD_INTERVAL_MASK;
    96008260:	394133a0 	ldrb	w0, [x29, #76]
    96008264:	12001400 	and	w0, w0, #0x3f
    96008268:	3901a280 	strb	w0, [x20, #104]
	if (dp->sink_cap_valid)
    9600826c:	3945f260 	ldrb	w0, [x19, #380]
    96008270:	34001800 	cbz	w0, 96008570 <tegrabl_dp_enable+0x43c>
		cfg->max_link_bw = dp->sink_cap[DPCD_MAX_LINK_BANDWIDTH];
    96008274:	3945c660 	ldrb	w0, [x19, #369]
    96008278:	39000680 	strb	w0, [x20, #1]
	if (cfg->max_link_bw >= SOR_LINK_SPEED_G5_4)
    9600827c:	39400680 	ldrb	w0, [x20, #1]
    96008280:	71004c1f 	cmp	w0, #0x13
    96008284:	54001829 	b.ls	96008588 <tegrabl_dp_enable+0x454>  // b.plast
		cfg->max_link_bw = SOR_LINK_SPEED_G5_4;
    96008288:	52800280 	mov	w0, #0x14                  	// #20
		cfg->max_link_bw = SOR_LINK_SPEED_G2_7;
    9600828c:	39000680 	strb	w0, [x20, #1]
	if (dp->pdata && dp->pdata->link_bw && (dp->pdata->link_bw < cfg->max_link_bw)) {
    96008290:	f9408660 	ldr	x0, [x19, #264]
    96008294:	b40000e0 	cbz	x0, 960082b0 <tegrabl_dp_enable+0x17c>
    96008298:	b9400800 	ldr	w0, [x0, #8]
    9600829c:	340000a0 	cbz	w0, 960082b0 <tegrabl_dp_enable+0x17c>
    960082a0:	39400681 	ldrb	w1, [x20, #1]
    960082a4:	6b01001f 	cmp	w0, w1
    960082a8:	54000042 	b.cs	960082b0 <tegrabl_dp_enable+0x17c>  // b.hs, b.nlast
			cfg->max_link_bw = dp->pdata->link_bw;
    960082ac:	39000680 	strb	w0, [x20, #1]
	CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_EDP_CONFIG_CAP, &dpcd_data));
    960082b0:	910133a2 	add	x2, x29, #0x4c
    960082b4:	528001a1 	mov	w1, #0xd                   	// #13
    960082b8:	aa1303e0 	mov	x0, x19
    960082bc:	97fffe9b 	bl	96007d28 <tegrabl_dp_dpcd_read>
    960082c0:	350013e0 	cbnz	w0, 9600853c <tegrabl_dp_enable+0x408>
		(dpcd_data & DPCD_EDP_CONFIG_CAP_ASC_RESET_YES) ? true : false;
    960082c4:	394133a0 	ldrb	w0, [x29, #76]
	CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_FEATURE_ENUM_LIST, &dpcd_data));
    960082c8:	910133a2 	add	x2, x29, #0x4c
		(dpcd_data & DPCD_EDP_CONFIG_CAP_ASC_RESET_YES) ? true : false;
    960082cc:	12000001 	and	w1, w0, #0x1
    960082d0:	39003281 	strb	w1, [x20, #12]
		DPCD_EDP_CONFIG_CAP_FRAMING_CHANGE_YES) ? true : false;
    960082d4:	d3410401 	ubfx	x1, x0, #1, #1
		DPCD_EDP_CONFIG_CAP_DISPLAY_CONTROL_CAP_YES) ? true : false;
    960082d8:	d3430c00 	ubfx	x0, x0, #3, #1
		DPCD_EDP_CONFIG_CAP_FRAMING_CHANGE_YES) ? true : false;
    960082dc:	39003681 	strb	w1, [x20, #13]
	CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_FEATURE_ENUM_LIST, &dpcd_data));
    960082e0:	52844201 	mov	w1, #0x2210                	// #8720
		DPCD_EDP_CONFIG_CAP_DISPLAY_CONTROL_CAP_YES) ? true : false;
    960082e4:	39003a80 	strb	w0, [x20, #14]
	CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_FEATURE_ENUM_LIST, &dpcd_data));
    960082e8:	aa1303e0 	mov	x0, x19
    960082ec:	97fffe8f 	bl	96007d28 <tegrabl_dp_dpcd_read>
    960082f0:	35001260 	cbnz	w0, 9600853c <tegrabl_dp_enable+0x408>
		DPCD_FEATURE_ENUM_LIST_VSC_EXT_COLORIMETRY) ? true : false;
    960082f4:	394133a0 	ldrb	w0, [x29, #76]
	tegrabl_dp_calc_config(dp, dp->mode, cfg);
    960082f8:	aa1403e2 	mov	x2, x20
		DPCD_FEATURE_ENUM_LIST_VSC_EXT_COLORIMETRY) ? true : false;
    960082fc:	d3430c00 	ubfx	x0, x0, #3, #1
    96008300:	39001680 	strb	w0, [x20, #5]
	cfg->bits_per_pixel = (dp->nvdisp->depth * 3) ? : 24;
    96008304:	f9400e60 	ldr	x0, [x19, #24]
    96008308:	b9404001 	ldr	w1, [x0, #64]
    9600830c:	52800300 	mov	w0, #0x18                  	// #24
    96008310:	2b010421 	adds	w1, w1, w1, lsl #1
    96008314:	1a801021 	csel	w1, w1, w0, ne  // ne = any
	cfg->lane_count = cfg->max_lane_count;
    96008318:	39400a80 	ldrb	w0, [x20, #2]
    9600831c:	39004680 	strb	w0, [x20, #17]
	cfg->link_bw = cfg->max_link_bw;
    96008320:	39400680 	ldrb	w0, [x20, #1]
    96008324:	39004280 	strb	w0, [x20, #16]
	cfg->bits_per_pixel = (dp->nvdisp->depth * 3) ? : 24;
    96008328:	b9000a81 	str	w1, [x20, #8]
	tegrabl_dp_calc_config(dp, dp->mode, cfg);
    9600832c:	f9401261 	ldr	x1, [x19, #32]
	cfg->enhanced_framing = cfg->support_enhanced_framing;
    96008330:	39401280 	ldrb	w0, [x20, #4]
    96008334:	39004a80 	strb	w0, [x20, #18]
	tegrabl_dp_calc_config(dp, dp->mode, cfg);
    96008338:	aa1303e0 	mov	x0, x19
    9600833c:	97fffec5 	bl	96007e50 <tegrabl_dp_calc_config>
	dp->max_link_cfg = *cfg;
    96008340:	d2800d82 	mov	x2, #0x6c                  	// #108
    96008344:	aa1403e1 	mov	x1, x20
    96008348:	91025260 	add	x0, x19, #0x94
    9600834c:	940086f6 	bl	96029f24 <memcpy>
	tegrabl_dpaux_write(dp->hdpaux, AUX_CMD_AUXWR, DPCD_SOURCE_IEEE_OUI,
    96008350:	f9400660 	ldr	x0, [x19, #8]
    96008354:	910133a5 	add	x5, x29, #0x4c
    96008358:	910123a4 	add	x4, x29, #0x48
    9600835c:	910103a3 	add	x3, x29, #0x40
    96008360:	52806002 	mov	w2, #0x300                 	// #768
    96008364:	52800101 	mov	w1, #0x8                   	// #8
    96008368:	94008507 	bl	96029784 <tegrabl_dpaux_write>
	CHECK_RET(tegrabl_dp_clock_config(sor->nvdisp, sor->instance, TEGRA_SOR_SAFE_CLK));
    9600836c:	b94012a1 	ldr	w1, [x21, #16]
    96008370:	52800022 	mov	w2, #0x1                   	// #1
    96008374:	f94002a0 	ldr	x0, [x21]
    96008378:	97fffdf0 	bl	96007b38 <tegrabl_dp_clock_config>
    9600837c:	2a0003f6 	mov	w22, w0
    96008380:	35000c80 	cbnz	w0, 96008510 <tegrabl_dp_enable+0x3dc>
	sor_writel_def(SOR_CLK_CNTRL, DP_CLK_SEL, DIFF_DPCLK, val);
    96008384:	f94006a1 	ldr	x1, [x21, #8]
	return NV_READ32(sor->base + reg * 4);
    96008388:	b9404c20 	ldr	w0, [x1, #76]
    9600838c:	32000400 	orr	w0, w0, #0x3
	NV_WRITE32(sor->base + reg * 4, val);
    96008390:	b9004c20 	str	w0, [x1, #76]
	sor_set_link_bandwidth(sor, cfg->link_bw);
    96008394:	aa1503e0 	mov	x0, x21
    96008398:	39404281 	ldrb	w1, [x20, #16]
    9600839c:	94000518 	bl	960097fc <sor_set_link_bandwidth>
	sor_config_prod_settings(sor, dp->pdata->prod_list, dp_node, 0);
    960083a0:	f9408660 	ldr	x0, [x19, #264]
    960083a4:	b0000202 	adrp	x2, 96049000 <default_srgb_lut+0xa28>
    960083a8:	912c0042 	add	x2, x2, #0xb00
    960083ac:	52800003 	mov	w3, #0x0                   	// #0
    960083b0:	f9401c01 	ldr	x1, [x0, #56]
    960083b4:	aa1503e0 	mov	x0, x21
    960083b8:	940006a8 	bl	96009e58 <sor_config_prod_settings>
	dp_link_cal(dp);
    960083bc:	aa1303e0 	mov	x0, x19
    960083c0:	97fffd65 	bl	96007954 <dp_link_cal>
	tegrabl_sor_enable_dp(sor);
    960083c4:	aa1503e0 	mov	x0, x21
    960083c8:	940006ff 	bl	96009fc4 <tegrabl_sor_enable_dp>
	if (cfg->alt_scramber_reset_cap) {
    960083cc:	39403280 	ldrb	w0, [x20, #12]
    960083d0:	34000e60 	cbz	w0, 9600859c <tegrabl_dp_enable+0x468>
	ret = tegrabl_dp_dpcd_write(dp, DPCD_EDP_CONFIG_SET, dpcd_data);
    960083d4:	52800022 	mov	w2, #0x1                   	// #1
    960083d8:	52802141 	mov	w1, #0x10a                 	// #266
    960083dc:	aa1303e0 	mov	x0, x19
    960083e0:	97fffe6b 	bl	96007d8c <tegrabl_dp_dpcd_write>
	if (ret != TEGRABL_NO_ERROR) {
    960083e4:	35000080 	cbnz	w0, 960083f4 <tegrabl_dp_enable+0x2c0>
	sor_set_internal_panel(dp->sor, ena);
    960083e8:	f9400a60 	ldr	x0, [x19, #16]
    960083ec:	52800021 	mov	w1, #0x1                   	// #1
		sor_set_internal_panel(sor, false);
    960083f0:	940005b7 	bl	96009acc <sor_set_internal_panel>
	tegrabl_dp_dpcd_write(dp, DPCD_MAIN_LINK_CHANNEL_CODING_SET,
    960083f4:	52800022 	mov	w2, #0x1                   	// #1
    960083f8:	52802101 	mov	w1, #0x108                 	// #264
    960083fc:	aa1303e0 	mov	x0, x19
    96008400:	97fffe63 	bl	96007d8c <tegrabl_dp_dpcd_write>
	val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_CONFIG0_0 + sor->portnum));
    96008404:	394052a0 	ldrb	w0, [x21, #20]
	return NV_READ32(sor->base + reg * 4);
    96008408:	f94006a2 	ldr	x2, [x21, #8]
    9600840c:	11016000 	add	w0, w0, #0x58
    96008410:	d37e2000 	ubfiz	x0, x0, #2, #9
    96008414:	b8606841 	ldr	w1, [x2, x0]
	val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_CONFIG0, IDLE_BEFORE_ATTACH, ENABLE, val);
    96008418:	32040021 	orr	w1, w1, #0x10000000
	NV_WRITE32(sor->base + reg * 4, val);
    9600841c:	b8206841 	str	w1, [x2, x0]
	tegrabl_dp_dpcd_write(dp, DPCD_DOWNSPREAD_CTRL, DPCD_DOWNSPREAD_CTRL_SPREAD_AMP_LT_0_5);
    96008420:	52800202 	mov	w2, #0x10                  	// #16
    96008424:	528020e1 	mov	w1, #0x107                 	// #263
    96008428:	aa1303e0 	mov	x0, x19
    9600842c:	97fffe58 	bl	96007d8c <tegrabl_dp_dpcd_write>
	tegrabl_dp_dpcd_write(dp, DPCD_LINK_BANDWIDTH_SET, cfg->link_bw);
    96008430:	39404282 	ldrb	w2, [x20, #16]
    96008434:	52802001 	mov	w1, #0x100                 	// #256
    96008438:	aa1303e0 	mov	x0, x19
    9600843c:	97fffe54 	bl	96007d8c <tegrabl_dp_dpcd_write>
	tegrabl_dp_dpcd_write_field(dp, DPCD_LANE_COUNT_SET, DPCD_LANE_COUNT_SET_MASK, cfg->lane_count);
    96008440:	39404683 	ldrb	w3, [x20, #17]
    96008444:	528003e2 	mov	w2, #0x1f                  	// #31
    96008448:	52802021 	mov	w1, #0x101                 	// #257
    9600844c:	aa1303e0 	mov	x0, x19
    96008450:	97fffe69 	bl	96007df4 <tegrabl_dp_dpcd_write_field>
	if (enable) {
    96008454:	39404a80 	ldrb	w0, [x20, #18]
    96008458:	340001c0 	cbz	w0, 96008490 <tegrabl_dp_enable+0x35c>
	struct sor_data *sor = dp->sor;
    9600845c:	f9400a60 	ldr	x0, [x19, #16]
		CHECK_RET(tegrabl_dp_dpcd_write_field(dp, DPCD_LANE_COUNT_SET,
    96008460:	12800fe3 	mov	w3, #0xffffff80            	// #-128
		val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum);
    96008464:	39405001 	ldrb	w1, [x0, #20]
	return NV_READ32(sor->base + reg * 4);
    96008468:	f9400402 	ldr	x2, [x0, #8]
    9600846c:	11013021 	add	w1, w1, #0x4c
    96008470:	d37e2021 	ubfiz	x1, x1, #2, #9
    96008474:	b8616840 	ldr	w0, [x2, x1]
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, ENHANCEDFRAME,
    96008478:	32120000 	orr	w0, w0, #0x4000
	NV_WRITE32(sor->base + reg * 4, val);
    9600847c:	b8216840 	str	w0, [x2, x1]
		CHECK_RET(tegrabl_dp_dpcd_write_field(dp, DPCD_LANE_COUNT_SET,
    96008480:	2a0303e2 	mov	w2, w3
    96008484:	52802021 	mov	w1, #0x101                 	// #257
    96008488:	aa1303e0 	mov	x0, x19
    9600848c:	97fffe5a 	bl	96007df4 <tegrabl_dp_dpcd_write_field>
	dp_tu_config(dp, cfg);
    96008490:	f9400a60 	ldr	x0, [x19, #16]
    96008494:	aa1403e1 	mov	x1, x20
    96008498:	97fffd85 	bl	96007aac <dp_tu_config.isra.2>
	tegrabl_sor_port_enable(sor, true);
    9600849c:	52800021 	mov	w1, #0x1                   	// #1
    960084a0:	aa1503e0 	mov	x0, x21
    960084a4:	940006bd 	bl	96009f98 <tegrabl_sor_port_enable>
	sor_config_xbar(sor);
    960084a8:	aa1503e0 	mov	x0, x21
    960084ac:	940005cd 	bl	96009be0 <sor_config_xbar>
	CHECK_RET(tegrabl_dp_clock_config(nvdisp, sor->instance, TEGRA_SOR_LINK_CLK));
    960084b0:	b94012a1 	ldr	w1, [x21, #16]
    960084b4:	52800042 	mov	w2, #0x2                   	// #2
    960084b8:	aa1703e0 	mov	x0, x23
    960084bc:	97fffd9f 	bl	96007b38 <tegrabl_dp_clock_config>
    960084c0:	2a0003f6 	mov	w22, w0
    960084c4:	35000260 	cbnz	w0, 96008510 <tegrabl_dp_enable+0x3dc>
	ret = tegrabl_dp_lt(&dp->lt_data);
    960084c8:	91044260 	add	x0, x19, #0x110
    960084cc:	940003a2 	bl	96009354 <tegrabl_dp_lt>
    960084d0:	2a0003f6 	mov	w22, w0
	if (ret != TEGRABL_NO_ERROR) {
    960084d4:	340006a0 	cbz	w0, 960085a8 <tegrabl_dp_enable+0x474>
		pr_error("dp: link training failed\n");
    960084d8:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960084dc:	910b9400 	add	x0, x0, #0x2e5
    960084e0:	94006864 	bl	96022670 <tegrabl_printf>
		pr_error("DP enable unsuccessful\n");
    960084e4:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960084e8:	910c0800 	add	x0, x0, #0x302
    960084ec:	94006861 	bl	96022670 <tegrabl_printf>
    960084f0:	14000008 	b	96008510 <tegrabl_dp_enable+0x3dc>
	if (ret != TEGRABL_NO_ERROR) {
    960084f4:	34ffe440 	cbz	w0, 9600817c <tegrabl_dp_enable+0x48>
		return TEGRABL_ERROR(TEGRABL_ERR_POWER, 0);
    960084f8:	528006f6 	mov	w22, #0x37                  	// #55
		pr_error("dp: failed to exit panel power save mode (0x%x)\n", ret);
    960084fc:	2a0003e1 	mov	w1, w0
		return TEGRABL_ERROR(TEGRABL_ERR_POWER, 0);
    96008500:	72ac2c36 	movk	w22, #0x6161, lsl #16
		pr_error("dp: failed to exit panel power save mode (0x%x)\n", ret);
    96008504:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96008508:	9109f000 	add	x0, x0, #0x27c
    9600850c:	94006859 	bl	96022670 <tegrabl_printf>
}
    96008510:	2a1603e0 	mov	w0, w22
    96008514:	f9401bf7 	ldr	x23, [sp, #48]
    96008518:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600851c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96008520:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96008524:	d65f03c0 	ret
		CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_MAX_LANE_COUNT, &dpcd_data));
    96008528:	910133a2 	add	x2, x29, #0x4c
    9600852c:	52800041 	mov	w1, #0x2                   	// #2
    96008530:	aa1303e0 	mov	x0, x19
    96008534:	97fffdfd 	bl	96007d28 <tegrabl_dp_dpcd_read>
    96008538:	34ffe4c0 	cbz	w0, 960081d0 <tegrabl_dp_enable+0x9c>
		pr_error("dp: failed to init link configuration\n");
    9600853c:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96008540:	910c7400 	add	x0, x0, #0x31d
    96008544:	9400684b 	bl	96022670 <tegrabl_printf>
    96008548:	17ffff82 	b	96008350 <tegrabl_dp_enable+0x21c>
		cfg->max_lane_count = 2;
    9600854c:	7100043f 	cmp	w1, #0x1
    96008550:	52800041 	mov	w1, #0x2                   	// #2
    96008554:	1a9f8421 	csinc	w1, w1, wzr, hi  // hi = pmore
    96008558:	17ffff24 	b	960081e8 <tegrabl_dp_enable+0xb4>
		CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_MAX_DOWNSPREAD, &dpcd_data));
    9600855c:	910133a2 	add	x2, x29, #0x4c
    96008560:	aa1303e0 	mov	x0, x19
    96008564:	97fffdf1 	bl	96007d28 <tegrabl_dp_dpcd_read>
    96008568:	34ffe680 	cbz	w0, 96008238 <tegrabl_dp_enable+0x104>
    9600856c:	17fffff4 	b	9600853c <tegrabl_dp_enable+0x408>
		CHECK_RET(tegrabl_dp_dpcd_read(dp, DPCD_MAX_LINK_BANDWIDTH,
    96008570:	9100a662 	add	x2, x19, #0x29
    96008574:	52800021 	mov	w1, #0x1                   	// #1
    96008578:	aa1303e0 	mov	x0, x19
    9600857c:	97fffdeb 	bl	96007d28 <tegrabl_dp_dpcd_read>
    96008580:	34ffe7e0 	cbz	w0, 9600827c <tegrabl_dp_enable+0x148>
    96008584:	17ffffee 	b	9600853c <tegrabl_dp_enable+0x408>
		cfg->max_link_bw = SOR_LINK_SPEED_G2_7;
    96008588:	7100241f 	cmp	w0, #0x9
    9600858c:	528000c1 	mov	w1, #0x6                   	// #6
    96008590:	52800140 	mov	w0, #0xa                   	// #10
    96008594:	1a818000 	csel	w0, w0, w1, hi  // hi = pmore
    96008598:	17ffff3d 	b	9600828c <tegrabl_dp_enable+0x158>
		sor_set_internal_panel(sor, false);
    9600859c:	52800001 	mov	w1, #0x0                   	// #0
    960085a0:	aa1503e0 	mov	x0, x21
    960085a4:	17ffff93 	b	960083f0 <tegrabl_dp_enable+0x2bc>
		dp->enabled = true;
    960085a8:	52800020 	mov	w0, #0x1                   	// #1
    960085ac:	39040260 	strb	w0, [x19, #256]
    960085b0:	17ffffd8 	b	96008510 <tegrabl_dp_enable+0x3dc>
		return TEGRABL_NO_ERROR;
    960085b4:	52800016 	mov	w22, #0x0                   	// #0
    960085b8:	17ffffd6 	b	96008510 <tegrabl_dp_enable+0x3dc>

00000000960085bc <tegrabl_dp_tpg>:
{
    960085bc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960085c0:	910003fd 	mov	x29, sp
    960085c4:	a90153f3 	stp	x19, x20, [sp, #16]
    960085c8:	aa0003f4 	mov	x20, x0
    960085cc:	f90013f5 	str	x21, [sp, #32]
    960085d0:	2a0103f3 	mov	w19, w1
    960085d4:	2a0203f5 	mov	w21, w2
	if (tp == TRAINING_PATTERN_DISABLE)
    960085d8:	35000161 	cbnz	w1, 96008604 <tegrabl_dp_tpg+0x48>
		tegrabl_dp_dpcd_write(dp, DPCD_TRAINING_PATTERN_SET,
    960085dc:	52800002 	mov	w2, #0x0                   	// #0
		tegrabl_dp_dpcd_write(dp, DPCD_TRAINING_PATTERN_SET,
    960085e0:	52802041 	mov	w1, #0x102                 	// #258
    960085e4:	97fffdea 	bl	96007d8c <tegrabl_dp_dpcd_write>
	tegrabl_sor_tpg(dp->sor, tp, n_lanes);
    960085e8:	2a1503e2 	mov	w2, w21
    960085ec:	2a1303e1 	mov	w1, w19
    960085f0:	f9400a80 	ldr	x0, [x20, #16]
}
    960085f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960085f8:	f94013f5 	ldr	x21, [sp, #32]
    960085fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
	tegrabl_sor_tpg(dp->sor, tp, n_lanes);
    96008600:	1400063f 	b	96009efc <tegrabl_sor_tpg>
		tegrabl_dp_dpcd_write(dp, DPCD_TRAINING_PATTERN_SET,
    96008604:	321b0022 	orr	w2, w1, #0x20
    96008608:	17fffff6 	b	960085e0 <tegrabl_dp_tpg+0x24>

000000009600860c <tegrabl_dp_update_link_config>:
{
    9600860c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96008610:	910003fd 	mov	x29, sp
    96008614:	a90153f3 	stp	x19, x20, [sp, #16]
    96008618:	aa0003f3 	mov	x19, x0
	dp_set_link_bandwidth(dp, cfg->link_bw);
    9600861c:	9100a014 	add	x20, x0, #0x28
	sor_set_link_bandwidth(dp->sor, link_bw);
    96008620:	f9400800 	ldr	x0, [x0, #16]
{
    96008624:	f90013f5 	str	x21, [sp, #32]
	dp_set_link_bandwidth(dp, cfg->link_bw);
    96008628:	3940e275 	ldrb	w21, [x19, #56]
	sor_set_link_bandwidth(dp->sor, link_bw);
    9600862c:	2a1503e1 	mov	w1, w21
    96008630:	94000473 	bl	960097fc <sor_set_link_bandwidth>
	return tegrabl_dp_dpcd_write(dp, DPCD_LINK_BANDWIDTH_SET, link_bw);
    96008634:	2a1503e2 	mov	w2, w21
    96008638:	52802001 	mov	w1, #0x100                 	// #256
    9600863c:	aa1303e0 	mov	x0, x19
    96008640:	97fffdd3 	bl	96007d8c <tegrabl_dp_dpcd_write>
	sor_power_lanes(dp->sor, lane_cnt, true);
    96008644:	f9400a60 	ldr	x0, [x19, #16]
    96008648:	52800022 	mov	w2, #0x1                   	// #1
	dp_set_lane_count(dp, cfg->lane_count);
    9600864c:	3940e675 	ldrb	w21, [x19, #57]
	sor_power_lanes(dp->sor, lane_cnt, true);
    96008650:	2a1503e1 	mov	w1, w21
    96008654:	940003f1 	bl	96009618 <sor_power_lanes>
	CHECK_RET(tegrabl_dp_dpcd_write_field(dp, DPCD_LANE_COUNT_SET,
    96008658:	2a1503e3 	mov	w3, w21
    9600865c:	528003e2 	mov	w2, #0x1f                  	// #31
    96008660:	52802021 	mov	w1, #0x101                 	// #257
    96008664:	aa1303e0 	mov	x0, x19
    96008668:	97fffde3 	bl	96007df4 <tegrabl_dp_dpcd_write_field>
	dp_link_cal(dp);
    9600866c:	aa1303e0 	mov	x0, x19
    96008670:	97fffcb9 	bl	96007954 <dp_link_cal>
	dp_tu_config(dp, cfg);
    96008674:	aa1403e1 	mov	x1, x20
    96008678:	f9400a60 	ldr	x0, [x19, #16]
}
    9600867c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96008680:	f94013f5 	ldr	x21, [sp, #32]
    96008684:	a8c37bfd 	ldp	x29, x30, [sp], #48
	dp_tu_config(dp, cfg);
    96008688:	17fffd09 	b	96007aac <dp_tu_config.isra.2>

000000009600868c <fast_lt_state>:

static tegrabl_error_t fast_lt_state(struct tegrabl_dp_lt_data *lt_data)
{
	/*dummy func*/
	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
}
    9600868c:	52800020 	mov	w0, #0x1                   	// #1
    96008690:	72ac2c20 	movk	w0, #0x6161, lsl #16
    96008694:	d65f03c0 	ret

0000000096008698 <set_lt_tpg>:
{
    96008698:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600869c:	910003fd 	mov	x29, sp
    960086a0:	a9025bf5 	stp	x21, x22, [sp, #32]
	struct tegrabl_dp *dp = lt_data->dp;
    960086a4:	f9400015 	ldr	x21, [x0]
{
    960086a8:	a90153f3 	stp	x19, x20, [sp, #16]
    960086ac:	aa0003f3 	mov	x19, x0
    960086b0:	2a0103f4 	mov	w20, w1
	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &hpd_status));
    960086b4:	9100ffa1 	add	x1, x29, #0x3f
    960086b8:	f94006a0 	ldr	x0, [x21, #8]
    960086bc:	9400839f 	bl	96029538 <tegrabl_dpaux_hpd_status>
    960086c0:	2a0003f6 	mov	w22, w0
    960086c4:	35000160 	cbnz	w0, 960086f0 <set_lt_tpg+0x58>
	if (lt_data->tps == tp) {
    960086c8:	b9401260 	ldr	w0, [x19, #16]
    960086cc:	6b14001f 	cmp	w0, w20
    960086d0:	54000100 	b.eq	960086f0 <set_lt_tpg+0x58>  // b.none
	if (hpd_status) {
    960086d4:	3940ffa0 	ldrb	w0, [x29, #63]
		tegrabl_dp_tpg(dp, tp, lt_data->n_lanes);
    960086d8:	2a1403e1 	mov	w1, w20
    960086dc:	b9405262 	ldr	w2, [x19, #80]
	if (hpd_status) {
    960086e0:	34000120 	cbz	w0, 96008704 <set_lt_tpg+0x6c>
		tegrabl_dp_tpg(dp, tp, lt_data->n_lanes);
    960086e4:	aa1503e0 	mov	x0, x21
    960086e8:	97ffffb5 	bl	960085bc <tegrabl_dp_tpg>
	lt_data->tps = tp;
    960086ec:	b9001274 	str	w20, [x19, #16]
}
    960086f0:	2a1603e0 	mov	w0, w22
    960086f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960086f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960086fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96008700:	d65f03c0 	ret
		tegrabl_sor_tpg(dp->sor, tp, lt_data->n_lanes);
    96008704:	f9400aa0 	ldr	x0, [x21, #16]
    96008708:	940005fd 	bl	96009efc <tegrabl_sor_tpg>
    9600870c:	17fffff8 	b	960086ec <set_lt_tpg+0x54>

0000000096008710 <lt_data_sw_reset>:
{
    96008710:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	memset(lt_data->pre_emphasis, PRE_EMPHASIS_L0,
    96008714:	d2800202 	mov	x2, #0x10                  	// #16
{
    96008718:	910003fd 	mov	x29, sp
    9600871c:	f9000bf3 	str	x19, [sp, #16]
    96008720:	aa0003f3 	mov	x19, x0
	lt_data->lt_config_valid = false;
    96008724:	39006c1f 	strb	wzr, [x0, #27]
	struct tegrabl_dp *dp =  lt_data->dp;
    96008728:	f9400000 	ldr	x0, [x0]
	lt_data->tx_pu = 0;
    9600872c:	b9004e7f 	str	wzr, [x19, #76]
	lt_data->cr_retry = 0;
    96008730:	f9002e7f 	str	xzr, [x19, #88]
	lt_data->n_lanes = dp->link_cfg.lane_count;
    96008734:	3940e401 	ldrb	w1, [x0, #57]
    96008738:	b9005261 	str	w1, [x19, #80]
	lt_data->link_bw = dp->link_cfg.link_bw;
    9600873c:	3940e001 	ldrb	w1, [x0, #56]
    96008740:	b9005661 	str	w1, [x19, #84]
	lt_data->no_aux_handshake = dp->link_cfg.support_fast_lt;
    96008744:	3940dc01 	ldrb	w1, [x0, #55]
    96008748:	39006261 	strb	w1, [x19, #24]
	memset(lt_data->pre_emphasis, PRE_EMPHASIS_L0,
    9600874c:	52800001 	mov	w1, #0x0                   	// #0
	lt_data->aux_rd_interval = dp->link_cfg.aux_rd_interval;
    96008750:	39424000 	ldrb	w0, [x0, #144]
    96008754:	39006a60 	strb	w0, [x19, #26]
	memset(lt_data->pre_emphasis, PRE_EMPHASIS_L0,
    96008758:	9100b260 	add	x0, x19, #0x2c
    9600875c:	940085b3 	bl	96029e28 <memset>
	memset(lt_data->drive_current, DRIVE_CURRENT_L0,
    96008760:	d2800202 	mov	x2, #0x10                  	// #16
    96008764:	52800001 	mov	w1, #0x0                   	// #0
    96008768:	91007260 	add	x0, x19, #0x1c
    9600876c:	940085af 	bl	96029e28 <memset>
	memset(lt_data->post_cursor2, POST_CURSOR2_L0,
    96008770:	9100f260 	add	x0, x19, #0x3c
}
    96008774:	f9400bf3 	ldr	x19, [sp, #16]
    96008778:	a8c27bfd 	ldp	x29, x30, [sp], #32
	memset(lt_data->post_cursor2, POST_CURSOR2_L0,
    9600877c:	d2800202 	mov	x2, #0x10                  	// #16
    96008780:	52800001 	mov	w1, #0x0                   	// #0
    96008784:	140085a9 	b	96029e28 <memset>

0000000096008788 <lt_data_reset>:
{
    96008788:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600878c:	910003fd 	mov	x29, sp
    96008790:	a90153f3 	stp	x19, x20, [sp, #16]
	struct tegrabl_dp *dp =  lt_data->dp;
    96008794:	f9400014 	ldr	x20, [x0]
	lt_data_sw_reset(lt_data);
    96008798:	97ffffde 	bl	96008710 <lt_data_sw_reset>
	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &hpd_status));
    9600879c:	9100bfa1 	add	x1, x29, #0x2f
    960087a0:	f9400680 	ldr	x0, [x20, #8]
    960087a4:	94008365 	bl	96029538 <tegrabl_dpaux_hpd_status>
    960087a8:	2a0003f3 	mov	w19, w0
    960087ac:	350000a0 	cbnz	w0, 960087c0 <lt_data_reset+0x38>
	if (hpd_status) {
    960087b0:	3940bfa0 	ldrb	w0, [x29, #47]
    960087b4:	34000060 	cbz	w0, 960087c0 <lt_data_reset+0x38>
		tegrabl_dp_update_link_config(dp);
    960087b8:	aa1403e0 	mov	x0, x20
    960087bc:	97ffff94 	bl	9600860c <tegrabl_dp_update_link_config>
}
    960087c0:	2a1303e0 	mov	w0, w19
    960087c4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960087c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960087cc:	d65f03c0 	ret

00000000960087d0 <lt_failed>:
{
    960087d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960087d4:	910003fd 	mov	x29, sp
    960087d8:	f9000bf3 	str	x19, [sp, #16]
    960087dc:	aa0003f3 	mov	x19, x0
	tegrabl_sor_detach(dp->sor);
    960087e0:	f9400000 	ldr	x0, [x0]
    960087e4:	f9400800 	ldr	x0, [x0, #16]
    960087e8:	94000674 	bl	9600a1b8 <tegrabl_sor_detach>
	CHECK_RET(set_lt_tpg(lt_data, TRAINING_PATTERN_DISABLE));
    960087ec:	52800001 	mov	w1, #0x0                   	// #0
    960087f0:	aa1303e0 	mov	x0, x19
    960087f4:	97ffffa9 	bl	96008698 <set_lt_tpg>
    960087f8:	350000a0 	cbnz	w0, 9600880c <lt_failed+0x3c>
	CHECK_RET(lt_data_reset(lt_data));
    960087fc:	aa1303e0 	mov	x0, x19
}
    96008800:	f9400bf3 	ldr	x19, [sp, #16]
    96008804:	a8c27bfd 	ldp	x29, x30, [sp], #32
	CHECK_RET(lt_data_reset(lt_data));
    96008808:	17ffffe0 	b	96008788 <lt_data_reset>
}
    9600880c:	f9400bf3 	ldr	x19, [sp, #16]
    96008810:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96008814:	d65f03c0 	ret

0000000096008818 <get_clock_recovery_status>:
{
    96008818:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9600881c:	910003fd 	mov	x29, sp
    96008820:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint8_t data_ptr = 0;
    96008824:	910143b6 	add	x22, x29, #0x50
	uint32_t n_lanes = lt_data->n_lanes;
    96008828:	b9405015 	ldr	w21, [x0, #80]
{
    9600882c:	a90153f3 	stp	x19, x20, [sp, #16]
	for (cnt = 0; cnt < loopcnt; cnt++) {
    96008830:	52800013 	mov	w19, #0x0                   	// #0
	uint32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    96008834:	710006bf 	cmp	w21, #0x1
{
    96008838:	a90363f7 	stp	x23, x24, [sp, #48]
	uint32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    9600883c:	53017eb4 	lsr	w20, w21, #1
{
    96008840:	aa0003f7 	mov	x23, x0
	uint32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    96008844:	1a9f1694 	csinc	w20, w20, wzr, ne  // ne = any
	uint8_t data_ptr = 0;
    96008848:	381ffedf 	strb	wzr, [x22, #-1]!
		else if (!(data_ptr & 0x1) ||
    9600884c:	52800238 	mov	w24, #0x11                  	// #17
	for (cnt = 0; cnt < loopcnt; cnt++) {
    96008850:	6b14027f 	cmp	w19, w20
    96008854:	54000061 	b.ne	96008860 <get_clock_recovery_status+0x48>  // b.any
	return true;
    96008858:	52800020 	mov	w0, #0x1                   	// #1
    9600885c:	14000009 	b	96008880 <get_clock_recovery_status+0x68>
		tegrabl_dp_dpcd_read(lt_data->dp, (DPCD_LANE0_1_STATUS + cnt),
    96008860:	f94002e0 	ldr	x0, [x23]
    96008864:	aa1603e2 	mov	x2, x22
    96008868:	11080a61 	add	w1, w19, #0x202
    9600886c:	97fffd2f 	bl	96007d28 <tegrabl_dp_dpcd_read>
		if (n_lanes == 1)
    96008870:	710006bf 	cmp	w21, #0x1
    96008874:	39413fa0 	ldrb	w0, [x29, #79]
    96008878:	540000e1 	b.ne	96008894 <get_clock_recovery_status+0x7c>  // b.any
			return (data_ptr & 0x1) ? true : false;
    9600887c:	12000000 	and	w0, w0, #0x1
}
    96008880:	a94153f3 	ldp	x19, x20, [sp, #16]
    96008884:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96008888:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600888c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96008890:	d65f03c0 	ret
		else if (!(data_ptr & 0x1) ||
    96008894:	0a000300 	and	w0, w24, w0
    96008898:	7100441f 	cmp	w0, #0x11
    9600889c:	54000061 	b.ne	960088a8 <get_clock_recovery_status+0x90>  // b.any
	for (cnt = 0; cnt < loopcnt; cnt++) {
    960088a0:	11000673 	add	w19, w19, #0x1
    960088a4:	17ffffeb 	b	96008850 <get_clock_recovery_status+0x38>
			return false;
    960088a8:	52800000 	mov	w0, #0x0                   	// #0
    960088ac:	17fffff5 	b	96008880 <get_clock_recovery_status+0x68>

00000000960088b0 <get_channel_eq_status>:
{
    960088b0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960088b4:	910003fd 	mov	x29, sp
    960088b8:	a90363f7 	stp	x23, x24, [sp, #48]
		} else if (!(data & (0x1 << DPCD_STATUS_LANEX_CHN_EQ_DONE_SHIFT)) ||
    960088bc:	52800cd8 	mov	w24, #0x66                  	// #102
	uint32_t n_lanes = lt_data->n_lanes;
    960088c0:	b9405017 	ldr	w23, [x0, #80]
{
    960088c4:	a90153f3 	stp	x19, x20, [sp, #16]
	uint8_t data = 0;
    960088c8:	910143b3 	add	x19, x29, #0x50
{
    960088cc:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    960088d0:	710006ff 	cmp	w23, #0x1
    960088d4:	53017ef6 	lsr	w22, w23, #1
{
    960088d8:	aa0003f5 	mov	x21, x0
	uint32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    960088dc:	1a9f16d6 	csinc	w22, w22, wzr, ne  // ne = any
	uint8_t data = 0;
    960088e0:	381ffe7f 	strb	wzr, [x19, #-1]!
	for (cnt = 0; cnt < loopcnt; cnt++) {
    960088e4:	52800014 	mov	w20, #0x0                   	// #0
    960088e8:	6b16029f 	cmp	w20, w22
    960088ec:	f94002a0 	ldr	x0, [x21]
    960088f0:	54000160 	b.eq	9600891c <get_channel_eq_status+0x6c>  // b.none
		tegrabl_dp_dpcd_read(lt_data->dp, (DPCD_LANE0_1_STATUS + cnt), &data);
    960088f4:	aa1303e2 	mov	x2, x19
    960088f8:	11080a81 	add	w1, w20, #0x202
    960088fc:	97fffd0b 	bl	96007d28 <tegrabl_dp_dpcd_read>
		if (n_lanes == 1) {
    96008900:	710006ff 	cmp	w23, #0x1
    96008904:	39413fa0 	ldrb	w0, [x29, #79]
    96008908:	54000201 	b.ne	96008948 <get_channel_eq_status+0x98>  // b.any
	if (ce_done) {
    9600890c:	121f0401 	and	w1, w0, #0x6
    96008910:	52800000 	mov	w0, #0x0                   	// #0
    96008914:	7100183f 	cmp	w1, #0x6
    96008918:	540000e1 	b.ne	96008934 <get_channel_eq_status+0x84>  // b.any
		tegrabl_dp_dpcd_read(lt_data->dp, DPCD_LANE_ALIGN_STATUS_UPDATED,
    9600891c:	f94002a0 	ldr	x0, [x21]
    96008920:	aa1303e2 	mov	x2, x19
    96008924:	52804081 	mov	w1, #0x204                 	// #516
    96008928:	97fffd00 	bl	96007d28 <tegrabl_dp_dpcd_read>
		if (!(data & DPCD_LANE_ALIGN_STATUS_INTERLANE_ALIGN_DONE_YES))
    9600892c:	39413fa0 	ldrb	w0, [x29, #79]
    96008930:	12000000 	and	w0, w0, #0x1
}
    96008934:	a94153f3 	ldp	x19, x20, [sp, #16]
    96008938:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600893c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96008940:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96008944:	d65f03c0 	ret
		} else if (!(data & (0x1 << DPCD_STATUS_LANEX_CHN_EQ_DONE_SHIFT)) ||
    96008948:	0a000300 	and	w0, w24, w0
    9600894c:	7101981f 	cmp	w0, #0x66
    96008950:	54000061 	b.ne	9600895c <get_channel_eq_status+0xac>  // b.any
	for (cnt = 0; cnt < loopcnt; cnt++) {
    96008954:	11000694 	add	w20, w20, #0x1
    96008958:	17ffffe4 	b	960088e8 <get_channel_eq_status+0x38>
    9600895c:	52800000 	mov	w0, #0x0                   	// #0
    96008960:	17fffff5 	b	96008934 <get_channel_eq_status+0x84>

0000000096008964 <lt_passed>:
{
    96008964:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	lt_data->lt_config_valid = true;
    96008968:	52800022 	mov	w2, #0x1                   	// #1
	CHECK_RET(set_lt_tpg(lt_data, TRAINING_PATTERN_DISABLE));
    9600896c:	52800001 	mov	w1, #0x0                   	// #0
{
    96008970:	910003fd 	mov	x29, sp
    96008974:	a90153f3 	stp	x19, x20, [sp, #16]
	lt_data->lt_config_valid = true;
    96008978:	39006c02 	strb	w2, [x0, #27]
	struct tegrabl_dp *dp = lt_data->dp;
    9600897c:	f9400014 	ldr	x20, [x0]
	CHECK_RET(set_lt_tpg(lt_data, TRAINING_PATTERN_DISABLE));
    96008980:	97ffff46 	bl	96008698 <set_lt_tpg>
    96008984:	2a0003f3 	mov	w19, w0
    96008988:	35000060 	cbnz	w0, 96008994 <lt_passed+0x30>
	sor_attach(dp->sor);
    9600898c:	f9400a80 	ldr	x0, [x20, #16]
    96008990:	940004a8 	bl	96009c30 <sor_attach>
}
    96008994:	2a1303e0 	mov	w0, w19
    96008998:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600899c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960089a0:	d65f03c0 	ret

00000000960089a4 <set_lt_config>:
{
    960089a4:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
    960089a8:	910003fd 	mov	x29, sp
    960089ac:	a90573fb 	stp	x27, x28, [sp, #80]
	struct tegrabl_dp *dp = lt_data->dp;
    960089b0:	f940001b 	ldr	x27, [x0]
{
    960089b4:	a90153f3 	stp	x19, x20, [sp, #16]
    960089b8:	aa0003f3 	mov	x19, x0
    960089bc:	a90363f7 	stp	x23, x24, [sp, #48]
	int32_t n_lanes = lt_data->n_lanes;
    960089c0:	b9405017 	ldr	w23, [x0, #80]
	return (!(lt_data->dp->pdata->pc2_disabled) && cfg->tps == TRAINING_PATTERN_3);
    960089c4:	f9408760 	ldr	x0, [x27, #264]
{
    960089c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960089cc:	a9046bf9 	stp	x25, x26, [sp, #64]
	return (!(lt_data->dp->pdata->pc2_disabled) && cfg->tps == TRAINING_PATTERN_3);
    960089d0:	39403000 	ldrb	w0, [x0, #12]
	struct sor_data *sor = dp->sor;
    960089d4:	f9400b78 	ldr	x24, [x27, #16]
	return (!(lt_data->dp->pdata->pc2_disabled) && cfg->tps == TRAINING_PATTERN_3);
    960089d8:	350006c0 	cbnz	w0, 96008ab0 <set_lt_config+0x10c>
    960089dc:	b9408f60 	ldr	w0, [x27, #140]
    960089e0:	71000c1f 	cmp	w0, #0x3
    960089e4:	1a9f17f9 	cset	w25, eq  // eq = none
	int32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    960089e8:	13017ef5 	asr	w21, w23, #1
    960089ec:	710006ff 	cmp	w23, #0x1
		switch (cnt) {
    960089f0:	900001a1 	adrp	x1, 9603c000 <__func__.4414+0x9>
			pr_error("dp: incorrect lane cnt\n");
    960089f4:	900001a2 	adrp	x2, 9603c000 <__func__.4414+0x9>
	uint32_t *vs = lt_data->drive_current;
    960089f8:	9100727c 	add	x28, x19, #0x1c
	uint32_t *pe = lt_data->pre_emphasis;
    960089fc:	9100b264 	add	x4, x19, #0x2c
	uint32_t *pc = lt_data->post_cursor2;
    96008a00:	9100f276 	add	x22, x19, #0x3c
	int32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    96008a04:	1a9f16b5 	csinc	w21, w21, wzr, ne  // ne = any
		switch (cnt) {
    96008a08:	910d3021 	add	x1, x1, #0x34c
			pr_error("dp: incorrect lane cnt\n");
    96008a0c:	910efc42 	add	x2, x2, #0x3bf
	uint32_t training_lanex_set_size = sizeof(training_lanex_set);
    96008a10:	52800080 	mov	w0, #0x4                   	// #4
	for (i = 0; i < n_lanes; i++) {
    96008a14:	d280001a 	mov	x26, #0x0                   	// #0
	uint8_t training_lanex_set[4] = {0, 0, 0, 0};
    96008a18:	b90083bf 	str	wzr, [x29, #128]
	uint32_t training_lanex_set_size = sizeof(training_lanex_set);
    96008a1c:	291103bf 	stp	wzr, w0, [x29, #136]
	for (i = 0; i < n_lanes; i++) {
    96008a20:	6b1a02ff 	cmp	w23, w26
    96008a24:	540004ac 	b.gt	96008ab8 <set_lt_config+0x114>
	struct tegrabl_dp *dp = lt_data->dp;
    96008a28:	f9400260 	ldr	x0, [x19]
	struct sor_data *sor = dp->sor;
    96008a2c:	f9400802 	ldr	x2, [x0, #16]
	if (!dp->pdata) {
    96008a30:	f9408401 	ldr	x1, [x0, #264]
    96008a34:	39405040 	ldrb	w0, [x2, #20]
    96008a38:	f9400445 	ldr	x5, [x2, #8]
    96008a3c:	1105a000 	add	w0, w0, #0x168
    96008a40:	d37e2400 	ubfiz	x0, x0, #2, #10
    96008a44:	b5000d81 	cbnz	x1, 96008bf4 <set_lt_config+0x250>
	return NV_READ32(sor->base + reg * 4);
    96008a48:	b86068a1 	ldr	w1, [x5, x0]
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, TX_PU, DISABLE,
    96008a4c:	12097821 	and	w1, w1, #0xffbfffff
	NV_WRITE32(sor->base + reg * 4, val);
    96008a50:	b82068a1 	str	w1, [x5, x0]
		lt_data->tx_pu = 0;
    96008a54:	b9004e7f 	str	wzr, [x19, #76]
	tegrabl_udelay(20); /* HW stabilization delay */
    96008a58:	d2800280 	mov	x0, #0x14                  	// #20
    96008a5c:	f9003fa4 	str	x4, [x29, #120]
    96008a60:	94005c91 	bl	9601fca4 <tegrabl_udelay>
	for (cnt = n_lanes - 1; cnt >= 0; cnt--) {
    96008a64:	510006e0 	sub	w0, w23, #0x1
    96008a68:	f9403fa4 	ldr	x4, [x29, #120]
    96008a6c:	910203a3 	add	x3, x29, #0x80
    96008a70:	93407c00 	sxtw	x0, w0
    96008a74:	36f80fc0 	tbz	w0, #31, 96008c6c <set_lt_config+0x2c8>
	tegrabl_dpaux_write(dp->hdpaux, AUX_CMD_AUXWR, DPCD_TRAINING_LANE0_SET,
    96008a78:	f9400760 	ldr	x0, [x27, #8]
    96008a7c:	910223a5 	add	x5, x29, #0x88
    96008a80:	910233a4 	add	x4, x29, #0x8c
    96008a84:	52802062 	mov	w2, #0x103                 	// #259
    96008a88:	52800101 	mov	w1, #0x8                   	// #8
    96008a8c:	9400833e 	bl	96029784 <tegrabl_dpaux_write>
	if (pc_supported) {
    96008a90:	350012d9 	cbnz	w25, 96008ce8 <set_lt_config+0x344>
}
    96008a94:	a94153f3 	ldp	x19, x20, [sp, #16]
    96008a98:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96008a9c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96008aa0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96008aa4:	a94573fb 	ldp	x27, x28, [sp, #80]
    96008aa8:	a8c97bfd 	ldp	x29, x30, [sp], #144
    96008aac:	d65f03c0 	ret
	return (!(lt_data->dp->pdata->pc2_disabled) && cfg->tps == TRAINING_PATTERN_3);
    96008ab0:	52800019 	mov	w25, #0x0                   	// #0
    96008ab4:	17ffffcd 	b	960089e8 <set_lt_config+0x44>
		cnt = sor->xbar_ctrl[i];
    96008ab8:	8b1a0b00 	add	x0, x24, x26, lsl #2
		vs_reg = dp->pdata->lt_data[DP_VS].data[pc[i]][vs[i]][pe[i]];
    96008abc:	b87a7b86 	ldr	w6, [x28, x26, lsl #2]
    96008ac0:	b87a7885 	ldr	w5, [x4, x26, lsl #2]
		pe_val = sor_readl(sor,
    96008ac4:	f940070a 	ldr	x10, [x24, #8]
		cnt = sor->xbar_ctrl[i];
    96008ac8:	b9401809 	ldr	w9, [x0, #24]
		vs_reg = dp->pdata->lt_data[DP_VS].data[pc[i]][vs[i]][pe[i]];
    96008acc:	f9408760 	ldr	x0, [x27, #264]
    96008ad0:	f9402403 	ldr	x3, [x0, #72]
    96008ad4:	b87a7ac0 	ldr	w0, [x22, x26, lsl #2]
    96008ad8:	8b0008c0 	add	x0, x6, x0, lsl #2
    96008adc:	8b0008a0 	add	x0, x5, x0, lsl #2
		pe_reg = dp->pdata->lt_data[DP_PE].data[pc[i]][vs[i]][pe[i]];
    96008ae0:	91050065 	add	x5, x3, #0x140
		vs_reg = dp->pdata->lt_data[DP_VS].data[pc[i]][vs[i]][pe[i]];
    96008ae4:	b8607867 	ldr	w7, [x3, x0, lsl #2]
		pc_reg = dp->pdata->lt_data[DP_PC].data[pc[i]][vs[i]][pe[i]];
    96008ae8:	910a0063 	add	x3, x3, #0x280
		pe_reg = dp->pdata->lt_data[DP_PE].data[pc[i]][vs[i]][pe[i]];
    96008aec:	b86078a8 	ldr	w8, [x5, x0, lsl #2]
		pc_reg = dp->pdata->lt_data[DP_PC].data[pc[i]][vs[i]][pe[i]];
    96008af0:	b8607863 	ldr	w3, [x3, x0, lsl #2]
					SOR_NV_PDISP_SOR_LANE_PREEMPHASIS0_0 + sor->portnum);
    96008af4:	39405300 	ldrb	w0, [x24, #20]
    96008af8:	11014800 	add	w0, w0, #0x52
	return NV_READ32(sor->base + reg * 4);
    96008afc:	531e7405 	lsl	w5, w0, #2
    96008b00:	aa0503e0 	mov	x0, x5
    96008b04:	51004006 	sub	w6, w0, #0x10
    96008b08:	b8656945 	ldr	w5, [x10, x5]
    96008b0c:	b8666946 	ldr	w6, [x10, x6]
		if (pc_supported) {
    96008b10:	34001019 	cbz	w25, 96008d10 <set_lt_config+0x36c>
    96008b14:	11004000 	add	w0, w0, #0x10
		switch (cnt) {
    96008b18:	71000d3f 	cmp	w9, #0x3
    96008b1c:	b8606954 	ldr	w20, [x10, x0]
    96008b20:	54000528 	b.hi	96008bc4 <set_lt_config+0x220>  // b.pmore
    96008b24:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96008b28:	910d2000 	add	x0, x0, #0x348
    96008b2c:	38694800 	ldrb	w0, [x0, w9, uxtw]
    96008b30:	10000069 	adr	x9, 96008b3c <set_lt_config+0x198>
    96008b34:	8b208920 	add	x0, x9, w0, sxtb #2
    96008b38:	d61f0000 	br	x0
		uint32_t pe_val, vs_val, pc_val = 0;
    96008b3c:	52800014 	mov	w20, #0x0                   	// #0
			pe_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_PREEMPHASIS0,
    96008b40:	33181d05 	bfi	w5, w8, #8, #8
			vs_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_DRIVE_CURRENT0,
    96008b44:	33181ce6 	bfi	w6, w7, #8, #8
			if (pc_supported) {
    96008b48:	34000059 	cbz	w25, 96008b50 <set_lt_config+0x1ac>
				pc_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_POSTCURSOR0,
    96008b4c:	33181c74 	bfi	w20, w3, #8, #8
		sor_writel(sor, SOR_NV_PDISP_SOR_LANE_PREEMPHASIS0_0 + sor->portnum, pe_val);
    96008b50:	39405300 	ldrb	w0, [x24, #20]
    96008b54:	f9400703 	ldr	x3, [x24, #8]
    96008b58:	11014800 	add	w0, w0, #0x52
	NV_WRITE32(sor->base + reg * 4, val);
    96008b5c:	d37e2000 	ubfiz	x0, x0, #2, #9
    96008b60:	b8206865 	str	w5, [x3, x0]
		sor_writel(sor, SOR_NV_PDISP_SOR_LANE_DRIVE_CURRENT0_0 + sor->portnum, vs_val);
    96008b64:	39405300 	ldrb	w0, [x24, #20]
    96008b68:	11013800 	add	w0, w0, #0x4e
    96008b6c:	d37e2000 	ubfiz	x0, x0, #2, #9
    96008b70:	b8206866 	str	w6, [x3, x0]
		if (pc_supported) {
    96008b74:	340000b9 	cbz	w25, 96008b88 <set_lt_config+0x1e4>
			sor_writel(sor, SOR_NV_PDISP_SOR_POSTCURSOR0_0 + sor->portnum, pc_val);
    96008b78:	39405300 	ldrb	w0, [x24, #20]
    96008b7c:	11015800 	add	w0, w0, #0x56
    96008b80:	d37e2000 	ubfiz	x0, x0, #2, #9
    96008b84:	b8206874 	str	w20, [x3, x0]
    96008b88:	9100075a 	add	x26, x26, #0x1
    96008b8c:	17ffffa5 	b	96008a20 <set_lt_config+0x7c>
		uint32_t pe_val, vs_val, pc_val = 0;
    96008b90:	52800014 	mov	w20, #0x0                   	// #0
			pe_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_PREEMPHASIS0,
    96008b94:	33001d05 	bfxil	w5, w8, #0, #8
			vs_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_DRIVE_CURRENT0,
    96008b98:	33001ce6 	bfxil	w6, w7, #0, #8
			if (pc_supported) {
    96008b9c:	34fffdb9 	cbz	w25, 96008b50 <set_lt_config+0x1ac>
				pc_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_POSTCURSOR0,
    96008ba0:	33001c74 	bfxil	w20, w3, #0, #8
    96008ba4:	17ffffeb 	b	96008b50 <set_lt_config+0x1ac>
		uint32_t pe_val, vs_val, pc_val = 0;
    96008ba8:	52800014 	mov	w20, #0x0                   	// #0
			pe_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_PREEMPHASIS0,
    96008bac:	33081d05 	bfi	w5, w8, #24, #8
			vs_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_DRIVE_CURRENT0,
    96008bb0:	33081ce6 	bfi	w6, w7, #24, #8
			if (pc_supported) {
    96008bb4:	34fffcf9 	cbz	w25, 96008b50 <set_lt_config+0x1ac>
				pc_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_POSTCURSOR0,
    96008bb8:	33081c74 	bfi	w20, w3, #24, #8
    96008bbc:	17ffffe5 	b	96008b50 <set_lt_config+0x1ac>
		uint32_t pe_val, vs_val, pc_val = 0;
    96008bc0:	52800014 	mov	w20, #0x0                   	// #0
			pr_error("dp: incorrect lane cnt\n");
    96008bc4:	aa0203e0 	mov	x0, x2
    96008bc8:	f90037a4 	str	x4, [x29, #104]
    96008bcc:	290e17a6 	stp	w6, w5, [x29, #112]
    96008bd0:	f9003fa2 	str	x2, [x29, #120]
    96008bd4:	940066a7 	bl	96022670 <tegrabl_printf>
    96008bd8:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96008bdc:	910d3000 	add	x0, x0, #0x34c
    96008be0:	aa0003e1 	mov	x1, x0
    96008be4:	f94037a4 	ldr	x4, [x29, #104]
    96008be8:	294e17a6 	ldp	w6, w5, [x29, #112]
    96008bec:	f9403fa2 	ldr	x2, [x29, #120]
    96008bf0:	17ffffd8 	b	96008b50 <set_lt_config+0x1ac>
	max_tx_pu = dp->pdata->lt_data[DP_TX_PU].data[pc[0]][vs[0]][pe[0]];
    96008bf4:	f9402426 	ldr	x6, [x1, #72]
    96008bf8:	b9401e63 	ldr	w3, [x19, #28]
    96008bfc:	b9403e61 	ldr	w1, [x19, #60]
    96008c00:	910f00c6 	add	x6, x6, #0x3c0
    96008c04:	b9402e62 	ldr	w2, [x19, #44]
	int32_t n_lanes = lt_data->n_lanes;
    96008c08:	b9405267 	ldr	w7, [x19, #80]
	max_tx_pu = dp->pdata->lt_data[DP_TX_PU].data[pc[0]][vs[0]][pe[0]];
    96008c0c:	8b010861 	add	x1, x3, x1, lsl #2
    96008c10:	8b010841 	add	x1, x2, x1, lsl #2
    96008c14:	b86178c2 	ldr	w2, [x6, x1, lsl #2]
    96008c18:	d2800001 	mov	x1, #0x0                   	// #0
    96008c1c:	91000421 	add	x1, x1, #0x1
	for (; cnt < n_lanes; cnt++) {
    96008c20:	6b0100ff 	cmp	w7, w1
    96008c24:	5400012c 	b.gt	96008c48 <set_lt_config+0x2a4>
	lt_data->tx_pu = max_tx_pu;
    96008c28:	b9004e62 	str	w2, [x19, #76]
	val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_DP_PADCTL0, TX_PU_VALUE,
    96008c2c:	53181c42 	ubfiz	w2, w2, #8, #8
	return NV_READ32(sor->base + reg * 4);
    96008c30:	b86068a1 	ldr	w1, [x5, x0]
    96008c34:	12105c21 	and	w1, w1, #0xffff00ff
	val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, TX_PU, ENABLE,
    96008c38:	320a0021 	orr	w1, w1, #0x400000
    96008c3c:	2a020021 	orr	w1, w1, w2
	NV_WRITE32(sor->base + reg * 4, val);
    96008c40:	b82068a1 	str	w1, [x5, x0]
    96008c44:	17ffff85 	b	96008a58 <set_lt_config+0xb4>
		val = dp->pdata->lt_data[DP_TX_PU].data[pc[cnt]][vs[cnt]][pe[cnt]];
    96008c48:	b8617ac3 	ldr	w3, [x22, x1, lsl #2]
    96008c4c:	b8617b89 	ldr	w9, [x28, x1, lsl #2]
    96008c50:	b8617888 	ldr	w8, [x4, x1, lsl #2]
    96008c54:	8b030923 	add	x3, x9, x3, lsl #2
    96008c58:	8b030903 	add	x3, x8, x3, lsl #2
		max_tx_pu = (max_tx_pu < val) ? val	: max_tx_pu;
    96008c5c:	b86378c3 	ldr	w3, [x6, x3, lsl #2]
    96008c60:	6b03005f 	cmp	w2, w3
    96008c64:	1a832042 	csel	w2, w2, w3, cs  // cs = hs, nlast
    96008c68:	17ffffed 	b	96008c1c <set_lt_config+0x278>
		uint32_t max_vs_flag = tegra_dp_is_max_vs(pe[cnt], vs[cnt]);
    96008c6c:	b8607b82 	ldr	w2, [x28, x0, lsl #2]
    96008c70:	b8607885 	ldr	w5, [x4, x0, lsl #2]
			(max_vs_flag ? DPCD_TRAINING_LANEX_SET_DC_MAX_REACHED_T :
    96008c74:	7100085f 	cmp	w2, #0x2
    96008c78:	1a9f97e1 	cset	w1, hi  // hi = pmore
			(max_pe_flag ? DPCD_TRAINING_LANEX_SET_PE_MAX_REACHED_T :
    96008c7c:	710008bf 	cmp	w5, #0x2
    96008c80:	2a050c42 	orr	w2, w2, w5, lsl #3
    96008c84:	1a9f97e5 	cset	w5, hi  // hi = pmore
    96008c88:	531b68a5 	lsl	w5, w5, #5
		val = (vs[cnt] << DPCD_TRAINING_LANEX_SET_DC_SHIFT) |
    96008c8c:	2a0108a1 	orr	w1, w5, w1, lsl #2
    96008c90:	2a020021 	orr	w1, w1, w2
		training_lanex_set[cnt] = val;
    96008c94:	38206861 	strb	w1, [x3, x0]
    96008c98:	d1000400 	sub	x0, x0, #0x1
    96008c9c:	17ffff76 	b	96008a74 <set_lt_config+0xd0>
			uint32_t max_pc_flag1 = tegra_dp_is_max_pc(pc[cnt + 1]);
    96008ca0:	8b130ac0 	add	x0, x22, x19, lsl #2
			uint32_t max_pc_flag0 = tegra_dp_is_max_pc(pc[cnt]);
    96008ca4:	b8737ac2 	ldr	w2, [x22, x19, lsl #2]
				(max_pc_flag0 ? DPCD_LANEX_SET2_PC2_MAX_REACHED_T :
    96008ca8:	7100085f 	cmp	w2, #0x2
			uint32_t max_pc_flag1 = tegra_dp_is_max_pc(pc[cnt + 1]);
    96008cac:	b9400401 	ldr	w1, [x0, #4]
				(max_pc_flag0 ? DPCD_LANEX_SET2_PC2_MAX_REACHED_T :
    96008cb0:	1a9f97e0 	cset	w0, hi  // hi = pmore
				(max_pc_flag1 ? DPCD_LANEXPLUS1_SET2_PC2_MAX_REACHED_T :
    96008cb4:	7100083f 	cmp	w1, #0x2
    96008cb8:	2a011042 	orr	w2, w2, w1, lsl #4
    96008cbc:	1a9f97e1 	cset	w1, hi  // hi = pmore
    96008cc0:	531a6421 	lsl	w1, w1, #6
			val = (pc[cnt] << DPCD_LANEX_SET2_PC2_SHIFT) |
    96008cc4:	2a000820 	orr	w0, w1, w0, lsl #2
			tegrabl_dp_dpcd_write(dp, (DPCD_TRAINING_LANE0_1_SET2 + cnt), val);
    96008cc8:	11043e61 	add	w1, w19, #0x10f
    96008ccc:	91000673 	add	x19, x19, #0x1
    96008cd0:	2a020002 	orr	w2, w0, w2
    96008cd4:	aa1b03e0 	mov	x0, x27
    96008cd8:	97fffc2d 	bl	96007d8c <tegrabl_dp_dpcd_write>
		for (cnt = 0; cnt < loopcnt; cnt++) {
    96008cdc:	6b1302bf 	cmp	w21, w19
    96008ce0:	54fffe0c 	b.gt	96008ca0 <set_lt_config+0x2fc>
    96008ce4:	17ffff6c 	b	96008a94 <set_lt_config+0xf0>
    96008ce8:	d2800013 	mov	x19, #0x0                   	// #0
    96008cec:	17fffffc 	b	96008cdc <set_lt_config+0x338>
			pe_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_PREEMPHASIS0,
    96008cf0:	33101d05 	bfi	w5, w8, #16, #8
			vs_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_DRIVE_CURRENT0,
    96008cf4:	33101ce6 	bfi	w6, w7, #16, #8
				pc_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_POSTCURSOR0,
    96008cf8:	33101c74 	bfi	w20, w3, #16, #8
    96008cfc:	17ffff95 	b	96008b50 <set_lt_config+0x1ac>
			pe_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_PREEMPHASIS0,
    96008d00:	33101d05 	bfi	w5, w8, #16, #8
			vs_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_LANE_DRIVE_CURRENT0,
    96008d04:	33101ce6 	bfi	w6, w7, #16, #8
		uint32_t pe_val, vs_val, pc_val = 0;
    96008d08:	52800014 	mov	w20, #0x0                   	// #0
    96008d0c:	17ffff91 	b	96008b50 <set_lt_config+0x1ac>
		switch (cnt) {
    96008d10:	71000d3f 	cmp	w9, #0x3
    96008d14:	54fff568 	b.hi	96008bc0 <set_lt_config+0x21c>  // b.pmore
    96008d18:	38694820 	ldrb	w0, [x1, w9, uxtw]
    96008d1c:	10000069 	adr	x9, 96008d28 <get_lt_new_config>
    96008d20:	8b208920 	add	x0, x9, w0, sxtb #2
    96008d24:	d61f0000 	br	x0

0000000096008d28 <get_lt_new_config>:
{
    96008d28:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96008d2c:	910003fd 	mov	x29, sp
    96008d30:	a90153f3 	stp	x19, x20, [sp, #16]
    96008d34:	aa0003f3 	mov	x19, x0
    96008d38:	a90363f7 	stp	x23, x24, [sp, #48]
    96008d3c:	a9046bf9 	stp	x25, x26, [sp, #64]
	uint32_t *vs = lt_data->drive_current;
    96008d40:	9100701a 	add	x26, x0, #0x1c
	uint32_t n_lanes = lt_data->n_lanes;
    96008d44:	b9405018 	ldr	w24, [x0, #80]
{
    96008d48:	f9002bfb 	str	x27, [sp, #80]
	uint32_t *pe = lt_data->pre_emphasis;
    96008d4c:	9100b01b 	add	x27, x0, #0x2c
	bool pc_supported = is_pc2_supported(lt_data);
    96008d50:	f9400000 	ldr	x0, [x0]
{
    96008d54:	a9025bf5 	stp	x21, x22, [sp, #32]
	return (!(lt_data->dp->pdata->pc2_disabled) && cfg->tps == TRAINING_PATTERN_3);
    96008d58:	f9408401 	ldr	x1, [x0, #264]
    96008d5c:	39403021 	ldrb	w1, [x1, #12]
    96008d60:	350003c1 	cbnz	w1, 96008dd8 <get_lt_new_config+0xb0>
    96008d64:	b9408c00 	ldr	w0, [x0, #140]
    96008d68:	71000c1f 	cmp	w0, #0x3
    96008d6c:	1a9f17f9 	cset	w25, eq  // eq = none
	uint32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    96008d70:	53017f15 	lsr	w21, w24, #1
    96008d74:	7100071f 	cmp	w24, #0x1
		tegrabl_dp_dpcd_read(lt_data->dp, (DPCD_LANE0_1_ADJUST_REQ + cnt),
    96008d78:	d0000337 	adrp	x23, 9606e000 <__bss_start>
	uint32_t loopcnt = (n_lanes == 1) ? 1 : n_lanes >> 1;
    96008d7c:	1a9f16b5 	csinc	w21, w21, wzr, ne  // ne = any
		tegrabl_dp_dpcd_read(lt_data->dp, (DPCD_LANE0_1_ADJUST_REQ + cnt),
    96008d80:	911162f7 	add	x23, x23, #0x458
	for (cnt = 0; cnt < loopcnt; cnt++) {
    96008d84:	d2800014 	mov	x20, #0x0                   	// #0
    96008d88:	52800016 	mov	w22, #0x0                   	// #0
    96008d8c:	6b1502df 	cmp	w22, w21
    96008d90:	54000281 	b.ne	96008de0 <get_lt_new_config+0xb8>  // b.any
	if (pc_supported) {
    96008d94:	34000159 	cbz	w25, 96008dbc <get_lt_new_config+0x94>
		tegrabl_dp_dpcd_read(lt_data->dp, DPCD_ADJUST_REQ_POST_CURSOR2,
    96008d98:	f9400260 	ldr	x0, [x19]
    96008d9c:	d0000334 	adrp	x20, 9606e000 <__bss_start>
    96008da0:	52804181 	mov	w1, #0x20c                 	// #524
    96008da4:	91116282 	add	x2, x20, #0x458
    96008da8:	97fffbe0 	bl	96007d28 <tegrabl_dp_dpcd_read>
			pc[cnt] = (data_ptr >>
    96008dac:	39516282 	ldrb	w2, [x20, #1112]
		for (cnt = 0; cnt < n_lanes; cnt++) {
    96008db0:	d2800000 	mov	x0, #0x0                   	// #0
    96008db4:	6b00031f 	cmp	w24, w0
    96008db8:	54000388 	b.hi	96008e28 <get_lt_new_config+0x100>  // b.pmore
}
    96008dbc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96008dc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96008dc4:	a94363f7 	ldp	x23, x24, [sp, #48]
    96008dc8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96008dcc:	f9402bfb 	ldr	x27, [sp, #80]
    96008dd0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96008dd4:	d65f03c0 	ret
	return (!(lt_data->dp->pdata->pc2_disabled) && cfg->tps == TRAINING_PATTERN_3);
    96008dd8:	52800019 	mov	w25, #0x0                   	// #0
    96008ddc:	17ffffe5 	b	96008d70 <get_lt_new_config+0x48>
		tegrabl_dp_dpcd_read(lt_data->dp, (DPCD_LANE0_1_ADJUST_REQ + cnt),
    96008de0:	f9400260 	ldr	x0, [x19]
    96008de4:	11081ac1 	add	w1, w22, #0x206
    96008de8:	aa1703e2 	mov	x2, x23
	for (cnt = 0; cnt < loopcnt; cnt++) {
    96008dec:	110006d6 	add	w22, w22, #0x1
		tegrabl_dp_dpcd_read(lt_data->dp, (DPCD_LANE0_1_ADJUST_REQ + cnt),
    96008df0:	97fffbce 	bl	96007d28 <tegrabl_dp_dpcd_read>
		pe[2 * cnt] = (data_ptr & DPCD_ADJUST_REQ_LANEX_PE_MASK) >>
    96008df4:	394002e0 	ldrb	w0, [x23]
    96008df8:	d3420c01 	ubfx	x1, x0, #2, #2
    96008dfc:	b8346b61 	str	w1, [x27, x20]
		vs[2 * cnt] = (data_ptr & DPCD_ADJUST_REQ_LANEX_DC_MASK) >>
    96008e00:	12000401 	and	w1, w0, #0x3
    96008e04:	b8346b41 	str	w1, [x26, x20]
		pe[1 + 2 * cnt] = (data_ptr & DPCD_ADJUST_REQ_LANEXPLUS1_PE_MASK) >>
    96008e08:	8b140361 	add	x1, x27, x20
    96008e0c:	53067c02 	lsr	w2, w0, #6
		vs[1 + 2 * cnt] = (data_ptr & DPCD_ADJUST_REQ_LANEXPLUS1_DC_MASK) >>
    96008e10:	d3441400 	ubfx	x0, x0, #4, #2
		pe[1 + 2 * cnt] = (data_ptr & DPCD_ADJUST_REQ_LANEXPLUS1_PE_MASK) >>
    96008e14:	b9000422 	str	w2, [x1, #4]
		vs[1 + 2 * cnt] = (data_ptr & DPCD_ADJUST_REQ_LANEXPLUS1_DC_MASK) >>
    96008e18:	8b140341 	add	x1, x26, x20
    96008e1c:	91002294 	add	x20, x20, #0x8
    96008e20:	b9000420 	str	w0, [x1, #4]
    96008e24:	17ffffda 	b	96008d8c <get_lt_new_config+0x64>
			pc[cnt] = (data_ptr >>
    96008e28:	8b000a63 	add	x3, x19, x0, lsl #2
    96008e2c:	531f7801 	lsl	w1, w0, #1
    96008e30:	91000400 	add	x0, x0, #0x1
    96008e34:	1ac12841 	asr	w1, w2, w1
						DPCD_ADJUST_REQ_POST_CURSOR2_LANE_SHIFT(cnt)) &
    96008e38:	12000421 	and	w1, w1, #0x3
			pc[cnt] = (data_ptr >>
    96008e3c:	b9003c61 	str	w1, [x3, #60]
    96008e40:	17ffffdd 	b	96008db4 <get_lt_new_config+0x8c>

0000000096008e44 <lt_reduce_bit_rate_state>:

static tegrabl_error_t lt_reduce_bit_rate_state(
	struct tegrabl_dp_lt_data *lt_data)
{
    96008e44:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    96008e48:	910003fd 	mov	x29, sp
    96008e4c:	a90153f3 	stp	x19, x20, [sp, #16]
    96008e50:	aa0003f3 	mov	x19, x0
	struct tegrabl_dp *dp = lt_data->dp;
    96008e54:	f9400014 	ldr	x20, [x0]
	struct tegrabl_dp_link_config tmp_cfg;
	int32_t next_link_index;
	bool cur_hpd;
	tegrabl_error_t ret = TEGRABL_NO_ERROR;

	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &cur_hpd));
    96008e58:	9100ffa1 	add	x1, x29, #0x3f
{
    96008e5c:	a9025bf5 	stp	x21, x22, [sp, #32]
	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &cur_hpd));
    96008e60:	f9400680 	ldr	x0, [x20, #8]
    96008e64:	940081b5 	bl	96029538 <tegrabl_dpaux_hpd_status>
    96008e68:	2a0003f5 	mov	w21, w0
    96008e6c:	350001a0 	cbnz	w0, 96008ea0 <lt_reduce_bit_rate_state+0x5c>

	if (!cur_hpd) {
    96008e70:	3940ffa0 	ldrb	w0, [x29, #63]
    96008e74:	35000200 	cbnz	w0, 96008eb4 <lt_reduce_bit_rate_state+0x70>
		pr_info("lt: hpd deasserted, wait for sometime, then reset\n");
    96008e78:	900001a0 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96008e7c:	910e2400 	add	x0, x0, #0x389
    96008e80:	940065fc 	bl	96022670 <tegrabl_printf>

		lt_failed(lt_data);
    96008e84:	aa1303e0 	mov	x0, x19
    96008e88:	97fffe52 	bl	960087d0 <lt_failed>
{
	pr_debug("dp lt: switching from state %d (%s) to state %d (%s)\n",
			lt_data->state, tegra_dp_lt_state_names[lt_data->state],
			target_state, tegra_dp_lt_state_names[target_state]);

	lt_data->state = target_state;
    96008e8c:	b9000e7f 	str	wzr, [x19, #12]
	 * If the pending_hpd_evt flag is already set, don't bother to
	 * reschedule the state machine worker. We should be able to assert
	 * that there is a worker callback already scheduled, and that it is
	 * scheduled to run immediately
	 */
	if (!lt_data->pending_evt)
    96008e90:	b9401660 	ldr	w0, [x19, #20]
    96008e94:	34000060 	cbz	w0, 96008ea0 <lt_reduce_bit_rate_state+0x5c>
		return TEGRABL_NO_ERROR;

	return TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 0);
    96008e98:	528002b5 	mov	w21, #0x15                  	// #21
    96008e9c:	72ac2c35 	movk	w21, #0x6161, lsl #16
}
    96008ea0:	2a1503e0 	mov	w0, w21
    96008ea4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96008ea8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96008eac:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    96008eb0:	d65f03c0 	ret
	dp->link_cfg.is_valid = false;
    96008eb4:	aa1403f6 	mov	x22, x20
	tmp_cfg = dp->link_cfg;
    96008eb8:	d2800d82 	mov	x2, #0x6c                  	// #108
    96008ebc:	910103a0 	add	x0, x29, #0x40
	dp->link_cfg.is_valid = false;
    96008ec0:	38028edf 	strb	wzr, [x22, #40]!
	tmp_cfg = dp->link_cfg;
    96008ec4:	aa1603e1 	mov	x1, x22
    96008ec8:	94008417 	bl	96029f24 <memcpy>
	next_link_index = get_next_lower_link_config(dp, &tmp_cfg);
    96008ecc:	394107a5 	ldrb	w5, [x29, #65]
		if (tegrabl_dp_link_config_priority[priority_index][0] == cur_link_bw &&
    96008ed0:	900001a2 	adrp	x2, 9603c000 <__func__.4414+0x9>
	next_link_index = get_next_lower_link_config(dp, &tmp_cfg);
    96008ed4:	39410ba6 	ldrb	w6, [x29, #66]
		if (tegrabl_dp_link_config_priority[priority_index][0] == cur_link_bw &&
    96008ed8:	91106044 	add	x4, x2, #0x418
	next_link_index = get_next_lower_link_config(dp, &tmp_cfg);
    96008edc:	394143a7 	ldrb	w7, [x29, #80]
    96008ee0:	d2800001 	mov	x1, #0x0                   	// #0
    96008ee4:	394147a8 	ldrb	w8, [x29, #81]
    96008ee8:	d37ff823 	lsl	x3, x1, #1
    96008eec:	2a0103e0 	mov	w0, w1
		if (tegrabl_dp_link_config_priority[priority_index][0] == cur_link_bw &&
    96008ef0:	38646869 	ldrb	w9, [x3, x4]
    96008ef4:	6b07013f 	cmp	w9, w7
    96008ef8:	540000a1 	b.ne	96008f0c <lt_reduce_bit_rate_state+0xc8>  // b.any
			tegrabl_dp_link_config_priority[priority_index][1] == cur_n_lanes) {
    96008efc:	8b030083 	add	x3, x4, x3
		if (tegrabl_dp_link_config_priority[priority_index][0] == cur_link_bw &&
    96008f00:	39400463 	ldrb	w3, [x3, #1]
    96008f04:	6b08007f 	cmp	w3, w8
    96008f08:	540005c0 	b.eq	96008fc0 <lt_reduce_bit_rate_state+0x17c>  // b.none
    96008f0c:	91000421 	add	x1, x1, #0x1
	for (priority_index = 0; priority_index < priority_arr_size;
    96008f10:	f100243f 	cmp	x1, #0x9
    96008f14:	54fffea1 	b.ne	96008ee8 <lt_reduce_bit_rate_state+0xa4>  // b.any
    96008f18:	2a0103e0 	mov	w0, w1
	for (priority_index++;
    96008f1c:	11000400 	add	w0, w0, #0x1
    96008f20:	d2800023 	mov	x3, #0x1                   	// #1
    96008f24:	91106041 	add	x1, x2, #0x418
    96008f28:	8b204463 	add	x3, x3, w0, uxtw #1
    96008f2c:	8b030021 	add	x1, x1, x3
    96008f30:	7100201f 	cmp	w0, #0x8
    96008f34:	540004a8 	b.hi	96008fc8 <lt_reduce_bit_rate_state+0x184>  // b.pmore
		if ((tegrabl_dp_link_config_priority[priority_index][0] <=
    96008f38:	385ff023 	ldurb	w3, [x1, #-1]
    96008f3c:	6b05007f 	cmp	w3, w5
    96008f40:	54000508 	b.hi	96008fe0 <lt_reduce_bit_rate_state+0x19c>  // b.pmore
			link_cfg->max_link_bw) &&
    96008f44:	39400023 	ldrb	w3, [x1]
    96008f48:	6b06007f 	cmp	w3, w6
    96008f4c:	540004a8 	b.hi	96008fe0 <lt_reduce_bit_rate_state+0x19c>  // b.pmore
	tmp_cfg.link_bw = tegrabl_dp_link_config_priority[next_link_index][0];
    96008f50:	91106042 	add	x2, x2, #0x418
    96008f54:	937f7c00 	sbfiz	x0, x0, #1, #32
    96008f58:	8b000041 	add	x1, x2, x0
    96008f5c:	38606840 	ldrb	w0, [x2, x0]
	if (!tegrabl_dp_calc_config(dp, dp->mode, &tmp_cfg)) {
    96008f60:	910103a2 	add	x2, x29, #0x40
	tmp_cfg.link_bw = tegrabl_dp_link_config_priority[next_link_index][0];
    96008f64:	390143a0 	strb	w0, [x29, #80]
	tmp_cfg.lane_count = tegrabl_dp_link_config_priority[next_link_index][1];
    96008f68:	39400420 	ldrb	w0, [x1, #1]
	if (!tegrabl_dp_calc_config(dp, dp->mode, &tmp_cfg)) {
    96008f6c:	f9401281 	ldr	x1, [x20, #32]
	tmp_cfg.lane_count = tegrabl_dp_link_config_priority[next_link_index][1];
    96008f70:	390147a0 	strb	w0, [x29, #81]
	if (!tegrabl_dp_calc_config(dp, dp->mode, &tmp_cfg)) {
    96008f74:	aa1403e0 	mov	x0, x20
    96008f78:	97fffbb6 	bl	96007e50 <tegrabl_dp_calc_config>
    96008f7c:	72001c1f 	tst	w0, #0xff
    96008f80:	54000240 	b.eq	96008fc8 <lt_reduce_bit_rate_state+0x184>  // b.none
	dp->link_cfg = tmp_cfg;
    96008f84:	910103a1 	add	x1, x29, #0x40
	tmp_cfg.is_valid = true;
    96008f88:	52800020 	mov	w0, #0x1                   	// #1
	dp->link_cfg = tmp_cfg;
    96008f8c:	d2800d82 	mov	x2, #0x6c                  	// #108
	tmp_cfg.is_valid = true;
    96008f90:	390103a0 	strb	w0, [x29, #64]
	dp->link_cfg = tmp_cfg;
    96008f94:	aa1603e0 	mov	x0, x22
    96008f98:	940083e3 	bl	96029f24 <memcpy>
	tegrabl_dp_update_link_config(dp);
    96008f9c:	aa1403e0 	mov	x0, x20
    96008fa0:	97fffd9b 	bl	9600860c <tegrabl_dp_update_link_config>
	lt_data->n_lanes = tmp_cfg.lane_count;
    96008fa4:	394147a0 	ldrb	w0, [x29, #81]
    96008fa8:	b9005260 	str	w0, [x19, #80]
	lt_data->link_bw = tmp_cfg.link_bw;
    96008fac:	394143a0 	ldrb	w0, [x29, #80]
    96008fb0:	b9005660 	str	w0, [x19, #84]
	lt_data->state = target_state;
    96008fb4:	52800040 	mov	w0, #0x2                   	// #2
    96008fb8:	b9000e60 	str	w0, [x19, #12]
    96008fbc:	17ffffb5 	b	96008e90 <lt_reduce_bit_rate_state+0x4c>
	if (priority_index == priority_arr_size - 1) {
    96008fc0:	7100203f 	cmp	w1, #0x8
    96008fc4:	54fffac1 	b.ne	96008f1c <lt_reduce_bit_rate_state+0xd8>  // b.any
	lt_failed(lt_data);
    96008fc8:	aa1303e0 	mov	x0, x19
    96008fcc:	97fffe01 	bl	960087d0 <lt_failed>
	lt_data->state = target_state;
    96008fd0:	52800080 	mov	w0, #0x4                   	// #4
	return set_lt_state(lt_data, STATE_DONE_FAIL, -1);
    96008fd4:	528002b5 	mov	w21, #0x15                  	// #21
	lt_data->state = target_state;
    96008fd8:	b9000e60 	str	w0, [x19, #12]
	return set_lt_state(lt_data, STATE_DONE_FAIL, -1);
    96008fdc:	17ffffb1 	b	96008ea0 <lt_reduce_bit_rate_state+0x5c>
		priority_index < priority_arr_size; priority_index++) {
    96008fe0:	11000400 	add	w0, w0, #0x1
    96008fe4:	91000821 	add	x1, x1, #0x2
    96008fe8:	17ffffd2 	b	96008f30 <lt_reduce_bit_rate_state+0xec>

0000000096008fec <lt_clock_recovery_state>:
{
    96008fec:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96008ff0:	910003fd 	mov	x29, sp
    96008ff4:	a90153f3 	stp	x19, x20, [sp, #16]
    96008ff8:	aa0003f3 	mov	x19, x0
	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &cur_hpd));
    96008ffc:	f9400000 	ldr	x0, [x0]
    96009000:	9100ffa1 	add	x1, x29, #0x3f
    96009004:	f9400400 	ldr	x0, [x0, #8]
{
    96009008:	f90013f5 	str	x21, [sp, #32]
	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &cur_hpd));
    9600900c:	9400814b 	bl	96029538 <tegrabl_dpaux_hpd_status>
    96009010:	350001c0 	cbnz	w0, 96009048 <lt_clock_recovery_state+0x5c>
	if (!cur_hpd) {
    96009014:	3940ffa0 	ldrb	w0, [x29, #63]
    96009018:	35000200 	cbnz	w0, 96009058 <lt_clock_recovery_state+0x6c>
		pr_info("lt: hpd deasserted, wait for sometime, then reset\n");
    9600901c:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009020:	910e2400 	add	x0, x0, #0x389
    96009024:	94006593 	bl	96022670 <tegrabl_printf>
		lt_failed(lt_data);
    96009028:	aa1303e0 	mov	x0, x19
    9600902c:	97fffde9 	bl	960087d0 <lt_failed>
	lt_data->state = target_state;
    96009030:	b9000e7f 	str	wzr, [x19, #12]
	if (!lt_data->pending_evt)
    96009034:	b9401660 	ldr	w0, [x19, #20]
	return TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 0);
    96009038:	7100001f 	cmp	w0, #0x0
    9600903c:	528002a0 	mov	w0, #0x15                  	// #21
    96009040:	72ac2c20 	movk	w0, #0x6161, lsl #16
    96009044:	1a8003e0 	csel	w0, wzr, w0, eq  // eq = none
}
    96009048:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600904c:	f94013f5 	ldr	x21, [sp, #32]
    96009050:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96009054:	d65f03c0 	ret
	CHECK_RET(set_lt_tpg(lt_data, TRAINING_PATTERN_1));
    96009058:	52800021 	mov	w1, #0x1                   	// #1
    9600905c:	aa1303e0 	mov	x0, x19
    96009060:	97fffd8e 	bl	96008698 <set_lt_tpg>
    96009064:	35ffff20 	cbnz	w0, 96009048 <lt_clock_recovery_state+0x5c>
	set_lt_config(lt_data);
    96009068:	aa1303e0 	mov	x0, x19
    9600906c:	97fffe4e 	bl	960089a4 <set_lt_config>
	if (!lt_data->aux_rd_interval)
    96009070:	39406a60 	ldrb	w0, [x19, #26]
    96009074:	350001c0 	cbnz	w0, 960090ac <lt_clock_recovery_state+0xc0>
		is_clk_recovery ? tegrabl_udelay(200) : tegrabl_udelay(500);
    96009078:	d2801900 	mov	x0, #0xc8                  	// #200
    9600907c:	94005b0a 	bl	9601fca4 <tegrabl_udelay>
	cr_done = get_clock_recovery_status(lt_data);
    96009080:	aa1303e0 	mov	x0, x19
    96009084:	97fffde5 	bl	96008818 <get_clock_recovery_status>
	if (cr_done) {
    96009088:	72001c1f 	tst	w0, #0xff
    9600908c:	54000160 	b.eq	960090b8 <lt_clock_recovery_state+0xcc>  // b.none
		lt_data->cr_retry = 0;
    96009090:	b9005a7f 	str	wzr, [x19, #88]
		pr_info("dp lt: CR done\n");
    96009094:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009098:	910dd800 	add	x0, x0, #0x376
    9600909c:	94006575 	bl	96022670 <tegrabl_printf>
	lt_data->state = target_state;
    960090a0:	52800060 	mov	w0, #0x3                   	// #3
    960090a4:	b9000e60 	str	w0, [x19, #12]
    960090a8:	17ffffe3 	b	96009034 <lt_clock_recovery_state+0x48>
		tegrabl_mdelay(lt_data->aux_rd_interval * 4);
    960090ac:	d37e1c00 	ubfiz	x0, x0, #2, #8
    960090b0:	94005b1a 	bl	9601fd18 <tegrabl_mdelay>
    960090b4:	17fffff3 	b	96009080 <lt_clock_recovery_state+0x94>
	uint32_t *vs = lt_data->drive_current;
    960090b8:	91007274 	add	x20, x19, #0x1c
	memcpy(vs_temp, vs, sizeof(vs_temp));
    960090bc:	d2800202 	mov	x2, #0x10                  	// #16
    960090c0:	aa1403e1 	mov	x1, x20
    960090c4:	910103b5 	add	x21, x29, #0x40
    960090c8:	aa1503e0 	mov	x0, x21
    960090cc:	94008396 	bl	96029f24 <memcpy>
	get_lt_new_config(lt_data);
    960090d0:	aa1303e0 	mov	x0, x19
    960090d4:	97ffff15 	bl	96008d28 <get_lt_new_config>
	if (!memcmp(vs_temp, vs, sizeof(vs_temp))) {
    960090d8:	d2800202 	mov	x2, #0x10                  	// #16
    960090dc:	aa1403e1 	mov	x1, x20
    960090e0:	aa1503e0 	mov	x0, x21
    960090e4:	940083e3 	bl	9602a070 <memcmp>
    960090e8:	350002e0 	cbnz	w0, 96009144 <lt_clock_recovery_state+0x158>
		if (is_vs_already_max(lt_data, vs_temp, vs) ||
    960090ec:	b9405261 	ldr	w1, [x19, #80]
    960090f0:	d2800000 	mov	x0, #0x0                   	// #0
	for (cnt = 0; cnt < n_lanes; cnt++) {
    960090f4:	6b00003f 	cmp	w1, w0
    960090f8:	540000a8 	b.hi	9600910c <lt_clock_recovery_state+0x120>  // b.pmore
			lt_data_sw_reset(lt_data);
    960090fc:	aa1303e0 	mov	x0, x19
    96009100:	97fffd84 	bl	96008710 <lt_data_sw_reset>
	lt_data->state = target_state;
    96009104:	528000c0 	mov	w0, #0x6                   	// #6
    96009108:	17ffffe7 	b	960090a4 <lt_clock_recovery_state+0xb8>
		if (old_vs[cnt] == DRIVE_CURRENT_L3 &&
    9600910c:	b8607aa2 	ldr	w2, [x21, x0, lsl #2]
    96009110:	71000c5f 	cmp	w2, #0x3
    96009114:	540000c1 	b.ne	9600912c <lt_clock_recovery_state+0x140>  // b.any
    96009118:	91000400 	add	x0, x0, #0x1
			new_vs[cnt] == DRIVE_CURRENT_L3) {
    9600911c:	8b000a82 	add	x2, x20, x0, lsl #2
		if (old_vs[cnt] == DRIVE_CURRENT_L3 &&
    96009120:	b85fc042 	ldur	w2, [x2, #-4]
    96009124:	71000c5f 	cmp	w2, #0x3
    96009128:	54fffe60 	b.eq	960090f4 <lt_clock_recovery_state+0x108>  // b.none
			(lt_data->cr_retry)++ >= (CR_RETRY_LIMIT - 1)) {
    9600912c:	b9405a60 	ldr	w0, [x19, #88]
    96009130:	11000401 	add	w1, w0, #0x1
    96009134:	b9005a61 	str	w1, [x19, #88]
		if (is_vs_already_max(lt_data, vs_temp, vs) ||
    96009138:	71000c1f 	cmp	w0, #0x3
    9600913c:	54fffe08 	b.hi	960090fc <lt_clock_recovery_state+0x110>  // b.pmore
    96009140:	14000003 	b	9600914c <lt_clock_recovery_state+0x160>
		lt_data->cr_retry = 1;
    96009144:	52800020 	mov	w0, #0x1                   	// #1
    96009148:	b9005a60 	str	w0, [x19, #88]
	lt_data->state = target_state;
    9600914c:	52800040 	mov	w0, #0x2                   	// #2
    96009150:	17ffffd5 	b	960090a4 <lt_clock_recovery_state+0xb8>

0000000096009154 <lt_reset_state>:
{
    96009154:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96009158:	910003fd 	mov	x29, sp
    9600915c:	a9025bf5 	stp	x21, x22, [sp, #32]
	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &hpd_status));
    96009160:	9100ffa1 	add	x1, x29, #0x3f
	dp = lt_data->dp;
    96009164:	f9400015 	ldr	x21, [x0]
{
    96009168:	a90153f3 	stp	x19, x20, [sp, #16]
    9600916c:	aa0003f3 	mov	x19, x0
	sor = dp->sor;
    96009170:	a940daa0 	ldp	x0, x22, [x21, #8]
	CHECK_RET(tegrabl_dpaux_hpd_status(dp->hdpaux, &hpd_status));
    96009174:	940080f1 	bl	96029538 <tegrabl_dpaux_hpd_status>
    96009178:	2a0003f4 	mov	w20, w0
    9600917c:	35000140 	cbnz	w0, 960091a4 <lt_reset_state+0x50>
	if (!hpd_status || !dp->link_cfg.is_valid) {
    96009180:	3940ffa0 	ldrb	w0, [x29, #63]
    96009184:	34000060 	cbz	w0, 96009190 <lt_reset_state+0x3c>
    96009188:	3940a2a0 	ldrb	w0, [x21, #40]
    9600918c:	35000160 	cbnz	w0, 960091b8 <lt_reset_state+0x64>
		lt_failed(lt_data);
    96009190:	aa1303e0 	mov	x0, x19
    96009194:	97fffd8f 	bl	960087d0 <lt_failed>
	lt_data->state = target_state;
    96009198:	52800080 	mov	w0, #0x4                   	// #4
		return TEGRABL_ERR_INVALID_STATE;
    9600919c:	528002b4 	mov	w20, #0x15                  	// #21
	lt_data->state = target_state;
    960091a0:	b9000e60 	str	w0, [x19, #12]
}
    960091a4:	2a1403e0 	mov	w0, w20
    960091a8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960091ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960091b0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960091b4:	d65f03c0 	ret
	if (lt_data->lt_config_valid &&	get_lt_status(lt_data)) {
    960091b8:	39406e60 	ldrb	w0, [x19, #27]
    960091bc:	340001c0 	cbz	w0, 960091f4 <lt_reset_state+0xa0>
	cr_done = get_clock_recovery_status(lt_data);
    960091c0:	aa1303e0 	mov	x0, x19
    960091c4:	97fffd95 	bl	96008818 <get_clock_recovery_status>
	if (!cr_done)
    960091c8:	72001c1f 	tst	w0, #0xff
    960091cc:	54000140 	b.eq	960091f4 <lt_reset_state+0xa0>  // b.none
	ce_done = get_channel_eq_status(lt_data);
    960091d0:	aa1303e0 	mov	x0, x19
    960091d4:	97fffdb7 	bl	960088b0 <get_channel_eq_status>
	if (lt_data->lt_config_valid &&	get_lt_status(lt_data)) {
    960091d8:	72001c1f 	tst	w0, #0xff
    960091dc:	540000c0 	b.eq	960091f4 <lt_reset_state+0xa0>  // b.none
		lt_passed(lt_data);
    960091e0:	aa1303e0 	mov	x0, x19
    960091e4:	97fffde0 	bl	96008964 <lt_passed>
	lt_data->state = target_state;
    960091e8:	528000a0 	mov	w0, #0x5                   	// #5
    960091ec:	b9000e60 	str	w0, [x19, #12]
    960091f0:	17ffffed 	b	960091a4 <lt_reset_state+0x50>
	tegrabl_sor_detach(sor);
    960091f4:	aa1603e0 	mov	x0, x22
    960091f8:	940003f0 	bl	9600a1b8 <tegrabl_sor_detach>
	lt_data_reset(lt_data);
    960091fc:	aa1303e0 	mov	x0, x19
    96009200:	97fffd62 	bl	96008788 <lt_data_reset>
	tegrabl_sor_precharge_lanes(sor);
    96009204:	aa1603e0 	mov	x0, x22
    96009208:	940003b1 	bl	9600a0cc <tegrabl_sor_precharge_lanes>
	lt_data->state = target_state;
    9600920c:	52800040 	mov	w0, #0x2                   	// #2
    96009210:	b9000e60 	str	w0, [x19, #12]
	if (!lt_data->pending_evt)
    96009214:	b9401660 	ldr	w0, [x19, #20]
	return TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 0);
    96009218:	528002b4 	mov	w20, #0x15                  	// #21
    9600921c:	72ac2c34 	movk	w20, #0x6161, lsl #16
    96009220:	7100001f 	cmp	w0, #0x0
    96009224:	1a9403f4 	csel	w20, wzr, w20, eq  // eq = none
    96009228:	17ffffdf 	b	960091a4 <lt_reset_state+0x50>

000000009600922c <lt_channel_equalization_state>:
{
    9600922c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96009230:	910003fd 	mov	x29, sp
    96009234:	f9000bf3 	str	x19, [sp, #16]
    96009238:	aa0003f3 	mov	x19, x0
	CHECK_RET(tegrabl_dpaux_hpd_status(lt_data->dp->hdpaux, &cur_hpd));
    9600923c:	f9400000 	ldr	x0, [x0]
    96009240:	9100bfa1 	add	x1, x29, #0x2f
    96009244:	f9400400 	ldr	x0, [x0, #8]
    96009248:	940080bc 	bl	96029538 <tegrabl_dpaux_hpd_status>
    9600924c:	35000640 	cbnz	w0, 96009314 <lt_channel_equalization_state+0xe8>
	if (!cur_hpd) {
    96009250:	3940bfa0 	ldrb	w0, [x29, #47]
    96009254:	350001a0 	cbnz	w0, 96009288 <lt_channel_equalization_state+0x5c>
		pr_info("lt: hpd deasserted, wait for sometime, then reset\n");
    96009258:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600925c:	910e2400 	add	x0, x0, #0x389
    96009260:	94006504 	bl	96022670 <tegrabl_printf>
		lt_failed(lt_data);
    96009264:	aa1303e0 	mov	x0, x19
    96009268:	97fffd5a 	bl	960087d0 <lt_failed>
	lt_data->state = target_state;
    9600926c:	b9000e7f 	str	wzr, [x19, #12]
	if (!lt_data->pending_evt)
    96009270:	b9401660 	ldr	w0, [x19, #20]
	return TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 0);
    96009274:	7100001f 	cmp	w0, #0x0
    96009278:	528002a0 	mov	w0, #0x15                  	// #21
    9600927c:	72ac2c20 	movk	w0, #0x6161, lsl #16
    96009280:	1a8003e0 	csel	w0, wzr, w0, eq  // eq = none
    96009284:	14000024 	b	96009314 <lt_channel_equalization_state+0xe8>
	CHECK_RET(set_lt_tpg(lt_data, lt_data->dp->link_cfg.tps));
    96009288:	f9400260 	ldr	x0, [x19]
    9600928c:	b9408c01 	ldr	w1, [x0, #140]
    96009290:	aa1303e0 	mov	x0, x19
    96009294:	97fffd01 	bl	96008698 <set_lt_tpg>
    96009298:	350003e0 	cbnz	w0, 96009314 <lt_channel_equalization_state+0xe8>
	if (!lt_data->aux_rd_interval)
    9600929c:	39406a60 	ldrb	w0, [x19, #26]
    960092a0:	350001e0 	cbnz	w0, 960092dc <lt_channel_equalization_state+0xb0>
		is_clk_recovery ? tegrabl_udelay(200) : tegrabl_udelay(500);
    960092a4:	d2803e80 	mov	x0, #0x1f4                 	// #500
    960092a8:	94005a7f 	bl	9601fca4 <tegrabl_udelay>
	cr_done = get_clock_recovery_status(lt_data);
    960092ac:	aa1303e0 	mov	x0, x19
    960092b0:	97fffd5a 	bl	96008818 <get_clock_recovery_status>
	if (!cr_done) {
    960092b4:	72001c1f 	tst	w0, #0xff
		lt_data_sw_reset(lt_data);
    960092b8:	aa1303e0 	mov	x0, x19
	if (!cr_done) {
    960092bc:	54000161 	b.ne	960092e8 <lt_channel_equalization_state+0xbc>  // b.any
		lt_data_sw_reset(lt_data);
    960092c0:	97fffd14 	bl	96008710 <lt_data_sw_reset>
		pr_info("dp lt: CR lost\n");
    960092c4:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960092c8:	910d4000 	add	x0, x0, #0x350
    960092cc:	940064e9 	bl	96022670 <tegrabl_printf>
	lt_data->state = target_state;
    960092d0:	528000c0 	mov	w0, #0x6                   	// #6
    960092d4:	b9000e60 	str	w0, [x19, #12]
    960092d8:	17ffffe6 	b	96009270 <lt_channel_equalization_state+0x44>
		tegrabl_mdelay(lt_data->aux_rd_interval * 4);
    960092dc:	d37e1c00 	ubfiz	x0, x0, #2, #8
    960092e0:	94005a8e 	bl	9601fd18 <tegrabl_mdelay>
    960092e4:	17fffff2 	b	960092ac <lt_channel_equalization_state+0x80>
	ce_done = get_channel_eq_status(lt_data);
    960092e8:	97fffd72 	bl	960088b0 <get_channel_eq_status>
	if (ce_done) {
    960092ec:	72001c1f 	tst	w0, #0xff
    960092f0:	54000180 	b.eq	96009320 <lt_channel_equalization_state+0xf4>  // b.none
		lt_passed(lt_data);
    960092f4:	aa1303e0 	mov	x0, x19
    960092f8:	97fffd9b 	bl	96008964 <lt_passed>
		pr_info("dp lt: CE done\n");
    960092fc:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009300:	910d8c00 	add	x0, x0, #0x363
    96009304:	940064db 	bl	96022670 <tegrabl_printf>
	lt_data->state = target_state;
    96009308:	528000a0 	mov	w0, #0x5                   	// #5
    9600930c:	b9000e60 	str	w0, [x19, #12]
		return TEGRABL_NO_ERROR;
    96009310:	52800000 	mov	w0, #0x0                   	// #0
}
    96009314:	f9400bf3 	ldr	x19, [sp, #16]
    96009318:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600931c:	d65f03c0 	ret
	if (++(lt_data->ce_retry) > (CE_RETRY_LIMIT + 1)) {
    96009320:	b9405e60 	ldr	w0, [x19, #92]
    96009324:	11000400 	add	w0, w0, #0x1
    96009328:	b9005e60 	str	w0, [x19, #92]
    9600932c:	7100181f 	cmp	w0, #0x6
		lt_data_sw_reset(lt_data);
    96009330:	aa1303e0 	mov	x0, x19
	if (++(lt_data->ce_retry) > (CE_RETRY_LIMIT + 1)) {
    96009334:	54000069 	b.ls	96009340 <lt_channel_equalization_state+0x114>  // b.plast
		lt_data_sw_reset(lt_data);
    96009338:	97fffcf6 	bl	96008710 <lt_data_sw_reset>
    9600933c:	17ffffe5 	b	960092d0 <lt_channel_equalization_state+0xa4>
	get_lt_new_config(lt_data);
    96009340:	97fffe7a 	bl	96008d28 <get_lt_new_config>
	set_lt_config(lt_data);
    96009344:	aa1303e0 	mov	x0, x19
    96009348:	97fffd97 	bl	960089a4 <set_lt_config>
	lt_data->state = target_state;
    9600934c:	52800060 	mov	w0, #0x3                   	// #3
    96009350:	17ffffe1 	b	960092d4 <lt_channel_equalization_state+0xa8>

0000000096009354 <tegrabl_dp_lt>:
}

tegrabl_error_t tegrabl_dp_lt(struct tegrabl_dp_lt_data *lt_data)
{
    96009354:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96009358:	910003fd 	mov	x29, sp
    9600935c:	a90153f3 	stp	x19, x20, [sp, #16]
    96009360:	aa0003f3 	mov	x19, x0
    96009364:	a9025bf5 	stp	x21, x22, [sp, #32]
	lt_data->pending_evt = 1;
    96009368:	52800020 	mov	w0, #0x1                   	// #1
			pr_warn("dp lt: unexpected state scheduled %d", lt_data->state);
    9600936c:	f0000195 	adrp	x21, 9603c000 <__func__.4414+0x9>
			dispatch_func_t func = state_machine_dispatch[lt_data->state];
    96009370:	f0000196 	adrp	x22, 9603c000 <__func__.4414+0x9>
	lt_data->pending_evt = 1;
    96009374:	b9001660 	str	w0, [x19, #20]
			pr_warn("dp lt: unexpected state scheduled %d", lt_data->state);
    96009378:	911152b5 	add	x21, x21, #0x454
			dispatch_func_t func = state_machine_dispatch[lt_data->state];
    9600937c:	910f82d6 	add	x22, x22, #0x3e0
{
    96009380:	f9001bf7 	str	x23, [sp, #48]
		CHECK_RET(tegrabl_dpaux_hpd_status(lt_data->dp->hdpaux, &cur_hpd));
    96009384:	f9400260 	ldr	x0, [x19]
    96009388:	91013fa1 	add	x1, x29, #0x4f
		pending_lt_evt = lt_data->pending_evt;
    9600938c:	b9401677 	ldr	w23, [x19, #20]
		CHECK_RET(tegrabl_dpaux_hpd_status(lt_data->dp->hdpaux, &cur_hpd));
    96009390:	f9400400 	ldr	x0, [x0, #8]
		lt_data->pending_evt = 0;
    96009394:	b900167f 	str	wzr, [x19, #20]
		CHECK_RET(tegrabl_dpaux_hpd_status(lt_data->dp->hdpaux, &cur_hpd));
    96009398:	94008068 	bl	96029538 <tegrabl_dpaux_hpd_status>
    9600939c:	2a0003f4 	mov	w20, w0
    960093a0:	35000600 	cbnz	w0, 96009460 <tegrabl_dp_lt+0x10c>
		if (!cur_hpd) {
    960093a4:	39413fa0 	ldrb	w0, [x29, #79]
    960093a8:	340006c0 	cbz	w0, 96009480 <tegrabl_dp_lt+0x12c>
		if (pending_lt_evt) {
    960093ac:	340002d7 	cbz	w23, 96009404 <tegrabl_dp_lt+0xb0>
	if (!lt_data->pending_evt)
    960093b0:	b9401660 	ldr	w0, [x19, #20]
	return TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 0);
    960093b4:	528002b4 	mov	w20, #0x15                  	// #21
    960093b8:	72ac2c34 	movk	w20, #0x6161, lsl #16
	lt_data->state = target_state;
    960093bc:	b9000e7f 	str	wzr, [x19, #12]
	return TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 0);
    960093c0:	7100001f 	cmp	w0, #0x0
    960093c4:	1a9403f4 	csel	w20, wzr, w20, eq  // eq = none
		switch (lt_data->state) {
    960093c8:	b9400e60 	ldr	w0, [x19, #12]
    960093cc:	7100101f 	cmp	w0, #0x4
    960093d0:	540005c0 	b.eq	96009488 <tegrabl_dp_lt+0x134>  // b.none
    960093d4:	7100141f 	cmp	w0, #0x5
    960093d8:	54000501 	b.ne	96009478 <tegrabl_dp_lt+0x124>  // b.any
	cr_done = get_clock_recovery_status(lt_data);
    960093dc:	aa1303e0 	mov	x0, x19
    960093e0:	97fffd0e 	bl	96008818 <get_clock_recovery_status>
	if (!cr_done)
    960093e4:	72001c1f 	tst	w0, #0xff
    960093e8:	54000341 	b.ne	96009450 <tegrabl_dp_lt+0xfc>  // b.any
	if (!lt_data->pending_evt)
    960093ec:	b9401660 	ldr	w0, [x19, #20]
	lt_data->state = target_state;
    960093f0:	b9000e7f 	str	wzr, [x19, #12]
	if (!lt_data->pending_evt)
    960093f4:	34fffc80 	cbz	w0, 96009384 <tegrabl_dp_lt+0x30>
	return TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 0);
    960093f8:	528002b4 	mov	w20, #0x15                  	// #21
			ret = TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
    960093fc:	72ac2c34 	movk	w20, #0x6161, lsl #16

	return perform_lt(lt_data);
    96009400:	14000018 	b	96009460 <tegrabl_dp_lt+0x10c>
		} else if (lt_data->state < (int32_t)ARRAY_SIZE(state_machine_dispatch)) {
    96009404:	b9400e61 	ldr	w1, [x19, #12]
    96009408:	7100183f 	cmp	w1, #0x6
    9600940c:	5400018c 	b.gt	9600943c <tegrabl_dp_lt+0xe8>
			dispatch_func_t func = state_machine_dispatch[lt_data->state];
    96009410:	f861dac2 	ldr	x2, [x22, w1, sxtw #3]
			if (!func) {
    96009414:	b50000c2 	cbnz	x2, 9600942c <tegrabl_dp_lt+0xd8>
				pr_warn("dp lt: NULL state handler in state %d\n", lt_data->state);
    96009418:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
				ret = TEGRABL_ERR_INVALID;
    9600941c:	52800054 	mov	w20, #0x2                   	// #2
				pr_warn("dp lt: NULL state handler in state %d\n", lt_data->state);
    96009420:	9110a800 	add	x0, x0, #0x42a
    96009424:	94006493 	bl	96022670 <tegrabl_printf>
    96009428:	17ffffe8 	b	960093c8 <tegrabl_dp_lt+0x74>
				ret = func(lt_data);
    9600942c:	aa1303e0 	mov	x0, x19
    96009430:	d63f0040 	blr	x2
    96009434:	2a0003f4 	mov	w20, w0
    96009438:	17ffffe4 	b	960093c8 <tegrabl_dp_lt+0x74>
			ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 1);
    9600943c:	528022b4 	mov	w20, #0x115                 	// #277
			pr_warn("dp lt: unexpected state scheduled %d", lt_data->state);
    96009440:	aa1503e0 	mov	x0, x21
			ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID_STATE, 1);
    96009444:	72ac2c34 	movk	w20, #0x6161, lsl #16
			pr_warn("dp lt: unexpected state scheduled %d", lt_data->state);
    96009448:	9400648a 	bl	96022670 <tegrabl_printf>
    9600944c:	17ffffdf 	b	960093c8 <tegrabl_dp_lt+0x74>
	ce_done = get_channel_eq_status(lt_data);
    96009450:	aa1303e0 	mov	x0, x19
    96009454:	97fffd17 	bl	960088b0 <get_channel_eq_status>
			if (!get_lt_status(lt_data)) {
    96009458:	72001c1f 	tst	w0, #0xff
    9600945c:	54fffc80 	b.eq	960093ec <tegrabl_dp_lt+0x98>  // b.none
}
    96009460:	2a1403e0 	mov	w0, w20
    96009464:	f9401bf7 	ldr	x23, [sp, #48]
    96009468:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600946c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96009470:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96009474:	d65f03c0 	ret
		if (ret != TEGRABL_NO_ERROR) {
    96009478:	34fff874 	cbz	w20, 96009384 <tegrabl_dp_lt+0x30>
    9600947c:	17fffff9 	b	96009460 <tegrabl_dp_lt+0x10c>
			return TEGRABL_ERR_INIT_FAILED;
    96009480:	52800254 	mov	w20, #0x12                  	// #18
    96009484:	17fffff7 	b	96009460 <tegrabl_dp_lt+0x10c>
			ret = TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
    96009488:	52800254 	mov	w20, #0x12                  	// #18
    9600948c:	17ffffdc 	b	960093fc <tegrabl_dp_lt+0xa8>

0000000096009490 <tegrabl_dp_lt_init>:
						struct tegrabl_dp *dp)
{
	lt_data->dp = dp;
	lt_data->state = STATE_RESET;
	lt_data->pending_evt = 0;
	lt_data->shutdown = 0;
    96009490:	a9007c01 	stp	x1, xzr, [x0]
	lt_data->pending_evt = 0;
    96009494:	b900141f 	str	wzr, [x0, #20]

	lt_data_sw_reset(lt_data);
    96009498:	17fffc9e 	b	96008710 <lt_data_sw_reset>

000000009600949c <sor_init>:
	NV_ADDRESS_MAP_SOR3_BASE
};
#endif

tegrabl_error_t sor_init(struct sor_data **phsor, struct tegrabl_display_sor_dtb *sor_dtb)
{
    9600949c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960094a0:	910003fd 	mov	x29, sp
    960094a4:	a90153f3 	stp	x19, x20, [sp, #16]
    960094a8:	aa0003f3 	mov	x19, x0
    960094ac:	aa0103f4 	mov	x20, x1
	struct sor_data *hsor;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	hsor = tegrabl_calloc(1, sizeof(struct sor_data));
    960094b0:	d2800020 	mov	x0, #0x1                   	// #1
    960094b4:	d2800701 	mov	x1, #0x38                  	// #56
    960094b8:	94007583 	bl	96026ac4 <tegrabl_calloc>
	if (hsor == NULL) {
    960094bc:	b5000160 	cbnz	x0, 960094e8 <sor_init+0x4c>
		pr_error("%s, memory allocation failed\n", __func__);
    960094c0:	f0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    960094c4:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960094c8:	91122021 	add	x1, x1, #0x488
    960094cc:	9104e000 	add	x0, x0, #0x138
    960094d0:	94006468 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960094d4:	52800060 	mov	w0, #0x3                   	// #3
    960094d8:	72ac4c40 	movk	w0, #0x6262, lsl #16

	*phsor = hsor;

fail:
	return err;
}
    960094dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960094e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960094e4:	d65f03c0 	ret
	hsor->instance = sor_dtb->sor_instance;
    960094e8:	b9400282 	ldr	w2, [x20]
	hsor->base = (void *)(uintptr_t)(sor_base_address[sor_dtb->sor_instance]);
    960094ec:	90000201 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    960094f0:	9118c021 	add	x1, x1, #0x630
	hsor->instance = sor_dtb->sor_instance;
    960094f4:	b9001002 	str	w2, [x0, #16]
	hsor->portnum = 0;
    960094f8:	3900501f 	strb	wzr, [x0, #20]
	hsor->base = (void *)(uintptr_t)(sor_base_address[sor_dtb->sor_instance]);
    960094fc:	b862d821 	ldr	w1, [x1, w2, sxtw #2]
    96009500:	f9000401 	str	x1, [x0, #8]
	*phsor = hsor;
    96009504:	f9000260 	str	x0, [x19]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96009508:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    9600950c:	17fffff4 	b	960094dc <sor_init+0x40>

0000000096009510 <sor_poll_register>:

tegrabl_error_t sor_poll_register(struct sor_data *sor, uint32_t reg, uint32_t mask, uint32_t exp_val,
		uint32_t poll_interval_us, uint32_t timeout_ms)
{
    96009510:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96009514:	910003fd 	mov	x29, sp
    96009518:	a90153f3 	stp	x19, x20, [sp, #16]
    9600951c:	2a0503f3 	mov	w19, w5
    96009520:	a9025bf5 	stp	x21, x22, [sp, #32]
    96009524:	2a0103f5 	mov	w21, w1
    96009528:	a90363f7 	stp	x23, x24, [sp, #48]
    9600952c:	2a0303f6 	mov	w22, w3
    96009530:	a9046bf9 	stp	x25, x26, [sp, #64]
    96009534:	aa0003f7 	mov	x23, x0
    96009538:	2a0203f8 	mov	w24, w2
    9600953c:	2a0403f9 	mov	w25, w4
	time_t start_time = tegrabl_get_timestamp_us();
    96009540:	940059cf 	bl	9601fc7c <tegrabl_get_timestamp_us>
	return NV_READ32(sor->base + reg * 4);
    96009544:	531e76b5 	lsl	w21, w21, #2

	do {
		tegrabl_udelay(poll_interval_us);
		r_val = sor_readl(sor, reg);
		curr_time = tegrabl_get_timestamp_us();
		if ((curr_time - start_time) >= timeout_ms * 1000) {
    96009548:	52807d05 	mov	w5, #0x3e8                 	// #1000
	time_t start_time = tegrabl_get_timestamp_us();
    9600954c:	aa0003fa 	mov	x26, x0
		if ((curr_time - start_time) >= timeout_ms * 1000) {
    96009550:	1b057e73 	mul	w19, w19, w5
		tegrabl_udelay(poll_interval_us);
    96009554:	aa1903e0 	mov	x0, x25
    96009558:	940059d3 	bl	9601fca4 <tegrabl_udelay>
    9600955c:	f94006e0 	ldr	x0, [x23, #8]
    96009560:	b8756814 	ldr	w20, [x0, x21]
		curr_time = tegrabl_get_timestamp_us();
    96009564:	940059c6 	bl	9601fc7c <tegrabl_get_timestamp_us>
		if ((curr_time - start_time) >= timeout_ms * 1000) {
    96009568:	cb1a0000 	sub	x0, x0, x26
    9600956c:	eb13001f 	cmp	x0, x19
    96009570:	0a140300 	and	w0, w24, w20
    96009574:	54000062 	b.cs	96009580 <sor_poll_register+0x70>  // b.hs, b.nlast
			break;
		}
	} while (((r_val & mask) != exp_val));
    96009578:	6b16001f 	cmp	w0, w22
    9600957c:	54fffec1 	b.ne	96009554 <sor_poll_register+0x44>  // b.any
	if ((r_val & mask) == exp_val) {
		return TEGRABL_NO_ERROR;	/* success */
	}

	pr_debug("sor_poll_register 0x%x: timeout\n", reg);
	return TEGRABL_ERR_TIMEOUT;
    96009580:	6b16001f 	cmp	w0, w22
}
    96009584:	528000c0 	mov	w0, #0x6                   	// #6
    96009588:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600958c:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    96009590:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96009594:	a94363f7 	ldp	x23, x24, [sp, #48]
    96009598:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600959c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960095a0:	d65f03c0 	ret

00000000960095a4 <sor_set_lane_count>:
{
	uint32_t val = 0;

	pr_debug("%s: entry\n", __func__);

	val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum);
    960095a4:	39405002 	ldrb	w2, [x0, #20]
{
    960095a8:	12001c21 	and	w1, w1, #0xff
    960095ac:	f9400404 	ldr	x4, [x0, #8]
	switch (lane_count) {
    960095b0:	7100103f 	cmp	w1, #0x4
	val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum);
    960095b4:	11013042 	add	w2, w2, #0x4c
    960095b8:	d37e2042 	ubfiz	x2, x2, #2, #9
    960095bc:	b8626880 	ldr	w0, [x4, x2]
	switch (lane_count) {
    960095c0:	54000268 	b.hi	9600960c <sor_set_lane_count+0x68>  // b.pmore
    960095c4:	f0000183 	adrp	x3, 9603c000 <__func__.4414+0x9>
    960095c8:	9111f063 	add	x3, x3, #0x47c
    960095cc:	38614863 	ldrb	w3, [x3, w1, uxtw]
    960095d0:	10000065 	adr	x5, 960095dc <sor_set_lane_count+0x38>
    960095d4:	8b2388a3 	add	x3, x5, w3, sxtb #2
    960095d8:	d61f0060 	br	x3
	case 0:
		pr_debug("%s: %d\n", __func__, __LINE__);
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, LANECOUNT, ZERO, val);
    960095dc:	120b6800 	and	w0, w0, #0xffe0ffff
	NV_WRITE32(sor->base + reg * 4, val);
    960095e0:	b8226880 	str	w0, [x4, x2]
	}

	sor_writel(sor, (SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum), val);

	pr_debug("%s: exit\n", __func__);
}
    960095e4:	d65f03c0 	ret
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, LANECOUNT, ONE, val);
    960095e8:	120b6800 	and	w0, w0, #0xffe0ffff
    960095ec:	32100000 	orr	w0, w0, #0x10000
		break;
    960095f0:	17fffffc 	b	960095e0 <sor_set_lane_count+0x3c>
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, LANECOUNT, TWO, val);
    960095f4:	120b6800 	and	w0, w0, #0xffe0ffff
    960095f8:	32100400 	orr	w0, w0, #0x30000
		break;
    960095fc:	17fffff9 	b	960095e0 <sor_set_lane_count+0x3c>
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, LANECOUNT, FOUR, val);
    96009600:	120b6800 	and	w0, w0, #0xffe0ffff
    96009604:	32100c00 	orr	w0, w0, #0xf0000
		break;
    96009608:	17fffff6 	b	960095e0 <sor_set_lane_count+0x3c>
		pr_error("dp: Invalid lane count %d\n", lane_count);
    9600960c:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009610:	91157c00 	add	x0, x0, #0x55f
    96009614:	14006417 	b	96022670 <tegrabl_printf>

0000000096009618 <sor_power_lanes>:

	return err;
}

tegrabl_error_t sor_power_lanes(struct sor_data *sor, uint32_t lane_count, bool pu)
{
    96009618:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	pr_debug("%s: entry\n", __func__);

	if (pu) {
    9600961c:	72001c5f 	tst	w2, #0xff
{
    96009620:	910003fd 	mov	x29, sp
    96009624:	a90153f3 	stp	x19, x20, [sp, #16]
    96009628:	aa0003f3 	mov	x19, x0
    9600962c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96009630:	a90363f7 	stp	x23, x24, [sp, #48]
    96009634:	a9046bf9 	stp	x25, x26, [sp, #64]
	if (pu) {
    96009638:	54000880 	b.eq	96009748 <sor_power_lanes+0x130>  // b.none
	val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum));
    9600963c:	39405000 	ldrb	w0, [x0, #20]
    96009640:	8b214a76 	add	x22, x19, w1, uxtw #2
    96009644:	2a0103f9 	mov	w25, w1
	return NV_READ32(sor->base + reg * 4);
    96009648:	f9400661 	ldr	x1, [x19, #8]
    9600964c:	1105a000 	add	w0, w0, #0x168
			pr_error("dp: incorrect lane cnt\n");
    96009650:	f0000197 	adrp	x23, 9603c000 <__func__.4414+0x9>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    96009654:	5280039a 	mov	w26, #0x1c                  	// #28
		switch (index) {
    96009658:	f0000198 	adrp	x24, 9603c000 <__func__.4414+0x9>
    9600965c:	d37e2400 	ubfiz	x0, x0, #2, #10
    96009660:	91006275 	add	x21, x19, #0x18
    96009664:	910062d6 	add	x22, x22, #0x18
			pr_error("dp: incorrect lane cnt\n");
    96009668:	910efef7 	add	x23, x23, #0x3bf
		switch (index) {
    9600966c:	91121318 	add	x24, x24, #0x484
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    96009670:	72ac4c5a 	movk	w26, #0x6262, lsl #16
    96009674:	b8606834 	ldr	w20, [x1, x0]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96009678:	52800000 	mov	w0, #0x0                   	// #0
	for (i = 0; i < lane_count; i++) {
    9600967c:	eb1502df 	cmp	x22, x21
    96009680:	540003c1 	b.ne	960096f8 <sor_power_lanes+0xe0>  // b.any
	sor_writel(sor, (SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum), val);
    96009684:	39405262 	ldrb	w2, [x19, #20]
	NV_WRITE32(sor->base + reg * 4, val);
    96009688:	f9400661 	ldr	x1, [x19, #8]
    9600968c:	1105a042 	add	w2, w2, #0x168
    96009690:	d37e2442 	ubfiz	x2, x2, #2, #10
    96009694:	b8226834 	str	w20, [x1, x2]
		err = sor_get_pd_tx_bitmap(sor, lane_count);
		if (err != TEGRABL_NO_ERROR) {
    96009698:	35000240 	cbnz	w0, 960096e0 <sor_power_lanes+0xc8>
	val = pu ? NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_LANE_SEQ_CTL, NEW_POWER_STATE, PU, val) :
    9600969c:	529e0014 	mov	w20, #0xf000                	// #61440
			goto fail;
		}

		sor_set_lane_count(sor, lane_count);
    960096a0:	2a1903e1 	mov	w1, w25
	val = pu ? NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_LANE_SEQ_CTL, NEW_POWER_STATE, PU, val) :
    960096a4:	72b00214 	movk	w20, #0x8010, lsl #16
		sor_set_lane_count(sor, lane_count);
    960096a8:	aa1303e0 	mov	x0, x19
    960096ac:	97ffffbe 	bl	960095a4 <sor_set_lane_count>
	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_LANE_SEQ_CTL_0,
    960096b0:	5284e205 	mov	w5, #0x2710                	// #10000
    960096b4:	52800c84 	mov	w4, #0x64                  	// #100
    960096b8:	52800003 	mov	w3, #0x0                   	// #0
    960096bc:	52a20002 	mov	w2, #0x10000000            	// #268435456
    960096c0:	52800421 	mov	w1, #0x21                  	// #33
    960096c4:	aa1303e0 	mov	x0, x19
    960096c8:	97ffff92 	bl	96009510 <sor_poll_register>
    960096cc:	34000440 	cbz	w0, 96009754 <sor_power_lanes+0x13c>
		pr_error("dp: timeout, sor lane sequencer busy\n");
    960096d0:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960096d4:	91141000 	add	x0, x0, #0x504
    960096d8:	940063e6 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERR_BUSY;
    960096dc:	528001c0 	mov	w0, #0xe                   	// #14

	pr_debug("%s: exit\n", __func__);

fail:
	return err;
}
    960096e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960096e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960096e8:	a94363f7 	ldp	x23, x24, [sp, #48]
    960096ec:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960096f0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960096f4:	d65f03c0 	ret
		switch (index) {
    960096f8:	b94002a1 	ldr	w1, [x21]
    960096fc:	71000c3f 	cmp	w1, #0x3
    96009700:	540001c8 	b.hi	96009738 <sor_power_lanes+0x120>  // b.pmore
    96009704:	38614b01 	ldrb	w1, [x24, w1, uxtw]
    96009708:	10000062 	adr	x2, 96009714 <sor_power_lanes+0xfc>
    9600970c:	8b218841 	add	x1, x2, w1, sxtb #2
    96009710:	d61f0020 	br	x1
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, PD_TXD_0, NO, val);
    96009714:	321e0294 	orr	w20, w20, #0x4
    96009718:	910012b5 	add	x21, x21, #0x4
    9600971c:	17ffffd8 	b	9600967c <sor_power_lanes+0x64>
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, PD_TXD_1, NO, val);
    96009720:	321f0294 	orr	w20, w20, #0x2
    96009724:	17fffffd 	b	96009718 <sor_power_lanes+0x100>
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, PD_TXD_2, NO, val);
    96009728:	32000294 	orr	w20, w20, #0x1
    9600972c:	17fffffb 	b	96009718 <sor_power_lanes+0x100>
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, PD_TXD_3, NO, val);
    96009730:	321d0294 	orr	w20, w20, #0x8
    96009734:	17fffff9 	b	96009718 <sor_power_lanes+0x100>
			pr_error("dp: incorrect lane cnt\n");
    96009738:	aa1703e0 	mov	x0, x23
    9600973c:	940063cd 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    96009740:	2a1a03e0 	mov	w0, w26
    96009744:	17fffff5 	b	96009718 <sor_power_lanes+0x100>
	val = pu ? NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_LANE_SEQ_CTL, NEW_POWER_STATE, PU, val) :
    96009748:	529e0014 	mov	w20, #0xf000                	// #61440
    9600974c:	72b00234 	movk	w20, #0x8011, lsl #16
    96009750:	17ffffd8 	b	960096b0 <sor_power_lanes+0x98>
	sor_writel(sor, SOR_NV_PDISP_SOR_LANE_SEQ_CTL_0, val);
    96009754:	f9400660 	ldr	x0, [x19, #8]
	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_LANE_SEQ_CTL_0,
    96009758:	52807d05 	mov	w5, #0x3e8                 	// #1000
    9600975c:	52800c84 	mov	w4, #0x64                  	// #100
    96009760:	52800003 	mov	w3, #0x0                   	// #0
    96009764:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
    96009768:	52800421 	mov	w1, #0x21                  	// #33
    9600976c:	b9008414 	str	w20, [x0, #132]
    96009770:	aa1303e0 	mov	x0, x19
    96009774:	97ffff67 	bl	96009510 <sor_poll_register>
    96009778:	34fffb40 	cbz	w0, 960096e0 <sor_power_lanes+0xc8>
		pr_error("dp: timeout, SOR lane sequencer power up/down\n");
    9600977c:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009780:	9114b400 	add	x0, x0, #0x52d
    96009784:	940063bb 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERR_TIMEOUT;
    96009788:	528000c0 	mov	w0, #0x6                   	// #6
	return err;
    9600978c:	17ffffd5 	b	960096e0 <sor_power_lanes+0xc8>

0000000096009790 <sor_set_power_state>:
	uint32_t r_val = 0;
	uint32_t orig_val = 0;

	pr_debug("%s: entry\n", __func__);

	orig_val = sor_readl(sor, SOR_NV_PDISP_SOR_PWR_0);
    96009790:	f9400402 	ldr	x2, [x0, #8]

	r_val = pu_pd ? NV_DRF_DEF(SOR_NV_PDISP, SOR_PWR, NORMAL_STATE, PU) :
    96009794:	7100003f 	cmp	w1, #0x0
    96009798:	1a9f07e1 	cset	w1, ne  // ne = any
	return NV_READ32(sor->base + reg * 4);
    9600979c:	b9405443 	ldr	w3, [x2, #84]
		NV_DRF_DEF(SOR_NV_PDISP, SOR_PWR, NORMAL_STATE, PD);

	if (r_val == orig_val) {
    960097a0:	6b01007f 	cmp	w3, w1
    960097a4:	540000c1 	b.ne	960097bc <sor_set_power_state+0x2c>  // b.any
		return TEGRABL_NO_ERROR; /* No update needed */
    960097a8:	52800000 	mov	w0, #0x0                   	// #0
		return TEGRABL_ERR_TIMEOUT;
	}

	pr_debug("%s: exit\n", __func__);
	return TEGRABL_NO_ERROR;
}
    960097ac:	d65f03c0 	ret
		return TEGRABL_NO_ERROR; /* No update needed */
    960097b0:	52800000 	mov	w0, #0x0                   	// #0
}
    960097b4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960097b8:	d65f03c0 	ret
{
    960097bc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_PWR, SETTING_NEW, TRIGGER, r_val);
    960097c0:	32010021 	orr	w1, w1, #0x80000000
	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_PWR_0,
    960097c4:	52807d05 	mov	w5, #0x3e8                 	// #1000
    960097c8:	52800c84 	mov	w4, #0x64                  	// #100
{
    960097cc:	910003fd 	mov	x29, sp
	NV_WRITE32(sor->base + reg * 4, val);
    960097d0:	b9005441 	str	w1, [x2, #84]
	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_PWR_0,
    960097d4:	52800003 	mov	w3, #0x0                   	// #0
    960097d8:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
    960097dc:	528002a1 	mov	w1, #0x15                  	// #21
    960097e0:	97ffff4c 	bl	96009510 <sor_poll_register>
    960097e4:	34fffe60 	cbz	w0, 960097b0 <sor_set_power_state+0x20>
		pr_error("nvdisp timeout waiting for SOR_PWR = NEW_DONE\n");
    960097e8:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    960097ec:	9115f400 	add	x0, x0, #0x57d
    960097f0:	940063a0 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERR_TIMEOUT;
    960097f4:	528000c0 	mov	w0, #0x6                   	// #6
    960097f8:	17ffffef 	b	960097b4 <sor_set_power_state+0x24>

00000000960097fc <sor_set_link_bandwidth>:
void sor_set_link_bandwidth(struct sor_data *sor, uint8_t link_bw)
{
	pr_debug("%s: entry\n", __func__);
	uint32_t r_val = 0;

	sor_writel_num(SOR_CLK_CNTRL, DP_LINK_SPEED, link_bw, r_val);
    960097fc:	f9400402 	ldr	x2, [x0, #8]
    96009800:	531e1021 	ubfiz	w1, w1, #2, #5
	return NV_READ32(sor->base + reg * 4);
    96009804:	b9404c40 	ldr	w0, [x2, #76]
    96009808:	12196800 	and	w0, w0, #0xffffff83
    9600980c:	2a000021 	orr	w1, w1, w0
	NV_WRITE32(sor->base + reg * 4, val);
    96009810:	b9004c41 	str	w1, [x2, #76]

	/* It can take upto 200us for PLLs in analog macro to settle */
	tegrabl_udelay(300);
    96009814:	d2802580 	mov	x0, #0x12c                 	// #300
    96009818:	14005923 	b	9601fca4 <tegrabl_udelay>

000000009600981c <sor_config_hdmi_clk>:
	uint32_t link_bw;
	uint32_t r_val = 0;

	pr_debug("%s: entry\n", __func__);

	if (sor->clk_type == TEGRA_SOR_LINK_CLK) {
    9600981c:	39405402 	ldrb	w2, [x0, #21]
    96009820:	7100085f 	cmp	w2, #0x2
    96009824:	540002a0 	b.eq	96009878 <sor_config_hdmi_clk+0x5c>  // b.none
{
    96009828:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9600982c:	910003fd 	mov	x29, sp
		return;
	}

	sor_writel_def(SOR_CLK_CNTRL, DP_CLK_SEL, SINGLE_PCLK, r_val);
    96009830:	f9400403 	ldr	x3, [x0, #8]
{
    96009834:	f9000bf3 	str	x19, [sp, #16]
    96009838:	aa0003f3 	mov	x19, x0
	return NV_READ32(sor->base + reg * 4);
    9600983c:	b9404c62 	ldr	w2, [x3, #76]
	sor_writel_def(SOR_CLK_CNTRL, DP_CLK_SEL, SINGLE_PCLK, r_val);
    96009840:	121e7442 	and	w2, w2, #0xfffffffc
	NV_WRITE32(sor->base + reg * 4, val);
    96009844:	b9004c62 	str	w2, [x3, #76]

	/* VCO output has to be doubled in case of 4K@60 mode */
	if (pclk < MAX_1_4_FREQUENCY)
		link_bw = SOR_LINK_SPEED_G2_7;
	else
		link_bw = SOR_LINK_SPEED_G5_4;
    96009848:	529f9fe2 	mov	w2, #0xfcff                	// #64767
    9600984c:	72a28862 	movk	w2, #0x1443, lsl #16
    96009850:	6b02003f 	cmp	w1, w2
	sor_set_link_bandwidth(sor, link_bw);
    96009854:	52800142 	mov	w2, #0xa                   	// #10
    96009858:	52800281 	mov	w1, #0x14                  	// #20
    9600985c:	1a819041 	csel	w1, w2, w1, ls  // ls = plast
    96009860:	97ffffe7 	bl	960097fc <sor_set_link_bandwidth>

	sor->clk_type = TEGRA_SOR_LINK_CLK;
    96009864:	52800040 	mov	w0, #0x2                   	// #2
    96009868:	39005660 	strb	w0, [x19, #21]

	pr_debug("%s: exit\n", __func__);
}
    9600986c:	f9400bf3 	ldr	x19, [sp, #16]
    96009870:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96009874:	d65f03c0 	ret
    96009878:	d65f03c0 	ret

000000009600987c <sor_pad_cal_power>:

void sor_pad_cal_power(struct sor_data *sor, bool power_up)
{
	uint32_t val = 0;

	val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum);
    9600987c:	39405002 	ldrb	w2, [x0, #20]
	if (power_up) {
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, PAD_CAL_PD, POWERUP, val);
    96009880:	72001c3f 	tst	w1, #0xff
	return NV_READ32(sor->base + reg * 4);
    96009884:	f9400403 	ldr	x3, [x0, #8]
	val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum);
    96009888:	1105a042 	add	w2, w2, #0x168
    9600988c:	d37e2442 	ubfiz	x2, x2, #2, #10
    96009890:	b8626860 	ldr	w0, [x3, x2]
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, PAD_CAL_PD, POWERUP, val);
    96009894:	12087804 	and	w4, w0, #0xff7fffff
    96009898:	32090000 	orr	w0, w0, #0x800000
    9600989c:	1a840000 	csel	w0, w0, w4, eq  // eq = none
	NV_WRITE32(sor->base + reg * 4, val);
    960098a0:	b8226860 	str	w0, [x3, x2]
	} else {
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, PAD_CAL_PD, POWERDOWN, val);
	}

	sor_writel(sor, SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum, val);
}
    960098a4:	d65f03c0 	ret

00000000960098a8 <sor_hdmi_pad_power_up>:

/* hdmi uses sor sequencer for pad power up */
void sor_hdmi_pad_power_up(struct sor_data *sor)
{
    960098a8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960098ac:	910003fd 	mov	x29, sp
	pr_debug("%s: entry\n", __func__);
	uint32_t r_val = 0;

	sor_writel_def(SOR_PLL2, AUX9, LVDSEN_OVERRIDE, r_val);
    960098b0:	f9400401 	ldr	x1, [x0, #8]
{
    960098b4:	f9000bf3 	str	x19, [sp, #16]
    960098b8:	aa0003f3 	mov	x19, x0
	return NV_READ32(sor->base + reg * 4);
    960098bc:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, AUX9, LVDSEN_OVERRIDE, r_val);
    960098c0:	32070042 	orr	w2, w2, #0x2000000
	NV_WRITE32(sor->base + reg * 4, val);
    960098c4:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    960098c8:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, AUX0, SEQ_PLL_PULLDOWN_OVERRIDE, r_val);
    960098cc:	32100042 	orr	w2, w2, #0x10000
	NV_WRITE32(sor->base + reg * 4, val);
    960098d0:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    960098d4:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, CLKGEN_MODE, DP_TMDS, r_val);
    960098d8:	12047442 	and	w2, w2, #0xf3ffffff
    960098dc:	32060042 	orr	w2, w2, #0x4000000
	NV_WRITE32(sor->base + reg * 4, val);
    960098e0:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    960098e4:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, AUX2, OVERRIDE_POWERDOWN, r_val);
    960098e8:	120d7842 	and	w2, w2, #0xfffbffff
	NV_WRITE32(sor->base + reg * 4, val);
    960098ec:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    960098f0:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, AUX1, SEQ_PLLCAPPD_OVERRIDE, r_val);
    960098f4:	320f0042 	orr	w2, w2, #0x20000
	NV_WRITE32(sor->base + reg * 4, val);
    960098f8:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    960098fc:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, AUX6, BANDGAP_POWERDOWN_ENABLE, r_val);
    96009900:	320a0042 	orr	w2, w2, #0x400000
	NV_WRITE32(sor->base + reg * 4, val);
    96009904:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    96009908:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, AUX7, PORT_POWERDOWN_ENABLE, r_val);
    9600990c:	32090042 	orr	w2, w2, #0x800000
	NV_WRITE32(sor->base + reg * 4, val);
    96009910:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    96009914:	b9459422 	ldr	w2, [x1, #1428]
	sor_writel_def(SOR_PLL2, AUX8, SEQ_PLLCAPPD_ENFORCE_ENABLE, r_val);
    96009918:	32080042 	orr	w2, w2, #0x1000000
	NV_WRITE32(sor->base + reg * 4, val);
    9600991c:	b9059422 	str	w2, [x1, #1428]
	return NV_READ32(sor->base + reg * 4);
    96009920:	b9458c22 	ldr	w2, [x1, #1420]
	sor_writel_def(SOR_PLL0, PWR, OFF, r_val);
    96009924:	32000042 	orr	w2, w2, #0x1
	NV_WRITE32(sor->base + reg * 4, val);
    96009928:	b9058c22 	str	w2, [x1, #1420]
	return NV_READ32(sor->base + reg * 4);
    9600992c:	b9458c22 	ldr	w2, [x1, #1420]
	sor_writel_def(SOR_PLL0, VCOPD, ASSERT, r_val);
    96009930:	321e0042 	orr	w2, w2, #0x4
	NV_WRITE32(sor->base + reg * 4, val);
    96009934:	b9058c22 	str	w2, [x1, #1420]
	sor_pad_cal_power(sor, false);
    96009938:	52800001 	mov	w1, #0x0                   	// #0
    9600993c:	97ffffd0 	bl	9600987c <sor_pad_cal_power>
	tegrabl_udelay(70);
    96009940:	d28008c0 	mov	x0, #0x46                  	// #70
    96009944:	940058d8 	bl	9601fca4 <tegrabl_udelay>

	sor_writel_def(SOR_PLL2, AUX6, BANDGAP_POWERDOWN_DISABLE, r_val);
    96009948:	f9400661 	ldr	x1, [x19, #8]
	return NV_READ32(sor->base + reg * 4);
    9600994c:	b9459420 	ldr	w0, [x1, #1428]
    96009950:	12097800 	and	w0, w0, #0xffbfffff
	NV_WRITE32(sor->base + reg * 4, val);
    96009954:	b9059420 	str	w0, [x1, #1428]
	tegrabl_udelay(100);
    96009958:	d2800c80 	mov	x0, #0x64                  	// #100
    9600995c:	940058d2 	bl	9601fca4 <tegrabl_udelay>

	sor_writel_def(SOR_PLL0, PWR, ON, r_val);
    96009960:	f9400660 	ldr	x0, [x19, #8]
	return NV_READ32(sor->base + reg * 4);
    96009964:	b9458c01 	ldr	w1, [x0, #1420]
    96009968:	121f7821 	and	w1, w1, #0xfffffffe
	NV_WRITE32(sor->base + reg * 4, val);
    9600996c:	b9058c01 	str	w1, [x0, #1420]
	return NV_READ32(sor->base + reg * 4);
    96009970:	b9458c01 	ldr	w1, [x0, #1420]
	sor_writel_def(SOR_PLL0, VCOPD, RESCIND, r_val);
    96009974:	121d7821 	and	w1, w1, #0xfffffffb
	NV_WRITE32(sor->base + reg * 4, val);
    96009978:	b9058c01 	str	w1, [x0, #1420]
	return NV_READ32(sor->base + reg * 4);
    9600997c:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX8, SEQ_PLLCAPPD_ENFORCE_DISABLE, r_val);
    96009980:	12077821 	and	w1, w1, #0xfeffffff
	NV_WRITE32(sor->base + reg * 4, val);
    96009984:	b9059401 	str	w1, [x0, #1428]
	tegrabl_udelay(300);
    96009988:	d2802580 	mov	x0, #0x12c                 	// #300
    9600998c:	940058c6 	bl	9601fca4 <tegrabl_udelay>

	sor_writel_def(SOR_PLL2, AUX7, PORT_POWERDOWN_DISABLE, r_val);
    96009990:	f9400660 	ldr	x0, [x19, #8]
	/* TERM_ENABLE is disabled at the end of rterm calibration. Re-enable it here. */
	sor_writel_def(SOR_PLL1, TMDS_TERM, ENABLE, r_val);
	tegrabl_udelay(20);

	pr_debug("%s: exit\n", __func__);
}
    96009994:	f9400bf3 	ldr	x19, [sp, #16]
	return NV_READ32(sor->base + reg * 4);
    96009998:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX7, PORT_POWERDOWN_DISABLE, r_val);
    9600999c:	12087821 	and	w1, w1, #0xff7fffff
	NV_WRITE32(sor->base + reg * 4, val);
    960099a0:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    960099a4:	b9459001 	ldr	w1, [x0, #1424]
	sor_writel_def(SOR_PLL1, TMDS_TERM, ENABLE, r_val);
    960099a8:	32180021 	orr	w1, w1, #0x100
	NV_WRITE32(sor->base + reg * 4, val);
    960099ac:	b9059001 	str	w1, [x0, #1424]
	tegrabl_udelay(20);
    960099b0:	d2800280 	mov	x0, #0x14                  	// #20
}
    960099b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_udelay(20);
    960099b8:	140058bb 	b	9601fca4 <tegrabl_udelay>

00000000960099bc <sor_termination_cal>:

void sor_termination_cal(struct sor_data *sor)
{
    960099bc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960099c0:	910003fd 	mov	x29, sp
	uint32_t termadj = 0x8;
	uint32_t cur_try = 0x8;
	uint32_t reg_val;

	sor_writel_num(SOR_PLL1, TMDS_TERMADJ, termadj, reg_val);
    960099c4:	f9400401 	ldr	x1, [x0, #8]
{
    960099c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960099cc:	aa0003f6 	mov	x22, x0
    960099d0:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t cur_try = 0x8;
    960099d4:	52800114 	mov	w20, #0x8                   	// #8
	return NV_READ32(sor->base + reg * 4);
    960099d8:	b9459020 	ldr	w0, [x1, #1424]
	uint32_t termadj = 0x8;
    960099dc:	2a1403f3 	mov	w19, w20
	NV_WRITE32(sor->base + reg * 4, val);
    960099e0:	52800095 	mov	w21, #0x4                   	// #4
	sor_writel_num(SOR_PLL1, TMDS_TERMADJ, termadj, reg_val);
    960099e4:	12136c00 	and	w0, w0, #0xffffe1ff
    960099e8:	32140000 	orr	w0, w0, #0x1000
    960099ec:	b9059020 	str	w0, [x1, #1424]

	while (cur_try) {
		/* binary search the right value */
		tegrabl_udelay(200);
    960099f0:	d2801900 	mov	x0, #0xc8                  	// #200
    960099f4:	940058ac 	bl	9601fca4 <tegrabl_udelay>
		reg_val = sor_readl(sor, SOR_NV_PDISP_SOR_PLL1_0);
    960099f8:	f94006c0 	ldr	x0, [x22, #8]
	return NV_READ32(sor->base + reg * 4);
    960099fc:	b9459001 	ldr	w1, [x0, #1424]

		if (reg_val & NV_DRF_DEF(SOR_NV_PDISP, SOR_PLL1, TERM_COMPOUT, HIGH)) {
    96009a00:	36780041 	tbz	w1, #15, 96009a08 <sor_termination_cal+0x4c>
			termadj -= cur_try;
    96009a04:	4b140273 	sub	w19, w19, w20
		}
		cur_try >>= 1;
    96009a08:	53017e94 	lsr	w20, w20, #1
    96009a0c:	b9459002 	ldr	w2, [x0, #1424]
		termadj += cur_try;
    96009a10:	0b140273 	add	w19, w19, w20
	while (cur_try) {
    96009a14:	710006b5 	subs	w21, w21, #0x1

		sor_writel_num(SOR_PLL1, TMDS_TERMADJ, termadj, reg_val);
    96009a18:	12136c42 	and	w2, w2, #0xffffe1ff
    96009a1c:	53170e61 	ubfiz	w1, w19, #9, #4
    96009a20:	2a020021 	orr	w1, w1, w2
	NV_WRITE32(sor->base + reg * 4, val);
    96009a24:	b9059001 	str	w1, [x0, #1424]
	while (cur_try) {
    96009a28:	54fffe41 	b.ne	960099f0 <sor_termination_cal+0x34>  // b.any
	}
}
    96009a2c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96009a30:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96009a34:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96009a38:	d65f03c0 	ret

0000000096009a3c <sor_cal>:

void sor_cal(struct sor_data *sor)
{
    96009a3c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96009a40:	910003fd 	mov	x29, sp
    96009a44:	f9000bf3 	str	x19, [sp, #16]
    96009a48:	aa0003f3 	mov	x19, x0
	uint32_t r_val = 0;

	pr_debug("%s: entry\n", __func__);

	sor_writel_def(SOR_PLL2, AUX6, BANDGAP_POWERDOWN_DISABLE, r_val);
    96009a4c:	f9400400 	ldr	x0, [x0, #8]
	return NV_READ32(sor->base + reg * 4);
    96009a50:	b9459401 	ldr	w1, [x0, #1428]
    96009a54:	12097821 	and	w1, w1, #0xffbfffff
	NV_WRITE32(sor->base + reg * 4, val);
    96009a58:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    96009a5c:	b9459001 	ldr	w1, [x0, #1424]
	sor_writel_def(SOR_PLL1, TMDS_TERM, ENABLE, r_val);
    96009a60:	32180021 	orr	w1, w1, #0x100
	NV_WRITE32(sor->base + reg * 4, val);
    96009a64:	b9059001 	str	w1, [x0, #1424]
	tegrabl_udelay(100);
    96009a68:	d2800c80 	mov	x0, #0x64                  	// #100
    96009a6c:	9400588e 	bl	9601fca4 <tegrabl_udelay>

	sor_pad_cal_power(sor, true);
    96009a70:	52800021 	mov	w1, #0x1                   	// #1
    96009a74:	aa1303e0 	mov	x0, x19
    96009a78:	97ffff81 	bl	9600987c <sor_pad_cal_power>
	tegrabl_udelay(20);
    96009a7c:	d2800280 	mov	x0, #0x14                  	// #20
    96009a80:	94005889 	bl	9601fca4 <tegrabl_udelay>

	sor_termination_cal(sor);
    96009a84:	aa1303e0 	mov	x0, x19
    96009a88:	97ffffcd 	bl	960099bc <sor_termination_cal>

	sor_pad_cal_power(sor, false);
    96009a8c:	52800001 	mov	w1, #0x0                   	// #0
    96009a90:	aa1303e0 	mov	x0, x19
    96009a94:	97ffff7a 	bl	9600987c <sor_pad_cal_power>
	tegrabl_udelay(20);
    96009a98:	d2800280 	mov	x0, #0x14                  	// #20
    96009a9c:	94005882 	bl	9601fca4 <tegrabl_udelay>

	sor_writel_def(SOR_PLL2, AUX6, BANDGAP_POWERDOWN_ENABLE, r_val);
    96009aa0:	f9400660 	ldr	x0, [x19, #8]
	sor_writel_def(SOR_PLL1, TMDS_TERM, DISABLE, r_val);
	tegrabl_udelay(100);
}
    96009aa4:	f9400bf3 	ldr	x19, [sp, #16]
	return NV_READ32(sor->base + reg * 4);
    96009aa8:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX6, BANDGAP_POWERDOWN_ENABLE, r_val);
    96009aac:	320a0021 	orr	w1, w1, #0x400000
	NV_WRITE32(sor->base + reg * 4, val);
    96009ab0:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    96009ab4:	b9459001 	ldr	w1, [x0, #1424]
	sor_writel_def(SOR_PLL1, TMDS_TERM, DISABLE, r_val);
    96009ab8:	12177821 	and	w1, w1, #0xfffffeff
	NV_WRITE32(sor->base + reg * 4, val);
    96009abc:	b9059001 	str	w1, [x0, #1424]
	tegrabl_udelay(100);
    96009ac0:	d2800c80 	mov	x0, #0x64                  	// #100
}
    96009ac4:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_udelay(100);
    96009ac8:	14005877 	b	9601fca4 <tegrabl_udelay>

0000000096009acc <sor_set_internal_panel>:
{
	uint32_t r_val;

	pr_debug("%s: entry\n", __func__);

	r_val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_SPARE0_0 + sor->portnum));
    96009acc:	39405003 	ldrb	w3, [x0, #20]

	if (is_int) {
		r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_SPARE0, PANEL, INTERNAL, r_val);
    96009ad0:	72001c3f 	tst	w1, #0xff
	r_val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_SPARE0_0 + sor->portnum));
    96009ad4:	a9401001 	ldp	x1, x4, [x0]
    96009ad8:	11018063 	add	w3, w3, #0x60
	return NV_READ32(sor->base + reg * 4);
    96009adc:	d37e2063 	ubfiz	x3, x3, #2, #9
    96009ae0:	b8636882 	ldr	w2, [x4, x3]
		r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_SPARE0, PANEL, INTERNAL, r_val);
    96009ae4:	321f0045 	orr	w5, w2, #0x2
    96009ae8:	121e7842 	and	w2, w2, #0xfffffffd
    96009aec:	1a850042 	csel	w2, w2, w5, eq  // eq = none
	} else {
		r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_SPARE0, PANEL, EXTERNAL, r_val);
	}

	r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_SPARE0, SOR_CLK_SEL, MACRO_SORCLK, r_val);
    96009af0:	321e0042 	orr	w2, w2, #0x4
	NV_WRITE32(sor->base + reg * 4, val);
    96009af4:	b8236882 	str	w2, [x4, x3]

	sor_writel(sor, (SOR_NV_PDISP_SOR_DP_SPARE0_0 + sor->portnum), r_val);

	if (sor->nvdisp->type == DISPLAY_OUT_HDMI) {
    96009af8:	b9403821 	ldr	w1, [x1, #56]
    96009afc:	7100043f 	cmp	w1, #0x1
    96009b00:	540000e1 	b.ne	96009b1c <sor_set_internal_panel+0x50>  // b.any
		r_val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_SPARE0_0 + sor->portnum);
    96009b04:	39405000 	ldrb	w0, [x0, #20]
    96009b08:	11018000 	add	w0, w0, #0x60
	return NV_READ32(sor->base + reg * 4);
    96009b0c:	d37e2000 	ubfiz	x0, x0, #2, #9
    96009b10:	b8606881 	ldr	w1, [x4, x0]
		r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_SPARE0, DISP_VIDEO_PREAMBLE_CYA, DISABLE, r_val);
    96009b14:	121c7821 	and	w1, w1, #0xfffffff7
	NV_WRITE32(sor->base + reg * 4, val);
    96009b18:	b8206881 	str	w1, [x4, x0]
		sor_writel(sor, SOR_NV_PDISP_SOR_DP_SPARE0_0 + sor->portnum, r_val);
	}

	pr_debug("%s: exit\n", __func__);
}
    96009b1c:	d65f03c0 	ret

0000000096009b20 <sor_super_update>:

void sor_super_update(struct sor_data *sor)
{
	pr_debug("%s: entry\n", __func__);

	sor_writel(sor, SOR_NV_PDISP_SOR_SUPER_STATE0_0, 0);
    96009b20:	f9400400 	ldr	x0, [x0, #8]
    96009b24:	52800021 	mov	w1, #0x1                   	// #1
    96009b28:	b900041f 	str	wzr, [x0, #4]
    96009b2c:	b9000401 	str	w1, [x0, #4]
    96009b30:	b900041f 	str	wzr, [x0, #4]
	sor_writel(sor, SOR_NV_PDISP_SOR_SUPER_STATE0_0, 1);
	sor_writel(sor, SOR_NV_PDISP_SOR_SUPER_STATE0_0, 0);

	pr_debug("%s: exit\n", __func__);
}
    96009b34:	d65f03c0 	ret

0000000096009b38 <sor_update>:

void sor_update(struct sor_data *sor)
{
	pr_debug("%s: entry\n", __func__);

	sor_writel(sor, SOR_NV_PDISP_SOR_STATE0_0, 0);
    96009b38:	f9400400 	ldr	x0, [x0, #8]
    96009b3c:	52800021 	mov	w1, #0x1                   	// #1
    96009b40:	b9000c1f 	str	wzr, [x0, #12]
    96009b44:	b9000c01 	str	w1, [x0, #12]
    96009b48:	b9000c1f 	str	wzr, [x0, #12]
	sor_writel(sor, SOR_NV_PDISP_SOR_STATE0_0, 1);
	sor_writel(sor, SOR_NV_PDISP_SOR_STATE0_0, 0);

	pr_debug("%s: exit\n", __func__);
}
    96009b4c:	d65f03c0 	ret

0000000096009b50 <sor_enable_sor>:

	pr_debug("%s: exit\n", __func__);
}

void sor_enable_sor(struct sor_data *sor, bool enable)
{
    96009b50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96009b54:	910003fd 	mov	x29, sp
    96009b58:	a90153f3 	stp	x19, x20, [sp, #16]
	struct tegrabl_nvdisp *nvdisp = sor->nvdisp;
    96009b5c:	f9400014 	ldr	x20, [x0]
	uint32_t r_val;
	uint32_t enb = 0;
	pr_debug("%s: entry\n", __func__);

	r_val = nvdisp_readl(sor->nvdisp, DISP_DISP_WIN_OPTIONS);
	switch (sor->instance) {
    96009b60:	b9401002 	ldr	w2, [x0, #16]
{
    96009b64:	f90013f5 	str	x21, [sp, #32]
    96009b68:	12001c35 	and	w21, w1, #0xff
	r_val = nvdisp_readl(sor->nvdisp, DISP_DISP_WIN_OPTIONS);
    96009b6c:	f9400681 	ldr	x1, [x20, #8]
    96009b70:	b9500833 	ldr	w19, [x1, #4104]
	switch (sor->instance) {
    96009b74:	34000142 	cbz	w2, 96009b9c <sor_enable_sor+0x4c>
    96009b78:	7100045f 	cmp	w2, #0x1
    96009b7c:	540002e0 	b.eq	96009bd8 <sor_enable_sor+0x88>  // b.none
	case 3:
		enb = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_WIN_OPTIONS, SOR3_ENABLE, ENABLE, r_val);
		break;
#endif
	default:
		pr_warn("%s: invalid sor_num:%d\n", __func__, sor->instance);
    96009b80:	f0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    96009b84:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009b88:	91124421 	add	x1, x1, #0x491
    96009b8c:	9113a400 	add	x0, x0, #0x4e9
    96009b90:	940062b8 	bl	96022670 <tegrabl_printf>
	uint32_t enb = 0;
    96009b94:	52800000 	mov	w0, #0x0                   	// #0
    96009b98:	14000002 	b	96009ba0 <sor_enable_sor+0x50>
		enb = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_WIN_OPTIONS, SOR_ENABLE, ENABLE, r_val);
    96009b9c:	32070260 	orr	w0, w19, #0x2000000
	}

	if (nvdisp->type == DISPLAY_OUT_HDMI) {
    96009ba0:	b9403a81 	ldr	w1, [x20, #56]
    96009ba4:	7100043f 	cmp	w1, #0x1
    96009ba8:	54000041 	b.ne	96009bb0 <sor_enable_sor+0x60>  // b.any
		enb |= NV_DRF_DEF(DC, DISP_DISP_WIN_OPTIONS, SOR1_TIMING_CYA, HDMI);
    96009bac:	32050000 	orr	w0, w0, #0x8000000
	}

	r_val = enable ? r_val | enb : r_val & ~enb;
    96009bb0:	2a130001 	orr	w1, w0, w19
    96009bb4:	710002bf 	cmp	w21, #0x0
    96009bb8:	0a200260 	bic	w0, w19, w0
	nvdisp_writel(nvdisp, DISP_DISP_WIN_OPTIONS, r_val);

	pr_debug("%s: exit\n", __func__);
}
    96009bbc:	f94013f5 	ldr	x21, [sp, #32]
	r_val = enable ? r_val | enb : r_val & ~enb;
    96009bc0:	1a810000 	csel	w0, w0, w1, eq  // eq = none
	nvdisp_writel(nvdisp, DISP_DISP_WIN_OPTIONS, r_val);
    96009bc4:	f9400681 	ldr	x1, [x20, #8]
}
    96009bc8:	a94153f3 	ldp	x19, x20, [sp, #16]
	nvdisp_writel(nvdisp, DISP_DISP_WIN_OPTIONS, r_val);
    96009bcc:	b9100820 	str	w0, [x1, #4104]
}
    96009bd0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96009bd4:	d65f03c0 	ret
		enb = NV_FLD_SET_DRF_DEF(DC, DISP_DISP_WIN_OPTIONS, SOR1_ENABLE, ENABLE, r_val);
    96009bd8:	32060260 	orr	w0, w19, #0x4000000
		break;
    96009bdc:	17fffff1 	b	96009ba0 <sor_enable_sor+0x50>

0000000096009be0 <sor_config_xbar>:

	pr_debug("%s: exit\n", __func__);
}

void sor_config_xbar(struct sor_data *sor)
{
    96009be0:	91006005 	add	x5, x0, #0x18
	uint32_t i = 0;

	pr_debug("%s: entry\n", __func__);

	mask = (NV_SOR_XBAR_BYPASS_MASK | NV_SOR_XBAR_LINK_SWAP_MASK);
	for (i = 0, shift = 2; i < (sizeof(sor->xbar_ctrl) / sizeof(uint32_t));
    96009be4:	52800043 	mov	w3, #0x2                   	// #2
	mask = (NV_SOR_XBAR_BYPASS_MASK | NV_SOR_XBAR_LINK_SWAP_MASK);
    96009be8:	52800062 	mov	w2, #0x3                   	// #3
	uint32_t val = 0;
    96009bec:	52800001 	mov	w1, #0x0                   	// #0
		 shift += 3, i++) {
		mask |= NV_SOR_XBAR_LINK_XSEL_MASK << shift;
    96009bf0:	528000e6 	mov	w6, #0x7                   	// #7
    96009bf4:	1ac320c4 	lsl	w4, w6, w3
    96009bf8:	2a040042 	orr	w2, w2, w4
		val |= sor->xbar_ctrl[i] << shift;
    96009bfc:	b84044a4 	ldr	w4, [x5], #4
    96009c00:	1ac32084 	lsl	w4, w4, w3
		 shift += 3, i++) {
    96009c04:	11000c63 	add	w3, w3, #0x3
		val |= sor->xbar_ctrl[i] << shift;
    96009c08:	2a040021 	orr	w1, w1, w4
	for (i = 0, shift = 2; i < (sizeof(sor->xbar_ctrl) / sizeof(uint32_t));
    96009c0c:	7100447f 	cmp	w3, #0x11
    96009c10:	54ffff21 	b.ne	96009bf4 <sor_config_xbar+0x14>  // b.any
}

static inline void tegrabl_sor_write_field(struct sor_data *sor,
	uint32_t reg, uint32_t mask, uint32_t val)
{
	uint32_t reg_val = sor_readl(sor, reg);
    96009c14:	f9400400 	ldr	x0, [x0, #8]
	return NV_READ32(sor->base + reg * 4);
    96009c18:	b9412803 	ldr	w3, [x0, #296]
	reg_val &= ~mask;
    96009c1c:	0a220062 	bic	w2, w3, w2
	reg_val |= val;
    96009c20:	2a020021 	orr	w1, w1, w2
	NV_WRITE32(sor->base + reg * 4, val);
    96009c24:	b9012801 	str	w1, [x0, #296]
    96009c28:	b9012c1f 	str	wzr, [x0, #300]
	}
	tegrabl_sor_write_field(sor, SOR_NV_PDISP_SOR_XBAR_CTRL_0, mask, val);
	sor_writel(sor, SOR_NV_PDISP_SOR_XBAR_POL_0, 0);
}
    96009c2c:	d65f03c0 	ret

0000000096009c30 <sor_attach>:

void sor_attach(struct sor_data *sor)
{
    96009c30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96009c34:	910003fd 	mov	x29, sp
	const struct nvdisp_mode *nvdisp_mode = sor->nvdisp->mode;
    96009c38:	f9400005 	ldr	x5, [x0]
{
    96009c3c:	a90153f3 	stp	x19, x20, [sp, #16]
    96009c40:	52808014 	mov	w20, #0x400                 	// #1024
    96009c44:	aa0003f3 	mov	x19, x0
	r_val = NV_DRF_NUM(SOR_NV_PDISP, SOR_STATE1, ASY_OWNER, sor->nvdisp->instance + 1);
    96009c48:	b94000a2 	ldr	w2, [x5]
	if (sor->nvdisp->type == DISPLAY_OUT_HDMI) {
    96009c4c:	b94038a4 	ldr	w4, [x5, #56]
	r_val = NV_DRF_NUM(SOR_NV_PDISP, SOR_STATE1, ASY_OWNER, sor->nvdisp->instance + 1);
    96009c50:	11000442 	add	w2, w2, #0x1
	const struct nvdisp_mode *nvdisp_mode = sor->nvdisp->mode;
    96009c54:	f94024a1 	ldr	x1, [x5, #72]
	r_val = NV_DRF_NUM(SOR_NV_PDISP, SOR_STATE1, ASY_OWNER, sor->nvdisp->instance + 1);
    96009c58:	12000c42 	and	w2, w2, #0xf
		r_val |= NV_DRF_DEF(SOR_NV_PDISP, SOR_STATE1, ASY_PROTOCOL, SINGLE_TMDS_A);
    96009c5c:	7100049f 	cmp	w4, #0x1
    96009c60:	32180043 	orr	w3, w2, #0x100
    96009c64:	32150042 	orr	w2, w2, #0x800
    96009c68:	1a831042 	csel	w2, w2, w3, ne  // ne = any
	r_val |= ((sor->nvdisp->depth * 3) > 18) ?
    96009c6c:	b94040a3 	ldr	w3, [x5, #64]
		NV_DRF_DEF(SOR_NV_PDISP, SOR_STATE1, ASY_PIXELDEPTH, BPP_24_444) :
    96009c70:	52a00084 	mov	w4, #0x40000               	// #262144
	r_val |= NV_DRF_DEF(SOR_NV_PDISP, SOR_STATE1, ASY_SUBOWNER, NONE) |
    96009c74:	321a0042 	orr	w2, w2, #0x40
	r_val |= ((sor->nvdisp->depth * 3) > 18) ?
    96009c78:	0b030463 	add	w3, w3, w3, lsl #1
		NV_DRF_DEF(SOR_NV_PDISP, SOR_STATE1, ASY_PIXELDEPTH, BPP_24_444) :
    96009c7c:	7100487f 	cmp	w3, #0x12
    96009c80:	52a00143 	mov	w3, #0xa0000               	// #655360
    96009c84:	1a848063 	csel	w3, w3, w4, hi  // hi = pmore
	sor_writel(sor, SOR_NV_PDISP_SOR_STATE1_0, r_val);
    96009c88:	f9400404 	ldr	x4, [x0, #8]
	r_val |= ((sor->nvdisp->depth * 3) > 18) ?
    96009c8c:	2a030042 	orr	w2, w2, w3
    96009c90:	b9001082 	str	w2, [x4, #16]
	vtotal = nvdisp_mode->v_sync_width + nvdisp_mode->v_back_porch +
    96009c94:	b9401c23 	ldr	w3, [x1, #28]
    96009c98:	b9401422 	ldr	w2, [x1, #20]
    96009c9c:	29451827 	ldp	w7, w6, [x1, #40]
    96009ca0:	0b030042 	add	w2, w2, w3
    96009ca4:	b9402423 	ldr	w3, [x1, #36]
    96009ca8:	0b060063 	add	w3, w3, w6
	htotal = nvdisp_mode->h_sync_width + nvdisp_mode->h_back_porch +
    96009cac:	b9401826 	ldr	w6, [x1, #24]
	vtotal = nvdisp_mode->v_sync_width + nvdisp_mode->v_back_porch +
    96009cb0:	0b030042 	add	w2, w2, w3
	htotal = nvdisp_mode->h_sync_width + nvdisp_mode->h_back_porch +
    96009cb4:	b9401023 	ldr	w3, [x1, #16]
    96009cb8:	0b060063 	add	w3, w3, w6
    96009cbc:	b9402026 	ldr	w6, [x1, #32]
	r_val = NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE1, VTOTAL, vtotal) |
    96009cc0:	53103842 	ubfiz	w2, w2, #16, #15
	htotal = nvdisp_mode->h_sync_width + nvdisp_mode->h_back_porch +
    96009cc4:	0b0700c6 	add	w6, w6, w7
    96009cc8:	0b060063 	add	w3, w3, w6
		NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE1, HTOTAL, htotal);
    96009ccc:	12003863 	and	w3, w3, #0x7fff
	r_val = NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE1, VTOTAL, vtotal) |
    96009cd0:	2a030042 	orr	w2, w2, w3
	sor_writel(sor, SOR_NV_PDISP_HEAD_STATE1_0 + sor->nvdisp->instance, r_val);
    96009cd4:	b94000a3 	ldr	w3, [x5]
    96009cd8:	11055063 	add	w3, w3, #0x154
    96009cdc:	531e7463 	lsl	w3, w3, #2
    96009ce0:	b8236882 	str	w2, [x4, x3]
	vsync_end = nvdisp_mode->v_sync_width - 1;
    96009ce4:	29420823 	ldp	w3, w2, [x1, #16]
    96009ce8:	51000442 	sub	w2, w2, #0x1
	hsync_end = nvdisp_mode->h_sync_width - 1;
    96009cec:	51000463 	sub	w3, w3, #0x1
		NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE2, HSYNC_END, hsync_end);
    96009cf0:	12003866 	and	w6, w3, #0x7fff
	r_val = NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE2, VSYNC_END, vsync_end) |
    96009cf4:	53103847 	ubfiz	w7, w2, #16, #15
    96009cf8:	2a0600e7 	orr	w7, w7, w6
	sor_writel(sor, SOR_NV_PDISP_HEAD_STATE2_0 + sor->nvdisp->instance, r_val);
    96009cfc:	b94000a6 	ldr	w6, [x5]
    96009d00:	11055cc6 	add	w6, w6, #0x157
    96009d04:	531e74c6 	lsl	w6, w6, #2
    96009d08:	b8266887 	str	w7, [x4, x6]
	vblank_end = vsync_end + nvdisp_mode->v_back_porch;
    96009d0c:	b9401c26 	ldr	w6, [x1, #28]
    96009d10:	0b060042 	add	w2, w2, w6
	hblank_end = hsync_end + nvdisp_mode->h_back_porch;
    96009d14:	b9401826 	ldr	w6, [x1, #24]
    96009d18:	0b060063 	add	w3, w3, w6
	r_val = NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE3, VBLANK_END, vblank_end) |
    96009d1c:	53103847 	ubfiz	w7, w2, #16, #15
		NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE3, HBLANK_END, hblank_end);
    96009d20:	12003866 	and	w6, w3, #0x7fff
	r_val = NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE3, VBLANK_END, vblank_end) |
    96009d24:	2a0600e7 	orr	w7, w7, w6
	sor_writel(sor, SOR_NV_PDISP_HEAD_STATE3_0 + sor->nvdisp->instance, r_val);
    96009d28:	b94000a6 	ldr	w6, [x5]
    96009d2c:	110568c6 	add	w6, w6, #0x15a
    96009d30:	531e74c6 	lsl	w6, w6, #2
    96009d34:	b8266887 	str	w7, [x4, x6]
	vblank_start = vblank_end + nvdisp_mode->v_active;
    96009d38:	b9402426 	ldr	w6, [x1, #36]
	hblank_start = hblank_end + nvdisp_mode->h_active;
    96009d3c:	b9402021 	ldr	w1, [x1, #32]
	vblank_start = vblank_end + nvdisp_mode->v_active;
    96009d40:	0b060042 	add	w2, w2, w6
	hblank_start = hblank_end + nvdisp_mode->h_active;
    96009d44:	0b010063 	add	w3, w3, w1
	sor_writel(sor, SOR_NV_PDISP_HEAD_STATE4_0 + sor->nvdisp->instance, r_val);
    96009d48:	b94000a1 	ldr	w1, [x5]
		NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE4, HBLANK_START, hblank_start);
    96009d4c:	12003863 	and	w3, w3, #0x7fff
	r_val = NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE4, VBLANK_START, vblank_start) |
    96009d50:	53103842 	ubfiz	w2, w2, #16, #15
	sor_writel(sor, SOR_NV_PDISP_HEAD_STATE4_0 + sor->nvdisp->instance, r_val);
    96009d54:	11057421 	add	w1, w1, #0x15d
	r_val = NV_DRF_NUM(SOR_NV_PDISP, HEAD_STATE4, VBLANK_START, vblank_start) |
    96009d58:	2a030042 	orr	w2, w2, w3
	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_PWM_CTL_0,
    96009d5c:	52800003 	mov	w3, #0x0                   	// #0
    96009d60:	531e7421 	lsl	w1, w1, #2
    96009d64:	b8216882 	str	w2, [x4, x1]
    96009d68:	52800022 	mov	w2, #0x1                   	// #1
	sor_writel(sor, SOR_NV_PDISP_HEAD_STATE5_0 + sor->nvdisp->instance, 0x1);
    96009d6c:	b94000a1 	ldr	w1, [x5]
	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_PWM_CTL_0,
    96009d70:	52807d05 	mov	w5, #0x3e8                 	// #1000
	sor_writel(sor, SOR_NV_PDISP_HEAD_STATE5_0 + sor->nvdisp->instance, 0x1);
    96009d74:	11058021 	add	w1, w1, #0x160
    96009d78:	531e7421 	lsl	w1, w1, #2
    96009d7c:	b8216882 	str	w2, [x4, x1]
	r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_PWM_CTL, SETTING_NEW, TRIGGER, r_val);
    96009d80:	52808002 	mov	w2, #0x400                 	// #1024
    96009d84:	72b00002 	movk	w2, #0x8000, lsl #16
	return NV_READ32(sor->base + reg * 4);
    96009d88:	b9406c81 	ldr	w1, [x4, #108]
	NV_WRITE32(sor->base + reg * 4, val);
    96009d8c:	b900c894 	str	w20, [x4, #200]
	return NV_READ32(sor->base + reg * 4);
    96009d90:	b940cc81 	ldr	w1, [x4, #204]
	r_val = NV_FLD_SET_DRF_NUM(SOR_NV_PDISP, SOR_PWM_CTL, DUTY_CYCLE, pwm_dutycycle, r_val);
    96009d94:	12081c21 	and	w1, w1, #0xff000000
	r_val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_PWM_CTL, SETTING_NEW, TRIGGER, r_val);
    96009d98:	2a020021 	orr	w1, w1, w2
	NV_WRITE32(sor->base + reg * 4, val);
    96009d9c:	b900cc81 	str	w1, [x4, #204]
	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_PWM_CTL_0,
    96009da0:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
    96009da4:	52800c84 	mov	w4, #0x64                  	// #100
    96009da8:	52800661 	mov	w1, #0x33                  	// #51
    96009dac:	97fffdd9 	bl	96009510 <sor_poll_register>
	sor_update(sor);
    96009db0:	aa1303e0 	mov	x0, x19
    96009db4:	97ffff61 	bl	96009b38 <sor_update>
	pr_debug("%s: entry\n", __func__);

	sor_config_panel(sor, false);

	sor_update(sor);
    96009db8:	aa1303e0 	mov	x0, x19
    96009dbc:	97ffff5f 	bl	96009b38 <sor_update>

	/* Awake request */
	sor_writel(sor, SOR_NV_PDISP_SOR_SUPER_STATE1_0,
    96009dc0:	f9400660 	ldr	x0, [x19, #8]
    96009dc4:	52800101 	mov	w1, #0x8                   	// #8
    96009dc8:	b9000801 	str	w1, [x0, #8]
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ASY_HEAD_OPMODE, SLEEP) |
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ASY_ORMODE, SAFE) |
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ATTACHED, YES));

	sor_super_update(sor);
    96009dcc:	aa1303e0 	mov	x0, x19
    96009dd0:	97ffff54 	bl	96009b20 <sor_super_update>

	if (sor_poll_register(sor, SOR_NV_PDISP_SOR_TEST_0, SOR_NV_PDISP_SOR_TEST_0_ATTACHED_FIELD,
    96009dd4:	5290d405 	mov	w5, #0x86a0                	// #34464
    96009dd8:	52800c84 	mov	w4, #0x64                  	// #100
    96009ddc:	72a00025 	movk	w5, #0x1, lsl #16
    96009de0:	2a1403e3 	mov	w3, w20
    96009de4:	2a1403e2 	mov	w2, w20
    96009de8:	528002c1 	mov	w1, #0x16                  	// #22
    96009dec:	aa1303e0 	mov	x0, x19
    96009df0:	97fffdc8 	bl	96009510 <sor_poll_register>
    96009df4:	34000080 	cbz	w0, 96009e04 <sor_attach+0x1d4>
						  NV_DRF_DEF(SOR_NV_PDISP, SOR_TEST, ATTACHED, TRUE),
						  100, SOR_ATTACH_TIMEOUT_MS)) {
		pr_info("nvdisp timeout waiting for SOR ATTACHED\n");
    96009df8:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009dfc:	91128000 	add	x0, x0, #0x4a0
    96009e00:	9400621c 	bl	96022670 <tegrabl_printf>
	}

	sor_writel(sor, SOR_NV_PDISP_SOR_SUPER_STATE1_0,
    96009e04:	f9400660 	ldr	x0, [x19, #8]
    96009e08:	52800181 	mov	w1, #0xc                   	// #12
    96009e0c:	b9000801 	str	w1, [x0, #8]
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ASY_HEAD_OPMODE, SLEEP) |
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ASY_ORMODE, NORMAL) |
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ATTACHED, YES));

	sor_super_update(sor);
    96009e10:	aa1303e0 	mov	x0, x19
    96009e14:	97ffff43 	bl	96009b20 <sor_super_update>
	r_val = nvdisp_readl(nvdisp, CMD_DISPLAY_COMMAND);
    96009e18:	f9400260 	ldr	x0, [x19]
    96009e1c:	f9400401 	ldr	x1, [x0, #8]
    96009e20:	b940c820 	ldr	w0, [x1, #200]
	r_val = NV_FLD_SET_DRF_DEF(DC, CMD_DISPLAY_COMMAND, DISPLAY_CTRL_MODE, C_DISPLAY, r_val);
    96009e24:	12197400 	and	w0, w0, #0xffffff9f
    96009e28:	321b0000 	orr	w0, w0, #0x20
	nvdisp_writel(nvdisp, CMD_DISPLAY_COMMAND, r_val);
    96009e2c:	b900c820 	str	w0, [x1, #200]

	sor_enable_dc(sor);

	sor_enable_sor(sor, true);
    96009e30:	aa1303e0 	mov	x0, x19
    96009e34:	52800021 	mov	w1, #0x1                   	// #1
    96009e38:	97ffff46 	bl	96009b50 <sor_enable_sor>

	sor_writel(sor, SOR_NV_PDISP_SOR_SUPER_STATE1_0,
    96009e3c:	f9400660 	ldr	x0, [x19, #8]
    96009e40:	528001c1 	mov	w1, #0xe                   	// #14
    96009e44:	b9000801 	str	w1, [x0, #8]
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ASY_HEAD_OPMODE, AWAKE) |
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ASY_ORMODE, NORMAL) |
	   NV_DRF_DEF(SOR_NV_PDISP, SOR_SUPER_STATE1, ATTACHED, YES));

	sor_super_update(sor);
    96009e48:	aa1303e0 	mov	x0, x19

	pr_debug("%s: exit\n", __func__);
}
    96009e4c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96009e50:	a8c27bfd 	ldp	x29, x30, [sp], #32
	sor_super_update(sor);
    96009e54:	17ffff33 	b	96009b20 <sor_super_update>

0000000096009e58 <sor_config_prod_settings>:
	uint32_t i, j;
	struct prod_settings *prod_settings;
	struct prod_tuple prod_tuple;
	uint32_t val;

	if (!prod_list) {
    96009e58:	b5000081 	cbnz	x1, 96009e68 <sor_config_prod_settings+0x10>
		pr_error("prod settings not found!\n");
    96009e5c:	f0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96009e60:	91133000 	add	x0, x0, #0x4cc
    96009e64:	14006203 	b	96022670 <tegrabl_printf>
    96009e68:	b9400825 	ldr	w5, [x1, #8]
		return;
	}

	prod_settings = prod_list->prod_settings;
	for (i = 0; i < prod_list->num; i++) {
    96009e6c:	d2800004 	mov	x4, #0x0                   	// #0
    96009e70:	d37ceca5 	lsl	x5, x5, #4
    96009e74:	eb0400bf 	cmp	x5, x4
    96009e78:	54000041 	b.ne	96009e80 <sor_config_prod_settings+0x28>  // b.any
			val = ((val & ~prod_tuple.mask) | (prod_tuple.val & prod_tuple.mask));
				/*the above logic is based on 1-style masking*/
			sor_writel(sor, prod_tuple.addr / 4, val);
		}
	}
}
    96009e7c:	d65f03c0 	ret
		if (node[i].clk == 0) { /*single entry in prod_list*/
    96009e80:	b8646846 	ldr	w6, [x2, x4]
    96009e84:	34000306 	cbz	w6, 96009ee4 <sor_config_prod_settings+0x8c>
    96009e88:	91004087 	add	x7, x4, #0x10
		if (clk <= node[i].clk) {
    96009e8c:	6b0300df 	cmp	w6, w3
    96009e90:	540002a2 	b.cs	96009ee4 <sor_config_prod_settings+0x8c>  // b.hs, b.nlast
    96009e94:	aa0703e4 	mov	x4, x7
    96009e98:	17fffff7 	b	96009e74 <sor_config_prod_settings+0x1c>
			prod_tuple = prod_settings[i].prod_tuple[j];
    96009e9c:	9ba87c41 	umull	x1, w2, w8
    96009ea0:	f9400083 	ldr	x3, [x4]
	return NV_READ32(sor->base + reg * 4);
    96009ea4:	f9400405 	ldr	x5, [x0, #8]
		for (j = 0; j < prod_list->prod_settings[i].count; j++) {
    96009ea8:	11000442 	add	w2, w2, #0x1
			prod_tuple = prod_settings[i].prod_tuple[j];
    96009eac:	8b010067 	add	x7, x3, x1
    96009eb0:	b8616863 	ldr	w3, [x3, x1]
			val = ((val & ~prod_tuple.mask) | (prod_tuple.val & prod_tuple.mask));
    96009eb4:	b94008e1 	ldr	w1, [x7, #8]
    96009eb8:	927e7463 	and	x3, x3, #0xfffffffc
    96009ebc:	b94004e7 	ldr	w7, [x7, #4]
    96009ec0:	b86368a6 	ldr	w6, [x5, x3]
    96009ec4:	4a0100c1 	eor	w1, w6, w1
    96009ec8:	0a070021 	and	w1, w1, w7
    96009ecc:	4a060021 	eor	w1, w1, w6
	NV_WRITE32(sor->base + reg * 4, val);
    96009ed0:	b82368a1 	str	w1, [x5, x3]
		for (j = 0; j < prod_list->prod_settings[i].count; j++) {
    96009ed4:	b9400881 	ldr	w1, [x4, #8]
    96009ed8:	6b02003f 	cmp	w1, w2
    96009edc:	54fffe08 	b.hi	96009e9c <sor_config_prod_settings+0x44>  // b.pmore
    96009ee0:	17ffffe7 	b	96009e7c <sor_config_prod_settings+0x24>
	prod_settings = prod_list->prod_settings;
    96009ee4:	f9400021 	ldr	x1, [x1]
    96009ee8:	52800002 	mov	w2, #0x0                   	// #0
			prod_tuple = prod_settings[i].prod_tuple[j];
    96009eec:	52800188 	mov	w8, #0xc                   	// #12
		for (j = 0; j < prod_list->prod_settings[i].count; j++) {
    96009ef0:	8b040024 	add	x4, x1, x4
    96009ef4:	17fffff8 	b	96009ed4 <sor_config_prod_settings+0x7c>

0000000096009ef8 <sor_dump_registers>:
	pr_debug("sor register dump\n");
	for (addr = sor->base; (void *)addr <= sor->base + 0x5E8; addr += 4) {
		pr_debug("%p: %08x %08x %08x %08x\n", addr, *(addr), *(addr + 1), *(addr + 2), *(addr + 3));
	}
	pr_debug("\n");
}
    96009ef8:	d65f03c0 	ret

0000000096009efc <tegrabl_sor_tpg>:
#include <tegrabl_addressmap.h>
#include <arsor1.h>
#include <ardisplay.h>

void tegrabl_sor_tpg(struct sor_data *sor, uint32_t tp, uint32_t n_lanes)
{
    96009efc:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    96009f00:	910003fd 	mov	x29, sp
	uint32_t const tbl[][2] = {
    96009f04:	9100e3a5 	add	x5, x29, #0x38
{
    96009f08:	a90153f3 	stp	x19, x20, [sp, #16]
    96009f0c:	2a0103f3 	mov	w19, w1
    96009f10:	f90013f5 	str	x21, [sp, #32]
    96009f14:	aa0003f4 	mov	x20, x0
	uint32_t const tbl[][2] = {
    96009f18:	d0000181 	adrp	x1, 9603b000 <tt_level+0x328>
    96009f1c:	aa0503e0 	mov	x0, x5
    96009f20:	912da021 	add	x1, x1, #0xb68
{
    96009f24:	2a0203f5 	mov	w21, w2
	uint32_t const tbl[][2] = {
    96009f28:	d2800902 	mov	x2, #0x48                  	// #72
    96009f2c:	94007ffe 	bl	96029f24 <memcpy>
    96009f30:	aa0003e5 	mov	x5, x0
	uint32_t val = 0;

	for (cnt = 0; cnt < n_lanes; cnt++) {
		uint32_t tp_shift = NV_SOR_DP_TPG_LANE1_PATTERN_SHIFT * cnt;
		val |= tp << tp_shift |
			tbl[tp][0] << (tp_shift +
    96009f34:	d37d7e66 	ubfiz	x6, x19, #3, #32
			NV_SOR_DP_TPG_LANE0_CHANNELCODING_SHIFT) |
			tbl[tp][1] << (tp_shift +
    96009f38:	9100f3a7 	add	x7, x29, #0x3c
	uint32_t val = 0;
    96009f3c:	52800000 	mov	w0, #0x0                   	// #0
	for (cnt = 0; cnt < n_lanes; cnt++) {
    96009f40:	52800003 	mov	w3, #0x0                   	// #0
    96009f44:	6b15007f 	cmp	w3, w21
    96009f48:	540000e1 	b.ne	96009f64 <tegrabl_sor_tpg+0x68>  // b.any
			NV_SOR_DP_TPG_LANE0_SCRAMBLEREN_SHIFT);
	}

	sor_writel(sor, SOR_NV_PDISP_SOR_DP_TPG_0, val);
    96009f4c:	f9400681 	ldr	x1, [x20, #8]
}
    96009f50:	a94153f3 	ldp	x19, x20, [sp, #16]
    96009f54:	f94013f5 	ldr	x21, [sp, #32]
    96009f58:	b901b420 	str	w0, [x1, #436]
    96009f5c:	a8c87bfd 	ldp	x29, x30, [sp], #128
    96009f60:	d65f03c0 	ret
		uint32_t tp_shift = NV_SOR_DP_TPG_LANE1_PATTERN_SHIFT * cnt;
    96009f64:	531d7062 	lsl	w2, w3, #3
	for (cnt = 0; cnt < n_lanes; cnt++) {
    96009f68:	11000463 	add	w3, w3, #0x1
			tbl[tp][0] << (tp_shift +
    96009f6c:	11001844 	add	w4, w2, #0x6
		val |= tp << tp_shift |
    96009f70:	1ac22261 	lsl	w1, w19, w2
    96009f74:	2a000020 	orr	w0, w1, w0
			tbl[tp][0] << (tp_shift +
    96009f78:	b86668a1 	ldr	w1, [x5, x6]
			tbl[tp][1] << (tp_shift +
    96009f7c:	11001042 	add	w2, w2, #0x4
			tbl[tp][0] << (tp_shift +
    96009f80:	1ac42021 	lsl	w1, w1, w4
			tbl[tp][1] << (tp_shift +
    96009f84:	b86668e4 	ldr	w4, [x7, x6]
    96009f88:	1ac22082 	lsl	w2, w4, w2
		val |= tp << tp_shift |
    96009f8c:	2a020021 	orr	w1, w1, w2
    96009f90:	2a000020 	orr	w0, w1, w0
    96009f94:	17ffffec 	b	96009f44 <tegrabl_sor_tpg+0x48>

0000000096009f98 <tegrabl_sor_port_enable>:

void tegrabl_sor_port_enable(struct sor_data *sor, bool enb)
{
	uint32_t val = 0;

	val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum);
    96009f98:	39405002 	ldrb	w2, [x0, #20]
	if (enb)
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, ENABLE, YES,
    96009f9c:	72001c3f 	tst	w1, #0xff
	return NV_READ32(sor->base + reg * 4);
    96009fa0:	f9400403 	ldr	x3, [x0, #8]
	val = sor_readl(sor, SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum);
    96009fa4:	11013042 	add	w2, w2, #0x4c
    96009fa8:	d37e2042 	ubfiz	x2, x2, #2, #9
    96009fac:	b8626860 	ldr	w0, [x3, x2]
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, ENABLE, YES,
    96009fb0:	32000004 	orr	w4, w0, #0x1
    96009fb4:	121f7800 	and	w0, w0, #0xfffffffe
    96009fb8:	1a840000 	csel	w0, w0, w4, eq  // eq = none
	NV_WRITE32(sor->base + reg * 4, val);
    96009fbc:	b8226860 	str	w0, [x3, x2]
								 val);
	else
		val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_LINKCTL0, ENABLE, NO,
								 val);
	sor_writel(sor, (SOR_NV_PDISP_SOR_DP_LINKCTL0_0 + sor->portnum), val);
}
    96009fc0:	d65f03c0 	ret

0000000096009fc4 <tegrabl_sor_enable_dp>:
	sor_writel_def(SOR_PLL1, TMDS_TERM, ENABLE, val);
	tegrabl_udelay(20);
}

void tegrabl_sor_enable_dp(struct sor_data *sor)
{
    96009fc4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96009fc8:	910003fd 	mov	x29, sp
    96009fcc:	f9000bf3 	str	x19, [sp, #16]
    96009fd0:	aa0003f3 	mov	x19, x0
	sor_cal(sor);
    96009fd4:	97fffe9a 	bl	96009a3c <sor_cal>
	sor_writel_def(SOR_PLL2, AUX2, OVERRIDE_POWERDOWN, val);
    96009fd8:	f9400660 	ldr	x0, [x19, #8]
	return NV_READ32(sor->base + reg * 4);
    96009fdc:	b9459401 	ldr	w1, [x0, #1428]
    96009fe0:	120d7821 	and	w1, w1, #0xfffbffff
	NV_WRITE32(sor->base + reg * 4, val);
    96009fe4:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    96009fe8:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX1, SEQ_PLLCAPPD_OVERRIDE, val);
    96009fec:	320f0021 	orr	w1, w1, #0x20000
	NV_WRITE32(sor->base + reg * 4, val);
    96009ff0:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    96009ff4:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX7, PORT_POWERDOWN_ENABLE, val);/* PDPORT */
    96009ff8:	32090021 	orr	w1, w1, #0x800000
	NV_WRITE32(sor->base + reg * 4, val);
    96009ffc:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    9600a000:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX6, BANDGAP_POWERDOWN_ENABLE, val);/* PDBG */
    9600a004:	320a0021 	orr	w1, w1, #0x400000
	NV_WRITE32(sor->base + reg * 4, val);
    9600a008:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    9600a00c:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX8, SEQ_PLLCAPPD_ENFORCE_ENABLE, val);/*PLLCAPD*/
    9600a010:	32080021 	orr	w1, w1, #0x1000000
	NV_WRITE32(sor->base + reg * 4, val);
    9600a014:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    9600a018:	b9458c01 	ldr	w1, [x0, #1420]
	sor_writel_def(SOR_PLL0, PWR, OFF, val);
    9600a01c:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32(sor->base + reg * 4, val);
    9600a020:	b9058c01 	str	w1, [x0, #1420]
	return NV_READ32(sor->base + reg * 4);
    9600a024:	b9458c01 	ldr	w1, [x0, #1420]
	sor_writel_def(SOR_PLL0, VCOPD, ASSERT, val);
    9600a028:	321e0021 	orr	w1, w1, #0x4
	NV_WRITE32(sor->base + reg * 4, val);
    9600a02c:	b9058c01 	str	w1, [x0, #1420]
	sor_pad_cal_power(sor, false);
    9600a030:	52800001 	mov	w1, #0x0                   	// #0
    9600a034:	aa1303e0 	mov	x0, x19
    9600a038:	97fffe11 	bl	9600987c <sor_pad_cal_power>
	tegrabl_udelay(100); /* sleep > 5us */
    9600a03c:	d2800c80 	mov	x0, #0x64                  	// #100
    9600a040:	94005719 	bl	9601fca4 <tegrabl_udelay>
	sor_writel_def(SOR_PLL2, AUX6, BANDGAP_POWERDOWN_DISABLE, val);
    9600a044:	f9400661 	ldr	x1, [x19, #8]
	return NV_READ32(sor->base + reg * 4);
    9600a048:	b9459420 	ldr	w0, [x1, #1428]
    9600a04c:	12097800 	and	w0, w0, #0xffbfffff
	NV_WRITE32(sor->base + reg * 4, val);
    9600a050:	b9059420 	str	w0, [x1, #1428]
	tegrabl_udelay(150);
    9600a054:	d28012c0 	mov	x0, #0x96                  	// #150
    9600a058:	94005713 	bl	9601fca4 <tegrabl_udelay>
	sor_writel_def(SOR_PLL0, PWR, ON, val);/* PDPLL */
    9600a05c:	f9400660 	ldr	x0, [x19, #8]
	return NV_READ32(sor->base + reg * 4);
    9600a060:	b9458c01 	ldr	w1, [x0, #1420]
    9600a064:	121f7821 	and	w1, w1, #0xfffffffe
	NV_WRITE32(sor->base + reg * 4, val);
    9600a068:	b9058c01 	str	w1, [x0, #1420]
	return NV_READ32(sor->base + reg * 4);
    9600a06c:	b9458c01 	ldr	w1, [x0, #1420]
	sor_writel_def(SOR_PLL0, VCOPD, RESCIND, val);/* PLLVCOPD */
    9600a070:	121d7821 	and	w1, w1, #0xfffffffb
	NV_WRITE32(sor->base + reg * 4, val);
    9600a074:	b9058c01 	str	w1, [x0, #1420]
	return NV_READ32(sor->base + reg * 4);
    9600a078:	b9459401 	ldr	w1, [x0, #1428]
	sor_writel_def(SOR_PLL2, AUX8, SEQ_PLLCAPPD_ENFORCE_DISABLE, val);
    9600a07c:	12077821 	and	w1, w1, #0xfeffffff
	NV_WRITE32(sor->base + reg * 4, val);
    9600a080:	b9059401 	str	w1, [x0, #1428]
	tegrabl_udelay(1000);
    9600a084:	d2807d00 	mov	x0, #0x3e8                 	// #1000
    9600a088:	94005707 	bl	9601fca4 <tegrabl_udelay>
	sor_writel_def(SOR_PLL2, AUX7, PORT_POWERDOWN_DISABLE, val);/* PDPORT */
    9600a08c:	f9400660 	ldr	x0, [x19, #8]
	return NV_READ32(sor->base + reg * 4);
    9600a090:	b9459401 	ldr	w1, [x0, #1428]
    9600a094:	12087821 	and	w1, w1, #0xff7fffff
	NV_WRITE32(sor->base + reg * 4, val);
    9600a098:	b9059401 	str	w1, [x0, #1428]
	return NV_READ32(sor->base + reg * 4);
    9600a09c:	b9459001 	ldr	w1, [x0, #1424]
	sor_writel_def(SOR_PLL1, TMDS_TERM, ENABLE, val);
    9600a0a0:	32180021 	orr	w1, w1, #0x100
	NV_WRITE32(sor->base + reg * 4, val);
    9600a0a4:	b9059001 	str	w1, [x0, #1424]
	tegrabl_udelay(20);
    9600a0a8:	d2800280 	mov	x0, #0x14                  	// #20
    9600a0ac:	940056fe 	bl	9601fca4 <tegrabl_udelay>
	sor_dp_pad_power_up(sor);
	sor_power_lanes(sor, sor->link_cfg->lane_count, true);
    9600a0b0:	f9401a60 	ldr	x0, [x19, #48]
    9600a0b4:	52800022 	mov	w2, #0x1                   	// #1
    9600a0b8:	39404401 	ldrb	w1, [x0, #17]
    9600a0bc:	aa1303e0 	mov	x0, x19
}
    9600a0c0:	f9400bf3 	ldr	x19, [sp, #16]
    9600a0c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
	sor_power_lanes(sor, sor->link_cfg->lane_count, true);
    9600a0c8:	17fffd54 	b	96009618 <sor_power_lanes>

000000009600a0cc <tegrabl_sor_precharge_lanes>:

	pr_debug("%s() exit\n", __func__);
}

void tegrabl_sor_precharge_lanes(struct sor_data *sor)
{
    9600a0cc:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600a0d0:	910003fd 	mov	x29, sp
    9600a0d4:	a90153f3 	stp	x19, x20, [sp, #16]
    9600a0d8:	aa0003f4 	mov	x20, x0
    9600a0dc:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600a0e0:	91006295 	add	x21, x20, #0x18
    9600a0e4:	a90363f7 	stp	x23, x24, [sp, #48]
			pr_error("dp: incorrect lane cnt\n");
    9600a0e8:	d0000197 	adrp	x23, 9603c000 <__func__.4414+0x9>
	return NV_READ32(sor->base + reg * 4);
    9600a0ec:	f9400681 	ldr	x1, [x20, #8]
		switch (index) {
    9600a0f0:	d0000198 	adrp	x24, 9603c000 <__func__.4414+0x9>
	val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum));
    9600a0f4:	39405000 	ldrb	w0, [x0, #20]
			pr_error("dp: incorrect lane cnt\n");
    9600a0f8:	910efef7 	add	x23, x23, #0x3bf
		switch (index) {
    9600a0fc:	9116c318 	add	x24, x24, #0x5b0
	val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum));
    9600a100:	1105a000 	add	w0, w0, #0x168
    9600a104:	d37e2400 	ubfiz	x0, x0, #2, #10
    9600a108:	b8606833 	ldr	w19, [x1, x0]
	const struct tegrabl_dp_link_config *cfg = sor->link_cfg;
	uint32_t val = 0;
	pr_debug("%s() entry\n", __func__);

	/* force lanes to output common mode voltage */
	sor_get_cm_tx_bitmap(sor, cfg->lane_count);
    9600a10c:	f9401a80 	ldr	x0, [x20, #48]
    9600a110:	39404416 	ldrb	w22, [x0, #17]
    9600a114:	8b364ab6 	add	x22, x21, w22, uxtw #2
	for (i = 0; i < lane_count; i++) {
    9600a118:	eb1502df 	cmp	x22, x21
    9600a11c:	54000281 	b.ne	9600a16c <tegrabl_sor_precharge_lanes+0xa0>  // b.any
	sor_writel(sor, (SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum), val);
    9600a120:	39405280 	ldrb	w0, [x20, #20]
	NV_WRITE32(sor->base + reg * 4, val);
    9600a124:	f9400681 	ldr	x1, [x20, #8]
    9600a128:	1105a000 	add	w0, w0, #0x168
    9600a12c:	d37e2400 	ubfiz	x0, x0, #2, #10
    9600a130:	b8206833 	str	w19, [x1, x0]

	/* precharge for atleast 10us */
	tegrabl_udelay(100);
    9600a134:	d2800c80 	mov	x0, #0x64                  	// #100
    9600a138:	940056db 	bl	9601fca4 <tegrabl_udelay>

	/* fallback to normal operation */
	val = sor_readl(sor, (SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum));
    9600a13c:	39405280 	ldrb	w0, [x20, #20]
	return NV_READ32(sor->base + reg * 4);
    9600a140:	f9400682 	ldr	x2, [x20, #8]
    9600a144:	1105a000 	add	w0, w0, #0x168
	val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, COMMONMODE_TXD_2_DP_TXD_0, DISABLE, val);
	val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, COMMONMODE_TXD_3_DP_TXD_3, DISABLE, val);
	sor_writel(sor, (SOR_NV_PDISP_SOR_DP_PADCTL0_0 + sor->portnum), val);

	pr_debug("%s() exit\n", __func__);
}
    9600a148:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600a14c:	d37e2400 	ubfiz	x0, x0, #2, #10
    9600a150:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600a154:	b8606841 	ldr	w1, [x2, x0]
    9600a158:	a94153f3 	ldp	x19, x20, [sp, #16]
	val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, COMMONMODE_TXD_3_DP_TXD_3, DISABLE, val);
    9600a15c:	12186c21 	and	w1, w1, #0xffffff0f
	NV_WRITE32(sor->base + reg * 4, val);
    9600a160:	b8206841 	str	w1, [x2, x0]
}
    9600a164:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600a168:	d65f03c0 	ret
		switch (index) {
    9600a16c:	b94002a0 	ldr	w0, [x21]
    9600a170:	71000c1f 	cmp	w0, #0x3
    9600a174:	540001c8 	b.hi	9600a1ac <tegrabl_sor_precharge_lanes+0xe0>  // b.pmore
    9600a178:	38604b00 	ldrb	w0, [x24, w0, uxtw]
    9600a17c:	10000061 	adr	x1, 9600a188 <tegrabl_sor_precharge_lanes+0xbc>
    9600a180:	8b208820 	add	x0, x1, w0, sxtb #2
    9600a184:	d61f0000 	br	x0
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, COMMONMODE_TXD_2_DP_TXD_0, ENABLE, val);
    9600a188:	321a0273 	orr	w19, w19, #0x40
    9600a18c:	910012b5 	add	x21, x21, #0x4
    9600a190:	17ffffe2 	b	9600a118 <tegrabl_sor_precharge_lanes+0x4c>
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, COMMONMODE_TXD_1_DP_TXD_1, ENABLE, val);
    9600a194:	321b0273 	orr	w19, w19, #0x20
    9600a198:	17fffffd 	b	9600a18c <tegrabl_sor_precharge_lanes+0xc0>
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, COMMONMODE_TXD_0_DP_TXD_2, ENABLE, val);
    9600a19c:	321c0273 	orr	w19, w19, #0x10
    9600a1a0:	17fffffb 	b	9600a18c <tegrabl_sor_precharge_lanes+0xc0>
			val = NV_FLD_SET_DRF_DEF(SOR_NV_PDISP, SOR_DP_PADCTL0, COMMONMODE_TXD_3_DP_TXD_3, ENABLE, val);
    9600a1a4:	32190273 	orr	w19, w19, #0x80
    9600a1a8:	17fffff9 	b	9600a18c <tegrabl_sor_precharge_lanes+0xc0>
			pr_error("dp: incorrect lane cnt\n");
    9600a1ac:	aa1703e0 	mov	x0, x23
    9600a1b0:	94006130 	bl	96022670 <tegrabl_printf>
    9600a1b4:	17fffff6 	b	9600a18c <tegrabl_sor_precharge_lanes+0xc0>

000000009600a1b8 <tegrabl_sor_detach>:
void tegrabl_sor_detach(struct sor_data *sor)
{
	/* not required in bootloader as Sor is already detached
	 * we can revisit this if required in some scenario
	 */
}
    9600a1b8:	d65f03c0 	ret

000000009600a1bc <parse_detailed_timing>:
}

static void parse_detailed_timing(const uint8_t *timing,
								  struct detailed_timing *detailed)
{
	detailed->pixel_clock = (timing[0x00] | timing[0x01] << 8) * 10000;
    9600a1bc:	79400002 	ldrh	w2, [x0]
    9600a1c0:	5284e203 	mov	w3, #0x2710                	// #10000
    9600a1c4:	1b037c42 	mul	w2, w2, w3
    9600a1c8:	b9000022 	str	w2, [x1]
	detailed->h_addr = timing[0x02] | ((timing[0x04] & 0xf0) << 4);
    9600a1cc:	39401002 	ldrb	w2, [x0, #4]
    9600a1d0:	39400803 	ldrb	w3, [x0, #2]
    9600a1d4:	531c6c42 	lsl	w2, w2, #4
    9600a1d8:	12180c42 	and	w2, w2, #0xf00
    9600a1dc:	2a030042 	orr	w2, w2, w3
    9600a1e0:	b9000422 	str	w2, [x1, #4]
	detailed->h_blank = timing[0x03] | ((timing[0x04] & 0x0f) << 8);
    9600a1e4:	39401002 	ldrb	w2, [x0, #4]
    9600a1e8:	39400c03 	ldrb	w3, [x0, #3]
    9600a1ec:	53180c42 	ubfiz	w2, w2, #8, #4
    9600a1f0:	2a030042 	orr	w2, w2, w3
    9600a1f4:	b9000822 	str	w2, [x1, #8]
	detailed->v_addr = timing[0x05] | ((timing[0x07] & 0xf0) << 4);
    9600a1f8:	39401c02 	ldrb	w2, [x0, #7]
    9600a1fc:	39401403 	ldrb	w3, [x0, #5]
    9600a200:	531c6c42 	lsl	w2, w2, #4
    9600a204:	12180c42 	and	w2, w2, #0xf00
    9600a208:	2a030042 	orr	w2, w2, w3
    9600a20c:	b9001422 	str	w2, [x1, #20]
	detailed->v_blank = timing[0x06] | ((timing[0x07] & 0x0f) << 8);
    9600a210:	39401c02 	ldrb	w2, [x0, #7]
    9600a214:	39401803 	ldrb	w3, [x0, #6]
    9600a218:	53180c42 	ubfiz	w2, w2, #8, #4
    9600a21c:	2a030042 	orr	w2, w2, w3
    9600a220:	b9001822 	str	w2, [x1, #24]
	return (in >> begin) & mask;
    9600a224:	39402c02 	ldrb	w2, [x0, #11]
	detailed->h_front_porch = timing[0x08] | get_bits(timing[0x0b], 6, 7) << 8;
    9600a228:	39402003 	ldrb	w3, [x0, #8]
	return (in >> begin) & mask;
    9600a22c:	13067c42 	asr	w2, w2, #6
	detailed->h_front_porch = timing[0x08] | get_bits(timing[0x0b], 6, 7) << 8;
    9600a230:	2a022062 	orr	w2, w3, w2, lsl #8
    9600a234:	b9001022 	str	w2, [x1, #16]
	return (in >> begin) & mask;
    9600a238:	39402c02 	ldrb	w2, [x0, #11]
	detailed->h_sync = timing[0x09] | get_bits(timing[0x0b], 4, 5) << 8;
    9600a23c:	39402403 	ldrb	w3, [x0, #9]
    9600a240:	d3441442 	ubfx	x2, x2, #4, #2
    9600a244:	2a022062 	orr	w2, w3, w2, lsl #8
    9600a248:	b9000c22 	str	w2, [x1, #12]
	return (in >> begin) & mask;
    9600a24c:	39402c02 	ldrb	w2, [x0, #11]
    9600a250:	39402803 	ldrb	w3, [x0, #10]
	detailed->v_front_porch =
		get_bits(timing[0x0a], 4, 7) | get_bits(timing[0x0b], 2, 3) << 4;
    9600a254:	d3420c42 	ubfx	x2, x2, #2, #2
	return (in >> begin) & mask;
    9600a258:	13047c63 	asr	w3, w3, #4
		get_bits(timing[0x0a], 4, 7) | get_bits(timing[0x0b], 2, 3) << 4;
    9600a25c:	2a021062 	orr	w2, w3, w2, lsl #4
	detailed->v_front_porch =
    9600a260:	b9002022 	str	w2, [x1, #32]
	return (in >> begin) & mask;
    9600a264:	39402c02 	ldrb	w2, [x0, #11]
    9600a268:	39402803 	ldrb	w3, [x0, #10]
	detailed->v_sync =
		get_bits(timing[0x0a], 0, 3) | get_bits(timing[0x0b], 0, 1) << 4;
    9600a26c:	531c0442 	ubfiz	w2, w2, #4, #2
    9600a270:	12000c63 	and	w3, w3, #0xf
    9600a274:	2a030042 	orr	w2, w2, w3
	detailed->v_sync =
    9600a278:	b9001c22 	str	w2, [x1, #28]
	return (in >> begin) & mask;
    9600a27c:	39403802 	ldrb	w2, [x0, #14]
	detailed->width_mm =  timing[0x0c] | get_bits(timing[0x0e], 4, 7) << 8;
    9600a280:	39403003 	ldrb	w3, [x0, #12]
	return (in >> begin) & mask;
    9600a284:	13047c42 	asr	w2, w2, #4
	detailed->width_mm =  timing[0x0c] | get_bits(timing[0x0e], 4, 7) << 8;
    9600a288:	2a022062 	orr	w2, w3, w2, lsl #8
    9600a28c:	b9002422 	str	w2, [x1, #36]
	return (in >> begin) & mask;
    9600a290:	39403802 	ldrb	w2, [x0, #14]
	detailed->height_mm = timing[0x0d] | get_bits(timing[0x0e], 0, 3) << 8;
    9600a294:	39403403 	ldrb	w3, [x0, #13]
    9600a298:	53180c42 	ubfiz	w2, w2, #8, #4
    9600a29c:	2a030042 	orr	w2, w2, w3
    9600a2a0:	b9002822 	str	w2, [x1, #40]
	detailed->right_border = timing[0x0f];
    9600a2a4:	39403c02 	ldrb	w2, [x0, #15]
    9600a2a8:	b9002c22 	str	w2, [x1, #44]
	detailed->top_border = timing[0x10];
    9600a2ac:	39404002 	ldrb	w2, [x0, #16]
    9600a2b0:	b9003022 	str	w2, [x1, #48]
	return (in & (1 << bit)) >> bit;
    9600a2b4:	39c04400 	ldrsb	w0, [x0, #17]
    9600a2b8:	531f7c00 	lsr	w0, w0, #31
	detailed->interlaced = get_bit(timing[0x11], 7);
    9600a2bc:	b9003420 	str	w0, [x1, #52]
}
    9600a2c0:	d65f03c0 	ret

000000009600a2c4 <read_edid>:
{
    9600a2c4:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
	if (module == TEGRABL_MODULE_DPAUX) {
    9600a2c8:	71007c5f 	cmp	w2, #0x1f
{
    9600a2cc:	910003fd 	mov	x29, sp
    9600a2d0:	a90153f3 	stp	x19, x20, [sp, #16]
    9600a2d4:	2a0203f4 	mov	w20, w2
    9600a2d8:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600a2dc:	aa0003f6 	mov	x22, x0
    9600a2e0:	a90363f7 	stp	x23, x24, [sp, #48]
    9600a2e4:	2a0303e0 	mov	w0, w3
    9600a2e8:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600a2ec:	2a0103f7 	mov	w23, w1
    9600a2f0:	a90573fb 	stp	x27, x28, [sp, #80]
	if (module == TEGRABL_MODULE_DPAUX) {
    9600a2f4:	54000281 	b.ne	9600a344 <read_edid+0x80>  // b.any
		err = tegrabl_dpaux_init_aux(instance, &hdpaux);
    9600a2f8:	9101a3a1 	add	x1, x29, #0x68
    9600a2fc:	94007c64 	bl	9602948c <tegrabl_dpaux_init_aux>
    9600a300:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9600a304:	34000400 	cbz	w0, 9600a384 <read_edid+0xc0>
			pr_error("%s: dpaux init failed\n", __func__);
    9600a308:	d0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600a30c:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600a310:	9116e021 	add	x1, x1, #0x5b8
    9600a314:	911e1c00 	add	x0, x0, #0x787
    9600a318:	940060d6 	bl	96022670 <tegrabl_printf>
    9600a31c:	12005e60 	and	w0, w19, #0xffffff
    9600a320:	52aa2001 	mov	w1, #0x51000000            	// #1358954496
    9600a324:	2a010000 	orr	w0, w0, w1
}
    9600a328:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600a32c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600a330:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600a334:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600a338:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600a33c:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9600a340:	d65f03c0 	ret
	if (module == TEGRABL_MODULE_I2C) {
    9600a344:	7100345f 	cmp	w2, #0xd
    9600a348:	540001e1 	b.ne	9600a384 <read_edid+0xc0>  // b.any
		hi2c = tegrabl_i2c_dev_open(instance, EDID_SLAVE, 1, 1);
    9600a34c:	52800023 	mov	w3, #0x1                   	// #1
    9600a350:	52801401 	mov	w1, #0xa0                  	// #160
    9600a354:	2a0303e2 	mov	w2, w3
    9600a358:	940013a7 	bl	9600f1f4 <tegrabl_i2c_dev_open>
    9600a35c:	aa0003f5 	mov	x21, x0
		if (!hi2c) {
    9600a360:	b5000140 	cbnz	x0, 9600a388 <read_edid+0xc4>
			pr_error("%s, invalid i2c handle\n", __func__);
    9600a364:	d0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600a368:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600a36c:	9116e021 	add	x1, x1, #0x5b8
    9600a370:	911e8400 	add	x0, x0, #0x7a1
    9600a374:	940060bf 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600a378:	52800040 	mov	w0, #0x2                   	// #2
				err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9600a37c:	72aa2a20 	movk	w0, #0x5151, lsl #16
				goto fail;
    9600a380:	17ffffea 	b	9600a328 <read_edid+0x64>
	struct tegrabl_i2c_dev *hi2c = NULL;
    9600a384:	d2800015 	mov	x21, #0x0                   	// #0
	msgs[0].buf = &write_buf;
    9600a388:	91019fbb 	add	x27, x29, #0x67
	struct tegrabl_i2c_dev *hi2c = NULL;
    9600a38c:	5280001c 	mov	w28, #0x0                   	// #0
    9600a390:	52800019 	mov	w25, #0x0                   	// #0
	msgs[0].slave_addr = EDID_SLAVE >> 1;
    9600a394:	52800a18 	mov	w24, #0x50                  	// #80
	msgs[0].is_write = true;
    9600a398:	5280003a 	mov	w26, #0x1                   	// #1
		if (module == TEGRABL_MODULE_DPAUX) {
    9600a39c:	71007e9f 	cmp	w20, #0x1f
    9600a3a0:	540002c1 	b.ne	9600a3f8 <read_edid+0x134>  // b.any
	msgs[0].len = 1;
    9600a3a4:	52800020 	mov	w0, #0x1                   	// #1
    9600a3a8:	b90083a0 	str	w0, [x29, #128]
	msgs[1].len = size;
    9600a3ac:	52801000 	mov	w0, #0x80                  	// #128
    9600a3b0:	b900a3a0 	str	w0, [x29, #160]
	return tegrabl_dpaux_i2c_transactions(hdpaux, msgs, 2);
    9600a3b4:	f94037a0 	ldr	x0, [x29, #104]
    9600a3b8:	52800042 	mov	w2, #0x2                   	// #2
	write_buf = offset;
    9600a3bc:	39019fb7 	strb	w23, [x29, #103]
	return tegrabl_dpaux_i2c_transactions(hdpaux, msgs, 2);
    9600a3c0:	9101c3a1 	add	x1, x29, #0x70
	msgs[0].slave_addr = EDID_SLAVE >> 1;
    9600a3c4:	7900e3b8 	strh	w24, [x29, #112]
	msgs[0].buf = &write_buf;
    9600a3c8:	f9003fbb 	str	x27, [x29, #120]
	msgs[0].is_write = true;
    9600a3cc:	390213ba 	strb	w26, [x29, #132]
	msgs[1].slave_addr = EDID_SLAVE >> 1;
    9600a3d0:	790123b8 	strh	w24, [x29, #144]
	msgs[1].buf = edid;
    9600a3d4:	f9004fb6 	str	x22, [x29, #152]
	msgs[1].is_write = false;
    9600a3d8:	390293bf 	strb	wzr, [x29, #164]
	return tegrabl_dpaux_i2c_transactions(hdpaux, msgs, 2);
    9600a3dc:	94007e67 	bl	96029d78 <tegrabl_dpaux_i2c_transactions>
		if (err != TEGRABL_NO_ERROR) {
    9600a3e0:	340001c0 	cbz	w0, 9600a418 <read_edid+0x154>
			pr_error("could not read edid\n");
    9600a3e4:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600a3e8:	911ef000 	add	x0, x0, #0x7bc
    9600a3ec:	940060a1 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_READ_FAILED, 0);
    9600a3f0:	52800320 	mov	w0, #0x19                  	// #25
    9600a3f4:	17ffffe2 	b	9600a37c <read_edid+0xb8>
		if (module == TEGRABL_MODULE_I2C) {
    9600a3f8:	7100369f 	cmp	w20, #0xd
    9600a3fc:	540000e1 	b.ne	9600a418 <read_edid+0x154>  // b.any
			err = tegrabl_i2c_dev_read(hi2c, edid, offset, EDID_BLOCK_SIZE);
    9600a400:	52801003 	mov	w3, #0x80                  	// #128
    9600a404:	2a1703e2 	mov	w2, w23
    9600a408:	aa1603e1 	mov	x1, x22
    9600a40c:	aa1503e0 	mov	x0, x21
    9600a410:	940013ac 	bl	9600f2c0 <tegrabl_i2c_dev_read>
    9600a414:	17fffff3 	b	9600a3e0 <read_edid+0x11c>
	struct tegrabl_i2c_dev *hi2c = NULL;
    9600a418:	d2800000 	mov	x0, #0x0                   	// #0
    9600a41c:	52800013 	mov	w19, #0x0                   	// #0
			checksum += edid[i];
    9600a420:	38606ac3 	ldrb	w3, [x22, x0]
    9600a424:	91000400 	add	x0, x0, #0x1
		for (i = 0; i < EDID_BLOCK_SIZE; i++) {
    9600a428:	f102001f 	cmp	x0, #0x80
			checksum += edid[i];
    9600a42c:	0b030273 	add	w19, w19, w3
    9600a430:	12001e73 	and	w19, w19, #0xff
		for (i = 0; i < EDID_BLOCK_SIZE; i++) {
    9600a434:	54ffff61 	b.ne	9600a420 <read_edid+0x15c>  // b.any
			if (checksum != 0) {
    9600a438:	340002b3 	cbz	w19, 9600a48c <read_edid+0x1c8>
			if (attempt_cnt == 0) {
    9600a43c:	340001bc 	cbz	w28, 9600a470 <read_edid+0x1ac>
			if (last_checksum != checksum) {
    9600a440:	6b13033f 	cmp	w25, w19
    9600a444:	54000160 	b.eq	9600a470 <read_edid+0x1ac>  // b.none
				pr_error("%s: checksum failed and did not match consecutive \
    9600a448:	2a1c03e4 	mov	w4, w28
    9600a44c:	2a1303e3 	mov	w3, w19
    9600a450:	2a1903e2 	mov	w2, w25
    9600a454:	d0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600a458:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600a45c:	9116e021 	add	x1, x1, #0x5b8
    9600a460:	911f5000 	add	x0, x0, #0x7d4
    9600a464:	94006083 	bl	96022670 <tegrabl_printf>
				err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9600a468:	52802040 	mov	w0, #0x102                 	// #258
    9600a46c:	17ffffc4 	b	9600a37c <read_edid+0xb8>
			tegrabl_udelay(EDID_RETRY_DELAY_US);
    9600a470:	2a1303f9 	mov	w25, w19
    9600a474:	d2801900 	mov	x0, #0xc8                  	// #200
    9600a478:	9400560b 	bl	9601fca4 <tegrabl_udelay>
	} while ((last_checksum != 0) && (++attempt_cnt < EDID_MAX_RETRY));
    9600a47c:	1100079c 	add	w28, w28, #0x1
    9600a480:	71002b9f 	cmp	w28, #0xa
    9600a484:	54fff8c1 	b.ne	9600a39c <read_edid+0xd8>  // b.any
    9600a488:	14000002 	b	9600a490 <read_edid+0x1cc>
    9600a48c:	35ffff99 	cbnz	w25, 9600a47c <read_edid+0x1b8>
    pr_info("edid read success\n");
    9600a490:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600a494:	91219400 	add	x0, x0, #0x865
    9600a498:	94006076 	bl	96022670 <tegrabl_printf>
    9600a49c:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    9600a4a0:	17ffffa2 	b	9600a328 <read_edid+0x64>

000000009600a4a4 <add_mode>:
	if (monitor_info->n_modes >= ARRAY_SIZE(monitor_info->modes)) {
    9600a4a4:	b94a4002 	ldr	w2, [x0, #2624]
    9600a4a8:	7100745f 	cmp	w2, #0x1d
    9600a4ac:	54000089 	b.ls	9600a4bc <add_mode+0x18>  // b.plast
		pr_error("Not enough modes in the mode array!");
    9600a4b0:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600a4b4:	91170800 	add	x0, x0, #0x5c2
    9600a4b8:	1400606e 	b	96022670 <tegrabl_printf>
	memcpy(&monitor_info->modes[monitor_info->n_modes++], m, sizeof(*m));
    9600a4bc:	11000443 	add	w3, w2, #0x1
    9600a4c0:	b90a4003 	str	w3, [x0, #2624]
    9600a4c4:	52800883 	mov	w3, #0x44                  	// #68
    9600a4c8:	9ba30040 	umaddl	x0, w2, w3, x0
    9600a4cc:	d2800882 	mov	x2, #0x44                  	// #68
    9600a4d0:	91092000 	add	x0, x0, #0x248
    9600a4d4:	14007e94 	b	96029f24 <memcpy>

000000009600a4d8 <parse_header>:
{
    9600a4d8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	uint8_t header[8] = {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00};
    9600a4dc:	b278bfe2 	mov	x2, #0xffffffffffff00      	// #72057594037927680
{
    9600a4e0:	910003fd 	mov	x29, sp
	uint8_t header[8] = {0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00};
    9600a4e4:	910083a1 	add	x1, x29, #0x20
    9600a4e8:	f81f8c22 	str	x2, [x1, #-8]!
	if (memcmp(edid, header, 8) == 0) {
    9600a4ec:	d2800102 	mov	x2, #0x8                   	// #8
    9600a4f0:	94007ee0 	bl	9602a070 <memcmp>
    9600a4f4:	7100001f 	cmp	w0, #0x0
}
    9600a4f8:	1a9f17e0 	cset	w0, eq  // eq = none
    9600a4fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600a500:	d65f03c0 	ret

000000009600a504 <parse_established_timings>:
{
    9600a504:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9600a508:	910003fd 	mov	x29, sp
    9600a50c:	a90363f7 	stp	x23, x24, [sp, #48]
    9600a510:	d0000198 	adrp	x24, 9603c000 <__func__.4414+0x9>
    9600a514:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600a518:	9117b318 	add	x24, x24, #0x5ec
    9600a51c:	a90573fb 	stp	x27, x28, [sp, #80]
					if ((s_hdmi_modes[k]->width == established[i][j].width) &&
    9600a520:	f00001fa 	adrp	x26, 96049000 <default_srgb_lut+0xa28>
{
    9600a524:	aa0103fc 	mov	x28, x1
    9600a528:	91008c19 	add	x25, x0, #0x23
					if ((s_hdmi_modes[k]->width == established[i][j].width) &&
    9600a52c:	9125a35a 	add	x26, x26, #0x968
{
    9600a530:	a90153f3 	stp	x19, x20, [sp, #16]
    9600a534:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600a538:	d2800c1b 	mov	x27, #0x60                  	// #96
				for (k = 0; k < size_s_hdmi_modes; k++) {
    9600a53c:	d2800016 	mov	x22, #0x0                   	// #0
    9600a540:	9b1b62d5 	madd	x21, x22, x27, x24
    9600a544:	f00001f7 	adrp	x23, 96049000 <default_srgb_lut+0xa28>
    9600a548:	912b22f7 	add	x23, x23, #0xac8
{
    9600a54c:	52800014 	mov	w20, #0x0                   	// #0
	return (in & (1 << bit)) >> bit;
    9600a550:	39c00320 	ldrsb	w0, [x25]
    9600a554:	52800021 	mov	w1, #0x1                   	// #1
    9600a558:	1ad42021 	lsl	w1, w1, w20
    9600a55c:	0a010000 	and	w0, w0, w1
    9600a560:	1ad42800 	asr	w0, w0, w20
			if (get_bit(byte, j) && established[i][j].frequency != 0) {
    9600a564:	35000220 	cbnz	w0, 9600a5a8 <parse_established_timings+0xa4>
    9600a568:	11000694 	add	w20, w20, #0x1
    9600a56c:	910032b5 	add	x21, x21, #0xc
		for (j = 0; j < 8; ++j) {
    9600a570:	7100229f 	cmp	w20, #0x8
    9600a574:	54fffee1 	b.ne	9600a550 <parse_established_timings+0x4c>  // b.any
    9600a578:	910006d6 	add	x22, x22, #0x1
    9600a57c:	91000739 	add	x25, x25, #0x1
	for (i = 0; i < 3; ++i) {
    9600a580:	f1000edf 	cmp	x22, #0x3
    9600a584:	54fffde1 	b.ne	9600a540 <parse_established_timings+0x3c>  // b.any
}
    9600a588:	52800020 	mov	w0, #0x1                   	// #1
    9600a58c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600a590:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600a594:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600a598:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600a59c:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600a5a0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9600a5a4:	d65f03c0 	ret
			if (get_bit(byte, j) && established[i][j].frequency != 0) {
    9600a5a8:	b9400aa0 	ldr	w0, [x21, #8]
    9600a5ac:	34fffde0 	cbz	w0, 9600a568 <parse_established_timings+0x64>
				for (k = 0; k < size_s_hdmi_modes; k++) {
    9600a5b0:	52800013 	mov	w19, #0x0                   	// #0
    9600a5b4:	1400000e 	b	9600a5ec <parse_established_timings+0xe8>
					if ((s_hdmi_modes[k]->width == established[i][j].width) &&
    9600a5b8:	f873db41 	ldr	x1, [x26, w19, sxtw #3]
    9600a5bc:	b94002a0 	ldr	w0, [x21]
    9600a5c0:	b9400022 	ldr	w2, [x1]
    9600a5c4:	6b00005f 	cmp	w2, w0
    9600a5c8:	540000e1 	b.ne	9600a5e4 <parse_established_timings+0xe0>  // b.any
    9600a5cc:	b9400422 	ldr	w2, [x1, #4]
    9600a5d0:	b94006a0 	ldr	w0, [x21, #4]
    9600a5d4:	6b00005f 	cmp	w2, w0
    9600a5d8:	54000061 	b.ne	9600a5e4 <parse_established_timings+0xe0>  // b.any
						add_mode(monitor_info, s_hdmi_modes[k]);
    9600a5dc:	aa1c03e0 	mov	x0, x28
    9600a5e0:	97ffffb1 	bl	9600a4a4 <add_mode>
				for (k = 0; k < size_s_hdmi_modes; k++) {
    9600a5e4:	11000673 	add	w19, w19, #0x1
    9600a5e8:	12001e73 	and	w19, w19, #0xff
    9600a5ec:	b94002e0 	ldr	w0, [x23]
    9600a5f0:	6b00027f 	cmp	w19, w0
    9600a5f4:	54fffe23 	b.cc	9600a5b8 <parse_established_timings+0xb4>  // b.lo, b.ul, b.last
    9600a5f8:	17ffffdc 	b	9600a568 <parse_established_timings+0x64>

000000009600a5fc <parse_standard_timings>:
{
    9600a5fc:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9600a600:	910003fd 	mov	x29, sp
    9600a604:	a90363f7 	stp	x23, x24, [sp, #48]
			for (j = 0; j < size_s_hdmi_modes; j++) {
    9600a608:	f00001f8 	adrp	x24, 96049000 <default_srgb_lut+0xa28>
{
    9600a60c:	a9046bf9 	stp	x25, x26, [sp, #64]
			for (j = 0; j < size_s_hdmi_modes; j++) {
    9600a610:	912b2318 	add	x24, x24, #0xac8
				if ((s_hdmi_modes[j]->width == w) &&
    9600a614:	f00001f9 	adrp	x25, 96049000 <default_srgb_lut+0xa28>
{
    9600a618:	f9002bfb 	str	x27, [sp, #80]
    9600a61c:	aa0103fa 	mov	x26, x1
				if ((s_hdmi_modes[j]->width == w) &&
    9600a620:	9125a339 	add	x25, x25, #0x968
{
    9600a624:	aa0003fb 	mov	x27, x0
    9600a628:	a90153f3 	stp	x19, x20, [sp, #16]
    9600a62c:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600a630:	d2800016 	mov	x22, #0x0                   	// #0
    9600a634:	8b160360 	add	x0, x27, x22
		uint32_t first = edid[STANDARD_TIMING_BYTE + (2 * i)];
    9600a638:	39409814 	ldrb	w20, [x0, #38]
		uint32_t second = edid[STANDARD_TIMING_BYTE + 1 + (2 * i)];
    9600a63c:	39409c00 	ldrb	w0, [x0, #39]
		if (first != 0x01 && second != 0x01) {
    9600a640:	7100069f 	cmp	w20, #0x1
    9600a644:	7a411804 	ccmp	w0, #0x1, #0x4, ne  // ne = any
    9600a648:	54000181 	b.ne	9600a678 <parse_standard_timings+0x7c>  // b.any
    9600a64c:	91000ad6 	add	x22, x22, #0x2
	for (i = 0; i < 8; i++) {
    9600a650:	f10042df 	cmp	x22, #0x10
    9600a654:	54ffff01 	b.ne	9600a634 <parse_standard_timings+0x38>  // b.any
}
    9600a658:	52800020 	mov	w0, #0x1                   	// #1
    9600a65c:	f9402bfb 	ldr	x27, [sp, #80]
    9600a660:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600a664:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600a668:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600a66c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600a670:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9600a674:	d65f03c0 	ret
			uint32_t w = 8 * (first + 31);
    9600a678:	11007e94 	add	w20, w20, #0x1f
	return (in >> begin) & mask;
    9600a67c:	13067c02 	asr	w2, w0, #6
			switch (get_bits(second, 6, 7)) {
    9600a680:	7100085f 	cmp	w2, #0x2
			uint32_t w = 8 * (first + 31);
    9600a684:	531d7294 	lsl	w20, w20, #3
			switch (get_bits(second, 6, 7)) {
    9600a688:	54000660 	b.eq	9600a754 <parse_standard_timings+0x158>  // b.none
				h = (w / 16) * 9;
    9600a68c:	53047e93 	lsr	w19, w20, #4
			switch (get_bits(second, 6, 7)) {
    9600a690:	71000c5f 	cmp	w2, #0x3
    9600a694:	54000680 	b.eq	9600a764 <parse_standard_timings+0x168>  // b.none
				h = (w / 16) * 10;
    9600a698:	52800141 	mov	w1, #0xa                   	// #10
    9600a69c:	7100045f 	cmp	w2, #0x1
    9600a6a0:	1b017e61 	mul	w1, w19, w1
    9600a6a4:	53027e93 	lsr	w19, w20, #2
    9600a6a8:	0b130673 	add	w19, w19, w19, lsl #1
    9600a6ac:	1a810273 	csel	w19, w19, w1, eq  // eq = none
    9600a6b0:	d28000c1 	mov	x1, #0x6                   	// #6
			edid_refresh = get_bits(second, 0, 5) + 60;
    9600a6b4:	12001400 	and	w0, w0, #0x3f
    9600a6b8:	1100f015 	add	w21, w0, #0x3c
			for (j = 0; j < size_s_hdmi_modes; j++) {
    9600a6bc:	52800017 	mov	w23, #0x0                   	// #0
    9600a6c0:	9b016ac1 	madd	x1, x22, x1, x26
			monitor_info->standard[i].width = w;
    9600a6c4:	b901e834 	str	w20, [x1, #488]
			monitor_info->standard[i].height = h;
    9600a6c8:	b901ec33 	str	w19, [x1, #492]
			for (j = 0; j < size_s_hdmi_modes; j++) {
    9600a6cc:	b9400300 	ldr	w0, [x24]
    9600a6d0:	6b17001f 	cmp	w0, w23
    9600a6d4:	54fffbc9 	b.ls	9600a64c <parse_standard_timings+0x50>  // b.plast
				if ((s_hdmi_modes[j]->width == w) &&
    9600a6d8:	f8775b21 	ldr	x1, [x25, w23, uxtw #3]
    9600a6dc:	b9400020 	ldr	w0, [x1]
    9600a6e0:	6b14001f 	cmp	w0, w20
    9600a6e4:	54000341 	b.ne	9600a74c <parse_standard_timings+0x150>  // b.any
    9600a6e8:	b9400420 	ldr	w0, [x1, #4]
    9600a6ec:	6b13001f 	cmp	w0, w19
    9600a6f0:	540002e1 	b.ne	9600a74c <parse_standard_timings+0x150>  // b.any
					if (s_hdmi_modes[j]->refresh == 0) {
    9600a6f4:	b9400c20 	ldr	w0, [x1, #12]
    9600a6f8:	350003a0 	cbnz	w0, 9600a76c <parse_standard_timings+0x170>
						v_total = s_hdmi_modes[j]->timings.v_back_porch +
    9600a6fc:	29441022 	ldp	w2, w4, [x1, #32]
						h_total = s_hdmi_modes[j]->timings.h_back_porch +
    9600a700:	b9402820 	ldr	w0, [x1, #40]
    9600a704:	b9403823 	ldr	w3, [x1, #56]
    9600a708:	0b020000 	add	w0, w0, w2
    9600a70c:	b9403022 	ldr	w2, [x1, #48]
    9600a710:	0b030042 	add	w2, w2, w3
						v_total = s_hdmi_modes[j]->timings.v_back_porch +
    9600a714:	b9403c23 	ldr	w3, [x1, #60]
						h_total = s_hdmi_modes[j]->timings.h_back_porch +
    9600a718:	0b020002 	add	w2, w0, w2
						refresh = ((s_hdmi_modes[j]->frequency / h_total) /
    9600a71c:	b9401020 	ldr	w0, [x1, #16]
    9600a720:	1ac20800 	udiv	w0, w0, w2
						v_total = s_hdmi_modes[j]->timings.v_back_porch +
    9600a724:	b9403422 	ldr	w2, [x1, #52]
    9600a728:	0b030042 	add	w2, w2, w3
    9600a72c:	b9402c23 	ldr	w3, [x1, #44]
    9600a730:	0b040063 	add	w3, w3, w4
    9600a734:	0b030042 	add	w2, w2, w3
						refresh = ((s_hdmi_modes[j]->frequency / h_total) /
    9600a738:	1ac20800 	udiv	w0, w0, w2
					if (edid_refresh == refresh) {
    9600a73c:	6b15001f 	cmp	w0, w21
    9600a740:	54000061 	b.ne	9600a74c <parse_standard_timings+0x150>  // b.any
						add_mode(monitor_info, s_hdmi_modes[j]);
    9600a744:	aa1a03e0 	mov	x0, x26
    9600a748:	97ffff57 	bl	9600a4a4 <add_mode>
			for (j = 0; j < size_s_hdmi_modes; j++) {
    9600a74c:	110006f7 	add	w23, w23, #0x1
    9600a750:	17ffffdf 	b	9600a6cc <parse_standard_timings+0xd0>
				h = (w / 5) * 4;
    9600a754:	528000b3 	mov	w19, #0x5                   	// #5
    9600a758:	1ad30a93 	udiv	w19, w20, w19
    9600a75c:	531e7673 	lsl	w19, w19, #2
				break;
    9600a760:	17ffffd4 	b	9600a6b0 <parse_standard_timings+0xb4>
				h = (w / 16) * 9;
    9600a764:	0b130e73 	add	w19, w19, w19, lsl #3
				break;
    9600a768:	17ffffd2 	b	9600a6b0 <parse_standard_timings+0xb4>
						refresh >>= 16;
    9600a76c:	53107c00 	lsr	w0, w0, #16
    9600a770:	17fffff3 	b	9600a73c <parse_standard_timings+0x140>

000000009600a774 <fill_mode_with_monitor_data>:

void fill_mode_with_monitor_data(struct hdmi_mode *m,
								 struct monitor_data *monitor_info,
								 struct detailed_timing *timing)
{
	m->width = timing->h_addr;
    9600a774:	b9400445 	ldr	w5, [x2, #4]
	m->height = timing->v_addr;
	m->bpp = 24;
    9600a778:	d2800301 	mov	x1, #0x18                  	// #24
	m->height = timing->v_addr;
    9600a77c:	b9401443 	ldr	w3, [x2, #20]
	m->bpp = 24;
    9600a780:	f9000401 	str	x1, [x0, #8]
	m->height = timing->v_addr;
    9600a784:	29000c05 	stp	w5, w3, [x0]
	m->refresh = 0;
	m->frequency = timing->pixel_clock;
    9600a788:	b9400041 	ldr	w1, [x2]
    9600a78c:	b9001001 	str	w1, [x0, #16]
	m->flags = 0;
    9600a790:	d2c00021 	mov	x1, #0x100000000           	// #4294967296
    9600a794:	f8014001 	stur	x1, [x0, #20]
	m->timings.h_ref_to_sync = 1;
    9600a798:	52800021 	mov	w1, #0x1                   	// #1
    9600a79c:	b9001c01 	str	w1, [x0, #28]
	m->timings.v_ref_to_sync = 1;
	m->timings.h_sync_width = timing->h_sync;
	m->timings.v_sync_width = timing->v_sync;
	m->timings.h_disp_active = timing->h_addr;
	m->timings.v_disp_active = timing->v_addr;
	m->timings.h_front_porch = timing->h_front_porch;
    9600a7a0:	29419841 	ldp	w1, w6, [x2, #12]
	m->timings.v_sync_width = timing->v_sync;
    9600a7a4:	b9401c44 	ldr	w4, [x2, #28]
	m->timings.v_disp_active = timing->v_addr;
    9600a7a8:	29060c05 	stp	w5, w3, [x0, #48]
	m->timings.v_front_porch = timing->v_front_porch;
	m->timings.h_back_porch = timing->h_blank - timing->h_front_porch -
    9600a7ac:	b9400843 	ldr	w3, [x2, #8]
	m->timings.v_front_porch = timing->v_front_porch;
    9600a7b0:	b9402045 	ldr	w5, [x2, #32]
	m->timings.h_back_porch = timing->h_blank - timing->h_front_porch -
    9600a7b4:	4b060063 	sub	w3, w3, w6
	m->timings.v_sync_width = timing->v_sync;
    9600a7b8:	29041001 	stp	w1, w4, [x0, #32]
	m->timings.h_back_porch = timing->h_blank - timing->h_front_porch -
    9600a7bc:	4b010063 	sub	w3, w3, w1
		timing->h_sync;
	m->timings.v_back_porch = timing->v_blank - timing->v_front_porch -
    9600a7c0:	b9401841 	ldr	w1, [x2, #24]
	m->timings.h_front_porch = timing->h_front_porch;
    9600a7c4:	b9003806 	str	w6, [x0, #56]
	m->timings.v_back_porch = timing->v_blank - timing->v_front_porch -
    9600a7c8:	4b050021 	sub	w1, w1, w5
	m->timings.v_front_porch = timing->v_front_porch;
    9600a7cc:	b9003c05 	str	w5, [x0, #60]
	m->timings.v_back_porch = timing->v_blank - timing->v_front_porch -
    9600a7d0:	4b040021 	sub	w1, w1, w4
    9600a7d4:	29050403 	stp	w3, w1, [x0, #40]
		timing->v_sync;
}
    9600a7d8:	d65f03c0 	ret

000000009600a7dc <parse_descriptors>:

void parse_descriptors(const uint8_t *edid, struct monitor_data *monitor_info,
					   uint32_t module, uint32_t instance)
{
    9600a7dc:	a9a87bfd 	stp	x29, x30, [sp, #-384]!
    9600a7e0:	910003fd 	mov	x29, sp
    9600a7e4:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600a7e8:	aa0003f6 	mov	x22, x0
    9600a7ec:	a90363f7 	stp	x23, x24, [sp, #48]
    9600a7f0:	9100dad5 	add	x21, x22, #0x36
    9600a7f4:	9101fad7 	add	x23, x22, #0x7e
    9600a7f8:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t index;
	struct hdmi_mode m;
	uint32_t total_extensions = 0;
	uint32_t total_dtds = 0;
	uint8_t dtd_start;
	uint8_t edid_extension[EDID_BLOCK_SIZE] = {0};
    9600a7fc:	910403b4 	add	x20, x29, #0x100
{
    9600a800:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600a804:	a90573fb 	stp	x27, x28, [sp, #80]
    9600a808:	aa0103f3 	mov	x19, x1
    9600a80c:	2a0203fb 	mov	w27, w2
    9600a810:	2a0303fc 	mov	w28, w3
	uint8_t edid_extension[EDID_BLOCK_SIZE] = {0};
    9600a814:	d2801002 	mov	x2, #0x80                  	// #128
    9600a818:	52800001 	mov	w1, #0x0                   	// #0
    9600a81c:	aa1403e0 	mov	x0, x20
    9600a820:	94007d82 	bl	96029e28 <memset>
	uint8_t tmp;

	/* parse descriptors in basic edid */
	for (i = 0; i < 4; ++i) {
		index = DTD_BYTE + i * 18;
		if (!(edid[index + 0] == 0x00 && edid[index + 1] == 0x00)) {
    9600a824:	394002a0 	ldrb	w0, [x21]
    9600a828:	35000060 	cbnz	w0, 9600a834 <parse_descriptors+0x58>
    9600a82c:	394006a0 	ldrb	w0, [x21, #1]
    9600a830:	340001e0 	cbz	w0, 9600a86c <parse_descriptors+0x90>
			struct detailed_timing timing = {0};
			parse_detailed_timing(edid + index, &timing);
    9600a834:	910203a1 	add	x1, x29, #0x80
    9600a838:	aa1503e0 	mov	x0, x21
			struct detailed_timing timing = {0};
    9600a83c:	a9087fbf 	stp	xzr, xzr, [x29, #128]
    9600a840:	a9097fbf 	stp	xzr, xzr, [x29, #144]
    9600a844:	a90a7fbf 	stp	xzr, xzr, [x29, #160]
    9600a848:	f9005bbf 	str	xzr, [x29, #176]
			parse_detailed_timing(edid + index, &timing);
    9600a84c:	97fffe5c 	bl	9600a1bc <parse_detailed_timing>
			fill_mode_with_monitor_data(&m, monitor_info, &timing);
    9600a850:	910203a2 	add	x2, x29, #0x80
    9600a854:	aa1303e1 	mov	x1, x19
    9600a858:	9102e3a0 	add	x0, x29, #0xb8
    9600a85c:	97ffffc6 	bl	9600a774 <fill_mode_with_monitor_data>
			add_mode(monitor_info, &m);
    9600a860:	9102e3a1 	add	x1, x29, #0xb8
    9600a864:	aa1303e0 	mov	x0, x19
    9600a868:	97ffff0f 	bl	9600a4a4 <add_mode>
    9600a86c:	91004ab5 	add	x21, x21, #0x12
	for (i = 0; i < 4; ++i) {
    9600a870:	eb1502ff 	cmp	x23, x21
    9600a874:	54fffd81 	b.ne	9600a824 <parse_descriptors+0x48>  // b.any
	}

	/* this var is used to distinguish between hdmi and dvi panels,
	 * make it explicitly false in case we have multiple displays.
	 */
	is_panel_hdmi = false;
    9600a878:	90000335 	adrp	x21, 9606e000 <__bss_start>

	/* parse descriptors, SVDs in extension blocks */
	total_extensions = edid[NUM_EXTENSIONS_BYTE];
    9600a87c:	3941fac0 	ldrb	w0, [x22, #126]
							break;
						case VIDEO_ID_1920_1080_32:
							psrc = &s_1920_1080_32;
							break;
						case VIDEO_ID_1920_1080_33:
							psrc = &s_1920_1080_33;
    9600a880:	f00001f9 	adrp	x25, 96049000 <default_srgb_lut+0xa28>
    9600a884:	911e3339 	add	x25, x25, #0x78c
	is_panel_hdmi = false;
    9600a888:	391166bf 	strb	wzr, [x21, #1113]
	for (i = 0; i < total_extensions; i++) {
    9600a88c:	52800016 	mov	w22, #0x0                   	// #0
	total_extensions = edid[NUM_EXTENSIONS_BYTE];
    9600a890:	b9007fa0 	str	w0, [x29, #124]
	for (i = 0; i < total_extensions; i++) {
    9600a894:	b9407fa0 	ldr	w0, [x29, #124]
    9600a898:	6b0002df 	cmp	w22, w0
    9600a89c:	540001c2 	b.cs	9600a8d4 <parse_descriptors+0xf8>  // b.hs, b.nlast
		if (!read_edid(edid_extension, (i + 1) * EDID_BLOCK_SIZE, module,
    9600a8a0:	110006d6 	add	w22, w22, #0x1
    9600a8a4:	2a1c03e3 	mov	w3, w28
    9600a8a8:	2a1b03e2 	mov	w2, w27
    9600a8ac:	aa1403e0 	mov	x0, x20
    9600a8b0:	531962c1 	lsl	w1, w22, #7
    9600a8b4:	97fffe84 	bl	9600a2c4 <read_edid>
    9600a8b8:	35fffee0 	cbnz	w0, 9600a894 <parse_descriptors+0xb8>
			if (edid_extension[0] != 0x2) {
    9600a8bc:	394403a0 	ldrb	w0, [x29, #256]
    9600a8c0:	7100081f 	cmp	w0, #0x2
    9600a8c4:	54000160 	b.eq	9600a8f0 <parse_descriptors+0x114>  // b.none
				pr_info("This is not a CEA-extension block!\n");
    9600a8c8:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600a8cc:	911cbc00 	add	x0, x0, #0x72f
    9600a8d0:	94005f68 	bl	96022670 <tegrabl_printf>
					break;
				}
			}
		}
	}
}
    9600a8d4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600a8d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600a8dc:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600a8e0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600a8e4:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600a8e8:	a8d87bfd 	ldp	x29, x30, [sp], #384
    9600a8ec:	d65f03c0 	ret
			dtd_start = edid_extension[0x2];
    9600a8f0:	39440bb7 	ldrb	w23, [x29, #258]
    9600a8f4:	39440fa3 	ldrb	w3, [x29, #259]
    9600a8f8:	12000c60 	and	w0, w3, #0xf
			if (dtd_start == 0) {
    9600a8fc:	34fffed7 	cbz	w23, 9600a8d4 <parse_descriptors+0xf8>
    9600a900:	8b370298 	add	x24, x20, w23, uxtb
    9600a904:	52800243 	mov	w3, #0x12                  	// #18
    9600a908:	9ba0607a 	umaddl	x26, w3, w0, x24
			for (j = 0; j < total_dtds; j++) {
    9600a90c:	eb18035f 	cmp	x26, x24
    9600a910:	54000421 	b.ne	9600a994 <parse_descriptors+0x1b8>  // b.any
			if ((dtd_start == 0x0) || (dtd_start == 0x4)) {
    9600a914:	710012ff 	cmp	w23, #0x4
    9600a918:	54fffde0 	b.eq	9600a8d4 <parse_descriptors+0xf8>  // b.none
							psrc = &s_3840_2160_95;
    9600a91c:	f00001f8 	adrp	x24, 96049000 <default_srgb_lut+0xa28>
    9600a920:	91205318 	add	x24, x24, #0x814
			j = 0;
    9600a924:	5280001a 	mov	w26, #0x0                   	// #0
				svd_start = 0x4 + j;
    9600a928:	11001340 	add	w0, w26, #0x4
    9600a92c:	12001c00 	and	w0, w0, #0xff
				if (svd_start >= dtd_start) {
    9600a930:	6b0002ff 	cmp	w23, w0
    9600a934:	54fffb09 	b.ls	9600a894 <parse_descriptors+0xb8>  // b.plast
				block_type = (edid_extension[svd_start] & 0xE0);
    9600a938:	3860ca81 	ldrb	w1, [x20, w0, sxtw]
    9600a93c:	12001024 	and	w4, w1, #0x1f
    9600a940:	11000482 	add	w2, w4, #0x1
				switch (block_type) {
    9600a944:	53057c21 	lsr	w1, w1, #5
    9600a948:	0b02035a 	add	w26, w26, w2
    9600a94c:	7100083f 	cmp	w1, #0x2
    9600a950:	54000420 	b.eq	9600a9d4 <parse_descriptors+0x1f8>  // b.none
    9600a954:	71000c3f 	cmp	w1, #0x3
    9600a958:	54fffe81 	b.ne	9600a928 <parse_descriptors+0x14c>  // b.any
					ptr = &edid_extension[svd_start];
    9600a95c:	8b200280 	add	x0, x20, w0, uxtb
					if ((ptr[1] == 0xd8) &&
    9600a960:	39400401 	ldrb	w1, [x0, #1]
    9600a964:	7103603f 	cmp	w1, #0xd8
    9600a968:	54000d01 	b.ne	9600ab08 <parse_descriptors+0x32c>  // b.any
    9600a96c:	39400801 	ldrb	w1, [x0, #2]
    9600a970:	7101743f 	cmp	w1, #0x5d
    9600a974:	54fffda1 	b.ne	9600a928 <parse_descriptors+0x14c>  // b.any
						(ptr[2] == 0x5d) &&
    9600a978:	39400c00 	ldrb	w0, [x0, #3]
    9600a97c:	7103101f 	cmp	w0, #0xc4
    9600a980:	54fffd41 	b.ne	9600a928 <parse_descriptors+0x14c>  // b.any
						is_panel_hdmi = true;
    9600a984:	52800020 	mov	w0, #0x1                   	// #1
    9600a988:	391166a0 	strb	w0, [x21, #1113]
						monitor_info->hf_vsdb_present = true;
    9600a98c:	39291260 	strb	w0, [x19, #2628]
						break;
    9600a990:	17ffffe6 	b	9600a928 <parse_descriptors+0x14c>
				parse_detailed_timing(edid_extension + index, &timing);
    9600a994:	910203a1 	add	x1, x29, #0x80
    9600a998:	aa1803e0 	mov	x0, x24
				struct detailed_timing timing = {0};
    9600a99c:	a9087fbf 	stp	xzr, xzr, [x29, #128]
    9600a9a0:	91004b18 	add	x24, x24, #0x12
    9600a9a4:	a9097fbf 	stp	xzr, xzr, [x29, #144]
    9600a9a8:	a90a7fbf 	stp	xzr, xzr, [x29, #160]
    9600a9ac:	f9005bbf 	str	xzr, [x29, #176]
				parse_detailed_timing(edid_extension + index, &timing);
    9600a9b0:	97fffe03 	bl	9600a1bc <parse_detailed_timing>
				fill_mode_with_monitor_data(&m, monitor_info, &timing);
    9600a9b4:	910203a2 	add	x2, x29, #0x80
    9600a9b8:	aa1303e1 	mov	x1, x19
    9600a9bc:	9102e3a0 	add	x0, x29, #0xb8
    9600a9c0:	97ffff6d 	bl	9600a774 <fill_mode_with_monitor_data>
				add_mode(monitor_info, &m);
    9600a9c4:	9102e3a1 	add	x1, x29, #0xb8
    9600a9c8:	aa1303e0 	mov	x0, x19
    9600a9cc:	97fffeb6 	bl	9600a4a4 <add_mode>
    9600a9d0:	17ffffcf 	b	9600a90c <parse_descriptors+0x130>
    9600a9d4:	11000402 	add	w2, w0, #0x1
							psrc = &s_3840_2160_97;
    9600a9d8:	f00001e5 	adrp	x5, 96049000 <default_srgb_lut+0xa28>
    9600a9dc:	0b020084 	add	w4, w4, w2
					for (k = 0; k < n_blocks; k++) {
    9600a9e0:	6b02009f 	cmp	w4, w2
    9600a9e4:	54fffa20 	b.eq	9600a928 <parse_descriptors+0x14c>  // b.none
						switch (cea_table_index) {
    9600a9e8:	38624a80 	ldrb	w0, [x20, w2, uxtw]
    9600a9ec:	12001800 	and	w0, w0, #0x7f
    9600a9f0:	7100481f 	cmp	w0, #0x12
    9600a9f4:	54000248 	b.hi	9600aa3c <parse_descriptors+0x260>  // b.pmore
    9600a9f8:	7100441f 	cmp	w0, #0x11
    9600a9fc:	54000622 	b.cs	9600aac0 <parse_descriptors+0x2e4>  // b.hs, b.nlast
    9600aa00:	71000c1f 	cmp	w0, #0x3
    9600aa04:	540000e8 	b.hi	9600aa20 <parse_descriptors+0x244>  // b.pmore
    9600aa08:	7100081f 	cmp	w0, #0x2
    9600aa0c:	54000782 	b.cs	9600aafc <parse_descriptors+0x320>  // b.hs, b.nlast
    9600aa10:	7100041f 	cmp	w0, #0x1
    9600aa14:	540003c0 	b.eq	9600aa8c <parse_descriptors+0x2b0>  // b.none
    9600aa18:	11000442 	add	w2, w2, #0x1
    9600aa1c:	17fffff1 	b	9600a9e0 <parse_descriptors+0x204>
    9600aa20:	7100101f 	cmp	w0, #0x4
    9600aa24:	54000480 	b.eq	9600aab4 <parse_descriptors+0x2d8>  // b.none
    9600aa28:	7100401f 	cmp	w0, #0x10
    9600aa2c:	54ffff61 	b.ne	9600aa18 <parse_descriptors+0x23c>  // b.any
							psrc = &s_1920_1080_16;
    9600aa30:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aa34:	911b0021 	add	x1, x1, #0x6c0
							break;
    9600aa38:	14000017 	b	9600aa94 <parse_descriptors+0x2b8>
						switch (cea_table_index) {
    9600aa3c:	7100841f 	cmp	w0, #0x21
    9600aa40:	54000520 	b.eq	9600aae4 <parse_descriptors+0x308>  // b.none
    9600aa44:	54000128 	b.hi	9600aa68 <parse_descriptors+0x28c>  // b.pmore
    9600aa48:	71007c1f 	cmp	w0, #0x1f
    9600aa4c:	54000400 	b.eq	9600aacc <parse_descriptors+0x2f0>  // b.none
    9600aa50:	54000448 	b.hi	9600aad8 <parse_descriptors+0x2fc>  // b.pmore
    9600aa54:	71004c1f 	cmp	w0, #0x13
    9600aa58:	54fffe01 	b.ne	9600aa18 <parse_descriptors+0x23c>  // b.any
							psrc = &s_1280_720_19;
    9600aa5c:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aa60:	9118e021 	add	x1, x1, #0x638
							break;
    9600aa64:	1400000c 	b	9600aa94 <parse_descriptors+0x2b8>
						switch (cea_table_index) {
    9600aa68:	71017c1f 	cmp	w0, #0x5f
    9600aa6c:	54000400 	b.eq	9600aaec <parse_descriptors+0x310>  // b.none
    9600aa70:	7101841f 	cmp	w0, #0x61
    9600aa74:	54000400 	b.eq	9600aaf4 <parse_descriptors+0x318>  // b.none
    9600aa78:	7100881f 	cmp	w0, #0x22
    9600aa7c:	54fffce1 	b.ne	9600aa18 <parse_descriptors+0x23c>  // b.any
							psrc = &s_1920_1080_34;
    9600aa80:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aa84:	911f4021 	add	x1, x1, #0x7d0
							break;
    9600aa88:	14000003 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_640_480_1;
    9600aa8c:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aa90:	91227021 	add	x1, x1, #0x89c
    9600aa94:	b90073a4 	str	w4, [x29, #112]
							add_mode(monitor_info, psrc);
    9600aa98:	aa1303e0 	mov	x0, x19
    9600aa9c:	b9007ba2 	str	w2, [x29, #120]
    9600aaa0:	97fffe81 	bl	9600a4a4 <add_mode>
    9600aaa4:	f00001e5 	adrp	x5, 96049000 <default_srgb_lut+0xa28>
    9600aaa8:	b94073a4 	ldr	w4, [x29, #112]
    9600aaac:	b9407ba2 	ldr	w2, [x29, #120]
    9600aab0:	17ffffda 	b	9600aa18 <parse_descriptors+0x23c>
							psrc = &s_1280_720_4;
    9600aab4:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aab8:	9119f021 	add	x1, x1, #0x67c
							break;
    9600aabc:	17fffff6 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_720_576_17;
    9600aac0:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aac4:	91249021 	add	x1, x1, #0x924
							break;
    9600aac8:	17fffff3 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_1920_1080_31;
    9600aacc:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aad0:	911c1021 	add	x1, x1, #0x704
							break;
    9600aad4:	17fffff0 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_1920_1080_32;
    9600aad8:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600aadc:	911d2021 	add	x1, x1, #0x748
							break;
    9600aae0:	17ffffed 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_1920_1080_33;
    9600aae4:	aa1903e1 	mov	x1, x25
							break;
    9600aae8:	17ffffeb 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_3840_2160_95;
    9600aaec:	aa1803e1 	mov	x1, x24
							break;
    9600aaf0:	17ffffe9 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_3840_2160_97;
    9600aaf4:	912160a1 	add	x1, x5, #0x858
							break;
    9600aaf8:	17ffffe7 	b	9600aa94 <parse_descriptors+0x2b8>
							psrc = &s_720_480_2;
    9600aafc:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600ab00:	91238021 	add	x1, x1, #0x8e0
    9600ab04:	17ffffe4 	b	9600aa94 <parse_descriptors+0x2b8>
					if ((ptr[1] == 0x03) &&
    9600ab08:	71000c3f 	cmp	w1, #0x3
    9600ab0c:	54fff0e1 	b.ne	9600a928 <parse_descriptors+0x14c>  // b.any
    9600ab10:	39400801 	ldrb	w1, [x0, #2]
    9600ab14:	7100303f 	cmp	w1, #0xc
    9600ab18:	54fff081 	b.ne	9600a928 <parse_descriptors+0x14c>  // b.any
						(ptr[2] == 0x0c) &&
    9600ab1c:	39400c01 	ldrb	w1, [x0, #3]
    9600ab20:	35fff041 	cbnz	w1, 9600a928 <parse_descriptors+0x14c>
						is_panel_hdmi = true;
    9600ab24:	52800021 	mov	w1, #0x1                   	// #1
    9600ab28:	391166a1 	strb	w1, [x21, #1113]
					if (n_blocks >= 8 &&
    9600ab2c:	71001c9f 	cmp	w4, #0x7
    9600ab30:	54ffefc9 	b.ls	9600a928 <parse_descriptors+0x14c>  // b.plast
						tmp = ptr[l++];
    9600ab34:	39402001 	ldrb	w1, [x0, #8]
						if (tmp & 0x20) {
    9600ab38:	362fef81 	tbz	w1, #5, 9600a928 <parse_descriptors+0x14c>
						tmp = ptr[l++];
    9600ab3c:	f279003f 	tst	x1, #0x80
    9600ab40:	52800162 	mov	w2, #0xb                   	// #11
    9600ab44:	52800125 	mov	w5, #0x9                   	// #9
    9600ab48:	1a851042 	csel	w2, w2, w5, ne  // ne = any
							if (tmp & 0x40) {
    9600ab4c:	36300041 	tbz	w1, #6, 9600ab54 <parse_descriptors+0x378>
								l += 2;
    9600ab50:	11000842 	add	w2, w2, #0x2
							if (++l <= n_blocks && (ptr[l] & 0xe0)) {
    9600ab54:	11000441 	add	w1, w2, #0x1
    9600ab58:	6b01009f 	cmp	w4, w1
    9600ab5c:	54ffee63 	b.cc	9600a928 <parse_descriptors+0x14c>  // b.lo, b.ul, b.last
    9600ab60:	38616805 	ldrb	w5, [x0, x1]
    9600ab64:	721b08bf 	tst	w5, #0xe0
    9600ab68:	54ffee00 	b.eq	9600a928 <parse_descriptors+0x14c>  // b.none
									switch (ptr[l+n+1]) {
    9600ab6c:	11000842 	add	w2, w2, #0x2
    9600ab70:	d0000186 	adrp	x6, 9603c000 <__func__.4414+0x9>
										psrc = &s_hdmi_vic_2;
    9600ab74:	f00001e7 	adrp	x7, 96049000 <default_srgb_lut+0xa28>
								hdmi_vic_len = ptr[l] >> 5;
    9600ab78:	53057ca5 	lsr	w5, w5, #5
									switch (ptr[l+n+1]) {
    9600ab7c:	8b020002 	add	x2, x0, x2
    9600ab80:	9116d0c6 	add	x6, x6, #0x5b4
										psrc = &s_hdmi_vic_2;
    9600ab84:	9127f0e7 	add	x7, x7, #0x9fc
								hdmi_vic_len = ptr[l] >> 5;
    9600ab88:	d2800004 	mov	x4, #0x0                   	// #0
									switch (ptr[l+n+1]) {
    9600ab8c:	38646840 	ldrb	w0, [x2, x4]
    9600ab90:	51000400 	sub	w0, w0, #0x1
    9600ab94:	71000c1f 	cmp	w0, #0x3
    9600ab98:	54000248 	b.hi	9600abe0 <parse_descriptors+0x404>  // b.pmore
    9600ab9c:	386048c0 	ldrb	w0, [x6, w0, uxtw]
    9600aba0:	10000061 	adr	x1, 9600abac <parse_descriptors+0x3d0>
    9600aba4:	8b208820 	add	x0, x1, w0, sxtb #2
    9600aba8:	d61f0000 	br	x0
										psrc = &s_hdmi_vic_1;
    9600abac:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600abb0:	9126e021 	add	x1, x1, #0x9b8
										add_mode(monitor_info, psrc);
    9600abb4:	aa1303e0 	mov	x0, x19
    9600abb8:	a9060ba7 	stp	x7, x2, [x29, #96]
    9600abbc:	f9003ba4 	str	x4, [x29, #112]
    9600abc0:	b9007ba5 	str	w5, [x29, #120]
    9600abc4:	97fffe38 	bl	9600a4a4 <add_mode>
    9600abc8:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600abcc:	b9407ba5 	ldr	w5, [x29, #120]
    9600abd0:	9116d000 	add	x0, x0, #0x5b4
    9600abd4:	f9403ba4 	ldr	x4, [x29, #112]
    9600abd8:	a9460ba7 	ldp	x7, x2, [x29, #96]
    9600abdc:	aa0003e6 	mov	x6, x0
    9600abe0:	91000484 	add	x4, x4, #0x1
								for (n = 0; n < hdmi_vic_len; n++) {
    9600abe4:	6b0400bf 	cmp	w5, w4
    9600abe8:	54fffd28 	b.hi	9600ab8c <parse_descriptors+0x3b0>  // b.pmore
    9600abec:	17ffff4f 	b	9600a928 <parse_descriptors+0x14c>
										psrc = &s_hdmi_vic_3;
    9600abf0:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600abf4:	91290021 	add	x1, x1, #0xa40
										break;
    9600abf8:	17ffffef 	b	9600abb4 <parse_descriptors+0x3d8>
										psrc = &s_hdmi_vic_4;
    9600abfc:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600ac00:	912a1021 	add	x1, x1, #0xa84
										break;
    9600ac04:	17ffffec 	b	9600abb4 <parse_descriptors+0x3d8>
										psrc = &s_hdmi_vic_2;
    9600ac08:	aa0703e1 	mov	x1, x7
    9600ac0c:	17ffffea 	b	9600abb4 <parse_descriptors+0x3d8>

000000009600ac10 <parse_edid>:
	return NVDISP_MODE_AVI_M_NO_DATA;
}

tegrabl_error_t parse_edid(const uint8_t *edid, struct hdmi_mode *best_mode,
						   uint32_t module, uint32_t instance)
{
    9600ac10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600ac14:	910003fd 	mov	x29, sp
    9600ac18:	a90153f3 	stp	x19, x20, [sp, #16]
    9600ac1c:	aa0103f4 	mov	x20, x1
    9600ac20:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600ac24:	aa0003f5 	mov	x21, x0
    9600ac28:	2a0203f6 	mov	w22, w2
    9600ac2c:	f9001bf7 	str	x23, [sp, #48]
	struct monitor_data *monitor_info;
	tegrabl_error_t status = TEGRABL_NO_ERROR;

	monitor_info = tegrabl_malloc(sizeof(struct monitor_data));
    9600ac30:	d2814a00 	mov	x0, #0xa50                 	// #2640
{
    9600ac34:	2a0303f7 	mov	w23, w3
	monitor_info = tegrabl_malloc(sizeof(struct monitor_data));
    9600ac38:	94006f90 	bl	96026a78 <tegrabl_malloc>
    9600ac3c:	aa0003f3 	mov	x19, x0
	memset(monitor_info, 0, sizeof(struct monitor_data));
    9600ac40:	d2814a02 	mov	x2, #0xa50                 	// #2640
    9600ac44:	52800001 	mov	w1, #0x0                   	// #0
    9600ac48:	94007c78 	bl	96029e28 <memset>

	memcpy(best_mode, &s_1920_1080_16, sizeof(struct hdmi_mode));
    9600ac4c:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600ac50:	911b0021 	add	x1, x1, #0x6c0
    9600ac54:	d2800882 	mov	x2, #0x44                  	// #68
    9600ac58:	aa1403e0 	mov	x0, x20
    9600ac5c:	94007cb2 	bl	96029f24 <memcpy>

	if (!parse_header(edid)) {
    9600ac60:	aa1503e0 	mov	x0, x21
    9600ac64:	97fffe1d 	bl	9600a4d8 <parse_header>
    9600ac68:	72001c1f 	tst	w0, #0xff
    9600ac6c:	54000380 	b.eq	9600acdc <parse_edid+0xcc>  // b.none
	if (!parse_vendor_block(edid, monitor_info)) {
		status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
		goto fail;
	}
#endif
	if (!parse_established_timings(edid, monitor_info)) {
    9600ac70:	aa1303e1 	mov	x1, x19
    9600ac74:	aa1503e0 	mov	x0, x21
    9600ac78:	97fffe23 	bl	9600a504 <parse_established_timings>
    9600ac7c:	72001c1f 	tst	w0, #0xff
    9600ac80:	54000420 	b.eq	9600ad04 <parse_edid+0xf4>  // b.none
		status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
		goto fail;
	}

	if (!parse_standard_timings(edid, monitor_info)) {
    9600ac84:	aa1303e1 	mov	x1, x19
    9600ac88:	aa1503e0 	mov	x0, x21
    9600ac8c:	97fffe5c 	bl	9600a5fc <parse_standard_timings>
    9600ac90:	72001c1f 	tst	w0, #0xff
    9600ac94:	540003c0 	b.eq	9600ad0c <parse_edid+0xfc>  // b.none
		status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
		goto fail;
	}

	parse_descriptors(edid, monitor_info, module, instance);
    9600ac98:	aa1503e0 	mov	x0, x21
    9600ac9c:	2a1703e3 	mov	w3, w23
    9600aca0:	2a1603e2 	mov	w2, w22
    9600aca4:	aa1303e1 	mov	x1, x19
    9600aca8:	97fffecd 	bl	9600a7dc <parse_descriptors>

	if (monitor_info->n_modes == 0)
    9600acac:	b94a4260 	ldr	w0, [x19, #2624]
    9600acb0:	34000120 	cbz	w0, 9600acd4 <parse_edid+0xc4>
		goto fail;
	else
		get_best_mode(monitor_info, best_mode);
    9600acb4:	aa1403e1 	mov	x1, x20
    9600acb8:	aa1303e0 	mov	x0, x19
    9600acbc:	9400009f 	bl	9600af38 <get_best_mode>

	pr_info("Best mode Width = %d, Height = %d, freq = %d\n",
    9600acc0:	29400a81 	ldp	w1, w2, [x20]
    9600acc4:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600acc8:	b9401283 	ldr	w3, [x20, #16]
    9600accc:	911d5800 	add	x0, x0, #0x756
    9600acd0:	94005e68 	bl	96022670 <tegrabl_printf>
	tegrabl_error_t status = TEGRABL_NO_ERROR;
    9600acd4:	52800014 	mov	w20, #0x0                   	// #0
    9600acd8:	14000003 	b	9600ace4 <parse_edid+0xd4>
		status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9600acdc:	52804054 	mov	w20, #0x202                 	// #514
		status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    9600ace0:	72aa2a34 	movk	w20, #0x5151, lsl #16
			best_mode->width, best_mode->height, best_mode->frequency);

fail:
	tegrabl_free(monitor_info);
    9600ace4:	aa1303e0 	mov	x0, x19
    9600ace8:	94006f74 	bl	96026ab8 <tegrabl_free>
	return status;
}
    9600acec:	2a1403e0 	mov	w0, w20
    9600acf0:	f9401bf7 	ldr	x23, [sp, #48]
    9600acf4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600acf8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600acfc:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600ad00:	d65f03c0 	ret
		status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    9600ad04:	52808054 	mov	w20, #0x402                 	// #1026
    9600ad08:	17fffff6 	b	9600ace0 <parse_edid+0xd0>
		status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    9600ad0c:	5280a054 	mov	w20, #0x502                 	// #1282
    9600ad10:	17fffff4 	b	9600ace0 <parse_edid+0xd0>

000000009600ad14 <mode_from_hdmi_mode>:

void mode_from_hdmi_mode(struct nvdisp_mode *modes, struct hdmi_mode *mode)
{
    9600ad14:	aa0103e3 	mov	x3, x1
	modes->pclk = mode->frequency;
    9600ad18:	b9401021 	ldr	w1, [x1, #16]
	modes->h_sync_width = mode->timings.h_sync_width;
	modes->v_sync_width = mode->timings.v_sync_width;
	modes->h_back_porch = mode->timings.h_back_porch;
	modes->v_back_porch = mode->timings.v_back_porch;
	modes->h_active = mode->width;
	modes->v_active = mode->height;
    9600ad1c:	b9400462 	ldr	w2, [x3, #4]
	modes->h_front_porch = mode->timings.h_front_porch;
    9600ad20:	b9403864 	ldr	w4, [x3, #56]
	modes->pclk = mode->frequency;
    9600ad24:	b9000001 	str	w1, [x0]
	modes->h_ref_to_sync = mode->timings.h_ref_to_sync;
    9600ad28:	b9401861 	ldr	w1, [x3, #24]
    9600ad2c:	b9000801 	str	w1, [x0, #8]
	modes->v_ref_to_sync = mode->timings.v_ref_to_sync;
    9600ad30:	b9401c61 	ldr	w1, [x3, #28]
    9600ad34:	b9000c01 	str	w1, [x0, #12]
	modes->h_sync_width = mode->timings.h_sync_width;
    9600ad38:	b9402061 	ldr	w1, [x3, #32]
    9600ad3c:	b9001001 	str	w1, [x0, #16]
	modes->v_sync_width = mode->timings.v_sync_width;
    9600ad40:	b9402461 	ldr	w1, [x3, #36]
    9600ad44:	b9001401 	str	w1, [x0, #20]
	modes->h_back_porch = mode->timings.h_back_porch;
    9600ad48:	b9402861 	ldr	w1, [x3, #40]
    9600ad4c:	b9001801 	str	w1, [x0, #24]
	modes->v_back_porch = mode->timings.v_back_porch;
    9600ad50:	b9402c61 	ldr	w1, [x3, #44]
    9600ad54:	b9001c01 	str	w1, [x0, #28]
	modes->h_active = mode->width;
    9600ad58:	b9400061 	ldr	w1, [x3]
	modes->h_front_porch = mode->timings.h_front_porch;
    9600ad5c:	b9002804 	str	w4, [x0, #40]
	modes->v_front_porch = mode->timings.v_front_porch;
	modes->vic = mode->vic;
    9600ad60:	29478c64 	ldp	w4, w3, [x3, #60]
    9600ad64:	b9003803 	str	w3, [x0, #56]
	if (modes->flags)
    9600ad68:	b9403003 	ldr	w3, [x0, #48]
	modes->v_active = mode->height;
    9600ad6c:	29040801 	stp	w1, w2, [x0, #32]
	modes->v_front_porch = mode->timings.v_front_porch;
    9600ad70:	b9002c04 	str	w4, [x0, #44]
	if (modes->flags)
    9600ad74:	34000063 	cbz	w3, 9600ad80 <mode_from_hdmi_mode+0x6c>
		modes->avi_m = modes->flags;
    9600ad78:	3900d003 	strb	w3, [x0, #52]
    9600ad7c:	d65f03c0 	ret
{
    9600ad80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	if (!h_size || !v_size) {
    9600ad84:	7100003f 	cmp	w1, #0x0
    9600ad88:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
{
    9600ad8c:	910003fd 	mov	x29, sp
    9600ad90:	f9000bf3 	str	x19, [sp, #16]
    9600ad94:	aa0003f3 	mov	x19, x0
	if (!h_size || !v_size) {
    9600ad98:	540000c1 	b.ne	9600adb0 <mode_from_hdmi_mode+0x9c>  // b.any
		pr_error("invalid h_size %u or v_size %u\n", h_size, v_size);
    9600ad9c:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600ada0:	911c3000 	add	x0, x0, #0x70c
    9600ada4:	94005e33 	bl	96022670 <tegrabl_printf>
	return NVDISP_MODE_AVI_M_NO_DATA;
    9600ada8:	52800000 	mov	w0, #0x0                   	// #0
    9600adac:	14000022 	b	9600ae34 <mode_from_hdmi_mode+0x120>
	if (is_avi_m(h_size, v_size, 256, 135))
    9600adb0:	528010e0 	mov	w0, #0x87                  	// #135
    9600adb4:	52801fe3 	mov	w3, #0xff                  	// #255
    9600adb8:	1b007c20 	mul	w0, w1, w0
    9600adbc:	1b037c43 	mul	w3, w2, w3
    9600adc0:	6b03001f 	cmp	w0, w3
    9600adc4:	54000089 	b.ls	9600add4 <mode_from_hdmi_mode+0xc0>  // b.plast
    9600adc8:	0b022043 	add	w3, w2, w2, lsl #8
    9600adcc:	6b03001f 	cmp	w0, w3
    9600add0:	540003a3 	b.cc	9600ae44 <mode_from_hdmi_mode+0x130>  // b.lo, b.ul, b.last
	else if (is_avi_m(h_size, v_size, 64, 27))
    9600add4:	52800360 	mov	w0, #0x1b                  	// #27
    9600add8:	528007e3 	mov	w3, #0x3f                  	// #63
    9600addc:	1b007c20 	mul	w0, w1, w0
    9600ade0:	1b037c43 	mul	w3, w2, w3
    9600ade4:	6b03001f 	cmp	w0, w3
    9600ade8:	54000089 	b.ls	9600adf8 <mode_from_hdmi_mode+0xe4>  // b.plast
    9600adec:	0b021843 	add	w3, w2, w2, lsl #6
    9600adf0:	6b03001f 	cmp	w0, w3
    9600adf4:	540002c3 	b.cc	9600ae4c <mode_from_hdmi_mode+0x138>  // b.lo, b.ul, b.last
	else if (is_avi_m(h_size, v_size, 16, 9))
    9600adf8:	528001e0 	mov	w0, #0xf                   	// #15
    9600adfc:	0b010c23 	add	w3, w1, w1, lsl #3
    9600ae00:	1b007c40 	mul	w0, w2, w0
    9600ae04:	6b00007f 	cmp	w3, w0
    9600ae08:	54000089 	b.ls	9600ae18 <mode_from_hdmi_mode+0x104>  // b.plast
    9600ae0c:	0b021040 	add	w0, w2, w2, lsl #4
    9600ae10:	6b00007f 	cmp	w3, w0
    9600ae14:	54000203 	b.cc	9600ae54 <mode_from_hdmi_mode+0x140>  // b.lo, b.ul, b.last
	else if (is_avi_m(h_size, v_size, 4, 3))
    9600ae18:	0b010421 	add	w1, w1, w1, lsl #1
    9600ae1c:	0b020440 	add	w0, w2, w2, lsl #1
    9600ae20:	6b00003f 	cmp	w1, w0
    9600ae24:	54fffc29 	b.ls	9600ada8 <mode_from_hdmi_mode+0x94>  // b.plast
    9600ae28:	0b020842 	add	w2, w2, w2, lsl #2
    9600ae2c:	6b02003f 	cmp	w1, w2
	return NVDISP_MODE_AVI_M_NO_DATA;
    9600ae30:	1a9f27e0 	cset	w0, cc  // cc = lo, ul, last
	else
		modes->avi_m = calc_default_avi_m(modes->h_active, modes->v_active);
    9600ae34:	3900d260 	strb	w0, [x19, #52]
}
    9600ae38:	f9400bf3 	ldr	x19, [sp, #16]
    9600ae3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600ae40:	d65f03c0 	ret
		return NVDISP_MODE_AVI_M_256_135;
    9600ae44:	52800080 	mov	w0, #0x4                   	// #4
    9600ae48:	17fffffb 	b	9600ae34 <mode_from_hdmi_mode+0x120>
		return NVDISP_MODE_AVI_M_64_27;
    9600ae4c:	52800060 	mov	w0, #0x3                   	// #3
    9600ae50:	17fffff9 	b	9600ae34 <mode_from_hdmi_mode+0x120>
		return NVDISP_MODE_AVI_M_16_9;
    9600ae54:	52800040 	mov	w0, #0x2                   	// #2
    9600ae58:	17fffff7 	b	9600ae34 <mode_from_hdmi_mode+0x120>

000000009600ae5c <tegrabl_edid_get_mode>:

tegrabl_error_t tegrabl_edid_get_mode(struct nvdisp_mode *modes,
									  uint32_t module, uint32_t instance)
{
    9600ae5c:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    9600ae60:	910003fd 	mov	x29, sp
    9600ae64:	a90153f3 	stp	x19, x20, [sp, #16]
    9600ae68:	2a0103f4 	mov	w20, w1
    9600ae6c:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint8_t edid[EDID_BLOCK_SIZE] = {0};
    9600ae70:	52800001 	mov	w1, #0x0                   	// #0
{
    9600ae74:	2a0203f5 	mov	w21, w2
	uint8_t edid[EDID_BLOCK_SIZE] = {0};
    9600ae78:	d2801002 	mov	x2, #0x80                  	// #128
{
    9600ae7c:	aa0003f6 	mov	x22, x0
	uint8_t edid[EDID_BLOCK_SIZE] = {0};
    9600ae80:	9100c3a0 	add	x0, x29, #0x30
    9600ae84:	94007be9 	bl	96029e28 <memset>
	struct hdmi_mode *mode = NULL;
	tegrabl_error_t status = TEGRABL_NO_ERROR;

	mode = tegrabl_malloc(sizeof(struct hdmi_mode));
    9600ae88:	d2800880 	mov	x0, #0x44                  	// #68
    9600ae8c:	94006efb 	bl	96026a78 <tegrabl_malloc>
	if (mode == NULL) {
    9600ae90:	b5000160 	cbnz	x0, 9600aebc <tegrabl_edid_get_mode+0x60>
		pr_error("memory allocation failed!\n");
		status = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9600ae94:	52800074 	mov	w20, #0x3                   	// #3
		pr_error("memory allocation failed!\n");
    9600ae98:	d0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
		status = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9600ae9c:	72aa2a34 	movk	w20, #0x5151, lsl #16
		pr_error("memory allocation failed!\n");
    9600aea0:	9121ec00 	add	x0, x0, #0x87b
    9600aea4:	94005df3 	bl	96022670 <tegrabl_printf>
fail:
	if (mode != NULL) {
		tegrabl_free(mode);
	}
	return status;
}
    9600aea8:	2a1403e0 	mov	w0, w20
    9600aeac:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600aeb0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600aeb4:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9600aeb8:	d65f03c0 	ret
    9600aebc:	aa0003f3 	mov	x19, x0
	if (read_edid(edid, 0x0, module, instance) == TEGRABL_NO_ERROR) {
    9600aec0:	2a1503e3 	mov	w3, w21
    9600aec4:	2a1403e2 	mov	w2, w20
    9600aec8:	52800001 	mov	w1, #0x0                   	// #0
    9600aecc:	9100c3a0 	add	x0, x29, #0x30
    9600aed0:	97fffcfd 	bl	9600a2c4 <read_edid>
    9600aed4:	35000140 	cbnz	w0, 9600aefc <tegrabl_edid_get_mode+0xa0>
		status = parse_edid(edid, mode, module, instance);
    9600aed8:	2a1503e3 	mov	w3, w21
    9600aedc:	2a1403e2 	mov	w2, w20
    9600aee0:	aa1303e1 	mov	x1, x19
    9600aee4:	9100c3a0 	add	x0, x29, #0x30
    9600aee8:	97ffff4a 	bl	9600ac10 <parse_edid>
		if (status != TEGRABL_NO_ERROR) {
    9600aeec:	34000120 	cbz	w0, 9600af10 <tegrabl_edid_get_mode+0xb4>
			status = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    9600aef0:	5280c054 	mov	w20, #0x602                 	// #1538
    9600aef4:	72aa2a34 	movk	w20, #0x5151, lsl #16
    9600aef8:	1400000a 	b	9600af20 <tegrabl_edid_get_mode+0xc4>
		memcpy(mode, &s_1920_1080_16, sizeof(struct hdmi_mode));
    9600aefc:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600af00:	d2800882 	mov	x2, #0x44                  	// #68
    9600af04:	911b0021 	add	x1, x1, #0x6c0
    9600af08:	aa1303e0 	mov	x0, x19
    9600af0c:	94007c06 	bl	96029f24 <memcpy>
	mode_from_hdmi_mode(modes, mode);
    9600af10:	52800014 	mov	w20, #0x0                   	// #0
    9600af14:	aa1303e1 	mov	x1, x19
    9600af18:	aa1603e0 	mov	x0, x22
    9600af1c:	97ffff7e 	bl	9600ad14 <mode_from_hdmi_mode>
		tegrabl_free(mode);
    9600af20:	aa1303e0 	mov	x0, x19
    9600af24:	94006ee5 	bl	96026ab8 <tegrabl_free>
    9600af28:	17ffffe0 	b	9600aea8 <tegrabl_edid_get_mode+0x4c>

000000009600af2c <tegrabl_edid_is_panel_hdmi>:

bool tegrabl_edid_is_panel_hdmi(void)
{
	return is_panel_hdmi;
}
    9600af2c:	90000320 	adrp	x0, 9606e000 <__bss_start>
    9600af30:	39516400 	ldrb	w0, [x0, #1113]
    9600af34:	d65f03c0 	ret

000000009600af38 <get_best_mode>:
	}
}

void get_best_mode(struct monitor_data *monitor_info,
				   struct hdmi_mode *best_mode)
{
    9600af38:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    9600af3c:	910003fd 	mov	x29, sp
    9600af40:	a90153f3 	stp	x19, x20, [sp, #16]
    9600af44:	aa0003f4 	mov	x20, x0
    9600af48:	91095000 	add	x0, x0, #0x254
    9600af4c:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600af50:	aa0103f6 	mov	x22, x1
    9600af54:	52800881 	mov	w1, #0x44                  	// #68
    9600af58:	b94a4283 	ldr	w3, [x20, #2624]
    9600af5c:	a90363f7 	stp	x23, x24, [sp, #48]
    9600af60:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600af64:	a90573fb 	stp	x27, x28, [sp, #80]
    9600af68:	d503201f 	nop
    9600af6c:	9ba10063 	umaddl	x3, w3, w1, x0
	uint32_t v_total;
	bool mode_found = false;
	struct hdmi_mode m;
	struct hdmi_mode q;

	for (i = 0; i < monitor_info->n_modes; i++) {
    9600af70:	eb03001f 	cmp	x0, x3
    9600af74:	54000321 	b.ne	9600afd8 <get_best_mode+0xa0>  // b.any
				((monitor_info->modes[i].frequency / h_total) / v_total);
			monitor_info->modes[i].refresh <<= 16;
		}
	}

	q = s_640_480_1;
    9600af78:	d2800882 	mov	x2, #0x44                  	// #68
    9600af7c:	f00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600af80:	910323a0 	add	x0, x29, #0xc8
    9600af84:	91227021 	add	x1, x1, #0x89c
    9600af88:	91092293 	add	x19, x20, #0x248
    9600af8c:	94007be6 	bl	96029f24 <memcpy>
				m.frequency);

		/* skip unsupported modes */
		mode_found = false;
		for (j = 0; j < size_s_hdmi_modes; j++) {
			if (mode_is_equal(s_hdmi_modes[j], &m)) {
    9600af90:	f00001e0 	adrp	x0, 96049000 <default_srgb_lut+0xa28>
	for (i = 0; i < monitor_info->n_modes; i++) {
    9600af94:	52800015 	mov	w21, #0x0                   	// #0
			if (mode_is_equal(s_hdmi_modes[j], &m)) {
    9600af98:	9125a000 	add	x0, x0, #0x968
    9600af9c:	f9003fa0 	str	x0, [x29, #120]
	for (i = 0; i < monitor_info->n_modes; i++) {
    9600afa0:	b94a4280 	ldr	w0, [x20, #2624]
		m = monitor_info->modes[i];
    9600afa4:	d2800882 	mov	x2, #0x44                  	// #68
	for (i = 0; i < monitor_info->n_modes; i++) {
    9600afa8:	6b15001f 	cmp	w0, w21
    9600afac:	54000428 	b.hi	9600b030 <get_best_mode+0xf8>  // b.pmore
				q = m;
			}
		}
	}

	memcpy(best_mode, &q, sizeof(struct hdmi_mode));
    9600afb0:	910323a1 	add	x1, x29, #0xc8
    9600afb4:	aa1603e0 	mov	x0, x22
    9600afb8:	94007bdb 	bl	96029f24 <memcpy>
}
    9600afbc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600afc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600afc4:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600afc8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600afcc:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600afd0:	a8d17bfd 	ldp	x29, x30, [sp], #272
    9600afd4:	d65f03c0 	ret
		if (monitor_info->modes[i].refresh == 0) {
    9600afd8:	b9400001 	ldr	w1, [x0]
    9600afdc:	35000261 	cbnz	w1, 9600b028 <get_best_mode+0xf0>
			v_total = monitor_info->modes[i].timings.v_back_porch +
    9600afe0:	29459402 	ldp	w2, w5, [x0, #44]
			h_total = monitor_info->modes[i].timings.h_back_porch +
    9600afe4:	b9402401 	ldr	w1, [x0, #36]
    9600afe8:	b9401404 	ldr	w4, [x0, #20]
    9600afec:	0b020021 	add	w1, w1, w2
    9600aff0:	b9401c02 	ldr	w2, [x0, #28]
    9600aff4:	0b040042 	add	w2, w2, w4
			v_total = monitor_info->modes[i].timings.v_back_porch +
    9600aff8:	b9401804 	ldr	w4, [x0, #24]
			h_total = monitor_info->modes[i].timings.h_back_porch +
    9600affc:	0b020022 	add	w2, w1, w2
				((monitor_info->modes[i].frequency / h_total) / v_total);
    9600b000:	b9400401 	ldr	w1, [x0, #4]
    9600b004:	1ac20821 	udiv	w1, w1, w2
			v_total = monitor_info->modes[i].timings.v_back_porch +
    9600b008:	b9402002 	ldr	w2, [x0, #32]
    9600b00c:	0b040042 	add	w2, w2, w4
    9600b010:	b9402804 	ldr	w4, [x0, #40]
    9600b014:	0b050084 	add	w4, w4, w5
    9600b018:	0b040042 	add	w2, w2, w4
				((monitor_info->modes[i].frequency / h_total) / v_total);
    9600b01c:	1ac20821 	udiv	w1, w1, w2
			monitor_info->modes[i].refresh <<= 16;
    9600b020:	53103c21 	lsl	w1, w1, #16
    9600b024:	b9000001 	str	w1, [x0]
    9600b028:	91011000 	add	x0, x0, #0x44
    9600b02c:	17ffffd1 	b	9600af70 <get_best_mode+0x38>
		m = monitor_info->modes[i];
    9600b030:	aa1303e1 	mov	x1, x19
    9600b034:	910203a0 	add	x0, x29, #0x80
    9600b038:	94007bbb 	bl	96029f24 <memcpy>
    9600b03c:	29442267 	ldp	w7, w8, [x19, #32]
    9600b040:	290c23a7 	stp	w7, w8, [x29, #96]
    9600b044:	29452a69 	ldp	w9, w10, [x19, #40]
    9600b048:	290d2ba9 	stp	w9, w10, [x29, #104]
    9600b04c:	2947326b 	ldp	w11, w12, [x19, #56]
    9600b050:	290e33ab 	stp	w11, w12, [x29, #112]
    9600b054:	29406678 	ldp	w24, w25, [x19]
		pr_info("width = %d, height = %d, frequency = %d\n", m.width, m.height,
    9600b058:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
		m = monitor_info->modes[i];
    9600b05c:	2941ea77 	ldp	w23, w26, [x19, #12]
		pr_info("width = %d, height = %d, frequency = %d\n", m.width, m.height,
    9600b060:	2a1903e2 	mov	w2, w25
    9600b064:	91226400 	add	x0, x0, #0x899
    9600b068:	2a1803e1 	mov	w1, w24
		m = monitor_info->modes[i];
    9600b06c:	2943727b 	ldp	w27, w28, [x19, #24]
		pr_info("width = %d, height = %d, frequency = %d\n", m.width, m.height,
    9600b070:	2a1a03e3 	mov	w3, w26
    9600b074:	94005d7f 	bl	96022670 <tegrabl_printf>
		for (j = 0; j < size_s_hdmi_modes; j++) {
    9600b078:	d00001e0 	adrp	x0, 96049000 <default_srgb_lut+0xa28>
    9600b07c:	d2800002 	mov	x2, #0x0                   	// #0
    9600b080:	294c23a7 	ldp	w7, w8, [x29, #96]
    9600b084:	b94ac81e 	ldr	w30, [x0, #2760]
    9600b088:	294d2ba9 	ldp	w9, w10, [x29, #104]
    9600b08c:	294e33ab 	ldp	w11, w12, [x29, #112]
    9600b090:	6b0203df 	cmp	w30, w2
    9600b094:	54000088 	b.hi	9600b0a4 <get_best_mode+0x16c>  // b.pmore
	for (i = 0; i < monitor_info->n_modes; i++) {
    9600b098:	110006b5 	add	w21, w21, #0x1
    9600b09c:	91011273 	add	x19, x19, #0x44
    9600b0a0:	17ffffc0 	b	9600afa0 <get_best_mode+0x68>
			if (mode_is_equal(s_hdmi_modes[j], &m)) {
    9600b0a4:	f9403fa0 	ldr	x0, [x29, #120]
    9600b0a8:	f8627800 	ldr	x0, [x0, x2, lsl #3]
	if ((mode1->width == mode2->width) &&
    9600b0ac:	b9400012 	ldr	w18, [x0]
    9600b0b0:	6b18025f 	cmp	w18, w24
    9600b0b4:	54000721 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->height == mode2->height) &&
    9600b0b8:	b9400411 	ldr	w17, [x0, #4]
	if ((mode1->width == mode2->width) &&
    9600b0bc:	6b19023f 	cmp	w17, w25
    9600b0c0:	540006c1 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->frequency == mode2->frequency) &&
    9600b0c4:	b9401001 	ldr	w1, [x0, #16]
	    (mode1->height == mode2->height) &&
    9600b0c8:	6b1a003f 	cmp	w1, w26
    9600b0cc:	54000661 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.h_ref_to_sync == mode2->timings.h_ref_to_sync) &&
    9600b0d0:	b9401810 	ldr	w16, [x0, #24]
	    (mode1->frequency == mode2->frequency) &&
    9600b0d4:	6b1b021f 	cmp	w16, w27
    9600b0d8:	54000601 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.v_ref_to_sync == mode2->timings.v_ref_to_sync) &&
    9600b0dc:	b9401c0f 	ldr	w15, [x0, #28]
	    (mode1->timings.h_ref_to_sync == mode2->timings.h_ref_to_sync) &&
    9600b0e0:	6b1c01ff 	cmp	w15, w28
    9600b0e4:	540005a1 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.h_sync_width == mode2->timings.h_sync_width) &&
    9600b0e8:	b940200e 	ldr	w14, [x0, #32]
	    (mode1->timings.v_ref_to_sync == mode2->timings.v_ref_to_sync) &&
    9600b0ec:	6b0701df 	cmp	w14, w7
    9600b0f0:	54000541 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.v_sync_width == mode2->timings.v_sync_width) &&
    9600b0f4:	b940240d 	ldr	w13, [x0, #36]
	    (mode1->timings.h_sync_width == mode2->timings.h_sync_width) &&
    9600b0f8:	6b0801bf 	cmp	w13, w8
    9600b0fc:	540004e1 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.h_back_porch == mode2->timings.h_back_porch) &&
    9600b100:	b9402806 	ldr	w6, [x0, #40]
	    (mode1->timings.v_sync_width == mode2->timings.v_sync_width) &&
    9600b104:	6b0900df 	cmp	w6, w9
    9600b108:	54000481 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.v_back_porch == mode2->timings.v_back_porch) &&
    9600b10c:	b9402c05 	ldr	w5, [x0, #44]
	    (mode1->timings.h_back_porch == mode2->timings.h_back_porch) &&
    9600b110:	6b0a00bf 	cmp	w5, w10
    9600b114:	54000421 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.h_front_porch == mode2->timings.h_front_porch) &&
    9600b118:	b9403804 	ldr	w4, [x0, #56]
	    (mode1->timings.v_back_porch == mode2->timings.v_back_porch) &&
    9600b11c:	6b0b009f 	cmp	w4, w11
    9600b120:	540003c1 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
	    (mode1->timings.v_front_porch == mode2->timings.v_front_porch)) {
    9600b124:	b9403c03 	ldr	w3, [x0, #60]
	    (mode1->timings.h_front_porch == mode2->timings.h_front_porch) &&
    9600b128:	6b0c007f 	cmp	w3, w12
    9600b12c:	54000361 	b.ne	9600b198 <get_best_mode+0x260>  // b.any
				if ((!monitor_info->hf_vsdb_present) &&
    9600b130:	39691282 	ldrb	w2, [x20, #2628]
    9600b134:	350000a2 	cbnz	w2, 9600b148 <get_best_mode+0x210>
    9600b138:	529f9fe2 	mov	w2, #0xfcff                	// #64767
    9600b13c:	72a28862 	movk	w2, #0x1443, lsl #16
    9600b140:	6b02003f 	cmp	w1, w2
    9600b144:	54fffaa8 	b.hi	9600b098 <get_best_mode+0x160>  // b.pmore
		if (q.frequency < m.frequency) {
    9600b148:	b940dba2 	ldr	w2, [x29, #216]
					m.vic = s_hdmi_modes[j]->vic;
    9600b14c:	b9404000 	ldr	w0, [x0, #64]
		if (q.frequency < m.frequency) {
    9600b150:	6b01005f 	cmp	w2, w1
    9600b154:	540000a3 	b.cc	9600b168 <get_best_mode+0x230>  // b.lo, b.ul, b.last
		} else if (q.frequency == m.frequency) {
    9600b158:	54fffa01 	b.ne	9600b098 <get_best_mode+0x160>  // b.any
			if (q.refresh < m.refresh) {
    9600b15c:	b940d7a2 	ldr	w2, [x29, #212]
    9600b160:	6b17005f 	cmp	w2, w23
    9600b164:	54fff9a2 	b.cs	9600b098 <get_best_mode+0x160>  // b.hs, b.nlast
				q = m;
    9600b168:	d2800882 	mov	x2, #0x44                  	// #68
    9600b16c:	291047b2 	stp	w18, w17, [x29, #128]
    9600b170:	291187b7 	stp	w23, w1, [x29, #140]
    9600b174:	910203a1 	add	x1, x29, #0x80
    9600b178:	29133fb0 	stp	w16, w15, [x29, #152]
    9600b17c:	291437ae 	stp	w14, w13, [x29, #160]
    9600b180:	291517a6 	stp	w6, w5, [x29, #168]
    9600b184:	29170fa4 	stp	w4, w3, [x29, #184]
    9600b188:	b900c3a0 	str	w0, [x29, #192]
    9600b18c:	910323a0 	add	x0, x29, #0xc8
    9600b190:	94007b65 	bl	96029f24 <memcpy>
    9600b194:	17ffffc1 	b	9600b098 <get_best_mode+0x160>
    9600b198:	91000442 	add	x2, x2, #0x1
    9600b19c:	17ffffbd 	b	9600b090 <get_best_mode+0x158>

000000009600b1a0 <fdt32_to_cpu>:

#define _B(n)	((unsigned long long)((uint8_t *)&x)[n])
static inline uint32_t fdt32_to_cpu(uint32_t x)
{
	return (_B(0) << 24) | (_B(1) << 16) | (_B(2) << 8) | _B(3);
}
    9600b1a0:	5ac00800 	rev	w0, w0
    9600b1a4:	d65f03c0 	ret

000000009600b1a8 <fdt32_to_cpu>:
    9600b1a8:	5ac00800 	rev	w0, w0
    9600b1ac:	d65f03c0 	ret

000000009600b1b0 <fdt32_to_cpu>:
    9600b1b0:	5ac00800 	rev	w0, w0
    9600b1b4:	d65f03c0 	ret

000000009600b1b8 <fdt32_to_cpu>:
    9600b1b8:	5ac00800 	rev	w0, w0
    9600b1bc:	d65f03c0 	ret

000000009600b1c0 <check_status_of_node>:
	},
};

/*either status or status_bl should be "okay"*/
static tegrabl_error_t check_status_of_node(void *fdt, int32_t node_offset)
{
    9600b1c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	const char *status;

	status = fdt_getprop(fdt, node_offset, "bootloader-status", NULL);
    9600b1c4:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b1c8:	d2800003 	mov	x3, #0x0                   	// #0
    9600b1cc:	91237c42 	add	x2, x2, #0x8df
{
    9600b1d0:	910003fd 	mov	x29, sp
    9600b1d4:	a90153f3 	stp	x19, x20, [sp, #16]
    9600b1d8:	aa0003f3 	mov	x19, x0
    9600b1dc:	2a0103f4 	mov	w20, w1
	status = fdt_getprop(fdt, node_offset, "bootloader-status", NULL);
    9600b1e0:	94009b8a 	bl	96032008 <fdt_getprop>
	if (!status) {
    9600b1e4:	b4000120 	cbz	x0, 9600b208 <check_status_of_node+0x48>
		pr_debug("no bootloader-status property found\n");
	} else if (strcmp(status, "okay")) {
    9600b1e8:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b1ec:	9123c421 	add	x1, x1, #0x8f1
    9600b1f0:	94007c17 	bl	9602a24c <strcmp>
    9600b1f4:	35000260 	cbnz	w0, 9600b240 <check_status_of_node+0x80>
		pr_debug("status of this node is \"disabled\"\n");
		return TEGRABL_ERROR(TEGRABL_ERR_NO_ACCESS, 0);
	} else {
		return TEGRABL_NO_ERROR;
    9600b1f8:	52800000 	mov	w0, #0x0                   	// #0
		pr_debug("status of this node is \"disabled\"\n");
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	return TEGRABL_NO_ERROR;
}
    9600b1fc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600b200:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600b204:	d65f03c0 	ret
	status = fdt_getprop(fdt, node_offset, "status", NULL);
    9600b208:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b20c:	d2800003 	mov	x3, #0x0                   	// #0
    9600b210:	9123a842 	add	x2, x2, #0x8ea
    9600b214:	2a1403e1 	mov	w1, w20
    9600b218:	aa1303e0 	mov	x0, x19
    9600b21c:	94009b7b 	bl	96032008 <fdt_getprop>
	if (!status) {
    9600b220:	b4000140 	cbz	x0, 9600b248 <check_status_of_node+0x88>
	} else if (strcmp(status, "okay")) {
    9600b224:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b228:	9123c421 	add	x1, x1, #0x8f1
    9600b22c:	94007c08 	bl	9602a24c <strcmp>
    9600b230:	34fffe40 	cbz	w0, 9600b1f8 <check_status_of_node+0x38>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600b234:	52800040 	mov	w0, #0x2                   	// #2
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600b238:	72ac6c60 	movk	w0, #0x6363, lsl #16
    9600b23c:	17fffff0 	b	9600b1fc <check_status_of_node+0x3c>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_ACCESS, 0);
    9600b240:	52800180 	mov	w0, #0xc                   	// #12
    9600b244:	17fffffd 	b	9600b238 <check_status_of_node+0x78>
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600b248:	528001a0 	mov	w0, #0xd                   	// #13
    9600b24c:	17fffffb 	b	9600b238 <check_status_of_node+0x78>

000000009600b250 <get_offset_by_phandle>:
}

/* from parent node, get the phandle of node pointed to by nodename
  * and then gets that handle's parent-node-offset */
static tegrabl_error_t get_offset_by_phandle(void *fdt, int32_t parent_off, char *nodename, int32_t *off)
{
    9600b250:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600b254:	910003fd 	mov	x29, sp
    9600b258:	a90153f3 	stp	x19, x20, [sp, #16]
    9600b25c:	aa0003f4 	mov	x20, x0
    9600b260:	f90013f5 	str	x21, [sp, #32]
    9600b264:	aa0203f3 	mov	x19, x2
    9600b268:	aa0303f5 	mov	x21, x3
	int32_t offset;
	uint32_t phandle;
	const uint32_t *temp;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	temp = fdt_getprop(fdt, parent_off, nodename, NULL);
    9600b26c:	d2800003 	mov	x3, #0x0                   	// #0
    9600b270:	94009b66 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600b274:	b4000140 	cbz	x0, 9600b29c <get_offset_by_phandle+0x4c>
		phandle = fdt32_to_cpu(*temp);
    9600b278:	b9400000 	ldr	w0, [x0]
    9600b27c:	97ffffc9 	bl	9600b1a0 <fdt32_to_cpu>
		pr_error("invalid phandle for %s\n", nodename);
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
		goto fail;
	}

	offset = fdt_node_offset_by_phandle(fdt, phandle);
    9600b280:	2a0003e1 	mov	w1, w0
    9600b284:	aa1403e0 	mov	x0, x20
    9600b288:	94009cbe 	bl	96032580 <fdt_node_offset_by_phandle>
    9600b28c:	2a0003f3 	mov	w19, w0
	if (offset < 0) {
    9600b290:	36f80140 	tbz	w0, #31, 9600b2b8 <get_offset_by_phandle+0x68>
		pr_debug("invalid node offset\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 7);
    9600b294:	5280e1a0 	mov	w0, #0x70d                 	// #1805
    9600b298:	14000006 	b	9600b2b0 <get_offset_by_phandle+0x60>
		pr_error("invalid phandle for %s\n", nodename);
    9600b29c:	aa1303e1 	mov	x1, x19
    9600b2a0:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b2a4:	9123d800 	add	x0, x0, #0x8f6
    9600b2a8:	94005cf2 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9600b2ac:	52804040 	mov	w0, #0x202                 	// #514
		goto fail;
	}
	err = check_status_of_node(fdt, offset);
	if (err != TEGRABL_NO_ERROR) {
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    9600b2b0:	72ac6c60 	movk	w0, #0x6363, lsl #16
		goto fail;
	}
	*off = offset;

fail:
	return err;
    9600b2b4:	14000006 	b	9600b2cc <get_offset_by_phandle+0x7c>
	err = check_status_of_node(fdt, offset);
    9600b2b8:	2a0003e1 	mov	w1, w0
    9600b2bc:	aa1403e0 	mov	x0, x20
    9600b2c0:	97ffffc0 	bl	9600b1c0 <check_status_of_node>
	if (err != TEGRABL_NO_ERROR) {
    9600b2c4:	350000c0 	cbnz	w0, 9600b2dc <get_offset_by_phandle+0x8c>
	*off = offset;
    9600b2c8:	b90002b3 	str	w19, [x21]
}
    9600b2cc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600b2d0:	f94013f5 	ldr	x21, [sp, #32]
    9600b2d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600b2d8:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    9600b2dc:	52806040 	mov	w0, #0x302                 	// #770
    9600b2e0:	17fffff4 	b	9600b2b0 <get_offset_by_phandle+0x60>

000000009600b2e4 <tegrabl_display_get_du_list>:

/*generate a linked list of enabled display uints & read their platform data*/
tegrabl_error_t tegrabl_display_get_du_list(
	struct tegrabl_display_list **du_list)
{
    9600b2e4:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    9600b2e8:	910003fd 	mov	x29, sp
    9600b2ec:	a90153f3 	stp	x19, x20, [sp, #16]
    9600b2f0:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600b2f4:	a90363f7 	stp	x23, x24, [sp, #48]
    9600b2f8:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600b2fc:	a90573fb 	stp	x27, x28, [sp, #80]
    9600b300:	f9003fa0 	str	x0, [x29, #120]
	struct offset *off;
	struct tegrabl_display_pdata *pdata = NULL;
	struct tegrabl_display_list *du_list_l = NULL;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	off = tegrabl_malloc(sizeof(struct offset));
    9600b304:	d2800300 	mov	x0, #0x18                  	// #24
	void *fdt = NULL;
    9600b308:	f90053bf 	str	xzr, [x29, #160]
	off = tegrabl_malloc(sizeof(struct offset));
    9600b30c:	94006ddb 	bl	96026a78 <tegrabl_malloc>
	if (!off) {
    9600b310:	b50000e0 	cbnz	x0, 9600b32c <tegrabl_display_get_du_list+0x48>
		pr_error("memory allocation failed\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 2);
    9600b314:	52804076 	mov	w22, #0x203                 	// #515
		pr_error("memory allocation failed\n");
    9600b318:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b31c:	9127f000 	add	x0, x0, #0x9fc
    9600b320:	94005cd4 	bl	96022670 <tegrabl_printf>
		}
	}

	if (du_list_l == NULL) {
		pr_error("no valid display unit config found in dtb\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600b324:	72ac6c76 	movk	w22, #0x6363, lsl #16
    9600b328:	1400000a 	b	9600b350 <tegrabl_display_get_du_list+0x6c>
    9600b32c:	aa0003f3 	mov	x19, x0
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9600b330:	910283a1 	add	x1, x29, #0xa0
    9600b334:	52800000 	mov	w0, #0x0                   	// #0
    9600b338:	940096c8 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
    9600b33c:	2a0003f6 	mov	w22, w0
	if (err != TEGRABL_NO_ERROR) {
    9600b340:	34000180 	cbz	w0, 9600b370 <tegrabl_display_get_du_list+0x8c>
		pr_error("Failed to get bl-dtb handle\n");
    9600b344:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b348:	91286400 	add	x0, x0, #0xa19
    9600b34c:	94005cc9 	bl	96022670 <tegrabl_printf>
		return TEGRABL_NO_ERROR;
	}

fail:
	return err;
}
    9600b350:	2a1603e0 	mov	w0, w22
    9600b354:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600b358:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600b35c:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600b360:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600b364:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600b368:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9600b36c:	d65f03c0 	ret
	off->host1x = fdt_node_offset_by_compatible(fdt, -1, HOST1X_NODE);
    9600b370:	f94053a0 	ldr	x0, [x29, #160]
    9600b374:	90000182 	adrp	x2, 9603b000 <tt_level+0x328>
    9600b378:	12800001 	mov	w1, #0xffffffff            	// #-1
    9600b37c:	912ec042 	add	x2, x2, #0xbb0
    9600b380:	94009ccc 	bl	960326b0 <fdt_node_offset_by_compatible>
    9600b384:	b9000660 	str	w0, [x19, #4]
	if (off->host1x < 0) {
    9600b388:	36f800c0 	tbz	w0, #31, 9600b3a0 <tegrabl_display_get_du_list+0xbc>
		pr_error("error while finding host1x node\n");
    9600b38c:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 6);
    9600b390:	5280c1b6 	mov	w22, #0x60d                 	// #1549
		pr_error("error while finding host1x node\n");
    9600b394:	9128e400 	add	x0, x0, #0xa39
    9600b398:	94005cb6 	bl	96022670 <tegrabl_printf>
    9600b39c:	17ffffe2 	b	9600b324 <tegrabl_display_get_du_list+0x40>
		off->nvdisp = fdt_node_offset_by_compatible(fdt, temp_offset, NVDISPLAY_NODE);
    9600b3a0:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b3a4:	91297400 	add	x0, x0, #0xa5d
	int32_t dpaux_instance = -1;
    9600b3a8:	12800019 	mov	w25, #0xffffffff            	// #-1
		off->nvdisp = fdt_node_offset_by_compatible(fdt, temp_offset, NVDISPLAY_NODE);
    9600b3ac:	f9003ba0 	str	x0, [x29, #112]
	int32_t temp_offset = -1;
    9600b3b0:	2a1903f7 	mov	w23, w25
		err = get_offset_by_phandle(fdt, off->nvdisp, "nvidia,dc-connector", &(off->out));
    9600b3b4:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b3b8:	912adc00 	add	x0, x0, #0xab7
	struct tegrabl_display_list *du_list_l = NULL;
    9600b3bc:	d2800018 	mov	x24, #0x0                   	// #0
		err = get_offset_by_phandle(fdt, off->nvdisp, "nvidia,dc-connector", &(off->out));
    9600b3c0:	f90037a0 	str	x0, [x29, #104]
	for (uint32_t i = 0;; i++) {
    9600b3c4:	5280001c 	mov	w28, #0x0                   	// #0
		err = get_offset_by_phandle(fdt, off->out, "nvidia,active-panel", &(off->display));
    9600b3c8:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
	int32_t sor_instance = -1;
    9600b3cc:	b9008bb9 	str	w25, [x29, #136]
		err = get_offset_by_phandle(fdt, off->out, "nvidia,active-panel", &(off->display));
    9600b3d0:	912b2c00 	add	x0, x0, #0xacb
    9600b3d4:	f90033a0 	str	x0, [x29, #96]
		off->nvdisp = fdt_node_offset_by_compatible(fdt, temp_offset, NVDISPLAY_NODE);
    9600b3d8:	f9403ba2 	ldr	x2, [x29, #112]
    9600b3dc:	2a1703e1 	mov	w1, w23
    9600b3e0:	f94053a0 	ldr	x0, [x29, #160]
    9600b3e4:	94009cb3 	bl	960326b0 <fdt_node_offset_by_compatible>
    9600b3e8:	b9000a60 	str	w0, [x19, #8]
    9600b3ec:	2a0003f7 	mov	w23, w0
		if ((i == 0) && (off->nvdisp < 0)) {
    9600b3f0:	350000fc 	cbnz	w28, 9600b40c <tegrabl_display_get_du_list+0x128>
    9600b3f4:	36f80200 	tbz	w0, #31, 9600b434 <tegrabl_display_get_du_list+0x150>
			pr_error("cannot find any nvdisp node\n");
    9600b3f8:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 7);
    9600b3fc:	5280e1b6 	mov	w22, #0x70d                 	// #1805
			pr_error("cannot find any nvdisp node\n");
    9600b400:	9129c000 	add	x0, x0, #0xa70
    9600b404:	94005c9b 	bl	96022670 <tegrabl_printf>
    9600b408:	17ffffc7 	b	9600b324 <tegrabl_display_get_du_list+0x40>
		} else if ((i > 0) && (off->nvdisp < 0)) {
    9600b40c:	36f80140 	tbz	w0, #31, 9600b434 <tegrabl_display_get_du_list+0x150>
			pr_error("cannot find any other nvdisp nodes\n");
    9600b410:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b414:	912a4000 	add	x0, x0, #0xa90
    9600b418:	94005c96 	bl	96022670 <tegrabl_printf>
	if (du_list_l == NULL) {
    9600b41c:	b50026b8 	cbnz	x24, 9600b8f0 <tegrabl_display_get_du_list+0x60c>
		pr_error("no valid display unit config found in dtb\n");
    9600b420:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600b424:	528001b6 	mov	w22, #0xd                   	// #13
		pr_error("no valid display unit config found in dtb\n");
    9600b428:	91372400 	add	x0, x0, #0xdc9
    9600b42c:	94005c91 	bl	96022670 <tegrabl_printf>
    9600b430:	17ffffbd 	b	9600b324 <tegrabl_display_get_du_list+0x40>
		err = check_status_of_node(fdt, off->nvdisp);
    9600b434:	f94053a0 	ldr	x0, [x29, #160]
    9600b438:	2a1703e1 	mov	w1, w23
    9600b43c:	97ffff61 	bl	9600b1c0 <check_status_of_node>
		if (err != TEGRABL_NO_ERROR) {
    9600b440:	35000780 	cbnz	w0, 9600b530 <tegrabl_display_get_du_list+0x24c>
		err = get_offset_by_phandle(fdt, off->nvdisp, "nvidia,dc-connector", &(off->out));
    9600b444:	b9400a61 	ldr	w1, [x19, #8]
    9600b448:	aa1303e3 	mov	x3, x19
    9600b44c:	f94037a2 	ldr	x2, [x29, #104]
    9600b450:	f94053a0 	ldr	x0, [x29, #160]
    9600b454:	97ffff7f 	bl	9600b250 <get_offset_by_phandle>
		if (err != TEGRABL_NO_ERROR) {
    9600b458:	350006c0 	cbnz	w0, 9600b530 <tegrabl_display_get_du_list+0x24c>
		err = get_offset_by_phandle(fdt, off->out, "nvidia,active-panel", &(off->display));
    9600b45c:	b9400261 	ldr	w1, [x19]
    9600b460:	91003263 	add	x3, x19, #0xc
    9600b464:	f94033a2 	ldr	x2, [x29, #96]
    9600b468:	f94053a0 	ldr	x0, [x29, #160]
    9600b46c:	97ffff79 	bl	9600b250 <get_offset_by_phandle>
		if (err != TEGRABL_NO_ERROR) {
    9600b470:	35000600 	cbnz	w0, 9600b530 <tegrabl_display_get_du_list+0x24c>
		off->disp_out = fdt_subnode_offset(fdt, off->display, "disp-default-out");
    9600b474:	b9400e61 	ldr	w1, [x19, #12]
    9600b478:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b47c:	f94053a0 	ldr	x0, [x29, #160]
    9600b480:	912b7c42 	add	x2, x2, #0xadf
    9600b484:	94009a15 	bl	96031cd8 <fdt_subnode_offset>
    9600b488:	b9001260 	str	w0, [x19, #16]
		if (off->disp_out < 0) {
    9600b48c:	37f80520 	tbnz	w0, #31, 9600b530 <tegrabl_display_get_du_list+0x24c>
		temp = fdt_getprop(fdt, off->disp_out, "nvidia,out-type", NULL);
    9600b490:	2a0003e1 	mov	w1, w0
    9600b494:	f94053a0 	ldr	x0, [x29, #160]
    9600b498:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b49c:	d2800003 	mov	x3, #0x0                   	// #0
    9600b4a0:	912bc042 	add	x2, x2, #0xaf0
    9600b4a4:	94009ad9 	bl	96032008 <fdt_getprop>
		if (temp != NULL) {
    9600b4a8:	b40003e0 	cbz	x0, 9600b524 <tegrabl_display_get_du_list+0x240>
			du_type = fdt32_to_cpu(*temp);
    9600b4ac:	b9400000 	ldr	w0, [x0]
    9600b4b0:	97ffff3c 	bl	9600b1a0 <fdt32_to_cpu>
		if ((du_type == DISPLAY_OUT_HDMI) || (du_type == DISPLAY_OUT_DP)) {
    9600b4b4:	121e781b 	and	w27, w0, #0xfffffffd
			du_type = fdt32_to_cpu(*temp);
    9600b4b8:	2a0003fa 	mov	w26, w0
		if ((du_type == DISPLAY_OUT_HDMI) || (du_type == DISPLAY_OUT_DP)) {
    9600b4bc:	7100077f 	cmp	w27, #0x1
    9600b4c0:	540003c0 	b.eq	9600b538 <tegrabl_display_get_du_list+0x254>  // b.none
		clk = fdt_getprop(fdt, off->disp_out, "nvidia,out-parent-clk", NULL);
    9600b4c4:	b9401261 	ldr	w1, [x19, #16]
    9600b4c8:	d2800003 	mov	x3, #0x0                   	// #0
    9600b4cc:	f94053a0 	ldr	x0, [x29, #160]
    9600b4d0:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b4d4:	912f3442 	add	x2, x2, #0xbcd
    9600b4d8:	94009acc 	bl	96032008 <fdt_getprop>
    9600b4dc:	aa0003f4 	mov	x20, x0
		if (clk != NULL) {
    9600b4e0:	b4000700 	cbz	x0, 9600b5c0 <tegrabl_display_get_du_list+0x2dc>
			if (!strcmp(clk, "plld2")) {
    9600b4e4:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b4e8:	912f8c21 	add	x1, x1, #0xbe3
    9600b4ec:	94007b58 	bl	9602a24c <strcmp>
    9600b4f0:	340006e0 	cbz	w0, 9600b5cc <tegrabl_display_get_du_list+0x2e8>
			} else if (!strcmp(clk, "plld3")) {
    9600b4f4:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b4f8:	aa1403e0 	mov	x0, x20
    9600b4fc:	912fa421 	add	x1, x1, #0xbe9
    9600b500:	94007b53 	bl	9602a24c <strcmp>
    9600b504:	340008a0 	cbz	w0, 9600b618 <tegrabl_display_get_du_list+0x334>
			} else if (!strcmp(clk, "pll_d")) {
    9600b508:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b50c:	aa1403e0 	mov	x0, x20
    9600b510:	912fbc21 	add	x1, x1, #0xbef
    9600b514:	94007b4e 	bl	9602a24c <strcmp>
    9600b518:	350000c0 	cbnz	w0, 9600b530 <tegrabl_display_get_du_list+0x24c>
				clk_src = TEGRABL_CLK_SRC_PLLD_OUT1;
    9600b51c:	528001e0 	mov	w0, #0xf                   	// #15
    9600b520:	1400002c 	b	9600b5d0 <tegrabl_display_get_du_list+0x2ec>
			pr_error("error in getting \"nvidia,out-type\" property\n");
    9600b524:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b528:	912c0000 	add	x0, x0, #0xb00
				pr_error("error in getting \"nvidia,sor-ctrlnum\" property\n");
    9600b52c:	94005c51 	bl	96022670 <tegrabl_printf>
	for (uint32_t i = 0;; i++) {
    9600b530:	1100079c 	add	w28, w28, #0x1
		off->nvdisp = fdt_node_offset_by_compatible(fdt, temp_offset, NVDISPLAY_NODE);
    9600b534:	17ffffa9 	b	9600b3d8 <tegrabl_display_get_du_list+0xf4>
			temp = fdt_getprop(fdt, off->out, "nvidia,sor-ctrlnum", NULL);
    9600b538:	b9400261 	ldr	w1, [x19]
    9600b53c:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b540:	f94053a0 	ldr	x0, [x29, #160]
    9600b544:	d2800003 	mov	x3, #0x0                   	// #0
    9600b548:	912cc042 	add	x2, x2, #0xb30
    9600b54c:	94009aaf 	bl	96032008 <fdt_getprop>
			if (temp != NULL) {
    9600b550:	b40002c0 	cbz	x0, 9600b5a8 <tegrabl_display_get_du_list+0x2c4>
				sor_instance = fdt32_to_cpu(*temp);
    9600b554:	b9400000 	ldr	w0, [x0]
    9600b558:	97ffff12 	bl	9600b1a0 <fdt32_to_cpu>
    9600b55c:	b9008ba0 	str	w0, [x29, #136]
			err = get_offset_by_phandle(fdt, off->out, "nvidia,dpaux", &(off->dpaux));
    9600b560:	b9400261 	ldr	w1, [x19]
    9600b564:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b568:	f94053a0 	ldr	x0, [x29, #160]
    9600b56c:	91005263 	add	x3, x19, #0x14
    9600b570:	912d0c42 	add	x2, x2, #0xb43
    9600b574:	97ffff37 	bl	9600b250 <get_offset_by_phandle>
			if (err != TEGRABL_NO_ERROR) {
    9600b578:	35fffdc0 	cbnz	w0, 9600b530 <tegrabl_display_get_du_list+0x24c>
			temp = fdt_getprop(fdt, off->dpaux, "nvidia,dpaux-ctrlnum", NULL);
    9600b57c:	b9401661 	ldr	w1, [x19, #20]
    9600b580:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b584:	f94053a0 	ldr	x0, [x29, #160]
    9600b588:	d2800003 	mov	x3, #0x0                   	// #0
    9600b58c:	912e0c42 	add	x2, x2, #0xb83
    9600b590:	94009a9e 	bl	96032008 <fdt_getprop>
			if (temp != NULL) {
    9600b594:	b4000100 	cbz	x0, 9600b5b4 <tegrabl_display_get_du_list+0x2d0>
				dpaux_instance = fdt32_to_cpu(*temp);
    9600b598:	b9400000 	ldr	w0, [x0]
    9600b59c:	97ffff01 	bl	9600b1a0 <fdt32_to_cpu>
    9600b5a0:	2a0003f9 	mov	w25, w0
    9600b5a4:	17ffffc8 	b	9600b4c4 <tegrabl_display_get_du_list+0x1e0>
				pr_error("error in getting \"nvidia,sor-ctrlnum\" property\n");
    9600b5a8:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b5ac:	912d4000 	add	x0, x0, #0xb50
    9600b5b0:	17ffffdf 	b	9600b52c <tegrabl_display_get_du_list+0x248>
				pr_error("error in getting \"nvidia,dpaux-ctrlnum\" property\n");
    9600b5b4:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b5b8:	912e6000 	add	x0, x0, #0xb98
    9600b5bc:	17ffffdc 	b	9600b52c <tegrabl_display_get_du_list+0x248>
			pr_error("error in getting \"nvidia,out-parent-clk\" property\n");
    9600b5c0:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b5c4:	912fd400 	add	x0, x0, #0xbf5
    9600b5c8:	17ffffd9 	b	9600b52c <tegrabl_display_get_du_list+0x248>
				clk_src = TEGRABL_CLK_SRC_PLLD2_OUT0;
    9600b5cc:	52800200 	mov	w0, #0x10                  	// #16
				clk_src = TEGRABL_CLK_SRC_PLLD_OUT1;
    9600b5d0:	b9008fa0 	str	w0, [x29, #140]
	pdata_l = tegrabl_malloc(sizeof(struct tegrabl_display_pdata));
    9600b5d4:	d2801600 	mov	x0, #0xb0                  	// #176
		err = tegrabl_display_get_pdata(fdt, off, du_type, &pdata, dpaux_instance);
    9600b5d8:	f94053b5 	ldr	x21, [x29, #160]
	pdata_l = tegrabl_malloc(sizeof(struct tegrabl_display_pdata));
    9600b5dc:	94006d27 	bl	96026a78 <tegrabl_malloc>
    9600b5e0:	aa0003f4 	mov	x20, x0
	if (!pdata_l) {
    9600b5e4:	b50001e0 	cbnz	x0, 9600b620 <tegrabl_display_get_du_list+0x33c>
		pr_error("memory allocation failed\n");
    9600b5e8:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b5ec:	9127f000 	add	x0, x0, #0x9fc
		pr_info("DP is not connected\n");
    9600b5f0:	94005c20 	bl	96022670 <tegrabl_printf>
	pr_error("%s, failed to parse dtb settings\n", __func__);
    9600b5f4:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b5f8:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b5fc:	91231421 	add	x1, x1, #0x8c5
    9600b600:	91369000 	add	x0, x0, #0xda4
    9600b604:	94005c1b 	bl	96022670 <tegrabl_printf>
	if (pdata_l) {
    9600b608:	b4fff954 	cbz	x20, 9600b530 <tegrabl_display_get_du_list+0x24c>
		tegrabl_free(pdata_l);
    9600b60c:	aa1403e0 	mov	x0, x20
    9600b610:	94006d2a 	bl	96026ab8 <tegrabl_free>
    9600b614:	17ffffc7 	b	9600b530 <tegrabl_display_get_du_list+0x24c>
				clk_src = TEGRABL_CLK_SRC_PLLD3_OUT0;
    9600b618:	52800220 	mov	w0, #0x11                  	// #17
    9600b61c:	17ffffed 	b	9600b5d0 <tegrabl_display_get_du_list+0x2ec>
	memset(pdata_l, 0, sizeof(struct tegrabl_display_pdata));
    9600b620:	d2801602 	mov	x2, #0xb0                  	// #176
    9600b624:	52800001 	mov	w1, #0x0                   	// #0
    9600b628:	94007a00 	bl	96029e28 <memset>
	parse_nvdisp_dtb_settings(fdt, off->nvdisp, pdata_l);
    9600b62c:	b9400a61 	ldr	w1, [x19, #8]
    9600b630:	aa1403e2 	mov	x2, x20
    9600b634:	aa1503e0 	mov	x0, x21
    9600b638:	940003b8 	bl	9600c518 <parse_nvdisp_dtb_settings>
	if (du_type == DISPLAY_OUT_DSI) {
    9600b63c:	71000b5f 	cmp	w26, #0x2
    9600b640:	54000081 	b.ne	9600b650 <tegrabl_display_get_du_list+0x36c>  // b.any
		pr_error("dsi not supported yet\n");
    9600b644:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b648:	9130ac00 	add	x0, x0, #0xc2b
    9600b64c:	17ffffe9 	b	9600b5f0 <tegrabl_display_get_du_list+0x30c>
	} else if (du_type == DISPLAY_OUT_DP) {
    9600b650:	71000f5f 	cmp	w26, #0x3
    9600b654:	54000e41 	b.ne	9600b81c <tegrabl_display_get_du_list+0x538>  // b.any
	property = fdt_get_property(fdt, off->display, "nvidia,is_ext_dp_panel", NULL);
    9600b658:	b9400e61 	ldr	w1, [x19, #12]
    9600b65c:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b660:	d2800003 	mov	x3, #0x0                   	// #0
    9600b664:	91311442 	add	x2, x2, #0xc45
    9600b668:	aa1503e0 	mov	x0, x21
    9600b66c:	94009a36 	bl	96031f44 <fdt_get_property>
	if (property != NULL) {
    9600b670:	b40003c0 	cbz	x0, 9600b6e8 <tegrabl_display_get_du_list+0x404>
		pdata_dp->dp_dtb.is_ext_dp_panel = fdt32_to_cpu(*(property->data32));
    9600b674:	b9400c00 	ldr	w0, [x0, #12]
    9600b678:	97fffeca 	bl	9600b1a0 <fdt32_to_cpu>
    9600b67c:	b9003a80 	str	w0, [x20, #56]
		if (pdata_dp->dp_dtb.is_ext_dp_panel == 1) {
    9600b680:	b9403a80 	ldr	w0, [x20, #56]
    9600b684:	9100e29b 	add	x27, x20, #0x38
			err = parse_dp_regulator_settings(fdt, off->nvdisp, &(pdata_dp->dp_dtb));
    9600b688:	aa1b03e2 	mov	x2, x27
    9600b68c:	b9400a61 	ldr	w1, [x19, #8]
		if (pdata_dp->dp_dtb.is_ext_dp_panel == 1) {
    9600b690:	7100041f 	cmp	w0, #0x1
			err = parse_dp_regulator_settings(fdt, off->nvdisp, &(pdata_dp->dp_dtb));
    9600b694:	aa1503e0 	mov	x0, x21
		if (pdata_dp->dp_dtb.is_ext_dp_panel == 1) {
    9600b698:	54000321 	b.ne	9600b6fc <tegrabl_display_get_du_list+0x418>  // b.any
			err = parse_dp_regulator_settings(fdt, off->nvdisp, &(pdata_dp->dp_dtb));
    9600b69c:	9400032d 	bl	9600c350 <parse_dp_regulator_settings>
			if (err != TEGRABL_NO_ERROR) {
    9600b6a0:	35fffaa0 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
			err = tegrabl_display_init_regulator(DISPLAY_OUT_DP, pdata_dp);
    9600b6a4:	aa1403e1 	mov	x1, x20
    9600b6a8:	52800060 	mov	w0, #0x3                   	// #3
    9600b6ac:	94000500 	bl	9600caac <tegrabl_display_init_regulator>
			if (err != TEGRABL_NO_ERROR) {
    9600b6b0:	35fffa20 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
	err = tegrabl_dpaux_init_aux(dpaux_instance, &hdpaux);
    9600b6b4:	9102a3a1 	add	x1, x29, #0xa8
    9600b6b8:	2a1903e0 	mov	w0, w25
    9600b6bc:	94007774 	bl	9602948c <tegrabl_dpaux_init_aux>
	if (err != TEGRABL_NO_ERROR) {
    9600b6c0:	35fff9a0 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
	start_time = tegrabl_get_timestamp_ms();
    9600b6c4:	94005172 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    9600b6c8:	f90043a0 	str	x0, [x29, #128]
		err = tegrabl_dpaux_hpd_status(hdpaux, &cur_hpd);
    9600b6cc:	f94057a0 	ldr	x0, [x29, #168]
    9600b6d0:	91027fa1 	add	x1, x29, #0x9f
    9600b6d4:	94007799 	bl	96029538 <tegrabl_dpaux_hpd_status>
		if (err != TEGRABL_NO_ERROR) {
    9600b6d8:	340001c0 	cbz	w0, 9600b710 <tegrabl_display_get_du_list+0x42c>
			pr_error("DP hpd status read failed\n");
    9600b6dc:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b6e0:	9132a400 	add	x0, x0, #0xca9
    9600b6e4:	17ffffc3 	b	9600b5f0 <tegrabl_display_get_du_list+0x30c>
		pdata_dp->dp_dtb.is_ext_dp_panel = 0; /*default to internal panel*/
    9600b6e8:	b9003a9f 	str	wzr, [x20, #56]
		pr_warn("nvidia,is_ext_dp_panel property not found, set default as internal panel\n");
    9600b6ec:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b6f0:	91317000 	add	x0, x0, #0xc5c
    9600b6f4:	94005bdf 	bl	96022670 <tegrabl_printf>
    9600b6f8:	17ffffe2 	b	9600b680 <tegrabl_display_get_du_list+0x39c>
			err = parse_edp_regulator_settings(fdt, off->nvdisp, &(pdata_dp->dp_dtb));
    9600b6fc:	94000355 	bl	9600c450 <parse_edp_regulator_settings>
			if (err != TEGRABL_NO_ERROR) {
    9600b700:	35fff7a0 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
			err = tegrabl_display_init_regulator(DISPLAY_OUT_EDP, pdata_dp);
    9600b704:	aa1403e1 	mov	x1, x20
    9600b708:	52800080 	mov	w0, #0x4                   	// #4
    9600b70c:	17ffffe8 	b	9600b6ac <tegrabl_display_get_du_list+0x3c8>
		elapsed_time = tegrabl_get_timestamp_ms() - start_time;
    9600b710:	9400515f 	bl	9601fc8c <tegrabl_get_timestamp_ms>
	} while ((elapsed_time < HPD_TIMEOUT_MS) && !cur_hpd);
    9600b714:	f94043a1 	ldr	x1, [x29, #128]
    9600b718:	eb00003f 	cmp	x1, x0
    9600b71c:	39427fa0 	ldrb	w0, [x29, #159]
    9600b720:	54000041 	b.ne	9600b728 <tegrabl_display_get_du_list+0x444>  // b.any
    9600b724:	34fffd40 	cbz	w0, 9600b6cc <tegrabl_display_get_du_list+0x3e8>
	if (!cur_hpd) {
    9600b728:	35000080 	cbnz	w0, 9600b738 <tegrabl_display_get_du_list+0x454>
		pr_info("DP is not connected\n");
    9600b72c:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b730:	91331c00 	add	x0, x0, #0xcc7
    9600b734:	17ffffaf 	b	9600b5f0 <tegrabl_display_get_du_list+0x30c>
		pr_info("DP is connected\n");
    9600b738:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b73c:	91337c00 	add	x0, x0, #0xcdf
    9600b740:	94005bcc 	bl	96022670 <tegrabl_printf>
		tegrabl_display_parse_xbar(fdt, off->out, &(pdata_l->sor_dtb));
    9600b744:	b9400261 	ldr	w1, [x19]
    9600b748:	91024282 	add	x2, x20, #0x90
    9600b74c:	aa1503e0 	mov	x0, x21
    9600b750:	94000432 	bl	9600c818 <tegrabl_display_parse_xbar>
	err = parse_dp_dtb_settings(fdt, off->display, pdata_dp);
    9600b754:	b9400e61 	ldr	w1, [x19, #12]
    9600b758:	aa1b03e2 	mov	x2, x27
    9600b75c:	aa1503e0 	mov	x0, x21
    9600b760:	940001c1 	bl	9600be64 <parse_dp_dtb_settings>
	if (err != TEGRABL_NO_ERROR) {
    9600b764:	34000080 	cbz	w0, 9600b774 <tegrabl_display_get_du_list+0x490>
		pr_warn("dp lt-settings not read properly from dtb, we can still continue\n");
    9600b768:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b76c:	9133cc00 	add	x0, x0, #0xcf3
    9600b770:	94005bc0 	bl	96022670 <tegrabl_printf>
	prod_offset = fdt_subnode_offset(fdt, off->out, "prod-settings");
    9600b774:	b9400261 	ldr	w1, [x19]
    9600b778:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b77c:	aa1503e0 	mov	x0, x21
    9600b780:	9134e042 	add	x2, x2, #0xd38
    9600b784:	94009955 	bl	96031cd8 <fdt_subnode_offset>
    9600b788:	2a0003fb 	mov	w27, w0
	if (prod_offset < 0) {
    9600b78c:	36f80080 	tbz	w0, #31, 9600b79c <tegrabl_display_get_du_list+0x4b8>
		pr_error("prod-settings subnode not found\n");
    9600b790:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b794:	91351800 	add	x0, x0, #0xd46
    9600b798:	17ffff96 	b	9600b5f0 <tegrabl_display_get_du_list+0x30c>
	err = parse_prod_settings(fdt, prod_offset, &(pdata_dp->prod_list), dp_node, ARRAY_SIZE(dp_node));
    9600b79c:	d00001e3 	adrp	x3, 96049000 <default_srgb_lut+0xa28>
    9600b7a0:	2a0003e1 	mov	w1, w0
    9600b7a4:	52800024 	mov	w4, #0x1                   	// #1
    9600b7a8:	912c0063 	add	x3, x3, #0xb00
    9600b7ac:	9101c282 	add	x2, x20, #0x70
    9600b7b0:	aa1503e0 	mov	x0, x21
    9600b7b4:	94000391 	bl	9600c5f8 <parse_prod_settings>
	if (err != TEGRABL_NO_ERROR) {
    9600b7b8:	35fff1e0 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
	err = parse_prod_settings(fdt, prod_offset, &(pdata_dp->br_prod_list), dp_br_nodes,
    9600b7bc:	d00001e3 	adrp	x3, 96049000 <default_srgb_lut+0xa28>
    9600b7c0:	52800064 	mov	w4, #0x3                   	// #3
    9600b7c4:	912b4063 	add	x3, x3, #0xad0
    9600b7c8:	9101e282 	add	x2, x20, #0x78
    9600b7cc:	2a1b03e1 	mov	w1, w27
    9600b7d0:	aa1503e0 	mov	x0, x21
    9600b7d4:	94000389 	bl	9600c5f8 <parse_prod_settings>
		if (err != TEGRABL_NO_ERROR) {
    9600b7d8:	35fff0e0 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
		pdata_l->mode = parse_display_timings(fdt, off->display);
    9600b7dc:	b9400e61 	ldr	w1, [x19, #12]
    9600b7e0:	aa1503e0 	mov	x0, x21
    9600b7e4:	94000434 	bl	9600c8b4 <parse_display_timings>
    9600b7e8:	f9000a80 	str	x0, [x20, #16]
		pdata->sor_dtb.sor_instance = sor_instance;
    9600b7ec:	b9408ba0 	ldr	w0, [x29, #136]
		pdata->sor_dtb.dpaux_instance = dpaux_instance;
    9600b7f0:	29126680 	stp	w0, w25, [x20, #144]
		pdata->disp_clk_src = clk_src;
    9600b7f4:	b9408fa0 	ldr	w0, [x29, #140]
    9600b7f8:	b9000e80 	str	w0, [x20, #12]
	new_node = tegrabl_malloc(sizeof(struct tegrabl_display_list));
    9600b7fc:	d2800300 	mov	x0, #0x18                  	// #24
    9600b800:	94006c9e 	bl	96026a78 <tegrabl_malloc>
	if (new_node == NULL) {
    9600b804:	b50005e0 	cbnz	x0, 9600b8c0 <tegrabl_display_get_du_list+0x5dc>
		pr_error("memory allocation failed\n");
    9600b808:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    9600b80c:	52802076 	mov	w22, #0x103                 	// #259
		pr_error("memory allocation failed\n");
    9600b810:	9127f000 	add	x0, x0, #0x9fc
    9600b814:	94005b97 	bl	96022670 <tegrabl_printf>
    9600b818:	17fffec3 	b	9600b324 <tegrabl_display_get_du_list+0x40>
	} else if (du_type == DISPLAY_OUT_HDMI) {
    9600b81c:	7100077f 	cmp	w27, #0x1
    9600b820:	540004a1 	b.ne	9600b8b4 <tegrabl_display_get_du_list+0x5d0>  // b.any
			err = parse_hdmi_regulator_settings(fdt, off->nvdisp, pdata_l);
    9600b824:	b9400a61 	ldr	w1, [x19, #8]
    9600b828:	aa1403e2 	mov	x2, x20
    9600b82c:	aa1503e0 	mov	x0, x21
    9600b830:	940000e6 	bl	9600bbc8 <parse_hdmi_regulator_settings>
			if (err != TEGRABL_NO_ERROR) {
    9600b834:	35ffee00 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
			err = parse_hpd_gpio(fdt, off->out, pdata_l);
    9600b838:	b9400261 	ldr	w1, [x19]
    9600b83c:	aa1403e2 	mov	x2, x20
    9600b840:	aa1503e0 	mov	x0, x21
    9600b844:	9400011c 	bl	9600bcb4 <parse_hpd_gpio>
			if (err != TEGRABL_NO_ERROR) {
    9600b848:	35ffed60 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
			err = tegrabl_display_init_regulator(du_type, pdata_l);
    9600b84c:	aa1403e1 	mov	x1, x20
    9600b850:	2a1b03e0 	mov	w0, w27
    9600b854:	94000496 	bl	9600caac <tegrabl_display_init_regulator>
			if (err != TEGRABL_NO_ERROR) {
    9600b858:	35ffece0 	cbnz	w0, 9600b5f4 <tegrabl_display_get_du_list+0x310>
		tegrabl_display_parse_xbar(fdt, off->out, &(pdata_l->sor_dtb));
    9600b85c:	b9400261 	ldr	w1, [x19]
    9600b860:	91024282 	add	x2, x20, #0x90
    9600b864:	aa1503e0 	mov	x0, x21
    9600b868:	940003ec 	bl	9600c818 <tegrabl_display_parse_xbar>
		prod_offset = fdt_subnode_offset(fdt, off->out, "prod-settings");
    9600b86c:	b9400261 	ldr	w1, [x19]
    9600b870:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600b874:	aa1503e0 	mov	x0, x21
    9600b878:	9134e042 	add	x2, x2, #0xd38
    9600b87c:	94009917 	bl	96031cd8 <fdt_subnode_offset>
		if (prod_offset < 0) {
    9600b880:	36f80080 	tbz	w0, #31, 9600b890 <tegrabl_display_get_du_list+0x5ac>
			pr_error("prod-settings node not found\n");
    9600b884:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b888:	9135a800 	add	x0, x0, #0xd6a
    9600b88c:	17ffff59 	b	9600b5f0 <tegrabl_display_get_du_list+0x30c>
		err = parse_hdmi_prod_settings(fdt, prod_offset, &(pdata_l->hdmi_dtb.prod_list), tmds_config_modes,
    9600b890:	d00001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600b894:	d00001e3 	adrp	x3, 96049000 <default_srgb_lut+0xa28>
    9600b898:	9100c282 	add	x2, x20, #0x30
    9600b89c:	912c6063 	add	x3, x3, #0xb18
    9600b8a0:	b94b1024 	ldr	w4, [x1, #2832]
    9600b8a4:	2a0003e1 	mov	w1, w0
    9600b8a8:	aa1503e0 	mov	x0, x21
    9600b8ac:	9400013d 	bl	9600bda0 <parse_hdmi_prod_settings>
    9600b8b0:	17ffffca 	b	9600b7d8 <tegrabl_display_get_du_list+0x4f4>
		pr_error("invalid display type\n");
    9600b8b4:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600b8b8:	91362c00 	add	x0, x0, #0xd8b
    9600b8bc:	17ffff1c 	b	9600b52c <tegrabl_display_get_du_list+0x248>
	new_node->du_type = du_type;
    9600b8c0:	b900001a 	str	w26, [x0]
	new_node->next = NULL;
    9600b8c4:	a900fc14 	stp	x20, xzr, [x0, #8]
	if (*head_du == NULL) {
    9600b8c8:	b4000118 	cbz	x24, 9600b8e8 <tegrabl_display_get_du_list+0x604>
    9600b8cc:	aa1803e1 	mov	x1, x24
	while (last->next != NULL) {
    9600b8d0:	f9400822 	ldr	x2, [x1, #16]
    9600b8d4:	b5000062 	cbnz	x2, 9600b8e0 <tegrabl_display_get_du_list+0x5fc>
	last->next = new_node;
    9600b8d8:	f9000820 	str	x0, [x1, #16]
    9600b8dc:	17ffff15 	b	9600b530 <tegrabl_display_get_du_list+0x24c>
	while (last->next != NULL) {
    9600b8e0:	aa0203e1 	mov	x1, x2
    9600b8e4:	17fffffb 	b	9600b8d0 <tegrabl_display_get_du_list+0x5ec>
	if (*head_du == NULL) {
    9600b8e8:	aa0003f8 	mov	x24, x0
    9600b8ec:	17ffff11 	b	9600b530 <tegrabl_display_get_du_list+0x24c>
		*du_list = du_list_l;
    9600b8f0:	f9403fa0 	ldr	x0, [x29, #120]
    9600b8f4:	f9000018 	str	x24, [x0]
		return TEGRABL_NO_ERROR;
    9600b8f8:	17fffe96 	b	9600b350 <tegrabl_display_get_du_list+0x6c>

000000009600b8fc <parse_prod_list>:
	return ret;
}

static tegrabl_error_t parse_prod_list(const void *fdt, int32_t prod_offset,
	char *list_name, struct prod_pair **node_config, uint32_t *num_nodes)
{
    9600b8fc:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
    9600b900:	910003fd 	mov	x29, sp
    9600b904:	a90153f3 	stp	x19, x20, [sp, #16]
    9600b908:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600b90c:	a9068fa4 	stp	x4, x3, [x29, #104]
 *		   TEGRABL_NO_ERROR if success
 */
static inline tegrabl_error_t tegrabl_dt_get_prop_count_strings(const void *fdt,
				int node, char *prop, uint32_t *num)
{
	return tegrabl_dt_get_prop_string_array(fdt, node, prop, NULL, num);
    9600b910:	910273a4 	add	x4, x29, #0x9c
    9600b914:	a90363f7 	stp	x23, x24, [sp, #48]
    9600b918:	d2800003 	mov	x3, #0x0                   	// #0
    9600b91c:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600b920:	aa0203f8 	mov	x24, x2
    9600b924:	a90573fb 	stp	x27, x28, [sp, #80]
    9600b928:	aa0003fc 	mov	x28, x0
    9600b92c:	b90087a1 	str	w1, [x29, #132]
    9600b930:	94009615 	bl	96031184 <tegrabl_dt_get_prop_string_array>
    9600b934:	2a0003f3 	mov	w19, w0
	if (ret != TEGRABL_NO_ERROR) {
    9600b938:	350001a0 	cbnz	w0, 9600b96c <parse_prod_list+0x70>
	range_names = tegrabl_malloc(range_num * sizeof(char *));
    9600b93c:	b9409fa0 	ldr	w0, [x29, #156]
    9600b940:	d37df000 	lsl	x0, x0, #3
    9600b944:	94006c4d 	bl	96026a78 <tegrabl_malloc>
    9600b948:	aa0003f5 	mov	x21, x0
	if (!range_names) {
    9600b94c:	b5000200 	cbnz	x0, 9600b98c <parse_prod_list+0x90>
		return ret;
    9600b950:	5280c073 	mov	w19, #0x603                 	// #1539
		pr_error("%s: Fail to alloc memory\n", __func__);
    9600b954:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b958:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600b95c:	9137dc21 	add	x1, x1, #0xdf7
    9600b960:	91010400 	add	x0, x0, #0x41
    9600b964:	94005b43 	bl	96022670 <tegrabl_printf>

	tmds_config = tegrabl_malloc(num_range_info * sizeof(struct prod_pair));
	if (!tmds_config) {
		pr_debug("%s: Fail to alloc memory\n", __func__);
		tegrabl_free(range_info);
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 8);
    9600b968:	72ac6c73 	movk	w19, #0x6363, lsl #16
	*node_config = tmds_config;
	*num_nodes = num_range_info;
	tegrabl_free(range_info);
fail:
	return err;
}
    9600b96c:	2a1303e0 	mov	w0, w19
    9600b970:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600b974:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600b978:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600b97c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600b980:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600b984:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9600b988:	d65f03c0 	ret
	ret = tegrabl_dt_get_prop_string_array(fdt, node_offset, list_name, range_names,
    9600b98c:	b94087a1 	ldr	w1, [x29, #132]
    9600b990:	aa0003e3 	mov	x3, x0
    9600b994:	d2800004 	mov	x4, #0x0                   	// #0
    9600b998:	aa1803e2 	mov	x2, x24
    9600b99c:	aa1c03e0 	mov	x0, x28
    9600b9a0:	940095f9 	bl	96031184 <tegrabl_dt_get_prop_string_array>
    9600b9a4:	2a0003f3 	mov	w19, w0
	if (ret != TEGRABL_NO_ERROR) {
    9600b9a8:	34000120 	cbz	w0, 9600b9cc <parse_prod_list+0xd0>
		pr_error("Error %d, Fail to retrieve the name list of %s\n",
    9600b9ac:	2a0003e1 	mov	w1, w0
    9600b9b0:	aa1803e2 	mov	x2, x24
    9600b9b4:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600b9b8:	91017800 	add	x0, x0, #0x5e
    9600b9bc:	94005b2d 	bl	96022670 <tegrabl_printf>
	tegrabl_free(range_names);
    9600b9c0:	aa1503e0 	mov	x0, x21
	tegrabl_free(range_info);
    9600b9c4:	94006c3d 	bl	96026ab8 <tegrabl_free>
	return err;
    9600b9c8:	17ffffe9 	b	9600b96c <parse_prod_list+0x70>
	range = tegrabl_malloc(range_num * sizeof(struct tmds_range_info));
    9600b9cc:	b9409fa0 	ldr	w0, [x29, #156]
    9600b9d0:	d37cec00 	lsl	x0, x0, #4
    9600b9d4:	94006c29 	bl	96026a78 <tegrabl_malloc>
    9600b9d8:	aa0003f4 	mov	x20, x0
	if (!range) {
    9600b9dc:	b5000900 	cbnz	x0, 9600bafc <parse_prod_list+0x200>
		ret = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 7);
    9600b9e0:	5280e073 	mov	w19, #0x703                 	// #1795
		pr_error("%s: Fail to alloc memory\n", __func__);
    9600b9e4:	b0000181 	adrp	x1, 9603c000 <__func__.4414+0x9>
    9600b9e8:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600b9ec:	9137dc21 	add	x1, x1, #0xdf7
    9600b9f0:	91010400 	add	x0, x0, #0x41
    9600b9f4:	94005b1f 	bl	96022670 <tegrabl_printf>
	ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    9600b9f8:	72ac6c73 	movk	w19, #0x6363, lsl #16
    9600b9fc:	17fffff1 	b	9600b9c0 <parse_prod_list+0xc4>
		subnode = fdt_subnode_offset(fdt, node_offset, range_names[i]);
    9600ba00:	d37d7ef9 	ubfiz	x25, x23, #3, #32
    9600ba04:	b94087a1 	ldr	w1, [x29, #132]
    9600ba08:	aa1c03e0 	mov	x0, x28
    9600ba0c:	f8796aa2 	ldr	x2, [x21, x25]
    9600ba10:	940098b2 	bl	96031cd8 <fdt_subnode_offset>
		if (subnode < 0) {
    9600ba14:	37f80100 	tbnz	w0, #31, 9600ba34 <parse_prod_list+0x138>
		if (!retrieve_range(range_names[i], &lower, &upper)) {
    9600ba18:	f8796abb 	ldr	x27, [x21, x25]
	if (!buf || !lower_hz || !upper_hz) {
    9600ba1c:	b40000db 	cbz	x27, 9600ba34 <parse_prod_list+0x138>
	uint32_t count = 0;
    9600ba20:	5280001a 	mov	w26, #0x0                   	// #0
	while (*str != '\0') {
    9600ba24:	39400360 	ldrb	w0, [x27]
    9600ba28:	35000380 	cbnz	w0, 9600ba98 <parse_prod_list+0x19c>
	if (count == 2) {
    9600ba2c:	71000b5f 	cmp	w26, #0x2
    9600ba30:	54000aa0 	b.eq	9600bb84 <parse_prod_list+0x288>  // b.none
	for (i = 0; i < range_num; i++) {
    9600ba34:	110006f7 	add	w23, w23, #0x1
    9600ba38:	b9409fa0 	ldr	w0, [x29, #156]
    9600ba3c:	6b0002ff 	cmp	w23, w0
    9600ba40:	54fffe03 	b.cc	9600ba00 <parse_prod_list+0x104>  // b.lo, b.ul, b.last
	if (count >= 1) {
    9600ba44:	34000696 	cbz	w22, 9600bb14 <parse_prod_list+0x218>
		tegrabl_free(range_names);
    9600ba48:	aa1503e0 	mov	x0, x21
    9600ba4c:	94006c1b 	bl	96026ab8 <tegrabl_free>
		pr_info("retrieved tmds range from %s\n", list_name);
    9600ba50:	aa1803e1 	mov	x1, x24
    9600ba54:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
	tmds_config = tegrabl_malloc(num_range_info * sizeof(struct prod_pair));
    9600ba58:	d37c7ed5 	ubfiz	x21, x22, #4, #32
		pr_info("retrieved tmds range from %s\n", list_name);
    9600ba5c:	91027000 	add	x0, x0, #0x9c
    9600ba60:	94005b04 	bl	96022670 <tegrabl_printf>
	tmds_config = tegrabl_malloc(num_range_info * sizeof(struct prod_pair));
    9600ba64:	aa1503e0 	mov	x0, x21
    9600ba68:	94006c04 	bl	96026a78 <tegrabl_malloc>
	if (!tmds_config) {
    9600ba6c:	b40005c0 	cbz	x0, 9600bb24 <parse_prod_list+0x228>
    9600ba70:	910022b5 	add	x21, x21, #0x8
    9600ba74:	91002003 	add	x3, x0, #0x8
    9600ba78:	8b150015 	add	x21, x0, x21
		range_info[lowest].upper_hz = 0xffffffff;
    9600ba7c:	12800007 	mov	w7, #0xffffffff            	// #-1
	while (sort_idx < num_range_info) {
    9600ba80:	eb15007f 	cmp	x3, x21
    9600ba84:	54000740 	b.eq	9600bb6c <parse_prod_list+0x270>  // b.none
    9600ba88:	91005285 	add	x5, x20, #0x14
		lowest = 0;
    9600ba8c:	52800004 	mov	w4, #0x0                   	// #0
		for (i = 1; i < num_range_info; i++) {
    9600ba90:	52800022 	mov	w2, #0x1                   	// #1
    9600ba94:	1400002c 	b	9600bb44 <parse_prod_list+0x248>
		if (*str >= '0' && *str <= '9') {
    9600ba98:	5100c000 	sub	w0, w0, #0x30
    9600ba9c:	12001c00 	and	w0, w0, #0xff
    9600baa0:	7100241f 	cmp	w0, #0x9
    9600baa4:	54000288 	b.hi	9600baf4 <parse_prod_list+0x1f8>  // b.pmore
			offset = strspn(str, digit_list);
    9600baa8:	f94033a1 	ldr	x1, [x29, #96]
    9600baac:	aa1b03e0 	mov	x0, x27
			count++;
    9600bab0:	1100075a 	add	w26, w26, #0x1
			offset = strspn(str, digit_list);
    9600bab4:	94007a52 	bl	9602a3fc <strspn>
    9600bab8:	f9003fa0 	str	x0, [x29, #120]
			if (count == 1)
    9600babc:	7100075f 	cmp	w26, #0x1
    9600bac0:	540000e1 	b.ne	9600badc <parse_prod_list+0x1e0>  // b.any
				lower = atoi(str);
    9600bac4:	aa1b03e0 	mov	x0, x27
    9600bac8:	9400708c 	bl	96027cf8 <atoi>
    9600bacc:	b9008fa0 	str	w0, [x29, #140]
			str += offset;
    9600bad0:	b9407ba0 	ldr	w0, [x29, #120]
    9600bad4:	8b20437b 	add	x27, x27, w0, uxtw
    9600bad8:	17ffffd3 	b	9600ba24 <parse_prod_list+0x128>
			else if (count == 2)
    9600badc:	71000b5f 	cmp	w26, #0x2
    9600bae0:	54ffff81 	b.ne	9600bad0 <parse_prod_list+0x1d4>  // b.any
				upper = atoi(str);
    9600bae4:	aa1b03e0 	mov	x0, x27
    9600bae8:	94007084 	bl	96027cf8 <atoi>
    9600baec:	b9008ba0 	str	w0, [x29, #136]
    9600baf0:	17fffff8 	b	9600bad0 <parse_prod_list+0x1d4>
			str++;
    9600baf4:	9100077b 	add	x27, x27, #0x1
    9600baf8:	17ffffcb 	b	9600ba24 <parse_prod_list+0x128>
			offset = strspn(str, digit_list);
    9600bafc:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
	uint32_t i, count = 0;
    9600bb00:	52800016 	mov	w22, #0x0                   	// #0
			offset = strspn(str, digit_list);
    9600bb04:	91024400 	add	x0, x0, #0x91
	for (i = 0; i < range_num; i++) {
    9600bb08:	52800017 	mov	w23, #0x0                   	// #0
			offset = strspn(str, digit_list);
    9600bb0c:	f90033a0 	str	x0, [x29, #96]
    9600bb10:	17ffffca 	b	9600ba38 <parse_prod_list+0x13c>
	tegrabl_free(range);
    9600bb14:	aa1403e0 	mov	x0, x20
	ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    9600bb18:	5280e053 	mov	w19, #0x702                 	// #1794
	tegrabl_free(range);
    9600bb1c:	94006be7 	bl	96026ab8 <tegrabl_free>
    9600bb20:	17ffffb6 	b	9600b9f8 <parse_prod_list+0xfc>
		tegrabl_free(range_info);
    9600bb24:	aa1403e0 	mov	x0, x20
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 8);
    9600bb28:	52810073 	mov	w19, #0x803                 	// #2051
		tegrabl_free(range_info);
    9600bb2c:	94006be3 	bl	96026ab8 <tegrabl_free>
    9600bb30:	17ffff8e 	b	9600b968 <parse_prod_list+0x6c>
			if (range_info[lowest].upper_hz > range_info[i].upper_hz)
    9600bb34:	b84104a1 	ldr	w1, [x5], #16
    9600bb38:	6b06003f 	cmp	w1, w6
    9600bb3c:	1a822084 	csel	w4, w4, w2, cs  // cs = hs, nlast
		for (i = 1; i < num_range_info; i++) {
    9600bb40:	11000442 	add	w2, w2, #0x1
    9600bb44:	d37c7c81 	ubfiz	x1, x4, #4, #32
    9600bb48:	6b16005f 	cmp	w2, w22
    9600bb4c:	8b010281 	add	x1, x20, x1
    9600bb50:	b9400426 	ldr	w6, [x1, #4]
    9600bb54:	54ffff01 	b.ne	9600bb34 <parse_prod_list+0x238>  // b.any
		tmds_config[sort_idx].name = range_info[lowest].name;
    9600bb58:	f9400422 	ldr	x2, [x1, #8]
		tmds_config[sort_idx].clk = range_info[lowest].upper_hz;
    9600bb5c:	b81f8066 	stur	w6, [x3, #-8]
		tmds_config[sort_idx].name = range_info[lowest].name;
    9600bb60:	f8010462 	str	x2, [x3], #16
		range_info[lowest].upper_hz = 0xffffffff;
    9600bb64:	b9000427 	str	w7, [x1, #4]
    9600bb68:	17ffffc6 	b	9600ba80 <parse_prod_list+0x184>
	*node_config = tmds_config;
    9600bb6c:	f9403ba1 	ldr	x1, [x29, #112]
    9600bb70:	f9000020 	str	x0, [x1]
	*num_nodes = num_range_info;
    9600bb74:	f94037a0 	ldr	x0, [x29, #104]
    9600bb78:	b9000016 	str	w22, [x0]
	tegrabl_free(range_info);
    9600bb7c:	aa1403e0 	mov	x0, x20
    9600bb80:	17ffff91 	b	9600b9c4 <parse_prod_list+0xc8>
			if (upper < lower) {
    9600bb84:	295103a1 	ldp	w1, w0, [x29, #136]
    9600bb88:	6b01001f 	cmp	w0, w1
    9600bb8c:	54fff548 	b.hi	9600ba34 <parse_prod_list+0x138>  // b.pmore
		range[count].lower_hz = lower * 1000000;
    9600bb90:	b9408fa2 	ldr	w2, [x29, #140]
    9600bb94:	52884803 	mov	w3, #0x4240                	// #16960
    9600bb98:	d37c7ec1 	ubfiz	x1, x22, #4, #32
    9600bb9c:	72a001e3 	movk	w3, #0xf, lsl #16
    9600bba0:	8b010280 	add	x0, x20, x1
		count++;
    9600bba4:	110006d6 	add	w22, w22, #0x1
		range[count].lower_hz = lower * 1000000;
    9600bba8:	1b037c42 	mul	w2, w2, w3
    9600bbac:	b8216a82 	str	w2, [x20, x1]
		range[count].upper_hz = upper * 1000000;
    9600bbb0:	b9408ba1 	ldr	w1, [x29, #136]
    9600bbb4:	1b037c21 	mul	w1, w1, w3
    9600bbb8:	b9000401 	str	w1, [x0, #4]
		range[count].name = range_names[i];
    9600bbbc:	f8796aa1 	ldr	x1, [x21, x25]
    9600bbc0:	f9000401 	str	x1, [x0, #8]
    9600bbc4:	17ffff9c 	b	9600ba34 <parse_prod_list+0x138>

000000009600bbc8 <parse_hdmi_regulator_settings>:
{
    9600bbc8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	temp = fdt_getprop(fdt, node_offset, "avdd_hdmi-supply", NULL);
    9600bbcc:	d2800003 	mov	x3, #0x0                   	// #0
{
    9600bbd0:	910003fd 	mov	x29, sp
    9600bbd4:	a90153f3 	stp	x19, x20, [sp, #16]
    9600bbd8:	aa0203f3 	mov	x19, x2
    9600bbdc:	f90013f5 	str	x21, [sp, #32]
	temp = fdt_getprop(fdt, node_offset, "avdd_hdmi-supply", NULL);
    9600bbe0:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
{
    9600bbe4:	aa0003f4 	mov	x20, x0
	temp = fdt_getprop(fdt, node_offset, "avdd_hdmi-supply", NULL);
    9600bbe8:	9139ec42 	add	x2, x2, #0xe7b
{
    9600bbec:	2a0103f5 	mov	w21, w1
	temp = fdt_getprop(fdt, node_offset, "avdd_hdmi-supply", NULL);
    9600bbf0:	94009906 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600bbf4:	b4000220 	cbz	x0, 9600bc38 <parse_hdmi_regulator_settings+0x70>
		pdata->hdmi_dtb.avdd_hdmi_supply = fdt32_to_cpu(*temp);
    9600bbf8:	b9400000 	ldr	w0, [x0]
    9600bbfc:	97fffd6b 	bl	9600b1a8 <fdt32_to_cpu>
    9600bc00:	b9001a60 	str	w0, [x19, #24]
	temp = fdt_getprop(fdt, node_offset, "avdd_hdmi_pll-supply", NULL);
    9600bc04:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600bc08:	d2800003 	mov	x3, #0x0                   	// #0
    9600bc0c:	913a3042 	add	x2, x2, #0xe8c
    9600bc10:	2a1503e1 	mov	w1, w21
    9600bc14:	aa1403e0 	mov	x0, x20
    9600bc18:	940098fc 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600bc1c:	b50001c0 	cbnz	x0, 9600bc54 <parse_hdmi_regulator_settings+0x8c>
		pdata->hdmi_dtb.avdd_hdmi_pll_supply = 0;
    9600bc20:	b9001e7f 	str	wzr, [x19, #28]
		pr_error("no regulator info present for avdd_hdmi_pll-supply\n");
    9600bc24:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bc28:	913ba000 	add	x0, x0, #0xee8
    9600bc2c:	94005a91 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 1);
    9600bc30:	52802380 	mov	w0, #0x11c                 	// #284
    9600bc34:	14000006 	b	9600bc4c <parse_hdmi_regulator_settings+0x84>
		pdata->hdmi_dtb.avdd_hdmi_supply = 0;
    9600bc38:	b9001a7f 	str	wzr, [x19, #24]
		pr_error("no regulator info present for avdd_hdmi-supply\n");
    9600bc3c:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bc40:	913a8400 	add	x0, x0, #0xea1
    9600bc44:	94005a8b 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    9600bc48:	52800380 	mov	w0, #0x1c                  	// #28
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 2);
    9600bc4c:	72ac6c60 	movk	w0, #0x6363, lsl #16
    9600bc50:	14000015 	b	9600bca4 <parse_hdmi_regulator_settings+0xdc>
		pdata->hdmi_dtb.avdd_hdmi_pll_supply = fdt32_to_cpu(*temp);
    9600bc54:	b9400000 	ldr	w0, [x0]
    9600bc58:	97fffd54 	bl	9600b1a8 <fdt32_to_cpu>
    9600bc5c:	b9001e60 	str	w0, [x19, #28]
	temp = fdt_getprop(fdt, node_offset, "vdd_hdmi_5v0-supply", NULL);
    9600bc60:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600bc64:	d2800003 	mov	x3, #0x0                   	// #0
    9600bc68:	913b5042 	add	x2, x2, #0xed4
    9600bc6c:	2a1503e1 	mov	w1, w21
    9600bc70:	aa1403e0 	mov	x0, x20
    9600bc74:	940098e5 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600bc78:	b50000e0 	cbnz	x0, 9600bc94 <parse_hdmi_regulator_settings+0xcc>
		pdata->hdmi_dtb.vdd_hdmi_5v0_supply = 0;
    9600bc7c:	b900227f 	str	wzr, [x19, #32]
		pr_error("no regulator info present for vdd_hdmi_5v0-supply\n");
    9600bc80:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bc84:	913c7c00 	add	x0, x0, #0xf1f
    9600bc88:	94005a7a 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 2);
    9600bc8c:	52804380 	mov	w0, #0x21c                 	// #540
    9600bc90:	17ffffef 	b	9600bc4c <parse_hdmi_regulator_settings+0x84>
		pdata->hdmi_dtb.vdd_hdmi_5v0_supply = fdt32_to_cpu(*temp);
    9600bc94:	b9400000 	ldr	w0, [x0]
    9600bc98:	97fffd44 	bl	9600b1a8 <fdt32_to_cpu>
    9600bc9c:	b9002260 	str	w0, [x19, #32]
	return TEGRABL_NO_ERROR;
    9600bca0:	52800000 	mov	w0, #0x0                   	// #0
}
    9600bca4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600bca8:	f94013f5 	ldr	x21, [sp, #32]
    9600bcac:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600bcb0:	d65f03c0 	ret

000000009600bcb4 <parse_hpd_gpio>:
{
    9600bcb4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	property = fdt_get_property(fdt, sor_offset, "nvidia,hpd-gpio", NULL);
    9600bcb8:	d2800003 	mov	x3, #0x0                   	// #0
{
    9600bcbc:	910003fd 	mov	x29, sp
    9600bcc0:	a90153f3 	stp	x19, x20, [sp, #16]
    9600bcc4:	aa0203f3 	mov	x19, x2
    9600bcc8:	f90013f5 	str	x21, [sp, #32]
	property = fdt_get_property(fdt, sor_offset, "nvidia,hpd-gpio", NULL);
    9600bccc:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
{
    9600bcd0:	aa0003f4 	mov	x20, x0
	property = fdt_get_property(fdt, sor_offset, "nvidia,hpd-gpio", NULL);
    9600bcd4:	913d5442 	add	x2, x2, #0xf55
{
    9600bcd8:	2a0103f5 	mov	w21, w1
	property = fdt_get_property(fdt, sor_offset, "nvidia,hpd-gpio", NULL);
    9600bcdc:	9400989a 	bl	96031f44 <fdt_get_property>
	if (!property) {
    9600bce0:	b5000140 	cbnz	x0, 9600bd08 <parse_hpd_gpio+0x54>
		pr_error("error in getting property \"nvidia,hpd-gpio\"\n");
    9600bce4:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bce8:	913d9400 	add	x0, x0, #0xf65
		pr_error("disp-default-out subnode not found\n");
    9600bcec:	94005a61 	bl	96022670 <tegrabl_printf>
	return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 13);
    9600bcf0:	5281a1a0 	mov	w0, #0xd0d                 	// #3341
    9600bcf4:	72ac6c60 	movk	w0, #0x6363, lsl #16
}
    9600bcf8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600bcfc:	f94013f5 	ldr	x21, [sp, #32]
    9600bd00:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600bd04:	d65f03c0 	ret
	pdata->hdmi_dtb.hpd_gpio = fdt32_to_cpu(*(property->data32 + 1));
    9600bd08:	b9401000 	ldr	w0, [x0, #16]
    9600bd0c:	97fffd27 	bl	9600b1a8 <fdt32_to_cpu>
    9600bd10:	b9002660 	str	w0, [x19, #36]
	hdmi_prop_offset = fdt_subnode_offset(fdt, sor_offset, "hdmi-display");
    9600bd14:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600bd18:	2a1503e1 	mov	w1, w21
    9600bd1c:	913e5442 	add	x2, x2, #0xf95
    9600bd20:	aa1403e0 	mov	x0, x20
    9600bd24:	940097ed 	bl	96031cd8 <fdt_subnode_offset>
	if (hdmi_prop_offset < 0) {
    9600bd28:	36f80080 	tbz	w0, #31, 9600bd38 <parse_hpd_gpio+0x84>
		pr_error("hdmi-display subnode not found\n");
    9600bd2c:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bd30:	913e8800 	add	x0, x0, #0xfa2
    9600bd34:	17ffffee 	b	9600bcec <parse_hpd_gpio+0x38>
	hdmi_prop_offset = fdt_subnode_offset(fdt, hdmi_prop_offset, "disp-default-out");
    9600bd38:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600bd3c:	2a0003e1 	mov	w1, w0
    9600bd40:	912b7c42 	add	x2, x2, #0xadf
    9600bd44:	aa1403e0 	mov	x0, x20
    9600bd48:	940097e4 	bl	96031cd8 <fdt_subnode_offset>
	if (hdmi_prop_offset < 0) {
    9600bd4c:	36f80080 	tbz	w0, #31, 9600bd5c <parse_hpd_gpio+0xa8>
		pr_error("disp-default-out subnode not found\n");
    9600bd50:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bd54:	913f1400 	add	x0, x0, #0xfc5
    9600bd58:	17ffffe5 	b	9600bcec <parse_hpd_gpio+0x38>
	property = fdt_get_property(fdt, hdmi_prop_offset, "nvidia,out-flags", NULL);
    9600bd5c:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600bd60:	2a0003e1 	mov	w1, w0
    9600bd64:	d2800003 	mov	x3, #0x0                   	// #0
    9600bd68:	913fb042 	add	x2, x2, #0xfec
    9600bd6c:	aa1403e0 	mov	x0, x20
    9600bd70:	94009875 	bl	96031f44 <fdt_get_property>
	if (!property) {
    9600bd74:	b50000e0 	cbnz	x0, 9600bd90 <parse_hpd_gpio+0xdc>
		pr_warn("error in getting \"nvidia,out-flags\" property, set default value\n");
    9600bd78:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bd7c:	913ff400 	add	x0, x0, #0xffd
    9600bd80:	94005a3c 	bl	96022670 <tegrabl_printf>
		pdata->hdmi_dtb.polarity = 0;
    9600bd84:	b9002a7f 	str	wzr, [x19, #40]
	return TEGRABL_NO_ERROR;
    9600bd88:	52800000 	mov	w0, #0x0                   	// #0
    9600bd8c:	17ffffdb 	b	9600bcf8 <parse_hpd_gpio+0x44>
		pdata->hdmi_dtb.polarity = fdt32_to_cpu(*(property->data32));
    9600bd90:	b9400c00 	ldr	w0, [x0, #12]
    9600bd94:	97fffd05 	bl	9600b1a8 <fdt32_to_cpu>
    9600bd98:	b9002a60 	str	w0, [x19, #40]
    9600bd9c:	17fffffb 	b	9600bd88 <parse_hpd_gpio+0xd4>

000000009600bda0 <parse_hdmi_prod_settings>:

tegrabl_error_t parse_hdmi_prod_settings(const void *fdt, int32_t prod_offset,
	struct prod_list **prod_list, struct prod_pair *legacy_node_config,
	uint32_t legacy_num_nodes)
{
    9600bda0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9600bda4:	910003fd 	mov	x29, sp
    9600bda8:	a90153f3 	stp	x19, x20, [sp, #16]
    9600bdac:	aa0003f3 	mov	x19, x0
    9600bdb0:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600bdb4:	2a0103f4 	mov	w20, w1
    9600bdb8:	f9001bf7 	str	x23, [sp, #48]
    9600bdbc:	aa0203f5 	mov	x21, x2
    9600bdc0:	aa0303f6 	mov	x22, x3
	struct prod_pair *tmds_config = NULL;
	uint32_t tmds_num = 0;
	bool is_tmds_config_legacy_mode = true;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (fdt_subnode_offset(fdt, prod_offset, PROD_FORCE_LEGACY) < 0) {
    9600bdc4:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
	uint32_t tmds_num = 0;
    9600bdc8:	b90047bf 	str	wzr, [x29, #68]
	if (fdt_subnode_offset(fdt, prod_offset, PROD_FORCE_LEGACY) < 0) {
    9600bdcc:	91382042 	add	x2, x2, #0xe08
	struct prod_pair *tmds_config = NULL;
    9600bdd0:	f90027bf 	str	xzr, [x29, #72]
{
    9600bdd4:	2a0403f7 	mov	w23, w4
	if (fdt_subnode_offset(fdt, prod_offset, PROD_FORCE_LEGACY) < 0) {
    9600bdd8:	940097c0 	bl	96031cd8 <fdt_subnode_offset>
    9600bddc:	37f80220 	tbnz	w0, #31, 9600be20 <parse_hdmi_prod_settings+0x80>
		if (err == TEGRABL_NO_ERROR)
			is_tmds_config_legacy_mode = false;
	}

	if (is_tmds_config_legacy_mode) {
		pr_info("HDMI prod-setting fall back to legacy mode\n");
    9600bde0:	b0000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600bde4:	91389000 	add	x0, x0, #0xe24
    9600bde8:	94005a22 	bl	96022670 <tegrabl_printf>
		tmds_num = legacy_num_nodes;
    9600bdec:	b90047b7 	str	w23, [x29, #68]
		tmds_config = legacy_node_config;
    9600bdf0:	f90027b6 	str	x22, [x29, #72]
	}

	err = parse_prod_settings(fdt, prod_offset, prod_list, tmds_config, tmds_num);
    9600bdf4:	b94047a4 	ldr	w4, [x29, #68]
    9600bdf8:	aa1503e2 	mov	x2, x21
    9600bdfc:	f94027a3 	ldr	x3, [x29, #72]
    9600be00:	2a1403e1 	mov	w1, w20
    9600be04:	aa1303e0 	mov	x0, x19
    9600be08:	940001fc 	bl	9600c5f8 <parse_prod_settings>
	return err;
}
    9600be0c:	f9401bf7 	ldr	x23, [sp, #48]
    9600be10:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600be14:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600be18:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9600be1c:	d65f03c0 	ret
		err = parse_prod_list(fdt, prod_offset, PROD_LIST_BOARD,
    9600be20:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600be24:	910113a4 	add	x4, x29, #0x44
    9600be28:	910123a3 	add	x3, x29, #0x48
    9600be2c:	91394c42 	add	x2, x2, #0xe53
    9600be30:	2a1403e1 	mov	w1, w20
    9600be34:	aa1303e0 	mov	x0, x19
    9600be38:	97fffeb1 	bl	9600b8fc <parse_prod_list>
		if (err != TEGRABL_NO_ERROR)
    9600be3c:	34fffdc0 	cbz	w0, 9600bdf4 <parse_hdmi_prod_settings+0x54>
			err = parse_prod_list(fdt, prod_offset, PROD_LIST_SOC,
    9600be40:	b0000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600be44:	910113a4 	add	x4, x29, #0x44
    9600be48:	910123a3 	add	x3, x29, #0x48
    9600be4c:	9139a042 	add	x2, x2, #0xe68
    9600be50:	2a1403e1 	mov	w1, w20
    9600be54:	aa1303e0 	mov	x0, x19
    9600be58:	97fffea9 	bl	9600b8fc <parse_prod_list>
		if (err == TEGRABL_NO_ERROR)
    9600be5c:	35fffc20 	cbnz	w0, 9600bde0 <parse_hdmi_prod_settings+0x40>
    9600be60:	17ffffe5 	b	9600bdf4 <parse_hdmi_prod_settings+0x54>

000000009600be64 <parse_dp_dtb_settings>:
	"pc2_l2",
	"pc2_l3",
};

tegrabl_error_t parse_dp_dtb_settings(const void *fdt, int32_t offset, struct tegrabl_display_dp_dtb *dp_dtb)
{
    9600be64:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
	const struct fdt_property *property;
	uint32_t temp[10];
	const uint32_t *val;
	uint32_t i, j, k, m, n;

	property = fdt_get_property(fdt, offset, "nvidia,lanes", NULL);
    9600be68:	d2800003 	mov	x3, #0x0                   	// #0
{
    9600be6c:	910003fd 	mov	x29, sp
    9600be70:	a90153f3 	stp	x19, x20, [sp, #16]
    9600be74:	aa0203f3 	mov	x19, x2
    9600be78:	a9025bf5 	stp	x21, x22, [sp, #32]
	property = fdt_get_property(fdt, offset, "nvidia,lanes", NULL);
    9600be7c:	d0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
{
    9600be80:	a90363f7 	stp	x23, x24, [sp, #48]
    9600be84:	aa0003f4 	mov	x20, x0
    9600be88:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600be8c:	2a0103f7 	mov	w23, w1
    9600be90:	a90573fb 	stp	x27, x28, [sp, #80]
	property = fdt_get_property(fdt, offset, "nvidia,lanes", NULL);
    9600be94:	9104c042 	add	x2, x2, #0x130
    9600be98:	9400982b 	bl	96031f44 <fdt_get_property>
	if (property != NULL) {
    9600be9c:	b4000540 	cbz	x0, 9600bf44 <parse_dp_dtb_settings+0xe0>
		dp_dtb->lanes = fdt32_to_cpu(*(property->data32));
    9600bea0:	b9400c00 	ldr	w0, [x0, #12]
    9600bea4:	97fffcc3 	bl	9600b1b0 <fdt32_to_cpu>
    9600bea8:	b9000660 	str	w0, [x19, #4]
	} else {
		dp_dtb->lanes = 0;
		pr_warn("nvidia,lanes property not found\n");
	}

	property = fdt_get_property(fdt, offset, "nvidia,link_bw", NULL);
    9600beac:	d0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600beb0:	d2800003 	mov	x3, #0x0                   	// #0
    9600beb4:	91058442 	add	x2, x2, #0x161
    9600beb8:	2a1703e1 	mov	w1, w23
    9600bebc:	aa1403e0 	mov	x0, x20
    9600bec0:	94009821 	bl	96031f44 <fdt_get_property>
	if (property != NULL) {
    9600bec4:	b40004a0 	cbz	x0, 9600bf58 <parse_dp_dtb_settings+0xf4>
		dp_dtb->link_bw = fdt32_to_cpu(*(property->data32));
    9600bec8:	b9400c00 	ldr	w0, [x0, #12]
    9600becc:	97fffcb9 	bl	9600b1b0 <fdt32_to_cpu>
    9600bed0:	b9000a60 	str	w0, [x19, #8]
	} else {
		dp_dtb->link_bw = 0;
		pr_warn("nvidia,link_bw property not found\n");
	}

	property = fdt_get_property(fdt, offset, "nvidia,pc2-disabled", NULL);
    9600bed4:	d0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600bed8:	d2800003 	mov	x3, #0x0                   	// #0
    9600bedc:	91065842 	add	x2, x2, #0x196
    9600bee0:	2a1703e1 	mov	w1, w23
    9600bee4:	aa1403e0 	mov	x0, x20
    9600bee8:	94009817 	bl	96031f44 <fdt_get_property>
	if (property != NULL) {
    9600beec:	b4000400 	cbz	x0, 9600bf6c <parse_dp_dtb_settings+0x108>
		dp_dtb->pc2_disabled = true;
    9600bef0:	52800020 	mov	w0, #0x1                   	// #1
    9600bef4:	39003260 	strb	w0, [x19, #12]
		dp_dtb->pc2_disabled = false;
		pr_warn("nvidia,pc2-disabled property not found\n");
	}

	/********************* parsing lt-settings***************************/
	dp_lt_setting_offset = fdt_subnode_offset(fdt, offset, "dp-lt-settings");
    9600bef8:	d0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600befc:	2a1703e1 	mov	w1, w23
    9600bf00:	91075442 	add	x2, x2, #0x1d5
    9600bf04:	aa1403e0 	mov	x0, x20
    9600bf08:	94009774 	bl	96031cd8 <fdt_subnode_offset>
    9600bf0c:	2a0003fc 	mov	w28, w0
	if (dp_lt_setting_offset < 0) {
    9600bf10:	37f816a0 	tbnz	w0, #31, 9600c1e4 <parse_dp_dtb_settings+0x380>
		pr_debug("dp-lt-settings node not found\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 11);
		goto lt_data;
	}

	dp_dtb->lt_settings = tegrabl_malloc(ARRAY_SIZE(lt_settings_name) * sizeof(struct dp_lt_settings));
    9600bf14:	d2801500 	mov	x0, #0xa8                  	// #168
    9600bf18:	94006ad8 	bl	96026a78 <tegrabl_malloc>
    9600bf1c:	f9002a60 	str	x0, [x19, #80]
	if (dp_dtb->lt_settings == NULL) {
    9600bf20:	b5000300 	cbnz	x0, 9600bf80 <parse_dp_dtb_settings+0x11c>
		pr_warn("%s: memory allocation failed\n", __func__);
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 4);
    9600bf24:	52808075 	mov	w21, #0x403                 	// #1027
		pr_warn("%s: memory allocation failed\n", __func__);
    9600bf28:	d0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600bf2c:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600bf30:	9102f421 	add	x1, x1, #0xbd
    9600bf34:	91079000 	add	x0, x0, #0x1e4
    9600bf38:	940059ce 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 11);
    9600bf3c:	72ac6c75 	movk	w21, #0x6363, lsl #16
    9600bf40:	14000076 	b	9600c118 <parse_dp_dtb_settings+0x2b4>
		dp_dtb->lanes = 0;
    9600bf44:	b900067f 	str	wzr, [x19, #4]
		pr_warn("nvidia,lanes property not found\n");
    9600bf48:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600bf4c:	9104f400 	add	x0, x0, #0x13d
    9600bf50:	940059c8 	bl	96022670 <tegrabl_printf>
    9600bf54:	17ffffd6 	b	9600beac <parse_dp_dtb_settings+0x48>
		dp_dtb->link_bw = 0;
    9600bf58:	b9000a7f 	str	wzr, [x19, #8]
		pr_warn("nvidia,link_bw property not found\n");
    9600bf5c:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600bf60:	9105c000 	add	x0, x0, #0x170
    9600bf64:	940059c3 	bl	96022670 <tegrabl_printf>
    9600bf68:	17ffffdb 	b	9600bed4 <parse_dp_dtb_settings+0x70>
		dp_dtb->pc2_disabled = false;
    9600bf6c:	3900327f 	strb	wzr, [x19, #12]
		pr_warn("nvidia,pc2-disabled property not found\n");
    9600bf70:	d0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600bf74:	9106a800 	add	x0, x0, #0x1aa
    9600bf78:	940059be 	bl	96022670 <tegrabl_printf>
    9600bf7c:	17ffffdf 	b	9600bef8 <parse_dp_dtb_settings+0x94>
		goto lt_data;
	}

	for (i = 0; i < ARRAY_SIZE(lt_settings_name); i++) {
		temp_offset = fdt_subnode_offset(fdt, dp_lt_setting_offset, lt_settings_name[i]);
    9600bf80:	d0000199 	adrp	x25, 9603d000 <__func__.3609+0x209>
			pr_debug("%s node not found\n", lt_settings_name[i]);
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 12);
			tegrabl_free(dp_dtb->lt_settings);
			goto lt_data;
		}
		property = fdt_get_property(fdt, temp_offset, "nvidia,drive-current", NULL);
    9600bf84:	d000019a 	adrp	x26, 9603d000 <__func__.3609+0x209>
			for (j = 0; j < VOLTAGE_SWING_COUNT; j++) {
				val = property->data32 + j;
				dp_dtb->lt_settings[i].drive_current[j] = fdt32_to_cpu(*val);
			}
		} else {
			pr_warn("error in getting drive_current property offset\n");
    9600bf88:	d000019b 	adrp	x27, 9603d000 <__func__.3609+0x209>
		temp_offset = fdt_subnode_offset(fdt, dp_lt_setting_offset, lt_settings_name[i]);
    9600bf8c:	91046339 	add	x25, x25, #0x118
		property = fdt_get_property(fdt, temp_offset, "nvidia,drive-current", NULL);
    9600bf90:	9108175a 	add	x26, x26, #0x205
			pr_warn("error in getting drive_current property offset\n");
    9600bf94:	91086b7b 	add	x27, x27, #0x21a
    9600bf98:	d2800015 	mov	x21, #0x0                   	// #0
    9600bf9c:	d2800018 	mov	x24, #0x0                   	// #0
		temp_offset = fdt_subnode_offset(fdt, dp_lt_setting_offset, lt_settings_name[i]);
    9600bfa0:	f8787b22 	ldr	x2, [x25, x24, lsl #3]
    9600bfa4:	2a1c03e1 	mov	w1, w28
    9600bfa8:	aa1403e0 	mov	x0, x20
    9600bfac:	9400974b 	bl	96031cd8 <fdt_subnode_offset>
    9600bfb0:	2a0003f6 	mov	w22, w0
		if (temp_offset < 0) {
    9600bfb4:	36f800a0 	tbz	w0, #31, 9600bfc8 <parse_dp_dtb_settings+0x164>
			tegrabl_free(dp_dtb->lt_settings);
    9600bfb8:	f9402a60 	ldr	x0, [x19, #80]
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 12);
    9600bfbc:	528181b5 	mov	w21, #0xc0d                 	// #3085
			tegrabl_free(dp_dtb->lt_settings);
    9600bfc0:	94006abe 	bl	96026ab8 <tegrabl_free>
    9600bfc4:	17ffffde 	b	9600bf3c <parse_dp_dtb_settings+0xd8>
		property = fdt_get_property(fdt, temp_offset, "nvidia,drive-current", NULL);
    9600bfc8:	d2800003 	mov	x3, #0x0                   	// #0
    9600bfcc:	2a0003e1 	mov	w1, w0
    9600bfd0:	aa1a03e2 	mov	x2, x26
    9600bfd4:	aa1403e0 	mov	x0, x20
    9600bfd8:	940097db 	bl	96031f44 <fdt_get_property>
    9600bfdc:	aa0003e3 	mov	x3, x0
		if (property != NULL) {
    9600bfe0:	b4000dc0 	cbz	x0, 9600c198 <parse_dp_dtb_settings+0x334>
				dp_dtb->lt_settings[i].drive_current[j] = fdt32_to_cpu(*val);
    9600bfe4:	f9402a62 	ldr	x2, [x19, #80]
    9600bfe8:	d2800001 	mov	x1, #0x0                   	// #0
    9600bfec:	8b150042 	add	x2, x2, x21
    9600bff0:	8b010060 	add	x0, x3, x1
    9600bff4:	b9400c00 	ldr	w0, [x0, #12]
    9600bff8:	97fffc6e 	bl	9600b1b0 <fdt32_to_cpu>
    9600bffc:	b8216840 	str	w0, [x2, x1]
    9600c000:	91001021 	add	x1, x1, #0x4
			for (j = 0; j < VOLTAGE_SWING_COUNT; j++) {
    9600c004:	f100403f 	cmp	x1, #0x10
    9600c008:	54ffff41 	b.ne	9600bff0 <parse_dp_dtb_settings+0x18c>  // b.any
		}

		property = fdt_get_property(fdt, temp_offset, "nvidia,lane-preemphasis", NULL);
    9600c00c:	d2800003 	mov	x3, #0x0                   	// #0
    9600c010:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c014:	2a1603e1 	mov	w1, w22
    9600c018:	91093442 	add	x2, x2, #0x24d
    9600c01c:	aa1403e0 	mov	x0, x20
    9600c020:	940097c9 	bl	96031f44 <fdt_get_property>
    9600c024:	aa0003e3 	mov	x3, x0
		if (property != NULL) {
    9600c028:	b4000be0 	cbz	x0, 9600c1a4 <parse_dp_dtb_settings+0x340>
			for (j = 0; j < PRE_EMPHASIS_COUNT; j++) {
				val = property->data32 + j;
				dp_dtb->lt_settings[i].pre_emphasis[j] = fdt32_to_cpu(*val);
    9600c02c:	f9402a64 	ldr	x4, [x19, #80]
    9600c030:	d2800001 	mov	x1, #0x0                   	// #0
    9600c034:	8b010060 	add	x0, x3, x1
    9600c038:	b9400c00 	ldr	w0, [x0, #12]
    9600c03c:	97fffc5d 	bl	9600b1b0 <fdt32_to_cpu>
    9600c040:	8b150022 	add	x2, x1, x21
    9600c044:	8b020082 	add	x2, x4, x2
    9600c048:	91001021 	add	x1, x1, #0x4
			for (j = 0; j < PRE_EMPHASIS_COUNT; j++) {
    9600c04c:	f100403f 	cmp	x1, #0x10
				dp_dtb->lt_settings[i].pre_emphasis[j] = fdt32_to_cpu(*val);
    9600c050:	b9001040 	str	w0, [x2, #16]
			for (j = 0; j < PRE_EMPHASIS_COUNT; j++) {
    9600c054:	54ffff01 	b.ne	9600c034 <parse_dp_dtb_settings+0x1d0>  // b.any
			}
		} else {
			pr_warn("error in getting pre_emphasis property offset\n");
		}

		property = fdt_get_property(fdt, temp_offset, "nvidia,post-cursor", NULL);
    9600c058:	d2800003 	mov	x3, #0x0                   	// #0
    9600c05c:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c060:	2a1603e1 	mov	w1, w22
    9600c064:	910a5c42 	add	x2, x2, #0x297
    9600c068:	aa1403e0 	mov	x0, x20
    9600c06c:	940097b6 	bl	96031f44 <fdt_get_property>
    9600c070:	aa0003e3 	mov	x3, x0
		if (property != NULL) {
    9600c074:	b4000a00 	cbz	x0, 9600c1b4 <parse_dp_dtb_settings+0x350>
			for (j = 0; j < POST_CURSOR2_COUNT; j++) {
				val = property->data32 + j;
				dp_dtb->lt_settings[i].post_cursor2[j] = fdt32_to_cpu(*val);
    9600c078:	f9402a64 	ldr	x4, [x19, #80]
    9600c07c:	d2800001 	mov	x1, #0x0                   	// #0
    9600c080:	8b010060 	add	x0, x3, x1
    9600c084:	b9400c00 	ldr	w0, [x0, #12]
    9600c088:	97fffc4a 	bl	9600b1b0 <fdt32_to_cpu>
    9600c08c:	8b150022 	add	x2, x1, x21
    9600c090:	8b020082 	add	x2, x4, x2
    9600c094:	91001021 	add	x1, x1, #0x4
			for (j = 0; j < POST_CURSOR2_COUNT; j++) {
    9600c098:	f100403f 	cmp	x1, #0x10
				dp_dtb->lt_settings[i].post_cursor2[j] = fdt32_to_cpu(*val);
    9600c09c:	b9002040 	str	w0, [x2, #32]
			for (j = 0; j < POST_CURSOR2_COUNT; j++) {
    9600c0a0:	54ffff01 	b.ne	9600c080 <parse_dp_dtb_settings+0x21c>  // b.any
			}
		} else {
			pr_warn("error in getting post_cursor2 property offset\n");
		}

		property = fdt_get_property(fdt, temp_offset, "nvidia,tx-pu", NULL);
    9600c0a4:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c0a8:	d2800003 	mov	x3, #0x0                   	// #0
    9600c0ac:	910b7042 	add	x2, x2, #0x2dc
    9600c0b0:	2a1603e1 	mov	w1, w22
    9600c0b4:	aa1403e0 	mov	x0, x20
    9600c0b8:	940097a3 	bl	96031f44 <fdt_get_property>
		if (property != NULL) {
    9600c0bc:	b4000840 	cbz	x0, 9600c1c4 <parse_dp_dtb_settings+0x360>
			dp_dtb->lt_settings[i].tx_pu = fdt32_to_cpu(*(property->data32));
    9600c0c0:	f9402a61 	ldr	x1, [x19, #80]
    9600c0c4:	b9400c00 	ldr	w0, [x0, #12]
    9600c0c8:	8b150021 	add	x1, x1, x21
    9600c0cc:	97fffc39 	bl	9600b1b0 <fdt32_to_cpu>
    9600c0d0:	b9003020 	str	w0, [x1, #48]
		} else {
			pr_warn("error in getting drive current property offset\n");
		}
		property = fdt_get_property(fdt, temp_offset, "nvidia,load-adj", NULL);
    9600c0d4:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c0d8:	d2800003 	mov	x3, #0x0                   	// #0
    9600c0dc:	910c7042 	add	x2, x2, #0x31c
    9600c0e0:	2a1603e1 	mov	w1, w22
    9600c0e4:	aa1403e0 	mov	x0, x20
    9600c0e8:	94009797 	bl	96031f44 <fdt_get_property>
		if (property != NULL) {
    9600c0ec:	b4000740 	cbz	x0, 9600c1d4 <parse_dp_dtb_settings+0x370>
			dp_dtb->lt_settings[i].load_adj = fdt32_to_cpu(*(property->data32));
    9600c0f0:	f9402a61 	ldr	x1, [x19, #80]
    9600c0f4:	b9400c00 	ldr	w0, [x0, #12]
    9600c0f8:	8b150021 	add	x1, x1, x21
    9600c0fc:	97fffc2d 	bl	9600b1b0 <fdt32_to_cpu>
    9600c100:	b9003420 	str	w0, [x1, #52]
    9600c104:	91000718 	add	x24, x24, #0x1
    9600c108:	9100e2b5 	add	x21, x21, #0x38
	for (i = 0; i < ARRAY_SIZE(lt_settings_name); i++) {
    9600c10c:	f1000f1f 	cmp	x24, #0x3
    9600c110:	54fff481 	b.ne	9600bfa0 <parse_dp_dtb_settings+0x13c>  // b.any
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9600c114:	52800015 	mov	w21, #0x0                   	// #0
	}
	pr_debug("%s: DP lt-settings parsed successfully\n", __func__);

lt_data:
	/******************** parsing lt-data *****************************/
	dp_lt_data_offset = fdt_subnode_offset(fdt, offset, "lt-data");
    9600c118:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c11c:	2a1703e1 	mov	w1, w23
    9600c120:	910d6842 	add	x2, x2, #0x35a
    9600c124:	aa1403e0 	mov	x0, x20
    9600c128:	940096ec 	bl	96031cd8 <fdt_subnode_offset>
    9600c12c:	2a0003f9 	mov	w25, w0
	if (dp_lt_data_offset < 0) {
    9600c130:	37f810c0 	tbnz	w0, #31, 9600c348 <parse_dp_dtb_settings+0x4e4>
		pr_debug("dp-lt-data node not found\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 9);
		goto fail;
	}

	dp_dtb->lt_data = tegrabl_malloc(ARRAY_SIZE(lt_data_name) * sizeof(struct dp_lt_data));
    9600c134:	d280a000 	mov	x0, #0x500                 	// #1280
    9600c138:	94006a50 	bl	96026a78 <tegrabl_malloc>
    9600c13c:	f9002660 	str	x0, [x19, #72]
    9600c140:	d2800016 	mov	x22, #0x0                   	// #0
	if (dp_dtb->lt_data == NULL) {
    9600c144:	b4000540 	cbz	x0, 9600c1ec <parse_dp_dtb_settings+0x388>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 3);
		goto fail;
	}

	for (i = 0; i < ARRAY_SIZE(lt_data_name); i++) {
		if (strlen(lt_data_name[i]) >= sizeof(dp_dtb->lt_data[i].name)) {
    9600c148:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
			goto fail;
		}

		for (j = 0; j < ARRAY_SIZE(lt_data_child_name); j++) {
			k = 0;
			memset(temp, 0, sizeof(temp));
    9600c14c:	9101e3b7 	add	x23, x29, #0x78
		if (strlen(lt_data_name[i]) >= sizeof(dp_dtb->lt_data[i].name)) {
    9600c150:	9103e000 	add	x0, x0, #0xf8
    9600c154:	f90037a0 	str	x0, [x29, #104]
			property = fdt_get_property(fdt, temp_offset, lt_data_child_name[j], NULL);
    9600c158:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c15c:	91036000 	add	x0, x0, #0xd8
    9600c160:	f90033a0 	str	x0, [x29, #96]
		if (strlen(lt_data_name[i]) >= sizeof(dp_dtb->lt_data[i].name)) {
    9600c164:	f94037a0 	ldr	x0, [x29, #104]
    9600c168:	f8767818 	ldr	x24, [x0, x22, lsl #3]
    9600c16c:	aa1803e0 	mov	x0, x24
    9600c170:	94007867 	bl	9602a30c <strlen>
    9600c174:	f100fc1f 	cmp	x0, #0x3f
    9600c178:	540004a9 	b.ls	9600c20c <parse_dp_dtb_settings+0x3a8>  // b.plast
			pr_error("%s: lt_data node name is too long", __func__);
    9600c17c:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600c180:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c184:	9102f421 	add	x1, x1, #0xbd
    9600c188:	910d8800 	add	x0, x0, #0x362
			err = TEGRABL_ERROR(TEGRABL_ERR_NAME_TOO_LONG, 0);
    9600c18c:	52800155 	mov	w21, #0xa                   	// #10
			pr_error("%s: lt_data node name is too long", __func__);
    9600c190:	94005938 	bl	96022670 <tegrabl_printf>
    9600c194:	1400001c 	b	9600c204 <parse_dp_dtb_settings+0x3a0>
			pr_warn("error in getting drive_current property offset\n");
    9600c198:	aa1b03e0 	mov	x0, x27
    9600c19c:	94005935 	bl	96022670 <tegrabl_printf>
    9600c1a0:	17ffff9b 	b	9600c00c <parse_dp_dtb_settings+0x1a8>
			pr_warn("error in getting pre_emphasis property offset\n");
    9600c1a4:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c1a8:	91099400 	add	x0, x0, #0x265
    9600c1ac:	94005931 	bl	96022670 <tegrabl_printf>
    9600c1b0:	17ffffaa 	b	9600c058 <parse_dp_dtb_settings+0x1f4>
			pr_warn("error in getting post_cursor2 property offset\n");
    9600c1b4:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c1b8:	910aa800 	add	x0, x0, #0x2aa
    9600c1bc:	9400592d 	bl	96022670 <tegrabl_printf>
    9600c1c0:	17ffffb9 	b	9600c0a4 <parse_dp_dtb_settings+0x240>
			pr_warn("error in getting drive current property offset\n");
    9600c1c4:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c1c8:	910ba400 	add	x0, x0, #0x2e9
    9600c1cc:	94005929 	bl	96022670 <tegrabl_printf>
    9600c1d0:	17ffffc1 	b	9600c0d4 <parse_dp_dtb_settings+0x270>
			pr_warn("error in getting load_adj property offset\n");
    9600c1d4:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c1d8:	910cb000 	add	x0, x0, #0x32c
    9600c1dc:	94005925 	bl	96022670 <tegrabl_printf>
    9600c1e0:	17ffffc9 	b	9600c104 <parse_dp_dtb_settings+0x2a0>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 11);
    9600c1e4:	528161b5 	mov	w21, #0xb0d                 	// #2829
    9600c1e8:	17ffff55 	b	9600bf3c <parse_dp_dtb_settings+0xd8>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 3);
    9600c1ec:	52806075 	mov	w21, #0x303                 	// #771
		pr_warn("%s: memory allocation failed\n", __func__);
    9600c1f0:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600c1f4:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c1f8:	9102f421 	add	x1, x1, #0xbd
    9600c1fc:	91079000 	add	x0, x0, #0x1e4
    9600c200:	9400591c 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 9);
    9600c204:	72ac6c75 	movk	w21, #0x6363, lsl #16
	}

	pr_debug("%s: DP lt-data parsed successfully\n", __func__);

fail:
	return err;
    9600c208:	14000048 	b	9600c328 <parse_dp_dtb_settings+0x4c4>
    9600c20c:	d2802800 	mov	x0, #0x140                 	// #320
			strncpy(dp_dtb->lt_data[i].name, lt_data_name[i], sizeof(dp_dtb->lt_data[i].name));
    9600c210:	d2800802 	mov	x2, #0x40                  	// #64
    9600c214:	aa1803e1 	mov	x1, x24
    9600c218:	9b007eda 	mul	x26, x22, x0
    9600c21c:	f9402660 	ldr	x0, [x19, #72]
    9600c220:	8b1a0000 	add	x0, x0, x26
    9600c224:	91040000 	add	x0, x0, #0x100
    9600c228:	9400782a 	bl	9602a2d0 <strncpy>
		temp_offset = fdt_subnode_offset(fdt, dp_lt_data_offset, lt_data_name[i]);
    9600c22c:	aa1803e2 	mov	x2, x24
    9600c230:	2a1903e1 	mov	w1, w25
    9600c234:	aa1403e0 	mov	x0, x20
    9600c238:	940096a8 	bl	96031cd8 <fdt_subnode_offset>
    9600c23c:	2a0003fb 	mov	w27, w0
		if (temp_offset < 0) {
    9600c240:	36f800a0 	tbz	w0, #31, 9600c254 <parse_dp_dtb_settings+0x3f0>
			tegrabl_free(dp_dtb->lt_data);
    9600c244:	f9402660 	ldr	x0, [x19, #72]
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 10);
    9600c248:	528141b5 	mov	w21, #0xa0d                 	// #2573
			tegrabl_free(dp_dtb->lt_data);
    9600c24c:	94006a1b 	bl	96026ab8 <tegrabl_free>
    9600c250:	17ffffed 	b	9600c204 <parse_dp_dtb_settings+0x3a0>
    9600c254:	d280001c 	mov	x28, #0x0                   	// #0
			memset(temp, 0, sizeof(temp));
    9600c258:	d2800502 	mov	x2, #0x28                  	// #40
    9600c25c:	52800001 	mov	w1, #0x0                   	// #0
    9600c260:	aa1703e0 	mov	x0, x23
    9600c264:	940076f1 	bl	96029e28 <memset>
			property = fdt_get_property(fdt, temp_offset, lt_data_child_name[j], NULL);
    9600c268:	f94033a0 	ldr	x0, [x29, #96]
    9600c26c:	d2800003 	mov	x3, #0x0                   	// #0
    9600c270:	2a1b03e1 	mov	w1, w27
    9600c274:	2a1c03f8 	mov	w24, w28
    9600c278:	f87c7802 	ldr	x2, [x0, x28, lsl #3]
    9600c27c:	aa1403e0 	mov	x0, x20
    9600c280:	94009731 	bl	96031f44 <fdt_get_property>
    9600c284:	aa0003e2 	mov	x2, x0
			if (property != NULL) {
    9600c288:	b4000240 	cbz	x0, 9600c2d0 <parse_dp_dtb_settings+0x46c>
    9600c28c:	d2800001 	mov	x1, #0x0                   	// #0
					temp[k] = fdt32_to_cpu(*(property->data32 + k));
    9600c290:	8b010040 	add	x0, x2, x1
    9600c294:	b9400c00 	ldr	w0, [x0, #12]
    9600c298:	97fffbc6 	bl	9600b1b0 <fdt32_to_cpu>
    9600c29c:	b8216ae0 	str	w0, [x23, x1]
    9600c2a0:	91001021 	add	x1, x1, #0x4
				for (k = 0; k < ARRAY_SIZE(temp); k++)
    9600c2a4:	f100a03f 	cmp	x1, #0x28
    9600c2a8:	54ffff41 	b.ne	9600c290 <parse_dp_dtb_settings+0x42c>  // b.any
					dp_dtb->lt_data[i].data[j][m][n] = temp[k++];
    9600c2ac:	d37e7f18 	ubfiz	x24, x24, #2, #32
    9600c2b0:	52800080 	mov	w0, #0x4                   	// #4
			k = 0;
    9600c2b4:	52800003 	mov	w3, #0x0                   	// #0
					dp_dtb->lt_data[i].data[j][m][n] = temp[k++];
    9600c2b8:	52800081 	mov	w1, #0x4                   	// #4
    9600c2bc:	4b000021 	sub	w1, w1, w0
    9600c2c0:	8b010301 	add	x1, x24, x1
				for (n = 0; n < 4-m; n++) {
    9600c2c4:	52800002 	mov	w2, #0x0                   	// #0
					dp_dtb->lt_data[i].data[j][m][n] = temp[k++];
    9600c2c8:	d37ef421 	lsl	x1, x1, #2
    9600c2cc:	1400000b 	b	9600c2f8 <parse_dp_dtb_settings+0x494>
				tegrabl_free(dp_dtb->lt_data);
    9600c2d0:	f9402660 	ldr	x0, [x19, #72]
				err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 2);
    9600c2d4:	528041b5 	mov	w21, #0x20d                 	// #525
				tegrabl_free(dp_dtb->lt_data);
    9600c2d8:	940069f8 	bl	96026ab8 <tegrabl_free>
    9600c2dc:	17ffffca 	b	9600c204 <parse_dp_dtb_settings+0x3a0>
					dp_dtb->lt_data[i].data[j][m][n] = temp[k++];
    9600c2e0:	f9402667 	ldr	x7, [x19, #72]
    9600c2e4:	8b224025 	add	x5, x1, w2, uxtw
    9600c2e8:	b8665ae6 	ldr	w6, [x23, w6, uxtw #2]
				for (n = 0; n < 4-m; n++) {
    9600c2ec:	11000442 	add	w2, w2, #0x1
					dp_dtb->lt_data[i].data[j][m][n] = temp[k++];
    9600c2f0:	8b0508e5 	add	x5, x7, x5, lsl #2
    9600c2f4:	b83a68a6 	str	w6, [x5, x26]
    9600c2f8:	0b030046 	add	w6, w2, w3
				for (n = 0; n < 4-m; n++) {
    9600c2fc:	6b00005f 	cmp	w2, w0
    9600c300:	54ffff03 	b.cc	9600c2e0 <parse_dp_dtb_settings+0x47c>  // b.lo, b.ul, b.last
    9600c304:	0b000063 	add	w3, w3, w0
			for (m = 0; m < 4; m++) {
    9600c308:	71000400 	subs	w0, w0, #0x1
    9600c30c:	54fffd61 	b.ne	9600c2b8 <parse_dp_dtb_settings+0x454>  // b.any
    9600c310:	9100079c 	add	x28, x28, #0x1
		for (j = 0; j < ARRAY_SIZE(lt_data_child_name); j++) {
    9600c314:	f100139f 	cmp	x28, #0x4
    9600c318:	54fffa01 	b.ne	9600c258 <parse_dp_dtb_settings+0x3f4>  // b.any
    9600c31c:	910006d6 	add	x22, x22, #0x1
	for (i = 0; i < ARRAY_SIZE(lt_data_name); i++) {
    9600c320:	f10012df 	cmp	x22, #0x4
    9600c324:	54fff201 	b.ne	9600c164 <parse_dp_dtb_settings+0x300>  // b.any
}
    9600c328:	2a1503e0 	mov	w0, w21
    9600c32c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600c330:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600c334:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600c338:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600c33c:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600c340:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9600c344:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 9);
    9600c348:	528121b5 	mov	w21, #0x90d                 	// #2317
    9600c34c:	17ffffae 	b	9600c204 <parse_dp_dtb_settings+0x3a0>

000000009600c350 <parse_dp_regulator_settings>:

tegrabl_error_t parse_dp_regulator_settings(const void *fdt, int32_t offset,
	struct tegrabl_display_dp_dtb *pdata_dp)
{
    9600c350:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	const uint32_t *temp;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	temp = fdt_getprop(fdt, offset, "vdd-dp-pwr-supply", NULL);
    9600c354:	d2800003 	mov	x3, #0x0                   	// #0
{
    9600c358:	910003fd 	mov	x29, sp
    9600c35c:	a90153f3 	stp	x19, x20, [sp, #16]
    9600c360:	aa0203f3 	mov	x19, x2
    9600c364:	f90013f5 	str	x21, [sp, #32]
	temp = fdt_getprop(fdt, offset, "vdd-dp-pwr-supply", NULL);
    9600c368:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
{
    9600c36c:	aa0003f4 	mov	x20, x0
	temp = fdt_getprop(fdt, offset, "vdd-dp-pwr-supply", NULL);
    9600c370:	910e1c42 	add	x2, x2, #0x387
{
    9600c374:	2a0103f5 	mov	w21, w1
	temp = fdt_getprop(fdt, offset, "vdd-dp-pwr-supply", NULL);
    9600c378:	94009724 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c37c:	b40004e0 	cbz	x0, 9600c418 <parse_dp_regulator_settings+0xc8>
		pdata_dp->vdd_dp_pwr_supply = fdt32_to_cpu(*temp);
    9600c380:	b9400000 	ldr	w0, [x0]
    9600c384:	97fffb8b 	bl	9600b1b0 <fdt32_to_cpu>
		pr_debug("vdd_dp_pwr_supply 0x%x\n", pdata_dp->vdd_dp_pwr_supply);
	} else {
		pdata_dp->vdd_dp_pwr_supply = -1;
    9600c388:	b9001660 	str	w0, [x19, #20]
		pr_debug("no regulator info present for vdd_dp_pwr_supply\n");
	}

	temp = fdt_getprop(fdt, offset, "avdd-dp-pll-supply", NULL);
    9600c38c:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c390:	d2800003 	mov	x3, #0x0                   	// #0
    9600c394:	910e6442 	add	x2, x2, #0x399
    9600c398:	2a1503e1 	mov	w1, w21
    9600c39c:	aa1403e0 	mov	x0, x20
    9600c3a0:	9400971a 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c3a4:	b40003e0 	cbz	x0, 9600c420 <parse_dp_regulator_settings+0xd0>
		pdata_dp->avdd_dp_pll_supply = fdt32_to_cpu(*temp);
    9600c3a8:	b9400000 	ldr	w0, [x0]
    9600c3ac:	97fffb81 	bl	9600b1b0 <fdt32_to_cpu>
		pr_debug("avdd_dp_pll_supply 0x%x\n", pdata_dp->avdd_dp_pll_supply);
	} else {
		pdata_dp->avdd_dp_pll_supply = -1;
    9600c3b0:	b9001a60 	str	w0, [x19, #24]
		pr_debug("no regulator info present for avdd_dp_pll_supply\n");
	}

	temp = fdt_getprop(fdt, offset, "vdd-dp-pad-supply", NULL);
    9600c3b4:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c3b8:	d2800003 	mov	x3, #0x0                   	// #0
    9600c3bc:	910eb042 	add	x2, x2, #0x3ac
    9600c3c0:	2a1503e1 	mov	w1, w21
    9600c3c4:	aa1403e0 	mov	x0, x20
    9600c3c8:	94009710 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c3cc:	b40002e0 	cbz	x0, 9600c428 <parse_dp_regulator_settings+0xd8>
		pdata_dp->vdd_dp_pad_supply = fdt32_to_cpu(*temp);
    9600c3d0:	b9400000 	ldr	w0, [x0]
    9600c3d4:	97fffb77 	bl	9600b1b0 <fdt32_to_cpu>
		pr_debug("vdd_dp_pad_supply 0x%x\n", pdata_dp->vdd_dp_pad_supply);
	} else {
		pdata_dp->vdd_dp_pad_supply = -1;
    9600c3d8:	b9001e60 	str	w0, [x19, #28]
		pr_debug("no regulator info present for vdd_dp_pad_supply\n");
	}

	temp = fdt_getprop(fdt, offset, "vdd_hdmi_5v0-supply", NULL);
    9600c3dc:	90000182 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9600c3e0:	d2800003 	mov	x3, #0x0                   	// #0
    9600c3e4:	913b5042 	add	x2, x2, #0xed4
    9600c3e8:	2a1503e1 	mov	w1, w21
    9600c3ec:	aa1403e0 	mov	x0, x20
    9600c3f0:	94009706 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c3f4:	b40001e0 	cbz	x0, 9600c430 <parse_dp_regulator_settings+0xe0>
		pdata_dp->dp_hdmi_5v0_supply = fdt32_to_cpu(*temp);
    9600c3f8:	b9400000 	ldr	w0, [x0]
    9600c3fc:	97fffb6d 	bl	9600b1b0 <fdt32_to_cpu>
    9600c400:	b9001260 	str	w0, [x19, #16]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9600c404:	52800000 	mov	w0, #0x0                   	// #0
		pr_error("no regulator info present for vdd_hdmi_5v0-supply\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 14);
	}

	return err;
}
    9600c408:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600c40c:	f94013f5 	ldr	x21, [sp, #32]
    9600c410:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600c414:	d65f03c0 	ret
		pdata_dp->vdd_dp_pwr_supply = -1;
    9600c418:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600c41c:	17ffffdb 	b	9600c388 <parse_dp_regulator_settings+0x38>
		pdata_dp->avdd_dp_pll_supply = -1;
    9600c420:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600c424:	17ffffe3 	b	9600c3b0 <parse_dp_regulator_settings+0x60>
		pdata_dp->vdd_dp_pad_supply = -1;
    9600c428:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600c42c:	17ffffeb 	b	9600c3d8 <parse_dp_regulator_settings+0x88>
		pdata_dp->dp_hdmi_5v0_supply = -1;
    9600c430:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600c434:	b9001260 	str	w0, [x19, #16]
		pr_error("no regulator info present for vdd_hdmi_5v0-supply\n");
    9600c438:	90000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600c43c:	913c7c00 	add	x0, x0, #0xf1f
    9600c440:	9400588c 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 14);
    9600c444:	5281c1a0 	mov	w0, #0xe0d                 	// #3597
    9600c448:	72ac6c60 	movk	w0, #0x6363, lsl #16
	return err;
    9600c44c:	17ffffef 	b	9600c408 <parse_dp_regulator_settings+0xb8>

000000009600c450 <parse_edp_regulator_settings>:

tegrabl_error_t parse_edp_regulator_settings(const void *fdt, int32_t offset,
	struct tegrabl_display_dp_dtb *pdata_dp)
{
    9600c450:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	const uint32_t *temp;

	temp = fdt_getprop(fdt, offset, "dvdd_lcd-supply", NULL);
    9600c454:	d2800003 	mov	x3, #0x0                   	// #0
{
    9600c458:	910003fd 	mov	x29, sp
    9600c45c:	a90153f3 	stp	x19, x20, [sp, #16]
    9600c460:	aa0203f3 	mov	x19, x2
    9600c464:	f90013f5 	str	x21, [sp, #32]
	temp = fdt_getprop(fdt, offset, "dvdd_lcd-supply", NULL);
    9600c468:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
{
    9600c46c:	aa0003f4 	mov	x20, x0
	temp = fdt_getprop(fdt, offset, "dvdd_lcd-supply", NULL);
    9600c470:	910ef842 	add	x2, x2, #0x3be
{
    9600c474:	2a0103f5 	mov	w21, w1
	temp = fdt_getprop(fdt, offset, "dvdd_lcd-supply", NULL);
    9600c478:	940096e4 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c47c:	b40003a0 	cbz	x0, 9600c4f0 <parse_edp_regulator_settings+0xa0>
		pdata_dp->dvdd_lcd_supply = fdt32_to_cpu(*temp);
    9600c480:	b9400000 	ldr	w0, [x0]
    9600c484:	97fffb4b 	bl	9600b1b0 <fdt32_to_cpu>
		pr_debug("dvdd_lcd_supply 0x%x\n", pdata_dp->dvdd_lcd_supply);
	} else {
		pdata_dp->dvdd_lcd_supply = -1;
    9600c488:	b9002260 	str	w0, [x19, #32]
		pr_debug("no regulator info present for vdd_dp_pwr_supply\n");
	}

	temp = fdt_getprop(fdt, offset, "avdd_lcd-supply", NULL);
    9600c48c:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c490:	d2800003 	mov	x3, #0x0                   	// #0
    9600c494:	910f3842 	add	x2, x2, #0x3ce
    9600c498:	2a1503e1 	mov	w1, w21
    9600c49c:	aa1403e0 	mov	x0, x20
    9600c4a0:	940096da 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c4a4:	b40002a0 	cbz	x0, 9600c4f8 <parse_edp_regulator_settings+0xa8>
		pdata_dp->avdd_lcd_supply = fdt32_to_cpu(*temp);
    9600c4a8:	b9400000 	ldr	w0, [x0]
    9600c4ac:	97fffb41 	bl	9600b1b0 <fdt32_to_cpu>
		pr_debug("avdd_lcd_supply 0x%x\n", pdata_dp->avdd_lcd_supply);
	} else {
		pdata_dp->avdd_lcd_supply = -1;
    9600c4b0:	b9002660 	str	w0, [x19, #36]
		pr_debug("no regulator info present for avdd_lcd_supply\n");
	}

	temp = fdt_getprop(fdt, offset, "vdd_lcd_bl_en-supply", NULL);
    9600c4b4:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c4b8:	d2800003 	mov	x3, #0x0                   	// #0
    9600c4bc:	910f7842 	add	x2, x2, #0x3de
    9600c4c0:	2a1503e1 	mov	w1, w21
    9600c4c4:	aa1403e0 	mov	x0, x20
    9600c4c8:	940096d0 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c4cc:	b40001a0 	cbz	x0, 9600c500 <parse_edp_regulator_settings+0xb0>
		pdata_dp->vdd_lcd_bl_en_supply = fdt32_to_cpu(*temp);
    9600c4d0:	b9400000 	ldr	w0, [x0]
    9600c4d4:	97fffb37 	bl	9600b1b0 <fdt32_to_cpu>
		pdata_dp->vdd_lcd_bl_en_supply = -1;
		pr_debug("no regulator info present for vdd_lcd_bl_en_supply\n");
	}

	return TEGRABL_NO_ERROR;
}
    9600c4d8:	f94013f5 	ldr	x21, [sp, #32]
		pdata_dp->vdd_lcd_bl_en_supply = -1;
    9600c4dc:	b9002a60 	str	w0, [x19, #40]
}
    9600c4e0:	52800000 	mov	w0, #0x0                   	// #0
    9600c4e4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600c4e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600c4ec:	d65f03c0 	ret
		pdata_dp->dvdd_lcd_supply = -1;
    9600c4f0:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600c4f4:	17ffffe5 	b	9600c488 <parse_edp_regulator_settings+0x38>
		pdata_dp->avdd_lcd_supply = -1;
    9600c4f8:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600c4fc:	17ffffed 	b	9600c4b0 <parse_edp_regulator_settings+0x60>
		pdata_dp->vdd_lcd_bl_en_supply = -1;
    9600c500:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600c504:	17fffff5 	b	9600c4d8 <parse_edp_regulator_settings+0x88>

000000009600c508 <tegrabl_dt_get_prop_u32>:
	return tegrabl_dt_get_prop_by_idx(fdt, node, prop, U32_SZ, 0, res);
    9600c508:	aa0303e5 	mov	x5, x3
    9600c50c:	52800004 	mov	w4, #0x0                   	// #0
    9600c510:	d2800083 	mov	x3, #0x4                   	// #4
    9600c514:	140092a6 	b	96030fac <tegrabl_dt_get_prop_by_idx>

000000009600c518 <parse_nvdisp_dtb_settings>:
#else
#define PROD_TUPLE_DIV 4	/*controller offset, addr, mask, val*/
#endif

void parse_nvdisp_dtb_settings(const void *fdt, int32_t offset, struct tegrabl_display_pdata *pdata)
{
    9600c518:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	uint32_t prop_val;
	const uint32_t *temp;

	temp = fdt_getprop(fdt, offset, "nvidia,dc-ctrlnum", NULL);
    9600c51c:	d2800003 	mov	x3, #0x0                   	// #0
{
    9600c520:	910003fd 	mov	x29, sp
    9600c524:	a90153f3 	stp	x19, x20, [sp, #16]
    9600c528:	aa0203f3 	mov	x19, x2
    9600c52c:	f90013f5 	str	x21, [sp, #32]
	temp = fdt_getprop(fdt, offset, "nvidia,dc-ctrlnum", NULL);
    9600c530:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
{
    9600c534:	aa0003f4 	mov	x20, x0
	temp = fdt_getprop(fdt, offset, "nvidia,dc-ctrlnum", NULL);
    9600c538:	91129c42 	add	x2, x2, #0x4a7
{
    9600c53c:	2a0103f5 	mov	w21, w1
	temp = fdt_getprop(fdt, offset, "nvidia,dc-ctrlnum", NULL);
    9600c540:	940096b2 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c544:	b4000080 	cbz	x0, 9600c554 <parse_nvdisp_dtb_settings+0x3c>
		pdata->nvdisp_instance = fdt32_to_cpu(*temp);
    9600c548:	b9400000 	ldr	w0, [x0]
    9600c54c:	97fffb1b 	bl	9600b1b8 <fdt32_to_cpu>
    9600c550:	b9000a60 	str	w0, [x19, #8]
		pr_debug("nvdisp_instance = %d\n", pdata->nvdisp_instance);
	}

	temp = fdt_getprop(fdt, offset, "nvidia,dc-flags", NULL);
    9600c554:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c558:	d2800003 	mov	x3, #0x0                   	// #0
    9600c55c:	9112e442 	add	x2, x2, #0x4b9
    9600c560:	2a1503e1 	mov	w1, w21
    9600c564:	aa1403e0 	mov	x0, x20
    9600c568:	940096a8 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c56c:	b4000420 	cbz	x0, 9600c5f0 <parse_nvdisp_dtb_settings+0xd8>
		prop_val = fdt32_to_cpu(*temp);
    9600c570:	b9400000 	ldr	w0, [x0]
    9600c574:	97fffb11 	bl	9600b1b8 <fdt32_to_cpu>
		if (prop_val) {
    9600c578:	34000060 	cbz	w0, 9600c584 <parse_nvdisp_dtb_settings+0x6c>
			pdata->flags = NVDISP_FLAG_ENABLED;
    9600c57c:	52800020 	mov	w0, #0x1                   	// #1
    9600c580:	b9000260 	str	w0, [x19]
		pr_debug("dc flags %d\n", prop_val);
	} else {
		pdata->flags = 0x0;
	}

	temp = fdt_getprop(fdt, offset, "nvidia,cmu-enable", NULL);
    9600c584:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c588:	d2800003 	mov	x3, #0x0                   	// #0
    9600c58c:	91132442 	add	x2, x2, #0x4c9
    9600c590:	2a1503e1 	mov	w1, w21
    9600c594:	aa1403e0 	mov	x0, x20
    9600c598:	9400969c 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c59c:	b40000e0 	cbz	x0, 9600c5b8 <parse_nvdisp_dtb_settings+0xa0>
		prop_val = fdt32_to_cpu(*temp);
    9600c5a0:	b9400000 	ldr	w0, [x0]
    9600c5a4:	97fffb05 	bl	9600b1b8 <fdt32_to_cpu>
		if (prop_val) {
    9600c5a8:	34000080 	cbz	w0, 9600c5b8 <parse_nvdisp_dtb_settings+0xa0>
			pdata->flags |= NVDISP_FLAG_CMU_ENABLE;
    9600c5ac:	b9400260 	ldr	w0, [x19]
    9600c5b0:	321f0000 	orr	w0, w0, #0x2
    9600c5b4:	b9000260 	str	w0, [x19]
		}
		pr_debug("cmu enable %d\n", prop_val);
	}

	temp = fdt_getprop(fdt, offset, "nvidia,fb-win", NULL);
    9600c5b8:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c5bc:	d2800003 	mov	x3, #0x0                   	// #0
    9600c5c0:	91136c42 	add	x2, x2, #0x4db
    9600c5c4:	2a1503e1 	mov	w1, w21
    9600c5c8:	aa1403e0 	mov	x0, x20
    9600c5cc:	9400968f 	bl	96032008 <fdt_getprop>
	if (temp != NULL) {
    9600c5d0:	b4000080 	cbz	x0, 9600c5e0 <parse_nvdisp_dtb_settings+0xc8>
		pdata->win_id = fdt32_to_cpu(*temp);
    9600c5d4:	b9400000 	ldr	w0, [x0]
    9600c5d8:	97fffaf8 	bl	9600b1b8 <fdt32_to_cpu>
    9600c5dc:	b9000660 	str	w0, [x19, #4]
		pr_debug("using window %d\n", pdata->win_id);
	}
}
    9600c5e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600c5e4:	f94013f5 	ldr	x21, [sp, #32]
    9600c5e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600c5ec:	d65f03c0 	ret
		pdata->flags = 0x0;
    9600c5f0:	b900027f 	str	wzr, [x19]
    9600c5f4:	17ffffe4 	b	9600c584 <parse_nvdisp_dtb_settings+0x6c>

000000009600c5f8 <parse_prod_settings>:

tegrabl_error_t parse_prod_settings(const void *fdt, int32_t prod_offset, struct prod_list **prod_list,
	struct prod_pair *node_config, uint32_t num_nodes)
{
    9600c5f8:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    9600c5fc:	910003fd 	mov	x29, sp
    9600c600:	a90153f3 	stp	x19, x20, [sp, #16]
    9600c604:	2a0403f4 	mov	w20, w4
    9600c608:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600c60c:	a90363f7 	stp	x23, x24, [sp, #48]
    9600c610:	aa0003f7 	mov	x23, x0
    9600c614:	a9046bf9 	stp	x25, x26, [sp, #64]
	struct prod_tuple *prod_tuple;
	const char *temp;
	struct prod_list *prod_list_l;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	prod_list_l = tegrabl_malloc(sizeof(struct prod_list));
    9600c618:	d2800200 	mov	x0, #0x10                  	// #16
{
    9600c61c:	a90573fb 	stp	x27, x28, [sp, #80]
    9600c620:	2a0103f9 	mov	w25, w1
    9600c624:	aa0303fa 	mov	x26, x3
    9600c628:	f90037a2 	str	x2, [x29, #104]
	prod_list_l = tegrabl_malloc(sizeof(struct prod_list));
    9600c62c:	94006913 	bl	96026a78 <tegrabl_malloc>
	if (prod_list_l == NULL) {
    9600c630:	b5000200 	cbnz	x0, 9600c670 <parse_prod_settings+0x78>
		pr_error("%s: memory allocation failed\n", __func__);
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 5);
    9600c634:	5280a078 	mov	w24, #0x503                 	// #1283
		pr_error("%s: memory allocation failed\n", __func__);
    9600c638:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 5);
    9600c63c:	72ac6c78 	movk	w24, #0x6363, lsl #16
		pr_error("%s: memory allocation failed\n", __func__);
    9600c640:	910fcc21 	add	x1, x1, #0x3f3
    9600c644:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c648:	9113a400 	add	x0, x0, #0x4e9
    9600c64c:	94005809 	bl	96022670 <tegrabl_printf>
	pr_debug("%s, failed to parse prod settings\n", __func__);
	if (prod_list_l) {
		tegrabl_free(prod_list_l);
	}
	return err;
}
    9600c650:	2a1803e0 	mov	w0, w24
    9600c654:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600c658:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600c65c:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600c660:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600c664:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600c668:	a8c87bfd 	ldp	x29, x30, [sp], #128
    9600c66c:	d65f03c0 	ret
    9600c670:	aa0003f3 	mov	x19, x0
	prod_list_l->prod_settings = tegrabl_malloc(prod_list_l->num * sizeof(struct prod_settings));
    9600c674:	d37c7e80 	ubfiz	x0, x20, #4, #32
	prod_list_l->num = num_nodes;
    9600c678:	b9000a74 	str	w20, [x19, #8]
	prod_list_l->prod_settings = tegrabl_malloc(prod_list_l->num * sizeof(struct prod_settings));
    9600c67c:	940068ff 	bl	96026a78 <tegrabl_malloc>
    9600c680:	f9000260 	str	x0, [x19]
	if (prod_list_l->prod_settings == NULL) {
    9600c684:	b5000c00 	cbnz	x0, 9600c804 <parse_prod_settings+0x20c>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 6);
    9600c688:	5280c078 	mov	w24, #0x603                 	// #1539
		pr_error("%s: memory allocation failed\n", __func__);
    9600c68c:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600c690:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c694:	910fcc21 	add	x1, x1, #0x3f3
    9600c698:	9113a400 	add	x0, x0, #0x4e9
    9600c69c:	940057f5 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 3);
    9600c6a0:	72ac6c78 	movk	w24, #0x6363, lsl #16
		tegrabl_free(prod_list_l);
    9600c6a4:	aa1303e0 	mov	x0, x19
    9600c6a8:	94006904 	bl	96026ab8 <tegrabl_free>
    9600c6ac:	17ffffe9 	b	9600c650 <parse_prod_settings+0x58>
		prod_subnode = fdt_subnode_offset(fdt, prod_offset, node_config[i].name);
    9600c6b0:	d37c7ebc 	ubfiz	x28, x21, #4, #32
    9600c6b4:	2a1903e1 	mov	w1, w25
    9600c6b8:	8b1c0340 	add	x0, x26, x28
    9600c6bc:	f9400402 	ldr	x2, [x0, #8]
    9600c6c0:	aa1703e0 	mov	x0, x23
    9600c6c4:	94009585 	bl	96031cd8 <fdt_subnode_offset>
    9600c6c8:	2a0003f8 	mov	w24, w0
		if (prod_subnode < 0) {
    9600c6cc:	36f80120 	tbz	w0, #31, 9600c6f0 <parse_prod_settings+0xf8>
	for (i = 0; i < prod_list_l->num; i++) {
    9600c6d0:	110006b5 	add	w21, w21, #0x1
    9600c6d4:	b9400a60 	ldr	w0, [x19, #8]
    9600c6d8:	6b0002bf 	cmp	w21, w0
    9600c6dc:	54fffea3 	b.cc	9600c6b0 <parse_prod_settings+0xb8>  // b.lo, b.ul, b.last
	*prod_list = prod_list_l;
    9600c6e0:	f94037a0 	ldr	x0, [x29, #104]
	return err;
    9600c6e4:	52800018 	mov	w24, #0x0                   	// #0
	*prod_list = prod_list_l;
    9600c6e8:	f9000013 	str	x19, [x0]
	return err;
    9600c6ec:	17ffffd9 	b	9600c650 <parse_prod_settings+0x58>
		property = fdt_get_property(fdt, prod_subnode, "prod", NULL);
    9600c6f0:	2a0003e1 	mov	w1, w0
    9600c6f4:	d2800003 	mov	x3, #0x0                   	// #0
    9600c6f8:	aa1603e2 	mov	x2, x22
    9600c6fc:	aa1703e0 	mov	x0, x23
    9600c700:	94009611 	bl	96031f44 <fdt_get_property>
    9600c704:	aa0003f4 	mov	x20, x0
		if (!property) {
    9600c708:	b50000e0 	cbnz	x0, 9600c724 <parse_prod_settings+0x12c>
			pr_error("error in getting property (offset) %d\n", prod_subnode);
    9600c70c:	2a1803e1 	mov	w1, w24
    9600c710:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 3);
    9600c714:	528061b8 	mov	w24, #0x30d                 	// #781
			pr_error("error in getting property (offset) %d\n", prod_subnode);
    9600c718:	91143c00 	add	x0, x0, #0x50f
    9600c71c:	940057d5 	bl	96022670 <tegrabl_printf>
    9600c720:	17ffffe0 	b	9600c6a0 <parse_prod_settings+0xa8>
		err = tegrabl_dt_count_elems_of_size(fdt, prod_subnode, "prod", sizeof(uint32_t), &prod_tuple_count);
    9600c724:	2a1803e1 	mov	w1, w24
    9600c728:	9101f3a4 	add	x4, x29, #0x7c
    9600c72c:	52800083 	mov	w3, #0x4                   	// #4
    9600c730:	aa1603e2 	mov	x2, x22
    9600c734:	aa1703e0 	mov	x0, x23
    9600c738:	940092bb 	bl	96031224 <tegrabl_dt_count_elems_of_size>
    9600c73c:	2a0003f8 	mov	w24, w0
		if (err != TEGRABL_NO_ERROR) {
    9600c740:	340000e0 	cbz	w0, 9600c75c <parse_prod_settings+0x164>
			pr_error("%s: Failed to get number of prod tuples\n", __func__);
    9600c744:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600c748:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c74c:	910fcc21 	add	x1, x1, #0x3f3
    9600c750:	9114e400 	add	x0, x0, #0x539
    9600c754:	940057c7 	bl	96022670 <tegrabl_printf>
			goto fail;
    9600c758:	17ffffd3 	b	9600c6a4 <parse_prod_settings+0xac>
		prod_tuple_count /= PROD_TUPLE_DIV;
    9600c75c:	b9407fa0 	ldr	w0, [x29, #124]
			tegrabl_malloc(prod_tuple_count * sizeof(struct prod_tuple));
    9600c760:	52800198 	mov	w24, #0xc                   	// #12
		prod_list_l->prod_settings[i].prod_tuple =
    9600c764:	f9400261 	ldr	x1, [x19]
    9600c768:	f90033a1 	str	x1, [x29, #96]
		prod_tuple_count /= PROD_TUPLE_DIV;
    9600c76c:	1adb0800 	udiv	w0, w0, w27
    9600c770:	b9007fa0 	str	w0, [x29, #124]
			tegrabl_malloc(prod_tuple_count * sizeof(struct prod_tuple));
    9600c774:	9bb87c00 	umull	x0, w0, w24
    9600c778:	940068c0 	bl	96026a78 <tegrabl_malloc>
		prod_list_l->prod_settings[i].prod_tuple =
    9600c77c:	f94033a1 	ldr	x1, [x29, #96]
    9600c780:	f83c6820 	str	x0, [x1, x28]
		if (prod_list_l->prod_settings[i].prod_tuple == NULL) {
    9600c784:	f9400260 	ldr	x0, [x19]
    9600c788:	8b1c0002 	add	x2, x0, x28
    9600c78c:	f87c6801 	ldr	x1, [x0, x28]
    9600c790:	b5000101 	cbnz	x1, 9600c7b0 <parse_prod_settings+0x1b8>
			pr_error("%s: memory allocation failed\n", __func__);
    9600c794:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600c798:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c79c:	910fcc21 	add	x1, x1, #0x3f3
    9600c7a0:	9113a400 	add	x0, x0, #0x4e9
			err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 7);
    9600c7a4:	5280e078 	mov	w24, #0x703                 	// #1795
			pr_error("%s: memory allocation failed\n", __func__);
    9600c7a8:	940057b2 	bl	96022670 <tegrabl_printf>
    9600c7ac:	17ffffbd 	b	9600c6a0 <parse_prod_settings+0xa8>
		prod_list_l->prod_settings[i].count = prod_tuple_count;
    9600c7b0:	b9407fa0 	ldr	w0, [x29, #124]
			temp = property->data + k;
    9600c7b4:	91003294 	add	x20, x20, #0xc
		prod_list_l->prod_settings[i].count = prod_tuple_count;
    9600c7b8:	b9000840 	str	w0, [x2, #8]
		for (j = 0, k = 0; j < prod_tuple_count; j++) {
    9600c7bc:	52800002 	mov	w2, #0x0                   	// #0
    9600c7c0:	9bb80403 	umaddl	x3, w0, w24, x1
    9600c7c4:	eb01007f 	cmp	x3, x1
    9600c7c8:	54fff840 	b.eq	9600c6d0 <parse_prod_settings+0xd8>  // b.none
			prod_tuple[j].addr = fdt32_to_cpu(*(uint32_t *)temp);
    9600c7cc:	b8624a80 	ldr	w0, [x20, w2, uxtw]
    9600c7d0:	97fffa7a 	bl	9600b1b8 <fdt32_to_cpu>
    9600c7d4:	b9000020 	str	w0, [x1]
			temp = property->data + k;
    9600c7d8:	11001040 	add	w0, w2, #0x4
			prod_tuple[j].mask = fdt32_to_cpu(*(uint32_t *)temp);
    9600c7dc:	b8606a80 	ldr	w0, [x20, x0]
    9600c7e0:	97fffa76 	bl	9600b1b8 <fdt32_to_cpu>
    9600c7e4:	b9000420 	str	w0, [x1, #4]
			temp = property->data + k;
    9600c7e8:	11002040 	add	w0, w2, #0x8
			prod_tuple[j].val = fdt32_to_cpu(*(uint32_t *)temp);
    9600c7ec:	b8606a80 	ldr	w0, [x20, x0]
    9600c7f0:	97fffa72 	bl	9600b1b8 <fdt32_to_cpu>
    9600c7f4:	b9000820 	str	w0, [x1, #8]
			k = k + 4;
    9600c7f8:	11003042 	add	w2, w2, #0xc
    9600c7fc:	91003021 	add	x1, x1, #0xc
    9600c800:	17fffff1 	b	9600c7c4 <parse_prod_settings+0x1cc>
		property = fdt_get_property(fdt, prod_subnode, "prod", NULL);
    9600c804:	b0000196 	adrp	x22, 9603d000 <__func__.3609+0x209>
	for (i = 0; i < prod_list_l->num; i++) {
    9600c808:	52800015 	mov	w21, #0x0                   	// #0
		property = fdt_get_property(fdt, prod_subnode, "prod", NULL);
    9600c80c:	91142ad6 	add	x22, x22, #0x50a
		prod_tuple_count /= PROD_TUPLE_DIV;
    9600c810:	5280007b 	mov	w27, #0x3                   	// #3
    9600c814:	17ffffb0 	b	9600c6d4 <parse_prod_settings+0xdc>

000000009600c818 <tegrabl_display_parse_xbar>:

void tegrabl_display_parse_xbar(const void *fdt, int32_t sor_offset, struct tegrabl_display_sor_dtb *sor_dtb)
{
    9600c818:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600c81c:	910003fd 	mov	x29, sp
    9600c820:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t i;

	memset(sor_dtb->xbar_ctrl, 0, XBAR_CNT);
    9600c824:	91002054 	add	x20, x2, #0x8
{
    9600c828:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600c82c:	aa0203f3 	mov	x19, x2
    9600c830:	aa0003f5 	mov	x21, x0
    9600c834:	2a0103f6 	mov	w22, w1
	memset(sor_dtb->xbar_ctrl, 0, XBAR_CNT);
    9600c838:	d28000a2 	mov	x2, #0x5                   	// #5
    9600c83c:	52800001 	mov	w1, #0x0                   	// #0
    9600c840:	aa1403e0 	mov	x0, x20
    9600c844:	94007579 	bl	96029e28 <memset>
	return tegrabl_dt_get_prop_array(fdt, node, prop, U32_SZ, nmem, res, num);
    9600c848:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c84c:	d2800006 	mov	x6, #0x0                   	// #0
    9600c850:	aa1403e5 	mov	x5, x20
    9600c854:	528000a4 	mov	w4, #0x5                   	// #5
    9600c858:	d2800083 	mov	x3, #0x4                   	// #4
    9600c85c:	91159442 	add	x2, x2, #0x565
    9600c860:	2a1603e1 	mov	w1, w22
    9600c864:	aa1503e0 	mov	x0, x21
    9600c868:	940091f6 	bl	96031040 <tegrabl_dt_get_prop_array>

	if (tegrabl_dt_get_prop_u32_array(fdt, sor_offset, "nvidia,xbar-ctrl", XBAR_CNT,
    9600c86c:	340001c0 	cbz	w0, 9600c8a4 <tegrabl_display_parse_xbar+0x8c>
									  sor_dtb->xbar_ctrl, NULL) == TEGRABL_NO_ERROR) {
		for (i = 0; i < XBAR_CNT; i++) {
			pr_debug("nvidia,xbar-ctrl = %d\n", sor_dtb->xbar_ctrl[i]);
		}
	} else {
		pr_warn("error in getting xbar-ctrl property offset\n");
    9600c870:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c874:	9115d800 	add	x0, x0, #0x576
    9600c878:	9400577e 	bl	96022670 <tegrabl_printf>
		pr_warn("setting to default values 0 1 2 3 4\n");
    9600c87c:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600c880:	91169400 	add	x0, x0, #0x5a5
    9600c884:	9400577b 	bl	96022670 <tegrabl_printf>
		for (i = 0; i < XBAR_CNT; i++) {
			sor_dtb->xbar_ctrl[i] = i;
    9600c888:	d2c00020 	mov	x0, #0x100000000           	// #4294967296
    9600c88c:	f9000660 	str	x0, [x19, #8]
    9600c890:	d2800040 	mov	x0, #0x2                   	// #2
    9600c894:	f2c00060 	movk	x0, #0x3, lsl #32
    9600c898:	f9000a60 	str	x0, [x19, #16]
    9600c89c:	52800080 	mov	w0, #0x4                   	// #4
    9600c8a0:	b9001a60 	str	w0, [x19, #24]
		}
	}
}
    9600c8a4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600c8a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600c8ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600c8b0:	d65f03c0 	ret

000000009600c8b4 <parse_display_timings>:

struct nvdisp_mode *parse_display_timings(const void *fdt, int32_t disp_off)
{
    9600c8b4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600c8b8:	910003fd 	mov	x29, sp
    9600c8bc:	a90153f3 	stp	x19, x20, [sp, #16]
    9600c8c0:	aa0003f4 	mov	x20, x0
    9600c8c4:	f90013f5 	str	x21, [sp, #32]
	int32_t timing_node = -1;
	int32_t res_node = -1;
	struct nvdisp_mode *mode = NULL;

	mode = tegrabl_malloc(sizeof(struct nvdisp_mode));
    9600c8c8:	d2800780 	mov	x0, #0x3c                  	// #60
{
    9600c8cc:	2a0103f5 	mov	w21, w1
	mode = tegrabl_malloc(sizeof(struct nvdisp_mode));
    9600c8d0:	9400686a 	bl	96026a78 <tegrabl_malloc>
    9600c8d4:	aa0003f3 	mov	x19, x0
	if (mode == NULL) {
    9600c8d8:	b5000120 	cbnz	x0, 9600c8fc <parse_display_timings+0x48>
		pr_error("memory allocation failed\n");
    9600c8dc:	90000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
    9600c8e0:	9127f000 	add	x0, x0, #0x9fc
    9600c8e4:	94005763 	bl	96022670 <tegrabl_printf>

	return mode;

fail:
	return NULL;
}
    9600c8e8:	aa1303e0 	mov	x0, x19
    9600c8ec:	f94013f5 	ldr	x21, [sp, #32]
    9600c8f0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600c8f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600c8f8:	d65f03c0 	ret
	memset(mode, 0, sizeof(struct nvdisp_mode));
    9600c8fc:	d2800782 	mov	x2, #0x3c                  	// #60
    9600c900:	52800001 	mov	w1, #0x0                   	// #0
    9600c904:	94007549 	bl	96029e28 <memset>
	timing_node = fdt_subnode_offset(fdt, disp_off, "display-timings");
    9600c908:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c90c:	2a1503e1 	mov	w1, w21
    9600c910:	91101c42 	add	x2, x2, #0x407
    9600c914:	aa1403e0 	mov	x0, x20
    9600c918:	940094f0 	bl	96031cd8 <fdt_subnode_offset>
	if (timing_node < 0) {
    9600c91c:	36f80060 	tbz	w0, #31, 9600c928 <parse_display_timings+0x74>
	return NULL;
    9600c920:	d2800013 	mov	x19, #0x0                   	// #0
    9600c924:	17fffff1 	b	9600c8e8 <parse_display_timings+0x34>
	res_node = fdt_first_subnode(fdt, timing_node);
    9600c928:	2a0003e1 	mov	w1, w0
    9600c92c:	aa1403e0 	mov	x0, x20
    9600c930:	94009420 	bl	960319b0 <fdt_first_subnode>
    9600c934:	2a0003f5 	mov	w21, w0
	if (res_node < 0) {
    9600c938:	37ffff40 	tbnz	w0, #31, 9600c920 <parse_display_timings+0x6c>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "clock-frequency", &mode->pclk);
    9600c93c:	aa1303e3 	mov	x3, x19
    9600c940:	2a0003e1 	mov	w1, w0
    9600c944:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c948:	aa1403e0 	mov	x0, x20
    9600c94c:	91105c42 	add	x2, x2, #0x417
    9600c950:	97fffeee 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "hactive", &mode->h_active);
    9600c954:	91008263 	add	x3, x19, #0x20
    9600c958:	2a1503e1 	mov	w1, w21
    9600c95c:	aa1403e0 	mov	x0, x20
    9600c960:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c964:	91109c42 	add	x2, x2, #0x427
    9600c968:	97fffee8 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "vactive", &mode->v_active);
    9600c96c:	91009263 	add	x3, x19, #0x24
    9600c970:	2a1503e1 	mov	w1, w21
    9600c974:	aa1403e0 	mov	x0, x20
    9600c978:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c97c:	9110bc42 	add	x2, x2, #0x42f
    9600c980:	97fffee2 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "hfront-porch", &mode->h_front_porch);
    9600c984:	9100a263 	add	x3, x19, #0x28
    9600c988:	2a1503e1 	mov	w1, w21
    9600c98c:	aa1403e0 	mov	x0, x20
    9600c990:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c994:	9110dc42 	add	x2, x2, #0x437
    9600c998:	97fffedc 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "hback-porch", &mode->h_back_porch);
    9600c99c:	91006263 	add	x3, x19, #0x18
    9600c9a0:	2a1503e1 	mov	w1, w21
    9600c9a4:	aa1403e0 	mov	x0, x20
    9600c9a8:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c9ac:	91111042 	add	x2, x2, #0x444
    9600c9b0:	97fffed6 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "vfront-porch", &mode->v_front_porch);
    9600c9b4:	9100b263 	add	x3, x19, #0x2c
    9600c9b8:	2a1503e1 	mov	w1, w21
    9600c9bc:	aa1403e0 	mov	x0, x20
    9600c9c0:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c9c4:	91114042 	add	x2, x2, #0x450
    9600c9c8:	97fffed0 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "vback-porch", &mode->v_back_porch);
    9600c9cc:	91007263 	add	x3, x19, #0x1c
    9600c9d0:	2a1503e1 	mov	w1, w21
    9600c9d4:	aa1403e0 	mov	x0, x20
    9600c9d8:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c9dc:	91117442 	add	x2, x2, #0x45d
    9600c9e0:	97fffeca 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "hsync-len", &mode->h_sync_width);
    9600c9e4:	91004263 	add	x3, x19, #0x10
    9600c9e8:	2a1503e1 	mov	w1, w21
    9600c9ec:	aa1403e0 	mov	x0, x20
    9600c9f0:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600c9f4:	9111a442 	add	x2, x2, #0x469
    9600c9f8:	97fffec4 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "vsync-len", &mode->v_sync_width);
    9600c9fc:	91005263 	add	x3, x19, #0x14
    9600ca00:	2a1503e1 	mov	w1, w21
    9600ca04:	aa1403e0 	mov	x0, x20
    9600ca08:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600ca0c:	9111cc42 	add	x2, x2, #0x473
    9600ca10:	97fffebe 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "nvidia,h-ref-to-sync", &mode->h_ref_to_sync);
    9600ca14:	91002263 	add	x3, x19, #0x8
    9600ca18:	2a1503e1 	mov	w1, w21
    9600ca1c:	aa1403e0 	mov	x0, x20
    9600ca20:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600ca24:	9111f442 	add	x2, x2, #0x47d
    9600ca28:	97fffeb8 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	(void)tegrabl_dt_get_prop_u32(fdt, res_node, "nvidia,v-ref-to-sync", &mode->v_ref_to_sync);
    9600ca2c:	91003263 	add	x3, x19, #0xc
    9600ca30:	b0000182 	adrp	x2, 9603d000 <__func__.3609+0x209>
    9600ca34:	2a1503e1 	mov	w1, w21
    9600ca38:	91124842 	add	x2, x2, #0x492
    9600ca3c:	aa1403e0 	mov	x0, x20
    9600ca40:	97fffeb2 	bl	9600c508 <tegrabl_dt_get_prop_u32>
	return mode;
    9600ca44:	17ffffa9 	b	9600c8e8 <parse_display_timings+0x34>

000000009600ca48 <tegrabl_display_enable_regulator>:
	return err;
}

static tegrabl_error_t tegrabl_display_enable_regulator(int32_t phandle,
														uint32_t voltage)
{
    9600ca48:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9600ca4c:	910003fd 	mov	x29, sp
    9600ca50:	a90153f3 	stp	x19, x20, [sp, #16]
    9600ca54:	2a0103f4 	mov	w20, w1
    9600ca58:	2a0003f3 	mov	w19, w0
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	err = tegrabl_regulator_enable(phandle);
    9600ca5c:	94001a49 	bl	96013380 <tegrabl_regulator_enable>
	if ((TEGRABL_ERROR_REASON(err) == TEGRABL_ERR_NOT_SUPPORTED) || err == TEGRABL_NO_ERROR) {
    9600ca60:	12001c01 	and	w1, w0, #0xff
    9600ca64:	7100043f 	cmp	w1, #0x1
    9600ca68:	54000040 	b.eq	9600ca70 <tegrabl_display_enable_regulator+0x28>  // b.none
    9600ca6c:	35000120 	cbnz	w0, 9600ca90 <tegrabl_display_enable_regulator+0x48>
		err = tegrabl_regulator_set_voltage(phandle, voltage, STANDARD_VOLTS);
    9600ca70:	2a1403e1 	mov	w1, w20
    9600ca74:	52800022 	mov	w2, #0x1                   	// #1
    9600ca78:	2a1303e0 	mov	w0, w19
    9600ca7c:	94001a6f 	bl	96013438 <tegrabl_regulator_set_voltage>
		if ((TEGRABL_ERROR_REASON(err) == TEGRABL_ERR_NOT_SUPPORTED) || err == TEGRABL_NO_ERROR) {
    9600ca80:	12001c01 	and	w1, w0, #0xff
    9600ca84:	7100043f 	cmp	w1, #0x1
    9600ca88:	540000e0 	b.eq	9600caa4 <tegrabl_display_enable_regulator+0x5c>  // b.none
    9600ca8c:	34000060 	cbz	w0, 9600ca98 <tegrabl_display_enable_regulator+0x50>
			return TEGRABL_NO_ERROR;
		}
	}
	return TEGRABL_ERROR(TEGRABL_ERR_REGULATOR, 0);
    9600ca90:	52800ae0 	mov	w0, #0x57                  	// #87
    9600ca94:	72aa2a20 	movk	w0, #0x5151, lsl #16
}
    9600ca98:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600ca9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600caa0:	d65f03c0 	ret
			return TEGRABL_NO_ERROR;
    9600caa4:	52800000 	mov	w0, #0x0                   	// #0
    9600caa8:	17fffffc 	b	9600ca98 <tegrabl_display_enable_regulator+0x50>

000000009600caac <tegrabl_display_init_regulator>:
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	bool is_connected = false;
	struct tegrabl_display_hdmi_dtb hdmi_dtb = pdata->hdmi_dtb;
	struct tegrabl_display_dp_dtb dp_dtb = pdata->dp_dtb;

	switch (du_type) {
    9600caac:	51000400 	sub	w0, w0, #0x1
    9600cab0:	71000c1f 	cmp	w0, #0x3
    9600cab4:	54001308 	b.hi	9600cd14 <tegrabl_display_init_regulator+0x268>  // b.pmore
{
    9600cab8:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600cabc:	aa0103e2 	mov	x2, x1
	switch (du_type) {
    9600cac0:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cac4:	91174021 	add	x1, x1, #0x5d0
{
    9600cac8:	910003fd 	mov	x29, sp
    9600cacc:	a90153f3 	stp	x19, x20, [sp, #16]
    9600cad0:	a9025bf5 	stp	x21, x22, [sp, #32]
	switch (du_type) {
    9600cad4:	38604820 	ldrb	w0, [x1, w0, uxtw]
    9600cad8:	10000061 	adr	x1, 9600cae4 <tegrabl_display_init_regulator+0x38>
    9600cadc:	8b208820 	add	x0, x1, w0, sxtb #2
    9600cae0:	d61f0000 	br	x0
			}
		}
		break;
	case DISPLAY_OUT_DSI:
		/*dsi support can be added as required*/
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9600cae4:	52800020 	mov	w0, #0x1                   	// #1
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_CONNECTED, 0);
    9600cae8:	72aa2a20 	movk	w0, #0x5151, lsl #16
    9600caec:	14000071 	b	9600ccb0 <tegrabl_display_init_regulator+0x204>
	struct tegrabl_display_hdmi_dtb hdmi_dtb = pdata->hdmi_dtb;
    9600caf0:	29445040 	ldp	w0, w20, [x2, #32]
		err = tegrabl_display_enable_regulator(hdmi_dtb.vdd_hdmi_5v0_supply, 5000000);
    9600caf4:	52896801 	mov	w1, #0x4b40                	// #19264
    9600caf8:	72a00981 	movk	w1, #0x4c, lsl #16
	struct tegrabl_display_hdmi_dtb hdmi_dtb = pdata->hdmi_dtb;
    9600cafc:	b9402853 	ldr	w19, [x2, #40]
    9600cb00:	29435456 	ldp	w22, w21, [x2, #24]
		err = tegrabl_display_enable_regulator(hdmi_dtb.vdd_hdmi_5v0_supply, 5000000);
    9600cb04:	97ffffd1 	bl	9600ca48 <tegrabl_display_enable_regulator>
		if (err != TEGRABL_NO_ERROR) {
    9600cb08:	35000d40 	cbnz	w0, 9600ccb0 <tegrabl_display_init_regulator+0x204>
	tegrabl_padctl_config_to_gpio(pin);
    9600cb0c:	2a1403e0 	mov	w0, w20
    9600cb10:	94004978 	bl	9601f0f0 <tegrabl_padctl_config_to_gpio>
	err = tegrabl_gpio_driver_get(chip_id, &gpio_drv);
    9600cb14:	9100e3a1 	add	x1, x29, #0x38
    9600cb18:	52800000 	mov	w0, #0x0                   	// #0
    9600cb1c:	940003ed 	bl	9600dad0 <tegrabl_gpio_driver_get>
	if (err != TEGRABL_NO_ERROR) {
    9600cb20:	340001a0 	cbz	w0, 9600cb54 <tegrabl_display_init_regulator+0xa8>
		pr_error("%s: Failed to get GPIO driver struct\n", __func__);
    9600cb24:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cb28:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cb2c:	91175021 	add	x1, x1, #0x5d4
    9600cb30:	91183400 	add	x0, x0, #0x60d
    9600cb34:	940056cf 	bl	96022670 <tegrabl_printf>
			pr_error("%s: cannot read hdmi pin status\n", __func__);
    9600cb38:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cb3c:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cb40:	9117b821 	add	x1, x1, #0x5ee
    9600cb44:	911b0000 	add	x0, x0, #0x6c0
    9600cb48:	940056ca 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_CONNECTED, 0);
    9600cb4c:	528004c0 	mov	w0, #0x26                  	// #38
    9600cb50:	17ffffe6 	b	9600cae8 <tegrabl_display_init_regulator+0x3c>
	err = gpio_config(gpio_drv, pin, GPIO_PINMODE_INPUT);
    9600cb54:	f9401fa0 	ldr	x0, [x29, #56]
 */
static inline tegrabl_error_t gpio_config(struct gpio_driver *drv,
										  uint32_t gpio_num,
										  gpio_pin_mode_t mode)
{
	return drv->ops->config(gpio_num, mode, drv->driver_data);
    9600cb58:	f9401401 	ldr	x1, [x0, #40]
    9600cb5c:	f9400802 	ldr	x2, [x0, #16]
    9600cb60:	2a1403e0 	mov	w0, w20
    9600cb64:	f9400823 	ldr	x3, [x1, #16]
    9600cb68:	52800001 	mov	w1, #0x0                   	// #0
    9600cb6c:	d63f0060 	blr	x3
	if (err != TEGRABL_NO_ERROR) {
    9600cb70:	34000100 	cbz	w0, 9600cb90 <tegrabl_display_init_regulator+0xe4>
		pr_error("%s: Failed to configure GPIO pin: %d\n", __func__, pin);
    9600cb74:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cb78:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cb7c:	2a1403e2 	mov	w2, w20
    9600cb80:	91175021 	add	x1, x1, #0x5d4
    9600cb84:	9118d800 	add	x0, x0, #0x636
		pr_error("%s: Failed to read GPIO pin: %d\n", __func__, pin);
    9600cb88:	940056ba 	bl	96022670 <tegrabl_printf>
    9600cb8c:	17ffffeb 	b	9600cb38 <tegrabl_display_init_regulator+0x8c>
	err = gpio_read(gpio_drv, pin, &state);
    9600cb90:	f9401fa0 	ldr	x0, [x29, #56]
	return drv->ops->read(gpio_num, state, drv->driver_data);
    9600cb94:	f9401401 	ldr	x1, [x0, #40]
    9600cb98:	f9400802 	ldr	x2, [x0, #16]
    9600cb9c:	2a1403e0 	mov	w0, w20
    9600cba0:	f9400023 	ldr	x3, [x1]
    9600cba4:	9100d3a1 	add	x1, x29, #0x34
    9600cba8:	d63f0060 	blr	x3
	if (err != TEGRABL_NO_ERROR) {
    9600cbac:	340000e0 	cbz	w0, 9600cbc8 <tegrabl_display_init_regulator+0x11c>
		pr_error("%s: Failed to read GPIO pin: %d\n", __func__, pin);
    9600cbb0:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cbb4:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cbb8:	2a1403e2 	mov	w2, w20
    9600cbbc:	91175021 	add	x1, x1, #0x5d4
    9600cbc0:	91197c00 	add	x0, x0, #0x65f
    9600cbc4:	17fffff1 	b	9600cb88 <tegrabl_display_init_regulator+0xdc>
	if (hdmi_dtb->polarity & TEGRABL_HDMI_HOTPLUG_MASK) {
    9600cbc8:	d27f0273 	eor	x19, x19, #0x2
	if (state == check_state) {
    9600cbcc:	b94037a0 	ldr	w0, [x29, #52]
	if (hdmi_dtb->polarity & TEGRABL_HDMI_HOTPLUG_MASK) {
    9600cbd0:	d3410673 	ubfx	x19, x19, #1, #1
	if (state == check_state) {
    9600cbd4:	6b13001f 	cmp	w0, w19
    9600cbd8:	54000100 	b.eq	9600cbf8 <tegrabl_display_init_regulator+0x14c>  // b.none
			pr_error("%s: hdmi cable is not connected\n", __func__);
    9600cbdc:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cbe0:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cbe4:	9117b821 	add	x1, x1, #0x5ee
    9600cbe8:	911a0c00 	add	x0, x0, #0x683
    9600cbec:	940056a1 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_CONNECTED, 1);
    9600cbf0:	528024c0 	mov	w0, #0x126                 	// #294
    9600cbf4:	17ffffbd 	b	9600cae8 <tegrabl_display_init_regulator+0x3c>
		pr_info("hdmi cable connected\n");
    9600cbf8:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cbfc:	911a9c00 	add	x0, x0, #0x6a7
    9600cc00:	9400569c 	bl	96022670 <tegrabl_printf>
		err = tegrabl_display_enable_regulator(hdmi_dtb.avdd_hdmi_supply, 1050000);
    9600cc04:	5280b201 	mov	w1, #0x590                 	// #1424
    9600cc08:	2a1603e0 	mov	w0, w22
    9600cc0c:	72a00201 	movk	w1, #0x10, lsl #16
    9600cc10:	97ffff8e 	bl	9600ca48 <tegrabl_display_enable_regulator>
		if (err != TEGRABL_NO_ERROR) {
    9600cc14:	350004e0 	cbnz	w0, 9600ccb0 <tegrabl_display_init_regulator+0x204>
		err = tegrabl_display_enable_regulator(hdmi_dtb.avdd_hdmi_pll_supply, 1800000);
    9600cc18:	528ee801 	mov	w1, #0x7740                	// #30528
    9600cc1c:	2a1503e0 	mov	w0, w21
    9600cc20:	72a00361 	movk	w1, #0x1b, lsl #16
			err = tegrabl_display_enable_regulator(dp_dtb.vdd_lcd_bl_en_supply, 1800000);
    9600cc24:	97ffff89 	bl	9600ca48 <tegrabl_display_enable_regulator>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
		break;
	}

fail:
	if (err != TEGRABL_NO_ERROR) {
    9600cc28:	35000440 	cbnz	w0, 9600ccb0 <tegrabl_display_init_regulator+0x204>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_CONNECTED, 1);
    9600cc2c:	52800000 	mov	w0, #0x0                   	// #0
		TEGRABL_SET_HIGHEST_MODULE(err);
	}
	return err;
}
    9600cc30:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600cc34:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600cc38:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600cc3c:	d65f03c0 	ret
	struct tegrabl_display_dp_dtb dp_dtb = pdata->dp_dtb;
    9600cc40:	29490053 	ldp	w19, w0, [x2, #72]
    9600cc44:	294a5055 	ldp	w21, w20, [x2, #80]
		if (dp_dtb.vdd_dp_pwr_supply > 0) {
    9600cc48:	7100001f 	cmp	w0, #0x0
    9600cc4c:	540002ac 	b.gt	9600cca0 <tegrabl_display_init_regulator+0x1f4>
		if (dp_dtb.avdd_dp_pll_supply > 0) {
    9600cc50:	710002bf 	cmp	w21, #0x0
    9600cc54:	540000cd 	b.le	9600cc6c <tegrabl_display_init_regulator+0x1c0>
			err = tegrabl_display_enable_regulator(dp_dtb.avdd_dp_pll_supply, 1800000);
    9600cc58:	528ee801 	mov	w1, #0x7740                	// #30528
    9600cc5c:	2a1503e0 	mov	w0, w21
    9600cc60:	72a00361 	movk	w1, #0x1b, lsl #16
    9600cc64:	97ffff79 	bl	9600ca48 <tegrabl_display_enable_regulator>
			if (err != TEGRABL_NO_ERROR) {
    9600cc68:	35000240 	cbnz	w0, 9600ccb0 <tegrabl_display_init_regulator+0x204>
		if (dp_dtb.vdd_dp_pad_supply > 0) {
    9600cc6c:	7100029f 	cmp	w20, #0x0
    9600cc70:	540000cd 	b.le	9600cc88 <tegrabl_display_init_regulator+0x1dc>
			err = tegrabl_display_enable_regulator(dp_dtb.vdd_dp_pad_supply, 5000000);
    9600cc74:	52896801 	mov	w1, #0x4b40                	// #19264
    9600cc78:	2a1403e0 	mov	w0, w20
    9600cc7c:	72a00981 	movk	w1, #0x4c, lsl #16
    9600cc80:	97ffff72 	bl	9600ca48 <tegrabl_display_enable_regulator>
			if (err != TEGRABL_NO_ERROR) {
    9600cc84:	35000160 	cbnz	w0, 9600ccb0 <tegrabl_display_init_regulator+0x204>
		if (dp_dtb.dp_hdmi_5v0_supply > 0) {
    9600cc88:	7100027f 	cmp	w19, #0x0
    9600cc8c:	54fffd0d 	b.le	9600cc2c <tegrabl_display_init_regulator+0x180>
			err = tegrabl_display_enable_regulator(dp_dtb.dp_hdmi_5v0_supply, 5000000);
    9600cc90:	52896801 	mov	w1, #0x4b40                	// #19264
    9600cc94:	72a00981 	movk	w1, #0x4c, lsl #16
			err = tegrabl_display_enable_regulator(dp_dtb.vdd_lcd_bl_en_supply, 1800000);
    9600cc98:	2a1303e0 	mov	w0, w19
    9600cc9c:	17ffffe2 	b	9600cc24 <tegrabl_display_init_regulator+0x178>
			err = tegrabl_display_enable_regulator(dp_dtb.vdd_dp_pwr_supply, 1000000);
    9600cca0:	52884801 	mov	w1, #0x4240                	// #16960
    9600cca4:	72a001e1 	movk	w1, #0xf, lsl #16
    9600cca8:	97ffff68 	bl	9600ca48 <tegrabl_display_enable_regulator>
			if (err != TEGRABL_NO_ERROR) {
    9600ccac:	34fffd20 	cbz	w0, 9600cc50 <tegrabl_display_init_regulator+0x1a4>
    9600ccb0:	12005c00 	and	w0, w0, #0xffffff
    9600ccb4:	52aa2001 	mov	w1, #0x51000000            	// #1358954496
    9600ccb8:	2a010000 	orr	w0, w0, w1
	return err;
    9600ccbc:	17ffffdd 	b	9600cc30 <tegrabl_display_init_regulator+0x184>
	struct tegrabl_display_dp_dtb dp_dtb = pdata->dp_dtb;
    9600ccc0:	294b5040 	ldp	w0, w20, [x2, #88]
    9600ccc4:	b9406053 	ldr	w19, [x2, #96]
		if (dp_dtb.dvdd_lcd_supply > 0) {
    9600ccc8:	7100001f 	cmp	w0, #0x0
    9600cccc:	540001ac 	b.gt	9600cd00 <tegrabl_display_init_regulator+0x254>
		if (dp_dtb.avdd_lcd_supply > 0) {
    9600ccd0:	7100029f 	cmp	w20, #0x0
    9600ccd4:	540000cd 	b.le	9600ccec <tegrabl_display_init_regulator+0x240>
			err = tegrabl_display_enable_regulator(dp_dtb.avdd_lcd_supply, 3300000);
    9600ccd8:	528b5401 	mov	w1, #0x5aa0                	// #23200
    9600ccdc:	2a1403e0 	mov	w0, w20
    9600cce0:	72a00641 	movk	w1, #0x32, lsl #16
    9600cce4:	97ffff59 	bl	9600ca48 <tegrabl_display_enable_regulator>
			if (err != TEGRABL_NO_ERROR) {
    9600cce8:	35fffe40 	cbnz	w0, 9600ccb0 <tegrabl_display_init_regulator+0x204>
		if (dp_dtb.vdd_lcd_bl_en_supply > 0) {
    9600ccec:	7100027f 	cmp	w19, #0x0
    9600ccf0:	54fff9ed 	b.le	9600cc2c <tegrabl_display_init_regulator+0x180>
			err = tegrabl_display_enable_regulator(dp_dtb.vdd_lcd_bl_en_supply, 1800000);
    9600ccf4:	528ee801 	mov	w1, #0x7740                	// #30528
    9600ccf8:	72a00361 	movk	w1, #0x1b, lsl #16
    9600ccfc:	17ffffe7 	b	9600cc98 <tegrabl_display_init_regulator+0x1ec>
			err = tegrabl_display_enable_regulator(dp_dtb.dvdd_lcd_supply, 1800000);
    9600cd00:	528ee801 	mov	w1, #0x7740                	// #30528
    9600cd04:	72a00361 	movk	w1, #0x1b, lsl #16
    9600cd08:	97ffff50 	bl	9600ca48 <tegrabl_display_enable_regulator>
			if (err != TEGRABL_NO_ERROR) {
    9600cd0c:	35fffd20 	cbnz	w0, 9600ccb0 <tegrabl_display_init_regulator+0x204>
    9600cd10:	17fffff0 	b	9600ccd0 <tegrabl_display_init_regulator+0x224>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    9600cd14:	52800380 	mov	w0, #0x1c                  	// #28
    9600cd18:	52aa2001 	mov	w1, #0x51000000            	// #1358954496
    9600cd1c:	72aa2a20 	movk	w0, #0x5151, lsl #16
    9600cd20:	12005c00 	and	w0, w0, #0xffffff
    9600cd24:	2a010000 	orr	w0, w0, w1
}
    9600cd28:	d65f03c0 	ret

000000009600cd2c <tegrabl_display_unpowergate>:
#include <bpmp_abi.h>
#include <powergate-t186.h>
#include <tegrabl_i2c.h>

void tegrabl_display_unpowergate(void)
{
    9600cd2c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	struct mrq_pg_request disp_pg_request = {
    9600cd30:	f0000160 	adrp	x0, 9603b000 <tt_level+0x328>
    9600cd34:	912f4800 	add	x0, x0, #0xbd2
{
    9600cd38:	910003fd 	mov	x29, sp
    9600cd3c:	a90153f3 	stp	x19, x20, [sp, #16]
	};

	while (disp_pg_request.id <= TEGRA186_POWER_DOMAIN_DISPC) {
		if (tegrabl_ccplex_bpmp_xfer(&disp_pg_request, NULL, sizeof(disp_pg_request),
				0, MRQ_PG) != TEGRABL_NO_ERROR) {
			pr_error("%s: Unable to power on - TEGRA186_POWER_DOMAIN_DISP%c\n",
    9600cd40:	b0000193 	adrp	x19, 9603d000 <__func__.3609+0x209>
	struct mrq_pg_request disp_pg_request = {
    9600cd44:	f9400001 	ldr	x1, [x0]
			pr_error("%s: Unable to power on - TEGRA186_POWER_DOMAIN_DISP%c\n",
    9600cd48:	b0000194 	adrp	x20, 9603d000 <__func__.3609+0x209>
	struct mrq_pg_request disp_pg_request = {
    9600cd4c:	b9400800 	ldr	w0, [x0, #8]
			pr_error("%s: Unable to power on - TEGRA186_POWER_DOMAIN_DISP%c\n",
    9600cd50:	911b9273 	add	x19, x19, #0x6e4
    9600cd54:	911db294 	add	x20, x20, #0x76c
	struct mrq_pg_request disp_pg_request = {
    9600cd58:	f90013a1 	str	x1, [x29, #32]
    9600cd5c:	b9002ba0 	str	w0, [x29, #40]
	while (disp_pg_request.id <= TEGRA186_POWER_DOMAIN_DISPC) {
    9600cd60:	b94027a0 	ldr	w0, [x29, #36]
    9600cd64:	7100101f 	cmp	w0, #0x4
    9600cd68:	54000089 	b.ls	9600cd78 <tegrabl_display_unpowergate+0x4c>  // b.plast

		(disp_pg_request.id)++;
	}

	pr_debug("%s: unpowergate done\n", __func__);
}
    9600cd6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600cd70:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600cd74:	d65f03c0 	ret
		if (tegrabl_ccplex_bpmp_xfer(&disp_pg_request, NULL, sizeof(disp_pg_request),
    9600cd78:	52800844 	mov	w4, #0x42                  	// #66
    9600cd7c:	52800003 	mov	w3, #0x0                   	// #0
    9600cd80:	52800182 	mov	w2, #0xc                   	// #12
    9600cd84:	d2800001 	mov	x1, #0x0                   	// #0
    9600cd88:	910083a0 	add	x0, x29, #0x20
    9600cd8c:	9400423c 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9600cd90:	34000120 	cbz	w0, 9600cdb4 <tegrabl_display_unpowergate+0x88>
			pr_error("%s: Unable to power on - TEGRA186_POWER_DOMAIN_DISP%c\n",
    9600cd94:	b94027a0 	ldr	w0, [x29, #36]
    9600cd98:	aa1303e1 	mov	x1, x19
    9600cd9c:	7100081f 	cmp	w0, #0x2
    9600cda0:	1100fc02 	add	w2, w0, #0x3f
    9600cda4:	52800400 	mov	w0, #0x20                  	// #32
    9600cda8:	1a801042 	csel	w2, w2, w0, ne  // ne = any
    9600cdac:	aa1403e0 	mov	x0, x20
    9600cdb0:	94005630 	bl	96022670 <tegrabl_printf>
		(disp_pg_request.id)++;
    9600cdb4:	b94027a0 	ldr	w0, [x29, #36]
    9600cdb8:	11000400 	add	w0, w0, #0x1
    9600cdbc:	b90027a0 	str	w0, [x29, #36]
    9600cdc0:	17ffffe8 	b	9600cd60 <tegrabl_display_unpowergate+0x34>

000000009600cdc4 <tegrabl_display_powergate>:

void tegrabl_display_powergate(void)
{
    9600cdc4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	struct mrq_pg_request disp_pg_request = {
    9600cdc8:	f0000160 	adrp	x0, 9603b000 <tt_level+0x328>
    9600cdcc:	912f4800 	add	x0, x0, #0xbd2
{
    9600cdd0:	910003fd 	mov	x29, sp
    9600cdd4:	a90153f3 	stp	x19, x20, [sp, #16]
	};

	while (disp_pg_request.id <= TEGRA186_POWER_DOMAIN_DISPC) {
		if (tegrabl_ccplex_bpmp_xfer(&disp_pg_request, NULL, sizeof(disp_pg_request),
				0, MRQ_PG) != TEGRABL_NO_ERROR) {
			pr_error("%s: Unable to power on - TEGRA194_POWER_DOMAIN_DISP%c\n",
    9600cdd8:	b0000193 	adrp	x19, 9603d000 <__func__.3609+0x209>
	struct mrq_pg_request disp_pg_request = {
    9600cddc:	f840c001 	ldur	x1, [x0, #12]
			pr_error("%s: Unable to power on - TEGRA194_POWER_DOMAIN_DISP%c\n",
    9600cde0:	b0000194 	adrp	x20, 9603d000 <__func__.3609+0x209>
	struct mrq_pg_request disp_pg_request = {
    9600cde4:	b9401400 	ldr	w0, [x0, #20]
			pr_error("%s: Unable to power on - TEGRA194_POWER_DOMAIN_DISP%c\n",
    9600cde8:	911c0273 	add	x19, x19, #0x700
    9600cdec:	911cca94 	add	x20, x20, #0x732
	struct mrq_pg_request disp_pg_request = {
    9600cdf0:	f90013a1 	str	x1, [x29, #32]
    9600cdf4:	b9002ba0 	str	w0, [x29, #40]
	while (disp_pg_request.id <= TEGRA186_POWER_DOMAIN_DISPC) {
    9600cdf8:	b94027a0 	ldr	w0, [x29, #36]
    9600cdfc:	7100101f 	cmp	w0, #0x4
    9600ce00:	54000089 	b.ls	9600ce10 <tegrabl_display_powergate+0x4c>  // b.plast

		(disp_pg_request.id)++;
	}

	pr_debug("%s: display powergate done\n", __func__);
}
    9600ce04:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600ce08:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600ce0c:	d65f03c0 	ret
		if (tegrabl_ccplex_bpmp_xfer(&disp_pg_request, NULL, sizeof(disp_pg_request),
    9600ce10:	52800844 	mov	w4, #0x42                  	// #66
    9600ce14:	52800003 	mov	w3, #0x0                   	// #0
    9600ce18:	52800182 	mov	w2, #0xc                   	// #12
    9600ce1c:	d2800001 	mov	x1, #0x0                   	// #0
    9600ce20:	910083a0 	add	x0, x29, #0x20
    9600ce24:	94004216 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9600ce28:	34000120 	cbz	w0, 9600ce4c <tegrabl_display_powergate+0x88>
			pr_error("%s: Unable to power on - TEGRA194_POWER_DOMAIN_DISP%c\n",
    9600ce2c:	b94027a0 	ldr	w0, [x29, #36]
    9600ce30:	aa1303e1 	mov	x1, x19
    9600ce34:	7100081f 	cmp	w0, #0x2
    9600ce38:	1100fc02 	add	w2, w0, #0x3f
    9600ce3c:	52800400 	mov	w0, #0x20                  	// #32
    9600ce40:	1a801042 	csel	w2, w2, w0, ne  // ne = any
    9600ce44:	aa1403e0 	mov	x0, x20
    9600ce48:	9400560a 	bl	96022670 <tegrabl_printf>
		(disp_pg_request.id)++;
    9600ce4c:	b94027a0 	ldr	w0, [x29, #36]
    9600ce50:	11000400 	add	w0, w0, #0x1
    9600ce54:	b90027a0 	str	w0, [x29, #36]
    9600ce58:	17ffffe8 	b	9600cdf8 <tegrabl_display_powergate+0x34>

000000009600ce5c <tegrabl_display_get_i2c>:

tegrabl_error_t tegrabl_display_get_i2c(int32_t sor_instance, uint32_t *i2c_instance)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	switch (sor_instance) {
    9600ce5c:	340001e0 	cbz	w0, 9600ce98 <tegrabl_display_get_i2c+0x3c>
    9600ce60:	7100041f 	cmp	w0, #0x1
    9600ce64:	54000220 	b.eq	9600cea8 <tegrabl_display_get_i2c+0x4c>  // b.none
{
    9600ce68:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9600ce6c:	2a0003e2 	mov	w2, w0
		break;
	case 1:
		*i2c_instance = TEGRABL_INSTANCE_I2C4;
		break;
	default:
		pr_error("%s: invalid SOR instance %d\n", __func__, sor_instance);
    9600ce70:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600ce74:	90000180 	adrp	x0, 9603c000 <__func__.4414+0x9>
{
    9600ce78:	910003fd 	mov	x29, sp
		pr_error("%s: invalid SOR instance %d\n", __func__, sor_instance);
    9600ce7c:	911c6821 	add	x1, x1, #0x71a
    9600ce80:	9101b000 	add	x0, x0, #0x6c
    9600ce84:	940055fb 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID_CONFIG, 0);
    9600ce88:	52800380 	mov	w0, #0x1c                  	// #28
    9600ce8c:	72a8c8c0 	movk	w0, #0x4646, lsl #16
	}

	return err;
}
    9600ce90:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600ce94:	d65f03c0 	ret
		*i2c_instance = TEGRABL_INSTANCE_I2C6;
    9600ce98:	528000a0 	mov	w0, #0x5                   	// #5
		*i2c_instance = TEGRABL_INSTANCE_I2C4;
    9600ce9c:	b9000020 	str	w0, [x1]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9600cea0:	52800000 	mov	w0, #0x0                   	// #0
}
    9600cea4:	d65f03c0 	ret
		*i2c_instance = TEGRABL_INSTANCE_I2C4;
    9600cea8:	52800060 	mov	w0, #0x3                   	// #3
    9600ceac:	17fffffc 	b	9600ce9c <tegrabl_display_get_i2c+0x40>

000000009600ceb0 <tegrabl_eeprom_read>:

	return TEGRABL_NO_ERROR;
}

tegrabl_error_t tegrabl_eeprom_read(struct tegrabl_eeprom *eeprom)
{
    9600ceb0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600ceb4:	910003fd 	mov	x29, sp
    9600ceb8:	a90153f3 	stp	x19, x20, [sp, #16]
    9600cebc:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600cec0:	f9001bf7 	str	x23, [sp, #48]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct tegrabl_i2c_dev *hi2c_dev = NULL;
	uint32_t retry_count;

	if (!eeprom) {
    9600cec4:	b4000a60 	cbz	x0, 9600d010 <tegrabl_eeprom_read+0x160>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	hi2c_dev = tegrabl_i2c_dev_open(eeprom->instance, eeprom->slave_addr,
    9600cec8:	39405001 	ldrb	w1, [x0, #20]
    9600cecc:	aa0003f3 	mov	x19, x0
    9600ced0:	b9401000 	ldr	w0, [x0, #16]
    9600ced4:	52800023 	mov	w3, #0x1                   	// #1
    9600ced8:	2a0303e2 	mov	w2, w3
    9600cedc:	940008c6 	bl	9600f1f4 <tegrabl_i2c_dev_open>
    9600cee0:	aa0003f7 	mov	x23, x0
									sizeof(eeprom->slave_addr),
									sizeof(*(eeprom->data)));
	if (hi2c_dev == NULL) {
    9600cee4:	b5000100 	cbnz	x0, 9600cf04 <tegrabl_eeprom_read+0x54>
		pr_error("eeprom: Can't get handle to eeprom device @%d\n",
    9600cee8:	39405261 	ldrb	w1, [x19, #20]
				 eeprom->slave_addr);
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    9600ceec:	52800554 	mov	w20, #0x2a                  	// #42
		pr_error("eeprom: Can't get handle to eeprom device @%d\n",
    9600cef0:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cef4:	911f0000 	add	x0, x0, #0x7c0
    9600cef8:	940055de 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600cefc:	72a6c6d4 	movk	w20, #0x3636, lsl #16
    9600cf00:	14000013 	b	9600cf4c <tegrabl_eeprom_read+0x9c>
		goto fail;
	}

	switch (hi2c_dev->instance) {
    9600cf04:	b9400000 	ldr	w0, [x0]
			break;
		}

		retry_count--;
		if (retry_count != 0) {
			pr_error("eeprom: Retry to read I2C slave device.\n");
    9600cf08:	b0000196 	adrp	x22, 9603d000 <__func__.3609+0x209>
    9600cf0c:	91207ad6 	add	x22, x22, #0x81e
		retry_count = TEGRABL_I2C_DEFAULT_RETRY_COUNT;
    9600cf10:	7100041f 	cmp	w0, #0x1
    9600cf14:	1a9f17f5 	cset	w21, eq  // eq = none
    9600cf18:	110006b5 	add	w21, w21, #0x1
		error = tegrabl_i2c_dev_read(hi2c_dev, eeprom->data, 0, eeprom->size);
    9600cf1c:	b9401a63 	ldr	w3, [x19, #24]
    9600cf20:	52800002 	mov	w2, #0x0                   	// #0
    9600cf24:	f9401261 	ldr	x1, [x19, #32]
    9600cf28:	aa1703e0 	mov	x0, x23
    9600cf2c:	940008e5 	bl	9600f2c0 <tegrabl_i2c_dev_read>
    9600cf30:	2a0003f4 	mov	w20, w0
		if (error == TEGRABL_NO_ERROR) {
    9600cf34:	34000260 	cbz	w0, 9600cf80 <tegrabl_eeprom_read+0xd0>
		if (retry_count != 0) {
    9600cf38:	710006bf 	cmp	w21, #0x1
    9600cf3c:	540001a1 	b.ne	9600cf70 <tegrabl_eeprom_read+0xc0>  // b.any
		}
	}

	if (error != TEGRABL_NO_ERROR) {
		pr_error("eeprom: Failed to read I2C slave device\n");
    9600cf40:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cf44:	911fc800 	add	x0, x0, #0x7f2
    9600cf48:	940055ca 	bl	96022670 <tegrabl_printf>
    9600cf4c:	12005e94 	and	w20, w20, #0xffffff
    9600cf50:	52a6c000 	mov	w0, #0x36000000            	// #905969664
    9600cf54:	2a000294 	orr	w20, w20, w0
	return TEGRABL_NO_ERROR;

fail:
	TEGRABL_SET_HIGHEST_MODULE(error);
	return error;
}
    9600cf58:	2a1403e0 	mov	w0, w20
    9600cf5c:	f9401bf7 	ldr	x23, [sp, #48]
    9600cf60:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600cf64:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600cf68:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600cf6c:	d65f03c0 	ret
			pr_error("eeprom: Retry to read I2C slave device.\n");
    9600cf70:	aa1603e0 	mov	x0, x22
    9600cf74:	52800035 	mov	w21, #0x1                   	// #1
    9600cf78:	940055be 	bl	96022670 <tegrabl_printf>
    9600cf7c:	17ffffe8 	b	9600cf1c <tegrabl_eeprom_read+0x6c>
	if ((eeprom->name != NULL) && (strcmp(eeprom->name, "module") == 0)) {
    9600cf80:	f9400260 	ldr	x0, [x19]
    9600cf84:	b4000240 	cbz	x0, 9600cfcc <tegrabl_eeprom_read+0x11c>
    9600cf88:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cf8c:	91212821 	add	x1, x1, #0x84a
    9600cf90:	940074af 	bl	9602a24c <strcmp>
    9600cf94:	350001c0 	cbnz	w0, 9600cfcc <tegrabl_eeprom_read+0x11c>
		error = verify_cvm_eeprom_version(eeprom);
    9600cf98:	f9401260 	ldr	x0, [x19, #32]
	if ((major_ver != EEPROM_MAJ_VER) || (minor_ver != EEPROM_MIN_VER)) {
    9600cf9c:	39400401 	ldrb	w1, [x0, #1]
    9600cfa0:	39400000 	ldrb	w0, [x0]
    9600cfa4:	7100003f 	cmp	w1, #0x0
    9600cfa8:	7a410800 	ccmp	w0, #0x1, #0x0, eq  // eq = none
    9600cfac:	54000100 	b.eq	9600cfcc <tegrabl_eeprom_read+0x11c>  // b.none
		pr_error("%s: EEPROM incompatible version found\n", __func__);
    9600cfb0:	b0000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600cfb4:	b0000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600cfb8:	911e9821 	add	x1, x1, #0x7a6
    9600cfbc:	91214400 	add	x0, x0, #0x851
    9600cfc0:	940055ac 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 0);
    9600cfc4:	52800314 	mov	w20, #0x18                  	// #24
    9600cfc8:	17ffffcd 	b	9600cefc <tegrabl_eeprom_read+0x4c>
	if (eeprom->crc_valid)
    9600cfcc:	39407260 	ldrb	w0, [x19, #28]
    9600cfd0:	34fffc40 	cbz	w0, 9600cf58 <tegrabl_eeprom_read+0xa8>
	calculated_crc = tegrabl_utils_crc8(eeprom->data, eeprom->size - 1);
    9600cfd4:	f9401260 	ldr	x0, [x19, #32]
    9600cfd8:	b9401a61 	ldr	w1, [x19, #24]
    9600cfdc:	51000421 	sub	w1, w1, #0x1
    9600cfe0:	94006a5a 	bl	96027948 <tegrabl_utils_crc8>
    9600cfe4:	12001c02 	and	w2, w0, #0xff
	stored_crc = eeprom->data[eeprom->size - 1];
    9600cfe8:	b9401a61 	ldr	w1, [x19, #24]
    9600cfec:	f9401260 	ldr	x0, [x19, #32]
    9600cff0:	51000421 	sub	w1, w1, #0x1
    9600cff4:	38616801 	ldrb	w1, [x0, x1]
	if (calculated_crc != stored_crc) {
    9600cff8:	6b01005f 	cmp	w2, w1
    9600cffc:	54fffae0 	b.eq	9600cf58 <tegrabl_eeprom_read+0xa8>  // b.none
		pr_error("eeprom: CRC8 check failed. Stored:0x%02x, Calc:0x%02x\n",
    9600d000:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600d004:	9121ec00 	add	x0, x0, #0x87b
    9600d008:	9400559a 	bl	96022670 <tegrabl_printf>
    9600d00c:	17ffffee 	b	9600cfc4 <tegrabl_eeprom_read+0x114>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600d010:	52800054 	mov	w20, #0x2                   	// #2
    9600d014:	17ffffba 	b	9600cefc <tegrabl_eeprom_read+0x4c>

000000009600d018 <tegrabl_unmap_buffers>:
	return ret;
}

static void tegrabl_unmap_buffers(struct tegrabl_dma_xfer_params *params,
								  tegrabl_module_t dma_module_id)
{
    9600d018:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9600d01c:	910003fd 	mov	x29, sp
    9600d020:	a90153f3 	stp	x19, x20, [sp, #16]
    9600d024:	aa0003f3 	mov	x19, x0
	if ((params->dir == DMA_IO_TO_MEM) ||
    9600d028:	b9401c00 	ldr	w0, [x0, #28]
{
    9600d02c:	2a0103f4 	mov	w20, w1
	if ((params->dir == DMA_IO_TO_MEM) ||
    9600d030:	721d781f 	tst	w0, #0xfffffffb
    9600d034:	54000060 	b.eq	9600d040 <tegrabl_unmap_buffers+0x28>  // b.none
		(params->dir == DMA_MEM_TO_MEM) ||
    9600d038:	7100181f 	cmp	w0, #0x6
    9600d03c:	540000e1 	b.ne	9600d058 <tegrabl_unmap_buffers+0x40>  // b.any
		(params->dir == DMA_PATTERN_FILL)) {
		tegrabl_dma_unmap_buffer(dma_module_id, 0, (void *)params->dst,
    9600d040:	b9401263 	ldr	w3, [x19, #16]
    9600d044:	52800044 	mov	w4, #0x2                   	// #2
    9600d048:	f9400662 	ldr	x2, [x19, #8]
    9600d04c:	52800001 	mov	w1, #0x0                   	// #0
    9600d050:	2a1403e0 	mov	w0, w20
    9600d054:	97ffda8e 	bl	96003a8c <tegrabl_dma_unmap_buffer>
								 params->size, TEGRABL_DMA_FROM_DEVICE);
		pr_trace("dst unmapped buffer = 0x%x\n", (unsigned int)params->dst);
	}

	if ((params->dir == DMA_MEM_TO_IO) || (params->dir == DMA_MEM_TO_MEM)) {
    9600d058:	b9401e60 	ldr	w0, [x19, #28]
    9600d05c:	7100081f 	cmp	w0, #0x2
    9600d060:	7a441804 	ccmp	w0, #0x4, #0x4, ne  // ne = any
    9600d064:	54000121 	b.ne	9600d088 <tegrabl_unmap_buffers+0x70>  // b.any
		tegrabl_dma_unmap_buffer(dma_module_id, 0, (void *)params->src,
    9600d068:	2a1403e0 	mov	w0, w20
    9600d06c:	b9401263 	ldr	w3, [x19, #16]
    9600d070:	f9400262 	ldr	x2, [x19]
    9600d074:	52800024 	mov	w4, #0x1                   	// #1
								 params->size, TEGRABL_DMA_TO_DEVICE);
		pr_trace("src unmapped buffer = 0x%x\n", (unsigned int)params->src);
	}
}
    9600d078:	a94153f3 	ldp	x19, x20, [sp, #16]
		tegrabl_dma_unmap_buffer(dma_module_id, 0, (void *)params->src,
    9600d07c:	52800001 	mov	w1, #0x0                   	// #0
}
    9600d080:	a8c27bfd 	ldp	x29, x30, [sp], #32
		tegrabl_dma_unmap_buffer(dma_module_id, 0, (void *)params->src,
    9600d084:	17ffda82 	b	96003a8c <tegrabl_dma_unmap_buffer>
}
    9600d088:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600d08c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600d090:	d65f03c0 	ret

000000009600d094 <tegrabl_dma_request>:
	if (dma_type >= DMA_MAX_NUM) {
    9600d094:	7100081f 	cmp	w0, #0x2
    9600d098:	54000069 	b.ls	9600d0a4 <tegrabl_dma_request+0x10>  // b.plast
		ret = NULL;
    9600d09c:	d2800000 	mov	x0, #0x0                   	// #0
}
    9600d0a0:	d65f03c0 	ret
{
    9600d0a4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600d0a8:	910003fd 	mov	x29, sp
    9600d0ac:	f90013f5 	str	x21, [sp, #32]
	if (g_dma_data[dma_type].init_done == true) {
    9600d0b0:	2a0003f5 	mov	w21, w0
{
    9600d0b4:	a90153f3 	stp	x19, x20, [sp, #16]
	if (g_dma_data[dma_type].init_done == true) {
    9600d0b8:	b0000314 	adrp	x20, 9606e000 <__bss_start>
    9600d0bc:	91118282 	add	x2, x20, #0x460
    9600d0c0:	8b151441 	add	x1, x2, x21, lsl #5
    9600d0c4:	39406023 	ldrb	w3, [x1, #24]
    9600d0c8:	34000063 	cbz	w3, 9600d0d4 <tegrabl_dma_request+0x40>
		ret = (tegrabl_gpcdma_handle_t)(&g_dma_data[dma_type]);
    9600d0cc:	aa0103e0 	mov	x0, x1
		goto done;
    9600d0d0:	1400002d 	b	9600d184 <tegrabl_dma_request+0xf0>
	switch (dma_type) {
    9600d0d4:	7100041f 	cmp	w0, #0x1
    9600d0d8:	54000240 	b.eq	9600d120 <tegrabl_dma_request+0x8c>  // b.none
    9600d0dc:	7100081f 	cmp	w0, #0x2
    9600d0e0:	540002e0 	b.eq	9600d13c <tegrabl_dma_request+0xa8>  // b.none
		g_dma_data[dma_type].dma_plat_data = g_dma_gpc_plat;
    9600d0e4:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600d0e8:	91234000 	add	x0, x0, #0x8d0
    9600d0ec:	a9401404 	ldp	x4, x5, [x0]
    9600d0f0:	a9001444 	stp	x4, x5, [x2]
    9600d0f4:	f9400800 	ldr	x0, [x0, #16]
    9600d0f8:	f9000840 	str	x0, [x2, #16]
	if (g_dma_data[dma_type].dma_plat_data.skip_reset == false) {
    9600d0fc:	91118293 	add	x19, x20, #0x460
    9600d100:	8b151673 	add	x19, x19, x21, lsl #5
    9600d104:	39405260 	ldrb	w0, [x19, #20]
    9600d108:	34000280 	cbz	w0, 9600d158 <tegrabl_dma_request+0xc4>
	g_dma_data[dma_type].init_done = true;
    9600d10c:	91118280 	add	x0, x20, #0x460
    9600d110:	52800021 	mov	w1, #0x1                   	// #1
    9600d114:	8b151400 	add	x0, x0, x21, lsl #5
    9600d118:	39006001 	strb	w1, [x0, #24]
    9600d11c:	1400001a 	b	9600d184 <tegrabl_dma_request+0xf0>
		g_dma_data[dma_type].dma_plat_data = g_dma_bpmp_plat;
    9600d120:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600d124:	9122e000 	add	x0, x0, #0x8b8
    9600d128:	a9401404 	ldp	x4, x5, [x0]
    9600d12c:	a9021444 	stp	x4, x5, [x2, #32]
    9600d130:	f9400800 	ldr	x0, [x0, #16]
    9600d134:	f9001840 	str	x0, [x2, #48]
    9600d138:	17fffff1 	b	9600d0fc <tegrabl_dma_request+0x68>
		g_dma_data[dma_type].dma_plat_data = g_dma_spe_plat;
    9600d13c:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600d140:	9123a000 	add	x0, x0, #0x8e8
    9600d144:	a9401404 	ldp	x4, x5, [x0]
    9600d148:	a9041444 	stp	x4, x5, [x2, #64]
    9600d14c:	f9400800 	ldr	x0, [x0, #16]
    9600d150:	f9002840 	str	x0, [x2, #80]
    9600d154:	17ffffea 	b	9600d0fc <tegrabl_dma_request+0x68>
		err = tegrabl_car_rst_set(g_dma_data[dma_type].dma_plat_data.dma_module_id, 0);
    9600d158:	b9401260 	ldr	w0, [x19, #16]
    9600d15c:	52800001 	mov	w1, #0x0                   	// #0
    9600d160:	94004a48 	bl	9601fa80 <tegrabl_car_rst_set>
		if (err != TEGRABL_NO_ERROR) {
    9600d164:	350000e0 	cbnz	w0, 9600d180 <tegrabl_dma_request+0xec>
		tegrabl_udelay(2);
    9600d168:	d2800040 	mov	x0, #0x2                   	// #2
    9600d16c:	94004ace 	bl	9601fca4 <tegrabl_udelay>
		err = tegrabl_car_rst_clear(g_dma_data[dma_type].dma_plat_data.dma_module_id, 0);
    9600d170:	b9401260 	ldr	w0, [x19, #16]
    9600d174:	52800001 	mov	w1, #0x0                   	// #0
    9600d178:	94004a49 	bl	9601fa9c <tegrabl_car_rst_clear>
		if (err != TEGRABL_NO_ERROR) {
    9600d17c:	34fffc80 	cbz	w0, 9600d10c <tegrabl_dma_request+0x78>
		ret = NULL;
    9600d180:	d2800000 	mov	x0, #0x0                   	// #0
}
    9600d184:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600d188:	f94013f5 	ldr	x21, [sp, #32]
    9600d18c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600d190:	d65f03c0 	ret

000000009600d194 <tegrabl_dma_transfer>:


tegrabl_error_t tegrabl_dma_transfer(tegrabl_gpcdma_handle_t handle,
	uint8_t c_num, struct tegrabl_dma_xfer_params *params)
{
    9600d194:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	struct s_dma_privdata *dma_data = (struct s_dma_privdata *)handle;
	struct gpcdma_soc_info *ggpcdma_info;
	tegrabl_module_t dma_module_id;
	tegrabl_error_t err;

	if ((handle == NULL) || (params == NULL)) {
    9600d198:	f100001f 	cmp	x0, #0x0
    9600d19c:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
{
    9600d1a0:	910003fd 	mov	x29, sp
    9600d1a4:	a90153f3 	stp	x19, x20, [sp, #16]
    9600d1a8:	aa0203f3 	mov	x19, x2
    9600d1ac:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600d1b0:	a90363f7 	stp	x23, x24, [sp, #48]
    9600d1b4:	f90023f9 	str	x25, [sp, #64]
	if ((handle == NULL) || (params == NULL)) {
    9600d1b8:	54000241 	b.ne	9600d200 <tegrabl_dma_transfer+0x6c>  // b.any
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_DMA_TRANSFER_1);
		TEGRABL_SET_ERROR_STRING(err, "handle: %p, params: %p", handle, params);
    9600d1bc:	aa0203e5 	mov	x5, x2
    9600d1c0:	52802542 	mov	w2, #0x12a                 	// #298
    9600d1c4:	aa0003e4 	mov	x4, x0
    9600d1c8:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d1cc:	52800020 	mov	w0, #0x1                   	// #1
    9600d1d0:	91240063 	add	x3, x3, #0x900
    9600d1d4:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d1d8:	52800041 	mov	w1, #0x2                   	// #2
    9600d1dc:	94004449 	bl	9601e300 <tegrabl_error_print>
		return err;
    9600d1e0:	52802540 	mov	w0, #0x12a                 	// #298

	/* transfer size */
	if ((params->size > MAX_TRANSFER_SIZE) || ((params->size & 0x3UL) != 0UL)) {
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_DMA_TRANSFER_2);
		TEGRABL_SET_ERROR_STRING(err, "transfer size %u", params->size);
		return err;
    9600d1e4:	72a26260 	movk	w0, #0x1313, lsl #16
		}
		tegrabl_unmap_buffers(params, dma_module_id);
	}

	return TEGRABL_NO_ERROR;
}
    9600d1e8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600d1ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600d1f0:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600d1f4:	f94023f9 	ldr	x25, [sp, #64]
    9600d1f8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9600d1fc:	d65f03c0 	ret
    9600d200:	12001c24 	and	w4, w1, #0xff
	if (dma_data->init_done != true) {
    9600d204:	39406001 	ldrb	w1, [x0, #24]
    9600d208:	35000141 	cbnz	w1, 9600d230 <tegrabl_dma_transfer+0x9c>
		TEGRABL_SET_ERROR_STRING(err, "DMA");
    9600d20c:	52802402 	mov	w2, #0x120                 	// #288
    9600d210:	52800020 	mov	w0, #0x1                   	// #1
    9600d214:	900001a3 	adrp	x3, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9600d218:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d21c:	91054463 	add	x3, x3, #0x151
    9600d220:	52800041 	mov	w1, #0x2                   	// #2
    9600d224:	94004437 	bl	9601e300 <tegrabl_error_print>
		return err;
    9600d228:	52802400 	mov	w0, #0x120                 	// #288
    9600d22c:	17ffffee 	b	9600d1e4 <tegrabl_dma_transfer+0x50>
	if (c_num >= dma_data->dma_plat_data.max_channel_num) {
    9600d230:	39401001 	ldrb	w1, [x0, #4]
    9600d234:	6b04003f 	cmp	w1, w4
    9600d238:	54000148 	b.hi	9600d260 <tegrabl_dma_transfer+0xcc>  // b.pmore
		TEGRABL_SET_ERROR_STRING(err, "Channel %u", c_num);
    9600d23c:	52802042 	mov	w2, #0x102                 	// #258
    9600d240:	52800020 	mov	w0, #0x1                   	// #1
    9600d244:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d248:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d24c:	91245c63 	add	x3, x3, #0x917
    9600d250:	52800041 	mov	w1, #0x2                   	// #2
    9600d254:	9400442b 	bl	9601e300 <tegrabl_error_print>
		return err;
    9600d258:	52802040 	mov	w0, #0x102                 	// #258
    9600d25c:	17ffffe2 	b	9600d1e4 <tegrabl_dma_transfer+0x50>
										   (DMA_CHANNEL_OFFSET * (c_num + 1UL));
    9600d260:	d3701c95 	ubfiz	x21, x4, #16, #8
	cb = dma_data->dma_plat_data.base_addr +
    9600d264:	f9400419 	ldr	x25, [x0, #8]
										   (DMA_CHANNEL_OFFSET * (c_num + 1UL));
    9600d268:	914042b5 	add	x21, x21, #0x10, lsl #12
	cb = dma_data->dma_plat_data.base_addr +
    9600d26c:	8b1902b4 	add	x20, x21, x25
	val = NV_READ32(cb + DMA_CH_STAT);
    9600d270:	91001298 	add	x24, x20, #0x4
    9600d274:	b9400681 	ldr	w1, [x20, #4]
	if ((val & DMA_CH_STAT_BUSY) != 0UL) {
    9600d278:	36f80141 	tbz	w1, #31, 9600d2a0 <tegrabl_dma_transfer+0x10c>
		TEGRABL_SET_ERROR_STRING(err, "Channel %u", c_num);
    9600d27c:	528021c2 	mov	w2, #0x10e                 	// #270
    9600d280:	52800020 	mov	w0, #0x1                   	// #1
    9600d284:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d288:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d28c:	91245c63 	add	x3, x3, #0x917
    9600d290:	52800041 	mov	w1, #0x2                   	// #2
    9600d294:	9400441b 	bl	9601e300 <tegrabl_error_print>
		return err;
    9600d298:	528021c0 	mov	w0, #0x10e                 	// #270
    9600d29c:	17ffffd2 	b	9600d1e4 <tegrabl_dma_transfer+0x50>
	dma_module_id = dma_data->dma_plat_data.dma_module_id;
    9600d2a0:	b9401017 	ldr	w23, [x0, #16]
	gpcdma_get_soc_info(&ggpcdma_info);
    9600d2a4:	910163a0 	add	x0, x29, #0x58
    9600d2a8:	94000127 	bl	9600d744 <gpcdma_get_soc_info>
	NV_WRITE32_FENCE(cb + DMA_CH_CSR, 0x0);
    9600d2ac:	b8396abf 	str	wzr, [x21, x25]
    9600d2b0:	b8796aa0 	ldr	w0, [x21, x25]
	val = NV_READ32(cb + DMA_CH_MC_SEQ);
    9600d2b4:	b9401a80 	ldr	w0, [x20, #24]
	if ((params->dir == DMA_IO_TO_MEM) || (params->dir == DMA_MEM_TO_IO)) {
    9600d2b8:	b9401e61 	ldr	w1, [x19, #28]
    9600d2bc:	12015c00 	and	w0, w0, #0x807fffff
    9600d2c0:	721e783f 	tst	w1, #0xfffffffd
    9600d2c4:	54000a21 	b.ne	9600d408 <tegrabl_dma_transfer+0x274>  // b.any
		if (ggpcdma_info[0].io_dma_mc_burst_size == 16U) {
    9600d2c8:	f9402fa1 	ldr	x1, [x29, #88]
	val &= ~val1;
    9600d2cc:	52a43003 	mov	w3, #0x21800000            	// #562036736
		if (ggpcdma_info[0].io_dma_mc_burst_size == 16U) {
    9600d2d0:	b9400022 	ldr	w2, [x1]
	val &= ~val1;
    9600d2d4:	32030001 	orr	w1, w0, #0x20000000
    9600d2d8:	2a030000 	orr	w0, w0, w3
    9600d2dc:	7100405f 	cmp	w2, #0x10
    9600d2e0:	1a810000 	csel	w0, w0, w1, eq  // eq = none
	NV_WRITE32_FENCE(cb + DMA_CH_MC_SEQ, val);
    9600d2e4:	b9001a80 	str	w0, [x20, #24]
    9600d2e8:	b9401a80 	ldr	w0, [x20, #24]
	if ((params->dir == DMA_IO_TO_MEM) || (params->dir == DMA_MEM_TO_IO)) {
    9600d2ec:	b9401e60 	ldr	w0, [x19, #28]
    9600d2f0:	721e781f 	tst	w0, #0xfffffffd
    9600d2f4:	540001a1 	b.ne	9600d328 <tegrabl_dma_transfer+0x194>  // b.any
		val = NV_READ32(cb + DMA_CH_MMIO_SEQ);
    9600d2f8:	b9401e80 	ldr	w0, [x20, #28]
		val &= ~val1;
    9600d2fc:	12017001 	and	w1, w0, #0x8fffffff
		val |= ((uint32_t)params->io_bus_width <<
    9600d300:	b9402660 	ldr	w0, [x19, #36]
    9600d304:	2a007020 	orr	w0, w1, w0, lsl #28
		if (ggpcdma_info[0].io_dma_mmio_burst_size == 16U) {
    9600d308:	f9402fa1 	ldr	x1, [x29, #88]
		val &= ~val1;
    9600d30c:	12056c00 	and	w0, w0, #0xf87fffff
		if (ggpcdma_info[0].io_dma_mmio_burst_size == 16U) {
    9600d310:	b9400421 	ldr	w1, [x1, #4]
    9600d314:	7100403f 	cmp	w1, #0x10
    9600d318:	540007e1 	b.ne	9600d414 <tegrabl_dma_transfer+0x280>  // b.any
			val |= (DMA_CH_MMIO_SEQ_MMIO_BURST_16_WORD <<
    9600d31c:	32090c00 	orr	w0, w0, #0x7800000
		NV_WRITE32_FENCE(cb + DMA_CH_MMIO_SEQ, val);
    9600d320:	b9001e80 	str	w0, [x20, #28]
    9600d324:	b9401e80 	ldr	w0, [x20, #28]
	if (params->dir != DMA_PATTERN_FILL) {
    9600d328:	b9401e60 	ldr	w0, [x19, #28]
    9600d32c:	7100181f 	cmp	w0, #0x6
    9600d330:	54000040 	b.eq	9600d338 <tegrabl_dma_transfer+0x1a4>  // b.none
		params->pattern = 0;
    9600d334:	b900167f 	str	wzr, [x19, #20]
	NV_WRITE32_FENCE(cb + DMA_CH_FIXED_PATTERN, params->pattern);
    9600d338:	b9401660 	ldr	w0, [x19, #20]
    9600d33c:	f9400676 	ldr	x22, [x19, #8]
    9600d340:	b9003680 	str	w0, [x20, #52]
    9600d344:	b9403680 	ldr	w0, [x20, #52]
	if ((params->dir == DMA_IO_TO_MEM) ||
    9600d348:	b9401e60 	ldr	w0, [x19, #28]
    9600d34c:	721d781f 	tst	w0, #0xfffffffb
    9600d350:	54000060 	b.eq	9600d35c <tegrabl_dma_transfer+0x1c8>  // b.none
		(params->dir == DMA_MEM_TO_MEM) ||
    9600d354:	7100181f 	cmp	w0, #0x6
    9600d358:	54000101 	b.ne	9600d378 <tegrabl_dma_transfer+0x1e4>  // b.any
		dst_dma_addr = tegrabl_dma_map_buffer(dma_module_id, 0,
    9600d35c:	b9401263 	ldr	w3, [x19, #16]
    9600d360:	aa1603e2 	mov	x2, x22
    9600d364:	52800044 	mov	w4, #0x2                   	// #2
    9600d368:	52800001 	mov	w1, #0x0                   	// #0
    9600d36c:	2a1703e0 	mov	w0, w23
    9600d370:	97ffd9d5 	bl	96003ac4 <tegrabl_dma_map_buffer>
    9600d374:	aa0003f6 	mov	x22, x0
	if ((params->dir == DMA_MEM_TO_IO) || (params->dir == DMA_MEM_TO_MEM)) {
    9600d378:	b9401e61 	ldr	w1, [x19, #28]
    9600d37c:	f9400262 	ldr	x2, [x19]
    9600d380:	7100083f 	cmp	w1, #0x2
    9600d384:	7a441824 	ccmp	w1, #0x4, #0x4, ne  // ne = any
    9600d388:	540000e1 	b.ne	9600d3a4 <tegrabl_dma_transfer+0x210>  // b.any
		src_dma_addr = tegrabl_dma_map_buffer(dma_module_id, 0,
    9600d38c:	b9401263 	ldr	w3, [x19, #16]
    9600d390:	52800024 	mov	w4, #0x1                   	// #1
    9600d394:	52800001 	mov	w1, #0x0                   	// #0
    9600d398:	2a1703e0 	mov	w0, w23
    9600d39c:	97ffd9ca 	bl	96003ac4 <tegrabl_dma_map_buffer>
    9600d3a0:	aa0003e2 	mov	x2, x0
	NV_WRITE32_FENCE(cb + DMA_CH_SRC_PTR, (uint32_t)src_dma_addr);
    9600d3a4:	b9000e82 	str	w2, [x20, #12]
	val |= (uint32_t)(((dst_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_DST_MASK) <<
    9600d3a8:	d360fec0 	lsr	x0, x22, #32
	val = (uint32_t)((src_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_SRC_MASK);
    9600d3ac:	d3609c42 	ubfx	x2, x2, #32, #8
	NV_WRITE32_FENCE(cb + DMA_CH_SRC_PTR, (uint32_t)src_dma_addr);
    9600d3b0:	b9400e81 	ldr	w1, [x20, #12]
	val |= (uint32_t)(((dst_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_DST_MASK) <<
    9600d3b4:	53101c00 	ubfiz	w0, w0, #16, #8
	NV_WRITE32_FENCE(cb + DMA_CH_DST_PTR, (uint32_t)dst_dma_addr);
    9600d3b8:	b9001296 	str	w22, [x20, #16]
	val |= (uint32_t)(((dst_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_DST_MASK) <<
    9600d3bc:	2a020000 	orr	w0, w0, w2
	NV_WRITE32_FENCE(cb + DMA_CH_DST_PTR, (uint32_t)dst_dma_addr);
    9600d3c0:	b9401281 	ldr	w1, [x20, #16]
	NV_WRITE32_FENCE(cb + DMA_CH_HI_ADR_PTR, val);
    9600d3c4:	b9001680 	str	w0, [x20, #20]
    9600d3c8:	b9401680 	ldr	w0, [x20, #20]
	if ((params->size > MAX_TRANSFER_SIZE) || ((params->size & 0x3UL) != 0UL)) {
    9600d3cc:	b9401264 	ldr	w4, [x19, #16]
    9600d3d0:	52a80000 	mov	w0, #0x40000000            	// #1073741824
    9600d3d4:	6b00009f 	cmp	w4, w0
    9600d3d8:	54000068 	b.hi	9600d3e4 <tegrabl_dma_transfer+0x250>  // b.pmore
    9600d3dc:	f240049f 	tst	x4, #0x3
    9600d3e0:	54000220 	b.eq	9600d424 <tegrabl_dma_transfer+0x290>  // b.none
		TEGRABL_SET_ERROR_STRING(err, "transfer size %u", params->size);
    9600d3e4:	52804542 	mov	w2, #0x22a                 	// #554
    9600d3e8:	52800020 	mov	w0, #0x1                   	// #1
    9600d3ec:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d3f0:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d3f4:	91248863 	add	x3, x3, #0x922
    9600d3f8:	52800041 	mov	w1, #0x2                   	// #2
    9600d3fc:	940043c1 	bl	9601e300 <tegrabl_error_print>
		return err;
    9600d400:	52804540 	mov	w0, #0x22a                 	// #554
    9600d404:	17ffff78 	b	9600d1e4 <tegrabl_dma_transfer+0x50>
		val |= (DMA_CH_MC_SEQ_BURST_16_WORDS << DMA_CH_MC_SEQ_BURST_SHIFT);
    9600d408:	52a43001 	mov	w1, #0x21800000            	// #562036736
    9600d40c:	2a010000 	orr	w0, w0, w1
    9600d410:	17ffffb5 	b	9600d2e4 <tegrabl_dma_transfer+0x150>
		} else if (ggpcdma_info[0].io_dma_mmio_burst_size == 8U) {
    9600d414:	7100203f 	cmp	w1, #0x8
    9600d418:	54fff841 	b.ne	9600d320 <tegrabl_dma_transfer+0x18c>  // b.any
			val |= (DMA_CH_MMIO_SEQ_MMIO_BURST_8_WORD <<
    9600d41c:	32090800 	orr	w0, w0, #0x3800000
    9600d420:	17ffffc0 	b	9600d320 <tegrabl_dma_transfer+0x18c>
	NV_WRITE32_FENCE(cb + DMA_CH_MMIO_WCOUNT, ((params->size >> 2) - 1U));
    9600d424:	53027c84 	lsr	w4, w4, #2
    9600d428:	51000484 	sub	w4, w4, #0x1
    9600d42c:	b9002284 	str	w4, [x20, #32]
    9600d430:	b9402280 	ldr	w0, [x20, #32]
	if (params->dir == DMA_IO_TO_MEM) {
    9600d434:	b9401e61 	ldr	w1, [x19, #28]
		val |= (DMA_CH_CSR_DMA_MODE_IO2MEM_FC << DMA_CH_CSR_XFER_MODE_SHIFT);
    9600d438:	52908000 	mov	w0, #0x8400                	// #33792
	if (params->dir == DMA_IO_TO_MEM) {
    9600d43c:	34000381 	cbz	w1, 9600d4ac <tegrabl_dma_transfer+0x318>
		val |= ((uint32_t)params->dir << DMA_CH_CSR_XFER_MODE_SHIFT);
    9600d440:	72a10000 	movk	w0, #0x800, lsl #16
    9600d444:	7100083f 	cmp	w1, #0x2
    9600d448:	2a015400 	orr	w0, w0, w1, lsl #21
    9600d44c:	52908002 	mov	w2, #0x8400                	// #33792
    9600d450:	72a10c02 	movk	w2, #0x860, lsl #16
    9600d454:	1a821000 	csel	w0, w0, w2, ne  // ne = any
	if ((params->dir == DMA_IO_TO_MEM) || (params->dir == DMA_MEM_TO_IO)) {
    9600d458:	721e783f 	tst	w1, #0xfffffffd
    9600d45c:	540000a1 	b.ne	9600d470 <tegrabl_dma_transfer+0x2dc>  // b.any
		val |= (params->io << DMA_CH_CSR_REQ_SEL_SHIFT);
    9600d460:	b9402261 	ldr	w1, [x19, #32]
    9600d464:	53103c21 	lsl	w1, w1, #16
		val |= DMA_CH_CSR_FC_4_MMIO;
    9600d468:	32080421 	orr	w1, w1, #0x3000000
    9600d46c:	2a010000 	orr	w0, w0, w1
	NV_WRITE32_FENCE(cb + DMA_CH_CSR, val);
    9600d470:	b8396aa0 	str	w0, [x21, x25]
    9600d474:	b8796aa0 	ldr	w0, [x21, x25]
	val = NV_READ32(cb + DMA_CH_CSR);
    9600d478:	b8796aa0 	ldr	w0, [x21, x25]
	val |= DMA_CH_CSR_ENABLE;
    9600d47c:	32010000 	orr	w0, w0, #0x80000000
	NV_WRITE32_FENCE(cb + DMA_CH_CSR, val);
    9600d480:	b8396aa0 	str	w0, [x21, x25]
    9600d484:	b8796aa0 	ldr	w0, [x21, x25]
	if (params->is_async_xfer == true) {
    9600d488:	39406260 	ldrb	w0, [x19, #24]
    9600d48c:	350000c0 	cbnz	w0, 9600d4a4 <tegrabl_dma_transfer+0x310>
		val = DMA_CH_STAT_BUSY;
    9600d490:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
		while ((val & DMA_CH_STAT_BUSY) != 0UL) {
    9600d494:	37f80100 	tbnz	w0, #31, 9600d4b4 <tegrabl_dma_transfer+0x320>
		tegrabl_unmap_buffers(params, dma_module_id);
    9600d498:	2a1703e1 	mov	w1, w23
    9600d49c:	aa1303e0 	mov	x0, x19
    9600d4a0:	97fffede 	bl	9600d018 <tegrabl_unmap_buffers>
		return TEGRABL_NO_ERROR;
    9600d4a4:	52800000 	mov	w0, #0x0                   	// #0
    9600d4a8:	17ffff50 	b	9600d1e8 <tegrabl_dma_transfer+0x54>
		val |= (DMA_CH_CSR_DMA_MODE_IO2MEM_FC << DMA_CH_CSR_XFER_MODE_SHIFT);
    9600d4ac:	72a10400 	movk	w0, #0x820, lsl #16
    9600d4b0:	17ffffea 	b	9600d458 <tegrabl_dma_transfer+0x2c4>
			val = NV_READ32(cb + DMA_CH_STAT);
    9600d4b4:	b9400300 	ldr	w0, [x24]
    9600d4b8:	17fffff7 	b	9600d494 <tegrabl_dma_transfer+0x300>

000000009600d4bc <tegrabl_dma_transfer_status>:

tegrabl_error_t tegrabl_dma_transfer_status(tegrabl_gpcdma_handle_t handle,
	uint8_t c_num, struct tegrabl_dma_xfer_params *params)
{
    9600d4bc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9600d4c0:	aa0003e4 	mov	x4, x0
	uintptr_t cb = 0;
	struct s_dma_privdata *dma_data;
	tegrabl_module_t dma_module_id;
	tegrabl_error_t err;

	if ((handle == NULL) || (params == NULL)) {
    9600d4c4:	f100009f 	cmp	x4, #0x0
{
    9600d4c8:	aa0203e0 	mov	x0, x2
    9600d4cc:	910003fd 	mov	x29, sp
	if ((handle == NULL) || (params == NULL)) {
    9600d4d0:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    9600d4d4:	54000181 	b.ne	9600d504 <tegrabl_dma_transfer_status+0x48>  // b.any
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_DMA_TRANSFER_STATUS);
		TEGRABL_SET_ERROR_STRING(err, "handle: %p, params: %p", handle, params);
    9600d4d8:	aa0203e5 	mov	x5, x2
    9600d4dc:	52806542 	mov	w2, #0x32a                 	// #810
    9600d4e0:	52800020 	mov	w0, #0x1                   	// #1
    9600d4e4:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d4e8:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d4ec:	91240063 	add	x3, x3, #0x900
    9600d4f0:	52800041 	mov	w1, #0x2                   	// #2
    9600d4f4:	94004383 	bl	9601e300 <tegrabl_error_print>
		return err;
    9600d4f8:	52806540 	mov	w0, #0x32a                 	// #810
	cb = dma_data->dma_plat_data.base_addr +
										   (DMA_CHANNEL_OFFSET * (c_num + 1UL));
	if ((NV_READ32(cb + DMA_CH_STAT) & DMA_CH_STAT_BUSY) != 0UL) {
		err = TEGRABL_ERROR(TEGRABL_ERR_BUSY, AUX_INFO_DMA_TRANSFER_STATUS);
		pr_debug("DMA channel %u is busy\n", c_num);
		return err;
    9600d4fc:	72a26260 	movk	w0, #0x1313, lsl #16
    9600d500:	14000018 	b	9600d560 <tegrabl_dma_transfer_status+0xa4>
	if (c_num >= dma_data->dma_plat_data.max_channel_num) {
    9600d504:	39401082 	ldrb	w2, [x4, #4]
    9600d508:	12001c21 	and	w1, w1, #0xff
    9600d50c:	6b01005f 	cmp	w2, w1
    9600d510:	54000168 	b.hi	9600d53c <tegrabl_dma_transfer_status+0x80>  // b.pmore
		TEGRABL_SET_ERROR_STRING(err, "Channel %u", c_num);
    9600d514:	52806042 	mov	w2, #0x302                 	// #770
    9600d518:	2a0103e4 	mov	w4, w1
    9600d51c:	52800020 	mov	w0, #0x1                   	// #1
    9600d520:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d524:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d528:	91245c63 	add	x3, x3, #0x917
    9600d52c:	52800041 	mov	w1, #0x2                   	// #2
    9600d530:	94004374 	bl	9601e300 <tegrabl_error_print>
		return err;
    9600d534:	52806040 	mov	w0, #0x302                 	// #770
    9600d538:	17fffff1 	b	9600d4fc <tegrabl_dma_transfer_status+0x40>
										   (DMA_CHANNEL_OFFSET * (c_num + 1UL));
    9600d53c:	d3701c21 	ubfiz	x1, x1, #16, #8
	if ((NV_READ32(cb + DMA_CH_STAT) & DMA_CH_STAT_BUSY) != 0UL) {
    9600d540:	f9400482 	ldr	x2, [x4, #8]
										   (DMA_CHANNEL_OFFSET * (c_num + 1UL));
    9600d544:	91404021 	add	x1, x1, #0x10, lsl #12
	if ((NV_READ32(cb + DMA_CH_STAT) & DMA_CH_STAT_BUSY) != 0UL) {
    9600d548:	91001021 	add	x1, x1, #0x4
    9600d54c:	b8626821 	ldr	w1, [x1, x2]
    9600d550:	37f800c1 	tbnz	w1, #31, 9600d568 <tegrabl_dma_transfer_status+0xac>
	} else {
		tegrabl_unmap_buffers(params, dma_module_id);
    9600d554:	b9401081 	ldr	w1, [x4, #16]
    9600d558:	97fffeb0 	bl	9600d018 <tegrabl_unmap_buffers>
		return TEGRABL_NO_ERROR;
    9600d55c:	52800000 	mov	w0, #0x0                   	// #0
	}
}
    9600d560:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600d564:	d65f03c0 	ret
		return err;
    9600d568:	528061c0 	mov	w0, #0x30e                 	// #782
    9600d56c:	17ffffe4 	b	9600d4fc <tegrabl_dma_transfer_status+0x40>

000000009600d570 <tegrabl_dma_transfer_abort>:

void tegrabl_dma_transfer_abort(tegrabl_gpcdma_handle_t handle,
			uint8_t c_num)
{
    9600d570:	12001c21 	and	w1, w1, #0xff
	uintptr_t cb = 0;
	struct s_dma_privdata *dma_data;

	if (handle == NULL) {
    9600d574:	b40000c0 	cbz	x0, 9600d58c <tegrabl_dma_transfer_abort+0x1c>
	}

	dma_data = (struct s_dma_privdata *)handle;

	cb = dma_data->dma_plat_data.base_addr +
										   (DMA_CHANNEL_OFFSET * (c_num + 1UL));
    9600d578:	d3701c21 	ubfiz	x1, x1, #16, #8
	cb = dma_data->dma_plat_data.base_addr +
    9600d57c:	f9400400 	ldr	x0, [x0, #8]
										   (DMA_CHANNEL_OFFSET * (c_num + 1UL));
    9600d580:	91404021 	add	x1, x1, #0x10, lsl #12
	NV_WRITE32_FENCE(cb + DMA_CH_CSR, 0);
    9600d584:	b820683f 	str	wzr, [x1, x0]
    9600d588:	b8606820 	ldr	w0, [x1, x0]
}
    9600d58c:	d65f03c0 	ret

000000009600d590 <tegrabl_init_scrub_dma>:
 * SDRAM directy, data is not cached so no need to invoke DMA-mapping apis
 */
tegrabl_error_t tegrabl_init_scrub_dma(uint64_t dest, uint64_t src,
									   uint32_t pattern, uint32_t size,
									   tegrabl_dmatransferdir_t data_dir)
{
    9600d590:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600d594:	910003fd 	mov	x29, sp
    9600d598:	a90153f3 	stp	x19, x20, [sp, #16]
    9600d59c:	2a0303f3 	mov	w19, w3
    9600d5a0:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600d5a4:	aa0003f4 	mov	x20, x0
    9600d5a8:	f9001bf7 	str	x23, [sp, #48]
    9600d5ac:	aa0103f6 	mov	x22, x1
    9600d5b0:	2a0403f5 	mov	w21, w4
	dma_addr_t src_dma_addr = 0;
	dma_addr_t dst_dma_addr = 0;
	struct s_dma_privdata *dma_data;
	tegrabl_error_t result = TEGRABL_NO_ERROR;

	handle = tegrabl_dma_request(DMA_GPC);
    9600d5b4:	52800000 	mov	w0, #0x0                   	// #0
{
    9600d5b8:	2a0203f7 	mov	w23, w2
	handle = tegrabl_dma_request(DMA_GPC);
    9600d5bc:	97fffeb6 	bl	9600d094 <tegrabl_dma_request>
	params.dir = data_dir;

	dma_data = (struct s_dma_privdata *)handle;

	/* get channel base offset */
	cb = dma_data->dma_plat_data.base_addr +
    9600d5c0:	f9400405 	ldr	x5, [x0, #8]
											(DMA_CHANNEL_OFFSET * (c_num + 1U));

	/* make sure channel isn't busy */
	val = NV_READ32(cb + DMA_CH_STAT);
    9600d5c4:	d2800080 	mov	x0, #0x4                   	// #4
    9600d5c8:	f2a00020 	movk	x0, #0x1, lsl #16
    9600d5cc:	8b0000a3 	add	x3, x5, x0
    9600d5d0:	b86068a0 	ldr	w0, [x5, x0]
	if ((val & DMA_CH_STAT_BUSY) != 0UL) {
    9600d5d4:	36f80200 	tbz	w0, #31, 9600d614 <tegrabl_init_scrub_dma+0x84>
		result = TEGRABL_ERROR(TEGRABL_ERR_BUSY, AUX_INFO_INIT_SCRUB_DMA_1);
		TEGRABL_SET_ERROR_STRING(result, "Channel %u", c_num);
    9600d5d8:	528081c2 	mov	w2, #0x40e                 	// #1038
    9600d5dc:	52800020 	mov	w0, #0x1                   	// #1
    9600d5e0:	52800004 	mov	w4, #0x0                   	// #0
    9600d5e4:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d5e8:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d5ec:	91245c63 	add	x3, x3, #0x917
    9600d5f0:	52800041 	mov	w1, #0x2                   	// #2
    9600d5f4:	94004343 	bl	9601e300 <tegrabl_error_print>
		result = TEGRABL_ERROR(TEGRABL_ERR_BUSY, AUX_INFO_INIT_SCRUB_DMA_1);
    9600d5f8:	528081c0 	mov	w0, #0x40e                 	// #1038
	NV_WRITE32_FENCE(cb + DMA_CH_MMIO_WCOUNT, ((params.size >> 2) - 1U));

	/* populate value for CSR */
	if ((params.dir != DMA_PATTERN_FILL) &&
			(params.dir != DMA_MEM_TO_MEM)) {
		result = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_INIT_SCRUB_DMA_2);
    9600d5fc:	72a26260 	movk	w0, #0x1313, lsl #16
	}
	pr_trace("DMA Complete......%s\n\n", __func__);

fail:
	return result;
}
    9600d600:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600d604:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600d608:	f9401bf7 	ldr	x23, [sp, #48]
    9600d60c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600d610:	d65f03c0 	ret
	val = NV_READ32(cb + DMA_CH_MC_SEQ);
    9600d614:	d2800301 	mov	x1, #0x18                  	// #24
	val |= (DMA_CH_MC_SEQ_BURST_16_WORDS << DMA_CH_MC_SEQ_BURST_SHIFT);
    9600d618:	52a43002 	mov	w2, #0x21800000            	// #562036736
	val = NV_READ32(cb + DMA_CH_MC_SEQ);
    9600d61c:	f2a00021 	movk	x1, #0x1, lsl #16
    9600d620:	b86168a0 	ldr	w0, [x5, x1]
    9600d624:	12015c00 	and	w0, w0, #0x807fffff
	val |= (DMA_CH_MC_SEQ_BURST_16_WORDS << DMA_CH_MC_SEQ_BURST_SHIFT);
    9600d628:	2a020000 	orr	w0, w0, w2
	NV_WRITE32_FENCE(cb + DMA_CH_MC_SEQ, val);
    9600d62c:	b82168a0 	str	w0, [x5, x1]
    9600d630:	b86168a0 	ldr	w0, [x5, x1]
	val |= (uint32_t)(((dst_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_DST_MASK) <<
    9600d634:	d360fe81 	lsr	x1, x20, #32
	NV_WRITE32_FENCE(cb + DMA_CH_FIXED_PATTERN, params.pattern);
    9600d638:	d2800680 	mov	x0, #0x34                  	// #52
	val |= (uint32_t)(((dst_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_DST_MASK) <<
    9600d63c:	53101c21 	ubfiz	w1, w1, #16, #8
	NV_WRITE32_FENCE(cb + DMA_CH_FIXED_PATTERN, params.pattern);
    9600d640:	f2a00020 	movk	x0, #0x1, lsl #16
    9600d644:	b82068b7 	str	w23, [x5, x0]
    9600d648:	b86068a0 	ldr	w0, [x5, x0]
	NV_WRITE32_FENCE(cb + DMA_CH_SRC_PTR, (uint32_t)src_dma_addr);
    9600d64c:	d2800180 	mov	x0, #0xc                   	// #12
    9600d650:	f2a00020 	movk	x0, #0x1, lsl #16
    9600d654:	b82068b6 	str	w22, [x5, x0]
	val = (uint32_t)(src_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_SRC_MASK;
    9600d658:	d3609ed6 	ubfx	x22, x22, #32, #8
	val |= (uint32_t)(((dst_dma_addr >> 32) & DMA_CH_HI_ADR_PTR_DST_MASK) <<
    9600d65c:	2a160021 	orr	w1, w1, w22
	NV_WRITE32_FENCE(cb + DMA_CH_SRC_PTR, (uint32_t)src_dma_addr);
    9600d660:	b86068a0 	ldr	w0, [x5, x0]
	NV_WRITE32_FENCE(cb + DMA_CH_DST_PTR, (uint32_t)dst_dma_addr);
    9600d664:	d2800200 	mov	x0, #0x10                  	// #16
    9600d668:	f2a00020 	movk	x0, #0x1, lsl #16
    9600d66c:	b82068b4 	str	w20, [x5, x0]
    9600d670:	b86068a0 	ldr	w0, [x5, x0]
	NV_WRITE32_FENCE(cb + DMA_CH_HI_ADR_PTR, val);
    9600d674:	d2800280 	mov	x0, #0x14                  	// #20
    9600d678:	f2a00020 	movk	x0, #0x1, lsl #16
    9600d67c:	b82068a1 	str	w1, [x5, x0]
    9600d680:	b86068a0 	ldr	w0, [x5, x0]
	if ((params.size > MAX_TRANSFER_SIZE) || ((params.size & 0x3U) != 0U)) {
    9600d684:	52a80000 	mov	w0, #0x40000000            	// #1073741824
    9600d688:	6b00027f 	cmp	w19, w0
    9600d68c:	54000068 	b.hi	9600d698 <tegrabl_init_scrub_dma+0x108>  // b.pmore
    9600d690:	f240067f 	tst	x19, #0x3
    9600d694:	54000160 	b.eq	9600d6c0 <tegrabl_init_scrub_dma+0x130>  // b.none
		TEGRABL_SET_ERROR_STRING(result, "transfer size %u", params.size);
    9600d698:	52808542 	mov	w2, #0x42a                 	// #1066
    9600d69c:	52800020 	mov	w0, #0x1                   	// #1
    9600d6a0:	2a1303e4 	mov	w4, w19
    9600d6a4:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d6a8:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d6ac:	91248863 	add	x3, x3, #0x922
    9600d6b0:	52800041 	mov	w1, #0x2                   	// #2
    9600d6b4:	94004313 	bl	9601e300 <tegrabl_error_print>
		result = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_INIT_SCRUB_DMA_1);
    9600d6b8:	52808540 	mov	w0, #0x42a                 	// #1066
    9600d6bc:	17ffffd0 	b	9600d5fc <tegrabl_init_scrub_dma+0x6c>
	NV_WRITE32_FENCE(cb + DMA_CH_MMIO_WCOUNT, ((params.size >> 2) - 1U));
    9600d6c0:	d2800400 	mov	x0, #0x20                  	// #32
    9600d6c4:	53027e73 	lsr	w19, w19, #2
    9600d6c8:	f2a00020 	movk	x0, #0x1, lsl #16
    9600d6cc:	51000673 	sub	w19, w19, #0x1
    9600d6d0:	b82068b3 	str	w19, [x5, x0]
    9600d6d4:	b86068a0 	ldr	w0, [x5, x0]
	if ((params.dir != DMA_PATTERN_FILL) &&
    9600d6d8:	121e7aa0 	and	w0, w21, #0xfffffffd
    9600d6dc:	7100101f 	cmp	w0, #0x4
    9600d6e0:	54000160 	b.eq	9600d70c <tegrabl_init_scrub_dma+0x17c>  // b.none
		TEGRABL_SET_ERROR_STRING(result, "transfer type %u", params.dir);
    9600d6e4:	5280a542 	mov	w2, #0x52a                 	// #1322
    9600d6e8:	52800020 	mov	w0, #0x1                   	// #1
    9600d6ec:	2a1503e4 	mov	w4, w21
    9600d6f0:	90000183 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600d6f4:	72a26262 	movk	w2, #0x1313, lsl #16
    9600d6f8:	9124cc63 	add	x3, x3, #0x933
    9600d6fc:	52800041 	mov	w1, #0x2                   	// #2
    9600d700:	94004300 	bl	9601e300 <tegrabl_error_print>
		result = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_INIT_SCRUB_DMA_2);
    9600d704:	5280a540 	mov	w0, #0x52a                 	// #1322
    9600d708:	17ffffbd 	b	9600d5fc <tegrabl_init_scrub_dma+0x6c>
	cb = dma_data->dma_plat_data.base_addr +
    9600d70c:	914040a5 	add	x5, x5, #0x10, lsl #12
	val = NV_READ32(cb + DMA_CH_CSR);
    9600d710:	b94000a4 	ldr	w4, [x5]
	val &= ~val1;
    9600d714:	12087084 	and	w4, w4, #0xff1fffff
	val |= (params.dir << DMA_CH_CSR_XFER_MODE_SHIFT);
    9600d718:	2a155495 	orr	w21, w4, w21, lsl #21
	NV_WRITE32_FENCE(cb + DMA_CH_CSR, val);
    9600d71c:	b90000b5 	str	w21, [x5]
    9600d720:	b94000a0 	ldr	w0, [x5]
	val = NV_READ32(cb + DMA_CH_CSR);
    9600d724:	b94000a0 	ldr	w0, [x5]
	val |= DMA_CH_CSR_ENABLE;
    9600d728:	32010000 	orr	w0, w0, #0x80000000
	NV_WRITE32_FENCE(cb + DMA_CH_CSR, val);
    9600d72c:	b90000a0 	str	w0, [x5]
    9600d730:	b94000a0 	ldr	w0, [x5]
	while ((NV_READ32(cb + DMA_CH_STAT) & DMA_CH_STAT_BUSY) != 0UL) {
    9600d734:	b9400060 	ldr	w0, [x3]
    9600d738:	37ffffe0 	tbnz	w0, #31, 9600d734 <tegrabl_init_scrub_dma+0x1a4>
	tegrabl_error_t result = TEGRABL_NO_ERROR;
    9600d73c:	52800000 	mov	w0, #0x0                   	// #0
	return result;
    9600d740:	17ffffb0 	b	9600d600 <tegrabl_init_scrub_dma+0x70>

000000009600d744 <gpcdma_get_soc_info>:
	}
};

void gpcdma_get_soc_info(struct gpcdma_soc_info **ggpcdma_info)
{
	*ggpcdma_info = &gpcdma_info[0];
    9600d744:	900001e1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600d748:	912da021 	add	x1, x1, #0xb68
    9600d74c:	f9000001 	str	x1, [x0]
}
    9600d750:	d65f03c0 	ret

000000009600d754 <reg>:
{
	uint32_t bank = bank_gpio / TEGRABL_MAX_GPIOS_PER_BANK;
	uint32_t gpio = bank_gpio % TEGRABL_MAX_GPIOS_PER_BANK;
	uint32_t bank_base = id->bank_bases[bank];

	return id->base_addr + bank_base + (reg - GPIO_N_ENABLE_CONFIG_00_0) +
    9600d754:	b9400804 	ldr	w4, [x0, #8]
			(gpio * (GPIO_N_ENABLE_CONFIG_01_0 - GPIO_N_ENABLE_CONFIG_00_0));
    9600d758:	531b0823 	ubfiz	w3, w1, #5, #3
	uint32_t bank_base = id->bank_bases[bank];
    9600d75c:	f9400800 	ldr	x0, [x0, #16]
    9600d760:	53037c21 	lsr	w1, w1, #3
	return id->base_addr + bank_base + (reg - GPIO_N_ENABLE_CONFIG_00_0) +
    9600d764:	51404042 	sub	w2, w2, #0x10, lsl #12
    9600d768:	0b040063 	add	w3, w3, w4
    9600d76c:	0b020063 	add	w3, w3, w2
    9600d770:	b8617800 	ldr	w0, [x0, x1, lsl #2]
}
    9600d774:	0b000060 	add	w0, w3, w0
    9600d778:	d65f03c0 	ret

000000009600d77c <tegrabl_gpio_read>:
	uint32_t reg_val;
	bool pin_state;
	const struct tegrabl_gpio_id *id = NULL;
	tegrabl_error_t status = TEGRABL_NO_ERROR;

	if (drv_data == NULL) {
    9600d77c:	b4000282 	cbz	x2, 9600d7cc <tegrabl_gpio_read+0x50>
    9600d780:	2a0003e3 	mov	w3, w0
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	id = (const struct tegrabl_gpio_id *)drv_data;

	if (!is_gpio_valid(id, gpio_num)) {
    9600d784:	b9400c40 	ldr	w0, [x2, #12]
    9600d788:	6b430c1f 	cmp	w0, w3, lsr #3
    9600d78c:	54000209 	b.ls	9600d7cc <tegrabl_gpio_read+0x50>  // b.plast
    9600d790:	aa0103e5 	mov	x5, x1
{
    9600d794:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9600d798:	aa0203e0 	mov	x0, x2
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	reg_val = NV_READ32(reg(id, gpio_num, GPIO_N_INPUT_00_0));
    9600d79c:	52800102 	mov	w2, #0x8                   	// #8
{
    9600d7a0:	910003fd 	mov	x29, sp
    9600d7a4:	2a0303e1 	mov	w1, w3
	reg_val = NV_READ32(reg(id, gpio_num, GPIO_N_INPUT_00_0));
    9600d7a8:	72a00022 	movk	w2, #0x1, lsl #16
    9600d7ac:	97ffffea 	bl	9600d754 <reg>
    9600d7b0:	2a0003e0 	mov	w0, w0
    9600d7b4:	b9400000 	ldr	w0, [x0]
	pin_state = !!NV_DRF_VAL(GPIO, N_INPUT_00, GPIO_IN, reg_val);

	*state = (pin_state == true) ? GPIO_PIN_STATE_HIGH : GPIO_PIN_STATE_LOW;
    9600d7b8:	12000000 	and	w0, w0, #0x1
    9600d7bc:	b90000a0 	str	w0, [x5]
    9600d7c0:	52800000 	mov	w0, #0x0                   	// #0

	return status;
}
    9600d7c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600d7c8:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600d7cc:	52800040 	mov	w0, #0x2                   	// #2
    9600d7d0:	72a9a9a0 	movk	w0, #0x4d4d, lsl #16
}
    9600d7d4:	d65f03c0 	ret

000000009600d7d8 <tegrabl_gpio_write>:
{
	uint32_t reg_val;
	bool pin_state;
	const struct tegrabl_gpio_id *id = NULL;

	if (drv_data == NULL) {
    9600d7d8:	b4000282 	cbz	x2, 9600d828 <tegrabl_gpio_write+0x50>
    9600d7dc:	2a0003e3 	mov	w3, w0
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	id = (const struct tegrabl_gpio_id *)drv_data;

	if (!is_gpio_valid(id, gpio_num)) {
    9600d7e0:	b9400c40 	ldr	w0, [x2, #12]
    9600d7e4:	6b430c1f 	cmp	w0, w3, lsr #3
    9600d7e8:	54000209 	b.ls	9600d828 <tegrabl_gpio_write+0x50>  // b.plast
    9600d7ec:	aa0203e0 	mov	x0, x2
    9600d7f0:	2a0103e2 	mov	w2, w1
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	pin_state = (state == GPIO_PIN_STATE_LOW) ? 0 : 1;
    9600d7f4:	7100005f 	cmp	w2, #0x0
{
    9600d7f8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	pin_state = (state == GPIO_PIN_STATE_LOW) ? 0 : 1;
    9600d7fc:	1a9f07e5 	cset	w5, ne  // ne = any
	reg_val = NV_DRF_NUM(GPIO, N_OUTPUT_VALUE_00, GPIO_OUT_VAL, pin_state);
	NV_WRITE32(reg(id, gpio_num, GPIO_N_OUTPUT_VALUE_00_0), reg_val);
    9600d800:	52800202 	mov	w2, #0x10                  	// #16
{
    9600d804:	910003fd 	mov	x29, sp
    9600d808:	2a0303e1 	mov	w1, w3
	NV_WRITE32(reg(id, gpio_num, GPIO_N_OUTPUT_VALUE_00_0), reg_val);
    9600d80c:	72a00022 	movk	w2, #0x1, lsl #16
    9600d810:	97ffffd1 	bl	9600d754 <reg>
    9600d814:	2a0003e0 	mov	w0, w0
    9600d818:	b9000005 	str	w5, [x0]
    9600d81c:	52800000 	mov	w0, #0x0                   	// #0

	return TEGRABL_NO_ERROR;
}
    9600d820:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600d824:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600d828:	52800040 	mov	w0, #0x2                   	// #2
    9600d82c:	72a9a9a0 	movk	w0, #0x4d4d, lsl #16
}
    9600d830:	d65f03c0 	ret

000000009600d834 <tegrabl_gpio_config>:
	if (drv_data == NULL) {
    9600d834:	b4000482 	cbz	x2, 9600d8c4 <tegrabl_gpio_config+0x90>
	if (!is_gpio_valid(id, gpio_num)) {
    9600d838:	b9400c43 	ldr	w3, [x2, #12]
    9600d83c:	6b400c7f 	cmp	w3, w0, lsr #3
    9600d840:	54000429 	b.ls	9600d8c4 <tegrabl_gpio_config+0x90>  // b.plast
	switch (mode) {
    9600d844:	7100043f 	cmp	w1, #0x1
    9600d848:	54000448 	b.hi	9600d8d0 <tegrabl_gpio_config+0x9c>  // b.pmore
    9600d84c:	aa0203e6 	mov	x6, x2
    9600d850:	2a0003e5 	mov	w5, w0
    9600d854:	2a0103e7 	mov	w7, w1
{
    9600d858:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	NV_WRITE32(reg(id, gpio, GPIO_N_OUTPUT_CONTROL_00_0), state);
    9600d85c:	52800182 	mov	w2, #0xc                   	// #12
    9600d860:	2a0003e1 	mov	w1, w0
{
    9600d864:	910003fd 	mov	x29, sp
	NV_WRITE32(reg(id, gpio, GPIO_N_OUTPUT_CONTROL_00_0), state);
    9600d868:	aa0603e0 	mov	x0, x6
    9600d86c:	72a00022 	movk	w2, #0x1, lsl #16
    9600d870:	97ffffb9 	bl	9600d754 <reg>
    9600d874:	2a0003e0 	mov	w0, w0
	val = NV_READ32(reg(id, gpio, GPIO_N_ENABLE_CONFIG_00_0));
    9600d878:	2a0503e1 	mov	w1, w5
    9600d87c:	52a00022 	mov	w2, #0x10000               	// #65536
	NV_WRITE32(reg(id, gpio, GPIO_N_OUTPUT_CONTROL_00_0), state);
    9600d880:	b900001f 	str	wzr, [x0]
	val = NV_READ32(reg(id, gpio, GPIO_N_ENABLE_CONFIG_00_0));
    9600d884:	aa0603e0 	mov	x0, x6
    9600d888:	97ffffb3 	bl	9600d754 <reg>
    9600d88c:	2a0003e0 	mov	w0, w0
		val &= ~NV_DRF_DEF(GPIO, N_ENABLE_CONFIG_00, IN_OUT, OUT);
    9600d890:	710000ff 	cmp	w7, #0x0
	val = NV_READ32(reg(id, gpio, GPIO_N_ENABLE_CONFIG_00_0));
    9600d894:	b9400002 	ldr	w2, [x0]
		val &= ~NV_DRF_DEF(GPIO, N_ENABLE_CONFIG_00, IN_OUT, OUT);
    9600d898:	121e7841 	and	w1, w2, #0xfffffffd
    9600d89c:	32000442 	orr	w2, w2, #0x3
    9600d8a0:	32000021 	orr	w1, w1, #0x1
    9600d8a4:	1a811042 	csel	w2, w2, w1, ne  // ne = any
	NV_WRITE32(reg(id, gpio, GPIO_N_ENABLE_CONFIG_00_0), val);
    9600d8a8:	b9000002 	str	w2, [x0]
		tegrabl_pinconfig_set(gpio_num,
    9600d8ac:	12808a01 	mov	w1, #0xfffffbaf            	// #-1105
    9600d8b0:	2a0503e0 	mov	w0, w5
    9600d8b4:	940000ca 	bl	9600dbdc <tegrabl_pinconfig_set>
    9600d8b8:	52800000 	mov	w0, #0x0                   	// #0
}
    9600d8bc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600d8c0:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600d8c4:	52800040 	mov	w0, #0x2                   	// #2
    9600d8c8:	72a9a9a0 	movk	w0, #0x4d4d, lsl #16
    9600d8cc:	d65f03c0 	ret
	return status;
    9600d8d0:	52800000 	mov	w0, #0x0                   	// #0
}
    9600d8d4:	d65f03c0 	ret

000000009600d8d8 <tegrabl_gpio_driver_init>:
	return err;
}
#endif

tegrabl_error_t tegrabl_gpio_driver_init()
{
    9600d8d8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	tegrabl_error_t status = TEGRABL_NO_ERROR;
	uint32_t i;

	if (s_is_gpio_initialised) {
    9600d8dc:	b0000300 	adrp	x0, 9606e000 <__bss_start>
{
    9600d8e0:	910003fd 	mov	x29, sp
	if (s_is_gpio_initialised) {
    9600d8e4:	39530001 	ldrb	w1, [x0, #1216]
{
    9600d8e8:	a90153f3 	stp	x19, x20, [sp, #16]
    9600d8ec:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600d8f0:	a90363f7 	stp	x23, x24, [sp, #48]
	if (s_is_gpio_initialised) {
    9600d8f4:	35000801 	cbnz	w1, 9600d9f4 <tegrabl_gpio_driver_init+0x11c>
    9600d8f8:	aa0003f8 	mov	x24, x0
    9600d8fc:	900001e0 	adrp	x0, 96049000 <default_srgb_lut+0xa28>
    9600d900:	912dc000 	add	x0, x0, #0xb70
	for (i = 0; i < ARRAY_SIZE(drv); i++) {
#if defined(CONFIG_ENABLE_GPIO_DT_BASED)
		/* read gpio driver phandle from dt, error in this is not fatal */
		status = fetch_phandle_from_dt(&drv[i]);
		if (status != TEGRABL_NO_ERROR) {
			pr_warn("%s failed to fetch phandle for %s\n", __func__, drv[i].name);
    9600d904:	90000194 	adrp	x20, 9603d000 <__func__.3609+0x209>
    9600d908:	90000197 	adrp	x23, 9603d000 <__func__.3609+0x209>
    9600d90c:	91002013 	add	x19, x0, #0x8
    9600d910:	9101a015 	add	x21, x0, #0x68
    9600d914:	91256a94 	add	x20, x20, #0x95a
    9600d918:	91290af7 	add	x23, x23, #0xa42
    9600d91c:	d1002276 	sub	x22, x19, #0x8
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9600d920:	910123a1 	add	x1, x29, #0x48
    9600d924:	52800000 	mov	w0, #0x0                   	// #0
	void *fdt = NULL;
    9600d928:	f90027bf 	str	xzr, [x29, #72]
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9600d92c:	94008d4b 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    9600d930:	34000160 	cbz	w0, 9600d95c <tegrabl_gpio_driver_init+0x84>
		pr_error("%s: Failed to get BL-dtb handle\n", __func__);
    9600d934:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600d938:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600d93c:	91251021 	add	x1, x1, #0x944
    9600d940:	91273c00 	add	x0, x0, #0x9cf
    9600d944:	9400534b 	bl	96022670 <tegrabl_printf>
			pr_warn("%s failed to fetch phandle for %s\n", __func__, drv[i].name);
    9600d948:	f9400262 	ldr	x2, [x19]
    9600d94c:	aa1403e1 	mov	x1, x20
    9600d950:	aa1703e0 	mov	x0, x23
    9600d954:	94005347 	bl	96022670 <tegrabl_printf>
    9600d958:	14000012 	b	9600d9a0 <tegrabl_gpio_driver_init+0xc8>
	err = tegrabl_dt_get_node_with_compatible(fdt, 0, drv->name, &offset);
    9600d95c:	f9400262 	ldr	x2, [x19]
    9600d960:	910113a3 	add	x3, x29, #0x44
    9600d964:	f94027a0 	ldr	x0, [x29, #72]
    9600d968:	52800001 	mov	w1, #0x0                   	// #0
    9600d96c:	94008e70 	bl	9603132c <tegrabl_dt_get_node_with_compatible>
	if (err != TEGRABL_NO_ERROR) {
    9600d970:	34000100 	cbz	w0, 9600d990 <tegrabl_gpio_driver_init+0xb8>
		pr_error("%s: failed to get node %s\n", __func__, drv->name);
    9600d974:	f9400262 	ldr	x2, [x19]
    9600d978:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600d97c:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600d980:	91251021 	add	x1, x1, #0x944
    9600d984:	9127cc00 	add	x0, x0, #0x9f3
    9600d988:	9400533a 	bl	96022670 <tegrabl_printf>
    9600d98c:	17ffffef 	b	9600d948 <tegrabl_gpio_driver_init+0x70>
	drv->phandle = fdt_get_phandle(fdt, offset);
    9600d990:	b94047a1 	ldr	w1, [x29, #68]
    9600d994:	f94027a0 	ldr	x0, [x29, #72]
    9600d998:	940091af 	bl	96032054 <fdt_get_phandle>
    9600d99c:	b81f8260 	stur	w0, [x19, #-8]
		}
#endif
		status = tegrabl_gpio_driver_register(&drv[i]);
    9600d9a0:	aa1603e0 	mov	x0, x22
    9600d9a4:	94000016 	bl	9600d9fc <tegrabl_gpio_driver_register>
    9600d9a8:	2a0003f6 	mov	w22, w0
		if (status != TEGRABL_NO_ERROR)
    9600d9ac:	340001e0 	cbz	w0, 9600d9e8 <tegrabl_gpio_driver_init+0x110>
			pr_critical("%s: failed to register tegra gpio driver: %s\n",
    9600d9b0:	f9400262 	ldr	x2, [x19]
    9600d9b4:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600d9b8:	aa1403e1 	mov	x1, x20
    9600d9bc:	91284400 	add	x0, x0, #0xa11
    9600d9c0:	9400532c 	bl	96022670 <tegrabl_printf>
    9600d9c4:	9100c273 	add	x19, x19, #0x30
	for (i = 0; i < ARRAY_SIZE(drv); i++) {
    9600d9c8:	eb15027f 	cmp	x19, x21
    9600d9cc:	54fffa81 	b.ne	9600d91c <tegrabl_gpio_driver_init+0x44>  // b.any
					 __func__, drv[i].name);
		}
	}

	return status;
}
    9600d9d0:	2a1603e0 	mov	w0, w22
    9600d9d4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600d9d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600d9dc:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600d9e0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9600d9e4:	d65f03c0 	ret
			s_is_gpio_initialised = true;
    9600d9e8:	52800020 	mov	w0, #0x1                   	// #1
    9600d9ec:	39130300 	strb	w0, [x24, #1216]
    9600d9f0:	17fffff5 	b	9600d9c4 <tegrabl_gpio_driver_init+0xec>
		return TEGRABL_NO_ERROR;
    9600d9f4:	52800016 	mov	w22, #0x0                   	// #0
    9600d9f8:	17fffff6 	b	9600d9d0 <tegrabl_gpio_driver_init+0xf8>

000000009600d9fc <tegrabl_gpio_driver_register>:

	return NULL;
}

tegrabl_error_t tegrabl_gpio_driver_register(struct gpio_driver *drv)
{
    9600d9fc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9600da00:	910003fd 	mov	x29, sp
    9600da04:	a90153f3 	stp	x19, x20, [sp, #16]
	tegrabl_error_t ret = TEGRABL_NO_ERROR;

	if (!drv || !drv->ops || !drv->ops->read || !drv->ops->write ||
    9600da08:	b4000140 	cbz	x0, 9600da30 <tegrabl_gpio_driver_register+0x34>
    9600da0c:	aa0003f4 	mov	x20, x0
    9600da10:	f9401400 	ldr	x0, [x0, #40]
    9600da14:	b40000e0 	cbz	x0, 9600da30 <tegrabl_gpio_driver_register+0x34>
    9600da18:	f9400001 	ldr	x1, [x0]
    9600da1c:	b40000a1 	cbz	x1, 9600da30 <tegrabl_gpio_driver_register+0x34>
    9600da20:	f9400401 	ldr	x1, [x0, #8]
    9600da24:	b4000061 	cbz	x1, 9600da30 <tegrabl_gpio_driver_register+0x34>
    9600da28:	f9400800 	ldr	x0, [x0, #16]
    9600da2c:	b50000e0 	cbnz	x0, 9600da48 <tegrabl_gpio_driver_register+0x4c>
							!drv->ops->config) {
		pr_critical("Failed NULL checks in gpio_driver_register\n");
    9600da30:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600da34:	912c1400 	add	x0, x0, #0xb05
    9600da38:	9400530e 	bl	96022670 <tegrabl_printf>
		ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600da3c:	52800040 	mov	w0, #0x2                   	// #2
		goto out;
	}

	if (gpio_locate_driver_in_list(drv->chip_id)) {
		pr_critical("gpio-driver '%s' already registered\n", drv->name);
		ret = TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0);
    9600da40:	72a9a9a0 	movk	w0, #0x4d4d, lsl #16
		goto out;
    9600da44:	14000015 	b	9600da98 <tegrabl_gpio_driver_register+0x9c>
	list_for_every_entry(&gpio_drivers, entry, struct gpio_driver, node) {
    9600da48:	b0000313 	adrp	x19, 9606e000 <__bss_start>
    9600da4c:	91132273 	add	x19, x19, #0x4c8
	if (gpio_locate_driver_in_list(drv->chip_id)) {
    9600da50:	b9400682 	ldr	w2, [x20, #4]
	list_for_every_entry(&gpio_drivers, entry, struct gpio_driver, node) {
    9600da54:	f9400660 	ldr	x0, [x19, #8]
    9600da58:	d1006000 	sub	x0, x0, #0x18
    9600da5c:	91006001 	add	x1, x0, #0x18
    9600da60:	eb01027f 	cmp	x19, x1
    9600da64:	54000201 	b.ne	9600daa4 <tegrabl_gpio_driver_register+0xa8>  // b.any
	}

	pr_info("%s: register '%s' driver\n", __func__, drv->name);
    9600da68:	f9400682 	ldr	x2, [x20, #8]
    9600da6c:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600da70:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600da74:	9129a021 	add	x1, x1, #0xa68
    9600da78:	912cd000 	add	x0, x0, #0xb34
    9600da7c:	940052fd 	bl	96022670 <tegrabl_printf>
	item->next = list->next;
    9600da80:	f9400661 	ldr	x1, [x19, #8]
	list_add_head(&gpio_drivers, &drv->node);
    9600da84:	91006280 	add	x0, x20, #0x18
    9600da88:	a9018693 	stp	x19, x1, [x20, #24]
	list->next->prev = item;
    9600da8c:	f9000020 	str	x0, [x1]
	list->next = item;
    9600da90:	f9000660 	str	x0, [x19, #8]
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
    9600da94:	52800000 	mov	w0, #0x0                   	// #0

out:
	return ret;
}
    9600da98:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600da9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600daa0:	d65f03c0 	ret
		if (entry->chip_id == chip_id) {
    9600daa4:	b9400401 	ldr	w1, [x0, #4]
    9600daa8:	6b01005f 	cmp	w2, w1
    9600daac:	54000060 	b.eq	9600dab8 <tegrabl_gpio_driver_register+0xbc>  // b.none
	list_for_every_entry(&gpio_drivers, entry, struct gpio_driver, node) {
    9600dab0:	f9401000 	ldr	x0, [x0, #32]
    9600dab4:	17ffffe9 	b	9600da58 <tegrabl_gpio_driver_register+0x5c>
		pr_critical("gpio-driver '%s' already registered\n", drv->name);
    9600dab8:	f9400681 	ldr	x1, [x20, #8]
    9600dabc:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dac0:	912d4400 	add	x0, x0, #0xb51
    9600dac4:	940052eb 	bl	96022670 <tegrabl_printf>
		ret = TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0);
    9600dac8:	52800420 	mov	w0, #0x21                  	// #33
    9600dacc:	17ffffdd 	b	9600da40 <tegrabl_gpio_driver_register+0x44>

000000009600dad0 <tegrabl_gpio_driver_get>:

tegrabl_error_t tegrabl_gpio_driver_get(uint32_t chip_id,
										struct gpio_driver **out)
{
    9600dad0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9600dad4:	910003fd 	mov	x29, sp
	tegrabl_error_t ret = TEGRABL_NO_ERROR;

	if (out == NULL) {
    9600dad8:	b5000141 	cbnz	x1, 9600db00 <tegrabl_gpio_driver_get+0x30>
		pr_critical("%s: Null argument\n", __func__);
    9600dadc:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600dae0:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dae4:	912a1421 	add	x1, x1, #0xa85
    9600dae8:	912af000 	add	x0, x0, #0xabc
    9600daec:	940052e1 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600daf0:	52800040 	mov	w0, #0x2                   	// #2

	*out = gpio_locate_driver_in_list(chip_id);
	if (*out == NULL) {
		pr_critical("GPIO driver for chip_id %#x could not be found\n",
					chip_id);
		ret = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600daf4:	72a9a9a0 	movk	w0, #0x4d4d, lsl #16
	}

	return ret;
}
    9600daf8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600dafc:	d65f03c0 	ret
	list_for_every_entry(&gpio_drivers, entry, struct gpio_driver, node) {
    9600db00:	b0000303 	adrp	x3, 9606e000 <__bss_start>
    9600db04:	91132063 	add	x3, x3, #0x4c8
    9600db08:	2a0003e4 	mov	w4, w0
    9600db0c:	f9400462 	ldr	x2, [x3, #8]
    9600db10:	d1006042 	sub	x2, x2, #0x18
    9600db14:	91006040 	add	x0, x2, #0x18
    9600db18:	eb00007f 	cmp	x3, x0
    9600db1c:	54000161 	b.ne	9600db48 <tegrabl_gpio_driver_get+0x78>  // b.any
	return NULL;
    9600db20:	d2800002 	mov	x2, #0x0                   	// #0
	*out = gpio_locate_driver_in_list(chip_id);
    9600db24:	f9000022 	str	x2, [x1]
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
    9600db28:	52800000 	mov	w0, #0x0                   	// #0
	if (*out == NULL) {
    9600db2c:	b5fffe62 	cbnz	x2, 9600daf8 <tegrabl_gpio_driver_get+0x28>
		pr_critical("GPIO driver for chip_id %#x could not be found\n",
    9600db30:	2a0403e1 	mov	w1, w4
    9600db34:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600db38:	912b4800 	add	x0, x0, #0xad2
    9600db3c:	940052cd 	bl	96022670 <tegrabl_printf>
		ret = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600db40:	528001a0 	mov	w0, #0xd                   	// #13
    9600db44:	17ffffec 	b	9600daf4 <tegrabl_gpio_driver_get+0x24>
		if (entry->chip_id == chip_id) {
    9600db48:	b9400440 	ldr	w0, [x2, #4]
    9600db4c:	6b00009f 	cmp	w4, w0
    9600db50:	54fffea0 	b.eq	9600db24 <tegrabl_gpio_driver_get+0x54>  // b.none
	list_for_every_entry(&gpio_drivers, entry, struct gpio_driver, node) {
    9600db54:	f9401042 	ldr	x2, [x2, #32]
    9600db58:	17ffffee 	b	9600db10 <tegrabl_gpio_driver_get+0x40>

000000009600db5c <tegrabl_gpio_get_chipid_with_phandle>:
{
	struct gpio_driver *entry;

	TEGRABL_ASSERT(chip_id);

	list_for_every_entry(&gpio_drivers, entry, struct gpio_driver, node) {
    9600db5c:	b0000303 	adrp	x3, 9606e000 <__bss_start>
    9600db60:	91132063 	add	x3, x3, #0x4c8
    9600db64:	f9400462 	ldr	x2, [x3, #8]
    9600db68:	d1006042 	sub	x2, x2, #0x18
    9600db6c:	91006044 	add	x4, x2, #0x18
    9600db70:	eb04007f 	cmp	x3, x4
    9600db74:	54000081 	b.ne	9600db84 <tegrabl_gpio_get_chipid_with_phandle+0x28>  // b.any
		if (entry->phandle == phandle) {
			*chip_id = entry->chip_id;
			return TEGRABL_NO_ERROR;
		}
	}
	return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600db78:	528001a0 	mov	w0, #0xd                   	// #13
    9600db7c:	72a9a9a0 	movk	w0, #0x4d4d, lsl #16
    9600db80:	14000007 	b	9600db9c <tegrabl_gpio_get_chipid_with_phandle+0x40>
		if (entry->phandle == phandle) {
    9600db84:	b9400044 	ldr	w4, [x2]
    9600db88:	6b00009f 	cmp	w4, w0
    9600db8c:	540000a1 	b.ne	9600dba0 <tegrabl_gpio_get_chipid_with_phandle+0x44>  // b.any
			*chip_id = entry->chip_id;
    9600db90:	b9400440 	ldr	w0, [x2, #4]
    9600db94:	b9000020 	str	w0, [x1]
			return TEGRABL_NO_ERROR;
    9600db98:	52800000 	mov	w0, #0x0                   	// #0
}
    9600db9c:	d65f03c0 	ret
	list_for_every_entry(&gpio_drivers, entry, struct gpio_driver, node) {
    9600dba0:	f9401042 	ldr	x2, [x2, #32]
    9600dba4:	17fffff1 	b	9600db68 <tegrabl_gpio_get_chipid_with_phandle+0xc>

000000009600dba8 <gpio_framework_init>:
#endif

void gpio_framework_init()
{
	if (s_is_gpio_framework_initialised) {
    9600dba8:	b0000301 	adrp	x1, 9606e000 <__bss_start>
    9600dbac:	39536020 	ldrb	w0, [x1, #1240]
    9600dbb0:	35000140 	cbnz	w0, 9600dbd8 <gpio_framework_init+0x30>
	list->prev = list->next = list;
    9600dbb4:	b0000302 	adrp	x2, 9606e000 <__bss_start>
    9600dbb8:	91132040 	add	x0, x2, #0x4c8
    9600dbbc:	f9026440 	str	x0, [x2, #1224]
    9600dbc0:	f9000400 	str	x0, [x0, #8]
		return;
	}

	/* initialize the gpio driver list */
	list_initialize(&gpio_drivers);
	s_is_gpio_framework_initialised = true;
    9600dbc4:	52800020 	mov	w0, #0x1                   	// #1
    9600dbc8:	39136020 	strb	w0, [x1, #1240]
	pr_info("gpio framework initialized\n");
    9600dbcc:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dbd0:	912a7400 	add	x0, x0, #0xa9d
    9600dbd4:	140052a7 	b	96022670 <tegrabl_printf>
}
    9600dbd8:	d65f03c0 	ret

000000009600dbdc <tegrabl_pinconfig_set>:
	uint32_t val, pingroup_list_item;
	uint32_t pingroup_count = ARRAY_SIZE(tegra18x_groups);

	if (pingroup_count) {
		for (pingroup_list_item = 0; pingroup_list_item < pingroup_count; pingroup_list_item++) {
			if (pin_num == tegra18x_groups[pingroup_list_item].pin) {
    9600dbdc:	7101981f 	cmp	w0, #0x66
    9600dbe0:	540000e1 	b.ne	9600dbfc <tegrabl_pinconfig_set+0x20>  // b.any
				val = padctl_readl(tegra18x_groups[pingroup_list_item].reg_offset);
    9600dbe4:	d29a1a00 	mov	x0, #0xd0d0                	// #53456
    9600dbe8:	f2a04860 	movk	x0, #0x243, lsl #16
    9600dbec:	b9400002 	ldr	w2, [x0]
				val &= pinconfig;
    9600dbf0:	0a020021 	and	w1, w1, w2
				padctl_writel(tegra18x_groups[pingroup_list_item].reg_offset, val);
    9600dbf4:	b9000001 	str	w1, [x0]
			}
		}
	}
}
    9600dbf8:	d65f03c0 	ret
			if (pin_num == tegra18x_groups[pingroup_list_item].pin) {
    9600dbfc:	71019c1f 	cmp	w0, #0x67
    9600dc00:	54ffffc1 	b.ne	9600dbf8 <tegrabl_pinconfig_set+0x1c>  // b.any
				val = padctl_readl(tegra18x_groups[pingroup_list_item].reg_offset);
    9600dc04:	d29a1b00 	mov	x0, #0xd0d8                	// #53464
    9600dc08:	17fffff8 	b	9600dbe8 <tegrabl_pinconfig_set+0xc>

000000009600dc0c <tca9539_gpio_config>:
 * @return TEGRABL_NO_ERROR on success otherwise error
 */
static tegrabl_error_t tca9539_gpio_config(uint32_t gpio_num,
										   gpio_pin_mode_t mode,
										   void *drv_data)
{
    9600dc0c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600dc10:	910003fd 	mov	x29, sp
    9600dc14:	a90153f3 	stp	x19, x20, [sp, #16]
    9600dc18:	a9025bf5 	stp	x21, x22, [sp, #32]
	struct tca9539_chip *dev = (struct tca9539_chip *)drv_data;
	uint8_t reg, shift, val;
	tegrabl_error_t ret = TEGRABL_NO_ERROR;

	if (dev == NULL) {
    9600dc1c:	b50001a2 	cbnz	x2, 9600dc50 <tca9539_gpio_config+0x44>
		pr_error("%s: driver data is not available!\n", __func__);
    9600dc20:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600dc24:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dc28:	91307421 	add	x1, x1, #0xc1d
    9600dc2c:	9132e000 	add	x0, x0, #0xcb8
    9600dc30:	94005290 	bl	96022670 <tegrabl_printf>
		val |= (1 << shift);
	else if (mode == GPIO_PINMODE_OUTPUT)
		val &= ~(1 << shift);
	else {
		pr_error("%s: input mode(%d) is invalid!\n", __func__, mode);
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600dc34:	52800054 	mov	w20, #0x2                   	// #2
    9600dc38:	72a9a9b4 	movk	w20, #0x4d4d, lsl #16
	} else {
		dev->cache.config[gpio_num / TCA9539_BANK_SIZE] = val;
	}

	return ret;
}
    9600dc3c:	2a1403e0 	mov	w0, w20
    9600dc40:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600dc44:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600dc48:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600dc4c:	d65f03c0 	ret
	if (!is_gpio_valid(gpio_num)) {
    9600dc50:	71003c1f 	cmp	w0, #0xf
    9600dc54:	54000109 	b.ls	9600dc74 <tca9539_gpio_config+0x68>  // b.plast
		pr_error("%s: gpio[%d] is not valid!\n", __func__, gpio_num);
    9600dc58:	2a0003e2 	mov	w2, w0
    9600dc5c:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600dc60:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dc64:	91307421 	add	x1, x1, #0xc1d
    9600dc68:	91337800 	add	x0, x0, #0xcde
		pr_error("%s: input mode(%d) is invalid!\n", __func__, mode);
    9600dc6c:	94005281 	bl	96022670 <tegrabl_printf>
    9600dc70:	17fffff1 	b	9600dc34 <tca9539_gpio_config+0x28>
	reg = dev->cmd.config[gpio_num / TCA9539_BANK_SIZE];
    9600dc74:	53037c15 	lsr	w21, w0, #3
    9600dc78:	aa0203f3 	mov	x19, x2
    9600dc7c:	8b150042 	add	x2, x2, x21
	shift = gpio_num % TCA9539_BANK_SIZE;
    9600dc80:	12000800 	and	w0, w0, #0x7
	reg = dev->cmd.config[gpio_num / TCA9539_BANK_SIZE];
    9600dc84:	39408856 	ldrb	w22, [x2, #34]
	val = dev->cache.config[gpio_num / TCA9539_BANK_SIZE];
    9600dc88:	39409842 	ldrb	w2, [x2, #38]
    9600dc8c:	3900ffa2 	strb	w2, [x29, #63]
	if (mode == GPIO_PINMODE_INPUT)
    9600dc90:	35000261 	cbnz	w1, 9600dcdc <tca9539_gpio_config+0xd0>
		val |= (1 << shift);
    9600dc94:	52800021 	mov	w1, #0x1                   	// #1
    9600dc98:	1ac02021 	lsl	w1, w1, w0
    9600dc9c:	2a010041 	orr	w1, w2, w1
	ret = tegrabl_i2c_dev_write(dev->hi2cdev, &val, reg, sizeof(val));
    9600dca0:	f9400260 	ldr	x0, [x19]
    9600dca4:	52800023 	mov	w3, #0x1                   	// #1
		val &= ~(1 << shift);
    9600dca8:	3900ffa1 	strb	w1, [x29, #63]
	ret = tegrabl_i2c_dev_write(dev->hi2cdev, &val, reg, sizeof(val));
    9600dcac:	2a1603e2 	mov	w2, w22
    9600dcb0:	9100ffa1 	add	x1, x29, #0x3f
    9600dcb4:	94000624 	bl	9600f544 <tegrabl_i2c_dev_write>
    9600dcb8:	2a0003f4 	mov	w20, w0
	if (ret != TEGRABL_NO_ERROR) {
    9600dcbc:	34000260 	cbz	w0, 9600dd08 <tca9539_gpio_config+0xfc>
		pr_error("%s: failed to write 0x%02x\n", __func__, reg);
    9600dcc0:	2a1603e2 	mov	w2, w22
    9600dcc4:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600dcc8:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dccc:	91307421 	add	x1, x1, #0xc1d
    9600dcd0:	91348000 	add	x0, x0, #0xd20
    9600dcd4:	94005267 	bl	96022670 <tegrabl_printf>
    9600dcd8:	17ffffd9 	b	9600dc3c <tca9539_gpio_config+0x30>
	else if (mode == GPIO_PINMODE_OUTPUT)
    9600dcdc:	7100043f 	cmp	w1, #0x1
    9600dce0:	54000081 	b.ne	9600dcf0 <tca9539_gpio_config+0xe4>  // b.any
		val &= ~(1 << shift);
    9600dce4:	1ac02021 	lsl	w1, w1, w0
    9600dce8:	0a210041 	bic	w1, w2, w1
    9600dcec:	17ffffed 	b	9600dca0 <tca9539_gpio_config+0x94>
		pr_error("%s: input mode(%d) is invalid!\n", __func__, mode);
    9600dcf0:	2a0103e2 	mov	w2, w1
    9600dcf4:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dcf8:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600dcfc:	9133f400 	add	x0, x0, #0xcfd
    9600dd00:	91307421 	add	x1, x1, #0xc1d
    9600dd04:	17ffffda 	b	9600dc6c <tca9539_gpio_config+0x60>
		dev->cache.config[gpio_num / TCA9539_BANK_SIZE] = val;
    9600dd08:	8b150273 	add	x19, x19, x21
    9600dd0c:	3940ffa0 	ldrb	w0, [x29, #63]
    9600dd10:	39009a60 	strb	w0, [x19, #38]
    9600dd14:	17ffffca 	b	9600dc3c <tca9539_gpio_config+0x30>

000000009600dd18 <tca9539_gpio_write>:
{
    9600dd18:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600dd1c:	910003fd 	mov	x29, sp
    9600dd20:	a90153f3 	stp	x19, x20, [sp, #16]
    9600dd24:	f90013f5 	str	x21, [sp, #32]
	if (dev == NULL) {
    9600dd28:	b50001a2 	cbnz	x2, 9600dd5c <tca9539_gpio_write+0x44>
		pr_error("%s: driver data is not available!\n", __func__);
    9600dd2c:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600dd30:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dd34:	91302821 	add	x1, x1, #0xc0a
    9600dd38:	9132e000 	add	x0, x0, #0xcb8
    9600dd3c:	9400524d 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600dd40:	52800054 	mov	w20, #0x2                   	// #2
    9600dd44:	72a9a9b4 	movk	w20, #0x4d4d, lsl #16
}
    9600dd48:	2a1403e0 	mov	w0, w20
    9600dd4c:	f94013f5 	ldr	x21, [sp, #32]
    9600dd50:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600dd54:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600dd58:	d65f03c0 	ret
	if (!is_gpio_valid(gpio_num)) {
    9600dd5c:	71003c1f 	cmp	w0, #0xf
    9600dd60:	54000109 	b.ls	9600dd80 <tca9539_gpio_write+0x68>  // b.plast
		pr_error("%s: gpio[%d] is not valid!\n", __func__, gpio_num);
    9600dd64:	2a0003e2 	mov	w2, w0
    9600dd68:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600dd6c:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dd70:	91302821 	add	x1, x1, #0xc0a
    9600dd74:	91337800 	add	x0, x0, #0xcde
    9600dd78:	9400523e 	bl	96022670 <tegrabl_printf>
    9600dd7c:	17fffff1 	b	9600dd40 <tca9539_gpio_write+0x28>
	reg = dev->cmd.output[gpio_num / TCA9539_BANK_SIZE];
    9600dd80:	53037c13 	lsr	w19, w0, #3
    9600dd84:	12000800 	and	w0, w0, #0x7
    9600dd88:	8b130053 	add	x19, x2, x19
    9600dd8c:	52800023 	mov	w3, #0x1                   	// #1
    9600dd90:	aa0203e4 	mov	x4, x2
    9600dd94:	1ac02060 	lsl	w0, w3, w0
		val |= (1 << shift);
    9600dd98:	6b03003f 	cmp	w1, w3
    9600dd9c:	13001c00 	sxtb	w0, w0
    9600dda0:	39c09262 	ldrsb	w2, [x19, #36]
    9600dda4:	910103a1 	add	x1, x29, #0x40
	reg = dev->cmd.output[gpio_num / TCA9539_BANK_SIZE];
    9600dda8:	39407a75 	ldrb	w21, [x19, #30]
		val |= (1 << shift);
    9600ddac:	0a200045 	bic	w5, w2, w0
    9600ddb0:	2a000040 	orr	w0, w2, w0
    9600ddb4:	1a850000 	csel	w0, w0, w5, eq  // eq = none
    9600ddb8:	381ffc20 	strb	w0, [x1, #-1]!
	ret = tegrabl_i2c_dev_write(dev->hi2cdev, &val, reg, sizeof(val));
    9600ddbc:	f9400080 	ldr	x0, [x4]
    9600ddc0:	2a1503e2 	mov	w2, w21
    9600ddc4:	940005e0 	bl	9600f544 <tegrabl_i2c_dev_write>
    9600ddc8:	2a0003f4 	mov	w20, w0
	if (ret != TEGRABL_NO_ERROR) {
    9600ddcc:	34000100 	cbz	w0, 9600ddec <tca9539_gpio_write+0xd4>
		pr_error("%s: failed to write 0x%02x\n", __func__, reg);
    9600ddd0:	2a1503e2 	mov	w2, w21
    9600ddd4:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600ddd8:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dddc:	91302821 	add	x1, x1, #0xc0a
    9600dde0:	91348000 	add	x0, x0, #0xd20
    9600dde4:	94005223 	bl	96022670 <tegrabl_printf>
    9600dde8:	17ffffd8 	b	9600dd48 <tca9539_gpio_write+0x30>
		dev->cache.output[gpio_num / TCA9539_BANK_SIZE] = val;
    9600ddec:	3940ffa0 	ldrb	w0, [x29, #63]
    9600ddf0:	39009260 	strb	w0, [x19, #36]
    9600ddf4:	17ffffd5 	b	9600dd48 <tca9539_gpio_write+0x30>

000000009600ddf8 <tca9539_gpio_read>:
{
    9600ddf8:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600ddfc:	910003fd 	mov	x29, sp
    9600de00:	a90153f3 	stp	x19, x20, [sp, #16]
    9600de04:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (dev == NULL) {
    9600de08:	b50001a2 	cbnz	x2, 9600de3c <tca9539_gpio_read+0x44>
		pr_error("%s: driver data is not available!\n", __func__);
    9600de0c:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600de10:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600de14:	912fe021 	add	x1, x1, #0xbf8
    9600de18:	9132e000 	add	x0, x0, #0xcb8
    9600de1c:	94005215 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600de20:	52800054 	mov	w20, #0x2                   	// #2
    9600de24:	72a9a9b4 	movk	w20, #0x4d4d, lsl #16
}
    9600de28:	2a1403e0 	mov	w0, w20
    9600de2c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600de30:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600de34:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600de38:	d65f03c0 	ret
    9600de3c:	2a0003f3 	mov	w19, w0
	if (!is_gpio_valid(gpio_num)) {
    9600de40:	71003c1f 	cmp	w0, #0xf
    9600de44:	54000109 	b.ls	9600de64 <tca9539_gpio_read+0x6c>  // b.plast
		pr_error("%s: gpio[%d] is not valid!\n", __func__, gpio_num);
    9600de48:	2a0003e2 	mov	w2, w0
    9600de4c:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600de50:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600de54:	912fe021 	add	x1, x1, #0xbf8
    9600de58:	91337800 	add	x0, x0, #0xcde
    9600de5c:	94005205 	bl	96022670 <tegrabl_printf>
    9600de60:	17fffff0 	b	9600de20 <tca9539_gpio_read+0x28>
    9600de64:	aa0203e0 	mov	x0, x2
    9600de68:	aa0103f6 	mov	x22, x1
	reg = dev->cmd.input[gpio_num / TCA9539_BANK_SIZE];
    9600de6c:	53037e61 	lsr	w1, w19, #3
	ret = tegrabl_i2c_dev_read(dev->hi2cdev, &val, reg, sizeof(val));
    9600de70:	52800023 	mov	w3, #0x1                   	// #1
	reg = dev->cmd.input[gpio_num / TCA9539_BANK_SIZE];
    9600de74:	8b010041 	add	x1, x2, x1
	ret = tegrabl_i2c_dev_read(dev->hi2cdev, &val, reg, sizeof(val));
    9600de78:	f9400000 	ldr	x0, [x0]
	reg = dev->cmd.input[gpio_num / TCA9539_BANK_SIZE];
    9600de7c:	39407035 	ldrb	w21, [x1, #28]
	ret = tegrabl_i2c_dev_read(dev->hi2cdev, &val, reg, sizeof(val));
    9600de80:	9100ffa1 	add	x1, x29, #0x3f
    9600de84:	2a1503e2 	mov	w2, w21
    9600de88:	9400050e 	bl	9600f2c0 <tegrabl_i2c_dev_read>
    9600de8c:	2a0003f4 	mov	w20, w0
	if (ret != TEGRABL_NO_ERROR) {
    9600de90:	34000100 	cbz	w0, 9600deb0 <tca9539_gpio_read+0xb8>
		pr_error("%s: failed to read 0x%02x\n", __func__, reg);
    9600de94:	2a1503e2 	mov	w2, w21
    9600de98:	90000181 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600de9c:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dea0:	912fe021 	add	x1, x1, #0xbf8
    9600dea4:	9134fc00 	add	x0, x0, #0xd3f
    9600dea8:	940051f2 	bl	96022670 <tegrabl_printf>
		return ret;
    9600deac:	17ffffdf 	b	9600de28 <tca9539_gpio_read+0x30>
	if ((val >> shift) & 0x01)
    9600deb0:	3940ffa0 	ldrb	w0, [x29, #63]
    9600deb4:	12000a73 	and	w19, w19, #0x7
    9600deb8:	1ad32813 	asr	w19, w0, w19
		*state = GPIO_PIN_STATE_HIGH;
    9600debc:	12000273 	and	w19, w19, #0x1
    9600dec0:	b90002d3 	str	w19, [x22]
    9600dec4:	17ffffd9 	b	9600de28 <tca9539_gpio_read+0x30>

000000009600dec8 <tegrabl_tca9539_init>:
	return err;
}
#endif

tegrabl_error_t tegrabl_tca9539_init(void)
{
    9600dec8:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    9600decc:	910003fd 	mov	x29, sp
    9600ded0:	a9046bf9 	stp	x25, x26, [sp, #64]
		dev->cmd.input[i] = TCA9539_INPUT * TCA9539_BANK_NUM + i;
    9600ded4:	d2802019 	mov	x25, #0x100                 	// #256
{
    9600ded8:	a90153f3 	stp	x19, x20, [sp, #16]
		dev->cmd.input[i] = TCA9539_INPUT * TCA9539_BANK_NUM + i;
    9600dedc:	f2a06059 	movk	x25, #0x302, lsl #16
    9600dee0:	90000194 	adrp	x20, 9603d000 <__func__.3609+0x209>
    9600dee4:	91322294 	add	x20, x20, #0xc88
{
    9600dee8:	a90363f7 	stp	x23, x24, [sp, #48]
		dev->cmd.input[i] = TCA9539_INPUT * TCA9539_BANK_NUM + i;
    9600deec:	f2c0a099 	movk	x25, #0x504, lsl #32
    9600def0:	9100c298 	add	x24, x20, #0x30
{
    9600def4:	a9025bf5 	stp	x21, x22, [sp, #32]
		dev->cmd.input[i] = TCA9539_INPUT * TCA9539_BANK_NUM + i;
    9600def8:	f2e0e0d9 	movk	x25, #0x706, lsl #48
{
    9600defc:	f9002bfb 	str	x27, [sp, #80]
	uint32_t reg;
	uint32_t i;
	tegrabl_error_t ret = TEGRABL_NO_ERROR;

	for (i = 0; i < ARRAY_SIZE(tca9539_chips); i++) {
		device = tegrabl_calloc(1, sizeof(struct tca9539_chip));
    9600df00:	d2800501 	mov	x1, #0x28                  	// #40
    9600df04:	d2800020 	mov	x0, #0x1                   	// #1
    9600df08:	90000197 	adrp	x23, 9603d000 <__func__.3609+0x209>
    9600df0c:	940062ee 	bl	96026ac4 <tegrabl_calloc>
    9600df10:	aa0003f3 	mov	x19, x0
		if (device == NULL) {
    9600df14:	b50001e0 	cbnz	x0, 9600df50 <tegrabl_tca9539_init+0x88>
			pr_error("%s: failed to alloc memory!\n", __func__);
			return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9600df18:	52800076 	mov	w22, #0x3                   	// #3
			pr_error("%s: failed to alloc memory!\n", __func__);
    9600df1c:	91318ae1 	add	x1, x23, #0xc62
			return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9600df20:	72a9a9b6 	movk	w22, #0x4d4d, lsl #16
			pr_error("%s: failed to alloc memory!\n", __func__);
    9600df24:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600df28:	91357400 	add	x0, x0, #0xd5d
    9600df2c:	940051d1 	bl	96022670 <tegrabl_printf>
	if (device) {
		tegrabl_free(device);
	}

	return ret;
}
    9600df30:	2a1603e0 	mov	w0, w22
    9600df34:	f9402bfb 	ldr	x27, [sp, #80]
    9600df38:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600df3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600df40:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600df44:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600df48:	a8c87bfd 	ldp	x29, x30, [sp], #128
    9600df4c:	d65f03c0 	ret
		device->i2c_inst = tca9539_chips[i].i2c_inst;
    9600df50:	b9400682 	ldr	w2, [x20, #4]
		pr_info("%s: i2c bus: %d, slave addr: 0x%02x\n",
    9600df54:	91318af6 	add	x22, x23, #0xc62
		device->i2c_name = tca9539_chips[i].i2c_name;
    9600df58:	f9400a80 	ldr	x0, [x20, #16]
		pr_info("%s: i2c bus: %d, slave addr: 0x%02x\n",
    9600df5c:	aa1603e1 	mov	x1, x22
		device->i2c_inst = tca9539_chips[i].i2c_inst;
    9600df60:	b9000a62 	str	w2, [x19, #8]
		device->i2c_name = tca9539_chips[i].i2c_name;
    9600df64:	f9000a60 	str	x0, [x19, #16]
		pr_info("%s: i2c bus: %d, slave addr: 0x%02x\n",
    9600df68:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
		device->i2c_addr = reg << 1;
    9600df6c:	b9400a83 	ldr	w3, [x20, #8]
		pr_info("%s: i2c bus: %d, slave addr: 0x%02x\n",
    9600df70:	9135f400 	add	x0, x0, #0xd7d
		device->i2c_addr = reg << 1;
    9600df74:	531f7863 	lsl	w3, w3, #1
    9600df78:	b9001a63 	str	w3, [x19, #24]
		pr_info("%s: i2c bus: %d, slave addr: 0x%02x\n",
    9600df7c:	940051bd 	bl	96022670 <tegrabl_printf>
		driver = tegrabl_calloc(1, sizeof(struct gpio_driver));
    9600df80:	d2800601 	mov	x1, #0x30                  	// #48
    9600df84:	d2800020 	mov	x0, #0x1                   	// #1
    9600df88:	940062cf 	bl	96026ac4 <tegrabl_calloc>
    9600df8c:	aa0003f5 	mov	x21, x0
		if (driver == NULL) {
    9600df90:	b5000140 	cbnz	x0, 9600dfb8 <tegrabl_tca9539_init+0xf0>
			pr_error("%s: failed to alloc memory!\n", __func__);
    9600df94:	aa1603e1 	mov	x1, x22
			ret = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9600df98:	52800076 	mov	w22, #0x3                   	// #3
    9600df9c:	72a9a9b6 	movk	w22, #0x4d4d, lsl #16
			pr_error("%s: failed to alloc memory!\n", __func__);
    9600dfa0:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dfa4:	91357400 	add	x0, x0, #0xd5d
    9600dfa8:	940051b2 	bl	96022670 <tegrabl_printf>
		tegrabl_free(device);
    9600dfac:	aa1303e0 	mov	x0, x19
    9600dfb0:	940062c2 	bl	96026ab8 <tegrabl_free>
	return ret;
    9600dfb4:	17ffffdf 	b	9600df30 <tegrabl_tca9539_init+0x68>
		driver->chip_id = tca9539_chips[i].chip_id;
    9600dfb8:	b9400280 	ldr	w0, [x20]
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9600dfbc:	9101c3a1 	add	x1, x29, #0x70
		driver->chip_id = tca9539_chips[i].chip_id;
    9600dfc0:	b90006a0 	str	w0, [x21, #4]
		driver->name = TCA9539_GPIO_DRIVER_NAME;
    9600dfc4:	90000180 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600dfc8:	91369400 	add	x0, x0, #0xda5
    9600dfcc:	f90006a0 	str	x0, [x21, #8]
		driver->phandle = -1;
    9600dfd0:	12800000 	mov	w0, #0xffffffff            	// #-1
    9600dfd4:	b90002a0 	str	w0, [x21]
		driver->ops = &ops;
    9600dfd8:	900001e0 	adrp	x0, 96049000 <default_srgb_lut+0xa28>
		driver->driver_data = (void *)device;
    9600dfdc:	f9000ab3 	str	x19, [x21, #16]
		driver->ops = &ops;
    9600dfe0:	91306000 	add	x0, x0, #0xc18
    9600dfe4:	f90016a0 	str	x0, [x21, #40]
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9600dfe8:	52800000 	mov	w0, #0x0                   	// #0
	void *fdt = NULL;
    9600dfec:	f9003bbf 	str	xzr, [x29, #112]
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9600dff0:	94008b9a 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    9600dff4:	350003e0 	cbnz	w0, 9600e070 <tegrabl_tca9539_init+0x1a8>
			err = tegrabl_dt_get_node_with_compatible(fdt, i2c_node, compatible_chips[i],
    9600dff8:	9000019a 	adrp	x26, 9603d000 <__func__.3609+0x209>
    9600dffc:	9131e35a 	add	x26, x26, #0xc78
	if (err != TEGRABL_NO_ERROR) {
    9600e000:	d2800016 	mov	x22, #0x0                   	// #0
		err = tegrabl_dt_get_node_with_path(fdt, device->i2c_name, &i2c_node);
    9600e004:	f9400a61 	ldr	x1, [x19, #16]
    9600e008:	9101b3a2 	add	x2, x29, #0x6c
    9600e00c:	f9403ba0 	ldr	x0, [x29, #112]
    9600e010:	94008cdb 	bl	9603137c <tegrabl_dt_get_node_with_path>
		if (err != TEGRABL_NO_ERROR) {
    9600e014:	34000120 	cbz	w0, 9600e038 <tegrabl_tca9539_init+0x170>
			pr_error("%s: failed to get i2c node for tca9539\n", __func__);
    9600e018:	f0000161 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600e01c:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e020:	91311421 	add	x1, x1, #0xc45
    9600e024:	9136e400 	add	x0, x0, #0xdb9
				pr_error("%s: failed to get i2c address\n", __func__);
    9600e028:	94005192 	bl	96022670 <tegrabl_printf>
    9600e02c:	14000010 	b	9600e06c <tegrabl_tca9539_init+0x1a4>
	for (i = 0; i < ARRAY_SIZE(compatible_chips); i++) {
    9600e030:	d2800036 	mov	x22, #0x1                   	// #1
    9600e034:	17fffff4 	b	9600e004 <tegrabl_tca9539_init+0x13c>
			err = tegrabl_dt_get_node_with_compatible(fdt, i2c_node, compatible_chips[i],
    9600e038:	f8767b5b 	ldr	x27, [x26, x22, lsl #3]
    9600e03c:	b9406fa1 	ldr	w1, [x29, #108]
    9600e040:	9101a3a3 	add	x3, x29, #0x68
    9600e044:	f9403ba0 	ldr	x0, [x29, #112]
    9600e048:	aa1b03e2 	mov	x2, x27
    9600e04c:	94008cb8 	bl	9603132c <tegrabl_dt_get_node_with_compatible>
			if (err != TEGRABL_NO_ERROR) {
    9600e050:	34000220 	cbz	w0, 9600e094 <tegrabl_tca9539_init+0x1cc>
				pr_warn("%s: failed to get node with compatible %s\n", __func__,
    9600e054:	f0000161 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600e058:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e05c:	aa1b03e2 	mov	x2, x27
    9600e060:	91311421 	add	x1, x1, #0xc45
    9600e064:	91379000 	add	x0, x0, #0xde4
    9600e068:	94005182 	bl	96022670 <tegrabl_printf>
	for (i = 0; i < ARRAY_SIZE(compatible_chips); i++) {
    9600e06c:	b4fffe36 	cbz	x22, 9600e030 <tegrabl_tca9539_init+0x168>
			pr_warn("%s: failed to fetch phandle from dt\n", __func__);
    9600e070:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e074:	91318ae1 	add	x1, x23, #0xc62
    9600e078:	9138d000 	add	x0, x0, #0xe34
			pr_error("%s: failed to init device!\n", __func__);
    9600e07c:	9400517d 	bl	96022670 <tegrabl_printf>
    9600e080:	91006294 	add	x20, x20, #0x18
	for (i = 0; i < ARRAY_SIZE(tca9539_chips); i++) {
    9600e084:	eb14031f 	cmp	x24, x20
    9600e088:	54fff3c1 	b.ne	9600df00 <tegrabl_tca9539_init+0x38>  // b.any
	return TEGRABL_NO_ERROR;
    9600e08c:	52800016 	mov	w22, #0x0                   	// #0
    9600e090:	17ffffa8 	b	9600df30 <tegrabl_tca9539_init+0x68>
			err = tegrabl_dt_read_reg_by_index(fdt, node_itr, 0, &slave_addr, NULL);
    9600e094:	b9406ba1 	ldr	w1, [x29, #104]
    9600e098:	d2800004 	mov	x4, #0x0                   	// #0
    9600e09c:	f9403ba0 	ldr	x0, [x29, #112]
    9600e0a0:	9101e3a3 	add	x3, x29, #0x78
    9600e0a4:	52800002 	mov	w2, #0x0                   	// #0
    9600e0a8:	94008ae1 	bl	96030c2c <tegrabl_dt_read_reg_by_index>
			if (err != TEGRABL_NO_ERROR) {
    9600e0ac:	340000c0 	cbz	w0, 9600e0c4 <tegrabl_tca9539_init+0x1fc>
				pr_error("%s: failed to get i2c address\n", __func__);
    9600e0b0:	f0000161 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600e0b4:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e0b8:	91311421 	add	x1, x1, #0xc45
    9600e0bc:	91384800 	add	x0, x0, #0xe12
    9600e0c0:	17ffffda 	b	9600e028 <tegrabl_tca9539_init+0x160>
			if (slave_addr == (device->i2c_addr >> 1)) {
    9600e0c4:	b9401a60 	ldr	w0, [x19, #24]
			i2c_node = node_itr;
    9600e0c8:	b9406ba1 	ldr	w1, [x29, #104]
			if (slave_addr == (device->i2c_addr >> 1)) {
    9600e0cc:	f9403fa2 	ldr	x2, [x29, #120]
			i2c_node = node_itr;
    9600e0d0:	b9006fa1 	str	w1, [x29, #108]
			if (slave_addr == (device->i2c_addr >> 1)) {
    9600e0d4:	53017c00 	lsr	w0, w0, #1
    9600e0d8:	eb02001f 	cmp	x0, x2
    9600e0dc:	54fffb01 	b.ne	9600e03c <tegrabl_tca9539_init+0x174>  // b.any
				drv->phandle = fdt_get_phandle(fdt, node_itr);
    9600e0e0:	f9403ba0 	ldr	x0, [x29, #112]
    9600e0e4:	94008fdc 	bl	96032054 <fdt_get_phandle>
    9600e0e8:	b90002a0 	str	w0, [x21]
		dev->cmd.input[i] = TCA9539_INPUT * TCA9539_BANK_NUM + i;
    9600e0ec:	f801c279 	stur	x25, [x19, #28]
	dev->hi2cdev = tegrabl_i2c_dev_open(dev->i2c_inst, dev->i2c_addr,
    9600e0f0:	52800023 	mov	w3, #0x1                   	// #1
    9600e0f4:	b9400a60 	ldr	w0, [x19, #8]
    9600e0f8:	2a0303e2 	mov	w2, w3
    9600e0fc:	b9401a61 	ldr	w1, [x19, #24]
    9600e100:	9400043d 	bl	9600f1f4 <tegrabl_i2c_dev_open>
    9600e104:	f9000260 	str	x0, [x19]
	if (NULL == dev->hi2cdev) {
    9600e108:	b5000220 	cbnz	x0, 9600e14c <tegrabl_tca9539_init+0x284>
		pr_error("%s: failed to open i2c device!\n", __func__);
    9600e10c:	f0000161 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600e110:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e114:	9130c421 	add	x1, x1, #0xc31
    9600e118:	91397000 	add	x0, x0, #0xe5c
    9600e11c:	94005155 	bl	96022670 <tegrabl_printf>
		ret = tegrabl_gpio_driver_register(driver);
    9600e120:	aa1503e0 	mov	x0, x21
    9600e124:	97fffe36 	bl	9600d9fc <tegrabl_gpio_driver_register>
    9600e128:	2a0003f6 	mov	w22, w0
		if (ret != TEGRABL_NO_ERROR) {
    9600e12c:	34fffaa0 	cbz	w0, 9600e080 <tegrabl_tca9539_init+0x1b8>
			pr_error("%s: failed to register gpio driver!\n", __func__);
    9600e130:	91318ae1 	add	x1, x23, #0xc62
    9600e134:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e138:	913b9400 	add	x0, x0, #0xee5
    9600e13c:	9400514d 	bl	96022670 <tegrabl_printf>
		tegrabl_free(driver);
    9600e140:	aa1503e0 	mov	x0, x21
    9600e144:	9400625d 	bl	96026ab8 <tegrabl_free>
    9600e148:	17ffff99 	b	9600dfac <tegrabl_tca9539_init+0xe4>
    9600e14c:	91009a76 	add	x22, x19, #0x26
    9600e150:	9100a27a 	add	x26, x19, #0x28
		val = 0x00;
    9600e154:	3901e3bf 	strb	wzr, [x29, #120]
		ret = tegrabl_i2c_dev_write(dev->hi2cdev, &val, dev->cmd.polar[i],
    9600e158:	52800023 	mov	w3, #0x1                   	// #1
    9600e15c:	9101e3a1 	add	x1, x29, #0x78
    9600e160:	385fa2c2 	ldurb	w2, [x22, #-6]
    9600e164:	f9400260 	ldr	x0, [x19]
    9600e168:	940004f7 	bl	9600f544 <tegrabl_i2c_dev_write>
		if (ret != TEGRABL_NO_ERROR) {
    9600e16c:	34000140 	cbz	w0, 9600e194 <tegrabl_tca9539_init+0x2cc>
			pr_error("%s: failed to write polar reg\n", __func__);
    9600e170:	f0000161 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600e174:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e178:	9130c421 	add	x1, x1, #0xc31
    9600e17c:	9139fc00 	add	x0, x0, #0xe7f
			pr_error("%s: failed to read config reg\n", __func__);
    9600e180:	9400513c 	bl	96022670 <tegrabl_printf>
			pr_error("%s: failed to init device!\n", __func__);
    9600e184:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e188:	91318ae1 	add	x1, x23, #0xc62
    9600e18c:	913c3400 	add	x0, x0, #0xf0d
    9600e190:	17ffffbb 	b	9600e07c <tegrabl_tca9539_init+0x1b4>
		ret = tegrabl_i2c_dev_read(dev->hi2cdev, &dev->cache.output[i],
    9600e194:	385f82c2 	ldurb	w2, [x22, #-8]
    9600e198:	52800023 	mov	w3, #0x1                   	// #1
    9600e19c:	f9400260 	ldr	x0, [x19]
    9600e1a0:	d1000ac1 	sub	x1, x22, #0x2
    9600e1a4:	94000447 	bl	9600f2c0 <tegrabl_i2c_dev_read>
		if (ret != TEGRABL_NO_ERROR) {
    9600e1a8:	340000c0 	cbz	w0, 9600e1c0 <tegrabl_tca9539_init+0x2f8>
			pr_error("%s: failed to read output reg\n", __func__);
    9600e1ac:	f0000161 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600e1b0:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e1b4:	9130c421 	add	x1, x1, #0xc31
    9600e1b8:	913a8400 	add	x0, x0, #0xea1
    9600e1bc:	17fffff1 	b	9600e180 <tegrabl_tca9539_init+0x2b8>
		ret = tegrabl_i2c_dev_read(dev->hi2cdev, &dev->cache.config[i],
    9600e1c0:	385fc2c2 	ldurb	w2, [x22, #-4]
    9600e1c4:	52800023 	mov	w3, #0x1                   	// #1
    9600e1c8:	f9400260 	ldr	x0, [x19]
    9600e1cc:	aa1603e1 	mov	x1, x22
    9600e1d0:	9400043c 	bl	9600f2c0 <tegrabl_i2c_dev_read>
		if (ret != TEGRABL_NO_ERROR) {
    9600e1d4:	340000c0 	cbz	w0, 9600e1ec <tegrabl_tca9539_init+0x324>
			pr_error("%s: failed to read config reg\n", __func__);
    9600e1d8:	f0000161 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9600e1dc:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e1e0:	9130c421 	add	x1, x1, #0xc31
    9600e1e4:	913b0c00 	add	x0, x0, #0xec3
    9600e1e8:	17ffffe6 	b	9600e180 <tegrabl_tca9539_init+0x2b8>
    9600e1ec:	910006d6 	add	x22, x22, #0x1
	for (i = 0; i < TCA9539_BANK_NUM; i++) {
    9600e1f0:	eb16035f 	cmp	x26, x22
    9600e1f4:	54fff960 	b.eq	9600e120 <tegrabl_tca9539_init+0x258>  // b.none
    9600e1f8:	17ffffd7 	b	9600e154 <tegrabl_tca9539_init+0x28c>

000000009600e1fc <i2c_load_config.part.2>:
 *
 * @param hi2c i2c controller hi2c.
 *
 * @return TEGRABL_NO_ERROR if successful.
 */
static tegrabl_error_t i2c_load_config(struct tegrabl_i2c *hi2c)
    9600e1fc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9600e200:	910003fd 	mov	x29, sp
    9600e204:	a90153f3 	stp	x19, x20, [sp, #16]
    9600e208:	aa0003f4 	mov	x20, x0
    9600e20c:	52800293 	mov	w19, #0x14                  	// #20
	i2c_writel(hi2c, I2C_I2C_CONFIG_LOAD_0, val);

	config_clear = NV_DRF_DEF(I2C, I2C_CONFIG_LOAD, MSTR_CONFIG_LOAD, DISABLE);

	do {
		tegrabl_udelay((time_t)1);
    9600e210:	d2800020 	mov	x0, #0x1                   	// #1
    9600e214:	940046a4 	bl	9601fca4 <tegrabl_udelay>
		timeout--;
		if (timeout == 0UL) {
    9600e218:	71000673 	subs	w19, w19, #0x1
    9600e21c:	54000201 	b.ne	9600e25c <i2c_load_config.part.2+0x60>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_LOAD_CONFIG);
			TEGRABL_SET_ERROR_STRING(error, "load config", "0x%08x", val);
    9600e220:	528080c2 	mov	w2, #0x406                 	// #1030
    9600e224:	52800025 	mov	w5, #0x1                   	// #1
    9600e228:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600e22c:	2a0503e0 	mov	w0, w5
    9600e230:	9107fc84 	add	x4, x4, #0x1ff
    9600e234:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e238:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e23c:	913cb063 	add	x3, x3, #0xf2c
    9600e240:	52800041 	mov	w1, #0x2                   	// #2
    9600e244:	9400402f 	bl	9601e300 <tegrabl_error_print>
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_LOAD_CONFIG);
    9600e248:	528080c0 	mov	w0, #0x406                 	// #1030
    9600e24c:	72a4c4c0 	movk	w0, #0x2626, lsl #16
		val = NV_DRF_VAL(I2C, I2C_CONFIG_LOAD, MSTR_CONFIG_LOAD, val);
	} while (val != config_clear);

fail:
	return error;
}
    9600e250:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600e254:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600e258:	d65f03c0 	ret
	return NV_READ32(hi2c->base_addr + reg);
    9600e25c:	f9400e80 	ldr	x0, [x20, #24]
    9600e260:	b9408c00 	ldr	w0, [x0, #140]
	} while (val != config_clear);
    9600e264:	3707fd60 	tbnz	w0, #0, 9600e210 <i2c_load_config.part.2+0x14>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9600e268:	52800000 	mov	w0, #0x0                   	// #0
    9600e26c:	17fffff9 	b	9600e250 <i2c_load_config.part.2+0x54>

000000009600e270 <i2c_wait_for_transfer_complete>:
 * @param hi2c i2c controller hi2c.
 *
 * @return TEGRABL_NO_ERROR if success, error code if fails.
 */
static tegrabl_error_t i2c_wait_for_transfer_complete(struct tegrabl_i2c *hi2c)
{
    9600e270:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600e274:	910003fd 	mov	x29, sp
    9600e278:	a90153f3 	stp	x19, x20, [sp, #16]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	time_t timeout;
	uint32_t val = 0;
    9600e27c:	52800013 	mov	w19, #0x0                   	// #0

	pr_trace("%s: entry\n", __func__);

	TEGRABL_ASSERT(hi2c != NULL);

	timeout = hi2c->xfer_timeout;
    9600e280:	f9402414 	ldr	x20, [x0, #72]
{
    9600e284:	f90013f5 	str	x21, [sp, #32]
    9600e288:	aa0003f5 	mov	x21, x0
	do {
		tegrabl_udelay((time_t)1);
    9600e28c:	d2800020 	mov	x0, #0x1                   	// #1
    9600e290:	94004685 	bl	9601fca4 <tegrabl_udelay>
		timeout--;
		if (timeout == 0ULL) {
    9600e294:	f1000694 	subs	x20, x20, #0x1
    9600e298:	54000221 	b.ne	9600e2dc <i2c_wait_for_transfer_complete+0x6c>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_WAIT_FOR_TRANSFER_COMPLETE);
			TEGRABL_SET_ERROR_STRING(error, "transfer complete", "0x%08x", val);
    9600e29c:	5280e0c2 	mov	w2, #0x706                 	// #1798
    9600e2a0:	52800020 	mov	w0, #0x1                   	// #1
    9600e2a4:	2a1303e5 	mov	w5, w19
    9600e2a8:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600e2ac:	b0000183 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9600e2b0:	9107fc84 	add	x4, x4, #0x1ff
    9600e2b4:	91140463 	add	x3, x3, #0x501
    9600e2b8:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e2bc:	52800041 	mov	w1, #0x2                   	// #2
    9600e2c0:	94004010 	bl	9601e300 <tegrabl_error_print>
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_WAIT_FOR_TRANSFER_COMPLETE);
    9600e2c4:	5280e0c0 	mov	w0, #0x706                 	// #1798
			goto fail;
		} else if (NV_DRF_VAL(I2C, INTERRUPT_STATUS_REGISTER, NOACK, val)
					!= 0U) {
			error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND,
					I2C_WAIT_FOR_TRANSFER_COMPLETE);
			TEGRABL_SET_ERROR_STRING(error, "slave", "slaves");
    9600e2c8:	72a4c4c0 	movk	w0, #0x2626, lsl #16
		}
	} while (true);

fail:
	return error;
}
    9600e2cc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600e2d0:	f94013f5 	ldr	x21, [sp, #32]
    9600e2d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600e2d8:	d65f03c0 	ret
	return NV_READ32(hi2c->base_addr + reg);
    9600e2dc:	f9400ea0 	ldr	x0, [x21, #24]
    9600e2e0:	b9406813 	ldr	w19, [x0, #104]
		if (NV_DRF_VAL(I2C, INTERRUPT_STATUS_REGISTER, PACKET_XFER_COMPLETE,
    9600e2e4:	373802f3 	tbnz	w19, #7, 9600e340 <i2c_wait_for_transfer_complete+0xd0>
		} else if (NV_DRF_VAL(I2C, INTERRUPT_STATUS_REGISTER, ARB_LOST, val)
    9600e2e8:	36100153 	tbz	w19, #2, 9600e310 <i2c_wait_for_transfer_complete+0xa0>
			TEGRABL_SET_ERROR_STRING(error, "bus");
    9600e2ec:	5280e182 	mov	w2, #0x70c                 	// #1804
    9600e2f0:	52800020 	mov	w0, #0x1                   	// #1
    9600e2f4:	d0000183 	adrp	x3, 96040000 <sdmmc_base_addr+0x9f4>
    9600e2f8:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e2fc:	9120d063 	add	x3, x3, #0x834
    9600e300:	52800041 	mov	w1, #0x2                   	// #2
    9600e304:	94003fff 	bl	9601e300 <tegrabl_error_print>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_ACCESS,
    9600e308:	5280e180 	mov	w0, #0x70c                 	// #1804
    9600e30c:	17ffffef 	b	9600e2c8 <i2c_wait_for_transfer_complete+0x58>
		} else if (NV_DRF_VAL(I2C, INTERRUPT_STATUS_REGISTER, NOACK, val)
    9600e310:	361ffbf3 	tbz	w19, #3, 9600e28c <i2c_wait_for_transfer_complete+0x1c>
			TEGRABL_SET_ERROR_STRING(error, "slave", "slaves");
    9600e314:	5280e1a2 	mov	w2, #0x70d                 	// #1805
    9600e318:	52800020 	mov	w0, #0x1                   	// #1
    9600e31c:	f0000164 	adrp	x4, 9603d000 <__func__.3609+0x209>
    9600e320:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e324:	913d1c84 	add	x4, x4, #0xf47
    9600e328:	913d3863 	add	x3, x3, #0xf4e
    9600e32c:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e330:	52800041 	mov	w1, #0x2                   	// #2
    9600e334:	94003ff3 	bl	9601e300 <tegrabl_error_print>
    9600e338:	5280e1a0 	mov	w0, #0x70d                 	// #1805
    9600e33c:	17ffffe3 	b	9600e2c8 <i2c_wait_for_transfer_complete+0x58>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9600e340:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    9600e344:	17ffffe2 	b	9600e2cc <i2c_wait_for_transfer_complete+0x5c>

000000009600e348 <i2c_send_header>:
	i2c_writel(hi2c, I2C_I2C_CNFG_0, val);
    9600e348:	f9400c05 	ldr	x5, [x0, #24]
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e34c:	52808006 	mov	w6, #0x400                 	// #1024
		length--;
    9600e350:	7100009f 	cmp	w4, #0x0
{
    9600e354:	12001c21 	and	w1, w1, #0xff
	val = slave_address & PACKET_HEADER_SLAVE_ADDRESS_MASK;
    9600e358:	12002463 	and	w3, w3, #0x3ff
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e35c:	b90000a6 	str	w6, [x5]
	return NV_READ32(hi2c->base_addr + reg);
    9600e360:	b94068a6 	ldr	w6, [x5, #104]
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e364:	b90068a6 	str	w6, [x5, #104]
	val |= ((hi2c->instance) << PACKET_HEADER_CONTROLLER_ID_SHIFT);
    9600e368:	b9401406 	ldr	w6, [x0, #20]
    9600e36c:	53144cc6 	lsl	w6, w6, #12
    9600e370:	321c00c6 	orr	w6, w6, #0x10
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e374:	b90050a6 	str	w6, [x5, #80]
		length--;
    9600e378:	1a9f07e6 	cset	w6, ne  // ne = any
	if (is_write == false) {
    9600e37c:	72001c5f 	tst	w2, #0xff
		length--;
    9600e380:	4b060084 	sub	w4, w4, w6
	val = length & 0xFFFUL;
    9600e384:	12002c84 	and	w4, w4, #0xfff
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e388:	b90050a4 	str	w4, [x5, #80]
	if (is_write == false) {
    9600e38c:	54000041 	b.ne	9600e394 <i2c_send_header+0x4c>  // b.any
		val |= PACKET_HEADER_READ_MODE;
    9600e390:	320d0063 	orr	w3, w3, #0x80000
	if (repeat_start) {
    9600e394:	34000041 	cbz	w1, 9600e39c <i2c_send_header+0x54>
		val |= PACKET_HEADER_REPEAT_START;
    9600e398:	32100063 	orr	w3, w3, #0x10000
	if (hi2c->clk_freq >= HS_SPEED) {
    9600e39c:	b9402801 	ldr	w1, [x0, #40]
    9600e3a0:	71351c3f 	cmp	w1, #0xd47
    9600e3a4:	54000049 	b.ls	9600e3ac <i2c_send_header+0x64>  // b.plast
		val |= PACKET_HEADER_HS_MODE;
    9600e3a8:	320a0063 	orr	w3, w3, #0x400000
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e3ac:	b90050a3 	str	w3, [x5, #80]
    9600e3b0:	52800021 	mov	w1, #0x1                   	// #1
    9600e3b4:	b9008ca1 	str	w1, [x5, #140]
    9600e3b8:	17ffff91 	b	9600e1fc <i2c_load_config.part.2>

000000009600e3bc <i2c_reset_controller>:
{
    9600e3bc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600e3c0:	910003fd 	mov	x29, sp
	if (hi2c->is_enable_bpmpfw_i2c == true) {
    9600e3c4:	39408401 	ldrb	w1, [x0, #33]
{
    9600e3c8:	a90153f3 	stp	x19, x20, [sp, #16]
	if (hi2c->is_enable_bpmpfw_i2c == true) {
    9600e3cc:	35000ae1 	cbnz	w1, 9600e528 <i2c_reset_controller+0x16c>
    9600e3d0:	aa0003f4 	mov	x20, x0
	err = tegrabl_car_rst_set(hi2c->module_id, (uint8_t)hi2c->instance);
    9600e3d4:	39405001 	ldrb	w1, [x0, #20]
    9600e3d8:	b9402400 	ldr	w0, [x0, #36]
    9600e3dc:	940045a9 	bl	9601fa80 <tegrabl_car_rst_set>
	if (err != TEGRABL_NO_ERROR) {
    9600e3e0:	34000100 	cbz	w0, 9600e400 <i2c_reset_controller+0x44>
    9600e3e4:	12005c00 	and	w0, w0, #0xffffff
    9600e3e8:	52a4c013 	mov	w19, #0x26000000            	// #637534208
    9600e3ec:	2a130013 	orr	w19, w0, w19
}
    9600e3f0:	2a1303e0 	mov	w0, w19
    9600e3f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600e3f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600e3fc:	d65f03c0 	ret
	err = tegrabl_car_set_clk_src(hi2c->module_id, (uint8_t)hi2c->instance, TEGRABL_CLK_SRC_PLLP_OUT0);
    9600e400:	39405281 	ldrb	w1, [x20, #20]
    9600e404:	52800062 	mov	w2, #0x3                   	// #3
    9600e408:	b9402680 	ldr	w0, [x20, #36]
    9600e40c:	940044cf 	bl	9601f748 <tegrabl_car_set_clk_src>
	if (err != TEGRABL_NO_ERROR) {
    9600e410:	35fffea0 	cbnz	w0, 9600e3e4 <i2c_reset_controller+0x28>
	source_rate = tegrabl_i2c_get_clk_source_rate(hi2c);
    9600e414:	aa1403e0 	mov	x0, x20
    9600e418:	94000319 	bl	9600f07c <tegrabl_i2c_get_clk_source_rate>
    9600e41c:	9100c3a3 	add	x3, x29, #0x30
	err = tegrabl_car_set_clk_rate(hi2c->module_id, (uint8_t)hi2c->instance, source_rate, &source_rate);
    9600e420:	2a0003e2 	mov	w2, w0
    9600e424:	39405281 	ldrb	w1, [x20, #20]
	source_rate = tegrabl_i2c_get_clk_source_rate(hi2c);
    9600e428:	b81fcc60 	str	w0, [x3, #-4]!
	err = tegrabl_car_set_clk_rate(hi2c->module_id, (uint8_t)hi2c->instance, source_rate, &source_rate);
    9600e42c:	b9402680 	ldr	w0, [x20, #36]
    9600e430:	94004577 	bl	9601fa0c <tegrabl_car_set_clk_rate>
	if (err != TEGRABL_NO_ERROR) {
    9600e434:	35fffd80 	cbnz	w0, 9600e3e4 <i2c_reset_controller+0x28>
	if (source_rate == 0UL) {
    9600e438:	b9402fa0 	ldr	w0, [x29, #44]
    9600e43c:	35000160 	cbnz	w0, 9600e468 <i2c_reset_controller+0xac>
		TEGRABL_PRINT_ERROR_STRING(err, "source rate %d", source_rate);
    9600e440:	52820042 	mov	w2, #0x1002                	// #4098
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, I2C_RESET_CONTROLLER);
    9600e444:	52820053 	mov	w19, #0x1002                	// #4098
		TEGRABL_PRINT_ERROR_STRING(err, "source rate %d", source_rate);
    9600e448:	52800004 	mov	w4, #0x0                   	// #0
    9600e44c:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e450:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e454:	913ce063 	add	x3, x3, #0xf38
    9600e458:	52800041 	mov	w1, #0x2                   	// #2
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, I2C_RESET_CONTROLLER);
    9600e45c:	72a4c4d3 	movk	w19, #0x2626, lsl #16
		TEGRABL_PRINT_ERROR_STRING(err, "source rate %d", source_rate);
    9600e460:	94003fa8 	bl	9601e300 <tegrabl_error_print>
    9600e464:	17ffffe3 	b	9600e3f0 <i2c_reset_controller+0x34>
	err = tegrabl_car_rst_clear(hi2c->module_id, (uint8_t)hi2c->instance);
    9600e468:	39405281 	ldrb	w1, [x20, #20]
    9600e46c:	b9402680 	ldr	w0, [x20, #36]
    9600e470:	9400458b 	bl	9601fa9c <tegrabl_car_rst_clear>
    9600e474:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9600e478:	340000a0 	cbz	w0, 9600e48c <i2c_reset_controller+0xd0>
    9600e47c:	12005c13 	and	w19, w0, #0xffffff
    9600e480:	52a4c001 	mov	w1, #0x26000000            	// #637534208
    9600e484:	2a010273 	orr	w19, w19, w1
    9600e488:	17ffffda 	b	9600e3f0 <i2c_reset_controller+0x34>
	tegrabl_udelay(5);
    9600e48c:	d28000a0 	mov	x0, #0x5                   	// #5
    9600e490:	94004605 	bl	9601fca4 <tegrabl_udelay>
	i2c_set_prod_settings(hi2c);
    9600e494:	aa1403e0 	mov	x0, x20
    9600e498:	94000326 	bl	9600f130 <i2c_set_prod_settings>
	if (hi2c->clk_freq < HS_SPEED) {
    9600e49c:	b9402a85 	ldr	w5, [x20, #40]
    9600e4a0:	b9402fa0 	ldr	w0, [x29, #44]
    9600e4a4:	71351cbf 	cmp	w5, #0xd47
    9600e4a8:	f9400e83 	ldr	x3, [x20, #24]
    9600e4ac:	54000208 	b.hi	9600e4ec <i2c_reset_controller+0x130>  // b.pmore
	return NV_READ32(hi2c->base_addr + reg);
    9600e4b0:	b9409462 	ldr	w2, [x3, #148]
		thigh = NV_DRF_VAL(I2C, I2C_INTERFACE_TIMING_0, THIGH, reg);
    9600e4b4:	d3483444 	ubfx	x4, x2, #8, #6
		tlow = NV_DRF_VAL(I2C, I2C_INTERFACE_TIMING_0, TLOW, reg);
    9600e4b8:	12001442 	and	w2, w2, #0x3f
	divisor = (tlow + thigh + 2UL) * freq_out;
    9600e4bc:	11000842 	add	w2, w2, #0x2
    9600e4c0:	0b020082 	add	w2, w4, w2
    9600e4c4:	1b057c42 	mul	w2, w2, w5
	clk_divisor = freq_in / divisor;
    9600e4c8:	1ac20800 	udiv	w0, w0, w2
		clk_divisor--;
    9600e4cc:	7100041f 	cmp	w0, #0x1
    9600e4d0:	1a9f97e1 	cset	w1, hi  // hi = pmore
    9600e4d4:	4b010000 	sub	w0, w0, w1
	return NV_READ32(hi2c->base_addr + reg);
    9600e4d8:	b9406c61 	ldr	w1, [x3, #108]
		reg = NV_FLD_SET_DRF_NUM(I2C, I2C_CLK_DIVISOR_REGISTER,
    9600e4dc:	12003c21 	and	w1, w1, #0xffff
    9600e4e0:	2a004020 	orr	w0, w1, w0, lsl #16
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e4e4:	b9006c60 	str	w0, [x3, #108]
    9600e4e8:	17ffffc2 	b	9600e3f0 <i2c_reset_controller+0x34>
	return NV_READ32(hi2c->base_addr + reg);
    9600e4ec:	b9409c61 	ldr	w1, [x3, #156]
		thigh = NV_DRF_VAL(I2C, I2C_HS_INTERFACE_TIMING_0, HS_THIGH, reg);
    9600e4f0:	d3483424 	ubfx	x4, x1, #8, #6
		tlow = NV_DRF_VAL(I2C, I2C_HS_INTERFACE_TIMING_0, HS_TLOW, reg);
    9600e4f4:	12001421 	and	w1, w1, #0x3f
	divisor = (tlow + thigh + 2UL) * freq_out;
    9600e4f8:	11000821 	add	w1, w1, #0x2
    9600e4fc:	0b010081 	add	w1, w4, w1
    9600e500:	1b057c21 	mul	w1, w1, w5
	clk_divisor = freq_in / divisor;
    9600e504:	1ac10800 	udiv	w0, w0, w1
		clk_divisor--;
    9600e508:	7100041f 	cmp	w0, #0x1
    9600e50c:	1a9f97e1 	cset	w1, hi  // hi = pmore
    9600e510:	4b010000 	sub	w0, w0, w1
	return NV_READ32(hi2c->base_addr + reg);
    9600e514:	b9406c61 	ldr	w1, [x3, #108]
		reg = NV_FLD_SET_DRF_NUM(I2C, I2C_CLK_DIVISOR_REGISTER, I2C_CLK_DIVISOR_HSMODE, i2c_clk_divisor, reg);
    9600e518:	12003c00 	and	w0, w0, #0xffff
    9600e51c:	12103c21 	and	w1, w1, #0xffff0000
    9600e520:	2a000020 	orr	w0, w1, w0
    9600e524:	17fffff0 	b	9600e4e4 <i2c_reset_controller+0x128>
		return TEGRABL_NO_ERROR;
    9600e528:	52800013 	mov	w19, #0x0                   	// #0
    9600e52c:	17ffffb1 	b	9600e3f0 <i2c_reset_controller+0x34>

000000009600e530 <tegrabl_i2c_set_bus_freq_info>:
{
    9600e530:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	if ((num == 0U) || (freq == NULL)) {
    9600e534:	7100003f 	cmp	w1, #0x0
    9600e538:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
{
    9600e53c:	910003fd 	mov	x29, sp
    9600e540:	a90153f3 	stp	x19, x20, [sp, #16]
    9600e544:	aa0003f4 	mov	x20, x0
    9600e548:	2a0103f3 	mov	w19, w1
	if ((num == 0U) || (freq == NULL)) {
    9600e54c:	540001e1 	b.ne	9600e588 <tegrabl_i2c_set_bus_freq_info+0x58>  // b.any
		TEGRABL_SET_ERROR_STRING(error, "instance : %d, freq: %p", num, freq);
    9600e550:	52806542 	mov	w2, #0x32a                 	// #810
    9600e554:	aa0003e5 	mov	x5, x0
    9600e558:	2a0103e4 	mov	w4, w1
    9600e55c:	52800020 	mov	w0, #0x1                   	// #1
    9600e560:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600e564:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e568:	9100ec63 	add	x3, x3, #0x3b
    9600e56c:	52800041 	mov	w1, #0x2                   	// #2
    9600e570:	94003f64 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER,
    9600e574:	52806540 	mov	w0, #0x32a                 	// #810
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW,
    9600e578:	72a4c4c0 	movk	w0, #0x2626, lsl #16
}
    9600e57c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600e580:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600e584:	d65f03c0 	ret
	i2c_get_soc_info(&hi2c_info, &num_of_instances);
    9600e588:	910093a1 	add	x1, x29, #0x24
    9600e58c:	9100a3a0 	add	x0, x29, #0x28
    9600e590:	940002b5 	bl	9600f064 <i2c_get_soc_info>
	if (num > num_of_instances) {
    9600e594:	b94027a6 	ldr	w6, [x29, #36]
    9600e598:	6b1300df 	cmp	w6, w19
    9600e59c:	54000182 	b.cs	9600e5cc <tegrabl_i2c_set_bus_freq_info+0x9c>  // b.hs, b.nlast
		TEGRABL_SET_ERROR_STRING(error, "instance %d", "instance %d", num, num_of_instances);
    9600e5a0:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600e5a4:	52806082 	mov	w2, #0x304                 	// #772
    9600e5a8:	9108f884 	add	x4, x4, #0x23e
    9600e5ac:	52800020 	mov	w0, #0x1                   	// #1
    9600e5b0:	2a1303e5 	mov	w5, w19
    9600e5b4:	aa0403e3 	mov	x3, x4
    9600e5b8:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e5bc:	52800041 	mov	w1, #0x2                   	// #2
    9600e5c0:	94003f50 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW,
    9600e5c4:	52806080 	mov	w0, #0x304                 	// #772
    9600e5c8:	17ffffec 	b	9600e578 <tegrabl_i2c_set_bus_freq_info+0x48>
    9600e5cc:	51000673 	sub	w19, w19, #0x1
		hi2c_info[num].clk_freq = (freq[num] != 0UL) ? freq[num] : STD_SPEED;
    9600e5d0:	f94017a4 	ldr	x4, [x29, #40]
    9600e5d4:	91000663 	add	x3, x19, #0x1
    9600e5d8:	d2800001 	mov	x1, #0x0                   	// #0
    9600e5dc:	8b130a94 	add	x20, x20, x19, lsl #2
    9600e5e0:	d37cee73 	lsl	x19, x19, #4
    9600e5e4:	92800067 	mov	x7, #0xfffffffffffffffc    	// #-4
    9600e5e8:	52800c86 	mov	w6, #0x64                  	// #100
    9600e5ec:	928001e5 	mov	x5, #0xfffffffffffffff0    	// #-16
    9600e5f0:	9b077c20 	mul	x0, x1, x7
    9600e5f4:	9b054c22 	madd	x2, x1, x5, x19
    9600e5f8:	91000421 	add	x1, x1, #0x1
    9600e5fc:	8b020082 	add	x2, x4, x2
    9600e600:	b8606a80 	ldr	w0, [x20, x0]
    9600e604:	7100001f 	cmp	w0, #0x0
    9600e608:	1a861000 	csel	w0, w0, w6, ne  // ne = any
    9600e60c:	b9000440 	str	w0, [x2, #4]
	while (num > 0UL) {
    9600e610:	eb03003f 	cmp	x1, x3
    9600e614:	54fffee1 	b.ne	9600e5f0 <tegrabl_i2c_set_bus_freq_info+0xc0>  // b.any
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9600e618:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    9600e61c:	17ffffd8 	b	9600e57c <tegrabl_i2c_set_bus_freq_info+0x4c>

000000009600e620 <tegrabl_i2c_register>:
    9600e620:	90000301 	adrp	x1, 9606e000 <__bss_start>
    9600e624:	91138020 	add	x0, x1, #0x4e0
    9600e628:	f9027020 	str	x0, [x1, #1248]
    9600e62c:	f9000400 	str	x0, [x0, #8]
}
    9600e630:	52800000 	mov	w0, #0x0                   	// #0
    9600e634:	d65f03c0 	ret

000000009600e638 <tegrabl_i2c_lookup>:

tegrabl_error_t tegrabl_i2c_lookup(uintptr_t base, tegrabl_instance_i2c_t *instance)
{
    9600e638:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600e63c:	910003fd 	mov	x29, sp
    9600e640:	a90153f3 	stp	x19, x20, [sp, #16]
    9600e644:	aa0103f4 	mov	x20, x1
	struct i2c_soc_info *info;
	uint32_t num = 0, i;
    9600e648:	9100c3a1 	add	x1, x29, #0x30
{
    9600e64c:	aa0003f3 	mov	x19, x0

	i2c_get_soc_info(&info, &num);
    9600e650:	9100a3a0 	add	x0, x29, #0x28
	uint32_t num = 0, i;
    9600e654:	b81f4c3f 	str	wzr, [x1, #-12]!
	i2c_get_soc_info(&info, &num);
    9600e658:	94000283 	bl	9600f064 <i2c_get_soc_info>

	for (i = 0; i < num; i++) {
    9600e65c:	b94027a1 	ldr	w1, [x29, #36]
    9600e660:	d2800000 	mov	x0, #0x0                   	// #0
		if (info[i].base_addr == base) {
    9600e664:	f94017a3 	ldr	x3, [x29, #40]
    9600e668:	2a0003e2 	mov	w2, w0
	for (i = 0; i < num; i++) {
    9600e66c:	6b00003f 	cmp	w1, w0
    9600e670:	54000068 	b.hi	9600e67c <tegrabl_i2c_lookup+0x44>  // b.pmore
			*instance = i;
			return TEGRABL_NO_ERROR;
		}
	}

	return TEGRABL_ERR_NOT_FOUND;
    9600e674:	528001a0 	mov	w0, #0xd                   	// #13
    9600e678:	14000008 	b	9600e698 <tegrabl_i2c_lookup+0x60>
		if (info[i].base_addr == base) {
    9600e67c:	d37cec04 	lsl	x4, x0, #4
    9600e680:	91000400 	add	x0, x0, #0x1
    9600e684:	b8646864 	ldr	w4, [x3, x4]
    9600e688:	eb13009f 	cmp	x4, x19
    9600e68c:	54fffee1 	b.ne	9600e668 <tegrabl_i2c_lookup+0x30>  // b.any
			return TEGRABL_NO_ERROR;
    9600e690:	52800000 	mov	w0, #0x0                   	// #0
			*instance = i;
    9600e694:	b9000282 	str	w2, [x20]
}
    9600e698:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600e69c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600e6a0:	d65f03c0 	ret

000000009600e6a4 <tegrabl_i2c_bus_clear>:

	return error;
}

tegrabl_error_t tegrabl_i2c_bus_clear(struct tegrabl_i2c *hi2c)
{
    9600e6a4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600e6a8:	910003fd 	mov	x29, sp
    9600e6ac:	a90153f3 	stp	x19, x20, [sp, #16]
    9600e6b0:	f90013f5 	str	x21, [sp, #32]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint32_t val = 0;
	uint32_t timeout = I2C_TIMEOUT;

	if (hi2c == NULL) {
    9600e6b4:	b5000200 	cbnz	x0, 9600e6f4 <tegrabl_i2c_bus_clear+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_I2C_BUS_CLEAR);
		TEGRABL_SET_ERROR_STRING(error, "hi2c: %p", hi2c);
		return error;
    9600e6b8:	5281a554 	mov	w20, #0xd2a                 	// #3370
		TEGRABL_SET_ERROR_STRING(error, "hi2c: %p", hi2c);
    9600e6bc:	5281a542 	mov	w2, #0xd2a                 	// #3370
		return error;
    9600e6c0:	72a4c4d4 	movk	w20, #0x2626, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "hi2c: %p", hi2c);
    9600e6c4:	d2800004 	mov	x4, #0x0                   	// #0
    9600e6c8:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e6cc:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e6d0:	913d5063 	add	x3, x3, #0xf54
    9600e6d4:	52800041 	mov	w1, #0x2                   	// #2
    9600e6d8:	52800020 	mov	w0, #0x1                   	// #1
    9600e6dc:	94003f09 	bl	9601e300 <tegrabl_error_print>
	if (error != TEGRABL_NO_ERROR) {
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_CLEAR_FAILED, "bus", "instance %d", hi2c->instance);
		(void)i2c_reset_controller(hi2c);
	}
	return error;
}
    9600e6e0:	2a1403e0 	mov	w0, w20
    9600e6e4:	f94013f5 	ldr	x21, [sp, #32]
    9600e6e8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600e6ec:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600e6f0:	d65f03c0 	ret
	if (hi2c->is_bpmpfw_controlled == true) {
    9600e6f4:	39408001 	ldrb	w1, [x0, #32]
    9600e6f8:	aa0003f3 	mov	x19, x0
    9600e6fc:	34000061 	cbz	w1, 9600e708 <tegrabl_i2c_bus_clear+0x64>
		return TEGRABL_NO_ERROR;
    9600e700:	52800014 	mov	w20, #0x0                   	// #0
    9600e704:	17fffff7 	b	9600e6e0 <tegrabl_i2c_bus_clear+0x3c>
	i2c_writel(hi2c, I2C_I2C_BUS_CLEAR_CONFIG_0, val);
    9600e708:	f9400c01 	ldr	x1, [x0, #24]
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e70c:	52800042 	mov	w2, #0x2                   	// #2
    9600e710:	72a00122 	movk	w2, #0x9, lsl #16
    9600e714:	b9008422 	str	w2, [x1, #132]
    9600e718:	52800022 	mov	w2, #0x1                   	// #1
    9600e71c:	b9008c22 	str	w2, [x1, #140]
    9600e720:	97fffeb7 	bl	9600e1fc <i2c_load_config.part.2>
    9600e724:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    9600e728:	340002a0 	cbz	w0, 9600e77c <tegrabl_i2c_bus_clear+0xd8>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "config");
    9600e72c:	52800242 	mov	w2, #0x12                  	// #18
    9600e730:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e734:	72a004c2 	movk	w2, #0x26, lsl #16
    9600e738:	913cc463 	add	x3, x3, #0xf31
    9600e73c:	52800041 	mov	w1, #0x2                   	// #2
    9600e740:	52800000 	mov	w0, #0x0                   	// #0
    9600e744:	94003eef 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_CLEAR_FAILED, "bus", "instance %d", hi2c->instance);
    9600e748:	b9401665 	ldr	w5, [x19, #20]
    9600e74c:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600e750:	d0000183 	adrp	x3, 96040000 <sdmmc_base_addr+0x9f4>
    9600e754:	9108f884 	add	x4, x4, #0x23e
    9600e758:	9120d063 	add	x3, x3, #0x834
    9600e75c:	52800642 	mov	w2, #0x32                  	// #50
    9600e760:	72a004c2 	movk	w2, #0x26, lsl #16
    9600e764:	52800041 	mov	w1, #0x2                   	// #2
    9600e768:	52800000 	mov	w0, #0x0                   	// #0
    9600e76c:	94003ee5 	bl	9601e300 <tegrabl_error_print>
		(void)i2c_reset_controller(hi2c);
    9600e770:	aa1303e0 	mov	x0, x19
    9600e774:	97ffff12 	bl	9600e3bc <i2c_reset_controller>
    9600e778:	17ffffda 	b	9600e6e0 <tegrabl_i2c_bus_clear+0x3c>
	return NV_READ32(hi2c->base_addr + reg);
    9600e77c:	f9400e60 	ldr	x0, [x19, #24]
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e780:	52803e95 	mov	w21, #0x1f4                 	// #500
	return NV_READ32(hi2c->base_addr + reg);
    9600e784:	b9408414 	ldr	w20, [x0, #132]
	val = NV_FLD_SET_DRF_NUM(I2C, I2C_BUS_CLEAR_CONFIG, BC_ENABLE, 1, val);
    9600e788:	32000294 	orr	w20, w20, #0x1
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e78c:	b9008414 	str	w20, [x0, #132]
		tegrabl_udelay((time_t)1);
    9600e790:	d2800020 	mov	x0, #0x1                   	// #1
    9600e794:	94004544 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0UL) {
    9600e798:	710006b5 	subs	w21, w21, #0x1
    9600e79c:	540001c1 	b.ne	9600e7d4 <tegrabl_i2c_bus_clear+0x130>  // b.any
			TEGRABL_SET_ERROR_STRING(error, "bus clear", "0x%08x", val);
    9600e7a0:	2a1403e5 	mov	w5, w20
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_I2C_BUS_CLEAR);
    9600e7a4:	5281a0d4 	mov	w20, #0xd06                 	// #3334
			TEGRABL_SET_ERROR_STRING(error, "bus clear", "0x%08x", val);
    9600e7a8:	5281a0c2 	mov	w2, #0xd06                 	// #3334
    9600e7ac:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600e7b0:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e7b4:	9107fc84 	add	x4, x4, #0x1ff
    9600e7b8:	913d7463 	add	x3, x3, #0xf5d
    9600e7bc:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e7c0:	52800041 	mov	w1, #0x2                   	// #2
    9600e7c4:	52800020 	mov	w0, #0x1                   	// #1
    9600e7c8:	94003ece 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_CONDITION, TEGRABL_I2C_BUS_CLEAR);
    9600e7cc:	72a4c4d4 	movk	w20, #0x2626, lsl #16
    9600e7d0:	17ffffde 	b	9600e748 <tegrabl_i2c_bus_clear+0xa4>
		val = i2c_readl(hi2c, I2C_INTERRUPT_STATUS_REGISTER_0);
    9600e7d4:	f9400e60 	ldr	x0, [x19, #24]
	return NV_READ32(hi2c->base_addr + reg);
    9600e7d8:	b9406814 	ldr	w20, [x0, #104]
				!= 1U);
    9600e7dc:	365ffdb4 	tbz	w20, #11, 9600e790 <tegrabl_i2c_bus_clear+0xec>
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600e7e0:	b9006814 	str	w20, [x0, #104]
	return NV_READ32(hi2c->base_addr + reg);
    9600e7e4:	b9408800 	ldr	w0, [x0, #136]
	if (NV_DRF_VAL(I2C, I2C_BUS_CLEAR_STATUS, BC_STATUS, val) != 1U) {
    9600e7e8:	3707f8c0 	tbnz	w0, #0, 9600e700 <tegrabl_i2c_bus_clear+0x5c>
		TEGRABL_SET_ERROR_STRING(error, "bus clear");
    9600e7ec:	5281a5c2 	mov	w2, #0xd2e                 	// #3374
    9600e7f0:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e7f4:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e7f8:	913d7463 	add	x3, x3, #0xf5d
    9600e7fc:	52800041 	mov	w1, #0x2                   	// #2
    9600e800:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_CONDITION, TEGRABL_I2C_BUS_CLEAR);
    9600e804:	5281a5d4 	mov	w20, #0xd2e                 	// #3374
		TEGRABL_SET_ERROR_STRING(error, "bus clear");
    9600e808:	94003ebe 	bl	9601e300 <tegrabl_error_print>
    9600e80c:	17fffff0 	b	9600e7cc <tegrabl_i2c_bus_clear+0x128>

000000009600e810 <tegrabl_i2c_open>:
{
    9600e810:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600e814:	910003fd 	mov	x29, sp
    9600e818:	a90153f3 	stp	x19, x20, [sp, #16]
	i2c_get_soc_info(&hi2c_info, &num_of_instances);
    9600e81c:	9100d3a1 	add	x1, x29, #0x34
{
    9600e820:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600e824:	2a0003f5 	mov	w21, w0
	i2c_get_soc_info(&hi2c_info, &num_of_instances);
    9600e828:	9100e3a0 	add	x0, x29, #0x38
    9600e82c:	9400020e 	bl	9600f064 <i2c_get_soc_info>
	if (instance > num_of_instances - 1UL) {
    9600e830:	b94037a0 	ldr	w0, [x29, #52]
{
    9600e834:	aa1503f6 	mov	x22, x21
	if (instance > num_of_instances - 1UL) {
    9600e838:	d1000400 	sub	x0, x0, #0x1
    9600e83c:	eb0002bf 	cmp	x21, x0
    9600e840:	54000169 	b.ls	9600e86c <tegrabl_i2c_open+0x5c>  // b.plast
		TEGRABL_SET_ERROR_STRING(error, "%d for instance", instance);
    9600e844:	52810042 	mov	w2, #0x802                 	// #2050
    9600e848:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e84c:	2a1503e4 	mov	w4, w21
    9600e850:	913d9c63 	add	x3, x3, #0xf67
    9600e854:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e858:	52800041 	mov	w1, #0x2                   	// #2
    9600e85c:	52800020 	mov	w0, #0x1                   	// #1
    9600e860:	94003ea8 	bl	9601e300 <tegrabl_error_print>
	return NULL;
    9600e864:	d2800013 	mov	x19, #0x0                   	// #0
    9600e868:	14000015 	b	9600e8bc <tegrabl_i2c_open+0xac>
	list_for_every_entry(&i2c_list, hi2c, struct tegrabl_i2c, node) {
    9600e86c:	90000314 	adrp	x20, 9606e000 <__bss_start>
    9600e870:	91138280 	add	x0, x20, #0x4e0
    9600e874:	f9400413 	ldr	x19, [x0, #8]
    9600e878:	eb00027f 	cmp	x19, x0
    9600e87c:	540002a1 	b.ne	9600e8d0 <tegrabl_i2c_open+0xc0>  // b.any
	hi2c = tegrabl_malloc(sizeof(*hi2c));
    9600e880:	d2800a00 	mov	x0, #0x50                  	// #80
    9600e884:	9400607d 	bl	96026a78 <tegrabl_malloc>
    9600e888:	aa0003f3 	mov	x19, x0
	if (hi2c == NULL) {
    9600e88c:	b50002c0 	cbnz	x0, 9600e8e4 <tegrabl_i2c_open+0xd4>
		TEGRABL_SET_ERROR_STRING(error, "%d", "struct of instance %d", (uint32_t)sizeof(*hi2c), instance);
    9600e890:	52810062 	mov	w2, #0x803                 	// #2051
    9600e894:	f0000164 	adrp	x4, 9603d000 <__func__.3609+0x209>
    9600e898:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600e89c:	2a1603e6 	mov	w6, w22
    9600e8a0:	52800a05 	mov	w5, #0x50                  	// #80
    9600e8a4:	913ddc84 	add	x4, x4, #0xf77
    9600e8a8:	9102f463 	add	x3, x3, #0xbd
    9600e8ac:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600e8b0:	52800041 	mov	w1, #0x2                   	// #2
    9600e8b4:	52800020 	mov	w0, #0x1                   	// #1
    9600e8b8:	94003e92 	bl	9601e300 <tegrabl_error_print>
}
    9600e8bc:	aa1303e0 	mov	x0, x19
    9600e8c0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600e8c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600e8c8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600e8cc:	d65f03c0 	ret
		if (hi2c->instance == instance) {
    9600e8d0:	b9401661 	ldr	w1, [x19, #20]
    9600e8d4:	6b16003f 	cmp	w1, w22
    9600e8d8:	54ffff20 	b.eq	9600e8bc <tegrabl_i2c_open+0xac>  // b.none
	list_for_every_entry(&i2c_list, hi2c, struct tegrabl_i2c, node) {
    9600e8dc:	f9400673 	ldr	x19, [x19, #8]
    9600e8e0:	17ffffe6 	b	9600e878 <tegrabl_i2c_open+0x68>
	memset(hi2c, 0x0, sizeof(*hi2c));
    9600e8e4:	d2800a02 	mov	x2, #0x50                  	// #80
    9600e8e8:	52800001 	mov	w1, #0x0                   	// #0
    9600e8ec:	94006d4f 	bl	96029e28 <memset>
	hi2c->clk_freq = hi2c_info[instance].clk_freq;
    9600e8f0:	d37ceeb5 	lsl	x21, x21, #4
    9600e8f4:	f9401fa1 	ldr	x1, [x29, #56]
    9600e8f8:	8b150020 	add	x0, x1, x21
	hi2c->base_addr = hi2c_info[instance].base_addr;
    9600e8fc:	b8756821 	ldr	w1, [x1, x21]
	hi2c->clk_freq = hi2c_info[instance].clk_freq;
    9600e900:	b9400402 	ldr	w2, [x0, #4]
	hi2c->base_addr = hi2c_info[instance].base_addr;
    9600e904:	f9000e61 	str	x1, [x19, #24]
	hi2c->is_cldvfs_required = hi2c_info[instance].is_cldvfs_required;
    9600e908:	39403401 	ldrb	w1, [x0, #13]
	hi2c->is_bpmpfw_controlled = hi2c_info[instance].is_bpmpfw_controlled;
    9600e90c:	39403000 	ldrb	w0, [x0, #12]
	hi2c->is_cldvfs_required = hi2c_info[instance].is_cldvfs_required;
    9600e910:	39008a61 	strb	w1, [x19, #34]
	hi2c->module_id = TEGRABL_MODULE_I2C;
    9600e914:	528001a1 	mov	w1, #0xd                   	// #13
	hi2c->is_initialized = false;
    9600e918:	3900427f 	strb	wzr, [x19, #16]
	hi2c->instance = instance;
    9600e91c:	b9001676 	str	w22, [x19, #20]
	hi2c->is_bpmpfw_controlled = hi2c_info[instance].is_bpmpfw_controlled;
    9600e920:	39008260 	strb	w0, [x19, #32]
	hi2c->module_id = TEGRABL_MODULE_I2C;
    9600e924:	b9002661 	str	w1, [x19, #36]
	hi2c->single_fifo_timeout = I2C_TIMEOUT;
    9600e928:	d2803e81 	mov	x1, #0x1f4                 	// #500
	hi2c->clk_freq = hi2c_info[instance].clk_freq;
    9600e92c:	b9002a62 	str	w2, [x19, #40]
	hi2c->single_fifo_timeout = I2C_TIMEOUT;
    9600e930:	f9001a61 	str	x1, [x19, #48]
	hi2c->byte_xfer_timeout = I2C_TIMEOUT;
    9600e934:	f9002261 	str	x1, [x19, #64]
	if (hi2c->is_bpmpfw_controlled == true) {
    9600e938:	340000c0 	cbz	w0, 9600e950 <tegrabl_i2c_open+0x140>
		hi2c->is_enable_bpmpfw_i2c = true;
    9600e93c:	52800020 	mov	w0, #0x1                   	// #1
    9600e940:	39008660 	strb	w0, [x19, #33]
		pr_info("virtual i2c enabled\n");
    9600e944:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600e948:	913e3400 	add	x0, x0, #0xf8d
    9600e94c:	94004f49 	bl	96022670 <tegrabl_printf>
	error = i2c_reset_controller(hi2c);
    9600e950:	aa1303e0 	mov	x0, x19
    9600e954:	97fffe9a 	bl	9600e3bc <i2c_reset_controller>
	if (error != TEGRABL_NO_ERROR) {
    9600e958:	34000140 	cbz	w0, 9600e980 <tegrabl_i2c_open+0x170>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_RESET_FAILED, "controller %d", instance);
    9600e95c:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e960:	2a1603e4 	mov	w4, w22
    9600e964:	913e9463 	add	x3, x3, #0xfa5
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_RESET_FAILED, "instance %d", hi2c->instance);
    9600e968:	52800262 	mov	w2, #0x13                  	// #19
    9600e96c:	52800041 	mov	w1, #0x2                   	// #2
    9600e970:	72a004c2 	movk	w2, #0x26, lsl #16
    9600e974:	52800000 	mov	w0, #0x0                   	// #0
    9600e978:	94003e62 	bl	9601e300 <tegrabl_error_print>
		goto fail;
    9600e97c:	14000013 	b	9600e9c8 <tegrabl_i2c_open+0x1b8>
	if (hi2c_info[instance].is_muxed_dpaux) {
    9600e980:	f9401fa0 	ldr	x0, [x29, #56]
    9600e984:	8b150000 	add	x0, x0, x21
    9600e988:	39403801 	ldrb	w1, [x0, #14]
    9600e98c:	34000241 	cbz	w1, 9600e9d4 <tegrabl_i2c_open+0x1c4>
		error = tegrabl_dpaux_init_ddc_i2c(hi2c_info[instance].dpaux_instance);
    9600e990:	b9400800 	ldr	w0, [x0, #8]
    9600e994:	94006a95 	bl	960293e8 <tegrabl_dpaux_init_ddc_i2c>
		if (error != TEGRABL_NO_ERROR) {
    9600e998:	340001e0 	cbz	w0, 9600e9d4 <tegrabl_i2c_open+0x1c4>
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "DPAUX-%d for i2c-instance %d",
    9600e99c:	f9401fa0 	ldr	x0, [x29, #56]
    9600e9a0:	52800242 	mov	w2, #0x12                  	// #18
    9600e9a4:	b9401665 	ldr	w5, [x19, #20]
    9600e9a8:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600e9ac:	8b150015 	add	x21, x0, x21
    9600e9b0:	913ecc63 	add	x3, x3, #0xfb3
    9600e9b4:	72a004c2 	movk	w2, #0x26, lsl #16
    9600e9b8:	52800041 	mov	w1, #0x2                   	// #2
    9600e9bc:	52800000 	mov	w0, #0x0                   	// #0
    9600e9c0:	b9400aa4 	ldr	w4, [x21, #8]
    9600e9c4:	94003e4f 	bl	9601e300 <tegrabl_error_print>
		tegrabl_free(hi2c);
    9600e9c8:	aa1303e0 	mov	x0, x19
    9600e9cc:	9400603b 	bl	96026ab8 <tegrabl_free>
    9600e9d0:	17ffffa5 	b	9600e864 <tegrabl_i2c_open+0x54>
	error = tegrabl_i2c_bus_clear(hi2c);
    9600e9d4:	aa1303e0 	mov	x0, x19
    9600e9d8:	97ffff33 	bl	9600e6a4 <tegrabl_i2c_bus_clear>
	if (error != TEGRABL_NO_ERROR) {
    9600e9dc:	34000180 	cbz	w0, 9600ea0c <tegrabl_i2c_open+0x1fc>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_CLEAR_FAILED, "bus", "instance %d", hi2c->instance);
    9600e9e0:	b9401665 	ldr	w5, [x19, #20]
    9600e9e4:	52800642 	mov	w2, #0x32                  	// #50
    9600e9e8:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600e9ec:	d0000183 	adrp	x3, 96040000 <sdmmc_base_addr+0x9f4>
    9600e9f0:	9108f884 	add	x4, x4, #0x23e
    9600e9f4:	9120d063 	add	x3, x3, #0x834
    9600e9f8:	72a004c2 	movk	w2, #0x26, lsl #16
    9600e9fc:	52800041 	mov	w1, #0x2                   	// #2
    9600ea00:	52800000 	mov	w0, #0x0                   	// #0
    9600ea04:	94003e3f 	bl	9601e300 <tegrabl_error_print>
		goto fail;
    9600ea08:	17fffff0 	b	9600e9c8 <tegrabl_i2c_open+0x1b8>
	error = i2c_reset_controller(hi2c);
    9600ea0c:	aa1303e0 	mov	x0, x19
    9600ea10:	97fffe6b 	bl	9600e3bc <i2c_reset_controller>
	if (error != TEGRABL_NO_ERROR) {
    9600ea14:	340000a0 	cbz	w0, 9600ea28 <tegrabl_i2c_open+0x218>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_RESET_FAILED, "instance %d", hi2c->instance);
    9600ea18:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600ea1c:	b9401664 	ldr	w4, [x19, #20]
    9600ea20:	9108f863 	add	x3, x3, #0x23e
    9600ea24:	17ffffd1 	b	9600e968 <tegrabl_i2c_open+0x158>
	hi2c->is_initialized = true;
    9600ea28:	52800020 	mov	w0, #0x1                   	// #1
	item->prev = list->prev;
    9600ea2c:	f9427281 	ldr	x1, [x20, #1248]
    9600ea30:	39004260 	strb	w0, [x19, #16]
    9600ea34:	91138280 	add	x0, x20, #0x4e0
	item->next = list;
    9600ea38:	a9000261 	stp	x1, x0, [x19]
	list->prev->next = item;
    9600ea3c:	f9427280 	ldr	x0, [x20, #1248]
	list->prev = item;
    9600ea40:	f9027293 	str	x19, [x20, #1248]
	list->prev->next = item;
    9600ea44:	f9000413 	str	x19, [x0, #8]
    9600ea48:	17ffff9d 	b	9600e8bc <tegrabl_i2c_open+0xac>

000000009600ea4c <tegrabl_i2c_read>:
{
    9600ea4c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	if ((hi2c == NULL) || (buf == NULL) || (len == 0UL)) {
    9600ea50:	f100001f 	cmp	x0, #0x0
    9600ea54:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    9600ea58:	910003fd 	mov	x29, sp
    9600ea5c:	a90153f3 	stp	x19, x20, [sp, #16]
    9600ea60:	aa0003f3 	mov	x19, x0
    9600ea64:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600ea68:	2a0403f5 	mov	w21, w4
    9600ea6c:	a90363f7 	stp	x23, x24, [sp, #48]
    9600ea70:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600ea74:	aa0303f9 	mov	x25, x3
	uint32_t data = 0;
    9600ea78:	b9006fbf 	str	wzr, [x29, #108]
{
    9600ea7c:	f9002bfb 	str	x27, [sp, #80]
	if ((hi2c == NULL) || (buf == NULL) || (len == 0UL)) {
    9600ea80:	54000040 	b.eq	9600ea88 <tegrabl_i2c_read+0x3c>  // b.none
    9600ea84:	350002a4 	cbnz	w4, 9600ead8 <tegrabl_i2c_read+0x8c>
		return error;
    9600ea88:	52814554 	mov	w20, #0xa2a                 	// #2602
		TEGRABL_SET_ERROR_STRING(error, "hi2c: %p, buf: %p, len: %d", hi2c, buf, len);
    9600ea8c:	52814542 	mov	w2, #0xa2a                 	// #2602
		return error;
    9600ea90:	72a4c4d4 	movk	w20, #0x2626, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "hi2c: %p, buf: %p, len: %d", hi2c, buf, len);
    9600ea94:	2a1503e6 	mov	w6, w21
    9600ea98:	aa1903e5 	mov	x5, x25
    9600ea9c:	aa1303e4 	mov	x4, x19
    9600eaa0:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600eaa4:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600eaa8:	913f6c63 	add	x3, x3, #0xfdb
    9600eaac:	52800041 	mov	w1, #0x2                   	// #2
    9600eab0:	52800020 	mov	w0, #0x1                   	// #1
    9600eab4:	94003e13 	bl	9601e300 <tegrabl_error_print>
}
    9600eab8:	2a1403e0 	mov	w0, w20
    9600eabc:	f9402bfb 	ldr	x27, [sp, #80]
    9600eac0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600eac4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600eac8:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600eacc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600ead0:	a8c77bfd 	ldp	x29, x30, [sp], #112
    9600ead4:	d65f03c0 	ret
    9600ead8:	12003c37 	and	w23, w1, #0xffff
	if (hi2c->is_enable_bpmpfw_i2c == true) {
    9600eadc:	39408401 	ldrb	w1, [x0, #33]
    9600eae0:	12001c58 	and	w24, w2, #0xff
    9600eae4:	34000121 	cbz	w1, 9600eb08 <tegrabl_i2c_read+0xbc>
		error = tegrabl_virtual_i2c_xfer(hi2c, slave_addr, repeat_start, buf,
    9600eae8:	52800025 	mov	w5, #0x1                   	// #1
    9600eaec:	2a1803e2 	mov	w2, w24
    9600eaf0:	2a1703e1 	mov	w1, w23
    9600eaf4:	940000d6 	bl	9600ee4c <tegrabl_virtual_i2c_xfer>
    9600eaf8:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    9600eafc:	35000200 	cbnz	w0, 9600eb3c <tegrabl_i2c_read+0xf0>
		return error;
    9600eb00:	52800014 	mov	w20, #0x0                   	// #0
    9600eb04:	17ffffed 	b	9600eab8 <tegrabl_i2c_read+0x6c>
	error = i2c_send_header(hi2c, repeat_start, false, slave_addr, len);
    9600eb08:	2a1703e3 	mov	w3, w23
    9600eb0c:	52800002 	mov	w2, #0x0                   	// #0
    9600eb10:	2a1803e1 	mov	w1, w24
    9600eb14:	97fffe0d 	bl	9600e348 <i2c_send_header>
    9600eb18:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    9600eb1c:	34000380 	cbz	w0, 9600eb8c <tegrabl_i2c_read+0x140>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_SEND_FAILED, "header");
    9600eb20:	52800662 	mov	w2, #0x33                  	// #51
    9600eb24:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600eb28:	72a004c2 	movk	w2, #0x26, lsl #16
    9600eb2c:	913fd863 	add	x3, x3, #0xff6
    9600eb30:	52800041 	mov	w1, #0x2                   	// #2
    9600eb34:	52800000 	mov	w0, #0x0                   	// #0
    9600eb38:	94003df2 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED,
    9600eb3c:	7100031f 	cmp	w24, #0x0
    9600eb40:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600eb44:	f0000166 	adrp	x6, 9603d000 <__func__.3609+0x209>
    9600eb48:	913f5400 	add	x0, x0, #0xfd5
    9600eb4c:	913f40c6 	add	x6, x6, #0xfd0
    9600eb50:	2a1703e5 	mov	w5, w23
    9600eb54:	9a8010c6 	csel	x6, x6, x0, ne  // ne = any
    9600eb58:	2a1503e4 	mov	w4, w21
    9600eb5c:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600eb60:	52800322 	mov	w2, #0x19                  	// #25
    9600eb64:	91002863 	add	x3, x3, #0xa
    9600eb68:	72a004c2 	movk	w2, #0x26, lsl #16
    9600eb6c:	52800041 	mov	w1, #0x2                   	// #2
    9600eb70:	52800000 	mov	w0, #0x0                   	// #0
    9600eb74:	94003de3 	bl	9601e300 <tegrabl_error_print>
		(void)i2c_reset_controller(hi2c);
    9600eb78:	aa1303e0 	mov	x0, x19
    9600eb7c:	97fffe10 	bl	9600e3bc <i2c_reset_controller>
		(void)tegrabl_i2c_bus_clear(hi2c);
    9600eb80:	aa1303e0 	mov	x0, x19
    9600eb84:	97fffec8 	bl	9600e6a4 <tegrabl_i2c_bus_clear>
    9600eb88:	17ffffcc 	b	9600eab8 <tegrabl_i2c_read+0x6c>
	hi2c->xfer_timeout = hi2c->byte_xfer_timeout * (2ULL + len);
    9600eb8c:	2a1503e2 	mov	w2, w21
    9600eb90:	f9402261 	ldr	x1, [x19, #64]
    9600eb94:	91000840 	add	x0, x2, #0x2
	i = 0;
    9600eb98:	52800014 	mov	w20, #0x0                   	// #0
		bytes = MIN(len - i, sizeof(uint32_t));
    9600eb9c:	5280009b 	mov	w27, #0x4                   	// #4
	hi2c->xfer_timeout = hi2c->byte_xfer_timeout * (2ULL + len);
    9600eba0:	9b007c21 	mul	x1, x1, x0
	hi2c->fifo_timeout = hi2c->single_fifo_timeout * len;
    9600eba4:	f9401a60 	ldr	x0, [x19, #48]
	hi2c->xfer_timeout = hi2c->byte_xfer_timeout * (2ULL + len);
    9600eba8:	f9002661 	str	x1, [x19, #72]
	hi2c->fifo_timeout = hi2c->single_fifo_timeout * len;
    9600ebac:	9b027c00 	mul	x0, x0, x2
    9600ebb0:	f9001e60 	str	x0, [x19, #56]
	while (i < len) {
    9600ebb4:	6b15029f 	cmp	w20, w21
    9600ebb8:	54000083 	b.cc	9600ebc8 <tegrabl_i2c_read+0x17c>  // b.lo, b.ul, b.last
	error = i2c_wait_for_transfer_complete(hi2c);
    9600ebbc:	aa1303e0 	mov	x0, x19
    9600ebc0:	97fffdac 	bl	9600e270 <i2c_wait_for_transfer_complete>
    9600ebc4:	17ffffcd 	b	9600eaf8 <tegrabl_i2c_read+0xac>
	timeout = hi2c->fifo_timeout;
    9600ebc8:	f9401e7a 	ldr	x26, [x19, #56]
	uint32_t val = 0;
    9600ebcc:	52800016 	mov	w22, #0x0                   	// #0
		tegrabl_udelay((time_t)1);
    9600ebd0:	d2800020 	mov	x0, #0x1                   	// #1
    9600ebd4:	94004434 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0ULL) {
    9600ebd8:	f100075a 	subs	x26, x26, #0x1
    9600ebdc:	540001c1 	b.ne	9600ec14 <tegrabl_i2c_read+0x1c8>  // b.any
			TEGRABL_SET_ERROR_STRING(error, "RX Fifo full", "0x%08x", val);
    9600ebe0:	5280c0c2 	mov	w2, #0x606                 	// #1542
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_WAIT_FOR_RX_FIFO_FILLED);
    9600ebe4:	5280c0d4 	mov	w20, #0x606                 	// #1542
			TEGRABL_SET_ERROR_STRING(error, "RX Fifo full", "0x%08x", val);
    9600ebe8:	2a1603e5 	mov	w5, w22
    9600ebec:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600ebf0:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600ebf4:	9107fc84 	add	x4, x4, #0x1ff
    9600ebf8:	913ff463 	add	x3, x3, #0xffd
    9600ebfc:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600ec00:	52800041 	mov	w1, #0x2                   	// #2
    9600ec04:	52800020 	mov	w0, #0x1                   	// #1
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_WAIT_FOR_RX_FIFO_FILLED);
    9600ec08:	72a4c4d4 	movk	w20, #0x2626, lsl #16
			TEGRABL_SET_ERROR_STRING(error, "RX Fifo full", "0x%08x", val);
    9600ec0c:	94003dbd 	bl	9601e300 <tegrabl_error_print>
    9600ec10:	17ffffcb 	b	9600eb3c <tegrabl_i2c_read+0xf0>
		val = i2c_readl(hi2c, I2C_FIFO_STATUS_0);
    9600ec14:	f9400e60 	ldr	x0, [x19, #24]
	return NV_READ32(hi2c->base_addr + reg);
    9600ec18:	b9406016 	ldr	w22, [x0, #96]
	} while (filled_slots == 0UL);
    9600ec1c:	f2400edf 	tst	x22, #0xf
    9600ec20:	54fffd80 	b.eq	9600ebd0 <tegrabl_i2c_read+0x184>  // b.none
		bytes = MIN(len - i, sizeof(uint32_t));
    9600ec24:	4b1402b6 	sub	w22, w21, w20
	return NV_READ32(hi2c->base_addr + reg);
    9600ec28:	b9405400 	ldr	w0, [x0, #84]
		bytes = MIN(len - i, sizeof(uint32_t));
    9600ec2c:	710012df 	cmp	w22, #0x4
		data = i2c_readl(hi2c, I2C_I2C_RX_FIFO_0);
    9600ec30:	b9006fa0 	str	w0, [x29, #108]
		bytes = MIN(len - i, sizeof(uint32_t));
    9600ec34:	1a9b92d6 	csel	w22, w22, w27, ls  // ls = plast
		memcpy(&buffer[i], &data, bytes);
    9600ec38:	8b344320 	add	x0, x25, w20, uxtw
    9600ec3c:	9101b3a1 	add	x1, x29, #0x6c
		i += bytes;
    9600ec40:	0b160294 	add	w20, w20, w22
		memcpy(&buffer[i], &data, bytes);
    9600ec44:	2a1603e2 	mov	w2, w22
    9600ec48:	94006cb7 	bl	96029f24 <memcpy>
    9600ec4c:	17ffffda 	b	9600ebb4 <tegrabl_i2c_read+0x168>

000000009600ec50 <tegrabl_i2c_write>:
{
    9600ec50:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	if ((hi2c == NULL) || (buf == NULL) || (len == 0UL)) {
    9600ec54:	f100001f 	cmp	x0, #0x0
    9600ec58:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    9600ec5c:	910003fd 	mov	x29, sp
    9600ec60:	a90153f3 	stp	x19, x20, [sp, #16]
    9600ec64:	aa0003f3 	mov	x19, x0
    9600ec68:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600ec6c:	aa0303f6 	mov	x22, x3
    9600ec70:	a90363f7 	stp	x23, x24, [sp, #48]
    9600ec74:	2a0403f5 	mov	w21, w4
    9600ec78:	a9046bf9 	stp	x25, x26, [sp, #64]
	uint32_t data = 0;
    9600ec7c:	b9005fbf 	str	wzr, [x29, #92]
	if ((hi2c == NULL) || (buf == NULL) || (len == 0UL)) {
    9600ec80:	54000040 	b.eq	9600ec88 <tegrabl_i2c_write+0x38>  // b.none
    9600ec84:	35000284 	cbnz	w4, 9600ecd4 <tegrabl_i2c_write+0x84>
		return error;
    9600ec88:	52816554 	mov	w20, #0xb2a                 	// #2858
		TEGRABL_SET_ERROR_STRING(error, "hi2c: %p, buf: %p, len: %d", hi2c, buf, len);
    9600ec8c:	52816542 	mov	w2, #0xb2a                 	// #2858
		return error;
    9600ec90:	72a4c4d4 	movk	w20, #0x2626, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "hi2c: %p, buf: %p, len: %d", hi2c, buf, len);
    9600ec94:	2a1503e6 	mov	w6, w21
    9600ec98:	aa1603e5 	mov	x5, x22
    9600ec9c:	aa1303e4 	mov	x4, x19
    9600eca0:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600eca4:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600eca8:	913f6c63 	add	x3, x3, #0xfdb
    9600ecac:	52800041 	mov	w1, #0x2                   	// #2
    9600ecb0:	52800020 	mov	w0, #0x1                   	// #1
    9600ecb4:	94003d93 	bl	9601e300 <tegrabl_error_print>
}
    9600ecb8:	2a1403e0 	mov	w0, w20
    9600ecbc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600ecc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600ecc4:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600ecc8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600eccc:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9600ecd0:	d65f03c0 	ret
    9600ecd4:	12003c37 	and	w23, w1, #0xffff
	if (hi2c->is_enable_bpmpfw_i2c == true) {
    9600ecd8:	39408401 	ldrb	w1, [x0, #33]
    9600ecdc:	12001c58 	and	w24, w2, #0xff
    9600ece0:	34000121 	cbz	w1, 9600ed04 <tegrabl_i2c_write+0xb4>
		error = tegrabl_virtual_i2c_xfer(hi2c, slave_addr, repeat_start, buf,
    9600ece4:	52800005 	mov	w5, #0x0                   	// #0
    9600ece8:	2a1803e2 	mov	w2, w24
    9600ecec:	2a1703e1 	mov	w1, w23
    9600ecf0:	94000057 	bl	9600ee4c <tegrabl_virtual_i2c_xfer>
    9600ecf4:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    9600ecf8:	35000200 	cbnz	w0, 9600ed38 <tegrabl_i2c_write+0xe8>
		return error;
    9600ecfc:	52800014 	mov	w20, #0x0                   	// #0
    9600ed00:	17ffffee 	b	9600ecb8 <tegrabl_i2c_write+0x68>
	error = i2c_send_header(hi2c, repeat_start, true, slave_addr, len);
    9600ed04:	2a1703e3 	mov	w3, w23
    9600ed08:	52800022 	mov	w2, #0x1                   	// #1
    9600ed0c:	2a1803e1 	mov	w1, w24
    9600ed10:	97fffd8e 	bl	9600e348 <i2c_send_header>
    9600ed14:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    9600ed18:	34000380 	cbz	w0, 9600ed88 <tegrabl_i2c_write+0x138>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_SEND_FAILED, "header");
    9600ed1c:	52800662 	mov	w2, #0x33                  	// #51
    9600ed20:	f0000163 	adrp	x3, 9603d000 <__func__.3609+0x209>
    9600ed24:	72a004c2 	movk	w2, #0x26, lsl #16
    9600ed28:	913fd863 	add	x3, x3, #0xff6
    9600ed2c:	52800041 	mov	w1, #0x2                   	// #2
    9600ed30:	52800000 	mov	w0, #0x0                   	// #0
    9600ed34:	94003d73 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_WRITE_FAILED, "%d bytes to slave: 0x%04x with repeat start %s",
    9600ed38:	7100031f 	cmp	w24, #0x0
    9600ed3c:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600ed40:	f0000166 	adrp	x6, 9603d000 <__func__.3609+0x209>
    9600ed44:	913f5400 	add	x0, x0, #0xfd5
    9600ed48:	913f40c6 	add	x6, x6, #0xfd0
    9600ed4c:	2a1703e5 	mov	w5, w23
    9600ed50:	9a8010c6 	csel	x6, x6, x0, ne  // ne = any
    9600ed54:	2a1503e4 	mov	w4, w21
    9600ed58:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600ed5c:	52800342 	mov	w2, #0x1a                  	// #26
    9600ed60:	91018463 	add	x3, x3, #0x61
    9600ed64:	72a004c2 	movk	w2, #0x26, lsl #16
    9600ed68:	52800041 	mov	w1, #0x2                   	// #2
    9600ed6c:	52800000 	mov	w0, #0x0                   	// #0
    9600ed70:	94003d64 	bl	9601e300 <tegrabl_error_print>
		(void)i2c_reset_controller(hi2c);
    9600ed74:	aa1303e0 	mov	x0, x19
    9600ed78:	97fffd91 	bl	9600e3bc <i2c_reset_controller>
		(void)tegrabl_i2c_bus_clear(hi2c);
    9600ed7c:	aa1303e0 	mov	x0, x19
    9600ed80:	97fffe49 	bl	9600e6a4 <tegrabl_i2c_bus_clear>
    9600ed84:	17ffffcd 	b	9600ecb8 <tegrabl_i2c_write+0x68>
	hi2c->xfer_timeout = hi2c->byte_xfer_timeout * (2ULL + len);
    9600ed88:	2a1503e2 	mov	w2, w21
    9600ed8c:	f9402261 	ldr	x1, [x19, #64]
    9600ed90:	91000840 	add	x0, x2, #0x2
		bytes = MIN(len, sizeof(data));
    9600ed94:	5280009a 	mov	w26, #0x4                   	// #4
	hi2c->xfer_timeout = hi2c->byte_xfer_timeout * (2ULL + len);
    9600ed98:	9b007c21 	mul	x1, x1, x0
	hi2c->fifo_timeout = hi2c->single_fifo_timeout * len;
    9600ed9c:	f9401a60 	ldr	x0, [x19, #48]
	hi2c->xfer_timeout = hi2c->byte_xfer_timeout * (2ULL + len);
    9600eda0:	f9002661 	str	x1, [x19, #72]
	hi2c->fifo_timeout = hi2c->single_fifo_timeout * len;
    9600eda4:	9b027c00 	mul	x0, x0, x2
    9600eda8:	f9001e60 	str	x0, [x19, #56]
	timeout = hi2c->fifo_timeout;
    9600edac:	f9401e79 	ldr	x25, [x19, #56]
	uint32_t val = 0;
    9600edb0:	52800014 	mov	w20, #0x0                   	// #0
		tegrabl_udelay((time_t)1);
    9600edb4:	d2800020 	mov	x0, #0x1                   	// #1
    9600edb8:	940043bb 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0ULL) {
    9600edbc:	f1000739 	subs	x25, x25, #0x1
    9600edc0:	540001c1 	b.ne	9600edf8 <tegrabl_i2c_write+0x1a8>  // b.any
			TEGRABL_SET_ERROR_STRING(error, "TX Fifo empty", "0x%08x", val);
    9600edc4:	2a1403e5 	mov	w5, w20
    9600edc8:	5280a0c2 	mov	w2, #0x506                 	// #1286
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_WAIT_FOR_TX_FIFO_EMPTY);
    9600edcc:	5280a0d4 	mov	w20, #0x506                 	// #1286
			TEGRABL_SET_ERROR_STRING(error, "TX Fifo empty", "0x%08x", val);
    9600edd0:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600edd4:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600edd8:	9107fc84 	add	x4, x4, #0x1ff
    9600eddc:	91014c63 	add	x3, x3, #0x53
    9600ede0:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600ede4:	52800041 	mov	w1, #0x2                   	// #2
    9600ede8:	52800020 	mov	w0, #0x1                   	// #1
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, I2C_WAIT_FOR_TX_FIFO_EMPTY);
    9600edec:	72a4c4d4 	movk	w20, #0x2626, lsl #16
			TEGRABL_SET_ERROR_STRING(error, "TX Fifo empty", "0x%08x", val);
    9600edf0:	94003d44 	bl	9601e300 <tegrabl_error_print>
    9600edf4:	17ffffd1 	b	9600ed38 <tegrabl_i2c_write+0xe8>
	return NV_READ32(hi2c->base_addr + reg);
    9600edf8:	f9400e60 	ldr	x0, [x19, #24]
    9600edfc:	b9406014 	ldr	w20, [x0, #96]
	} while (empty_slots == 0UL);
    9600ee00:	f27c0e9f 	tst	x20, #0xf0
    9600ee04:	54fffd80 	b.eq	9600edb4 <tegrabl_i2c_write+0x164>  // b.none
		bytes = MIN(len, sizeof(data));
    9600ee08:	710012bf 	cmp	w21, #0x4
		memcpy(&data, buffer, bytes);
    9600ee0c:	aa1603e1 	mov	x1, x22
		bytes = MIN(len, sizeof(data));
    9600ee10:	1a9a92b4 	csel	w20, w21, w26, ls  // ls = plast
		memcpy(&data, buffer, bytes);
    9600ee14:	910173a0 	add	x0, x29, #0x5c
		data = 0;
    9600ee18:	b9005fbf 	str	wzr, [x29, #92]
		memcpy(&data, buffer, bytes);
    9600ee1c:	2a1403f9 	mov	w25, w20
    9600ee20:	aa1903e2 	mov	x2, x25
    9600ee24:	94006c40 	bl	96029f24 <memcpy>
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600ee28:	f9400e60 	ldr	x0, [x19, #24]
		buffer += bytes;
    9600ee2c:	8b1902d6 	add	x22, x22, x25
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600ee30:	b9405fa1 	ldr	w1, [x29, #92]
	while (len != 0U) {
    9600ee34:	6b1402b5 	subs	w21, w21, w20
	NV_WRITE32(hi2c->base_addr + reg, val);
    9600ee38:	b9005001 	str	w1, [x0, #80]
	while (len != 0U) {
    9600ee3c:	54fffb81 	b.ne	9600edac <tegrabl_i2c_write+0x15c>  // b.any
	error = i2c_wait_for_transfer_complete(hi2c);
    9600ee40:	aa1303e0 	mov	x0, x19
    9600ee44:	97fffd0b 	bl	9600e270 <i2c_wait_for_transfer_complete>
    9600ee48:	17ffffab 	b	9600ecf4 <tegrabl_i2c_write+0xa4>

000000009600ee4c <tegrabl_virtual_i2c_xfer>:
}

tegrabl_error_t tegrabl_virtual_i2c_xfer(struct tegrabl_i2c *hi2c,
		uint16_t slave_addr, bool repeat_start
		, void *buf, uint32_t len, bool is_read)
{
    9600ee4c:	a9ab7bfd 	stp	x29, x30, [sp, #-336]!
    9600ee50:	910003fd 	mov	x29, sp
    9600ee54:	a90363f7 	stp	x23, x24, [sp, #48]
    9600ee58:	aa0003f8 	mov	x24, x0
    9600ee5c:	a90153f3 	stp	x19, x20, [sp, #16]
    9600ee60:	12001cb7 	and	w23, w5, #0xff
    9600ee64:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600ee68:	aa0303f3 	mov	x19, x3
    9600ee6c:	12003c35 	and	w21, w1, #0xffff
    9600ee70:	2a0403f4 	mov	w20, w4
	tegrabl_error_t err;
	struct tegrabl_i2c_send_recv_info xfer_info;

	pr_trace("%s: entry\n", __func__);
	memset(&xfer_info, 0, sizeof(xfer_info));
    9600ee74:	52800001 	mov	w1, #0x0                   	// #0
{
    9600ee78:	12001c56 	and	w22, w2, #0xff
	memset(&xfer_info, 0, sizeof(xfer_info));
    9600ee7c:	910123a0 	add	x0, x29, #0x48
    9600ee80:	d2800302 	mov	x2, #0x18                  	// #24
    9600ee84:	94006be9 	bl	96029e28 <memset>

	xfer_info.bus_id = (hi2c->instance + 1);
	xfer_info.slave_addr = TO_I2C_7BIT_ADDR(slave_addr);
	xfer_info.xfer_data = (uint8_t *)buf;
    9600ee88:	f9002bb3 	str	x19, [x29, #80]
	xfer_info.bus_id = (hi2c->instance + 1);
    9600ee8c:	b9401700 	ldr	w0, [x24, #20]
	xfer_info.xfer_data_size = len;
    9600ee90:	12003e81 	and	w1, w20, #0xffff
    9600ee94:	7900b3a1 	strh	w1, [x29, #88]
	xfer_info.bus_id = (hi2c->instance + 1);
    9600ee98:	11000400 	add	w0, w0, #0x1
    9600ee9c:	b9004ba0 	str	w0, [x29, #72]
	xfer_info.slave_addr = TO_I2C_7BIT_ADDR(slave_addr);
    9600eea0:	d3411ea0 	ubfx	x0, x21, #1, #7
    9600eea4:	79009ba0 	strh	w0, [x29, #76]

	if (!repeat_start) {
    9600eea8:	35000096 	cbnz	w22, 9600eeb8 <tegrabl_virtual_i2c_xfer+0x6c>
		xfer_info.i2c_flags |= SERIALI2C_STOP;
    9600eeac:	b9405fa0 	ldr	w0, [x29, #92]
    9600eeb0:	32110000 	orr	w0, w0, #0x8000
    9600eeb4:	b9005fa0 	str	w0, [x29, #92]
	if ((info->xfer_data_size != 0) && (info->xfer_data == NULL)) {
    9600eeb8:	34000441 	cbz	w1, 9600ef40 <tegrabl_virtual_i2c_xfer+0xf4>
    9600eebc:	b5000433 	cbnz	x19, 9600ef40 <tegrabl_virtual_i2c_xfer+0xf4>
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER,
    9600eec0:	5281c553 	mov	w19, #0xe2a                 	// #3626
		TEGRABL_SET_ERROR_STRING(err, "xfer_data_size: %d, xfer_data: %p",
    9600eec4:	5281c542 	mov	w2, #0xe2a                 	// #3626
    9600eec8:	d2800005 	mov	x5, #0x0                   	// #0
    9600eecc:	12003e84 	and	w4, w20, #0xffff
    9600eed0:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600eed4:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600eed8:	91024063 	add	x3, x3, #0x90
    9600eedc:	52800041 	mov	w1, #0x2                   	// #2
    9600eee0:	52800020 	mov	w0, #0x1                   	// #1
    9600eee4:	94003d07 	bl	9601e300 <tegrabl_error_print>
		err = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE,
    9600eee8:	72a4c4d3 	movk	w19, #0x2626, lsl #16

	err = tegrabl_virtual_i2c_bpmp_xfer(&xfer_info, is_read);

	if (err != TEGRABL_NO_ERROR) {
		if (is_read) {
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED,
    9600eeec:	f0000160 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9600eef0:	f0000167 	adrp	x7, 9603d000 <__func__.3609+0x209>
    9600eef4:	710002df 	cmp	w22, #0x0
    9600eef8:	913f4000 	add	x0, x0, #0xfd0
    9600eefc:	913f54e7 	add	x7, x7, #0xfd5
    9600ef00:	2a1503e5 	mov	w5, w21
    9600ef04:	9a8000e7 	csel	x7, x7, x0, eq  // eq = none
    9600ef08:	2a1403e4 	mov	w4, w20
    9600ef0c:	b9401706 	ldr	w6, [x24, #20]
		if (is_read) {
    9600ef10:	34000a37 	cbz	w23, 9600f054 <tegrabl_virtual_i2c_xfer+0x208>
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED,
    9600ef14:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600ef18:	91034863 	add	x3, x3, #0xd2
    9600ef1c:	52800322 	mov	w2, #0x19                  	// #25
					"%d bytes from slave 0x%02x via i2c %d wth repeat start %s",
					len, slave_addr, hi2c->instance, repeat_start ? "true" : "false");
		} else {
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_WRITE_FAILED,
    9600ef20:	52800000 	mov	w0, #0x0                   	// #0
    9600ef24:	72a004c2 	movk	w2, #0x26, lsl #16
    9600ef28:	52800041 	mov	w1, #0x2                   	// #2
    9600ef2c:	12005e73 	and	w19, w19, #0xffffff
    9600ef30:	94003cf4 	bl	9601e300 <tegrabl_error_print>
    9600ef34:	52a4c000 	mov	w0, #0x26000000            	// #637534208
    9600ef38:	2a000273 	orr	w19, w19, w0
		}

		TEGRABL_SET_HIGHEST_MODULE(err);
	}

	return err;
    9600ef3c:	14000040 	b	9600f03c <tegrabl_virtual_i2c_xfer+0x1f0>
	memset(&i2c_request, 0, sizeof(i2c_request));
    9600ef40:	d2800f02 	mov	x2, #0x78                  	// #120
    9600ef44:	52800001 	mov	w1, #0x0                   	// #0
    9600ef48:	910183a0 	add	x0, x29, #0x60
    9600ef4c:	94006bb7 	bl	96029e28 <memset>
	memset(&i2c_response, 0, sizeof(i2c_response));
    9600ef50:	52800001 	mov	w1, #0x0                   	// #0
    9600ef54:	d2800f02 	mov	x2, #0x78                  	// #120
    9600ef58:	910363a0 	add	x0, x29, #0xd8
    9600ef5c:	94006bb3 	bl	96029e28 <memset>
	i2c_request.xfer.bus_id = info->bus_id;
    9600ef60:	b9404ba1 	ldr	w1, [x29, #72]
	i2c_request.cmd = CMD_I2C_XFER;
    9600ef64:	52800020 	mov	w0, #0x1                   	// #1
	if ((info->xfer_data_size + HDR_LEN) > TEGRA_I2C_IPC_MAX_IN_BUF_SIZE) {
    9600ef68:	7940b3a5 	ldrh	w5, [x29, #88]
	i2c_request.xfer.bus_id = info->bus_id;
    9600ef6c:	290c07a0 	stp	w0, w1, [x29, #96]
	if ((info->xfer_data_size + HDR_LEN) > TEGRA_I2C_IPC_MAX_IN_BUF_SIZE) {
    9600ef70:	710198bf 	cmp	w5, #0x66
    9600ef74:	54000189 	b.ls	9600efa4 <tegrabl_virtual_i2c_xfer+0x158>  // b.plast
		TEGRABL_SET_ERROR_STRING(err, "xfer data: %d", "%d", info->xfer_data_size,
    9600ef78:	5281c0e2 	mov	w2, #0xe07                 	// #3591
    9600ef7c:	52800cc6 	mov	w6, #0x66                  	// #102
    9600ef80:	90000184 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600ef84:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600ef88:	9102f484 	add	x4, x4, #0xbd
    9600ef8c:	9102c863 	add	x3, x3, #0xb2
    9600ef90:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600ef94:	52800041 	mov	w1, #0x2                   	// #2
		err = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE,
    9600ef98:	5281c0f3 	mov	w19, #0xe07                 	// #3591
		TEGRABL_SET_ERROR_STRING(err, "xfer data: %d", "%d", info->xfer_data_size,
    9600ef9c:	94003cd9 	bl	9601e300 <tegrabl_error_print>
    9600efa0:	17ffffd2 	b	9600eee8 <tegrabl_virtual_i2c_xfer+0x9c>
	hdr_xfer->addr = info->slave_addr;
    9600efa4:	79409ba0 	ldrh	w0, [x29, #76]
    9600efa8:	7900dba0 	strh	w0, [x29, #108]
	hdr_xfer->flags = info->i2c_flags;
    9600efac:	7940bba0 	ldrh	w0, [x29, #92]
    9600efb0:	7900dfa0 	strh	w0, [x29, #110]
	hdr_xfer->len = info->xfer_data_size;
    9600efb4:	7900e3a5 	strh	w5, [x29, #112]
	if (!is_read) { /* write */
    9600efb8:	35000317 	cbnz	w23, 9600f018 <tegrabl_virtual_i2c_xfer+0x1cc>
		memcpy(i2c_request.xfer.data_buf + HDR_LEN,
    9600efbc:	f9402ba1 	ldr	x1, [x29, #80]
    9600efc0:	92403ca2 	and	x2, x5, #0xffff
    9600efc4:	9101cba0 	add	x0, x29, #0x72
    9600efc8:	94006bd7 	bl	96029f24 <memcpy>
		i2c_request.xfer.data_size = HDR_LEN + info->xfer_data_size;
    9600efcc:	7940b3a0 	ldrh	w0, [x29, #88]
    9600efd0:	11001800 	add	w0, w0, #0x6
	err = tegrabl_ccplex_bpmp_xfer(
    9600efd4:	52800f03 	mov	w3, #0x78                  	// #120
		i2c_request.xfer.data_size = HDR_LEN;
    9600efd8:	b9006ba0 	str	w0, [x29, #104]
	err = tegrabl_ccplex_bpmp_xfer(
    9600efdc:	528002a4 	mov	w4, #0x15                  	// #21
    9600efe0:	2a0303e2 	mov	w2, w3
    9600efe4:	910363a1 	add	x1, x29, #0xd8
    9600efe8:	910183a0 	add	x0, x29, #0x60
    9600efec:	940039a4 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9600eff0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9600eff4:	340001a0 	cbz	w0, 9600f028 <tegrabl_virtual_i2c_xfer+0x1dc>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_XFER_FAILED, "bpmp xfer request");
    9600eff8:	52800682 	mov	w2, #0x34                  	// #52
    9600effc:	90000183 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f000:	72a004c2 	movk	w2, #0x26, lsl #16
    9600f004:	91030063 	add	x3, x3, #0xc0
    9600f008:	52800041 	mov	w1, #0x2                   	// #2
    9600f00c:	52800000 	mov	w0, #0x0                   	// #0
    9600f010:	94003cbc 	bl	9601e300 <tegrabl_error_print>
    9600f014:	17ffffb6 	b	9600eeec <tegrabl_virtual_i2c_xfer+0xa0>
		hdr_xfer->flags |= SERIALI2C_RD;
    9600f018:	32000000 	orr	w0, w0, #0x1
    9600f01c:	7900dfa0 	strh	w0, [x29, #110]
		i2c_request.xfer.data_size = HDR_LEN;
    9600f020:	528000c0 	mov	w0, #0x6                   	// #6
    9600f024:	17ffffec 	b	9600efd4 <tegrabl_virtual_i2c_xfer+0x188>
	if (is_read) {
    9600f028:	340000b7 	cbz	w23, 9600f03c <tegrabl_virtual_i2c_xfer+0x1f0>
		memcpy(info->xfer_data, i2c_response.xfer.data_buf,
    9600f02c:	7940b3a2 	ldrh	w2, [x29, #88]
    9600f030:	910373a1 	add	x1, x29, #0xdc
    9600f034:	f9402ba0 	ldr	x0, [x29, #80]
    9600f038:	94006bbb 	bl	96029f24 <memcpy>
}
    9600f03c:	2a1303e0 	mov	w0, w19
    9600f040:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600f044:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600f048:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600f04c:	a8d57bfd 	ldp	x29, x30, [sp], #336
    9600f050:	d65f03c0 	ret
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_WRITE_FAILED,
    9600f054:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f058:	52800342 	mov	w2, #0x1a                  	// #26
    9600f05c:	91043063 	add	x3, x3, #0x10c
    9600f060:	17ffffb0 	b	9600ef20 <tegrabl_virtual_i2c_xfer+0xd4>

000000009600f064 <i2c_get_soc_info>:
static struct tegrabl_i2c_prod_setting i2c_prod_settings[I2C_INSTANCES_MAX][I2C_MODES_MAX];

void i2c_get_soc_info(struct i2c_soc_info **hi2c_info,
	uint32_t *num_of_instances)
{
	*hi2c_info = &i2c_info[0];
    9600f064:	d00001c2 	adrp	x2, 96049000 <default_srgb_lut+0xa28>
    9600f068:	9130c042 	add	x2, x2, #0xc30
    9600f06c:	f9000002 	str	x2, [x0]
	*num_of_instances = ARRAY_SIZE(i2c_info);
    9600f070:	52800120 	mov	w0, #0x9                   	// #9
    9600f074:	b9000020 	str	w0, [x1]
}
    9600f078:	d65f03c0 	ret

000000009600f07c <tegrabl_i2c_get_clk_source_rate>:
uint32_t tegrabl_i2c_get_clk_source_rate(const struct tegrabl_i2c *hi2c)
{
	TEGRABL_UNUSED(hi2c);

	return I2C_SOURCE_FREQ;
}
    9600f07c:	52826800 	mov	w0, #0x1340                	// #4928
    9600f080:	72a00040 	movk	w0, #0x2, lsl #16
    9600f084:	d65f03c0 	ret

000000009600f088 <tegrabl_i2c_register_prod_settings>:

tegrabl_error_t tegrabl_i2c_register_prod_settings(uint32_t instance,
		uint32_t mode, uint32_t *settings, uint32_t num_settings)
{
    9600f088:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((instance >= I2C_INSTANCES_MAX) || (mode >= I2C_MODES_MAX)) {
    9600f08c:	7100241f 	cmp	w0, #0x9
    9600f090:	7a439822 	ccmp	w1, #0x3, #0x2, ls  // ls = plast
{
    9600f094:	910003fd 	mov	x29, sp
	if ((instance >= I2C_INSTANCES_MAX) || (mode >= I2C_MODES_MAX)) {
    9600f098:	540001c9 	b.ls	9600f0d0 <tegrabl_i2c_register_prod_settings+0x48>  // b.plast
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER,
				TEGRABL_I2C_REGISTER_PROD_SETTINGS_1);
		TEGRABL_SET_ERROR_STRING(error, "instance: %d, mode: %d", instance, mode);
    9600f09c:	52802542 	mov	w2, #0x12a                 	// #298
    9600f0a0:	2a0103e5 	mov	w5, w1
    9600f0a4:	2a0003e4 	mov	w4, w0
    9600f0a8:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f0ac:	52800020 	mov	w0, #0x1                   	// #1
    9600f0b0:	91051063 	add	x3, x3, #0x144
    9600f0b4:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600f0b8:	52800041 	mov	w1, #0x2                   	// #2
    9600f0bc:	94003c91 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER,
    9600f0c0:	52802540 	mov	w0, #0x12a                 	// #298
		goto fail;
	}

	if ((settings == NULL) || (num_settings == 0U)) {
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER,
    9600f0c4:	72a4c4c0 	movk	w0, #0x2626, lsl #16
	i2c_prod_settings[instance][mode].num_settings = num_settings;
	i2c_prod_settings[instance][mode].settings = settings;

fail:
	return error;
}
    9600f0c8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600f0cc:	d65f03c0 	ret
	if ((settings == NULL) || (num_settings == 0U)) {
    9600f0d0:	f100005f 	cmp	x2, #0x0
    9600f0d4:	7a401864 	ccmp	w3, #0x0, #0x4, ne  // ne = any
    9600f0d8:	54000181 	b.ne	9600f108 <tegrabl_i2c_register_prod_settings+0x80>  // b.any
		TEGRABL_SET_ERROR_STRING(error, "settings: %p, num_settings: %d", settings, num_settings);
    9600f0dc:	aa0203e4 	mov	x4, x2
    9600f0e0:	52804542 	mov	w2, #0x22a                 	// #554
    9600f0e4:	2a0303e5 	mov	w5, w3
    9600f0e8:	52800020 	mov	w0, #0x1                   	// #1
    9600f0ec:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f0f0:	72a4c4c2 	movk	w2, #0x2626, lsl #16
    9600f0f4:	91056c63 	add	x3, x3, #0x15b
    9600f0f8:	52800041 	mov	w1, #0x2                   	// #2
    9600f0fc:	94003c81 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER,
    9600f100:	52804540 	mov	w0, #0x22a                 	// #554
    9600f104:	17fffff0 	b	9600f0c4 <tegrabl_i2c_register_prod_settings+0x3c>
	i2c_prod_settings[instance][mode].num_settings = num_settings;
    9600f108:	d37e7c00 	ubfiz	x0, x0, #2, #32
    9600f10c:	f00002e6 	adrp	x6, 9606e000 <__bss_start>
    9600f110:	8b214001 	add	x1, x0, w1, uxtw
    9600f114:	9113c0c6 	add	x6, x6, #0x4f0
    9600f118:	d37cec21 	lsl	x1, x1, #4
    9600f11c:	8b0100c0 	add	x0, x6, x1
    9600f120:	b82168c3 	str	w3, [x6, x1]
	i2c_prod_settings[instance][mode].settings = settings;
    9600f124:	f9000402 	str	x2, [x0, #8]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9600f128:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    9600f12c:	17ffffe7 	b	9600f0c8 <tegrabl_i2c_register_prod_settings+0x40>

000000009600f130 <i2c_set_prod_settings>:
	uint32_t instance = 0;

	TEGRABL_ASSERT(hi2c != NULL);

#if defined(CONFIG_POWER_I2C_BPMPFW)
	if (hi2c->is_enable_bpmpfw_i2c == true) {
    9600f130:	39408401 	ldrb	w1, [x0, #33]
    9600f134:	35000321 	cbnz	w1, 9600f198 <i2c_set_prod_settings+0x68>
		return;
	}
#endif

	if (hi2c->clk_freq > FM_PLUS_SPEED) {
    9600f138:	b9402801 	ldr	w1, [x0, #40]
    9600f13c:	710fa03f 	cmp	w1, #0x3e8
    9600f140:	540002e8 	b.hi	9600f19c <i2c_set_prod_settings+0x6c>  // b.pmore
		mode = 3;
	} else if (hi2c->clk_freq > FM_SPEED) {
    9600f144:	7106403f 	cmp	w1, #0x190
    9600f148:	540002e8 	b.hi	9600f1a4 <i2c_set_prod_settings+0x74>  // b.pmore
		mode = 2;
	} else if (hi2c->clk_freq > STD_SPEED) {
    9600f14c:	7101903f 	cmp	w1, #0x64
    9600f150:	1a9f97e1 	cset	w1, hi  // hi = pmore

	instance = hi2c->instance;
	base_addr = i2c_info[instance].base_addr;
	setting = &i2c_prod_settings[instance][mode];

	if (setting->num_settings != 0U) {
    9600f154:	b9401403 	ldr	w3, [x0, #20]
    9600f158:	f00002e2 	adrp	x2, 9606e000 <__bss_start>
    9600f15c:	9113c042 	add	x2, x2, #0x4f0
    9600f160:	8b030821 	add	x1, x1, x3, lsl #2
    9600f164:	d37cec21 	lsl	x1, x1, #4
    9600f168:	b8616840 	ldr	w0, [x2, x1]
    9600f16c:	34000160 	cbz	w0, 9600f198 <i2c_set_prod_settings+0x68>
	base_addr = i2c_info[instance].base_addr;
    9600f170:	d37cec63 	lsl	x3, x3, #4
    9600f174:	d00001c4 	adrp	x4, 96049000 <default_srgb_lut+0xa28>
    9600f178:	9130c084 	add	x4, x4, #0xc30
		/* Apply prod settings using <addr, mask, value> tuple */
		for (i = 0; i < (setting->num_settings * 3U); i += 3U) {
			reg_addr = setting->settings[i];
    9600f17c:	8b010041 	add	x1, x2, x1
		for (i = 0; i < (setting->num_settings * 3U); i += 3U) {
    9600f180:	52800005 	mov	w5, #0x0                   	// #0
	base_addr = i2c_info[instance].base_addr;
    9600f184:	b8636887 	ldr	w7, [x4, x3]
		for (i = 0; i < (setting->num_settings * 3U); i += 3U) {
    9600f188:	0b000403 	add	w3, w0, w0, lsl #1

			if ((base_addr < reg_addr) || (reg_addr > (base_addr + I2C_LIMIT))) {
    9600f18c:	114040e8 	add	w8, w7, #0x10, lsl #12
		for (i = 0; i < (setting->num_settings * 3U); i += 3U) {
    9600f190:	6b05007f 	cmp	w3, w5
    9600f194:	540000c8 	b.hi	9600f1ac <i2c_set_prod_settings+0x7c>  // b.pmore
					setting->settings[i + 1UL]);
			NV_WRITE32(setting->settings[i], reg);
		}
	}
	return;
}
    9600f198:	d65f03c0 	ret
		mode = 3;
    9600f19c:	d2800061 	mov	x1, #0x3                   	// #3
    9600f1a0:	17ffffed 	b	9600f154 <i2c_set_prod_settings+0x24>
		mode = 2;
    9600f1a4:	d2800041 	mov	x1, #0x2                   	// #2
    9600f1a8:	17ffffeb 	b	9600f154 <i2c_set_prod_settings+0x24>
			reg_addr = setting->settings[i];
    9600f1ac:	d37e7ca2 	ubfiz	x2, x5, #2, #32
    9600f1b0:	f9400424 	ldr	x4, [x1, #8]
    9600f1b4:	b8626880 	ldr	w0, [x4, x2]
			if ((base_addr < reg_addr) || (reg_addr > (base_addr + I2C_LIMIT))) {
    9600f1b8:	6b0000ff 	cmp	w7, w0
    9600f1bc:	54000183 	b.cc	9600f1ec <i2c_set_prod_settings+0xbc>  // b.lo, b.ul, b.last
    9600f1c0:	6b00011f 	cmp	w8, w0
    9600f1c4:	54000143 	b.cc	9600f1ec <i2c_set_prod_settings+0xbc>  // b.lo, b.ul, b.last
			reg = NV_READ32(setting->settings[i]);
    9600f1c8:	2a0003e0 	mov	w0, w0
			reg |= (setting->settings[i + 2UL] &
    9600f1cc:	8b020084 	add	x4, x4, x2
			reg = NV_READ32(setting->settings[i]);
    9600f1d0:	b9400006 	ldr	w6, [x0]
    9600f1d4:	b9400882 	ldr	w2, [x4, #8]
    9600f1d8:	b9400484 	ldr	w4, [x4, #4]
    9600f1dc:	4a0200c2 	eor	w2, w6, w2
    9600f1e0:	0a040042 	and	w2, w2, w4
			reg |= (setting->settings[i + 2UL] &
    9600f1e4:	4a0200c2 	eor	w2, w6, w2
			NV_WRITE32(setting->settings[i], reg);
    9600f1e8:	b9000002 	str	w2, [x0]
		for (i = 0; i < (setting->num_settings * 3U); i += 3U) {
    9600f1ec:	11000ca5 	add	w5, w5, #0x3
    9600f1f0:	17ffffe8 	b	9600f190 <i2c_set_prod_settings+0x60>

000000009600f1f4 <tegrabl_i2c_dev_open>:
#include <tegrabl_i2c.h>
#include <tegrabl_i2c_dev_err_aux.h>

struct tegrabl_i2c_dev *tegrabl_i2c_dev_open(tegrabl_instance_i2c_t instance,
	uint32_t slave_addr, uint32_t reg_addr_size, uint32_t bytes_per_reg)
{
    9600f1f4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600f1f8:	910003fd 	mov	x29, sp
    9600f1fc:	a90153f3 	stp	x19, x20, [sp, #16]
    9600f200:	2a0003f4 	mov	w20, w0
    9600f204:	a9025bf5 	stp	x21, x22, [sp, #32]
	struct tegrabl_i2c_dev *hi2cdev;
	struct tegrabl_i2c *hi2c;

	pr_trace("%s: entry\n", __func__);

	hi2cdev = tegrabl_malloc(sizeof(*hi2cdev));
    9600f208:	d2800500 	mov	x0, #0x28                  	// #40
{
    9600f20c:	f9001bf7 	str	x23, [sp, #48]
    9600f210:	2a0203f6 	mov	w22, w2
    9600f214:	2a0303f5 	mov	w21, w3
    9600f218:	2a0103f7 	mov	w23, w1
	hi2cdev = tegrabl_malloc(sizeof(*hi2cdev));
    9600f21c:	94005e17 	bl	96026a78 <tegrabl_malloc>
    9600f220:	aa0003f3 	mov	x19, x0
	if (hi2cdev == NULL) {
    9600f224:	b5000240 	cbnz	x0, 9600f26c <tegrabl_i2c_dev_open+0x78>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_NO_MEMORY, "%d", "i2c dev for instnace %d",
    9600f228:	52800062 	mov	w2, #0x3                   	// #3
    9600f22c:	f0000164 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600f230:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f234:	2a1403e6 	mov	w6, w20
    9600f238:	52800505 	mov	w5, #0x28                  	// #40
    9600f23c:	9105e884 	add	x4, x4, #0x17a
    9600f240:	9102f463 	add	x3, x3, #0xbd
    9600f244:	72a004e2 	movk	w2, #0x27, lsl #16
    9600f248:	52800041 	mov	w1, #0x2                   	// #2
    9600f24c:	52800000 	mov	w0, #0x0                   	// #0
    9600f250:	94003c2c 	bl	9601e300 <tegrabl_error_print>
	hi2cdev->bytes_per_reg = bytes_per_reg;
	hi2cdev->wait_time_for_write_us = 0;

	pr_trace("%s: exit\n", __func__);
	return hi2cdev;
}
    9600f254:	aa1303e0 	mov	x0, x19
    9600f258:	f9401bf7 	ldr	x23, [sp, #48]
    9600f25c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600f260:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600f264:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600f268:	d65f03c0 	ret
	hi2c = tegrabl_i2c_open(instance);
    9600f26c:	2a1403e0 	mov	w0, w20
    9600f270:	97fffd68 	bl	9600e810 <tegrabl_i2c_open>
	if (hi2c == NULL) {
    9600f274:	b50001a0 	cbnz	x0, 9600f2a8 <tegrabl_i2c_dev_open+0xb4>
		tegrabl_free(hi2cdev);
    9600f278:	aa1303e0 	mov	x0, x19
    9600f27c:	94005e0f 	bl	96026ab8 <tegrabl_free>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "instance %d", instance);
    9600f280:	52800242 	mov	w2, #0x12                  	// #18
    9600f284:	2a1403e4 	mov	w4, w20
    9600f288:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f28c:	72a004e2 	movk	w2, #0x27, lsl #16
    9600f290:	9108f863 	add	x3, x3, #0x23e
    9600f294:	52800041 	mov	w1, #0x2                   	// #2
    9600f298:	52800000 	mov	w0, #0x0                   	// #0
		return NULL;
    9600f29c:	d2800013 	mov	x19, #0x0                   	// #0
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "instance %d", instance);
    9600f2a0:	94003c18 	bl	9601e300 <tegrabl_error_print>
		return NULL;
    9600f2a4:	17ffffec 	b	9600f254 <tegrabl_i2c_dev_open+0x60>
	hi2cdev->instance = instance;
    9600f2a8:	b9000274 	str	w20, [x19]
	hi2cdev->hi2c = hi2c;
    9600f2ac:	f9000660 	str	x0, [x19, #8]
	hi2cdev->slave_addr = (uint16_t)slave_addr;
    9600f2b0:	79002277 	strh	w23, [x19, #16]
	hi2cdev->bytes_per_reg = bytes_per_reg;
    9600f2b4:	2902d676 	stp	w22, w21, [x19, #20]
	hi2cdev->wait_time_for_write_us = 0;
    9600f2b8:	f900127f 	str	xzr, [x19, #32]
	return hi2cdev;
    9600f2bc:	17ffffe6 	b	9600f254 <tegrabl_i2c_dev_open+0x60>

000000009600f2c0 <tegrabl_i2c_dev_read>:

tegrabl_error_t tegrabl_i2c_dev_read(struct tegrabl_i2c_dev *hi2cdev, void *buf,
	uint32_t reg_addr, uint32_t reg_count)
{
    9600f2c0:	d10243ff 	sub	sp, sp, #0x90
	uint32_t i;
	uint32_t j = 0;

	pr_trace("%s: entry\n", __func__);

	if ((hi2cdev == NULL) || (buf == NULL)) {
    9600f2c4:	f100001f 	cmp	x0, #0x0
    9600f2c8:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9600f2cc:	a9017bfd 	stp	x29, x30, [sp, #16]
    9600f2d0:	910043fd 	add	x29, sp, #0x10
    9600f2d4:	a90253f3 	stp	x19, x20, [sp, #32]
    9600f2d8:	a9035bf5 	stp	x21, x22, [sp, #48]
    9600f2dc:	aa0003f5 	mov	x21, x0
    9600f2e0:	a90463f7 	stp	x23, x24, [sp, #64]
    9600f2e4:	a9056bf9 	stp	x25, x26, [sp, #80]
    9600f2e8:	aa0103fa 	mov	x26, x1
    9600f2ec:	a90673fb 	stp	x27, x28, [sp, #96]
    9600f2f0:	b9007ba3 	str	w3, [x29, #120]
	if ((hi2cdev == NULL) || (buf == NULL)) {
    9600f2f4:	540002a1 	b.ne	9600f348 <tegrabl_i2c_dev_read+0x88>  // b.any
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_I2C_DEV_READ);
    9600f2f8:	52802553 	mov	w19, #0x12a                 	// #298
		TEGRABL_SET_ERROR_STRING(error, "hi2cdev %p, buf %p", hi2cdev, buf);
    9600f2fc:	52802542 	mov	w2, #0x12a                 	// #298
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_I2C_DEV_READ);
    9600f300:	72a4e4f3 	movk	w19, #0x2727, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "hi2cdev %p, buf %p", hi2cdev, buf);
    9600f304:	aa0103e5 	mov	x5, x1
    9600f308:	aa0003e4 	mov	x4, x0
    9600f30c:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f310:	72a4e4e2 	movk	w2, #0x2727, lsl #16
    9600f314:	91064863 	add	x3, x3, #0x192
    9600f318:	52800041 	mov	w1, #0x2                   	// #2
    9600f31c:	52800020 	mov	w0, #0x1                   	// #1
    9600f320:	94003bf8 	bl	9601e300 <tegrabl_error_print>
		tegrabl_free(buffer);
	}

invalid_param:
	return error;
}
    9600f324:	2a1303e0 	mov	w0, w19
    9600f328:	a9417bfd 	ldp	x29, x30, [sp, #16]
    9600f32c:	a94253f3 	ldp	x19, x20, [sp, #32]
    9600f330:	a9435bf5 	ldp	x21, x22, [sp, #48]
    9600f334:	a94463f7 	ldp	x23, x24, [sp, #64]
    9600f338:	a9456bf9 	ldp	x25, x26, [sp, #80]
    9600f33c:	a94673fb 	ldp	x27, x28, [sp, #96]
    9600f340:	910243ff 	add	sp, sp, #0x90
    9600f344:	d65f03c0 	ret
	slave_addr = hi2cdev->slave_addr;
    9600f348:	79402000 	ldrh	w0, [x0, #16]
    9600f34c:	2a0203f8 	mov	w24, w2
	bytes_per_reg = hi2cdev->bytes_per_reg;
    9600f350:	2942deb9 	ldp	w25, w23, [x21, #20]
	slave_addr = hi2cdev->slave_addr;
    9600f354:	b9007fa0 	str	w0, [x29, #124]
	if (reg_addr_size > sizeof(reg_addr)) {
    9600f358:	7100133f 	cmp	w25, #0x4
    9600f35c:	540003a9 	b.ls	9600f3d0 <tegrabl_i2c_dev_read+0x110>  // b.plast
		error = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE, TEGRABL_I2C_DEV_READ);
    9600f360:	528020f3 	mov	w19, #0x107                 	// #263
	uint8_t *buffer = NULL;
    9600f364:	d2800016 	mov	x22, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE, TEGRABL_I2C_DEV_READ);
    9600f368:	72a4e4f3 	movk	w19, #0x2727, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "register address size %d", "%d",
    9600f36c:	528020e2 	mov	w2, #0x107                 	// #263
    9600f370:	52800086 	mov	w6, #0x4                   	// #4
    9600f374:	2a1903e5 	mov	w5, w25
    9600f378:	f0000164 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600f37c:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f380:	9102f484 	add	x4, x4, #0xbd
    9600f384:	91069463 	add	x3, x3, #0x1a5
    9600f388:	72a4e4e2 	movk	w2, #0x2727, lsl #16
    9600f38c:	52800041 	mov	w1, #0x2                   	// #2
    9600f390:	52800020 	mov	w0, #0x1                   	// #1
    9600f394:	94003bdb 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED,
    9600f398:	294f1ba4 	ldp	w4, w6, [x29, #120]
    9600f39c:	52800322 	mov	w2, #0x19                  	// #25
    9600f3a0:	b94002a0 	ldr	w0, [x21]
    9600f3a4:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f3a8:	b90003e0 	str	w0, [sp]
    9600f3ac:	2a1803e7 	mov	w7, w24
    9600f3b0:	2a1703e5 	mov	w5, w23
    9600f3b4:	91081863 	add	x3, x3, #0x206
    9600f3b8:	72a004e2 	movk	w2, #0x27, lsl #16
    9600f3bc:	52800041 	mov	w1, #0x2                   	// #2
    9600f3c0:	52800000 	mov	w0, #0x0                   	// #0
    9600f3c4:	94003bcf 	bl	9601e300 <tegrabl_error_print>
	if (buffer != NULL) {
    9600f3c8:	b4fffaf6 	cbz	x22, 9600f324 <tegrabl_i2c_dev_read+0x64>
    9600f3cc:	1400005b 	b	9600f538 <tegrabl_i2c_dev_read+0x278>
	hi2c = hi2cdev->hi2c;
    9600f3d0:	f94006a0 	ldr	x0, [x21, #8]
    9600f3d4:	f9003ba0 	str	x0, [x29, #112]
	buffer = tegrabl_malloc(reg_addr_size);
    9600f3d8:	2a1903e0 	mov	w0, w25
    9600f3dc:	94005da7 	bl	96026a78 <tegrabl_malloc>
    9600f3e0:	aa0003f6 	mov	x22, x0
	if (buffer == NULL) {
    9600f3e4:	b50001c0 	cbnz	x0, 9600f41c <tegrabl_i2c_dev_read+0x15c>
		TEGRABL_SET_ERROR_STRING(error, "%d", "register address computation", reg_addr_size);
    9600f3e8:	52802062 	mov	w2, #0x103                 	// #259
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_I2C_DEV_READ);
    9600f3ec:	52802073 	mov	w19, #0x103                 	// #259
		TEGRABL_SET_ERROR_STRING(error, "%d", "register address computation", reg_addr_size);
    9600f3f0:	2a1903e5 	mov	w5, w25
    9600f3f4:	f0000164 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600f3f8:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f3fc:	9106f884 	add	x4, x4, #0x1be
    9600f400:	9102f463 	add	x3, x3, #0xbd
    9600f404:	72a4e4e2 	movk	w2, #0x2727, lsl #16
    9600f408:	52800041 	mov	w1, #0x2                   	// #2
    9600f40c:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_I2C_DEV_READ);
    9600f410:	72a4e4f3 	movk	w19, #0x2727, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "%d", "register address computation", reg_addr_size);
    9600f414:	94003bbb 	bl	9601e300 <tegrabl_error_print>
    9600f418:	17ffffe0 	b	9600f398 <tegrabl_i2c_dev_read+0xd8>
	regs_remaining = reg_count;
    9600f41c:	b9407bbb 	ldr	w27, [x29, #120]
	curr_reg_addr = reg_addr;
    9600f420:	2a1803fc 	mov	w28, w24
	uint32_t j = 0;
    9600f424:	52800008 	mov	w8, #0x0                   	// #0
			regs_to_transfer = DIV_FLOOR(MAX_I2C_TRANSFER_SIZE, bytes_per_reg);
    9600f428:	5282000a 	mov	w10, #0x1000                	// #4096
		if ((regs_remaining * bytes_per_reg) < MAX_I2C_TRANSFER_SIZE) {
    9600f42c:	1b177f60 	mul	w0, w27, w23
    9600f430:	713ffc1f 	cmp	w0, #0xfff
    9600f434:	54000469 	b.ls	9600f4c0 <tegrabl_i2c_dev_read+0x200>  // b.plast
			regs_to_transfer = DIV_FLOOR(MAX_I2C_TRANSFER_SIZE, bytes_per_reg);
    9600f438:	1ad70954 	udiv	w20, w10, w23
    9600f43c:	1b17aa94 	msub	w20, w20, w23, w10
    9600f440:	4b140154 	sub	w20, w10, w20
    9600f444:	1ad70a94 	udiv	w20, w20, w23
		repeat_start = regs_remaining ? true : false;
    9600f448:	6b14037b 	subs	w27, w27, w20
    9600f44c:	d2800000 	mov	x0, #0x0                   	// #0
    9600f450:	1a9f07f3 	cset	w19, ne  // ne = any
			buffer[i] = (uint8_t)((curr_reg_addr >> (8U * i)) & 0xFFU);
    9600f454:	531d7001 	lsl	w1, w0, #3
    9600f458:	11000404 	add	w4, w0, #0x1
    9600f45c:	1ac12781 	lsr	w1, w28, w1
    9600f460:	38206ac1 	strb	w1, [x22, x0]
    9600f464:	91000400 	add	x0, x0, #0x1
		} while (++i < reg_addr_size);
    9600f468:	6b00033f 	cmp	w25, w0
    9600f46c:	54ffff48 	b.hi	9600f454 <tegrabl_i2c_dev_read+0x194>  // b.pmore
		error = tegrabl_i2c_write(hi2c, slave_addr, true, buffer, i);
    9600f470:	7940fba1 	ldrh	w1, [x29, #124]
    9600f474:	aa1603e3 	mov	x3, x22
    9600f478:	f9403ba0 	ldr	x0, [x29, #112]
    9600f47c:	52800022 	mov	w2, #0x1                   	// #1
    9600f480:	b9006fa8 	str	w8, [x29, #108]
    9600f484:	97fffdf3 	bl	9600ec50 <tegrabl_i2c_write>
		if (error != TEGRABL_NO_ERROR) {
    9600f488:	b9406fa8 	ldr	w8, [x29, #108]
    9600f48c:	340001e0 	cbz	w0, 9600f4c8 <tegrabl_i2c_dev_read+0x208>
    9600f490:	12005c00 	and	w0, w0, #0xffffff
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_SEND_FAILED, "register address 0x%08x", reg_addr);
    9600f494:	52800662 	mov	w2, #0x33                  	// #51
    9600f498:	52a4e013 	mov	w19, #0x27000000            	// #654311424
    9600f49c:	2a1803e4 	mov	w4, w24
    9600f4a0:	2a130013 	orr	w19, w0, w19
    9600f4a4:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f4a8:	72a004e2 	movk	w2, #0x27, lsl #16
    9600f4ac:	9107b863 	add	x3, x3, #0x1ee
    9600f4b0:	52800041 	mov	w1, #0x2                   	// #2
    9600f4b4:	52800000 	mov	w0, #0x0                   	// #0
    9600f4b8:	94003b92 	bl	9601e300 <tegrabl_error_print>
			goto fail;
    9600f4bc:	17ffffb7 	b	9600f398 <tegrabl_i2c_dev_read+0xd8>
			regs_to_transfer = regs_remaining;
    9600f4c0:	2a1b03f4 	mov	w20, w27
    9600f4c4:	17ffffe1 	b	9600f448 <tegrabl_i2c_dev_read+0x188>
		i = regs_to_transfer * bytes_per_reg;
    9600f4c8:	1b177e89 	mul	w9, w20, w23
		error = tegrabl_i2c_read(hi2c, slave_addr, repeat_start, &pbuf[j], i);
    9600f4cc:	7940fba1 	ldrh	w1, [x29, #124]
    9600f4d0:	f9403ba0 	ldr	x0, [x29, #112]
    9600f4d4:	8b284343 	add	x3, x26, w8, uxtw
    9600f4d8:	2a0903e4 	mov	w4, w9
    9600f4dc:	2a1303e2 	mov	w2, w19
    9600f4e0:	290d23a9 	stp	w9, w8, [x29, #104]
    9600f4e4:	97fffd5a 	bl	9600ea4c <tegrabl_i2c_read>
    9600f4e8:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9600f4ec:	5282000a 	mov	w10, #0x1000                	// #4096
    9600f4f0:	294d23a9 	ldp	w9, w8, [x29, #104]
    9600f4f4:	340001c0 	cbz	w0, 9600f52c <tegrabl_i2c_dev_read+0x26c>
    9600f4f8:	12005c13 	and	w19, w0, #0xffffff
    9600f4fc:	52a4e001 	mov	w1, #0x27000000            	// #654311424
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED,
    9600f500:	52800322 	mov	w2, #0x19                  	// #25
    9600f504:	2a010273 	orr	w19, w19, w1
    9600f508:	2a1803e5 	mov	w5, w24
    9600f50c:	2a0903e4 	mov	w4, w9
    9600f510:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f514:	72a004e2 	movk	w2, #0x27, lsl #16
    9600f518:	91076c63 	add	x3, x3, #0x1db
    9600f51c:	52800041 	mov	w1, #0x2                   	// #2
    9600f520:	52800000 	mov	w0, #0x0                   	// #0
    9600f524:	94003b77 	bl	9601e300 <tegrabl_error_print>
			goto fail;
    9600f528:	17ffff9c 	b	9600f398 <tegrabl_i2c_dev_read+0xd8>
		j += i;
    9600f52c:	0b090108 	add	w8, w8, w9
		curr_reg_addr += regs_to_transfer;
    9600f530:	0b14039c 	add	w28, w28, w20
	} while (regs_remaining != 0U);
    9600f534:	35fff7db 	cbnz	w27, 9600f42c <tegrabl_i2c_dev_read+0x16c>
		tegrabl_free(buffer);
    9600f538:	aa1603e0 	mov	x0, x22
    9600f53c:	94005d5f 	bl	96026ab8 <tegrabl_free>
	return error;
    9600f540:	17ffff79 	b	9600f324 <tegrabl_i2c_dev_read+0x64>

000000009600f544 <tegrabl_i2c_dev_write>:

tegrabl_error_t tegrabl_i2c_dev_write(struct tegrabl_i2c_dev *hi2cdev,
	const void *buf, uint32_t reg_addr, uint32_t reg_count)
{
    9600f544:	d10243ff 	sub	sp, sp, #0x90
	uint32_t i;
	uint32_t j = 0;

	pr_trace("%s: entry\n", __func__);

	if ((hi2cdev == NULL) || (buf == NULL)) {
    9600f548:	f100001f 	cmp	x0, #0x0
    9600f54c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9600f550:	a9017bfd 	stp	x29, x30, [sp, #16]
    9600f554:	910043fd 	add	x29, sp, #0x10
    9600f558:	a90253f3 	stp	x19, x20, [sp, #32]
    9600f55c:	a9035bf5 	stp	x21, x22, [sp, #48]
    9600f560:	a90463f7 	stp	x23, x24, [sp, #64]
    9600f564:	aa0103f8 	mov	x24, x1
    9600f568:	a9056bf9 	stp	x25, x26, [sp, #80]
    9600f56c:	a90673fb 	stp	x27, x28, [sp, #96]
    9600f570:	aa0003fb 	mov	x27, x0
	if ((hi2cdev == NULL) || (buf == NULL)) {
    9600f574:	540002a1 	b.ne	9600f5c8 <tegrabl_i2c_dev_write+0x84>  // b.any
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_I2C_DEV_WRITE);
    9600f578:	5280455a 	mov	w26, #0x22a                 	// #554
		TEGRABL_SET_ERROR_STRING(error, "hi2cdev %p, buf %p", hi2cdev, buf);
    9600f57c:	52804542 	mov	w2, #0x22a                 	// #554
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_I2C_DEV_WRITE);
    9600f580:	72a4e4fa 	movk	w26, #0x2727, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "hi2cdev %p, buf %p", hi2cdev, buf);
    9600f584:	aa0103e5 	mov	x5, x1
    9600f588:	aa0003e4 	mov	x4, x0
    9600f58c:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f590:	72a4e4e2 	movk	w2, #0x2727, lsl #16
    9600f594:	91064863 	add	x3, x3, #0x192
    9600f598:	52800041 	mov	w1, #0x2                   	// #2
    9600f59c:	52800020 	mov	w0, #0x1                   	// #1
    9600f5a0:	94003b58 	bl	9601e300 <tegrabl_error_print>
		tegrabl_free(buffer);
	}

invalid_param:
	return error;
}
    9600f5a4:	2a1a03e0 	mov	w0, w26
    9600f5a8:	a9417bfd 	ldp	x29, x30, [sp, #16]
    9600f5ac:	a94253f3 	ldp	x19, x20, [sp, #32]
    9600f5b0:	a9435bf5 	ldp	x21, x22, [sp, #48]
    9600f5b4:	a94463f7 	ldp	x23, x24, [sp, #64]
    9600f5b8:	a9456bf9 	ldp	x25, x26, [sp, #80]
    9600f5bc:	a94673fb 	ldp	x27, x28, [sp, #96]
    9600f5c0:	910243ff 	add	sp, sp, #0x90
    9600f5c4:	d65f03c0 	ret
	slave_addr = hi2cdev->slave_addr;
    9600f5c8:	79402000 	ldrh	w0, [x0, #16]
    9600f5cc:	2a0203f7 	mov	w23, w2
	bytes_per_reg = hi2cdev->bytes_per_reg;
    9600f5d0:	2942d77c 	ldp	w28, w21, [x27, #20]
	slave_addr = hi2cdev->slave_addr;
    9600f5d4:	b9007fa0 	str	w0, [x29, #124]
    9600f5d8:	2a0303f6 	mov	w22, w3
	if (reg_addr_size > sizeof(reg_addr)) {
    9600f5dc:	7100139f 	cmp	w28, #0x4
    9600f5e0:	540003c9 	b.ls	9600f658 <tegrabl_i2c_dev_write+0x114>  // b.plast
		error = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE, TEGRABL_I2C_DEV_WRITE);
    9600f5e4:	528040fa 	mov	w26, #0x207                 	// #519
	uint8_t *buffer = NULL;
    9600f5e8:	d2800014 	mov	x20, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE, TEGRABL_I2C_DEV_WRITE);
    9600f5ec:	72a4e4fa 	movk	w26, #0x2727, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "register address size %d", "%d",
    9600f5f0:	528040e2 	mov	w2, #0x207                 	// #519
    9600f5f4:	52800086 	mov	w6, #0x4                   	// #4
    9600f5f8:	2a1c03e5 	mov	w5, w28
    9600f5fc:	f0000164 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600f600:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f604:	9102f484 	add	x4, x4, #0xbd
    9600f608:	91069463 	add	x3, x3, #0x1a5
    9600f60c:	72a4e4e2 	movk	w2, #0x2727, lsl #16
    9600f610:	52800041 	mov	w1, #0x2                   	// #2
    9600f614:	52800020 	mov	w0, #0x1                   	// #1
    9600f618:	94003b3a 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_WRITE_FAILED,
    9600f61c:	b9407fa6 	ldr	w6, [x29, #124]
    9600f620:	52800342 	mov	w2, #0x1a                  	// #26
    9600f624:	b9400360 	ldr	w0, [x27]
    9600f628:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f62c:	b90003e0 	str	w0, [sp]
    9600f630:	2a1703e7 	mov	w7, w23
    9600f634:	2a1503e5 	mov	w5, w21
    9600f638:	2a1603e4 	mov	w4, w22
    9600f63c:	91092863 	add	x3, x3, #0x24a
    9600f640:	72a004e2 	movk	w2, #0x27, lsl #16
    9600f644:	52800041 	mov	w1, #0x2                   	// #2
    9600f648:	52800000 	mov	w0, #0x0                   	// #0
    9600f64c:	94003b2d 	bl	9601e300 <tegrabl_error_print>
	if (buffer != NULL) {
    9600f650:	b4fffab4 	cbz	x20, 9600f5a4 <tegrabl_i2c_dev_write+0x60>
    9600f654:	14000053 	b	9600f7a0 <tegrabl_i2c_dev_write+0x25c>
	hi2c = hi2cdev->hi2c;
    9600f658:	f9400760 	ldr	x0, [x27, #8]
	buffer = tegrabl_malloc(MIN((reg_addr_size + (reg_count * bytes_per_reg)),
    9600f65c:	52820013 	mov	w19, #0x1000                	// #4096
	hi2c = hi2cdev->hi2c;
    9600f660:	f9003ba0 	str	x0, [x29, #112]
	buffer = tegrabl_malloc(MIN((reg_addr_size + (reg_count * bytes_per_reg)),
    9600f664:	1b0372a0 	madd	w0, w21, w3, w28
    9600f668:	6b13001f 	cmp	w0, w19
    9600f66c:	1a939000 	csel	w0, w0, w19, ls  // ls = plast
    9600f670:	94005d02 	bl	96026a78 <tegrabl_malloc>
    9600f674:	aa0003f4 	mov	x20, x0
	if (buffer == NULL) {
    9600f678:	b50001c0 	cbnz	x0, 9600f6b0 <tegrabl_i2c_dev_write+0x16c>
		TEGRABL_SET_ERROR_STRING(error, "%d", "register address computation", reg_addr_size);
    9600f67c:	52804062 	mov	w2, #0x203                 	// #515
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_I2C_DEV_WRITE);
    9600f680:	5280407a 	mov	w26, #0x203                 	// #515
		TEGRABL_SET_ERROR_STRING(error, "%d", "register address computation", reg_addr_size);
    9600f684:	2a1c03e5 	mov	w5, w28
    9600f688:	f0000164 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    9600f68c:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f690:	9106f884 	add	x4, x4, #0x1be
    9600f694:	9102f463 	add	x3, x3, #0xbd
    9600f698:	72a4e4e2 	movk	w2, #0x2727, lsl #16
    9600f69c:	52800041 	mov	w1, #0x2                   	// #2
    9600f6a0:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_I2C_DEV_WRITE);
    9600f6a4:	72a4e4fa 	movk	w26, #0x2727, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "%d", "register address computation", reg_addr_size);
    9600f6a8:	94003b16 	bl	9601e300 <tegrabl_error_print>
    9600f6ac:	17ffffdc 	b	9600f61c <tegrabl_i2c_dev_write+0xd8>
	regs_remaining = reg_count;
    9600f6b0:	2a1603e6 	mov	w6, w22
	curr_reg_addr = reg_addr;
    9600f6b4:	2a1703e8 	mov	w8, w23
			regs_to_transfer = DIV_FLOOR(
    9600f6b8:	4b1c0267 	sub	w7, w19, w28
	uint32_t j = 0;
    9600f6bc:	52800019 	mov	w25, #0x0                   	// #0
		if (((regs_remaining * bytes_per_reg) + reg_addr_size) <
    9600f6c0:	1b1570c0 	madd	w0, w6, w21, w28
    9600f6c4:	713ffc1f 	cmp	w0, #0xfff
    9600f6c8:	54000609 	b.ls	9600f788 <tegrabl_i2c_dev_write+0x244>  // b.plast
			regs_to_transfer = DIV_FLOOR(
    9600f6cc:	1ad508f3 	udiv	w19, w7, w21
    9600f6d0:	1b159e73 	msub	w19, w19, w21, w7
    9600f6d4:	4b1300f3 	sub	w19, w7, w19
    9600f6d8:	1ad50a73 	udiv	w19, w19, w21
		repeat_start = regs_remaining ? true : false;
    9600f6dc:	6b1300c6 	subs	w6, w6, w19
    9600f6e0:	d2800000 	mov	x0, #0x0                   	// #0
    9600f6e4:	1a9f07ea 	cset	w10, ne  // ne = any
			buffer[i] = (uint8_t)((curr_reg_addr >> (8U * i)) & 0xFFU);
    9600f6e8:	531d7001 	lsl	w1, w0, #3
    9600f6ec:	11000404 	add	w4, w0, #0x1
    9600f6f0:	1ac12501 	lsr	w1, w8, w1
    9600f6f4:	38206a81 	strb	w1, [x20, x0]
    9600f6f8:	91000400 	add	x0, x0, #0x1
		} while (++i < reg_addr_size);
    9600f6fc:	6b00039f 	cmp	w28, w0
    9600f700:	54ffff48 	b.hi	9600f6e8 <tegrabl_i2c_dev_write+0x1a4>  // b.pmore
		memcpy(&buffer[i], &pbuf[j], regs_to_transfer * bytes_per_reg);
    9600f704:	1b157e62 	mul	w2, w19, w21
    9600f708:	290c2ba7 	stp	w7, w10, [x29, #96]
    9600f70c:	8b394301 	add	x1, x24, w25, uxtw
    9600f710:	290d23a6 	stp	w6, w8, [x29, #104]
    9600f714:	aa0203fa 	mov	x26, x2
    9600f718:	8b244280 	add	x0, x20, w4, uxtw
		j += regs_to_transfer * bytes_per_reg;
    9600f71c:	0b020339 	add	w25, w25, w2
		memcpy(&buffer[i], &pbuf[j], regs_to_transfer * bytes_per_reg);
    9600f720:	b9007ba4 	str	w4, [x29, #120]
    9600f724:	94006a00 	bl	96029f24 <memcpy>
		error = tegrabl_i2c_write(hi2c, slave_addr, repeat_start, buffer, i);
    9600f728:	b94067aa 	ldr	w10, [x29, #100]
    9600f72c:	aa1403e3 	mov	x3, x20
    9600f730:	7940fba1 	ldrh	w1, [x29, #124]
    9600f734:	f9403ba0 	ldr	x0, [x29, #112]
    9600f738:	2a0a03e2 	mov	w2, w10
    9600f73c:	b9407ba4 	ldr	w4, [x29, #120]
    9600f740:	0b040344 	add	w4, w26, w4
    9600f744:	97fffd43 	bl	9600ec50 <tegrabl_i2c_write>
    9600f748:	2a0003fa 	mov	w26, w0
		if (error != TEGRABL_NO_ERROR) {
    9600f74c:	b94063a7 	ldr	w7, [x29, #96]
    9600f750:	294d23a6 	ldp	w6, w8, [x29, #104]
    9600f754:	340001e0 	cbz	w0, 9600f790 <tegrabl_i2c_dev_write+0x24c>
    9600f758:	12005c1a 	and	w26, w0, #0xffffff
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_SEND_FAILED, "register address 0x%08x", reg_addr);
    9600f75c:	52800662 	mov	w2, #0x33                  	// #51
    9600f760:	52a4e000 	mov	w0, #0x27000000            	// #654311424
    9600f764:	2a1703e4 	mov	w4, w23
    9600f768:	2a00035a 	orr	w26, w26, w0
    9600f76c:	f0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9600f770:	72a004e2 	movk	w2, #0x27, lsl #16
    9600f774:	9107b863 	add	x3, x3, #0x1ee
    9600f778:	52800041 	mov	w1, #0x2                   	// #2
    9600f77c:	52800000 	mov	w0, #0x0                   	// #0
    9600f780:	94003ae0 	bl	9601e300 <tegrabl_error_print>
    9600f784:	17ffffa6 	b	9600f61c <tegrabl_i2c_dev_write+0xd8>
			regs_to_transfer = regs_remaining;
    9600f788:	2a0603f3 	mov	w19, w6
    9600f78c:	17ffffd4 	b	9600f6dc <tegrabl_i2c_dev_write+0x198>
		curr_reg_addr += regs_to_transfer;
    9600f790:	0b130108 	add	w8, w8, w19
	} while (regs_remaining != 0U);
    9600f794:	35fff966 	cbnz	w6, 9600f6c0 <tegrabl_i2c_dev_write+0x17c>
	tegrabl_udelay((time_t)hi2cdev->wait_time_for_write_us);
    9600f798:	f9401360 	ldr	x0, [x27, #32]
    9600f79c:	94004142 	bl	9601fca4 <tegrabl_udelay>
		tegrabl_free(buffer);
    9600f7a0:	aa1403e0 	mov	x0, x20
    9600f7a4:	94005cc5 	bl	96026ab8 <tegrabl_free>
	return error;
    9600f7a8:	17ffff7f 	b	9600f5a4 <tegrabl_i2c_dev_write+0x60>

000000009600f7ac <tegrabl_pmic_register>:
tegrabl_error_t tegrabl_pmic_register(tegrabl_pmic_t *drv)
{
	tegrabl_pmic_t *entry;
	bool duplicate = false;

	if (!drv || !drv->phandle) {
    9600f7ac:	b40004c0 	cbz	x0, 9600f844 <tegrabl_pmic_register+0x98>
    9600f7b0:	b9401001 	ldr	w1, [x0, #16]
    9600f7b4:	34000481 	cbz	w1, 9600f844 <tegrabl_pmic_register+0x98>
{
    9600f7b8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9600f7bc:	910003fd 	mov	x29, sp
    9600f7c0:	a90153f3 	stp	x19, x20, [sp, #16]
    9600f7c4:	aa0003f3 	mov	x19, x0
		return TEGRABL_ERR_BAD_PARAMETER;
	}

	/* check if duplicate */
	list_for_every_entry(&pmic_list, entry, tegrabl_pmic_t, node) {
    9600f7c8:	f00002e0 	adrp	x0, 9606e000 <__bss_start>
    9600f7cc:	911dc000 	add	x0, x0, #0x770
    9600f7d0:	f9400414 	ldr	x20, [x0, #8]
    9600f7d4:	eb00029f 	cmp	x20, x0
    9600f7d8:	54000181 	b.ne	9600f808 <tegrabl_pmic_register+0x5c>  // b.any
			break;
		}
	}

	if (!duplicate) {
		pr_info("registered '%s' pmic\n", drv->name);
    9600f7dc:	91005261 	add	x1, x19, #0x14
    9600f7e0:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600f7e4:	910ab400 	add	x0, x0, #0x2ad
    9600f7e8:	94004ba2 	bl	96022670 <tegrabl_printf>
	item->next = list->next;
    9600f7ec:	f9400680 	ldr	x0, [x20, #8]
    9600f7f0:	a9000274 	stp	x20, x0, [x19]
	list->next->prev = item;
    9600f7f4:	f9400680 	ldr	x0, [x20, #8]
    9600f7f8:	f9000013 	str	x19, [x0]
		list_add_head(&pmic_list, &drv->node);
	} else {
		return TEGRABL_ERR_ALREADY_EXISTS;
	}

	return TEGRABL_NO_ERROR;
    9600f7fc:	52800000 	mov	w0, #0x0                   	// #0
	list->next = item;
    9600f800:	f9000693 	str	x19, [x20, #8]
    9600f804:	1400000b 	b	9600f830 <tegrabl_pmic_register+0x84>
		if (entry->phandle == drv->phandle) {
    9600f808:	b9401282 	ldr	w2, [x20, #16]
    9600f80c:	6b02003f 	cmp	w1, w2
    9600f810:	54000161 	b.ne	9600f83c <tegrabl_pmic_register+0x90>  // b.any
			pr_info("pmic \"%s\" already registered\n", drv->name);
    9600f814:	91005261 	add	x1, x19, #0x14
    9600f818:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600f81c:	910a3000 	add	x0, x0, #0x28c
    9600f820:	94004b94 	bl	96022670 <tegrabl_printf>
			tegrabl_free(drv);
    9600f824:	aa1303e0 	mov	x0, x19
    9600f828:	94005ca4 	bl	96026ab8 <tegrabl_free>
		return TEGRABL_ERR_ALREADY_EXISTS;
    9600f82c:	52800420 	mov	w0, #0x21                  	// #33
}
    9600f830:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600f834:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600f838:	d65f03c0 	ret
	list_for_every_entry(&pmic_list, entry, tegrabl_pmic_t, node) {
    9600f83c:	f9400694 	ldr	x20, [x20, #8]
    9600f840:	17ffffe5 	b	9600f7d4 <tegrabl_pmic_register+0x28>
		return TEGRABL_ERR_BAD_PARAMETER;
    9600f844:	52800540 	mov	w0, #0x2a                  	// #42
}
    9600f848:	d65f03c0 	ret

000000009600f84c <tegrabl_pmic_init>:
	list->prev = list->next = list;
    9600f84c:	f00002e1 	adrp	x1, 9606e000 <__bss_start>
    9600f850:	911dc020 	add	x0, x1, #0x770
    9600f854:	f903b820 	str	x0, [x1, #1904]
    9600f858:	f9000400 	str	x0, [x0, #8]
 */
void tegrabl_pmic_init(void)
{
	list_initialize(&pmic_list);
	pr_debug("pmic framework initialized\n");
}
    9600f85c:	d65f03c0 	ret

000000009600f860 <enable_sd>:
	return TEGRABL_NO_ERROR;
}
static tegrabl_error_t enable_sd(int32_t phandle)
{
	return enable_sd_regulator(phandle, true);
}
    9600f860:	52800000 	mov	w0, #0x0                   	// #0
    9600f864:	d65f03c0 	ret

000000009600f868 <max77620_gpio_config>:
	 */
	TEGRABL_UNUSED(gpio_num);
	TEGRABL_UNUSED(mode);
	TEGRABL_UNUSED(drv_data);
	return TEGRABL_ERR_NOT_SUPPORTED;
}
    9600f868:	52800020 	mov	w0, #0x1                   	// #1
    9600f86c:	d65f03c0 	ret

000000009600f870 <max77620_gpio_read>:
	 */
	TEGRABL_UNUSED(gpio_num);
	TEGRABL_UNUSED(state);
	TEGRABL_UNUSED(drv_data);
	return TEGRABL_ERR_NOT_SUPPORTED;
}
    9600f870:	52800020 	mov	w0, #0x1                   	// #1
    9600f874:	d65f03c0 	ret

000000009600f878 <max77620_get_reset_reason>:

static tegrabl_error_t max77620_get_reset_reason(uint32_t *buf)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (!buf) {
    9600f878:	b4000200 	cbz	x0, 9600f8b8 <max77620_get_reset_reason+0x40>
    9600f87c:	aa0003e1 	mov	x1, x0
		return TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
	}

	if (hi2c_dev)
    9600f880:	f00002e0 	adrp	x0, 9606e000 <__bss_start>
    9600f884:	f943c800 	ldr	x0, [x0, #1936]
    9600f888:	b40001e0 	cbz	x0, 9600f8c4 <max77620_get_reset_reason+0x4c>
{
    9600f88c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		err = tegrabl_i2c_dev_read(hi2c_dev, buf, MAX77620_REG_NVERC, 1);
    9600f890:	52800023 	mov	w3, #0x1                   	// #1
    9600f894:	52800182 	mov	w2, #0xc                   	// #12
{
    9600f898:	910003fd 	mov	x29, sp
		err = tegrabl_i2c_dev_read(hi2c_dev, buf, MAX77620_REG_NVERC, 1);
    9600f89c:	97fffe89 	bl	9600f2c0 <tegrabl_i2c_dev_read>
	else
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);

	if (err != TEGRABL_NO_ERROR) {
    9600f8a0:	34000080 	cbz	w0, 9600f8b0 <max77620_get_reset_reason+0x38>
    9600f8a4:	12005c00 	and	w0, w0, #0xffffff
    9600f8a8:	52aac001 	mov	w1, #0x56000000            	// #1442840576
    9600f8ac:	2a010000 	orr	w0, w0, w1
		TEGRABL_SET_HIGHEST_MODULE(err);
	}

	return err;
}
    9600f8b0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9600f8b4:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    9600f8b8:	52800540 	mov	w0, #0x2a                  	// #42
    9600f8bc:	72aacac0 	movk	w0, #0x5656, lsl #16
    9600f8c0:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600f8c4:	52800040 	mov	w0, #0x2                   	// #2
    9600f8c8:	52aac001 	mov	w1, #0x56000000            	// #1442840576
    9600f8cc:	72aacac0 	movk	w0, #0x5656, lsl #16
    9600f8d0:	12005c00 	and	w0, w0, #0xffffff
    9600f8d4:	2a010000 	orr	w0, w0, w1
}
    9600f8d8:	d65f03c0 	ret

000000009600f8dc <max77620_poweroff>:
{
    9600f8dc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9600f8e0:	910003fd 	mov	x29, sp
    9600f8e4:	f9000bf3 	str	x19, [sp, #16]
	if (hi2c_dev)
    9600f8e8:	f00002f3 	adrp	x19, 9606e000 <__bss_start>
    9600f8ec:	f943ca60 	ldr	x0, [x19, #1936]
	uint8_t data = 0;
    9600f8f0:	3900bfbf 	strb	wzr, [x29, #47]
	if (hi2c_dev)
    9600f8f4:	b40002c0 	cbz	x0, 9600f94c <max77620_poweroff+0x70>
		err = tegrabl_i2c_dev_read(hi2c_dev, &data, reg, 1);
    9600f8f8:	52800023 	mov	w3, #0x1                   	// #1
    9600f8fc:	52800822 	mov	w2, #0x41                  	// #65
    9600f900:	9100bfa1 	add	x1, x29, #0x2f
    9600f904:	97fffe6f 	bl	9600f2c0 <tegrabl_i2c_dev_read>
	if (err != TEGRABL_NO_ERROR) {
    9600f908:	35000160 	cbnz	w0, 9600f934 <max77620_poweroff+0x58>
	data |=  (1 << PWR_OFF_BIT) | (1 << SW_RST_BIT);
    9600f90c:	3940bfa0 	ldrb	w0, [x29, #47]
    9600f910:	12800fa1 	mov	w1, #0xffffff82            	// #-126
	err = tegrabl_i2c_dev_write(hi2c_dev, &data, reg, 1);
    9600f914:	52800023 	mov	w3, #0x1                   	// #1
    9600f918:	52800822 	mov	w2, #0x41                  	// #65
	data |=  (1 << PWR_OFF_BIT) | (1 << SW_RST_BIT);
    9600f91c:	2a010000 	orr	w0, w0, w1
    9600f920:	3900bfa0 	strb	w0, [x29, #47]
	err = tegrabl_i2c_dev_write(hi2c_dev, &data, reg, 1);
    9600f924:	f943ca60 	ldr	x0, [x19, #1936]
    9600f928:	9100bfa1 	add	x1, x29, #0x2f
    9600f92c:	97ffff06 	bl	9600f544 <tegrabl_i2c_dev_write>
	if (err != TEGRABL_NO_ERROR) {
    9600f930:	34000080 	cbz	w0, 9600f940 <max77620_poweroff+0x64>
    9600f934:	12005c00 	and	w0, w0, #0xffffff
    9600f938:	52aac001 	mov	w1, #0x56000000            	// #1442840576
    9600f93c:	2a010000 	orr	w0, w0, w1
}
    9600f940:	f9400bf3 	ldr	x19, [sp, #16]
    9600f944:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9600f948:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600f94c:	52800040 	mov	w0, #0x2                   	// #2
    9600f950:	72aacac0 	movk	w0, #0x5656, lsl #16
    9600f954:	17fffff8 	b	9600f934 <max77620_poweroff+0x58>

000000009600f958 <set_regulator_voltage>:
{
    9600f958:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		if (s_props[i].phandle == phandle) {
    9600f95c:	d00001c2 	adrp	x2, 96049000 <default_srgb_lut+0xa28>
    9600f960:	9133c046 	add	x6, x2, #0xcf0
    9600f964:	aa0203e4 	mov	x4, x2
{
    9600f968:	910003fd 	mov	x29, sp
	uint8_t data = 0;
    9600f96c:	d2800005 	mov	x5, #0x0                   	// #0
		if (s_props[i].phandle == phandle) {
    9600f970:	d2800703 	mov	x3, #0x38                  	// #56
	uint8_t data = 0;
    9600f974:	39007fbf 	strb	wzr, [x29, #31]
		if (s_props[i].phandle == phandle) {
    9600f978:	9b037ca8 	mul	x8, x5, x3
    9600f97c:	12001ca7 	and	w7, w5, #0xff
    9600f980:	93407ca2 	sxtw	x2, w5
    9600f984:	b8666908 	ldr	w8, [x8, x6]
    9600f988:	6b00011f 	cmp	w8, w0
    9600f98c:	54000160 	b.eq	9600f9b8 <set_regulator_voltage+0x60>  // b.none
    9600f990:	910004a5 	add	x5, x5, #0x1
	for (i = 0; i < ARRAY_SIZE(s_props); i++) {
    9600f994:	f10034bf 	cmp	x5, #0xd
    9600f998:	54ffff01 	b.ne	9600f978 <set_regulator_voltage+0x20>  // b.any
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600f99c:	528001a0 	mov	w0, #0xd                   	// #13
    9600f9a0:	72aacac0 	movk	w0, #0x5656, lsl #16
}
    9600f9a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9600f9a8:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600f9ac:	52800040 	mov	w0, #0x2                   	// #2
    9600f9b0:	72aacac0 	movk	w0, #0x5656, lsl #16
    9600f9b4:	1400001c 	b	9600fa24 <set_regulator_voltage+0xcc>
	if ((volts < s_props[i].min_volts) || (volts > s_props[i].max_volts))
    9600f9b8:	9b031840 	madd	x0, x2, x3, x6
    9600f9bc:	b9402403 	ldr	w3, [x0, #36]
    9600f9c0:	6b01007f 	cmp	w3, w1
    9600f9c4:	54000108 	b.hi	9600f9e4 <set_regulator_voltage+0x8c>  // b.pmore
    9600f9c8:	b9402805 	ldr	w5, [x0, #40]
    9600f9cc:	6b0100bf 	cmp	w5, w1
    9600f9d0:	540000a3 	b.cc	9600f9e4 <set_regulator_voltage+0x8c>  // b.lo, b.ul, b.last
		data = (volts - s_props[i].min_volts) / s_props[i].step_volts;
    9600f9d4:	b9402000 	ldr	w0, [x0, #32]
    9600f9d8:	4b030021 	sub	w1, w1, w3
    9600f9dc:	1ac00821 	udiv	w1, w1, w0
    9600f9e0:	39007fa1 	strb	w1, [x29, #31]
	if (i > 3)
    9600f9e4:	71000cff 	cmp	w7, #0x3
    9600f9e8:	54000089 	b.ls	9600f9f8 <set_regulator_voltage+0xa0>  // b.plast
		data |= (3 << 6);
    9600f9ec:	39407fa0 	ldrb	w0, [x29, #31]
    9600f9f0:	321a6400 	orr	w0, w0, #0xffffffc0
    9600f9f4:	39007fa0 	strb	w0, [x29, #31]
	if (hi2c_dev)
    9600f9f8:	f00002e0 	adrp	x0, 9606e000 <__bss_start>
    9600f9fc:	f943c800 	ldr	x0, [x0, #1936]
    9600fa00:	b4fffd60 	cbz	x0, 9600f9ac <set_regulator_voltage+0x54>
		err = tegrabl_i2c_dev_write(hi2c_dev, &data, s_props[i].reg, 1);
    9600fa04:	9133c084 	add	x4, x4, #0xcf0
    9600fa08:	d2800701 	mov	x1, #0x38                  	// #56
    9600fa0c:	52800023 	mov	w3, #0x1                   	// #1
    9600fa10:	9b011042 	madd	x2, x2, x1, x4
    9600fa14:	91007fa1 	add	x1, x29, #0x1f
    9600fa18:	b9401842 	ldr	w2, [x2, #24]
    9600fa1c:	97fffeca 	bl	9600f544 <tegrabl_i2c_dev_write>
	if (err != TEGRABL_NO_ERROR)
    9600fa20:	34fffc20 	cbz	w0, 9600f9a4 <set_regulator_voltage+0x4c>
    9600fa24:	12005c00 	and	w0, w0, #0xffffff
    9600fa28:	52aac001 	mov	w1, #0x56000000            	// #1442840576
    9600fa2c:	2a010000 	orr	w0, w0, w1
	return err;
    9600fa30:	17ffffdd 	b	9600f9a4 <set_regulator_voltage+0x4c>

000000009600fa34 <set_sd_voltage>:
	return set_regulator_voltage(phandle, volts);
    9600fa34:	17ffffc9 	b	9600f958 <set_regulator_voltage>

000000009600fa38 <max77620_gpio_write>:
{
    9600fa38:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9600fa3c:	910003fd 	mov	x29, sp
    9600fa40:	a90153f3 	stp	x19, x20, [sp, #16]
	if (hi2c_dev)
    9600fa44:	f00002f4 	adrp	x20, 9606e000 <__bss_start>
{
    9600fa48:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (hi2c_dev)
    9600fa4c:	f943ca84 	ldr	x4, [x20, #1936]
	uint8_t data = 0;
    9600fa50:	3900ffbf 	strb	wzr, [x29, #63]
	if (hi2c_dev)
    9600fa54:	b40004e4 	cbz	x4, 9600faf0 <max77620_gpio_write+0xb8>
    9600fa58:	2a0103f6 	mov	w22, w1
    9600fa5c:	2a0003f3 	mov	w19, w0
		err = tegrabl_i2c_dev_read(hi2c_dev, &data, reg, 1);
    9600fa60:	52800023 	mov	w3, #0x1                   	// #1
    9600fa64:	52800802 	mov	w2, #0x40                  	// #64
    9600fa68:	9100ffa1 	add	x1, x29, #0x3f
    9600fa6c:	aa0403e0 	mov	x0, x4
    9600fa70:	97fffe14 	bl	9600f2c0 <tegrabl_i2c_dev_read>
	if (err != TEGRABL_NO_ERROR) {
    9600fa74:	35000300 	cbnz	w0, 9600fad4 <max77620_gpio_write+0x9c>
	data = data & (~(1 << gpio_num));
    9600fa78:	3940ffa1 	ldrb	w1, [x29, #63]
    9600fa7c:	52800035 	mov	w21, #0x1                   	// #1
    9600fa80:	1ad322a0 	lsl	w0, w21, w19
	err = tegrabl_i2c_dev_write(hi2c_dev, &data, reg, 1);
    9600fa84:	2a1503e3 	mov	w3, w21
	data = data & (~(1 << gpio_num));
    9600fa88:	0a200020 	bic	w0, w1, w0
    9600fa8c:	3900ffa0 	strb	w0, [x29, #63]
	err = tegrabl_i2c_dev_write(hi2c_dev, &data, reg, 1);
    9600fa90:	f943ca80 	ldr	x0, [x20, #1936]
    9600fa94:	52800802 	mov	w2, #0x40                  	// #64
    9600fa98:	9100ffa1 	add	x1, x29, #0x3f
    9600fa9c:	97fffeaa 	bl	9600f544 <tegrabl_i2c_dev_write>
	if (err != TEGRABL_NO_ERROR) {
    9600faa0:	350001a0 	cbnz	w0, 9600fad4 <max77620_gpio_write+0x9c>
	data = 0x00;
    9600faa4:	710002df 	cmp	w22, #0x0
    9600faa8:	52800120 	mov	w0, #0x9                   	// #9
    9600faac:	1a8003e0 	csel	w0, wzr, w0, eq  // eq = none
    9600fab0:	3900ffa0 	strb	w0, [x29, #63]
	err = tegrabl_i2c_dev_write(hi2c_dev, &data, gpio_reg[gpio_num], 1);
    9600fab4:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600fab8:	910b1800 	add	x0, x0, #0x2c6
    9600fabc:	2a1503e3 	mov	w3, w21
    9600fac0:	9100ffa1 	add	x1, x29, #0x3f
    9600fac4:	38f34802 	ldrsb	w2, [x0, w19, uxtw]
    9600fac8:	f943ca80 	ldr	x0, [x20, #1936]
    9600facc:	97fffe9e 	bl	9600f544 <tegrabl_i2c_dev_write>
	if (err != TEGRABL_NO_ERROR) {
    9600fad0:	34000080 	cbz	w0, 9600fae0 <max77620_gpio_write+0xa8>
    9600fad4:	12005c00 	and	w0, w0, #0xffffff
    9600fad8:	52aac001 	mov	w1, #0x56000000            	// #1442840576
    9600fadc:	2a010000 	orr	w0, w0, w1
}
    9600fae0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600fae4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600fae8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9600faec:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600faf0:	52800040 	mov	w0, #0x2                   	// #2
    9600faf4:	72aacac0 	movk	w0, #0x5656, lsl #16
    9600faf8:	17fffff7 	b	9600fad4 <max77620_gpio_write+0x9c>

000000009600fafc <enable_ldo>:
    9600fafc:	52800000 	mov	w0, #0x0                   	// #0
    9600fb00:	d65f03c0 	ret

000000009600fb04 <disable_ldo>:
    9600fb04:	52800000 	mov	w0, #0x0                   	// #0
    9600fb08:	d65f03c0 	ret

000000009600fb0c <disable_sd>:
    9600fb0c:	52800000 	mov	w0, #0x0                   	// #0
    9600fb10:	d65f03c0 	ret

000000009600fb14 <set_ldo_voltage>:
    9600fb14:	17ffff91 	b	9600f958 <set_regulator_voltage>

000000009600fb18 <tegrabl_max77620_init>:
/**
 * @brief - Registers max77620 driver routines with the pmic interface
 * @return - Error code
 */
tegrabl_error_t tegrabl_max77620_init(uint32_t i2c_instance)
{
    9600fb18:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
    9600fb1c:	910003fd 	mov	x29, sp
    9600fb20:	a90153f3 	stp	x19, x20, [sp, #16]
	uintptr_t reg;
	char *ptr = NULL;
	uint8_t slave_addr;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (NULL == fdt) {
    9600fb24:	f00002f4 	adrp	x20, 9606e000 <__bss_start>
{
    9600fb28:	a9025bf5 	stp	x21, x22, [sp, #32]
    9600fb2c:	2a0003f6 	mov	w22, w0
	if (NULL == fdt) {
    9600fb30:	f943c680 	ldr	x0, [x20, #1928]
{
    9600fb34:	a90363f7 	stp	x23, x24, [sp, #48]
    9600fb38:	a9046bf9 	stp	x25, x26, [sp, #64]
    9600fb3c:	a90573fb 	stp	x27, x28, [sp, #80]
	if (NULL == fdt) {
    9600fb40:	b40002a0 	cbz	x0, 9600fb94 <tegrabl_max77620_init+0x7c>
		}
	}

	/* Set fdt offset */
	internal_node_offset = 0;
	if (TEGRABL_NO_ERROR != tegrabl_dt_get_node_with_path(
    9600fb44:	f943c680 	ldr	x0, [x20, #1928]
	internal_node_offset = 0;
    9600fb48:	f00002f3 	adrp	x19, 9606e000 <__bss_start>
	if (TEGRABL_NO_ERROR != tegrabl_dt_get_node_with_path(
    9600fb4c:	f0000161 	adrp	x1, 9603e000 <tca9539_chips+0x378>
    9600fb50:	911e6262 	add	x2, x19, #0x798
	internal_node_offset = 0;
    9600fb54:	b9079a7f 	str	wzr, [x19, #1944]
	if (TEGRABL_NO_ERROR != tegrabl_dt_get_node_with_path(
    9600fb58:	910c2c21 	add	x1, x1, #0x30b
    9600fb5c:	aa1303f9 	mov	x25, x19
    9600fb60:	94008607 	bl	9603137c <tegrabl_dt_get_node_with_path>
    9600fb64:	2a0003f8 	mov	w24, w0
    9600fb68:	350002e0 	cbnz	w0, 9600fbc4 <tegrabl_max77620_init+0xac>
		pr_error("Cannot find DT node for 'bpmp_i2c' (pmic max77620)\n");
		goto fail;
	}


	phandle = fdt_get_phandle(fdt, internal_node_offset);
    9600fb6c:	b9479a61 	ldr	w1, [x19, #1944]
    9600fb70:	f943c680 	ldr	x0, [x20, #1928]
    9600fb74:	94008938 	bl	96032054 <fdt_get_phandle>
    9600fb78:	2a0003f5 	mov	w21, w0

	/* register only if any references of max77620 are found */
	if (!phandle) {
    9600fb7c:	350003c0 	cbnz	w0, 9600fbf4 <tegrabl_max77620_init+0xdc>
		pr_info("max77620 not used. Hence not registering\n");
    9600fb80:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600fb84:	910d4800 	add	x0, x0, #0x352
    9600fb88:	94004aba 	bl	96022670 <tegrabl_printf>

		/* obtain i2c_dev handle */
		hi2c_dev = tegrabl_i2c_dev_open(pmic_p->i2c_instance, slave_addr,
							 sizeof(uint8_t), sizeof(uint8_t));
		if (!hi2c_dev) {
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600fb8c:	52800058 	mov	w24, #0x2                   	// #2
    9600fb90:	14000043 	b	9600fc9c <tegrabl_max77620_init+0x184>
    9600fb94:	911e2281 	add	x1, x20, #0x788
		err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9600fb98:	52800000 	mov	w0, #0x0                   	// #0
    9600fb9c:	940084af 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
    9600fba0:	2a0003f8 	mov	w24, w0
		if (TEGRABL_NO_ERROR != err) {
    9600fba4:	34fffd00 	cbz	w0, 9600fb44 <tegrabl_max77620_init+0x2c>
			goto fail;
	}

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("tegrabl_max77620_init failed!!\n");
    9600fba8:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600fbac:	12005f18 	and	w24, w24, #0xffffff
    9600fbb0:	9115d800 	add	x0, x0, #0x576
    9600fbb4:	94004aaf 	bl	96022670 <tegrabl_printf>
    9600fbb8:	52aac000 	mov	w0, #0x56000000            	// #1442840576
    9600fbbc:	2a000318 	orr	w24, w24, w0
		TEGRABL_SET_HIGHEST_MODULE(err);
	}
	return err;
    9600fbc0:	14000005 	b	9600fbd4 <tegrabl_max77620_init+0xbc>
		goto fail;
    9600fbc4:	52800018 	mov	w24, #0x0                   	// #0
		pr_error("Cannot find DT node for 'bpmp_i2c' (pmic max77620)\n");
    9600fbc8:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600fbcc:	910c6c00 	add	x0, x0, #0x31b
    9600fbd0:	94004aa8 	bl	96022670 <tegrabl_printf>
}
    9600fbd4:	2a1803e0 	mov	w0, w24
    9600fbd8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9600fbdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9600fbe0:	a94363f7 	ldp	x23, x24, [sp, #48]
    9600fbe4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9600fbe8:	a94573fb 	ldp	x27, x28, [sp, #80]
    9600fbec:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9600fbf0:	d65f03c0 	ret
	pmic_p = (tegrabl_pmic_t *)tegrabl_calloc(1, sizeof(tegrabl_pmic_t));
    9600fbf4:	f00002f3 	adrp	x19, 9606e000 <__bss_start>
    9600fbf8:	d2800801 	mov	x1, #0x40                  	// #64
    9600fbfc:	d2800020 	mov	x0, #0x1                   	// #1
    9600fc00:	94005bb1 	bl	96026ac4 <tegrabl_calloc>
    9600fc04:	f903d260 	str	x0, [x19, #1952]
	if (pmic_p) {
    9600fc08:	b4fffe60 	cbz	x0, 9600fbd4 <tegrabl_max77620_init+0xbc>
		pmic_p->phandle = phandle;
    9600fc0c:	b9001015 	str	w21, [x0, #16]
		strcpy(ptr, MAXPMIC_COMPATIBLE);
    9600fc10:	f0000175 	adrp	x21, 9603e000 <tca9539_chips+0x378>
		pmic_p->i2c_instance = i2c_instance;
    9600fc14:	b9002816 	str	w22, [x0, #40]
		strcpy(ptr, MAXPMIC_COMPATIBLE);
    9600fc18:	910dfea1 	add	x1, x21, #0x37f
    9600fc1c:	91005000 	add	x0, x0, #0x14
    9600fc20:	940069a6 	bl	9602a2b8 <strcpy>
	return tegrabl_dt_get_prop_by_idx(fdt, node, prop, U32_SZ, 0, res);
    9600fc24:	b9479b21 	ldr	w1, [x25, #1944]
    9600fc28:	f0000162 	adrp	x2, 9603e000 <tca9539_chips+0x378>
    9600fc2c:	f943c680 	ldr	x0, [x20, #1928]
    9600fc30:	d2800005 	mov	x5, #0x0                   	// #0
    9600fc34:	52800004 	mov	w4, #0x0                   	// #0
    9600fc38:	d2800083 	mov	x3, #0x4                   	// #4
    9600fc3c:	910e3842 	add	x2, x2, #0x38e
    9600fc40:	940084db 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (tegrabl_dt_get_prop_u32(fdt, internal_node_offset,
    9600fc44:	34000160 	cbz	w0, 9600fc70 <tegrabl_max77620_init+0x158>
			pr_info("register 'maxim' power off handle\n");
    9600fc48:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600fc4c:	910ea800 	add	x0, x0, #0x3aa
    9600fc50:	94004a88 	bl	96022670 <tegrabl_printf>
			pmic_p->poweroff = max77620_poweroff;
    9600fc54:	f943d261 	ldr	x1, [x19, #1952]
    9600fc58:	90000000 	adrp	x0, 9600f000 <tegrabl_virtual_i2c_xfer+0x1b4>
    9600fc5c:	91237000 	add	x0, x0, #0x8dc
    9600fc60:	f9001820 	str	x0, [x1, #48]
			pmic_p->get_reset_reason = max77620_get_reset_reason;
    9600fc64:	90000000 	adrp	x0, 9600f000 <tegrabl_virtual_i2c_xfer+0x1b4>
    9600fc68:	9121e000 	add	x0, x0, #0x878
    9600fc6c:	f9001c20 	str	x0, [x1, #56]
		if (tegrabl_dt_read_reg_by_index(fdt, internal_node_offset,
    9600fc70:	b9479b21 	ldr	w1, [x25, #1944]
    9600fc74:	d2800004 	mov	x4, #0x0                   	// #0
    9600fc78:	f943c680 	ldr	x0, [x20, #1928]
    9600fc7c:	910243a3 	add	x3, x29, #0x90
    9600fc80:	52800002 	mov	w2, #0x0                   	// #0
    9600fc84:	940083ea 	bl	96030c2c <tegrabl_dt_read_reg_by_index>
    9600fc88:	340000e0 	cbz	w0, 9600fca4 <tegrabl_max77620_init+0x18c>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9600fc8c:	52802058 	mov	w24, #0x102                 	// #258
			pr_error("unable to find slave address\n");
    9600fc90:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600fc94:	910f4000 	add	x0, x0, #0x3d0
    9600fc98:	94004a76 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9600fc9c:	72aacad8 	movk	w24, #0x5656, lsl #16
    9600fca0:	17ffffc2 	b	9600fba8 <tegrabl_max77620_init+0x90>
		hi2c_dev = tegrabl_i2c_dev_open(pmic_p->i2c_instance, slave_addr,
    9600fca4:	f943d260 	ldr	x0, [x19, #1952]
    9600fca8:	f00002fa 	adrp	x26, 9606e000 <__bss_start>
    9600fcac:	f9404ba1 	ldr	x1, [x29, #144]
    9600fcb0:	52800023 	mov	w3, #0x1                   	// #1
    9600fcb4:	2a0303e2 	mov	w2, w3
    9600fcb8:	b9402800 	ldr	w0, [x0, #40]
    9600fcbc:	531f1821 	ubfiz	w1, w1, #1, #7
    9600fcc0:	97fffd4d 	bl	9600f1f4 <tegrabl_i2c_dev_open>
    9600fcc4:	f903cb40 	str	x0, [x26, #1936]
		if (!hi2c_dev) {
    9600fcc8:	b4fff620 	cbz	x0, 9600fb8c <tegrabl_max77620_init+0x74>
		if (tegrabl_pmic_register(pmic_p) != TEGRABL_NO_ERROR) {
    9600fccc:	f943d260 	ldr	x0, [x19, #1952]
    9600fcd0:	97fffeb7 	bl	9600f7ac <tegrabl_pmic_register>
    9600fcd4:	340000e0 	cbz	w0, 9600fcf0 <tegrabl_max77620_init+0x1d8>
			pr_error("failed to register %s pmic\n", MAXPMIC_COMPATIBLE);
    9600fcd8:	910dfea1 	add	x1, x21, #0x37f
    9600fcdc:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9600fce0:	52804058 	mov	w24, #0x202                 	// #514
			pr_error("failed to register %s pmic\n", MAXPMIC_COMPATIBLE);
    9600fce4:	910fc400 	add	x0, x0, #0x3f1
    9600fce8:	94004a62 	bl	96022670 <tegrabl_printf>
    9600fcec:	17ffffec 	b	9600fc9c <tegrabl_max77620_init+0x184>
	if (!internal_node_offset) {
    9600fcf0:	b9479b21 	ldr	w1, [x25, #1944]
    9600fcf4:	34001ae1 	cbz	w1, 96010050 <tegrabl_max77620_init+0x538>
	err = tegrabl_dt_get_child_with_name(fdt,
    9600fcf8:	f943c680 	ldr	x0, [x20, #1928]
    9600fcfc:	90000182 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    9600fd00:	910203a3 	add	x3, x29, #0x80
    9600fd04:	91082842 	add	x2, x2, #0x20a
	int32_t sub_node_offset = 0;
    9600fd08:	29107fbf 	stp	wzr, wzr, [x29, #128]
	uint32_t min_volts = 0, max_volts = 0;
    9600fd0c:	29117fbf 	stp	wzr, wzr, [x29, #136]
	const char *name = NULL;
    9600fd10:	f9004fbf 	str	xzr, [x29, #152]
	err = tegrabl_dt_get_child_with_name(fdt,
    9600fd14:	94008476 	bl	96030eec <tegrabl_dt_get_child_with_name>
	if (err != TEGRABL_NO_ERROR) {
    9600fd18:	35001760 	cbnz	w0, 96010004 <tegrabl_max77620_init+0x4ec>
    9600fd1c:	d00001d5 	adrp	x21, 96049000 <default_srgb_lut+0xa28>
    9600fd20:	9133c2bb 	add	x27, x21, #0xcf0
		if (TEGRABL_NO_ERROR == tegrabl_dt_get_prop_string(
    9600fd24:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
	if (err != TEGRABL_NO_ERROR) {
    9600fd28:	aa1b03f7 	mov	x23, x27
		if (TEGRABL_NO_ERROR == tegrabl_dt_get_prop_string(
    9600fd2c:	9110b800 	add	x0, x0, #0x42e
		if (TEGRABL_NO_ERROR == tegrabl_dt_get_prop_string(
    9600fd30:	f000017c 	adrp	x28, 9603e000 <tca9539_chips+0x378>
		if (TEGRABL_NO_ERROR == tegrabl_dt_get_prop_string(
    9600fd34:	f9003fa0 	str	x0, [x29, #120]
	for (i = 0; i < (sizeof(s_props) / sizeof(s_props[0])); i++) {
    9600fd38:	d2800016 	mov	x22, #0x0                   	// #0
		if (TEGRABL_NO_ERROR == tegrabl_dt_get_prop_string(
    9600fd3c:	91114380 	add	x0, x28, #0x450
    9600fd40:	f9003ba0 	str	x0, [x29, #112]
		err = tegrabl_dt_get_child_with_name(fdt,
    9600fd44:	f943c680 	ldr	x0, [x20, #1928]
    9600fd48:	910213a3 	add	x3, x29, #0x84
    9600fd4c:	b94083a1 	ldr	w1, [x29, #128]
    9600fd50:	f94006e2 	ldr	x2, [x23, #8]
    9600fd54:	94008466 	bl	96030eec <tegrabl_dt_get_child_with_name>
    9600fd58:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9600fd5c:	340008e0 	cbz	w0, 9600fe78 <tegrabl_max77620_init+0x360>
			pr_info("node NOT found in dts -%s\n", s_props[i].name);
    9600fd60:	f94006e1 	ldr	x1, [x23, #8]
    9600fd64:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600fd68:	91104000 	add	x0, x0, #0x410
    9600fd6c:	94004a41 	bl	96022670 <tegrabl_printf>
	for (i = 0; i < (sizeof(s_props) / sizeof(s_props[0])); i++) {
    9600fd70:	110006d6 	add	w22, w22, #0x1
    9600fd74:	9100e2f7 	add	x23, x23, #0x38
    9600fd78:	710036df 	cmp	w22, #0xd
    9600fd7c:	54fffe41 	b.ne	9600fd44 <tegrabl_max77620_init+0x22c>  // b.any
	if (err != TEGRABL_NO_ERROR) {
    9600fd80:	35001253 	cbnz	w19, 9600ffc8 <tegrabl_max77620_init+0x4b0>
	if (!internal_node_offset) {
    9600fd84:	b9479b21 	ldr	w1, [x25, #1944]
	int32_t offset = 0;
    9600fd88:	b9009bbf 	str	wzr, [x29, #152]
	if (!internal_node_offset) {
    9600fd8c:	340015e1 	cbz	w1, 96010048 <tegrabl_max77620_init+0x530>
	err = tegrabl_dt_get_child_with_name(fdt,
    9600fd90:	f943c680 	ldr	x0, [x20, #1928]
    9600fd94:	f0000162 	adrp	x2, 9603e000 <tca9539_chips+0x378>
    9600fd98:	910263a3 	add	x3, x29, #0x98
    9600fd9c:	91144042 	add	x2, x2, #0x510
    9600fda0:	94008453 	bl	96030eec <tegrabl_dt_get_child_with_name>
	if (err != TEGRABL_NO_ERROR) {
    9600fda4:	350013a0 	cbnz	w0, 96010018 <tegrabl_max77620_init+0x500>
	drv = (struct gpio_driver *)tegrabl_calloc(1, sizeof(struct gpio_driver));
    9600fda8:	f00002f6 	adrp	x22, 9606e000 <__bss_start>
    9600fdac:	d2800601 	mov	x1, #0x30                  	// #48
    9600fdb0:	d2800020 	mov	x0, #0x1                   	// #1
    9600fdb4:	94005b44 	bl	96026ac4 <tegrabl_calloc>
    9600fdb8:	f903c2c0 	str	x0, [x22, #1920]
	if (!drv) {
    9600fdbc:	b40013e0 	cbz	x0, 96010038 <tegrabl_max77620_init+0x520>
	ptr = (char *)tegrabl_calloc(1, strlen(MAXPMIC_GPIO_DRIVER) + 1);
    9600fdc0:	f0000173 	adrp	x19, 9603e000 <tca9539_chips+0x378>
    9600fdc4:	91146673 	add	x19, x19, #0x519
    9600fdc8:	aa1303e0 	mov	x0, x19
    9600fdcc:	94006950 	bl	9602a30c <strlen>
    9600fdd0:	91000401 	add	x1, x0, #0x1
    9600fdd4:	d2800020 	mov	x0, #0x1                   	// #1
    9600fdd8:	94005b3b 	bl	96026ac4 <tegrabl_calloc>
	if (!ptr) {
    9600fddc:	b4001320 	cbz	x0, 96010040 <tegrabl_max77620_init+0x528>
	drv->name = ptr;
    9600fde0:	f943c2c2 	ldr	x2, [x22, #1920]
	strcpy(ptr, MAXPMIC_GPIO_DRIVER);
    9600fde4:	aa1303e1 	mov	x1, x19
    9600fde8:	9133c2b5 	add	x21, x21, #0xcf0
    9600fdec:	910b837b 	add	x27, x27, #0x2e0
    9600fdf0:	910022b5 	add	x21, x21, #0x8
	drv->name = ptr;
    9600fdf4:	f9000440 	str	x0, [x2, #8]
	strcpy(ptr, MAXPMIC_GPIO_DRIVER);
    9600fdf8:	94006930 	bl	9602a2b8 <strcpy>
	drv->phandle = fdt_get_phandle(fdt, internal_node_offset);
    9600fdfc:	b9479b21 	ldr	w1, [x25, #1944]
    9600fe00:	f943c680 	ldr	x0, [x20, #1928]
				pr_error("Failed to set active_discharge for %s\n",
    9600fe04:	f0000174 	adrp	x20, 9603e000 <tca9539_chips+0x378>
    9600fe08:	91153294 	add	x20, x20, #0x54c
	drv->phandle = fdt_get_phandle(fdt, internal_node_offset);
    9600fe0c:	94008892 	bl	96032054 <fdt_get_phandle>
    9600fe10:	2a0003e1 	mov	w1, w0
    9600fe14:	f943c2c0 	ldr	x0, [x22, #1920]
	drv->chip_id = drv->phandle;
    9600fe18:	29000401 	stp	w1, w1, [x0]
	drv->ops = &max77620_gpio_ops;
    9600fe1c:	d00001c1 	adrp	x1, 96049000 <default_srgb_lut+0xa28>
    9600fe20:	91336021 	add	x1, x1, #0xcd8
    9600fe24:	f9001401 	str	x1, [x0, #40]
	tegrabl_gpio_driver_register(drv);
    9600fe28:	97fff6f5 	bl	9600d9fc <tegrabl_gpio_driver_register>
		if (s_props[i].act_dischrg_en || s_props[i].act_dischrg_dis) {
    9600fe2c:	394032a0 	ldrb	w0, [x21, #12]
    9600fe30:	35000060 	cbnz	w0, 9600fe3c <tegrabl_max77620_init+0x324>
    9600fe34:	394036a1 	ldrb	w1, [x21, #13]
    9600fe38:	34000181 	cbz	w1, 9600fe68 <tegrabl_max77620_init+0x350>
			if (s_props[i].regulator_type == MAX77620_REGULATOR_TYPE_SD) {
    9600fe3c:	b9400aa1 	ldr	w1, [x21, #8]
    9600fe40:	350010c1 	cbnz	w1, 96010058 <tegrabl_max77620_init+0x540>
				val = 1;
    9600fe44:	52000013 	eor	w19, w0, #0x1
				mask = MAX77620_REG_SD_NADE_MASK;
    9600fe48:	52800116 	mov	w22, #0x8                   	// #8
	if (hi2c_dev)
    9600fe4c:	f943cb40 	ldr	x0, [x26, #1936]
	uint8_t regread = 0;
    9600fe50:	390233bf 	strb	wzr, [x29, #140]
			if (max77620_reg8_update(s_props[i].cfg_reg, mask, val)
    9600fe54:	b94016b7 	ldr	w23, [x21, #20]
	if (hi2c_dev)
    9600fe58:	b5001060 	cbnz	x0, 96010064 <tegrabl_max77620_init+0x54c>
				pr_error("Failed to set active_discharge for %s\n",
    9600fe5c:	f94002a1 	ldr	x1, [x21]
    9600fe60:	aa1403e0 	mov	x0, x20
    9600fe64:	94004a03 	bl	96022670 <tegrabl_printf>
    9600fe68:	9100e2b5 	add	x21, x21, #0x38
	for (i = 0; i < (sizeof(s_props) / sizeof(s_props[0])); i++) {
    9600fe6c:	eb15037f 	cmp	x27, x21
    9600fe70:	54fffde1 	b.ne	9600fe2c <tegrabl_max77620_init+0x314>  // b.any
    9600fe74:	17ffff58 	b	9600fbd4 <tegrabl_max77620_init+0xbc>
		if (TEGRABL_NO_ERROR == tegrabl_dt_get_prop_string(
    9600fe78:	f943c680 	ldr	x0, [x20, #1928]
    9600fe7c:	d2800003 	mov	x3, #0x0                   	// #0
    9600fe80:	b94087a1 	ldr	w1, [x29, #132]
    9600fe84:	f9403fa2 	ldr	x2, [x29, #120]
    9600fe88:	940084ac 	bl	96031138 <tegrabl_dt_get_prop_string>
    9600fe8c:	35000060 	cbnz	w0, 9600fe98 <tegrabl_max77620_init+0x380>
			s_props[i].act_dischrg_en = true;
    9600fe90:	52800020 	mov	w0, #0x1                   	// #1
    9600fe94:	390052e0 	strb	w0, [x23, #20]
		if (TEGRABL_NO_ERROR == tegrabl_dt_get_prop_string(
    9600fe98:	f943c680 	ldr	x0, [x20, #1928]
    9600fe9c:	d2800003 	mov	x3, #0x0                   	// #0
    9600fea0:	b94087a1 	ldr	w1, [x29, #132]
    9600fea4:	f9403ba2 	ldr	x2, [x29, #112]
    9600fea8:	940084a4 	bl	96031138 <tegrabl_dt_get_prop_string>
    9600feac:	35000060 	cbnz	w0, 9600feb8 <tegrabl_max77620_init+0x3a0>
			s_props[i].act_dischrg_dis = true;
    9600feb0:	52800020 	mov	w0, #0x1                   	// #1
    9600feb4:	390056e0 	strb	w0, [x23, #21]
		phandle = fdt_get_phandle(fdt, sub_node_offset);
    9600feb8:	f943c680 	ldr	x0, [x20, #1928]
    9600febc:	b94087a1 	ldr	w1, [x29, #132]
    9600fec0:	94008865 	bl	96032054 <fdt_get_phandle>
		if (!phandle)
    9600fec4:	b9006fa0 	str	w0, [x29, #108]
    9600fec8:	34fff540 	cbz	w0, 9600fd70 <tegrabl_max77620_init+0x258>
		regulator = (tegrabl_regulator_t *)tegrabl_calloc(1,
    9600fecc:	d2800901 	mov	x1, #0x48                  	// #72
    9600fed0:	d2800020 	mov	x0, #0x1                   	// #1
    9600fed4:	94005afc 	bl	96026ac4 <tegrabl_calloc>
    9600fed8:	aa0003fc 	mov	x28, x0
		if (!regulator) {
    9600fedc:	b40009a0 	cbz	x0, 96010010 <tegrabl_max77620_init+0x4f8>
		regulator->set_voltage = s_props[i].ops->set_voltage;
    9600fee0:	f9401ae0 	ldr	x0, [x23, #48]
		if (TEGRABL_NO_ERROR != tegrabl_dt_get_prop_string(
    9600fee4:	910263a3 	add	x3, x29, #0x98
		s_props[i].phandle = phandle;
    9600fee8:	b9406fa2 	ldr	w2, [x29, #108]
		if (TEGRABL_NO_ERROR != tegrabl_dt_get_prop_string(
    9600feec:	b94087a1 	ldr	w1, [x29, #132]
		regulator->set_voltage = s_props[i].ops->set_voltage;
    9600fef0:	f9400000 	ldr	x0, [x0]
		s_props[i].phandle = phandle;
    9600fef4:	b90002e2 	str	w2, [x23]
		regulator->set_voltage = s_props[i].ops->set_voltage;
    9600fef8:	f9002380 	str	x0, [x28, #64]
		if (TEGRABL_NO_ERROR != tegrabl_dt_get_prop_string(
    9600fefc:	f943c680 	ldr	x0, [x20, #1928]
		regulator->phandle = s_props[i].phandle;
    9600ff00:	b9001382 	str	w2, [x28, #16]
		if (TEGRABL_NO_ERROR != tegrabl_dt_get_prop_string(
    9600ff04:	f0000162 	adrp	x2, 9603e000 <tca9539_chips+0x378>
		regulator->is_fixed = false;
    9600ff08:	3900a39f 	strb	wzr, [x28, #40]
		if (TEGRABL_NO_ERROR != tegrabl_dt_get_prop_string(
    9600ff0c:	9111cc42 	add	x2, x2, #0x473
		regulator->is_enabled = false;
    9600ff10:	3900a79f 	strb	wzr, [x28, #41]
		if (TEGRABL_NO_ERROR != tegrabl_dt_get_prop_string(
    9600ff14:	94008489 	bl	96031138 <tegrabl_dt_get_prop_string>
    9600ff18:	35000700 	cbnz	w0, 9600fff8 <tegrabl_max77620_init+0x4e0>
		if (name) {
    9600ff1c:	f9404fa1 	ldr	x1, [x29, #152]
    9600ff20:	b4000081 	cbz	x1, 9600ff30 <tegrabl_max77620_init+0x418>
			strlcpy(regulator->name, name, sizeof(regulator->name));
    9600ff24:	d2800282 	mov	x2, #0x14                  	// #20
    9600ff28:	8b020380 	add	x0, x28, x2
    9600ff2c:	94006900 	bl	9602a32c <strlcpy>
    9600ff30:	f943c680 	ldr	x0, [x20, #1928]
    9600ff34:	f0000162 	adrp	x2, 9603e000 <tca9539_chips+0x378>
    9600ff38:	b94087a1 	ldr	w1, [x29, #132]
    9600ff3c:	910223a5 	add	x5, x29, #0x88
    9600ff40:	52800004 	mov	w4, #0x0                   	// #0
    9600ff44:	d2800083 	mov	x3, #0x4                   	// #4
    9600ff48:	91120842 	add	x2, x2, #0x482
    9600ff4c:	94008418 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (err != TEGRABL_NO_ERROR) {
    9600ff50:	35000500 	cbnz	w0, 9600fff0 <tegrabl_max77620_init+0x4d8>
    9600ff54:	f943c680 	ldr	x0, [x20, #1928]
    9600ff58:	f0000162 	adrp	x2, 9603e000 <tca9539_chips+0x378>
    9600ff5c:	b94087a1 	ldr	w1, [x29, #132]
    9600ff60:	910233a5 	add	x5, x29, #0x8c
    9600ff64:	52800004 	mov	w4, #0x0                   	// #0
    9600ff68:	d2800083 	mov	x3, #0x4                   	// #4
    9600ff6c:	91126842 	add	x2, x2, #0x49a
    9600ff70:	9400840f 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (err != TEGRABL_NO_ERROR) {
    9600ff74:	350003e0 	cbnz	w0, 9600fff0 <tegrabl_max77620_init+0x4d8>
		if (min_volts == max_volts) {
    9600ff78:	295107a0 	ldp	w0, w1, [x29, #136]
    9600ff7c:	6b01001f 	cmp	w0, w1
    9600ff80:	54000381 	b.ne	9600fff0 <tegrabl_max77620_init+0x4d8>  // b.any
			regulator->set_volts = min_volts;
    9600ff84:	b9002f80 	str	w0, [x28, #44]
		err = tegrabl_regulator_register(regulator);
    9600ff88:	aa1c03e0 	mov	x0, x28
    9600ff8c:	94000d64 	bl	9601351c <tegrabl_regulator_register>
    9600ff90:	2a0003e3 	mov	w3, w0
		if (err != TEGRABL_NO_ERROR) {
    9600ff94:	34ffeee0 	cbz	w0, 9600fd70 <tegrabl_max77620_init+0x258>
			pr_error("failed to register regulator '%s' with error %d\n",
    9600ff98:	9133c2b5 	add	x21, x21, #0xcf0
    9600ff9c:	d2800700 	mov	x0, #0x38                  	// #56
    9600ffa0:	2a0303e2 	mov	w2, w3
    9600ffa4:	b9007ba3 	str	w3, [x29, #120]
    9600ffa8:	d503201f 	nop
    9600ffac:	9b0056d5 	madd	x21, x22, x0, x21
    9600ffb0:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600ffb4:	9112c800 	add	x0, x0, #0x4b2
    9600ffb8:	f94006a1 	ldr	x1, [x21, #8]
    9600ffbc:	940049ad 	bl	96022670 <tegrabl_printf>
		err = tegrabl_regulator_register(regulator);
    9600ffc0:	b9407ba3 	ldr	w3, [x29, #120]
    9600ffc4:	2a0303f3 	mov	w19, w3
    9600ffc8:	12005e73 	and	w19, w19, #0xffffff
    9600ffcc:	52aac018 	mov	w24, #0x56000000            	// #1442840576
		pr_error("failed to get regulator info from dts\n");
    9600ffd0:	f0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9600ffd4:	2a180273 	orr	w19, w19, w24
    9600ffd8:	91139800 	add	x0, x0, #0x4e6
		pr_error("failed to get gpio info from dts\n");
    9600ffdc:	940049a5 	bl	96022670 <tegrabl_printf>
    9600ffe0:	12005e73 	and	w19, w19, #0xffffff
    9600ffe4:	52aac018 	mov	w24, #0x56000000            	// #1442840576
    9600ffe8:	2a180278 	orr	w24, w19, w24
    9600ffec:	17fffeef 	b	9600fba8 <tegrabl_max77620_init+0x90>
			regulator->set_volts = 0;
    9600fff0:	b9002f9f 	str	wzr, [x28, #44]
    9600fff4:	17ffffe5 	b	9600ff88 <tegrabl_max77620_init+0x470>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9600fff8:	528001b3 	mov	w19, #0xd                   	// #13
    9600fffc:	72aacad3 	movk	w19, #0x5656, lsl #16
    96010000:	17ffff5c 	b	9600fd70 <tegrabl_max77620_init+0x258>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96010004:	528001b3 	mov	w19, #0xd                   	// #13
    96010008:	72aacad3 	movk	w19, #0x5656, lsl #16
    9601000c:	17ffffef 	b	9600ffc8 <tegrabl_max77620_init+0x4b0>
			err = TEGRABL_ERR_NO_MEMORY;
    96010010:	52800073 	mov	w19, #0x3                   	// #3
    96010014:	17ffffed 	b	9600ffc8 <tegrabl_max77620_init+0x4b0>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96010018:	528001b3 	mov	w19, #0xd                   	// #13
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601001c:	72aacad3 	movk	w19, #0x5656, lsl #16
    96010020:	12005e73 	and	w19, w19, #0xffffff
    96010024:	52aac018 	mov	w24, #0x56000000            	// #1442840576
		pr_error("failed to get gpio info from dts\n");
    96010028:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9601002c:	2a180273 	orr	w19, w19, w24
    96010030:	91149c00 	add	x0, x0, #0x527
    96010034:	17ffffea 	b	9600ffdc <tegrabl_max77620_init+0x4c4>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96010038:	52800073 	mov	w19, #0x3                   	// #3
    9601003c:	17fffff8 	b	9601001c <tegrabl_max77620_init+0x504>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96010040:	52802073 	mov	w19, #0x103                 	// #259
    96010044:	17fffff6 	b	9601001c <tegrabl_max77620_init+0x504>
		err = TEGRABL_ERR_INVALID;
    96010048:	52800053 	mov	w19, #0x2                   	// #2
    9601004c:	17fffff5 	b	96010020 <tegrabl_max77620_init+0x508>
		err = TEGRABL_ERR_INVALID;
    96010050:	52800053 	mov	w19, #0x2                   	// #2
    96010054:	17ffffe3 	b	9600ffe0 <tegrabl_max77620_init+0x4c8>
				val = 1;
    96010058:	2a0003f3 	mov	w19, w0
				mask = MAX77620_REG_LDO_ADE_MASK;
    9601005c:	52800056 	mov	w22, #0x2                   	// #2
    96010060:	17ffff7b 	b	9600fe4c <tegrabl_max77620_init+0x334>
    96010064:	12001ef7 	and	w23, w23, #0xff
		err_status = tegrabl_i2c_dev_read(hi2c_dev, &regread, reg_addr, 1);
    96010068:	52800023 	mov	w3, #0x1                   	// #1
    9601006c:	2a1703e2 	mov	w2, w23
    96010070:	910233a1 	add	x1, x29, #0x8c
    96010074:	97fffc93 	bl	9600f2c0 <tegrabl_i2c_dev_read>
	if (err_status != TEGRABL_NO_ERROR) {
    96010078:	35ffef20 	cbnz	w0, 9600fe5c <tegrabl_max77620_init+0x344>
	val *= ((mask) & ~((mask) << 1));
    9601007c:	0a3606c0 	bic	w0, w22, w22, lsl #1
	regread = regread & (~mask);
    96010080:	394233a1 	ldrb	w1, [x29, #140]
    96010084:	0a360021 	bic	w1, w1, w22
	val *= ((mask) & ~((mask) << 1));
    96010088:	1b007e60 	mul	w0, w19, w0
	regread = regread & (~mask);
    9601008c:	12001c21 	and	w1, w1, #0xff
    96010090:	390233a1 	strb	w1, [x29, #140]
	regwrite = (val | regread);
    96010094:	2a000020 	orr	w0, w1, w0
    96010098:	12001c00 	and	w0, w0, #0xff
    9601009c:	390263a0 	strb	w0, [x29, #152]
	if (regwrite != regread) {
    960100a0:	6b00003f 	cmp	w1, w0
    960100a4:	54ffee20 	b.eq	9600fe68 <tegrabl_max77620_init+0x350>  // b.none
		err_status = tegrabl_i2c_dev_write(hi2c_dev, &regwrite, reg_addr, 1);
    960100a8:	f943cb40 	ldr	x0, [x26, #1936]
    960100ac:	52800023 	mov	w3, #0x1                   	// #1
    960100b0:	2a1703e2 	mov	w2, w23
    960100b4:	910263a1 	add	x1, x29, #0x98
    960100b8:	97fffd23 	bl	9600f544 <tegrabl_i2c_dev_write>
	if (err_status != TEGRABL_NO_ERROR) {
    960100bc:	34ffed60 	cbz	w0, 9600fe68 <tegrabl_max77620_init+0x350>
    960100c0:	17ffff67 	b	9600fe5c <tegrabl_max77620_init+0x344>

00000000960100c4 <qspi_fill_tx_fifo>:
}

static uint32_t qspi_fill_tx_fifo(struct tegrabl_qspi_handle *qspi_handle)
{
	uint32_t rval;
	uint32_t count = 0;
    960100c4:	52800003 	mov	w3, #0x0                   	// #0

	while (qspi_handle->cur_remain_pio_packet != 0U) {
    960100c8:	b940a001 	ldr	w1, [x0, #160]
    960100cc:	35000061 	cbnz	w1, 960100d8 <qspi_fill_tx_fifo+0x14>
		/* decrement requested number of words */
		qspi_handle->cur_remain_pio_packet--;
	}

	return count;
}
    960100d0:	2a0303e0 	mov	w0, w3
    960100d4:	d65f03c0 	ret
		rval = qspi_readl(qspi_handle->qspi, FIFO_STATUS);
    960100d8:	f9400001 	ldr	x1, [x0]
    960100dc:	b9400022 	ldr	w2, [x1]
    960100e0:	11005041 	add	w1, w2, #0x14
    960100e4:	b9400021 	ldr	w1, [x1]
		if ((rval & NV_DRF_DEF(QSPI, FIFO_STATUS, TX_FIFO_FULL, FULL)) != 0U) {
    960100e8:	371fff41 	tbnz	w1, #3, 960100d0 <qspi_fill_tx_fifo+0xc>
		if (qspi_handle->bytes_pw > 1U) {
    960100ec:	b940a804 	ldr	w4, [x0, #168]
    960100f0:	f9405801 	ldr	x1, [x0, #176]
    960100f4:	7100049f 	cmp	w4, #0x1
    960100f8:	54000189 	b.ls	96010128 <qspi_fill_tx_fifo+0x64>  // b.plast
			rval = (*((uint32_t *)qspi_handle->cur_buf));
    960100fc:	b9400024 	ldr	w4, [x1]
		qspi_writel(qspi_handle->qspi, TX_FIFO, rval);
    96010100:	11042042 	add	w2, w2, #0x108
		count++;
    96010104:	11000463 	add	w3, w3, #0x1
		qspi_writel(qspi_handle->qspi, TX_FIFO, rval);
    96010108:	b9000044 	str	w4, [x2]
		qspi_handle->cur_buf += qspi_handle->bytes_pw;
    9601010c:	b940a802 	ldr	w2, [x0, #168]
    96010110:	8b020021 	add	x1, x1, x2
    96010114:	f9005801 	str	x1, [x0, #176]
		qspi_handle->cur_remain_pio_packet--;
    96010118:	b940a001 	ldr	w1, [x0, #160]
    9601011c:	51000421 	sub	w1, w1, #0x1
    96010120:	b900a001 	str	w1, [x0, #160]
    96010124:	17ffffe9 	b	960100c8 <qspi_fill_tx_fifo+0x4>
			rval = (uint32_t)(*qspi_handle->cur_buf);
    96010128:	39400024 	ldrb	w4, [x1]
    9601012c:	17fffff5 	b	96010100 <qspi_fill_tx_fifo+0x3c>

0000000096010130 <qspi_receive_start_one_xfer_pio>:
	uint32_t rval;

	qspi_handle->cur_xfer_is_dma = false;

	/* Number of bits to be transmitted per packet in unpacked mode = 32 */
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010130:	f9400002 	ldr	x2, [x0]
	qspi_handle->cur_xfer_is_dma = false;
    96010134:	3903901f 	strb	wzr, [x0, #228]
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010138:	b9400044 	ldr	w4, [x2]
    9601013c:	b9400081 	ldr	w1, [x4]
	rval = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH,
    96010140:	121b6823 	and	w3, w1, #0xffffffe0
    96010144:	b940a401 	ldr	w1, [x0, #164]
    96010148:	51000421 	sub	w1, w1, #0x1
    9601014c:	12001021 	and	w1, w1, #0x1f
    96010150:	2a030021 	orr	w1, w1, w3
							  (qspi_handle->bits_pw - 1UL), rval);
	qspi_writel(qspi_handle->qspi, COMMAND, rval);
    96010154:	b9000081 	str	w1, [x4]

	dma_blk_size = MIN(qspi_handle->ramain_pio_packet, QSPI_DMA_BLK_SIZE_MAX);
    96010158:	52a00023 	mov	w3, #0x10000               	// #65536
    9601015c:	b9407c01 	ldr	w1, [x0, #124]
    96010160:	7140403f 	cmp	w1, #0x10, lsl #12
    96010164:	1a839021 	csel	w1, w1, w3, ls  // ls = plast

	/* Set dma block size. */
	qspi_writel(qspi_handle->qspi, DMA_BLK_SIZE, (dma_blk_size - 1UL));
    96010168:	b9400043 	ldr	w3, [x2]
    9601016c:	51000424 	sub	w4, w1, #0x1
    96010170:	11009063 	add	w3, w3, #0x24
    96010174:	b9000064 	str	w4, [x3]

	qspi_handle->cur_req_pio_packet = dma_blk_size;
	qspi_handle->cur_remain_pio_packet = dma_blk_size;
    96010178:	29138401 	stp	w1, w1, [x0, #156]

	/* Enable Rx */
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    9601017c:	b9400041 	ldr	w1, [x2]
    96010180:	b9400020 	ldr	w0, [x1]
	rval = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, Rx_EN, ENABLE, rval);
    96010184:	32140000 	orr	w0, w0, #0x1000
	qspi_writel(qspi_handle->qspi, COMMAND, rval);
    96010188:	b9000020 	str	w0, [x1]

	/* Enable DMA mode */
	rval = qspi_readl(qspi_handle->qspi, DMA_CTL);
    9601018c:	b9400040 	ldr	w0, [x2]
    96010190:	11008000 	add	w0, w0, #0x20
    96010194:	b9400001 	ldr	w1, [x0]
	rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, DMA_EN, ENABLE, rval);
    96010198:	32010021 	orr	w1, w1, #0x80000000
	qspi_writel(qspi_handle->qspi, DMA_CTL, rval);
    9601019c:	b9000001 	str	w1, [x0]

	return TEGRABL_NO_ERROR;
}
    960101a0:	52800000 	mov	w0, #0x0                   	// #0
    960101a4:	d65f03c0 	ret

00000000960101a8 <qspi_wait_for_ready_bit>:
{
    960101a8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960101ac:	910003fd 	mov	x29, sp
    960101b0:	a90153f3 	stp	x19, x20, [sp, #16]
    960101b4:	aa0003f3 	mov	x19, x0
	uint32_t st_time = qspi_handle->xfer_start_time;
    960101b8:	b9405c14 	ldr	w20, [x0, #92]
		rval = qspi_readl(qspi_handle->qspi, TRANSFER_STATUS);
    960101bc:	f9400261 	ldr	x1, [x19]
    960101c0:	b9400020 	ldr	w0, [x1]
    960101c4:	11004000 	add	w0, w0, #0x10
    960101c8:	b9400002 	ldr	w2, [x0]
		if ((rval & NV_DRF_DEF(QSPI, TRANSFER_STATUS, RDY, READY)) != 0U) {
    960101cc:	36f00142 	tbz	w2, #30, 960101f4 <qspi_wait_for_ready_bit+0x4c>
			qspi_writel_flush(qspi_handle->qspi, TRANSFER_STATUS,
    960101d0:	52a80002 	mov	w2, #0x40000000            	// #1073741824
    960101d4:	b9000002 	str	w2, [x0]
    960101d8:	b9400020 	ldr	w0, [x1]
    960101dc:	11004000 	add	w0, w0, #0x10
    960101e0:	b9400000 	ldr	w0, [x0]
			return TEGRABL_NO_ERROR;
    960101e4:	52800000 	mov	w0, #0x0                   	// #0
}
    960101e8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960101ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960101f0:	d65f03c0 	ret
		elapsed_time = (uint32_t)(tegrabl_get_timestamp_us() - st_time);
    960101f4:	94003ea2 	bl	9601fc7c <tegrabl_get_timestamp_us>
    960101f8:	4b140000 	sub	w0, w0, w20
	} while (elapsed_time < qspi_handle->xfer_timeout);
    960101fc:	b9406261 	ldr	w1, [x19, #96]
    96010200:	6b00003f 	cmp	w1, w0
    96010204:	54fffdc8 	b.hi	960101bc <qspi_wait_for_ready_bit+0x14>  // b.pmore
	return TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_CHECK_TIMEOUT);
    96010208:	5280e0c0 	mov	w0, #0x706                 	// #1798
    9601020c:	72a24240 	movk	w0, #0x1212, lsl #16
    96010210:	17fffff6 	b	960101e8 <qspi_wait_for_ready_bit+0x40>

0000000096010214 <qspi_send_start_one_xfer_dma>:
{
    96010214:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	qspi_handle->cur_xfer_is_dma = true;
    96010218:	52800021 	mov	w1, #0x1                   	// #1
{
    9601021c:	910003fd 	mov	x29, sp
    96010220:	a90153f3 	stp	x19, x20, [sp, #16]
	struct tegrabl_qspi_info *qspi = qspi_handle->qspi;
    96010224:	f9400013 	ldr	x19, [x0]
	dma_blk_size = MIN(qspi_handle->ramain_dma_packet, qspi_handle->qspi_info->dma_max_size);
    96010228:	f9402804 	ldr	x4, [x0, #80]
    9601022c:	b9407802 	ldr	w2, [x0, #120]
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010230:	b9400263 	ldr	w3, [x19]
	qspi_handle->cur_xfer_is_dma = true;
    96010234:	39039001 	strb	w1, [x0, #228]
	dma_blk_size = MIN(qspi_handle->ramain_dma_packet, qspi_handle->qspi_info->dma_max_size);
    96010238:	b9400481 	ldr	w1, [x4, #4]
    9601023c:	6b02003f 	cmp	w1, w2
    96010240:	1a829021 	csel	w1, w1, w2, ls  // ls = plast
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010244:	b9400062 	ldr	w2, [x3]
	rval = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH, 31, rval);
    96010248:	32001042 	orr	w2, w2, #0x1f
	qspi_writel(qspi, COMMAND, rval);
    9601024c:	b9000062 	str	w2, [x3]
	qspi_writel(qspi_handle->qspi, DMA_BLK_SIZE, (dma_blk_size - 1U));
    96010250:	51000423 	sub	w3, w1, #0x1
    96010254:	b9400262 	ldr	w2, [x19]
    96010258:	11009042 	add	w2, w2, #0x24
    9601025c:	b9000043 	str	w3, [x2]
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010260:	b9400263 	ldr	w3, [x19]
	qspi_handle->cur_remain_dma_packet = dma_blk_size;
    96010264:	29128401 	stp	w1, w1, [x0, #148]
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010268:	b9400062 	ldr	w2, [x3]
	rval = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, Tx_EN, ENABLE, rval);
    9601026c:	32150042 	orr	w2, w2, #0x800
	qspi_writel_flush(qspi_handle->qspi, COMMAND, rval);
    96010270:	b9000062 	str	w2, [x3]
    96010274:	b9400263 	ldr	w3, [x19]
	if (qspi_handle->qspi_info[0].trig_len == 16U) {
    96010278:	b9400084 	ldr	w4, [x4]
	qspi_writel_flush(qspi_handle->qspi, COMMAND, rval);
    9601027c:	2a0303e2 	mov	w2, w3
	rval = qspi_readl(qspi, DMA_CTL);
    96010280:	11008063 	add	w3, w3, #0x20
	if (qspi_handle->qspi_info[0].trig_len == 16U) {
    96010284:	7100409f 	cmp	w4, #0x10
	qspi_writel_flush(qspi_handle->qspi, COMMAND, rval);
    96010288:	b9400042 	ldr	w2, [x2]
	rval = qspi_readl(qspi, DMA_CTL);
    9601028c:	b9400062 	ldr	w2, [x3]
	if (qspi_handle->qspi_info[0].trig_len == 16U) {
    96010290:	540004c1 	b.ne	96010328 <qspi_send_start_one_xfer_dma+0x114>  // b.any
		rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, TX_TRIG, TRIG16, rval);
    96010294:	32110442 	orr	w2, w2, #0x18000
	qspi_writel_flush(qspi, DMA_CTL, rval);
    96010298:	b9000062 	str	w2, [x3]
	qspi_handle->dma_params.size = dma_blk_size * 4UL;
    9601029c:	531e7421 	lsl	w1, w1, #2
	qspi_writel_flush(qspi, DMA_CTL, rval);
    960102a0:	b9400262 	ldr	w2, [x19]
    960102a4:	11008043 	add	w3, w2, #0x20
	qspi_handle->dma_params.dst = qspi_handle->qspi->base_address +
    960102a8:	11042042 	add	w2, w2, #0x108
	qspi_writel_flush(qspi, DMA_CTL, rval);
    960102ac:	b9400063 	ldr	w3, [x3]
	qspi_handle->dma_params.size = dma_blk_size * 4UL;
    960102b0:	b9003801 	str	w1, [x0, #56]
	qspi_handle->dma_params.is_async_xfer = true;
    960102b4:	52800021 	mov	w1, #0x1                   	// #1
    960102b8:	39010001 	strb	w1, [x0, #64]
	qspi_handle->dma_params.dir = DMA_MEM_TO_IO;
    960102bc:	52800041 	mov	w1, #0x2                   	// #2
    960102c0:	b9004401 	str	w1, [x0, #68]
	qspi_handle->dma_params.io_bus_width = BUS_WIDTH_32;
    960102c4:	b9004c01 	str	w1, [x0, #76]
	if (qspi_context->dma_type == DMA_GPC) {
    960102c8:	b9401801 	ldr	w1, [x0, #24]
	qspi_handle->dma_params.dst = qspi_handle->qspi->base_address +
    960102cc:	f9001802 	str	x2, [x0, #48]
	qspi_handle->dma_params.src = (uintptr_t)qspi_handle->cur_buf;
    960102d0:	f9405802 	ldr	x2, [x0, #176]
    960102d4:	f9001402 	str	x2, [x0, #40]
	if (qspi_context->dma_type == DMA_GPC) {
    960102d8:	35000321 	cbnz	w1, 9601033c <qspi_send_start_one_xfer_dma+0x128>
		qspi_handle->dma_params.io = qspi_handle->qspi->gpcdma_req;
    960102dc:	b9400a61 	ldr	w1, [x19, #8]
		qspi_handle->dma_params.io = qspi_handle->qspi->bpmpdma_req;
    960102e0:	b9004801 	str	w1, [x0, #72]
	err = tegrabl_dma_transfer(qspi_context->dma_handle, qspi->dma_chan_id,
    960102e4:	9100a002 	add	x2, x0, #0x28
    960102e8:	39401661 	ldrb	w1, [x19, #5]
    960102ec:	f9401000 	ldr	x0, [x0, #32]
    960102f0:	97fff3a9 	bl	9600d194 <tegrabl_dma_transfer>
    960102f4:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    960102f8:	340002a0 	cbz	w0, 9601034c <qspi_send_start_one_xfer_dma+0x138>
    960102fc:	12005c14 	and	w20, w0, #0xffffff
    96010300:	52a24000 	mov	w0, #0x12000000            	// #301989888
    96010304:	2a000294 	orr	w20, w20, w0
		pr_error("Failed to start DMA for Transmit: 0x%08x\n", err);
    96010308:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9601030c:	2a1403e1 	mov	w1, w20
    96010310:	9117ec00 	add	x0, x0, #0x5fb
    96010314:	940048d7 	bl	96022670 <tegrabl_printf>
}
    96010318:	2a1403e0 	mov	w0, w20
    9601031c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96010320:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96010324:	d65f03c0 	ret
	} else if (qspi_handle->qspi_info[0].trig_len == 8U) {
    96010328:	7100209f 	cmp	w4, #0x8
    9601032c:	54fffb61 	b.ne	96010298 <qspi_send_start_one_xfer_dma+0x84>  // b.any
		rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, TX_TRIG, TRIG8, rval);
    96010330:	120f7442 	and	w2, w2, #0xfffe7fff
    96010334:	32100042 	orr	w2, w2, #0x10000
    96010338:	17ffffd8 	b	96010298 <qspi_send_start_one_xfer_dma+0x84>
	} else if (qspi_context->dma_type == DMA_BPMP) {
    9601033c:	7100043f 	cmp	w1, #0x1
    96010340:	54fffd21 	b.ne	960102e4 <qspi_send_start_one_xfer_dma+0xd0>  // b.any
		qspi_handle->dma_params.io = qspi_handle->qspi->bpmpdma_req;
    96010344:	b9400e61 	ldr	w1, [x19, #12]
    96010348:	17ffffe6 	b	960102e0 <qspi_send_start_one_xfer_dma+0xcc>
	rval = qspi_readl(qspi, DMA_CTL);
    9601034c:	b9400260 	ldr	w0, [x19]
    96010350:	11008000 	add	w0, w0, #0x20
    96010354:	b9400001 	ldr	w1, [x0]
	rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, DMA_EN, ENABLE, rval);
    96010358:	32010021 	orr	w1, w1, #0x80000000
	qspi_writel_flush(qspi, DMA_CTL, rval);
    9601035c:	b9000001 	str	w1, [x0]
    96010360:	b9400260 	ldr	w0, [x19]
    96010364:	11008000 	add	w0, w0, #0x20
    96010368:	b9400000 	ldr	w0, [x0]
	return TEGRABL_NO_ERROR;
    9601036c:	17ffffeb 	b	96010318 <qspi_send_start_one_xfer_dma+0x104>

0000000096010370 <qspi_receive_start_one_xfer_dma>:
	return TEGRABL_NO_ERROR;
}

static tegrabl_error_t qspi_receive_start_one_xfer_dma(
						struct tegrabl_qspi_handle *qspi_handle)
{
    96010370:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	uint32_t dma_blk_size;
	uint32_t rval;

	qspi_handle->cur_xfer_is_dma = true;

	dma_blk_size = MIN(qspi_handle->ramain_dma_packet, QSPI_DMA_BLK_SIZE_MAX);
    96010374:	52a00021 	mov	w1, #0x10000               	// #65536
{
    96010378:	910003fd 	mov	x29, sp
    9601037c:	a90153f3 	stp	x19, x20, [sp, #16]
    96010380:	aa0003f3 	mov	x19, x0
	struct tegrabl_qspi_info *qspi = qspi_handle->qspi;
    96010384:	f9400014 	ldr	x20, [x0]
	qspi_handle->cur_xfer_is_dma = true;
    96010388:	52800020 	mov	w0, #0x1                   	// #1
    9601038c:	39039260 	strb	w0, [x19, #228]

	/* Number of bits to be transmitted per packet in unpacked mode = 32 */
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010390:	b9400282 	ldr	w2, [x20]
	dma_blk_size = MIN(qspi_handle->ramain_dma_packet, QSPI_DMA_BLK_SIZE_MAX);
    96010394:	b9407a60 	ldr	w0, [x19, #120]
	rval = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH, 31, rval);
	qspi_writel(qspi_handle->qspi, COMMAND, rval);

	/* Set DMA trigger threshold to 8 packet length in QSPI FIFO */
	rval = qspi_readl(qspi, DMA_CTL);
	if (qspi_handle->qspi_info[0].trig_len == 16U) {
    96010398:	f9402a63 	ldr	x3, [x19, #80]
	dma_blk_size = MIN(qspi_handle->ramain_dma_packet, QSPI_DMA_BLK_SIZE_MAX);
    9601039c:	7140401f 	cmp	w0, #0x10, lsl #12
    960103a0:	1a819000 	csel	w0, w0, w1, ls  // ls = plast
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    960103a4:	b9400041 	ldr	w1, [x2]
{
    960103a8:	f90013f5 	str	x21, [sp, #32]
	rval = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH, 31, rval);
    960103ac:	32001021 	orr	w1, w1, #0x1f
	qspi_writel(qspi_handle->qspi, COMMAND, rval);
    960103b0:	b9000041 	str	w1, [x2]
	rval = qspi_readl(qspi, DMA_CTL);
    960103b4:	b9400282 	ldr	w2, [x20]
	if (qspi_handle->qspi_info[0].trig_len == 16U) {
    960103b8:	b9400063 	ldr	w3, [x3]
	rval = qspi_readl(qspi, DMA_CTL);
    960103bc:	11008042 	add	w2, w2, #0x20
	if (qspi_handle->qspi_info[0].trig_len == 16U) {
    960103c0:	7100407f 	cmp	w3, #0x10
	rval = qspi_readl(qspi, DMA_CTL);
    960103c4:	b9400041 	ldr	w1, [x2]
	if (qspi_handle->qspi_info[0].trig_len == 16U) {
    960103c8:	54000561 	b.ne	96010474 <qspi_receive_start_one_xfer_dma+0x104>  // b.any
		rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, RX_TRIG, TRIG16, rval);
    960103cc:	320d0421 	orr	w1, w1, #0x180000
	} else if (qspi_handle->qspi_info[0].trig_len == 8U) {
		rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, RX_TRIG, TRIG8, rval);
	}
	qspi_writel_flush(qspi, DMA_CTL, rval);
    960103d0:	b9000041 	str	w1, [x2]
    960103d4:	b9400281 	ldr	w1, [x20]
    960103d8:	11008022 	add	w2, w1, #0x20

	/* Set dma block size. The DMA Hardware block expects to be programmed
	 * one block less than the intended blocks to be transferred.
	 */
	qspi_writel(qspi_handle->qspi, DMA_BLK_SIZE, (dma_blk_size - 1U));
    960103dc:	11009021 	add	w1, w1, #0x24
	qspi_writel_flush(qspi, DMA_CTL, rval);
    960103e0:	b9400042 	ldr	w2, [x2]
	qspi_writel(qspi_handle->qspi, DMA_BLK_SIZE, (dma_blk_size - 1U));
    960103e4:	51000402 	sub	w2, w0, #0x1
    960103e8:	b9000022 	str	w2, [x1]

	qspi_handle->cur_req_dma_packet = dma_blk_size;
	qspi_handle->cur_remain_dma_packet = dma_blk_size;
    960103ec:	29128260 	stp	w0, w0, [x19, #148]

	qspi_handle->dma_params.dst = (uintptr_t)qspi_handle->cur_buf;
	qspi_handle->dma_params.src = qspi_handle->qspi->base_address + (uint32_t)QSPI_RX_FIFO_0;
	qspi_handle->dma_params.size = dma_blk_size * 4UL;
    960103f0:	531e7400 	lsl	w0, w0, #2
	qspi_handle->dma_params.dst = (uintptr_t)qspi_handle->cur_buf;
    960103f4:	f9405a61 	ldr	x1, [x19, #176]
    960103f8:	f9001a61 	str	x1, [x19, #48]
	qspi_handle->dma_params.src = qspi_handle->qspi->base_address + (uint32_t)QSPI_RX_FIFO_0;
    960103fc:	b9400281 	ldr	w1, [x20]
	qspi_handle->dma_params.size = dma_blk_size * 4UL;
    96010400:	b9003a60 	str	w0, [x19, #56]
	qspi_handle->dma_params.is_async_xfer = true;
    96010404:	52800020 	mov	w0, #0x1                   	// #1
    96010408:	39010260 	strb	w0, [x19, #64]
	qspi_handle->dma_params.dir = DMA_IO_TO_MEM;
	qspi_handle->dma_params.io_bus_width = BUS_WIDTH_32;
    9601040c:	52800040 	mov	w0, #0x2                   	// #2
    96010410:	b9004e60 	str	w0, [x19, #76]
	qspi_handle->dma_params.src = qspi_handle->qspi->base_address + (uint32_t)QSPI_RX_FIFO_0;
    96010414:	11062021 	add	w1, w1, #0x188

	if (qspi_context->dma_type == DMA_GPC) {
    96010418:	b9401a60 	ldr	w0, [x19, #24]
	qspi_handle->dma_params.src = qspi_handle->qspi->base_address + (uint32_t)QSPI_RX_FIFO_0;
    9601041c:	f9001661 	str	x1, [x19, #40]
	qspi_handle->dma_params.dir = DMA_IO_TO_MEM;
    96010420:	b900467f 	str	wzr, [x19, #68]
	if (qspi_context->dma_type == DMA_GPC) {
    96010424:	35000320 	cbnz	w0, 96010488 <qspi_receive_start_one_xfer_dma+0x118>
		qspi_handle->dma_params.io = qspi_handle->qspi->gpcdma_req;
    96010428:	b9400a80 	ldr	w0, [x20, #8]
	} else if (qspi_context->dma_type == DMA_BPMP) {
		qspi_handle->dma_params.io = qspi_handle->qspi->bpmpdma_req;
    9601042c:	b9004a60 	str	w0, [x19, #72]
	} else {
		/* No Action Required */
	}

	err = tegrabl_dma_transfer(qspi_context->dma_handle, qspi->dma_chan_id,
    96010430:	39401681 	ldrb	w1, [x20, #5]
    96010434:	9100a262 	add	x2, x19, #0x28
    96010438:	f9401260 	ldr	x0, [x19, #32]
    9601043c:	97fff356 	bl	9600d194 <tegrabl_dma_transfer>
    96010440:	2a0003f5 	mov	w21, w0
							   &qspi_handle->dma_params);
	if (err != TEGRABL_NO_ERROR) {
    96010444:	340002a0 	cbz	w0, 96010498 <qspi_receive_start_one_xfer_dma+0x128>
    96010448:	12005c15 	and	w21, w0, #0xffffff
    9601044c:	52a24000 	mov	w0, #0x12000000            	// #301989888
    96010450:	2a0002b5 	orr	w21, w21, w0
		TEGRABL_SET_HIGHEST_MODULE(err);
		pr_error("QSPI: dma transfer failed\n");
    96010454:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96010458:	91177400 	add	x0, x0, #0x5dd
    9601045c:	94004885 	bl	96022670 <tegrabl_printf>
	rval = qspi_readl(qspi, DMA_CTL);
	rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, DMA_EN, ENABLE, rval);
	qspi_writel_flush(qspi, DMA_CTL, rval);

	return TEGRABL_NO_ERROR;
}
    96010460:	2a1503e0 	mov	w0, w21
    96010464:	f94013f5 	ldr	x21, [sp, #32]
    96010468:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601046c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96010470:	d65f03c0 	ret
	} else if (qspi_handle->qspi_info[0].trig_len == 8U) {
    96010474:	7100207f 	cmp	w3, #0x8
    96010478:	54fffac1 	b.ne	960103d0 <qspi_receive_start_one_xfer_dma+0x60>  // b.any
		rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, RX_TRIG, TRIG8, rval);
    9601047c:	120b7421 	and	w1, w1, #0xffe7ffff
    96010480:	320c0021 	orr	w1, w1, #0x100000
    96010484:	17ffffd3 	b	960103d0 <qspi_receive_start_one_xfer_dma+0x60>
	} else if (qspi_context->dma_type == DMA_BPMP) {
    96010488:	7100041f 	cmp	w0, #0x1
    9601048c:	54fffd21 	b.ne	96010430 <qspi_receive_start_one_xfer_dma+0xc0>  // b.any
		qspi_handle->dma_params.io = qspi_handle->qspi->bpmpdma_req;
    96010490:	b9400e80 	ldr	w0, [x20, #12]
    96010494:	17ffffe6 	b	9601042c <qspi_receive_start_one_xfer_dma+0xbc>
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010498:	f9400261 	ldr	x1, [x19]
    9601049c:	b9400022 	ldr	w2, [x1]
    960104a0:	b9400040 	ldr	w0, [x2]
	rval = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, Rx_EN, ENABLE, rval);
    960104a4:	32140000 	orr	w0, w0, #0x1000
	qspi_writel_flush(qspi_handle->qspi, COMMAND, rval);
    960104a8:	b9000040 	str	w0, [x2]
    960104ac:	b9400020 	ldr	w0, [x1]
    960104b0:	b9400000 	ldr	w0, [x0]
	tegrabl_udelay(2);
    960104b4:	d2800040 	mov	x0, #0x2                   	// #2
    960104b8:	94003dfb 	bl	9601fca4 <tegrabl_udelay>
	rval = qspi_readl(qspi, DMA_CTL);
    960104bc:	b9400280 	ldr	w0, [x20]
    960104c0:	11008000 	add	w0, w0, #0x20
    960104c4:	b9400001 	ldr	w1, [x0]
	rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, DMA_EN, ENABLE, rval);
    960104c8:	32010021 	orr	w1, w1, #0x80000000
	qspi_writel_flush(qspi, DMA_CTL, rval);
    960104cc:	b9000001 	str	w1, [x0]
    960104d0:	b9400280 	ldr	w0, [x20]
    960104d4:	11008000 	add	w0, w0, #0x20
    960104d8:	b9400000 	ldr	w0, [x0]
	return TEGRABL_NO_ERROR;
    960104dc:	17ffffe1 	b	96010460 <qspi_receive_start_one_xfer_dma+0xf0>

00000000960104e0 <qspi_set_chip_select_level.isra.2>:
	uint32_t cmd_reg = qspi_readl(qspi, COMMAND);
    960104e0:	b9400004 	ldr	w4, [x0]
static void qspi_set_chip_select_level(struct tegrabl_qspi_info *qspi,
    960104e4:	12001c21 	and	w1, w1, #0xff
	if (is_active == true) {
    960104e8:	72001c5f 	tst	w2, #0xff
	uint32_t cmd_reg = qspi_readl(qspi, COMMAND);
    960104ec:	b9400083 	ldr	w3, [x4]
	if (is_active == true) {
    960104f0:	54000040 	b.eq	960104f8 <qspi_set_chip_select_level.isra.2+0x18>  // b.none
		is_level_high = !qdev->cs_active_low;
    960104f4:	52000021 	eor	w1, w1, #0x1
	cmd_reg = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, CS_SW_VAL, is_level_high ? 1 : 0, cmd_reg);
    960104f8:	7100003f 	cmp	w1, #0x0
    960104fc:	120b7863 	and	w3, w3, #0xffefffff
    96010500:	1a9f07e1 	cset	w1, ne  // ne = any
    96010504:	2a015061 	orr	w1, w3, w1, lsl #20
	qspi_writel_flush(qspi, COMMAND, cmd_reg);
    96010508:	b9000081 	str	w1, [x4]
    9601050c:	b9400000 	ldr	w0, [x0]
    96010510:	b9400000 	ldr	w0, [x0]
}
    96010514:	d65f03c0 	ret

0000000096010518 <qspi_clear_ready_bit.isra.3>:
	rval = qspi_readl(qspi, TRANSFER_STATUS);
    96010518:	b9400001 	ldr	w1, [x0]
    9601051c:	11004021 	add	w1, w1, #0x10
    96010520:	b9400022 	ldr	w2, [x1]
	if (rval & NV_DRF_DEF(QSPI, TRANSFER_STATUS, RDY, READY)) {
    96010524:	36f000c2 	tbz	w2, #30, 9601053c <qspi_clear_ready_bit.isra.3+0x24>
		qspi_writel_flush(qspi, TRANSFER_STATUS,
    96010528:	52a80002 	mov	w2, #0x40000000            	// #1073741824
    9601052c:	b9000022 	str	w2, [x1]
    96010530:	b9400000 	ldr	w0, [x0]
    96010534:	11004000 	add	w0, w0, #0x10
    96010538:	b9400000 	ldr	w0, [x0]
}
    9601053c:	d65f03c0 	ret

0000000096010540 <qspi_stop_tx>:
	rval = qspi_readl(qspi, COMMAND);
    96010540:	b9400003 	ldr	w3, [x0]
    96010544:	b9400061 	ldr	w1, [x3]
	rval = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, Tx_EN, DISABLE, rval);
    96010548:	12147821 	and	w1, w1, #0xfffff7ff
	qspi_writel(qspi, COMMAND, rval);
    9601054c:	b9000061 	str	w1, [x3]
	rval = qspi_readl(qspi, FIFO_STATUS);
    96010550:	b9400001 	ldr	w1, [x0]
    96010554:	11005021 	add	w1, w1, #0x14
    96010558:	b9400023 	ldr	w3, [x1]
	qspi_writel_flush(qspi, FIFO_STATUS, rval);
    9601055c:	b9000023 	str	w3, [x1]
    96010560:	b9400001 	ldr	w1, [x0]
    96010564:	11005021 	add	w1, w1, #0x14
    96010568:	b9400021 	ldr	w1, [x1]
	qspi_clear_ready_bit(qspi);
    9601056c:	17ffffeb 	b	96010518 <qspi_clear_ready_bit.isra.3>

0000000096010570 <qspi_stop_rx>:
	rval = qspi_readl(qspi, COMMAND);
    96010570:	b9400003 	ldr	w3, [x0]
    96010574:	b9400061 	ldr	w1, [x3]
	rval = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, Rx_EN, DISABLE, rval);
    96010578:	12137821 	and	w1, w1, #0xffffefff
	qspi_writel(qspi, COMMAND, rval);
    9601057c:	b9000061 	str	w1, [x3]
	rval = qspi_readl(qspi, FIFO_STATUS);
    96010580:	b9400001 	ldr	w1, [x0]
    96010584:	11005021 	add	w1, w1, #0x14
    96010588:	b9400023 	ldr	w3, [x1]
	qspi_writel_flush(qspi, FIFO_STATUS, rval);
    9601058c:	b9000023 	str	w3, [x1]
    96010590:	b9400001 	ldr	w1, [x0]
    96010594:	11005021 	add	w1, w1, #0x14
    96010598:	b9400021 	ldr	w1, [x1]
	qspi_clear_ready_bit(qspi);
    9601059c:	17ffffdf 	b	96010518 <qspi_clear_ready_bit.isra.3>

00000000960105a0 <qspi_hw_flush_fifos.isra.5>:
static tegrabl_error_t qspi_hw_flush_fifos(struct tegrabl_qspi_info *qspi,
    960105a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	switch (type) {
    960105a4:	7100043f 	cmp	w1, #0x1
static tegrabl_error_t qspi_hw_flush_fifos(struct tegrabl_qspi_info *qspi,
    960105a8:	910003fd 	mov	x29, sp
	status_reg = qspi_readl(qspi, FIFO_STATUS);
    960105ac:	b9400002 	ldr	w2, [x0]
static tegrabl_error_t qspi_hw_flush_fifos(struct tegrabl_qspi_info *qspi,
    960105b0:	a90153f3 	stp	x19, x20, [sp, #16]
	status_reg = qspi_readl(qspi, FIFO_STATUS);
    960105b4:	11005042 	add	w2, w2, #0x14
    960105b8:	b9400043 	ldr	w3, [x2]
static tegrabl_error_t qspi_hw_flush_fifos(struct tegrabl_qspi_info *qspi,
    960105bc:	f90013f5 	str	x21, [sp, #32]
	switch (type) {
    960105c0:	54000300 	b.eq	96010620 <qspi_hw_flush_fifos.isra.5+0x80>  // b.none
		if (NV_DRF_VAL(QSPI, FIFO_STATUS, TX_FIFO_EMPTY, status_reg) ==
    960105c4:	37100343 	tbnz	w3, #2, 9601062c <qspi_hw_flush_fifos.isra.5+0x8c>
		flush_field = NV_DRF_DEF(QSPI, FIFO_STATUS, TX_FIFO_FLUSH, FLUSH);
    960105c8:	52880015 	mov	w21, #0x4000                	// #16384
	qspi_writel_flush(qspi, FIFO_STATUS, flush_field);
    960105cc:	b9000055 	str	w21, [x2]
    960105d0:	aa0003f3 	mov	x19, x0
    960105d4:	5284e234 	mov	w20, #0x2711                	// #10001
    960105d8:	b9400000 	ldr	w0, [x0]
    960105dc:	11005000 	add	w0, w0, #0x14
    960105e0:	b9400000 	ldr	w0, [x0]
		tegrabl_udelay(1);
    960105e4:	d2800020 	mov	x0, #0x1                   	// #1
    960105e8:	94003daf 	bl	9601fca4 <tegrabl_udelay>
		status_reg = qspi_readl(qspi, FIFO_STATUS);
    960105ec:	b9400260 	ldr	w0, [x19]
    960105f0:	11005000 	add	w0, w0, #0x14
    960105f4:	b9400000 	ldr	w0, [x0]
		if ((status_reg & flush_field) == 0U) {
    960105f8:	6a0002bf 	tst	w21, w0
    960105fc:	54000180 	b.eq	9601062c <qspi_hw_flush_fifos.isra.5+0x8c>  // b.none
	} while (timeout_count <= FLUSHFIFO_TIMEOUT);
    96010600:	71000694 	subs	w20, w20, #0x1
    96010604:	54ffff01 	b.ne	960105e4 <qspi_hw_flush_fifos.isra.5+0x44>  // b.any
	return TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_FLUSH_FIFO);
    96010608:	528000c0 	mov	w0, #0x6                   	// #6
    9601060c:	72a24240 	movk	w0, #0x1212, lsl #16
}
    96010610:	a94153f3 	ldp	x19, x20, [sp, #16]
    96010614:	f94013f5 	ldr	x21, [sp, #32]
    96010618:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601061c:	d65f03c0 	ret
		if (NV_DRF_VAL(QSPI, FIFO_STATUS, RX_FIFO_EMPTY, status_reg) ==
    96010620:	37000063 	tbnz	w3, #0, 9601062c <qspi_hw_flush_fifos.isra.5+0x8c>
		flush_field = NV_DRF_DEF(QSPI, FIFO_STATUS, RX_FIFO_FLUSH, FLUSH);
    96010624:	52900015 	mov	w21, #0x8000                	// #32768
    96010628:	17ffffe9 	b	960105cc <qspi_hw_flush_fifos.isra.5+0x2c>
			return TEGRABL_NO_ERROR;
    9601062c:	52800000 	mov	w0, #0x0                   	// #0
    96010630:	17fffff8 	b	96010610 <qspi_hw_flush_fifos.isra.5+0x70>

0000000096010634 <qspi_hw_disable_transfer>:
{
    96010634:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96010638:	910003fd 	mov	x29, sp
	reg_val = qspi_readl(qspi, COMMAND);
    9601063c:	b9400001 	ldr	w1, [x0]
{
    96010640:	a90153f3 	stp	x19, x20, [sp, #16]
    96010644:	aa0003f4 	mov	x20, x0
	reg_val = qspi_readl(qspi, COMMAND);
    96010648:	b9400020 	ldr	w0, [x1]
	if (NV_DRF_VAL(QSPI, COMMAND, PIO, reg_val) == QSPI_COMMAND_0_PIO_PIO) {
    9601064c:	36f80060 	tbz	w0, #31, 96010658 <qspi_hw_disable_transfer+0x24>
		reg_val = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, PIO, STOP,
    96010650:	12007800 	and	w0, w0, #0x7fffffff
		qspi_writel(qspi, COMMAND, reg_val);
    96010654:	b9000020 	str	w0, [x1]
	reg_val = qspi_readl(qspi, DMA_CTL);
    96010658:	b9400280 	ldr	w0, [x20]
    9601065c:	11008000 	add	w0, w0, #0x20
    96010660:	b9400001 	ldr	w1, [x0]
	if (NV_DRF_VAL(QSPI, DMA_CTL, DMA_EN, reg_val) ==
    96010664:	36f80081 	tbz	w1, #31, 96010674 <qspi_hw_disable_transfer+0x40>
		reg_val = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, DMA_EN, DISABLE,
    96010668:	b9400001 	ldr	w1, [x0]
    9601066c:	12007821 	and	w1, w1, #0x7fffffff
		qspi_writel(qspi, DMA_CTL, reg_val);
    96010670:	b9000001 	str	w1, [x0]
	err = qspi_hw_flush_fifos(qspi, TX_FIFO_FLUSH);
    96010674:	52800001 	mov	w1, #0x0                   	// #0
    96010678:	aa1403e0 	mov	x0, x20
    9601067c:	97ffffc9 	bl	960105a0 <qspi_hw_flush_fifos.isra.5>
    96010680:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96010684:	34000120 	cbz	w0, 960106a8 <qspi_hw_disable_transfer+0x74>
		pr_error("Flush tx fifo failed err = %x\n", err);
    96010688:	2a0003e1 	mov	w1, w0
    9601068c:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96010690:	91166400 	add	x0, x0, #0x599
		pr_error("Flush rx fifo failed err = %x\n", err);
    96010694:	940047f7 	bl	96022670 <tegrabl_printf>
}
    96010698:	2a1303e0 	mov	w0, w19
    9601069c:	a94153f3 	ldp	x19, x20, [sp, #16]
    960106a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960106a4:	d65f03c0 	ret
	err = qspi_hw_flush_fifos(qspi, RX_FIFO_FLUSH);
    960106a8:	52800021 	mov	w1, #0x1                   	// #1
    960106ac:	aa1403e0 	mov	x0, x20
    960106b0:	97ffffbc 	bl	960105a0 <qspi_hw_flush_fifos.isra.5>
    960106b4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960106b8:	34ffff00 	cbz	w0, 96010698 <qspi_hw_disable_transfer+0x64>
		pr_error("Flush rx fifo failed err = %x\n", err);
    960106bc:	2a0003e1 	mov	w1, w0
    960106c0:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960106c4:	9116ec00 	add	x0, x0, #0x5bb
    960106c8:	17fffff3 	b	96010694 <qspi_hw_disable_transfer+0x60>

00000000960106cc <qspi_abort_tx_dma>:
{
    960106cc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960106d0:	910003fd 	mov	x29, sp
    960106d4:	f9000bf3 	str	x19, [sp, #16]
    960106d8:	aa0003f3 	mov	x19, x0
	qspi_stop_tx(qspi_handle->qspi);
    960106dc:	f9400000 	ldr	x0, [x0]
    960106e0:	97ffff98 	bl	96010540 <qspi_stop_tx>
	tegrabl_dma_transfer_abort(qspi_context->dma_handle,
    960106e4:	f9400260 	ldr	x0, [x19]
    960106e8:	39401401 	ldrb	w1, [x0, #5]
    960106ec:	f9401260 	ldr	x0, [x19, #32]
    960106f0:	97fff3a0 	bl	9600d570 <tegrabl_dma_transfer_abort>
	qspi_hw_disable_transfer(qspi_handle->qspi);
    960106f4:	f9400260 	ldr	x0, [x19]
}
    960106f8:	f9400bf3 	ldr	x19, [sp, #16]
    960106fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
	qspi_hw_disable_transfer(qspi_handle->qspi);
    96010700:	17ffffcd 	b	96010634 <qspi_hw_disable_transfer>

0000000096010704 <qspi_abort_rx_dma>:
{
    96010704:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96010708:	910003fd 	mov	x29, sp
    9601070c:	f9000bf3 	str	x19, [sp, #16]
    96010710:	aa0003f3 	mov	x19, x0
	qspi_stop_rx(qspi_handle->qspi);
    96010714:	f9400000 	ldr	x0, [x0]
    96010718:	97ffff96 	bl	96010570 <qspi_stop_rx>
	tegrabl_dma_transfer_abort(qspi_context->dma_handle,
    9601071c:	f9400260 	ldr	x0, [x19]
    96010720:	39401401 	ldrb	w1, [x0, #5]
    96010724:	f9401260 	ldr	x0, [x19, #32]
    96010728:	97fff392 	bl	9600d570 <tegrabl_dma_transfer_abort>
	qspi_hw_disable_transfer(qspi_handle->qspi);
    9601072c:	f9400260 	ldr	x0, [x19]
}
    96010730:	f9400bf3 	ldr	x19, [sp, #16]
    96010734:	a8c27bfd 	ldp	x29, x30, [sp], #32
	qspi_hw_disable_transfer(qspi_handle->qspi);
    96010738:	17ffffbf 	b	96010634 <qspi_hw_disable_transfer>

000000009601073c <qspi_send_start_one_xfer_pio>:
{
    9601073c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96010740:	910003fd 	mov	x29, sp
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010744:	f9400002 	ldr	x2, [x0]
    96010748:	b9400044 	ldr	w4, [x2]
    9601074c:	b9400081 	ldr	w1, [x4]
	rval = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH,
    96010750:	121b6823 	and	w3, w1, #0xffffffe0
    96010754:	b940a401 	ldr	w1, [x0, #164]
{
    96010758:	f9000bf3 	str	x19, [sp, #16]
    9601075c:	aa0003f3 	mov	x19, x0
	rval = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH,
    96010760:	51000421 	sub	w1, w1, #0x1
	qspi_handle->cur_xfer_is_dma = false;
    96010764:	3903901f 	strb	wzr, [x0, #228]
	rval = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH,
    96010768:	12001021 	and	w1, w1, #0x1f
    9601076c:	2a030021 	orr	w1, w1, w3
	qspi_writel(qspi_handle->qspi, COMMAND, rval);
    96010770:	b9000081 	str	w1, [x4]
	dma_blk_size = MIN(qspi_handle->ramain_pio_packet, QSPI_DMA_BLK_SIZE_MAX);
    96010774:	52a00023 	mov	w3, #0x10000               	// #65536
    96010778:	b9407c01 	ldr	w1, [x0, #124]
    9601077c:	7140403f 	cmp	w1, #0x10, lsl #12
    96010780:	1a839021 	csel	w1, w1, w3, ls  // ls = plast
	qspi_writel(qspi_handle->qspi, DMA_BLK_SIZE, (dma_blk_size - 1U));
    96010784:	b9400043 	ldr	w3, [x2]
    96010788:	51000424 	sub	w4, w1, #0x1
    9601078c:	11009063 	add	w3, w3, #0x24
    96010790:	b9000064 	str	w4, [x3]
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010794:	b9400043 	ldr	w3, [x2]
	qspi_handle->cur_remain_pio_packet = dma_blk_size;
    96010798:	29138401 	stp	w1, w1, [x0, #156]
	rval = qspi_readl(qspi_handle->qspi, COMMAND);
    9601079c:	b9400061 	ldr	w1, [x3]
	rval = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, Tx_EN, ENABLE, rval);
    960107a0:	32150021 	orr	w1, w1, #0x800
	qspi_writel_flush(qspi_handle->qspi, COMMAND, rval);
    960107a4:	b9000061 	str	w1, [x3]
    960107a8:	b9400041 	ldr	w1, [x2]
    960107ac:	b9400021 	ldr	w1, [x1]
	words_written = qspi_fill_tx_fifo(qspi_handle);
    960107b0:	97fffe45 	bl	960100c4 <qspi_fill_tx_fifo>
	if (words_written == 0U) {
    960107b4:	350001c0 	cbnz	w0, 960107ec <qspi_send_start_one_xfer_pio+0xb0>
		pr_error("Number of words written in TX FIFO is 0\n");
    960107b8:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960107bc:	9118a000 	add	x0, x0, #0x628
    960107c0:	940047ac 	bl	96022670 <tegrabl_printf>
		qspi_abort_tx_pio(qspi_handle->qspi);
    960107c4:	f9400264 	ldr	x4, [x19]
	qspi_stop_tx(qspi);
    960107c8:	aa0403e0 	mov	x0, x4
    960107cc:	97ffff5d 	bl	96010540 <qspi_stop_tx>
	qspi_hw_disable_transfer(qspi);
    960107d0:	aa0403e0 	mov	x0, x4
    960107d4:	97ffff98 	bl	96010634 <qspi_hw_disable_transfer>
    960107d8:	52802340 	mov	w0, #0x11a                 	// #282
    960107dc:	72a24240 	movk	w0, #0x1212, lsl #16
}
    960107e0:	f9400bf3 	ldr	x19, [sp, #16]
    960107e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960107e8:	d65f03c0 	ret
	rval = qspi_readl(qspi_handle->qspi, DMA_CTL);
    960107ec:	f9400260 	ldr	x0, [x19]
    960107f0:	b9400000 	ldr	w0, [x0]
    960107f4:	11008000 	add	w0, w0, #0x20
    960107f8:	b9400001 	ldr	w1, [x0]
	rval = NV_FLD_SET_DRF_DEF(QSPI, DMA_CTL, DMA_EN, ENABLE, rval);
    960107fc:	32010021 	orr	w1, w1, #0x80000000
	qspi_writel(qspi_handle->qspi, DMA_CTL, rval);
    96010800:	b9000001 	str	w1, [x0]
	return TEGRABL_NO_ERROR;
    96010804:	52800000 	mov	w0, #0x0                   	// #0
    96010808:	17fffff6 	b	960107e0 <qspi_send_start_one_xfer_pio+0xa4>

000000009601080c <qspi_start_remaining_one_xfer>:

static tegrabl_error_t qspi_start_remaining_one_xfer(
						struct tegrabl_qspi_handle *qspi_handle,
						bool *in_progress)
{
	if (in_progress != NULL) {
    9601080c:	b4000061 	cbz	x1, 96010818 <qspi_start_remaining_one_xfer+0xc>
		*in_progress = true;
    96010810:	52800022 	mov	w2, #0x1                   	// #1
    96010814:	39000022 	strb	w2, [x1]
	}

	if (qspi_handle->is_transmit) {
    96010818:	39431003 	ldrb	w3, [x0, #196]
    9601081c:	b9407802 	ldr	w2, [x0, #120]
    96010820:	340002a3 	cbz	w3, 96010874 <qspi_start_remaining_one_xfer+0x68>
		if (qspi_handle->ramain_dma_packet != 0U) {
    96010824:	340000a2 	cbz	w2, 96010838 <qspi_start_remaining_one_xfer+0x2c>
			qspi_handle->bits_pw = 32U;
    96010828:	d2800401 	mov	x1, #0x20                  	// #32
    9601082c:	f2c00081 	movk	x1, #0x4, lsl #32
    96010830:	f80a4001 	stur	x1, [x0, #164]
			qspi_handle->bytes_pw = 4U;
			return qspi_send_start_one_xfer_dma(qspi_handle);
    96010834:	17fffe78 	b	96010214 <qspi_send_start_one_xfer_dma>
		}

		if (qspi_handle->ramain_pio_4w_packet != 0U) {
    96010838:	b9408402 	ldr	w2, [x0, #132]
    9601083c:	340000e2 	cbz	w2, 96010858 <qspi_start_remaining_one_xfer+0x4c>
			qspi_handle->bits_pw = 32U;
    96010840:	d2800401 	mov	x1, #0x20                  	// #32
			qspi_handle->bytes_pw = 4U;
			qspi_handle->ramain_pio_packet = qspi_handle->ramain_pio_4w_packet;
    96010844:	b9007c02 	str	w2, [x0, #124]
			qspi_handle->bits_pw = 32U;
    96010848:	f2c00081 	movk	x1, #0x4, lsl #32
			qspi_handle->ramain_pio_4w_packet = 0;
    9601084c:	b900841f 	str	wzr, [x0, #132]
			qspi_handle->bits_pw = 32U;
    96010850:	f80a4001 	stur	x1, [x0, #164]
		if (qspi_handle->ramain_pio_1w_packet != 0U) {
			qspi_handle->bits_pw = 8U;
			qspi_handle->bytes_pw = 1U;
			qspi_handle->ramain_pio_packet = qspi_handle->ramain_pio_1w_packet;
			qspi_handle->ramain_pio_1w_packet = 0U;
			return qspi_send_start_one_xfer_pio(qspi_handle);
    96010854:	17ffffba 	b	9601073c <qspi_send_start_one_xfer_pio>
		if (qspi_handle->ramain_pio_1w_packet != 0U) {
    96010858:	b9408002 	ldr	w2, [x0, #128]
    9601085c:	34000342 	cbz	w2, 960108c4 <qspi_start_remaining_one_xfer+0xb8>
			qspi_handle->bits_pw = 8U;
    96010860:	d2800101 	mov	x1, #0x8                   	// #8
			qspi_handle->ramain_pio_1w_packet = 0U;
    96010864:	290ffc02 	stp	w2, wzr, [x0, #124]
			qspi_handle->bits_pw = 8U;
    96010868:	f2c00021 	movk	x1, #0x1, lsl #32
    9601086c:	f80a4001 	stur	x1, [x0, #164]
    96010870:	17fffff9 	b	96010854 <qspi_start_remaining_one_xfer+0x48>
		}
	} else {
		if (qspi_handle->ramain_dma_packet != 0U) {
    96010874:	340000a2 	cbz	w2, 96010888 <qspi_start_remaining_one_xfer+0x7c>
			qspi_handle->bits_pw = 32U;
    96010878:	d2800401 	mov	x1, #0x20                  	// #32
    9601087c:	f2c00081 	movk	x1, #0x4, lsl #32
    96010880:	f80a4001 	stur	x1, [x0, #164]
			qspi_handle->bytes_pw = 4U;
			return qspi_receive_start_one_xfer_dma(qspi_handle);
    96010884:	17fffebb 	b	96010370 <qspi_receive_start_one_xfer_dma>
		}

		if (qspi_handle->ramain_pio_4w_packet != 0U) {
    96010888:	b9408402 	ldr	w2, [x0, #132]
    9601088c:	340000e2 	cbz	w2, 960108a8 <qspi_start_remaining_one_xfer+0x9c>
			qspi_handle->bits_pw = 32U;
    96010890:	d2800401 	mov	x1, #0x20                  	// #32
			qspi_handle->bytes_pw = 4U;
			qspi_handle->ramain_pio_packet = qspi_handle->ramain_pio_4w_packet;
    96010894:	b9007c02 	str	w2, [x0, #124]
			qspi_handle->bits_pw = 32U;
    96010898:	f2c00081 	movk	x1, #0x4, lsl #32
			qspi_handle->ramain_pio_4w_packet = 0U;
    9601089c:	b900841f 	str	wzr, [x0, #132]
			qspi_handle->bits_pw = 32U;
    960108a0:	f80a4001 	stur	x1, [x0, #164]
		if (qspi_handle->ramain_pio_1w_packet != 0U) {
			qspi_handle->bits_pw = 8U;
			qspi_handle->bytes_pw = 1U;
			qspi_handle->ramain_pio_packet = qspi_handle->ramain_pio_1w_packet;
			qspi_handle->ramain_pio_1w_packet = 0U;
			return qspi_receive_start_one_xfer_pio(qspi_handle);
    960108a4:	17fffe23 	b	96010130 <qspi_receive_start_one_xfer_pio>
		if (qspi_handle->ramain_pio_1w_packet != 0U) {
    960108a8:	b9408002 	ldr	w2, [x0, #128]
    960108ac:	340000c2 	cbz	w2, 960108c4 <qspi_start_remaining_one_xfer+0xb8>
			qspi_handle->bits_pw = 8U;
    960108b0:	d2800101 	mov	x1, #0x8                   	// #8
			qspi_handle->ramain_pio_1w_packet = 0U;
    960108b4:	290ffc02 	stp	w2, wzr, [x0, #124]
			qspi_handle->bits_pw = 8U;
    960108b8:	f2c00021 	movk	x1, #0x1, lsl #32
    960108bc:	f80a4001 	stur	x1, [x0, #164]
    960108c0:	17fffff9 	b	960108a4 <qspi_start_remaining_one_xfer+0x98>
		}
	}

	if (in_progress != NULL) {
    960108c4:	b4000041 	cbz	x1, 960108cc <qspi_start_remaining_one_xfer+0xc0>
		*in_progress = false;
    960108c8:	3900003f 	strb	wzr, [x1]
	}

	return TEGRABL_NO_ERROR;
}
    960108cc:	52800000 	mov	w0, #0x0                   	// #0
    960108d0:	d65f03c0 	ret

00000000960108d4 <qspi_start_one_transaction>:
}

static tegrabl_error_t qspi_start_one_transaction(
		struct tegrabl_qspi_handle *qspi_handle)
{
	struct tegrabl_qspi_transfer *xfer = qspi_handle->cur_xfer;
    960108d4:	f9406801 	ldr	x1, [x0, #208]
	struct tegrabl_qspi_info *qspi = qspi_handle->qspi;
    960108d8:	f9400004 	ldr	x4, [x0]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t reg;
	bool pio_only = false;
	uint32_t bpw = 0;

	if (xfer->tx_buf != NULL) {
    960108dc:	f9400022 	ldr	x2, [x1]
    960108e0:	b40008c2 	cbz	x2, 960109f8 <qspi_start_one_transaction+0x124>
		qspi_handle->buf_addr = (uintptr_t)xfer->tx_buf;
    960108e4:	a90b0802 	stp	x2, x2, [x0, #176]
		qspi_handle->cur_buf = xfer->tx_buf;
		qspi_handle->buf_len = xfer->write_len;
    960108e8:	b9401422 	ldr	w2, [x1, #20]
    960108ec:	b900c002 	str	w2, [x0, #192]
		qspi_handle->is_transmit = true;
    960108f0:	52800022 	mov	w2, #0x1                   	// #1
    960108f4:	39031002 	strb	w2, [x0, #196]
		qspi_handle->cur_buf = xfer->rx_buf;
		qspi_handle->buf_len = xfer->read_len;
		qspi_handle->is_transmit = false;
	}

	qspi_handle->requested_bytes = qspi_handle->buf_len;
    960108f8:	b940c002 	ldr	w2, [x0, #192]

	if ((qspi_handle->param->fifo_access_mode != (uint32_t)QSPI_MODE_DMA)) {
		pio_only = true;
	}

	if (((qspi_handle->buf_addr & 0x3U) != 0U) ||
    960108fc:	f9405c03 	ldr	x3, [x0, #184]
	qspi_handle->requested_bytes = qspi_handle->buf_len;
    96010900:	b9006402 	str	w2, [x0, #100]
	if (((qspi_handle->buf_addr & 0x3U) != 0U) ||
    96010904:	f240047f 	tst	x3, #0x3
    96010908:	54000841 	b.ne	96010a10 <qspi_start_one_transaction+0x13c>  // b.any
    9601090c:	71003c5f 	cmp	w2, #0xf
    96010910:	54000809 	b.ls	96010a10 <qspi_start_one_transaction+0x13c>  // b.plast
	if ((qspi_handle->param->fifo_access_mode != (uint32_t)QSPI_MODE_DMA)) {
    96010914:	f9400805 	ldr	x5, [x0, #16]
    96010918:	121e7443 	and	w3, w2, #0xfffffffc
    9601091c:	4b030042 	sub	w2, w2, w3
		(qspi_handle->requested_bytes < QSPI_DMA_THRESOLD)){
		pio_only = true;
		bpw = 8U;
	}

	if (pio_only == true) {
    96010920:	b94018a5 	ldr	w5, [x5, #24]
    96010924:	710004bf 	cmp	w5, #0x1
    96010928:	54000780 	b.eq	96010a18 <qspi_start_one_transaction+0x144>  // b.none
		if (bpw == 8U) {
			qspi_handle->req_pio_4w_bytes = 0U;
			qspi_handle->req_pio_1w_bytes = qspi_handle->requested_bytes;
		} else {
			qspi_handle->req_pio_4w_bytes = (qspi_handle->requested_bytes >> 2) << 2;
    9601092c:	b9008c03 	str	w3, [x0, #140]
			qspi_handle->req_pio_1w_bytes = qspi_handle->requested_bytes;
    96010930:	b9008802 	str	w2, [x0, #136]
			qspi_handle->req_pio_1w_bytes = qspi_handle->requested_bytes -
												qspi_handle->req_pio_4w_bytes;
		}
		qspi_handle->req_dma_bytes = 0U;
    96010934:	b900901f 	str	wzr, [x0, #144]
												qspi_handle->req_dma_bytes;
		qspi_handle->req_pio_4w_bytes = 0U;
	}

	qspi_handle->req_dma_packet = qspi_handle->req_dma_bytes >> 2;
	qspi_handle->req_pio_4w_packet = qspi_handle->req_pio_4w_bytes >> 2;
    96010938:	29510805 	ldp	w5, w2, [x0, #136]
	qspi_handle->req_dma_packet = qspi_handle->req_dma_bytes >> 2;
    9601093c:	b9409003 	ldr	w3, [x0, #144]
	qspi_handle->req_pio_4w_packet = qspi_handle->req_pio_4w_bytes >> 2;
    96010940:	53027c42 	lsr	w2, w2, #2
	qspi_handle->req_pio_1w_packet = qspi_handle->req_pio_1w_bytes;
	qspi_handle->ramain_dma_packet = qspi_handle->req_dma_packet;
	qspi_handle->ramain_pio_4w_packet = qspi_handle->req_pio_4w_packet;
    96010944:	29100805 	stp	w5, w2, [x0, #128]
	qspi_handle->req_dma_packet = qspi_handle->req_dma_bytes >> 2;
    96010948:	53027c63 	lsr	w3, w3, #2
	qspi_handle->ramain_dma_packet = qspi_handle->req_dma_packet;
    9601094c:	290e8c02 	stp	w2, w3, [x0, #116]
	qspi_handle->ramain_pio_1w_packet = qspi_handle->req_pio_1w_packet;

	qspi_writel(qspi, MISC, 0);
    96010950:	b9400082 	ldr	w2, [x4]
	qspi_handle->req_pio_1w_packet = qspi_handle->req_pio_1w_bytes;
    96010954:	290d9403 	stp	w3, w5, [x0, #108]
	qspi_writel(qspi, MISC, 0);
    96010958:	11065042 	add	w2, w2, #0x194
    9601095c:	b900005f 	str	wzr, [x2]

	reg = qspi_readl(qspi, COMMAND);
    96010960:	b9400085 	ldr	w5, [x4]

	reg = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, SDR_DDR_SEL, xfer->op_mode, reg);
    96010964:	b9402822 	ldr	w2, [x1, #40]
	reg = qspi_readl(qspi, COMMAND);
    96010968:	b94000a3 	ldr	w3, [x5]
	reg = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, SDR_DDR_SEL, xfer->op_mode, reg);
    9601096c:	53170042 	ubfiz	w2, w2, #9, #1
    96010970:	12167063 	and	w3, w3, #0xfffffc7f
	reg = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, INTERFACE_WIDTH, xfer->bus_width,
    96010974:	2a020063 	orr	w3, w3, w2
    96010978:	b9402022 	ldr	w2, [x1, #32]
    9601097c:	53190442 	ubfiz	w2, w2, #7, #2
    96010980:	2a030042 	orr	w2, w2, w3
							 reg);
	/* Set Packed and Unpacked mode */
	reg = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, PACKED, DISABLE, reg);

	/* Number of bits to be transmitted per packet in unpacked mode = 32 */
	reg = NV_FLD_SET_DRF_NUM(QSPI, COMMAND, BIT_LENGTH,
    96010984:	121a6443 	and	w3, w2, #0xffffffc0
    96010988:	b940a402 	ldr	w2, [x0, #164]
    9601098c:	51000442 	sub	w2, w2, #0x1
    96010990:	12001042 	and	w2, w2, #0x1f
    96010994:	2a030042 	orr	w2, w2, w3
							 (qspi_handle->bits_pw - 1UL), reg);
	qspi_writel(qspi, COMMAND, reg);
    96010998:	b90000a2 	str	w2, [x5]
	if ((qspi_handle->is_transmit == true) && (xfer->write_len < 6UL) &&
    9601099c:	39431002 	ldrb	w2, [x0, #196]
    960109a0:	340001a2 	cbz	w2, 960109d4 <qspi_start_one_transaction+0x100>
    960109a4:	b9401422 	ldr	w2, [x1, #20]
    960109a8:	7100145f 	cmp	w2, #0x5
    960109ac:	54000148 	b.hi	960109d4 <qspi_start_one_transaction+0x100>  // b.pmore
		(xfer->dummy_cycles != 0U)) {
    960109b0:	b9402422 	ldr	w2, [x1, #36]
	if ((qspi_handle->is_transmit == true) && (xfer->write_len < 6UL) &&
    960109b4:	34000102 	cbz	w2, 960109d4 <qspi_start_one_transaction+0x100>
		reg = qspi_readl(qspi, MISC);
    960109b8:	b9400083 	ldr	w3, [x4]
		reg = NV_FLD_SET_DRF_NUM(QSPI, MISC, NUM_OF_DUMMY_CLK_CYCLES,
    960109bc:	12001c42 	and	w2, w2, #0xff
		reg = qspi_readl(qspi, MISC);
    960109c0:	11065063 	add	w3, w3, #0x194
    960109c4:	b9400064 	ldr	w4, [x3]
		reg = NV_FLD_SET_DRF_NUM(QSPI, MISC, NUM_OF_DUMMY_CLK_CYCLES,
    960109c8:	12185c84 	and	w4, w4, #0xffffff00
    960109cc:	2a040042 	orr	w2, w2, w4
		qspi_writel(qspi, MISC, reg);
    960109d0:	b9000062 	str	w2, [x3]
	if (xfer->op_mode != qspi_handle->curr_op_mode) {
    960109d4:	b940e802 	ldr	w2, [x0, #232]
    960109d8:	b9402821 	ldr	w1, [x1, #40]
    960109dc:	6b02003f 	cmp	w1, w2
    960109e0:	54000080 	b.eq	960109f0 <qspi_start_one_transaction+0x11c>  // b.none
		} else if (xfer->op_mode == SDR_MODE) {
    960109e4:	7100043f 	cmp	w1, #0x1
    960109e8:	540001e8 	b.hi	96010a24 <qspi_start_one_transaction+0x150>  // b.pmore
		qspi_handle->curr_op_mode = xfer->op_mode;
    960109ec:	b900e801 	str	w1, [x0, #232]
	err = program_dummy_cycles(qspi_handle);
	if (err != TEGRABL_NO_ERROR) {
		return TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_OP_CODE);
	}

	return qspi_start_remaining_one_xfer(qspi_handle, NULL);
    960109f0:	d2800001 	mov	x1, #0x0                   	// #0
    960109f4:	17ffff86 	b	9601080c <qspi_start_remaining_one_xfer>
		qspi_handle->buf_addr = (uintptr_t)xfer->rx_buf;
    960109f8:	f9400422 	ldr	x2, [x1, #8]
    960109fc:	a90b0802 	stp	x2, x2, [x0, #176]
		qspi_handle->buf_len = xfer->read_len;
    96010a00:	b9401822 	ldr	w2, [x1, #24]
    96010a04:	b900c002 	str	w2, [x0, #192]
		qspi_handle->is_transmit = false;
    96010a08:	3903101f 	strb	wzr, [x0, #196]
    96010a0c:	17ffffbb 	b	960108f8 <qspi_start_one_transaction+0x24>
			qspi_handle->req_pio_4w_bytes = 0U;
    96010a10:	b9008c1f 	str	wzr, [x0, #140]
    96010a14:	17ffffc7 	b	96010930 <qspi_start_one_transaction+0x5c>
		qspi_handle->req_pio_4w_bytes = 0U;
    96010a18:	29117c02 	stp	w2, wzr, [x0, #136]
		qspi_handle->req_dma_bytes = (qspi_handle->requested_bytes >> 2) << 2;
    96010a1c:	b9009003 	str	w3, [x0, #144]
    96010a20:	17ffffc6 	b	96010938 <qspi_start_one_transaction+0x64>
}
    96010a24:	5281e540 	mov	w0, #0xf2a                 	// #3882
    96010a28:	72a24240 	movk	w0, #0x1212, lsl #16
    96010a2c:	d65f03c0 	ret

0000000096010a30 <qspi_wait_transfer>:

static tegrabl_error_t qspi_wait_transfer(struct tegrabl_qspi_handle *qspi_handle,
											bool is_abort)
{
    96010a30:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96010a34:	910003fd 	mov	x29, sp
    96010a38:	a90153f3 	stp	x19, x20, [sp, #16]
    96010a3c:	aa0003f3 	mov	x19, x0
    96010a40:	a9025bf5 	stp	x21, x22, [sp, #32]
    96010a44:	12001c35 	and	w21, w1, #0xff
    96010a48:	39439000 	ldrb	w0, [x0, #228]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	if (qspi_handle->is_transmit) {
    96010a4c:	39431261 	ldrb	w1, [x19, #196]
    96010a50:	f9400276 	ldr	x22, [x19]
{
    96010a54:	a90363f7 	stp	x23, x24, [sp, #48]
    96010a58:	f90023f9 	str	x25, [sp, #64]
	if (qspi_handle->is_transmit) {
    96010a5c:	34000961 	cbz	w1, 96010b88 <qspi_wait_transfer+0x158>
		if (qspi_handle->cur_xfer_is_dma == true) {
    96010a60:	34000660 	cbz	w0, 96010b2c <qspi_wait_transfer+0xfc>
	err = tegrabl_dma_transfer_status(qspi_context->dma_handle,
    96010a64:	9100a277 	add	x23, x19, #0x28
	err = qspi_wait_for_ready_bit(qspi_handle);
    96010a68:	aa1303e0 	mov	x0, x19
	uint32_t st_time = qspi_handle->xfer_start_time;
    96010a6c:	b9405e78 	ldr	w24, [x19, #92]
	err = qspi_wait_for_ready_bit(qspi_handle);
    96010a70:	97fffdce 	bl	960101a8 <qspi_wait_for_ready_bit>
    96010a74:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96010a78:	350001a0 	cbnz	w0, 96010aac <qspi_wait_transfer+0x7c>
		rval = qspi_readl(qspi_handle->qspi, FIFO_STATUS);
    96010a7c:	f9400260 	ldr	x0, [x19]
    96010a80:	b9400000 	ldr	w0, [x0]
    96010a84:	11005000 	add	w0, w0, #0x14
    96010a88:	b9400000 	ldr	w0, [x0]
		if ((rval & NV_DRF_DEF(QSPI, FIFO_STATUS,
    96010a8c:	37101320 	tbnz	w0, #2, 96010cf0 <qspi_wait_transfer+0x2c0>
		elapsed_time = (uint32_t)(tegrabl_get_timestamp_us() - st_time);
    96010a90:	94003c7b 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96010a94:	4b180000 	sub	w0, w0, w24
	} while (elapsed_time < qspi_handle->xfer_timeout);
    96010a98:	b9406261 	ldr	w1, [x19, #96]
    96010a9c:	6b01001f 	cmp	w0, w1
    96010aa0:	54fffee3 	b.cc	96010a7c <qspi_wait_transfer+0x4c>  // b.lo, b.ul, b.last
	return TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_CHECK_TIMEOUT);
    96010aa4:	5280e0d4 	mov	w20, #0x706                 	// #1798
    96010aa8:	72a24254 	movk	w20, #0x1212, lsl #16
		if (is_abort == true) {
    96010aac:	35000095 	cbnz	w21, 96010abc <qspi_wait_transfer+0x8c>
		return TEGRABL_ERROR(TEGRABL_ERR_XFER_IN_PROGRESS,
    96010ab0:	5280a5f4 	mov	w20, #0x52f                 	// #1327
		return TEGRABL_ERROR(TEGRABL_ERR_XFER_IN_PROGRESS,
    96010ab4:	72a24254 	movk	w20, #0x1212, lsl #16
    96010ab8:	14000003 	b	96010ac4 <qspi_wait_transfer+0x94>
			qspi_abort_tx_dma(qspi_handle);
    96010abc:	aa1303e0 	mov	x0, x19
    96010ac0:	97ffff03 	bl	960106cc <qspi_abort_tx_dma>
			return TEGRABL_NO_ERROR;
		} else {
			return err;
		}
	}
}
    96010ac4:	2a1403e0 	mov	w0, w20
    96010ac8:	f94023f9 	ldr	x25, [sp, #64]
    96010acc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96010ad0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96010ad4:	a94363f7 	ldp	x23, x24, [sp, #48]
    96010ad8:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96010adc:	d65f03c0 	ret
	qspi_stop_tx(qspi_handle->qspi);
    96010ae0:	97fffe98 	bl	96010540 <qspi_stop_tx>
    96010ae4:	17fffff8 	b	96010ac4 <qspi_wait_transfer+0x94>
			qspi_abort_tx_pio(qspi_handle->qspi);
    96010ae8:	f9400264 	ldr	x4, [x19]
	qspi_stop_tx(qspi);
    96010aec:	aa0403e0 	mov	x0, x4
    96010af0:	97fffe94 	bl	96010540 <qspi_stop_tx>
	qspi_hw_disable_transfer(qspi);
    96010af4:	aa0403e0 	mov	x0, x4
	return TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_CHECK_TIMEOUT);
    96010af8:	5280e0d4 	mov	w20, #0x706                 	// #1798
	qspi_hw_disable_transfer(qspi);
    96010afc:	97fffece 	bl	96010634 <qspi_hw_disable_transfer>
    96010b00:	17ffffed 	b	96010ab4 <qspi_wait_transfer+0x84>
	qspi_handle->ramain_pio_packet -= qspi_handle->cur_req_pio_packet;
    96010b04:	b9407e61 	ldr	w1, [x19, #124]
    96010b08:	b9409e62 	ldr	w2, [x19, #156]
    96010b0c:	4b020021 	sub	w1, w1, w2
    96010b10:	b9007e61 	str	w1, [x19, #124]
	if (qspi_handle->ramain_pio_packet != 0U) {
    96010b14:	34000341 	cbz	w1, 96010b7c <qspi_wait_transfer+0x14c>
		qspi_clear_ready_bit(qspi_handle->qspi);
    96010b18:	97fffe80 	bl	96010518 <qspi_clear_ready_bit.isra.3>
		err = qspi_send_start_one_xfer_pio(qspi_handle);
    96010b1c:	aa1303e0 	mov	x0, x19
    96010b20:	97ffff07 	bl	9601073c <qspi_send_start_one_xfer_pio>
    96010b24:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96010b28:	35fffce0 	cbnz	w0, 96010ac4 <qspi_wait_transfer+0x94>
	uint32_t st_time = qspi_handle->xfer_start_time;
    96010b2c:	b9405e74 	ldr	w20, [x19, #92]
		rval = qspi_readl(qspi_handle->qspi, FIFO_STATUS);
    96010b30:	f9400260 	ldr	x0, [x19]
    96010b34:	b9400001 	ldr	w1, [x0]
    96010b38:	11005021 	add	w1, w1, #0x14
    96010b3c:	b9400021 	ldr	w1, [x1]
		if ((rval & NV_DRF_DEF(QSPI, FIFO_STATUS, TX_FIFO_FULL, FULL)) == 0U) {
    96010b40:	36181061 	tbz	w1, #3, 96010d4c <qspi_wait_transfer+0x31c>
		elapsed_time = (uint32_t)(tegrabl_get_timestamp_us() - st_time);
    96010b44:	94003c4e 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96010b48:	4b140000 	sub	w0, w0, w20
	} while (elapsed_time < qspi_handle->xfer_timeout);
    96010b4c:	b9406261 	ldr	w1, [x19, #96]
    96010b50:	6b01001f 	cmp	w0, w1
    96010b54:	54fffee3 	b.cc	96010b30 <qspi_wait_transfer+0x100>  // b.lo, b.ul, b.last
		rval = qspi_readl(qspi_handle->qspi, COMMAND);
    96010b58:	f9400260 	ldr	x0, [x19]
    96010b5c:	b9400000 	ldr	w0, [x0]
    96010b60:	b9400001 	ldr	w1, [x0]
		pr_error("Tx fifo is not becoming empty, comand 0x%08x\n", rval);
    96010b64:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96010b68:	911a8400 	add	x0, x0, #0x6a1
    96010b6c:	940046c1 	bl	96022670 <tegrabl_printf>
		if (is_abort == true) {
    96010b70:	35fffbd5 	cbnz	w21, 96010ae8 <qspi_wait_transfer+0xb8>
		return TEGRABL_ERROR(TEGRABL_ERR_XFER_IN_PROGRESS,
    96010b74:	528065f4 	mov	w20, #0x32f                 	// #815
    96010b78:	17ffffcf 	b	96010ab4 <qspi_wait_transfer+0x84>
	qspi_stop_tx(qspi_handle->qspi);
    96010b7c:	97fffe71 	bl	96010540 <qspi_stop_tx>
			return TEGRABL_NO_ERROR;
    96010b80:	52800014 	mov	w20, #0x0                   	// #0
    96010b84:	17ffffd0 	b	96010ac4 <qspi_wait_transfer+0x94>
		if (qspi_handle->cur_xfer_is_dma == true) {
    96010b88:	34000900 	cbz	w0, 96010ca8 <qspi_wait_transfer+0x278>
	uint32_t st_time = qspi_handle->xfer_start_time;
    96010b8c:	b9405e77 	ldr	w23, [x19, #92]
		err = tegrabl_dma_transfer_status(qspi_context->dma_handle,
    96010b90:	9100a278 	add	x24, x19, #0x28
		tegrabl_udelay(50);
    96010b94:	d2800640 	mov	x0, #0x32                  	// #50
    96010b98:	94003c43 	bl	9601fca4 <tegrabl_udelay>
		err = tegrabl_dma_transfer_status(qspi_context->dma_handle,
    96010b9c:	394016c1 	ldrb	w1, [x22, #5]
    96010ba0:	aa1803e2 	mov	x2, x24
    96010ba4:	f9401260 	ldr	x0, [x19, #32]
    96010ba8:	97fff245 	bl	9600d4bc <tegrabl_dma_transfer_status>
    96010bac:	2a0003f4 	mov	w20, w0
		if (err == TEGRABL_NO_ERROR) {
    96010bb0:	34000e60 	cbz	w0, 96010d7c <qspi_wait_transfer+0x34c>
		elapsed_time = (uint32_t)(tegrabl_get_timestamp_us() - st_time);
    96010bb4:	94003c32 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96010bb8:	4b170000 	sub	w0, w0, w23
	} while (elapsed_time < qspi_handle->xfer_timeout);
    96010bbc:	b9406261 	ldr	w1, [x19, #96]
    96010bc0:	6b01001f 	cmp	w0, w1
    96010bc4:	54fffe83 	b.cc	96010b94 <qspi_wait_transfer+0x164>  // b.lo, b.ul, b.last
		if (is_abort == true) {
    96010bc8:	34fff755 	cbz	w21, 96010ab0 <qspi_wait_transfer+0x80>
			qspi_abort_rx_dma(qspi_handle);
    96010bcc:	aa1303e0 	mov	x0, x19
    96010bd0:	97fffecd 	bl	96010704 <qspi_abort_rx_dma>
    96010bd4:	17ffffbc 	b	96010ac4 <qspi_wait_transfer+0x94>
		rval = qspi_readl(qspi_handle->qspi, FIFO_STATUS);
    96010bd8:	f9400260 	ldr	x0, [x19]
    96010bdc:	b9400001 	ldr	w1, [x0]
    96010be0:	11005021 	add	w1, w1, #0x14
    96010be4:	b9400021 	ldr	w1, [x1]
		if ((rval & NV_DRF_DEF(QSPI, FIFO_STATUS, RX_FIFO_EMPTY, EMPTY)) != 0U) {
    96010be8:	37000dc1 	tbnz	w1, #0, 96010da0 <qspi_wait_transfer+0x370>
		elapsed_time = (uint32_t)(tegrabl_get_timestamp_us() - st_time);
    96010bec:	94003c24 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96010bf0:	4b190000 	sub	w0, w0, w25
	} while (elapsed_time < qspi_handle->xfer_timeout);
    96010bf4:	b9406261 	ldr	w1, [x19, #96]
    96010bf8:	6b01001f 	cmp	w0, w1
    96010bfc:	54fffee3 	b.cc	96010bd8 <qspi_wait_transfer+0x1a8>  // b.lo, b.ul, b.last
	return TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_CHECK_TIMEOUT);
    96010c00:	5280e0d4 	mov	w20, #0x706                 	// #1798
    96010c04:	72a24254 	movk	w20, #0x1212, lsl #16
    96010c08:	17fffff0 	b	96010bc8 <qspi_wait_transfer+0x198>
		qspi_clear_ready_bit(qspi_handle->qspi);
    96010c0c:	97fffe43 	bl	96010518 <qspi_clear_ready_bit.isra.3>
		err = qspi_receive_start_one_xfer_dma(qspi_handle);
    96010c10:	aa1303e0 	mov	x0, x19
    96010c14:	97fffdd7 	bl	96010370 <qspi_receive_start_one_xfer_dma>
    96010c18:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96010c1c:	34fffbc0 	cbz	w0, 96010b94 <qspi_wait_transfer+0x164>
    96010c20:	17ffffa9 	b	96010ac4 <qspi_wait_transfer+0x94>
				qspi_abort_rx_pio(qspi_handle->qspi);
    96010c24:	f9400264 	ldr	x4, [x19]
	qspi_stop_rx(qspi);
    96010c28:	aa0403e0 	mov	x0, x4
    96010c2c:	97fffe51 	bl	96010570 <qspi_stop_rx>
    96010c30:	17ffffb1 	b	96010af4 <qspi_wait_transfer+0xc4>
		rval = qspi_readl(qspi_handle->qspi, RX_FIFO);
    96010c34:	f9400262 	ldr	x2, [x19]
		if (qspi_handle->bytes_pw > 1U) {
    96010c38:	b940aa64 	ldr	w4, [x19, #168]
		rval = qspi_readl(qspi_handle->qspi, RX_FIFO);
    96010c3c:	b9400042 	ldr	w2, [x2]
		if (qspi_handle->bytes_pw > 1U) {
    96010c40:	7100049f 	cmp	w4, #0x1
		rval = qspi_readl(qspi_handle->qspi, RX_FIFO);
    96010c44:	11062042 	add	w2, w2, #0x188
    96010c48:	b9400043 	ldr	w3, [x2]
    96010c4c:	f9405a62 	ldr	x2, [x19, #176]
		if (qspi_handle->bytes_pw > 1U) {
    96010c50:	54000169 	b.ls	96010c7c <qspi_wait_transfer+0x24c>  // b.plast
			*((uint32_t *)qspi_handle->cur_buf) = rval;
    96010c54:	b9000043 	str	w3, [x2]
		qspi_handle->cur_buf += qspi_handle->bytes_pw;
    96010c58:	f9405a62 	ldr	x2, [x19, #176]
		words_count--;
    96010c5c:	51000421 	sub	w1, w1, #0x1
		qspi_handle->cur_buf += qspi_handle->bytes_pw;
    96010c60:	b940aa63 	ldr	w3, [x19, #168]
    96010c64:	8b030042 	add	x2, x2, x3
    96010c68:	f9005a62 	str	x2, [x19, #176]
		qspi_handle->cur_remain_pio_packet--;
    96010c6c:	b940a262 	ldr	w2, [x19, #160]
    96010c70:	51000442 	sub	w2, w2, #0x1
    96010c74:	b900a262 	str	w2, [x19, #160]
    96010c78:	1400005d 	b	96010dec <qspi_wait_transfer+0x3bc>
			*(qspi_handle->cur_buf) = (uint8_t)(rval);
    96010c7c:	39000043 	strb	w3, [x2]
    96010c80:	17fffff6 	b	96010c58 <qspi_wait_transfer+0x228>
	qspi_handle->ramain_pio_packet -= qspi_handle->cur_req_pio_packet;
    96010c84:	b9407e61 	ldr	w1, [x19, #124]
    96010c88:	b9409e62 	ldr	w2, [x19, #156]
    96010c8c:	f9400260 	ldr	x0, [x19]
    96010c90:	4b020021 	sub	w1, w1, w2
    96010c94:	b9007e61 	str	w1, [x19, #124]
	if (qspi_handle->ramain_pio_packet != 0U) {
    96010c98:	34000281 	cbz	w1, 96010ce8 <qspi_wait_transfer+0x2b8>
		qspi_clear_ready_bit(qspi_handle->qspi);
    96010c9c:	97fffe1f 	bl	96010518 <qspi_clear_ready_bit.isra.3>
		qspi_receive_start_one_xfer_pio(qspi_handle);
    96010ca0:	aa1303e0 	mov	x0, x19
    96010ca4:	97fffd23 	bl	96010130 <qspi_receive_start_one_xfer_pio>
	if (qspi_handle->cur_remain_pio_packet != 0U) {
    96010ca8:	b940a260 	ldr	w0, [x19, #160]
    96010cac:	34fffec0 	cbz	w0, 96010c84 <qspi_wait_transfer+0x254>
	uint32_t st_time = qspi_handle->xfer_start_time;
    96010cb0:	b9405e74 	ldr	w20, [x19, #92]
		rval = qspi_readl(qspi_handle->qspi, FIFO_STATUS);
    96010cb4:	f9400260 	ldr	x0, [x19]
    96010cb8:	b9400000 	ldr	w0, [x0]
    96010cbc:	11005000 	add	w0, w0, #0x14
    96010cc0:	b9400001 	ldr	w1, [x0]
		if ((rval & NV_DRF_DEF(QSPI, FIFO_STATUS, RX_FIFO_EMPTY, EMPTY)) == 0U) {
    96010cc4:	36000861 	tbz	w1, #0, 96010dd0 <qspi_wait_transfer+0x3a0>
		elapsed_time = (uint32_t)(tegrabl_get_timestamp_us() - st_time);
    96010cc8:	94003bed 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96010ccc:	4b140000 	sub	w0, w0, w20
	} while (elapsed_time < qspi_handle->xfer_timeout);
    96010cd0:	b9406261 	ldr	w1, [x19, #96]
    96010cd4:	6b01001f 	cmp	w0, w1
    96010cd8:	54fffee3 	b.cc	96010cb4 <qspi_wait_transfer+0x284>  // b.lo, b.ul, b.last
			if (is_abort == true) {
    96010cdc:	35fffa55 	cbnz	w21, 96010c24 <qspi_wait_transfer+0x1f4>
			return TEGRABL_ERROR(TEGRABL_ERR_XFER_IN_PROGRESS,
    96010ce0:	528085f4 	mov	w20, #0x42f                 	// #1071
    96010ce4:	17ffff74 	b	96010ab4 <qspi_wait_transfer+0x84>
	qspi_stop_rx(qspi_handle->qspi);
    96010ce8:	97fffe22 	bl	96010570 <qspi_stop_rx>
    96010cec:	17ffffa5 	b	96010b80 <qspi_wait_transfer+0x150>
	err = tegrabl_dma_transfer_status(qspi_context->dma_handle,
    96010cf0:	394016c1 	ldrb	w1, [x22, #5]
    96010cf4:	aa1703e2 	mov	x2, x23
    96010cf8:	f9401260 	ldr	x0, [x19, #32]
    96010cfc:	97fff1f0 	bl	9600d4bc <tegrabl_dma_transfer_status>
    96010d00:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96010d04:	35ffed40 	cbnz	w0, 96010aac <qspi_wait_transfer+0x7c>
	qspi_handle->ramain_dma_packet -= qspi_handle->cur_req_dma_packet;
    96010d08:	b9409660 	ldr	w0, [x19, #148]
	qspi_handle->cur_buf += (qspi_handle->cur_req_dma_packet *
    96010d0c:	b940aa62 	ldr	w2, [x19, #168]
	qspi_handle->ramain_dma_packet -= qspi_handle->cur_req_dma_packet;
    96010d10:	b9407a61 	ldr	w1, [x19, #120]
    96010d14:	4b000021 	sub	w1, w1, w0
    96010d18:	b9007a61 	str	w1, [x19, #120]
	qspi_handle->cur_buf += (qspi_handle->cur_req_dma_packet *
    96010d1c:	1b027c00 	mul	w0, w0, w2
    96010d20:	f9405a62 	ldr	x2, [x19, #176]
    96010d24:	8b000040 	add	x0, x2, x0
    96010d28:	f9005a60 	str	x0, [x19, #176]
    96010d2c:	f9400260 	ldr	x0, [x19]
	if (qspi_handle->ramain_dma_packet != 0U) {
    96010d30:	34ffed81 	cbz	w1, 96010ae0 <qspi_wait_transfer+0xb0>
		qspi_clear_ready_bit(qspi_handle->qspi);
    96010d34:	97fffdf9 	bl	96010518 <qspi_clear_ready_bit.isra.3>
		err = qspi_send_start_one_xfer_dma(qspi_handle);
    96010d38:	aa1303e0 	mov	x0, x19
    96010d3c:	97fffd36 	bl	96010214 <qspi_send_start_one_xfer_dma>
    96010d40:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96010d44:	34ffe920 	cbz	w0, 96010a68 <qspi_wait_transfer+0x38>
    96010d48:	17ffff5f 	b	96010ac4 <qspi_wait_transfer+0x94>
	if (qspi_handle->cur_remain_pio_packet != 0U) {
    96010d4c:	b940a261 	ldr	w1, [x19, #160]
    96010d50:	34ffeda1 	cbz	w1, 96010b04 <qspi_wait_transfer+0xd4>
		words_written = qspi_fill_tx_fifo(qspi_handle);
    96010d54:	aa1303e0 	mov	x0, x19
    96010d58:	97fffcdb 	bl	960100c4 <qspi_fill_tx_fifo>
		if (words_written == 0U) {
    96010d5c:	35ffee80 	cbnz	w0, 96010b2c <qspi_wait_transfer+0xfc>
			qspi_abort_tx_pio(qspi_handle->qspi);
    96010d60:	f9400264 	ldr	x4, [x19]
			return TEGRABL_ERROR(TEGRABL_ERR_WRITE_FAILED,
    96010d64:	52802354 	mov	w20, #0x11a                 	// #282
	qspi_stop_tx(qspi);
    96010d68:	aa0403e0 	mov	x0, x4
    96010d6c:	97fffdf5 	bl	96010540 <qspi_stop_tx>
	qspi_hw_disable_transfer(qspi);
    96010d70:	aa0403e0 	mov	x0, x4
    96010d74:	97fffe30 	bl	96010634 <qspi_hw_disable_transfer>
    96010d78:	17ffff4f 	b	96010ab4 <qspi_wait_transfer+0x84>
	err = qspi_wait_for_ready_bit(qspi_handle);
    96010d7c:	aa1303e0 	mov	x0, x19
	uint32_t st_time = qspi_handle->xfer_start_time;
    96010d80:	b9405e79 	ldr	w25, [x19, #92]
	err = qspi_wait_for_ready_bit(qspi_handle);
    96010d84:	97fffd09 	bl	960101a8 <qspi_wait_for_ready_bit>
    96010d88:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96010d8c:	34fff260 	cbz	w0, 96010bd8 <qspi_wait_transfer+0x1a8>
		pr_error("QSPI RXDMA: Ready bit not ready\n");
    96010d90:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96010d94:	91195000 	add	x0, x0, #0x654
    96010d98:	94004636 	bl	96022670 <tegrabl_printf>
    96010d9c:	17ffff8b 	b	96010bc8 <qspi_wait_transfer+0x198>
	qspi_handle->ramain_dma_packet -= qspi_handle->cur_req_dma_packet;
    96010da0:	b9409662 	ldr	w2, [x19, #148]
	qspi_handle->cur_buf += (qspi_handle->cur_req_dma_packet *
    96010da4:	b940aa63 	ldr	w3, [x19, #168]
	qspi_handle->ramain_dma_packet -= qspi_handle->cur_req_dma_packet;
    96010da8:	b9407a61 	ldr	w1, [x19, #120]
    96010dac:	4b020021 	sub	w1, w1, w2
    96010db0:	b9007a61 	str	w1, [x19, #120]
	qspi_handle->cur_buf += (qspi_handle->cur_req_dma_packet *
    96010db4:	1b037c42 	mul	w2, w2, w3
    96010db8:	f9405a63 	ldr	x3, [x19, #176]
    96010dbc:	8b020062 	add	x2, x3, x2
    96010dc0:	f9005a62 	str	x2, [x19, #176]
	if (qspi_handle->ramain_dma_packet != 0U) {
    96010dc4:	35fff241 	cbnz	w1, 96010c0c <qspi_wait_transfer+0x1dc>
	qspi_stop_rx(qspi_handle->qspi);
    96010dc8:	97fffdea 	bl	96010570 <qspi_stop_rx>
    96010dcc:	17ffff3e 	b	96010ac4 <qspi_wait_transfer+0x94>
	rval = qspi_readl(qspi_handle->qspi, FIFO_STATUS);
    96010dd0:	b9400000 	ldr	w0, [x0]
	if ((rval & NV_DRF_DEF(QSPI, FIFO_STATUS, RX_FIFO_EMPTY, EMPTY)) != 0U) {
    96010dd4:	37000100 	tbnz	w0, #0, 96010df4 <qspi_wait_transfer+0x3c4>
	words_count = MIN(words_count, qspi_handle->cur_remain_pio_packet);
    96010dd8:	b940a261 	ldr	w1, [x19, #160]
	words_count = NV_DRF_VAL(QSPI, FIFO_STATUS, RX_FIFO_FULL_COUNT, rval);
    96010ddc:	d3577400 	ubfx	x0, x0, #23, #7
	words_count = MIN(words_count, qspi_handle->cur_remain_pio_packet);
    96010de0:	6b00003f 	cmp	w1, w0
    96010de4:	1a809020 	csel	w0, w1, w0, ls  // ls = plast
    96010de8:	2a0003e1 	mov	w1, w0
	while (words_count != 0U) {
    96010dec:	35fff241 	cbnz	w1, 96010c34 <qspi_wait_transfer+0x204>
		if (words_read == 0U) {
    96010df0:	35fff5c0 	cbnz	w0, 96010ca8 <qspi_wait_transfer+0x278>
			pr_error("Number of words read in RX FIFO is 0\n");
    96010df4:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96010df8:	9119e000 	add	x0, x0, #0x678
    96010dfc:	9400461d 	bl	96022670 <tegrabl_printf>
			return TEGRABL_ERROR(TEGRABL_ERR_WRITE_FAILED,
    96010e00:	52804354 	mov	w20, #0x21a                 	// #538
			qspi_abort_rx_pio(qspi_handle->qspi);
    96010e04:	f9400264 	ldr	x4, [x19]
	qspi_stop_rx(qspi);
    96010e08:	aa0403e0 	mov	x0, x4
    96010e0c:	97fffdd9 	bl	96010570 <qspi_stop_rx>
	qspi_hw_disable_transfer(qspi);
    96010e10:	aa0403e0 	mov	x0, x4
    96010e14:	97fffe08 	bl	96010634 <qspi_hw_disable_transfer>
    96010e18:	17ffff27 	b	96010ab4 <qspi_wait_transfer+0x84>

0000000096010e1c <qspi_check_transfer_status>:
}

static tegrabl_error_t qspi_check_transfer_status(
						struct tegrabl_qspi_handle *qspi_handle,
						uint32_t timeout_us, bool is_abort)
{
    96010e1c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96010e20:	910003fd 	mov	x29, sp
    96010e24:	a90153f3 	stp	x19, x20, [sp, #16]
    96010e28:	aa0003f3 	mov	x19, x0
    96010e2c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96010e30:	12001c56 	and	w22, w2, #0xff
	struct tegrabl_qspi_device_property *qdev = qspi_handle->device;
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	tegrabl_error_t e_reason;
	bool in_progress;

	qspi_handle->xfer_timeout = timeout_us;
    96010e34:	b9006001 	str	w1, [x0, #96]
		qspi_handle->cur_xfer = &qspi_handle->req_xfer[qspi_handle->cur_xfer_index];
		err = qspi_start_one_transaction(qspi_handle);
		if (err != TEGRABL_NO_ERROR) {
			goto clean_exit;
		}
		if ((qspi_handle->cur_xfer_is_dma == true) && (qspi_handle->is_async == true)) {
    96010e38:	320083f5 	mov	w21, #0x10001               	// #65537
	struct tegrabl_qspi_device_property *qdev = qspi_handle->device;
    96010e3c:	f9400414 	ldr	x20, [x0, #8]
{
    96010e40:	f9001bf7 	str	x23, [sp, #48]
		qspi_handle->cur_xfer = &qspi_handle->req_xfer[qspi_handle->cur_xfer_index];
    96010e44:	52800917 	mov	w23, #0x48                  	// #72
		err = qspi_wait_transfer(qspi_handle, is_abort);
    96010e48:	2a1603e1 	mov	w1, w22
    96010e4c:	aa1303e0 	mov	x0, x19
    96010e50:	97fffef8 	bl	96010a30 <qspi_wait_transfer>
    96010e54:	2a0003e5 	mov	w5, w0
		e_reason = TEGRABL_ERROR_REASON(err);
    96010e58:	12001c00 	and	w0, w0, #0xff
		if (e_reason == TEGRABL_ERR_XFER_IN_PROGRESS) {
    96010e5c:	7100bc1f 	cmp	w0, #0x2f
    96010e60:	54000340 	b.eq	96010ec8 <qspi_check_transfer_status+0xac>  // b.none
		if (err != TEGRABL_NO_ERROR) {
    96010e64:	350003e5 	cbnz	w5, 96010ee0 <qspi_check_transfer_status+0xc4>
		err = qspi_start_remaining_one_xfer(qspi_handle, &in_progress);
    96010e68:	91013fa1 	add	x1, x29, #0x4f
    96010e6c:	aa1303e0 	mov	x0, x19
    96010e70:	97fffe67 	bl	9601080c <qspi_start_remaining_one_xfer>
    96010e74:	2a0003e5 	mov	w5, w0
		if (err != TEGRABL_NO_ERROR) {
    96010e78:	35000340 	cbnz	w0, 96010ee0 <qspi_check_transfer_status+0xc4>
		if (in_progress == true) {
    96010e7c:	39413fa0 	ldrb	w0, [x29, #79]
    96010e80:	35fffe40 	cbnz	w0, 96010e48 <qspi_check_transfer_status+0x2c>
		qspi_handle->cur_xfer_index++;
    96010e84:	b940ca60 	ldr	w0, [x19, #200]
		if (qspi_handle->cur_xfer_index >= qspi_handle->req_xfer_count) {
    96010e88:	b940e261 	ldr	w1, [x19, #224]
		qspi_handle->cur_xfer_index++;
    96010e8c:	11000400 	add	w0, w0, #0x1
    96010e90:	b900ca60 	str	w0, [x19, #200]
		if (qspi_handle->cur_xfer_index >= qspi_handle->req_xfer_count) {
    96010e94:	6b01001f 	cmp	w0, w1
    96010e98:	54000242 	b.cs	96010ee0 <qspi_check_transfer_status+0xc4>  // b.hs, b.nlast
		qspi_handle->cur_xfer = &qspi_handle->req_xfer[qspi_handle->cur_xfer_index];
    96010e9c:	f9406e61 	ldr	x1, [x19, #216]
    96010ea0:	9bb70400 	umaddl	x0, w0, w23, x1
    96010ea4:	f9006a60 	str	x0, [x19, #208]
		err = qspi_start_one_transaction(qspi_handle);
    96010ea8:	aa1303e0 	mov	x0, x19
    96010eac:	97fffe8a 	bl	960108d4 <qspi_start_one_transaction>
    96010eb0:	2a0003e5 	mov	w5, w0
		if (err != TEGRABL_NO_ERROR) {
    96010eb4:	35000160 	cbnz	w0, 96010ee0 <qspi_check_transfer_status+0xc4>
		if ((qspi_handle->cur_xfer_is_dma == true) && (qspi_handle->is_async == true)) {
    96010eb8:	b940e660 	ldr	w0, [x19, #228]
    96010ebc:	12009c00 	and	w0, w0, #0xff00ff
    96010ec0:	6b15001f 	cmp	w0, w21
    96010ec4:	54fffc21 	b.ne	96010e48 <qspi_check_transfer_status+0x2c>  // b.any

clean_exit:
	qspi_set_chip_select_level(qspi_handle->qspi, qdev, false);
	qspi_handle->xfer_is_progress = false;
	return err;
}
    96010ec8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96010ecc:	2a0503e0 	mov	w0, w5
    96010ed0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96010ed4:	f9401bf7 	ldr	x23, [sp, #48]
    96010ed8:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96010edc:	d65f03c0 	ret
	qspi_set_chip_select_level(qspi_handle->qspi, qdev, false);
    96010ee0:	39401281 	ldrb	w1, [x20, #4]
    96010ee4:	52800002 	mov	w2, #0x0                   	// #0
    96010ee8:	f9400260 	ldr	x0, [x19]
    96010eec:	97fffd7d 	bl	960104e0 <qspi_set_chip_select_level.isra.2>
	qspi_handle->xfer_is_progress = false;
    96010ef0:	3903967f 	strb	wzr, [x19, #229]
	return err;
    96010ef4:	17fffff5 	b	96010ec8 <qspi_check_transfer_status+0xac>

0000000096010ef8 <tegrabl_qspi_transaction>:
		uint8_t no_of_transfers,
		uint32_t timeout_us)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((qspi_handle == NULL) || (qspi_handle->qspi == NULL)) {
    96010ef8:	b4000980 	cbz	x0, 96011028 <tegrabl_qspi_transaction+0x130>
{
    96010efc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96010f00:	910003fd 	mov	x29, sp
    96010f04:	a9025bf5 	stp	x21, x22, [sp, #32]
    96010f08:	12001c56 	and	w22, w2, #0xff
	if ((qspi_handle == NULL) || (qspi_handle->qspi == NULL)) {
    96010f0c:	f9400002 	ldr	x2, [x0]
{
    96010f10:	a90153f3 	stp	x19, x20, [sp, #16]
	if ((qspi_handle == NULL) || (qspi_handle->qspi == NULL)) {
    96010f14:	b40001e2 	cbz	x2, 96010f50 <tegrabl_qspi_transaction+0x58>
	if ((p_transfers == NULL) || (no_of_transfers == 0U)) {
    96010f18:	f100003f 	cmp	x1, #0x0
    96010f1c:	7a401ac4 	ccmp	w22, #0x0, #0x4, ne  // ne = any
    96010f20:	54000180 	b.eq	96010f50 <tegrabl_qspi_transaction+0x58>  // b.none
    96010f24:	aa0003f3 	mov	x19, x0
    96010f28:	2a0303f5 	mov	w21, w3
    96010f2c:	aa0103f4 	mov	x20, x1
    96010f30:	aa0103e0 	mov	x0, x1
	for (i = 0; i < no_of_transfers; ++i) {
    96010f34:	52800002 	mov	w2, #0x0                   	// #0
    96010f38:	a9400403 	ldp	x3, x1, [x0]
		if ((xfer->tx_buf != NULL) && (xfer->rx_buf != NULL)) {
    96010f3c:	b4000103 	cbz	x3, 96010f5c <tegrabl_qspi_transaction+0x64>
    96010f40:	b4000141 	cbz	x1, 96010f68 <tegrabl_qspi_transaction+0x70>
	pr_error("Validation of Transfer failed\n");
    96010f44:	d0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96010f48:	91240800 	add	x0, x0, #0x902
    96010f4c:	940045c9 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_TXFER_ARGS);
    96010f50:	52814045 	mov	w5, #0xa02                 	// #2562
    96010f54:	72a24245 	movk	w5, #0x1212, lsl #16
    96010f58:	14000028 	b	96010ff8 <tegrabl_qspi_transaction+0x100>
		if ((xfer->tx_buf == NULL) && (xfer->rx_buf == NULL)) {
    96010f5c:	b4ffff41 	cbz	x1, 96010f44 <tegrabl_qspi_transaction+0x4c>
			len = xfer->read_len;
    96010f60:	b9401803 	ldr	w3, [x0, #24]
    96010f64:	14000003 	b	96010f70 <tegrabl_qspi_transaction+0x78>
			buf_addr = (uintptr_t)xfer->tx_buf;
    96010f68:	aa0303e1 	mov	x1, x3
			len = xfer->write_len;
    96010f6c:	b9401403 	ldr	w3, [x0, #20]
	if (len == 0U) {
    96010f70:	34fffea3 	cbz	w3, 96010f44 <tegrabl_qspi_transaction+0x4c>
	if (xfer->packet_bit_length == 32U) {
    96010f74:	b9404004 	ldr	w4, [x0, #64]
    96010f78:	7100809f 	cmp	w4, #0x20
    96010f7c:	540000a1 	b.ne	96010f90 <tegrabl_qspi_transaction+0x98>  // b.any
		if ((len & 0x3U) != 0U) {
    96010f80:	f240047f 	tst	x3, #0x3
    96010f84:	54fffe01 	b.ne	96010f44 <tegrabl_qspi_transaction+0x4c>  // b.any
		if ((buf_addr & 0x3U) != 0U) {
    96010f88:	f240043f 	tst	x1, #0x3
    96010f8c:	54fffdc1 	b.ne	96010f44 <tegrabl_qspi_transaction+0x4c>  // b.any
	for (i = 0; i < no_of_transfers; ++i) {
    96010f90:	11000442 	add	w2, w2, #0x1
    96010f94:	91012000 	add	x0, x0, #0x48
    96010f98:	6b0202df 	cmp	w22, w2
    96010f9c:	54fffce8 	b.hi	96010f38 <tegrabl_qspi_transaction+0x40>  // b.pmore
	err = qspi_validate_parameters(p_transfers, no_of_transfers);
	if (err != TEGRABL_NO_ERROR) {
		return err;
	}

	qspi_handle->xfer_start_time = (uint32_t)tegrabl_get_timestamp_us();
    96010fa0:	94003b37 	bl	9601fc7c <tegrabl_get_timestamp_us>
	qspi_handle->xfer_timeout = timeout_us;
    96010fa4:	290bd660 	stp	w0, w21, [x19, #92]
	qspi_handle->req_xfer_count = no_of_transfers;
	qspi_handle->cur_xfer_index = 0U;
	qspi_handle->cur_xfer = qspi_handle->req_xfer;
	qspi_handle->xfer_is_progress = true;

	qspi_set_chip_select_level(qspi_handle->qspi, qspi_handle->device, true);
    96010fa8:	f9400660 	ldr	x0, [x19, #8]
	qspi_handle->req_xfer = p_transfers;
    96010fac:	a90d5274 	stp	x20, x20, [x19, #208]
	qspi_handle->xfer_is_progress = true;
    96010fb0:	52800034 	mov	w20, #0x1                   	// #1
    96010fb4:	39039674 	strb	w20, [x19, #229]
	qspi_set_chip_select_level(qspi_handle->qspi, qspi_handle->device, true);
    96010fb8:	2a1403e2 	mov	w2, w20
	qspi_handle->cur_xfer_index = 0U;
    96010fbc:	b900ca7f 	str	wzr, [x19, #200]
	qspi_set_chip_select_level(qspi_handle->qspi, qspi_handle->device, true);
    96010fc0:	39401001 	ldrb	w1, [x0, #4]
    96010fc4:	f9400260 	ldr	x0, [x19]
	qspi_handle->req_xfer_count = no_of_transfers;
    96010fc8:	b900e276 	str	w22, [x19, #224]
	qspi_set_chip_select_level(qspi_handle->qspi, qspi_handle->device, true);
    96010fcc:	97fffd45 	bl	960104e0 <qspi_set_chip_select_level.isra.2>

	err = qspi_start_one_transaction(qspi_handle);
    96010fd0:	aa1303e0 	mov	x0, x19
    96010fd4:	97fffe40 	bl	960108d4 <qspi_start_one_transaction>
    96010fd8:	2a0003e5 	mov	w5, w0
	if (err != TEGRABL_NO_ERROR) {
    96010fdc:	34000180 	cbz	w0, 9601100c <tegrabl_qspi_transaction+0x114>
		qspi_set_chip_select_level(qspi_handle->qspi, qspi_handle->device,
    96010fe0:	f9400660 	ldr	x0, [x19, #8]
    96010fe4:	52800002 	mov	w2, #0x0                   	// #0
    96010fe8:	39401001 	ldrb	w1, [x0, #4]
    96010fec:	f9400260 	ldr	x0, [x19]
    96010ff0:	97fffd3c 	bl	960104e0 <qspi_set_chip_select_level.isra.2>
								   false);
		qspi_handle->xfer_is_progress = false;
    96010ff4:	3903967f 	strb	wzr, [x19, #229]
		return err;
	}

	return qspi_check_transfer_status(qspi_handle, timeout_us, true);
}
    96010ff8:	2a0503e0 	mov	w0, w5
    96010ffc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96011000:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96011004:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96011008:	d65f03c0 	ret
	return qspi_check_transfer_status(qspi_handle, timeout_us, true);
    9601100c:	2a1403e2 	mov	w2, w20
    96011010:	2a1503e1 	mov	w1, w21
    96011014:	aa1303e0 	mov	x0, x19
}
    96011018:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601101c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96011020:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return qspi_check_transfer_status(qspi_handle, timeout_us, true);
    96011024:	17ffff7e 	b	96010e1c <qspi_check_transfer_status>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_TXFER_ARGS);
    96011028:	52814045 	mov	w5, #0xa02                 	// #2562
    9601102c:	72a24245 	movk	w5, #0x1212, lsl #16
}
    96011030:	2a0503e0 	mov	w0, w5
    96011034:	d65f03c0 	ret

0000000096011038 <tegrabl_qspi_xfer_wait>:
}

tegrabl_error_t tegrabl_qspi_xfer_wait(
					struct tegrabl_qspi_handle *qspi_handle,
					uint32_t timeout_us, bool is_abort)
{
    96011038:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9601103c:	910003fd 	mov	x29, sp
    96011040:	a90153f3 	stp	x19, x20, [sp, #16]
    96011044:	aa0003f3 	mov	x19, x0
	struct tegrabl_qspi_device_property *qdev = qspi_handle->device;
    96011048:	f9400414 	ldr	x20, [x0, #8]
{
    9601104c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96011050:	12001c56 	and	w22, w2, #0xff
		qspi_handle->cur_xfer = &qspi_handle->req_xfer[qspi_handle->cur_xfer_index];
    96011054:	52800915 	mov	w21, #0x48                  	// #72
	qspi_handle->xfer_timeout = timeout_us;
    96011058:	b9006001 	str	w1, [x0, #96]
		err = qspi_wait_transfer(qspi_handle, is_abort);
    9601105c:	2a1603e1 	mov	w1, w22
    96011060:	aa1303e0 	mov	x0, x19
    96011064:	97fffe73 	bl	96010a30 <qspi_wait_transfer>
    96011068:	2a0003e5 	mov	w5, w0
		e_reason = TEGRABL_ERROR_REASON(err);
    9601106c:	12001c00 	and	w0, w0, #0xff
		if (e_reason == TEGRABL_ERR_XFER_IN_PROGRESS) {
    96011070:	7100bc1f 	cmp	w0, #0x2f
    96011074:	54000360 	b.eq	960110e0 <tegrabl_qspi_xfer_wait+0xa8>  // b.none
		if (err != TEGRABL_NO_ERROR) {
    96011078:	350002a5 	cbnz	w5, 960110cc <tegrabl_qspi_xfer_wait+0x94>
		err = qspi_start_remaining_one_xfer(qspi_handle, &in_progress);
    9601107c:	9100ffa1 	add	x1, x29, #0x3f
    96011080:	aa1303e0 	mov	x0, x19
    96011084:	97fffde2 	bl	9601080c <qspi_start_remaining_one_xfer>
    96011088:	2a0003e5 	mov	w5, w0
		if (err != TEGRABL_NO_ERROR) {
    9601108c:	35000200 	cbnz	w0, 960110cc <tegrabl_qspi_xfer_wait+0x94>
		if (in_progress == true) {
    96011090:	3940ffa0 	ldrb	w0, [x29, #63]
    96011094:	35fffe40 	cbnz	w0, 9601105c <tegrabl_qspi_xfer_wait+0x24>
		qspi_handle->cur_xfer_index++;
    96011098:	b940ca60 	ldr	w0, [x19, #200]
		if (qspi_handle->cur_xfer_index >= qspi_handle->req_xfer_count) {
    9601109c:	b940e261 	ldr	w1, [x19, #224]
		qspi_handle->cur_xfer_index++;
    960110a0:	11000400 	add	w0, w0, #0x1
    960110a4:	b900ca60 	str	w0, [x19, #200]
		if (qspi_handle->cur_xfer_index >= qspi_handle->req_xfer_count) {
    960110a8:	6b01001f 	cmp	w0, w1
    960110ac:	54000102 	b.cs	960110cc <tegrabl_qspi_xfer_wait+0x94>  // b.hs, b.nlast
		qspi_handle->cur_xfer = &qspi_handle->req_xfer[qspi_handle->cur_xfer_index];
    960110b0:	f9406e61 	ldr	x1, [x19, #216]
    960110b4:	9bb50400 	umaddl	x0, w0, w21, x1
    960110b8:	f9006a60 	str	x0, [x19, #208]
		err = qspi_start_one_transaction(qspi_handle);
    960110bc:	aa1303e0 	mov	x0, x19
    960110c0:	97fffe05 	bl	960108d4 <qspi_start_one_transaction>
    960110c4:	2a0003e5 	mov	w5, w0
		if (err != TEGRABL_NO_ERROR) {
    960110c8:	34fffca0 	cbz	w0, 9601105c <tegrabl_qspi_xfer_wait+0x24>
	qspi_set_chip_select_level(qspi_handle->qspi, qdev, false);
    960110cc:	39401281 	ldrb	w1, [x20, #4]
    960110d0:	52800002 	mov	w2, #0x0                   	// #0
    960110d4:	f9400260 	ldr	x0, [x19]
    960110d8:	97fffd02 	bl	960104e0 <qspi_set_chip_select_level.isra.2>
	qspi_handle->xfer_is_progress = false;
    960110dc:	3903967f 	strb	wzr, [x19, #229]
	return qspi_xfer_wait(qspi_handle, timeout_us, is_abort);
}
    960110e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960110e4:	2a0503e0 	mov	w0, w5
    960110e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960110ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960110f0:	d65f03c0 	ret

00000000960110f4 <tegrabl_qspi_open>:

tegrabl_error_t tegrabl_qspi_open(uint32_t instance,
							struct tegrabl_qspi_device_property *qspi_device,
							struct tegrabl_qspi_platform_params *params,
							struct tegrabl_qspi_handle **qspi_handle)
{
    960110f4:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
    960110f8:	910003fd 	mov	x29, sp
    960110fc:	a90153f3 	stp	x19, x20, [sp, #16]
    96011100:	a9025bf5 	stp	x21, x22, [sp, #32]
    96011104:	a90363f7 	stp	x23, x24, [sp, #48]
    96011108:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601110c:	a90573fb 	stp	x27, x28, [sp, #80]
    96011110:	2a0003fc 	mov	w28, w0
	struct tegrabl_qspi_platform_params *qparams;
	struct tegrabl_qspi_device_property *qdevice;
	struct tegrabl_qspi_ctxt *qspi_context;
	struct qspi_soc_info *gqspi_info;

	*qspi_handle = NULL;
    96011114:	f900007f 	str	xzr, [x3]
{
    96011118:	f9003fa3 	str	x3, [x29, #120]

	if (qspi_device == NULL) {
    9601111c:	b50001c1 	cbnz	x1, 96011154 <tegrabl_qspi_open+0x60>
		pr_error("Device property is not provided\n");
    96011120:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011124:	911b4800 	add	x0, x0, #0x6d2
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_OPEN_PARAMETER);
	}

	if (params == NULL) {
		pr_error("QSPI platform property is not provided\n");
    96011128:	94004552 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_OPEN_PARAMETER);
    9601112c:	5281c053 	mov	w19, #0xe02                 	// #3586
    96011130:	72a24253 	movk	w19, #0x1212, lsl #16
	*qspi_handle = qhandle;
	qspi->open_count++;
	qhandle->xfer_is_progress = false;

	return TEGRABL_NO_ERROR;
}
    96011134:	2a1303e0 	mov	w0, w19
    96011138:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601113c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96011140:	a94363f7 	ldp	x23, x24, [sp, #48]
    96011144:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96011148:	a94573fb 	ldp	x27, x28, [sp, #80]
    9601114c:	a8c97bfd 	ldp	x29, x30, [sp], #144
    96011150:	d65f03c0 	ret
    96011154:	aa0203f3 	mov	x19, x2
	if (params == NULL) {
    96011158:	b5000082 	cbnz	x2, 96011168 <tegrabl_qspi_open+0x74>
		pr_error("QSPI platform property is not provided\n");
    9601115c:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011160:	911bd800 	add	x0, x0, #0x6f6
    96011164:	17fffff1 	b	96011128 <tegrabl_qspi_open+0x34>
	if (instance >= QSPI_MAX_INSTANCE) {
    96011168:	7100041f 	cmp	w0, #0x1
    9601116c:	540000c9 	b.ls	96011184 <tegrabl_qspi_open+0x90>  // b.plast
		pr_error("QSPI instance %u is not allowed\n", instance);
    96011170:	2a0003e1 	mov	w1, w0
    96011174:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011178:	911c8400 	add	x0, x0, #0x721
		pr_error("QSPI DMA type %d is not allowed\n", params->dma_type);
    9601117c:	9400453d 	bl	96022670 <tegrabl_printf>
    96011180:	17ffffeb 	b	9601112c <tegrabl_qspi_open+0x38>
    96011184:	aa0103e5 	mov	x5, x1
	if (params->dma_type > 2U) {
    96011188:	b9401441 	ldr	w1, [x2, #20]
    9601118c:	7100083f 	cmp	w1, #0x2
    96011190:	54000089 	b.ls	960111a0 <tegrabl_qspi_open+0xac>  // b.plast
		pr_error("QSPI DMA type %d is not allowed\n", params->dma_type);
    96011194:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011198:	911d1400 	add	x0, x0, #0x745
    9601119c:	17fffff8 	b	9601117c <tegrabl_qspi_open+0x88>
	if ((params->dma_type != DMA_BPMP) && (params->dma_type != DMA_GPC)) {
    960111a0:	54001e40 	b.eq	96011568 <tegrabl_qspi_open+0x474>  // b.none
	if (s_qspi_info[instance].open_count != 0U) {
    960111a4:	2a0003f5 	mov	w21, w0
    960111a8:	900001d6 	adrp	x22, 96049000 <default_srgb_lut+0xa28>
    960111ac:	913f82c1 	add	x1, x22, #0xfe0
    960111b0:	d2800280 	mov	x0, #0x14                  	// #20
    960111b4:	9b0006a0 	madd	x0, x21, x0, x1
    960111b8:	b9401000 	ldr	w0, [x0, #16]
    960111bc:	340000e0 	cbz	w0, 960111d8 <tegrabl_qspi_open+0xe4>
		pr_error("QSPI controller %u is already opened\n", instance);
    960111c0:	2a1c03e1 	mov	w1, w28
    960111c4:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
		return TEGRABL_ERROR(TEGRABL_ERR_OPEN_FAILED, AUX_INFO_ALREADY_OPEN);
    960111c8:	52818233 	mov	w19, #0xc11                 	// #3089
		pr_error("QSPI controller %u is already opened\n", instance);
    960111cc:	911da400 	add	x0, x0, #0x769
    960111d0:	94004528 	bl	96022670 <tegrabl_printf>
    960111d4:	17ffffd7 	b	96011130 <tegrabl_qspi_open+0x3c>
	qparams = &s_qspi_params[instance];
    960111d8:	b00002fa 	adrp	x26, 9606e000 <__bss_start>
    960111dc:	9126a357 	add	x23, x26, #0x9a8
    960111e0:	52800499 	mov	w25, #0x24                  	// #36
    960111e4:	f90037a5 	str	x5, [x29, #104]
	qspi_get_soc_info(&gqspi_info);
    960111e8:	910203a0 	add	x0, x29, #0x80
    960111ec:	940000e6 	bl	96011584 <qspi_get_soc_info>
	qparams = &s_qspi_params[instance];
    960111f0:	d503201f 	nop
    960111f4:	9bb95f99 	umaddl	x25, w28, w25, x23
	memcpy(qparams, params, sizeof(*params));
    960111f8:	aa1303e1 	mov	x1, x19
	qspi_context->dma_type = qparams->dma_type;
    960111fc:	d2800493 	mov	x19, #0x24                  	// #36
	memcpy(qparams, params, sizeof(*params));
    96011200:	d2800482 	mov	x2, #0x24                  	// #36
    96011204:	aa1903e0 	mov	x0, x25
    96011208:	94006347 	bl	96029f24 <memcpy>
	qspi_context->dma_type = qparams->dma_type;
    9601120c:	9b137eb3 	mul	x19, x21, x19
    96011210:	b00002fb 	adrp	x27, 9606e000 <__bss_start>
    96011214:	911f2361 	add	x1, x27, #0x7c8
    96011218:	d2801e14 	mov	x20, #0xf0                  	// #240
    9601121c:	8b1302e4 	add	x4, x23, x19
    96011220:	f9003ba4 	str	x4, [x29, #112]
	qdevice = &s_qspi_device[instance];
    96011224:	b00002f8 	adrp	x24, 9606e000 <__bss_start>
    96011228:	911ea318 	add	x24, x24, #0x7a8
	qspi_context->dma_type = qparams->dma_type;
    9601122c:	9b1406b4 	madd	x20, x21, x20, x1
	qdevice = &s_qspi_device[instance];
    96011230:	8b151318 	add	x24, x24, x21, lsl #4
	qspi_context->dma_type = qparams->dma_type;
    96011234:	b9401480 	ldr	w0, [x4, #20]
    96011238:	b9001a80 	str	w0, [x20, #24]
	qspi_context->dma_handle = tegrabl_dma_request(qparams->dma_type);
    9601123c:	97ffef96 	bl	9600d094 <tegrabl_dma_request>
    96011240:	f9001280 	str	x0, [x20, #32]
	memcpy(qdevice, qspi_device, sizeof(*qspi_device));
    96011244:	f94037a5 	ldr	x5, [x29, #104]
    96011248:	d2800202 	mov	x2, #0x10                  	// #16
    9601124c:	aa1803e0 	mov	x0, x24
    96011250:	aa0503e1 	mov	x1, x5
    96011254:	94006334 	bl	96029f24 <memcpy>
	uint32_t clk_div = qparams->clk_div;
    96011258:	f9403ba4 	ldr	x4, [x29, #112]
	switch (qparams->clk_src) {
    9601125c:	b8736ae1 	ldr	w1, [x23, x19]
    96011260:	aa1a03f7 	mov	x23, x26
    96011264:	7100143f 	cmp	w1, #0x5
	uint32_t clk_div = qparams->clk_div;
    96011268:	b9400c94 	ldr	w20, [x4, #12]
	switch (qparams->clk_src) {
    9601126c:	54000780 	b.eq	9601135c <tegrabl_qspi_open+0x268>  // b.none
    96011270:	54000168 	b.hi	9601129c <tegrabl_qspi_open+0x1a8>  // b.pmore
    96011274:	7100043f 	cmp	w1, #0x1
    96011278:	54000540 	b.eq	96011320 <tegrabl_qspi_open+0x22c>  // b.none
    9601127c:	340004c1 	cbz	w1, 96011314 <tegrabl_qspi_open+0x220>
    96011280:	71000c3f 	cmp	w1, #0x3
    96011284:	540004e0 	b.eq	96011320 <tegrabl_qspi_open+0x22c>  // b.none
		pr_error("Invalid/Not supported src for qspi clk: %"PRIu32"\n",
    96011288:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
		return TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, AUX_INFO_CLOCK_CONFIG);
    9601128c:	5281a553 	mov	w19, #0xd2a                 	// #3370
		pr_error("Invalid/Not supported src for qspi clk: %"PRIu32"\n",
    96011290:	911e4800 	add	x0, x0, #0x792
    96011294:	940044f7 	bl	96022670 <tegrabl_printf>
    96011298:	17ffffa6 	b	96011130 <tegrabl_qspi_open+0x3c>
	switch (qparams->clk_src) {
    9601129c:	7100783f 	cmp	w1, #0x1e
    960112a0:	54001680 	b.eq	96011570 <tegrabl_qspi_open+0x47c>  // b.none
    960112a4:	71007c3f 	cmp	w1, #0x1f
    960112a8:	54000600 	b.eq	96011368 <tegrabl_qspi_open+0x274>  // b.none
    960112ac:	7100183f 	cmp	w1, #0x6
    960112b0:	54fffec1 	b.ne	96011288 <tegrabl_qspi_open+0x194>  // b.any
		is_pllc4 = true;
    960112b4:	52800023 	mov	w3, #0x1                   	// #1
		pll_id = TEGRABL_CLK_PLL_ID_PLLC4;
    960112b8:	2a0303e0 	mov	w0, w3
		rate = 800000U;
    960112bc:	5286a001 	mov	w1, #0x3500                	// #13568
    960112c0:	72a00181 	movk	w1, #0xc, lsl #16
		if (qparams->clk_src_freq != 0U) {
    960112c4:	d2800484 	mov	x4, #0x24                  	// #36
    960112c8:	9126a2e5 	add	x5, x23, #0x9a8
    960112cc:	b90067a3 	str	w3, [x29, #100]
		err = tegrabl_car_init_pll_with_rate(pll_id, rate, NULL);
    960112d0:	d2800002 	mov	x2, #0x0                   	// #0
		if (qparams->clk_src_freq != 0U) {
    960112d4:	9b047eba 	mul	x26, x21, x4
    960112d8:	8b1a00a6 	add	x6, x5, x26
    960112dc:	a9069ba5 	stp	x5, x6, [x29, #104]
    960112e0:	b94004c7 	ldr	w7, [x6, #4]
    960112e4:	710000ff 	cmp	w7, #0x0
		err = tegrabl_car_init_pll_with_rate(pll_id, rate, NULL);
    960112e8:	1a8110e1 	csel	w1, w7, w1, ne  // ne = any
    960112ec:	94003951 	bl	9601f830 <tegrabl_car_init_pll_with_rate>
    960112f0:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    960112f4:	b94067a3 	ldr	w3, [x29, #100]
    960112f8:	a9469ba5 	ldp	x5, x6, [x29, #104]
    960112fc:	340003c0 	cbz	w0, 96011374 <tegrabl_qspi_open+0x280>
			pr_error("PLL initialisation failed: 0x%08x\n", err);
    96011300:	2a0003e1 	mov	w1, w0
    96011304:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011308:	911f0400 	add	x0, x0, #0x7c1
				pr_error("QSPI clock set rate failed: 0x%08x\n", err);
    9601130c:	940044d9 	bl	96022670 <tegrabl_printf>
    96011310:	17ffff89 	b	96011134 <tegrabl_qspi_open+0x40>
		clk_data.clk_src = TEGRABL_CLK_SRC_PLLP_OUT0;
    96011314:	52800060 	mov	w0, #0x3                   	// #3
		clk_data.clk_src = (uint8_t)qparams->clk_src;
    96011318:	b9008ba0 	str	w0, [x29, #136]
    9601131c:	14000002 	b	96011324 <tegrabl_qspi_open+0x230>
		clk_data.clk_src = (uint8_t)qparams->clk_src;
    96011320:	b9008ba1 	str	w1, [x29, #136]
	if (clk_div == 0U) {
    96011324:	35000554 	cbnz	w20, 960113cc <tegrabl_qspi_open+0x2d8>
		if ((qparams->clk_src_freq == 0U) ||
    96011328:	9126a2e0 	add	x0, x23, #0x9a8
    9601132c:	d2800481 	mov	x1, #0x24                  	// #36
    96011330:	9b0102a0 	madd	x0, x21, x1, x0
    96011334:	29408801 	ldp	w1, w2, [x0, #4]
    96011338:	34000081 	cbz	w1, 96011348 <tegrabl_qspi_open+0x254>
    9601133c:	34000062 	cbz	w2, 96011348 <tegrabl_qspi_open+0x254>
			 (qparams->interface_freq == 0U) ||
    96011340:	6b01005f 	cmp	w2, w1
    96011344:	540003c9 	b.ls	960113bc <tegrabl_qspi_open+0x2c8>  // b.plast
			pr_error("Invalid source(%u) and interface(%u) freqeuncy\n",
    96011348:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
			return TEGRABL_ERR_BAD_PARAMETER;
    9601134c:	52800553 	mov	w19, #0x2a                  	// #42
			pr_error("Invalid source(%u) and interface(%u) freqeuncy\n",
    96011350:	91203800 	add	x0, x0, #0x80e
    96011354:	940044c7 	bl	96022670 <tegrabl_printf>
    96011358:	17ffff77 	b	96011134 <tegrabl_qspi_open+0x40>
	bool is_pllc4 = false;
    9601135c:	52800003 	mov	w3, #0x0                   	// #0
		pll_id = TEGRABL_CLK_PLL_ID_PLLC;
    96011360:	528001e0 	mov	w0, #0xf                   	// #15
    96011364:	17ffffd6 	b	960112bc <tegrabl_qspi_open+0x1c8>
	bool is_pllc4 = false;
    96011368:	52800003 	mov	w3, #0x0                   	// #0
		pll_id = TEGRABL_CLK_PLL_ID_PLLC3;
    9601136c:	52800220 	mov	w0, #0x11                  	// #17
    96011370:	17ffffd3 	b	960112bc <tegrabl_qspi_open+0x1c8>
		if (is_pllc4 == true) {
    96011374:	340001a3 	cbz	w3, 960113a8 <tegrabl_qspi_open+0x2b4>
			err = tegrabl_car_set_clk_src_rate((uint8_t)qparams->clk_src,
    96011378:	b94004c1 	ldr	w1, [x6, #4]
    9601137c:	52807d00 	mov	w0, #0x3e8                 	// #1000
    96011380:	d2800002 	mov	x2, #0x0                   	// #0
    96011384:	1ac00821 	udiv	w1, w1, w0
    96011388:	387a68a0 	ldrb	w0, [x5, x26]
    9601138c:	94003917 	bl	9601f7e8 <tegrabl_car_set_clk_src_rate>
    96011390:	2a0003f3 	mov	w19, w0
			if (err != TEGRABL_NO_ERROR) {
    96011394:	340000a0 	cbz	w0, 960113a8 <tegrabl_qspi_open+0x2b4>
				pr_error("QSPI clock set rate failed: 0x%08x\n", err);
    96011398:	2a0003e1 	mov	w1, w0
    9601139c:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960113a0:	911f9c00 	add	x0, x0, #0x7e7
    960113a4:	17ffffda 	b	9601130c <tegrabl_qspi_open+0x218>
		clk_data.clk_src = (uint8_t)qparams->clk_src;
    960113a8:	d2800480 	mov	x0, #0x24                  	// #36
    960113ac:	9126a2e1 	add	x1, x23, #0x9a8
    960113b0:	9b007ea0 	mul	x0, x21, x0
    960113b4:	38606820 	ldrb	w0, [x1, x0]
    960113b8:	17ffffd8 	b	96011318 <tegrabl_qspi_open+0x224>
		clk_div = (qparams->clk_src_freq * 2U) / qparams->interface_freq;
    960113bc:	531f7834 	lsl	w20, w1, #1
    960113c0:	1ac20a94 	udiv	w20, w20, w2
		clk_div -= 1U;
    960113c4:	51000694 	sub	w20, w20, #0x1
		qparams->clk_div = clk_div;
    960113c8:	b9000c14 	str	w20, [x0, #12]
	qspi = &s_qspi_info[instance];
    960113cc:	913f82d6 	add	x22, x22, #0xfe0
    960113d0:	52800283 	mov	w3, #0x14                  	// #20
	clk_data.clk_divisor = clk_div - 1U;
    960113d4:	51000694 	sub	w20, w20, #0x1
	err = tegrabl_car_rst_set(TEGRABL_MODULE_QSPI, qspi->instance_id);
    960113d8:	52800060 	mov	w0, #0x3                   	// #3
	clk_data.clk_divisor = clk_div - 1U;
    960113dc:	b9008fb4 	str	w20, [x29, #140]
	qspi = &s_qspi_info[instance];
    960113e0:	d503201f 	nop
    960113e4:	9ba35b9a 	umaddl	x26, w28, w3, x22
	err = tegrabl_car_rst_set(TEGRABL_MODULE_QSPI, qspi->instance_id);
    960113e8:	39401341 	ldrb	w1, [x26, #4]
    960113ec:	940039a5 	bl	9601fa80 <tegrabl_car_rst_set>
    960113f0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960113f4:	340000e0 	cbz	w0, 96011410 <tegrabl_qspi_open+0x31c>
		pr_error("QSPI%d: Failed to set reset: 0x%08x\n",
    960113f8:	39401341 	ldrb	w1, [x26, #4]
    960113fc:	2a0003e2 	mov	w2, w0
    96011400:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011404:	91210400 	add	x0, x0, #0x841
		pr_error("QSPI%d: Failed to clear reset: 0x%08x\n",
    96011408:	9400449a 	bl	96022670 <tegrabl_printf>
    9601140c:	17ffff4a 	b	96011134 <tegrabl_qspi_open+0x40>
	err = tegrabl_car_clk_enable(TEGRABL_MODULE_QSPI, qspi->instance_id,
    96011410:	39401341 	ldrb	w1, [x26, #4]
    96011414:	910223a2 	add	x2, x29, #0x88
    96011418:	52800060 	mov	w0, #0x3                   	// #3
    9601141c:	9400392c 	bl	9601f8cc <tegrabl_car_clk_enable>
    96011420:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96011424:	340000c0 	cbz	w0, 9601143c <tegrabl_qspi_open+0x348>
		pr_error("QSPI%d: Failed to clock enable: 0x%08x\n",
    96011428:	2a0003e2 	mov	w2, w0
    9601142c:	39401341 	ldrb	w1, [x26, #4]
    96011430:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011434:	9121a400 	add	x0, x0, #0x869
    96011438:	17fffff4 	b	96011408 <tegrabl_qspi_open+0x314>
	err = tegrabl_car_rst_clear(TEGRABL_MODULE_QSPI, qspi->instance_id);
    9601143c:	39401341 	ldrb	w1, [x26, #4]
    96011440:	52800060 	mov	w0, #0x3                   	// #3
    96011444:	94003996 	bl	9601fa9c <tegrabl_car_rst_clear>
    96011448:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601144c:	340000c0 	cbz	w0, 96011464 <tegrabl_qspi_open+0x370>
		pr_error("QSPI%d: Failed to clear reset: 0x%08x\n",
    96011450:	2a0003e2 	mov	w2, w0
    96011454:	39401341 	ldrb	w1, [x26, #4]
    96011458:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9601145c:	91225000 	add	x0, x0, #0x894
    96011460:	17ffffea 	b	96011408 <tegrabl_qspi_open+0x314>
	qhandle = &s_qspi_handle[instance];
    96011464:	911f237b 	add	x27, x27, #0x7c8
    96011468:	52801e14 	mov	w20, #0xf0                  	// #240
	if (qdev->cs_active_low == true) {
    9601146c:	39401304 	ldrb	w4, [x24, #4]
		reg = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, CS_SW_VAL, HIGH, reg);
    96011470:	52a80e05 	mov	w5, #0x40700000            	// #1081081856
	qhandle = &s_qspi_handle[instance];
    96011474:	9bb46f94 	umaddl	x20, w28, w20, x27
	reg = qspi_readl(qspi, COMMAND);
    96011478:	d280029c 	mov	x28, #0x14                  	// #20
		reg = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, CS_SW_VAL, HIGH, reg);
    9601147c:	7100009f 	cmp	w4, #0x0
	reg = qspi_readl(qspi, COMMAND);
    96011480:	9b1c7ebc 	mul	x28, x21, x28
	qhandle->curr_op_mode = SDR_MODE;
    96011484:	b900ea9f 	str	wzr, [x20, #232]
	reg = qspi_readl(qspi, COMMAND);
    96011488:	b87c6ac2 	ldr	w2, [x22, x28]
    9601148c:	b9400040 	ldr	w0, [x2]
		reg = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, CS_SW_VAL, HIGH, reg);
    96011490:	12026c01 	and	w1, w0, #0xc3ffffff
    96011494:	2a050021 	orr	w1, w1, w5
    96011498:	12a78205 	mov	w5, #0xc3efffff            	// #-1007681537
    9601149c:	0a050000 	and	w0, w0, w5
    960114a0:	52a80c05 	mov	w5, #0x40600000            	// #1080033280
    960114a4:	2a050000 	orr	w0, w0, w5
    960114a8:	1a810000 	csel	w0, w0, w1, eq  // eq = none
	err = qspi_hw_flush_fifos(qspi, TX_FIFO_FLUSH);
    960114ac:	52800001 	mov	w1, #0x0                   	// #0
	reg = NV_FLD_SET_DRF_DEF(QSPI, COMMAND, IDLE_SDA, DRIVE_LOW, reg);
    960114b0:	120c7400 	and	w0, w0, #0xfff3ffff
	qspi_writel(qspi, COMMAND, reg);
    960114b4:	b9000040 	str	w0, [x2]
	err = qspi_hw_flush_fifos(qspi, TX_FIFO_FLUSH);
    960114b8:	aa1a03e0 	mov	x0, x26
    960114bc:	97fffc39 	bl	960105a0 <qspi_hw_flush_fifos.isra.5>
    960114c0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960114c4:	340000a0 	cbz	w0, 960114d8 <tegrabl_qspi_open+0x3e4>
		pr_error("QSPI: failed to flush tx fifo\n");
    960114c8:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960114cc:	9122f800 	add	x0, x0, #0x8be
		pr_error("QSPI: failed to flush rx fifo\n");
    960114d0:	94004468 	bl	96022670 <tegrabl_printf>
    960114d4:	17ffff18 	b	96011134 <tegrabl_qspi_open+0x40>
	err = qspi_hw_flush_fifos(qspi, RX_FIFO_FLUSH);
    960114d8:	52800021 	mov	w1, #0x1                   	// #1
    960114dc:	aa1a03e0 	mov	x0, x26
    960114e0:	97fffc30 	bl	960105a0 <qspi_hw_flush_fifos.isra.5>
    960114e4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960114e8:	34000080 	cbz	w0, 960114f8 <tegrabl_qspi_open+0x404>
		pr_error("QSPI: failed to flush rx fifo\n");
    960114ec:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960114f0:	91238000 	add	x0, x0, #0x8e0
    960114f4:	17fffff7 	b	960114d0 <tegrabl_qspi_open+0x3dc>
	NV_DRF_NUM(QSPI, COMMAND2, Tx_Clk_TAP_DELAY, qparams->trimmer1_val) |
    960114f8:	9126a2f7 	add	x23, x23, #0x9a8
    960114fc:	d2800480 	mov	x0, #0x24                  	// #36
	qspi_writel_flush(qspi, COMMAND2, reg);
    96011500:	8b1c02c2 	add	x2, x22, x28
	NV_DRF_NUM(QSPI, COMMAND2, Tx_Clk_TAP_DELAY, qparams->trimmer1_val) |
    96011504:	9b005eb7 	madd	x23, x21, x0, x23
    96011508:	b9401ee0 	ldr	w0, [x23, #28]
	NV_DRF_NUM(QSPI, COMMAND2, Rx_Clk_TAP_DELAY, qparams->trimmer2_val);
    9601150c:	394082e1 	ldrb	w1, [x23, #32]
	NV_DRF_NUM(QSPI, COMMAND2, Tx_Clk_TAP_DELAY, qparams->trimmer1_val) |
    96011510:	53161000 	ubfiz	w0, w0, #10, #5
	reg =
    96011514:	2a010000 	orr	w0, w0, w1
	qspi_writel_flush(qspi, COMMAND2, reg);
    96011518:	b87c6ac1 	ldr	w1, [x22, x28]
    9601151c:	11001021 	add	w1, w1, #0x4
    96011520:	b9000020 	str	w0, [x1]
	qhandle->qspi_info = gqspi_info;
    96011524:	f94043a1 	ldr	x1, [x29, #128]
	qspi_writel_flush(qspi, COMMAND2, reg);
    96011528:	b87c6ac0 	ldr	w0, [x22, x28]
    9601152c:	11001000 	add	w0, w0, #0x4
    96011530:	b9400000 	ldr	w0, [x0]
	qhandle->qspi = qspi;
    96011534:	d2801e00 	mov	x0, #0xf0                  	// #240
    96011538:	9b007eb5 	mul	x21, x21, x0
    9601153c:	8b150360 	add	x0, x27, x21
    96011540:	f8356b7a 	str	x26, [x27, x21]
	qhandle->qspi_info = gqspi_info;
    96011544:	f9002801 	str	x1, [x0, #80]
	*qspi_handle = qhandle;
    96011548:	f9403fa1 	ldr	x1, [x29, #120]
	qhandle->param = qparams;
    9601154c:	a900e418 	stp	x24, x25, [x0, #8]
	*qspi_handle = qhandle;
    96011550:	f9000034 	str	x20, [x1]
	qspi->open_count++;
    96011554:	b9401041 	ldr	w1, [x2, #16]
	qhandle->xfer_is_progress = false;
    96011558:	3903941f 	strb	wzr, [x0, #229]
	qspi->open_count++;
    9601155c:	11000421 	add	w1, w1, #0x1
    96011560:	b9001041 	str	w1, [x2, #16]
	return TEGRABL_NO_ERROR;
    96011564:	17fffef4 	b	96011134 <tegrabl_qspi_open+0x40>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_DMA);
    96011568:	52816053 	mov	w19, #0xb02                 	// #2818
    9601156c:	17fffef1 	b	96011130 <tegrabl_qspi_open+0x3c>
		rate = 645000U;
    96011570:	529af101 	mov	w1, #0xd788                	// #55176
	bool is_pllc4 = false;
    96011574:	52800003 	mov	w3, #0x0                   	// #0
		pll_id = TEGRABL_CLK_PLL_ID_PLLC2;
    96011578:	52800200 	mov	w0, #0x10                  	// #16
		rate = 645000U;
    9601157c:	72a00121 	movk	w1, #0x9, lsl #16
    96011580:	17ffff51 	b	960112c4 <tegrabl_qspi_open+0x1d0>

0000000096011584 <qspi_get_soc_info>:
	}
};

void qspi_get_soc_info(struct qspi_soc_info **gqspi_info)
{
	*gqspi_info = &qspi_info[0];
    96011584:	b00001c1 	adrp	x1, 9604a000 <s_qspi_info+0x20>
    96011588:	91002021 	add	x1, x1, #0x8
    9601158c:	f9000001 	str	x1, [x0]
}
    96011590:	d65f03c0 	ret

0000000096011594 <qspi_bdev_ioctl>:
	if (ioctl == TEGRABL_IOCTL_DEVICE_CACHE_FLUSH) {
		return TEGRABL_NO_ERROR;
	}
#endif
	pr_debug("Unknown ioctl %"PRIu32"\n", ioctl);
	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, AUX_INFO_IOCTL_NOT_SUPPORTED);
    96011594:	7100103f 	cmp	w1, #0x4
}
    96011598:	52812020 	mov	w0, #0x901                 	// #2305
    9601159c:	72a22220 	movk	w0, #0x1111, lsl #16
    960115a0:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    960115a4:	d65f03c0 	ret

00000000960115a8 <tegrabl_qspi_blockdev_xfer_wait>:
	return err;
}

static tegrabl_error_t tegrabl_qspi_blockdev_xfer_wait(struct tegrabl_blockdev_xfer_info *xfer,
						time_t timeout, uint8_t *status_flag)
{
    960115a8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960115ac:	910003fd 	mov	x29, sp
	tegrabl_error_t err;
	tegrabl_err_reason_t err_reason;
	struct tegrabl_qspi_flash_driver_info *hqfdi;
	struct tegrabl_qspi_handle *qspi_handle;

	hqfdi = xfer->dev->priv_data;
    960115b0:	f9400000 	ldr	x0, [x0]
{
    960115b4:	a90153f3 	stp	x19, x20, [sp, #16]
    960115b8:	aa0203f3 	mov	x19, x2
	qspi_handle = hqfdi->hqspi;

	err = tegrabl_qspi_xfer_wait(qspi_handle, (uint32_t)timeout, true);
    960115bc:	52800022 	mov	w2, #0x1                   	// #1
	hqfdi = xfer->dev->priv_data;
    960115c0:	f9401814 	ldr	x20, [x0, #48]
	err = tegrabl_qspi_xfer_wait(qspi_handle, (uint32_t)timeout, true);
    960115c4:	f9403280 	ldr	x0, [x20, #96]
    960115c8:	97fffe9c 	bl	96011038 <tegrabl_qspi_xfer_wait>
	err_reason = (unsigned int)TEGRABL_ERROR_REASON(err);
    960115cc:	12001c01 	and	w1, w0, #0xff

	if (err_reason == TEGRABL_ERR_XFER_IN_PROGRESS) {
    960115d0:	7100bc3f 	cmp	w1, #0x2f
    960115d4:	54000081 	b.ne	960115e4 <tegrabl_qspi_blockdev_xfer_wait+0x3c>  // b.any
		*status_flag = TEGRABL_BLOCKDEV_XFER_IN_PROGRESS;
    960115d8:	52800021 	mov	w1, #0x1                   	// #1
	} else if (err == TEGRABL_NO_ERROR) {
		*status_flag = TEGRABL_BLOCKDEV_XFER_COMPLETE;
		hqfdi->hqspi->is_async = false;
	} else {
		*status_flag = TEGRABL_BLOCKDEV_XFER_FAILURE;
    960115dc:	39000261 	strb	w1, [x19]
	}

	return err;
    960115e0:	14000006 	b	960115f8 <tegrabl_qspi_blockdev_xfer_wait+0x50>
	} else if (err == TEGRABL_NO_ERROR) {
    960115e4:	35000100 	cbnz	w0, 96011604 <tegrabl_qspi_blockdev_xfer_wait+0x5c>
		*status_flag = TEGRABL_BLOCKDEV_XFER_COMPLETE;
    960115e8:	52800041 	mov	w1, #0x2                   	// #2
    960115ec:	39000261 	strb	w1, [x19]
		hqfdi->hqspi->is_async = false;
    960115f0:	f9403281 	ldr	x1, [x20, #96]
    960115f4:	3903983f 	strb	wzr, [x1, #230]
}
    960115f8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960115fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96011600:	d65f03c0 	ret
		*status_flag = TEGRABL_BLOCKDEV_XFER_FAILURE;
    96011604:	52800061 	mov	w1, #0x3                   	// #3
    96011608:	17fffff5 	b	960115dc <tegrabl_qspi_blockdev_xfer_wait+0x34>

000000009601160c <tegrabl_qspi_flash_read>:
		struct tegrabl_qspi_flash_driver_info *hqfdi,
		uint32_t start_page_num,
		uint32_t num_of_pages,
		uint8_t *p_dest,
		bool async)
{
    9601160c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96011610:	910003fd 	mov	x29, sp
    96011614:	a90153f3 	stp	x19, x20, [sp, #16]
    96011618:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601161c:	a90363f7 	stp	x23, x24, [sp, #48]
    96011620:	f90023f9 	str	x25, [sp, #64]
	uint32_t bytes_to_read;
	uint32_t address;
	uint8_t *p_destination = (uint8_t *)p_dest;
	uint8_t *cmd = hqfdi->cmd;

	if (num_of_pages == 0U) {
    96011624:	34001182 	cbz	w2, 96011854 <tegrabl_qspi_flash_read+0x248>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	transfers = hqfdi->transfers;
    96011628:	f9403414 	ldr	x20, [x0, #104]
    9601162c:	aa0003f3 	mov	x19, x0
	uint8_t *cmd = hqfdi->cmd;
    96011630:	f9403c17 	ldr	x23, [x0, #120]
    96011634:	12001c99 	and	w25, w4, #0xff
    96011638:	aa0303f8 	mov	x24, x3
    9601163c:	2a0203f6 	mov	w22, w2
    96011640:	2a0103f5 	mov	w21, w1
	memset(transfers, 0, sizeof(struct tegrabl_qspi_transfer));
    96011644:	d2800902 	mov	x2, #0x48                  	// #72
    96011648:	52800001 	mov	w1, #0x0                   	// #0
    9601164c:	aa1403e0 	mov	x0, x20
    96011650:	940061f6 	bl	96029e28 <memset>

	if (chip_info->address_length == 4UL) {
    96011654:	b9404a60 	ldr	w0, [x19, #72]
    96011658:	9100b265 	add	x5, x19, #0x2c
    9601165c:	7100101f 	cmp	w0, #0x4
    96011660:	b9401260 	ldr	w0, [x19, #16]
    96011664:	54000c81 	b.ne	960117f4 <tegrabl_qspi_flash_read+0x1e8>  // b.any
		if (hqfdi->plat_params.max_bus_width == QSPI_BUS_WIDTH_X4) {
    96011668:	7100081f 	cmp	w0, #0x2
    9601166c:	540000e1 	b.ne	96011688 <tegrabl_qspi_flash_read+0x7c>  // b.any
			if (chip_info->qddr_read == true) {
    96011670:	3940b0a0 	ldrb	w0, [x5, #44]
				*cmd = QSPI_FLASH_CMD_4DDR_QUAD_IO_READ;
    96011674:	12800261 	mov	w1, #0xffffffec            	// #-20
    96011678:	7100001f 	cmp	w0, #0x0
    9601167c:	12800220 	mov	w0, #0xffffffee            	// #-18
			*cmd = QSPI_FLASH_CMD_4READ;
		}
	} else {
		if (hqfdi->plat_params.max_bus_width == QSPI_BUS_WIDTH_X4) {
			if (chip_info->qddr_read == true) {
				*cmd = QSPI_FLASH_CMD_DDR_QUAD_IO_READ;
    96011680:	1a811000 	csel	w0, w0, w1, ne  // ne = any
    96011684:	14000002 	b	9601168c <tegrabl_qspi_flash_read+0x80>
			*cmd = QSPI_FLASH_CMD_4READ;
    96011688:	52800260 	mov	w0, #0x13                  	// #19
			} else {
				*cmd = QSPI_FLASH_CMD_QUAD_IO_READ;
			}
		} else {
			*cmd = QSPI_FLASH_CMD_READ;
    9601168c:	390002e0 	strb	w0, [x23]
		}
	}

	address = start_page_num << chip_info->block_size_log2;
    96011690:	b94004a2 	ldr	w2, [x5, #4]
	bytes_to_read = num_of_pages << chip_info->block_size_log2;
	pr_trace("strt_pg_num(%u) num_of_pgs(%u) read_buf(%p)\n",
			 start_page_num, num_of_pages, p_dest);

	/* address are sent to device with MSB first */
	if (chip_info->address_length == 4UL) {
    96011694:	b9401ca7 	ldr	w7, [x5, #28]
    96011698:	f9403a64 	ldr	x4, [x19, #112]
	address = start_page_num << chip_info->block_size_log2;
    9601169c:	1ac222a1 	lsl	w1, w21, w2
	if (chip_info->address_length == 4UL) {
    960116a0:	710010ff 	cmp	w7, #0x4
    960116a4:	d3505c26 	ubfx	x6, x1, #16, #8
    960116a8:	d3483c23 	ubfx	x3, x1, #8, #8
    960116ac:	12001c20 	and	w0, w1, #0xff
    960116b0:	54000b41 	b.ne	96011818 <tegrabl_qspi_flash_read+0x20c>  // b.any
		hqfdi->address_data[0] = (uint8_t)(address >> 24) & 0xFFU;
    960116b4:	53187c21 	lsr	w1, w1, #24
    960116b8:	39000081 	strb	w1, [x4]
		hqfdi->address_data[1] = (uint8_t)(address >> 16) & 0xFFU;
    960116bc:	f9403a61 	ldr	x1, [x19, #112]
    960116c0:	39000426 	strb	w6, [x1, #1]
		hqfdi->address_data[2] = (uint8_t)(address >> 8) & 0xFFU;
    960116c4:	f9403a61 	ldr	x1, [x19, #112]
    960116c8:	39000823 	strb	w3, [x1, #2]
		hqfdi->address_data[3] = (uint8_t)(address) & 0xFFU;
    960116cc:	f9403a61 	ldr	x1, [x19, #112]
    960116d0:	39000c20 	strb	w0, [x1, #3]
		hqfdi->address_data[4] = 0; /* mode bits */
    960116d4:	f9403a60 	ldr	x0, [x19, #112]
    960116d8:	3900101f 	strb	wzr, [x0, #4]
		hqfdi->address_data[2] = (uint8_t)(address) & 0xFFU;
		hqfdi->address_data[3] = 0; /* mode bits */
	}

	/* Make sure the Dest is 4-byte aligned */
	if (((uintptr_t)p_dest & 0x3UL) != 0UL) {
    960116dc:	f240071f 	tst	x24, #0x3
    960116e0:	54000c01 	b.ne	96011860 <tegrabl_qspi_flash_read+0x254>  // b.any
	/* Set address Parameters in Second Transfer */
	/* address must be sent in DDR Quad IO mode */
	/* Setup Dummy cycles before reading data */
	/* Set Read length is 0 for address */

	transfers[1].tx_buf = hqfdi->address_data;
    960116e4:	f9403a61 	ldr	x1, [x19, #112]
    960116e8:	91012280 	add	x0, x20, #0x48
	transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
    960116ec:	f900129f 	str	xzr, [x20, #32]
	transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    960116f0:	d2800023 	mov	x3, #0x1                   	// #1
    960116f4:	f8014283 	stur	x3, [x20, #20]
	transfers[0].dummy_cycles = ZERO_CYCLES;
    960116f8:	b9002a9f 	str	wzr, [x20, #40]
	transfers[0].rx_buf = NULL;
    960116fc:	a9007e97 	stp	x23, xzr, [x20]
	transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    96011700:	7900229f 	strh	wzr, [x20, #16]
	transfers[1].tx_buf = hqfdi->address_data;
    96011704:	f9002681 	str	x1, [x20, #72]
	transfers[1].rx_buf = NULL;
	transfers[1].read_len = 0;
	transfers[1].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
	transfers[1].bus_width = hqfdi->plat_params.max_bus_width;
    96011708:	b9401261 	ldr	w1, [x19, #16]
    9601170c:	b9401ca6 	ldr	w6, [x5, #28]
	transfers[1].rx_buf = NULL;
    96011710:	f900041f 	str	xzr, [x0, #8]

	if (hqfdi->plat_params.max_bus_width == QSPI_BUS_WIDTH_X4) {
    96011714:	7100083f 	cmp	w1, #0x2
	transfers[1].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
    96011718:	7900201f 	strh	wzr, [x0, #16]
	transfers[1].read_len = 0;
    9601171c:	b900181f 	str	wzr, [x0, #24]
	transfers[1].bus_width = hqfdi->plat_params.max_bus_width;
    96011720:	b9002001 	str	w1, [x0, #32]
	if (hqfdi->plat_params.max_bus_width == QSPI_BUS_WIDTH_X4) {
    96011724:	540008e1 	b.ne	96011840 <tegrabl_qspi_flash_read+0x234>  // b.any
		/* 1 byte for mode bits in write_len */
		transfers[1].write_len = chip_info->address_length + 1UL;
    96011728:	110004c6 	add	w6, w6, #0x1
		transfers[1].dummy_cycles = hqfdi->plat_params.read_dummy_cycles;
		if (chip_info->qddr_read == true) {
    9601172c:	3940b0a4 	ldrb	w4, [x5, #44]
		transfers[1].write_len = chip_info->address_length + 1UL;
    96011730:	b9001406 	str	w6, [x0, #20]
		transfers[1].dummy_cycles = hqfdi->plat_params.read_dummy_cycles;
    96011734:	b9402266 	ldr	w6, [x19, #32]
    96011738:	b9002406 	str	w6, [x0, #36]
		if (chip_info->qddr_read == true) {
    9601173c:	340007e4 	cbz	w4, 96011838 <tegrabl_qspi_flash_read+0x22c>
			transfers[1].op_mode = DDR_MODE;
    96011740:	b9002803 	str	w3, [x0, #40]
			/* Macronics expects dummy clock cycles inclusive of clock cycles used for mode bits.
			 * In SDR mode, mobe bits will require 2 clock cycles but in DDR only 1. Hence add one
			 * more dummy cycle */
			if (MANUFACTURE_ID_MACRONIX == device_info_list[chip_info->device_list_index].manufacture_id) {
    96011744:	b0000167 	adrp	x7, 9603e000 <tca9539_chips+0x378>
    96011748:	b94020a3 	ldr	w3, [x5, #32]
    9601174c:	912490e7 	add	x7, x7, #0x924
    96011750:	d28004e4 	mov	x4, #0x27                  	// #39
    96011754:	9b041c63 	madd	x3, x3, x4, x7
    96011758:	39408063 	ldrb	w3, [x3, #32]
    9601175c:	7103087f 	cmp	w3, #0xc2
    96011760:	54000061 	b.ne	9601176c <tegrabl_qspi_flash_read+0x160>  // b.any
				transfers[1].dummy_cycles += 1U;
    96011764:	110004c6 	add	w6, w6, #0x1
    96011768:	b9002406 	str	w6, [x0, #36]
		transfers[1].op_mode = SDR_MODE;
	};

	/* Set Readback Parameters in Third Transfer */

	transfers[2].tx_buf = NULL;
    9601176c:	91024280 	add	x0, x20, #0x90
    96011770:	f9004a9f 	str	xzr, [x20, #144]
	bytes_to_read = num_of_pages << chip_info->block_size_log2;
    96011774:	1ac222d6 	lsl	w22, w22, w2
	transfers[2].read_len = bytes_to_read;

	transfers[2].bus_width = hqfdi->plat_params.max_bus_width;
	transfers[2].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;

	if (hqfdi->plat_params.max_bus_width == QSPI_BUS_WIDTH_X4) {
    96011778:	7100083f 	cmp	w1, #0x2
	transfers[2].rx_buf = p_destination;
    9601177c:	f9000418 	str	x24, [x0, #8]
	transfers[2].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
    96011780:	7900201f 	strh	wzr, [x0, #16]
	transfers[2].read_len = bytes_to_read;
    96011784:	2902d81f 	stp	wzr, w22, [x0, #20]
	transfers[2].bus_width = hqfdi->plat_params.max_bus_width;
    96011788:	b9002001 	str	w1, [x0, #32]
	if (hqfdi->plat_params.max_bus_width == QSPI_BUS_WIDTH_X4) {
    9601178c:	54000601 	b.ne	9601184c <tegrabl_qspi_flash_read+0x240>  // b.any
		if (chip_info->qddr_read == true) {
    96011790:	3940b0a1 	ldrb	w1, [x5, #44]
			transfers[2].op_mode = DDR_MODE;
    96011794:	7100003f 	cmp	w1, #0x0
    96011798:	1a9f07e1 	cset	w1, ne  // ne = any
    9601179c:	b9002801 	str	w1, [x0, #40]
    960117a0:	f9403260 	ldr	x0, [x19, #96]
	} else {
		transfers[2].op_mode = SDR_MODE;
    }

	if (async == true) {
		hqfdi->hqspi->is_async = true;
    960117a4:	7100033f 	cmp	w25, #0x0
    960117a8:	1a9f07e1 	cset	w1, ne  // ne = any
	} else {
		hqfdi->hqspi->is_async = false;
	}

	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], QSPI_FLASH_NUM_OF_TRANSFERS,
    960117ac:	52896803 	mov	w3, #0x4b40                	// #19264
    960117b0:	72a00983 	movk	w3, #0x4c, lsl #16
    960117b4:	52800062 	mov	w2, #0x3                   	// #3
		hqfdi->hqspi->is_async = true;
    960117b8:	39039801 	strb	w1, [x0, #230]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], QSPI_FLASH_NUM_OF_TRANSFERS,
    960117bc:	aa1403e1 	mov	x1, x20
    960117c0:	97fffdce 	bl	96010ef8 <tegrabl_qspi_transaction>
    960117c4:	2a0003f3 	mov	w19, w0
											QSPI_XFER_TIMEOUT);
	if (err != TEGRABL_NO_ERROR) {
    960117c8:	34000080 	cbz	w0, 960117d8 <tegrabl_qspi_flash_read+0x1cc>
		pr_error("error in qspi transactions\n");
    960117cc:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960117d0:	91397400 	add	x0, x0, #0xe5d
    960117d4:	940043a7 	bl	96022670 <tegrabl_printf>
	}

	return err;
}
    960117d8:	2a1303e0 	mov	w0, w19
    960117dc:	f94023f9 	ldr	x25, [sp, #64]
    960117e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960117e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960117e8:	a94363f7 	ldp	x23, x24, [sp, #48]
    960117ec:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960117f0:	d65f03c0 	ret
		if (hqfdi->plat_params.max_bus_width == QSPI_BUS_WIDTH_X4) {
    960117f4:	7100081f 	cmp	w0, #0x2
    960117f8:	540000c1 	b.ne	96011810 <tegrabl_qspi_flash_read+0x204>  // b.any
			if (chip_info->qddr_read == true) {
    960117fc:	3940b0a0 	ldrb	w0, [x5, #44]
				*cmd = QSPI_FLASH_CMD_DDR_QUAD_IO_READ;
    96011800:	12800281 	mov	w1, #0xffffffeb            	// #-21
    96011804:	7100001f 	cmp	w0, #0x0
    96011808:	12800240 	mov	w0, #0xffffffed            	// #-19
    9601180c:	17ffff9d 	b	96011680 <tegrabl_qspi_flash_read+0x74>
			*cmd = QSPI_FLASH_CMD_READ;
    96011810:	52800060 	mov	w0, #0x3                   	// #3
    96011814:	17ffff9e 	b	9601168c <tegrabl_qspi_flash_read+0x80>
		hqfdi->address_data[0] = (uint8_t)(address >> 16) & 0xFFU;
    96011818:	39000086 	strb	w6, [x4]
		hqfdi->address_data[1] = (uint8_t)(address >> 8) & 0xFFU;
    9601181c:	f9403a61 	ldr	x1, [x19, #112]
    96011820:	39000423 	strb	w3, [x1, #1]
		hqfdi->address_data[2] = (uint8_t)(address) & 0xFFU;
    96011824:	f9403a61 	ldr	x1, [x19, #112]
    96011828:	39000820 	strb	w0, [x1, #2]
		hqfdi->address_data[3] = 0; /* mode bits */
    9601182c:	f9403a60 	ldr	x0, [x19, #112]
    96011830:	39000c1f 	strb	wzr, [x0, #3]
    96011834:	17ffffaa 	b	960116dc <tegrabl_qspi_flash_read+0xd0>
			transfers[1].op_mode = SDR_MODE;
    96011838:	b900281f 	str	wzr, [x0, #40]
    9601183c:	17ffffcc 	b	9601176c <tegrabl_qspi_flash_read+0x160>
		transfers[1].write_len = chip_info->address_length;
    96011840:	b9001406 	str	w6, [x0, #20]
		transfers[1].dummy_cycles = ZERO_CYCLES;
    96011844:	f806c29f 	stur	xzr, [x20, #108]
    96011848:	17ffffc9 	b	9601176c <tegrabl_qspi_flash_read+0x160>
		transfers[2].op_mode = SDR_MODE;
    9601184c:	b900281f 	str	wzr, [x0, #40]
    96011850:	17ffffd4 	b	960117a0 <tegrabl_qspi_flash_read+0x194>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96011854:	52800053 	mov	w19, #0x2                   	// #2
		return TEGRABL_ERROR(TEGRABL_ERR_BAD_ADDRESS, 0);
    96011858:	72a22233 	movk	w19, #0x1111, lsl #16
    9601185c:	17ffffdf 	b	960117d8 <tegrabl_qspi_flash_read+0x1cc>
    96011860:	52800133 	mov	w19, #0x9                   	// #9
    96011864:	17fffffd 	b	96011858 <tegrabl_qspi_flash_read+0x24c>

0000000096011868 <tegrabl_qspi_blockdev_xfer>:
	if ((xfer == NULL) || (xfer->dev == NULL) || (xfer->buf == NULL)) {
    96011868:	b4000160 	cbz	x0, 96011894 <tegrabl_qspi_blockdev_xfer+0x2c>
    9601186c:	f9400005 	ldr	x5, [x0]
    96011870:	b4000125 	cbz	x5, 96011894 <tegrabl_qspi_blockdev_xfer+0x2c>
    96011874:	f9400803 	ldr	x3, [x0, #16]
    96011878:	b40000e3 	cbz	x3, 96011894 <tegrabl_qspi_blockdev_xfer+0x2c>
	count = xfer->block_count;
    9601187c:	b9401c02 	ldr	w2, [x0, #28]
	if (count != 0U) {
    96011880:	34000102 	cbz	w2, 960118a0 <tegrabl_qspi_blockdev_xfer+0x38>
		err = tegrabl_qspi_flash_read(hqfdi, block, count, (uint8_t *)buf, true);
    96011884:	b9401801 	ldr	w1, [x0, #24]
    96011888:	52800024 	mov	w4, #0x1                   	// #1
    9601188c:	f94018a0 	ldr	x0, [x5, #48]
    96011890:	17ffff5f 	b	9601160c <tegrabl_qspi_flash_read>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    96011894:	52808040 	mov	w0, #0x402                 	// #1026
    96011898:	72a22220 	movk	w0, #0x1111, lsl #16
}
    9601189c:	d65f03c0 	ret
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    960118a0:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    960118a4:	17fffffe 	b	9601189c <tegrabl_qspi_blockdev_xfer+0x34>

00000000960118a8 <qspi_bdev_read_block>:

static tegrabl_error_t qspi_bdev_read_block(tegrabl_bdev_t *dev, void *buf,
	bnum_t block, bnum_t count)
{
    960118a8:	2a0203e5 	mov	w5, w2
    960118ac:	2a0303e2 	mov	w2, w3
	struct tegrabl_qspi_flash_driver_info *hqfdi;
	if ((dev == NULL) || (dev->priv_data == NULL) || (buf == NULL)) {
    960118b0:	b4000100 	cbz	x0, 960118d0 <qspi_bdev_read_block+0x28>
    960118b4:	f9401800 	ldr	x0, [x0, #48]
    960118b8:	b40000c0 	cbz	x0, 960118d0 <qspi_bdev_read_block+0x28>
    960118bc:	b40000a1 	cbz	x1, 960118d0 <qspi_bdev_read_block+0x28>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
	}
	hqfdi = dev->priv_data;
	return tegrabl_qspi_flash_read(hqfdi, block, count, (uint8_t *)buf, false);
    960118c0:	aa0103e3 	mov	x3, x1
    960118c4:	52800004 	mov	w4, #0x0                   	// #0
    960118c8:	2a0503e1 	mov	w1, w5
    960118cc:	17ffff50 	b	9601160c <tegrabl_qspi_flash_read>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    960118d0:	52802040 	mov	w0, #0x102                 	// #258
    960118d4:	72a22220 	movk	w0, #0x1111, lsl #16
}
    960118d8:	d65f03c0 	ret

00000000960118dc <qspi_quad_flag_set>:
	if (hqfdi->plat_params.max_bus_width != QSPI_BUS_WIDTH_X4) {
    960118dc:	b9401003 	ldr	w3, [x0, #16]
{
    960118e0:	12001c21 	and	w1, w1, #0xff
	if (hqfdi->plat_params.max_bus_width != QSPI_BUS_WIDTH_X4) {
    960118e4:	7100087f 	cmp	w3, #0x2
    960118e8:	54000141 	b.ne	96011910 <qspi_quad_flag_set+0x34>  // b.any
	switch (device_info_list[device_list_index].manufacture_id) {
    960118ec:	b9404c02 	ldr	w2, [x0, #76]
    960118f0:	b0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    960118f4:	91249063 	add	x3, x3, #0x924
    960118f8:	d28004e4 	mov	x4, #0x27                  	// #39
    960118fc:	9b040c42 	madd	x2, x2, x4, x3
    96011900:	39408042 	ldrb	w2, [x2, #32]
    96011904:	7100045f 	cmp	w2, #0x1
    96011908:	54000041 	b.ne	96011910 <qspi_quad_flag_set+0x34>  // b.any
		err = qspi_flash_x4_enable_spansion(hqfdi, bset);
    9601190c:	140004e4 	b	96012c9c <qspi_flash_x4_enable_spansion>
}
    96011910:	52800000 	mov	w0, #0x0                   	// #0
    96011914:	d65f03c0 	ret

0000000096011918 <tegrabl_qspi_flash_open>:
{
    96011918:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    9601191c:	910003fd 	mov	x29, sp
    96011920:	a90153f3 	stp	x19, x20, [sp, #16]
    96011924:	a9025bf5 	stp	x21, x22, [sp, #32]
    96011928:	a90363f7 	stp	x23, x24, [sp, #48]
    9601192c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96011930:	a90573fb 	stp	x27, x28, [sp, #80]
	struct tegrabl_qspi_handle *hqspi = NULL;
    96011934:	f9003bbf 	str	xzr, [x29, #112]
	if (params == NULL) {
    96011938:	b40020a1 	cbz	x1, 96011d4c <tegrabl_qspi_flash_open+0x434>
	if (is_init_done[instance]) {
    9601193c:	b00002f7 	adrp	x23, 9606e000 <__bss_start>
    96011940:	2a0003f9 	mov	w25, w0
    96011944:	9127c6e2 	add	x2, x23, #0x9f1
    96011948:	38796842 	ldrb	w2, [x2, x25]
    9601194c:	35002042 	cbnz	w2, 96011d54 <tegrabl_qspi_flash_open+0x43c>
    96011950:	aa0103f4 	mov	x20, x1
    96011954:	2a0003f8 	mov	w24, w0
	hqfdi = tegrabl_calloc(1, sizeof(*hqfdi));
    96011958:	d2801001 	mov	x1, #0x80                  	// #128
    9601195c:	d2800020 	mov	x0, #0x1                   	// #1
    96011960:	94005459 	bl	96026ac4 <tegrabl_calloc>
    96011964:	aa0003f3 	mov	x19, x0
	if (hqfdi == NULL) {
    96011968:	b50000e0 	cbnz	x0, 96011984 <tegrabl_qspi_flash_open+0x6c>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, AUX_INFO_NO_MEMORY_1);
    9601196c:	52816074 	mov	w20, #0xb03                 	// #2819
		pr_error("Failed to allocate memory for qspi_flash_driver_info\n");
    96011970:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011974:	91339400 	add	x0, x0, #0xce5
    96011978:	9400433e 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_PARAMS);
    9601197c:	72a22234 	movk	w20, #0x1111, lsl #16
    96011980:	140000eb 	b	96011d2c <tegrabl_qspi_flash_open+0x414>
	hqfdi->transfers = tegrabl_calloc(QSPI_TRANSFERS, sizeof(struct tegrabl_qspi_transfer));
    96011984:	d2800901 	mov	x1, #0x48                  	// #72
    96011988:	d2800060 	mov	x0, #0x3                   	// #3
    9601198c:	9400544e 	bl	96026ac4 <tegrabl_calloc>
    96011990:	f9003660 	str	x0, [x19, #104]
	hqfdi->address_data = tegrabl_calloc(QSPI_ADDR_LENGTH, sizeof(uint8_t));
    96011994:	d2800021 	mov	x1, #0x1                   	// #1
    96011998:	d28000a0 	mov	x0, #0x5                   	// #5
    9601199c:	9400544a 	bl	96026ac4 <tegrabl_calloc>
    960119a0:	f9003a60 	str	x0, [x19, #112]
	hqfdi->cmd = tegrabl_calloc(1, sizeof(uint8_t));
    960119a4:	d2800021 	mov	x1, #0x1                   	// #1
    960119a8:	aa0103e0 	mov	x0, x1
    960119ac:	94005446 	bl	96026ac4 <tegrabl_calloc>
    960119b0:	f9003e60 	str	x0, [x19, #120]
	memcpy(&hqfdi->plat_params, params, sizeof(*params));
    960119b4:	d2800582 	mov	x2, #0x2c                  	// #44
    960119b8:	aa1403e1 	mov	x1, x20
    960119bc:	aa1303e0 	mov	x0, x19
    960119c0:	94006159 	bl	96029f24 <memcpy>
	qparam->clk_src = params->clk_src;
    960119c4:	b9400260 	ldr	w0, [x19]
	qdevice->cs_active_low = true;
    960119c8:	52800021 	mov	w1, #0x1                   	// #1
	qparam->clk_src = params->clk_src;
    960119cc:	b9008ba0 	str	w0, [x29, #136]
	err = tegrabl_qspi_open(instance, &qdevice, &qparams, &hqspi);
    960119d0:	9101c3a3 	add	x3, x29, #0x70
	qparam->clk_src_freq = params->clk_src_freq;
    960119d4:	b9400a60 	ldr	w0, [x19, #8]
	err = tegrabl_qspi_open(instance, &qdevice, &qparams, &hqspi);
    960119d8:	910223a2 	add	x2, x29, #0x88
	qparam->clk_src_freq = params->clk_src_freq;
    960119dc:	b9008fa0 	str	w0, [x29, #140]
	qparam->interface_freq = params->interface_freq;
    960119e0:	b9400e60 	ldr	w0, [x19, #12]
    960119e4:	b90093a0 	str	w0, [x29, #144]
	qparam->clk_div = params->clk_div;
    960119e8:	b9400660 	ldr	w0, [x19, #4]
    960119ec:	b90097a0 	str	w0, [x29, #148]
	qparam->max_bus_width = params->max_bus_width;
    960119f0:	b9401260 	ldr	w0, [x19, #16]
    960119f4:	b9009ba0 	str	w0, [x29, #152]
	qparam->dma_type = params->dma_type;
    960119f8:	b9401a60 	ldr	w0, [x19, #24]
    960119fc:	b9009fa0 	str	w0, [x29, #156]
	qparam->fifo_access_mode = params->fifo_access_mode;
    96011a00:	b9401e60 	ldr	w0, [x19, #28]
    96011a04:	b900a3a0 	str	w0, [x29, #160]
	qparam->trimmer1_val = params->trimmer1_val;
    96011a08:	b9402660 	ldr	w0, [x19, #36]
    96011a0c:	b900a7a0 	str	w0, [x29, #164]
	qparam->trimmer2_val = params->trimmer2_val;
    96011a10:	b9402a60 	ldr	w0, [x19, #40]
    96011a14:	b900aba0 	str	w0, [x29, #168]
	qdevice->spi_mode = QSPI_SIGNAL_MODE_0;
    96011a18:	b9007bbf 	str	wzr, [x29, #120]
	qspi_init_device(&hqfdi->plat_params, &qdevice);
    96011a1c:	b9400e60 	ldr	w0, [x19, #12]
	qdevice->cs_active_low = true;
    96011a20:	3901f3a1 	strb	w1, [x29, #124]
	err = tegrabl_qspi_open(instance, &qdevice, &qparams, &hqspi);
    96011a24:	9101e3a1 	add	x1, x29, #0x78
	qdevice->chip_select = 0;
    96011a28:	b90083bf 	str	wzr, [x29, #128]
	qdevice->speed_hz = params->interface_freq;
    96011a2c:	b90087a0 	str	w0, [x29, #132]
	err = tegrabl_qspi_open(instance, &qdevice, &qparams, &hqspi);
    96011a30:	2a1803e0 	mov	w0, w24
    96011a34:	97fffdb0 	bl	960110f4 <tegrabl_qspi_open>
	if (err != TEGRABL_NO_ERROR) {
    96011a38:	34000160 	cbz	w0, 96011a64 <tegrabl_qspi_flash_open+0x14c>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED,
    96011a3c:	52814414 	mov	w20, #0xa20                 	// #2592
		pr_error("Failed to open QSPI Instance%d: 0x%08x\n", instance, err);
    96011a40:	2a0003e2 	mov	w2, w0
    96011a44:	2a1803e1 	mov	w1, w24
    96011a48:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011a4c:	91347800 	add	x0, x0, #0xd1e
    96011a50:	94004308 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, AUX_INFO_NO_MEMORY_1);
    96011a54:	72a22234 	movk	w20, #0x1111, lsl #16
	tegrabl_free(hqfdi);
    96011a58:	aa1303e0 	mov	x0, x19
    96011a5c:	94005417 	bl	96026ab8 <tegrabl_free>
	return err;
    96011a60:	140000b3 	b	96011d2c <tegrabl_qspi_flash_open+0x414>
	hqfdi->hqspi = hqspi;
    96011a64:	f9403ba0 	ldr	x0, [x29, #112]
	qspi_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96011a68:	d2801101 	mov	x1, #0x88                  	// #136
	hqfdi->hqspi = hqspi;
    96011a6c:	f9003260 	str	x0, [x19, #96]
	qspi_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96011a70:	d2800020 	mov	x0, #0x1                   	// #1
    96011a74:	94005414 	bl	96026ac4 <tegrabl_calloc>
    96011a78:	aa0003f5 	mov	x21, x0
	if (qspi_dev == NULL) {
    96011a7c:	b50000c0 	cbnz	x0, 96011a94 <tegrabl_qspi_flash_open+0x17c>
		pr_error("Qspi calloc failed\n");
    96011a80:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, AUX_INFO_NO_MEMORY_1);
    96011a84:	52816074 	mov	w20, #0xb03                 	// #2819
		pr_error("Qspi calloc failed\n");
    96011a88:	91352400 	add	x0, x0, #0xd49
    96011a8c:	940042f9 	bl	96022670 <tegrabl_printf>
    96011a90:	17fffff1 	b	96011a54 <tegrabl_qspi_flash_open+0x13c>
	transfers = hqfdi->transfers;
    96011a94:	f9403674 	ldr	x20, [x19, #104]
	memset(transfers, 0, 2U*(sizeof(struct tegrabl_qspi_transfer)));
    96011a98:	d2801202 	mov	x2, #0x90                  	// #144
    96011a9c:	52800001 	mov	w1, #0x0                   	// #0
    96011aa0:	aa1403e0 	mov	x0, x20
    96011aa4:	940060e1 	bl	96029e28 <memset>
	command = QSPI_FLASH_CMD_RDID;
    96011aa8:	9102c3a0 	add	x0, x29, #0xb0
    96011aac:	12800c01 	mov	w1, #0xffffff9f            	// #-97
	transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    96011ab0:	7900229f 	strh	wzr, [x20, #16]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 2,
    96011ab4:	52896803 	mov	w3, #0x4b40                	// #19264
	transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
    96011ab8:	f900129f 	str	xzr, [x20, #32]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 2,
    96011abc:	72a00983 	movk	w3, #0x4c, lsl #16
	command = QSPI_FLASH_CMD_RDID;
    96011ac0:	381b7c01 	strb	w1, [x0, #-73]!
	transfers[1].rx_buf = buf_id;
    96011ac4:	9101a3a1 	add	x1, x29, #0x68
	transfers[0].dummy_cycles = ZERO_CYCLES;
    96011ac8:	b9002a9f 	str	wzr, [x20, #40]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 2,
    96011acc:	52800042 	mov	w2, #0x2                   	// #2
	transfers[0].rx_buf = NULL;
    96011ad0:	a9007e80 	stp	x0, xzr, [x20]
	transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96011ad4:	d2800020 	mov	x0, #0x1                   	// #1
    96011ad8:	f8014280 	stur	x0, [x20, #20]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 2,
    96011adc:	f9403260 	ldr	x0, [x19, #96]
	transfers[1].rx_buf = buf_id;
    96011ae0:	a904869f 	stp	xzr, x1, [x20, #72]
	transfers[1].write_len = 0;
    96011ae4:	d2c00061 	mov	x1, #0x300000000           	// #12884901888
	transfers[1].mode = QSPI_FLASH_CMD_MODE_VAL;
    96011ae8:	7900b29f 	strh	wzr, [x20, #88]
	transfers[1].write_len = 0;
    96011aec:	f805c281 	stur	x1, [x20, #92]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 2,
    96011af0:	aa1403e1 	mov	x1, x20
	transfers[1].bus_width = QSPI_BUS_WIDTH_X1;
    96011af4:	f900369f 	str	xzr, [x20, #104]
	transfers[1].dummy_cycles = ZERO_CYCLES;
    96011af8:	b900729f 	str	wzr, [x20, #112]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 2,
    96011afc:	97fffcff 	bl	96010ef8 <tegrabl_qspi_transaction>
    96011b00:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96011b04:	34000120 	cbz	w0, 96011b28 <tegrabl_qspi_flash_open+0x210>
		pr_error("Read-device-ID: register (0x%x) read fail (err:0x%x)\n", command, err);
    96011b08:	39419fa1 	ldrb	w1, [x29, #103]
    96011b0c:	2a0003e2 	mov	w2, w0
    96011b10:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011b14:	91358000 	add	x0, x0, #0xd60
    96011b18:	940042d6 	bl	96022670 <tegrabl_printf>
    96011b1c:	2a1403e0 	mov	w0, w20
    96011b20:	2a0003f4 	mov	w20, w0
    96011b24:	140000a0 	b	96011da4 <tegrabl_qspi_flash_open+0x48c>
    96011b28:	b000017a 	adrp	x26, 9603e000 <tca9539_chips+0x378>
		if (buf_id[0] == device_info_list[i].manufacture_id &&
    96011b2c:	3941a3a1 	ldrb	w1, [x29, #104]
    96011b30:	91249340 	add	x0, x26, #0x924
		buf_id[1] == device_info_list[i].memory_type &&
    96011b34:	3941a7a3 	ldrb	w3, [x29, #105]
		buf_id[2] == device_info_list[i].density) {
    96011b38:	3941aba2 	ldrb	w2, [x29, #106]
    96011b3c:	91008000 	add	x0, x0, #0x20
	for (i = 0; i < device_cnt; i++) {
    96011b40:	d2800016 	mov	x22, #0x0                   	// #0
		if (buf_id[0] == device_info_list[i].manufacture_id &&
    96011b44:	39400004 	ldrb	w4, [x0]
    96011b48:	6b01009f 	cmp	w4, w1
    96011b4c:	540000e1 	b.ne	96011b68 <tegrabl_qspi_flash_open+0x250>  // b.any
    96011b50:	39400404 	ldrb	w4, [x0, #1]
    96011b54:	6b03009f 	cmp	w4, w3
    96011b58:	54000081 	b.ne	96011b68 <tegrabl_qspi_flash_open+0x250>  // b.any
		buf_id[1] == device_info_list[i].memory_type &&
    96011b5c:	39400804 	ldrb	w4, [x0, #2]
    96011b60:	6b02009f 	cmp	w4, w2
    96011b64:	54000fc0 	b.eq	96011d5c <tegrabl_qspi_flash_open+0x444>  // b.none
	for (i = 0; i < device_cnt; i++) {
    96011b68:	110006d6 	add	w22, w22, #0x1
    96011b6c:	91009c00 	add	x0, x0, #0x27
    96011b70:	710016df 	cmp	w22, #0x5
    96011b74:	54fffe81 	b.ne	96011b44 <tegrabl_qspi_flash_open+0x22c>  // b.any
		pr_info("No supported QSPI flash found\n");
    96011b78:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011b7c:	9138ec00 	add	x0, x0, #0xe3b
    96011b80:	940042bc 	bl	96022670 <tegrabl_printf>
		chip_info->flash_size_log2 = 0;
    96011b84:	b9002e7f 	str	wzr, [x19, #44]
    96011b88:	1400007c 	b	96011d78 <tegrabl_qspi_flash_open+0x460>
	} else if (chip_info->flash_size_log2 >= 0x20UL) {
    96011b8c:	71007c3f 	cmp	w1, #0x1f
    96011b90:	54000069 	b.ls	96011b9c <tegrabl_qspi_flash_open+0x284>  // b.plast
		chip_info->flash_size_log2 -= 6UL;
    96011b94:	51001821 	sub	w1, w1, #0x6
    96011b98:	b9002e61 	str	w1, [x19, #44]
	pr_info("QSPI Flash Size = %lu MB\n", 1UL << (chip_info->flash_size_log2 - FLASH_SIZE_1MB_LOG2));
    96011b9c:	b9402e61 	ldr	w1, [x19, #44]
    96011ba0:	9100b27b 	add	x27, x19, #0x2c
    96011ba4:	d280003c 	mov	x28, #0x1                   	// #1
    96011ba8:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011bac:	51005021 	sub	w1, w1, #0x14
    96011bb0:	91372800 	add	x0, x0, #0xdca
    96011bb4:	9ac12381 	lsl	x1, x28, x1
    96011bb8:	940042ae 	bl	96022670 <tegrabl_printf>
	device_flag = device_info_list[chip_info->device_list_index].flag;
    96011bbc:	b9402360 	ldr	w0, [x27, #32]
    96011bc0:	91249341 	add	x1, x26, #0x924
    96011bc4:	d28004e2 	mov	x2, #0x27                  	// #39
	chip_info->sector_size_log2 = device_info_list[i].sector_size;
    96011bc8:	9b0206d6 	madd	x22, x22, x2, x1
	device_flag = device_info_list[chip_info->device_list_index].flag;
    96011bcc:	9b020400 	madd	x0, x0, x2, x1
		chip_info->address_length = 4;
    96011bd0:	52800062 	mov	w2, #0x3                   	// #3
	chip_info->sector_size_log2 = device_info_list[i].sector_size;
    96011bd4:	39408ec1 	ldrb	w1, [x22, #35]
	device_flag = device_info_list[chip_info->device_list_index].flag;
    96011bd8:	3940981a 	ldrb	w26, [x0, #38]
	chip_info->sector_count = 1UL << (chip_info->flash_size_log2 -
    96011bdc:	b9402e60 	ldr	w0, [x19, #44]
	chip_info->sector_size_log2 = device_info_list[i].sector_size;
    96011be0:	b9000f61 	str	w1, [x27, #12]
	chip_info->sector_count = 1UL << (chip_info->flash_size_log2 -
    96011be4:	4b010001 	sub	w1, w0, w1
		chip_info->address_length = 4;
    96011be8:	7100601f 	cmp	w0, #0x18
	chip_info->sector_count = 1UL << (chip_info->flash_size_log2 -
    96011bec:	9ac1239c 	lsl	x28, x28, x1
				device_info_list[i].parameter_sector_size;
    96011bf0:	394092c1 	ldrb	w1, [x22, #36]
    96011bf4:	2902077c 	stp	w28, w1, [x27, #16]
				device_info_list[i].parameter_sector_cnt;
    96011bf8:	394096c1 	ldrb	w1, [x22, #37]
    96011bfc:	b9001b61 	str	w1, [x27, #24]
		chip_info->address_length = 4;
    96011c00:	52800081 	mov	w1, #0x4                   	// #4
    96011c04:	1a828021 	csel	w1, w1, w2, hi  // hi = pmore
    96011c08:	b9001f61 	str	w1, [x27, #28]
	if ((device_flag & (uint8_t) FLAG_DDR) != 0U) {
    96011c0c:	362807ba 	tbz	w26, #5, 96011d00 <tegrabl_qspi_flash_open+0x3e8>
		chip_info->qddr_read = hqfdi->plat_params.enable_ddr_read;
    96011c10:	39405261 	ldrb	w1, [x19, #20]
    96011c14:	3900b361 	strb	w1, [x27, #44]
	chip_info->block_size_log2 = 9;
    96011c18:	52800121 	mov	w1, #0x9                   	// #9
	chip_info->block_count = 1UL << (chip_info->flash_size_log2 -
    96011c1c:	51002400 	sub	w0, w0, #0x9
	chip_info->block_size_log2 = 9;
    96011c20:	b9000761 	str	w1, [x27, #4]
	chip_info->block_count = 1UL << (chip_info->flash_size_log2 -
    96011c24:	d2800021 	mov	x1, #0x1                   	// #1
    96011c28:	9ac02020 	lsl	x0, x1, x0
    96011c2c:	b9000b60 	str	w0, [x27, #8]
	chip_info->page_write_size = 256;
    96011c30:	d2802000 	mov	x0, #0x100                 	// #256
    96011c34:	f9002a60 	str	x0, [x19, #80]
	if ((device_flag & (uint8_t) FLAG_PAGE512) != 0U) {
    96011c38:	3600009a 	tbz	w26, #0, 96011c48 <tegrabl_qspi_flash_open+0x330>
		err = qspi_flash_page_512bytes_enable_spansion(hqfdi);
    96011c3c:	aa1303e0 	mov	x0, x19
    96011c40:	940004a6 	bl	96012ed8 <qspi_flash_page_512bytes_enable_spansion>
    96011c44:	2a0003f4 	mov	w20, w0
	if ((device_flag & (uint8_t) FLAG_BLANK_CHK) != 0U) {
    96011c48:	3620009a 	tbz	w26, #4, 96011c58 <tegrabl_qspi_flash_open+0x340>
		err = qspi_flash_blank_check_enable_spansion(hqfdi);
    96011c4c:	aa1303e0 	mov	x0, x19
    96011c50:	940004d9 	bl	96012fb4 <qspi_flash_blank_check_enable_spansion>
    96011c54:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96011c58:	35000a74 	cbnz	w20, 96011da4 <tegrabl_qspi_flash_open+0x48c>
	err = tegrabl_blockdev_initialize_bdev(qspi_dev,
    96011c5c:	29460e62 	ldp	w2, w3, [x19, #48]
    96011c60:	32100701 	orr	w1, w24, #0x30000
    96011c64:	aa1503e0 	mov	x0, x21
    96011c68:	94002978 	bl	9601c248 <tegrabl_blockdev_initialize_bdev>
    96011c6c:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96011c70:	350009a0 	cbnz	w0, 96011da4 <tegrabl_qspi_flash_open+0x48c>
	qspi_dev->buf_align_size = TEGRABL_QSPI_BUF_ALIGN_SIZE;
    96011c74:	52800080 	mov	w0, #0x4                   	// #4
    96011c78:	b9002ea0 	str	w0, [x21, #44]
	qspi_dev->read_block = qspi_bdev_read_block;
    96011c7c:	90000000 	adrp	x0, 96011000 <tegrabl_qspi_transaction+0x108>
    96011c80:	9122a000 	add	x0, x0, #0x8a8
    96011c84:	f90026a0 	str	x0, [x21, #72]
	qspi_dev->ioctl = qspi_bdev_ioctl;
    96011c88:	90000000 	adrp	x0, 96011000 <tegrabl_qspi_transaction+0x108>
    96011c8c:	91165000 	add	x0, x0, #0x594
    96011c90:	f9003ea0 	str	x0, [x21, #120]
	qspi_dev->write_block = qspi_bdev_write_block;
    96011c94:	b0000000 	adrp	x0, 96012000 <qspi_qpi_flag_set+0x74>
    96011c98:	91074000 	add	x0, x0, #0x1d0
    96011c9c:	f9002aa0 	str	x0, [x21, #80]
	qspi_dev->erase = qspi_bdev_erase;
    96011ca0:	b0000000 	adrp	x0, 96012000 <qspi_qpi_flag_set+0x74>
    96011ca4:	91147000 	add	x0, x0, #0x51c
    96011ca8:	f90036a0 	str	x0, [x21, #104]
	qspi_dev->xfer = tegrabl_qspi_blockdev_xfer;
    96011cac:	90000000 	adrp	x0, 96011000 <tegrabl_qspi_transaction+0x108>
    96011cb0:	9121a000 	add	x0, x0, #0x868
	qspi_dev->priv_data = hqfdi;
    96011cb4:	f9001ab3 	str	x19, [x21, #48]
	err = qspi_quad_flag_set(hqfdi, 1);
    96011cb8:	52800021 	mov	w1, #0x1                   	// #1
	qspi_dev->xfer = tegrabl_qspi_blockdev_xfer;
    96011cbc:	f9002ea0 	str	x0, [x21, #88]
	qspi_dev->xfer_wait = tegrabl_qspi_blockdev_xfer_wait;
    96011cc0:	90000000 	adrp	x0, 96011000 <tegrabl_qspi_transaction+0x108>
    96011cc4:	9116a000 	add	x0, x0, #0x5a8
    96011cc8:	f90032a0 	str	x0, [x21, #96]
	err = qspi_quad_flag_set(hqfdi, 1);
    96011ccc:	aa1303e0 	mov	x0, x19
    96011cd0:	97ffff03 	bl	960118dc <qspi_quad_flag_set>
    96011cd4:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96011cd8:	35000660 	cbnz	w0, 96011da4 <tegrabl_qspi_flash_open+0x48c>
	err = tegrabl_blockdev_register_device(qspi_dev);
    96011cdc:	aa1503e0 	mov	x0, x21
    96011ce0:	9400297e 	bl	9601c2d8 <tegrabl_blockdev_register_device>
    96011ce4:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96011ce8:	34000100 	cbz	w0, 96011d08 <tegrabl_qspi_flash_open+0x3f0>
		pr_error("Qspi block dev registration failed (err:0x%x)\n", err);
    96011cec:	2a0003e1 	mov	w1, w0
    96011cf0:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011cf4:	91379c00 	add	x0, x0, #0xde7
    96011cf8:	9400425e 	bl	96022670 <tegrabl_printf>
		goto init_cleanup;
    96011cfc:	1400002a 	b	96011da4 <tegrabl_qspi_flash_open+0x48c>
		chip_info->qddr_read = false;
    96011d00:	3900b37f 	strb	wzr, [x27, #44]
    96011d04:	17ffffc5 	b	96011c18 <tegrabl_qspi_flash_open+0x300>
	is_init_done[instance] = true;
    96011d08:	9127c6f7 	add	x23, x23, #0x9f1
	pr_info("Qspi initialized successfully\n");
    96011d0c:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011d10:	91386400 	add	x0, x0, #0xe19
    96011d14:	94004257 	bl	96022670 <tegrabl_printf>
	is_init_done[instance] = true;
    96011d18:	52800020 	mov	w0, #0x1                   	// #1
    96011d1c:	38396ae0 	strb	w0, [x23, x25]
	qspi_flash_driver_info[instance] = hqfdi;
    96011d20:	b00002e0 	adrp	x0, 9606e000 <__bss_start>
    96011d24:	9127e000 	add	x0, x0, #0x9f8
    96011d28:	f8397813 	str	x19, [x0, x25, lsl #3]
}
    96011d2c:	2a1403e0 	mov	w0, w20
    96011d30:	a94153f3 	ldp	x19, x20, [sp, #16]
    96011d34:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96011d38:	a94363f7 	ldp	x23, x24, [sp, #48]
    96011d3c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96011d40:	a94573fb 	ldp	x27, x28, [sp, #80]
    96011d44:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    96011d48:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_PARAMS);
    96011d4c:	52800054 	mov	w20, #0x2                   	// #2
    96011d50:	17ffff0b 	b	9601197c <tegrabl_qspi_flash_open+0x64>
		return TEGRABL_NO_ERROR;
    96011d54:	52800014 	mov	w20, #0x0                   	// #0
    96011d58:	17fffff5 	b	96011d2c <tegrabl_qspi_flash_open+0x414>
		chip_info->flash_size_log2 = buf_id[2];
    96011d5c:	b9002e62 	str	w2, [x19, #44]
		if (MANUFACTURE_ID_MACRONIX == buf_id[0]) {
    96011d60:	7103083f 	cmp	w1, #0xc2
		chip_info->device_list_index = i;
    96011d64:	b9004e76 	str	w22, [x19, #76]
		if (MANUFACTURE_ID_MACRONIX == buf_id[0]) {
    96011d68:	54000081 	b.ne	96011d78 <tegrabl_qspi_flash_open+0x460>  // b.any
			err = qspi_flash_get_size_macronix(hqfdi);
    96011d6c:	aa1303e0 	mov	x0, x19
    96011d70:	940004f3 	bl	9601313c <qspi_flash_get_size_macronix>
			if (err != TEGRABL_NO_ERROR) {
    96011d74:	35ffed60 	cbnz	w0, 96011b20 <tegrabl_qspi_flash_open+0x208>
	if (chip_info->flash_size_log2 < FLASH_SIZE_16MB_LOG2) {
    96011d78:	b9402e61 	ldr	w1, [x19, #44]
    96011d7c:	71005c3f 	cmp	w1, #0x17
    96011d80:	54fff068 	b.hi	96011b8c <tegrabl_qspi_flash_open+0x274>  // b.pmore
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID,
    96011d84:	5280e054 	mov	w20, #0x702                 	// #1794
		pr_error("QSPI Flash: Insufficient flash size (%lu MB)\n",
    96011d88:	51005021 	sub	w1, w1, #0x14
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID,
    96011d8c:	72a22234 	movk	w20, #0x1111, lsl #16
		pr_error("QSPI Flash: Insufficient flash size (%lu MB)\n",
    96011d90:	d2800020 	mov	x0, #0x1                   	// #1
    96011d94:	9ac12001 	lsl	x1, x0, x1
    96011d98:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011d9c:	91366400 	add	x0, x0, #0xd99
    96011da0:	94004234 	bl	96022670 <tegrabl_printf>
	tegrabl_free(qspi_dev);
    96011da4:	aa1503e0 	mov	x0, x21
    96011da8:	94005344 	bl	96026ab8 <tegrabl_free>
    96011dac:	17ffff2b 	b	96011a58 <tegrabl_qspi_flash_open+0x140>

0000000096011db0 <qspi_read_reg>:
{
    96011db0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96011db4:	910003fd 	mov	x29, sp
    96011db8:	a90153f3 	stp	x19, x20, [sp, #16]
    96011dbc:	2a0103f4 	mov	w20, w1
	transfers = hqfdi->transfers;
    96011dc0:	f9403413 	ldr	x19, [x0, #104]
{
    96011dc4:	a9025bf5 	stp	x21, x22, [sp, #32]
    96011dc8:	aa0003f5 	mov	x21, x0
    96011dcc:	f9001bf7 	str	x23, [sp, #48]
	is_ext_reg_access_cmd = ((reg_access_cmd & (uint32_t) 0xFFFF00) == 0U) ?
    96011dd0:	12183c36 	and	w22, w1, #0xffff00
	memset(transfers, 0, QSPI_TRANSFERS*(sizeof(struct tegrabl_qspi_transfer)));
    96011dd4:	aa1303e0 	mov	x0, x19
    96011dd8:	52800001 	mov	w1, #0x0                   	// #0
{
    96011ddc:	aa0203f7 	mov	x23, x2
	memset(transfers, 0, QSPI_TRANSFERS*(sizeof(struct tegrabl_qspi_transfer)));
    96011de0:	d2801b02 	mov	x2, #0xd8                  	// #216
    96011de4:	94006011 	bl	96029e28 <memset>
	cmd_addr_buf[0] = (uint8_t) ((reg_access_cmd >> 16) & (uint32_t) 0xFF);
    96011de8:	53107e80 	lsr	w0, w20, #16
    96011dec:	390123a0 	strb	w0, [x29, #72]
	cmd_addr_buf[1] = (uint8_t) ((reg_access_cmd >> 8) & (uint32_t) 0xFF);
    96011df0:	53087e80 	lsr	w0, w20, #8
    96011df4:	390127a0 	strb	w0, [x29, #73]
	command = QSPI_FLASH_CMD_RDAR;
    96011df8:	910143a0 	add	x0, x29, #0x50
    96011dfc:	52800ca1 	mov	w1, #0x65                  	// #101
	cmd_addr_buf[2] = (uint8_t) reg_access_cmd;
    96011e00:	12001e83 	and	w3, w20, #0xff
    96011e04:	39012ba3 	strb	w3, [x29, #74]
    96011e08:	9100b2a2 	add	x2, x21, #0x2c
	command = QSPI_FLASH_CMD_RDAR;
    96011e0c:	381f7c01 	strb	w1, [x0, #-9]!
    96011e10:	91012261 	add	x1, x19, #0x48
	if (is_ext_reg_access_cmd) {
    96011e14:	340005d6 	cbz	w22, 96011ecc <qspi_read_reg+0x11c>
		transfers[0].bus_width = chip_info->qpi_bus_width;
    96011e18:	b9402843 	ldr	w3, [x2, #40]
		transfers[0].tx_buf = &command;
    96011e1c:	f9000260 	str	x0, [x19]
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96011e20:	52800020 	mov	w0, #0x1                   	// #1
		transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    96011e24:	7900227f 	strh	wzr, [x19, #16]
			transfers[1].write_len = 3 + 1;
    96011e28:	7100087f 	cmp	w3, #0x2
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96011e2c:	b9001660 	str	w0, [x19, #20]
		transfers[1].tx_buf = cmd_addr_buf;
    96011e30:	910123a0 	add	x0, x29, #0x48
		transfers[0].bus_width = chip_info->qpi_bus_width;
    96011e34:	b9002263 	str	w3, [x19, #32]
			transfers[1].write_len = 3 + 1;
    96011e38:	528000e3 	mov	w3, #0x7                   	// #7
		transfers[0].dummy_cycles = ZERO_CYCLES;
    96011e3c:	f802427f 	stur	xzr, [x19, #36]
		transfers[1].tx_buf = cmd_addr_buf;
    96011e40:	f9002660 	str	x0, [x19, #72]
			transfers[1].write_len = 3 + 1;
    96011e44:	52800080 	mov	w0, #0x4                   	// #4
		transfers[1].dummy_cycles = 0;
    96011e48:	b900243f 	str	wzr, [x1, #36]
			transfers[1].write_len = 3 + 1;
    96011e4c:	1a831000 	csel	w0, w0, w3, ne  // ne = any
    96011e50:	b9001420 	str	w0, [x1, #20]
	transfers[1].bus_width = chip_info->qpi_bus_width;
    96011e54:	b9402842 	ldr	w2, [x2, #40]
	transfers[2].read_len = QSPI_FLASH_COMMAND_WIDTH;
    96011e58:	52800023 	mov	w3, #0x1                   	// #1
    96011e5c:	f94032a0 	ldr	x0, [x21, #96]
	transfers[1].mode = QSPI_FLASH_CMD_MODE_VAL;
    96011e60:	7900203f 	strh	wzr, [x1, #16]
	transfers[1].bus_width = chip_info->qpi_bus_width;
    96011e64:	b9002022 	str	w2, [x1, #32]
	transfers[1].op_mode = SDR_MODE;
    96011e68:	b900283f 	str	wzr, [x1, #40]
	transfers[2].rx_buf = p_reg_val;
    96011e6c:	f9004e77 	str	x23, [x19, #152]
	transfers[2].mode = QSPI_FLASH_CMD_MODE_VAL;
    96011e70:	7901427f 	strh	wzr, [x19, #160]
	transfers[2].read_len = QSPI_FLASH_COMMAND_WIDTH;
    96011e74:	b900aa63 	str	w3, [x19, #168]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    96011e78:	52896803 	mov	w3, #0x4b40                	// #19264
	transfers[2].bus_width = chip_info->qpi_bus_width;
    96011e7c:	b900b262 	str	w2, [x19, #176]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    96011e80:	72a00983 	movk	w3, #0x4c, lsl #16
	transfers[2].dummy_cycles = ZERO_CYCLES;
    96011e84:	f80b427f 	stur	xzr, [x19, #180]
	if (is_ext_reg_access_cmd) {
    96011e88:	340002f6 	cbz	w22, 96011ee4 <qspi_read_reg+0x134>
		err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    96011e8c:	aa1303e1 	mov	x1, x19
    96011e90:	52800062 	mov	w2, #0x3                   	// #3
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[1], 2,
    96011e94:	97fffc19 	bl	96010ef8 <tegrabl_qspi_transaction>
    96011e98:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96011e9c:	340000c0 	cbz	w0, 96011eb4 <qspi_read_reg+0x104>
		pr_error("Qspi read: register (0x%x) read fail (err:0x%x)\n",
    96011ea0:	2a0003e2 	mov	w2, w0
    96011ea4:	2a1403e1 	mov	w1, w20
    96011ea8:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011eac:	912f4400 	add	x0, x0, #0xbd1
    96011eb0:	940041f0 	bl	96022670 <tegrabl_printf>
}
    96011eb4:	2a1303e0 	mov	w0, w19
    96011eb8:	f9401bf7 	ldr	x23, [sp, #48]
    96011ebc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96011ec0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96011ec4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96011ec8:	d65f03c0 	ret
		transfers[1].tx_buf = &command;
    96011ecc:	f9002660 	str	x0, [x19, #72]
		transfers[1].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96011ed0:	52800020 	mov	w0, #0x1                   	// #1
		command = (uint8_t) reg_access_cmd;
    96011ed4:	39011fa3 	strb	w3, [x29, #71]
		transfers[1].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96011ed8:	b9001420 	str	w0, [x1, #20]
		transfers[1].dummy_cycles = ZERO_CYCLES;
    96011edc:	b900243f 	str	wzr, [x1, #36]
    96011ee0:	17ffffdd 	b	96011e54 <qspi_read_reg+0xa4>
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[1], 2,
    96011ee4:	52800042 	mov	w2, #0x2                   	// #2
    96011ee8:	17ffffeb 	b	96011e94 <qspi_read_reg+0xe4>

0000000096011eec <qspi_writein_progress>:
{
    96011eec:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96011ef0:	910003fd 	mov	x29, sp
    96011ef4:	a9025bf5 	stp	x21, x22, [sp, #32]
    96011ef8:	aa0003f6 	mov	x22, x0
    96011efc:	f9001bf7 	str	x23, [sp, #48]
    96011f00:	12001c35 	and	w21, w1, #0xff
    96011f04:	12001c57 	and	w23, w2, #0xff
    96011f08:	a90153f3 	stp	x19, x20, [sp, #16]
    96011f0c:	5280fa13 	mov	w19, #0x7d0                 	// #2000
		err = qspi_read_reg(hqfdi, QSPI_FLASH_CMD_RDSR1, &reg_val);
    96011f10:	91013fa2 	add	x2, x29, #0x4f
    96011f14:	528000a1 	mov	w1, #0x5                   	// #5
    96011f18:	aa1603e0 	mov	x0, x22
    96011f1c:	97ffffa5 	bl	96011db0 <qspi_read_reg>
    96011f20:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96011f24:	34000160 	cbz	w0, 96011f50 <qspi_writein_progress+0x64>
			pr_error("Read RDSR1 cmd fail (err:0x%x)\n", err);
    96011f28:	2a0003e1 	mov	w1, w0
    96011f2c:	b0000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96011f30:	91330800 	add	x0, x0, #0xcc2
    96011f34:	940041cf 	bl	96022670 <tegrabl_printf>
}
    96011f38:	2a1403e0 	mov	w0, w20
    96011f3c:	f9401bf7 	ldr	x23, [sp, #48]
    96011f40:	a94153f3 	ldp	x19, x20, [sp, #16]
    96011f44:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96011f48:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96011f4c:	d65f03c0 	ret
			tegrabl_mdelay(QSPI_FLASH_WIP_DISABLE_WAIT_TIME);
    96011f50:	d2807d00 	mov	x0, #0x3e8                 	// #1000
		if (is_mdelay) {
    96011f54:	34000197 	cbz	w23, 96011f84 <qspi_writein_progress+0x98>
			tegrabl_mdelay(QSPI_FLASH_WIP_DISABLE_WAIT_TIME);
    96011f58:	94003770 	bl	9601fd18 <tegrabl_mdelay>
	} while ((reg_val & (uint8_t) QSPI_FLASH_WIP_FIELD) != comp);
    96011f5c:	39413fa0 	ldrb	w0, [x29, #79]
    96011f60:	12000000 	and	w0, w0, #0x1
    96011f64:	6b0002bf 	cmp	w21, w0
    96011f68:	54fffe80 	b.eq	96011f38 <qspi_writein_progress+0x4c>  // b.none
    96011f6c:	51000673 	sub	w19, w19, #0x1
		if (tried == (uint16_t) QSPI_FLASH_WIP_RETRY_COUNT) {
    96011f70:	72003e73 	ands	w19, w19, #0xffff
    96011f74:	54fffce1 	b.ne	96011f10 <qspi_writein_progress+0x24>  // b.any
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_WIP_TIMEOUT);
    96011f78:	5281e0d4 	mov	w20, #0xf06                 	// #3846
    96011f7c:	72a22234 	movk	w20, #0x1111, lsl #16
	return err;
    96011f80:	17ffffee 	b	96011f38 <qspi_writein_progress+0x4c>
			tegrabl_udelay(QSPI_FLASH_WIP_DISABLE_WAIT_TIME);
    96011f84:	94003748 	bl	9601fca4 <tegrabl_udelay>
    96011f88:	17fffff5 	b	96011f5c <qspi_writein_progress+0x70>

0000000096011f8c <qspi_qpi_flag_set>:
{
    96011f8c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96011f90:	910003fd 	mov	x29, sp
    96011f94:	a90153f3 	stp	x19, x20, [sp, #16]
    96011f98:	12001c33 	and	w19, w1, #0xff
    96011f9c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96011fa0:	9100b015 	add	x21, x0, #0x2c
	if ((hqfdi->plat_params.max_bus_width != QSPI_BUS_WIDTH_X4) ||
    96011fa4:	b9401001 	ldr	w1, [x0, #16]
    96011fa8:	7100083f 	cmp	w1, #0x2
    96011fac:	54000101 	b.ne	96011fcc <qspi_qpi_flag_set+0x40>  // b.any
	uint8_t device_flag = device_info_list[device_list_index].flag;
    96011fb0:	b94022a1 	ldr	w1, [x21, #32]
    96011fb4:	b0000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96011fb8:	91249063 	add	x3, x3, #0x924
    96011fbc:	d28004e4 	mov	x4, #0x27                  	// #39
    96011fc0:	9b040c21 	madd	x1, x1, x4, x3
	if ((hqfdi->plat_params.max_bus_width != QSPI_BUS_WIDTH_X4) ||
    96011fc4:	39409823 	ldrb	w3, [x1, #38]
    96011fc8:	370800e3 	tbnz	w3, #1, 96011fe4 <qspi_qpi_flag_set+0x58>
		chip_info->qpi_bus_width = (uint32_t) QSPI_BUS_WIDTH_X1;
    96011fcc:	b9002abf 	str	wzr, [x21, #40]
	return TEGRABL_NO_ERROR;
    96011fd0:	52800000 	mov	w0, #0x0                   	// #0
}
    96011fd4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96011fd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96011fdc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96011fe0:	d65f03c0 	ret
	if (bqpiset == bset) {
    96011fe4:	b00002f4 	adrp	x20, 9606e000 <__bss_start>
    96011fe8:	aa0003f6 	mov	x22, x0
    96011fec:	3967c282 	ldrb	w2, [x20, #2544]
    96011ff0:	6b13005f 	cmp	w2, w19
    96011ff4:	540001c0 	b.eq	9601202c <qspi_qpi_flag_set+0xa0>  // b.none
	switch (device_info_list[device_list_index].manufacture_id) {
    96011ff8:	39408021 	ldrb	w1, [x1, #32]
    96011ffc:	7100803f 	cmp	w1, #0x20
    96012000:	54000100 	b.eq	96012020 <qspi_qpi_flag_set+0x94>  // b.none
    96012004:	7103083f 	cmp	w1, #0xc2
    96012008:	540002c0 	b.eq	96012060 <qspi_qpi_flag_set+0xd4>  // b.none
    9601200c:	7100043f 	cmp	w1, #0x1
    96012010:	540000e1 	b.ne	9601202c <qspi_qpi_flag_set+0xa0>  // b.any
		err = qspi_flash_qpi_mode_enable_spansion(hqfdi, bset);
    96012014:	2a1303e1 	mov	w1, w19
    96012018:	940002f0 	bl	96012bd8 <qspi_flash_qpi_mode_enable_spansion>
		break;
    9601201c:	14000003 	b	96012028 <qspi_qpi_flag_set+0x9c>
		err = qspi_flash_qpi_mode_enable_micron(hqfdi, bset);
    96012020:	2a1303e1 	mov	w1, w19
    96012024:	940002be 	bl	96012b1c <qspi_flash_qpi_mode_enable_micron>
	if (err != TEGRABL_NO_ERROR) {
    96012028:	35fffd60 	cbnz	w0, 96011fd4 <qspi_qpi_flag_set+0x48>
		chip_info->qpi_bus_width = QSPI_BUS_WIDTH_X4;
    9601202c:	7100027f 	cmp	w19, #0x0
    96012030:	52800041 	mov	w1, #0x2                   	// #2
	if (bqpiset != bset) {
    96012034:	3967c280 	ldrb	w0, [x20, #2544]
		chip_info->qpi_bus_width = QSPI_BUS_WIDTH_X4;
    96012038:	1a9f1021 	csel	w1, w1, wzr, ne  // ne = any
    9601203c:	b9002aa1 	str	w1, [x21, #40]
	if (bqpiset != bset) {
    96012040:	6b13001f 	cmp	w0, w19
    96012044:	54fffc60 	b.eq	96011fd0 <qspi_qpi_flag_set+0x44>  // b.none
		bqpiset = bset;
    96012048:	3927c293 	strb	w19, [x20, #2544]
		qspi_writein_progress(hqfdi, QSPI_FLASH_WIP_WAIT_FOR_READY,
    9601204c:	52800002 	mov	w2, #0x0                   	// #0
    96012050:	52800001 	mov	w1, #0x0                   	// #0
    96012054:	aa1603e0 	mov	x0, x22
    96012058:	97ffffa5 	bl	96011eec <qspi_writein_progress>
    9601205c:	17ffffdd 	b	96011fd0 <qspi_qpi_flag_set+0x44>
		err = qspi_flash_qpi_mode_enable_macronix(hqfdi, bset);
    96012060:	2a1303e1 	mov	w1, w19
    96012064:	9400040b 	bl	96013090 <qspi_flash_qpi_mode_enable_macronix>
		break;
    96012068:	17fffff0 	b	96012028 <qspi_qpi_flag_set+0x9c>

000000009601206c <qspi_write_en>:
{
    9601206c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	memset(transfers, 0, sizeof(struct tegrabl_qspi_transfer));
    96012070:	d2800902 	mov	x2, #0x48                  	// #72
{
    96012074:	910003fd 	mov	x29, sp
    96012078:	a90153f3 	stp	x19, x20, [sp, #16]
	transfers = hqfdi->transfers;
    9601207c:	f9403413 	ldr	x19, [x0, #104]
{
    96012080:	a9025bf5 	stp	x21, x22, [sp, #32]
    96012084:	aa0003f6 	mov	x22, x0
    96012088:	a90363f7 	stp	x23, x24, [sp, #48]
	memset(transfers, 0, sizeof(struct tegrabl_qspi_transfer));
    9601208c:	aa1303e0 	mov	x0, x19
{
    96012090:	a9046bf9 	stp	x25, x26, [sp, #64]
    96012094:	12001c37 	and	w23, w1, #0xff
    96012098:	a90573fb 	stp	x27, x28, [sp, #80]
	memset(transfers, 0, sizeof(struct tegrabl_qspi_transfer));
    9601209c:	52800001 	mov	w1, #0x0                   	// #0
    960120a0:	94005f62 	bl	96029e28 <memset>
	} while ((reg_val & QSPI_FLASH_WEL_ENABLE) != comp);
    960120a4:	52800055 	mov	w21, #0x2                   	// #2
    960120a8:	710002ff 	cmp	w23, #0x0
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960120ac:	5289681c 	mov	w28, #0x4b40                	// #19264
	} while ((reg_val & QSPI_FLASH_WEL_ENABLE) != comp);
    960120b0:	1a9f12b5 	csel	w21, w21, wzr, ne  // ne = any
		transfers[0].tx_buf = &command;
    960120b4:	9101bbbb 	add	x27, x29, #0x6e
	} while ((reg_val & QSPI_FLASH_WEL_ENABLE) != comp);
    960120b8:	5280fa18 	mov	w24, #0x7d0                 	// #2000
			command = QSPI_FLASH_CMD_WREN;
    960120bc:	5280009a 	mov	w26, #0x4                   	// #4
	} while ((reg_val & QSPI_FLASH_WEL_ENABLE) != comp);
    960120c0:	2a1503f5 	mov	w21, w21
			command = QSPI_FLASH_CMD_WREN;
    960120c4:	528000d9 	mov	w25, #0x6                   	// #6
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960120c8:	72a0099c 	movk	w28, #0x4c, lsl #16
			command = QSPI_FLASH_CMD_WREN;
    960120cc:	710002ff 	cmp	w23, #0x0
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    960120d0:	d2800022 	mov	x2, #0x1                   	// #1
    960120d4:	f8014262 	stur	x2, [x19, #20]
			command = QSPI_FLASH_CMD_WREN;
    960120d8:	1a9a1320 	csel	w0, w25, w26, ne  // ne = any
    960120dc:	3901bba0 	strb	w0, [x29, #110]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960120e0:	2a1c03e3 	mov	w3, w28
		transfers[0].bus_width = chip_info->qpi_bus_width;
    960120e4:	b94056c0 	ldr	w0, [x22, #84]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960120e8:	aa1303e1 	mov	x1, x19
		transfers[0].bus_width = chip_info->qpi_bus_width;
    960120ec:	b9002260 	str	w0, [x19, #32]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960120f0:	f94032c0 	ldr	x0, [x22, #96]
		transfers[0].rx_buf = NULL;
    960120f4:	a9007e7b 	stp	x27, xzr, [x19]
		transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    960120f8:	7900227f 	strh	wzr, [x19, #16]
		transfers[0].dummy_cycles = ZERO_CYCLES;
    960120fc:	f802427f 	stur	xzr, [x19, #36]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    96012100:	97fffb7e 	bl	96010ef8 <tegrabl_qspi_transaction>
    96012104:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96012108:	34000180 	cbz	w0, 96012138 <qspi_write_en+0xcc>
			pr_error("QSPI-WriteEN: WEN %s fail (err:0x%x)\n",
    9601210c:	710002ff 	cmp	w23, #0x0
    96012110:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012114:	f0000141 	adrp	x1, 9603d000 <__func__.3609+0x209>
    96012118:	91301400 	add	x0, x0, #0xc05
    9601211c:	91135021 	add	x1, x1, #0x4d4
    96012120:	2a1403e2 	mov	w2, w20
    96012124:	9a801021 	csel	x1, x1, x0, ne  // ne = any
    96012128:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9601212c:	9130c800 	add	x0, x0, #0xc32
    96012130:	94004150 	bl	96022670 <tegrabl_printf>
			return err;
    96012134:	1400001f 	b	960121b0 <qspi_write_en+0x144>
		tegrabl_udelay(QSPI_FLASH_WRITE_ENABLE_WAIT_TIME);
    96012138:	d2807d00 	mov	x0, #0x3e8                 	// #1000
    9601213c:	940036da 	bl	9601fca4 <tegrabl_udelay>
		err = qspi_read_reg(hqfdi, QSPI_FLASH_CMD_RDSR1, &reg_val);
    96012140:	9101bfa2 	add	x2, x29, #0x6f
    96012144:	528000a1 	mov	w1, #0x5                   	// #5
    96012148:	aa1603e0 	mov	x0, x22
    9601214c:	97ffff19 	bl	96011db0 <qspi_read_reg>
    96012150:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    96012154:	340000c0 	cbz	w0, 9601216c <qspi_write_en+0x100>
			pr_error("QSPI-WriteEN: read RDSR1 cmd fail (err:0x%x)\n", err);
    96012158:	2a0003e1 	mov	w1, w0
    9601215c:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012160:	91316c00 	add	x0, x0, #0xc5b
    96012164:	94004143 	bl	96022670 <tegrabl_printf>
			return err;
    96012168:	14000012 	b	960121b0 <qspi_write_en+0x144>
	} while ((reg_val & QSPI_FLASH_WEL_ENABLE) != comp);
    9601216c:	3941bfa0 	ldrb	w0, [x29, #111]
    96012170:	121f0000 	and	w0, w0, #0x2
    96012174:	eb2042bf 	cmp	x21, w0, uxtw
    96012178:	540001c0 	b.eq	960121b0 <qspi_write_en+0x144>  // b.none
		if (tried == QSPI_FLASH_WE_RETRY_COUNT) {
    9601217c:	71000718 	subs	w24, w24, #0x1
    96012180:	54fffa61 	b.ne	960120cc <qspi_write_en+0x60>  // b.any
			pr_error("QSPI-WriteEN: timeout for WEN %s\n",
    96012184:	710002ff 	cmp	w23, #0x0
			return TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_WEN_TIMEOUT);
    96012188:	528200d4 	mov	w20, #0x1006                	// #4102
    9601218c:	72a22234 	movk	w20, #0x1111, lsl #16
			pr_error("QSPI-WriteEN: timeout for WEN %s\n",
    96012190:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012194:	f0000141 	adrp	x1, 9603d000 <__func__.3609+0x209>
    96012198:	91301400 	add	x0, x0, #0xc05
    9601219c:	91135021 	add	x1, x1, #0x4d4
    960121a0:	9a801021 	csel	x1, x1, x0, ne  // ne = any
    960121a4:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960121a8:	91303400 	add	x0, x0, #0xc0d
    960121ac:	94004131 	bl	96022670 <tegrabl_printf>
}
    960121b0:	2a1403e0 	mov	w0, w20
    960121b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960121b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960121bc:	a94363f7 	ldp	x23, x24, [sp, #48]
    960121c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960121c4:	a94573fb 	ldp	x27, x28, [sp, #80]
    960121c8:	a8c77bfd 	ldp	x29, x30, [sp], #112
    960121cc:	d65f03c0 	ret

00000000960121d0 <qspi_bdev_write_block>:
{
    960121d0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    960121d4:	910003fd 	mov	x29, sp
    960121d8:	a90153f3 	stp	x19, x20, [sp, #16]
    960121dc:	a9025bf5 	stp	x21, x22, [sp, #32]
    960121e0:	a90363f7 	stp	x23, x24, [sp, #48]
    960121e4:	a9046bf9 	stp	x25, x26, [sp, #64]
    960121e8:	f9002bfb 	str	x27, [sp, #80]
	if ((dev == NULL) || (dev->priv_data == NULL) || (buf == NULL)) {
    960121ec:	b4000fa0 	cbz	x0, 960123e0 <qspi_bdev_write_block+0x210>
    960121f0:	f9401816 	ldr	x22, [x0, #48]
    960121f4:	b4000f76 	cbz	x22, 960123e0 <qspi_bdev_write_block+0x210>
    960121f8:	aa0103f9 	mov	x25, x1
    960121fc:	b4000f21 	cbz	x1, 960123e0 <qspi_bdev_write_block+0x210>
	transfers = hqfdi->transfers;
    96012200:	f94036d4 	ldr	x20, [x22, #104]
	if (chip_info->address_length == 4UL) {
    96012204:	9100b2d8 	add	x24, x22, #0x2c
	memset(transfers, 0, 2U*(sizeof(struct tegrabl_qspi_transfer)));
    96012208:	52800001 	mov	w1, #0x0                   	// #0
    9601220c:	2a0203f7 	mov	w23, w2
    96012210:	2a0303f5 	mov	w21, w3
    96012214:	d2801202 	mov	x2, #0x90                  	// #144
    96012218:	aa1403e0 	mov	x0, x20
    9601221c:	94005f03 	bl	96029e28 <memset>
	if (chip_info->address_length == 4UL) {
    96012220:	b9401f00 	ldr	w0, [x24, #28]
		cmd_address_info[0] = QSPI_FLASH_CMD_4PAGE_PROGRAM;
    96012224:	52800041 	mov	w1, #0x2                   	// #2
    96012228:	7100101f 	cmp	w0, #0x4
    9601222c:	52800240 	mov	w0, #0x12                  	// #18
    96012230:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    96012234:	3901a3a0 	strb	w0, [x29, #104]
	if (num_of_pages == 0UL) {
    96012238:	34000cb5 	cbz	w21, 960123cc <qspi_bdev_write_block+0x1fc>
	err = qspi_qpi_flag_set(hqfdi, true);
    9601223c:	52800021 	mov	w1, #0x1                   	// #1
    96012240:	aa1603e0 	mov	x0, x22
    96012244:	97ffff52 	bl	96011f8c <qspi_qpi_flag_set>
    96012248:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601224c:	340001c0 	cbz	w0, 96012284 <qspi_bdev_write_block+0xb4>
		pr_error("QPI setup failed err(:0x%x)\n", err);
    96012250:	2a0003e1 	mov	w1, w0
    96012254:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012258:	912db800 	add	x0, x0, #0xb6e
		chip_info->qpi_bus_width = QSPI_BUS_WIDTH_X1;
    9601225c:	b9002b1f 	str	wzr, [x24, #40]
		pr_error("QPI disable failed err(:0x%x)\n", err);
    96012260:	94004104 	bl	96022670 <tegrabl_printf>
}
    96012264:	2a1303e0 	mov	w0, w19
    96012268:	f9402bfb 	ldr	x27, [sp, #80]
    9601226c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96012270:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96012274:	a94363f7 	ldp	x23, x24, [sp, #48]
    96012278:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601227c:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96012280:	d65f03c0 	ret
	address = start_page_num << chip_info->block_size_log2;
    96012284:	b9400700 	ldr	w0, [x24, #4]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012288:	5289681b 	mov	w27, #0x4b40                	// #19264
		transfers[0].tx_buf = cmd_address_info;
    9601228c:	9101a3ba 	add	x26, x29, #0x68
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012290:	72a0099b 	movk	w27, #0x4c, lsl #16
	address = start_page_num << chip_info->block_size_log2;
    96012294:	1ac022f7 	lsl	w23, w23, w0
	bytes_to_write = num_of_pages << chip_info->block_size_log2;
    96012298:	1ac022b5 	lsl	w21, w21, w0
	while (bytes_to_write != 0UL) {
    9601229c:	34000655 	cbz	w21, 96012364 <qspi_bdev_write_block+0x194>
		err = qspi_write_en(hqfdi, true);
    960122a0:	52800021 	mov	w1, #0x1                   	// #1
    960122a4:	aa1603e0 	mov	x0, x22
    960122a8:	97ffff71 	bl	9601206c <qspi_write_en>
    960122ac:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    960122b0:	35fffda0 	cbnz	w0, 96012264 <qspi_bdev_write_block+0x94>
		if (chip_info->address_length == 4UL) {
    960122b4:	b9401f03 	ldr	w3, [x24, #28]
    960122b8:	d3505ee2 	ubfx	x2, x23, #16, #8
    960122bc:	d3483ee1 	ubfx	x1, x23, #8, #8
    960122c0:	12001ee0 	and	w0, w23, #0xff
    960122c4:	7100107f 	cmp	w3, #0x4
    960122c8:	54000601 	b.ne	96012388 <qspi_bdev_write_block+0x1b8>  // b.any
			cmd_address_info[1] = (uint8_t)(uint32_t)((address >> 24) & 0xFFU);
    960122cc:	53187ee3 	lsr	w3, w23, #24
    960122d0:	3901a7a3 	strb	w3, [x29, #105]
			cmd_address_info[2] = (uint8_t)(uint32_t)((address >> 16) & 0xFFU);
    960122d4:	3901aba2 	strb	w2, [x29, #106]
			cmd_address_info[3] = (uint8_t)(uint32_t)((address >> 8) & 0xFFU);
    960122d8:	3901afa1 	strb	w1, [x29, #107]
			cmd_address_info[4] = (uint8_t)(uint32_t)((address) & 0xFFU);
    960122dc:	3901b3a0 	strb	w0, [x29, #108]
		if (((uintptr_t)p_source & 0x3U) != 0U) {
    960122e0:	f240073f 	tst	x25, #0x3
    960122e4:	540007a1 	b.ne	960123d8 <qspi_bdev_write_block+0x208>  // b.any
		transfers[0].write_len = chip_info->address_length + 1UL;
    960122e8:	b9401f00 	ldr	w0, [x24, #28]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960122ec:	2a1b03e3 	mov	w3, w27
		transfers[0].bus_width = chip_info->qpi_bus_width;
    960122f0:	b9402b02 	ldr	w2, [x24, #40]
		transfers[0].dummy_cycles = ZERO_CYCLES;
    960122f4:	f802429f 	stur	xzr, [x20, #36]
		transfers[0].write_len = chip_info->address_length + 1UL;
    960122f8:	11000400 	add	w0, w0, #0x1
		transfers[0].read_len = 0;
    960122fc:	2902fe80 	stp	w0, wzr, [x20, #20]
			MIN(bytes_to_write, chip_info->page_write_size);
    96012300:	b9402701 	ldr	w1, [x24, #36]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012304:	f94032c0 	ldr	x0, [x22, #96]
			MIN(bytes_to_write, chip_info->page_write_size);
    96012308:	6b15003f 	cmp	w1, w21
		transfers[0].rx_buf = NULL;
    9601230c:	a9007e9a 	stp	x26, xzr, [x20]
			MIN(bytes_to_write, chip_info->page_write_size);
    96012310:	1a959021 	csel	w1, w1, w21, ls  // ls = plast
		transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    96012314:	7900229f 	strh	wzr, [x20, #16]
		transfers[0].bus_width = chip_info->qpi_bus_width;
    96012318:	b9002282 	str	w2, [x20, #32]
		transfers[1].rx_buf = NULL;
    9601231c:	a904fe99 	stp	x25, xzr, [x20, #72]
		transfers[1].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
    96012320:	7900b29f 	strh	wzr, [x20, #88]
		transfers[1].read_len = 0;
    96012324:	290bfe81 	stp	w1, wzr, [x20, #92]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012328:	aa1403e1 	mov	x1, x20
		transfers[1].bus_width = chip_info->qpi_bus_width;
    9601232c:	b9006a82 	str	w2, [x20, #104]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012330:	52800042 	mov	w2, #0x2                   	// #2
		transfers[1].dummy_cycles = ZERO_CYCLES;
    96012334:	f806c29f 	stur	xzr, [x20, #108]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012338:	97fffaf0 	bl	96010ef8 <tegrabl_qspi_transaction>
		if (err != TEGRABL_NO_ERROR) {
    9601233c:	340002e0 	cbz	w0, 96012398 <qspi_bdev_write_block+0x1c8>
			pr_error("QSPI Flash Write failed: x%x\n", err);
    96012340:	2a0003e1 	mov	w1, w0
    96012344:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012348:	912e3800 	add	x0, x0, #0xb8e
    9601234c:	940040c9 	bl	96022670 <tegrabl_printf>
			err = qspi_write_en(hqfdi, false);
    96012350:	52800001 	mov	w1, #0x0                   	// #0
    96012354:	aa1603e0 	mov	x0, x22
    96012358:	97ffff45 	bl	9601206c <qspi_write_en>
    9601235c:	2a0003f3 	mov	w19, w0
			if (err != TEGRABL_NO_ERROR) {
    96012360:	35fff820 	cbnz	w0, 96012264 <qspi_bdev_write_block+0x94>
	err = qspi_qpi_flag_set(hqfdi, false);
    96012364:	52800001 	mov	w1, #0x0                   	// #0
    96012368:	aa1603e0 	mov	x0, x22
    9601236c:	97ffff08 	bl	96011f8c <qspi_qpi_flag_set>
    96012370:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96012374:	34fff780 	cbz	w0, 96012264 <qspi_bdev_write_block+0x94>
		pr_error("QPI disable failed err(:0x%x)\n", err);
    96012378:	2a0003e1 	mov	w1, w0
    9601237c:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012380:	912ebc00 	add	x0, x0, #0xbaf
    96012384:	17ffffb7 	b	96012260 <qspi_bdev_write_block+0x90>
			cmd_address_info[1] = (uint8_t)(uint32_t)((address >> 16) & 0xFFU);
    96012388:	3901a7a2 	strb	w2, [x29, #105]
			cmd_address_info[2] = (uint8_t)(uint32_t)((address >> 8) & 0xFFU);
    9601238c:	3901aba1 	strb	w1, [x29, #106]
			cmd_address_info[3] = (uint8_t)(uint32_t)((address) & 0xFFU);
    96012390:	3901afa0 	strb	w0, [x29, #107]
    96012394:	17ffffd3 	b	960122e0 <qspi_bdev_write_block+0x110>
		if (bytes_to_write > chip_info->page_write_size) {
    96012398:	b9402700 	ldr	w0, [x24, #36]
    9601239c:	6b0002bf 	cmp	w21, w0
    960123a0:	54000129 	b.ls	960123c4 <qspi_bdev_write_block+0x1f4>  // b.plast
			bytes_to_write -= chip_info->page_write_size;
    960123a4:	4b0002b5 	sub	w21, w21, w0
			address += chip_info->page_write_size;
    960123a8:	0b0002f7 	add	w23, w23, w0
			p_source += chip_info->page_write_size;
    960123ac:	8b204339 	add	x25, x25, w0, uxtw
		qspi_writein_progress(hqfdi, QSPI_FLASH_WIP_WAIT_FOR_READY,
    960123b0:	52800002 	mov	w2, #0x0                   	// #0
    960123b4:	52800001 	mov	w1, #0x0                   	// #0
    960123b8:	aa1603e0 	mov	x0, x22
    960123bc:	97fffecc 	bl	96011eec <qspi_writein_progress>
    960123c0:	17ffffb7 	b	9601229c <qspi_bdev_write_block+0xcc>
			bytes_to_write = 0;
    960123c4:	52800015 	mov	w21, #0x0                   	// #0
    960123c8:	17fffffa 	b	960123b0 <qspi_bdev_write_block+0x1e0>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_PARAMS7);
    960123cc:	5280e053 	mov	w19, #0x702                 	// #1794
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    960123d0:	72a22233 	movk	w19, #0x1111, lsl #16
    960123d4:	17ffffa4 	b	96012264 <qspi_bdev_write_block+0x94>
			return TEGRABL_ERROR(TEGRABL_ERR_BAD_ADDRESS, AUX_INFO_NOT_ALIGNED);
    960123d8:	52824133 	mov	w19, #0x1209                	// #4617
    960123dc:	17fffffd 	b	960123d0 <qspi_bdev_write_block+0x200>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    960123e0:	52806053 	mov	w19, #0x302                 	// #770
    960123e4:	17fffffb 	b	960123d0 <qspi_bdev_write_block+0x200>

00000000960123e8 <qspi_write_reg>:
{
    960123e8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960123ec:	910003fd 	mov	x29, sp
    960123f0:	a90153f3 	stp	x19, x20, [sp, #16]
    960123f4:	2a0103f4 	mov	w20, w1
    960123f8:	a9025bf5 	stp	x21, x22, [sp, #32]
	err = qspi_write_en(hqfdi, true);
    960123fc:	52800021 	mov	w1, #0x1                   	// #1
	transfers = hqfdi->transfers;
    96012400:	f9403413 	ldr	x19, [x0, #104]
{
    96012404:	aa0003f6 	mov	x22, x0
    96012408:	f9001bf7 	str	x23, [sp, #48]
    9601240c:	aa0203f7 	mov	x23, x2
	err = qspi_write_en(hqfdi, true);
    96012410:	97ffff17 	bl	9601206c <qspi_write_en>
	if (err == TEGRABL_NO_ERROR) {
    96012414:	35000760 	cbnz	w0, 96012500 <qspi_write_reg+0x118>
		memset(transfers, 0, QSPI_TRANSFERS*(sizeof(struct tegrabl_qspi_transfer)));
    96012418:	d2801b02 	mov	x2, #0xd8                  	// #216
    9601241c:	52800001 	mov	w1, #0x0                   	// #0
    96012420:	aa1303e0 	mov	x0, x19
    96012424:	94005e81 	bl	96029e28 <memset>
		cmd_addr_buf[0] = (uint8_t) ((reg_access_cmd >> 16) & (uint32_t) 0xFF);
    96012428:	53107e80 	lsr	w0, w20, #16
    9601242c:	390123a0 	strb	w0, [x29, #72]
		cmd_addr_buf[1] = (uint8_t) ((reg_access_cmd >> 8) & (uint32_t) 0xFF);
    96012430:	53087e80 	lsr	w0, w20, #8
    96012434:	390127a0 	strb	w0, [x29, #73]
		command = QSPI_FLASH_CMD_WRAR;
    96012438:	910143a0 	add	x0, x29, #0x50
    9601243c:	52800e21 	mov	w1, #0x71                  	// #113
	is_ext_reg_access_cmd = ((reg_access_cmd & (uint32_t) 0xFFFF00) == 0U) ?
    96012440:	12183e95 	and	w21, w20, #0xffff00
		cmd_addr_buf[2] = (uint8_t) reg_access_cmd;
    96012444:	12001e94 	and	w20, w20, #0xff
    96012448:	39012bb4 	strb	w20, [x29, #74]
    9601244c:	9100b2c2 	add	x2, x22, #0x2c
		command = QSPI_FLASH_CMD_WRAR;
    96012450:	381f7c01 	strb	w1, [x0, #-9]!
    96012454:	91012261 	add	x1, x19, #0x48
		if (is_ext_reg_access_cmd) {
    96012458:	34000495 	cbz	w21, 960124e8 <qspi_write_reg+0x100>
			transfers[0].bus_width = chip_info->qpi_bus_width;
    9601245c:	b9402843 	ldr	w3, [x2, #40]
			transfers[0].tx_buf = &command;
    96012460:	f9000260 	str	x0, [x19]
			transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96012464:	52800020 	mov	w0, #0x1                   	// #1
    96012468:	b9001660 	str	w0, [x19, #20]
			transfers[1].tx_buf = cmd_addr_buf;
    9601246c:	910123a0 	add	x0, x29, #0x48
			transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    96012470:	7900227f 	strh	wzr, [x19, #16]
			transfers[0].bus_width = chip_info->qpi_bus_width;
    96012474:	b9002263 	str	w3, [x19, #32]
			transfers[0].dummy_cycles = ZERO_CYCLES;
    96012478:	f802427f 	stur	xzr, [x19, #36]
			transfers[1].tx_buf = cmd_addr_buf;
    9601247c:	f9002660 	str	x0, [x19, #72]
			transfers[1].write_len = 3;
    96012480:	52800060 	mov	w0, #0x3                   	// #3
		transfers[1].bus_width = chip_info->qpi_bus_width;
    96012484:	b9402842 	ldr	w2, [x2, #40]
		transfers[2].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96012488:	52800023 	mov	w3, #0x1                   	// #1
		transfers[1].mode = QSPI_FLASH_CMD_MODE_VAL;
    9601248c:	7900203f 	strh	wzr, [x1, #16]
			transfers[1].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96012490:	b9001420 	str	w0, [x1, #20]
		transfers[1].bus_width = chip_info->qpi_bus_width;
    96012494:	b9002022 	str	w2, [x1, #32]
    96012498:	f94032c0 	ldr	x0, [x22, #96]
		transfers[1].dummy_cycles = ZERO_CYCLES;
    9601249c:	f806c27f 	stur	xzr, [x19, #108]
		transfers[2].tx_buf = p_reg_val;
    960124a0:	f9004a77 	str	x23, [x19, #144]
		transfers[2].mode = QSPI_FLASH_CMD_MODE_VAL;
    960124a4:	7901427f 	strh	wzr, [x19, #160]
		transfers[2].write_len = QSPI_FLASH_COMMAND_WIDTH;
    960124a8:	b900a663 	str	w3, [x19, #164]
			err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    960124ac:	52896803 	mov	w3, #0x4b40                	// #19264
		transfers[2].bus_width = chip_info->qpi_bus_width;
    960124b0:	b900b262 	str	w2, [x19, #176]
			err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    960124b4:	72a00983 	movk	w3, #0x4c, lsl #16
		transfers[2].dummy_cycles = ZERO_CYCLES;
    960124b8:	f80b427f 	stur	xzr, [x19, #180]
		if (is_ext_reg_access_cmd) {
    960124bc:	340001f5 	cbz	w21, 960124f8 <qspi_write_reg+0x110>
			err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    960124c0:	aa1303e1 	mov	x1, x19
    960124c4:	52800062 	mov	w2, #0x3                   	// #3
			err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[1], 2,
    960124c8:	97fffa8c 	bl	96010ef8 <tegrabl_qspi_transaction>
    960124cc:	2a0003f5 	mov	w21, w0
}
    960124d0:	2a1503e0 	mov	w0, w21
    960124d4:	f9401bf7 	ldr	x23, [sp, #48]
    960124d8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960124dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960124e0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960124e4:	d65f03c0 	ret
			transfers[1].tx_buf = &command;
    960124e8:	f9002660 	str	x0, [x19, #72]
			transfers[1].write_len = QSPI_FLASH_COMMAND_WIDTH;
    960124ec:	52800020 	mov	w0, #0x1                   	// #1
			command = (uint8_t) reg_access_cmd;
    960124f0:	39011fb4 	strb	w20, [x29, #71]
    960124f4:	17ffffe4 	b	96012484 <qspi_write_reg+0x9c>
			err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[1], 2,
    960124f8:	52800042 	mov	w2, #0x2                   	// #2
    960124fc:	17fffff3 	b	960124c8 <qspi_write_reg+0xe0>
    96012500:	2a0003f5 	mov	w21, w0
		pr_error("Qspi write: register (0x%x) write fail (err:0x%x)\n",
    96012504:	2a0003e2 	mov	w2, w0
    96012508:	2a1403e1 	mov	w1, w20
    9601250c:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012510:	91323000 	add	x0, x0, #0xc8c
    96012514:	94004057 	bl	96022670 <tegrabl_printf>
	return err;
    96012518:	17ffffee 	b	960124d0 <qspi_write_reg+0xe8>

000000009601251c <qspi_bdev_erase>:
{
    9601251c:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
	if ((dev == NULL) || (count == 0U) || (dev->priv_data == NULL)) {
    96012520:	f100001f 	cmp	x0, #0x0
    96012524:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
{
    96012528:	910003fd 	mov	x29, sp
    9601252c:	a90153f3 	stp	x19, x20, [sp, #16]
    96012530:	a9025bf5 	stp	x21, x22, [sp, #32]
    96012534:	a90363f7 	stp	x23, x24, [sp, #48]
    96012538:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601253c:	a90573fb 	stp	x27, x28, [sp, #80]
	if ((dev == NULL) || (count == 0U) || (dev->priv_data == NULL)) {
    96012540:	54002dc0 	b.eq	96012af8 <qspi_bdev_erase+0x5dc>  // b.none
    96012544:	f9401813 	ldr	x19, [x0, #48]
    96012548:	b4002d93 	cbz	x19, 96012af8 <qspi_bdev_erase+0x5dc>
    9601254c:	9100b276 	add	x22, x19, #0x2c
    96012550:	f90037a0 	str	x0, [x29, #104]
    96012554:	b9400ac5 	ldr	w5, [x22, #8]
	if ((block == 0UL) && (count == chip_info->block_count) &&
    96012558:	35000741 	cbnz	w1, 96012640 <qspi_bdev_erase+0x124>
    9601255c:	6b05005f 	cmp	w2, w5
    96012560:	54000701 	b.ne	96012640 <qspi_bdev_erase+0x124>  // b.any
	device_info_flag = device_info_list[chip_info->device_list_index].flag;
    96012564:	b94022c0 	ldr	w0, [x22, #32]
    96012568:	90000163 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    9601256c:	91249063 	add	x3, x3, #0x924
    96012570:	d28004e4 	mov	x4, #0x27                  	// #39
    96012574:	9b040c00 	madd	x0, x0, x4, x3
	if ((block == 0UL) && (count == chip_info->block_count) &&
    96012578:	39409800 	ldrb	w0, [x0, #38]
    9601257c:	36180620 	tbz	w0, #3, 96012640 <qspi_bdev_erase+0x124>
		pr_info("QSPI: Erasing entire device\n");
    96012580:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012584:	91279c00 	add	x0, x0, #0x9e7
    96012588:	9400403a 	bl	96022670 <tegrabl_printf>
	uint8_t *cmd = hqfdi->cmd;
    9601258c:	f9403e75 	ldr	x21, [x19, #120]
	err = qspi_write_en(hqfdi, true);
    96012590:	52800021 	mov	w1, #0x1                   	// #1
    96012594:	aa1303e0 	mov	x0, x19
    96012598:	97fffeb5 	bl	9601206c <qspi_write_en>
    9601259c:	2a0003fa 	mov	w26, w0
	if (err == TEGRABL_NO_ERROR) {
    960125a0:	35000380 	cbnz	w0, 96012610 <qspi_bdev_erase+0xf4>
		transfers = hqfdi->transfers;
    960125a4:	f9403674 	ldr	x20, [x19, #104]
		memset(transfers, 0, sizeof(struct tegrabl_qspi_transfer));
    960125a8:	d2800902 	mov	x2, #0x48                  	// #72
    960125ac:	52800001 	mov	w1, #0x0                   	// #0
    960125b0:	aa1403e0 	mov	x0, x20
    960125b4:	94005e1d 	bl	96029e28 <memset>
		*cmd = QSPI_FLASH_CMD_BULK_ERASE;
    960125b8:	12800700 	mov	w0, #0xffffffc7            	// #-57
    960125bc:	390002a0 	strb	w0, [x21]
		transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    960125c0:	7900229f 	strh	wzr, [x20, #16]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960125c4:	52896803 	mov	w3, #0x4b40                	// #19264
    960125c8:	f9403260 	ldr	x0, [x19, #96]
    960125cc:	72a00983 	movk	w3, #0x4c, lsl #16
		transfers[0].tx_buf = cmd;
    960125d0:	f9000295 	str	x21, [x20]
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    960125d4:	52800035 	mov	w21, #0x1                   	// #1
    960125d8:	b9001695 	str	w21, [x20, #20]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960125dc:	aa1403e1 	mov	x1, x20
		transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
    960125e0:	f900129f 	str	xzr, [x20, #32]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960125e4:	2a1503e2 	mov	w2, w21
		transfers[0].dummy_cycles = ZERO_CYCLES;
    960125e8:	b9002a9f 	str	wzr, [x20, #40]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 1,
    960125ec:	97fffa43 	bl	96010ef8 <tegrabl_qspi_transaction>
    960125f0:	2a0003fa 	mov	w26, w0
		if (err == TEGRABL_NO_ERROR) {
    960125f4:	350000e0 	cbnz	w0, 96012610 <qspi_bdev_erase+0xf4>
			err = qspi_writein_progress(hqfdi,
    960125f8:	2a1503e2 	mov	w2, w21
    960125fc:	52800001 	mov	w1, #0x0                   	// #0
    96012600:	aa1303e0 	mov	x0, x19
    96012604:	97fffe3a 	bl	96011eec <qspi_writein_progress>
    96012608:	2a0003fa 	mov	w26, w0
	if (err != TEGRABL_NO_ERROR) {
    9601260c:	340000a0 	cbz	w0, 96012620 <qspi_bdev_erase+0x104>
		pr_error("Qspi bulk erase: Bulk erase fail (err:0x%x)\n", err);
    96012610:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012614:	2a1a03e1 	mov	w1, w26
    96012618:	91281c00 	add	x0, x0, #0xa07
    9601261c:	94004015 	bl	96022670 <tegrabl_printf>
}
    96012620:	2a1a03e0 	mov	w0, w26
    96012624:	a94153f3 	ldp	x19, x20, [sp, #16]
    96012628:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601262c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96012630:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96012634:	a94573fb 	ldp	x27, x28, [sp, #80]
    96012638:	a8c97bfd 	ldp	x29, x30, [sp], #144
    9601263c:	d65f03c0 	ret
	sector_num = block_num_to_sector_num(block);
    96012640:	b94006c4 	ldr	w4, [x22, #4]
	if (count != chip_info->block_count) {
    96012644:	6b05005f 	cmp	w2, w5
	sector_num = block_num_to_sector_num(block);
    96012648:	b9400ec3 	ldr	w3, [x22, #12]
    9601264c:	1ac42035 	lsl	w21, w1, w4
    96012650:	1ac326b5 	lsr	w21, w21, w3
	if (count != chip_info->block_count) {
    96012654:	54000761 	b.ne	96012740 <qspi_bdev_erase+0x224>  // b.any
	sector_cnt = block_cnt_to_sector_cnt(count);
    96012658:	d2800020 	mov	x0, #0x1                   	// #1
    9601265c:	1ac42042 	lsl	w2, w2, w4
    96012660:	9ac32000 	lsl	x0, x0, x3
    96012664:	d1000400 	sub	x0, x0, #0x1
    96012668:	8b020002 	add	x2, x0, x2
	head_count = tail_count = 0;
    9601266c:	5280001b 	mov	w27, #0x0                   	// #0
	head_start = tail_start = 0;
    96012670:	52800014 	mov	w20, #0x0                   	// #0
	head_count = tail_count = 0;
    96012674:	52800017 	mov	w23, #0x0                   	// #0
	sector_cnt = block_cnt_to_sector_cnt(count);
    96012678:	9ac32440 	lsr	x0, x2, x3
	uint8_t *tail_backup = NULL;
    9601267c:	d2800019 	mov	x25, #0x0                   	// #0
	uint8_t *head_backup = NULL;
    96012680:	d2800018 	mov	x24, #0x0                   	// #0
	sector_cnt = block_cnt_to_sector_cnt(count);
    96012684:	f9003ba0 	str	x0, [x29, #112]
	head_start = tail_start = 0;
    96012688:	b9007fbf 	str	wzr, [x29, #124]
	if (sector_num == 0UL) {
    9601268c:	350002d5 	cbnz	w21, 960126e4 <qspi_bdev_erase+0x1c8>
    96012690:	f940367a 	ldr	x26, [x19, #104]
	memset(transfers, 0, 2U*(sizeof(struct tegrabl_qspi_transfer)));
    96012694:	52800001 	mov	w1, #0x0                   	// #0
    96012698:	f9403e60 	ldr	x0, [x19, #120]
    9601269c:	d2801202 	mov	x2, #0x90                  	// #144
    960126a0:	f90033a0 	str	x0, [x29, #96]
    960126a4:	aa1a03e0 	mov	x0, x26
    960126a8:	94005de0 	bl	96029e28 <memset>
	if (chip_info->address_length == 4UL) {
    960126ac:	b9401ec0 	ldr	w0, [x22, #28]
		*cmd = QSPI_FLASH_CMD_4PARA_SECTOR_ERASE;
    960126b0:	52800401 	mov	w1, #0x20                  	// #32
    960126b4:	7100101f 	cmp	w0, #0x4
    960126b8:	52800420 	mov	w0, #0x21                  	// #33
    960126bc:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    960126c0:	f94033a1 	ldr	x1, [x29, #96]
    960126c4:	39000020 	strb	w0, [x1]
	if ((num_of_parameter_sectors == 0UL) ||
    960126c8:	b9401ac0 	ldr	w0, [x22, #24]
    960126cc:	71001c1f 	cmp	w0, #0x7
    960126d0:	54000be8 	b.hi	9601284c <qspi_bdev_erase+0x330>  // b.pmore
		pr_error("Qspi param sector erase: Incorrect number of sectors: %u\n", num_of_parameter_sectors);
    960126d4:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960126d8:	52800101 	mov	w1, #0x8                   	// #8
    960126dc:	912af000 	add	x0, x0, #0xabc
    960126e0:	94003fe4 	bl	96022670 <tegrabl_printf>
	transfers = hqfdi->transfers;
    960126e4:	f940367c 	ldr	x28, [x19, #104]
	memset(transfers, 0, 2U*(sizeof(struct tegrabl_qspi_transfer)));
    960126e8:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t *cmd = hqfdi->cmd;
    960126ec:	f9403e60 	ldr	x0, [x19, #120]
	memset(transfers, 0, 2U*(sizeof(struct tegrabl_qspi_transfer)));
    960126f0:	d2801202 	mov	x2, #0x90                  	// #144
	uint8_t *cmd = hqfdi->cmd;
    960126f4:	f90033a0 	str	x0, [x29, #96]
	memset(transfers, 0, 2U*(sizeof(struct tegrabl_qspi_transfer)));
    960126f8:	aa1c03e0 	mov	x0, x28
    960126fc:	94005dcb 	bl	96029e28 <memset>
	if (chip_info->address_length == 4U) {
    96012700:	b9401ec0 	ldr	w0, [x22, #28]
		*cmd = QSPI_FLASH_CMD_4SECTOR_ERASE;
    96012704:	128004e1 	mov	w1, #0xffffffd8            	// #-40
    96012708:	7100101f 	cmp	w0, #0x4
    9601270c:	12800460 	mov	w0, #0xffffffdc            	// #-36
    96012710:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    96012714:	f94033a1 	ldr	x1, [x29, #96]
    96012718:	39000020 	strb	w0, [x1]
	if (num_of_sectors == 0UL) {
    9601271c:	b94073a0 	ldr	w0, [x29, #112]
    96012720:	350012c0 	cbnz	w0, 96012978 <qspi_bdev_erase+0x45c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_PARAMS5);
    96012724:	5280a05a 	mov	w26, #0x502                 	// #1282
    96012728:	72a2223a 	movk	w26, #0x1111, lsl #16
	if (head_backup != NULL) {
    9601272c:	b5001e18 	cbnz	x24, 96012aec <qspi_bdev_erase+0x5d0>
	if (tail_backup != NULL) {
    96012730:	b4fff799 	cbz	x25, 96012620 <qspi_bdev_erase+0x104>
		tegrabl_free(tail_backup);
    96012734:	aa1903e0 	mov	x0, x25
    96012738:	940050e0 	bl	96026ab8 <tegrabl_free>
    9601273c:	17ffffb9 	b	96012620 <qspi_bdev_erase+0x104>
		head_start = sector_num << PAGES_IN_SECTOR_LOG2;
    96012740:	4b040079 	sub	w25, w3, w4
		tail_start = block + count;
    96012744:	0b010054 	add	w20, w2, w1
		sector_cnt = tail_start + ((1UL << PAGES_IN_SECTOR_LOG2) - 1UL);
    96012748:	d2800038 	mov	x24, #0x1                   	// #1
    9601274c:	51000682 	sub	w2, w20, #0x1
		head_start = sector_num << PAGES_IN_SECTOR_LOG2;
    96012750:	1ad922a0 	lsl	w0, w21, w25
    96012754:	b9007fa0 	str	w0, [x29, #124]
		sector_cnt = tail_start + ((1UL << PAGES_IN_SECTOR_LOG2) - 1UL);
    96012758:	9ad92300 	lsl	x0, x24, x25
    9601275c:	0b000042 	add	w2, w2, w0
		head_count = block & ((1UL << PAGES_IN_SECTOR_LOG2) - 1UL);
    96012760:	92800017 	mov	x23, #0xffffffffffffffff    	// #-1
		sector_cnt = block_num_to_sector_num(sector_cnt);
    96012764:	1ac42042 	lsl	w2, w2, w4
    96012768:	1ac32442 	lsr	w2, w2, w3
		sector_cnt -= sector_num;
    9601276c:	4b150040 	sub	w0, w2, w21
		head_count = block & ((1UL << PAGES_IN_SECTOR_LOG2) - 1UL);
    96012770:	9ad922f7 	lsl	x23, x23, x25
		sector_cnt -= sector_num;
    96012774:	b90073a0 	str	w0, [x29, #112]
		head_count = block & ((1UL << PAGES_IN_SECTOR_LOG2) - 1UL);
    96012778:	0a370037 	bic	w23, w1, w23
		tail_count = (sector_cnt << PAGES_IN_SECTOR_LOG2) - tail_start;
    9601277c:	1ad92059 	lsl	w25, w2, w25
		pr_info("QSPI: erasing sectors from %u - %u\n",
    96012780:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012784:	2a1503e1 	mov	w1, w21
		tail_count = (sector_cnt << PAGES_IN_SECTOR_LOG2) - tail_start;
    96012788:	4b14033b 	sub	w27, w25, w20
		pr_info("QSPI: erasing sectors from %u - %u\n",
    9601278c:	51000442 	sub	w2, w2, #0x1
    96012790:	9128dc00 	add	x0, x0, #0xa37
    96012794:	94003fb7 	bl	96022670 <tegrabl_printf>
		if (head_count != 0UL) {
    96012798:	34000537 	cbz	w23, 9601283c <qspi_bdev_erase+0x320>
			pr_info("QSPI: recoverying head blocks from %u - %u\n",
    9601279c:	b9407fa0 	ldr	w0, [x29, #124]
    960127a0:	0b170002 	add	w2, w0, w23
    960127a4:	aa0003e1 	mov	x1, x0
    960127a8:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960127ac:	91297800 	add	x0, x0, #0xa5e
    960127b0:	94003fb0 	bl	96022670 <tegrabl_printf>
					head_count << chip_info->block_size_log2);
    960127b4:	b94006c1 	ldr	w1, [x22, #4]
			head_backup = tegrabl_calloc(1,
    960127b8:	aa1803e0 	mov	x0, x24
    960127bc:	1ac122e1 	lsl	w1, w23, w1
    960127c0:	940050c1 	bl	96026ac4 <tegrabl_calloc>
    960127c4:	aa0003f8 	mov	x24, x0
			if (head_backup == NULL) {
    960127c8:	b40019e0 	cbz	x0, 96012b04 <qspi_bdev_erase+0x5e8>
			error = qspi_bdev_read_block(dev,
    960127cc:	aa0003e1 	mov	x1, x0
    960127d0:	b9407fa2 	ldr	w2, [x29, #124]
    960127d4:	f94037a0 	ldr	x0, [x29, #104]
    960127d8:	2a1703e3 	mov	w3, w23
    960127dc:	97fffc33 	bl	960118a8 <qspi_bdev_read_block>
    960127e0:	2a0003fa 	mov	w26, w0
			if (error != TEGRABL_NO_ERROR) {
    960127e4:	35001820 	cbnz	w0, 96012ae8 <qspi_bdev_erase+0x5cc>
		if (tail_count != 0UL) {
    960127e8:	340002fb 	cbz	w27, 96012844 <qspi_bdev_erase+0x328>
			pr_info("QSPI: recoverying tail blocks from %u - %u\n",
    960127ec:	2a1903e2 	mov	w2, w25
    960127f0:	2a1403e1 	mov	w1, w20
    960127f4:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960127f8:	912a3400 	add	x0, x0, #0xa8d
    960127fc:	94003f9d 	bl	96022670 <tegrabl_printf>
					tail_count << chip_info->block_size_log2);
    96012800:	b94006c1 	ldr	w1, [x22, #4]
			tail_backup = tegrabl_calloc(1,
    96012804:	d2800020 	mov	x0, #0x1                   	// #1
    96012808:	1ac12361 	lsl	w1, w27, w1
    9601280c:	940050ae 	bl	96026ac4 <tegrabl_calloc>
    96012810:	aa0003f9 	mov	x25, x0
			if (tail_backup == NULL) {
    96012814:	b40017c0 	cbz	x0, 96012b0c <qspi_bdev_erase+0x5f0>
			error = qspi_bdev_read_block(dev,
    96012818:	aa0003e1 	mov	x1, x0
    9601281c:	f94037a0 	ldr	x0, [x29, #104]
    96012820:	2a1b03e3 	mov	w3, w27
    96012824:	2a1403e2 	mov	w2, w20
    96012828:	97fffc20 	bl	960118a8 <qspi_bdev_read_block>
    9601282c:	2a0003fa 	mov	w26, w0
			if (error != TEGRABL_NO_ERROR) {
    96012830:	34fff2e0 	cbz	w0, 9601268c <qspi_bdev_erase+0x170>
	if (head_backup != NULL) {
    96012834:	b50015d8 	cbnz	x24, 96012aec <qspi_bdev_erase+0x5d0>
    96012838:	17ffffbf 	b	96012734 <qspi_bdev_erase+0x218>
	uint8_t *head_backup = NULL;
    9601283c:	d2800018 	mov	x24, #0x0                   	// #0
    96012840:	17ffffea 	b	960127e8 <qspi_bdev_erase+0x2cc>
	uint8_t *tail_backup = NULL;
    96012844:	d2800019 	mov	x25, #0x0                   	// #0
    96012848:	17ffff91 	b	9601268c <qspi_bdev_erase+0x170>
	err = qspi_quad_flag_set(hqfdi, 0);
    9601284c:	52800001 	mov	w1, #0x0                   	// #0
    96012850:	aa1303e0 	mov	x0, x19
    96012854:	97fffc22 	bl	960118dc <qspi_quad_flag_set>
	if (err != TEGRABL_NO_ERROR) {
    96012858:	35fff460 	cbnz	w0, 960126e4 <qspi_bdev_erase+0x1c8>
    9601285c:	52800100 	mov	w0, #0x8                   	// #8
    96012860:	5280001c 	mov	w28, #0x0                   	// #0
    96012864:	b9007ba0 	str	w0, [x29, #120]
		err = qspi_write_en(hqfdi, true);
    96012868:	52800021 	mov	w1, #0x1                   	// #1
    9601286c:	aa1303e0 	mov	x0, x19
    96012870:	97fffdff 	bl	9601206c <qspi_write_en>
		if (err != TEGRABL_NO_ERROR) {
    96012874:	35fff380 	cbnz	w0, 960126e4 <qspi_bdev_erase+0x1c8>
		if (chip_info->address_length == 4UL) {
    96012878:	b9401ec1 	ldr	w1, [x22, #28]
    9601287c:	d3505f83 	ubfx	x3, x28, #16, #8
    96012880:	d3483f82 	ubfx	x2, x28, #8, #8
    96012884:	12001f80 	and	w0, w28, #0xff
    96012888:	7100103f 	cmp	w1, #0x4
    9601288c:	540004c1 	b.ne	96012924 <qspi_bdev_erase+0x408>  // b.any
			address_data[0] = (uint8_t)(uint32_t)((address >> 24) & 0xFFU);
    96012890:	53187f86 	lsr	w6, w28, #24
    96012894:	390223a6 	strb	w6, [x29, #136]
			address_data[1] = (uint8_t)(uint32_t)((address >> 16) & 0xFFU);
    96012898:	390227a3 	strb	w3, [x29, #137]
			address_data[2] = (uint8_t)(uint32_t)((address >> 8) & 0xFFU);
    9601289c:	39022ba2 	strb	w2, [x29, #138]
			address_data[3] = (uint8_t)(uint32_t)((address) & 0xFFU);
    960128a0:	39022fa0 	strb	w0, [x29, #139]
		transfers[0].tx_buf = cmd;
    960128a4:	f94033a0 	ldr	x0, [x29, #96]
		transfers[1].tx_buf = address_data;
    960128a8:	910223a2 	add	x2, x29, #0x88
		transfers[0].rx_buf = NULL;
    960128ac:	a9007f40 	stp	x0, xzr, [x26]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960128b0:	52896803 	mov	w3, #0x4b40                	// #19264
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    960128b4:	d2800020 	mov	x0, #0x1                   	// #1
    960128b8:	f8014340 	stur	x0, [x26, #20]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960128bc:	f9403260 	ldr	x0, [x19, #96]
    960128c0:	72a00983 	movk	w3, #0x4c, lsl #16
		transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    960128c4:	7900235f 	strh	wzr, [x26, #16]
		transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
    960128c8:	f900135f 	str	xzr, [x26, #32]
		transfers[0].dummy_cycles = ZERO_CYCLES;
    960128cc:	b9002b5f 	str	wzr, [x26, #40]
		transfers[1].rx_buf = NULL;
    960128d0:	a904ff42 	stp	x2, xzr, [x26, #72]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960128d4:	52800042 	mov	w2, #0x2                   	// #2
		transfers[1].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
    960128d8:	7900b35f 	strh	wzr, [x26, #88]
		transfers[1].read_len = 0;
    960128dc:	290bff41 	stp	w1, wzr, [x26, #92]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960128e0:	aa1a03e1 	mov	x1, x26
		transfers[1].bus_width = QSPI_BUS_WIDTH_X1;
    960128e4:	f900375f 	str	xzr, [x26, #104]
		transfers[1].dummy_cycles = ZERO_CYCLES;
    960128e8:	b900735f 	str	wzr, [x26, #112]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960128ec:	97fff983 	bl	96010ef8 <tegrabl_qspi_transaction>
		if (err != TEGRABL_NO_ERROR) {
    960128f0:	34000220 	cbz	w0, 96012934 <qspi_bdev_erase+0x418>
			pr_error("Qspi param sector erase: Sub sector erase failed(err:0x%x)\n", err);
    960128f4:	2a0003e1 	mov	w1, w0
    960128f8:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    960128fc:	912be400 	add	x0, x0, #0xaf9
    96012900:	94003f5c 	bl	96022670 <tegrabl_printf>
			err = qspi_write_en(hqfdi, false);
    96012904:	52800001 	mov	w1, #0x0                   	// #0
    96012908:	aa1303e0 	mov	x0, x19
    9601290c:	97fffdd8 	bl	9601206c <qspi_write_en>
			if (err != TEGRABL_NO_ERROR) {
    96012910:	35ffeea0 	cbnz	w0, 960126e4 <qspi_bdev_erase+0x1c8>
	err = qspi_quad_flag_set(hqfdi, 1);
    96012914:	52800021 	mov	w1, #0x1                   	// #1
    96012918:	aa1303e0 	mov	x0, x19
    9601291c:	97fffbf0 	bl	960118dc <qspi_quad_flag_set>
    96012920:	17ffff71 	b	960126e4 <qspi_bdev_erase+0x1c8>
			address_data[0] = (uint8_t)(uint32_t)((address >> 16) & 0xFFU);
    96012924:	390223a3 	strb	w3, [x29, #136]
			address_data[1] = (uint8_t)(uint32_t)((address >> 8) & 0xFFU);
    96012928:	390227a2 	strb	w2, [x29, #137]
			address_data[2] = (uint8_t)(uint32_t)((address) & 0xFFU);
    9601292c:	39022ba0 	strb	w0, [x29, #138]
    96012930:	17ffffdd 	b	960128a4 <qspi_bdev_erase+0x388>
		qspi_writein_progress(hqfdi, QSPI_FLASH_WIP_WAIT_FOR_READY,
    96012934:	52800002 	mov	w2, #0x0                   	// #0
    96012938:	52800001 	mov	w1, #0x0                   	// #0
    9601293c:	aa1303e0 	mov	x0, x19
    96012940:	97fffd6b 	bl	96011eec <qspi_writein_progress>
		err = qspi_write_en(hqfdi, false);
    96012944:	52800001 	mov	w1, #0x0                   	// #0
    96012948:	aa1303e0 	mov	x0, x19
    9601294c:	97fffdc8 	bl	9601206c <qspi_write_en>
		if (err != TEGRABL_NO_ERROR) {
    96012950:	35ffeca0 	cbnz	w0, 960126e4 <qspi_bdev_erase+0x1c8>
		address += (1UL << chip_info->parameter_sector_size_log2);
    96012954:	b94016c0 	ldr	w0, [x22, #20]
    96012958:	d2800021 	mov	x1, #0x1                   	// #1
    9601295c:	9ac02020 	lsl	x0, x1, x0
    96012960:	0b00039c 	add	w28, w28, w0
	while (num_of_sectors_to_erase != 0UL) {
    96012964:	b9407ba0 	ldr	w0, [x29, #120]
    96012968:	71000400 	subs	w0, w0, #0x1
    9601296c:	b9007ba0 	str	w0, [x29, #120]
    96012970:	54fff7c1 	b.ne	96012868 <qspi_bdev_erase+0x34c>  // b.any
    96012974:	17ffffe8 	b	96012914 <qspi_bdev_erase+0x3f8>
	err = qspi_quad_flag_set(hqfdi, 0);
    96012978:	52800001 	mov	w1, #0x0                   	// #0
    9601297c:	aa1303e0 	mov	x0, x19
    96012980:	97fffbd7 	bl	960118dc <qspi_quad_flag_set>
	if (err != TEGRABL_NO_ERROR) {
    96012984:	350005c0 	cbnz	w0, 96012a3c <qspi_bdev_erase+0x520>
	address = start_sector_num << chip_info->sector_size_log2;
    96012988:	b9400ec4 	ldr	w4, [x22, #12]
    9601298c:	1ac422ba 	lsl	w26, w21, w4
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96012990:	d2800035 	mov	x21, #0x1                   	// #1
		err = qspi_write_en(hqfdi, true);
    96012994:	52800021 	mov	w1, #0x1                   	// #1
    96012998:	aa1303e0 	mov	x0, x19
    9601299c:	97fffdb4 	bl	9601206c <qspi_write_en>
		if (err != TEGRABL_NO_ERROR) {
    960129a0:	350004e0 	cbnz	w0, 96012a3c <qspi_bdev_erase+0x520>
		if (chip_info->address_length == 4UL) {
    960129a4:	b9401ec1 	ldr	w1, [x22, #28]
    960129a8:	d3505f43 	ubfx	x3, x26, #16, #8
    960129ac:	d3483f42 	ubfx	x2, x26, #8, #8
    960129b0:	12001f40 	and	w0, w26, #0xff
    960129b4:	7100103f 	cmp	w1, #0x4
    960129b8:	54000461 	b.ne	96012a44 <qspi_bdev_erase+0x528>  // b.any
			address_data[0] = (uint8_t)(uint32_t)((address >> 24) & 0xFFU);
    960129bc:	53187f46 	lsr	w6, w26, #24
    960129c0:	390223a6 	strb	w6, [x29, #136]
			address_data[1] = (uint8_t)(uint32_t)((address >> 16) & 0xFFU);
    960129c4:	390227a3 	strb	w3, [x29, #137]
			address_data[2] = (uint8_t)(uint32_t)((address >> 8) & 0xFFU);
    960129c8:	39022ba2 	strb	w2, [x29, #138]
			address_data[3] = (uint8_t)(uint32_t)((address) & 0xFFU);
    960129cc:	39022fa0 	strb	w0, [x29, #139]
		transfers[0].tx_buf = cmd;
    960129d0:	f94033a0 	ldr	x0, [x29, #96]
		transfers[1].tx_buf = address_data;
    960129d4:	910223a2 	add	x2, x29, #0x88
		transfers[0].rx_buf = NULL;
    960129d8:	a9007f80 	stp	x0, xzr, [x28]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960129dc:	52896803 	mov	w3, #0x4b40                	// #19264
    960129e0:	f9403260 	ldr	x0, [x19, #96]
    960129e4:	72a00983 	movk	w3, #0x4c, lsl #16
		transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    960129e8:	7900239f 	strh	wzr, [x28, #16]
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    960129ec:	f8014395 	stur	x21, [x28, #20]
		transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
    960129f0:	f900139f 	str	xzr, [x28, #32]
		transfers[0].dummy_cycles = ZERO_CYCLES;
    960129f4:	b9002b9f 	str	wzr, [x28, #40]
		transfers[1].rx_buf = NULL;
    960129f8:	a904ff82 	stp	x2, xzr, [x28, #72]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    960129fc:	52800042 	mov	w2, #0x2                   	// #2
		transfers[1].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
    96012a00:	7900b39f 	strh	wzr, [x28, #88]
		transfers[1].read_len = 0;
    96012a04:	290bff81 	stp	w1, wzr, [x28, #92]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012a08:	aa1c03e1 	mov	x1, x28
		transfers[1].bus_width = QSPI_BUS_WIDTH_X1;
    96012a0c:	f900379f 	str	xzr, [x28, #104]
		transfers[1].dummy_cycles = ZERO_CYCLES;
    96012a10:	b900739f 	str	wzr, [x28, #112]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], 2,
    96012a14:	97fff939 	bl	96010ef8 <tegrabl_qspi_transaction>
		if (err != TEGRABL_NO_ERROR) {
    96012a18:	340001e0 	cbz	w0, 96012a54 <qspi_bdev_erase+0x538>
			pr_error("Qspi sector erase: Sector erase failed (err:0x%x)\n", err);
    96012a1c:	2a0003e1 	mov	w1, w0
    96012a20:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012a24:	912ce000 	add	x0, x0, #0xb38
    96012a28:	94003f12 	bl	96022670 <tegrabl_printf>
			err = qspi_write_en(hqfdi, false);
    96012a2c:	52800001 	mov	w1, #0x0                   	// #0
    96012a30:	aa1303e0 	mov	x0, x19
    96012a34:	97fffd8e 	bl	9601206c <qspi_write_en>
			if (err != TEGRABL_NO_ERROR) {
    96012a38:	340002c0 	cbz	w0, 96012a90 <qspi_bdev_erase+0x574>
		error = qspi_bdev_write_block(dev,
    96012a3c:	2a0003fa 	mov	w26, w0
    96012a40:	17ffff3b 	b	9601272c <qspi_bdev_erase+0x210>
			address_data[0] = (uint8_t)(uint32_t)((address >> 16) & 0xFFU);
    96012a44:	390223a3 	strb	w3, [x29, #136]
			address_data[1] = (uint8_t)(uint32_t)((address >> 8) & 0xFFU);
    96012a48:	390227a2 	strb	w2, [x29, #137]
			address_data[2] = (uint8_t)(uint32_t)((address) & 0xFFU);
    96012a4c:	39022ba0 	strb	w0, [x29, #138]
    96012a50:	17ffffe0 	b	960129d0 <qspi_bdev_erase+0x4b4>
		qspi_writein_progress(hqfdi, QSPI_FLASH_WIP_WAIT_FOR_READY,
    96012a54:	52800002 	mov	w2, #0x0                   	// #0
    96012a58:	52800001 	mov	w1, #0x0                   	// #0
    96012a5c:	aa1303e0 	mov	x0, x19
    96012a60:	97fffd23 	bl	96011eec <qspi_writein_progress>
		err = qspi_write_en(hqfdi, false);
    96012a64:	52800001 	mov	w1, #0x0                   	// #0
    96012a68:	aa1303e0 	mov	x0, x19
    96012a6c:	97fffd80 	bl	9601206c <qspi_write_en>
		if (err != TEGRABL_NO_ERROR) {
    96012a70:	35fffe60 	cbnz	w0, 96012a3c <qspi_bdev_erase+0x520>
		address += (1UL << chip_info->sector_size_log2);
    96012a74:	b9400ec0 	ldr	w0, [x22, #12]
    96012a78:	9ac022a0 	lsl	x0, x21, x0
    96012a7c:	0b00035a 	add	w26, w26, w0
	while (num_of_sectors_to_erase != 0UL) {
    96012a80:	b94073a0 	ldr	w0, [x29, #112]
    96012a84:	71000400 	subs	w0, w0, #0x1
    96012a88:	b90073a0 	str	w0, [x29, #112]
    96012a8c:	54fff841 	b.ne	96012994 <qspi_bdev_erase+0x478>  // b.any
	err = qspi_quad_flag_set(hqfdi, 1);
    96012a90:	52800021 	mov	w1, #0x1                   	// #1
    96012a94:	aa1303e0 	mov	x0, x19
    96012a98:	97fffb91 	bl	960118dc <qspi_quad_flag_set>
	if (err != TEGRABL_NO_ERROR) {
    96012a9c:	35fffd00 	cbnz	w0, 96012a3c <qspi_bdev_erase+0x520>
	if (head_count != 0UL) {
    96012aa0:	35000097 	cbnz	w23, 96012ab0 <qspi_bdev_erase+0x594>
	if (tail_count != 0UL) {
    96012aa4:	3500017b 	cbnz	w27, 96012ad0 <qspi_bdev_erase+0x5b4>
    96012aa8:	5280001a 	mov	w26, #0x0                   	// #0
    96012aac:	17ffff20 	b	9601272c <qspi_bdev_erase+0x210>
		error = qspi_bdev_write_block(dev,
    96012ab0:	b9407fa2 	ldr	w2, [x29, #124]
    96012ab4:	2a1703e3 	mov	w3, w23
    96012ab8:	f94037a0 	ldr	x0, [x29, #104]
    96012abc:	aa1803e1 	mov	x1, x24
    96012ac0:	97fffdc4 	bl	960121d0 <qspi_bdev_write_block>
    96012ac4:	2a0003fa 	mov	w26, w0
		if (error != TEGRABL_NO_ERROR) {
    96012ac8:	35ffe320 	cbnz	w0, 9601272c <qspi_bdev_erase+0x210>
    96012acc:	17fffff6 	b	96012aa4 <qspi_bdev_erase+0x588>
		error = qspi_bdev_write_block(dev,
    96012ad0:	f94037a0 	ldr	x0, [x29, #104]
    96012ad4:	2a1b03e3 	mov	w3, w27
    96012ad8:	2a1403e2 	mov	w2, w20
    96012adc:	aa1903e1 	mov	x1, x25
    96012ae0:	97fffdbc 	bl	960121d0 <qspi_bdev_write_block>
    96012ae4:	17ffffd6 	b	96012a3c <qspi_bdev_erase+0x520>
	uint8_t *tail_backup = NULL;
    96012ae8:	d2800019 	mov	x25, #0x0                   	// #0
		tegrabl_free(head_backup);
    96012aec:	aa1803e0 	mov	x0, x24
    96012af0:	94004ff2 	bl	96026ab8 <tegrabl_free>
    96012af4:	17ffff0f 	b	96012730 <qspi_bdev_erase+0x214>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, AUX_INFO_INVALID_PARAMS6);
    96012af8:	5280c05a 	mov	w26, #0x602                 	// #1538
				error = TEGRABL_ERROR(
    96012afc:	72a2223a 	movk	w26, #0x1111, lsl #16
    96012b00:	17fffec8 	b	96012620 <qspi_bdev_erase+0x104>
    96012b04:	5281607a 	mov	w26, #0xb03                 	// #2819
    96012b08:	17fffffd 	b	96012afc <qspi_bdev_erase+0x5e0>
				error = TEGRABL_ERROR(
    96012b0c:	5281807a 	mov	w26, #0xc03                 	// #3075
    96012b10:	72a2223a 	movk	w26, #0x1111, lsl #16
	if (head_backup != NULL) {
    96012b14:	b5fffed8 	cbnz	x24, 96012aec <qspi_bdev_erase+0x5d0>
    96012b18:	17fffec2 	b	96012620 <qspi_bdev_erase+0x104>

0000000096012b1c <qspi_flash_qpi_mode_enable_micron>:


#if !defined(CONFIG_ENABLE_BLOCKDEV_BASIC)

tegrabl_error_t qspi_flash_qpi_mode_enable_micron(struct tegrabl_qspi_flash_driver_info *hqfdi, bool benable)
{
    96012b1c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96012b20:	910003fd 	mov	x29, sp
    96012b24:	a9025bf5 	stp	x21, x22, [sp, #32]
	write_cfg_cmd = (uint32_t) QSPI_FLASH_CMD_WR_EVCR;
	qpi_bit_log2 = (uint8_t) QSPI_FLASH_MICRON_QPI_BIT_LOG2;
	if (benable) {
		input_cfg = (uint8_t) QSPI_FLASH_EVCR_QPI_ENABLE;
	} else {
		input_cfg = (uint8_t) QSPI_FLASH_EVCR_QPI_DISABLE;
    96012b28:	72001c35 	ands	w21, w1, #0xff
{
    96012b2c:	a90153f3 	stp	x19, x20, [sp, #16]
    96012b30:	aa0003f6 	mov	x22, x0
		input_cfg = (uint8_t) QSPI_FLASH_EVCR_QPI_DISABLE;
    96012b34:	1a9f17f3 	cset	w19, eq  // eq = none
	}

	err = qspi_read_reg(hqfdi, read_cfg_cmd, &reg_val);
    96012b38:	9100ffa2 	add	x2, x29, #0x3f
    96012b3c:	52800ca1 	mov	w1, #0x65                  	// #101
    96012b40:	97fffc9c 	bl	96011db0 <qspi_read_reg>
    96012b44:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96012b48:	34000140 	cbz	w0, 96012b70 <qspi_flash_qpi_mode_enable_micron+0x54>
		pr_error("Read EVCR fail (err:0x%x)\n", err);
    96012b4c:	2a0003e1 	mov	w1, w0
    96012b50:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012b54:	9139f000 	add	x0, x0, #0xe7c
    96012b58:	94003ec6 	bl	96022670 <tegrabl_printf>

	pr_trace("Micron QPI setting %s is done\n", benable ? "enable" : "disable");

exit:
	return err;
}
    96012b5c:	2a1403e0 	mov	w0, w20
    96012b60:	a94153f3 	ldp	x19, x20, [sp, #16]
    96012b64:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96012b68:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96012b6c:	d65f03c0 	ret
	if ((reg_val & (1U << qpi_bit_log2)) == input_cfg) {
    96012b70:	3940ffa0 	ldrb	w0, [x29, #63]
    96012b74:	53196273 	lsl	w19, w19, #7
    96012b78:	12190001 	and	w1, w0, #0x80
    96012b7c:	6b01027f 	cmp	w19, w1
    96012b80:	54fffee0 	b.eq	96012b5c <qspi_flash_qpi_mode_enable_micron+0x40>  // b.none
	reg_val &= ~(1U << qpi_bit_log2);
    96012b84:	12001800 	and	w0, w0, #0x7f
	err = qspi_write_reg(hqfdi, write_cfg_cmd, &reg_val);
    96012b88:	9100ffa2 	add	x2, x29, #0x3f
	reg_val |= input_cfg;
    96012b8c:	2a000273 	orr	w19, w19, w0
	err = qspi_write_reg(hqfdi, write_cfg_cmd, &reg_val);
    96012b90:	52800c21 	mov	w1, #0x61                  	// #97
	reg_val |= input_cfg;
    96012b94:	3900ffb3 	strb	w19, [x29, #63]
	err = qspi_write_reg(hqfdi, write_cfg_cmd, &reg_val);
    96012b98:	aa1603e0 	mov	x0, x22
    96012b9c:	97fffe13 	bl	960123e8 <qspi_write_reg>
    96012ba0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96012ba4:	34fffdc0 	cbz	w0, 96012b5c <qspi_flash_qpi_mode_enable_micron+0x40>
		pr_error("Micron QPI %s failed, (err:0x%x)\n",  benable ? "enable" : "disable", err);
    96012ba8:	710002bf 	cmp	w21, #0x0
    96012bac:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012bb0:	f0000141 	adrp	x1, 9603d000 <__func__.3609+0x209>
    96012bb4:	91301400 	add	x0, x0, #0xc05
    96012bb8:	91135021 	add	x1, x1, #0x4d4
    96012bbc:	2a1303e2 	mov	w2, w19
    96012bc0:	9a801021 	csel	x1, x1, x0, ne  // ne = any
		goto exit;
    96012bc4:	2a1303f4 	mov	w20, w19
		pr_error("Micron QPI %s failed, (err:0x%x)\n",  benable ? "enable" : "disable", err);
    96012bc8:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012bcc:	913a6800 	add	x0, x0, #0xe9a
    96012bd0:	94003ea8 	bl	96022670 <tegrabl_printf>
	return err;
    96012bd4:	17ffffe2 	b	96012b5c <qspi_flash_qpi_mode_enable_micron+0x40>

0000000096012bd8 <qspi_flash_qpi_mode_enable_spansion>:

#if !defined(CONFIG_ENABLE_BLOCKDEV_BASIC)

tegrabl_error_t qspi_flash_qpi_mode_enable_spansion(struct tegrabl_qspi_flash_driver_info *hqfdi,
													bool benable)
{
    96012bd8:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96012bdc:	910003fd 	mov	x29, sp
    96012be0:	a9025bf5 	stp	x21, x22, [sp, #32]
	write_cfg_cmd = (uint32_t) QSPI_FLASH_REG_CR2V;
	qpi_bit_log2 = (uint8_t) QSPI_FLASH_SPANSION_QPI_BIT_LOG2;
	if (benable) {
		input_cfg = (uint8_t) QSPI_FLASH_CR2V_QPI_ENABLE;
	} else {
		input_cfg = (uint8_t) QSPI_FLASH_CR2V_QPI_DISABLE;
    96012be4:	72001c35 	ands	w21, w1, #0xff
	}

	err = qspi_read_reg(hqfdi, read_cfg_cmd, &reg_val);
    96012be8:	52800061 	mov	w1, #0x3                   	// #3
{
    96012bec:	a90153f3 	stp	x19, x20, [sp, #16]
    96012bf0:	aa0003f6 	mov	x22, x0
		input_cfg = (uint8_t) QSPI_FLASH_CR2V_QPI_DISABLE;
    96012bf4:	1a9f07f3 	cset	w19, ne  // ne = any
	err = qspi_read_reg(hqfdi, read_cfg_cmd, &reg_val);
    96012bf8:	9100ffa2 	add	x2, x29, #0x3f
    96012bfc:	72a01001 	movk	w1, #0x80, lsl #16
    96012c00:	97fffc6c 	bl	96011db0 <qspi_read_reg>
    96012c04:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96012c08:	34000140 	cbz	w0, 96012c30 <qspi_flash_qpi_mode_enable_spansion+0x58>
		pr_error("Read CR2V fail (err:0x%x)\n", err);
    96012c0c:	2a0003e1 	mov	w1, w0
    96012c10:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012c14:	913d6800 	add	x0, x0, #0xf5a
    96012c18:	94003e96 	bl	96022670 <tegrabl_printf>

	pr_trace("Spansion QPI setting %s is done\n", benable ? "enable" : "disable");

exit:
	return err;
}
    96012c1c:	2a1403e0 	mov	w0, w20
    96012c20:	a94153f3 	ldp	x19, x20, [sp, #16]
    96012c24:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96012c28:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96012c2c:	d65f03c0 	ret
	if ((reg_val & (1U << qpi_bit_log2)) == input_cfg) {
    96012c30:	3940ffa0 	ldrb	w0, [x29, #63]
    96012c34:	531a6673 	lsl	w19, w19, #6
    96012c38:	121a0001 	and	w1, w0, #0x40
    96012c3c:	6b01027f 	cmp	w19, w1
    96012c40:	54fffee0 	b.eq	96012c1c <qspi_flash_qpi_mode_enable_spansion+0x44>  // b.none
	reg_val &= ~(1U << qpi_bit_log2);
    96012c44:	12197800 	and	w0, w0, #0xffffffbf
	err = qspi_write_reg(hqfdi, write_cfg_cmd, &reg_val);
    96012c48:	52800061 	mov	w1, #0x3                   	// #3
	reg_val |= input_cfg;
    96012c4c:	2a000273 	orr	w19, w19, w0
	err = qspi_write_reg(hqfdi, write_cfg_cmd, &reg_val);
    96012c50:	9100ffa2 	add	x2, x29, #0x3f
	reg_val |= input_cfg;
    96012c54:	3900ffb3 	strb	w19, [x29, #63]
	err = qspi_write_reg(hqfdi, write_cfg_cmd, &reg_val);
    96012c58:	72a01001 	movk	w1, #0x80, lsl #16
    96012c5c:	aa1603e0 	mov	x0, x22
    96012c60:	97fffde2 	bl	960123e8 <qspi_write_reg>
    96012c64:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96012c68:	34fffda0 	cbz	w0, 96012c1c <qspi_flash_qpi_mode_enable_spansion+0x44>
		pr_error("Spansion QPI %s failed, (err:0x%x)\n",  benable ? "enable" : "disable", err);
    96012c6c:	710002bf 	cmp	w21, #0x0
    96012c70:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012c74:	f0000141 	adrp	x1, 9603d000 <__func__.3609+0x209>
    96012c78:	91301400 	add	x0, x0, #0xc05
    96012c7c:	91135021 	add	x1, x1, #0x4d4
    96012c80:	2a1303e2 	mov	w2, w19
    96012c84:	9a801021 	csel	x1, x1, x0, ne  // ne = any
		goto exit;
    96012c88:	2a1303f4 	mov	w20, w19
		pr_error("Spansion QPI %s failed, (err:0x%x)\n",  benable ? "enable" : "disable", err);
    96012c8c:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012c90:	913de000 	add	x0, x0, #0xf78
    96012c94:	94003e77 	bl	96022670 <tegrabl_printf>
	return err;
    96012c98:	17ffffe1 	b	96012c1c <qspi_flash_qpi_mode_enable_spansion+0x44>

0000000096012c9c <qspi_flash_x4_enable_spansion>:

#endif

tegrabl_error_t qspi_flash_x4_enable_spansion(struct tegrabl_qspi_flash_driver_info *hqfdi, uint8_t bset)
{
    96012c9c:	a9ab7bfd 	stp	x29, x30, [sp, #-336]!
    96012ca0:	910003fd 	mov	x29, sp
    96012ca4:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint8_t command;
	uint8_t reg_val;
	uint8_t cmd_addr_buf[3];
	uint8_t input_cfg;

	if (((bquadset != 0U) && (bset != 0U)) ||
    96012ca8:	900002f5 	adrp	x21, 9606e000 <__bss_start>
{
    96012cac:	12001c36 	and	w22, w1, #0xff
    96012cb0:	a90153f3 	stp	x19, x20, [sp, #16]
	if (((bquadset != 0U) && (bset != 0U)) ||
    96012cb4:	b94a0aa1 	ldr	w1, [x21, #2568]
{
    96012cb8:	a90363f7 	stp	x23, x24, [sp, #48]
    96012cbc:	a9046bf9 	stp	x25, x26, [sp, #64]
    96012cc0:	f9002bfb 	str	x27, [sp, #80]
	if (((bquadset != 0U) && (bset != 0U)) ||
    96012cc4:	34000081 	cbz	w1, 96012cd4 <qspi_flash_x4_enable_spansion+0x38>
    96012cc8:	34000096 	cbz	w22, 96012cd8 <qspi_flash_x4_enable_spansion+0x3c>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96012ccc:	52800013 	mov	w19, #0x0                   	// #0
	bquadset = bset;

	err = qspi_write_en(hqfdi, false);

exit:
	return err;
    96012cd0:	14000016 	b	96012d28 <qspi_flash_x4_enable_spansion+0x8c>
		((bquadset == 0U) && (bset == 0U))) {
    96012cd4:	34ffffd6 	cbz	w22, 96012ccc <qspi_flash_x4_enable_spansion+0x30>
    96012cd8:	aa0003f4 	mov	x20, x0
	err = qspi_read_reg(hqfdi, QSPI_FLASH_CMD_RDCR, &reg_val);
    96012cdc:	9101bba2 	add	x2, x29, #0x6e
    96012ce0:	528006a1 	mov	w1, #0x35                  	// #53
    96012ce4:	97fffc33 	bl	96011db0 <qspi_read_reg>
    96012ce8:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96012cec:	340000c0 	cbz	w0, 96012d04 <qspi_flash_x4_enable_spansion+0x68>
		pr_error("RDCR cmd failed, (err:0x%x)\n", err);
    96012cf0:	2a0003e1 	mov	w1, w0
    96012cf4:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012cf8:	913e7c00 	add	x0, x0, #0xf9f
			pr_error("RDSR1 cmd failed, (err:0x%x)\n", err);
    96012cfc:	94003e5d 	bl	96022670 <tegrabl_printf>
			goto exit;
    96012d00:	1400000a 	b	96012d28 <qspi_flash_x4_enable_spansion+0x8c>
		input_cfg = QSPI_FLASH_QUAD_ENABLE;
    96012d04:	710002df 	cmp	w22, #0x0
	if ((reg_val & QSPI_FLASH_QUAD_ENABLE) == input_cfg) {
    96012d08:	3941bba1 	ldrb	w1, [x29, #110]
		input_cfg = QSPI_FLASH_QUAD_ENABLE;
    96012d0c:	52800040 	mov	w0, #0x2                   	// #2
    96012d10:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    96012d14:	3901bfa0 	strb	w0, [x29, #111]
	if ((reg_val & QSPI_FLASH_QUAD_ENABLE) == input_cfg) {
    96012d18:	121f0021 	and	w1, w1, #0x2
    96012d1c:	6b20003f 	cmp	w1, w0, uxtb
    96012d20:	54000141 	b.ne	96012d48 <qspi_flash_x4_enable_spansion+0xac>  // b.any
		bquadset = bset;
    96012d24:	b90a0ab6 	str	w22, [x21, #2568]
}
    96012d28:	2a1303e0 	mov	w0, w19
    96012d2c:	f9402bfb 	ldr	x27, [sp, #80]
    96012d30:	a94153f3 	ldp	x19, x20, [sp, #16]
    96012d34:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96012d38:	a94363f7 	ldp	x23, x24, [sp, #48]
    96012d3c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96012d40:	a8d57bfd 	ldp	x29, x30, [sp], #336
    96012d44:	d65f03c0 	ret
		err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    96012d48:	5289681b 	mov	w27, #0x4b40                	// #19264
		transfers[0].tx_buf = &command;
    96012d4c:	9101b7b8 	add	x24, x29, #0x6d
		transfers[1].tx_buf = &cmd_addr_buf[0];
    96012d50:	9101c3b9 	add	x25, x29, #0x70
		transfers[2].tx_buf = &input_cfg;
    96012d54:	9101bfba 	add	x26, x29, #0x6f
    96012d58:	52807d37 	mov	w23, #0x3e9                 	// #1001
		err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    96012d5c:	72a0099b 	movk	w27, #0x4c, lsl #16
		if (tried++ == QSPI_FLASH_WRITE_ENABLE_WAIT_TIME) {
    96012d60:	710006f7 	subs	w23, w23, #0x1
    96012d64:	540000e1 	b.ne	96012d80 <qspi_flash_x4_enable_spansion+0xe4>  // b.any
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_FLAG_TIMEOUT);
    96012d68:	528220d3 	mov	w19, #0x1106                	// #4358
			pr_error("Timeout for changing QE it\n");
    96012d6c:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, AUX_INFO_FLAG_TIMEOUT);
    96012d70:	72a22233 	movk	w19, #0x1111, lsl #16
			pr_error("Timeout for changing QE it\n");
    96012d74:	913efc00 	add	x0, x0, #0xfbf
    96012d78:	94003e3e 	bl	96022670 <tegrabl_printf>
			goto exit;
    96012d7c:	17ffffeb 	b	96012d28 <qspi_flash_x4_enable_spansion+0x8c>
		(void)memset(transfers, 0, sizeof(transfers));
    96012d80:	d2801b02 	mov	x2, #0xd8                  	// #216
    96012d84:	52800001 	mov	w1, #0x0                   	// #0
    96012d88:	9101e3a0 	add	x0, x29, #0x78
    96012d8c:	94005c27 	bl	96029e28 <memset>
		err = qspi_read_reg(hqfdi, QSPI_FLASH_CMD_RDSR1, &reg_val);
    96012d90:	9101bba2 	add	x2, x29, #0x6e
    96012d94:	528000a1 	mov	w1, #0x5                   	// #5
    96012d98:	aa1403e0 	mov	x0, x20
    96012d9c:	97fffc05 	bl	96011db0 <qspi_read_reg>
    96012da0:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96012da4:	340000a0 	cbz	w0, 96012db8 <qspi_flash_x4_enable_spansion+0x11c>
			pr_error("RDSR1 cmd failed, (err:0x%x)\n", err);
    96012da8:	2a0003e1 	mov	w1, w0
    96012dac:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012db0:	913f7800 	add	x0, x0, #0xfde
    96012db4:	17ffffd2 	b	96012cfc <qspi_flash_x4_enable_spansion+0x60>
		err = qspi_write_en(hqfdi, true);
    96012db8:	52800021 	mov	w1, #0x1                   	// #1
    96012dbc:	aa1403e0 	mov	x0, x20
    96012dc0:	97fffcab 	bl	9601206c <qspi_write_en>
    96012dc4:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96012dc8:	35fffb00 	cbnz	w0, 96012d28 <qspi_flash_x4_enable_spansion+0x8c>
		cmd_addr_buf[0] = (uint8_t) (QSPI_FLASH_REG_CR1V >> 16) & 0xFFU;
    96012dcc:	52801001 	mov	w1, #0x80                  	// #128
    96012dd0:	7900e3a1 	strh	w1, [x29, #112]
		cmd_addr_buf[1] = (uint8_t) (QSPI_FLASH_REG_CR1V >> 8) & 0xFFU;
    96012dd4:	52800041 	mov	w1, #0x2                   	// #2
    96012dd8:	3901cba1 	strb	w1, [x29, #114]
		transfers[2].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96012ddc:	910803a1 	add	x1, x29, #0x200
		command = QSPI_FLASH_CMD_WRAR;
    96012de0:	52800e20 	mov	w0, #0x71                  	// #113
    96012de4:	3901b7a0 	strb	w0, [x29, #109]
		transfers[0].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96012de8:	d2800020 	mov	x0, #0x1                   	// #1
    96012dec:	f808c3a0 	stur	x0, [x29, #140]
		transfers[1].write_len = 3;
    96012df0:	d2800062 	mov	x2, #0x3                   	// #3
		transfers[2].write_len = QSPI_FLASH_COMMAND_WIDTH;
    96012df4:	f811c020 	stur	x0, [x1, #-228]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    96012df8:	2a1b03e3 	mov	w3, w27
    96012dfc:	f9403280 	ldr	x0, [x20, #96]
    96012e00:	9101e3a1 	add	x1, x29, #0x78
		transfers[0].rx_buf = NULL;
    96012e04:	a907ffb8 	stp	x24, xzr, [x29, #120]
		transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    96012e08:	790113bf 	strh	wzr, [x29, #136]
		transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
    96012e0c:	f9004fbf 	str	xzr, [x29, #152]
		transfers[0].dummy_cycles = ZERO_CYCLES;
    96012e10:	b900a3bf 	str	wzr, [x29, #160]
		transfers[1].rx_buf = NULL;
    96012e14:	a90c7fb9 	stp	x25, xzr, [x29, #192]
		transfers[1].mode = QSPI_FLASH_CMD_MODE_VAL;
    96012e18:	7901a3bf 	strh	wzr, [x29, #208]
		transfers[1].write_len = 3;
    96012e1c:	f80d43a2 	stur	x2, [x29, #212]
		transfers[1].bus_width = QSPI_BUS_WIDTH_X1;
    96012e20:	f90073bf 	str	xzr, [x29, #224]
		transfers[1].dummy_cycles = ZERO_CYCLES;
    96012e24:	b900ebbf 	str	wzr, [x29, #232]
		transfers[2].rx_buf = NULL;
    96012e28:	a910ffba 	stp	x26, xzr, [x29, #264]
		transfers[2].mode = QSPI_FLASH_CMD_MODE_VAL;
    96012e2c:	790233bf 	strh	wzr, [x29, #280]
		transfers[2].bus_width = QSPI_BUS_WIDTH_X1;
    96012e30:	f90097bf 	str	xzr, [x29, #296]
		transfers[2].dummy_cycles = ZERO_CYCLES;
    96012e34:	b90133bf 	str	wzr, [x29, #304]
		err = tegrabl_qspi_transaction(hqfdi->hqspi, transfers, 3,
    96012e38:	97fff830 	bl	96010ef8 <tegrabl_qspi_transaction>
    96012e3c:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96012e40:	340000a0 	cbz	w0, 96012e54 <qspi_flash_x4_enable_spansion+0x1b8>
			pr_error("X4 enable Spansion: WRAR failed, (err:0x%x)\n", err);
    96012e44:	2a0003e1 	mov	w1, w0
    96012e48:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012e4c:	913ffc00 	add	x0, x0, #0xfff
    96012e50:	17ffffab 	b	96012cfc <qspi_flash_x4_enable_spansion+0x60>
			err = qspi_read_reg(hqfdi, QSPI_FLASH_CMD_RDSR1, &reg_val);
    96012e54:	9101bba2 	add	x2, x29, #0x6e
    96012e58:	528000a1 	mov	w1, #0x5                   	// #5
    96012e5c:	aa1403e0 	mov	x0, x20
    96012e60:	97fffbd4 	bl	96011db0 <qspi_read_reg>
    96012e64:	2a0003f3 	mov	w19, w0
			if (err != TEGRABL_NO_ERROR) {
    96012e68:	340000a0 	cbz	w0, 96012e7c <qspi_flash_x4_enable_spansion+0x1e0>
				pr_error("X4 enable Spansion: RDSR1 cmd failed, (err:0x%x)\n", err);
    96012e6c:	2a0003e1 	mov	w1, w0
    96012e70:	b0000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96012e74:	9100bc00 	add	x0, x0, #0x2f
    96012e78:	17ffffa1 	b	96012cfc <qspi_flash_x4_enable_spansion+0x60>
		} while ((reg_val & QSPI_FLASH_WIP_ENABLE) == QSPI_FLASH_WIP_ENABLE);
    96012e7c:	3941bba0 	ldrb	w0, [x29, #110]
    96012e80:	3707fea0 	tbnz	w0, #0, 96012e54 <qspi_flash_x4_enable_spansion+0x1b8>
		err = qspi_read_reg(hqfdi, QSPI_FLASH_CMD_RDCR, &reg_val);
    96012e84:	9101bba2 	add	x2, x29, #0x6e
    96012e88:	528006a1 	mov	w1, #0x35                  	// #53
    96012e8c:	aa1403e0 	mov	x0, x20
    96012e90:	97fffbc8 	bl	96011db0 <qspi_read_reg>
    96012e94:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96012e98:	340000a0 	cbz	w0, 96012eac <qspi_flash_x4_enable_spansion+0x210>
			pr_error("RDCR cmd fail (err:0x%x)\n", err);
    96012e9c:	2a0003e1 	mov	w1, w0
    96012ea0:	b0000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96012ea4:	91019000 	add	x0, x0, #0x64
    96012ea8:	17ffff95 	b	96012cfc <qspi_flash_x4_enable_spansion+0x60>
	} while ((reg_val & QSPI_FLASH_QUAD_ENABLE) != input_cfg);
    96012eac:	3941bba0 	ldrb	w0, [x29, #110]
    96012eb0:	3941bfa1 	ldrb	w1, [x29, #111]
    96012eb4:	121f0000 	and	w0, w0, #0x2
    96012eb8:	6b00003f 	cmp	w1, w0
    96012ebc:	54fff521 	b.ne	96012d60 <qspi_flash_x4_enable_spansion+0xc4>  // b.any
	bquadset = bset;
    96012ec0:	b90a0ab6 	str	w22, [x21, #2568]
	err = qspi_write_en(hqfdi, false);
    96012ec4:	52800001 	mov	w1, #0x0                   	// #0
    96012ec8:	aa1403e0 	mov	x0, x20
    96012ecc:	97fffc68 	bl	9601206c <qspi_write_en>
    96012ed0:	2a0003f3 	mov	w19, w0
    96012ed4:	17ffff95 	b	96012d28 <qspi_flash_x4_enable_spansion+0x8c>

0000000096012ed8 <qspi_flash_page_512bytes_enable_spansion>:

#if !defined(CONFIG_DISABLE_QSPI_FLASH_WRITE_512B_PAGE)
tegrabl_error_t qspi_flash_page_512bytes_enable_spansion(struct tegrabl_qspi_flash_driver_info *hqfdi)
{
    96012ed8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	uint8_t reg_val;
	/* Do not error out if we fail to enable 512B page */
	/* programming buffer. Rest of the functionality still works. */
	pr_trace("Spansion: Request to set page size to 512B.\n");

	err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012edc:	52800081 	mov	w1, #0x4                   	// #4
    96012ee0:	72a01001 	movk	w1, #0x80, lsl #16
{
    96012ee4:	910003fd 	mov	x29, sp
    96012ee8:	a90153f3 	stp	x19, x20, [sp, #16]
	err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012eec:	9100bfa2 	add	x2, x29, #0x2f
{
    96012ef0:	aa0003f4 	mov	x20, x0
	err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012ef4:	97fffbaf 	bl	96011db0 <qspi_read_reg>
    96012ef8:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96012efc:	34000140 	cbz	w0, 96012f24 <qspi_flash_page_512bytes_enable_spansion+0x4c>
		pr_error("Read CR3V cmd failed, (err:0x%x)\n", err);
		return TEGRABL_NO_ERROR;
    96012f00:	52800013 	mov	w19, #0x0                   	// #0
		pr_error("Read CR3V cmd failed, (err:0x%x)\n", err);
    96012f04:	2a0003e1 	mov	w1, w0
    96012f08:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012f0c:	913bbc00 	add	x0, x0, #0xeef
    96012f10:	94003dd8 	bl	96022670 <tegrabl_printf>
			pr_error("CR3V cmd failed, (err:0x%x)\n", err);
		}
	}

	return err;
}
    96012f14:	2a1303e0 	mov	w0, w19
    96012f18:	a94153f3 	ldp	x19, x20, [sp, #16]
    96012f1c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96012f20:	d65f03c0 	ret
	reg_val |= (uint8_t) QSPI_FLASH_PAGE512_ENABLE;
    96012f24:	3940bfa0 	ldrb	w0, [x29, #47]
	err = qspi_write_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012f28:	52800081 	mov	w1, #0x4                   	// #4
    96012f2c:	9100bfa2 	add	x2, x29, #0x2f
    96012f30:	72a01001 	movk	w1, #0x80, lsl #16
	reg_val |= (uint8_t) QSPI_FLASH_PAGE512_ENABLE;
    96012f34:	321c0000 	orr	w0, w0, #0x10
    96012f38:	3900bfa0 	strb	w0, [x29, #47]
	err = qspi_write_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012f3c:	aa1403e0 	mov	x0, x20
    96012f40:	97fffd2a 	bl	960123e8 <qspi_write_reg>
	if (err != TEGRABL_NO_ERROR) {
    96012f44:	340000c0 	cbz	w0, 96012f5c <qspi_flash_page_512bytes_enable_spansion+0x84>
		pr_error("Write CR3V cmd failed, (err:0x%x)\n", err);
    96012f48:	2a0003e1 	mov	w1, w0
    96012f4c:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012f50:	913c5000 	add	x0, x0, #0xf14
			pr_error("CR3V cmd failed, (err:0x%x)\n", err);
    96012f54:	94003dc7 	bl	96022670 <tegrabl_printf>
    96012f58:	17ffffef 	b	96012f14 <qspi_flash_page_512bytes_enable_spansion+0x3c>
	err = qspi_writein_progress(hqfdi, QSPI_FLASH_WIP_WAIT_FOR_READY,
    96012f5c:	52800002 	mov	w2, #0x0                   	// #0
    96012f60:	52800001 	mov	w1, #0x0                   	// #0
    96012f64:	aa1403e0 	mov	x0, x20
    96012f68:	97fffbe1 	bl	96011eec <qspi_writein_progress>
    96012f6c:	2a0003f3 	mov	w19, w0
	if (err == TEGRABL_NO_ERROR) {
    96012f70:	35fffd20 	cbnz	w0, 96012f14 <qspi_flash_page_512bytes_enable_spansion+0x3c>
		err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012f74:	52800081 	mov	w1, #0x4                   	// #4
    96012f78:	9100bfa2 	add	x2, x29, #0x2f
    96012f7c:	72a01001 	movk	w1, #0x80, lsl #16
    96012f80:	aa1403e0 	mov	x0, x20
    96012f84:	97fffb8b 	bl	96011db0 <qspi_read_reg>
    96012f88:	2a0003f3 	mov	w19, w0
		if ((err == TEGRABL_NO_ERROR) &&
    96012f8c:	350000c0 	cbnz	w0, 96012fa4 <qspi_flash_page_512bytes_enable_spansion+0xcc>
    96012f90:	3940bfa0 	ldrb	w0, [x29, #47]
    96012f94:	36200080 	tbz	w0, #4, 96012fa4 <qspi_flash_page_512bytes_enable_spansion+0xcc>
			hqfdi->chip_info.page_write_size = 512;
    96012f98:	52804000 	mov	w0, #0x200                 	// #512
    96012f9c:	b9005280 	str	w0, [x20, #80]
    96012fa0:	17ffffdd 	b	96012f14 <qspi_flash_page_512bytes_enable_spansion+0x3c>
			pr_error("CR3V cmd failed, (err:0x%x)\n", err);
    96012fa4:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012fa8:	2a1303e1 	mov	w1, w19
    96012fac:	913ce800 	add	x0, x0, #0xf3a
    96012fb0:	17ffffe9 	b	96012f54 <qspi_flash_page_512bytes_enable_spansion+0x7c>

0000000096012fb4 <qspi_flash_blank_check_enable_spansion>:
#endif

tegrabl_error_t qspi_flash_blank_check_enable_spansion(struct tegrabl_qspi_flash_driver_info *hqfdi)
{
    96012fb4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	tegrabl_error_t err;
	uint8_t reg_val;
	/* Do not error out if we fail to enable BC */
	pr_trace("Spansion: Request to enable Blank Check on erase ...\n");

	err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012fb8:	52800081 	mov	w1, #0x4                   	// #4
    96012fbc:	72a01001 	movk	w1, #0x80, lsl #16
{
    96012fc0:	910003fd 	mov	x29, sp
    96012fc4:	a90153f3 	stp	x19, x20, [sp, #16]
	err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012fc8:	9100bfa2 	add	x2, x29, #0x2f
{
    96012fcc:	aa0003f4 	mov	x20, x0
	err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96012fd0:	97fffb78 	bl	96011db0 <qspi_read_reg>
    96012fd4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96012fd8:	34000140 	cbz	w0, 96013000 <qspi_flash_blank_check_enable_spansion+0x4c>
		pr_error("Read CR3V cmd failed, (err:0x%x)\n", err);
		return TEGRABL_NO_ERROR;
    96012fdc:	52800013 	mov	w19, #0x0                   	// #0
		pr_error("Read CR3V cmd failed, (err:0x%x)\n", err);
    96012fe0:	2a0003e1 	mov	w1, w0
    96012fe4:	90000160 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96012fe8:	913bbc00 	add	x0, x0, #0xeef
    96012fec:	94003da1 	bl	96022670 <tegrabl_printf>
			pr_error("CR3V: Blank Check enable failed, (err:0x%x)\n", err);
		}
	}

	return err;
}
    96012ff0:	2a1303e0 	mov	w0, w19
    96012ff4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96012ff8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96012ffc:	d65f03c0 	ret
	reg_val |= (uint8_t) QSPI_FLASH_BLANK_CHECK_ENABLE;
    96013000:	3940bfa0 	ldrb	w0, [x29, #47]
	err = qspi_write_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96013004:	52800081 	mov	w1, #0x4                   	// #4
    96013008:	9100bfa2 	add	x2, x29, #0x2f
    9601300c:	72a01001 	movk	w1, #0x80, lsl #16
	reg_val |= (uint8_t) QSPI_FLASH_BLANK_CHECK_ENABLE;
    96013010:	321b0000 	orr	w0, w0, #0x20
    96013014:	3900bfa0 	strb	w0, [x29, #47]
	err = qspi_write_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96013018:	aa1403e0 	mov	x0, x20
    9601301c:	97fffcf3 	bl	960123e8 <qspi_write_reg>
	if (err != TEGRABL_NO_ERROR) {
    96013020:	340000c0 	cbz	w0, 96013038 <qspi_flash_blank_check_enable_spansion+0x84>
		pr_error("Write CR3V cmd failed, (err:0x%x)\n", err);
    96013024:	2a0003e1 	mov	w1, w0
    96013028:	f0000140 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9601302c:	913c5000 	add	x0, x0, #0xf14
			pr_error("CR3V: Blank Check enable failed, (err:0x%x)\n", err);
    96013030:	94003d90 	bl	96022670 <tegrabl_printf>
    96013034:	17ffffef 	b	96012ff0 <qspi_flash_blank_check_enable_spansion+0x3c>
	err = qspi_writein_progress(hqfdi, QSPI_FLASH_WIP_WAIT_FOR_READY,
    96013038:	52800002 	mov	w2, #0x0                   	// #0
    9601303c:	52800001 	mov	w1, #0x0                   	// #0
    96013040:	aa1403e0 	mov	x0, x20
    96013044:	97fffbaa 	bl	96011eec <qspi_writein_progress>
    96013048:	2a0003f3 	mov	w19, w0
	if (err == TEGRABL_NO_ERROR) {
    9601304c:	35fffd20 	cbnz	w0, 96012ff0 <qspi_flash_blank_check_enable_spansion+0x3c>
		err = qspi_read_reg(hqfdi, QSPI_FLASH_REG_CR3V, &reg_val);
    96013050:	52800081 	mov	w1, #0x4                   	// #4
    96013054:	9100bfa2 	add	x2, x29, #0x2f
    96013058:	72a01001 	movk	w1, #0x80, lsl #16
    9601305c:	aa1403e0 	mov	x0, x20
    96013060:	97fffb54 	bl	96011db0 <qspi_read_reg>
    96013064:	2a0003f3 	mov	w19, w0
		if ((err == TEGRABL_NO_ERROR) &&
    96013068:	350000c0 	cbnz	w0, 96013080 <qspi_flash_blank_check_enable_spansion+0xcc>
    9601306c:	3940bfa0 	ldrb	w0, [x29, #47]
    96013070:	36280080 	tbz	w0, #5, 96013080 <qspi_flash_blank_check_enable_spansion+0xcc>
			hqfdi->chip_info.page_write_size = 512;
    96013074:	52804000 	mov	w0, #0x200                 	// #512
    96013078:	b9005280 	str	w0, [x20, #80]
    9601307c:	17ffffdd 	b	96012ff0 <qspi_flash_blank_check_enable_spansion+0x3c>
			pr_error("CR3V: Blank Check enable failed, (err:0x%x)\n", err);
    96013080:	f0000140 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    96013084:	2a1303e1 	mov	w1, w19
    96013088:	913afc00 	add	x0, x0, #0xebf
    9601308c:	17ffffe9 	b	96013030 <qspi_flash_blank_check_enable_spansion+0x7c>

0000000096013090 <qspi_flash_qpi_mode_enable_macronix>:

#if !defined(CONFIG_ENABLE_BLOCKDEV_BASIC)

tegrabl_error_t qspi_flash_qpi_mode_enable_macronix(struct tegrabl_qspi_flash_driver_info *hqfdi,
													bool benable)
{
    96013090:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	struct tegrabl_qspi_flash_chip_info *chip_info = &hqfdi->chip_info;
	struct tegrabl_qspi_transfer transfers;
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint8_t command;

	(void)memset(&transfers, 0, sizeof(transfers));
    96013094:	d2800902 	mov	x2, #0x48                  	// #72
{
    96013098:	910003fd 	mov	x29, sp
    9601309c:	a90153f3 	stp	x19, x20, [sp, #16]
    960130a0:	aa0003f3 	mov	x19, x0
    960130a4:	12001c34 	and	w20, w1, #0xff
	(void)memset(&transfers, 0, sizeof(transfers));
    960130a8:	9100a3a0 	add	x0, x29, #0x28
    960130ac:	52800001 	mov	w1, #0x0                   	// #0
    960130b0:	94005b5e 	bl	96029e28 <memset>

	if (benable) {
		command = QSPI_FLASH_CMD_EQIO;
    960130b4:	7100029f 	cmp	w20, #0x0
    960130b8:	12800140 	mov	w0, #0xfffffff5            	// #-11
    960130bc:	528006a1 	mov	w1, #0x35                  	// #53
    960130c0:	1a801021 	csel	w1, w1, w0, ne  // ne = any
    960130c4:	9101c3a0 	add	x0, x29, #0x70
	transfers.mode = QSPI_FLASH_CMD_MODE_VAL;
	transfers.bus_width = chip_info->qpi_bus_width;
	transfers.dummy_cycles = ZERO_CYCLES;
	transfers.op_mode = SDR_MODE;

	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers, 1,
    960130c8:	52896803 	mov	w3, #0x4b40                	// #19264
	transfers.write_len = QSPI_FLASH_COMMAND_WIDTH;
    960130cc:	d2800022 	mov	x2, #0x1                   	// #1
	transfers.mode = QSPI_FLASH_CMD_MODE_VAL;
    960130d0:	790073bf 	strh	wzr, [x29, #56]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers, 1,
    960130d4:	72a00983 	movk	w3, #0x4c, lsl #16
	transfers.write_len = QSPI_FLASH_COMMAND_WIDTH;
    960130d8:	f803c3a2 	stur	x2, [x29, #60]
		command = QSPI_FLASH_CMD_EQIO;
    960130dc:	381b7c01 	strb	w1, [x0, #-73]!
	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers, 1,
    960130e0:	9100a3a1 	add	x1, x29, #0x28
	transfers.dummy_cycles = ZERO_CYCLES;
    960130e4:	f804c3bf 	stur	xzr, [x29, #76]
	transfers.rx_buf = NULL;
    960130e8:	a902ffa0 	stp	x0, xzr, [x29, #40]
	transfers.bus_width = chip_info->qpi_bus_width;
    960130ec:	b9405660 	ldr	w0, [x19, #84]
    960130f0:	b9004ba0 	str	w0, [x29, #72]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers, 1,
    960130f4:	f9403260 	ldr	x0, [x19, #96]
    960130f8:	97fff780 	bl	96010ef8 <tegrabl_qspi_transaction>
    960130fc:	2a0003f3 	mov	w19, w0
								   QSPI_XFER_TIMEOUT);
	if (err != TEGRABL_NO_ERROR) {
    96013100:	34000160 	cbz	w0, 9601312c <qspi_flash_qpi_mode_enable_macronix+0x9c>
		pr_error("Macronix QPI %s failed, (err:0x%x)\n", benable ? "enable" : "disable", err);
    96013104:	7100029f 	cmp	w20, #0x0
    96013108:	f0000140 	adrp	x0, 9603e000 <tca9539_chips+0x378>
    9601310c:	d0000141 	adrp	x1, 9603d000 <__func__.3609+0x209>
    96013110:	91301400 	add	x0, x0, #0xc05
    96013114:	91135021 	add	x1, x1, #0x4d4
    96013118:	2a1303e2 	mov	w2, w19
    9601311c:	9a801021 	csel	x1, x1, x0, ne  // ne = any
    96013120:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013124:	91029800 	add	x0, x0, #0xa6
    96013128:	94003d52 	bl	96022670 <tegrabl_printf>

	pr_trace("Macronix QPI %s\n", benable ? "enabled" : "disabled");

exit:
	return err;
}
    9601312c:	2a1303e0 	mov	w0, w19
    96013130:	a94153f3 	ldp	x19, x20, [sp, #16]
    96013134:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96013138:	d65f03c0 	ret

000000009601313c <qspi_flash_get_size_macronix>:

#endif

tegrabl_error_t qspi_flash_get_size_macronix(struct tegrabl_qspi_flash_driver_info *hqfdi)
{
    9601313c:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
	uint8_t size_log2 = 0;
	uint8_t command = QSPI_FLASH_CMD_RSFDP;
	/* 3-byte address for getting size from SFDP table. MSB first */
	uint8_t addr[3] = {0, 0, QSPI_FLASH_SFDP_SIZE_LOC_MACRONIX};

	(void)memset(&transfers, 0, sizeof(transfers));
    96013140:	d2801b02 	mov	x2, #0xd8                  	// #216
    96013144:	52800001 	mov	w1, #0x0                   	// #0
{
    96013148:	910003fd 	mov	x29, sp
    9601314c:	f90013f5 	str	x21, [sp, #32]
    96013150:	aa0003f5 	mov	x21, x0
	uint8_t command = QSPI_FLASH_CMD_RSFDP;
    96013154:	52800b40 	mov	w0, #0x5a                  	// #90
{
    96013158:	a90153f3 	stp	x19, x20, [sp, #16]
	uint8_t command = QSPI_FLASH_CMD_RSFDP;
    9601315c:	3900ffa0 	strb	w0, [x29, #63]
	uint8_t addr[3] = {0, 0, QSPI_FLASH_SFDP_SIZE_LOC_MACRONIX};
    96013160:	52800680 	mov	w0, #0x34                  	// #52
    96013164:	790083bf 	strh	wzr, [x29, #64]

	/* Sending read SFDP parameters command */
	transfers[0].tx_buf = &command;
	transfers[0].rx_buf = NULL;
	transfers[0].write_len = 1;
    96013168:	d2800033 	mov	x19, #0x1                   	// #1
	uint8_t addr[3] = {0, 0, QSPI_FLASH_SFDP_SIZE_LOC_MACRONIX};
    9601316c:	39010ba0 	strb	w0, [x29, #66]
	(void)memset(&transfers, 0, sizeof(transfers));
    96013170:	910123a0 	add	x0, x29, #0x48
    96013174:	94005b2d 	bl	96029e28 <memset>
	transfers[0].read_len = 0;
	transfers[0].mode = QSPI_FLASH_CMD_MODE_VAL;
    96013178:	7900b3bf 	strh	wzr, [x29, #88]
	transfers[0].tx_buf = &command;
    9601317c:	9100ffa0 	add	x0, x29, #0x3f
	transfers[0].rx_buf = NULL;
    96013180:	a904ffa0 	stp	x0, xzr, [x29, #72]
	transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
	transfers[0].dummy_cycles = ZERO_CYCLES;
	transfers[0].op_mode = SDR_MODE;

	/* Sending address of 'device size' parameter in SFDP table */
	transfers[1].tx_buf = &addr[0];
    96013184:	910103a0 	add	x0, x29, #0x40
    96013188:	f9004ba0 	str	x0, [x29, #144]
	transfers[1].rx_buf = NULL;
	transfers[1].write_len = 3;
	transfers[1].read_len = 0;
	transfers[1].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
	transfers[1].bus_width = QSPI_BUS_WIDTH_X1;
    9601318c:	d2c00100 	mov	x0, #0x800000000           	// #34359738368
    96013190:	f9005ba0 	str	x0, [x29, #176]
	transfers[1].dummy_cycles = EIGHT_CYCLES;
	transfers[1].op_mode = SDR_MODE;

	/* Read the 4-byte value of size parameter */
	transfers[2].tx_buf = NULL;
	transfers[2].rx_buf = (uint8_t *)&device_size;
    96013194:	910113a0 	add	x0, x29, #0x44
    96013198:	f90073a0 	str	x0, [x29, #224]
	transfers[2].write_len = 0;
    9601319c:	d2c00080 	mov	x0, #0x400000000           	// #17179869184
    960131a0:	f80ec3a0 	stur	x0, [x29, #236]
	transfers[2].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
	transfers[2].bus_width = QSPI_BUS_WIDTH_X1;
	transfers[2].dummy_cycles = ZERO_CYCLES;
	transfers[2].op_mode = SDR_MODE;

	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], QSPI_FLASH_NUM_OF_TRANSFERS,
    960131a4:	f94032a0 	ldr	x0, [x21, #96]
    960131a8:	52896803 	mov	w3, #0x4b40                	// #19264
	transfers[1].write_len = 3;
    960131ac:	d2800062 	mov	x2, #0x3                   	// #3
	transfers[0].write_len = 1;
    960131b0:	f805c3b3 	stur	x19, [x29, #92]
	transfers[1].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
    960131b4:	790143bf 	strh	wzr, [x29, #160]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], QSPI_FLASH_NUM_OF_TRANSFERS,
    960131b8:	72a00983 	movk	w3, #0x4c, lsl #16
	transfers[2].tx_buf = NULL;
    960131bc:	f9006fbf 	str	xzr, [x29, #216]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], QSPI_FLASH_NUM_OF_TRANSFERS,
    960131c0:	910123a1 	add	x1, x29, #0x48
	transfers[0].bus_width = QSPI_BUS_WIDTH_X1;
    960131c4:	f90037bf 	str	xzr, [x29, #104]
	transfers[0].dummy_cycles = ZERO_CYCLES;
    960131c8:	b90073bf 	str	wzr, [x29, #112]
	transfers[1].rx_buf = NULL;
    960131cc:	f9004fbf 	str	xzr, [x29, #152]
	transfers[1].write_len = 3;
    960131d0:	f80a43a2 	stur	x2, [x29, #164]
	transfers[1].dummy_cycles = EIGHT_CYCLES;
    960131d4:	b900bbbf 	str	wzr, [x29, #184]
	transfers[2].mode = QSPI_FLASH_ADDR_DATA_MODE_VAL;
    960131d8:	7901d3bf 	strh	wzr, [x29, #232]
	transfers[2].bus_width = QSPI_BUS_WIDTH_X1;
    960131dc:	f9007fbf 	str	xzr, [x29, #248]
	transfers[2].dummy_cycles = ZERO_CYCLES;
    960131e0:	b90103bf 	str	wzr, [x29, #256]
	err = tegrabl_qspi_transaction(hqfdi->hqspi, &transfers[0], QSPI_FLASH_NUM_OF_TRANSFERS,
    960131e4:	97fff745 	bl	96010ef8 <tegrabl_qspi_transaction>
    960131e8:	2a0003f4 	mov	w20, w0
									QSPI_XFER_TIMEOUT);

	if (err != TEGRABL_NO_ERROR) {
    960131ec:	34000140 	cbz	w0, 96013214 <qspi_flash_get_size_macronix+0xd8>
		pr_error("Error(%x) reading SFDP parameter\n", err);
    960131f0:	2a0003e1 	mov	w1, w0
    960131f4:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960131f8:	91020400 	add	x0, x0, #0x81
    960131fc:	94003d1d 	bl	96022670 <tegrabl_printf>

	hqfdi->chip_info.flash_size_log2 = size_log2;

exit:
	return err;
}
    96013200:	2a1403e0 	mov	w0, w20
    96013204:	f94013f5 	ldr	x21, [sp, #32]
    96013208:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601320c:	a8d27bfd 	ldp	x29, x30, [sp], #288
    96013210:	d65f03c0 	ret
	device_size += 1u;
    96013214:	b94047a0 	ldr	w0, [x29, #68]
	device_size >>= BITS_TO_BYTES_SHIFT_FACTOR;
    96013218:	528000a3 	mov	w3, #0x5                   	// #5
	uint8_t size_log2 = 0;
    9601321c:	52800001 	mov	w1, #0x0                   	// #0
	for (i = 16u; i >= 1u; i /= 2u) {
    96013220:	52800202 	mov	w2, #0x10                  	// #16
	device_size += 1u;
    96013224:	11000400 	add	w0, w0, #0x1
	device_size >>= BITS_TO_BYTES_SHIFT_FACTOR;
    96013228:	53037c00 	lsr	w0, w0, #3
		compare_val = (1UL << i);
    9601322c:	9ac22264 	lsl	x4, x19, x2
		if (device_size >= compare_val) {
    96013230:	6b04001f 	cmp	w0, w4
    96013234:	54000083 	b.cc	96013244 <qspi_flash_get_size_macronix+0x108>  // b.lo, b.ul, b.last
			size_log2 += i;
    96013238:	0b010041 	add	w1, w2, w1
			device_size >>= i;
    9601323c:	1ac22400 	lsr	w0, w0, w2
			size_log2 += i;
    96013240:	12001c21 	and	w1, w1, #0xff
	for (i = 16u; i >= 1u; i /= 2u) {
    96013244:	53017c42 	lsr	w2, w2, #1
    96013248:	71000463 	subs	w3, w3, #0x1
    9601324c:	54ffff01 	b.ne	9601322c <qspi_flash_get_size_macronix+0xf0>  // b.any
	hqfdi->chip_info.flash_size_log2 = size_log2;
    96013250:	b9002ea1 	str	w1, [x21, #44]
	return err;
    96013254:	17ffffeb 	b	96013200 <qspi_flash_get_size_macronix+0xc4>

0000000096013258 <is_fixed_batt_connection>:

/* global fdt handle */
static void *fdt;

static inline bool is_fixed_batt_connection(int32_t phandle)
{
    96013258:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	const char *reg_name;
	int32_t reg_node_offset = 0;
	bool result = false;

	reg_node_offset = fdt_node_offset_by_phandle(fdt, phandle);
    9601325c:	2a0003e1 	mov	w1, w0
{
    96013260:	910003fd 	mov	x29, sp
    96013264:	f9000bf3 	str	x19, [sp, #16]
	reg_node_offset = fdt_node_offset_by_phandle(fdt, phandle);
    96013268:	f00002d3 	adrp	x19, 9606e000 <__bss_start>
    9601326c:	f9450a60 	ldr	x0, [x19, #2576]
    96013270:	94007cc4 	bl	96032580 <fdt_node_offset_by_phandle>

	/* Check if the node points to ac-bat */
	reg_name = fdt_getprop(fdt, reg_node_offset, "regulator-name", NULL);
    96013274:	2a0003e1 	mov	w1, w0
    96013278:	f9450a60 	ldr	x0, [x19, #2576]
    9601327c:	f0000142 	adrp	x2, 9603e000 <tca9539_chips+0x378>
    96013280:	9111cc42 	add	x2, x2, #0x473
    96013284:	d2800003 	mov	x3, #0x0                   	// #0
    96013288:	94007b60 	bl	96032008 <fdt_getprop>
	if (strcmp(reg_name, "vdd-ac-bat") == TEGRABL_NO_ERROR) {
    9601328c:	90000161 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    96013290:	91033421 	add	x1, x1, #0xcd
    96013294:	94005bee 	bl	9602a24c <strcmp>
    96013298:	7100001f 	cmp	w0, #0x0
		pr_debug("%s(%x) = TRUE\n", __func__, phandle);
		result = true;
	}

	return result;
}
    9601329c:	1a9f17e0 	cset	w0, eq  // eq = none
    960132a0:	f9400bf3 	ldr	x19, [sp, #16]
    960132a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960132a8:	d65f03c0 	ret

00000000960132ac <regulator_lookup>:
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	bool found = false;

	pr_debug("regulator lookup with phandle 0x%x\n", phandle);
	list_for_every_entry(&regulators, *entry, tegrabl_regulator_t, node) {
    960132ac:	f00002c2 	adrp	x2, 9606e000 <__bss_start>
    960132b0:	91288042 	add	x2, x2, #0xa20
    960132b4:	f9400443 	ldr	x3, [x2, #8]
    960132b8:	f9000023 	str	x3, [x1]
    960132bc:	f9400023 	ldr	x3, [x1]
    960132c0:	eb02007f 	cmp	x3, x2
    960132c4:	54000141 	b.ne	960132ec <regulator_lookup+0x40>  // b.any
{
    960132c8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
			break;
		}
	}

	if (!found) {
		pr_error("could not find regulator\n");
    960132cc:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960132d0:	91036000 	add	x0, x0, #0xd8
{
    960132d4:	910003fd 	mov	x29, sp
		pr_error("could not find regulator\n");
    960132d8:	94003ce6 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    960132dc:	528001a0 	mov	w0, #0xd                   	// #13
    960132e0:	72aaeae0 	movk	w0, #0x5757, lsl #16

	pr_debug("regulator found '%s'\n", (*entry)->name);

fail:
	return err;
}
    960132e4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960132e8:	d65f03c0 	ret
		if ((*entry)->phandle == phandle) {
    960132ec:	b9401064 	ldr	w4, [x3, #16]
    960132f0:	6b00009f 	cmp	w4, w0
    960132f4:	54000060 	b.eq	96013300 <regulator_lookup+0x54>  // b.none
	list_for_every_entry(&regulators, *entry, tegrabl_regulator_t, node) {
    960132f8:	f9400463 	ldr	x3, [x3, #8]
    960132fc:	17ffffef 	b	960132b8 <regulator_lookup+0xc>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96013300:	52800000 	mov	w0, #0x0                   	// #0
}
    96013304:	d65f03c0 	ret

0000000096013308 <tegrabl_regulator_is_fixed>:
tegrabl_error_t tegrabl_regulator_is_fixed(int32_t phandle, bool *is_fixed)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	tegrabl_regulator_t *entry;

	if (!phandle) {
    96013308:	34000300 	cbz	w0, 96013368 <tegrabl_regulator_is_fixed+0x60>
{
    9601330c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96013310:	910003fd 	mov	x29, sp
    96013314:	a90153f3 	stp	x19, x20, [sp, #16]
    96013318:	2a0003f4 	mov	w20, w0
    9601331c:	aa0103f3 	mov	x19, x1
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
		goto fail;
	}

	if (is_fixed_batt_connection(phandle) == true) {
    96013320:	97ffffce 	bl	96013258 <is_fixed_batt_connection>
    96013324:	72001c1f 	tst	w0, #0xff
    96013328:	540000e0 	b.eq	96013344 <tegrabl_regulator_is_fixed+0x3c>  // b.none
		pr_debug("%s not needed for requested rail\n", __func__);
		*is_fixed = true;
    9601332c:	52800020 	mov	w0, #0x1                   	// #1
    96013330:	39000260 	strb	w0, [x19]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96013334:	52800000 	mov	w0, #0x0                   	// #0
	else
		*is_fixed = false;

fail:
	return err;
}
    96013338:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601333c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96013340:	d65f03c0 	ret
	if (regulator_lookup(phandle, &entry) != TEGRABL_NO_ERROR) {
    96013344:	9100a3a1 	add	x1, x29, #0x28
    96013348:	2a1403e0 	mov	w0, w20
    9601334c:	97ffffd8 	bl	960132ac <regulator_lookup>
    96013350:	35000120 	cbnz	w0, 96013374 <tegrabl_regulator_is_fixed+0x6c>
	if (entry->is_fixed)
    96013354:	f94017a0 	ldr	x0, [x29, #40]
    96013358:	3940a000 	ldrb	w0, [x0, #40]
    9601335c:	35fffe80 	cbnz	w0, 9601332c <tegrabl_regulator_is_fixed+0x24>
		*is_fixed = false;
    96013360:	3900027f 	strb	wzr, [x19]
    96013364:	17fffff5 	b	96013338 <tegrabl_regulator_is_fixed+0x30>
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    96013368:	52800540 	mov	w0, #0x2a                  	// #42
    9601336c:	72aaeae0 	movk	w0, #0x5757, lsl #16
}
    96013370:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96013374:	528001a0 	mov	w0, #0xd                   	// #13
    96013378:	72aaeae0 	movk	w0, #0x5757, lsl #16
	return err;
    9601337c:	17ffffef 	b	96013338 <tegrabl_regulator_is_fixed+0x30>

0000000096013380 <tegrabl_regulator_enable>:
tegrabl_error_t tegrabl_regulator_enable(int32_t phandle)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	tegrabl_regulator_t *entry;

	if (!phandle) {
    96013380:	34000560 	cbz	w0, 9601342c <tegrabl_regulator_enable+0xac>
{
    96013384:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96013388:	910003fd 	mov	x29, sp
    9601338c:	f9000bf3 	str	x19, [sp, #16]
    96013390:	2a0003f3 	mov	w19, w0
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
		goto fail;
	}

	if (is_fixed_batt_connection(phandle) == true) {
    96013394:	97ffffb1 	bl	96013258 <is_fixed_batt_connection>
    96013398:	72001c1f 	tst	w0, #0xff
    9601339c:	54000181 	b.ne	960133cc <tegrabl_regulator_enable+0x4c>  // b.any
		pr_debug("%s not needed for requested rail\n", __func__);
		goto fail;
	}

	/* find the regulator in the list */
	if (regulator_lookup(phandle, &entry) != TEGRABL_NO_ERROR) {
    960133a0:	9100a3a1 	add	x1, x29, #0x28
    960133a4:	2a1303e0 	mov	w0, w19
    960133a8:	97ffffc1 	bl	960132ac <regulator_lookup>
    960133ac:	35000360 	cbnz	w0, 96013418 <tegrabl_regulator_enable+0x98>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
		goto fail;
	}

	/* check if its already enabled */
	if (entry->is_enabled) {
    960133b0:	f94017a1 	ldr	x1, [x29, #40]
    960133b4:	3940a420 	ldrb	w0, [x1, #41]
    960133b8:	340000e0 	cbz	w0, 960133d4 <tegrabl_regulator_enable+0x54>
		pr_info("regulator '%s' already enabled\n", entry->name);
    960133bc:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960133c0:	91005021 	add	x1, x1, #0x14
    960133c4:	9103d400 	add	x0, x0, #0xf5
    960133c8:	94003caa 	bl	96022670 <tegrabl_printf>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    960133cc:	52800000 	mov	w0, #0x0                   	// #0
	} else {
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
	}

fail:
	return err;
    960133d0:	1400000f 	b	9601340c <tegrabl_regulator_enable+0x8c>
	if (entry->enable) {
    960133d4:	f9401820 	ldr	x0, [x1, #48]
    960133d8:	b4000260 	cbz	x0, 96013424 <tegrabl_regulator_enable+0xa4>
		pr_info("enabling '%s' regulator\n", entry->name);
    960133dc:	91005021 	add	x1, x1, #0x14
    960133e0:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960133e4:	91046000 	add	x0, x0, #0x118
    960133e8:	94003ca2 	bl	96022670 <tegrabl_printf>
		err = entry->enable(entry->phandle);
    960133ec:	f94017a0 	ldr	x0, [x29, #40]
    960133f0:	f9401801 	ldr	x1, [x0, #48]
    960133f4:	b9401000 	ldr	w0, [x0, #16]
    960133f8:	d63f0020 	blr	x1
		if (err == TEGRABL_NO_ERROR)
    960133fc:	35000080 	cbnz	w0, 9601340c <tegrabl_regulator_enable+0x8c>
			entry->is_enabled = true;
    96013400:	f94017a1 	ldr	x1, [x29, #40]
    96013404:	52800022 	mov	w2, #0x1                   	// #1
    96013408:	3900a422 	strb	w2, [x1, #41]
}
    9601340c:	f9400bf3 	ldr	x19, [sp, #16]
    96013410:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96013414:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96013418:	528001a0 	mov	w0, #0xd                   	// #13
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601341c:	72aaeae0 	movk	w0, #0x5757, lsl #16
    96013420:	17fffffb 	b	9601340c <tegrabl_regulator_enable+0x8c>
    96013424:	52800020 	mov	w0, #0x1                   	// #1
    96013428:	17fffffd 	b	9601341c <tegrabl_regulator_enable+0x9c>
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    9601342c:	52800540 	mov	w0, #0x2a                  	// #42
    96013430:	72aaeae0 	movk	w0, #0x5757, lsl #16
}
    96013434:	d65f03c0 	ret

0000000096013438 <tegrabl_regulator_set_voltage>:
					regulator_volt_type volt_type)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	tegrabl_regulator_t *entry;

	if (!phandle) {
    96013438:	34000600 	cbz	w0, 960134f8 <tegrabl_regulator_set_voltage+0xc0>
{
    9601343c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96013440:	910003fd 	mov	x29, sp
    96013444:	a90153f3 	stp	x19, x20, [sp, #16]
    96013448:	2a0003f4 	mov	w20, w0
    9601344c:	f90013f5 	str	x21, [sp, #32]
    96013450:	2a0103f3 	mov	w19, w1
    96013454:	2a0203f5 	mov	w21, w2
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
		goto fail;
	}

	if (is_fixed_batt_connection(phandle) == true) {
    96013458:	97ffff80 	bl	96013258 <is_fixed_batt_connection>
    9601345c:	72001c1f 	tst	w0, #0xff
    96013460:	54000521 	b.ne	96013504 <tegrabl_regulator_set_voltage+0xcc>  // b.any
		pr_debug("%s not needed for requested rail\n", __func__);
		goto fail;
	}

	/* find the regulator in the list */
	if (regulator_lookup(phandle, &entry) != TEGRABL_NO_ERROR) {
    96013464:	9100e3a1 	add	x1, x29, #0x38
    96013468:	2a1403e0 	mov	w0, w20
    9601346c:	97ffff90 	bl	960132ac <regulator_lookup>
    96013470:	350004e0 	cbnz	w0, 9601350c <tegrabl_regulator_set_voltage+0xd4>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
		goto fail;
	}

	/* check if its a fixed regulator */
	if (entry->is_fixed) {
    96013474:	f9401fa1 	ldr	x1, [x29, #56]
    96013478:	3940a020 	ldrb	w0, [x1, #40]
    9601347c:	340000e0 	cbz	w0, 96013498 <tegrabl_regulator_set_voltage+0x60>
		pr_debug("Cannot fine tune volt for fixed-regulator;");
		pr_debug("Enabling '%s'\n", entry->name);
		err = tegrabl_regulator_enable(phandle);
    96013480:	2a1403e0 	mov	w0, w20
    96013484:	97ffffbf 	bl	96013380 <tegrabl_regulator_enable>
		goto fail;
	}

fail:
	return err;
}
    96013488:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601348c:	f94013f5 	ldr	x21, [sp, #32]
    96013490:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96013494:	d65f03c0 	ret
	if (volt_type == STANDARD_VOLTS) {
    96013498:	710006bf 	cmp	w21, #0x1
    9601349c:	54000141 	b.ne	960134c4 <tegrabl_regulator_set_voltage+0x8c>  // b.any
		if (entry->set_volts) {
    960134a0:	b9402c33 	ldr	w19, [x1, #44]
    960134a4:	35000113 	cbnz	w19, 960134c4 <tegrabl_regulator_set_voltage+0x8c>
			pr_warn("set volts not configured for '%s'\n", entry->name);
    960134a8:	91005021 	add	x1, x1, #0x14
    960134ac:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960134b0:	9105dc00 	add	x0, x0, #0x177
    960134b4:	94003c6f 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 2);
    960134b8:	52804020 	mov	w0, #0x201                 	// #513
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960134bc:	72aaeae0 	movk	w0, #0x5757, lsl #16
	return err;
    960134c0:	17fffff2 	b	96013488 <tegrabl_regulator_set_voltage+0x50>
	if (entry->set_voltage) {
    960134c4:	f9402020 	ldr	x0, [x1, #64]
    960134c8:	b4000260 	cbz	x0, 96013514 <tegrabl_regulator_set_voltage+0xdc>
		pr_info("setting '%s' regulator to %u micro volts\n",
    960134cc:	2a1303e2 	mov	w2, w19
    960134d0:	91005021 	add	x1, x1, #0x14
    960134d4:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960134d8:	91067400 	add	x0, x0, #0x19d
    960134dc:	94003c65 	bl	96022670 <tegrabl_printf>
		err = entry->set_voltage(entry->phandle, volts);
    960134e0:	f9401fa0 	ldr	x0, [x29, #56]
    960134e4:	2a1303e1 	mov	w1, w19
    960134e8:	f9402002 	ldr	x2, [x0, #64]
    960134ec:	b9401000 	ldr	w0, [x0, #16]
    960134f0:	d63f0040 	blr	x2
fail:
    960134f4:	17ffffe5 	b	96013488 <tegrabl_regulator_set_voltage+0x50>
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    960134f8:	52800540 	mov	w0, #0x2a                  	// #42
    960134fc:	72aaeae0 	movk	w0, #0x5757, lsl #16
}
    96013500:	d65f03c0 	ret
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96013504:	52800000 	mov	w0, #0x0                   	// #0
    96013508:	17ffffe0 	b	96013488 <tegrabl_regulator_set_voltage+0x50>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9601350c:	528001a0 	mov	w0, #0xd                   	// #13
    96013510:	17ffffeb 	b	960134bc <tegrabl_regulator_set_voltage+0x84>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96013514:	52800040 	mov	w0, #0x2                   	// #2
    96013518:	17ffffe9 	b	960134bc <tegrabl_regulator_set_voltage+0x84>

000000009601351c <tegrabl_regulator_register>:
 *
 * @param regulator pointer to regulator_t.
 * @return NO_ERROR on success otherwise error.
 */
tegrabl_error_t tegrabl_regulator_register(tegrabl_regulator_t *regulator)
{
    9601351c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96013520:	910003fd 	mov	x29, sp
    96013524:	f9000bf3 	str	x19, [sp, #16]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	tegrabl_regulator_t *entry;
	bool duplicate = false;

	if (regulator == NULL) {
    96013528:	b4000460 	cbz	x0, 960135b4 <tegrabl_regulator_register+0x98>
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
		goto fail;
	}

	/* check if duplicate */
	list_for_every_entry(&regulators, entry, tegrabl_regulator_t, node) {
    9601352c:	f00002c1 	adrp	x1, 9606e000 <__bss_start>
    96013530:	91288021 	add	x1, x1, #0xa20
    96013534:	aa0003f3 	mov	x19, x0
    96013538:	f9400422 	ldr	x2, [x1, #8]
    9601353c:	aa0203e0 	mov	x0, x2
    96013540:	eb01001f 	cmp	x0, x1
    96013544:	54000141 	b.ne	9601356c <tegrabl_regulator_register+0x50>  // b.any
	item->next = list->next;
    96013548:	a9000a60 	stp	x0, x2, [x19]
	list->next->prev = item;
    9601354c:	f9400401 	ldr	x1, [x0, #8]
    96013550:	f9000033 	str	x19, [x1]
	list->next = item;
    96013554:	f9000413 	str	x19, [x0, #8]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96013558:	52800013 	mov	w19, #0x0                   	// #0

fail:
	if (err != TEGRABL_NO_ERROR)
		pr_info("regulator register failed");
	return err;
}
    9601355c:	2a1303e0 	mov	w0, w19
    96013560:	f9400bf3 	ldr	x19, [sp, #16]
    96013564:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96013568:	d65f03c0 	ret
		if (entry->phandle == regulator->phandle) {
    9601356c:	b9401004 	ldr	w4, [x0, #16]
    96013570:	b9401263 	ldr	w3, [x19, #16]
    96013574:	6b03009f 	cmp	w4, w3
    96013578:	540001a1 	b.ne	960135ac <tegrabl_regulator_register+0x90>  // b.any
			pr_info("regulator \"%s\" already registered\n",
    9601357c:	91005261 	add	x1, x19, #0x14
    96013580:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013584:	9104d000 	add	x0, x0, #0x134
    96013588:	94003c3a 	bl	96022670 <tegrabl_printf>
			tegrabl_free(regulator);
    9601358c:	aa1303e0 	mov	x0, x19
		err = TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0);
    96013590:	52800433 	mov	w19, #0x21                  	// #33
			tegrabl_free(regulator);
    96013594:	94004d49 	bl	96026ab8 <tegrabl_free>
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    96013598:	72aaeaf3 	movk	w19, #0x5757, lsl #16
		pr_info("regulator register failed");
    9601359c:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960135a0:	91056800 	add	x0, x0, #0x15a
    960135a4:	94003c33 	bl	96022670 <tegrabl_printf>
	return err;
    960135a8:	17ffffed 	b	9601355c <tegrabl_regulator_register+0x40>
	list_for_every_entry(&regulators, entry, tegrabl_regulator_t, node) {
    960135ac:	f9400400 	ldr	x0, [x0, #8]
    960135b0:	17ffffe4 	b	96013540 <tegrabl_regulator_register+0x24>
		err = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    960135b4:	52800553 	mov	w19, #0x2a                  	// #42
    960135b8:	17fffff8 	b	96013598 <tegrabl_regulator_register+0x7c>

00000000960135bc <tegrabl_regulator_init>:

/**
 * @brief api to init the regulator list
 */
tegrabl_error_t tegrabl_regulator_init(void)
{
    960135bc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    960135c0:	f00002c1 	adrp	x1, 9606e000 <__bss_start>
    960135c4:	52800000 	mov	w0, #0x0                   	// #0
    960135c8:	91284021 	add	x1, x1, #0xa10
{
    960135cc:	910003fd 	mov	x29, sp
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    960135d0:	94007622 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    960135d4:	350000e0 	cbnz	w0, 960135f0 <tegrabl_regulator_init+0x34>
	list->prev = list->next = list;
    960135d8:	f00002c1 	adrp	x1, 9606e000 <__bss_start>
    960135dc:	91288020 	add	x0, x1, #0xa20
    960135e0:	f9051020 	str	x0, [x1, #2592]
    960135e4:	f9000400 	str	x0, [x0, #8]
	pr_debug("regulator framework initialized\n");
	err = tegrabl_fixed_regulator_init();

fail:
	return err;
}
    960135e8:	a8c17bfd 	ldp	x29, x30, [sp], #16
	err = tegrabl_fixed_regulator_init();
    960135ec:	1400007c 	b	960137dc <tegrabl_fixed_regulator_init>
    960135f0:	12005c00 	and	w0, w0, #0xffffff
    960135f4:	52aae001 	mov	w1, #0x57000000            	// #1459617792
}
    960135f8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960135fc:	2a010000 	orr	w0, w0, w1
    96013600:	d65f03c0 	ret

0000000096013604 <fixed_regulator_lookup>:
											  struct fixed_regulator_t **entry)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	bool found = false;

	list_for_every_entry(&fixed_regulators, *entry,
    96013604:	f00002c2 	adrp	x2, 9606e000 <__bss_start>
    96013608:	9128c042 	add	x2, x2, #0xa30
    9601360c:	f9400443 	ldr	x3, [x2, #8]
    96013610:	f9000023 	str	x3, [x1]
    96013614:	f9400023 	ldr	x3, [x1]
    96013618:	eb02007f 	cmp	x3, x2
    9601361c:	54000141 	b.ne	96013644 <fixed_regulator_lookup+0x40>  // b.any
{
    96013620:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
			break;
		}
	}

	if (!found) {
		pr_critical("could not find fixed regulator\n");
    96013624:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013628:	91072800 	add	x0, x0, #0x1ca
{
    9601362c:	910003fd 	mov	x29, sp
		pr_critical("could not find fixed regulator\n");
    96013630:	94003c10 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96013634:	528001a0 	mov	w0, #0xd                   	// #13
    96013638:	72aaeae0 	movk	w0, #0x5757, lsl #16
	pr_debug("fixed regulator found for 0x%x with gpio phandle 0x%x\n",
			 (*entry)->phandle, (*entry)->gpio_phandle);

fail:
	return err;
}
    9601363c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96013640:	d65f03c0 	ret
		if ((*entry)->phandle == phandle) {
    96013644:	b9401064 	ldr	w4, [x3, #16]
    96013648:	6b00009f 	cmp	w4, w0
    9601364c:	54000060 	b.eq	96013658 <fixed_regulator_lookup+0x54>  // b.none
	list_for_every_entry(&fixed_regulators, *entry,
    96013650:	f9400463 	ldr	x3, [x3, #8]
    96013654:	17ffffef 	b	96013610 <fixed_regulator_lookup+0xc>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96013658:	52800000 	mov	w0, #0x0                   	// #0
}
    9601365c:	d65f03c0 	ret

0000000096013660 <fixed_regulator_enable>:

static tegrabl_error_t fixed_regulator_enable(int32_t phandle)
{
    96013660:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96013664:	910003fd 	mov	x29, sp
    96013668:	f9000bf3 	str	x19, [sp, #16]
#if defined(CONFIG_ENABLE_GPIO_DT_BASED)
	uint32_t chipid;
#endif

	/* find the regulator in the list */
	err = fixed_regulator_lookup(phandle, &entry);
    9601366c:	9100c3a1 	add	x1, x29, #0x30
	bool is_fixed = false;
    96013670:	3900afbf 	strb	wzr, [x29, #43]
	err = fixed_regulator_lookup(phandle, &entry);
    96013674:	97ffffe4 	bl	96013604 <fixed_regulator_lookup>
	if (err !=  TEGRABL_NO_ERROR) {
    96013678:	35000620 	cbnz	w0, 9601373c <fixed_regulator_enable+0xdc>
		goto fail;
	}

	/* enable input supply voltage */
	if (entry->supply_phandle) {
    9601367c:	f9401ba0 	ldr	x0, [x29, #48]
    96013680:	b9401400 	ldr	w0, [x0, #20]
    96013684:	34000120 	cbz	w0, 960136a8 <fixed_regulator_enable+0x48>
		err = tegrabl_regulator_is_fixed(entry->supply_phandle, &is_fixed);
    96013688:	9100afa1 	add	x1, x29, #0x2b
    9601368c:	97ffff1f 	bl	96013308 <tegrabl_regulator_is_fixed>
		if (err != TEGRABL_NO_ERROR) {
    96013690:	35000560 	cbnz	w0, 9601373c <fixed_regulator_enable+0xdc>
			goto fail;
		}

		if (is_fixed) {
    96013694:	3940afa1 	ldrb	w1, [x29, #43]
    96013698:	f9401ba0 	ldr	x0, [x29, #48]
    9601369c:	b9401400 	ldr	w0, [x0, #20]
    960136a0:	34000421 	cbz	w1, 96013724 <fixed_regulator_enable+0xc4>
			tegrabl_regulator_enable(entry->supply_phandle);
		} else {
			tegrabl_regulator_set_voltage(entry->supply_phandle, 0,
										  STANDARD_VOLTS);
			tegrabl_regulator_enable(entry->supply_phandle);
    960136a4:	97ffff37 	bl	96013380 <tegrabl_regulator_enable>
		}
	}

#if defined(CONFIG_ENABLE_GPIO_DT_BASED)
	err = tegrabl_gpio_get_chipid_with_phandle(entry->gpio_phandle, &chipid);
    960136a8:	f9401ba0 	ldr	x0, [x29, #48]
    960136ac:	9100b3a1 	add	x1, x29, #0x2c
    960136b0:	b9401800 	ldr	w0, [x0, #24]
    960136b4:	97ffe92a 	bl	9600db5c <tegrabl_gpio_get_chipid_with_phandle>
	if (err != TEGRABL_NO_ERROR) {
    960136b8:	35000420 	cbnz	w0, 9601373c <fixed_regulator_enable+0xdc>
		goto fail;
	}
	entry->gpio_phandle = chipid;
    960136bc:	f9401ba1 	ldr	x1, [x29, #48]
    960136c0:	b9402fa0 	ldr	w0, [x29, #44]
    960136c4:	b9001820 	str	w0, [x1, #24]
#endif

	err = tegrabl_gpio_driver_get(entry->gpio_phandle, &gpio_drv);
    960136c8:	9100e3a1 	add	x1, x29, #0x38
    960136cc:	97ffe901 	bl	9600dad0 <tegrabl_gpio_driver_get>
    960136d0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960136d4:	35000200 	cbnz	w0, 96013714 <fixed_regulator_enable+0xb4>
		return err;
	}

	/* configure gpio */
	gpio_config(gpio_drv, entry->gpio_pin_num, GPIO_PINMODE_OUTPUT);
    960136d8:	f9401fa0 	ldr	x0, [x29, #56]
	return drv->ops->config(gpio_num, mode, drv->driver_data);
    960136dc:	f9400802 	ldr	x2, [x0, #16]
    960136e0:	f9401401 	ldr	x1, [x0, #40]
    960136e4:	f9401ba0 	ldr	x0, [x29, #48]
    960136e8:	f9400823 	ldr	x3, [x1, #16]
    960136ec:	52800021 	mov	w1, #0x1                   	// #1
    960136f0:	b9401c00 	ldr	w0, [x0, #28]
    960136f4:	d63f0060 	blr	x3

	if (!entry->is_active_high) {
		gpio_state = false;
	}
	gpio_write(gpio_drv, entry->gpio_pin_num,
    960136f8:	a94307a0 	ldp	x0, x1, [x29, #48]
	return drv->ops->write(gpio_num, state, drv->driver_data);
    960136fc:	f9401422 	ldr	x2, [x1, #40]
    96013700:	f9400443 	ldr	x3, [x2, #8]
    96013704:	f9400822 	ldr	x2, [x1, #16]
    96013708:	39408001 	ldrb	w1, [x0, #32]
    9601370c:	b9401c00 	ldr	w0, [x0, #28]
    96013710:	d63f0060 	blr	x3
	if (err !=  TEGRABL_NO_ERROR) {
		TEGRABL_SET_HIGHEST_MODULE(err);
	}

	return err;
}
    96013714:	2a1303e0 	mov	w0, w19
    96013718:	f9400bf3 	ldr	x19, [sp, #16]
    9601371c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96013720:	d65f03c0 	ret
			tegrabl_regulator_set_voltage(entry->supply_phandle, 0,
    96013724:	52800022 	mov	w2, #0x1                   	// #1
    96013728:	52800001 	mov	w1, #0x0                   	// #0
    9601372c:	97ffff43 	bl	96013438 <tegrabl_regulator_set_voltage>
			tegrabl_regulator_enable(entry->supply_phandle);
    96013730:	f9401ba0 	ldr	x0, [x29, #48]
    96013734:	b9401400 	ldr	w0, [x0, #20]
    96013738:	17ffffdb 	b	960136a4 <fixed_regulator_enable+0x44>
    9601373c:	12005c00 	and	w0, w0, #0xffffff
    96013740:	52aae013 	mov	w19, #0x57000000            	// #1459617792
    96013744:	2a130013 	orr	w19, w0, w19
    96013748:	17fffff3 	b	96013714 <fixed_regulator_enable+0xb4>

000000009601374c <fixed_regulator_disable>:

static tegrabl_error_t fixed_regulator_disable(int32_t phandle)
{
    9601374c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96013750:	910003fd 	mov	x29, sp
    96013754:	f9000bf3 	str	x19, [sp, #16]
	struct fixed_regulator_t *entry;
	bool gpio_state = false;
	struct gpio_driver *gpio_drv;

	/* find the regulator in the list */
	err = fixed_regulator_lookup(phandle, &entry);
    96013758:	910083a1 	add	x1, x29, #0x20
    9601375c:	97ffffaa 	bl	96013604 <fixed_regulator_lookup>
	if (err != TEGRABL_NO_ERROR) {
    96013760:	35000360 	cbnz	w0, 960137cc <fixed_regulator_disable+0x80>
		goto fail;
	}


	err = tegrabl_gpio_driver_get(entry->gpio_phandle, &gpio_drv);
    96013764:	f94013a0 	ldr	x0, [x29, #32]
    96013768:	9100a3a1 	add	x1, x29, #0x28
    9601376c:	b9401800 	ldr	w0, [x0, #24]
    96013770:	97ffe8d8 	bl	9600dad0 <tegrabl_gpio_driver_get>
    96013774:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96013778:	35000220 	cbnz	w0, 960137bc <fixed_regulator_disable+0x70>
		return err;
	}

	/* configure gpio */
	gpio_config(gpio_drv, entry->gpio_pin_num, GPIO_PINMODE_OUTPUT);
    9601377c:	f94017a0 	ldr	x0, [x29, #40]
	return drv->ops->config(gpio_num, mode, drv->driver_data);
    96013780:	f9400802 	ldr	x2, [x0, #16]
    96013784:	f9401401 	ldr	x1, [x0, #40]
    96013788:	f94013a0 	ldr	x0, [x29, #32]
    9601378c:	f9400823 	ldr	x3, [x1, #16]
    96013790:	52800021 	mov	w1, #0x1                   	// #1
    96013794:	b9401c00 	ldr	w0, [x0, #28]
    96013798:	d63f0060 	blr	x3

	if (!entry->is_active_high) {
		gpio_state = true;
	}
	gpio_write(gpio_drv, entry->gpio_pin_num,
    9601379c:	a9420ba0 	ldp	x0, x2, [x29, #32]
	return drv->ops->write(gpio_num, state, drv->driver_data);
    960137a0:	f9401443 	ldr	x3, [x2, #40]
	if (!entry->is_active_high) {
    960137a4:	39408001 	ldrb	w1, [x0, #32]
    960137a8:	f9400842 	ldr	x2, [x2, #16]
    960137ac:	b9401c00 	ldr	w0, [x0, #28]
    960137b0:	52000021 	eor	w1, w1, #0x1
    960137b4:	f9400463 	ldr	x3, [x3, #8]
    960137b8:	d63f0060 	blr	x3
	if (err !=  TEGRABL_NO_ERROR) {
		TEGRABL_SET_HIGHEST_MODULE(err);
	}

	return err;
}
    960137bc:	2a1303e0 	mov	w0, w19
    960137c0:	f9400bf3 	ldr	x19, [sp, #16]
    960137c4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960137c8:	d65f03c0 	ret
    960137cc:	12005c00 	and	w0, w0, #0xffffff
    960137d0:	52aae013 	mov	w19, #0x57000000            	// #1459617792
    960137d4:	2a130013 	orr	w19, w0, w19
    960137d8:	17fffff9 	b	960137bc <fixed_regulator_disable+0x70>

00000000960137dc <tegrabl_fixed_regulator_init>:
	}
	return err;
}

tegrabl_error_t tegrabl_fixed_regulator_init(void)
{
    960137dc:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    960137e0:	910003fd 	mov	x29, sp
    960137e4:	a90153f3 	stp	x19, x20, [sp, #16]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	const char *str;

	if (NULL == fdt) {
    960137e8:	f00002d3 	adrp	x19, 9606e000 <__bss_start>
{
    960137ec:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (NULL == fdt) {
    960137f0:	f9450e60 	ldr	x0, [x19, #2584]
{
    960137f4:	a90363f7 	stp	x23, x24, [sp, #48]
    960137f8:	a9046bf9 	stp	x25, x26, [sp, #64]
    960137fc:	a90573fb 	stp	x27, x28, [sp, #80]
	if (NULL == fdt) {
    96013800:	b4000380 	cbz	x0, 96013870 <tegrabl_fixed_regulator_init+0x94>
			goto fail;
		}
	}

	/* get fixed regulators node offset */
	node_offset = fdt_node_offset_by_compatible(fdt, -1, "simple-bus");
    96013804:	f9450e60 	ldr	x0, [x19, #2584]
    96013808:	f00002d5 	adrp	x21, 9606e000 <__bss_start>

	while (node_offset != -FDT_ERR_NOTFOUND) {
		str = (const char *)fdt_getprop(fdt, node_offset, "device_type", NULL);
    9601380c:	90000178 	adrp	x24, 9603f000 <device_info_list+0x6dc>
		if (str == NULL) {
			node_offset = fdt_node_offset_by_compatible(fdt, node_offset,
														"simple-bus");
			continue;
		}
		if (!strncmp(str, FIXED_REGULATOR, strlen(FIXED_REGULATOR))) {
    96013810:	90000177 	adrp	x23, 9603f000 <device_info_list+0x6dc>
	while (node_offset != -FDT_ERR_NOTFOUND) {
    96013814:	912902b4 	add	x20, x21, #0xa40
		str = (const char *)fdt_getprop(fdt, node_offset, "device_type", NULL);
    96013818:	9107e318 	add	x24, x24, #0x1f8
		if (!strncmp(str, FIXED_REGULATOR, strlen(FIXED_REGULATOR))) {
    9601381c:	910812f7 	add	x23, x23, #0x204
	node_offset = fdt_node_offset_by_compatible(fdt, -1, "simple-bus");
    96013820:	90000176 	adrp	x22, 9603f000 <device_info_list+0x6dc>
    96013824:	12800001 	mov	w1, #0xffffffff            	// #-1
    96013828:	9107b6c2 	add	x2, x22, #0x1ed
    9601382c:	94007ba1 	bl	960326b0 <fdt_node_offset_by_compatible>
    96013830:	b90a42a0 	str	w0, [x21, #2624]
	while (node_offset != -FDT_ERR_NOTFOUND) {
    96013834:	b9400281 	ldr	w1, [x20]
    96013838:	3100043f 	cmn	w1, #0x1
    9601383c:	540004c0 	b.eq	960138d4 <tegrabl_fixed_regulator_init+0xf8>  // b.none
		str = (const char *)fdt_getprop(fdt, node_offset, "device_type", NULL);
    96013840:	f9450e60 	ldr	x0, [x19, #2584]
    96013844:	d2800003 	mov	x3, #0x0                   	// #0
    96013848:	aa1803e2 	mov	x2, x24
    9601384c:	940079ef 	bl	96032008 <fdt_getprop>
    96013850:	aa0003f9 	mov	x25, x0
		if (str == NULL) {
    96013854:	b5000320 	cbnz	x0, 960138b8 <tegrabl_fixed_regulator_init+0xdc>
			break;
		}
		node_offset = fdt_node_offset_by_compatible(fdt, node_offset,
    96013858:	f9450e60 	ldr	x0, [x19, #2584]
    9601385c:	9107b6c2 	add	x2, x22, #0x1ed
    96013860:	b9400281 	ldr	w1, [x20]
    96013864:	94007b93 	bl	960326b0 <fdt_node_offset_by_compatible>
    96013868:	b9000280 	str	w0, [x20]
    9601386c:	17fffff2 	b	96013834 <tegrabl_fixed_regulator_init+0x58>
    96013870:	91286261 	add	x1, x19, #0xa18
		err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    96013874:	52800000 	mov	w0, #0x0                   	// #0
    96013878:	94007578 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
    9601387c:	2a0003f4 	mov	w20, w0
		if (TEGRABL_NO_ERROR != err) {
    96013880:	34fffc20 	cbz	w0, 96013804 <tegrabl_fixed_regulator_init+0x28>
		goto fail;
	}

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_info("fixed-regulator register failed");
    96013884:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013888:	9109a800 	add	x0, x0, #0x26a
    9601388c:	94003b79 	bl	96022670 <tegrabl_printf>
    96013890:	12005e80 	and	w0, w20, #0xffffff
    96013894:	52aae001 	mov	w1, #0x57000000            	// #1459617792
    96013898:	2a010000 	orr	w0, w0, w1
		TEGRABL_SET_HIGHEST_MODULE(err);
	}
	return err;
}
    9601389c:	a94153f3 	ldp	x19, x20, [sp, #16]
    960138a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960138a4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960138a8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960138ac:	a94573fb 	ldp	x27, x28, [sp, #80]
    960138b0:	a8c87bfd 	ldp	x29, x30, [sp], #128
    960138b4:	d65f03c0 	ret
		if (!strncmp(str, FIXED_REGULATOR, strlen(FIXED_REGULATOR))) {
    960138b8:	aa1703e0 	mov	x0, x23
    960138bc:	94005a94 	bl	9602a30c <strlen>
    960138c0:	aa1703e1 	mov	x1, x23
    960138c4:	aa0003e2 	mov	x2, x0
    960138c8:	aa1903e0 	mov	x0, x25
    960138cc:	94005a6c 	bl	9602a27c <strncmp>
    960138d0:	35fffc40 	cbnz	w0, 96013858 <tegrabl_fixed_regulator_init+0x7c>
    960138d4:	f00002d6 	adrp	x22, 9606e000 <__bss_start>
    960138d8:	9128c2c0 	add	x0, x22, #0xa30
    960138dc:	f9051ac0 	str	x0, [x22, #2608]
    960138e0:	f9000400 	str	x0, [x0, #8]
	pr_info("fixed regulator driver initialized\n");
    960138e4:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960138e8:	91085400 	add	x0, x0, #0x215
    960138ec:	94003b61 	bl	96022670 <tegrabl_printf>
	if (node_offset < 0)
    960138f0:	b94a42b4 	ldr	w20, [x21, #2624]
    960138f4:	36f800f4 	tbz	w20, #31, 96013910 <tegrabl_fixed_regulator_init+0x134>
		offset = fdt_next_node(fdt, -1, NULL);
    960138f8:	f9450e60 	ldr	x0, [x19, #2584]
    960138fc:	d2800002 	mov	x2, #0x0                   	// #0
    96013900:	12800001 	mov	w1, #0xffffffff            	// #-1
    96013904:	940077ff 	bl	96031900 <fdt_next_node>
    96013908:	2a0003f4 	mov	w20, w0
	if (offset < 0) {
    9601390c:	37f813c0 	tbnz	w0, #31, 96013b84 <tegrabl_fixed_regulator_init+0x3a8>
	root_depth = fdt_node_depth(fdt, offset);
    96013910:	f9450e60 	ldr	x0, [x19, #2584]
    96013914:	2a1403e1 	mov	w1, w20
			if (fdt_node_check_compatible(fdt, offset,
    96013918:	90000177 	adrp	x23, 9603f000 <device_info_list+0x6dc>
		if (node_offset < 0) {
    9601391c:	912902b5 	add	x21, x21, #0xa40
		prop_p = fdt_getprop(fdt, offset,
    96013920:	f0000158 	adrp	x24, 9603e000 <tca9539_chips+0x378>
	bool duplicate = false;
    96013924:	5280001c 	mov	w28, #0x0                   	// #0
	root_depth = fdt_node_depth(fdt, offset);
    96013928:	94007acc 	bl	96032458 <fdt_node_depth>
	child_depth = root_depth + 1;
    9601392c:	1100041b 	add	w27, w0, #0x1
			if (fdt_node_check_compatible(fdt, offset,
    96013930:	9108f2e0 	add	x0, x23, #0x23c
    96013934:	f9003fa0 	str	x0, [x29, #120]
		prop_p = fdt_getprop(fdt, offset,
    96013938:	91148b00 	add	x0, x24, #0x522
    9601393c:	f9003ba0 	str	x0, [x29, #112]
			offset = fdt_next_node(fdt, offset, NULL);
    96013940:	f9450e60 	ldr	x0, [x19, #2584]
    96013944:	2a1403e1 	mov	w1, w20
    96013948:	d2800002 	mov	x2, #0x0                   	// #0
    9601394c:	940077ed 	bl	96031900 <fdt_next_node>
    96013950:	2a0003f4 	mov	w20, w0
			node_depth = fdt_node_depth(fdt, offset);
    96013954:	2a0003e1 	mov	w1, w0
    96013958:	f9450e60 	ldr	x0, [x19, #2584]
    9601395c:	94007abf 	bl	96032458 <fdt_node_depth>
		} while (node_depth > child_depth && offset);
    96013960:	7100029f 	cmp	w20, #0x0
    96013964:	7a401360 	ccmp	w27, w0, #0x0, ne  // ne = any
    96013968:	54fffecb 	b.lt	96013940 <tegrabl_fixed_regulator_init+0x164>  // b.tstop
		if (!offset || (node_depth < child_depth)) {
    9601396c:	7100029f 	cmp	w20, #0x0
    96013970:	7a401360 	ccmp	w27, w0, #0x0, ne  // ne = any
    96013974:	540010ec 	b.gt	96013b90 <tegrabl_fixed_regulator_init+0x3b4>
		if (node_offset < 0) {
    96013978:	b94002a0 	ldr	w0, [x21]
    9601397c:	37f80e40 	tbnz	w0, #31, 96013b44 <tegrabl_fixed_regulator_init+0x368>
		phandle = fdt_get_phandle(fdt, offset);
    96013980:	f9450e60 	ldr	x0, [x19, #2584]
    96013984:	2a1403e1 	mov	w1, w20
    96013988:	940079b3 	bl	96032054 <fdt_get_phandle>
    9601398c:	2a0003fa 	mov	w26, w0
		if (0 == phandle) {
    96013990:	34fffd80 	cbz	w0, 96013940 <tegrabl_fixed_regulator_init+0x164>
		prop_p = fdt_getprop(fdt, offset,
    96013994:	f9403ba2 	ldr	x2, [x29, #112]
    96013998:	d2800003 	mov	x3, #0x0                   	// #0
    9601399c:	f9450e60 	ldr	x0, [x19, #2584]
    960139a0:	2a1403e1 	mov	w1, w20
    960139a4:	94007999 	bl	96032008 <fdt_getprop>
    960139a8:	aa0003f9 	mov	x25, x0
		r = (tegrabl_regulator_t *)
    960139ac:	d2800901 	mov	x1, #0x48                  	// #72
    960139b0:	d2800020 	mov	x0, #0x1                   	// #1
    960139b4:	94004c44 	bl	96026ac4 <tegrabl_calloc>
    960139b8:	aa0003f8 	mov	x24, x0
		if (!r) {
    960139bc:	b4000e40 	cbz	x0, 96013b84 <tegrabl_fixed_regulator_init+0x3a8>
		name = fdt_getprop(fdt, offset, "regulator-name", NULL);
    960139c0:	f9450e60 	ldr	x0, [x19, #2584]
    960139c4:	f0000142 	adrp	x2, 9603e000 <tca9539_chips+0x378>
		r->phandle = phandle;
    960139c8:	b900131a 	str	w26, [x24, #16]
		name = fdt_getprop(fdt, offset, "regulator-name", NULL);
    960139cc:	d2800003 	mov	x3, #0x0                   	// #0
    960139d0:	9111cc42 	add	x2, x2, #0x473
    960139d4:	2a1403e1 	mov	w1, w20
    960139d8:	9400798c 	bl	96032008 <fdt_getprop>
		if (name) {
    960139dc:	b40000a0 	cbz	x0, 960139f0 <tegrabl_fixed_regulator_init+0x214>
			strlcpy(r->name, name, sizeof(r->name));
    960139e0:	d2800282 	mov	x2, #0x14                  	// #20
    960139e4:	aa0003e1 	mov	x1, x0
    960139e8:	8b020300 	add	x0, x24, x2
    960139ec:	94005a50 	bl	9602a32c <strlcpy>
    960139f0:	52800022 	mov	w2, #0x1                   	// #1
		if (prop_p != NULL) {
    960139f4:	b4000059 	cbz	x25, 960139fc <tegrabl_fixed_regulator_init+0x220>
			r->is_gpio_available = true;
    960139f8:	3900ab02 	strb	w2, [x24, #42]
		r->is_enabled = !r->is_gpio_available;
    960139fc:	3940ab00 	ldrb	w0, [x24, #42]
		r->is_fixed = true;
    96013a00:	3900a302 	strb	w2, [x24, #40]
		r->is_enabled = !r->is_gpio_available;
    96013a04:	52000000 	eor	w0, w0, #0x1
    96013a08:	3900a700 	strb	w0, [x24, #41]
		r->enable = fixed_regulator_enable;
    96013a0c:	90000000 	adrp	x0, 96013000 <qspi_flash_blank_check_enable_spansion+0x4c>
    96013a10:	91198000 	add	x0, x0, #0x660
    96013a14:	f9001b00 	str	x0, [x24, #48]
		r->disable = fixed_regulator_disable;
    96013a18:	90000000 	adrp	x0, 96013000 <qspi_flash_blank_check_enable_spansion+0x4c>
    96013a1c:	911d3000 	add	x0, x0, #0x74c
    96013a20:	f9001f00 	str	x0, [x24, #56]
		r->is_fixed = true;
    96013a24:	b9006fa2 	str	w2, [x29, #108]
		tegrabl_regulator_register(r);
    96013a28:	aa1803e0 	mov	x0, x24
    96013a2c:	97fffebc 	bl	9601351c <tegrabl_regulator_register>
		f = (struct fixed_regulator_t *)
    96013a30:	d2800501 	mov	x1, #0x28                  	// #40
    96013a34:	d2800020 	mov	x0, #0x1                   	// #1
    96013a38:	94004c23 	bl	96026ac4 <tegrabl_calloc>
    96013a3c:	aa0003f7 	mov	x23, x0
		if (!f) {
    96013a40:	b4000a20 	cbz	x0, 96013b84 <tegrabl_fixed_regulator_init+0x3a8>
		if (!fdt_get_property(fdt, offset, "enable-active-high", NULL)) {
    96013a44:	f9450e60 	ldr	x0, [x19, #2584]
    96013a48:	d2800003 	mov	x3, #0x0                   	// #0
		f->is_active_high = true;
    96013a4c:	b9406fa2 	ldr	w2, [x29, #108]
		if (!fdt_get_property(fdt, offset, "enable-active-high", NULL)) {
    96013a50:	2a1403e1 	mov	w1, w20
		f->phandle = phandle;
    96013a54:	b90012fa 	str	w26, [x23, #16]
		f->is_active_high = true;
    96013a58:	390082e2 	strb	w2, [x23, #32]
		if (!fdt_get_property(fdt, offset, "enable-active-high", NULL)) {
    96013a5c:	90000162 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    96013a60:	91093042 	add	x2, x2, #0x24c
    96013a64:	94007938 	bl	96031f44 <fdt_get_property>
    96013a68:	b5000040 	cbnz	x0, 96013a70 <tegrabl_fixed_regulator_init+0x294>
			f->is_active_high = false;
    96013a6c:	390082ff 	strb	wzr, [x23, #32]
		if (r->is_gpio_available) {
    96013a70:	3940ab00 	ldrb	w0, [x24, #42]
    96013a74:	34000260 	cbz	w0, 96013ac0 <tegrabl_fixed_regulator_init+0x2e4>
			f->gpio_phandle = fdt32_to_cpu(*((uint32_t *)prop_p));
    96013a78:	b9400320 	ldr	w0, [x25]
	return (_B(0) << 24) | (_B(1) << 16) | (_B(2) << 8) | _B(3);
    96013a7c:	d3505c02 	ubfx	x2, x0, #16, #8
    96013a80:	d3483c01 	ubfx	x1, x0, #8, #8
    96013a84:	53185c42 	lsl	w2, w2, #8
    96013a88:	2a014041 	orr	w1, w2, w1, lsl #16
    96013a8c:	53187c02 	lsr	w2, w0, #24
    96013a90:	2a006040 	orr	w0, w2, w0, lsl #24
    96013a94:	2a000020 	orr	w0, w1, w0
    96013a98:	b9001ae0 	str	w0, [x23, #24]
			f->gpio_pin_num = fdt32_to_cpu(*((uint32_t *)(prop_p + 1)));
    96013a9c:	b9400720 	ldr	w0, [x25, #4]
    96013aa0:	d3505c02 	ubfx	x2, x0, #16, #8
    96013aa4:	d3483c01 	ubfx	x1, x0, #8, #8
    96013aa8:	53185c42 	lsl	w2, w2, #8
    96013aac:	2a014041 	orr	w1, w2, w1, lsl #16
    96013ab0:	53187c02 	lsr	w2, w0, #24
    96013ab4:	2a006040 	orr	w0, w2, w0, lsl #24
    96013ab8:	2a000020 	orr	w0, w1, w0
    96013abc:	b9001ee0 	str	w0, [x23, #28]
		if (fdt_get_property(fdt, offset, "vin-supply", NULL)) {
    96013ac0:	f9450e60 	ldr	x0, [x19, #2584]
    96013ac4:	90000179 	adrp	x25, 9603f000 <device_info_list+0x6dc>
    96013ac8:	91097f39 	add	x25, x25, #0x25f
    96013acc:	d2800003 	mov	x3, #0x0                   	// #0
    96013ad0:	aa1903e2 	mov	x2, x25
    96013ad4:	2a1403e1 	mov	w1, w20
    96013ad8:	9400791b 	bl	96031f44 <fdt_get_property>
    96013adc:	b40001e0 	cbz	x0, 96013b18 <tegrabl_fixed_regulator_init+0x33c>
			prop_p = fdt_getprop(fdt, offset, "vin-supply", NULL);
    96013ae0:	f9450e60 	ldr	x0, [x19, #2584]
    96013ae4:	aa1903e2 	mov	x2, x25
    96013ae8:	2a1403e1 	mov	w1, w20
    96013aec:	d2800003 	mov	x3, #0x0                   	// #0
    96013af0:	94007946 	bl	96032008 <fdt_getprop>
			f->supply_phandle = fdt32_to_cpu(*((uint32_t *)prop_p));
    96013af4:	b9400000 	ldr	w0, [x0]
    96013af8:	d3505c02 	ubfx	x2, x0, #16, #8
    96013afc:	d3483c01 	ubfx	x1, x0, #8, #8
    96013b00:	53185c42 	lsl	w2, w2, #8
    96013b04:	2a014041 	orr	w1, w2, w1, lsl #16
    96013b08:	53187c02 	lsr	w2, w0, #24
    96013b0c:	2a006040 	orr	w0, w2, w0, lsl #24
    96013b10:	2a000020 	orr	w0, w1, w0
    96013b14:	b90016e0 	str	w0, [x23, #20]
		list_for_every_entry(&fixed_regulators, entry,
    96013b18:	9128c2c1 	add	x1, x22, #0xa30
    96013b1c:	f9400422 	ldr	x2, [x1, #8]
    96013b20:	aa0203e0 	mov	x0, x2
    96013b24:	eb01001f 	cmp	x0, x1
    96013b28:	540001a1 	b.ne	96013b5c <tegrabl_fixed_regulator_init+0x380>  // b.any
		if (!duplicate) {
    96013b2c:	35fff0bc 	cbnz	w28, 96013940 <tegrabl_fixed_regulator_init+0x164>
	item->next = list->next;
    96013b30:	a9000ae0 	stp	x0, x2, [x23]
	list->next->prev = item;
    96013b34:	f9400401 	ldr	x1, [x0, #8]
    96013b38:	f9000037 	str	x23, [x1]
	list->next = item;
    96013b3c:	f9000417 	str	x23, [x0, #8]
    96013b40:	17ffff80 	b	96013940 <tegrabl_fixed_regulator_init+0x164>
			if (fdt_node_check_compatible(fdt, offset,
    96013b44:	f9450e60 	ldr	x0, [x19, #2584]
    96013b48:	2a1403e1 	mov	w1, w20
    96013b4c:	f9403fa2 	ldr	x2, [x29, #120]
    96013b50:	94007aad 	bl	96032604 <fdt_node_check_compatible>
    96013b54:	34fff160 	cbz	w0, 96013980 <tegrabl_fixed_regulator_init+0x1a4>
    96013b58:	17ffff7a 	b	96013940 <tegrabl_fixed_regulator_init+0x164>
			if (entry->phandle == f->phandle) {
    96013b5c:	b9401005 	ldr	w5, [x0, #16]
    96013b60:	b94012e3 	ldr	w3, [x23, #16]
    96013b64:	6b0300bf 	cmp	w5, w3
    96013b68:	540000a1 	b.ne	96013b7c <tegrabl_fixed_regulator_init+0x3a0>  // b.any
				tegrabl_free(f);
    96013b6c:	aa1703e0 	mov	x0, x23
				duplicate = true;
    96013b70:	5280003c 	mov	w28, #0x1                   	// #1
				tegrabl_free(f);
    96013b74:	94004bd1 	bl	96026ab8 <tegrabl_free>
    96013b78:	17ffff72 	b	96013940 <tegrabl_fixed_regulator_init+0x164>
		list_for_every_entry(&fixed_regulators, entry,
    96013b7c:	f9400400 	ldr	x0, [x0, #8]
    96013b80:	17ffffe9 	b	96013b24 <tegrabl_fixed_regulator_init+0x348>
		pr_info("fixed-regulator register failed");
    96013b84:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013b88:	9109a800 	add	x0, x0, #0x26a
    96013b8c:	94003ab9 	bl	96022670 <tegrabl_printf>
		if (!offset || (node_depth < child_depth)) {
    96013b90:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    96013b94:	17ffff42 	b	9601389c <tegrabl_fixed_regulator_init+0xc0>

0000000096013b98 <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers>:
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_AHCI_HBA_CAP_BKDR_0, reg);
}

static tegrabl_error_t tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers(
		struct tegrabl_sata_context *context)
{
    96013b98:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	bool mapped_rfis = false;

	TEGRABL_ASSERT(context != NULL);

	/* Get physical address of command list buffer */
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA,
    96013b9c:	52800024 	mov	w4, #0x1                   	// #1
    96013ba0:	d2808003 	mov	x3, #0x400                 	// #1024
{
    96013ba4:	910003fd 	mov	x29, sp
    96013ba8:	a90153f3 	stp	x19, x20, [sp, #16]
    96013bac:	aa0003f3 	mov	x19, x0
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA,
    96013bb0:	f9402c02 	ldr	x2, [x0, #88]
{
    96013bb4:	f90013f5 	str	x21, [sp, #32]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA,
    96013bb8:	39400001 	ldrb	w1, [x0]
    96013bbc:	52800320 	mov	w0, #0x19                  	// #25
    96013bc0:	97ffbfc1 	bl	96003ac4 <tegrabl_dma_map_buffer>
				TEGRABL_SATA_AHCI_COMMAND_LIST_BUF_SIZE,
				TEGRABL_DMA_TO_DEVICE);

	pr_trace("Dma address of command list buffer is %"PRIx64"\n", address);

	if (address == 0ULL) {
    96013bc4:	b5000240 	cbnz	x0, 96013c0c <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers+0x74>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID,
    96013bc8:	5282c054 	mov	w20, #0x1602                	// #5634
				TEGRABL_SATA_AHCI_INIT_CMD_LIST_RECEIVE_FIS_BUFFERS_1);
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    96013bcc:	5282c042 	mov	w2, #0x1602                	// #5634
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID,
    96013bd0:	72a20214 	movk	w20, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    96013bd4:	90000165 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    96013bd8:	d2800004 	mov	x4, #0x0                   	// #0
    96013bdc:	910cd4a5 	add	x5, x5, #0x335
    96013be0:	90000163 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96013be4:	72a20202 	movk	w2, #0x1010, lsl #16
    96013be8:	910d2463 	add	x3, x3, #0x349
    96013bec:	52800041 	mov	w1, #0x2                   	// #2
    96013bf0:	52800020 	mov	w0, #0x1                   	// #1
    96013bf4:	940029c3 	bl	9601e300 <tegrabl_error_print>
			TEGRABL_SATA_AHCI_COMMAND_LIST_BUF_SIZE,
			TEGRABL_DMA_TO_DEVICE);
	}

	return error;
}
    96013bf8:	2a1403e0 	mov	w0, w20
    96013bfc:	f94013f5 	ldr	x21, [sp, #32]
    96013c00:	a94153f3 	ldp	x19, x20, [sp, #16]
    96013c04:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96013c08:	d65f03c0 	ret
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCLB_0, reg);
    96013c0c:	d28e2001 	mov	x1, #0x7100                	// #28928
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA,
    96013c10:	f9402662 	ldr	x2, [x19, #72]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCLB_0, reg);
    96013c14:	f2a06a01 	movk	x1, #0x350, lsl #16
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA,
    96013c18:	52800024 	mov	w4, #0x1                   	// #1
    96013c1c:	d2808003 	mov	x3, #0x400                 	// #1024
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCLB_0, reg);
    96013c20:	b9000020 	str	w0, [x1]
	reg = (uint32_t)((address >> 32) & 0xFFFFFFFFUL);
    96013c24:	d360fc00 	lsr	x0, x0, #32
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCLBU_0, reg);
    96013c28:	b9000420 	str	w0, [x1, #4]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA,
    96013c2c:	52800320 	mov	w0, #0x19                  	// #25
    96013c30:	39400261 	ldrb	w1, [x19]
    96013c34:	97ffbfa4 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    96013c38:	b5000380 	cbnz	x0, 96013ca8 <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers+0x110>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID,
    96013c3c:	5282e054 	mov	w20, #0x1702                	// #5890
	bool mapped_rfis = false;
    96013c40:	52800015 	mov	w21, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID,
    96013c44:	72a20214 	movk	w20, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "rfis");
    96013c48:	5282e042 	mov	w2, #0x1702                	// #5890
    96013c4c:	90000165 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    96013c50:	d2800004 	mov	x4, #0x0                   	// #0
    96013c54:	910da4a5 	add	x5, x5, #0x369
    96013c58:	90000163 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96013c5c:	72a20202 	movk	w2, #0x1010, lsl #16
    96013c60:	910d2463 	add	x3, x3, #0x349
    96013c64:	52800041 	mov	w1, #0x2                   	// #2
    96013c68:	52800020 	mov	w0, #0x1                   	// #1
    96013c6c:	940029a5 	bl	9601e300 <tegrabl_error_print>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, (uint8_t)context->instance,
    96013c70:	39400261 	ldrb	w1, [x19]
    96013c74:	52800024 	mov	w4, #0x1                   	// #1
    96013c78:	f9402e62 	ldr	x2, [x19, #88]
    96013c7c:	d2808003 	mov	x3, #0x400                 	// #1024
    96013c80:	52800320 	mov	w0, #0x19                  	// #25
    96013c84:	97ffbf82 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	if (mapped_rfis) {
    96013c88:	34fffb95 	cbz	w21, 96013bf8 <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers+0x60>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA,
    96013c8c:	39400261 	ldrb	w1, [x19]
    96013c90:	52800024 	mov	w4, #0x1                   	// #1
    96013c94:	f9402662 	ldr	x2, [x19, #72]
    96013c98:	d2808003 	mov	x3, #0x400                 	// #1024
    96013c9c:	52800320 	mov	w0, #0x19                  	// #25
    96013ca0:	97ffbf7b 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	return error;
    96013ca4:	17ffffd5 	b	96013bf8 <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers+0x60>
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXFB_0, reg);
    96013ca8:	d28e2101 	mov	x1, #0x7108                	// #28936
	mapped_rfis = true;
    96013cac:	52800035 	mov	w21, #0x1                   	// #1
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXFB_0, reg);
    96013cb0:	f2a06a01 	movk	x1, #0x350, lsl #16
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96013cb4:	52800014 	mov	w20, #0x0                   	// #0
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXFB_0, reg);
    96013cb8:	b9000020 	str	w0, [x1]
	reg = (uint32_t)((address >> 32) & 0xFFFFFFFFUL);
    96013cbc:	d360fc00 	lsr	x0, x0, #32
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXFBU_0, reg);
    96013cc0:	b9000420 	str	w0, [x1, #4]
    96013cc4:	17ffffeb 	b	96013c70 <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers+0xd8>

0000000096013cc8 <tegrabl_sata_ahci_init_memory_regions>:
 *
 * @param context Context information.
 */
static tegrabl_error_t tegrabl_sata_ahci_init_memory_regions(
		struct tegrabl_sata_context *context)
{
    96013cc8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	 * from dma heap only.
	 */
	pr_trace("Setting memory regions\n");

	/* Buffer to receive FIS should be aligned to 1KB or 4KB */
	context->rfis = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    96013ccc:	d2802002 	mov	x2, #0x100                 	// #256
    96013cd0:	d2820001 	mov	x1, #0x1000                	// #4096
{
    96013cd4:	910003fd 	mov	x29, sp
    96013cd8:	f9000bf3 	str	x19, [sp, #16]
    96013cdc:	aa0003f3 	mov	x19, x0
	context->rfis = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    96013ce0:	52800020 	mov	w0, #0x1                   	// #1
    96013ce4:	94004b8f 	bl	96026b20 <tegrabl_alloc_align>
    96013ce8:	f9002660 	str	x0, [x19, #72]
			4096, TEGRABL_SATA_AHCI_RFIS_SIZE);
	if (context->rfis == NULL) {
    96013cec:	b5000200 	cbnz	x0, 96013d2c <tegrabl_sata_ahci_init_memory_regions+0x64>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_AHCI_INIT_MEMORY_REGIONS_1);
		TEGRABL_SET_ERROR_STRING(error, "%d", "rfis", TEGRABL_SATA_AHCI_RFIS_SIZE);
    96013cf0:	52834062 	mov	w2, #0x1a03                	// #6659
    96013cf4:	52800020 	mov	w0, #0x1                   	// #1
    96013cf8:	52802005 	mov	w5, #0x100                 	// #256
    96013cfc:	90000164 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96013d00:	f0000143 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96013d04:	910da484 	add	x4, x4, #0x369
    96013d08:	9102f463 	add	x3, x3, #0xbd
    96013d0c:	72a20202 	movk	w2, #0x1010, lsl #16
    96013d10:	52800041 	mov	w1, #0x2                   	// #2
    96013d14:	9400297b 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_AHCI_INIT_MEMORY_REGIONS_1);
    96013d18:	52834060 	mov	w0, #0x1a03                	// #6659

	/* Command table should be aligned to 256 */
	context->command_table = tegrabl_alloc_align(TEGRABL_HEAP_DMA, 256,
			TEGRABL_SATA_AHCI_COMMAND_TABLE_SIZE);
	if (context->command_table == NULL) {
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_AHCI_INIT_MEMORY_REGIONS_4);
    96013d1c:	72a20200 	movk	w0, #0x1010, lsl #16
	pr_trace("Command table buffer @ %p\n", context->command_table);
	pr_trace("Identity buffer @ %p\n", context->indentity_buf);

fail:
	return error;
}
    96013d20:	f9400bf3 	ldr	x19, [sp, #16]
    96013d24:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96013d28:	d65f03c0 	ret
	memset(context->rfis, 0x0, TEGRABL_SATA_AHCI_RFIS_SIZE);
    96013d2c:	d2802002 	mov	x2, #0x100                 	// #256
    96013d30:	52800001 	mov	w1, #0x0                   	// #0
    96013d34:	9400583d 	bl	96029e28 <memset>
	context->indentity_buf = tegrabl_alloc(TEGRABL_HEAP_DMA,
    96013d38:	d2804001 	mov	x1, #0x200                 	// #512
    96013d3c:	52800020 	mov	w0, #0x1                   	// #1
    96013d40:	94004b51 	bl	96026a84 <tegrabl_alloc>
    96013d44:	f9002a60 	str	x0, [x19, #80]
	if (context->indentity_buf == NULL) {
    96013d48:	b50001a0 	cbnz	x0, 96013d7c <tegrabl_sata_ahci_init_memory_regions+0xb4>
		TEGRABL_SET_ERROR_STRING(error, "%d", "device indentity", TEGRABL_SATA_AHCI_DEVICE_IDENTITY_BUF_SIZE);
    96013d4c:	52836062 	mov	w2, #0x1b03                	// #6915
    96013d50:	52800020 	mov	w0, #0x1                   	// #1
    96013d54:	52804005 	mov	w5, #0x200                 	// #512
    96013d58:	90000164 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96013d5c:	f0000143 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96013d60:	910db884 	add	x4, x4, #0x36e
    96013d64:	9102f463 	add	x3, x3, #0xbd
    96013d68:	72a20202 	movk	w2, #0x1010, lsl #16
    96013d6c:	52800041 	mov	w1, #0x2                   	// #2
    96013d70:	94002964 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_AHCI_INIT_MEMORY_REGIONS_2);
    96013d74:	52836060 	mov	w0, #0x1b03                	// #6915
    96013d78:	17ffffe9 	b	96013d1c <tegrabl_sata_ahci_init_memory_regions+0x54>
	memset(context->indentity_buf, 0x0,
    96013d7c:	d2804002 	mov	x2, #0x200                 	// #512
    96013d80:	52800001 	mov	w1, #0x0                   	// #0
    96013d84:	94005829 	bl	96029e28 <memset>
	context->command_list_buf = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    96013d88:	d2808002 	mov	x2, #0x400                 	// #1024
    96013d8c:	52800020 	mov	w0, #0x1                   	// #1
    96013d90:	aa0203e1 	mov	x1, x2
    96013d94:	94004b63 	bl	96026b20 <tegrabl_alloc_align>
    96013d98:	f9002e60 	str	x0, [x19, #88]
	if (context->command_list_buf == NULL) {
    96013d9c:	b50001a0 	cbnz	x0, 96013dd0 <tegrabl_sata_ahci_init_memory_regions+0x108>
		TEGRABL_SET_ERROR_STRING(error, "%d", "command list", TEGRABL_SATA_AHCI_COMMAND_LIST_BUF_SIZE);
    96013da0:	52838062 	mov	w2, #0x1c03                	// #7171
    96013da4:	52800020 	mov	w0, #0x1                   	// #1
    96013da8:	52808005 	mov	w5, #0x400                 	// #1024
    96013dac:	90000164 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96013db0:	f0000143 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96013db4:	910dfc84 	add	x4, x4, #0x37f
    96013db8:	9102f463 	add	x3, x3, #0xbd
    96013dbc:	72a20202 	movk	w2, #0x1010, lsl #16
    96013dc0:	52800041 	mov	w1, #0x2                   	// #2
    96013dc4:	9400294f 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_AHCI_INIT_MEMORY_REGIONS_3);
    96013dc8:	52838060 	mov	w0, #0x1c03                	// #7171
    96013dcc:	17ffffd4 	b	96013d1c <tegrabl_sata_ahci_init_memory_regions+0x54>
	memset(context->command_list_buf, 0x0,
    96013dd0:	d2808002 	mov	x2, #0x400                 	// #1024
    96013dd4:	52800001 	mov	w1, #0x0                   	// #0
    96013dd8:	94005814 	bl	96029e28 <memset>
	context->command_table = tegrabl_alloc_align(TEGRABL_HEAP_DMA, 256,
    96013ddc:	d2808002 	mov	x2, #0x400                 	// #1024
    96013de0:	d2802001 	mov	x1, #0x100                 	// #256
    96013de4:	52800020 	mov	w0, #0x1                   	// #1
    96013de8:	94004b4e 	bl	96026b20 <tegrabl_alloc_align>
    96013dec:	f9003260 	str	x0, [x19, #96]
	if (context->command_table == NULL) {
    96013df0:	b50001a0 	cbnz	x0, 96013e24 <tegrabl_sata_ahci_init_memory_regions+0x15c>
		TEGRABL_SET_ERROR_STRING(error, "%d", "command table", TEGRABL_SATA_AHCI_COMMAND_TABLE_SIZE);
    96013df4:	5283a062 	mov	w2, #0x1d03                	// #7427
    96013df8:	52800020 	mov	w0, #0x1                   	// #1
    96013dfc:	52808005 	mov	w5, #0x400                 	// #1024
    96013e00:	90000164 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96013e04:	f0000143 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96013e08:	910e3084 	add	x4, x4, #0x38c
    96013e0c:	9102f463 	add	x3, x3, #0xbd
    96013e10:	72a20202 	movk	w2, #0x1010, lsl #16
    96013e14:	52800041 	mov	w1, #0x2                   	// #2
    96013e18:	9400293a 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_AHCI_INIT_MEMORY_REGIONS_4);
    96013e1c:	5283a060 	mov	w0, #0x1d03                	// #7427
    96013e20:	17ffffbf 	b	96013d1c <tegrabl_sata_ahci_init_memory_regions+0x54>
	memset(context->command_table, 0x0, TEGRABL_SATA_AHCI_COMMAND_TABLE_SIZE);
    96013e24:	d2808002 	mov	x2, #0x400                 	// #1024
    96013e28:	52800001 	mov	w1, #0x0                   	// #0
    96013e2c:	940057ff 	bl	96029e28 <memset>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96013e30:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    96013e34:	17ffffbb 	b	96013d20 <tegrabl_sata_ahci_init_memory_regions+0x58>

0000000096013e38 <tegrabl_sata_ahci_print_pxssts>:
{
    96013e38:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	pxssts.value = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSSTS_0);
    96013e3c:	d28e2500 	mov	x0, #0x7128                	// #28968
    96013e40:	f2a06a00 	movk	x0, #0x350, lsl #16
{
    96013e44:	910003fd 	mov	x29, sp
    96013e48:	f9000bf3 	str	x19, [sp, #16]
	pxssts.value = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSSTS_0);
    96013e4c:	b9400013 	ldr	w19, [x0]
	switch (pxssts.device_det) {
    96013e50:	12000e64 	and	w4, w19, #0xf
    96013e54:	71000c9f 	cmp	w4, #0x3
    96013e58:	54000468 	b.hi	96013ee4 <tegrabl_sata_ahci_print_pxssts+0xac>  // b.pmore
    96013e5c:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013e60:	910a4000 	add	x0, x0, #0x290
    96013e64:	38644800 	ldrb	w0, [x0, w4, uxtw]
    96013e68:	10000061 	adr	x1, 96013e74 <tegrabl_sata_ahci_print_pxssts+0x3c>
    96013e6c:	8b208820 	add	x0, x1, w0, sxtb #2
    96013e70:	d61f0000 	br	x0
		pr_info("Device presence %s and Phy communication %s\n", "not detected", "not established");
    96013e74:	90000162 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    96013e78:	90000161 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    96013e7c:	910e6842 	add	x2, x2, #0x39a
    96013e80:	910ea821 	add	x1, x1, #0x3aa
		pr_info("Device presence %s and Phy communication %s\n", "detected", "not established");
    96013e84:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013e88:	910edc00 	add	x0, x0, #0x3b7
    96013e8c:	940039f9 	bl	96022670 <tegrabl_printf>
	switch (pxssts.interface_speed) {
    96013e90:	d3441e61 	ubfx	x1, x19, #4, #4
    96013e94:	34000381 	cbz	w1, 96013f04 <tegrabl_sata_ahci_print_pxssts+0xcc>
    96013e98:	71000c3f 	cmp	w1, #0x3
    96013e9c:	540003e8 	b.hi	96013f18 <tegrabl_sata_ahci_print_pxssts+0xe0>  // b.pmore
}
    96013ea0:	f9400bf3 	ldr	x19, [sp, #16]
		pr_info("Generation %d communication rate negotiate", pxssts.interface_speed);
    96013ea4:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
}
    96013ea8:	a8c27bfd 	ldp	x29, x30, [sp], #32
		pr_info("Generation %d communication rate negotiate", pxssts.interface_speed);
    96013eac:	91114400 	add	x0, x0, #0x451
    96013eb0:	140039f0 	b	96022670 <tegrabl_printf>
		pr_info("Device presence %s and Phy communication %s\n", "detected", "not established");
    96013eb4:	90000162 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    96013eb8:	910e6842 	add	x2, x2, #0x39a
    96013ebc:	90000161 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    96013ec0:	910eb821 	add	x1, x1, #0x3ae
    96013ec4:	17fffff0 	b	96013e84 <tegrabl_sata_ahci_print_pxssts+0x4c>
		pr_info("Device presence %s and Phy communication %s\n", "detected", "established");
    96013ec8:	90000162 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    96013ecc:	910e7842 	add	x2, x2, #0x39e
    96013ed0:	17fffffb 	b	96013ebc <tegrabl_sata_ahci_print_pxssts+0x84>
		pr_info("Phy in offline mode.\n");
    96013ed4:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96013ed8:	910f9c00 	add	x0, x0, #0x3e7
    96013edc:	940039e5 	bl	96022670 <tegrabl_printf>
		break;
    96013ee0:	17ffffec 	b	96013e90 <tegrabl_sata_ahci_print_pxssts+0x58>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INVALID, "pxssts.device_det: 0x%x\n", pxssts.device_det);
    96013ee4:	52800042 	mov	w2, #0x2                   	// #2
    96013ee8:	90000163 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96013eec:	72a00202 	movk	w2, #0x10, lsl #16
    96013ef0:	91100063 	add	x3, x3, #0x400
    96013ef4:	52800041 	mov	w1, #0x2                   	// #2
    96013ef8:	52800000 	mov	w0, #0x0                   	// #0
    96013efc:	94002901 	bl	9601e300 <tegrabl_error_print>
		break;
    96013f00:	17ffffe4 	b	96013e90 <tegrabl_sata_ahci_print_pxssts+0x58>
}
    96013f04:	f9400bf3 	ldr	x19, [sp, #16]
		pr_info("Device not present or communication not established\n");
    96013f08:	90000160 	adrp	x0, 9603f000 <device_info_list+0x6dc>
}
    96013f0c:	a8c27bfd 	ldp	x29, x30, [sp], #32
		pr_info("Device not present or communication not established\n");
    96013f10:	91106400 	add	x0, x0, #0x419
    96013f14:	140039d7 	b	96022670 <tegrabl_printf>
}
    96013f18:	f9400bf3 	ldr	x19, [sp, #16]
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INVALID, "pxssts.interface_speed: 0x%x\n",
    96013f1c:	52800042 	mov	w2, #0x2                   	// #2
}
    96013f20:	a8c27bfd 	ldp	x29, x30, [sp], #32
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INVALID, "pxssts.interface_speed: 0x%x\n",
    96013f24:	2a0103e4 	mov	w4, w1
    96013f28:	90000163 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96013f2c:	72a00202 	movk	w2, #0x10, lsl #16
    96013f30:	9111fc63 	add	x3, x3, #0x47f
    96013f34:	52800041 	mov	w1, #0x2                   	// #2
    96013f38:	52800000 	mov	w0, #0x0                   	// #0
    96013f3c:	140028f1 	b	9601e300 <tegrabl_error_print>

0000000096013f40 <tegrabl_sata_start_command>:
{
    96013f40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0, 1);
    96013f44:	52800021 	mov	w1, #0x1                   	// #1
{
    96013f48:	910003fd 	mov	x29, sp
    96013f4c:	a90153f3 	stp	x19, x20, [sp, #16]
    96013f50:	aa0003f3 	mov	x19, x0
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0, 1);
    96013f54:	d28e2700 	mov	x0, #0x7138                	// #28984
{
    96013f58:	a9025bf5 	stp	x21, x22, [sp, #32]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0, 1);
    96013f5c:	f2a06a00 	movk	x0, #0x350, lsl #16
	wait_time = timeout;
    96013f60:	aa1303f6 	mov	x22, x19
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0);
    96013f64:	aa0003f4 	mov	x20, x0
	uint32_t reg = 0;
    96013f68:	52800015 	mov	w21, #0x0                   	// #0
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0, 1);
    96013f6c:	b9000001 	str	w1, [x0]
		tegrabl_udelay(1);
    96013f70:	d2800020 	mov	x0, #0x1                   	// #1
    96013f74:	94002f4c 	bl	9601fca4 <tegrabl_udelay>
		if (wait_time == 0ULL) {
    96013f78:	f10006d6 	subs	x22, x22, #0x1
    96013f7c:	54000221 	b.ne	96013fc0 <tegrabl_sata_start_command+0x80>  // b.any
			TEGRABL_SET_ERROR_STRING(error, "command complete", "0x%08x", reg);
    96013f80:	528120c2 	mov	w2, #0x906                 	// #2310
    96013f84:	52800020 	mov	w0, #0x1                   	// #1
    96013f88:	2a1503e5 	mov	w5, w21
    96013f8c:	f0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    96013f90:	90000163 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96013f94:	9107fc84 	add	x4, x4, #0x1ff
    96013f98:	9113ac63 	add	x3, x3, #0x4eb
    96013f9c:	72a20202 	movk	w2, #0x1010, lsl #16
    96013fa0:	52800041 	mov	w1, #0x2                   	// #2
    96013fa4:	940028d7 	bl	9601e300 <tegrabl_error_print>
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_START_COMMAND_1);
    96013fa8:	528120c0 	mov	w0, #0x906                 	// #2310
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_START_COMMAND_2);
    96013fac:	72a20200 	movk	w0, #0x1010, lsl #16
}
    96013fb0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96013fb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96013fb8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96013fbc:	d65f03c0 	ret
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0);
    96013fc0:	b9400295 	ldr	w21, [x20]
	} while (reg != 0UL);
    96013fc4:	35fffd75 	cbnz	w21, 96013f70 <tegrabl_sata_start_command+0x30>
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0);
    96013fc8:	d28e2214 	mov	x20, #0x7110                	// #28944
    96013fcc:	f2a06a14 	movk	x20, #0x350, lsl #16
		tegrabl_udelay(1);
    96013fd0:	d2800020 	mov	x0, #0x1                   	// #1
    96013fd4:	94002f34 	bl	9601fca4 <tegrabl_udelay>
		if (wait_time == 0ULL) {
    96013fd8:	f1000673 	subs	x19, x19, #0x1
    96013fdc:	540001a1 	b.ne	96014010 <tegrabl_sata_start_command+0xd0>  // b.any
			TEGRABL_SET_ERROR_STRING(error, "data transfer complete", "0x%08x", reg);
    96013fe0:	528140c2 	mov	w2, #0xa06                 	// #2566
    96013fe4:	52800020 	mov	w0, #0x1                   	// #1
    96013fe8:	52800005 	mov	w5, #0x0                   	// #0
    96013fec:	f0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    96013ff0:	90000163 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96013ff4:	9107fc84 	add	x4, x4, #0x1ff
    96013ff8:	9113f063 	add	x3, x3, #0x4fc
    96013ffc:	72a20202 	movk	w2, #0x1010, lsl #16
    96014000:	52800041 	mov	w1, #0x2                   	// #2
    96014004:	940028bf 	bl	9601e300 <tegrabl_error_print>
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_START_COMMAND_2);
    96014008:	528140c0 	mov	w0, #0xa06                 	// #2566
    9601400c:	17ffffe8 	b	96013fac <tegrabl_sata_start_command+0x6c>
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0);
    96014010:	b9400280 	ldr	w0, [x20]
	} while (reg == 0UL);
    96014014:	362ffde0 	tbz	w0, #5, 96013fd0 <tegrabl_sata_start_command+0x90>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96014018:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    9601401c:	17ffffe5 	b	96013fb0 <tegrabl_sata_start_command+0x70>

0000000096014020 <tegrabl_sata_ahci_indentify_device>:
{
    96014020:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	memset(cmd_table, 0x0, sizeof(*cmd_table));
    96014024:	d2801202 	mov	x2, #0x90                  	// #144
    96014028:	52800001 	mov	w1, #0x0                   	// #0
{
    9601402c:	910003fd 	mov	x29, sp
    96014030:	f90013f5 	str	x21, [sp, #32]
	cmd_table = (struct tegrabl_ahci_cmd_table *)&context->command_table[0];
    96014034:	f9403015 	ldr	x21, [x0, #96]
{
    96014038:	a90153f3 	stp	x19, x20, [sp, #16]
    9601403c:	aa0003f3 	mov	x19, x0
	memset(cmd_table, 0x0, sizeof(*cmd_table));
    96014040:	aa1503e0 	mov	x0, x21
    96014044:	94005779 	bl	96029e28 <memset>
	fis->fis_type = TEGRABL_AHCI_FIS_TYPE_REG_H2D;
    96014048:	529004e0 	mov	w0, #0x8027                	// #32807
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    9601404c:	52800044 	mov	w4, #0x2                   	// #2
	fis->fis_type = TEGRABL_AHCI_FIS_TYPE_REG_H2D;
    96014050:	72b21d80 	movk	w0, #0x90ec, lsl #16
    96014054:	b90002a0 	str	w0, [x21]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014058:	d2808003 	mov	x3, #0x400                 	// #1024
    9601405c:	52800320 	mov	w0, #0x19                  	// #25
    96014060:	39400261 	ldrb	w1, [x19]
    96014064:	f9402a62 	ldr	x2, [x19, #80]
    96014068:	97ffbe97 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    9601406c:	b5000300 	cbnz	x0, 960140cc <tegrabl_sata_ahci_indentify_device+0xac>
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "identity buffer");
    96014070:	52826042 	mov	w2, #0x1302                	// #4866
    96014074:	d2800004 	mov	x4, #0x0                   	// #0
    96014078:	72a20202 	movk	w2, #0x1010, lsl #16
    9601407c:	52800041 	mov	w1, #0x2                   	// #2
    96014080:	52800020 	mov	w0, #0x1                   	// #1
    96014084:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    96014088:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601408c:	910a68a5 	add	x5, x5, #0x29a
    96014090:	910d2463 	add	x3, x3, #0x349
    96014094:	9400289b 	bl	9601e300 <tegrabl_error_print>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014098:	39400261 	ldrb	w1, [x19]
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_IDENTIFY_DEVICE_1);
    9601409c:	52826055 	mov	w21, #0x1302                	// #4866
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    960140a0:	f9402a62 	ldr	x2, [x19, #80]
    960140a4:	52800044 	mov	w4, #0x2                   	// #2
    960140a8:	d2808003 	mov	x3, #0x400                 	// #1024
    960140ac:	52800320 	mov	w0, #0x19                  	// #25
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_IDENTIFY_DEVICE_1);
    960140b0:	72a20215 	movk	w21, #0x1010, lsl #16
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    960140b4:	97ffbe76 	bl	96003a8c <tegrabl_dma_unmap_buffer>
}
    960140b8:	2a1503e0 	mov	w0, w21
    960140bc:	f94013f5 	ldr	x21, [sp, #32]
    960140c0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960140c4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960140c8:	d65f03c0 	ret
	prdt_entry->address_low = (uint32_t)(address & 0xFFFFFFFFUL);
    960140cc:	b90082a0 	str	w0, [x21, #128]
	prdt_entry->address_high = ((uint32_t)((address >> 32) & 0xFFFFFFFFUL));
    960140d0:	d360fc00 	lsr	x0, x0, #32
    960140d4:	b90086a0 	str	w0, [x21, #132]
	prdt_entry->irc = (1UL << 31) | ((1UL << context->block_size_log2) - 1UL);
    960140d8:	d2800034 	mov	x20, #0x1                   	// #1
    960140dc:	f9400660 	ldr	x0, [x19, #8]
	context->command_list_buf[0] = AHCI_CMD_HEADER_CFL | AHCI_CMD_HEADER_PRDTL;
    960140e0:	528000a2 	mov	w2, #0x5                   	// #5
    960140e4:	72a00022 	movk	w2, #0x1, lsl #16
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    960140e8:	2a1403e4 	mov	w4, w20
    960140ec:	d2808003 	mov	x3, #0x400                 	// #1024
	prdt_entry->irc = (1UL << 31) | ((1UL << context->block_size_log2) - 1UL);
    960140f0:	9ac02280 	lsl	x0, x20, x0
    960140f4:	51000401 	sub	w1, w0, #0x1
    960140f8:	32010021 	orr	w1, w1, #0x80000000
    960140fc:	b9008ea1 	str	w1, [x21, #140]
	context->command_list_buf[0] = AHCI_CMD_HEADER_CFL | AHCI_CMD_HEADER_PRDTL;
    96014100:	f9402e61 	ldr	x1, [x19, #88]
	context->command_list_buf[1] = (1UL << context->block_size_log2);
    96014104:	29000022 	stp	w2, w0, [x1]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014108:	52800320 	mov	w0, #0x19                  	// #25
    9601410c:	f9403262 	ldr	x2, [x19, #96]
    96014110:	39400261 	ldrb	w1, [x19]
    96014114:	97ffbe6c 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    96014118:	b5000340 	cbnz	x0, 96014180 <tegrabl_sata_ahci_indentify_device+0x160>
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "command table");
    9601411c:	52828042 	mov	w2, #0x1402                	// #5122
    96014120:	d2800004 	mov	x4, #0x0                   	// #0
    96014124:	72a20202 	movk	w2, #0x1010, lsl #16
    96014128:	52800041 	mov	w1, #0x2                   	// #2
    9601412c:	2a1403e0 	mov	w0, w20
    96014130:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    96014134:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014138:	910e30a5 	add	x5, x5, #0x38c
    9601413c:	910d2463 	add	x3, x3, #0x349
    96014140:	94002870 	bl	9601e300 <tegrabl_error_print>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014144:	39400261 	ldrb	w1, [x19]
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_IDENTIFY_DEVICE_2);
    96014148:	52828055 	mov	w21, #0x1402                	// #5122
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    9601414c:	f9402a62 	ldr	x2, [x19, #80]
    96014150:	52800044 	mov	w4, #0x2                   	// #2
    96014154:	d2808003 	mov	x3, #0x400                 	// #1024
    96014158:	52800320 	mov	w0, #0x19                  	// #25
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_IDENTIFY_DEVICE_2);
    9601415c:	72a20215 	movk	w21, #0x1010, lsl #16
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014160:	97ffbe4b 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014164:	39400261 	ldrb	w1, [x19]
    96014168:	52800024 	mov	w4, #0x1                   	// #1
    9601416c:	f9403262 	ldr	x2, [x19, #96]
    96014170:	d2808003 	mov	x3, #0x400                 	// #1024
    96014174:	52800320 	mov	w0, #0x19                  	// #25
    96014178:	97ffbe45 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	return error;
    9601417c:	17ffffcf 	b	960140b8 <tegrabl_sata_ahci_indentify_device+0x98>
	context->command_list_buf[2] = (uint32_t)(address & 0xFFFFFFFFUL);
    96014180:	f9402e62 	ldr	x2, [x19, #88]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014184:	2a1403e4 	mov	w4, w20
    96014188:	d2808003 	mov	x3, #0x400                 	// #1024
	context->command_list_buf[2] = (uint32_t)(address & 0xFFFFFFFFUL);
    9601418c:	b9000840 	str	w0, [x2, #8]
	context->command_list_buf[3] = ((uint32_t)((address >> 32) & 0xFFFFFFFFUL));
    96014190:	d360fc00 	lsr	x0, x0, #32
    96014194:	b9000c40 	str	w0, [x2, #12]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014198:	52800320 	mov	w0, #0x19                  	// #25
    9601419c:	39400261 	ldrb	w1, [x19]
    960141a0:	97ffbe49 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    960141a4:	b5000360 	cbnz	x0, 96014210 <tegrabl_sata_ahci_indentify_device+0x1f0>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_IDENTIFY_DEVICE_3);
    960141a8:	5282a055 	mov	w21, #0x1502                	// #5378
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    960141ac:	5282a042 	mov	w2, #0x1502                	// #5378
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_IDENTIFY_DEVICE_3);
    960141b0:	72a20215 	movk	w21, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    960141b4:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    960141b8:	d2800004 	mov	x4, #0x0                   	// #0
    960141bc:	910cd4a5 	add	x5, x5, #0x335
    960141c0:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960141c4:	72a20202 	movk	w2, #0x1010, lsl #16
    960141c8:	910d2463 	add	x3, x3, #0x349
    960141cc:	52800041 	mov	w1, #0x2                   	// #2
    960141d0:	2a1403e0 	mov	w0, w20
    960141d4:	9400284b 	bl	9601e300 <tegrabl_error_print>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    960141d8:	39400261 	ldrb	w1, [x19]
    960141dc:	52800024 	mov	w4, #0x1                   	// #1
    960141e0:	f9402e62 	ldr	x2, [x19, #88]
    960141e4:	d2808003 	mov	x3, #0x400                 	// #1024
    960141e8:	52800320 	mov	w0, #0x19                  	// #25
    960141ec:	97ffbe28 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	if (mapped_id_buf) {
    960141f0:	34fffbb4 	cbz	w20, 96014164 <tegrabl_sata_ahci_indentify_device+0x144>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    960141f4:	39400261 	ldrb	w1, [x19]
    960141f8:	52800044 	mov	w4, #0x2                   	// #2
    960141fc:	f9402a62 	ldr	x2, [x19, #80]
    96014200:	d2808003 	mov	x3, #0x400                 	// #1024
    96014204:	52800320 	mov	w0, #0x19                  	// #25
    96014208:	97ffbe21 	bl	96003a8c <tegrabl_dma_unmap_buffer>
    9601420c:	17ffffd6 	b	96014164 <tegrabl_sata_ahci_indentify_device+0x144>
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0, reg);
    96014210:	d28e2280 	mov	x0, #0x7114                	// #28948
    96014214:	52800441 	mov	w1, #0x22                  	// #34
    96014218:	f2a06a00 	movk	x0, #0x350, lsl #16
    9601421c:	b9000001 	str	w1, [x0]
	error = tegrabl_sata_start_command(TEGRABL_SATA_IDENTIFY_TIMEOUT);
    96014220:	d2884800 	mov	x0, #0x4240                	// #16960
    96014224:	f2a001e0 	movk	x0, #0xf, lsl #16
    96014228:	97ffff46 	bl	96013f40 <tegrabl_sata_start_command>
    9601422c:	2a0003f5 	mov	w21, w0
	if (error != TEGRABL_NO_ERROR) {
    96014230:	34000120 	cbz	w0, 96014254 <tegrabl_sata_ahci_indentify_device+0x234>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_COMMAND_FAILED, "device indentify");
    96014234:	528002e2 	mov	w2, #0x17                  	// #23
    96014238:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601423c:	72a00202 	movk	w2, #0x10, lsl #16
    96014240:	910aa863 	add	x3, x3, #0x2aa
    96014244:	52800041 	mov	w1, #0x2                   	// #2
    96014248:	52800000 	mov	w0, #0x0                   	// #0
    9601424c:	9400282d 	bl	9601e300 <tegrabl_error_print>
		goto fail;
    96014250:	17ffffe2 	b	960141d8 <tegrabl_sata_ahci_indentify_device+0x1b8>
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014254:	39400261 	ldrb	w1, [x19]
    96014258:	52800320 	mov	w0, #0x19                  	// #25
    9601425c:	f9402a62 	ldr	x2, [x19, #80]
    96014260:	52800044 	mov	w4, #0x2                   	// #2
    96014264:	d2808003 	mov	x3, #0x400                 	// #1024
    96014268:	97ffbe09 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	dev_id = (struct tegrabl_ata_dev_id *)&context->indentity_buf[0];
    9601426c:	f9402a60 	ldr	x0, [x19, #80]
	if (context->block_count == 0x0FFFFFFFULL) {
    96014270:	b2406fe2 	mov	x2, #0xfffffff             	// #268435455
						   (uint64_t)dev_id->sectors[2] << 16 |
    96014274:	b9407801 	ldr	w1, [x0, #120]
	context->block_count = (uint64_t)dev_id->sectors[0] |
    96014278:	f9000a61 	str	x1, [x19, #16]
	if (context->block_count == 0x0FFFFFFFULL) {
    9601427c:	eb02003f 	cmp	x1, x2
    96014280:	54000061 	b.ne	9601428c <tegrabl_sata_ahci_indentify_device+0x26c>  // b.any
							   (uint64_t)dev_id->sectors_48bit[2] << 16 |
    96014284:	b940c801 	ldr	w1, [x0, #200]
    96014288:	f9000a61 	str	x1, [x19, #16]
							   (1U << SATA_SUPPORTS_FLUSH)) != 0U) ? true : false;
    9601428c:	3942b400 	ldrb	w0, [x0, #173]
	mapped_id_buf = false;
    96014290:	52800014 	mov	w20, #0x0                   	// #0
							   (1U << SATA_SUPPORTS_FLUSH)) != 0U) ? true : false;
    96014294:	d3441001 	ubfx	x1, x0, #4, #1
    96014298:	3901a261 	strb	w1, [x19, #104]
								   (1U << SATA_SUPPORTS_FLUSH_EXT)) != 0U) ? true : false;
    9601429c:	d3451401 	ubfx	x1, x0, #5, #1
									 (1U << SATA_SUPPORTS_48_BIT_ADDRESS)) != 0U) ? true : false;
    960142a0:	d3420800 	ubfx	x0, x0, #2, #1
								   (1U << SATA_SUPPORTS_FLUSH_EXT)) != 0U) ? true : false;
    960142a4:	3901a661 	strb	w1, [x19, #105]
									 (1U << SATA_SUPPORTS_48_BIT_ADDRESS)) != 0U) ? true : false;
    960142a8:	3901ae60 	strb	w0, [x19, #107]
    960142ac:	17ffffcb 	b	960141d8 <tegrabl_sata_ahci_indentify_device+0x1b8>

00000000960142b0 <tegrabl_sata_xfer_complete>:
{
    960142b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960142b4:	910003fd 	mov	x29, sp
    960142b8:	a90153f3 	stp	x19, x20, [sp, #16]
    960142bc:	aa0003f3 	mov	x19, x0
    960142c0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960142c4:	aa0103f4 	mov	x20, x1
    960142c8:	f9001bf7 	str	x23, [sp, #48]
	wait_time = timeout;
    960142cc:	aa0103f6 	mov	x22, x1
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0);
    960142d0:	d28e2717 	mov	x23, #0x7138                	// #28984
	uint32_t reg = 0;
    960142d4:	52800015 	mov	w21, #0x0                   	// #0
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0);
    960142d8:	f2a06a17 	movk	x23, #0x350, lsl #16
		tegrabl_udelay(1);
    960142dc:	d2800020 	mov	x0, #0x1                   	// #1
    960142e0:	94002e71 	bl	9601fca4 <tegrabl_udelay>
		if (wait_time == 0ULL) {
    960142e4:	f10006d6 	subs	x22, x22, #0x1
    960142e8:	540003e1 	b.ne	96014364 <tegrabl_sata_xfer_complete+0xb4>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_XFER_COMPLETE_1);
    960142ec:	528160d4 	mov	w20, #0xb06                 	// #2822
			TEGRABL_SET_ERROR_STRING(error, "command complete", "0x%08x", reg);
    960142f0:	528160c2 	mov	w2, #0xb06                 	// #2822
    960142f4:	2a1503e5 	mov	w5, w21
    960142f8:	d0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    960142fc:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014300:	9107fc84 	add	x4, x4, #0x1ff
    96014304:	9113ac63 	add	x3, x3, #0x4eb
    96014308:	72a20202 	movk	w2, #0x1010, lsl #16
    9601430c:	52800041 	mov	w1, #0x2                   	// #2
    96014310:	52800020 	mov	w0, #0x1                   	// #1
    96014314:	940027fb 	bl	9601e300 <tegrabl_error_print>
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_XFER_COMPLETE_2);
    96014318:	72a20214 	movk	w20, #0x1010, lsl #16
	if (!context->xfer_info.is_write) {
    9601431c:	39410260 	ldrb	w0, [x19, #64]
    96014320:	35000160 	cbnz	w0, 9601434c <tegrabl_sata_xfer_complete+0x9c>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA,
    96014324:	39400261 	ldrb	w1, [x19]
    96014328:	52800044 	mov	w4, #0x2                   	// #2
    9601432c:	f9401e62 	ldr	x2, [x19, #56]
			context->xfer_info.count << context->block_size_log2,
    96014330:	f9400660 	ldr	x0, [x19, #8]
    96014334:	b9403263 	ldr	w3, [x19, #48]
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA,
    96014338:	1ac02063 	lsl	w3, w3, w0
    9601433c:	52800320 	mov	w0, #0x19                  	// #25
    96014340:	97ffbdd3 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		context->xfer_info.count = 0;
    96014344:	b900327f 	str	wzr, [x19, #48]
		context->xfer_info.buf = NULL;
    96014348:	f9001e7f 	str	xzr, [x19, #56]
}
    9601434c:	2a1403e0 	mov	w0, w20
    96014350:	f9401bf7 	ldr	x23, [sp, #48]
    96014354:	a94153f3 	ldp	x19, x20, [sp, #16]
    96014358:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601435c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96014360:	d65f03c0 	ret
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0);
    96014364:	b94002f5 	ldr	w21, [x23]
	} while (reg != 0UL);
    96014368:	35fffbb5 	cbnz	w21, 960142dc <tegrabl_sata_xfer_complete+0x2c>
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0);
    9601436c:	d28e2215 	mov	x21, #0x7110                	// #28944
    96014370:	f2a06a15 	movk	x21, #0x350, lsl #16
		tegrabl_udelay(1);
    96014374:	d2800020 	mov	x0, #0x1                   	// #1
    96014378:	94002e4b 	bl	9601fca4 <tegrabl_udelay>
		if (wait_time == 0ULL) {
    9601437c:	f1000694 	subs	x20, x20, #0x1
    96014380:	540001a1 	b.ne	960143b4 <tegrabl_sata_xfer_complete+0x104>  // b.any
			TEGRABL_SET_ERROR_STRING(error, "data transfer complete", "0x%08x", reg);
    96014384:	528180c2 	mov	w2, #0xc06                 	// #3078
    96014388:	52800005 	mov	w5, #0x0                   	// #0
    9601438c:	d0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    96014390:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014394:	9107fc84 	add	x4, x4, #0x1ff
    96014398:	9113f063 	add	x3, x3, #0x4fc
    9601439c:	72a20202 	movk	w2, #0x1010, lsl #16
    960143a0:	52800041 	mov	w1, #0x2                   	// #2
    960143a4:	52800020 	mov	w0, #0x1                   	// #1
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_XFER_COMPLETE_2);
    960143a8:	528180d4 	mov	w20, #0xc06                 	// #3078
			TEGRABL_SET_ERROR_STRING(error, "data transfer complete", "0x%08x", reg);
    960143ac:	940027d5 	bl	9601e300 <tegrabl_error_print>
    960143b0:	17ffffda 	b	96014318 <tegrabl_sata_xfer_complete+0x68>
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0);
    960143b4:	b94002a0 	ldr	w0, [x21]
	} while (reg == 0UL);
    960143b8:	362ffde0 	tbz	w0, #5, 96014374 <tegrabl_sata_xfer_complete+0xc4>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960143bc:	52800014 	mov	w20, #0x0                   	// #0
    960143c0:	17ffffd7 	b	9601431c <tegrabl_sata_xfer_complete+0x6c>

00000000960143c4 <tegrabl_sata_ahci_xfer>:
{
    960143c4:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    960143c8:	910003fd 	mov	x29, sp
    960143cc:	a90153f3 	stp	x19, x20, [sp, #16]
    960143d0:	aa0003f3 	mov	x19, x0
	cmd_table = (struct tegrabl_ahci_cmd_table *)&context->command_table[0];
    960143d4:	f9403014 	ldr	x20, [x0, #96]
{
    960143d8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960143dc:	12001c95 	and	w21, w4, #0xff
    960143e0:	a90363f7 	stp	x23, x24, [sp, #48]
    960143e4:	2a0203f6 	mov	w22, w2
    960143e8:	a9046bf9 	stp	x25, x26, [sp, #64]
    960143ec:	2a0303f8 	mov	w24, w3
    960143f0:	a90573fb 	stp	x27, x28, [sp, #80]
    960143f4:	aa0103f9 	mov	x25, x1
	uint32_t block_size_log2 = context->block_size_log2;
    960143f8:	f940041c 	ldr	x28, [x0, #8]
{
    960143fc:	aa0503fa 	mov	x26, x5
    96014400:	12001cd7 	and	w23, w6, #0xff
	memset(cmd_table, 0x0, sizeof(*cmd_table));
    96014404:	d2801202 	mov	x2, #0x90                  	// #144
    96014408:	52800001 	mov	w1, #0x0                   	// #0
    9601440c:	aa1403e0 	mov	x0, x20
    96014410:	94005686 	bl	96029e28 <memset>
	fis->fis_type = TEGRABL_AHCI_FIS_TYPE_REG_H2D;
    96014414:	128ffb00 	mov	w0, #0xffff8027            	// #-32729
    96014418:	79000280 	strh	w0, [x20]
	fis->device = 0x40;
    9601441c:	52800800 	mov	w0, #0x40                  	// #64
    96014420:	39001e80 	strb	w0, [x20, #7]
		fis->command = is_write ? SATA_COMMAND_DMA_WRITE_EXTENDED :
    96014424:	710002bf 	cmp	w21, #0x0
	if (context->support_extended_cmd == true) {
    96014428:	3941ae60 	ldrb	w0, [x19, #107]
    9601442c:	340005e0 	cbz	w0, 960144e8 <tegrabl_sata_ahci_xfer+0x124>
		fis->command = is_write ? SATA_COMMAND_DMA_WRITE_EXTENDED :
    96014430:	528004a0 	mov	w0, #0x25                  	// #37
    96014434:	528006a1 	mov	w1, #0x35                  	// #53
		fis->command = is_write ? SATA_COMMAND_DMA_WRITE :
    96014438:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    9601443c:	39000a80 	strb	w0, [x20, #2]
	fis->lba1 = (uint8_t)((block >> 8) & 0xFFUL);
    96014440:	53087ec0 	lsr	w0, w22, #8
    96014444:	39001680 	strb	w0, [x20, #5]
	fis->lba2 = (uint8_t)((block >> 16) & 0xFFUL);
    96014448:	53107ec0 	lsr	w0, w22, #16
	fis->lba0 = (uint8_t)(block & 0xFFUL);
    9601444c:	39001296 	strb	w22, [x20, #4]
	fis->lba2 = (uint8_t)((block >> 16) & 0xFFUL);
    96014450:	39001a80 	strb	w0, [x20, #6]
	fis->lba3 = (uint8_t)((block >> 24) & 0xFFUL);
    96014454:	53187ed6 	lsr	w22, w22, #24
	fis->counth = (uint8_t)((count >> 8) & 0xFFUL);
    96014458:	53087f00 	lsr	w0, w24, #8
	fis->lba3 = (uint8_t)((block >> 24) & 0xFFUL);
    9601445c:	39002296 	strb	w22, [x20, #8]
	fis->lba4 = (uint8_t)((block >> 8) & 0xFFUL);
    96014460:	7800929f 	sturh	wzr, [x20, #9]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014464:	710002bf 	cmp	w21, #0x0
	fis->countl = (uint8_t)(count & 0xFFUL);
    96014468:	39003298 	strb	w24, [x20, #12]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    9601446c:	1a9f17f6 	cset	w22, eq  // eq = none
	fis->counth = (uint8_t)((count >> 8) & 0xFFUL);
    96014470:	39003680 	strb	w0, [x20, #13]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014474:	110006d6 	add	w22, w22, #0x1
				buf, count << block_size_log2,
    96014478:	1adc231b 	lsl	w27, w24, w28
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    9601447c:	2a1603e4 	mov	w4, w22
    96014480:	39400261 	ldrb	w1, [x19]
    96014484:	aa1b03e3 	mov	x3, x27
    96014488:	aa1903e2 	mov	x2, x25
    9601448c:	52800320 	mov	w0, #0x19                  	// #25
    96014490:	97ffbd8d 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    96014494:	b5000300 	cbnz	x0, 960144f4 <tegrabl_sata_ahci_xfer+0x130>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_XFER_1);
    96014498:	5281a054 	mov	w20, #0xd02                 	// #3330
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "buffer");
    9601449c:	5281a042 	mov	w2, #0xd02                 	// #3330
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_XFER_1);
    960144a0:	72a20214 	movk	w20, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "buffer");
    960144a4:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    960144a8:	d2800004 	mov	x4, #0x0                   	// #0
    960144ac:	910d08a5 	add	x5, x5, #0x342
    960144b0:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960144b4:	72a20202 	movk	w2, #0x1010, lsl #16
    960144b8:	910d2463 	add	x3, x3, #0x349
    960144bc:	52800041 	mov	w1, #0x2                   	// #2
    960144c0:	52800020 	mov	w0, #0x1                   	// #1
    960144c4:	9400278f 	bl	9601e300 <tegrabl_error_print>
}
    960144c8:	2a1403e0 	mov	w0, w20
    960144cc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960144d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960144d4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960144d8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960144dc:	a94573fb 	ldp	x27, x28, [sp, #80]
    960144e0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960144e4:	d65f03c0 	ret
		fis->command = is_write ? SATA_COMMAND_DMA_WRITE :
    960144e8:	52801900 	mov	w0, #0xc8                  	// #200
    960144ec:	52801941 	mov	w1, #0xca                  	// #202
    960144f0:	17ffffd2 	b	96014438 <tegrabl_sata_ahci_xfer+0x74>
	context->command_list_buf[0] = AHCI_CMD_HEADER_CFL | AHCI_CMD_HEADER_PRDTL;
    960144f4:	f9402e61 	ldr	x1, [x19, #88]
		context->command_list_buf[0] |= CMD_HEADER_WRITE;
    960144f8:	710002bf 	cmp	w21, #0x0
	prdt_entry->address_low = (uint32_t)(address & 0xFFFFFFFFUL);
    960144fc:	b9008280 	str	w0, [x20, #128]
	prdt_entry->address_high = ((uint32_t)((address >> 32) & 0xFFFFFFFFUL));
    96014500:	d360fc00 	lsr	x0, x0, #32
    96014504:	b9008680 	str	w0, [x20, #132]
	prdt_entry->irc |= ((count << block_size_log2) - 1UL);
    96014508:	51000760 	sub	w0, w27, #0x1
    9601450c:	32010000 	orr	w0, w0, #0x80000000
		context->command_list_buf[0] |= CMD_HEADER_WRITE;
    96014510:	528000a2 	mov	w2, #0x5                   	// #5
	prdt_entry->irc |= ((count << block_size_log2) - 1UL);
    96014514:	b9008e80 	str	w0, [x20, #140]
		context->command_list_buf[0] |= CMD_HEADER_WRITE;
    96014518:	528008a0 	mov	w0, #0x45                  	// #69
    9601451c:	72a00022 	movk	w2, #0x1, lsl #16
    96014520:	72a00020 	movk	w0, #0x1, lsl #16
    96014524:	1a821000 	csel	w0, w0, w2, ne  // ne = any
	context->command_list_buf[1] = count << block_size_log2;
    96014528:	29006c20 	stp	w0, w27, [x1]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    9601452c:	52800024 	mov	w4, #0x1                   	// #1
    96014530:	d2808003 	mov	x3, #0x400                 	// #1024
    96014534:	39400261 	ldrb	w1, [x19]
    96014538:	52800320 	mov	w0, #0x19                  	// #25
    9601453c:	f9403262 	ldr	x2, [x19, #96]
    96014540:	97ffbd61 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    96014544:	b50003e0 	cbnz	x0, 960145c0 <tegrabl_sata_ahci_xfer+0x1fc>
	bool mapped_cmd_table = false;
    96014548:	52800018 	mov	w24, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_XFER_2);
    9601454c:	5281c054 	mov	w20, #0xe02                 	// #3586
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "command table");
    96014550:	5281c042 	mov	w2, #0xe02                 	// #3586
    96014554:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    96014558:	d2800004 	mov	x4, #0x0                   	// #0
    9601455c:	910e30a5 	add	x5, x5, #0x38c
    96014560:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014564:	72a20202 	movk	w2, #0x1010, lsl #16
    96014568:	910d2463 	add	x3, x3, #0x349
    9601456c:	52800041 	mov	w1, #0x2                   	// #2
    96014570:	52800020 	mov	w0, #0x1                   	// #1
    96014574:	94002763 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_XFER_3);
    96014578:	72a20214 	movk	w20, #0x1010, lsl #16
	if (mapped_buf && !(is_async && !is_write)) {
    9601457c:	520002f7 	eor	w23, w23, #0x1
    96014580:	2a1702b5 	orr	w21, w21, w23
    96014584:	340000f5 	cbz	w21, 960145a0 <tegrabl_sata_ahci_xfer+0x1dc>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014588:	39400261 	ldrb	w1, [x19]
    9601458c:	2a1603e4 	mov	w4, w22
    96014590:	aa1b03e3 	mov	x3, x27
    96014594:	aa1903e2 	mov	x2, x25
    96014598:	52800320 	mov	w0, #0x19                  	// #25
    9601459c:	97ffbd3c 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	if (mapped_cmd_table) {
    960145a0:	34fff958 	cbz	w24, 960144c8 <tegrabl_sata_ahci_xfer+0x104>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    960145a4:	39400261 	ldrb	w1, [x19]
    960145a8:	52800024 	mov	w4, #0x1                   	// #1
    960145ac:	f9403262 	ldr	x2, [x19, #96]
    960145b0:	d2808003 	mov	x3, #0x400                 	// #1024
    960145b4:	52800320 	mov	w0, #0x19                  	// #25
    960145b8:	97ffbd35 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	return error;
    960145bc:	17ffffc3 	b	960144c8 <tegrabl_sata_ahci_xfer+0x104>
	context->command_list_buf[2] = (uint32_t)(address & 0xFFFFFFFFUL);
    960145c0:	f9402e62 	ldr	x2, [x19, #88]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    960145c4:	52800024 	mov	w4, #0x1                   	// #1
    960145c8:	d2808003 	mov	x3, #0x400                 	// #1024
	context->command_list_buf[2] = (uint32_t)(address & 0xFFFFFFFFUL);
    960145cc:	b9000840 	str	w0, [x2, #8]
	context->command_list_buf[3] = ((uint32_t)((address >> 32) & 0xFFFFFFFFUL));
    960145d0:	d360fc00 	lsr	x0, x0, #32
    960145d4:	b9000c40 	str	w0, [x2, #12]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    960145d8:	52800320 	mov	w0, #0x19                  	// #25
    960145dc:	39400261 	ldrb	w1, [x19]
    960145e0:	97ffbd39 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    960145e4:	b50001c0 	cbnz	x0, 9601461c <tegrabl_sata_ahci_xfer+0x258>
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    960145e8:	5281e042 	mov	w2, #0xf02                 	// #3842
    960145ec:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    960145f0:	d2800004 	mov	x4, #0x0                   	// #0
    960145f4:	910cd4a5 	add	x5, x5, #0x335
    960145f8:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960145fc:	72a20202 	movk	w2, #0x1010, lsl #16
    96014600:	910d2463 	add	x3, x3, #0x349
    96014604:	52800041 	mov	w1, #0x2                   	// #2
    96014608:	52800020 	mov	w0, #0x1                   	// #1
	mapped_cmd_table = true;
    9601460c:	52800038 	mov	w24, #0x1                   	// #1
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    96014610:	9400273c 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_XFER_3);
    96014614:	5281e054 	mov	w20, #0xf02                 	// #3842
    96014618:	17ffffd8 	b	96014578 <tegrabl_sata_ahci_xfer+0x1b4>
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0, reg);
    9601461c:	d28e2281 	mov	x1, #0x7114                	// #28948
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXIE, DPE, 1, reg);
    96014620:	710002bf 	cmp	w21, #0x0
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0, reg);
    96014624:	f2a06a01 	movk	x1, #0x350, lsl #16
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXIE, DPE, 1, reg);
    96014628:	1a9f07e0 	cset	w0, ne  // ne = any
    9601462c:	11008000 	add	w0, w0, #0x20
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0, reg);
    96014630:	b9000020 	str	w0, [x1]
	if (is_async) {
    96014634:	34000217 	cbz	w23, 96014674 <tegrabl_sata_ahci_xfer+0x2b0>
		NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0, 1);
    96014638:	d28e2700 	mov	x0, #0x7138                	// #28984
    9601463c:	52800021 	mov	w1, #0x1                   	// #1
    96014640:	f2a06a00 	movk	x0, #0x350, lsl #16
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96014644:	52800014 	mov	w20, #0x0                   	// #0
		NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCI_0, 1);
    96014648:	b9000001 	str	w1, [x0]
		context->xfer_info.count = count;
    9601464c:	b9003278 	str	w24, [x19, #48]
		context->xfer_info.buf = buf;
    96014650:	f9001e79 	str	x25, [x19, #56]
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014654:	39400261 	ldrb	w1, [x19]
    96014658:	52800024 	mov	w4, #0x1                   	// #1
    9601465c:	f9402e62 	ldr	x2, [x19, #88]
    96014660:	d2808003 	mov	x3, #0x400                 	// #1024
    96014664:	52800320 	mov	w0, #0x19                  	// #25
    96014668:	52800038 	mov	w24, #0x1                   	// #1
    9601466c:	97ffbd08 	bl	96003a8c <tegrabl_dma_unmap_buffer>
    96014670:	17ffffc3 	b	9601457c <tegrabl_sata_ahci_xfer+0x1b8>
		error = tegrabl_sata_start_command(timeout);
    96014674:	aa1a03e0 	mov	x0, x26
    96014678:	97fffe32 	bl	96013f40 <tegrabl_sata_start_command>
    9601467c:	2a0003f4 	mov	w20, w0
    96014680:	17fffff5 	b	96014654 <tegrabl_sata_ahci_xfer+0x290>

0000000096014684 <tegrabl_sata_ahci_io>:
	return tegrabl_sata_ahci_xfer(context, buf, block, count, is_write, timeout,
    96014684:	52800006 	mov	w6, #0x0                   	// #0
    96014688:	17ffff4f 	b	960143c4 <tegrabl_sata_ahci_xfer>

000000009601468c <tegrabl_sata_ahci_flush_device>:
{
    9601468c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96014690:	910003fd 	mov	x29, sp
    96014694:	a90153f3 	stp	x19, x20, [sp, #16]
    96014698:	aa0003f3 	mov	x19, x0
	if ((context->supports_flush == false) && (context->supports_flush_ext == false)) {
    9601469c:	3941a000 	ldrb	w0, [x0, #104]
    960146a0:	35000200 	cbnz	w0, 960146e0 <tegrabl_sata_ahci_flush_device+0x54>
    960146a4:	3941a660 	ldrb	w0, [x19, #105]
    960146a8:	350001c0 	cbnz	w0, 960146e0 <tegrabl_sata_ahci_flush_device+0x54>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED,
    960146ac:	52822034 	mov	w20, #0x1101                	// #4353
		TEGRABL_SET_ERROR_STRING(error, "flush");
    960146b0:	52822022 	mov	w2, #0x1101                	// #4353
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED,
    960146b4:	72a20214 	movk	w20, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "flush");
    960146b8:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960146bc:	72a20202 	movk	w2, #0x1010, lsl #16
    960146c0:	910a5063 	add	x3, x3, #0x294
    960146c4:	52800041 	mov	w1, #0x2                   	// #2
    960146c8:	52800020 	mov	w0, #0x1                   	// #1
    960146cc:	9400270d 	bl	9601e300 <tegrabl_error_print>
}
    960146d0:	2a1403e0 	mov	w0, w20
    960146d4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960146d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960146dc:	d65f03c0 	ret
	cmd_table = (struct tegrabl_ahci_cmd_table *)&context->command_table[0];
    960146e0:	f9403274 	ldr	x20, [x19, #96]
	memset(cmd_table, 0x0, sizeof(*cmd_table));
    960146e4:	d2801202 	mov	x2, #0x90                  	// #144
    960146e8:	52800001 	mov	w1, #0x0                   	// #0
    960146ec:	aa1403e0 	mov	x0, x20
    960146f0:	940055ce 	bl	96029e28 <memset>
	fis->fis_type = TEGRABL_AHCI_FIS_TYPE_REG_H2D;
    960146f4:	128ffb00 	mov	w0, #0xffff8027            	// #-32729
    960146f8:	79000280 	strh	w0, [x20]
	fis->device = 0x40;
    960146fc:	52800800 	mov	w0, #0x40                  	// #64
    96014700:	39001e80 	strb	w0, [x20, #7]
		fis->command = SATA_COMMAND_FLUSH_EXTENDED;
    96014704:	12800301 	mov	w1, #0xffffffe7            	// #-25
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014708:	52800024 	mov	w4, #0x1                   	// #1
	if (context->supports_flush_ext == true) {
    9601470c:	3941a660 	ldrb	w0, [x19, #105]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014710:	d2808003 	mov	x3, #0x400                 	// #1024
		fis->command = SATA_COMMAND_FLUSH_EXTENDED;
    96014714:	7100001f 	cmp	w0, #0x0
    96014718:	128002a0 	mov	w0, #0xffffffea            	// #-22
    9601471c:	1a811000 	csel	w0, w0, w1, ne  // ne = any
    96014720:	39000a80 	strb	w0, [x20, #2]
	context->command_list_buf[0] = AHCI_CMD_HEADER_CFL | CMD_HEADER_WRITE;
    96014724:	d28008a1 	mov	x1, #0x45                  	// #69
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014728:	a9458a60 	ldp	x0, x2, [x19, #88]
	context->command_list_buf[0] = AHCI_CMD_HEADER_CFL | CMD_HEADER_WRITE;
    9601472c:	f9000001 	str	x1, [x0]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014730:	52800320 	mov	w0, #0x19                  	// #25
    96014734:	39400261 	ldrb	w1, [x19]
    96014738:	97ffbce3 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    9601473c:	b5000280 	cbnz	x0, 9601478c <tegrabl_sata_ahci_flush_device+0x100>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_FLUSH_DEVICE_1);
    96014740:	52822054 	mov	w20, #0x1102                	// #4354
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "command table");
    96014744:	52822042 	mov	w2, #0x1102                	// #4354
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_FLUSH_DEVICE_1);
    96014748:	72a20214 	movk	w20, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s", address, "command table");
    9601474c:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    96014750:	d2800004 	mov	x4, #0x0                   	// #0
    96014754:	910e30a5 	add	x5, x5, #0x38c
    96014758:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601475c:	72a20202 	movk	w2, #0x1010, lsl #16
    96014760:	910d2463 	add	x3, x3, #0x349
    96014764:	52800041 	mov	w1, #0x2                   	// #2
    96014768:	52800020 	mov	w0, #0x1                   	// #1
    9601476c:	940026e5 	bl	9601e300 <tegrabl_error_print>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014770:	39400261 	ldrb	w1, [x19]
    96014774:	52800024 	mov	w4, #0x1                   	// #1
    96014778:	f9403262 	ldr	x2, [x19, #96]
    9601477c:	d2808003 	mov	x3, #0x400                 	// #1024
    96014780:	52800320 	mov	w0, #0x19                  	// #25
    96014784:	97ffbcc2 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	return error;
    96014788:	17ffffd2 	b	960146d0 <tegrabl_sata_ahci_flush_device+0x44>
	context->command_list_buf[2] = (uint32_t)(address & 0xFFFFFFFFUL);
    9601478c:	f9402e62 	ldr	x2, [x19, #88]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    96014790:	52800024 	mov	w4, #0x1                   	// #1
    96014794:	d2808003 	mov	x3, #0x400                 	// #1024
	context->command_list_buf[2] = (uint32_t)(address & 0xFFFFFFFFUL);
    96014798:	b9000840 	str	w0, [x2, #8]
	context->command_list_buf[3] = ((uint32_t)((address >> 32) & 0xFFFFFFFFUL));
    9601479c:	d360fc00 	lsr	x0, x0, #32
    960147a0:	b9000c40 	str	w0, [x2, #12]
	address = tegrabl_dma_map_buffer(TEGRABL_MODULE_SATA, context->instance,
    960147a4:	52800320 	mov	w0, #0x19                  	// #25
    960147a8:	39400261 	ldrb	w1, [x19]
    960147ac:	97ffbcc6 	bl	96003ac4 <tegrabl_dma_map_buffer>
	if (address == 0ULL) {
    960147b0:	b5000280 	cbnz	x0, 96014800 <tegrabl_sata_ahci_flush_device+0x174>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_FLUSH_DEVICE_2);
    960147b4:	52824054 	mov	w20, #0x1202                	// #4610
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    960147b8:	52824042 	mov	w2, #0x1202                	// #4610
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_AHCI_FLUSH_DEVICE_2);
    960147bc:	72a20214 	movk	w20, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "0x%"PRIx64" returned by dmamap for %s",
    960147c0:	f0000145 	adrp	x5, 9603f000 <device_info_list+0x6dc>
    960147c4:	d2800004 	mov	x4, #0x0                   	// #0
    960147c8:	910cd4a5 	add	x5, x5, #0x335
    960147cc:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960147d0:	72a20202 	movk	w2, #0x1010, lsl #16
    960147d4:	910d2463 	add	x3, x3, #0x349
    960147d8:	52800041 	mov	w1, #0x2                   	// #2
    960147dc:	52800020 	mov	w0, #0x1                   	// #1
    960147e0:	940026c8 	bl	9601e300 <tegrabl_error_print>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SATA, context->instance,
    960147e4:	39400261 	ldrb	w1, [x19]
    960147e8:	52800024 	mov	w4, #0x1                   	// #1
    960147ec:	f9402e62 	ldr	x2, [x19, #88]
    960147f0:	d2808003 	mov	x3, #0x400                 	// #1024
    960147f4:	52800320 	mov	w0, #0x19                  	// #25
    960147f8:	97ffbca5 	bl	96003a8c <tegrabl_dma_unmap_buffer>
    960147fc:	17ffffdd 	b	96014770 <tegrabl_sata_ahci_flush_device+0xe4>
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0, reg);
    96014800:	d28e2280 	mov	x0, #0x7114                	// #28948
    96014804:	52800421 	mov	w1, #0x21                  	// #33
    96014808:	f2a06a00 	movk	x0, #0x350, lsl #16
    9601480c:	b9000001 	str	w1, [x0]
	error = tegrabl_sata_start_command(TEGRABL_SATA_FLUSH_TIMEOUT);
    96014810:	d2987000 	mov	x0, #0xc380                	// #50048
    96014814:	f2a03920 	movk	x0, #0x1c9, lsl #16
    96014818:	97fffdca 	bl	96013f40 <tegrabl_sata_start_command>
    9601481c:	2a0003f4 	mov	w20, w0
    96014820:	17fffff1 	b	960147e4 <tegrabl_sata_ahci_flush_device+0x158>

0000000096014824 <tegrabl_sata_ahci_free_buffers>:
{
    96014824:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96014828:	910003fd 	mov	x29, sp
    9601482c:	f9000bf3 	str	x19, [sp, #16]
    96014830:	aa0003f3 	mov	x19, x0
	tegrabl_dealloc(TEGRABL_HEAP_DMA, context->rfis);
    96014834:	52800020 	mov	w0, #0x1                   	// #1
    96014838:	f9402661 	ldr	x1, [x19, #72]
    9601483c:	9400489b 	bl	96026aa8 <tegrabl_dealloc>
	tegrabl_dealloc(TEGRABL_HEAP_DMA, context->indentity_buf);
    96014840:	f9402a61 	ldr	x1, [x19, #80]
    96014844:	52800020 	mov	w0, #0x1                   	// #1
    96014848:	94004898 	bl	96026aa8 <tegrabl_dealloc>
	tegrabl_dealloc(TEGRABL_HEAP_DMA, context->command_list_buf);
    9601484c:	f9402e61 	ldr	x1, [x19, #88]
    96014850:	52800020 	mov	w0, #0x1                   	// #1
    96014854:	94004895 	bl	96026aa8 <tegrabl_dealloc>
	tegrabl_dealloc(TEGRABL_HEAP_DMA, context->command_table);
    96014858:	f9403261 	ldr	x1, [x19, #96]
    9601485c:	52800020 	mov	w0, #0x1                   	// #1
}
    96014860:	f9400bf3 	ldr	x19, [sp, #16]
    96014864:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_dealloc(TEGRABL_HEAP_DMA, context->command_table);
    96014868:	14004890 	b	96026aa8 <tegrabl_dealloc>

000000009601486c <tegrabl_sata_ahci_skip_init>:
}
#endif

tegrabl_error_t tegrabl_sata_ahci_skip_init(
		struct tegrabl_sata_context *context)
{
    9601486c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96014870:	910003fd 	mov	x29, sp
    96014874:	a90153f3 	stp	x19, x20, [sp, #16]
	time_t timeout = 500;

	TEGRABL_ASSERT(context != NULL);

	/* Stop the AHCI DMA engine */
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    96014878:	d28e2313 	mov	x19, #0x7118                	// #28952
    9601487c:	f2a06a13 	movk	x19, #0x350, lsl #16
{
    96014880:	a9025bf5 	stp	x21, x22, [sp, #32]
    96014884:	aa0003f6 	mov	x22, x0
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXCMD, ST, 0, reg);
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0, reg);
    96014888:	d2803e95 	mov	x21, #0x1f4                 	// #500
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    9601488c:	b9400274 	ldr	w20, [x19]
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXCMD, ST, 0, reg);
    96014890:	121f7a94 	and	w20, w20, #0xfffffffe
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0, reg);
    96014894:	b9000274 	str	w20, [x19]

	/* wait for DMA Engine to stop */
	wait_time = timeout;
	do {
		tegrabl_udelay(1);
    96014898:	d2800020 	mov	x0, #0x1                   	// #1
    9601489c:	94002d02 	bl	9601fca4 <tegrabl_udelay>
		wait_time--;
		if (wait_time == 0ULL) {
    960148a0:	f10006b5 	subs	x21, x21, #0x1
    960148a4:	54000241 	b.ne	960148ec <tegrabl_sata_ahci_skip_init+0x80>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_AHCI_SKIP_INIT_1);
    960148a8:	5283c0d3 	mov	w19, #0x1e06                	// #7686
			TEGRABL_SET_ERROR_STRING(error, "DMA engine to stop", "0x%08x", reg);
    960148ac:	5283c0c2 	mov	w2, #0x1e06                	// #7686
    960148b0:	2a1403e5 	mov	w5, w20
    960148b4:	d0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    960148b8:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960148bc:	9107fc84 	add	x4, x4, #0x1ff
    960148c0:	91127463 	add	x3, x3, #0x49d
    960148c4:	72a20202 	movk	w2, #0x1010, lsl #16
    960148c8:	52800041 	mov	w1, #0x2                   	// #2
    960148cc:	52800020 	mov	w0, #0x1                   	// #1
    960148d0:	9400268c 	bl	9601e300 <tegrabl_error_print>
	wait_time = timeout;
	do {
		tegrabl_udelay(1);
		wait_time--;
		if (wait_time == 0ULL) {
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_AHCI_SKIP_INIT_2);
    960148d4:	72a20213 	movk	w19, #0x1010, lsl #16
		goto fail;
	}

fail:
	return error;
}
    960148d8:	2a1303e0 	mov	w0, w19
    960148dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960148e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960148e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960148e8:	d65f03c0 	ret
		reg = NV_READ32(
    960148ec:	b9400274 	ldr	w20, [x19]
	} while ((reg & 0x8000UL) != 0UL);
    960148f0:	377ffd54 	tbnz	w20, #15, 96014898 <tegrabl_sata_ahci_skip_init+0x2c>
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    960148f4:	b9400275 	ldr	w21, [x19]
		reg = NV_READ32(
    960148f8:	d28e2314 	mov	x20, #0x7118                	// #28952
    960148fc:	f2a06a14 	movk	x20, #0x350, lsl #16
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXCMD, FRE, 0, reg);
    96014900:	121b7ab5 	and	w21, w21, #0xffffffef
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0, reg);
    96014904:	b9000275 	str	w21, [x19]
    96014908:	d2803e93 	mov	x19, #0x1f4                 	// #500
		tegrabl_udelay(1);
    9601490c:	d2800020 	mov	x0, #0x1                   	// #1
    96014910:	94002ce5 	bl	9601fca4 <tegrabl_udelay>
		if (wait_time == 0ULL) {
    96014914:	f1000673 	subs	x19, x19, #0x1
    96014918:	540001a1 	b.ne	9601494c <tegrabl_sata_ahci_skip_init+0xe0>  // b.any
			TEGRABL_SET_ERROR_STRING(error, "FIS receive engine to stop", "0x%08x", reg);
    9601491c:	5283e0c2 	mov	w2, #0x1f06                	// #7942
    96014920:	2a1503e5 	mov	w5, w21
    96014924:	d0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    96014928:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601492c:	9107fc84 	add	x4, x4, #0x1ff
    96014930:	9112c063 	add	x3, x3, #0x4b0
    96014934:	72a20202 	movk	w2, #0x1010, lsl #16
    96014938:	52800041 	mov	w1, #0x2                   	// #2
    9601493c:	52800020 	mov	w0, #0x1                   	// #1
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_AHCI_SKIP_INIT_2);
    96014940:	5283e0d3 	mov	w19, #0x1f06                	// #7942
			TEGRABL_SET_ERROR_STRING(error, "FIS receive engine to stop", "0x%08x", reg);
    96014944:	9400266f 	bl	9601e300 <tegrabl_error_print>
    96014948:	17ffffe3 	b	960148d4 <tegrabl_sata_ahci_skip_init+0x68>
		reg = NV_READ32(
    9601494c:	b9400295 	ldr	w21, [x20]
	} while ((reg & 0x4000UL) != 0UL);
    96014950:	3777fdf5 	tbnz	w21, #14, 9601490c <tegrabl_sata_ahci_skip_init+0xa0>
	error = tegrabl_sata_ahci_init_memory_regions(context);
    96014954:	aa1603e0 	mov	x0, x22
    96014958:	97fffcdc 	bl	96013cc8 <tegrabl_sata_ahci_init_memory_regions>
    9601495c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96014960:	35fffbc0 	cbnz	w0, 960148d8 <tegrabl_sata_ahci_skip_init+0x6c>
	error = tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers(context);
    96014964:	aa1603e0 	mov	x0, x22
    96014968:	97fffc8c 	bl	96013b98 <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers>
    9601496c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96014970:	34000240 	cbz	w0, 960149b8 <tegrabl_sata_ahci_skip_init+0x14c>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "fis for partial reset");
    96014974:	52800242 	mov	w2, #0x12                  	// #18
    96014978:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601497c:	72a00202 	movk	w2, #0x10, lsl #16
    96014980:	91132c63 	add	x3, x3, #0x4cb
    96014984:	52800041 	mov	w1, #0x2                   	// #2
    96014988:	52800000 	mov	w0, #0x0                   	// #0
    9601498c:	9400265d 	bl	9601e300 <tegrabl_error_print>
	tegrabl_sata_ahci_print_pxssts();
    96014990:	97fffd2a 	bl	96013e38 <tegrabl_sata_ahci_print_pxssts>
	if (error != TEGRABL_NO_ERROR) {
    96014994:	34000333 	cbz	w19, 960149f8 <tegrabl_sata_ahci_skip_init+0x18c>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_RESET_FAILED, "partially");
    96014998:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601499c:	91138463 	add	x3, x3, #0x4e1
    960149a0:	52800262 	mov	w2, #0x13                  	// #19
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_NOT_DETECTED, "device");
    960149a4:	72a00202 	movk	w2, #0x10, lsl #16
    960149a8:	52800041 	mov	w1, #0x2                   	// #2
    960149ac:	52800000 	mov	w0, #0x0                   	// #0
    960149b0:	94002654 	bl	9601e300 <tegrabl_error_print>
	return error;
    960149b4:	17ffffc9 	b	960148d8 <tegrabl_sata_ahci_skip_init+0x6c>
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0);
    960149b8:	d28e2600 	mov	x0, #0x7130                	// #28976
    960149bc:	f2a06a00 	movk	x0, #0x350, lsl #16
    960149c0:	b9400001 	ldr	w1, [x0]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0, reg);
    960149c4:	b9000001 	str	w1, [x0]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0, 0);
    960149c8:	d28e2200 	mov	x0, #0x7110                	// #28944
    960149cc:	f2a06a00 	movk	x0, #0x350, lsl #16
    960149d0:	b900001f 	str	wzr, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    960149d4:	b9400280 	ldr	w0, [x20]
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXCMD, FRE, 1, reg);
    960149d8:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0, reg);
    960149dc:	b9000280 	str	w0, [x20]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    960149e0:	b9400280 	ldr	w0, [x20]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    960149e4:	b9400280 	ldr	w0, [x20]
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXCMD, ST, 1UL, reg);
    960149e8:	32000000 	orr	w0, w0, #0x1
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0, reg);
    960149ec:	b9000280 	str	w0, [x20]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    960149f0:	b9400280 	ldr	w0, [x20]
    960149f4:	17ffffe7 	b	96014990 <tegrabl_sata_ahci_skip_init+0x124>
	error = tegrabl_sata_ahci_indentify_device(context);
    960149f8:	aa1603e0 	mov	x0, x22
    960149fc:	97fffd89 	bl	96014020 <tegrabl_sata_ahci_indentify_device>
    96014a00:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96014a04:	34fff6a0 	cbz	w0, 960148d8 <tegrabl_sata_ahci_skip_init+0x6c>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_NOT_DETECTED, "device");
    96014a08:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014a0c:	52800622 	mov	w2, #0x31                  	// #49
    96014a10:	910c9063 	add	x3, x3, #0x324
    96014a14:	17ffffe4 	b	960149a4 <tegrabl_sata_ahci_skip_init+0x138>

0000000096014a18 <tegrabl_sata_ahci_init>:
	return enabled;
}

tegrabl_error_t tegrabl_sata_ahci_init(struct tegrabl_sata_context *context,
		struct tegrabl_uphy_handle *uphy)
{
    96014a18:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96014a1c:	910003fd 	mov	x29, sp
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	TEGRABL_ASSERT(context != NULL);

	if (context->initialized == true) {
    96014a20:	3941a802 	ldrb	w2, [x0, #106]
{
    96014a24:	a90153f3 	stp	x19, x20, [sp, #16]
    96014a28:	a9025bf5 	stp	x21, x22, [sp, #32]
    96014a2c:	f9001bf7 	str	x23, [sp, #48]
	if (context->initialized == true) {
    96014a30:	35002c22 	cbnz	w2, 96014fb4 <tegrabl_sata_ahci_init+0x59c>
    96014a34:	aa0103f3 	mov	x19, x1
    96014a38:	aa0003f4 	mov	x20, x0
		pr_trace("sata is already initialized");
		goto fail;
	}

	if (tegrabl_car_clk_is_enabled(TEGRABL_MODULE_SATA, 0) &&
    96014a3c:	52800001 	mov	w1, #0x0                   	// #0
    96014a40:	52800320 	mov	w0, #0x19                  	// #25
    96014a44:	94002b36 	bl	9601f71c <tegrabl_car_clk_is_enabled>
    96014a48:	72001c1f 	tst	w0, #0xff
    96014a4c:	54000420 	b.eq	96014ad0 <tegrabl_sata_ahci_init+0xb8>  // b.none
			tegrabl_car_clk_is_enabled(TEGRABL_MODULE_SATA_OOB, 0) &&
    96014a50:	52800001 	mov	w1, #0x0                   	// #0
    96014a54:	52800540 	mov	w0, #0x2a                  	// #42
    96014a58:	94002b31 	bl	9601f71c <tegrabl_car_clk_is_enabled>
	if (tegrabl_car_clk_is_enabled(TEGRABL_MODULE_SATA, 0) &&
    96014a5c:	72001c1f 	tst	w0, #0xff
    96014a60:	54000380 	b.eq	96014ad0 <tegrabl_sata_ahci_init+0xb8>  // b.none
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0);
    96014a64:	d28e0080 	mov	x0, #0x7004                	// #28676
    96014a68:	f2a06a00 	movk	x0, #0x350, lsl #16
    96014a6c:	b9400000 	ldr	w0, [x0]
	if (val != 1UL) {
    96014a70:	36f80300 	tbz	w0, #31, 96014ad0 <tegrabl_sata_ahci_init+0xb8>
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSSTS_0);
    96014a74:	d28e2500 	mov	x0, #0x7128                	// #28968
    96014a78:	f2a06a00 	movk	x0, #0x350, lsl #16
    96014a7c:	b9400000 	ldr	w0, [x0]
	val = NV_DRF_VAL(AHCI, PORT_PXSSTS, IPM, reg);
    96014a80:	d3482c00 	ubfx	x0, x0, #8, #4
	if (val == 1UL) {
    96014a84:	7100041f 	cmp	w0, #0x1
    96014a88:	54000241 	b.ne	96014ad0 <tegrabl_sata_ahci_init+0xb8>  // b.any
			tegrabl_sata_ahci_enabled()) {
		error = tegrabl_sata_ahci_skip_init(context);
    96014a8c:	aa1403e0 	mov	x0, x20
    96014a90:	97ffff77 	bl	9601486c <tegrabl_sata_ahci_skip_init>
    96014a94:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    96014a98:	34000100 	cbz	w0, 96014ab8 <tegrabl_sata_ahci_init+0xa0>
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "ahci skip init");
    96014a9c:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014aa0:	910aec63 	add	x3, x3, #0x2bb
	}

	pr_trace("Allocating memory regions for SATA");
	error = tegrabl_sata_ahci_init_memory_regions(context);
	if (error != TEGRABL_NO_ERROR) {
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "memory regions");
    96014aa4:	52800242 	mov	w2, #0x12                  	// #18
	}

	pr_trace("Retrieving SATA device information\n");
	error = tegrabl_sata_ahci_indentify_device(context);
	if (error != TEGRABL_NO_ERROR) {
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_NOT_DETECTED, "device");
    96014aa8:	72a00202 	movk	w2, #0x10, lsl #16
    96014aac:	52800041 	mov	w1, #0x2                   	// #2
    96014ab0:	52800000 	mov	w0, #0x0                   	// #0
    96014ab4:	94002613 	bl	9601e300 <tegrabl_error_print>
		goto fail;
	}

fail:
	return error;
}
    96014ab8:	2a1303e0 	mov	w0, w19
    96014abc:	f9401bf7 	ldr	x23, [sp, #48]
    96014ac0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96014ac4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96014ac8:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96014acc:	d65f03c0 	ret
	if ((uphy != NULL) && (uphy->init != NULL)) {
    96014ad0:	b4000153 	cbz	x19, 96014af8 <tegrabl_sata_ahci_init+0xe0>
    96014ad4:	f9400261 	ldr	x1, [x19]
    96014ad8:	b4000101 	cbz	x1, 96014af8 <tegrabl_sata_ahci_init+0xe0>
		error = uphy->init(TEGRABL_UPHY_SATA);
    96014adc:	52800020 	mov	w0, #0x1                   	// #1
    96014ae0:	d63f0020 	blr	x1
    96014ae4:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    96014ae8:	34000080 	cbz	w0, 96014af8 <tegrabl_sata_ahci_init+0xe0>
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "uphy");
    96014aec:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014af0:	910b2863 	add	x3, x3, #0x2ca
    96014af4:	17ffffec 	b	96014aa4 <tegrabl_sata_ahci_init+0x8c>
	if (tegrabl_car_clk_is_enabled(TEGRABL_MODULE_SATA, 0) &&
    96014af8:	52800001 	mov	w1, #0x0                   	// #0
    96014afc:	52800320 	mov	w0, #0x19                  	// #25
	uint32_t temp = 0;
    96014b00:	b9004fbf 	str	wzr, [x29, #76]
	if (tegrabl_car_clk_is_enabled(TEGRABL_MODULE_SATA, 0) &&
    96014b04:	94002b06 	bl	9601f71c <tegrabl_car_clk_is_enabled>
    96014b08:	72001c1f 	tst	w0, #0xff
    96014b0c:	540002a1 	b.ne	96014b60 <tegrabl_sata_ahci_init+0x148>  // b.any
	error = tegrabl_car_rst_set(TEGRABL_MODULE_SATA, 0);
    96014b10:	52800001 	mov	w1, #0x0                   	// #0
    96014b14:	52800320 	mov	w0, #0x19                  	// #25
    96014b18:	94002bda 	bl	9601fa80 <tegrabl_car_rst_set>
	if (error != TEGRABL_NO_ERROR) {
    96014b1c:	350000a0 	cbnz	w0, 96014b30 <tegrabl_sata_ahci_init+0x118>
	error = tegrabl_car_rst_set(TEGRABL_MODULE_SATACOLD, 0);
    96014b20:	52800001 	mov	w1, #0x0                   	// #0
    96014b24:	52800560 	mov	w0, #0x2b                  	// #43
    96014b28:	94002bd6 	bl	9601fa80 <tegrabl_car_rst_set>
	if (error != TEGRABL_NO_ERROR) {
    96014b2c:	340003e0 	cbz	w0, 96014ba8 <tegrabl_sata_ahci_init+0x190>
    96014b30:	12005c00 	and	w0, w0, #0xffffff
	TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "sata and oob clocks");
    96014b34:	52800242 	mov	w2, #0x12                  	// #18
    96014b38:	32040013 	orr	w19, w0, #0x10000000
    96014b3c:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014b40:	72a00202 	movk	w2, #0x10, lsl #16
    96014b44:	910b3c63 	add	x3, x3, #0x2cf
    96014b48:	52800041 	mov	w1, #0x2                   	// #2
    96014b4c:	52800000 	mov	w0, #0x0                   	// #0
    96014b50:	940025ec 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "sata clocks");
    96014b54:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014b58:	910b8c63 	add	x3, x3, #0x2e3
    96014b5c:	17ffffd2 	b	96014aa4 <tegrabl_sata_ahci_init+0x8c>
			tegrabl_car_clk_is_enabled(TEGRABL_MODULE_SATA_OOB, 0)) {
    96014b60:	52800001 	mov	w1, #0x0                   	// #0
    96014b64:	52800540 	mov	w0, #0x2a                  	// #42
    96014b68:	94002aed 	bl	9601f71c <tegrabl_car_clk_is_enabled>
	if (tegrabl_car_clk_is_enabled(TEGRABL_MODULE_SATA, 0) &&
    96014b6c:	72001c1f 	tst	w0, #0xff
    96014b70:	54fffd00 	b.eq	96014b10 <tegrabl_sata_ahci_init+0xf8>  // b.none
	(void) tegrabl_car_rst_clear(TEGRABL_MODULE_SATA, 0);
    96014b74:	52800001 	mov	w1, #0x0                   	// #0
    96014b78:	52800320 	mov	w0, #0x19                  	// #25
    96014b7c:	94002bc8 	bl	9601fa9c <tegrabl_car_rst_clear>
	(void)tegrabl_car_rst_clear(TEGRABL_MODULE_SATACOLD, 0);
    96014b80:	52800001 	mov	w1, #0x0                   	// #0
    96014b84:	52800560 	mov	w0, #0x2b                  	// #43
    96014b88:	94002bc5 	bl	9601fa9c <tegrabl_car_rst_clear>
	error = tegrabl_sata_ahci_init_memory_regions(context);
    96014b8c:	aa1403e0 	mov	x0, x20
    96014b90:	97fffc4e 	bl	96013cc8 <tegrabl_sata_ahci_init_memory_regions>
    96014b94:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96014b98:	340005c0 	cbz	w0, 96014c50 <tegrabl_sata_ahci_init+0x238>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "memory regions");
    96014b9c:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014ba0:	910bbc63 	add	x3, x3, #0x2ef
    96014ba4:	17ffffc0 	b	96014aa4 <tegrabl_sata_ahci_init+0x8c>
	tegrabl_udelay(1);
    96014ba8:	d2800020 	mov	x0, #0x1                   	// #1
    96014bac:	94002c3e 	bl	9601fca4 <tegrabl_udelay>
	error = tegrabl_car_clk_enable(TEGRABL_MODULE_SATA, 0, NULL);
    96014bb0:	d2800002 	mov	x2, #0x0                   	// #0
    96014bb4:	52800001 	mov	w1, #0x0                   	// #0
    96014bb8:	52800320 	mov	w0, #0x19                  	// #25
    96014bbc:	94002b44 	bl	9601f8cc <tegrabl_car_clk_enable>
	if (error != TEGRABL_NO_ERROR) {
    96014bc0:	35fffb80 	cbnz	w0, 96014b30 <tegrabl_sata_ahci_init+0x118>
	error = tegrabl_car_clk_enable(TEGRABL_MODULE_SATA_OOB, 0, NULL);
    96014bc4:	d2800002 	mov	x2, #0x0                   	// #0
    96014bc8:	52800001 	mov	w1, #0x0                   	// #0
    96014bcc:	52800540 	mov	w0, #0x2a                  	// #42
    96014bd0:	94002b3f 	bl	9601f8cc <tegrabl_car_clk_enable>
	if (error != TEGRABL_NO_ERROR) {
    96014bd4:	35fffae0 	cbnz	w0, 96014b30 <tegrabl_sata_ahci_init+0x118>
	error = tegrabl_car_set_clk_src(TEGRABL_MODULE_SATA, 0,
    96014bd8:	52800062 	mov	w2, #0x3                   	// #3
    96014bdc:	52800001 	mov	w1, #0x0                   	// #0
    96014be0:	52800320 	mov	w0, #0x19                  	// #25
    96014be4:	94002ad9 	bl	9601f748 <tegrabl_car_set_clk_src>
	if (error != TEGRABL_NO_ERROR) {
    96014be8:	35fffa40 	cbnz	w0, 96014b30 <tegrabl_sata_ahci_init+0x118>
	error = tegrabl_car_set_clk_src(TEGRABL_MODULE_SATA_OOB, 0,
    96014bec:	52800062 	mov	w2, #0x3                   	// #3
    96014bf0:	52800001 	mov	w1, #0x0                   	// #0
    96014bf4:	52800540 	mov	w0, #0x2a                  	// #42
    96014bf8:	94002ad4 	bl	9601f748 <tegrabl_car_set_clk_src>
	if (error != TEGRABL_NO_ERROR) {
    96014bfc:	35fff9a0 	cbnz	w0, 96014b30 <tegrabl_sata_ahci_init+0x118>
	error = tegrabl_car_set_clk_rate(TEGRABL_MODULE_SATA, 0,
    96014c00:	5291ce02 	mov	w2, #0x8e70                	// #36464
    96014c04:	910133a3 	add	x3, x29, #0x4c
    96014c08:	72a00022 	movk	w2, #0x1, lsl #16
    96014c0c:	52800001 	mov	w1, #0x0                   	// #0
    96014c10:	52800320 	mov	w0, #0x19                  	// #25
    96014c14:	94002b7e 	bl	9601fa0c <tegrabl_car_set_clk_rate>
	if (error != TEGRABL_NO_ERROR) {
    96014c18:	35fff8c0 	cbnz	w0, 96014b30 <tegrabl_sata_ahci_init+0x118>
	error = tegrabl_car_set_clk_rate(TEGRABL_MODULE_SATA_OOB, 0,
    96014c1c:	52839c02 	mov	w2, #0x1ce0                	// #7392
    96014c20:	910133a3 	add	x3, x29, #0x4c
    96014c24:	72a00062 	movk	w2, #0x3, lsl #16
    96014c28:	52800001 	mov	w1, #0x0                   	// #0
    96014c2c:	52800540 	mov	w0, #0x2a                  	// #42
    96014c30:	94002b77 	bl	9601fa0c <tegrabl_car_set_clk_rate>
	if (error != TEGRABL_NO_ERROR) {
    96014c34:	35fff7e0 	cbnz	w0, 96014b30 <tegrabl_sata_ahci_init+0x118>
	tegrabl_udelay(1);
    96014c38:	d2800020 	mov	x0, #0x1                   	// #1
    96014c3c:	94002c1a 	bl	9601fca4 <tegrabl_udelay>
	NV_WRITE32(NV_ADDRESS_MAP_PMC_IMPL_BASE + PMC_IMPL_PART_SAX_CLAMP_CONTROL_0,
    96014c40:	d2805100 	mov	x0, #0x288                 	// #648
    96014c44:	f2a186c0 	movk	x0, #0xc36, lsl #16
    96014c48:	b900001f 	str	wzr, [x0]
    96014c4c:	17ffffca 	b	96014b74 <tegrabl_sata_ahci_init+0x15c>
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_BASE + SATA_FPCI_BAR5_0);
    96014c50:	d2801281 	mov	x1, #0x94                  	// #148
	reg = NV_FLD_SET_DRF_NUM(SATA, FPCI_BAR5, FPCI_BAR5_ACCESS_TYPE, 1, reg);
    96014c54:	52804022 	mov	w2, #0x201                 	// #513
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_BASE + SATA_FPCI_BAR5_0);
    96014c58:	f2a06a01 	movk	x1, #0x350, lsl #16
	reg = NV_FLD_SET_DRF_NUM(SATA, FPCI_BAR5, FPCI_BAR5_ACCESS_TYPE, 1, reg);
    96014c5c:	72a00802 	movk	w2, #0x40, lsl #16
	reg = NV_FLD_SET_DRF_NUM(SATA0, BKDOOR_CC, CLASS_CODE,
    96014c60:	52a020c3 	mov	w3, #0x1060000             	// #17170432
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_BASE + SATA_FPCI_BAR5_0);
    96014c64:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(SATA, FPCI_BAR5,
    96014c68:	12000c00 	and	w0, w0, #0xf
	reg = NV_FLD_SET_DRF_NUM(SATA, FPCI_BAR5, FPCI_BAR5_ACCESS_TYPE, 1, reg);
    96014c6c:	2a020000 	orr	w0, w0, w2
	NV_WRITE32(NV_ADDRESS_MAP_SATA_BASE + SATA_FPCI_BAR5_0, reg);
    96014c70:	b9000020 	str	w0, [x1]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_PHY_0_0);
    96014c74:	d2822402 	mov	x2, #0x1120                	// #4384
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_BASE + SATA_CONFIGURATION_0);
    96014c78:	b940ec20 	ldr	w0, [x1, #236]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_PHY_0_0);
    96014c7c:	f2a06a02 	movk	x2, #0x350, lsl #16
	reg = NV_FLD_SET_DRF_NUM(SATA, CONFIGURATION, EN_FPCI, 1, reg);
    96014c80:	32000000 	orr	w0, w0, #0x1
	NV_WRITE32(NV_ADDRESS_MAP_SATA_BASE + SATA_CONFIGURATION_0, reg);
    96014c84:	b900ec20 	str	w0, [x1, #236]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CHX_PHY_CTRL17_0,
    96014c88:	d282dd01 	mov	x1, #0x16e8                	// #5864
    96014c8c:	52aaa020 	mov	w0, #0x55010000            	// #1426128896
    96014c90:	f2a06a01 	movk	x1, #0x350, lsl #16
    96014c94:	b9000020 	str	w0, [x1]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CHX_PHY_CTRL18_0,
    96014c98:	b9000420 	str	w0, [x1, #4]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CHX_PHY_CTRL20_0, 0x1);
    96014c9c:	52800020 	mov	w0, #0x1                   	// #1
    96014ca0:	b9000c20 	str	w0, [x1, #12]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CHX_PHY_CTRL21_0, 0x1);
    96014ca4:	b9001020 	str	w0, [x1, #16]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_PHY_0_0);
    96014ca8:	b9400040 	ldr	w0, [x2]
	reg = NV_FLD_SET_DRF_NUM(SATA0, CFG_PHY_0, MASK_SQUELCH, 1, reg);
    96014cac:	32080000 	orr	w0, w0, #0x1000000
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_PHY_0_0, reg);
    96014cb0:	b9000040 	str	w0, [x2]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_NVOOB_0);
    96014cb4:	d2822280 	mov	x0, #0x1114                	// #4372
    96014cb8:	f2a06a00 	movk	x0, #0x350, lsl #16
    96014cbc:	b9400001 	ldr	w1, [x0]
	reg = NV_FLD_SET_DRF_NUM(SATA0, NVOOB, COMMA_CNT, NVOOB_COMMA_CNT_VAL, reg);
    96014cc0:	12085c21 	and	w1, w1, #0xff00ffff
    96014cc4:	32100821 	orr	w1, w1, #0x70000
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_NVOOB_0, reg);
    96014cc8:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_NVOOB_0);
    96014ccc:	b9400001 	ldr	w1, [x0]
	reg = NV_FLD_SET_DRF_NUM(SATA0, NVOOB, SQUELCH_FILTER_LENGTH,
    96014cd0:	32060421 	orr	w1, w1, #0xc000000
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_NVOOB_0, reg);
    96014cd4:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_NVOOB_0);
    96014cd8:	b9400001 	ldr	w1, [x0]
	reg = NV_FLD_SET_DRF_NUM(SATA0, NVOOB, SQUELCH_FILTER_MODE,
    96014cdc:	12067421 	and	w1, w1, #0xfcffffff
    96014ce0:	32080021 	orr	w1, w1, #0x1000000
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_NVOOB_0, reg);
    96014ce4:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG2NVOOB_2_0);
    96014ce8:	d2822681 	mov	x1, #0x1134                	// #4404
    96014cec:	f2a06a01 	movk	x1, #0x350, lsl #16
    96014cf0:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(SATA0, CFG2NVOOB_2, COMWAKE_IDLE_CNT_LOW,
    96014cf4:	12055800 	and	w0, w0, #0xf803ffff
    96014cf8:	320c0400 	orr	w0, w0, #0x300000
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG2NVOOB_2_0, reg);
    96014cfc:	b9000020 	str	w0, [x1]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_1_0);
    96014d00:	d2820081 	mov	x1, #0x1004                	// #4100
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_PHY_0_0);
    96014d04:	b9400040 	ldr	w0, [x2]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_1_0);
    96014d08:	f2a06a01 	movk	x1, #0x350, lsl #16
	reg = NV_FLD_SET_DRF_NUM(SATA0, CFG_PHY_0,
    96014d0c:	12147800 	and	w0, w0, #0xfffff7ff
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_PHY_0_0, reg);
    96014d10:	b9000040 	str	w0, [x2]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_1_0);
    96014d14:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(SATA0, CFG_1, MEMORY_SPACE, 1, reg);
    96014d18:	321f0400 	orr	w0, w0, #0x6
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_1_0, reg);
    96014d1c:	b9000020 	str	w0, [x1]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_9_0,
    96014d20:	d2820480 	mov	x0, #0x1024                	// #4132
    96014d24:	52a80041 	mov	w1, #0x40020000            	// #1073872896
    96014d28:	f2a06a00 	movk	x0, #0x350, lsl #16
    96014d2c:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_SATA_0);
    96014d30:	d282a981 	mov	x1, #0x154c                	// #5452
    96014d34:	f2a06a01 	movk	x1, #0x350, lsl #16
    96014d38:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(SATA0, CFG_SATA, BACKDOOR_PROG_IF_EN, 1, reg);
    96014d3c:	32140000 	orr	w0, w0, #0x1000
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_SATA_0, reg);
    96014d40:	b9000020 	str	w0, [x1]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_BKDOOR_CC_0);
    96014d44:	b9438440 	ldr	w0, [x2, #900]
	reg = NV_FLD_SET_DRF_NUM(SATA0, BKDOOR_CC, CLASS_CODE,
    96014d48:	12003c00 	and	w0, w0, #0xffff
    96014d4c:	2a030000 	orr	w0, w0, w3
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_BKDOOR_CC_0, reg);
    96014d50:	b9038440 	str	w0, [x2, #900]
	reg = NV_FLD_SET_DRF_NUM(SATA0, BKDOOR_CC, PROG_IF,
    96014d54:	5290a003 	mov	w3, #0x8500                	// #34048
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_BKDOOR_CC_0);
    96014d58:	b9438440 	ldr	w0, [x2, #900]
	reg = NV_FLD_SET_DRF_NUM(SATA0, BKDOOR_CC, PROG_IF,
    96014d5c:	12105c00 	and	w0, w0, #0xffff00ff
    96014d60:	2a030000 	orr	w0, w0, w3
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_BKDOOR_CC_0, reg);
    96014d64:	b9038440 	str	w0, [x2, #900]
	reg = NV_FLD_SET_DRF_NUM(SATA0, AHCI_HBA_CAP_BKDR, SALP, 0, reg);
    96014d68:	5293ffe2 	mov	w2, #0x9fff                	// #40959
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_SATA_0);
    96014d6c:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(SATA0, AHCI_HBA_CAP_BKDR, SALP, 0, reg);
    96014d70:	72bf7fe2 	movk	w2, #0xfbff, lsl #16
	reg = NV_FLD_SET_DRF_NUM(SATA0, CFG_SATA, BACKDOOR_PROG_IF_EN, 0, reg);
    96014d74:	12137800 	and	w0, w0, #0xffffefff
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_CFG_SATA_0, reg);
    96014d78:	b9000020 	str	w0, [x1]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_AHCI_HBA_CAP_BKDR_0);
    96014d7c:	d2826001 	mov	x1, #0x1300                	// #4864
    96014d80:	f2a06a01 	movk	x1, #0x350, lsl #16
    96014d84:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(SATA0, AHCI_HBA_CAP_BKDR, SALP, 0, reg);
    96014d88:	0a020000 	and	w0, w0, w2
	NV_WRITE32(NV_ADDRESS_MAP_SATA_CFG_BASE + SATA0_AHCI_HBA_CAP_BKDR_0, reg);
    96014d8c:	b9000020 	str	w0, [x1]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0);
    96014d90:	d28e0080 	mov	x0, #0x7004                	// #28676
	reg = NV_FLD_SET_DRF_NUM(AHCI, HBA_GHC, IE, 1, reg);
    96014d94:	52800042 	mov	w2, #0x2                   	// #2
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0);
    96014d98:	f2a06a00 	movk	x0, #0x350, lsl #16
	reg = NV_FLD_SET_DRF_NUM(AHCI, HBA_GHC, IE, 1, reg);
    96014d9c:	72b00002 	movk	w2, #0x8000, lsl #16
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0);
    96014da0:	b9400001 	ldr	w1, [x0]
	reg = NV_FLD_SET_DRF_NUM(AHCI, HBA_GHC, AE, 1, reg);
    96014da4:	32010021 	orr	w1, w1, #0x80000000
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0, reg);
    96014da8:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0);
    96014dac:	b9400001 	ldr	w1, [x0]
	reg = NV_FLD_SET_DRF_NUM(AHCI, HBA_GHC, HR, 1, reg);
    96014db0:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0, reg);
    96014db4:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0);
    96014db8:	b9400001 	ldr	w1, [x0]
	reg = NV_FLD_SET_DRF_NUM(AHCI, HBA_GHC, IE, 1, reg);
    96014dbc:	2a020021 	orr	w1, w1, w2
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_GHC_0, reg);
    96014dc0:	b9000001 	str	w1, [x0]
	if (context->speed != TEGRABL_SATA_INTERFACE_GEN2) {
    96014dc4:	b9401e80 	ldr	w0, [x20, #28]
    96014dc8:	7100041f 	cmp	w0, #0x1
    96014dcc:	54000160 	b.eq	96014df8 <tegrabl_sata_ahci_init+0x3e0>  // b.none
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_CAP_BKDR_0);
    96014dd0:	d28e1401 	mov	x1, #0x70a0                	// #28832
    96014dd4:	f2a06a01 	movk	x1, #0x350, lsl #16
    96014dd8:	b9400020 	ldr	w0, [x1]
		reg = NV_FLD_SET_DRF_DEF(AHCI, HBA_CAP_BKDR, INTF_SPD_SUPP, GEN1, reg);
    96014ddc:	12086c00 	and	w0, w0, #0xff0fffff
    96014de0:	320c0000 	orr	w0, w0, #0x100000
		NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_HBA_CAP_BKDR_0, reg);
    96014de4:	b9000020 	str	w0, [x1]
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSCTL_0);
    96014de8:	b9408c20 	ldr	w0, [x1, #140]
		reg = NV_FLD_SET_DRF_DEF(AHCI, PORT_PXSCTL, SPD, GEN1, reg);
    96014dec:	12186c00 	and	w0, w0, #0xffffff0f
    96014df0:	321c0000 	orr	w0, w0, #0x10
		NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSCTL_0, reg);
    96014df4:	b9008c20 	str	w0, [x1, #140]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_BASE + SATA_INTR_MASK_0, reg);
    96014df8:	d2803100 	mov	x0, #0x188                 	// #392
    96014dfc:	52a00021 	mov	w1, #0x10000               	// #65536
    96014e00:	f2a06a00 	movk	x0, #0x350, lsl #16
    96014e04:	b9000001 	str	w1, [x0]
	error = tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers(context);
    96014e08:	aa1403e0 	mov	x0, x20
    96014e0c:	97fffb63 	bl	96013b98 <tegrabl_sata_ahci_init_cmd_list_receive_fis_buffers>
    96014e10:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96014e14:	340001a0 	cbz	w0, 96014e48 <tegrabl_sata_ahci_init+0x430>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "fis for host reset");
    96014e18:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014e1c:	52800242 	mov	w2, #0x12                  	// #18
    96014e20:	910bf863 	add	x3, x3, #0x2fe
    96014e24:	72a00202 	movk	w2, #0x10, lsl #16
    96014e28:	52800041 	mov	w1, #0x2                   	// #2
    96014e2c:	52800000 	mov	w0, #0x0                   	// #0
    96014e30:	94002534 	bl	9601e300 <tegrabl_error_print>
	tegrabl_sata_ahci_print_pxssts();
    96014e34:	97fffc01 	bl	96013e38 <tegrabl_sata_ahci_print_pxssts>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_RESET_FAILED, "ahci host");
    96014e38:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014e3c:	52800262 	mov	w2, #0x13                  	// #19
    96014e40:	910cac63 	add	x3, x3, #0x32b
    96014e44:	17ffff19 	b	96014aa8 <tegrabl_sata_ahci_init+0x90>
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0);
    96014e48:	d28e2281 	mov	x1, #0x7114                	// #28948
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0);
    96014e4c:	d28e2215 	mov	x21, #0x7110                	// #28944
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0);
    96014e50:	f2a06a01 	movk	x1, #0x350, lsl #16
	timeout = SATA_COMINIT_TIMEOUT;
    96014e54:	5281a813 	mov	w19, #0xd40                 	// #3392
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0);
    96014e58:	f2a06a15 	movk	x21, #0x350, lsl #16
    96014e5c:	aa1503f6 	mov	x22, x21
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0);
    96014e60:	b9400020 	ldr	w0, [x1]
	timeout = SATA_COMINIT_TIMEOUT;
    96014e64:	72a00073 	movk	w19, #0x3, lsl #16
		reg = ((NV_DRF_VAL(AHCI, PORT_PXIS, PCS, reg) != 0UL) && (NV_DRF_VAL(AHCI, PORT_PXIS, PRCS, reg)
    96014e68:	320a83f7 	mov	w23, #0x400040              	// #4194368
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXIE, PRCE, 1, reg);
    96014e6c:	320a8000 	orr	w0, w0, #0x400040
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIE_0, reg);
    96014e70:	b9000020 	str	w0, [x1]
		tegrabl_udelay(1);
    96014e74:	d2800020 	mov	x0, #0x1                   	// #1
    96014e78:	94002b8b 	bl	9601fca4 <tegrabl_udelay>
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0);
    96014e7c:	b94002a0 	ldr	w0, [x21]
		timeout--;
    96014e80:	51000673 	sub	w19, w19, #0x1
		reg = ((NV_DRF_VAL(AHCI, PORT_PXIS, PCS, reg) != 0UL) && (NV_DRF_VAL(AHCI, PORT_PXIS, PRCS, reg)
    96014e84:	120a8000 	and	w0, w0, #0x400040
    96014e88:	6b17001f 	cmp	w0, w23
    96014e8c:	54000200 	b.eq	96014ecc <tegrabl_sata_ahci_init+0x4b4>  // b.none
	while (timeout != 0U) {
    96014e90:	35ffff33 	cbnz	w19, 96014e74 <tegrabl_sata_ahci_init+0x45c>
		TEGRABL_SET_ERROR_STRING(error, "phy ready", "0x%08x",
    96014e94:	b94002c5 	ldr	w5, [x22]
    96014e98:	d0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    96014e9c:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014ea0:	9107fc84 	add	x4, x4, #0x1ff
    96014ea4:	910c4463 	add	x3, x3, #0x311
    96014ea8:	528300c2 	mov	w2, #0x1806                	// #6150
    96014eac:	72a20202 	movk	w2, #0x1010, lsl #16
    96014eb0:	52800041 	mov	w1, #0x2                   	// #2
    96014eb4:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_AHCI_HOST_RESET_1);
    96014eb8:	528300d3 	mov	w19, #0x1806                	// #6150
		TEGRABL_SET_ERROR_STRING(error, "phy ready", "0x%08x",
    96014ebc:	94002511 	bl	9601e300 <tegrabl_error_print>
	tegrabl_sata_ahci_print_pxssts();
    96014ec0:	97fffbde 	bl	96013e38 <tegrabl_sata_ahci_print_pxssts>
		error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_AHCI_HOST_RESET_2);
    96014ec4:	72a20213 	movk	w19, #0x1010, lsl #16
    96014ec8:	17ffffdc 	b	96014e38 <tegrabl_sata_ahci_init+0x420>
	if (timeout == 0U) {
    96014ecc:	34fffe53 	cbz	w19, 96014e94 <tegrabl_sata_ahci_init+0x47c>
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0);
    96014ed0:	d28e2600 	mov	x0, #0x7130                	// #28976
	timeout = SATA_D2H_FIS_TIMEOUT;
    96014ed4:	52884813 	mov	w19, #0x4240                	// #16960
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0);
    96014ed8:	f2a06a00 	movk	x0, #0x350, lsl #16
	timeout = SATA_D2H_FIS_TIMEOUT;
    96014edc:	72a001f3 	movk	w19, #0xf, lsl #16
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0);
    96014ee0:	b9400001 	ldr	w1, [x0]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0, reg);
    96014ee4:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    96014ee8:	d28e2301 	mov	x1, #0x7118                	// #28952
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXIS_0, 0);
    96014eec:	b90002bf 	str	wzr, [x21]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    96014ef0:	f2a06a01 	movk	x1, #0x350, lsl #16
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXTFD_0);
    96014ef4:	d28e2415 	mov	x21, #0x7120                	// #28960
    96014ef8:	f2a06a15 	movk	x21, #0x350, lsl #16
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    96014efc:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXCMD, FRE, 1, reg);
    96014f00:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0, reg);
    96014f04:	b9000020 	str	w0, [x1]
		tegrabl_udelay(1);
    96014f08:	d2800020 	mov	x0, #0x1                   	// #1
    96014f0c:	94002b66 	bl	9601fca4 <tegrabl_udelay>
		reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXTFD_0);
    96014f10:	b94002a0 	ldr	w0, [x21]
		timeout--;
    96014f14:	51000673 	sub	w19, w19, #0x1
		reg = ((NV_DRF_VAL(AHCI, PORT_PXTFD, STS_ERR, reg) != 0UL) ||
    96014f18:	37000080 	tbnz	w0, #0, 96014f28 <tegrabl_sata_ahci_init+0x510>
			(NV_DRF_VAL(AHCI, PORT_PXTFD, STS_BSY, reg) != 0UL)) ? 1UL : 0UL;
    96014f1c:	53077c01 	lsr	w1, w0, #7
			(NV_DRF_VAL(AHCI, PORT_PXTFD, STS_DRQ, reg) != 0UL) ||
    96014f20:	2a400c20 	orr	w0, w1, w0, lsr #3
    96014f24:	36000220 	tbz	w0, #0, 96014f68 <tegrabl_sata_ahci_init+0x550>
	while (timeout != 0U) {
    96014f28:	35ffff13 	cbnz	w19, 96014f08 <tegrabl_sata_ahci_init+0x4f0>
		TEGRABL_SET_ERROR_STRING(error, "fis from device", "0x%08x",
    96014f2c:	d28e2400 	mov	x0, #0x7120                	// #28960
    96014f30:	d0000144 	adrp	x4, 9603e000 <tca9539_chips+0x378>
    96014f34:	f2a06a00 	movk	x0, #0x350, lsl #16
    96014f38:	9107fc84 	add	x4, x4, #0x1ff
    96014f3c:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014f40:	528320c2 	mov	w2, #0x1906                	// #6406
    96014f44:	b9400005 	ldr	w5, [x0]
    96014f48:	910c6c63 	add	x3, x3, #0x31b
    96014f4c:	72a20202 	movk	w2, #0x1010, lsl #16
    96014f50:	52800041 	mov	w1, #0x2                   	// #2
    96014f54:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, TEGRABL_SATA_AHCI_HOST_RESET_2);
    96014f58:	528320d3 	mov	w19, #0x1906                	// #6406
		TEGRABL_SET_ERROR_STRING(error, "fis from device", "0x%08x",
    96014f5c:	940024e9 	bl	9601e300 <tegrabl_error_print>
	tegrabl_sata_ahci_print_pxssts();
    96014f60:	97fffbb6 	bl	96013e38 <tegrabl_sata_ahci_print_pxssts>
    96014f64:	17ffffd8 	b	96014ec4 <tegrabl_sata_ahci_init+0x4ac>
	if (timeout == 0U) {
    96014f68:	34fffe33 	cbz	w19, 96014f2c <tegrabl_sata_ahci_init+0x514>
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0);
    96014f6c:	d28e2600 	mov	x0, #0x7130                	// #28976
    96014f70:	f2a06a00 	movk	x0, #0x350, lsl #16
    96014f74:	b9400001 	ldr	w1, [x0]
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXSERR_0, reg);
    96014f78:	b9000001 	str	w1, [x0]
	reg = NV_READ32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0);
    96014f7c:	d28e2301 	mov	x1, #0x7118                	// #28952
    96014f80:	f2a06a01 	movk	x1, #0x350, lsl #16
    96014f84:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(AHCI, PORT_PXCMD, ST, 1, reg);
    96014f88:	32000000 	orr	w0, w0, #0x1
	NV_WRITE32(NV_ADDRESS_MAP_SATA_AHCI_BASE + AHCI_PORT_PXCMD_0, reg);
    96014f8c:	b9000020 	str	w0, [x1]
	tegrabl_sata_ahci_print_pxssts();
    96014f90:	97fffbaa 	bl	96013e38 <tegrabl_sata_ahci_print_pxssts>
	error = tegrabl_sata_ahci_indentify_device(context);
    96014f94:	aa1403e0 	mov	x0, x20
    96014f98:	97fffc22 	bl	96014020 <tegrabl_sata_ahci_indentify_device>
    96014f9c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96014fa0:	34ffd8c0 	cbz	w0, 96014ab8 <tegrabl_sata_ahci_init+0xa0>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_NOT_DETECTED, "device");
    96014fa4:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96014fa8:	52800622 	mov	w2, #0x31                  	// #49
    96014fac:	910c9063 	add	x3, x3, #0x324
    96014fb0:	17fffebe 	b	96014aa8 <tegrabl_sata_ahci_init+0x90>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96014fb4:	52800013 	mov	w19, #0x0                   	// #0
	return error;
    96014fb8:	17fffec0 	b	96014ab8 <tegrabl_sata_ahci_init+0xa0>

0000000096014fbc <tegrabl_sata_bdev_erase>:
 *
 * @return TEGRABL_NO_ERROR if successful else appropriate error..
 */
static tegrabl_error_t tegrabl_sata_bdev_erase(
		struct tegrabl_bdev *dev, bnum_t block, bnum_t count, bool is_secure)
{
    96014fbc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	TEGRABL_UNUSED(block);
	TEGRABL_UNUSED(count);
	TEGRABL_UNUSED(is_secure);

	err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, TEGRABL_SATA_BDEV_ERASE);
	TEGRABL_SET_ERROR_STRING(err, "erase");
    96014fc0:	52800041 	mov	w1, #0x2                   	// #2
    96014fc4:	52800020 	mov	w0, #0x1                   	// #1
    96014fc8:	f0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
{
    96014fcc:	910003fd 	mov	x29, sp
    96014fd0:	f9000bf3 	str	x19, [sp, #16]
	TEGRABL_SET_ERROR_STRING(err, "erase");
    96014fd4:	5280c033 	mov	w19, #0x601                 	// #1537
    96014fd8:	72a20213 	movk	w19, #0x1010, lsl #16
    96014fdc:	91144c63 	add	x3, x3, #0x513
    96014fe0:	2a1303e2 	mov	w2, w19
    96014fe4:	940024c7 	bl	9601e300 <tegrabl_error_print>
	return err;
}
    96014fe8:	2a1303e0 	mov	w0, w19
    96014fec:	f9400bf3 	ldr	x19, [sp, #16]
    96014ff0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96014ff4:	d65f03c0 	ret

0000000096014ff8 <tegrabl_sata_bdev_xfer_wait>:
{
    96014ff8:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96014ffc:	910003fd 	mov	x29, sp
    96015000:	a90153f3 	stp	x19, x20, [sp, #16]
    96015004:	a9025bf5 	stp	x21, x22, [sp, #32]
    96015008:	a90363f7 	stp	x23, x24, [sp, #48]
    9601500c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96015010:	a90573fb 	stp	x27, x28, [sp, #80]
    96015014:	f90037a1 	str	x1, [x29, #104]
	if (xfer == NULL) {
    96015018:	b5000260 	cbnz	x0, 96015064 <tegrabl_sata_bdev_xfer_wait+0x6c>
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_SATA_BDEV_XFER_WAIT_1);
    9601501c:	52804553 	mov	w19, #0x22a                 	// #554
		TEGRABL_SET_ERROR_STRING(error, "xfer: %p", xfer);
    96015020:	52804542 	mov	w2, #0x22a                 	// #554
    96015024:	d2800004 	mov	x4, #0x0                   	// #0
    96015028:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601502c:	72a20202 	movk	w2, #0x1010, lsl #16
    96015030:	91168063 	add	x3, x3, #0x5a0
    96015034:	52800041 	mov	w1, #0x2                   	// #2
    96015038:	52800020 	mov	w0, #0x1                   	// #1
    9601503c:	940024b1 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_XFER_WAIT_1);
    96015040:	72a20213 	movk	w19, #0x1010, lsl #16
}
    96015044:	2a1303e0 	mov	w0, w19
    96015048:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601504c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96015050:	a94363f7 	ldp	x23, x24, [sp, #48]
    96015054:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96015058:	a94573fb 	ldp	x27, x28, [sp, #80]
    9601505c:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96015060:	d65f03c0 	ret
	if (xfer->dev == NULL || xfer->buf == NULL) {
    96015064:	f9400004 	ldr	x4, [x0]
    96015068:	aa0003fb 	mov	x27, x0
    9601506c:	f9400817 	ldr	x23, [x0, #16]
    96015070:	b4000044 	cbz	x4, 96015078 <tegrabl_sata_bdev_xfer_wait+0x80>
    96015074:	b5000177 	cbnz	x23, 960150a0 <tegrabl_sata_bdev_xfer_wait+0xa8>
		TEGRABL_SET_ERROR_STRING(error, "dev: %p, buf: %p", xfer->dev, xfer->buf);
    96015078:	52804042 	mov	w2, #0x202                 	// #514
    9601507c:	aa1703e5 	mov	x5, x23
    96015080:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015084:	72a20202 	movk	w2, #0x1010, lsl #16
    96015088:	9116a463 	add	x3, x3, #0x5a9
    9601508c:	52800041 	mov	w1, #0x2                   	// #2
    96015090:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_XFER_WAIT_1);
    96015094:	52804053 	mov	w19, #0x202                 	// #514
		TEGRABL_SET_ERROR_STRING(error, "dev: %p, buf: %p", xfer->dev, xfer->buf);
    96015098:	9400249a 	bl	9601e300 <tegrabl_error_print>
    9601509c:	17ffffe9 	b	96015040 <tegrabl_sata_bdev_xfer_wait+0x48>
	context = (struct tegrabl_sata_context *)dev->priv_data;
    960150a0:	f9401894 	ldr	x20, [x4, #48]
	if (context == NULL) {
    960150a4:	b5000174 	cbnz	x20, 960150d0 <tegrabl_sata_bdev_xfer_wait+0xd8>
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    960150a8:	52840042 	mov	w2, #0x2002                	// #8194
    960150ac:	d2800004 	mov	x4, #0x0                   	// #0
    960150b0:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960150b4:	72a20202 	movk	w2, #0x1010, lsl #16
    960150b8:	9116e863 	add	x3, x3, #0x5ba
    960150bc:	52800041 	mov	w1, #0x2                   	// #2
    960150c0:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_XFER_WAIT_2);
    960150c4:	52840053 	mov	w19, #0x2002                	// #8194
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    960150c8:	9400248e 	bl	9601e300 <tegrabl_error_print>
    960150cc:	17ffffdd 	b	96015040 <tegrabl_sata_bdev_xfer_wait+0x48>
	*status_flag = TEGRABL_BLOCKDEV_XFER_IN_PROGRESS;
    960150d0:	52800020 	mov	w0, #0x1                   	// #1
    960150d4:	aa0203f8 	mov	x24, x2
	count = xfer->block_count;
    960150d8:	29435776 	ldp	w22, w21, [x27, #24]
	*status_flag = TEGRABL_BLOCKDEV_XFER_IN_PROGRESS;
    960150dc:	39000040 	strb	w0, [x2]
			error = tegrabl_sata_xfer_complete(context, TEGRABL_SATA_READ_TIMEOUT);
    960150e0:	d2884819 	mov	x25, #0x4240                	// #16960
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    960150e4:	5283fffa 	mov	w26, #0x1fff                	// #8191
	start_time_us = tegrabl_get_timestamp_us();
    960150e8:	94002ae5 	bl	9601fc7c <tegrabl_get_timestamp_us>
			error = tegrabl_sata_xfer_complete(context, TEGRABL_SATA_READ_TIMEOUT);
    960150ec:	f2a001f9 	movk	x25, #0xf, lsl #16
	start_time_us = tegrabl_get_timestamp_us();
    960150f0:	aa0003fc 	mov	x28, x0
	elapsed_time_us = 0;
    960150f4:	d2800000 	mov	x0, #0x0                   	// #0
	while ((count > 0UL) && (elapsed_time_us <= timeout_us)) {
    960150f8:	f94037a1 	ldr	x1, [x29, #104]
    960150fc:	710002bf 	cmp	w21, #0x0
    96015100:	fa411002 	ccmp	x0, x1, #0x2, ne  // ne = any
    96015104:	540000a9 	b.ls	96015118 <tegrabl_sata_bdev_xfer_wait+0x120>  // b.plast
	if (count > 0UL) {
    96015108:	340006b5 	cbz	w21, 960151dc <tegrabl_sata_bdev_xfer_wait+0x1e4>
		xfer->block_count = count;
    9601510c:	29035776 	stp	w22, w21, [x27, #24]
		*status_flag = TEGRABL_BLOCKDEV_XFER_COMPLETE;
    96015110:	52800013 	mov	w19, #0x0                   	// #0
	return error;
    96015114:	17ffffcc 	b	96015044 <tegrabl_sata_bdev_xfer_wait+0x4c>
		if (context->xfer_info.dma_in_progress) {
    96015118:	3940a280 	ldrb	w0, [x20, #40]
    9601511c:	34000180 	cbz	w0, 9601514c <tegrabl_sata_bdev_xfer_wait+0x154>
			error = tegrabl_sata_xfer_complete(context, TEGRABL_SATA_READ_TIMEOUT);
    96015120:	aa1903e1 	mov	x1, x25
    96015124:	aa1403e0 	mov	x0, x20
    96015128:	97fffc62 	bl	960142b0 <tegrabl_sata_xfer_complete>
    9601512c:	2a0003f3 	mov	w19, w0
			if (error != TEGRABL_NO_ERROR) {
    96015130:	35fff8a0 	cbnz	w0, 96015044 <tegrabl_sata_bdev_xfer_wait+0x4c>
			bulk_count = context->xfer_info.bulk_count;
    96015134:	b9402e80 	ldr	w0, [x20, #44]
			buf += (bulk_count << context->block_size_log2);
    96015138:	f9400681 	ldr	x1, [x20, #8]
			count -= bulk_count;
    9601513c:	4b0002b5 	sub	w21, w21, w0
			block += bulk_count;
    96015140:	0b0002d6 	add	w22, w22, w0
			buf += (bulk_count << context->block_size_log2);
    96015144:	1ac12001 	lsl	w1, w0, w1
    96015148:	8b0102f7 	add	x23, x23, x1
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    9601514c:	6b1a02bf 	cmp	w21, w26
    96015150:	1a9a92a8 	csel	w8, w21, w26, ls  // ls = plast
		if (bulk_count <= 0UL) {
    96015154:	34000455 	cbz	w21, 960151dc <tegrabl_sata_bdev_xfer_wait+0x1e4>
		error = tegrabl_sata_ahci_xfer(context, buf, block, bulk_count,
    96015158:	39410284 	ldrb	w4, [x20, #64]
    9601515c:	2a0803e3 	mov	w3, w8
    96015160:	b90067a8 	str	w8, [x29, #100]
    96015164:	52800026 	mov	w6, #0x1                   	// #1
    96015168:	aa1903e5 	mov	x5, x25
    9601516c:	2a1603e2 	mov	w2, w22
    96015170:	aa1703e1 	mov	x1, x23
    96015174:	aa1403e0 	mov	x0, x20
    96015178:	97fffc93 	bl	960143c4 <tegrabl_sata_ahci_xfer>
    9601517c:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    96015180:	b94067a8 	ldr	w8, [x29, #100]
    96015184:	34000240 	cbz	w0, 960151cc <tegrabl_sata_bdev_xfer_wait+0x1d4>
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_XFER_FAILED, "%s of %"PRIu32" blocks from block %"PRIu32,
    96015188:	39410281 	ldrb	w1, [x20, #64]
    9601518c:	d0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96015190:	d0000124 	adrp	x4, 9603b000 <tt_level+0x328>
    96015194:	91166800 	add	x0, x0, #0x59a
    96015198:	7100003f 	cmp	w1, #0x0
    9601519c:	91161484 	add	x4, x4, #0x585
    960151a0:	52800682 	mov	w2, #0x34                  	// #52
    960151a4:	9a800084 	csel	x4, x4, x0, eq  // eq = none
    960151a8:	2a1603e6 	mov	w6, w22
    960151ac:	2a0803e5 	mov	w5, w8
    960151b0:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960151b4:	72a00202 	movk	w2, #0x10, lsl #16
    960151b8:	91171863 	add	x3, x3, #0x5c6
    960151bc:	52800041 	mov	w1, #0x2                   	// #2
    960151c0:	52800000 	mov	w0, #0x0                   	// #0
    960151c4:	9400244f 	bl	9601e300 <tegrabl_error_print>
			goto fail;
    960151c8:	17ffff9f 	b	96015044 <tegrabl_sata_bdev_xfer_wait+0x4c>
		context->xfer_info.bulk_count = bulk_count;
    960151cc:	b9002e88 	str	w8, [x20, #44]
		elapsed_time_us = tegrabl_get_timestamp_us() - start_time_us;
    960151d0:	94002aab 	bl	9601fc7c <tegrabl_get_timestamp_us>
    960151d4:	cb1c0000 	sub	x0, x0, x28
    960151d8:	17ffffc8 	b	960150f8 <tegrabl_sata_bdev_xfer_wait+0x100>
		*status_flag = TEGRABL_BLOCKDEV_XFER_COMPLETE;
    960151dc:	52800040 	mov	w0, #0x2                   	// #2
    960151e0:	39000300 	strb	w0, [x24]
    960151e4:	17ffffcb 	b	96015110 <tegrabl_sata_bdev_xfer_wait+0x118>

00000000960151e8 <tegrabl_sata_bdev_xfer>:
{
    960151e8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960151ec:	910003fd 	mov	x29, sp
    960151f0:	a90153f3 	stp	x19, x20, [sp, #16]
    960151f4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960151f8:	a90363f7 	stp	x23, x24, [sp, #48]
    960151fc:	f90023f9 	str	x25, [sp, #64]
	if (xfer == NULL) {
    96015200:	b5000260 	cbnz	x0, 9601524c <tegrabl_sata_bdev_xfer+0x64>
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_SATA_BDEV_XFER_1);
    96015204:	52806556 	mov	w22, #0x32a                 	// #810
		TEGRABL_SET_ERROR_STRING(error, "xfer: %p", xfer);
    96015208:	52806542 	mov	w2, #0x32a                 	// #810
    9601520c:	d2800004 	mov	x4, #0x0                   	// #0
    96015210:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015214:	72a20202 	movk	w2, #0x1010, lsl #16
    96015218:	91168063 	add	x3, x3, #0x5a0
    9601521c:	52800041 	mov	w1, #0x2                   	// #2
    96015220:	52800020 	mov	w0, #0x1                   	// #1
    96015224:	94002437 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, TEGRABL_SATA_BDEV_XFER_1);
    96015228:	72a20216 	movk	w22, #0x1010, lsl #16
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_XFER_FAILED, "sata");
    9601522c:	52800682 	mov	w2, #0x34                  	// #52
    96015230:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015234:	72a00202 	movk	w2, #0x10, lsl #16
    96015238:	91165463 	add	x3, x3, #0x595
    9601523c:	52800041 	mov	w1, #0x2                   	// #2
    96015240:	52800000 	mov	w0, #0x0                   	// #0
    96015244:	9400242f 	bl	9601e300 <tegrabl_error_print>
	return error;
    96015248:	14000051 	b	9601538c <tegrabl_sata_bdev_xfer+0x1a4>
	if (xfer->dev == NULL || xfer->buf == NULL) {
    9601524c:	f9400004 	ldr	x4, [x0]
    96015250:	aa0003f5 	mov	x21, x0
    96015254:	f9400801 	ldr	x1, [x0, #16]
    96015258:	b4000044 	cbz	x4, 96015260 <tegrabl_sata_bdev_xfer+0x78>
    9601525c:	b5000161 	cbnz	x1, 96015288 <tegrabl_sata_bdev_xfer+0xa0>
		TEGRABL_SET_ERROR_STRING(error, "dev: %p, buf: %p", xfer->dev, xfer->buf);
    96015260:	52806042 	mov	w2, #0x302                 	// #770
    96015264:	aa0103e5 	mov	x5, x1
    96015268:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601526c:	72a20202 	movk	w2, #0x1010, lsl #16
    96015270:	9116a463 	add	x3, x3, #0x5a9
    96015274:	52800041 	mov	w1, #0x2                   	// #2
    96015278:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_XFER_1);
    9601527c:	52806056 	mov	w22, #0x302                 	// #770
		TEGRABL_SET_ERROR_STRING(error, "dev: %p, buf: %p", xfer->dev, xfer->buf);
    96015280:	94002420 	bl	9601e300 <tegrabl_error_print>
    96015284:	17ffffe9 	b	96015228 <tegrabl_sata_bdev_xfer+0x40>
	context = (struct tegrabl_sata_context *)dev->priv_data;
    96015288:	f9401893 	ldr	x19, [x4, #48]
	if (context == NULL) {
    9601528c:	b5000173 	cbnz	x19, 960152b8 <tegrabl_sata_bdev_xfer+0xd0>
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    96015290:	52842042 	mov	w2, #0x2102                	// #8450
    96015294:	d2800004 	mov	x4, #0x0                   	// #0
    96015298:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601529c:	72a20202 	movk	w2, #0x1010, lsl #16
    960152a0:	9116e863 	add	x3, x3, #0x5ba
    960152a4:	52800041 	mov	w1, #0x2                   	// #2
    960152a8:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_XFER_2);
    960152ac:	52842056 	mov	w22, #0x2102                	// #8450
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    960152b0:	94002414 	bl	9601e300 <tegrabl_error_print>
    960152b4:	17ffffdd 	b	96015228 <tegrabl_sata_bdev_xfer+0x40>
	count = xfer->block_count;
    960152b8:	29435017 	ldp	w23, w20, [x0, #24]
	if ((block + (uint64_t)count) > (uint64_t)context->block_count) {
    960152bc:	f9400a66 	ldr	x6, [x19, #16]
    960152c0:	2a1403e5 	mov	w5, w20
    960152c4:	8b3740a5 	add	x5, x5, w23, uxtw
    960152c8:	eb0600bf 	cmp	x5, x6
    960152cc:	54000169 	b.ls	960152f8 <tegrabl_sata_bdev_xfer+0x110>  // b.plast
		TEGRABL_SET_ERROR_STRING(error, "block %"PRIu64, "block %"PRIu64,
    960152d0:	d0000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    960152d4:	52806082 	mov	w2, #0x304                 	// #772
    960152d8:	91162c84 	add	x4, x4, #0x58b
    960152dc:	72a20202 	movk	w2, #0x1010, lsl #16
    960152e0:	aa0403e3 	mov	x3, x4
    960152e4:	52800041 	mov	w1, #0x2                   	// #2
    960152e8:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, TEGRABL_SATA_BDEV_XFER_1);
    960152ec:	52806096 	mov	w22, #0x304                 	// #772
		TEGRABL_SET_ERROR_STRING(error, "block %"PRIu64, "block %"PRIu64,
    960152f0:	94002404 	bl	9601e300 <tegrabl_error_print>
    960152f4:	17ffffcd 	b	96015228 <tegrabl_sata_bdev_xfer+0x40>
	if (xfer->xfer_type == TEGRABL_BLOCKDEV_READ) {
    960152f8:	394022b9 	ldrb	w25, [x21, #8]
	bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    960152fc:	5283ffe0 	mov	w0, #0x1fff                	// #8191
    96015300:	6b00029f 	cmp	w20, w0
	error = tegrabl_sata_ahci_xfer(context, xfer->buf, block, bulk_count, is_write,
    96015304:	d2884805 	mov	x5, #0x4240                	// #16960
	bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    96015308:	1a809294 	csel	w20, w20, w0, ls  // ls = plast
	if (xfer->xfer_type == TEGRABL_BLOCKDEV_READ) {
    9601530c:	71000b3f 	cmp	w25, #0x2
    96015310:	1a9f07f8 	cset	w24, ne  // ne = any
	error = tegrabl_sata_ahci_xfer(context, xfer->buf, block, bulk_count, is_write,
    96015314:	52800026 	mov	w6, #0x1                   	// #1
    96015318:	f2a001e5 	movk	x5, #0xf, lsl #16
    9601531c:	2a1803e4 	mov	w4, w24
    96015320:	2a1403e3 	mov	w3, w20
    96015324:	2a1703e2 	mov	w2, w23
    96015328:	aa1303e0 	mov	x0, x19
    9601532c:	97fffc26 	bl	960143c4 <tegrabl_sata_ahci_xfer>
    96015330:	2a0003f6 	mov	w22, w0
	if (error != TEGRABL_NO_ERROR) {
    96015334:	34000220 	cbz	w0, 96015378 <tegrabl_sata_bdev_xfer+0x190>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_XFER_FAILED, "%s of %"PRIu32" blocks from block %"PRIu32,
    96015338:	71000b3f 	cmp	w25, #0x2
    9601533c:	d0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96015340:	d0000124 	adrp	x4, 9603b000 <tt_level+0x328>
    96015344:	91166800 	add	x0, x0, #0x59a
    96015348:	91161484 	add	x4, x4, #0x585
    9601534c:	52800682 	mov	w2, #0x34                  	// #52
    96015350:	9a800084 	csel	x4, x4, x0, eq  // eq = none
    96015354:	2a1703e6 	mov	w6, w23
    96015358:	2a1403e5 	mov	w5, w20
    9601535c:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015360:	72a00202 	movk	w2, #0x10, lsl #16
    96015364:	91171863 	add	x3, x3, #0x5c6
    96015368:	52800041 	mov	w1, #0x2                   	// #2
    9601536c:	52800000 	mov	w0, #0x0                   	// #0
    96015370:	940023e4 	bl	9601e300 <tegrabl_error_print>
    96015374:	17ffffae 	b	9601522c <tegrabl_sata_bdev_xfer+0x44>
	context->xfer_info.dma_in_progress = true;
    96015378:	52800020 	mov	w0, #0x1                   	// #1
	context->xfer_info.bdev_xfer_info = xfer;
    9601537c:	f9001275 	str	x21, [x19, #32]
	context->xfer_info.dma_in_progress = true;
    96015380:	3900a260 	strb	w0, [x19, #40]
	context->xfer_info.bulk_count = bulk_count;
    96015384:	b9002e74 	str	w20, [x19, #44]
	context->xfer_info.is_write = is_write;
    96015388:	39010278 	strb	w24, [x19, #64]
}
    9601538c:	2a1603e0 	mov	w0, w22
    96015390:	f94023f9 	ldr	x25, [sp, #64]
    96015394:	a94153f3 	ldp	x19, x20, [sp, #16]
    96015398:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601539c:	a94363f7 	ldp	x23, x24, [sp, #48]
    960153a0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960153a4:	d65f03c0 	ret

00000000960153a8 <tegrabl_sata_bdev_ioctl>:
{
    960153a8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960153ac:	910003fd 	mov	x29, sp
    960153b0:	a90153f3 	stp	x19, x20, [sp, #16]
    960153b4:	2a0103f4 	mov	w20, w1
	if (dev == NULL) {
    960153b8:	b50002e0 	cbnz	x0, 96015414 <tegrabl_sata_bdev_ioctl+0x6c>
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_SATA_BDEV_IOCTL);
    960153bc:	52802553 	mov	w19, #0x12a                 	// #298
		TEGRABL_SET_ERROR_STRING(error, "dev: %p", dev);
    960153c0:	52802542 	mov	w2, #0x12a                 	// #298
    960153c4:	d2800004 	mov	x4, #0x0                   	// #0
    960153c8:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960153cc:	72a20202 	movk	w2, #0x1010, lsl #16
    960153d0:	91146463 	add	x3, x3, #0x519
    960153d4:	52800041 	mov	w1, #0x2                   	// #2
    960153d8:	52800020 	mov	w0, #0x1                   	// #1
    960153dc:	940023c9 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_COMMAND_FAILED, "ioctl %d", ioctl);
    960153e0:	528002e2 	mov	w2, #0x17                  	// #23
    960153e4:	2a1403e4 	mov	w4, w20
	error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, TEGRABL_SATA_BDEV_IOCTL);
    960153e8:	72a20213 	movk	w19, #0x1010, lsl #16
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_COMMAND_FAILED, "ioctl %d", ioctl);
    960153ec:	72a00202 	movk	w2, #0x10, lsl #16
    960153f0:	52800041 	mov	w1, #0x2                   	// #2
    960153f4:	52800000 	mov	w0, #0x0                   	// #0
    960153f8:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960153fc:	91148463 	add	x3, x3, #0x521
    96015400:	940023c0 	bl	9601e300 <tegrabl_error_print>
}
    96015404:	2a1303e0 	mov	w0, w19
    96015408:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601540c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96015410:	d65f03c0 	ret
	context = (struct tegrabl_sata_context *)dev->priv_data;
    96015414:	f9401800 	ldr	x0, [x0, #48]
	if (context == NULL) {
    96015418:	b5000160 	cbnz	x0, 96015444 <tegrabl_sata_bdev_ioctl+0x9c>
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    9601541c:	52802042 	mov	w2, #0x102                 	// #258
    96015420:	d2800004 	mov	x4, #0x0                   	// #0
    96015424:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015428:	72a20202 	movk	w2, #0x1010, lsl #16
    9601542c:	9116e863 	add	x3, x3, #0x5ba
    96015430:	52800041 	mov	w1, #0x2                   	// #2
    96015434:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_IOCTL);
    96015438:	52802053 	mov	w19, #0x102                 	// #258
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    9601543c:	940023b1 	bl	9601e300 <tegrabl_error_print>
    96015440:	17ffffe8 	b	960153e0 <tegrabl_sata_bdev_ioctl+0x38>
	if (ioctl == TEGRABL_IOCTL_DEVICE_CACHE_FLUSH) {
    96015444:	7100103f 	cmp	w1, #0x4
    96015448:	54000081 	b.ne	96015458 <tegrabl_sata_bdev_ioctl+0xb0>  // b.any
}
    9601544c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96015450:	a8c27bfd 	ldp	x29, x30, [sp], #32
		return tegrabl_sata_ahci_flush_device(context);
    96015454:	17fffc8e 	b	9601468c <tegrabl_sata_ahci_flush_device>
	TEGRABL_SET_ERROR_STRING(error, "ioctl %d", ioctl);
    96015458:	52802022 	mov	w2, #0x101                 	// #257
    9601545c:	2a0103e4 	mov	w4, w1
    96015460:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015464:	72a20202 	movk	w2, #0x1010, lsl #16
    96015468:	91148463 	add	x3, x3, #0x521
    9601546c:	52800041 	mov	w1, #0x2                   	// #2
    96015470:	52800020 	mov	w0, #0x1                   	// #1
	error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, TEGRABL_SATA_BDEV_IOCTL);
    96015474:	52802033 	mov	w19, #0x101                 	// #257
	TEGRABL_SET_ERROR_STRING(error, "ioctl %d", ioctl);
    96015478:	940023a2 	bl	9601e300 <tegrabl_error_print>
    9601547c:	17ffffd9 	b	960153e0 <tegrabl_sata_bdev_ioctl+0x38>

0000000096015480 <tegrabl_sata_bdev_close>:
 */
static tegrabl_error_t tegrabl_sata_bdev_close(struct tegrabl_bdev *dev)
{
	struct tegrabl_sata_context *context = NULL;

	if (dev != NULL) {
    96015480:	b4000260 	cbz	x0, 960154cc <tegrabl_sata_bdev_close+0x4c>
		if (dev->priv_data != NULL) {
    96015484:	f9401801 	ldr	x1, [x0, #48]
    96015488:	b40001e1 	cbz	x1, 960154c4 <tegrabl_sata_bdev_close+0x44>
{
    9601548c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96015490:	910003fd 	mov	x29, sp
    96015494:	f9000bf3 	str	x19, [sp, #16]
    96015498:	aa0003f3 	mov	x19, x0
			context = (struct tegrabl_sata_context *)dev->priv_data;
			tegrabl_sata_ahci_free_buffers(context);
    9601549c:	aa0103e0 	mov	x0, x1
    960154a0:	97fffce1 	bl	96014824 <tegrabl_sata_ahci_free_buffers>
			tegrabl_free(dev->priv_data);
    960154a4:	f9401a60 	ldr	x0, [x19, #48]
    960154a8:	94004584 	bl	96026ab8 <tegrabl_free>
		}
		init_done = false;
	}

	return TEGRABL_NO_ERROR;
}
    960154ac:	f9400bf3 	ldr	x19, [sp, #16]
		init_done = false;
    960154b0:	b00002c0 	adrp	x0, 9606e000 <__bss_start>
}
    960154b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
		init_done = false;
    960154b8:	3929101f 	strb	wzr, [x0, #2628]
}
    960154bc:	52800000 	mov	w0, #0x0                   	// #0
    960154c0:	d65f03c0 	ret
		init_done = false;
    960154c4:	b00002c0 	adrp	x0, 9606e000 <__bss_start>
    960154c8:	3929101f 	strb	wzr, [x0, #2628]
}
    960154cc:	52800000 	mov	w0, #0x0                   	// #0
    960154d0:	d65f03c0 	ret

00000000960154d4 <tegrabl_sata_bdev_write_block>:
{
    960154d4:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	if ((dev == NULL) || (buffer == NULL)) {
    960154d8:	f100001f 	cmp	x0, #0x0
    960154dc:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    960154e0:	910003fd 	mov	x29, sp
    960154e4:	a90153f3 	stp	x19, x20, [sp, #16]
    960154e8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960154ec:	aa0103f5 	mov	x21, x1
    960154f0:	a90363f7 	stp	x23, x24, [sp, #48]
    960154f4:	a9046bf9 	stp	x25, x26, [sp, #64]
    960154f8:	2a0203f9 	mov	w25, w2
    960154fc:	a90573fb 	stp	x27, x28, [sp, #80]
    96015500:	2a0303fa 	mov	w26, w3
	if ((dev == NULL) || (buffer == NULL)) {
    96015504:	540002c1 	b.ne	9601555c <tegrabl_sata_bdev_write_block+0x88>  // b.any
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER,
    96015508:	5280a553 	mov	w19, #0x52a                 	// #1322
		TEGRABL_SET_ERROR_STRING(error, "dev: %p, buffer: %p", dev, buffer);
    9601550c:	5280a542 	mov	w2, #0x52a                 	// #1322
    96015510:	aa0103e5 	mov	x5, x1
    96015514:	aa0003e4 	mov	x4, x0
    96015518:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601551c:	72a20202 	movk	w2, #0x1010, lsl #16
    96015520:	91159063 	add	x3, x3, #0x564
    96015524:	52800041 	mov	w1, #0x2                   	// #2
    96015528:	52800020 	mov	w0, #0x1                   	// #1
    9601552c:	94002375 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, TEGRABL_SATA_BDEV_WRITE_BLOCK);
    96015530:	72a20213 	movk	w19, #0x1010, lsl #16
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED, "sector %"PRIu32" count %"PRIu32,
    96015534:	52800322 	mov	w2, #0x19                  	// #25
    96015538:	2a1a03e5 	mov	w5, w26
    9601553c:	2a1903e4 	mov	w4, w25
    96015540:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015544:	72a00202 	movk	w2, #0x10, lsl #16
    96015548:	9115e063 	add	x3, x3, #0x578
    9601554c:	52800041 	mov	w1, #0x2                   	// #2
    96015550:	52800000 	mov	w0, #0x0                   	// #0
    96015554:	9400236b 	bl	9601e300 <tegrabl_error_print>
	return error;
    96015558:	14000038 	b	96015638 <tegrabl_sata_bdev_write_block+0x164>
	context = (struct tegrabl_sata_context *)dev->priv_data;
    9601555c:	f9401818 	ldr	x24, [x0, #48]
	if (context == NULL) {
    96015560:	b5000178 	cbnz	x24, 9601558c <tegrabl_sata_bdev_write_block+0xb8>
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    96015564:	5280a042 	mov	w2, #0x502                 	// #1282
    96015568:	d2800004 	mov	x4, #0x0                   	// #0
    9601556c:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015570:	72a20202 	movk	w2, #0x1010, lsl #16
    96015574:	9116e863 	add	x3, x3, #0x5ba
    96015578:	52800041 	mov	w1, #0x2                   	// #2
    9601557c:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_WRITE_BLOCK);
    96015580:	5280a053 	mov	w19, #0x502                 	// #1282
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    96015584:	9400235f 	bl	9601e300 <tegrabl_error_print>
    96015588:	17ffffea 	b	96015530 <tegrabl_sata_bdev_write_block+0x5c>
	if ((block + (uint64_t)count) > context->block_count) {
    9601558c:	2a0303e5 	mov	w5, w3
    96015590:	f9400b06 	ldr	x6, [x24, #16]
    96015594:	8b2240a5 	add	x5, x5, w2, uxtw
    96015598:	eb0600bf 	cmp	x5, x6
    9601559c:	540005e9 	b.ls	96015658 <tegrabl_sata_bdev_write_block+0x184>  // b.plast
		TEGRABL_SET_ERROR_STRING(error, "block %"PRIu64, "block %"PRIu64,
    960155a0:	d0000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    960155a4:	5280a082 	mov	w2, #0x504                 	// #1284
    960155a8:	91162c84 	add	x4, x4, #0x58b
    960155ac:	72a20202 	movk	w2, #0x1010, lsl #16
    960155b0:	aa0403e3 	mov	x3, x4
    960155b4:	52800041 	mov	w1, #0x2                   	// #2
    960155b8:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, TEGRABL_SATA_BDEV_WRITE_BLOCK);
    960155bc:	5280a093 	mov	w19, #0x504                 	// #1284
		TEGRABL_SET_ERROR_STRING(error, "block %"PRIu64, "block %"PRIu64,
    960155c0:	94002350 	bl	9601e300 <tegrabl_error_print>
    960155c4:	17ffffdb 	b	96015530 <tegrabl_sata_bdev_write_block+0x5c>
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    960155c8:	6b1b029f 	cmp	w20, w27
		error = tegrabl_sata_ahci_io(context, (void *)buf, block, bulk_count,
    960155cc:	aa1c03e5 	mov	x5, x28
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    960155d0:	1a9b9296 	csel	w22, w20, w27, ls  // ls = plast
		error = tegrabl_sata_ahci_io(context, (void *)buf, block, bulk_count,
    960155d4:	52800024 	mov	w4, #0x1                   	// #1
    960155d8:	2a1603e3 	mov	w3, w22
    960155dc:	2a1703e2 	mov	w2, w23
    960155e0:	aa1503e1 	mov	x1, x21
    960155e4:	aa1803e0 	mov	x0, x24
    960155e8:	97fffc27 	bl	96014684 <tegrabl_sata_ahci_io>
    960155ec:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    960155f0:	34000160 	cbz	w0, 9601561c <tegrabl_sata_bdev_write_block+0x148>
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_WRITE_FAILED, "sector %"PRIu32" count %"PRIu32,
    960155f4:	52800342 	mov	w2, #0x1a                  	// #26
    960155f8:	2a1603e5 	mov	w5, w22
    960155fc:	2a1703e4 	mov	w4, w23
    96015600:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015604:	72a00202 	movk	w2, #0x10, lsl #16
    96015608:	9115e063 	add	x3, x3, #0x578
    9601560c:	52800041 	mov	w1, #0x2                   	// #2
    96015610:	52800000 	mov	w0, #0x0                   	// #0
    96015614:	9400233b 	bl	9601e300 <tegrabl_error_print>
    96015618:	17ffffc7 	b	96015534 <tegrabl_sata_bdev_write_block+0x60>
		buf += (bulk_count << context->block_size_log2);
    9601561c:	f9400700 	ldr	x0, [x24, #8]
		count -= bulk_count;
    96015620:	4b160294 	sub	w20, w20, w22
		block += bulk_count;
    96015624:	0b1602f7 	add	w23, w23, w22
		buf += (bulk_count << context->block_size_log2);
    96015628:	1ac022c0 	lsl	w0, w22, w0
    9601562c:	8b0002b5 	add	x21, x21, x0
	while (count > 0UL) {
    96015630:	35fffcd4 	cbnz	w20, 960155c8 <tegrabl_sata_bdev_write_block+0xf4>
fail:
    96015634:	52800013 	mov	w19, #0x0                   	// #0
}
    96015638:	2a1303e0 	mov	w0, w19
    9601563c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96015640:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96015644:	a94363f7 	ldp	x23, x24, [sp, #48]
    96015648:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601564c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96015650:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96015654:	d65f03c0 	ret
		error = tegrabl_sata_ahci_io(context, (void *)buf, block, bulk_count,
    96015658:	d288481c 	mov	x28, #0x4240                	// #16960
    9601565c:	2a0303f4 	mov	w20, w3
    96015660:	2a0203f7 	mov	w23, w2
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    96015664:	5283fffb 	mov	w27, #0x1fff                	// #8191
		error = tegrabl_sata_ahci_io(context, (void *)buf, block, bulk_count,
    96015668:	f2a001fc 	movk	x28, #0xf, lsl #16
    9601566c:	17fffff1 	b	96015630 <tegrabl_sata_bdev_write_block+0x15c>

0000000096015670 <tegrabl_sata_bdev_read_block>:
{
    96015670:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	if ((dev == NULL) || (buffer == NULL)) {
    96015674:	f100001f 	cmp	x0, #0x0
    96015678:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9601567c:	910003fd 	mov	x29, sp
    96015680:	a90153f3 	stp	x19, x20, [sp, #16]
    96015684:	a9025bf5 	stp	x21, x22, [sp, #32]
    96015688:	aa0103f5 	mov	x21, x1
    9601568c:	a90363f7 	stp	x23, x24, [sp, #48]
    96015690:	a9046bf9 	stp	x25, x26, [sp, #64]
    96015694:	2a0203f9 	mov	w25, w2
    96015698:	a90573fb 	stp	x27, x28, [sp, #80]
    9601569c:	2a0303fa 	mov	w26, w3
	if ((dev == NULL) || (buffer == NULL)) {
    960156a0:	540002c1 	b.ne	960156f8 <tegrabl_sata_bdev_read_block+0x88>  // b.any
		error = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, TEGRABL_SATA_BDEV_READ_BLOCK);
    960156a4:	52808553 	mov	w19, #0x42a                 	// #1066
		TEGRABL_SET_ERROR_STRING(error, "dev: %p, buffer: %p", dev, buffer);
    960156a8:	52808542 	mov	w2, #0x42a                 	// #1066
    960156ac:	aa0103e5 	mov	x5, x1
    960156b0:	aa0003e4 	mov	x4, x0
    960156b4:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960156b8:	72a20202 	movk	w2, #0x1010, lsl #16
    960156bc:	91159063 	add	x3, x3, #0x564
    960156c0:	52800041 	mov	w1, #0x2                   	// #2
    960156c4:	52800020 	mov	w0, #0x1                   	// #1
    960156c8:	9400230e 	bl	9601e300 <tegrabl_error_print>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, TEGRABL_SATA_BDEV_READ_BLOCK);
    960156cc:	72a20213 	movk	w19, #0x1010, lsl #16
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED, "sector %"PRIu32" count %"PRIu32,
    960156d0:	52800322 	mov	w2, #0x19                  	// #25
    960156d4:	2a1a03e5 	mov	w5, w26
    960156d8:	2a1903e4 	mov	w4, w25
    960156dc:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960156e0:	72a00202 	movk	w2, #0x10, lsl #16
    960156e4:	9115e063 	add	x3, x3, #0x578
    960156e8:	52800041 	mov	w1, #0x2                   	// #2
    960156ec:	52800000 	mov	w0, #0x0                   	// #0
    960156f0:	94002304 	bl	9601e300 <tegrabl_error_print>
	return error;
    960156f4:	14000038 	b	960157d4 <tegrabl_sata_bdev_read_block+0x164>
	context = (struct tegrabl_sata_context *)dev->priv_data;
    960156f8:	f9401818 	ldr	x24, [x0, #48]
	if (context == NULL) {
    960156fc:	b5000178 	cbnz	x24, 96015728 <tegrabl_sata_bdev_read_block+0xb8>
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    96015700:	52808042 	mov	w2, #0x402                 	// #1026
    96015704:	d2800004 	mov	x4, #0x0                   	// #0
    96015708:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    9601570c:	72a20202 	movk	w2, #0x1010, lsl #16
    96015710:	9116e863 	add	x3, x3, #0x5ba
    96015714:	52800041 	mov	w1, #0x2                   	// #2
    96015718:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_SATA_BDEV_READ_BLOCK);
    9601571c:	52808053 	mov	w19, #0x402                 	// #1026
		TEGRABL_SET_ERROR_STRING(error, "context: %p", context);
    96015720:	940022f8 	bl	9601e300 <tegrabl_error_print>
    96015724:	17ffffea 	b	960156cc <tegrabl_sata_bdev_read_block+0x5c>
	if ((block + (uint64_t)count) > context->block_count) {
    96015728:	2a0303e5 	mov	w5, w3
    9601572c:	f9400b06 	ldr	x6, [x24, #16]
    96015730:	8b2240a5 	add	x5, x5, w2, uxtw
    96015734:	eb0600bf 	cmp	x5, x6
    96015738:	540005e9 	b.ls	960157f4 <tegrabl_sata_bdev_read_block+0x184>  // b.plast
		TEGRABL_SET_ERROR_STRING(error, "block %"PRIu64, "block %"PRIu64,
    9601573c:	d0000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96015740:	52808082 	mov	w2, #0x404                 	// #1028
    96015744:	91162c84 	add	x4, x4, #0x58b
    96015748:	72a20202 	movk	w2, #0x1010, lsl #16
    9601574c:	aa0403e3 	mov	x3, x4
    96015750:	52800041 	mov	w1, #0x2                   	// #2
    96015754:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, TEGRABL_SATA_BDEV_READ_BLOCK);
    96015758:	52808093 	mov	w19, #0x404                 	// #1028
		TEGRABL_SET_ERROR_STRING(error, "block %"PRIu64, "block %"PRIu64,
    9601575c:	940022e9 	bl	9601e300 <tegrabl_error_print>
    96015760:	17ffffdb 	b	960156cc <tegrabl_sata_bdev_read_block+0x5c>
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    96015764:	6b1b029f 	cmp	w20, w27
		error = tegrabl_sata_ahci_io(context, buf, block, bulk_count, false,
    96015768:	aa1c03e5 	mov	x5, x28
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    9601576c:	1a9b9296 	csel	w22, w20, w27, ls  // ls = plast
		error = tegrabl_sata_ahci_io(context, buf, block, bulk_count, false,
    96015770:	52800004 	mov	w4, #0x0                   	// #0
    96015774:	2a1603e3 	mov	w3, w22
    96015778:	2a1703e2 	mov	w2, w23
    9601577c:	aa1503e1 	mov	x1, x21
    96015780:	aa1803e0 	mov	x0, x24
    96015784:	97fffbc0 	bl	96014684 <tegrabl_sata_ahci_io>
    96015788:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601578c:	34000160 	cbz	w0, 960157b8 <tegrabl_sata_bdev_read_block+0x148>
			TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_READ_FAILED, "sector %"PRIu32" count %"PRIu32,
    96015790:	52800322 	mov	w2, #0x19                  	// #25
    96015794:	2a1603e5 	mov	w5, w22
    96015798:	2a1703e4 	mov	w4, w23
    9601579c:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960157a0:	72a00202 	movk	w2, #0x10, lsl #16
    960157a4:	9115e063 	add	x3, x3, #0x578
    960157a8:	52800041 	mov	w1, #0x2                   	// #2
    960157ac:	52800000 	mov	w0, #0x0                   	// #0
    960157b0:	940022d4 	bl	9601e300 <tegrabl_error_print>
    960157b4:	17ffffc7 	b	960156d0 <tegrabl_sata_bdev_read_block+0x60>
		buf += (bulk_count << context->block_size_log2);
    960157b8:	f9400700 	ldr	x0, [x24, #8]
		count -= bulk_count;
    960157bc:	4b160294 	sub	w20, w20, w22
		block += bulk_count;
    960157c0:	0b1602f7 	add	w23, w23, w22
		buf += (bulk_count << context->block_size_log2);
    960157c4:	1ac022c0 	lsl	w0, w22, w0
    960157c8:	8b0002b5 	add	x21, x21, x0
	while (count != 0U) {
    960157cc:	35fffcd4 	cbnz	w20, 96015764 <tegrabl_sata_bdev_read_block+0xf4>
fail:
    960157d0:	52800013 	mov	w19, #0x0                   	// #0
}
    960157d4:	2a1303e0 	mov	w0, w19
    960157d8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960157dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960157e0:	a94363f7 	ldp	x23, x24, [sp, #48]
    960157e4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960157e8:	a94573fb 	ldp	x27, x28, [sp, #80]
    960157ec:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960157f0:	d65f03c0 	ret
		error = tegrabl_sata_ahci_io(context, buf, block, bulk_count, false,
    960157f4:	d288481c 	mov	x28, #0x4240                	// #16960
    960157f8:	2a0303f4 	mov	w20, w3
    960157fc:	2a0203f7 	mov	w23, w2
		bulk_count = MIN(count, SATA_MAX_READ_WRITE_SECTORS);
    96015800:	5283fffb 	mov	w27, #0x1fff                	// #8191
		error = tegrabl_sata_ahci_io(context, buf, block, bulk_count, false,
    96015804:	f2a001fc 	movk	x28, #0xf, lsl #16
    96015808:	17fffff1 	b	960157cc <tegrabl_sata_bdev_read_block+0x15c>

000000009601580c <tegrabl_sata_bdev_open>:

tegrabl_error_t tegrabl_sata_bdev_open(uint32_t instance,
		struct tegrabl_uphy_handle *uphy,
		struct tegrabl_sata_platform_params *device_params)

{
    9601580c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96015810:	910003fd 	mov	x29, sp
    96015814:	a9025bf5 	stp	x21, x22, [sp, #32]
	struct tegrabl_sata_context *context = NULL;

	pr_trace("transfer_speed = %d\n", device_params->transfer_speed);
	pr_trace("is_skip_init = %d\n", device_params->is_skip_init);

	if (init_done) {
    96015818:	b00002d6 	adrp	x22, 9606e000 <__bss_start>
{
    9601581c:	a90153f3 	stp	x19, x20, [sp, #16]
	if (init_done) {
    96015820:	396912c3 	ldrb	w3, [x22, #2628]
{
    96015824:	a90363f7 	stp	x23, x24, [sp, #48]
	if (init_done) {
    96015828:	350011e3 	cbnz	w3, 96015a64 <tegrabl_sata_bdev_open+0x258>
    9601582c:	aa0203f3 	mov	x19, x2
    96015830:	aa0103f5 	mov	x21, x1
    96015834:	2a0003f7 	mov	w23, w0
		goto fail;
	}

	pr_trace("Initializing sata device instance %d\n", instance);

	context = tegrabl_malloc(sizeof(struct tegrabl_sata_context));
    96015838:	d2800e00 	mov	x0, #0x70                  	// #112
    9601583c:	9400448f 	bl	96026a78 <tegrabl_malloc>
    96015840:	aa0003f4 	mov	x20, x0

	if (context == NULL) {
    96015844:	b5000360 	cbnz	x0, 960158b0 <tegrabl_sata_bdev_open+0xa4>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_BDEV_OPEN);
    96015848:	5280e073 	mov	w19, #0x703                 	// #1795
		TEGRABL_SET_ERROR_STRING(error, "%d", "context", (uint32_t)sizeof(struct tegrabl_sata_context));
    9601584c:	5280e062 	mov	w2, #0x703                 	// #1795
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_BDEV_OPEN);
    96015850:	72a20213 	movk	w19, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "%d", "context", (uint32_t)sizeof(struct tegrabl_sata_context));
    96015854:	52800e05 	mov	w5, #0x70                  	// #112
    96015858:	d0000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    9601585c:	b0000143 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96015860:	9114a884 	add	x4, x4, #0x52a
    96015864:	9102f463 	add	x3, x3, #0xbd
    96015868:	72a20202 	movk	w2, #0x1010, lsl #16
    9601586c:	52800041 	mov	w1, #0x2                   	// #2
    96015870:	52800020 	mov	w0, #0x1                   	// #1
    96015874:	940022a3 	bl	9601e300 <tegrabl_error_print>

	init_done = true;

fail:
	if (error != TEGRABL_NO_ERROR) {
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_OPEN_FAILED, "sata %d", instance);
    96015878:	52800222 	mov	w2, #0x11                  	// #17
    9601587c:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015880:	2a1703e4 	mov	w4, w23
    96015884:	91157063 	add	x3, x3, #0x55c
    96015888:	72a00202 	movk	w2, #0x10, lsl #16
    9601588c:	52800041 	mov	w1, #0x2                   	// #2
    96015890:	52800000 	mov	w0, #0x0                   	// #0
    96015894:	9400229b 	bl	9601e300 <tegrabl_error_print>
	}

	return error;
}
    96015898:	2a1303e0 	mov	w0, w19
    9601589c:	a94153f3 	ldp	x19, x20, [sp, #16]
    960158a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960158a4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960158a8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960158ac:	d65f03c0 	ret
	memset(context, 0x0, sizeof(struct tegrabl_sata_context));
    960158b0:	d2800e02 	mov	x2, #0x70                  	// #112
    960158b4:	52800001 	mov	w1, #0x0                   	// #0
    960158b8:	9400515c 	bl	96029e28 <memset>
	context->instance = (uint8_t)instance;
    960158bc:	39000297 	strb	w23, [x20]
	context->block_size_log2 = TEGRABL_SATA_SECTOR_SIZE_LOG2;
    960158c0:	d2800120 	mov	x0, #0x9                   	// #9
    960158c4:	f9000680 	str	x0, [x20, #8]
	context->mode = TEGRABL_SATA_MODE_AHCI;
    960158c8:	d2800040 	mov	x0, #0x2                   	// #2
    960158cc:	f2c00020 	movk	x0, #0x1, lsl #32
    960158d0:	f9000e80 	str	x0, [x20, #24]
	if (device_params != NULL) {
    960158d4:	b4000073 	cbz	x19, 960158e0 <tegrabl_sata_bdev_open+0xd4>
		context->speed = device_params->transfer_speed;
    960158d8:	39400260 	ldrb	w0, [x19]
    960158dc:	b9001e80 	str	w0, [x20, #28]
	error = tegrabl_sata_ahci_init(context, uphy);
    960158e0:	aa1503e1 	mov	x1, x21
    960158e4:	aa1403e0 	mov	x0, x20
    960158e8:	97fffc4c 	bl	96014a18 <tegrabl_sata_ahci_init>
    960158ec:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    960158f0:	34000120 	cbz	w0, 96015914 <tegrabl_sata_bdev_open+0x108>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "ahci link");
    960158f4:	52800242 	mov	w2, #0x12                  	// #18
    960158f8:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960158fc:	72a00202 	movk	w2, #0x10, lsl #16
    96015900:	9114c863 	add	x3, x3, #0x532
    96015904:	52800041 	mov	w1, #0x2                   	// #2
    96015908:	52800000 	mov	w0, #0x0                   	// #0
    9601590c:	9400227d 	bl	9601e300 <tegrabl_error_print>
		goto fail;
    96015910:	17ffffda 	b	96015878 <tegrabl_sata_bdev_open+0x6c>
	user_dev = tegrabl_calloc(1, sizeof(struct tegrabl_bdev));
    96015914:	d2801101 	mov	x1, #0x88                  	// #136
    96015918:	d2800020 	mov	x0, #0x1                   	// #1
	bnum_t block_count = (bnum_t)context->block_count;
    9601591c:	a940e293 	ldp	x19, x24, [x20, #8]
	user_dev = tegrabl_calloc(1, sizeof(struct tegrabl_bdev));
    96015920:	94004469 	bl	96026ac4 <tegrabl_calloc>
    96015924:	aa0003f5 	mov	x21, x0
	if (user_dev == NULL) {
    96015928:	b50002e0 	cbnz	x0, 96015984 <tegrabl_sata_bdev_open+0x178>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_REGISTER_REGION);
    9601592c:	52810073 	mov	w19, #0x803                 	// #2051
		TEGRABL_SET_ERROR_STRING(error, "%d", "user dev", (uint32_t)sizeof(struct tegrabl_bdev));
    96015930:	52810062 	mov	w2, #0x803                 	// #2051
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, TEGRABL_SATA_REGISTER_REGION);
    96015934:	72a20213 	movk	w19, #0x1010, lsl #16
		TEGRABL_SET_ERROR_STRING(error, "%d", "user dev", (uint32_t)sizeof(struct tegrabl_bdev));
    96015938:	52801105 	mov	w5, #0x88                  	// #136
    9601593c:	d0000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96015940:	b0000143 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96015944:	9114f084 	add	x4, x4, #0x53c
    96015948:	9102f463 	add	x3, x3, #0xbd
    9601594c:	72a20202 	movk	w2, #0x1010, lsl #16
    96015950:	52800041 	mov	w1, #0x2                   	// #2
    96015954:	52800020 	mov	w0, #0x1                   	// #1
    96015958:	9400226a 	bl	9601e300 <tegrabl_error_print>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_REGISTER_FAILED, "regions", "context");
    9601595c:	52800602 	mov	w2, #0x30                  	// #48
    96015960:	d0000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96015964:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    96015968:	9114a884 	add	x4, x4, #0x52a
    9601596c:	910bd863 	add	x3, x3, #0x2f6
    96015970:	72a00202 	movk	w2, #0x10, lsl #16
    96015974:	52800041 	mov	w1, #0x2                   	// #2
    96015978:	52800000 	mov	w0, #0x0                   	// #0
    9601597c:	94002261 	bl	9601e300 <tegrabl_error_print>
		goto fail;
    96015980:	17ffffbe 	b	96015878 <tegrabl_sata_bdev_open+0x6c>
	device_id = TEGRABL_STORAGE_SATA << 16 | context->instance;
    96015984:	39400281 	ldrb	w1, [x20]
	error = tegrabl_blockdev_initialize_bdev(user_dev, device_id, block_size_log2, block_count);
    96015988:	2a1303e2 	mov	w2, w19
    9601598c:	2a1803e3 	mov	w3, w24
    96015990:	320e0021 	orr	w1, w1, #0x40000
    96015994:	94001a2d 	bl	9601c248 <tegrabl_blockdev_initialize_bdev>
    96015998:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601599c:	34000160 	cbz	w0, 960159c8 <tegrabl_sata_bdev_open+0x1bc>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_INIT_FAILED, "blockdev bdev");
    960159a0:	52800242 	mov	w2, #0x12                  	// #18
    960159a4:	d0000143 	adrp	x3, 9603f000 <device_info_list+0x6dc>
    960159a8:	72a00202 	movk	w2, #0x10, lsl #16
    960159ac:	91151463 	add	x3, x3, #0x545
    960159b0:	52800041 	mov	w1, #0x2                   	// #2
    960159b4:	52800000 	mov	w0, #0x0                   	// #0
    960159b8:	94002252 	bl	9601e300 <tegrabl_error_print>
    960159bc:	12005e73 	and	w19, w19, #0xffffff
    960159c0:	32040273 	orr	w19, w19, #0x10000000
    960159c4:	17ffffe6 	b	9601595c <tegrabl_sata_bdev_open+0x150>
	user_dev->buf_align_size = TEGRABL_SATA_BUF_ALIGN_SIZE;
    960159c8:	52800080 	mov	w0, #0x4                   	// #4
    960159cc:	b9002ea0 	str	w0, [x21, #44]
	user_dev->read_block = tegrabl_sata_bdev_read_block;
    960159d0:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960159d4:	9119c000 	add	x0, x0, #0x670
    960159d8:	f90026a0 	str	x0, [x21, #72]
	user_dev->write_block = tegrabl_sata_bdev_write_block;
    960159dc:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960159e0:	91135000 	add	x0, x0, #0x4d4
    960159e4:	f9002aa0 	str	x0, [x21, #80]
	user_dev->erase = tegrabl_sata_bdev_erase;
    960159e8:	f0ffffe0 	adrp	x0, 96014000 <tegrabl_sata_start_command+0xc0>
    960159ec:	913ef000 	add	x0, x0, #0xfbc
    960159f0:	f90036a0 	str	x0, [x21, #104]
	user_dev->close = tegrabl_sata_bdev_close;
    960159f4:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960159f8:	91120000 	add	x0, x0, #0x480
    960159fc:	f90042a0 	str	x0, [x21, #128]
	user_dev->ioctl = tegrabl_sata_bdev_ioctl;
    96015a00:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    96015a04:	910ea000 	add	x0, x0, #0x3a8
    96015a08:	f9003ea0 	str	x0, [x21, #120]
	user_dev->xfer = tegrabl_sata_bdev_xfer;
    96015a0c:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    96015a10:	9107a000 	add	x0, x0, #0x1e8
	user_dev->priv_data = (void *)context;
    96015a14:	f9001ab4 	str	x20, [x21, #48]
	user_dev->xfer = tegrabl_sata_bdev_xfer;
    96015a18:	f9002ea0 	str	x0, [x21, #88]
	user_dev->xfer_wait = tegrabl_sata_bdev_xfer_wait;
    96015a1c:	f0ffffe0 	adrp	x0, 96014000 <tegrabl_sata_start_command+0xc0>
    96015a20:	913fe000 	add	x0, x0, #0xff8
    96015a24:	f90032a0 	str	x0, [x21, #96]
	error = tegrabl_blockdev_register_device(user_dev);
    96015a28:	aa1503e0 	mov	x0, x21
    96015a2c:	94001a2b 	bl	9601c2d8 <tegrabl_blockdev_register_device>
    96015a30:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96015a34:	340001c0 	cbz	w0, 96015a6c <tegrabl_sata_bdev_open+0x260>
		TEGRABL_PRINT_ERROR_STRING(TEGRABL_ERR_REGISTER_FAILED, "instance %d", "blockdev", context->instance);
    96015a38:	39400285 	ldrb	w5, [x20]
    96015a3c:	52800602 	mov	w2, #0x30                  	// #48
    96015a40:	d0000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96015a44:	b0000143 	adrp	x3, 9603e000 <tca9539_chips+0x378>
    96015a48:	91154c84 	add	x4, x4, #0x553
    96015a4c:	9108f863 	add	x3, x3, #0x23e
    96015a50:	72a00202 	movk	w2, #0x10, lsl #16
    96015a54:	52800041 	mov	w1, #0x2                   	// #2
    96015a58:	52800000 	mov	w0, #0x0                   	// #0
    96015a5c:	94002229 	bl	9601e300 <tegrabl_error_print>
    96015a60:	17ffffd7 	b	960159bc <tegrabl_sata_bdev_open+0x1b0>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96015a64:	52800013 	mov	w19, #0x0                   	// #0
	return error;
    96015a68:	17ffff8c 	b	96015898 <tegrabl_sata_bdev_open+0x8c>
	init_done = true;
    96015a6c:	52800020 	mov	w0, #0x1                   	// #1
    96015a70:	392912c0 	strb	w0, [x22, #2628]
    96015a74:	17ffff89 	b	96015898 <tegrabl_sata_bdev_open+0x8c>

0000000096015a78 <sdmmc_bdev_ioctl>:
#else
	TEGRABL_UNUSED(args);
	TEGRABL_UNUSED(dev);
#endif

	switch (ioctl) {
    96015a78:	7100103f 	cmp	w1, #0x4
    96015a7c:	54000120 	b.eq	96015aa0 <sdmmc_bdev_ioctl+0x28>  // b.none
    96015a80:	7100203f 	cmp	w1, #0x8
    96015a84:	54000080 	b.eq	96015a94 <sdmmc_bdev_ioctl+0x1c>  // b.none
					(struct tegrabl_sdmmc *)priv_data->context);
		break;
#endif
	default:
		pr_debug("Unknown ioctl %"PRIu32"\n", ioctl);
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 5);
    96015a88:	5280a020 	mov	w0, #0x501                 	// #1281
    96015a8c:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
		break;
	}

	return error;
}
    96015a90:	d65f03c0 	ret
		error = sdmmc_send_status((struct tegrabl_sdmmc *)priv_data->context);
    96015a94:	f9401800 	ldr	x0, [x0, #48]
    96015a98:	f9400400 	ldr	x0, [x0, #8]
    96015a9c:	1400060c 	b	960172cc <sdmmc_send_status>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96015aa0:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    96015aa4:	17fffffb 	b	96015a90 <sdmmc_bdev_ioctl+0x18>

0000000096015aa8 <sdmmc_bdev_read_block>:

tegrabl_error_t sdmmc_bdev_read_block(tegrabl_bdev_t *dev, void *buf,
	bnum_t block, bnum_t count)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	sdmmc_priv_data_t *priv_data = (sdmmc_priv_data_t *)dev->priv_data;
    96015aa8:	f9401804 	ldr	x4, [x0, #48]
	/* Please note it is the responsibility of the block device layer */
	/* to validate block & count. */
	pr_trace("StartBlock= %d NumofBlock = %d\n", block, count);

	/* Call sdmmc_read with the given arguments. */
	error = sdmmc_io(dev, buf, block, count, 0,
    96015aac:	52800007 	mov	w7, #0x0                   	// #0
    96015ab0:	b9400086 	ldr	w6, [x4]
    96015ab4:	f9400485 	ldr	x5, [x4, #8]
    96015ab8:	52800004 	mov	w4, #0x0                   	// #0
    96015abc:	14000509 	b	96016ee0 <sdmmc_io>

0000000096015ac0 <sdmmc_bdev_write_block>:
#if !defined(CONFIG_DISABLE_EMMC_BLOCK_WRITE)
tegrabl_error_t sdmmc_bdev_write_block(tegrabl_bdev_t *dev,
	const void *buf, bnum_t block, bnum_t count)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	sdmmc_priv_data_t *priv_data = (sdmmc_priv_data_t *)dev->priv_data;
    96015ac0:	f9401804 	ldr	x4, [x0, #48]

	/* Please note it is the responsibility of the block device layer to */
	/* validate block & count. */

	/* Call sdmmc_write with the given arguments. */
	error = sdmmc_io(dev, (void *)buf, block, count, 1,
    96015ac4:	52800007 	mov	w7, #0x0                   	// #0
    96015ac8:	b9400086 	ldr	w6, [x4]
    96015acc:	f9400485 	ldr	x5, [x4, #8]
    96015ad0:	52800024 	mov	w4, #0x1                   	// #1
    96015ad4:	14000503 	b	96016ee0 <sdmmc_io>

0000000096015ad8 <sdmmc_bdev_xfer>:
	return sdmmc_xfer_wait(xfer, timeout, status);
}

tegrabl_error_t sdmmc_bdev_xfer(struct tegrabl_blockdev_xfer_info *xfer)
{
	tegrabl_bdev_t *dev = xfer->dev;
    96015ad8:	f9400008 	ldr	x8, [x0]
	sdmmc_priv_data_t *priv_data = (sdmmc_priv_data_t *)dev->priv_data;
	struct tegrabl_sdmmc *hsdmmc = (struct tegrabl_sdmmc *)priv_data->context;

	return sdmmc_io(dev, (void *)xfer->buf, xfer->start_block, xfer->block_count,
    96015adc:	52800027 	mov	w7, #0x1                   	// #1
    96015ae0:	39402002 	ldrb	w2, [x0, #8]
	sdmmc_priv_data_t *priv_data = (sdmmc_priv_data_t *)dev->priv_data;
    96015ae4:	f9401901 	ldr	x1, [x8, #48]
	return sdmmc_io(dev, (void *)xfer->buf, xfer->start_block, xfer->block_count,
    96015ae8:	7100045f 	cmp	w2, #0x1
    96015aec:	29430c02 	ldp	w2, w3, [x0, #24]
    96015af0:	1a9f17e4 	cset	w4, eq  // eq = none
    96015af4:	b9400026 	ldr	w6, [x1]
    96015af8:	f9400425 	ldr	x5, [x1, #8]
    96015afc:	f9400801 	ldr	x1, [x0, #16]
    96015b00:	aa0803e0 	mov	x0, x8
    96015b04:	140004f7 	b	96016ee0 <sdmmc_io>

0000000096015b08 <sdmmc_bdev_xfer_wait>:
	return sdmmc_xfer_wait(xfer, timeout, status);
    96015b08:	1400031c 	b	96016778 <sdmmc_xfer_wait>

0000000096015b0c <sdmmc_bdev_erase>:

tegrabl_error_t sdmmc_bdev_erase(tegrabl_bdev_t *dev, bnum_t block,
	bnum_t count, bool is_secure)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	sdmmc_priv_data_t *priv_data = (sdmmc_priv_data_t *)dev->priv_data;
    96015b0c:	f9401804 	ldr	x4, [x0, #48]
	/* Please note it is the responsibility of the block device layer */
	/* to validate offset & length. */
	/* This implementation interprets length & offset in terms of sectors. */

	/* Call erase functionality implemented in protocol layer. */
	hsdmmc = priv_data->context;
    96015b10:	f9400483 	ldr	x3, [x4, #8]
    96015b14:	b9400084 	ldr	w4, [x4]

#if defined(CONFIG_ENABLE_SDCARD)
	if (hsdmmc->device_type == DEVICE_TYPE_SD)
    96015b18:	b9408465 	ldr	w5, [x3, #132]
    96015b1c:	710004bf 	cmp	w5, #0x1
    96015b20:	54000041 	b.ne	96015b28 <sdmmc_bdev_erase+0x1c>  // b.any
		error = sd_erase(dev, block, count, hsdmmc, priv_data->device);
    96015b24:	14000b73 	b	960188f0 <sd_erase>
	else
#endif
		error = sdmmc_erase(dev, block, count, hsdmmc, priv_data->device);
    96015b28:	1400055d 	b	9601709c <sdmmc_erase>

0000000096015b2c <sdmmc_bdev_close>:
tegrabl_error_t sdmmc_bdev_close(tegrabl_bdev_t *dev)
{
	sdmmc_priv_data_t *priv_data;
	struct tegrabl_sdmmc *hsdmmc;

	if (dev == NULL) {
    96015b2c:	b4000320 	cbz	x0, 96015b90 <sdmmc_bdev_close+0x64>
{
    96015b30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96015b34:	910003fd 	mov	x29, sp
    96015b38:	f9000bf3 	str	x19, [sp, #16]
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 46);
	}

	if (dev->priv_data == NULL) {
    96015b3c:	f9401813 	ldr	x19, [x0, #48]
    96015b40:	b40002f3 	cbz	x19, 96015b9c <sdmmc_bdev_close+0x70>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 47);
	}

	priv_data = (sdmmc_priv_data_t *)dev->priv_data;
	hsdmmc = (struct tegrabl_sdmmc *)priv_data->context;
    96015b44:	f9400661 	ldr	x1, [x19, #8]

	/* Close allocated context for sdmmc. */
	if ((priv_data != NULL) && (hsdmmc->count_devices == 1U)) {
    96015b48:	39400420 	ldrb	w0, [x1, #1]
    96015b4c:	7100041f 	cmp	w0, #0x1
    96015b50:	54000181 	b.ne	96015b80 <sdmmc_bdev_close+0x54>  // b.any
		contexts[hsdmmc->controller_id] = NULL;
    96015b54:	b9405823 	ldr	w3, [x1, #88]
    96015b58:	b00002c2 	adrp	x2, 9606e000 <__bss_start>
    96015b5c:	91292042 	add	x2, x2, #0xa48
    96015b60:	f823785f 	str	xzr, [x2, x3, lsl #3]
		tegrabl_dealloc(TEGRABL_HEAP_DMA, hsdmmc);
    96015b64:	940043d1 	bl	96026aa8 <tegrabl_dealloc>
		hsdmmc->count_devices--;
	} else {
		/* No Action Required */
	}
	if (priv_data != NULL) {
		tegrabl_free(priv_data);
    96015b68:	aa1303e0 	mov	x0, x19
    96015b6c:	940043d3 	bl	96026ab8 <tegrabl_free>
	}

	return TEGRABL_NO_ERROR;
    96015b70:	52800000 	mov	w0, #0x0                   	// #0
}
    96015b74:	f9400bf3 	ldr	x19, [sp, #16]
    96015b78:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96015b7c:	d65f03c0 	ret
	} else if ((priv_data != NULL) && (hsdmmc->count_devices != 0U)) {
    96015b80:	34ffff40 	cbz	w0, 96015b68 <sdmmc_bdev_close+0x3c>
		hsdmmc->count_devices--;
    96015b84:	51000400 	sub	w0, w0, #0x1
    96015b88:	39000420 	strb	w0, [x1, #1]
    96015b8c:	17fffff7 	b	96015b68 <sdmmc_bdev_close+0x3c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 46);
    96015b90:	5285c040 	mov	w0, #0x2e02                	// #11778
    96015b94:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    96015b98:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 47);
    96015b9c:	5285e040 	mov	w0, #0x2f02                	// #12034
    96015ba0:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
    96015ba4:	17fffff4 	b	96015b74 <sdmmc_bdev_close+0x48>

0000000096015ba8 <sdmmc_bdev_open>:
{
    96015ba8:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
    96015bac:	910003fd 	mov	x29, sp
    96015bb0:	a90153f3 	stp	x19, x20, [sp, #16]
    96015bb4:	a9025bf5 	stp	x21, x22, [sp, #32]
    96015bb8:	a90363f7 	stp	x23, x24, [sp, #48]
    96015bbc:	a9046bf9 	stp	x25, x26, [sp, #64]
    96015bc0:	a90573fb 	stp	x27, x28, [sp, #80]
	if (params == NULL) {
    96015bc4:	b4001781 	cbz	x1, 96015eb4 <sdmmc_bdev_open+0x30c>
    96015bc8:	2a0003f5 	mov	w21, w0
	if (instance >= MAX_SDMMC_INSTANCES) {
    96015bcc:	71000c1f 	cmp	w0, #0x3
    96015bd0:	540017a8 	b.hi	96015ec4 <sdmmc_bdev_open+0x31c>  // b.pmore
	hsdmmc = contexts[instance];
    96015bd4:	b00002c0 	adrp	x0, 9606e000 <__bss_start>
    96015bd8:	2a1503e2 	mov	w2, w21
    96015bdc:	aa0103f3 	mov	x19, x1
    96015be0:	91292001 	add	x1, x0, #0xa48
    96015be4:	a90683a2 	stp	x2, x0, [x29, #104]
    96015be8:	f8627836 	ldr	x22, [x1, x2, lsl #3]
	if (hsdmmc != NULL) {
    96015bec:	b4000476 	cbz	x22, 96015c78 <sdmmc_bdev_open+0xd0>
		if (hsdmmc->clk_src == params->clk_src &&
    96015bf0:	b9400260 	ldr	w0, [x19]
    96015bf4:	b9428ec1 	ldr	w1, [x22, #652]
    96015bf8:	6b00003f 	cmp	w1, w0
    96015bfc:	54001501 	b.ne	96015e9c <sdmmc_bdev_open+0x2f4>  // b.any
    96015c00:	b9400a60 	ldr	w0, [x19, #8]
    96015c04:	b94292c1 	ldr	w1, [x22, #656]
    96015c08:	6b00003f 	cmp	w1, w0
    96015c0c:	54001481 	b.ne	96015e9c <sdmmc_bdev_open+0x2f4>  // b.any
			hsdmmc->best_mode == params->best_mode &&
    96015c10:	b9400e60 	ldr	w0, [x19, #12]
    96015c14:	b9429ac1 	ldr	w1, [x22, #664]
    96015c18:	6b00003f 	cmp	w1, w0
    96015c1c:	54001401 	b.ne	96015e9c <sdmmc_bdev_open+0x2f4>  // b.any
			hsdmmc->tap_value == params->tap_value &&
    96015c20:	b9401260 	ldr	w0, [x19, #16]
    96015c24:	b9429ec1 	ldr	w1, [x22, #668]
    96015c28:	6b00003f 	cmp	w1, w0
    96015c2c:	54001381 	b.ne	96015e9c <sdmmc_bdev_open+0x2f4>  // b.any
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96015c30:	52800013 	mov	w19, #0x0                   	// #0
			pr_info("sdmmc bdev is already initialized\n");
    96015c34:	d0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96015c38:	91179000 	add	x0, x0, #0x5e4
    96015c3c:	9400328d 	bl	96022670 <tegrabl_printf>
	if ((error != TEGRABL_NO_ERROR) && (hsdmmc != NULL)) {
    96015c40:	7100027f 	cmp	w19, #0x0
    96015c44:	fa401ac4 	ccmp	x22, #0x0, #0x4, ne  // ne = any
    96015c48:	54000080 	b.eq	96015c58 <sdmmc_bdev_open+0xb0>  // b.none
		tegrabl_dealloc(TEGRABL_HEAP_DMA, hsdmmc);
    96015c4c:	aa1603e1 	mov	x1, x22
    96015c50:	52800020 	mov	w0, #0x1                   	// #1
    96015c54:	94004395 	bl	96026aa8 <tegrabl_dealloc>
}
    96015c58:	2a1303e0 	mov	w0, w19
    96015c5c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96015c60:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96015c64:	a94363f7 	ldp	x23, x24, [sp, #48]
    96015c68:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96015c6c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96015c70:	a8c97bfd 	ldp	x29, x30, [sp], #144
    96015c74:	d65f03c0 	ret
	if (params->is_skip_init) {
    96015c78:	39407a74 	ldrb	w20, [x19, #30]
		hsdmmc = tegrabl_alloc(TEGRABL_HEAP_DMA, sizeof(struct tegrabl_sdmmc));
    96015c7c:	d2805901 	mov	x1, #0x2c8                 	// #712
    96015c80:	52800020 	mov	w0, #0x1                   	// #1
    96015c84:	94004380 	bl	96026a84 <tegrabl_alloc>
    96015c88:	aa0003f6 	mov	x22, x0
		if (hsdmmc == NULL) {
    96015c8c:	b4001220 	cbz	x0, 96015ed0 <sdmmc_bdev_open+0x328>
		memset(hsdmmc, 0x0, sizeof(struct tegrabl_sdmmc));
    96015c90:	d2805902 	mov	x2, #0x2c8                 	// #712
    96015c94:	52800001 	mov	w1, #0x0                   	// #0
    96015c98:	94005064 	bl	96029e28 <memset>
	hsdmmc->clk_src = params->clk_src;
    96015c9c:	b9400260 	ldr	w0, [x19]
	error = sdmmc_init(hsdmmc->controller_id, hsdmmc, flag);
    96015ca0:	2a1403e2 	mov	w2, w20
	hsdmmc->clk_src = params->clk_src;
    96015ca4:	b9028ec0 	str	w0, [x22, #652]
	error = sdmmc_init(hsdmmc->controller_id, hsdmmc, flag);
    96015ca8:	aa1603e1 	mov	x1, x22
	hsdmmc->best_mode = params->best_mode;
    96015cac:	b9400a60 	ldr	w0, [x19, #8]
    96015cb0:	b90292c0 	str	w0, [x22, #656]
	hsdmmc->tap_value = params->tap_value;
    96015cb4:	b9400e60 	ldr	w0, [x19, #12]
    96015cb8:	b9029ac0 	str	w0, [x22, #664]
	hsdmmc->trim_value = params->trim_value;
    96015cbc:	b9401260 	ldr	w0, [x19, #16]
	hsdmmc->controller_id = instance;
    96015cc0:	b9005ad5 	str	w21, [x22, #88]
	hsdmmc->trim_value = params->trim_value;
    96015cc4:	b9029ec0 	str	w0, [x22, #668]
	error = sdmmc_init(hsdmmc->controller_id, hsdmmc, flag);
    96015cc8:	2a1503e0 	mov	w0, w21
    96015ccc:	94000364 	bl	96016a5c <sdmmc_init>
    96015cd0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96015cd4:	35fffb60 	cbnz	w0, 96015c40 <sdmmc_bdev_open+0x98>
	if (contexts[hsdmmc->controller_id] == NULL) {
    96015cd8:	f9403ba0 	ldr	x0, [x29, #112]
    96015cdc:	b9405ac1 	ldr	w1, [x22, #88]
    96015ce0:	91292000 	add	x0, x0, #0xa48
    96015ce4:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    96015ce8:	b5000de0 	cbnz	x0, 96015ea4 <sdmmc_bdev_open+0x2fc>
	hsdmmc->count_devices = 1;
    96015cec:	52800020 	mov	w0, #0x1                   	// #1
    96015cf0:	390006c0 	strb	w0, [x22, #1]
	boot_priv_data = tegrabl_calloc(1, sizeof(sdmmc_priv_data_t));
    96015cf4:	d2800201 	mov	x1, #0x10                  	// #16
    96015cf8:	d2800020 	mov	x0, #0x1                   	// #1
    96015cfc:	94004372 	bl	96026ac4 <tegrabl_calloc>
    96015d00:	aa0003f5 	mov	x21, x0
	if (boot_priv_data == NULL) {
    96015d04:	b4000fc0 	cbz	x0, 96015efc <sdmmc_bdev_open+0x354>
	device_id = TEGRABL_STORAGE_SDMMC_BOOT << 16 | hsdmmc->controller_id;
    96015d08:	b9405ad4 	ldr	w20, [x22, #88]
	boot_priv_data->device = DEVICE_BOOT;
    96015d0c:	52800020 	mov	w0, #0x1                   	// #1
    96015d10:	b90002a0 	str	w0, [x21]
	boot_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96015d14:	d2801101 	mov	x1, #0x88                  	// #136
	boot_priv_data->context = (void *)hsdmmc;
    96015d18:	f90006b6 	str	x22, [x21, #8]
	boot_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96015d1c:	d2800020 	mov	x0, #0x1                   	// #1
    96015d20:	94004369 	bl	96026ac4 <tegrabl_calloc>
    96015d24:	aa0003f7 	mov	x23, x0
	if (boot_dev == NULL) {
    96015d28:	b4000ee0 	cbz	x0, 96015f04 <sdmmc_bdev_open+0x35c>
	error = tegrabl_blockdev_initialize_bdev(boot_dev, device_id,
    96015d2c:	b94042c2 	ldr	w2, [x22, #64]
    96015d30:	2a1403e1 	mov	w1, w20
    96015d34:	b94032c3 	ldr	w3, [x22, #48]
    96015d38:	531f7863 	lsl	w3, w3, #1
    96015d3c:	94001943 	bl	9601c248 <tegrabl_blockdev_initialize_bdev>
    96015d40:	2a0003e1 	mov	w1, w0
	if (error != TEGRABL_NO_ERROR) {
    96015d44:	35000ca0 	cbnz	w0, 96015ed8 <sdmmc_bdev_open+0x330>
	boot_dev->buf_align_size = TEGRABL_SDMMC_BUF_ALIGN_SIZE;
    96015d48:	52800080 	mov	w0, #0x4                   	// #4
    96015d4c:	b9002ee0 	str	w0, [x23, #44]
	boot_dev->xfer_wait = sdmmc_bdev_xfer_wait;
    96015d50:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    96015d54:	912c2000 	add	x0, x0, #0xb08
    96015d58:	f90032e0 	str	x0, [x23, #96]
	boot_dev->read_block = sdmmc_bdev_read_block;
    96015d5c:	9000001b 	adrp	x27, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
	boot_dev->xfer_wait = sdmmc_bdev_xfer_wait;
    96015d60:	f90047a0 	str	x0, [x29, #136]
	boot_dev->close = sdmmc_bdev_close;
    96015d64:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    96015d68:	912cb000 	add	x0, x0, #0xb2c
	boot_dev->read_block = sdmmc_bdev_read_block;
    96015d6c:	912aa37b 	add	x27, x27, #0xaa8
	boot_dev->close = sdmmc_bdev_close;
    96015d70:	f90042e0 	str	x0, [x23, #128]
	boot_dev->write_block = sdmmc_bdev_write_block;
    96015d74:	9000001a 	adrp	x26, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
	boot_dev->close = sdmmc_bdev_close;
    96015d78:	f90043a0 	str	x0, [x29, #128]
	boot_dev->write_block = sdmmc_bdev_write_block;
    96015d7c:	912b035a 	add	x26, x26, #0xac0
	boot_dev->erase = sdmmc_bdev_erase;
    96015d80:	90000019 	adrp	x25, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
	boot_dev->xfer = sdmmc_bdev_xfer;
    96015d84:	90000018 	adrp	x24, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
	boot_dev->erase = sdmmc_bdev_erase;
    96015d88:	912c3339 	add	x25, x25, #0xb0c
	boot_dev->xfer = sdmmc_bdev_xfer;
    96015d8c:	912b6318 	add	x24, x24, #0xad8
	boot_dev->priv_data = (void *)boot_priv_data;
    96015d90:	f9001af5 	str	x21, [x23, #48]
	boot_dev->ioctl = sdmmc_bdev_ioctl;
    96015d94:	90000000 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
	boot_dev->write_block = sdmmc_bdev_write_block;
    96015d98:	a904eafb 	stp	x27, x26, [x23, #72]
	boot_dev->ioctl = sdmmc_bdev_ioctl;
    96015d9c:	9129e000 	add	x0, x0, #0xa78
	boot_dev->xfer = sdmmc_bdev_xfer;
    96015da0:	f9002ef8 	str	x24, [x23, #88]
	boot_dev->erase = sdmmc_bdev_erase;
    96015da4:	f90036f9 	str	x25, [x23, #104]
	boot_dev->ioctl = sdmmc_bdev_ioctl;
    96015da8:	f9003ee0 	str	x0, [x23, #120]
    96015dac:	f9003fa0 	str	x0, [x29, #120]
	error = tegrabl_blockdev_register_device(boot_dev);
    96015db0:	aa1703e0 	mov	x0, x23
    96015db4:	94001949 	bl	9601c2d8 <tegrabl_blockdev_register_device>
    96015db8:	2a0003e1 	mov	w1, w0
	if (error != TEGRABL_NO_ERROR) {
    96015dbc:	350008e0 	cbnz	w0, 96015ed8 <sdmmc_bdev_open+0x330>
	user_priv_data = tegrabl_calloc(1, sizeof(sdmmc_priv_data_t));
    96015dc0:	d2800201 	mov	x1, #0x10                  	// #16
    96015dc4:	d2800020 	mov	x0, #0x1                   	// #1
    96015dc8:	9400433f 	bl	96026ac4 <tegrabl_calloc>
    96015dcc:	aa0003f4 	mov	x20, x0
	if (user_priv_data == NULL) {
    96015dd0:	b40008a0 	cbz	x0, 96015ee4 <sdmmc_bdev_open+0x33c>
	hsdmmc->count_devices += 1U;
    96015dd4:	394006c0 	ldrb	w0, [x22, #1]
	user_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96015dd8:	d2801101 	mov	x1, #0x88                  	// #136
	device_id = TEGRABL_STORAGE_SDMMC_USER << 16 | hsdmmc->controller_id;
    96015ddc:	b9405ac7 	ldr	w7, [x22, #88]
	hsdmmc->count_devices += 1U;
    96015de0:	11000400 	add	w0, w0, #0x1
    96015de4:	390006c0 	strb	w0, [x22, #1]
	user_priv_data->context = (void *)hsdmmc;
    96015de8:	f9000696 	str	x22, [x20, #8]
	user_priv_data->device = DEVICE_USER;
    96015dec:	52800040 	mov	w0, #0x2                   	// #2
    96015df0:	b9000280 	str	w0, [x20]
	user_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96015df4:	d2800020 	mov	x0, #0x1                   	// #1
	device_id = TEGRABL_STORAGE_SDMMC_USER << 16 | hsdmmc->controller_id;
    96015df8:	b90067a7 	str	w7, [x29, #100]
	user_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96015dfc:	94004332 	bl	96026ac4 <tegrabl_calloc>
    96015e00:	aa0003fc 	mov	x28, x0
	if (user_dev == NULL) {
    96015e04:	b4000760 	cbz	x0, 96015ef0 <sdmmc_bdev_open+0x348>
	error = tegrabl_blockdev_initialize_bdev(user_dev, device_id,
    96015e08:	b94067a7 	ldr	w7, [x29, #100]
    96015e0c:	b9403ac3 	ldr	w3, [x22, #56]
    96015e10:	b94042c2 	ldr	w2, [x22, #64]
    96015e14:	321000e1 	orr	w1, w7, #0x10000
    96015e18:	9400190c 	bl	9601c248 <tegrabl_blockdev_initialize_bdev>
    96015e1c:	2a0003e1 	mov	w1, w0
	if (error != TEGRABL_NO_ERROR) {
    96015e20:	35000220 	cbnz	w0, 96015e64 <sdmmc_bdev_open+0x2bc>
	user_dev->buf_align_size = TEGRABL_SDMMC_BUF_ALIGN_SIZE;
    96015e24:	52800080 	mov	w0, #0x4                   	// #4
    96015e28:	b9002f80 	str	w0, [x28, #44]
	user_dev->xfer_wait = sdmmc_bdev_xfer_wait;
    96015e2c:	f94047a0 	ldr	x0, [x29, #136]
    96015e30:	f9003380 	str	x0, [x28, #96]
	user_dev->close = sdmmc_bdev_close;
    96015e34:	f94043a0 	ldr	x0, [x29, #128]
    96015e38:	f9004380 	str	x0, [x28, #128]
	user_dev->ioctl = sdmmc_bdev_ioctl;
    96015e3c:	f9403fa0 	ldr	x0, [x29, #120]
	user_dev->priv_data = (void *)user_priv_data;
    96015e40:	f9001b94 	str	x20, [x28, #48]
	user_dev->write_block = sdmmc_bdev_write_block;
    96015e44:	a904eb9b 	stp	x27, x26, [x28, #72]
	user_dev->xfer = sdmmc_bdev_xfer;
    96015e48:	f9002f98 	str	x24, [x28, #88]
	user_dev->erase = sdmmc_bdev_erase;
    96015e4c:	f9003799 	str	x25, [x28, #104]
	user_dev->ioctl = sdmmc_bdev_ioctl;
    96015e50:	f9003f80 	str	x0, [x28, #120]
	error = tegrabl_blockdev_register_device(user_dev);
    96015e54:	aa1c03e0 	mov	x0, x28
    96015e58:	94001920 	bl	9601c2d8 <tegrabl_blockdev_register_device>
    96015e5c:	2a0003e1 	mov	w1, w0
	if (error != TEGRABL_NO_ERROR) {
    96015e60:	34000220 	cbz	w0, 96015ea4 <sdmmc_bdev_open+0x2fc>
    96015e64:	b9008ba1 	str	w1, [x29, #136]
			tegrabl_free(boot_dev);
    96015e68:	aa1703e0 	mov	x0, x23
    96015e6c:	94004313 	bl	96026ab8 <tegrabl_free>
    96015e70:	b9408ba1 	ldr	w1, [x29, #136]
    96015e74:	2a0103f3 	mov	w19, w1
			tegrabl_free(boot_priv_data);
    96015e78:	aa1503e0 	mov	x0, x21
    96015e7c:	9400430f 	bl	96026ab8 <tegrabl_free>
		if (user_dev != NULL) {
    96015e80:	b400007c 	cbz	x28, 96015e8c <sdmmc_bdev_open+0x2e4>
			tegrabl_free(user_dev);
    96015e84:	aa1c03e0 	mov	x0, x28
    96015e88:	9400430c 	bl	96026ab8 <tegrabl_free>
		if (user_priv_data != NULL) {
    96015e8c:	b4ffedb4 	cbz	x20, 96015c40 <sdmmc_bdev_open+0x98>
			tegrabl_free(user_priv_data);
    96015e90:	aa1403e0 	mov	x0, x20
    96015e94:	94004309 	bl	96026ab8 <tegrabl_free>
    96015e98:	17ffff6a 	b	96015c40 <sdmmc_bdev_open+0x98>
			flag = SKIP_INIT_UPDATE_CONFIG;
    96015e9c:	52800054 	mov	w20, #0x2                   	// #2
    96015ea0:	17ffff7f 	b	96015c9c <sdmmc_bdev_open+0xf4>
	contexts[instance] = hsdmmc;
    96015ea4:	a94683a1 	ldp	x1, x0, [x29, #104]
    96015ea8:	91292000 	add	x0, x0, #0xa48
    96015eac:	f8217816 	str	x22, [x0, x1, lsl #3]
    96015eb0:	17ffff64 	b	96015c40 <sdmmc_bdev_open+0x98>
	struct tegrabl_sdmmc *hsdmmc = NULL;
    96015eb4:	d2800016 	mov	x22, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96015eb8:	52800053 	mov	w19, #0x2                   	// #2
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 6);
    96015ebc:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
    96015ec0:	17ffff60 	b	96015c40 <sdmmc_bdev_open+0x98>
	struct tegrabl_sdmmc *hsdmmc = NULL;
    96015ec4:	d2800016 	mov	x22, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 6);
    96015ec8:	5280c033 	mov	w19, #0x601                 	// #1537
    96015ecc:	17fffffc 	b	96015ebc <sdmmc_bdev_open+0x314>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 6);
    96015ed0:	5280c073 	mov	w19, #0x603                 	// #1539
    96015ed4:	17fffffa 	b	96015ebc <sdmmc_bdev_open+0x314>
	sdmmc_priv_data_t *user_priv_data = NULL;
    96015ed8:	d2800014 	mov	x20, #0x0                   	// #0
	tegrabl_bdev_t *user_dev = NULL;
    96015edc:	d280001c 	mov	x28, #0x0                   	// #0
    96015ee0:	17ffffe1 	b	96015e64 <sdmmc_bdev_open+0x2bc>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 2);
    96015ee4:	52804061 	mov	w1, #0x203                 	// #515
    96015ee8:	72a1e1e1 	movk	w1, #0xf0f, lsl #16
    96015eec:	17fffffc 	b	96015edc <sdmmc_bdev_open+0x334>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 3);
    96015ef0:	52806061 	mov	w1, #0x303                 	// #771
    96015ef4:	72a1e1e1 	movk	w1, #0xf0f, lsl #16
    96015ef8:	17ffffdb 	b	96015e64 <sdmmc_bdev_open+0x2bc>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96015efc:	52800073 	mov	w19, #0x3                   	// #3
    96015f00:	17ffffef 	b	96015ebc <sdmmc_bdev_open+0x314>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96015f04:	52802073 	mov	w19, #0x103                 	// #259
		if (boot_priv_data != NULL) {
    96015f08:	d2800014 	mov	x20, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96015f0c:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
		if (boot_priv_data != NULL) {
    96015f10:	d280001c 	mov	x28, #0x0                   	// #0
    96015f14:	17ffffd9 	b	96015e78 <sdmmc_bdev_open+0x2d0>

0000000096015f18 <sdmmc_get_power_class>:
static uint32_t sdmmc_get_power_class(struct tegrabl_sdmmc *hsdmmc)
{
	uint32_t power_class;

	/* Set power class for ddr mode from getextcsd data & width supported. */
	if (hsdmmc->is_ddr_mode != 0U) {
    96015f18:	39415801 	ldrb	w1, [x0, #86]
    96015f1c:	3940d002 	ldrb	w2, [x0, #52]
    96015f20:	34000161 	cbz	w1, 96015f4c <sdmmc_get_power_class+0x34>
		power_class = (hsdmmc->is_high_voltage_range != 0U) ?
			hsdmmc->power_class_52MHz_ddr360V :
    96015f24:	34000102 	cbz	w2, 96015f44 <sdmmc_get_power_class+0x2c>
    96015f28:	b9407001 	ldr	w1, [x0, #112]
	/*
	 * In the above power class, lower 4 bits give power class requirement for
	 * for 4-bit data width and upper 4 bits give power class requirement for
	 * for 8-bit data width.
	 */
	if ((hsdmmc->data_width == DATA_WIDTH_4BIT) ||
    96015f2c:	b9400c00 	ldr	w0, [x0, #12]
    96015f30:	121d7800 	and	w0, w0, #0xfffffffb
    96015f34:	7100041f 	cmp	w0, #0x1
    96015f38:	54000221 	b.ne	96015f7c <sdmmc_get_power_class+0x64>  // b.any
		(hsdmmc->data_width == DATA_WIDTH_DDR_4BIT)) {
		power_class = (power_class >> ECSD_POWER_CLASS_4_BIT_OFFSET) &
    96015f3c:	12000c20 	and	w0, w1, #0xf
			ECSD_POWER_CLASS_MASK;
	} else { /*if (hsdmmc->data_width == Sdmmcdata_width_1Bit) */
		power_class = 0;
	}
	return power_class;
}
    96015f40:	d65f03c0 	ret
			hsdmmc->power_class_52MHz_ddr360V :
    96015f44:	b9407401 	ldr	w1, [x0, #116]
    96015f48:	17fffff9 	b	96015f2c <sdmmc_get_power_class+0x14>
    96015f4c:	39409001 	ldrb	w1, [x0, #36]
	} else if (hsdmmc->is_high_voltage_range != 0U) {
    96015f50:	340000c2 	cbz	w2, 96015f68 <sdmmc_get_power_class+0x50>
			hsdmmc->power_class_52MHz_360V :
    96015f54:	34000061 	cbz	w1, 96015f60 <sdmmc_get_power_class+0x48>
    96015f58:	b9406401 	ldr	w1, [x0, #100]
    96015f5c:	17fffff4 	b	96015f2c <sdmmc_get_power_class+0x14>
    96015f60:	b9406001 	ldr	w1, [x0, #96]
    96015f64:	17fffff2 	b	96015f2c <sdmmc_get_power_class+0x14>
			hsdmmc->power_class_52MHz_195V :
    96015f68:	34000061 	cbz	w1, 96015f74 <sdmmc_get_power_class+0x5c>
    96015f6c:	b9406c01 	ldr	w1, [x0, #108]
    96015f70:	17ffffef 	b	96015f2c <sdmmc_get_power_class+0x14>
    96015f74:	b9406801 	ldr	w1, [x0, #104]
    96015f78:	17ffffed 	b	96015f2c <sdmmc_get_power_class+0x14>
		power_class = (power_class >> ECSD_POWER_CLASS_8_BIT_OFFSET) &
    96015f7c:	d3441c21 	ubfx	x1, x1, #4, #4
    96015f80:	7100081f 	cmp	w0, #0x2
    96015f84:	1a9f0020 	csel	w0, w1, wzr, eq  // eq = none
    96015f88:	17ffffee 	b	96015f40 <sdmmc_get_power_class+0x28>

0000000096015f8c <sdmmc_clock_init>:
{
    96015f8c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96015f90:	910003fd 	mov	x29, sp
    96015f94:	a90153f3 	stp	x19, x20, [sp, #16]
	err = tegrabl_car_rst_set(TEGRABL_MODULE_SDMMC, (uint8_t)instance);
    96015f98:	12001c13 	and	w19, w0, #0xff
{
    96015f9c:	f90013f5 	str	x21, [sp, #32]
    96015fa0:	2a0103f4 	mov	w20, w1
	err = tegrabl_car_rst_set(TEGRABL_MODULE_SDMMC, (uint8_t)instance);
    96015fa4:	52800040 	mov	w0, #0x2                   	// #2
    96015fa8:	2a1303e1 	mov	w1, w19
{
    96015fac:	2a0203f5 	mov	w21, w2
	err = tegrabl_car_rst_set(TEGRABL_MODULE_SDMMC, (uint8_t)instance);
    96015fb0:	940026b4 	bl	9601fa80 <tegrabl_car_rst_set>
	if (err != TEGRABL_NO_ERROR) {
    96015fb4:	35000280 	cbnz	w0, 96016004 <sdmmc_clock_init+0x78>
	err = tegrabl_car_clk_enable(TEGRABL_MODULE_SDMMC, (uint8_t)instance, NULL);
    96015fb8:	d2800002 	mov	x2, #0x0                   	// #0
    96015fbc:	2a1303e1 	mov	w1, w19
    96015fc0:	52800040 	mov	w0, #0x2                   	// #2
    96015fc4:	94002642 	bl	9601f8cc <tegrabl_car_clk_enable>
	if (err != TEGRABL_NO_ERROR) {
    96015fc8:	350001e0 	cbnz	w0, 96016004 <sdmmc_clock_init+0x78>
	err = tegrabl_car_set_clk_src(TEGRABL_MODULE_SDMMC, (uint8_t)instance, (uint8_t)source);
    96015fcc:	12001ea2 	and	w2, w21, #0xff
    96015fd0:	2a1303e1 	mov	w1, w19
    96015fd4:	52800040 	mov	w0, #0x2                   	// #2
    96015fd8:	940025dc 	bl	9601f748 <tegrabl_car_set_clk_src>
	if (err != TEGRABL_NO_ERROR) {
    96015fdc:	35000140 	cbnz	w0, 96016004 <sdmmc_clock_init+0x78>
	err = tegrabl_car_set_clk_rate(TEGRABL_MODULE_SDMMC, (uint8_t)instance, rate, &srate);
    96015fe0:	9100f3a3 	add	x3, x29, #0x3c
    96015fe4:	2a1403e2 	mov	w2, w20
    96015fe8:	2a1303e1 	mov	w1, w19
    96015fec:	52800040 	mov	w0, #0x2                   	// #2
    96015ff0:	94002687 	bl	9601fa0c <tegrabl_car_set_clk_rate>
	if (err != TEGRABL_NO_ERROR) {
    96015ff4:	35000080 	cbnz	w0, 96016004 <sdmmc_clock_init+0x78>
	err = tegrabl_car_rst_clear(TEGRABL_MODULE_SDMMC, (uint8_t)instance);
    96015ff8:	2a1303e1 	mov	w1, w19
    96015ffc:	52800040 	mov	w0, #0x2                   	// #2
    96016000:	940026a7 	bl	9601fa9c <tegrabl_car_rst_clear>
}
    96016004:	a94153f3 	ldp	x19, x20, [sp, #16]
    96016008:	f94013f5 	ldr	x21, [sp, #32]
    9601600c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96016010:	d65f03c0 	ret

0000000096016014 <sdmmc_send_command>:
	if (resp_type >= RESP_TYPE_NUM) {
    96016014:	7100205f 	cmp	w2, #0x8
    96016018:	540006a8 	b.hi	960160ec <sdmmc_send_command+0xd8>  // b.pmore
{
    9601601c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96016020:	910003fd 	mov	x29, sp
    96016024:	a90153f3 	stp	x19, x20, [sp, #16]
    96016028:	aa0403f3 	mov	x19, x4
    9601602c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96016030:	2a0203f4 	mov	w20, w2
    96016034:	f9001bf7 	str	x23, [sp, #48]
    96016038:	12001c76 	and	w22, w3, #0xff
    9601603c:	2a0003f7 	mov	w23, w0
    96016040:	2a0103f5 	mov	w21, w1
	error = sdmmc_cmd_txr_ready(hsdmmc);
    96016044:	aa0403e0 	mov	x0, x4
    96016048:	940005d0 	bl	96017788 <sdmmc_cmd_txr_ready>
	if (error != TEGRABL_NO_ERROR) {
    9601604c:	350003e0 	cbnz	w0, 960160c8 <sdmmc_send_command+0xb4>
	if (data_cmd != 0U) {
    96016050:	35000376 	cbnz	w22, 960160bc <sdmmc_send_command+0xa8>
	error = sdmmc_prepare_cmd_reg(&cmd_reg, data_cmd, hsdmmc, index,
    96016054:	2a1403e4 	mov	w4, w20
    96016058:	2a1703e3 	mov	w3, w23
    9601605c:	aa1303e2 	mov	x2, x19
    96016060:	2a1603e1 	mov	w1, w22
    96016064:	910133a0 	add	x0, x29, #0x4c
    96016068:	9400058e 	bl	960176a0 <sdmmc_prepare_cmd_reg>
	if (error != TEGRABL_NO_ERROR) {
    9601606c:	350002e0 	cbnz	w0, 960160c8 <sdmmc_send_command+0xb4>
	error = sdmmc_try_send_command(cmd_reg, arg, data_cmd, hsdmmc);
    96016070:	b9404fa0 	ldr	w0, [x29, #76]
    96016074:	aa1303e3 	mov	x3, x19
    96016078:	2a1603e2 	mov	w2, w22
    9601607c:	2a1503e1 	mov	w1, w21
    96016080:	9400068f 	bl	96017abc <sdmmc_try_send_command>
	if (error != TEGRABL_NO_ERROR) {
    96016084:	35000220 	cbnz	w0, 960160c8 <sdmmc_send_command+0xb4>
	if (hsdmmc->device_type != DEVICE_TYPE_SD) {
    96016088:	b9408660 	ldr	w0, [x19, #132]
    9601608c:	7100041f 	cmp	w0, #0x1
    96016090:	54000261 	b.ne	960160dc <sdmmc_send_command+0xc8>  // b.any
	if (resp_type == RESP_TYPE_R1B) {
    96016094:	7100229f 	cmp	w20, #0x8
    96016098:	54000081 	b.ne	960160a8 <sdmmc_send_command+0x94>  // b.any
		error = sdmmc_data_txr_ready(hsdmmc);
    9601609c:	aa1303e0 	mov	x0, x19
    960160a0:	940005d3 	bl	960177ec <sdmmc_data_txr_ready>
		if (error != TEGRABL_NO_ERROR) {
    960160a4:	35000120 	cbnz	w0, 960160c8 <sdmmc_send_command+0xb4>
	error = sdmmc_read_response(hsdmmc, resp_type, sdmmc_response);
    960160a8:	91004262 	add	x2, x19, #0x10
    960160ac:	2a1403e1 	mov	w1, w20
    960160b0:	aa1303e0 	mov	x0, x19
    960160b4:	940005e7 	bl	96017850 <sdmmc_read_response>
    960160b8:	14000004 	b	960160c8 <sdmmc_send_command+0xb4>
		error = sdmmc_data_txr_ready(hsdmmc);
    960160bc:	aa1303e0 	mov	x0, x19
    960160c0:	940005cb 	bl	960177ec <sdmmc_data_txr_ready>
		if (error != TEGRABL_NO_ERROR) {
    960160c4:	34fffc80 	cbz	w0, 96016054 <sdmmc_send_command+0x40>
}
    960160c8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960160cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960160d0:	f9401bf7 	ldr	x23, [sp, #48]
    960160d4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960160d8:	d65f03c0 	ret
		error  = sdmmc_cmd_txr_ready(hsdmmc);
    960160dc:	aa1303e0 	mov	x0, x19
    960160e0:	940005aa 	bl	96017788 <sdmmc_cmd_txr_ready>
		if (error != TEGRABL_NO_ERROR) {
    960160e4:	34fffd80 	cbz	w0, 96016094 <sdmmc_send_command+0x80>
    960160e8:	17fffff8 	b	960160c8 <sdmmc_send_command+0xb4>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 2);
    960160ec:	52804020 	mov	w0, #0x201                 	// #513
    960160f0:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    960160f4:	d65f03c0 	ret

00000000960160f8 <sdmmc_parse_csd>:
	if (hsdmmc == NULL) {
    960160f8:	b40000c0 	cbz	x0, 96016110 <sdmmc_parse_csd+0x18>
		((CSD_READ_BL_LEN_MASK & sdmmc_resp[2]) >> CSD_READ_BL_LEN_SHIFT);
    960160fc:	b9401801 	ldr	w1, [x0, #24]
    96016100:	d3482c22 	ubfx	x2, x1, #8, #4
	if (hsdmmc->block_size_log2 < SDMMC_BLOCK_SIZE_LOG2) {
    96016104:	7100205f 	cmp	w2, #0x8
    96016108:	540001a8 	b.hi	9601613c <sdmmc_parse_csd+0x44>  // b.pmore
	hsdmmc->block_size_log2 =
    9601610c:	b9004002 	str	w2, [x0, #64]
{
    96016110:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		pr_error("Parse CSD failed, error = %x\n", error);
    96016114:	52804041 	mov	w1, #0x202                 	// #514
    96016118:	72a1e1e1 	movk	w1, #0xf0f, lsl #16
    9601611c:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
{
    96016120:	910003fd 	mov	x29, sp
		pr_error("Parse CSD failed, error = %x\n", error);
    96016124:	911c4400 	add	x0, x0, #0x711
    96016128:	94003152 	bl	96022670 <tegrabl_printf>
    9601612c:	52804040 	mov	w0, #0x202                 	// #514
    96016130:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    96016134:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96016138:	d65f03c0 	ret
		(uint32_t)((CSD_TRAN_SPEED_MASK & sdmmc_resp[2]) >> CSD_TRAN_SPEED_SHIFT);
    9601613c:	53187c21 	lsr	w1, w1, #24
	hsdmmc->tran_speed =
    96016140:	b9000801 	str	w1, [x0, #8]
					>> SD_SDHC_CSIZE_SHIFT;
    96016144:	b9401401 	ldr	w1, [x0, #20]
	hsdmmc->block_size_log2 = SDMMC_BLOCK_SIZE_LOG2;
    96016148:	52800122 	mov	w2, #0x9                   	// #9
    9601614c:	b9004002 	str	w2, [x0, #64]
		(uint8_t)((CSD_SPEC_VERS_MASK & sdmmc_resp[3]) >> CSD_SPEC_VERS_SHIFT);
    96016150:	b9401c02 	ldr	w2, [x0, #28]
	c_size = (sdmmc_resp[SD_SDHC_CSIZE_WORD] & SD_SDHC_CSIZE_MASK)
    96016154:	d3487421 	ubfx	x1, x1, #8, #22
	hsdmmc->user_blocks = (c_size + 1U) * SD_SDHC_CSIZE_MULTIPLIER;
    96016158:	11000421 	add	w1, w1, #0x1
		(uint8_t)((CSD_SPEC_VERS_MASK & sdmmc_resp[3]) >> CSD_SPEC_VERS_SHIFT);
    9601615c:	d3525442 	ubfx	x2, x2, #18, #4
	hsdmmc->spec_version =
    96016160:	39009802 	strb	w2, [x0, #38]
	hsdmmc->user_blocks = (c_size + 1U) * SD_SDHC_CSIZE_MULTIPLIER;
    96016164:	53165421 	lsl	w1, w1, #10
    96016168:	b9003801 	str	w1, [x0, #56]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9601616c:	52800000 	mov	w0, #0x0                   	// #0
}
    96016170:	d65f03c0 	ret

0000000096016174 <sdmmc_verify_response>:
{
    96016174:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96016178:	910003fd 	mov	x29, sp
    9601617c:	f9000bf3 	str	x19, [sp, #16]
	if (hsdmmc == NULL) {
    96016180:	b4000ac2 	cbz	x2, 960162d8 <sdmmc_verify_response+0x164>
		(CS_ADDRESS_OUT_OF_RANGE_MASK & response[0]) >>
    96016184:	b9401042 	ldr	w2, [x2, #16]
    96016188:	12001c21 	and	w1, w1, #0xff
	switch (index) {
    9601618c:	7100401f 	cmp	w0, #0x10
		(CS_ADDRESS_MISALIGN_MASK & response[0]) >> CS_ADDRESS_MISALIGN_SHIFT;
    96016190:	531e7c53 	lsr	w19, w2, #30
		(CS_BLOCK_LEN_ERROR_MASK & response[0]) >> CS_BLOCK_LEN_ERROR_SHIFT;
    96016194:	531d7c44 	lsr	w4, w2, #29
		(CS_COM_CRC_ERROR_MASK & response[0]) >> CS_COM_CRC_ERROR_SHIFT;
    96016198:	53177c45 	lsr	w5, w2, #23
		(CS_CC_ERROR_MASK & response[0]) >> CS_CC_ERROR_SHIFT;
    9601619c:	53147c43 	lsr	w3, w2, #20
	switch (index) {
    960161a0:	54000620 	b.eq	96016264 <sdmmc_verify_response+0xf0>  // b.none
    960161a4:	540001a8 	b.hi	960161d8 <sdmmc_verify_response+0x64>  // b.pmore
    960161a8:	7100201f 	cmp	w0, #0x8
    960161ac:	54000740 	b.eq	96016294 <sdmmc_verify_response+0x120>  // b.none
    960161b0:	7100341f 	cmp	w0, #0xd
    960161b4:	540007c0 	b.eq	960162ac <sdmmc_verify_response+0x138>  // b.none
    960161b8:	7100181f 	cmp	w0, #0x6
    960161bc:	54000181 	b.ne	960161ec <sdmmc_verify_response+0x78>  // b.any
		if ((after_cmd_execution != 0U) &&
    960161c0:	34000161 	cbz	w1, 960161ec <sdmmc_verify_response+0x78>
			((switch_error != 0U) || (cmd_crc_error != 0U))) {
    960161c4:	2a421ca2 	orr	w2, w5, w2, lsr #7
		if ((after_cmd_execution != 0U) &&
    960161c8:	12000053 	and	w19, w2, #0x1
    960161cc:	36000382 	tbz	w2, #0, 9601623c <sdmmc_verify_response+0xc8>
			error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 4);
    960161d0:	528082f3 	mov	w19, #0x417                 	// #1047
    960161d4:	1400003b 	b	960162c0 <sdmmc_verify_response+0x14c>
	switch (index) {
    960161d8:	71005c1f 	cmp	w0, #0x17
    960161dc:	54000500 	b.eq	9601627c <sdmmc_verify_response+0x108>  // b.none
    960161e0:	540000a8 	b.hi	960161f4 <sdmmc_verify_response+0x80>  // b.pmore
    960161e4:	7100481f 	cmp	w0, #0x12
    960161e8:	540001c0 	b.eq	96016220 <sdmmc_verify_response+0xac>  // b.none
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960161ec:	52800013 	mov	w19, #0x0                   	// #0
	return error;
    960161f0:	14000013 	b	9601623c <sdmmc_verify_response+0xc8>
	switch (index) {
    960161f4:	7100641f 	cmp	w0, #0x19
    960161f8:	54000140 	b.eq	96016220 <sdmmc_verify_response+0xac>  // b.none
    960161fc:	7100981f 	cmp	w0, #0x26
    96016200:	54ffff61 	b.ne	960161ec <sdmmc_verify_response+0x78>  // b.any
	 erase_error = (CS_ERASE_CMD_ERROR_MASK & response[0]);
    96016204:	12133c42 	and	w2, w2, #0x1fffe000
    96016208:	12044442 	and	w2, w2, #0xf0003fff
		if ((after_cmd_execution != 0U) && (erase_error != 0U)) {
    9601620c:	7100005f 	cmp	w2, #0x0
    96016210:	7a401824 	ccmp	w1, #0x0, #0x4, ne  // ne = any
    96016214:	54fffec0 	b.eq	960161ec <sdmmc_verify_response+0x78>  // b.none
			error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 6);
    96016218:	5280c2f3 	mov	w19, #0x617                 	// #1559
    9601621c:	14000029 	b	960162c0 <sdmmc_verify_response+0x14c>
		if (after_cmd_execution == 0U) {
    96016220:	35000161 	cbnz	w1, 9601624c <sdmmc_verify_response+0xd8>
	card_internal_error =
    96016224:	12000063 	and	w3, w3, #0x1
				(block_length_error != 0U) || (card_internal_error != 0U)) {
    96016228:	2a040273 	orr	w19, w19, w4
    9601622c:	2a427c62 	orr	w2, w3, w2, lsr #31
    96016230:	12000273 	and	w19, w19, #0x1
    96016234:	2a130053 	orr	w19, w2, w19
			if ((address_out_of_range != 0U) || (address_misaligned != 0U) ||
    96016238:	35000553 	cbnz	w19, 960162e0 <sdmmc_verify_response+0x16c>
}
    9601623c:	2a1303e0 	mov	w0, w19
    96016240:	f9400bf3 	ldr	x19, [sp, #16]
    96016244:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96016248:	d65f03c0 	ret
		} else if ((cmd_crc_error != 0U) || (illegal_command != 0U) ||
    9601624c:	2a4258a5 	orr	w5, w5, w2, lsr #22
    96016250:	2a4254a2 	orr	w2, w5, w2, lsr #21
    96016254:	12000053 	and	w19, w2, #0x1
    96016258:	3607ff22 	tbz	w2, #0, 9601623c <sdmmc_verify_response+0xc8>
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    9601625c:	5280c053 	mov	w19, #0x602                 	// #1538
    96016260:	14000018 	b	960162c0 <sdmmc_verify_response+0x14c>
		if ((after_cmd_execution == 0U) &&
    96016264:	35fffc41 	cbnz	w1, 960161ec <sdmmc_verify_response+0x78>
			((block_length_error != 0U) || (card_internal_error != 0U))) {
    96016268:	2a030083 	orr	w3, w4, w3
		if ((after_cmd_execution == 0U) &&
    9601626c:	12000073 	and	w19, w3, #0x1
    96016270:	3607fe63 	tbz	w3, #0, 9601623c <sdmmc_verify_response+0xc8>
			error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 2);
    96016274:	528042f3 	mov	w19, #0x217                 	// #535
    96016278:	14000012 	b	960162c0 <sdmmc_verify_response+0x14c>
		if ((after_cmd_execution == 0U) && (card_internal_error != 0U)) {
    9601627c:	7100003f 	cmp	w1, #0x0
    96016280:	12000063 	and	w3, w3, #0x1
    96016284:	1a9f0063 	csel	w3, w3, wzr, eq  // eq = none
    96016288:	34fffb23 	cbz	w3, 960161ec <sdmmc_verify_response+0x78>
			error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 3);
    9601628c:	528062f3 	mov	w19, #0x317                 	// #791
    96016290:	1400000c 	b	960162c0 <sdmmc_verify_response+0x14c>
		if ((after_cmd_execution == 0U) && (card_internal_error != 0U)) {
    96016294:	7100003f 	cmp	w1, #0x0
    96016298:	12000063 	and	w3, w3, #0x1
    9601629c:	1a9f0063 	csel	w3, w3, wzr, eq  // eq = none
    960162a0:	34fffa63 	cbz	w3, 960161ec <sdmmc_verify_response+0x78>
			error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 5);
    960162a4:	5280a2f3 	mov	w19, #0x517                 	// #1303
    960162a8:	14000006 	b	960162c0 <sdmmc_verify_response+0x14c>
		if (after_cmd_execution != 0U) {
    960162ac:	34fffa01 	cbz	w1, 960161ec <sdmmc_verify_response+0x78>
			if (((response[0] & CS_TRANSFER_STATE_MASK) >> CS_TRANSFER_STATE_SHIFT) == STATE_PRG) {
    960162b0:	d3493042 	ubfx	x2, x2, #9, #4
    960162b4:	71001c5f 	cmp	w2, #0x7
    960162b8:	54fff9a1 	b.ne	960161ec <sdmmc_verify_response+0x78>  // b.any
				error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 7);
    960162bc:	5280e2f3 	mov	w19, #0x717                 	// #1815
			error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 6);
    960162c0:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
		pr_error("sdmmc verify response: exit, error = %x\n", error);
    960162c4:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960162c8:	2a1303e1 	mov	w1, w19
    960162cc:	911cc800 	add	x0, x0, #0x732
    960162d0:	940030e8 	bl	96022670 <tegrabl_printf>
    960162d4:	17ffffda 	b	9601623c <sdmmc_verify_response+0xc8>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    960162d8:	52808053 	mov	w19, #0x402                 	// #1026
    960162dc:	17fffff9 	b	960162c0 <sdmmc_verify_response+0x14c>
				error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    960162e0:	5280a053 	mov	w19, #0x502                 	// #1282
    960162e4:	17fffff7 	b	960162c0 <sdmmc_verify_response+0x14c>

00000000960162e8 <sdmmc_send_switch_command>:
 *                 address of controller.
 *  @return TEGRABL_NO_ERROR if switch command send & verify passes.
 */
static tegrabl_error_t sdmmc_send_switch_command(uint32_t cmd_arg,
	struct tegrabl_sdmmc *hsdmmc)
{
    960162e8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	pr_trace("Send switch command\n");

	/* Sends the switch command. */
	error = sdmmc_send_command(CMD_SWITCH,
    960162ec:	aa0103e4 	mov	x4, x1
    960162f0:	52800003 	mov	w3, #0x0                   	// #0
    960162f4:	52800102 	mov	w2, #0x8                   	// #8
{
    960162f8:	910003fd 	mov	x29, sp
    960162fc:	f9000bf3 	str	x19, [sp, #16]
    96016300:	aa0103f3 	mov	x19, x1
	error = sdmmc_send_command(CMD_SWITCH,
    96016304:	2a0003e1 	mov	w1, w0
    96016308:	528000c0 	mov	w0, #0x6                   	// #6
    9601630c:	97ffff42 	bl	96016014 <sdmmc_send_command>
				 cmd_arg, RESP_TYPE_R1B, 0, hsdmmc);
	if (error != TEGRABL_NO_ERROR) {
    96016310:	350001c0 	cbnz	w0, 96016348 <sdmmc_send_switch_command+0x60>
		goto fail;
	}

	/* Send status to the controller. */
	error = sdmmc_send_command(CMD_SEND_STATUS,
    96016314:	b9400661 	ldr	w1, [x19, #4]
    96016318:	aa1303e4 	mov	x4, x19
    9601631c:	52800003 	mov	w3, #0x0                   	// #0
    96016320:	52800022 	mov	w2, #0x1                   	// #1
    96016324:	528001a0 	mov	w0, #0xd                   	// #13
    96016328:	97ffff3b 	bl	96016014 <sdmmc_send_command>
				 hsdmmc->card_rca, RESP_TYPE_R1, 0, hsdmmc);
	if (error != TEGRABL_NO_ERROR) {
    9601632c:	350000e0 	cbnz	w0, 96016348 <sdmmc_send_switch_command+0x60>
		goto fail;
	}

	/* Verify the response of the switch command. */
	error = sdmmc_verify_response(CMD_SWITCH, 1, hsdmmc);
    96016330:	aa1303e2 	mov	x2, x19
		goto fail;
	}

fail:
	return error;
}
    96016334:	f9400bf3 	ldr	x19, [sp, #16]
    96016338:	a8c27bfd 	ldp	x29, x30, [sp], #32
	error = sdmmc_verify_response(CMD_SWITCH, 1, hsdmmc);
    9601633c:	52800021 	mov	w1, #0x1                   	// #1
    96016340:	528000c0 	mov	w0, #0x6                   	// #6
    96016344:	17ffff8c 	b	96016174 <sdmmc_verify_response>
}
    96016348:	f9400bf3 	ldr	x19, [sp, #16]
    9601634c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96016350:	d65f03c0 	ret

0000000096016354 <sdmmc_card_transfer_mode>:
	if (hsdmmc == NULL) {
    96016354:	b4000100 	cbz	x0, 96016374 <sdmmc_card_transfer_mode+0x20>
		(CS_CURRENT_STATE_MASK & sdmmc_resp[0]) >> CS_CURRENT_STATE_SHIFT;
    96016358:	b9401000 	ldr	w0, [x0, #16]
	card_state =
    9601635c:	d3493000 	ubfx	x0, x0, #9, #4
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 1);
    96016360:	7100101f 	cmp	w0, #0x4
    96016364:	528021a0 	mov	w0, #0x10d                 	// #269
    96016368:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
    9601636c:	1a8003e0 	csel	w0, wzr, w0, eq  // eq = none
}
    96016370:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    96016374:	5280e040 	mov	w0, #0x702                 	// #1794
    96016378:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
    9601637c:	17fffffd 	b	96016370 <sdmmc_card_transfer_mode+0x1c>

0000000096016380 <sdmmc_get_ext_csd>:
 *  @param hsdmmc Context information to determine the base
 *                 address of controller.
 *  @return TEGRABL_NO_ERROR if success, error code if fails.
 */
tegrabl_error_t sdmmc_get_ext_csd(struct tegrabl_sdmmc *hsdmmc)
{
    96016380:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96016384:	910003fd 	mov	x29, sp
    96016388:	a90153f3 	stp	x19, x20, [sp, #16]
    9601638c:	a9025bf5 	stp	x21, x22, [sp, #32]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint8_t *buf = hsdmmc->ext_csd_buffer_address;
	uint32_t user_blocks;
	dma_addr_t dma_addr;

	if (hsdmmc == NULL) {
    96016390:	b4000c40 	cbz	x0, 96016518 <sdmmc_get_ext_csd+0x198>
    96016394:	aa0003f3 	mov	x19, x0
		goto fail;
	}

	/* Set the number of blocks to be read as 1. */
	pr_trace("Setting block to read as 1\n");
	sdmmc_set_num_blocks(SDMMC_CONTEXT_BLOCK_SIZE(hsdmmc), 1, hsdmmc);
    96016398:	aa0003e2 	mov	x2, x0
	uint8_t *buf = hsdmmc->ext_csd_buffer_address;
    9601639c:	91023016 	add	x22, x0, #0x8c
	sdmmc_set_num_blocks(SDMMC_CONTEXT_BLOCK_SIZE(hsdmmc), 1, hsdmmc);
    960163a0:	b9404000 	ldr	w0, [x0, #64]
    960163a4:	d2800035 	mov	x21, #0x1                   	// #1
    960163a8:	2a1503e1 	mov	w1, w21
    960163ac:	9ac022a0 	lsl	x0, x21, x0
    960163b0:	94000605 	bl	96017bc4 <sdmmc_set_num_blocks>

	dma_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SDMMC,
    960163b4:	39416261 	ldrb	w1, [x19, #88]
    960163b8:	aa1603e2 	mov	x2, x22
    960163bc:	52800044 	mov	w4, #0x2                   	// #2
    960163c0:	d2804003 	mov	x3, #0x200                 	// #512
    960163c4:	2a0403e0 	mov	w0, w4
    960163c8:	97ffb5bf 	bl	96003ac4 <tegrabl_dma_map_buffer>
									  sizeof(hsdmmc->ext_csd_buffer_address),
									  TEGRABL_DMA_FROM_DEVICE);

	/* Write the dma address. */
	pr_trace("SDMA buffer address\n");
	sdmmc_setup_dma(dma_addr, hsdmmc);
    960163cc:	aa1303e1 	mov	x1, x19
    960163d0:	94000604 	bl	96017be0 <sdmmc_setup_dma>

	/* Send extended csd command. */
	pr_trace("send ext CSD command\n");
	error = sdmmc_send_command(CMD_SEND_EXT_CSD,
    960163d4:	aa1303e4 	mov	x4, x19
    960163d8:	2a1503e3 	mov	w3, w21
    960163dc:	2a1503e2 	mov	w2, w21
    960163e0:	52800001 	mov	w1, #0x0                   	// #0
    960163e4:	52800100 	mov	w0, #0x8                   	// #8
    960163e8:	97ffff0b 	bl	96016014 <sdmmc_send_command>
    960163ec:	2a0003f4 	mov	w20, w0
				 0, RESP_TYPE_R1, 1, hsdmmc);
	if (error != TEGRABL_NO_ERROR) {
    960163f0:	350008a0 	cbnz	w0, 96016504 <sdmmc_get_ext_csd+0x184>
	}

	/* Verify the input response. */
	pr_trace("Verify the input response\n");

	error = sdmmc_verify_response(CMD_SEND_EXT_CSD, 0,  hsdmmc);
    960163f4:	aa1303e2 	mov	x2, x19
    960163f8:	52800001 	mov	w1, #0x0                   	// #0
    960163fc:	52800100 	mov	w0, #0x8                   	// #8
    96016400:	97ffff5d 	bl	96016174 <sdmmc_verify_response>
    96016404:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016408:	350007e0 	cbnz	w0, 96016504 <sdmmc_get_ext_csd+0x184>
		goto fail;
	}

	/* Register as I/O in progress. */
	hsdmmc->device_status = DEVICE_STATUS_IO_PROGRESS;
    9601640c:	b9002275 	str	w21, [x19, #32]
	hsdmmc->read_start_time = tegrabl_get_timestamp_ms();
    96016410:	9400261f 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    96016414:	f9002660 	str	x0, [x19, #72]

	/* Loop till I/O is in progress. */
	do {
		dev_status = sdmmc_query_status(hsdmmc);
    96016418:	aa1303e0 	mov	x0, x19
    9601641c:	940005fe 	bl	96017c14 <sdmmc_query_status>
    96016420:	2a0003f5 	mov	w21, w0
	} while ((dev_status == DEVICE_STATUS_IO_PROGRESS));
    96016424:	7100041f 	cmp	w0, #0x1
    96016428:	54ffff80 	b.eq	96016418 <sdmmc_get_ext_csd+0x98>  // b.none

	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SDMMC,
    9601642c:	39416261 	ldrb	w1, [x19, #88]
    96016430:	52800044 	mov	w4, #0x2                   	// #2
    96016434:	d2804003 	mov	x3, #0x200                 	// #512
    96016438:	aa1603e2 	mov	x2, x22
    9601643c:	2a0403e0 	mov	w0, w4
    96016440:	97ffb593 	bl	96003a8c <tegrabl_dma_unmap_buffer>
							 sizeof(hsdmmc->ext_csd_buffer_address),
							 TEGRABL_DMA_FROM_DEVICE);

	/* Check if device is in idle mode or not. */
	pr_trace("Device check for idle %d\n", dev_status);
	if (dev_status != DEVICE_STATUS_IDLE) {
    96016444:	35000715 	cbnz	w21, 96016524 <sdmmc_get_ext_csd+0x1a4>
		goto fail;
	}

	/* Number of sectors in each boot partition. */
	hsdmmc->boot_blocks =
		((uint32_t)buf[ECSD_BOOT_PARTITION_SIZE_OFFSET] << 17) /
    96016448:	3945ba60 	ldrb	w0, [x19, #366]
    9601644c:	b9404261 	ldr	w1, [x19, #64]
    96016450:	d36f1c00 	ubfiz	x0, x0, #17, #8
    96016454:	9ac12400 	lsr	x0, x0, x1
	hsdmmc->boot_blocks =
    96016458:	b9003260 	str	w0, [x19, #48]
		SDMMC_CONTEXT_BLOCK_SIZE(hsdmmc);
	pr_trace("Boot blocks=%d\n", hsdmmc->boot_blocks);

	/* Number of 256byte blocks in rpmb partition. */
	hsdmmc->rpmb_blocks =
		((uint32_t)buf[ECSD_RPMB_SIZE_OFFSET] << 17) / RPMB_DATA_SIZE;
    9601645c:	3944d260 	ldrb	w0, [x19, #308]
    96016460:	53175800 	lsl	w0, w0, #9
	hsdmmc->rpmb_blocks =
    96016464:	b9003e60 	str	w0, [x19, #60]

	pr_trace("RPMB blocks=%d\n", hsdmmc->rpmb_blocks);

	/* Store the number of user partition sectors. */
	if (hsdmmc->is_high_capacity_card != 0U) {
    96016468:	39409660 	ldrb	w0, [x19, #37]
    9601646c:	34000060 	cbz	w0, 96016478 <sdmmc_get_ext_csd+0xf8>
		user_blocks =
			(buf[ECSD_SECTOR_COUNT_0_OFFSET] |
			(((uint32_t)buf[ECSD_SECTOR_COUNT_1_OFFSET]) << 8) |
			(((uint32_t)buf[ECSD_SECTOR_COUNT_2_OFFSET]) << 16) |
			(((uint32_t)buf[ECSD_SECTOR_COUNT_3_OFFSET]) << 24));
		hsdmmc->user_blocks = user_blocks;
    96016470:	b9416260 	ldr	w0, [x19, #352]
    96016474:	b9003a60 	str	w0, [x19, #56]
		pr_trace("user blocks=%d\n", hsdmmc->user_blocks);
	}

	/* Store the power class. */
	hsdmmc->power_class_26MHz_360V =
		buf[ECSD_POWER_CL_26_360_OFFSET];
    96016478:	39455e60 	ldrb	w0, [x19, #343]
	/* Store the high capacity erase group size. */
	hsdmmc->erase_group_size = (uint32_t)buf[ECSD_ERASE_GRP_SIZE] << 10;

	/* Store the high capacity erase timeout for max erase. */
	hsdmmc->erase_timeout_us =
			300000U * buf[ECSD_ERASE_TIMEOUT_OFFSET] *
    9601647c:	52927c02 	mov	w2, #0x93e0                	// #37856
		buf[ECSD_POWER_CL_26_360_OFFSET];
    96016480:	b9006260 	str	w0, [x19, #96]
			300000U * buf[ECSD_ERASE_TIMEOUT_OFFSET] *
    96016484:	72a00082 	movk	w2, #0x4, lsl #16
		buf[ECSD_POWER_CL_52_360_OFFSET];
    96016488:	39455a60 	ldrb	w0, [x19, #342]
    9601648c:	b9006660 	str	w0, [x19, #100]
		buf[ECSD_POWER_CL_26_195_OFFSET];
    96016490:	39455660 	ldrb	w0, [x19, #341]
    96016494:	b9006a60 	str	w0, [x19, #104]
		buf[ECSD_POWER_CL_52_195_OFFSET];
    96016498:	39455260 	ldrb	w0, [x19, #340]
    9601649c:	b9006e60 	str	w0, [x19, #108]
		buf[ECSD_POWER_CL_DDR_52_360_OFFSET];
    960164a0:	3945ee60 	ldrb	w0, [x19, #379]
    960164a4:	b9007260 	str	w0, [x19, #112]
		buf[ECSD_POWER_CL_DDR_52_195_OFFSET];
    960164a8:	3945ea60 	ldrb	w0, [x19, #378]
    960164ac:	b9007660 	str	w0, [x19, #116]
	hsdmmc->ext_csd_rev = buf[ECSD_REV];
    960164b0:	39453260 	ldrb	w0, [x19, #332]
    960164b4:	39022660 	strb	w0, [x19, #137]
	hsdmmc->card_support_speed = buf[ECSD_CARD_TYPE_OFFSET];
    960164b8:	39454260 	ldrb	w0, [x19, #336]
    960164bc:	39015260 	strb	w0, [x19, #84]
	hsdmmc->boot_config = buf[ECSD_BOOT_CONFIG_OFFSET];
    960164c0:	3944fe60 	ldrb	w0, [x19, #319]
    960164c4:	b9005260 	str	w0, [x19, #80]
			ECSD_SEC_SANITIZE_MASK) >> ECSD_SEC_SANITIZE_SHIFT;
    960164c8:	3945ce60 	ldrb	w0, [x19, #371]
	hsdmmc->erase_group_size = (uint32_t)buf[ECSD_ERASE_GRP_SIZE] << 10;
    960164cc:	3945b261 	ldrb	w1, [x19, #364]
			ECSD_SEC_SANITIZE_MASK) >> ECSD_SEC_SANITIZE_SHIFT;
    960164d0:	d3461800 	ubfx	x0, x0, #6, #1
	hsdmmc->sanitize_support =
    960164d4:	39020260 	strb	w0, [x19, #128]
			300000U * buf[ECSD_ERASE_TIMEOUT_OFFSET] *
    960164d8:	3945ae60 	ldrb	w0, [x19, #363]
	hsdmmc->erase_group_size = (uint32_t)buf[ECSD_ERASE_GRP_SIZE] << 10;
    960164dc:	53165421 	lsl	w1, w1, #10
    960164e0:	b9007a61 	str	w1, [x19, #120]
			300000U * buf[ECSD_ERASE_TIMEOUT_OFFSET] *
    960164e4:	1b027c00 	mul	w0, w0, w2
						(MAX_ERASABLE_SECTORS / hsdmmc->erase_group_size);
    960164e8:	52940002 	mov	w2, #0xa000                	// #40960
    960164ec:	72a001e2 	movk	w2, #0xf, lsl #16
    960164f0:	1ac10841 	udiv	w1, w2, w1
			300000U * buf[ECSD_ERASE_TIMEOUT_OFFSET] *
    960164f4:	1b017c00 	mul	w0, w0, w1
	hsdmmc->erase_timeout_us =
    960164f8:	b9007e60 	str	w0, [x19, #124]
	pr_trace("Timeout is 0x%x erase group is 0x%x\n", hsdmmc->erase_timeout_us, hsdmmc->erase_group_size);

	pr_trace("card_support_speed = %d\n", hsdmmc->card_support_speed);

	/* Store the current bus width. */
	hsdmmc->card_bus_width = buf[ECSD_BUS_WIDTH];
    960164fc:	39450e60 	ldrb	w0, [x19, #323]
    96016500:	39015660 	strb	w0, [x19, #85]
fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_debug("get ext CSD failed, error = %x\n", error);
	}
	return error;
}
    96016504:	2a1403e0 	mov	w0, w20
    96016508:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601650c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96016510:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96016514:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 8);
    96016518:	52810054 	mov	w20, #0x802                 	// #2050
		error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0);
    9601651c:	72a1e1f4 	movk	w20, #0xf0f, lsl #16
	return error;
    96016520:	17fffff9 	b	96016504 <sdmmc_get_ext_csd+0x184>
		error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0);
    96016524:	528001d4 	mov	w20, #0xe                   	// #14
    96016528:	17fffffd 	b	9601651c <sdmmc_get_ext_csd+0x19c>

000000009601652c <sdmmc_block_io>:
 *                 address of controller.
 *  @return TEGRABL_NO_ERROR if success, error code if fails.
 */
tegrabl_error_t sdmmc_block_io(bnum_t block, bnum_t count, uint8_t *buf,
	uint8_t is_write, struct tegrabl_sdmmc *hsdmmc, bool is_non_blocking)
{
    9601652c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	sdmmc_cmd cmd;
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	dma_addr_t dma_addr;
	tegrabl_dma_data_direction dma_dir;

	if ((hsdmmc == NULL) || (buf == NULL)) {
    96016530:	f100009f 	cmp	x4, #0x0
    96016534:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
{
    96016538:	910003fd 	mov	x29, sp
    9601653c:	a90153f3 	stp	x19, x20, [sp, #16]
    96016540:	a9025bf5 	stp	x21, x22, [sp, #32]
    96016544:	a90363f7 	stp	x23, x24, [sp, #48]
    96016548:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601654c:	f9002bfb 	str	x27, [sp, #80]
	if ((hsdmmc == NULL) || (buf == NULL)) {
    96016550:	54001100 	b.eq	96016770 <sdmmc_block_io+0x244>  // b.none
    96016554:	12001c77 	and	w23, w3, #0xff
    96016558:	2a0003f9 	mov	w25, w0

	/* Decide which command is to be send. */
	if (is_write != 0U) {
		cmd = CMD_WRITE_MULTIPLE;
	} else {
		cmd = CMD_READ_MULTIPLE;
    9601655c:	710002ff 	cmp	w23, #0x0
    96016560:	52800240 	mov	w0, #0x12                  	// #18
    96016564:	52800338 	mov	w24, #0x19                  	// #25
    96016568:	1a801318 	csel	w24, w24, w0, ne  // ne = any
	}

	/* Enable block length setting if not DDR mode. */
	if ((hsdmmc->data_width == DATA_WIDTH_4BIT) ||
    9601656c:	b9400c80 	ldr	w0, [x4, #12]
    96016570:	2a0103f6 	mov	w22, w1
    96016574:	aa0203f5 	mov	x21, x2
    96016578:	aa0403f3 	mov	x19, x4
    9601657c:	51000400 	sub	w0, w0, #0x1
    96016580:	12001cbb 	and	w27, w5, #0xff
    96016584:	7100041f 	cmp	w0, #0x1
    96016588:	54000109 	b.ls	960165a8 <sdmmc_block_io+0x7c>  // b.plast
    9601658c:	710002ff 	cmp	w23, #0x0
    96016590:	52800057 	mov	w23, #0x2                   	// #2
    96016594:	1a9f06f7 	csinc	w23, w23, wzr, eq  // eq = none

		pr_trace("actual_start_sector = %d, actual_num_sectors = %d\n",
				 current_start_sector, current_num_sectors);

		/* Set number of blocks to read or write. */
		sdmmc_set_num_blocks(SDMMC_CONTEXT_BLOCK_SIZE(hsdmmc),
    96016598:	d280003a 	mov	x26, #0x1                   	// #1
	while (residue_num_sectors > 0U) {
    9601659c:	350003d6 	cbnz	w22, 96016614 <sdmmc_block_io+0xe8>
    960165a0:	52800014 	mov	w20, #0x0                   	// #0
    960165a4:	1400000d 	b	960165d8 <sdmmc_block_io+0xac>
								   SDMMC_CONTEXT_BLOCK_SIZE(hsdmmc),
    960165a8:	b9404081 	ldr	w1, [x4, #64]
    960165ac:	d2800020 	mov	x0, #0x1                   	// #1
		error = sdmmc_send_command(CMD_SET_BLOCK_LENGTH,
    960165b0:	52800003 	mov	w3, #0x0                   	// #0
    960165b4:	2a0003e2 	mov	w2, w0
    960165b8:	9ac12001 	lsl	x1, x0, x1
    960165bc:	52800200 	mov	w0, #0x10                  	// #16
    960165c0:	97fffe95 	bl	96016014 <sdmmc_send_command>
    960165c4:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    960165c8:	34000180 	cbz	w0, 960165f8 <sdmmc_block_io+0xcc>
			pr_error("Setting block length failed\n");
    960165cc:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960165d0:	91187000 	add	x0, x0, #0x61c
    960165d4:	94003027 	bl	96022670 <tegrabl_printf>
fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_debug("Block IO: exit, error = %x\n", error);
	}
	return error;
}
    960165d8:	2a1403e0 	mov	w0, w20
    960165dc:	f9402bfb 	ldr	x27, [sp, #80]
    960165e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960165e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960165e8:	a94363f7 	ldp	x23, x24, [sp, #48]
    960165ec:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960165f0:	a8c77bfd 	ldp	x29, x30, [sp], #112
    960165f4:	d65f03c0 	ret
		error = sdmmc_verify_response(CMD_SET_BLOCK_LENGTH, 0, hsdmmc);
    960165f8:	aa1303e2 	mov	x2, x19
    960165fc:	52800001 	mov	w1, #0x0                   	// #0
    96016600:	52800200 	mov	w0, #0x10                  	// #16
    96016604:	97fffedc 	bl	96016174 <sdmmc_verify_response>
    96016608:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    9601660c:	34fffc00 	cbz	w0, 9601658c <sdmmc_block_io+0x60>
    96016610:	17fffff2 	b	960165d8 <sdmmc_block_io+0xac>
		if (sdmmc_wait_for_data_line_ready(hsdmmc) != TEGRABL_NO_ERROR) {
    96016614:	aa1303e0 	mov	x0, x19
		current_num_sectors = residue_num_sectors;
    96016618:	290d5bb9 	stp	w25, w22, [x29, #104]
		if (sdmmc_wait_for_data_line_ready(hsdmmc) != TEGRABL_NO_ERROR) {
    9601661c:	940005c8 	bl	96017d3c <sdmmc_wait_for_data_line_ready>
    96016620:	35000680 	cbnz	w0, 960166f0 <sdmmc_block_io+0x1c4>
					BOOT_PARTITION_1) ||
    96016624:	b9402a60 	ldr	w0, [x19, #40]
    96016628:	51000400 	sub	w0, w0, #0x1
		if ((hsdmmc->current_access_region ==
    9601662c:	7100041f 	cmp	w0, #0x1
    96016630:	540000e8 	b.hi	9601664c <sdmmc_block_io+0x120>  // b.pmore
			error = sdmmc_get_correct_boot_block(
    96016634:	aa1303e2 	mov	x2, x19
    96016638:	9101b3a1 	add	x1, x29, #0x6c
    9601663c:	9101a3a0 	add	x0, x29, #0x68
    96016640:	940005d8 	bl	96017da0 <sdmmc_get_correct_boot_block>
    96016644:	2a0003f4 	mov	w20, w0
			if (error != TEGRABL_NO_ERROR) {
    96016648:	35fffc80 	cbnz	w0, 960165d8 <sdmmc_block_io+0xac>
		sdmmc_set_num_blocks(SDMMC_CONTEXT_BLOCK_SIZE(hsdmmc),
    9601664c:	b9406fa1 	ldr	w1, [x29, #108]
    96016650:	aa1303e2 	mov	x2, x19
    96016654:	b9404260 	ldr	w0, [x19, #64]
    96016658:	9ac02340 	lsl	x0, x26, x0
    9601665c:	9400055a 	bl	96017bc4 <sdmmc_set_num_blocks>
		dma_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SDMMC,
    96016660:	294d0fb4 	ldp	w20, w3, [x29, #104]
    96016664:	2a1703e4 	mov	w4, w23
			current_num_sectors << hsdmmc->block_size_log2, dma_dir);
    96016668:	b9404260 	ldr	w0, [x19, #64]
		dma_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SDMMC,
    9601666c:	aa1503e2 	mov	x2, x21
    96016670:	39416261 	ldrb	w1, [x19, #88]
    96016674:	1ac02063 	lsl	w3, w3, w0
    96016678:	52800040 	mov	w0, #0x2                   	// #2
    9601667c:	97ffb512 	bl	96003ac4 <tegrabl_dma_map_buffer>
		sdmmc_setup_dma(dma_addr, hsdmmc);
    96016680:	aa1303e1 	mov	x1, x19
    96016684:	94000557 	bl	96017be0 <sdmmc_setup_dma>
		error = sdmmc_send_command(cmd, cmd_arg, RESP_TYPE_R1, 1, hsdmmc);
    96016688:	2a1403e1 	mov	w1, w20
    9601668c:	aa1303e4 	mov	x4, x19
    96016690:	52800023 	mov	w3, #0x1                   	// #1
    96016694:	52800022 	mov	w2, #0x1                   	// #1
    96016698:	2a1803e0 	mov	w0, w24
    9601669c:	97fffe5e 	bl	96016014 <sdmmc_send_command>
    960166a0:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    960166a4:	35fff9a0 	cbnz	w0, 960165d8 <sdmmc_block_io+0xac>
		error = sdmmc_verify_response(cmd, 0, hsdmmc);
    960166a8:	aa1303e2 	mov	x2, x19
    960166ac:	52800001 	mov	w1, #0x0                   	// #0
    960166b0:	2a1803e0 	mov	w0, w24
    960166b4:	97fffeb0 	bl	96016174 <sdmmc_verify_response>
    960166b8:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    960166bc:	35fff8e0 	cbnz	w0, 960165d8 <sdmmc_block_io+0xac>
		hsdmmc->device_status = DEVICE_STATUS_IO_PROGRESS;
    960166c0:	b900227a 	str	w26, [x19, #32]
		hsdmmc->read_start_time = tegrabl_get_timestamp_ms();
    960166c4:	94002572 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    960166c8:	f9002660 	str	x0, [x19, #72]
		residue_num_sectors -= current_num_sectors;
    960166cc:	b9406fa0 	ldr	w0, [x29, #108]
		if ((residue_num_sectors == 0U) && (is_non_blocking == true)) {
    960166d0:	6b0002d6 	subs	w22, w22, w0
		residue_start_sector += current_num_sectors;
    960166d4:	0b000339 	add	w25, w25, w0
		if ((residue_num_sectors == 0U) && (is_non_blocking == true)) {
    960166d8:	7a400b64 	ccmp	w27, #0x0, #0x4, eq  // eq = none
    960166dc:	54000160 	b.eq	96016708 <sdmmc_block_io+0x1dc>  // b.none
			hsdmmc->last_io_buf = buf;
    960166e0:	f9015675 	str	x21, [x19, #680]
			hsdmmc->last_io_dma_dir = dma_dir;
    960166e4:	b902b277 	str	w23, [x19, #688]
			hsdmmc->last_io_num_sectors = current_num_sectors;
    960166e8:	b902b660 	str	w0, [x19, #692]
    960166ec:	17ffffbb 	b	960165d8 <sdmmc_block_io+0xac>
			error = sdmmc_recover_controller_error(hsdmmc, 1);
    960166f0:	52800021 	mov	w1, #0x1                   	// #1
    960166f4:	aa1303e0 	mov	x0, x19
    960166f8:	9400047c 	bl	960178e8 <sdmmc_recover_controller_error>
    960166fc:	2a0003f4 	mov	w20, w0
			if (error != TEGRABL_NO_ERROR) {
    96016700:	34fff920 	cbz	w0, 96016624 <sdmmc_block_io+0xf8>
    96016704:	17ffffb5 	b	960165d8 <sdmmc_block_io+0xac>
		while (sdmmc_query_status(hsdmmc) == DEVICE_STATUS_IO_PROGRESS) {
    96016708:	aa1303e0 	mov	x0, x19
    9601670c:	94000542 	bl	96017c14 <sdmmc_query_status>
    96016710:	7100041f 	cmp	w0, #0x1
    96016714:	54ffffa0 	b.eq	96016708 <sdmmc_block_io+0x1dc>  // b.none
							current_num_sectors << hsdmmc->block_size_log2,
    96016718:	b9404260 	ldr	w0, [x19, #64]
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SDMMC,
    9601671c:	2a1703e4 	mov	w4, w23
    96016720:	b9406fa3 	ldr	w3, [x29, #108]
    96016724:	aa1503e2 	mov	x2, x21
    96016728:	39416261 	ldrb	w1, [x19, #88]
    9601672c:	1ac02063 	lsl	w3, w3, w0
    96016730:	52800040 	mov	w0, #0x2                   	// #2
    96016734:	97ffb4d6 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		if (sdmmc_query_status(hsdmmc) != DEVICE_STATUS_IDLE) {
    96016738:	aa1303e0 	mov	x0, x19
    9601673c:	94000536 	bl	96017c14 <sdmmc_query_status>
    96016740:	340000e0 	cbz	w0, 9601675c <sdmmc_block_io+0x230>
			error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 1);
    96016744:	528021d4 	mov	w20, #0x10e                 	// #270
			pr_info("Device is not idle\n");
    96016748:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601674c:	9118f000 	add	x0, x0, #0x63c
    96016750:	94002fc8 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
    96016754:	72a1e1f4 	movk	w20, #0xf0f, lsl #16
	return error;
    96016758:	17ffffa0 	b	960165d8 <sdmmc_block_io+0xac>
		buf += (current_num_sectors << hsdmmc->block_size_log2);
    9601675c:	b9404261 	ldr	w1, [x19, #64]
    96016760:	b9406fa0 	ldr	w0, [x29, #108]
    96016764:	1ac12000 	lsl	w0, w0, w1
    96016768:	8b0002b5 	add	x21, x21, x0
    9601676c:	17ffff8c 	b	9601659c <sdmmc_block_io+0x70>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
    96016770:	52812054 	mov	w20, #0x902                 	// #2306
    96016774:	17fffff8 	b	96016754 <sdmmc_block_io+0x228>

0000000096016778 <sdmmc_xfer_wait>:

tegrabl_error_t sdmmc_xfer_wait(struct tegrabl_blockdev_xfer_info *xfer, time_t timeout, uint8_t *status)
{
    96016778:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9601677c:	910003fd 	mov	x29, sp
    96016780:	a90363f7 	stp	x23, x24, [sp, #48]
    96016784:	aa0003f7 	mov	x23, x0
	time_t start_time, end_time;
	uint8_t is_write;

	dev = xfer->dev;

	priv_data = (sdmmc_priv_data_t *)dev->priv_data;
    96016788:	f9400000 	ldr	x0, [x0]
{
    9601678c:	aa0203f8 	mov	x24, x2
    96016790:	a90153f3 	stp	x19, x20, [sp, #16]
    96016794:	a9025bf5 	stp	x21, x22, [sp, #32]
	hsdmmc = (struct tegrabl_sdmmc *) priv_data->context;
    96016798:	f9401800 	ldr	x0, [x0, #48]
{
    9601679c:	a9046bf9 	stp	x25, x26, [sp, #64]

		if ((i < xfer->block_count) != true) {
			break;
		}

		current_sectors = ((xfer->block_count - i) > MAX_SDMA_TRANSFER) ?
    960167a0:	529ffff9 	mov	w25, #0xffff                	// #65535
{
    960167a4:	a90573fb 	stp	x27, x28, [sp, #80]
    960167a8:	aa0103fb 	mov	x27, x1
	hsdmmc = (struct tegrabl_sdmmc *) priv_data->context;
    960167ac:	f9400413 	ldr	x19, [x0, #8]
	i = hsdmmc->last_xfer_blocks;
    960167b0:	b942ba75 	ldr	w21, [x19, #696]
	pbuf = hsdmmc->last_xfer_buf;
    960167b4:	f9416276 	ldr	x22, [x19, #704]
	start_time = tegrabl_get_timestamp_us();
    960167b8:	94002531 	bl	9601fc7c <tegrabl_get_timestamp_us>
    960167bc:	aa0003fa 	mov	x26, x0
			dev_status = sdmmc_query_status(hsdmmc);
    960167c0:	aa1303e0 	mov	x0, x19
    960167c4:	94000514 	bl	96017c14 <sdmmc_query_status>
    960167c8:	2a0003f4 	mov	w20, w0
			end_time = tegrabl_get_timestamp_us();
    960167cc:	9400252c 	bl	9601fc7c <tegrabl_get_timestamp_us>
			if ((end_time - start_time) > timeout) {
    960167d0:	cb1a0000 	sub	x0, x0, x26
    960167d4:	eb1b001f 	cmp	x0, x27
    960167d8:	540001c9 	b.ls	96016810 <sdmmc_xfer_wait+0x98>  // b.plast
				*status = TEGRABL_BLOCKDEV_XFER_IN_PROGRESS;
    960167dc:	52800020 	mov	w0, #0x1                   	// #1
    960167e0:	39000300 	strb	w0, [x24]
				hsdmmc->last_xfer_blocks = i;
    960167e4:	b902ba75 	str	w21, [x19, #696]
				hsdmmc->last_xfer_buf = pbuf;
    960167e8:	f9016276 	str	x22, [x19, #704]
		}

		i += current_sectors;
		pbuf += (current_sectors << hsdmmc->block_size_log2);
	}
	*status = TEGRABL_BLOCKDEV_XFER_COMPLETE;
    960167ec:	5280001c 	mov	w28, #0x0                   	// #0
fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_error("Data transfer failed\n");
	}
	return error;
}
    960167f0:	2a1c03e0 	mov	w0, w28
    960167f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960167f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960167fc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96016800:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96016804:	a94573fb 	ldp	x27, x28, [sp, #80]
    96016808:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9601680c:	d65f03c0 	ret
		}  while ((dev_status == DEVICE_STATUS_IO_PROGRESS));
    96016810:	7100069f 	cmp	w20, #0x1
    96016814:	54fffd60 	b.eq	960167c0 <sdmmc_xfer_wait+0x48>  // b.none
		if (dev_status != DEVICE_STATUS_IDLE) {
    96016818:	35000474 	cbnz	w20, 960168a4 <sdmmc_xfer_wait+0x12c>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SDMMC, (uint8_t)hsdmmc->controller_id, hsdmmc->last_io_buf,
    9601681c:	39416261 	ldrb	w1, [x19, #88]
    96016820:	b942b264 	ldr	w4, [x19, #688]
    96016824:	f9415662 	ldr	x2, [x19, #680]
			hsdmmc->last_io_num_sectors << hsdmmc->block_size_log2, hsdmmc->last_io_dma_dir);
    96016828:	b9404260 	ldr	w0, [x19, #64]
    9601682c:	b942b663 	ldr	w3, [x19, #692]
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SDMMC, (uint8_t)hsdmmc->controller_id, hsdmmc->last_io_buf,
    96016830:	1ac02063 	lsl	w3, w3, w0
    96016834:	52800040 	mov	w0, #0x2                   	// #2
    96016838:	97ffb495 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		if ((i < xfer->block_count) != true) {
    9601683c:	b9401ef4 	ldr	w20, [x23, #28]
    96016840:	6b15029f 	cmp	w20, w21
    96016844:	540002a9 	b.ls	96016898 <sdmmc_xfer_wait+0x120>  // b.plast
		is_write = (xfer->xfer_type == TEGRABL_BLOCKDEV_WRITE) ? 1U : 0U;
    96016848:	394022e0 	ldrb	w0, [x23, #8]
		current_sectors = ((xfer->block_count - i) > MAX_SDMA_TRANSFER) ?
    9601684c:	4b150294 	sub	w20, w20, w21
    96016850:	6b19029f 	cmp	w20, w25
		error = sdmmc_block_io(xfer->start_block + i, current_sectors, pbuf, is_write, hsdmmc, true);
    96016854:	52800025 	mov	w5, #0x1                   	// #1
		current_sectors = ((xfer->block_count - i) > MAX_SDMA_TRANSFER) ?
    96016858:	1a999294 	csel	w20, w20, w25, ls  // ls = plast
		is_write = (xfer->xfer_type == TEGRABL_BLOCKDEV_WRITE) ? 1U : 0U;
    9601685c:	7100041f 	cmp	w0, #0x1
		error = sdmmc_block_io(xfer->start_block + i, current_sectors, pbuf, is_write, hsdmmc, true);
    96016860:	b9401ae0 	ldr	w0, [x23, #24]
    96016864:	aa1303e4 	mov	x4, x19
    96016868:	1a9f17e3 	cset	w3, eq  // eq = none
    9601686c:	aa1603e2 	mov	x2, x22
    96016870:	2a1403e1 	mov	w1, w20
    96016874:	0b0002a0 	add	w0, w21, w0
    96016878:	97ffff2d 	bl	9601652c <sdmmc_block_io>
    9601687c:	2a0003fc 	mov	w28, w0
		if (error != TEGRABL_NO_ERROR) {
    96016880:	35000160 	cbnz	w0, 960168ac <sdmmc_xfer_wait+0x134>
		pbuf += (current_sectors << hsdmmc->block_size_log2);
    96016884:	b9404260 	ldr	w0, [x19, #64]
		i += current_sectors;
    96016888:	0b1402b5 	add	w21, w21, w20
		pbuf += (current_sectors << hsdmmc->block_size_log2);
    9601688c:	1ac02294 	lsl	w20, w20, w0
    96016890:	8b1402d6 	add	x22, x22, x20
	while (true) {
    96016894:	17ffffcb 	b	960167c0 <sdmmc_xfer_wait+0x48>
	*status = TEGRABL_BLOCKDEV_XFER_COMPLETE;
    96016898:	52800040 	mov	w0, #0x2                   	// #2
    9601689c:	39000300 	strb	w0, [x24]
    960168a0:	17ffffd3 	b	960167ec <sdmmc_xfer_wait+0x74>
			error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 2);
    960168a4:	528041dc 	mov	w28, #0x20e                 	// #526
    960168a8:	72a1e1fc 	movk	w28, #0xf0f, lsl #16
		pr_error("Data transfer failed\n");
    960168ac:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960168b0:	911d7800 	add	x0, x0, #0x75e
    960168b4:	94002f6f 	bl	96022670 <tegrabl_printf>
    960168b8:	17ffffce 	b	960167f0 <sdmmc_xfer_wait+0x78>

00000000960168bc <sdmmc_init_controller>:
 *  @param instance Instance of the controller to be initialized.
 *
 *  @return TEGRABL_NO_ERROR if success, error code if fails.
 */
tegrabl_error_t sdmmc_init_controller(struct tegrabl_sdmmc *hsdmmc, uint32_t instance)
{
    960168bc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960168c0:	910003fd 	mov	x29, sp
    960168c4:	a90153f3 	stp	x19, x20, [sp, #16]
    960168c8:	aa0003f4 	mov	x20, x0
    960168cc:	f90013f5 	str	x21, [sp, #32]
    960168d0:	2a0103f5 	mov	w21, w1
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	/* Reset the registers of the controller. */
	pr_trace("Reset controller at base\n");
	error = sdmmc_reset_controller(hsdmmc);
    960168d4:	940002dd 	bl	96017448 <sdmmc_reset_controller>
	if (error != TEGRABL_NO_ERROR) {
    960168d8:	34000140 	cbz	w0, 96016900 <sdmmc_init_controller+0x44>
    960168dc:	2a0003f3 	mov	w19, w0
		pr_error("Reset controller registers failed\n");
    960168e0:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960168e4:	911ad000 	add	x0, x0, #0x6b4
#if defined(CONFIG_ENABLE_SDMMC_64_BIT_SUPPORT)
	/* Enable host controller v4 */
	error = sdmmc_enable_hostv4(hsdmmc);
	if (error != TEGRABL_NO_ERROR) {
		TEGRABL_SET_HIGHEST_MODULE(error);
		pr_error("Enable hostv4 failed\n");
    960168e8:	94002f62 	bl	96022670 <tegrabl_printf>
	pr_trace("Setting data width to 1\n");
	error = sdmmc_set_data_width(DATA_WIDTH_1BIT, hsdmmc);

fail:
	return error;
}
    960168ec:	2a1303e0 	mov	w0, w19
    960168f0:	f94013f5 	ldr	x21, [sp, #32]
    960168f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960168f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960168fc:	d65f03c0 	ret
	error = sdmmc_enable_hostv4(hsdmmc);
    96016900:	aa1403e0 	mov	x0, x20
    96016904:	940002ee 	bl	960174bc <sdmmc_enable_hostv4>
	if (error != TEGRABL_NO_ERROR) {
    96016908:	340000c0 	cbz	w0, 96016920 <sdmmc_init_controller+0x64>
    9601690c:	12005c00 	and	w0, w0, #0xffffff
    96016910:	32080c13 	orr	w19, w0, #0xf000000
		pr_error("Enable hostv4 failed\n");
    96016914:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96016918:	911b6800 	add	x0, x0, #0x6da
    9601691c:	17fffff3 	b	960168e8 <sdmmc_init_controller+0x2c>
	error = sdmmc_io_spare_update(hsdmmc);
    96016920:	aa1403e0 	mov	x0, x20
    96016924:	94000595 	bl	96017f78 <sdmmc_io_spare_update>
    96016928:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601692c:	35fffe00 	cbnz	w0, 960168ec <sdmmc_init_controller+0x30>
	sdmmc_set_tap_trim(hsdmmc);
    96016930:	aa1403e0 	mov	x0, x20
    96016934:	940005a1 	bl	96017fb8 <sdmmc_set_tap_trim>
	error = sdmmc_auto_calibrate(hsdmmc);
    96016938:	aa1403e0 	mov	x0, x20
    9601693c:	9400055a 	bl	96017ea4 <sdmmc_auto_calibrate>
	if (error != TEGRABL_NO_ERROR) {
    96016940:	34000080 	cbz	w0, 96016950 <sdmmc_init_controller+0x94>
		sdmmc_update_drv_settings(hsdmmc, instance);
    96016944:	2a1503e1 	mov	w1, w21
    96016948:	aa1403e0 	mov	x0, x20
    9601694c:	94000549 	bl	96017e70 <sdmmc_update_drv_settings>
	error = sdmmc_set_card_clock(hsdmmc, MODE_POWERON, 128);
    96016950:	52801002 	mov	w2, #0x80                  	// #128
    96016954:	52800021 	mov	w1, #0x1                   	// #1
    96016958:	aa1403e0 	mov	x0, x20
    9601695c:	940002e7 	bl	960174f8 <sdmmc_set_card_clock>
    96016960:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96016964:	35fffc40 	cbnz	w0, 960168ec <sdmmc_init_controller+0x30>
	error = sdmmc_enable_bus_power(hsdmmc);
    96016968:	aa1403e0 	mov	x0, x20
    9601696c:	94000314 	bl	960175bc <sdmmc_enable_bus_power>
    96016970:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96016974:	35fffbc0 	cbnz	w0, 960168ec <sdmmc_init_controller+0x30>
	error = sdmmc_set_interrupt_status_reg(hsdmmc);
    96016978:	aa1403e0 	mov	x0, x20
    9601697c:	94000323 	bl	96017608 <sdmmc_set_interrupt_status_reg>
    96016980:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96016984:	35fffb40 	cbnz	w0, 960168ec <sdmmc_init_controller+0x30>
	error = sdmmc_set_card_clock(hsdmmc, MODE_INIT, 128);
    96016988:	52801002 	mov	w2, #0x80                  	// #128
    9601698c:	52800001 	mov	w1, #0x0                   	// #0
    96016990:	aa1403e0 	mov	x0, x20
    96016994:	940002d9 	bl	960174f8 <sdmmc_set_card_clock>
    96016998:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601699c:	35fffa80 	cbnz	w0, 960168ec <sdmmc_init_controller+0x30>
	error = sdmmc_set_data_width(DATA_WIDTH_1BIT, hsdmmc);
    960169a0:	aa1403e1 	mov	x1, x20
}
    960169a4:	f94013f5 	ldr	x21, [sp, #32]
    960169a8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960169ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
	error = sdmmc_set_data_width(DATA_WIDTH_1BIT, hsdmmc);
    960169b0:	14000473 	b	96017b7c <sdmmc_set_data_width>

00000000960169b4 <sdmmc_enable_high_speed>:
tegrabl_error_t sdmmc_enable_high_speed(struct tegrabl_sdmmc *hsdmmc)
{
	uint8_t *buf;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    960169b4:	b40004e0 	cbz	x0, 96016a50 <sdmmc_enable_high_speed+0x9c>
	}

	buf = hsdmmc->ext_csd_buffer_address;

	/* Return if card version is less than 4. */
	if (hsdmmc->spec_version < 4U) {
    960169b8:	39409801 	ldrb	w1, [x0, #38]
    960169bc:	71000c3f 	cmp	w1, #0x3
    960169c0:	540000e8 	b.hi	960169dc <sdmmc_enable_high_speed+0x28>  // b.pmore
		return TEGRABL_NO_ERROR;
    960169c4:	52800000 	mov	w0, #0x0                   	// #0
		}
	}
	error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 3);
fail:
	return error;
}
    960169c8:	d65f03c0 	ret
		return TEGRABL_NO_ERROR;
    960169cc:	52800000 	mov	w0, #0x0                   	// #0
}
    960169d0:	f9400bf3 	ldr	x19, [sp, #16]
    960169d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960169d8:	d65f03c0 	ret
{
    960169dc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960169e0:	910003fd 	mov	x29, sp
    960169e4:	f9000bf3 	str	x19, [sp, #16]
    960169e8:	aa0003f3 	mov	x19, x0
		hsdmmc->high_speed_mode = 1;
    960169ec:	52800020 	mov	w0, #0x1                   	// #1
	sdmmc_toggle_high_speed(0, hsdmmc);
    960169f0:	aa1303e1 	mov	x1, x19
		hsdmmc->high_speed_mode = 1;
    960169f4:	39009260 	strb	w0, [x19, #36]
	sdmmc_toggle_high_speed(0, hsdmmc);
    960169f8:	52800000 	mov	w0, #0x0                   	// #0
    960169fc:	940004ba 	bl	96017ce4 <sdmmc_toggle_high_speed>
	if (hsdmmc->high_speed_mode != 0U) {
    96016a00:	39409260 	ldrb	w0, [x19, #36]
    96016a04:	34000200 	cbz	w0, 96016a44 <sdmmc_enable_high_speed+0x90>
		error = sdmmc_send_switch_command(SWITCH_HIGH_SPEED_ENABLE_ARG,
    96016a08:	52802000 	mov	w0, #0x100                 	// #256
    96016a0c:	aa1303e1 	mov	x1, x19
    96016a10:	72a07720 	movk	w0, #0x3b9, lsl #16
    96016a14:	97fffe35 	bl	960162e8 <sdmmc_send_switch_command>
		if (error != TEGRABL_NO_ERROR) {
    96016a18:	35fffdc0 	cbnz	w0, 960169d0 <sdmmc_enable_high_speed+0x1c>
		error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 1);
    96016a1c:	52800022 	mov	w2, #0x1                   	// #1
    96016a20:	52800041 	mov	w1, #0x2                   	// #2
    96016a24:	aa1303e0 	mov	x0, x19
    96016a28:	940002b4 	bl	960174f8 <sdmmc_set_card_clock>
		if (error != TEGRABL_NO_ERROR) {
    96016a2c:	35fffd20 	cbnz	w0, 960169d0 <sdmmc_enable_high_speed+0x1c>
		error = sdmmc_get_ext_csd(hsdmmc);
    96016a30:	aa1303e0 	mov	x0, x19
    96016a34:	97fffe53 	bl	96016380 <sdmmc_get_ext_csd>
		if (error != TEGRABL_NO_ERROR) {
    96016a38:	35fffcc0 	cbnz	w0, 960169d0 <sdmmc_enable_high_speed+0x1c>
		if (buf[ECSD_HS_TIMING_OFFSET] != 0U) {
    96016a3c:	39451660 	ldrb	w0, [x19, #325]
    96016a40:	35fffc60 	cbnz	w0, 960169cc <sdmmc_enable_high_speed+0x18>
	error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 3);
    96016a44:	52806020 	mov	w0, #0x301                 	// #769
    96016a48:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
    96016a4c:	17ffffe1 	b	960169d0 <sdmmc_enable_high_speed+0x1c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 14);
    96016a50:	5281c040 	mov	w0, #0xe02                 	// #3586
    96016a54:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
    96016a58:	d65f03c0 	ret

0000000096016a5c <sdmmc_init>:
{
    96016a5c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96016a60:	910003fd 	mov	x29, sp
    96016a64:	a90153f3 	stp	x19, x20, [sp, #16]
    96016a68:	a9025bf5 	stp	x21, x22, [sp, #32]
    96016a6c:	a90363f7 	stp	x23, x24, [sp, #48]
	if (hsdmmc == NULL) {
    96016a70:	b4001561 	cbz	x1, 96016d1c <sdmmc_init+0x2c0>
    96016a74:	2a0003f5 	mov	w21, w0
	if ((hsdmmc->initialized == true) && (flag != SKIP_INIT_UPDATE_CONFIG)) {
    96016a78:	39400020 	ldrb	w0, [x1]
    96016a7c:	12001c56 	and	w22, w2, #0xff
    96016a80:	aa0103f3 	mov	x19, x1
    96016a84:	340001a0 	cbz	w0, 96016ab8 <sdmmc_init+0x5c>
    96016a88:	71000adf 	cmp	w22, #0x2
    96016a8c:	54000160 	b.eq	96016ab8 <sdmmc_init+0x5c>  // b.none
		pr_info("sdmmc is already initialised\n");
    96016a90:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96016a94:	9119e000 	add	x0, x0, #0x678
    96016a98:	94002ef6 	bl	96022670 <tegrabl_printf>
		return TEGRABL_NO_ERROR;
    96016a9c:	52800014 	mov	w20, #0x0                   	// #0
}
    96016aa0:	2a1403e0 	mov	w0, w20
    96016aa4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96016aa8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96016aac:	a94363f7 	ldp	x23, x24, [sp, #48]
    96016ab0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96016ab4:	d65f03c0 	ret
	hsdmmc->base_addr = sdmmc_base_addr[instance];
    96016ab8:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96016abc:	91183000 	add	x0, x0, #0x60c
		hsdmmc->data_width = 4;
    96016ac0:	52800101 	mov	w1, #0x8                   	// #8
	hsdmmc->card_rca = (2U << RCA_OFFSET);
    96016ac4:	52a00054 	mov	w20, #0x20000               	// #131072
	hsdmmc->is_high_capacity_card = 1;
    96016ac8:	52800037 	mov	w23, #0x1                   	// #1
	hsdmmc->card_rca = (2U << RCA_OFFSET);
    96016acc:	b9000674 	str	w20, [x19, #4]
	hsdmmc->base_addr = sdmmc_base_addr[instance];
    96016ad0:	b8755800 	ldr	w0, [x0, w21, uxtw #2]
    96016ad4:	290b0275 	stp	w21, w0, [x19, #88]
	hsdmmc->sdmmc_boot_partition_size = 0;
    96016ad8:	5280a000 	mov	w0, #0x500                 	// #1280
    96016adc:	b8027260 	stur	w0, [x19, #39]
	hsdmmc->block_size_log2 = SDMMC_BLOCK_SIZE_LOG2;
    96016ae0:	d2800120 	mov	x0, #0x9                   	// #9
	hsdmmc->is_high_capacity_card = 1;
    96016ae4:	39009677 	strb	w23, [x19, #37]
	hsdmmc->block_size_log2 = SDMMC_BLOCK_SIZE_LOG2;
    96016ae8:	f2c1a800 	movk	x0, #0xd40, lsl #32
	hsdmmc->current_access_region = UNKNOWN_PARTITION;
    96016aec:	7802b27f 	sturh	wzr, [x19, #43]
	hsdmmc->block_size_log2 = SDMMC_BLOCK_SIZE_LOG2;
    96016af0:	f2e00060 	movk	x0, #0x3, lsl #48
    96016af4:	f9002260 	str	x0, [x19, #64]
	if (hsdmmc->device_type == DEVICE_TYPE_SD) {
    96016af8:	b9408660 	ldr	w0, [x19, #132]
	hsdmmc->erase_group_size = 0;
    96016afc:	f9003e7f 	str	xzr, [x19, #120]
		hsdmmc->data_width = 4;
    96016b00:	7100041f 	cmp	w0, #0x1
    96016b04:	52800080 	mov	w0, #0x4                   	// #4
    96016b08:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    96016b0c:	b9000e60 	str	w0, [x19, #12]
	if (((flag == SKIP_INIT) || (flag == SKIP_INIT_UPDATE_CONFIG)) &&
    96016b10:	510006c0 	sub	w0, w22, #0x1
    96016b14:	12001c00 	and	w0, w0, #0xff
    96016b18:	7100041f 	cmp	w0, #0x1
    96016b1c:	54000468 	b.hi	96016ba8 <sdmmc_init+0x14c>  // b.pmore
	instance = (uint8_t)hsdmmc->controller_id;
    96016b20:	12001eb8 	and	w24, w21, #0xff
	error = tegrabl_car_clk_enable(TEGRABL_MODULE_SDMMC, instance, NULL);
    96016b24:	d2800002 	mov	x2, #0x0                   	// #0
    96016b28:	2a1803e1 	mov	w1, w24
    96016b2c:	52800040 	mov	w0, #0x2                   	// #2
    96016b30:	94002367 	bl	9601f8cc <tegrabl_car_clk_enable>
	if (error != TEGRABL_NO_ERROR) {
    96016b34:	350003a0 	cbnz	w0, 96016ba8 <sdmmc_init+0x14c>
	error = tegrabl_car_rst_clear(TEGRABL_MODULE_SDMMC, instance);
    96016b38:	2a1803e1 	mov	w1, w24
    96016b3c:	52800040 	mov	w0, #0x2                   	// #2
    96016b40:	940023d7 	bl	9601fa9c <tegrabl_car_rst_clear>
	if (error != TEGRABL_NO_ERROR) {
    96016b44:	35000320 	cbnz	w0, 96016ba8 <sdmmc_init+0x14c>
	hsdmmc->card_rca = (2U << RCA_OFFSET);
    96016b48:	b9000674 	str	w20, [x19, #4]
	error = sdmmc_send_command(CMD_SEND_STATUS,
    96016b4c:	aa1303e4 	mov	x4, x19
    96016b50:	52800003 	mov	w3, #0x0                   	// #0
    96016b54:	52800022 	mov	w2, #0x1                   	// #1
    96016b58:	2a1403e1 	mov	w1, w20
    96016b5c:	528001a0 	mov	w0, #0xd                   	// #13
    96016b60:	97fffd2d 	bl	96016014 <sdmmc_send_command>
	if (error != TEGRABL_NO_ERROR) {
    96016b64:	35000220 	cbnz	w0, 96016ba8 <sdmmc_init+0x14c>
	error = sdmmc_verify_response(CMD_SWITCH, 1, hsdmmc);
    96016b68:	aa1303e2 	mov	x2, x19
    96016b6c:	2a1703e1 	mov	w1, w23
    96016b70:	528000c0 	mov	w0, #0x6                   	// #6
    96016b74:	97fffd80 	bl	96016174 <sdmmc_verify_response>
	if (((flag == SKIP_INIT) || (flag == SKIP_INIT_UPDATE_CONFIG)) &&
    96016b78:	35000180 	cbnz	w0, 96016ba8 <sdmmc_init+0x14c>
		sdmmc_get_hostv4_status(hsdmmc);
    96016b7c:	aa1303e0 	mov	x0, x19
    96016b80:	94000258 	bl	960174e0 <sdmmc_get_hostv4_status>
		error = sdmmc_get_ext_csd(hsdmmc);
    96016b84:	aa1303e0 	mov	x0, x19
    96016b88:	97fffdfe 	bl	96016380 <sdmmc_get_ext_csd>
    96016b8c:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    96016b90:	35fff880 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
		if (flag == SKIP_INIT_UPDATE_CONFIG) {
    96016b94:	71000adf 	cmp	w22, #0x2
    96016b98:	540002e0 	b.eq	96016bf4 <sdmmc_init+0x198>  // b.none
		hsdmmc->initialized = true;
    96016b9c:	52800020 	mov	w0, #0x1                   	// #1
    96016ba0:	39000260 	strb	w0, [x19]
    96016ba4:	17ffffbe 	b	96016a9c <sdmmc_init+0x40>
	error = sdmmc_clock_init(hsdmmc->controller_id, CLK_102_MHZ,
    96016ba8:	b9405a60 	ldr	w0, [x19, #88]
    96016bac:	5291ce01 	mov	w1, #0x8e70                	// #36464
    96016bb0:	b9428e62 	ldr	w2, [x19, #652]
    96016bb4:	72a00021 	movk	w1, #0x1, lsl #16
    96016bb8:	97fffcf5 	bl	96015f8c <sdmmc_clock_init>
    96016bbc:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016bc0:	35fff700 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_init_controller(hsdmmc, instance);
    96016bc4:	2a1503e1 	mov	w1, w21
    96016bc8:	aa1303e0 	mov	x0, x19
    96016bcc:	97ffff3c 	bl	960168bc <sdmmc_init_controller>
    96016bd0:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016bd4:	35fff660 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	if (hsdmmc->device_type == DEVICE_TYPE_SD)
    96016bd8:	b9408660 	ldr	w0, [x19, #132]
    96016bdc:	7100041f 	cmp	w0, #0x1
		error = sd_identify_card(hsdmmc);
    96016be0:	aa1303e0 	mov	x0, x19
	if (hsdmmc->device_type == DEVICE_TYPE_SD)
    96016be4:	54000201 	b.ne	96016c24 <sdmmc_init+0x1c8>  // b.any
		error = sd_identify_card(hsdmmc);
    96016be8:	940006a2 	bl	96018670 <sd_identify_card>
	error = sdmmc_enable_high_speed(hsdmmc);
    96016bec:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016bf0:	35fff580 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_select_mode_transfer(hsdmmc);
    96016bf4:	aa1303e0 	mov	x0, x19
    96016bf8:	9400051b 	bl	96018064 <sdmmc_select_mode_transfer>
    96016bfc:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016c00:	35fff500 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	if (hsdmmc->device_type != DEVICE_TYPE_SD) {
    96016c04:	b9408660 	ldr	w0, [x19, #132]
    96016c08:	7100041f 	cmp	w0, #0x1
    96016c0c:	54fffc80 	b.eq	96016b9c <sdmmc_init+0x140>  // b.none
		error = sdmmc_set_default_region(hsdmmc);
    96016c10:	aa1303e0 	mov	x0, x19
    96016c14:	9400043e 	bl	96017d0c <sdmmc_set_default_region>
    96016c18:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    96016c1c:	34fffc00 	cbz	w0, 96016b9c <sdmmc_init+0x140>
    96016c20:	17ffffa0 	b	96016aa0 <sdmmc_init+0x44>
	if (sdmmc_is_card_present(hsdmmc) != TEGRABL_NO_ERROR) {
    96016c24:	94000284 	bl	96017634 <sdmmc_is_card_present>
    96016c28:	35000800 	cbnz	w0, 96016d28 <sdmmc_init+0x2cc>
	error = sdmmc_send_command(CMD_IDLE_STATE, 0,
    96016c2c:	aa1303e4 	mov	x4, x19
    96016c30:	52800003 	mov	w3, #0x0                   	// #0
    96016c34:	52800002 	mov	w2, #0x0                   	// #0
    96016c38:	52800001 	mov	w1, #0x0                   	// #0
    96016c3c:	97fffcf6 	bl	96016014 <sdmmc_send_command>
    96016c40:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016c44:	35fff2e0 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	start_time = tegrabl_get_timestamp_us();
    96016c48:	9400240d 	bl	9601fc7c <tegrabl_get_timestamp_us>
		error = sdmmc_send_command(CMD_SEND_OCR, cmd1_arg,
    96016c4c:	52801017 	mov	w23, #0x80                  	// #128
	while (elapsed_time < timeout) {
    96016c50:	d28847f5 	mov	x21, #0x423f                	// #16959
	start_time = tegrabl_get_timestamp_us();
    96016c54:	aa0003f6 	mov	x22, x0
		error = sdmmc_send_command(CMD_SEND_OCR, cmd1_arg,
    96016c58:	72a80017 	movk	w23, #0x4000, lsl #16
	while (elapsed_time < timeout) {
    96016c5c:	f2a001f5 	movk	x21, #0xf, lsl #16
		error = sdmmc_send_command(CMD_SEND_OCR, cmd1_arg,
    96016c60:	aa1303e4 	mov	x4, x19
    96016c64:	52800003 	mov	w3, #0x0                   	// #0
    96016c68:	52800062 	mov	w2, #0x3                   	// #3
    96016c6c:	2a1703e1 	mov	w1, w23
    96016c70:	52800020 	mov	w0, #0x1                   	// #1
    96016c74:	97fffce8 	bl	96016014 <sdmmc_send_command>
    96016c78:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    96016c7c:	35000120 	cbnz	w0, 96016ca0 <sdmmc_init+0x244>
		ocr_reg = sdmmc_resp[0];
    96016c80:	b9401260 	ldr	w0, [x19, #16]
		if ((ocr_reg & OCR_READY_MASK) != 0UL) {
    96016c84:	37f80560 	tbnz	w0, #31, 96016d30 <sdmmc_init+0x2d4>
		elapsed_time = tegrabl_get_timestamp_us() - start_time;
    96016c88:	940023fd 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96016c8c:	cb160000 	sub	x0, x0, x22
	while (elapsed_time < timeout) {
    96016c90:	eb15001f 	cmp	x0, x21
    96016c94:	54fffe69 	b.ls	96016c60 <sdmmc_init+0x204>  // b.plast
		error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 10);
    96016c98:	528140d4 	mov	w20, #0xa06                 	// #2566
    96016c9c:	72a1e1f4 	movk	w20, #0xf0f, lsl #16
		pr_error("OCR failed, error = %x\n", error);
    96016ca0:	2a1403e1 	mov	w1, w20
    96016ca4:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96016ca8:	911a6400 	add	x0, x0, #0x699
    96016cac:	94002e71 	bl	96022670 <tegrabl_printf>
    96016cb0:	17ffff7c 	b	96016aa0 <sdmmc_init+0x44>
	power_class = sdmmc_get_power_class(hsdmmc);
    96016cb4:	aa1303e0 	mov	x0, x19
    96016cb8:	97fffc98 	bl	96015f18 <sdmmc_get_power_class>
	while (power_class > hsdmmc->max_power_class_supported) {
    96016cbc:	3940d663 	ldrb	w3, [x19, #53]
			hsdmmc->data_width = DATA_WIDTH_4BIT;
    96016cc0:	52800024 	mov	w4, #0x1                   	// #1
	while (power_class > hsdmmc->max_power_class_supported) {
    96016cc4:	6b00007f 	cmp	w3, w0
    96016cc8:	54000123 	b.cc	96016cec <sdmmc_init+0x290>  // b.lo, b.ul, b.last
	if (power_class != 0U) {
    96016ccc:	34000a40 	cbz	w0, 96016e14 <sdmmc_init+0x3b8>
		error = sdmmc_send_switch_command(cmd_arg, hsdmmc);
    96016cd0:	52a07762 	mov	w2, #0x3bb0000             	// #62586880
    96016cd4:	aa1303e1 	mov	x1, x19
    96016cd8:	2a002040 	orr	w0, w2, w0, lsl #8
    96016cdc:	97fffd83 	bl	960162e8 <sdmmc_send_switch_command>
    96016ce0:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016ce4:	35ffede0 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
    96016ce8:	1400004b 	b	96016e14 <sdmmc_init+0x3b8>
		if ((hsdmmc->data_width == DATA_WIDTH_8BIT) ||
    96016cec:	b9400e60 	ldr	w0, [x19, #12]
    96016cf0:	121d7800 	and	w0, w0, #0xfffffffb
    96016cf4:	7100081f 	cmp	w0, #0x2
    96016cf8:	540000a1 	b.ne	96016d0c <sdmmc_init+0x2b0>  // b.any
			hsdmmc->data_width = DATA_WIDTH_4BIT;
    96016cfc:	b9000e64 	str	w4, [x19, #12]
		power_class = sdmmc_get_power_class(hsdmmc);
    96016d00:	aa1303e0 	mov	x0, x19
    96016d04:	97fffc85 	bl	96015f18 <sdmmc_get_power_class>
    96016d08:	17ffffef 	b	96016cc4 <sdmmc_init+0x268>
		} else if ((hsdmmc->data_width == DATA_WIDTH_4BIT) ||
    96016d0c:	7100041f 	cmp	w0, #0x1
    96016d10:	54ffff81 	b.ne	96016d00 <sdmmc_init+0x2a4>  // b.any
			hsdmmc->data_width = DATA_WIDTH_1BIT;
    96016d14:	b9000e7f 	str	wzr, [x19, #12]
    96016d18:	17fffffa 	b	96016d00 <sdmmc_init+0x2a4>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
    96016d1c:	52816054 	mov	w20, #0xb02                 	// #2818
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 2);
    96016d20:	72a1e1f4 	movk	w20, #0xf0f, lsl #16
    96016d24:	17ffff5f 	b	96016aa0 <sdmmc_init+0x44>
    96016d28:	528041b4 	mov	w20, #0x20d                 	// #525
    96016d2c:	17fffffd 	b	96016d20 <sdmmc_init+0x2c4>
		(((ocr_reg & CARD_CAPACITY_MASK) != 0U) ? 1U : 0U);
    96016d30:	d35e7800 	ubfx	x0, x0, #30, #1
	hsdmmc->is_high_capacity_card =
    96016d34:	39009660 	strb	w0, [x19, #37]
	error = sdmmc_send_command(CMD_ALL_SEND_CID, 0,
    96016d38:	52800042 	mov	w2, #0x2                   	// #2
    96016d3c:	aa1303e4 	mov	x4, x19
    96016d40:	52800003 	mov	w3, #0x0                   	// #0
    96016d44:	52800001 	mov	w1, #0x0                   	// #0
    96016d48:	2a0203e0 	mov	w0, w2
    96016d4c:	97fffcb2 	bl	96016014 <sdmmc_send_command>
    96016d50:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016d54:	35ffea60 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_send_command(CMD_SET_RELATIVE_ADDRESS,
    96016d58:	b9400661 	ldr	w1, [x19, #4]
    96016d5c:	aa1303e4 	mov	x4, x19
    96016d60:	52800003 	mov	w3, #0x0                   	// #0
    96016d64:	52800022 	mov	w2, #0x1                   	// #1
    96016d68:	52800060 	mov	w0, #0x3                   	// #3
    96016d6c:	97fffcaa 	bl	96016014 <sdmmc_send_command>
    96016d70:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016d74:	35ffe960 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_send_command(CMD_SEND_CSD,
    96016d78:	b9400661 	ldr	w1, [x19, #4]
    96016d7c:	aa1303e4 	mov	x4, x19
    96016d80:	52800003 	mov	w3, #0x0                   	// #0
    96016d84:	52800042 	mov	w2, #0x2                   	// #2
    96016d88:	52800120 	mov	w0, #0x9                   	// #9
    96016d8c:	97fffca2 	bl	96016014 <sdmmc_send_command>
    96016d90:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016d94:	35ffe860 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_parse_csd(hsdmmc);
    96016d98:	aa1303e0 	mov	x0, x19
    96016d9c:	97fffcd7 	bl	960160f8 <sdmmc_parse_csd>
    96016da0:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016da4:	35ffe7e0 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_send_command(CMD_SELECT_DESELECT_CARD,
    96016da8:	b9400661 	ldr	w1, [x19, #4]
    96016dac:	aa1303e4 	mov	x4, x19
    96016db0:	52800003 	mov	w3, #0x0                   	// #0
    96016db4:	52800022 	mov	w2, #0x1                   	// #1
    96016db8:	528000e0 	mov	w0, #0x7                   	// #7
    96016dbc:	97fffc96 	bl	96016014 <sdmmc_send_command>
    96016dc0:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016dc4:	35ffe6e0 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_send_command(CMD_SEND_STATUS,
    96016dc8:	b9400661 	ldr	w1, [x19, #4]
    96016dcc:	aa1303e4 	mov	x4, x19
    96016dd0:	52800003 	mov	w3, #0x0                   	// #0
    96016dd4:	52800022 	mov	w2, #0x1                   	// #1
    96016dd8:	528001a0 	mov	w0, #0xd                   	// #13
    96016ddc:	97fffc8e 	bl	96016014 <sdmmc_send_command>
    96016de0:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016de4:	35ffe5e0 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_card_transfer_mode(hsdmmc);
    96016de8:	aa1303e0 	mov	x0, x19
    96016dec:	97fffd5a 	bl	96016354 <sdmmc_card_transfer_mode>
    96016df0:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016df4:	35ffe560 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	error = sdmmc_get_ext_csd(hsdmmc);
    96016df8:	aa1303e0 	mov	x0, x19
    96016dfc:	97fffd61 	bl	96016380 <sdmmc_get_ext_csd>
    96016e00:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96016e04:	35ffe4e0 	cbnz	w0, 96016aa0 <sdmmc_init+0x44>
	if (hsdmmc->spec_version < 4U) {
    96016e08:	39409a60 	ldrb	w0, [x19, #38]
    96016e0c:	71000c1f 	cmp	w0, #0x3
    96016e10:	54fff528 	b.hi	96016cb4 <sdmmc_init+0x258>  // b.pmore
	error = sdmmc_enable_high_speed(hsdmmc);
    96016e14:	aa1303e0 	mov	x0, x19
    96016e18:	97fffee7 	bl	960169b4 <sdmmc_enable_high_speed>
    96016e1c:	17ffff74 	b	96016bec <sdmmc_init+0x190>

0000000096016e20 <sdmmc_enable_timing_hs400>:

tegrabl_error_t sdmmc_enable_timing_hs400(struct tegrabl_sdmmc *hsdmmc, uint8_t mode)
{
    96016e20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96016e24:	910003fd 	mov	x29, sp
    96016e28:	f9000bf3 	str	x19, [sp, #16]
    96016e2c:	aa0003f3 	mov	x19, x0
    96016e30:	12001c20 	and	w0, w1, #0xff
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint32_t cmd_arg;
	uint8_t timing_interface = 0;

	if (mode == TEGRABL_SDMMC_MODE_HS200) {
    96016e34:	7100081f 	cmp	w0, #0x2
    96016e38:	54000060 	b.eq	96016e44 <sdmmc_enable_timing_hs400+0x24>  // b.none
		timing_interface = TIMING_INTERFACE_HS200;
	} else if (mode == TEGRABL_SDMMC_MODE_HS400) {
		timing_interface = TIMING_INTERFACE_HS400;
	} else {
		timing_interface = TIMING_INTERFACE_HIGH_SPEED;
    96016e3c:	71000c1f 	cmp	w0, #0x3
    96016e40:	1a9f0400 	csinc	w0, w0, wzr, eq  // eq = none
	}

	cmd_arg = ((uint32_t)WRITE_BYTE << 24) | ((uint32_t)ECSD_HS_TIMING_OFFSET << 16) |
				((uint32_t)timing_interface << 8);
	error = sdmmc_send_switch_command(cmd_arg, hsdmmc);
    96016e44:	52a07722 	mov	w2, #0x3b90000             	// #62455808
    96016e48:	aa1303e1 	mov	x1, x19
    96016e4c:	2a002040 	orr	w0, w2, w0, lsl #8
    96016e50:	97fffd26 	bl	960162e8 <sdmmc_send_switch_command>
	if (error != TEGRABL_NO_ERROR) {
    96016e54:	350000e0 	cbnz	w0, 96016e70 <sdmmc_enable_timing_hs400+0x50>
		goto fail;
	}

	/* Set the clock for data transfer. */
	error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 0);
    96016e58:	aa1303e0 	mov	x0, x19
		goto fail;
	}

fail:
	return error;
}
    96016e5c:	f9400bf3 	ldr	x19, [sp, #16]
    96016e60:	a8c27bfd 	ldp	x29, x30, [sp], #32
	error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 0);
    96016e64:	52800002 	mov	w2, #0x0                   	// #0
    96016e68:	52800041 	mov	w1, #0x2                   	// #2
    96016e6c:	140001a3 	b	960174f8 <sdmmc_set_card_clock>
}
    96016e70:	f9400bf3 	ldr	x19, [sp, #16]
    96016e74:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96016e78:	d65f03c0 	ret

0000000096016e7c <sdmmc_select_access_region>:
{
	uint32_t cmd_arg;
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint32_t partition_mask;

	if (hsdmmc == NULL) {
    96016e7c:	b4000280 	cbz	x0, 96016ecc <sdmmc_select_access_region+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 15);
		goto fail;
	}

	/* Check access region argument range. */
	if (region >= NUM_PARTITION) {
    96016e80:	71000c3f 	cmp	w1, #0x3
    96016e84:	540002a8 	b.hi	96016ed8 <sdmmc_select_access_region+0x5c>  // b.pmore
{
    96016e88:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	cmd_arg |= SWITCH_SELECT_PARTITION_ARG;

	pr_trace("Trying to select the region\n");

	/* Send the switch command  to change the current partitions access. */
	error = sdmmc_send_switch_command(cmd_arg, hsdmmc);
    96016e8c:	52a07662 	mov	w2, #0x3b30000             	// #62062592
{
    96016e90:	910003fd 	mov	x29, sp
    96016e94:	a90153f3 	stp	x19, x20, [sp, #16]
    96016e98:	2a0103f4 	mov	w20, w1
    96016e9c:	aa0003f3 	mov	x19, x0
	error = sdmmc_send_switch_command(cmd_arg, hsdmmc);
    96016ea0:	aa0003e1 	mov	x1, x0
	cmd_arg = hsdmmc->boot_config & (~partition_mask);
    96016ea4:	b9405000 	ldr	w0, [x0, #80]
    96016ea8:	121d7000 	and	w0, w0, #0xfffffff8
	cmd_arg |= (uint32_t)region;
    96016eac:	2a000280 	orr	w0, w20, w0
	error = sdmmc_send_switch_command(cmd_arg, hsdmmc);
    96016eb0:	2a002040 	orr	w0, w2, w0, lsl #8
    96016eb4:	97fffd0d 	bl	960162e8 <sdmmc_send_switch_command>
	if (error != TEGRABL_NO_ERROR) {
    96016eb8:	35000040 	cbnz	w0, 96016ec0 <sdmmc_select_access_region+0x44>
		goto fail;
	}

	/* Store the access region in hsdmmc. */
	hsdmmc->current_access_region = region;
    96016ebc:	b9002a74 	str	w20, [x19, #40]

	pr_debug("Selected access_region = %d\n", region);

fail:
	return error;
}
    96016ec0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96016ec4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96016ec8:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 15);
    96016ecc:	5281e040 	mov	w0, #0xf02                 	// #3842
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 16);
    96016ed0:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    96016ed4:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 16);
    96016ed8:	52820040 	mov	w0, #0x1002                	// #4098
    96016edc:	17fffffd 	b	96016ed0 <sdmmc_select_access_region+0x54>

0000000096016ee0 <sdmmc_io>:
{
    96016ee0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	if ((dev == NULL) || (buf == NULL) || (hsdmmc == NULL)) {
    96016ee4:	f100001f 	cmp	x0, #0x0
    96016ee8:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    96016eec:	910003fd 	mov	x29, sp
    96016ef0:	a90153f3 	stp	x19, x20, [sp, #16]
    96016ef4:	a9025bf5 	stp	x21, x22, [sp, #32]
    96016ef8:	a90363f7 	stp	x23, x24, [sp, #48]
    96016efc:	aa0103f7 	mov	x23, x1
    96016f00:	a9046bf9 	stp	x25, x26, [sp, #64]
    96016f04:	a90573fb 	stp	x27, x28, [sp, #80]
	if ((dev == NULL) || (buf == NULL) || (hsdmmc == NULL)) {
    96016f08:	54000880 	b.eq	96017018 <sdmmc_io+0x138>  // b.none
    96016f0c:	aa0503f4 	mov	x20, x5
    96016f10:	b4000845 	cbz	x5, 96017018 <sdmmc_io+0x138>
    96016f14:	aa0003f5 	mov	x21, x0
	hsdmmc->device_status = DEVICE_STATUS_IDLE;
    96016f18:	b90020bf 	str	wzr, [x5, #32]
	if (hsdmmc->device_type != DEVICE_TYPE_SD) {
    96016f1c:	b94084a0 	ldr	w0, [x5, #132]
    96016f20:	2a0203f9 	mov	w25, w2
    96016f24:	2a0303f8 	mov	w24, w3
    96016f28:	12001c9b 	and	w27, w4, #0xff
    96016f2c:	12001cfa 	and	w26, w7, #0xff
    96016f30:	7100041f 	cmp	w0, #0x1
    96016f34:	540001c1 	b.ne	96016f6c <sdmmc_io+0x8c>  // b.any
	if ((block > (dev->block_count - 1U)) ||
    96016f38:	b94026a0 	ldr	w0, [x21, #36]
    96016f3c:	51000401 	sub	w1, w0, #0x1
    96016f40:	6b19003f 	cmp	w1, w25
    96016f44:	54000743 	b.cc	9601702c <sdmmc_io+0x14c>  // b.lo, b.ul, b.last
		((block + count) > (dev->block_count))) {
    96016f48:	0b180321 	add	w1, w25, w24
	if ((block > (dev->block_count - 1U)) ||
    96016f4c:	6b01001f 	cmp	w0, w1
    96016f50:	540006e3 	b.cc	9601702c <sdmmc_io+0x14c>  // b.lo, b.ul, b.last
	uint32_t i = 0;
    96016f54:	52800016 	mov	w22, #0x0                   	// #0
		current_sectors =
    96016f58:	529ffffc 	mov	w28, #0xffff                	// #65535
	while (i < count) {
    96016f5c:	6b1802df 	cmp	w22, w24
    96016f60:	54000263 	b.cc	96016fac <sdmmc_io+0xcc>  // b.lo, b.ul, b.last
fail:
    96016f64:	52800013 	mov	w19, #0x0                   	// #0
    96016f68:	14000024 	b	96016ff8 <sdmmc_io+0x118>
    96016f6c:	2a0603e1 	mov	w1, w6
		if (device == DEVICE_BOOT) {
    96016f70:	710004df 	cmp	w6, #0x1
    96016f74:	54000141 	b.ne	96016f9c <sdmmc_io+0xbc>  // b.any
			error = sdmmc_select_access_region(hsdmmc, USER_PARTITION);
    96016f78:	aa1403e0 	mov	x0, x20
    96016f7c:	97ffffc0 	bl	96016e7c <sdmmc_select_access_region>
    96016f80:	2a0003f3 	mov	w19, w0
			if (error != TEGRABL_NO_ERROR) {
    96016f84:	34fffda0 	cbz	w0, 96016f38 <sdmmc_io+0x58>
		pr_error("SDMMC IO: exit error = %x\n", error);
    96016f88:	2a1303e1 	mov	w1, w19
    96016f8c:	b0000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96016f90:	911bcc00 	add	x0, x0, #0x6f3
    96016f94:	94002db7 	bl	96022670 <tegrabl_printf>
	return error;
    96016f98:	14000018 	b	96016ff8 <sdmmc_io+0x118>
		} else if (device == DEVICE_USER) {
    96016f9c:	710008df 	cmp	w6, #0x2
    96016fa0:	54000421 	b.ne	96017024 <sdmmc_io+0x144>  // b.any
			error = sdmmc_select_access_region(hsdmmc, USER_PARTITION);
    96016fa4:	52800001 	mov	w1, #0x0                   	// #0
    96016fa8:	17fffff4 	b	96016f78 <sdmmc_io+0x98>
			(count - i) > MAX_SDMA_TRANSFER ? MAX_SDMA_TRANSFER : (count - i);
    96016fac:	4b160315 	sub	w21, w24, w22
		error = sdmmc_block_io(block + i, current_sectors, pbuf, is_write,
    96016fb0:	2a1a03e5 	mov	w5, w26
		current_sectors =
    96016fb4:	6b1c02bf 	cmp	w21, w28
		error = sdmmc_block_io(block + i, current_sectors, pbuf, is_write,
    96016fb8:	aa1403e4 	mov	x4, x20
		current_sectors =
    96016fbc:	1a9c92b5 	csel	w21, w21, w28, ls  // ls = plast
		error = sdmmc_block_io(block + i, current_sectors, pbuf, is_write,
    96016fc0:	2a1b03e3 	mov	w3, w27
    96016fc4:	aa1703e2 	mov	x2, x23
    96016fc8:	2a1503e1 	mov	w1, w21
    96016fcc:	0b1902c0 	add	w0, w22, w25
    96016fd0:	97fffd57 	bl	9601652c <sdmmc_block_io>
    96016fd4:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    96016fd8:	35fffd80 	cbnz	w0, 96016f88 <sdmmc_io+0xa8>
		pbuf += (current_sectors << hsdmmc->block_size_log2);
    96016fdc:	b9404280 	ldr	w0, [x20, #64]
		i += current_sectors;
    96016fe0:	0b1502d6 	add	w22, w22, w21
		pbuf += (current_sectors << hsdmmc->block_size_log2);
    96016fe4:	1ac022b5 	lsl	w21, w21, w0
    96016fe8:	8b1502f7 	add	x23, x23, x21
		if (is_non_blocking == true) {
    96016fec:	34fffb9a 	cbz	w26, 96016f5c <sdmmc_io+0x7c>
			hsdmmc->last_xfer_blocks = i;
    96016ff0:	b902ba96 	str	w22, [x20, #696]
			hsdmmc->last_xfer_buf = pbuf;
    96016ff4:	f9016297 	str	x23, [x20, #704]
}
    96016ff8:	2a1303e0 	mov	w0, w19
    96016ffc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017000:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96017004:	a94363f7 	ldp	x23, x24, [sp, #48]
    96017008:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601700c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96017010:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96017014:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
    96017018:	52818053 	mov	w19, #0xc02                 	// #3074
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    9601701c:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
    96017020:	17ffffda 	b	96016f88 <sdmmc_io+0xa8>
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 13);
    96017024:	5281a053 	mov	w19, #0xd02                 	// #3330
    96017028:	17fffffd 	b	9601701c <sdmmc_io+0x13c>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    9601702c:	52800093 	mov	w19, #0x4                   	// #4
    96017030:	17fffffb 	b	9601701c <sdmmc_io+0x13c>

0000000096017034 <sdmmc_set_bus_width>:
{
	uint32_t cmd_arg;
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint32_t bus_width;

	if (hsdmmc == NULL) {
    96017034:	b4000280 	cbz	x0, 96017084 <sdmmc_set_bus_width+0x50>
{
    96017038:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	/* Prepare argument for switch command to change bus width. */
	bus_width = hsdmmc->data_width | (hsdmmc->enhanced_strobe ? 1UL : 0UL) << 7;
	cmd_arg = SWITCH_BUS_WIDTH_ARG | (bus_width << SWITCH_BUS_WIDTH_OFFSET);

	/* Send the switch command. */
	error = sdmmc_send_switch_command(cmd_arg, hsdmmc);
    9601703c:	52a076e2 	mov	w2, #0x3b70000             	// #62324736
{
    96017040:	910003fd 	mov	x29, sp
    96017044:	f9000bf3 	str	x19, [sp, #16]
    96017048:	aa0003f3 	mov	x19, x0
	bus_width = hsdmmc->data_width | (hsdmmc->enhanced_strobe ? 1UL : 0UL) << 7;
    9601704c:	394a5000 	ldrb	w0, [x0, #660]
    96017050:	b9400e61 	ldr	w1, [x19, #12]
    96017054:	7100001f 	cmp	w0, #0x0
    96017058:	1a9f07e0 	cset	w0, ne  // ne = any
    9601705c:	2a001c20 	orr	w0, w1, w0, lsl #7
	error = sdmmc_send_switch_command(cmd_arg, hsdmmc);
    96017060:	aa1303e1 	mov	x1, x19
    96017064:	2a002040 	orr	w0, w2, w0, lsl #8
    96017068:	97fffca0 	bl	960162e8 <sdmmc_send_switch_command>
	if (error != TEGRABL_NO_ERROR) {
    9601706c:	35000120 	cbnz	w0, 96017090 <sdmmc_set_bus_width+0x5c>
		goto fail;
	}

	/* Set the controller register corresponding to bus width. */
	error = sdmmc_set_data_width(hsdmmc->data_width, hsdmmc);
    96017070:	aa1303e1 	mov	x1, x19
    96017074:	b9400e60 	ldr	w0, [x19, #12]

fail:
	return error;
}
    96017078:	f9400bf3 	ldr	x19, [sp, #16]
    9601707c:	a8c27bfd 	ldp	x29, x30, [sp], #32
	error = sdmmc_set_data_width(hsdmmc->data_width, hsdmmc);
    96017080:	140002bf 	b	96017b7c <sdmmc_set_data_width>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 17);
    96017084:	52822040 	mov	w0, #0x1102                	// #4354
    96017088:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    9601708c:	d65f03c0 	ret
    96017090:	f9400bf3 	ldr	x19, [sp, #16]
    96017094:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017098:	d65f03c0 	ret

000000009601709c <sdmmc_erase>:
 *
 *  @return TEGRABL_NO_ERROR if success, error code if fails.
 */
tegrabl_error_t sdmmc_erase(tegrabl_bdev_t *dev, bnum_t block, bnum_t count,
	struct tegrabl_sdmmc *hsdmmc, sdmmc_device device)
{
    9601709c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((dev == NULL) || (hsdmmc == NULL)) {
    960170a0:	f100001f 	cmp	x0, #0x0
    960170a4:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    960170a8:	910003fd 	mov	x29, sp
    960170ac:	a90153f3 	stp	x19, x20, [sp, #16]
    960170b0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960170b4:	a90363f7 	stp	x23, x24, [sp, #48]
	if ((dev == NULL) || (hsdmmc == NULL)) {
    960170b8:	54000f40 	b.eq	960172a0 <sdmmc_erase+0x204>  // b.none
    960170bc:	2a0103f6 	mov	w22, w1
    960170c0:	aa0003f7 	mov	x23, x0
    960170c4:	2a0203f5 	mov	w21, w2
    960170c8:	aa0303f3 	mov	x19, x3
    960170cc:	2a0403e1 	mov	w1, w4
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 18);
		goto fail;
	}

	/* check for the correct region */
	if (device == DEVICE_BOOT) {
    960170d0:	7100049f 	cmp	w4, #0x1
    960170d4:	54000361 	b.ne	96017140 <sdmmc_erase+0xa4>  // b.any
		pr_trace("looking in boot partitions\n");
		error = sdmmc_select_access_region(hsdmmc, BOOT_PARTITION_1);
    960170d8:	aa1303e0 	mov	x0, x19
    960170dc:	97ffff68 	bl	96016e7c <sdmmc_select_access_region>
    960170e0:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    960170e4:	35000e20 	cbnz	w0, 960172a8 <sdmmc_erase+0x20c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 19);
		goto fail;
	}

	/* Check for boundary condition od the input bio device. */
	if ((block > (dev->block_count - 1U)) ||
    960170e8:	b94026e0 	ldr	w0, [x23, #36]
    960170ec:	51000401 	sub	w1, w0, #0x1
    960170f0:	6b16003f 	cmp	w1, w22
    960170f4:	54000e83 	b.cc	960172c4 <sdmmc_erase+0x228>  // b.lo, b.ul, b.last
		((block + count) > (dev->block_count))) {
    960170f8:	0b1502c1 	add	w1, w22, w21
	if ((block > (dev->block_count - 1U)) ||
    960170fc:	6b01001f 	cmp	w0, w1
    96017100:	54000e23 	b.cc	960172c4 <sdmmc_erase+0x228>  // b.lo, b.ul, b.last
	error = sdmmc_send_switch_command(SWITCH_HIGH_CAPACITY_ERASE_ARG, hsdmmc);
    96017104:	52802000 	mov	w0, #0x100                 	// #256
    96017108:	aa1303e1 	mov	x1, x19
    9601710c:	72a075e0 	movk	w0, #0x3af, lsl #16
    96017110:	97fffc76 	bl	960162e8 <sdmmc_send_switch_command>
    96017114:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96017118:	35000380 	cbnz	w0, 96017188 <sdmmc_erase+0xec>
		temp_num_sector = end_sector;
    9601711c:	52940017 	mov	w23, #0xa000                	// #40960
    96017120:	72a001f7 	movk	w23, #0xf, lsl #16
	while (num_sectors > 0U) {
    96017124:	35000175 	cbnz	w21, 96017150 <sdmmc_erase+0xb4>
fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_error("Erase command failed, error = %x\n", error);
	}
	return error;
}
    96017128:	2a1403e0 	mov	w0, w20
    9601712c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017130:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96017134:	a94363f7 	ldp	x23, x24, [sp, #48]
    96017138:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601713c:	d65f03c0 	ret
	} else if (device == DEVICE_USER) {
    96017140:	7100089f 	cmp	w4, #0x2
    96017144:	54000bc1 	b.ne	960172bc <sdmmc_erase+0x220>  // b.any
		error = sdmmc_select_access_region(hsdmmc, USER_PARTITION);
    96017148:	52800001 	mov	w1, #0x0                   	// #0
    9601714c:	17ffffe3 	b	960170d8 <sdmmc_erase+0x3c>
		temp_num_sector = end_sector;
    96017150:	7143eabf 	cmp	w21, #0xfa, lsl #12
    96017154:	1a9792a0 	csel	w0, w21, w23, ls  // ls = plast
    96017158:	290903b6 	stp	w22, w0, [x29, #72]
					BOOT_PARTITION_1 ||
    9601715c:	b9402a60 	ldr	w0, [x19, #40]
    96017160:	51000400 	sub	w0, w0, #0x1
		if (hsdmmc->current_access_region ==
    96017164:	7100041f 	cmp	w0, #0x1
    96017168:	54000148 	b.hi	96017190 <sdmmc_erase+0xf4>  // b.pmore
			error = sdmmc_get_correct_boot_block(&temp_start_sector,
    9601716c:	aa1303e2 	mov	x2, x19
    96017170:	910133a1 	add	x1, x29, #0x4c
    96017174:	910123a0 	add	x0, x29, #0x48
    96017178:	9400030a 	bl	96017da0 <sdmmc_get_correct_boot_block>
			if (error != TEGRABL_NO_ERROR) {
    9601717c:	340000a0 	cbz	w0, 96017190 <sdmmc_erase+0xf4>
    96017180:	12005c00 	and	w0, w0, #0xffffff
    96017184:	32080c00 	orr	w0, w0, #0xf000000
    96017188:	2a0003f4 	mov	w20, w0
    9601718c:	14000047 	b	960172a8 <sdmmc_erase+0x20c>
	uint32_t unalign_start = *start_sector % hsdmmc->erase_group_size;
    96017190:	b9407a60 	ldr	w0, [x19, #120]
	uint32_t unalign_count = *num_sector % hsdmmc->erase_group_size;
    96017194:	294913a1 	ldp	w1, w4, [x29, #72]
	uint32_t unalign_start = *start_sector % hsdmmc->erase_group_size;
    96017198:	1ac00822 	udiv	w2, w1, w0
	uint32_t unalign_count = *num_sector % hsdmmc->erase_group_size;
    9601719c:	1ac00883 	udiv	w3, w4, w0
	uint32_t unalign_start = *start_sector % hsdmmc->erase_group_size;
    960171a0:	1b008442 	msub	w2, w2, w0, w1
	uint32_t unalign_count = *num_sector % hsdmmc->erase_group_size;
    960171a4:	1b009063 	msub	w3, w3, w0, w4
	if (unalign_start != 0U) {
    960171a8:	340000e2 	cbz	w2, 960171c4 <sdmmc_erase+0x128>
		temp = hsdmmc->erase_group_size - unalign_start;
    960171ac:	4b020005 	sub	w5, w0, w2
		if (*num_sector > temp) {
    960171b0:	6b05009f 	cmp	w4, w5
    960171b4:	54000049 	b.ls	960171bc <sdmmc_erase+0x120>  // b.plast
			*num_sector = temp;
    960171b8:	b9004fa5 	str	w5, [x29, #76]
		*arg = 0x1;
    960171bc:	52800038 	mov	w24, #0x1                   	// #1
    960171c0:	14000002 	b	960171c8 <sdmmc_erase+0x12c>
	*arg = 0x0;
    960171c4:	52800018 	mov	w24, #0x0                   	// #0
	if ((unalign_count != 0U) && (unalign_start == 0U)) {
    960171c8:	7100007f 	cmp	w3, #0x0
    960171cc:	7a401840 	ccmp	w2, #0x0, #0x0, ne  // ne = any
    960171d0:	540000e1 	b.ne	960171ec <sdmmc_erase+0x150>  // b.any
		if (*num_sector < hsdmmc->erase_group_size) {
    960171d4:	b9404fa2 	ldr	w2, [x29, #76]
    960171d8:	6b02001f 	cmp	w0, w2
    960171dc:	540005e8 	b.hi	96017298 <sdmmc_erase+0x1fc>  // b.pmore
			*num_sector = (*num_sector / hsdmmc->erase_group_size) *
    960171e0:	1ac00842 	udiv	w2, w2, w0
    960171e4:	1b007c40 	mul	w0, w2, w0
    960171e8:	b9004fa0 	str	w0, [x29, #76]
		error = sdmmc_send_command(CMD_ERASE_GROUP_START,
    960171ec:	aa1303e4 	mov	x4, x19
    960171f0:	52800003 	mov	w3, #0x0                   	// #0
    960171f4:	52800022 	mov	w2, #0x1                   	// #1
    960171f8:	52800460 	mov	w0, #0x23                  	// #35
    960171fc:	97fffb86 	bl	96016014 <sdmmc_send_command>
		if (error != TEGRABL_NO_ERROR) {
    96017200:	35fffc40 	cbnz	w0, 96017188 <sdmmc_erase+0xec>
					temp_start_sector + temp_num_sector - 1U,
    96017204:	294903a1 	ldp	w1, w0, [x29, #72]
		error = sdmmc_send_command(CMD_ERASE_GROUP_END,
    96017208:	aa1303e4 	mov	x4, x19
    9601720c:	52800003 	mov	w3, #0x0                   	// #0
    96017210:	52800022 	mov	w2, #0x1                   	// #1
					temp_start_sector + temp_num_sector - 1U,
    96017214:	0b000021 	add	w1, w1, w0
		error = sdmmc_send_command(CMD_ERASE_GROUP_END,
    96017218:	52800480 	mov	w0, #0x24                  	// #36
    9601721c:	51000421 	sub	w1, w1, #0x1
    96017220:	97fffb7d 	bl	96016014 <sdmmc_send_command>
		if (error != TEGRABL_NO_ERROR) {
    96017224:	35fffb20 	cbnz	w0, 96017188 <sdmmc_erase+0xec>
		error = sdmmc_send_command(CMD_ERASE,
    96017228:	aa1303e4 	mov	x4, x19
    9601722c:	52800003 	mov	w3, #0x0                   	// #0
    96017230:	52800102 	mov	w2, #0x8                   	// #8
    96017234:	2a1803e1 	mov	w1, w24
    96017238:	528004c0 	mov	w0, #0x26                  	// #38
    9601723c:	97fffb76 	bl	96016014 <sdmmc_send_command>
		if (error != TEGRABL_NO_ERROR) {
    96017240:	35fffa40 	cbnz	w0, 96017188 <sdmmc_erase+0xec>
		error = sdmmc_verify_response(CMD_ERASE, 1, hsdmmc);
    96017244:	aa1303e2 	mov	x2, x19
    96017248:	52800021 	mov	w1, #0x1                   	// #1
    9601724c:	528004c0 	mov	w0, #0x26                  	// #38
    96017250:	97fffbc9 	bl	96016174 <sdmmc_verify_response>
		if (error != TEGRABL_NO_ERROR) {
    96017254:	35fff9a0 	cbnz	w0, 96017188 <sdmmc_erase+0xec>
			error = sdmmc_send_command(CMD_SEND_STATUS,
    96017258:	b9400661 	ldr	w1, [x19, #4]
    9601725c:	aa1303e4 	mov	x4, x19
    96017260:	52800003 	mov	w3, #0x0                   	// #0
    96017264:	52800022 	mov	w2, #0x1                   	// #1
    96017268:	528001a0 	mov	w0, #0xd                   	// #13
    9601726c:	97fffb6a 	bl	96016014 <sdmmc_send_command>
			if (error != TEGRABL_NO_ERROR) {
    96017270:	35fff8c0 	cbnz	w0, 96017188 <sdmmc_erase+0xec>
			if (sdmmc_verify_response(CMD_SEND_STATUS, 1, hsdmmc) != TEGRABL_NO_ERROR) {
    96017274:	aa1303e2 	mov	x2, x19
    96017278:	52800021 	mov	w1, #0x1                   	// #1
    9601727c:	528001a0 	mov	w0, #0xd                   	// #13
    96017280:	97fffbbd 	bl	96016174 <sdmmc_verify_response>
    96017284:	35fffea0 	cbnz	w0, 96017258 <sdmmc_erase+0x1bc>
		num_sectors -= temp_num_sector;
    96017288:	b9404fa0 	ldr	w0, [x29, #76]
    9601728c:	4b0002b5 	sub	w21, w21, w0
		start_sector += temp_num_sector;
    96017290:	0b0002d6 	add	w22, w22, w0
    96017294:	17ffffa4 	b	96017124 <sdmmc_erase+0x88>
			*arg = 0x1;
    96017298:	52800038 	mov	w24, #0x1                   	// #1
    9601729c:	17ffffd4 	b	960171ec <sdmmc_erase+0x150>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 18);
    960172a0:	52824054 	mov	w20, #0x1202                	// #4610
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 20);
    960172a4:	72a1e1f4 	movk	w20, #0xf0f, lsl #16
		pr_error("Erase command failed, error = %x\n", error);
    960172a8:	2a1403e1 	mov	w1, w20
    960172ac:	90000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960172b0:	91194c00 	add	x0, x0, #0x653
    960172b4:	94002cef 	bl	96022670 <tegrabl_printf>
	return error;
    960172b8:	17ffff9c 	b	96017128 <sdmmc_erase+0x8c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 19);
    960172bc:	52826054 	mov	w20, #0x1302                	// #4866
    960172c0:	17fffff9 	b	960172a4 <sdmmc_erase+0x208>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 20);
    960172c4:	52828054 	mov	w20, #0x1402                	// #5122
    960172c8:	17fffff7 	b	960172a4 <sdmmc_erase+0x208>

00000000960172cc <sdmmc_send_status>:

tegrabl_error_t sdmmc_send_status(struct tegrabl_sdmmc *hsdmmc)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    960172cc:	b4000240 	cbz	x0, 96017314 <sdmmc_send_status+0x48>
{
    960172d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 22);
		goto fail;
	}

	/* Send status to the controller. */
	error = sdmmc_send_command(CMD_SEND_STATUS, hsdmmc->card_rca, RESP_TYPE_R1, 0, hsdmmc);
    960172d4:	aa0003e4 	mov	x4, x0
    960172d8:	52800003 	mov	w3, #0x0                   	// #0
    960172dc:	52800022 	mov	w2, #0x1                   	// #1
{
    960172e0:	910003fd 	mov	x29, sp
    960172e4:	f9000bf3 	str	x19, [sp, #16]
    960172e8:	aa0003f3 	mov	x19, x0
	error = sdmmc_send_command(CMD_SEND_STATUS, hsdmmc->card_rca, RESP_TYPE_R1, 0, hsdmmc);
    960172ec:	528001a0 	mov	w0, #0xd                   	// #13
    960172f0:	b9400661 	ldr	w1, [x19, #4]
    960172f4:	97fffb48 	bl	96016014 <sdmmc_send_command>
	if (error != TEGRABL_NO_ERROR) {
    960172f8:	35000140 	cbnz	w0, 96017320 <sdmmc_send_status+0x54>
		goto fail;
	}

	/* Verify the response of the switch command. */
	error = sdmmc_verify_response(CMD_SWITCH, 1, hsdmmc);
    960172fc:	aa1303e2 	mov	x2, x19
		goto fail;
	}

fail:
	return error;
}
    96017300:	f9400bf3 	ldr	x19, [sp, #16]
    96017304:	a8c27bfd 	ldp	x29, x30, [sp], #32
	error = sdmmc_verify_response(CMD_SWITCH, 1, hsdmmc);
    96017308:	52800021 	mov	w1, #0x1                   	// #1
    9601730c:	528000c0 	mov	w0, #0x6                   	// #6
    96017310:	17fffb99 	b	96016174 <sdmmc_verify_response>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 22);
    96017314:	5282c040 	mov	w0, #0x1602                	// #5634
    96017318:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    9601731c:	d65f03c0 	ret
    96017320:	f9400bf3 	ldr	x19, [sp, #16]
    96017324:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017328:	d65f03c0 	ret

000000009601732c <sdmmc_wait_command_complete>:
 *
 *  @return TEGRABL_NO_ERROR if success, error code if fails.
 */
static tegrabl_error_t sdmmc_wait_command_complete(struct tegrabl_sdmmc *hsdmmc,
	uint32_t cmd_reg, uint32_t arg)
{
    9601732c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
			END_BIT_ERR_GENERATED) |
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS, COMMAND_CRC_ERR,
			CRC_ERR_GENERATED) |
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS, COMMAND_TIMEOUT_ERR, TIMEOUT);

	cmd_index = NV_DRF_VAL(SDMMCAB, CMD_XFER_MODE, COMMAND_INDEX, cmd_reg);
    96017330:	53187421 	ubfx	w1, w1, #24, #6

	/* Change timeout for erase command. */
	if ((cmd_index == CMD_ERASE) ||
    96017334:	7100983f 	cmp	w1, #0x26
{
    96017338:	910003fd 	mov	x29, sp
    9601733c:	a90153f3 	stp	x19, x20, [sp, #16]
    96017340:	aa0003f4 	mov	x20, x0
	if ((cmd_index == CMD_ERASE) ||
    96017344:	540000c0 	b.eq	9601735c <sdmmc_wait_command_complete+0x30>  // b.none
		((cmd_index == CMD_SWITCH) && (arg == SWITCH_SANITIZE_ARG))) {
    96017348:	7100183f 	cmp	w1, #0x6
	if ((cmd_index == CMD_ERASE) ||
    9601734c:	52802000 	mov	w0, #0x100                 	// #256
    96017350:	72a074a0 	movk	w0, #0x3a5, lsl #16
    96017354:	7a400040 	ccmp	w2, w0, #0x0, eq  // eq = none
    96017358:	54000341 	b.ne	960173c0 <sdmmc_wait_command_complete+0x94>  // b.any
		timeout = hsdmmc->erase_timeout_us;
    9601735c:	b9407e93 	ldr	w19, [x20, #124]
	}
	/* Wait for command complete. */
	while (timeout != 0U) {
    96017360:	350000b3 	cbnz	w19, 96017374 <sdmmc_wait_command_complete+0x48>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017364:	52800000 	mov	w0, #0x0                   	// #0
		}
	}

fail:
	return error;
}
    96017368:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601736c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017370:	d65f03c0 	ret
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    96017374:	b9405e80 	ldr	w0, [x20, #92]
    96017378:	1100c000 	add	w0, w0, #0x30
    9601737c:	b9400001 	ldr	w1, [x0]
		cmd_cmplt = NV_DRF_VAL(SDMMCAB, INTERRUPT_STATUS, CMD_COMPLETE,
    96017380:	12000020 	and	w0, w1, #0x1
		if ((int_status & err_mask) != 0U) {
    96017384:	72100c3f 	tst	w1, #0xf0000
    96017388:	540000e0 	b.eq	960173a4 <sdmmc_wait_command_complete+0x78>  // b.none
			pr_error("Error in command_complete %x int_status\n", int_status);
    9601738c:	90000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96017390:	9120b000 	add	x0, x0, #0x82c
    96017394:	94002cb7 	bl	96022670 <tegrabl_printf>
			error =  TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
    96017398:	528002e0 	mov	w0, #0x17                  	// #23
			error =  TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 1);
    9601739c:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    960173a0:	17fffff2 	b	96017368 <sdmmc_wait_command_complete+0x3c>
		if (cmd_cmplt != 0U) {
    960173a4:	35fffe00 	cbnz	w0, 96017364 <sdmmc_wait_command_complete+0x38>
		tegrabl_udelay(1);
    960173a8:	d2800020 	mov	x0, #0x1                   	// #1
    960173ac:	9400223e 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0U) {
    960173b0:	71000673 	subs	w19, w19, #0x1
    960173b4:	54fffd61 	b.ne	96017360 <sdmmc_wait_command_complete+0x34>  // b.any
			error =  TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 1);
    960173b8:	528020c0 	mov	w0, #0x106                 	// #262
    960173bc:	17fffff8 	b	9601739c <sdmmc_wait_command_complete+0x70>
	uint32_t timeout = COMMAND_TIMEOUT_IN_US;
    960173c0:	5290d413 	mov	w19, #0x86a0                	// #34464
    960173c4:	72a00033 	movk	w19, #0x1, lsl #16
    960173c8:	17ffffe6 	b	96017360 <sdmmc_wait_command_complete+0x34>

00000000960173cc <sdmmc_card_clock_enable.isra.0>:
		arg = 1U;
	} else {
		arg = 0U;
	}

	reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    960173cc:	1100b000 	add	w0, w0, #0x2c
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
    960173d0:	531e1c21 	ubfiz	w1, w1, #2, #8
	reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    960173d4:	b9400002 	ldr	w2, [x0]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
    960173d8:	121d7842 	and	w2, w2, #0xfffffffb
    960173dc:	2a020021 	orr	w1, w1, w2
							 SD_CLOCK_EN, arg, reg);
	sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    960173e0:	b9000001 	str	w1, [x0]
	return;
}
    960173e4:	d65f03c0 	ret

00000000960173e8 <sdmmc_wait_clk_stable.isra.1>:
static tegrabl_error_t sdmmc_wait_clk_stable(struct tegrabl_sdmmc *hsdmmc)
    960173e8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960173ec:	910003fd 	mov	x29, sp
    960173f0:	a90153f3 	stp	x19, x20, [sp, #16]
    960173f4:	5290d413 	mov	w19, #0x86a0                	// #34464
    960173f8:	aa0003f4 	mov	x20, x0
    960173fc:	72a00033 	movk	w19, #0x1, lsl #16
		reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    96017400:	b9400280 	ldr	w0, [x20]
    96017404:	1100b000 	add	w0, w0, #0x2c
    96017408:	b9400000 	ldr	w0, [x0]
		if (clk_ready != 0U) {
    9601740c:	36080060 	tbz	w0, #1, 96017418 <sdmmc_wait_clk_stable.isra.1+0x30>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017410:	52800000 	mov	w0, #0x0                   	// #0
    96017414:	1400000a 	b	9601743c <sdmmc_wait_clk_stable.isra.1+0x54>
		tegrabl_udelay(1);
    96017418:	d2800020 	mov	x0, #0x1                   	// #1
    9601741c:	94002222 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0U) {
    96017420:	71000673 	subs	w19, w19, #0x1
    96017424:	54fffee1 	b.ne	96017400 <sdmmc_wait_clk_stable.isra.1+0x18>  // b.any
			pr_error("CLK stable time out\n");
    96017428:	90000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601742c:	91205000 	add	x0, x0, #0x814
    96017430:	94002c90 	bl	96022670 <tegrabl_printf>
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 0);
    96017434:	528000c0 	mov	w0, #0x6                   	// #6
    96017438:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    9601743c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017440:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017444:	d65f03c0 	ret

0000000096017448 <sdmmc_reset_controller>:
	uint32_t reg;
	uint32_t reset_in_progress;
	uint32_t timeout = TIME_OUT_IN_US;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017448:	b4000340 	cbz	x0, 960174b0 <sdmmc_reset_controller+0x68>
{
    9601744c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	}

	/* Reset Controller's All reg's. */
	reg = NV_DRF_DEF(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
		SW_RESET_FOR_ALL, RESETED);
	sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    96017450:	52a02001 	mov	w1, #0x1000000             	// #16777216
{
    96017454:	910003fd 	mov	x29, sp
    96017458:	a90153f3 	stp	x19, x20, [sp, #16]
    9601745c:	aa0003f3 	mov	x19, x0
	sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    96017460:	b9405c00 	ldr	w0, [x0, #92]

	/* Wait till Reset is completed. */
	while (timeout != 0U) {
    96017464:	5290d414 	mov	w20, #0x86a0                	// #34464
    96017468:	72a00034 	movk	w20, #0x1, lsl #16
	sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    9601746c:	1100b000 	add	w0, w0, #0x2c
    96017470:	b9000001 	str	w1, [x0]
		reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    96017474:	b9405e60 	ldr	w0, [x19, #92]
    96017478:	1100b000 	add	w0, w0, #0x2c
    9601747c:	b9400001 	ldr	w1, [x0]

		reset_in_progress = NV_DRF_VAL(SDMMCAB,
			SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, SW_RESET_FOR_ALL, reg);

		if (reset_in_progress == 0U) {
    96017480:	12080020 	and	w0, w1, #0x1000000
    96017484:	37c00081 	tbnz	w1, #24, 96017494 <sdmmc_reset_controller+0x4c>
		}
	}

fail:
	return error;
}
    96017488:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601748c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017490:	d65f03c0 	ret
		tegrabl_udelay(1);
    96017494:	d2800020 	mov	x0, #0x1                   	// #1
    96017498:	94002203 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0U) {
    9601749c:	71000694 	subs	w20, w20, #0x1
    960174a0:	54fffea1 	b.ne	96017474 <sdmmc_reset_controller+0x2c>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 2);
    960174a4:	528040c0 	mov	w0, #0x206                 	// #518
    960174a8:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    960174ac:	17fffff7 	b	96017488 <sdmmc_reset_controller+0x40>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 25);
    960174b0:	52832040 	mov	w0, #0x1902                	// #6402
    960174b4:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    960174b8:	d65f03c0 	ret

00000000960174bc <sdmmc_enable_hostv4>:
*/
tegrabl_error_t sdmmc_enable_hostv4(struct tegrabl_sdmmc *hsdmmc)
{
	uint32_t reg;

	reg = sdmmc_readl(hsdmmc, AUTO_CMD12_ERR_STATUS);
    960174bc:	b9405c01 	ldr	w1, [x0, #92]
    960174c0:	1100f021 	add	w1, w1, #0x3c
    960174c4:	b9400022 	ldr	w2, [x1]
	reg = NV_FLD_SET_DRF_DEF(SDMMCAB, AUTO_CMD12_ERR_STATUS, HOST_VERSION_4_EN,
			ENABLE, reg);
	reg = NV_FLD_SET_DRF_DEF(SDMMCAB, AUTO_CMD12_ERR_STATUS,
    960174c8:	32040442 	orr	w2, w2, #0x30000000
			ADDRESSING_64BIT_EN, ENABLE, reg);
	sdmmc_writel(hsdmmc, AUTO_CMD12_ERR_STATUS, reg);
    960174cc:	b9000022 	str	w2, [x1]

	hsdmmc->is_hostv4_enabled = true;
    960174d0:	52800021 	mov	w1, #0x1                   	// #1
    960174d4:	390a8001 	strb	w1, [x0, #672]
	return TEGRABL_NO_ERROR;
}
    960174d8:	52800000 	mov	w0, #0x0                   	// #0
    960174dc:	d65f03c0 	ret

00000000960174e0 <sdmmc_get_hostv4_status>:
*/
void sdmmc_get_hostv4_status(struct tegrabl_sdmmc *hsdmmc)
{
	uint32_t reg_data;

	reg_data = sdmmc_readl((hsdmmc), AUTO_CMD12_ERR_STATUS);
    960174e0:	b9405c01 	ldr	w1, [x0, #92]
    960174e4:	1100f021 	add	w1, w1, #0x3c
    960174e8:	b9400021 	ldr	w1, [x1]

	reg_data = NV_DRF_VAL(SDMMCAB, AUTO_CMD12_ERR_STATUS, HOST_VERSION_4_EN,
						  reg_data);

	hsdmmc->is_hostv4_enabled = (reg_data ==
		SDMMCAB_AUTO_CMD12_ERR_STATUS_0_HOST_VERSION_4_EN_ENABLE) ? true : false;
    960174ec:	d35c7021 	ubfx	x1, x1, #28, #1
    960174f0:	390a8001 	strb	w1, [x0, #672]
}
    960174f4:	d65f03c0 	ret

00000000960174f8 <sdmmc_set_card_clock>:
	sdmmc_mode_t mode, uint32_t clk_divider)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint32_t reg = 0;

	if (hsdmmc == NULL) {
    960174f8:	b4000560 	cbz	x0, 960175a4 <sdmmc_set_card_clock+0xac>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 26);
		goto fail;
	}

	switch (mode) {
    960174fc:	7100043f 	cmp	w1, #0x1
    96017500:	54000480 	b.eq	96017590 <sdmmc_set_card_clock+0x98>  // b.none
    96017504:	34000061 	cbz	w1, 96017510 <sdmmc_set_card_clock+0x18>
    96017508:	7100083f 	cmp	w1, #0x2
    9601750c:	54000541 	b.ne	960175b4 <sdmmc_set_card_clock+0xbc>  // b.any
{
    96017510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96017514:	2a0203e3 	mov	w3, w2
	/* Set clock as requested by user. */
	case MODE_INIT:
	case MODE_DATA_TRANSFER:
		pr_trace("Clock set for init or data_transfer\n");

		sdmmc_card_clock_enable(hsdmmc, false);
    96017518:	52800001 	mov	w1, #0x0                   	// #0
{
    9601751c:	910003fd 	mov	x29, sp
    96017520:	f9000bf3 	str	x19, [sp, #16]
    96017524:	aa0003f3 	mov	x19, x0
		sdmmc_card_clock_enable(hsdmmc, false);
    96017528:	b9405c00 	ldr	w0, [x0, #92]
    9601752c:	97ffffa8 	bl	960173cc <sdmmc_card_clock_enable.isra.0>
		reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
		reg = NV_FLD_SET_DRF_NUM(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
    96017530:	53181c63 	ubfiz	w3, w3, #8, #8
		reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    96017534:	aa1303e0 	mov	x0, x19
    96017538:	b845cc01 	ldr	w1, [x0, #92]!
    9601753c:	1100b021 	add	w1, w1, #0x2c
    96017540:	b9400022 	ldr	w2, [x1]
		reg = NV_FLD_SET_DRF_NUM(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
    96017544:	12105c42 	and	w2, w2, #0xffff00ff
    96017548:	2a020063 	orr	w3, w3, w2
			SDCLK_FREQUENCYSELECT, clk_divider, reg);
		sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    9601754c:	b9000023 	str	w3, [x1]

		error = sdmmc_wait_clk_stable(hsdmmc);
    96017550:	97ffffa6 	bl	960173e8 <sdmmc_wait_clk_stable.isra.1>
    96017554:	2a0003e3 	mov	w3, w0
		if (error != TEGRABL_NO_ERROR) {
    96017558:	35000140 	cbnz	w0, 96017580 <sdmmc_set_card_clock+0x88>
			goto fail;
		}

		reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    9601755c:	b9405e61 	ldr	w1, [x19, #92]
    96017560:	1100b021 	add	w1, w1, #0x2c
    96017564:	b9400020 	ldr	w0, [x1]
		reg = NV_FLD_SET_DRF_NUM(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
    96017568:	120c6c00 	and	w0, w0, #0xfff0ffff
    9601756c:	320f0800 	orr	w0, w0, #0xe0000
				DATA_TIMEOUT_COUNTER_VALUE, 0xE, reg);
		sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    96017570:	b9000020 	str	w0, [x1]
		sdmmc_card_clock_enable(hsdmmc, true);
    96017574:	52800021 	mov	w1, #0x1                   	// #1
    96017578:	b9405e60 	ldr	w0, [x19, #92]
    9601757c:	97ffff94 	bl	960173cc <sdmmc_card_clock_enable.isra.0>
	default:
		break;
	}
fail:
	return error;
}
    96017580:	2a0303e0 	mov	w0, w3
    96017584:	f9400bf3 	ldr	x19, [sp, #16]
    96017588:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601758c:	d65f03c0 	ret
		sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    96017590:	b845cc01 	ldr	w1, [x0, #92]!
    96017594:	52900022 	mov	w2, #0x8001                	// #32769
    96017598:	1100b021 	add	w1, w1, #0x2c
    9601759c:	b9000022 	str	w2, [x1]
		error = sdmmc_wait_clk_stable(hsdmmc);
    960175a0:	17ffff92 	b	960173e8 <sdmmc_wait_clk_stable.isra.1>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 26);
    960175a4:	52834043 	mov	w3, #0x1a02                	// #6658
    960175a8:	72a1e1e3 	movk	w3, #0xf0f, lsl #16
}
    960175ac:	2a0303e0 	mov	w0, w3
    960175b0:	d65f03c0 	ret
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960175b4:	52800003 	mov	w3, #0x0                   	// #0
	return error;
    960175b8:	17fffffd 	b	960175ac <sdmmc_set_card_clock+0xb4>

00000000960175bc <sdmmc_enable_bus_power>:
{
	uint32_t reg = 0;
	uint32_t cap_reg;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    960175bc:	b4000200 	cbz	x0, 960175fc <sdmmc_enable_bus_power+0x40>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 27);
		goto fail;
	}

	cap_reg = sdmmc_readl(hsdmmc, CAPABILITIES);
    960175c0:	b9405c01 	ldr	w1, [x0, #92]
    960175c4:	11010020 	add	w0, w1, #0x40
    960175c8:	b9400000 	ldr	w0, [x0]

	/* Read the voltage supported by the card. */
	pr_trace("Set the correct voltage range\n");
	if (NV_DRF_VAL(SDMMCAB, CAPABILITIES, VOLTAGE_SUPPORT_3_3_V, cap_reg) != 0U) {
    960175cc:	37c00140 	tbnz	w0, #24, 960175f4 <sdmmc_enable_bus_power+0x38>
	} else if (NV_DRF_VAL(SDMMCAB, CAPABILITIES,
				VOLTAGE_SUPPORT_3_0_V, cap_reg) != 0U) {
		reg |=
			NV_DRF_DEF(SDMMCAB, POWER_CONTROL_HOST, SD_BUS_VOLTAGE_SELECT, V3_0);
	} else {
		reg |=
    960175d0:	f267001f 	tst	x0, #0x2000000
    960175d4:	52814002 	mov	w2, #0xa00                 	// #2560
    960175d8:	52818000 	mov	w0, #0xc00                 	// #3072
    960175dc:	1a821000 	csel	w0, w0, w2, ne  // ne = any
			NV_DRF_DEF(SDMMCAB, POWER_CONTROL_HOST, SD_BUS_VOLTAGE_SELECT, V1_8);
	}
	/* Enable bus power. */
	reg |= NV_DRF_DEF(SDMMCAB, POWER_CONTROL_HOST, SD_BUS_POWER, POWER_ON);

	sdmmc_writel(hsdmmc, POWER_CONTROL_HOST, reg);
    960175e0:	1100a021 	add	w1, w1, #0x28
	reg |= NV_DRF_DEF(SDMMCAB, POWER_CONTROL_HOST, SD_BUS_POWER, POWER_ON);
    960175e4:	32180000 	orr	w0, w0, #0x100
	sdmmc_writel(hsdmmc, POWER_CONTROL_HOST, reg);
    960175e8:	b9000020 	str	w0, [x1]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960175ec:	52800000 	mov	w0, #0x0                   	// #0

fail:
	return error;
}
    960175f0:	d65f03c0 	ret
		reg |=
    960175f4:	5281c000 	mov	w0, #0xe00                 	// #3584
    960175f8:	17fffffa 	b	960175e0 <sdmmc_enable_bus_power+0x24>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 27);
    960175fc:	52836040 	mov	w0, #0x1b02                	// #6914
    96017600:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017604:	17fffffb 	b	960175f0 <sdmmc_enable_bus_power+0x34>

0000000096017608 <sdmmc_set_interrupt_status_reg>:
tegrabl_error_t sdmmc_set_interrupt_status_reg(struct tegrabl_sdmmc *hsdmmc)
{
	uint32_t reg;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017608:	b4000100 	cbz	x0, 96017628 <sdmmc_set_interrupt_status_reg+0x20>
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS_ENABLE, TRANSFER_COMPLETE, ENABLE) |
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS_ENABLE, COMMAND_COMPLETE, ENABLE);

	/* Poll for the above interrupts. */
	pr_trace("Setup error mask for interrupt\n");
	sdmmc_writel(hsdmmc, INTERRUPT_STATUS_ENABLE, reg);
    9601760c:	b9405c00 	ldr	w0, [x0, #92]
    96017610:	52801961 	mov	w1, #0xcb                  	// #203
    96017614:	72a00fe1 	movk	w1, #0x7f, lsl #16
    96017618:	1100d000 	add	w0, w0, #0x34
    9601761c:	b9000001 	str	w1, [x0]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017620:	52800000 	mov	w0, #0x0                   	// #0

fail:
	return error;
}
    96017624:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 28);
    96017628:	52838040 	mov	w0, #0x1c02                	// #7170
    9601762c:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017630:	17fffffd 	b	96017624 <sdmmc_set_interrupt_status_reg+0x1c>

0000000096017634 <sdmmc_is_card_present>:
	uint32_t reg;
	uint32_t card_inserted = 0;
	uint32_t timeout = TIME_OUT_IN_US;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017634:	b40002c0 	cbz	x0, 9601768c <sdmmc_is_card_present+0x58>
{
    96017638:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601763c:	910003fd 	mov	x29, sp
    96017640:	a90153f3 	stp	x19, x20, [sp, #16]
    96017644:	5290d414 	mov	w20, #0x86a0                	// #34464
    96017648:	aa0003f3 	mov	x19, x0
    9601764c:	72a00034 	movk	w20, #0x1, lsl #16
		goto fail;
	}

	/* Check if the card is present or not */
	while (timeout != 0U) {
		reg = sdmmc_readl(hsdmmc, PRESENT_STATE);
    96017650:	b9405e60 	ldr	w0, [x19, #92]
    96017654:	11009000 	add	w0, w0, #0x24
    96017658:	b9400000 	ldr	w0, [x0]
		card_stable = NV_DRF_VAL(SDMMCAB, PRESENT_STATE, CARD_STATE_STABLE, reg);
		if (card_stable != 0U) {
    9601765c:	368800e0 	tbz	w0, #17, 96017678 <sdmmc_is_card_present+0x44>
		pr_debug("Card is not stable\n");
	}
	if (card_inserted == 0U) {
		pr_debug("Card is not inserted\n");
	}
	error = (card_inserted != 0U) ? TEGRABL_NO_ERROR :
    96017660:	378001c0 	tbnz	w0, #16, 96017698 <sdmmc_is_card_present+0x64>
    96017664:	528001a0 	mov	w0, #0xd                   	// #13
    96017668:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
				TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
fail:
	return error;
}
    9601766c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017670:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017674:	d65f03c0 	ret
		tegrabl_udelay(1);
    96017678:	d2800020 	mov	x0, #0x1                   	// #1
    9601767c:	9400218a 	bl	9601fca4 <tegrabl_udelay>
	while (timeout != 0U) {
    96017680:	71000694 	subs	w20, w20, #0x1
    96017684:	54fffe61 	b.ne	96017650 <sdmmc_is_card_present+0x1c>  // b.any
    96017688:	17fffff7 	b	96017664 <sdmmc_is_card_present+0x30>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 29);
    9601768c:	5283a040 	mov	w0, #0x1d02                	// #7426
    96017690:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    96017694:	d65f03c0 	ret
	error = (card_inserted != 0U) ? TEGRABL_NO_ERROR :
    96017698:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    9601769c:	17fffff4 	b	9601766c <sdmmc_is_card_present+0x38>

00000000960176a0 <sdmmc_prepare_cmd_reg>:
	struct tegrabl_sdmmc *hsdmmc, sdmmc_cmd index, sdmmc_resp_type resp_type)
{
	uint32_t reg = 0;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((hsdmmc == NULL) || (cmd_reg == NULL)) {
    960176a0:	f100005f 	cmp	x2, #0x0
{
    960176a4:	12001c21 	and	w1, w1, #0xff
	if ((hsdmmc == NULL) || (cmd_reg == NULL)) {
    960176a8:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
    960176ac:	54000680 	b.eq	9601777c <sdmmc_prepare_cmd_reg+0xdc>  // b.none
		goto fail;
	}

	/* Basic argument preparation. */
	reg =
		NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, COMMAND_INDEX, index) |
    960176b0:	7100003f 	cmp	w1, #0x0
    960176b4:	52a00405 	mov	w5, #0x200000              	// #2097152
		NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, DATA_PRESENT_SELECT,
			((data_cmd != 0U) ? 1 : 0)) |
		NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, BLOCK_COUNT_EN,
				   ((data_cmd != 0U) ? 1 : 0)) |
    960176b8:	1a9f07e7 	cset	w7, ne  // ne = any
		NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, COMMAND_INDEX, index) |
    960176bc:	1a8503e6 	csel	w6, wzr, w5, eq  // eq = none
    960176c0:	53081462 	ubfiz	w2, w3, #24, #6
    960176c4:	52800045 	mov	w5, #0x2                   	// #2
    960176c8:	1a8503e5 	csel	w5, wzr, w5, eq  // eq = none
	reg =
    960176cc:	2a0200e2 	orr	w2, w7, w2
    960176d0:	2a0600a5 	orr	w5, w5, w6
		NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, DMA_EN, ((data_cmd != 0U) ? 1 : 0));

	/* Enable multiple block select. */
	if ((index == CMD_READ_MULTIPLE) || (index == CMD_WRITE_MULTIPLE)) {
    960176d4:	7100647f 	cmp	w3, #0x19
	reg =
    960176d8:	2a050042 	orr	w2, w2, w5
	if ((index == CMD_READ_MULTIPLE) || (index == CMD_WRITE_MULTIPLE)) {
    960176dc:	1a9f17e5 	cset	w5, eq  // eq = none
    960176e0:	710000bf 	cmp	w5, #0x0
		reg |= NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, MULTI_BLOCK_SELECT , 1) |
    960176e4:	52800486 	mov	w6, #0x24                  	// #36
	if ((index == CMD_READ_MULTIPLE) || (index == CMD_WRITE_MULTIPLE)) {
    960176e8:	7a520864 	ccmp	w3, #0x12, #0x4, eq  // eq = none
		reg |= NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, MULTI_BLOCK_SELECT , 1) |
    960176ec:	2a0203e3 	mov	w3, w2
    960176f0:	2a060042 	orr	w2, w2, w6
    960176f4:	1a830042 	csel	w2, w2, w3, eq  // eq = none
				NV_DRF_DEF(SDMMCAB, CMD_XFER_MODE, AUTO_CMD12_EN, CMD12);
	}

	/* Select data direction for write. */
	if ((index == CMD_WRITE_MULTIPLE) && (data_cmd != 0U)) {
    960176f8:	710000bf 	cmp	w5, #0x0
    960176fc:	7a4018e4 	ccmp	w7, #0x0, #0x4, ne  // ne = any
    96017700:	54000061 	b.ne	9601770c <sdmmc_prepare_cmd_reg+0x6c>  // b.any
		reg |= NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, DATA_XFER_DIR_SEL, 0);
	} else if (data_cmd != 0U) {
    96017704:	34000041 	cbz	w1, 9601770c <sdmmc_prepare_cmd_reg+0x6c>
		reg |= NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, DATA_XFER_DIR_SEL, 1);
    96017708:	321c0042 	orr	w2, w2, #0x10
	} else {
		/* No Action Required */
	}

	/* Cmd index check. */
	if ((resp_type != RESP_TYPE_NO_RESP) &&
    9601770c:	7100009f 	cmp	w4, #0x0
		(resp_type != RESP_TYPE_R2) &&
    96017710:	51000881 	sub	w1, w4, #0x2
	if ((resp_type != RESP_TYPE_NO_RESP) &&
    96017714:	1a9f07e3 	cset	w3, ne  // ne = any
    96017718:	7100007f 	cmp	w3, #0x0
    9601771c:	7a421820 	ccmp	w1, #0x2, #0x0, ne  // ne = any
		(resp_type != RESP_TYPE_R3) &&
		(resp_type != RESP_TYPE_R4)) {
		reg |= NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, CMD_INDEX_CHECK_EN, 1);
    96017720:	2a0203e1 	mov	w1, w2
    96017724:	320c0042 	orr	w2, w2, #0x100000
    96017728:	1a818042 	csel	w2, w2, w1, hi  // hi = pmore
	}

	/* Crc index check. */
	if ((resp_type != RESP_TYPE_NO_RESP) &&
    9601772c:	7100007f 	cmp	w3, #0x0
    96017730:	7a431884 	ccmp	w4, #0x3, #0x4, ne  // ne = any
    96017734:	54000100 	b.eq	96017754 <sdmmc_prepare_cmd_reg+0xb4>  // b.none
		(resp_type != RESP_TYPE_R3) &&
    96017738:	7100109f 	cmp	w4, #0x4
    9601773c:	540001c0 	b.eq	96017774 <sdmmc_prepare_cmd_reg+0xd4>  // b.none
		(resp_type != RESP_TYPE_R4)) {
		reg |= NV_DRF_NUM(SDMMCAB, CMD_XFER_MODE, CMD_CRC_CHECK_EN, 1);
    96017740:	320d0042 	orr	w2, w2, #0x80000

	/* Response type check. */
	if (resp_type == RESP_TYPE_NO_RESP) {
		reg |= NV_DRF_DEF(SDMMCAB, CMD_XFER_MODE, RESP_TYPE_SELECT,
				NO_RESPONSE);
	} else if (resp_type == RESP_TYPE_R2) {
    96017744:	7100089f 	cmp	w4, #0x2
    96017748:	540000e1 	b.ne	96017764 <sdmmc_prepare_cmd_reg+0xc4>  // b.any
		reg |= NV_DRF_DEF(SDMMCAB, CMD_XFER_MODE, RESP_TYPE_SELECT,
    9601774c:	32100042 	orr	w2, w2, #0x10000
    96017750:	14000002 	b	96017758 <sdmmc_prepare_cmd_reg+0xb8>
	if (resp_type == RESP_TYPE_NO_RESP) {
    96017754:	35ffff84 	cbnz	w4, 96017744 <sdmmc_prepare_cmd_reg+0xa4>
				RESP_LENGTH_48BUSY);
	} else {
		reg |= NV_DRF_DEF(SDMMCAB, CMD_XFER_MODE, RESP_TYPE_SELECT,
				RESP_LENGTH_48);
	}
	*cmd_reg = reg;
    96017758:	b9000002 	str	w2, [x0]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9601775c:	52800000 	mov	w0, #0x0                   	// #0
fail:
	return error;
}
    96017760:	d65f03c0 	ret
	} else if (resp_type == RESP_TYPE_R1B) {
    96017764:	7100209f 	cmp	w4, #0x8
    96017768:	54000061 	b.ne	96017774 <sdmmc_prepare_cmd_reg+0xd4>  // b.any
		reg |= NV_DRF_DEF(SDMMCAB, CMD_XFER_MODE, RESP_TYPE_SELECT,
    9601776c:	32100442 	orr	w2, w2, #0x30000
    96017770:	17fffffa 	b	96017758 <sdmmc_prepare_cmd_reg+0xb8>
		reg |= NV_DRF_DEF(SDMMCAB, CMD_XFER_MODE, RESP_TYPE_SELECT,
    96017774:	320f0042 	orr	w2, w2, #0x20000
    96017778:	17fffff8 	b	96017758 <sdmmc_prepare_cmd_reg+0xb8>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 30);
    9601777c:	5283c040 	mov	w0, #0x1e02                	// #7682
    96017780:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017784:	17fffff7 	b	96017760 <sdmmc_prepare_cmd_reg+0xc0>

0000000096017788 <sdmmc_cmd_txr_ready>:
	uint32_t reg;
	uint32_t cmd_txr_ready;
	uint32_t timeout = COMMAND_TIMEOUT_IN_US;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017788:	b40002c0 	cbz	x0, 960177e0 <sdmmc_cmd_txr_ready+0x58>
{
    9601778c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96017790:	910003fd 	mov	x29, sp
    96017794:	a90153f3 	stp	x19, x20, [sp, #16]
    96017798:	5290d414 	mov	w20, #0x86a0                	// #34464
    9601779c:	aa0003f3 	mov	x19, x0
    960177a0:	72a00034 	movk	w20, #0x1, lsl #16
		goto fail;
	}

	/* Check if sending command is allowed or not. */
	while (timeout != 0U) {
		reg = sdmmc_readl(hsdmmc, PRESENT_STATE);
    960177a4:	b9405e60 	ldr	w0, [x19, #92]
    960177a8:	11009000 	add	w0, w0, #0x24
    960177ac:	b9400000 	ldr	w0, [x0]
		/* This bit is set to zero after response is received. So, response */
		/* registers should be read only after this bit is cleared. */
		cmd_txr_ready = NV_DRF_VAL(SDMMCAB, PRESENT_STATE, CMD_INHIBIT_CMD, reg);

		if (cmd_txr_ready == 0U) {
    960177b0:	370000a0 	tbnz	w0, #0, 960177c4 <sdmmc_cmd_txr_ready+0x3c>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960177b4:	52800000 	mov	w0, #0x0                   	// #0
			goto fail;
		}
	}
fail:
	return error;
}
    960177b8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960177bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960177c0:	d65f03c0 	ret
		tegrabl_udelay(1);
    960177c4:	d2800020 	mov	x0, #0x1                   	// #1
    960177c8:	94002137 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0U) {
    960177cc:	71000694 	subs	w20, w20, #0x1
    960177d0:	54fffea1 	b.ne	960177a4 <sdmmc_cmd_txr_ready+0x1c>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 3);
    960177d4:	528060c0 	mov	w0, #0x306                 	// #774
    960177d8:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    960177dc:	17fffff7 	b	960177b8 <sdmmc_cmd_txr_ready+0x30>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 32);
    960177e0:	52840040 	mov	w0, #0x2002                	// #8194
    960177e4:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    960177e8:	d65f03c0 	ret

00000000960177ec <sdmmc_data_txr_ready>:
	uint32_t reg;
	uint32_t data_txr_ready;
	uint32_t timeout = DATA_TIMEOUT_IN_US;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    960177ec:	b40002c0 	cbz	x0, 96017844 <sdmmc_data_txr_ready+0x58>
{
    960177f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960177f4:	910003fd 	mov	x29, sp
    960177f8:	a90153f3 	stp	x19, x20, [sp, #16]
    960177fc:	52812014 	mov	w20, #0x900                 	// #2304
    96017800:	aa0003f3 	mov	x19, x0
    96017804:	72a007b4 	movk	w20, #0x3d, lsl #16
		goto fail;
	}

	/* Check if sending data is allowed or not. */
	while (timeout != 0U) {
		reg = sdmmc_readl(hsdmmc, PRESENT_STATE);
    96017808:	b9405e60 	ldr	w0, [x19, #92]
    9601780c:	11009000 	add	w0, w0, #0x24
    96017810:	b9400001 	ldr	w1, [x0]
		/* This bit is set to zero after response is received. So, response */
		/* registers should be read only after this bit is cleared. */
		data_txr_ready = NV_DRF_VAL(SDMMCAB, PRESENT_STATE, CMD_INHIBIT_DAT,
			reg);

		if (data_txr_ready == 0U) {
    96017814:	121f0020 	and	w0, w1, #0x2
    96017818:	37080081 	tbnz	w1, #1, 96017828 <sdmmc_data_txr_ready+0x3c>
		}
	}

fail:
	return error;
}
    9601781c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017820:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017824:	d65f03c0 	ret
		tegrabl_udelay(1);
    96017828:	d2800020 	mov	x0, #0x1                   	// #1
    9601782c:	9400211e 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0U) {
    96017830:	71000694 	subs	w20, w20, #0x1
    96017834:	54fffea1 	b.ne	96017808 <sdmmc_data_txr_ready+0x1c>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 4);
    96017838:	528080c0 	mov	w0, #0x406                 	// #1030
    9601783c:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017840:	17fffff7 	b	9601781c <sdmmc_data_txr_ready+0x30>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 33);
    96017844:	52842040 	mov	w0, #0x2102                	// #8450
    96017848:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    9601784c:	d65f03c0 	ret

0000000096017850 <sdmmc_read_response>:
{
	uint32_t *temp = buf;
	uint32_t i;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((hsdmmc == NULL) || (buf == NULL)) {
    96017850:	f100001f 	cmp	x0, #0x0
    96017854:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96017858:	54000420 	b.eq	960178dc <sdmmc_read_response+0x8c>  // b.none
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 34);
		goto fail;
	}

	/* read the response of the last command send */
	switch (resp_type) {
    9601785c:	51000421 	sub	w1, w1, #0x1
    96017860:	71001c3f 	cmp	w1, #0x7
    96017864:	54000388 	b.hi	960178d4 <sdmmc_read_response+0x84>  // b.pmore
    96017868:	b9405c03 	ldr	w3, [x0, #92]
    9601786c:	90000144 	adrp	x4, 9603f000 <device_info_list+0x6dc>
    96017870:	911de084 	add	x4, x4, #0x778
		*temp = sdmmc_readl(hsdmmc, RESPONSE_R0_R1);
		pr_trace("%08X\n", buf[0]);
		break;
	case RESP_TYPE_R2:
		/* bits 127:8 of response are mapped to 119:0. */
		*temp = sdmmc_readl(hsdmmc, RESPONSE_R0_R1);
    96017874:	11004063 	add	w3, w3, #0x10
	switch (resp_type) {
    96017878:	38614881 	ldrb	w1, [x4, w1, uxtw]
    9601787c:	10000064 	adr	x4, 96017888 <sdmmc_read_response+0x38>
    96017880:	8b218881 	add	x1, x4, w1, sxtb #2
    96017884:	d61f0020 	br	x1
		*temp = sdmmc_readl(hsdmmc, RESPONSE_R0_R1);
    96017888:	b9400060 	ldr	w0, [x3]
    9601788c:	b9000040 	str	w0, [x2]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017890:	52800000 	mov	w0, #0x0                   	// #0
		*temp = 0;
		break;
	}
fail:
	return error;
}
    96017894:	d65f03c0 	ret
		*temp = sdmmc_readl(hsdmmc, RESPONSE_R0_R1);
    96017898:	b9400061 	ldr	w1, [x3]
    9601789c:	b9000041 	str	w1, [x2]
		*temp = sdmmc_readl(hsdmmc, RESPONSE_R2_R3);
    960178a0:	b9405c01 	ldr	w1, [x0, #92]
    960178a4:	11005021 	add	w1, w1, #0x14
    960178a8:	b9400021 	ldr	w1, [x1]
    960178ac:	b9000441 	str	w1, [x2, #4]
		*temp = sdmmc_readl(hsdmmc, RESPONSE_R4_R5);
    960178b0:	b9405c01 	ldr	w1, [x0, #92]
    960178b4:	11006021 	add	w1, w1, #0x18
    960178b8:	b9400021 	ldr	w1, [x1]
    960178bc:	b9000841 	str	w1, [x2, #8]
		*temp = sdmmc_readl(hsdmmc, RESPONSE_R6_R7);
    960178c0:	b9405c00 	ldr	w0, [x0, #92]
    960178c4:	11007000 	add	w0, w0, #0x1c
    960178c8:	b9400000 	ldr	w0, [x0]
    960178cc:	b9000c40 	str	w0, [x2, #12]
    960178d0:	17fffff0 	b	96017890 <sdmmc_read_response+0x40>
		*temp = 0;
    960178d4:	b900005f 	str	wzr, [x2]
    960178d8:	17ffffee 	b	96017890 <sdmmc_read_response+0x40>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 34);
    960178dc:	52844040 	mov	w0, #0x2202                	// #8706
    960178e0:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    960178e4:	17ffffec 	b	96017894 <sdmmc_read_response+0x44>

00000000960178e8 <sdmmc_recover_controller_error>:
	uint32_t timeout = TIME_OUT_IN_US;
	uint32_t cmd_error;
	uint32_t data_error;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    960178e8:	b4000ba0 	cbz	x0, 96017a5c <sdmmc_recover_controller_error+0x174>
{
    960178ec:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960178f0:	910003fd 	mov	x29, sp
    960178f4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960178f8:	12001c35 	and	w21, w1, #0xff
	data_error =
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS, DATA_END_BIT_ERR, ERR) |
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS, DATA_CRC_ERR, ERR) |
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS, DATA_TIMEOUT_ERR, TIMEOUT);

	int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    960178fc:	b9405c01 	ldr	w1, [x0, #92]
{
    96017900:	a90153f3 	stp	x19, x20, [sp, #16]
    96017904:	aa0003f3 	mov	x19, x0
	int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    96017908:	1100c020 	add	w0, w1, #0x30
	reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    9601790c:	1100b021 	add	w1, w1, #0x2c
	int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    96017910:	b9400016 	ldr	w22, [x0]
	reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    96017914:	b9400020 	ldr	w0, [x1]

	if ((int_status & cmd_error) != 0U) {
    96017918:	72100edf 	tst	w22, #0xf0000
    9601791c:	54000200 	b.eq	9601795c <sdmmc_recover_controller_error+0x74>  // b.none
	uint32_t timeout = TIME_OUT_IN_US;
    96017920:	5290d414 	mov	w20, #0x86a0                	// #34464
		/* Reset Command line. */
		reg |= NV_DRF_DEF(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
    96017924:	32070000 	orr	w0, w0, #0x2000000
	uint32_t timeout = TIME_OUT_IN_US;
    96017928:	72a00034 	movk	w20, #0x1, lsl #16
			SW_RESET_FOR_CMD_LINE, RESETED);
		sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    9601792c:	b9000020 	str	w0, [x1]
		/* Wait till Reset is completed. */
		while (timeout != 0U) {
			reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    96017930:	b9405e60 	ldr	w0, [x19, #92]
    96017934:	1100b000 	add	w0, w0, #0x2c
    96017938:	b9400000 	ldr	w0, [x0]
			reset_progress = NV_DRF_VAL(SDMMCAB,
				SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, SW_RESET_FOR_CMD_LINE,
				reg);
			if (reset_progress == 0U) {
    9601793c:	36c80140 	tbz	w0, #25, 96017964 <sdmmc_recover_controller_error+0x7c>
				break;
			}
			tegrabl_udelay(1);
    96017940:	d2800020 	mov	x0, #0x1                   	// #1
    96017944:	940020d8 	bl	9601fca4 <tegrabl_udelay>
		while (timeout != 0U) {
    96017948:	71000694 	subs	w20, w20, #0x1
    9601794c:	54ffff21 	b.ne	96017930 <sdmmc_recover_controller_error+0x48>  // b.any
			timeout--;
		}
		if (timeout == 0U) {
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 5);
    96017950:	5280a0c0 	mov	w0, #0x506                 	// #1286
		/* Before give up, try full reset once. */
		sdmmc_init_controller(hsdmmc, hsdmmc->controller_id);
		present_state = sdmmc_readl(hsdmmc, PRESENT_STATE);
		if (NV_DRF_VAL(SDMMCAB, PRESENT_STATE, DAT_3_0_LINE_LEVEL,
				present_state) != 0U) {
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 7);
    96017954:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
    96017958:	14000055 	b	96017aac <sdmmc_recover_controller_error+0x1c4>
	uint32_t timeout = TIME_OUT_IN_US;
    9601795c:	5290d414 	mov	w20, #0x86a0                	// #34464
    96017960:	72a00034 	movk	w20, #0x1, lsl #16
	if ((int_status & data_error) != 0U) {
    96017964:	720c0adf 	tst	w22, #0x700000
    96017968:	540001e0 	b.eq	960179a4 <sdmmc_recover_controller_error+0xbc>  // b.none
		sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    9601796c:	b9405e61 	ldr	w1, [x19, #92]
		reg |= NV_DRF_DEF(SDMMCAB, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL,
    96017970:	32060000 	orr	w0, w0, #0x4000000
		sdmmc_writel(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL, reg);
    96017974:	1100b021 	add	w1, w1, #0x2c
    96017978:	b9000020 	str	w0, [x1]
			reg = sdmmc_readl(hsdmmc, SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL);
    9601797c:	b9405e60 	ldr	w0, [x19, #92]
    96017980:	1100b000 	add	w0, w0, #0x2c
    96017984:	b9400000 	ldr	w0, [x0]
			if (reset_progress == 0U) {
    96017988:	36d000e0 	tbz	w0, #26, 960179a4 <sdmmc_recover_controller_error+0xbc>
			tegrabl_udelay(1);
    9601798c:	d2800020 	mov	x0, #0x1                   	// #1
    96017990:	940020c5 	bl	9601fca4 <tegrabl_udelay>
		while (timeout != 0U) {
    96017994:	71000694 	subs	w20, w20, #0x1
    96017998:	54ffff21 	b.ne	9601797c <sdmmc_recover_controller_error+0x94>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 6);
    9601799c:	5280c0c0 	mov	w0, #0x606                 	// #1542
    960179a0:	17ffffed 	b	96017954 <sdmmc_recover_controller_error+0x6c>
	sdmmc_writel(hsdmmc, INTERRUPT_STATUS, int_status);
    960179a4:	b9405e60 	ldr	w0, [x19, #92]
    960179a8:	1100c000 	add	w0, w0, #0x30
    960179ac:	b9000016 	str	w22, [x0]
	if (data_cmd != 0U) {
    960179b0:	340006f5 	cbz	w21, 96017a8c <sdmmc_recover_controller_error+0x1a4>
    960179b4:	52800054 	mov	w20, #0x2                   	// #2
		sdmmc_writel(hsdmmc, CMD_XFER_MODE, cmd_reg);
    960179b8:	52a19b75 	mov	w21, #0xcdb0000             	// #215678976
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    960179bc:	b9405e60 	ldr	w0, [x19, #92]
		if (sdmmc_wait_command_complete(hsdmmc, cmd_reg, 0) == 0U) {
    960179c0:	52800002 	mov	w2, #0x0                   	// #0
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    960179c4:	1100c000 	add	w0, w0, #0x30
    960179c8:	b9400001 	ldr	w1, [x0]
		sdmmc_writel(hsdmmc, INTERRUPT_STATUS, int_status);
    960179cc:	b9000001 	str	w1, [x0]
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    960179d0:	b9405e60 	ldr	w0, [x19, #92]
    960179d4:	1100c001 	add	w1, w0, #0x30
		sdmmc_writel(hsdmmc, ARGUMENT, 0);
    960179d8:	11002000 	add	w0, w0, #0x8
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    960179dc:	b9400021 	ldr	w1, [x1]
		sdmmc_writel(hsdmmc, ARGUMENT, 0);
    960179e0:	b900001f 	str	wzr, [x0]
		if (sdmmc_wait_command_complete(hsdmmc, cmd_reg, 0) == 0U) {
    960179e4:	52a19b61 	mov	w1, #0xcdb0000             	// #215678976
		sdmmc_writel(hsdmmc, CMD_XFER_MODE, cmd_reg);
    960179e8:	b9405e60 	ldr	w0, [x19, #92]
    960179ec:	11003000 	add	w0, w0, #0xc
    960179f0:	b9000015 	str	w21, [x0]
		if (sdmmc_wait_command_complete(hsdmmc, cmd_reg, 0) == 0U) {
    960179f4:	aa1303e0 	mov	x0, x19
    960179f8:	97fffe4d 	bl	9601732c <sdmmc_wait_command_complete>
    960179fc:	34000360 	cbz	w0, 96017a68 <sdmmc_recover_controller_error+0x180>
		error = sdmmc_init_controller(hsdmmc, hsdmmc->controller_id);
    96017a00:	b9405a61 	ldr	w1, [x19, #88]
    96017a04:	aa1303e0 	mov	x0, x19
    96017a08:	97fffbad 	bl	960168bc <sdmmc_init_controller>
		if (error != TEGRABL_NO_ERROR) {
    96017a0c:	35000400 	cbnz	w0, 96017a8c <sdmmc_recover_controller_error+0x1a4>
	while (retries != 0U) {
    96017a10:	7100069f 	cmp	w20, #0x1
    96017a14:	540003c0 	b.eq	96017a8c <sdmmc_recover_controller_error+0x1a4>  // b.none
    96017a18:	52800034 	mov	w20, #0x1                   	// #1
    96017a1c:	17ffffe8 	b	960179bc <sdmmc_recover_controller_error+0xd4>
		sdmmc_read_response(hsdmmc, RESP_TYPE_R1B, sdmmc_response);
    96017a20:	91004262 	add	x2, x19, #0x10
    96017a24:	52800101 	mov	w1, #0x8                   	// #8
    96017a28:	aa1303e0 	mov	x0, x19
    96017a2c:	97ffff89 	bl	96017850 <sdmmc_read_response>
    96017a30:	14000017 	b	96017a8c <sdmmc_recover_controller_error+0x1a4>
		sdmmc_init_controller(hsdmmc, hsdmmc->controller_id);
    96017a34:	b9405a61 	ldr	w1, [x19, #88]
    96017a38:	aa1303e0 	mov	x0, x19
    96017a3c:	97fffba0 	bl	960168bc <sdmmc_init_controller>
		present_state = sdmmc_readl(hsdmmc, PRESENT_STATE);
    96017a40:	b9405e60 	ldr	w0, [x19, #92]
    96017a44:	11009000 	add	w0, w0, #0x24
    96017a48:	b9400000 	ldr	w0, [x0]
		if (NV_DRF_VAL(SDMMCAB, PRESENT_STATE, DAT_3_0_LINE_LEVEL,
    96017a4c:	f26c0c1f 	tst	x0, #0xf00000
    96017a50:	540002c0 	b.eq	96017aa8 <sdmmc_recover_controller_error+0x1c0>  // b.none
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 7);
    96017a54:	5280e0c0 	mov	w0, #0x706                 	// #1798
    96017a58:	17ffffbf 	b	96017954 <sdmmc_recover_controller_error+0x6c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 35);
    96017a5c:	52846040 	mov	w0, #0x2302                	// #8962
    96017a60:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
			goto fail;
		}
	}
fail:
	return error;
}
    96017a64:	d65f03c0 	ret
		error = sdmmc_cmd_txr_ready(hsdmmc);
    96017a68:	aa1303e0 	mov	x0, x19
    96017a6c:	97ffff47 	bl	96017788 <sdmmc_cmd_txr_ready>
		if (error != TEGRABL_NO_ERROR) {
    96017a70:	350000e0 	cbnz	w0, 96017a8c <sdmmc_recover_controller_error+0x1a4>
		error = sdmmc_data_txr_ready(hsdmmc);
    96017a74:	aa1303e0 	mov	x0, x19
    96017a78:	97ffff5d 	bl	960177ec <sdmmc_data_txr_ready>
		if (error != TEGRABL_NO_ERROR) {
    96017a7c:	34fffd20 	cbz	w0, 96017a20 <sdmmc_recover_controller_error+0x138>
			pr_error("Data not in txr mode\n");
    96017a80:	90000140 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96017a84:	911e6c00 	add	x0, x0, #0x79b
    96017a88:	94002afa 	bl	96022670 <tegrabl_printf>
	tegrabl_udelay(40);
    96017a8c:	d2800500 	mov	x0, #0x28                  	// #40
    96017a90:	94002085 	bl	9601fca4 <tegrabl_udelay>
	present_state = sdmmc_readl(hsdmmc, PRESENT_STATE);
    96017a94:	b9405e60 	ldr	w0, [x19, #92]
    96017a98:	11009000 	add	w0, w0, #0x24
    96017a9c:	b9400000 	ldr	w0, [x0]
	if (NV_DRF_VAL(SDMMCAB, PRESENT_STATE,
    96017aa0:	f26c0c1f 	tst	x0, #0xf00000
    96017aa4:	54fffc81 	b.ne	96017a34 <sdmmc_recover_controller_error+0x14c>  // b.any
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017aa8:	52800000 	mov	w0, #0x0                   	// #0
}
    96017aac:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017ab0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96017ab4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96017ab8:	d65f03c0 	ret

0000000096017abc <sdmmc_try_send_command>:
	if (hsdmmc == NULL) {
    96017abc:	b4000563 	cbz	x3, 96017b68 <sdmmc_try_send_command+0xac>
{
    96017ac0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96017ac4:	910003fd 	mov	x29, sp
    96017ac8:	a90153f3 	stp	x19, x20, [sp, #16]
    96017acc:	aa0303f3 	mov	x19, x3
    96017ad0:	a9025bf5 	stp	x21, x22, [sp, #32]
    96017ad4:	2a0003f4 	mov	w20, w0
    96017ad8:	12001c56 	and	w22, w2, #0xff
    96017adc:	2a0103f5 	mov	w21, w1
    96017ae0:	f9001bf7 	str	x23, [sp, #48]
    96017ae4:	52800077 	mov	w23, #0x3                   	// #3
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    96017ae8:	b9405e60 	ldr	w0, [x19, #92]
    96017aec:	1100c000 	add	w0, w0, #0x30
    96017af0:	b9400001 	ldr	w1, [x0]
		sdmmc_writel(hsdmmc, INTERRUPT_STATUS, int_status);
    96017af4:	b9000001 	str	w1, [x0]
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    96017af8:	b9405e60 	ldr	w0, [x19, #92]
    96017afc:	1100c001 	add	w1, w0, #0x30
		sdmmc_writel(hsdmmc, ARGUMENT, arg);
    96017b00:	11002000 	add	w0, w0, #0x8
		int_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    96017b04:	b9400021 	ldr	w1, [x1]
		sdmmc_writel(hsdmmc, ARGUMENT, arg);
    96017b08:	b9000015 	str	w21, [x0]
		sdmmc_writel(hsdmmc, CMD_XFER_MODE, cmd_reg);
    96017b0c:	b9405e60 	ldr	w0, [x19, #92]
    96017b10:	11003000 	add	w0, w0, #0xc
    96017b14:	b9000014 	str	w20, [x0]
		tegrabl_udelay(2000);
    96017b18:	d280fa00 	mov	x0, #0x7d0                 	// #2000
    96017b1c:	94002062 	bl	9601fca4 <tegrabl_udelay>
		if (sdmmc_wait_command_complete(hsdmmc, cmd_reg, arg) == 0U) {
    96017b20:	2a1503e2 	mov	w2, w21
    96017b24:	2a1403e1 	mov	w1, w20
    96017b28:	aa1303e0 	mov	x0, x19
    96017b2c:	97fffe00 	bl	9601732c <sdmmc_wait_command_complete>
    96017b30:	34000220 	cbz	w0, 96017b74 <sdmmc_try_send_command+0xb8>
		error = sdmmc_recover_controller_error(hsdmmc, data_cmd);
    96017b34:	2a1603e1 	mov	w1, w22
    96017b38:	aa1303e0 	mov	x0, x19
    96017b3c:	97ffff6b 	bl	960178e8 <sdmmc_recover_controller_error>
		if (error != TEGRABL_NO_ERROR) {
    96017b40:	350000a0 	cbnz	w0, 96017b54 <sdmmc_try_send_command+0x98>
	while (trials != 0U) {
    96017b44:	710006f7 	subs	w23, w23, #0x1
    96017b48:	54fffd01 	b.ne	96017ae8 <sdmmc_try_send_command+0x2c>  // b.any
		error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 1);
    96017b4c:	528022e0 	mov	w0, #0x117                 	// #279
    96017b50:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    96017b54:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017b58:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96017b5c:	f9401bf7 	ldr	x23, [sp, #48]
    96017b60:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96017b64:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 31);
    96017b68:	5283e040 	mov	w0, #0x1f02                	// #7938
    96017b6c:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    96017b70:	d65f03c0 	ret
		error = TEGRABL_NO_ERROR;
    96017b74:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    96017b78:	17fffff7 	b	96017b54 <sdmmc_try_send_command+0x98>

0000000096017b7c <sdmmc_set_data_width>:
	struct tegrabl_sdmmc *hsdmmc)
{
	uint32_t reg = 0;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017b7c:	b40001e1 	cbz	x1, 96017bb8 <sdmmc_set_data_width+0x3c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 36);
		goto fail;
	}
	reg = sdmmc_readl(hsdmmc, POWER_CONTROL_HOST);
    96017b80:	b9405c22 	ldr	w2, [x1, #92]
    96017b84:	1100a042 	add	w2, w2, #0x28
    96017b88:	b9400041 	ldr	w1, [x2]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, POWER_CONTROL_HOST, DATA_XFER_WIDTH, width,
    96017b8c:	121e7823 	and	w3, w1, #0xfffffffd
    96017b90:	531f0001 	ubfiz	w1, w0, #1, #1
		reg);
	/* When 8-bit data width is enabled, the bit field DATA_XFER_WIDTH */
	/* value is not valid. */
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, POWER_CONTROL_HOST,
    96017b94:	121d7800 	and	w0, w0, #0xfffffffb
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, POWER_CONTROL_HOST, DATA_XFER_WIDTH, width,
    96017b98:	2a030021 	orr	w1, w1, w3
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, POWER_CONTROL_HOST,
    96017b9c:	7100081f 	cmp	w0, #0x2
    96017ba0:	121a7821 	and	w1, w1, #0xffffffdf
    96017ba4:	1a9f17e0 	cset	w0, eq  // eq = none
    96017ba8:	2a001421 	orr	w1, w1, w0, lsl #5
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017bac:	52800000 	mov	w0, #0x0                   	// #0
		EXTENDED_DATA_TRANSFER_WIDTH,
		(width == DATA_WIDTH_8BIT) || (width == DATA_WIDTH_DDR_8BIT) ? 1 : 0,
		reg);
	sdmmc_writel(hsdmmc, POWER_CONTROL_HOST, reg);
    96017bb0:	b9000041 	str	w1, [x2]

fail:
	return error;
}
    96017bb4:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 36);
    96017bb8:	52848040 	mov	w0, #0x2402                	// #9218
    96017bbc:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017bc0:	17fffffd 	b	96017bb4 <sdmmc_set_data_width+0x38>

0000000096017bc4 <sdmmc_set_num_blocks>:
	*/
	reg = NV_DRF_NUM(SDMMCAB, BLOCK_SIZE_BLOCK_COUNT, BLOCKS_COUNT,
			num_blocks) |
			NV_DRF_DEF(SDMMCAB, BLOCK_SIZE_BLOCK_COUNT,
				HOST_DMA_BUFFER_SIZE, DMA512K) |
			NV_DRF_NUM(SDMMCAB, BLOCK_SIZE_BLOCK_COUNT,
    96017bc4:	12002c00 	and	w0, w0, #0xfff
	reg = NV_DRF_NUM(SDMMCAB, BLOCK_SIZE_BLOCK_COUNT, BLOCKS_COUNT,
    96017bc8:	32140800 	orr	w0, w0, #0x7000
    96017bcc:	2a014000 	orr	w0, w0, w1, lsl #16
				XFER_BLOCK_SIZE_11_0, block_size);

	sdmmc_writel(hsdmmc, BLOCK_SIZE_BLOCK_COUNT, reg);
    96017bd0:	b9405c41 	ldr	w1, [x2, #92]
    96017bd4:	11001021 	add	w1, w1, #0x4
    96017bd8:	b9000020 	str	w0, [x1]
}
    96017bdc:	d65f03c0 	ret

0000000096017be0 <sdmmc_setup_dma>:
 *  @param hsdmmc Context information to determine the base
 *                 address of controller.
 */
void sdmmc_setup_dma(dma_addr_t buf, struct tegrabl_sdmmc *hsdmmc)
{
	if (hsdmmc->is_hostv4_enabled == false) {
    96017be0:	394a8023 	ldrb	w3, [x1, #672]
    96017be4:	b9405c22 	ldr	w2, [x1, #92]
    96017be8:	35000083 	cbnz	w3, 96017bf8 <sdmmc_setup_dma+0x18>
		sdmmc_writel(hsdmmc, SYSTEM_ADDRESS, (uintptr_t)buf);
    96017bec:	2a0203e2 	mov	w2, w2
    96017bf0:	b9000040 	str	w0, [x2]
	else {
		sdmmc_writel(hsdmmc, ADMA_SYSTEM_ADDRESS, (uint32_t) buf);
		sdmmc_writel(hsdmmc, UPPER_ADMA_SYSTEM_ADDRESS, (uint32_t)(buf >> 32));
	}
#endif
}
    96017bf4:	d65f03c0 	ret
		sdmmc_writel(hsdmmc, ADMA_SYSTEM_ADDRESS, (uint32_t) buf);
    96017bf8:	11016042 	add	w2, w2, #0x58
    96017bfc:	b9000040 	str	w0, [x2]
		sdmmc_writel(hsdmmc, UPPER_ADMA_SYSTEM_ADDRESS, (uint32_t)(buf >> 32));
    96017c00:	d360fc00 	lsr	x0, x0, #32
    96017c04:	b9405c21 	ldr	w1, [x1, #92]
    96017c08:	11017021 	add	w1, w1, #0x5c
    96017c0c:	b9000020 	str	w0, [x1]
}
    96017c10:	17fffff9 	b	96017bf4 <sdmmc_setup_dma+0x14>

0000000096017c14 <sdmmc_query_status>:
 *  @param hsdmmc Context information to determine the base
 *                 address of controller.
 *  @return Status of the device
 */
sdmmc_device_status sdmmc_query_status(struct tegrabl_sdmmc *hsdmmc)
{
    96017c14:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96017c18:	910003fd 	mov	x29, sp
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS, DMA_INTERRUPT, GEN_INT);

	data_timeout_error =
		NV_DRF_DEF(SDMMCAB, INTERRUPT_STATUS, DATA_TIMEOUT_ERR, TIMEOUT);

	if (hsdmmc->device_status == DEVICE_STATUS_IO_PROGRESS) {
    96017c1c:	b9402001 	ldr	w1, [x0, #32]
{
    96017c20:	f9000bf3 	str	x19, [sp, #16]
    96017c24:	aa0003f3 	mov	x19, x0
	if (hsdmmc->device_status == DEVICE_STATUS_IO_PROGRESS) {
    96017c28:	7100043f 	cmp	w1, #0x1
    96017c2c:	54000181 	b.ne	96017c5c <sdmmc_query_status+0x48>  // b.any
		/* Check whether Transfer is done. */
		intr_status = sdmmc_readl(hsdmmc, INTERRUPT_STATUS);
    96017c30:	b9405c02 	ldr	w2, [x0, #92]
    96017c34:	1100c042 	add	w2, w2, #0x30
    96017c38:	b9400043 	ldr	w3, [x2]

		transfer_done =
			NV_DRF_VAL(SDMMCAB, INTERRUPT_STATUS, XFER_COMPLETE, intr_status);
		/* Check whether there are any errors. */
		if ((intr_status & error_mask) != 0U) {
    96017c3c:	72101864 	ands	w4, w3, #0x7f0000
    96017c40:	54000160 	b.eq	96017c6c <sdmmc_query_status+0x58>  // b.none
			if ((intr_status & error_mask) == data_timeout_error) {
				hsdmmc->device_status = DEVICE_STATUS_DATA_TIMEOUT;
    96017c44:	7144009f 	cmp	w4, #0x100, lsl #12
    96017c48:	52800082 	mov	w2, #0x4                   	// #4
    96017c4c:	52800063 	mov	w3, #0x3                   	// #3
    96017c50:	1a830042 	csel	w2, w2, w3, eq  // eq = none
    96017c54:	b9002002 	str	w2, [x0, #32]
			} else {
				hsdmmc->device_status = DEVICE_STATUS_CRC_FAILURE;
			}
			/* Recover from errors here. */
			(void)sdmmc_recover_controller_error(hsdmmc, 1);
    96017c58:	97ffff24 	bl	960178e8 <sdmmc_recover_controller_error>
		} else {
			/* No Action Required */
		}
	}
	return hsdmmc->device_status;
}
    96017c5c:	b9402260 	ldr	w0, [x19, #32]
    96017c60:	f9400bf3 	ldr	x19, [sp, #16]
    96017c64:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017c68:	d65f03c0 	ret
		} else if ((intr_status & dma_boundary_interrupt) != 0U) {
    96017c6c:	36180203 	tbz	w3, #3, 96017cac <sdmmc_query_status+0x98>
			sdmmc_writel(hsdmmc, INTERRUPT_STATUS, dma_boundary_interrupt);
    96017c70:	52800100 	mov	w0, #0x8                   	// #8
    96017c74:	b9000040 	str	w0, [x2]
			if (hsdmmc->is_hostv4_enabled == false) {
    96017c78:	394a8260 	ldrb	w0, [x19, #672]
    96017c7c:	350000a0 	cbnz	w0, 96017c90 <sdmmc_query_status+0x7c>
				sdma_address = sdmmc_readl(hsdmmc, SYSTEM_ADDRESS);
    96017c80:	b9405e60 	ldr	w0, [x19, #92]
				sdma_address = sdmmc_readl(hsdmmc, ADMA_SYSTEM_ADDRESS);
    96017c84:	b9400001 	ldr	w1, [x0]
				sdmmc_writel(hsdmmc, ADMA_SYSTEM_ADDRESS, sdma_address);
    96017c88:	b9000001 	str	w1, [x0]
    96017c8c:	17fffff4 	b	96017c5c <sdmmc_query_status+0x48>
				sdma_address = sdmmc_readl(hsdmmc, UPPER_ADMA_SYSTEM_ADDRESS);
    96017c90:	b9405e60 	ldr	w0, [x19, #92]
    96017c94:	11017000 	add	w0, w0, #0x5c
    96017c98:	b9400001 	ldr	w1, [x0]
				sdmmc_writel(hsdmmc, UPPER_ADMA_SYSTEM_ADDRESS, sdma_address);
    96017c9c:	b9000001 	str	w1, [x0]
				sdma_address = sdmmc_readl(hsdmmc, ADMA_SYSTEM_ADDRESS);
    96017ca0:	b9405e60 	ldr	w0, [x19, #92]
    96017ca4:	11016000 	add	w0, w0, #0x58
    96017ca8:	17fffff7 	b	96017c84 <sdmmc_query_status+0x70>
		} else if (transfer_done != 0U) {
    96017cac:	36080083 	tbz	w3, #1, 96017cbc <sdmmc_query_status+0xa8>
			hsdmmc->device_status = DEVICE_STATUS_IDLE;
    96017cb0:	b900201f 	str	wzr, [x0, #32]
			sdmmc_writel(hsdmmc, INTERRUPT_STATUS, intr_status);
    96017cb4:	b9000043 	str	w3, [x2]
    96017cb8:	17ffffe9 	b	96017c5c <sdmmc_query_status+0x48>
		} else if ((uint32_t)(tegrabl_get_timestamp_ms() -
    96017cbc:	94001ff4 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    96017cc0:	f9402661 	ldr	x1, [x19, #72]
    96017cc4:	4b010000 	sub	w0, w0, w1
    96017cc8:	52812001 	mov	w1, #0x900                 	// #2304
    96017ccc:	72a007a1 	movk	w1, #0x3d, lsl #16
    96017cd0:	6b01001f 	cmp	w0, w1
    96017cd4:	54fffc49 	b.ls	96017c5c <sdmmc_query_status+0x48>  // b.plast
			hsdmmc->device_status = DEVICE_STATUS_IO_FAILURE;
    96017cd8:	52800040 	mov	w0, #0x2                   	// #2
    96017cdc:	b9002260 	str	w0, [x19, #32]
    96017ce0:	17ffffdf 	b	96017c5c <sdmmc_query_status+0x48>

0000000096017ce4 <sdmmc_toggle_high_speed>:
	struct tegrabl_sdmmc *hsdmmc)
{
	uint32_t reg = 0;

	pr_trace("Toggle high speed bit\n");
	reg = sdmmc_readl(hsdmmc, POWER_CONTROL_HOST);
    96017ce4:	b9405c21 	ldr	w1, [x1, #92]
{
    96017ce8:	12001c00 	and	w0, w0, #0xff
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, POWER_CONTROL_HOST, HIGH_SPEED_EN,
    96017cec:	7100041f 	cmp	w0, #0x1
	reg = sdmmc_readl(hsdmmc, POWER_CONTROL_HOST);
    96017cf0:	1100a021 	add	w1, w1, #0x28
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, POWER_CONTROL_HOST, HIGH_SPEED_EN,
    96017cf4:	1a9f17e0 	cset	w0, eq  // eq = none
	reg = sdmmc_readl(hsdmmc, POWER_CONTROL_HOST);
    96017cf8:	b9400022 	ldr	w2, [x1]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, POWER_CONTROL_HOST, HIGH_SPEED_EN,
    96017cfc:	121d7842 	and	w2, w2, #0xfffffffb
    96017d00:	2a000840 	orr	w0, w2, w0, lsl #2
			((enable == 1U) ? 1 : 0), reg);
	sdmmc_writel(hsdmmc, POWER_CONTROL_HOST, reg);
    96017d04:	b9000020 	str	w0, [x1]
}
    96017d08:	d65f03c0 	ret

0000000096017d0c <sdmmc_set_default_region>:
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	sdmmc_access_region boot_part;

	if (hsdmmc == NULL) {
    96017d0c:	b40000e0 	cbz	x0, 96017d28 <sdmmc_set_default_region+0x1c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 39);
		goto fail;
	}

	boot_part = (sdmmc_access_region)((hsdmmc->boot_config >>
    96017d10:	b9405001 	ldr	w1, [x0, #80]
    96017d14:	d3431421 	ubfx	x1, x1, #3, #3
			ECSD_BC_BPE_OFFSET) & ECSD_BC_BPE_MASK);

	if (boot_part == ECSD_BC_BPE_BAP1 || boot_part == ECSD_BC_BPE_BAP2) {
    96017d18:	51000422 	sub	w2, w1, #0x1
    96017d1c:	7100045f 	cmp	w2, #0x1
    96017d20:	540000a8 	b.hi	96017d34 <sdmmc_set_default_region+0x28>  // b.pmore
		error =  sdmmc_select_access_region(hsdmmc, boot_part);
    96017d24:	17fffc56 	b	96016e7c <sdmmc_select_access_region>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 39);
    96017d28:	5284e040 	mov	w0, #0x2702                	// #9986
    96017d2c:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
			goto fail;
		}
	}
fail:
	return error;
}
    96017d30:	d65f03c0 	ret
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017d34:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    96017d38:	17fffffe 	b	96017d30 <sdmmc_set_default_region+0x24>

0000000096017d3c <sdmmc_wait_for_data_line_ready>:
	uint32_t present_state;
	uint32_t data_line_active;
	uint32_t timeout = DATA_TIMEOUT_IN_US;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017d3c:	b40002c0 	cbz	x0, 96017d94 <sdmmc_wait_for_data_line_ready+0x58>
{
    96017d40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96017d44:	910003fd 	mov	x29, sp
    96017d48:	a90153f3 	stp	x19, x20, [sp, #16]
    96017d4c:	52812014 	mov	w20, #0x900                 	// #2304
    96017d50:	aa0003f3 	mov	x19, x0
    96017d54:	72a007b4 	movk	w20, #0x3d, lsl #16
		goto fail;
	}

	pr_trace("Wait for Dataline ready\n");
	while (timeout != 0U) {
		present_state = sdmmc_readl(hsdmmc, PRESENT_STATE);
    96017d58:	b9405e60 	ldr	w0, [x19, #92]
    96017d5c:	11009000 	add	w0, w0, #0x24
    96017d60:	b9400001 	ldr	w1, [x0]
		data_line_active = NV_DRF_VAL(SDMMCAB, PRESENT_STATE, DAT_LINE_ACTIVE,
			present_state);
		if (data_line_active == 0U) {
    96017d64:	121e0020 	and	w0, w1, #0x4
    96017d68:	37100081 	tbnz	w1, #2, 96017d78 <sdmmc_wait_for_data_line_ready+0x3c>
			goto fail;
		}
	}
fail:
	return error;
}
    96017d6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017d70:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017d74:	d65f03c0 	ret
		tegrabl_udelay(1);
    96017d78:	d2800020 	mov	x0, #0x1                   	// #1
    96017d7c:	94001fca 	bl	9601fca4 <tegrabl_udelay>
		if (timeout == 0U) {
    96017d80:	71000694 	subs	w20, w20, #0x1
    96017d84:	54fffea1 	b.ne	96017d58 <sdmmc_wait_for_data_line_ready+0x1c>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 8);
    96017d88:	528100c0 	mov	w0, #0x806                 	// #2054
    96017d8c:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017d90:	17fffff7 	b	96017d6c <sdmmc_wait_for_data_line_ready+0x30>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 40);
    96017d94:	52850040 	mov	w0, #0x2802                	// #10242
    96017d98:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
}
    96017d9c:	d65f03c0 	ret

0000000096017da0 <sdmmc_get_correct_boot_block>:
	bnum_t sector_per_boot_block;
	bnum_t current_sector;
	bnum_t sector_in_current_region;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((hsdmmc == NULL) || (start_sector == NULL) || (num_sectors == NULL)) {
    96017da0:	f100005f 	cmp	x2, #0x0
    96017da4:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
    96017da8:	540005a0 	b.eq	96017e5c <sdmmc_get_correct_boot_block+0xbc>  // b.none
    96017dac:	b4000581 	cbz	x1, 96017e5c <sdmmc_get_correct_boot_block+0xbc>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 41);
		goto fail;
	}

	sector_per_boot_block = hsdmmc->boot_blocks;
    96017db0:	b9403043 	ldr	w3, [x2, #48]

	pr_trace("sector_per_boot_block = %d\n", sector_per_boot_block);

	/* If boot partition size is zero, then the card is either eSD or */
	/* eMMC version is < 4.3. */
	if (hsdmmc->boot_blocks == 0U) {
    96017db4:	350000a3 	cbnz	w3, 96017dc8 <sdmmc_get_correct_boot_block+0x28>
		hsdmmc->current_access_region = USER_PARTITION;
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 42);
    96017db8:	52854040 	mov	w0, #0x2a02                	// #10754
		hsdmmc->current_access_region = USER_PARTITION;
    96017dbc:	b900285f 	str	wzr, [x2, #40]
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 41);
    96017dc0:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_debug("sdmmc get boot block: exit, error = %08X\n", error);
	}
	return error;
}
    96017dc4:	d65f03c0 	ret
{
    96017dc8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96017dcc:	910003fd 	mov	x29, sp
    96017dd0:	a90153f3 	stp	x19, x20, [sp, #16]
    96017dd4:	a9025bf5 	stp	x21, x22, [sp, #32]
	current_sector = *start_sector;
    96017dd8:	b9400013 	ldr	w19, [x0]
	sector_in_current_region = *num_sectors;
    96017ddc:	b9400024 	ldr	w4, [x1]
	if (current_sector < sector_per_boot_block) {
    96017de0:	6b13007f 	cmp	w3, w19
    96017de4:	54000229 	b.ls	96017e28 <sdmmc_get_correct_boot_block+0x88>  // b.plast
		if (sector_in_current_region > sector_per_boot_block - current_sector) {
    96017de8:	4b130063 	sub	w3, w3, w19
    96017dec:	6b04007f 	cmp	w3, w4
    96017df0:	1a849074 	csel	w20, w3, w4, ls  // ls = plast
		region = BOOT_PARTITION_1;
    96017df4:	52800023 	mov	w3, #0x1                   	// #1
    96017df8:	aa0003f5 	mov	x21, x0
	if (region != hsdmmc->current_access_region) {
    96017dfc:	b9402840 	ldr	w0, [x2, #40]
    96017e00:	aa0103f6 	mov	x22, x1
    96017e04:	6b03001f 	cmp	w0, w3
    96017e08:	54000201 	b.ne	96017e48 <sdmmc_get_correct_boot_block+0xa8>  // b.any
	*start_sector = current_sector;
    96017e0c:	b90002b3 	str	w19, [x21]
	*num_sectors  = sector_in_current_region;
    96017e10:	52800000 	mov	w0, #0x0                   	// #0
    96017e14:	b90002d4 	str	w20, [x22]
}
    96017e18:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017e1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96017e20:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96017e24:	d65f03c0 	ret
	} else if (current_sector < (sector_per_boot_block << 1)) {
    96017e28:	6b03067f 	cmp	w19, w3, lsl #1
    96017e2c:	540001c2 	b.cs	96017e64 <sdmmc_get_correct_boot_block+0xc4>  // b.hs, b.nlast
		current_sector = current_sector - sector_per_boot_block;
    96017e30:	4b030273 	sub	w19, w19, w3
		if (sector_in_current_region > sector_per_boot_block - current_sector) {
    96017e34:	4b130063 	sub	w3, w3, w19
    96017e38:	6b04007f 	cmp	w3, w4
    96017e3c:	1a849074 	csel	w20, w3, w4, ls  // ls = plast
		region = BOOT_PARTITION_2;
    96017e40:	52800043 	mov	w3, #0x2                   	// #2
    96017e44:	17ffffed 	b	96017df8 <sdmmc_get_correct_boot_block+0x58>
		error = sdmmc_select_access_region(hsdmmc, region);
    96017e48:	2a0303e1 	mov	w1, w3
    96017e4c:	aa0203e0 	mov	x0, x2
    96017e50:	97fffc0b 	bl	96016e7c <sdmmc_select_access_region>
		if (error != TEGRABL_NO_ERROR) {
    96017e54:	34fffdc0 	cbz	w0, 96017e0c <sdmmc_get_correct_boot_block+0x6c>
    96017e58:	17fffff0 	b	96017e18 <sdmmc_get_correct_boot_block+0x78>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 41);
    96017e5c:	52852040 	mov	w0, #0x2902                	// #10498
    96017e60:	17ffffd8 	b	96017dc0 <sdmmc_get_correct_boot_block+0x20>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 43);
    96017e64:	52856040 	mov	w0, #0x2b02                	// #11010
    96017e68:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017e6c:	17ffffeb 	b	96017e18 <sdmmc_get_correct_boot_block+0x78>

0000000096017e70 <sdmmc_update_drv_settings>:

void sdmmc_update_drv_settings(struct tegrabl_sdmmc *hsdmmc, uint32_t instance)
{
	uint32_t val;

	if (instance != 3U) {
    96017e70:	71000c3f 	cmp	w1, #0x3
    96017e74:	54000161 	b.ne	96017ea0 <sdmmc_update_drv_settings+0x30>  // b.any
		return;
	}

	val = sdmmc_readl(hsdmmc, SDMEMCOMPPADCTRL);
    96017e78:	b9405c01 	ldr	w1, [x0, #92]
    96017e7c:	5281ffe2 	mov	w2, #0xfff                 	// #4095
    96017e80:	72bf0102 	movk	w2, #0xf808, lsl #16
    96017e84:	11078021 	add	w1, w1, #0x1e0
    96017e88:	b9400020 	ldr	w0, [x1]
    96017e8c:	0a020000 	and	w0, w0, w2
	val = NV_FLD_SET_DRF_NUM(SDMMCAB, SDMEMCOMPPADCTRL, COMP_PAD_DRVUP_OVR,
			0xA, val);
	val = NV_FLD_SET_DRF_NUM(SDMMCAB, SDMEMCOMPPADCTRL, COMP_PAD_DRVDN_OVR,
    96017e90:	52940002 	mov	w2, #0xa000                	// #40960
    96017e94:	72a01402 	movk	w2, #0xa0, lsl #16
    96017e98:	2a020000 	orr	w0, w0, w2
			0xA, val);
	sdmmc_writel(hsdmmc, SDMEMCOMPPADCTRL, val);
    96017e9c:	b9000020 	str	w0, [x1]

	return;
}
    96017ea0:	d65f03c0 	ret

0000000096017ea4 <sdmmc_auto_calibrate>:
{
	uint32_t reg = 0;
	uint32_t timeout = TIME_OUT_IN_US;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017ea4:	b4000620 	cbz	x0, 96017f68 <sdmmc_auto_calibrate+0xc4>
{
    96017ea8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 44);
		goto fail;
	}

	/* disable card clock before auto calib */
	sdmmc_card_clock_enable(hsdmmc, false);
    96017eac:	52800001 	mov	w1, #0x0                   	// #0
{
    96017eb0:	910003fd 	mov	x29, sp
    96017eb4:	a90153f3 	stp	x19, x20, [sp, #16]
    96017eb8:	aa0003f3 	mov	x19, x0
	sdmmc_card_clock_enable(hsdmmc, false);
    96017ebc:	b9405c00 	ldr	w0, [x0, #92]
			AUTO_CAL_START, 1, reg);

	sdmmc_writel(hsdmmc, AUTO_CAL_CONFIG, reg);

	// Wait till Auto cal active is cleared or timeout upto 100ms
	while (timeout != 0U) {
    96017ec0:	5290d414 	mov	w20, #0x86a0                	// #34464
    96017ec4:	72a00034 	movk	w20, #0x1, lsl #16
	sdmmc_card_clock_enable(hsdmmc, false);
    96017ec8:	97fffd41 	bl	960173cc <sdmmc_card_clock_enable.isra.0>
	reg = sdmmc_readl(hsdmmc, SDMEMCOMPPADCTRL);
    96017ecc:	b9405e60 	ldr	w0, [x19, #92]
    96017ed0:	11078000 	add	w0, w0, #0x1e0
    96017ed4:	b9400001 	ldr	w1, [x0]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, SDMEMCOMPPADCTRL, PAD_E_INPUT_OR_E_PWRD,
    96017ed8:	32010021 	orr	w1, w1, #0x80000000
	sdmmc_writel(hsdmmc, SDMEMCOMPPADCTRL, reg);
    96017edc:	b9000001 	str	w1, [x0]
	tegrabl_udelay(2);
    96017ee0:	d2800040 	mov	x0, #0x2                   	// #2
    96017ee4:	94001f70 	bl	9601fca4 <tegrabl_udelay>
	reg = sdmmc_readl(hsdmmc, AUTO_CAL_CONFIG);
    96017ee8:	b9405e61 	ldr	w1, [x19, #92]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, AUTO_CAL_CONFIG,
    96017eec:	128fefe2 	mov	w2, #0xffff8080            	// #-32640
	reg = sdmmc_readl(hsdmmc, AUTO_CAL_CONFIG);
    96017ef0:	11079021 	add	w1, w1, #0x1e4
    96017ef4:	b9400020 	ldr	w0, [x1]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, AUTO_CAL_CONFIG,
    96017ef8:	0a020000 	and	w0, w0, w2
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, AUTO_CAL_CONFIG,
    96017efc:	52b40002 	mov	w2, #0xa0000000            	// #-1610612736
    96017f00:	2a020000 	orr	w0, w0, w2
	sdmmc_writel(hsdmmc, AUTO_CAL_CONFIG, reg);
    96017f04:	b9000020 	str	w0, [x1]
		reg = sdmmc_readl(hsdmmc, AUTO_CAL_STATUS);
    96017f08:	b9405e60 	ldr	w0, [x19, #92]
    96017f0c:	1107b000 	add	w0, w0, #0x1ec
    96017f10:	b9400000 	ldr	w0, [x0]
		reg = NV_DRF_VAL(SDMMCAB, AUTO_CAL_STATUS, AUTO_CAL_ACTIVE, reg);
		if (reg == 0U) {
    96017f14:	37f80060 	tbnz	w0, #31, 96017f20 <sdmmc_auto_calibrate+0x7c>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017f18:	52800003 	mov	w3, #0x0                   	// #0
    96017f1c:	14000007 	b	96017f38 <sdmmc_auto_calibrate+0x94>
			break;
		}
		tegrabl_udelay(1);
    96017f20:	d2800020 	mov	x0, #0x1                   	// #1
    96017f24:	94001f60 	bl	9601fca4 <tegrabl_udelay>
		timeout--;
		if (timeout == 0U) {
    96017f28:	71000694 	subs	w20, w20, #0x1
    96017f2c:	54fffee1 	b.ne	96017f08 <sdmmc_auto_calibrate+0x64>  // b.any
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 9);
    96017f30:	528120c3 	mov	w3, #0x906                 	// #2310
    96017f34:	72a1e1e3 	movk	w3, #0xf0f, lsl #16
	}

fail:
	if (hsdmmc != NULL) {
		/* clear E_INPUT_OR_E_PWRD bit after auto calib */
		reg = sdmmc_readl(hsdmmc, SDMEMCOMPPADCTRL);
    96017f38:	b9405e60 	ldr	w0, [x19, #92]
    96017f3c:	11078000 	add	w0, w0, #0x1e0
    96017f40:	b9400001 	ldr	w1, [x0]
		reg = NV_FLD_SET_DRF_NUM(SDMMCAB, SDMEMCOMPPADCTRL, PAD_E_INPUT_OR_E_PWRD,
    96017f44:	12007821 	and	w1, w1, #0x7fffffff
				0, reg);
		sdmmc_writel(hsdmmc, SDMEMCOMPPADCTRL, reg);
    96017f48:	b9000001 	str	w1, [x0]

		/* enable card clock after auto calib */
		sdmmc_card_clock_enable(hsdmmc, true);
    96017f4c:	52800021 	mov	w1, #0x1                   	// #1
    96017f50:	b9405e60 	ldr	w0, [x19, #92]
    96017f54:	97fffd1e 	bl	960173cc <sdmmc_card_clock_enable.isra.0>

	if (error != TEGRABL_NO_ERROR) {
		pr_debug("Auto calibration failed\n");
	}
	return error;
}
    96017f58:	2a0303e0 	mov	w0, w3
    96017f5c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96017f60:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96017f64:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 44);
    96017f68:	52858043 	mov	w3, #0x2c02                	// #11266
    96017f6c:	72a1e1e3 	movk	w3, #0xf0f, lsl #16
}
    96017f70:	2a0303e0 	mov	w0, w3
    96017f74:	d65f03c0 	ret

0000000096017f78 <sdmmc_io_spare_update>:
{
	uint32_t val;
	uint32_t temp;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (hsdmmc == NULL) {
    96017f78:	b40001a0 	cbz	x0, 96017fac <sdmmc_io_spare_update+0x34>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 45);
		goto fail;
	}

	/* set SPARE_OUT[3] bit */
	val = sdmmc_readl(hsdmmc, IO_SPARE);
    96017f7c:	b9405c01 	ldr	w1, [x0, #92]
    96017f80:	1107c021 	add	w1, w1, #0x1f0
    96017f84:	b9400022 	ldr	w2, [x1]
	temp = NV_DRF_VAL(SDMMCAB, IO_SPARE, SPARE_OUT, val);
	temp |= 1U << 3;
	val = NV_FLD_SET_DRF_NUM(SDMMCAB, IO_SPARE, SPARE_OUT, temp, val);
    96017f88:	320d0042 	orr	w2, w2, #0x80000
	sdmmc_writel(hsdmmc, IO_SPARE, val);
    96017f8c:	b9000022 	str	w2, [x1]

	val = sdmmc_readl(hsdmmc, VENDOR_IO_TRIM_CNTRL);
    96017f90:	b9405c00 	ldr	w0, [x0, #92]
    96017f94:	1106b000 	add	w0, w0, #0x1ac
    96017f98:	b9400001 	ldr	w1, [x0]
	val = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_IO_TRIM_CNTRL, SEL_VREG, 0, val);
    96017f9c:	121d7821 	and	w1, w1, #0xfffffffb
	sdmmc_writel(hsdmmc, VENDOR_IO_TRIM_CNTRL, val);
    96017fa0:	b9000001 	str	w1, [x0]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96017fa4:	52800000 	mov	w0, #0x0                   	// #0

fail:
	return error;
}
    96017fa8:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 45);
    96017fac:	5285a040 	mov	w0, #0x2d02                	// #11522
    96017fb0:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	return error;
    96017fb4:	17fffffd 	b	96017fa8 <sdmmc_io_spare_update+0x30>

0000000096017fb8 <sdmmc_set_tap_trim>:

void sdmmc_set_tap_trim(struct tegrabl_sdmmc *hsdmmc)
{
	uint32_t reg;

	reg = sdmmc_readl(hsdmmc, VENDOR_CLOCK_CNTRL);
    96017fb8:	b9405c02 	ldr	w2, [x0, #92]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_CLOCK_CNTRL, TRIM_VAL,
    96017fbc:	b9429c03 	ldr	w3, [x0, #668]
	reg = sdmmc_readl(hsdmmc, VENDOR_CLOCK_CNTRL);
    96017fc0:	11040042 	add	w2, w2, #0x100
			hsdmmc->trim_value, reg);
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_CLOCK_CNTRL, TAP_VAL,
    96017fc4:	b9429800 	ldr	w0, [x0, #664]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_CLOCK_CNTRL, TRIM_VAL,
    96017fc8:	53081063 	ubfiz	w3, w3, #24, #5
	reg = sdmmc_readl(hsdmmc, VENDOR_CLOCK_CNTRL);
    96017fcc:	b9400041 	ldr	w1, [x2]
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_CLOCK_CNTRL, TAP_VAL,
    96017fd0:	53101c00 	ubfiz	w0, w0, #16, #8
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_CLOCK_CNTRL, TRIM_VAL,
    96017fd4:	12034821 	and	w1, w1, #0xe000ffff
	reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_CLOCK_CNTRL, TAP_VAL,
    96017fd8:	2a030021 	orr	w1, w1, w3
    96017fdc:	2a010000 	orr	w0, w0, w1
			hsdmmc->tap_value, reg);
	sdmmc_writel(hsdmmc, VENDOR_CLOCK_CNTRL, reg);
    96017fe0:	b9000040 	str	w0, [x2]
}
    96017fe4:	d65f03c0 	ret

0000000096017fe8 <sdmmc_dll_caliberation>:

tegrabl_error_t sdmmc_dll_caliberation(struct tegrabl_sdmmc *hsdmmc)
{
    96017fe8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96017fec:	910003fd 	mov	x29, sp
    96017ff0:	a90153f3 	stp	x19, x20, [sp, #16]
    96017ff4:	aa0003f3 	mov	x19, x0
	uint32_t val;
	time_t start_time;
	time_t end_time;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	val = sdmmc_readl(hsdmmc, VENDOR_DLLCAL_CFG);
    96017ff8:	b9405c00 	ldr	w0, [x0, #92]
    96017ffc:	1106c000 	add	w0, w0, #0x1b0
    96018000:	b9400001 	ldr	w1, [x0]
	val = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_DLLCAL_CFG, CALIBRATE, 1, val);
    96018004:	32010021 	orr	w1, w1, #0x80000000
	sdmmc_writel(hsdmmc, VENDOR_DLLCAL_CFG, val);
    96018008:	b9000001 	str	w1, [x0]

	start_time = tegrabl_get_timestamp_ms();
    9601800c:	94001f20 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    96018010:	aa0003f4 	mov	x20, x0

	/* wait until DLL calibration is done or timeout */
	do {
	    val = sdmmc_readl(hsdmmc, VENDOR_DLLCAL_CFG_STA);
    96018014:	b9405e60 	ldr	w0, [x19, #92]
    96018018:	1106f000 	add	w0, w0, #0x1bc
    9601801c:	b9400000 	ldr	w0, [x0]
		if (NV_DRF_VAL(SDMMCAB, VENDOR_DLLCAL_CFG_STA, DLL_CAL_ACTIVE, val) != 1UL) {
    96018020:	531f7c00 	lsr	w0, w0, #31
    96018024:	340001a0 	cbz	w0, 96018058 <sdmmc_dll_caliberation+0x70>
			break;
		}
		end_time = tegrabl_get_timestamp_ms();
    96018028:	94001f19 	bl	9601fc8c <tegrabl_get_timestamp_ms>
		if ((end_time - start_time) > DLL_CALIB_TIMEOUT_IN_MS) {
    9601802c:	cb140000 	sub	x0, x0, x20
    96018030:	f101901f 	cmp	x0, #0x64
    96018034:	54000088 	b.hi	96018044 <sdmmc_dll_caliberation+0x5c>  // b.pmore
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 0);
			goto fail;
		}
	    tegrabl_mdelay(1);
    96018038:	d2800020 	mov	x0, #0x1                   	// #1
    9601803c:	94001f37 	bl	9601fd18 <tegrabl_mdelay>
	    val = sdmmc_readl(hsdmmc, VENDOR_DLLCAL_CFG_STA);
    96018040:	17fffff5 	b	96018014 <sdmmc_dll_caliberation+0x2c>
	} while (true);

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("DLL calibration failed\n");
    96018044:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018048:	911e0000 	add	x0, x0, #0x780
    9601804c:	94002989 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 0);
    96018050:	528000c0 	mov	w0, #0x6                   	// #6
    96018054:	72a1e1e0 	movk	w0, #0xf0f, lsl #16
	}
	return err;
}
    96018058:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601805c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96018060:	d65f03c0 	ret

0000000096018064 <sdmmc_select_mode_transfer>:
{
    96018064:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96018068:	910003fd 	mov	x29, sp
    9601806c:	a90153f3 	stp	x19, x20, [sp, #16]
    96018070:	f90013f5 	str	x21, [sp, #32]
	if (hsdmmc == NULL) {
    96018074:	b4001840 	cbz	x0, 9601837c <sdmmc_select_mode_transfer+0x318>
	if (hsdmmc->device_type == DEVICE_TYPE_SD) {
    96018078:	b9408401 	ldr	w1, [x0, #132]
    9601807c:	7100043f 	cmp	w1, #0x1
    96018080:	540000a1 	b.ne	96018094 <sdmmc_select_mode_transfer+0x30>  // b.any
		if (hsdmmc->tran_speed == CSD_V4_3_TRAN_SPEED)
    96018084:	b9400801 	ldr	w1, [x0, #8]
    96018088:	7100c83f 	cmp	w1, #0x32
    9601808c:	54000041 	b.ne	96018094 <sdmmc_select_mode_transfer+0x30>  // b.any
			hsdmmc->best_mode = TEGRABL_SDMMC_MODE_SDR26;
    96018090:	b902901f 	str	wzr, [x0, #656]
	if (hsdmmc->best_mode == TEGRABL_SDMMC_MODE_HS400) {
    96018094:	b9429015 	ldr	w21, [x0, #656]
    96018098:	aa0003f3 	mov	x19, x0
    9601809c:	71000ebf 	cmp	w21, #0x3
    960180a0:	54000c41 	b.ne	96018228 <sdmmc_select_mode_transfer+0x1c4>  // b.any
		hsdmmc->data_width = DATA_WIDTH_DDR_8BIT;
    960180a4:	528000c0 	mov	w0, #0x6                   	// #6
    960180a8:	b9000e60 	str	w0, [x19, #12]
	if ((hsdmmc->card_support_speed & ECSD_CT_HS400_180_MASK) != ECSD_CT_HS400_180) {
    960180ac:	39415260 	ldrb	w0, [x19, #84]
    960180b0:	36300b60 	tbz	w0, #6, 9601821c <sdmmc_select_mode_transfer+0x1b8>
	error = sdmmc_enable_timing_hs400(hsdmmc, TEGRABL_SDMMC_MODE_DDR52);
    960180b4:	52800021 	mov	w1, #0x1                   	// #1
    960180b8:	aa1303e0 	mov	x0, x19
    960180bc:	97fffb59 	bl	96016e20 <sdmmc_enable_timing_hs400>
    960180c0:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    960180c4:	350009c0 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	hsdmmc->enhanced_strobe = true;
    960180c8:	52800020 	mov	w0, #0x1                   	// #1
    960180cc:	390a5260 	strb	w0, [x19, #660]
	error = sdmmc_set_bus_width(hsdmmc);
    960180d0:	aa1303e0 	mov	x0, x19
    960180d4:	97fffbd8 	bl	96017034 <sdmmc_set_bus_width>
    960180d8:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    960180dc:	35000900 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	error = sdmmc_enable_timing_hs400(hsdmmc, TEGRABL_SDMMC_MODE_HS400);
    960180e0:	2a1503e1 	mov	w1, w21
    960180e4:	aa1303e0 	mov	x0, x19
    960180e8:	97fffb4e 	bl	96016e20 <sdmmc_enable_timing_hs400>
    960180ec:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    960180f0:	35000860 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	error = tegrabl_car_init_pll_with_rate(TEGRABL_CLK_PLL_ID_PLLC4, 0U, NULL);
    960180f4:	d2800002 	mov	x2, #0x0                   	// #0
    960180f8:	52800001 	mov	w1, #0x0                   	// #0
    960180fc:	52800020 	mov	w0, #0x1                   	// #1
    96018100:	94001dcc 	bl	9601f830 <tegrabl_car_init_pll_with_rate>
    96018104:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96018108:	350007a0 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	instance = (uint8_t)hsdmmc->controller_id;
    9601810c:	39416275 	ldrb	w21, [x19, #88]
	error = tegrabl_car_clk_disable(TEGRABL_MODULE_SDMMC, instance);
    96018110:	52800040 	mov	w0, #0x2                   	// #2
    96018114:	2a1503e1 	mov	w1, w21
    96018118:	94001e52 	bl	9601fa60 <tegrabl_car_clk_disable>
    9601811c:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96018120:	350006e0 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	error = tegrabl_car_set_clk_src(TEGRABL_MODULE_SDMMC, instance, TEGRABL_CLK_SRC_PLLC4_OUT0_LJ);
    96018124:	52800102 	mov	w2, #0x8                   	// #8
    96018128:	2a1503e1 	mov	w1, w21
    9601812c:	52800040 	mov	w0, #0x2                   	// #2
    96018130:	94001d86 	bl	9601f748 <tegrabl_car_set_clk_src>
    96018134:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96018138:	35000620 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	error = tegrabl_car_set_clk_rate(TEGRABL_MODULE_SDMMC, instance, 200000, &rate);
    9601813c:	5281a802 	mov	w2, #0xd40                 	// #3392
    96018140:	9100f3a3 	add	x3, x29, #0x3c
    96018144:	72a00062 	movk	w2, #0x3, lsl #16
    96018148:	2a1503e1 	mov	w1, w21
    9601814c:	52800040 	mov	w0, #0x2                   	// #2
    96018150:	94001e2f 	bl	9601fa0c <tegrabl_car_set_clk_rate>
    96018154:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96018158:	35000520 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	tegrabl_udelay(2);
    9601815c:	d2800040 	mov	x0, #0x2                   	// #2
    96018160:	94001ed1 	bl	9601fca4 <tegrabl_udelay>
	error = tegrabl_car_clk_enable(TEGRABL_MODULE_SDMMC, instance, NULL);
    96018164:	d2800002 	mov	x2, #0x0                   	// #0
    96018168:	2a1503e1 	mov	w1, w21
    9601816c:	52800040 	mov	w0, #0x2                   	// #2
    96018170:	94001dd7 	bl	9601f8cc <tegrabl_car_clk_enable>
    96018174:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96018178:	35000420 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 0);
    9601817c:	52800002 	mov	w2, #0x0                   	// #0
    96018180:	52800041 	mov	w1, #0x2                   	// #2
    96018184:	aa1303e0 	mov	x0, x19
    96018188:	97fffcdc 	bl	960174f8 <sdmmc_set_card_clock>
    9601818c:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    96018190:	35000360 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	sdmmc_card_clock_enable(hsdmmc, false);
    96018194:	b9405e60 	ldr	w0, [x19, #92]
    96018198:	52800001 	mov	w1, #0x0                   	// #0
    9601819c:	97fffc8c 	bl	960173cc <sdmmc_card_clock_enable.isra.0>
	host_reg = sdmmc_readl(hsdmmc, AUTO_CMD12_ERR_STATUS);
    960181a0:	b9405e61 	ldr	w1, [x19, #92]
	host_reg = NV_FLD_SET_DRF_DEF(SDMMCAB, AUTO_CMD12_ERR_STATUS, UHS_MODE_SEL, HS400, host_reg);
    960181a4:	52a000a2 	mov	w2, #0x50000               	// #327680
	host_reg = sdmmc_readl(hsdmmc, AUTO_CMD12_ERR_STATUS);
    960181a8:	1100f021 	add	w1, w1, #0x3c
    960181ac:	b9400020 	ldr	w0, [x1]
	host_reg = NV_FLD_SET_DRF_DEF(SDMMCAB, AUTO_CMD12_ERR_STATUS, UHS_MODE_SEL, HS400, host_reg);
    960181b0:	120d7000 	and	w0, w0, #0xfff8ffff
    960181b4:	2a020000 	orr	w0, w0, w2
	sdmmc_writel(hsdmmc, AUTO_CMD12_ERR_STATUS, host_reg);
    960181b8:	b9000020 	str	w0, [x1]
	sdmmc_card_clock_enable(hsdmmc, true);
    960181bc:	52800021 	mov	w1, #0x1                   	// #1
    960181c0:	b9405e60 	ldr	w0, [x19, #92]
    960181c4:	97fffc82 	bl	960173cc <sdmmc_card_clock_enable.isra.0>
	misc_reg = sdmmc_readl(hsdmmc, VENDOR_SYS_SW_CNTRL);
    960181c8:	b9405e60 	ldr	w0, [x19, #92]
    960181cc:	11041000 	add	w0, w0, #0x104
    960181d0:	b9400001 	ldr	w1, [x0]
	misc_reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_SYS_SW_CNTRL, ENHANCED_STROBE_MODE, 1, misc_reg);
    960181d4:	32010021 	orr	w1, w1, #0x80000000
	sdmmc_writel(hsdmmc, VENDOR_SYS_SW_CNTRL, misc_reg);
    960181d8:	b9000001 	str	w1, [x0]
	error = sdmmc_dll_caliberation(hsdmmc);
    960181dc:	aa1303e0 	mov	x0, x19
    960181e0:	97ffff82 	bl	96017fe8 <sdmmc_dll_caliberation>
    960181e4:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    960181e8:	350000a0 	cbnz	w0, 960181fc <sdmmc_select_mode_transfer+0x198>
	error = sdmmc_get_ext_csd(hsdmmc);
    960181ec:	aa1303e0 	mov	x0, x19
    960181f0:	97fff864 	bl	96016380 <sdmmc_get_ext_csd>
    960181f4:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    960181f8:	34000080 	cbz	w0, 96018208 <sdmmc_select_mode_transfer+0x1a4>
		pr_error("sdmmc HS400 enable failed\n");
    960181fc:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018200:	911ed000 	add	x0, x0, #0x7b4
    96018204:	9400291b 	bl	96022670 <tegrabl_printf>
}
    96018208:	2a1403e0 	mov	w0, w20
    9601820c:	f94013f5 	ldr	x21, [sp, #32]
    96018210:	a94153f3 	ldp	x19, x20, [sp, #16]
    96018214:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96018218:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 3);
    9601821c:	52806034 	mov	w20, #0x301                 	// #769
    96018220:	72a1e1f4 	movk	w20, #0xf0f, lsl #16
    96018224:	17fffff6 	b	960181fc <sdmmc_select_mode_transfer+0x198>
	} else if (hsdmmc->best_mode == TEGRABL_SDMMC_MODE_DDR52) {
    96018228:	710006bf 	cmp	w21, #0x1
    9601822c:	54000841 	b.ne	96018334 <sdmmc_select_mode_transfer+0x2d0>  // b.any
		if ((hsdmmc->card_support_speed
    96018230:	39415000 	ldrb	w0, [x0, #84]
    96018234:	721e041f 	tst	w0, #0xc
    96018238:	54000a60 	b.eq	96018384 <sdmmc_select_mode_transfer+0x320>  // b.none
			pr_info("sdmmc DDR50 mode\n");
    9601823c:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018240:	911f4800 	add	x0, x0, #0x7d2
    96018244:	9400290b 	bl	96022670 <tegrabl_printf>
			if (hsdmmc->device_type == DEVICE_TYPE_SD) {
    96018248:	b9408660 	ldr	w0, [x19, #132]
				hsdmmc->data_width = DATA_WIDTH_DDR_4BIT;
    9601824c:	528000c1 	mov	w1, #0x6                   	// #6
			error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 1);
    96018250:	2a1503e2 	mov	w2, w21
				hsdmmc->data_width = DATA_WIDTH_DDR_4BIT;
    96018254:	7100041f 	cmp	w0, #0x1
    96018258:	528000a0 	mov	w0, #0x5                   	// #5
    9601825c:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    96018260:	b9000e60 	str	w0, [x19, #12]
			error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 1);
    96018264:	52800041 	mov	w1, #0x2                   	// #2
    96018268:	aa1303e0 	mov	x0, x19
    9601826c:	97fffca3 	bl	960174f8 <sdmmc_set_card_clock>
    96018270:	2a0003f4 	mov	w20, w0
			if (error != TEGRABL_NO_ERROR) {
    96018274:	35fffca0 	cbnz	w0, 96018208 <sdmmc_select_mode_transfer+0x1a4>
	if ((hsdmmc->card_support_speed & ECSD_CT_HS_DDR_52_180_300_MASK)
    96018278:	39415260 	ldrb	w0, [x19, #84]
    9601827c:	361004e0 	tbz	w0, #2, 96018318 <sdmmc_select_mode_transfer+0x2b4>
		hsdmmc->high_speed_mode = 1;
    96018280:	39009275 	strb	w21, [x19, #36]
		error = sdmmc_enable_high_speed(hsdmmc);
    96018284:	aa1303e0 	mov	x0, x19
    96018288:	97fff9cb 	bl	960169b4 <sdmmc_enable_high_speed>
    9601828c:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    96018290:	35fffbc0 	cbnz	w0, 96018208 <sdmmc_select_mode_transfer+0x1a4>
		misc_reg = sdmmc_readl(hsdmmc, VENDOR_MISC_CNTRL);
    96018294:	b9405e61 	ldr	w1, [x19, #92]
    96018298:	11048021 	add	w1, w1, #0x120
    9601829c:	b9400020 	ldr	w0, [x1]
		misc_reg = NV_FLD_SET_DRF_NUM(SDMMCAB, VENDOR_MISC_CNTRL, SDMMC_SPARE0,
    960182a0:	12104000 	and	w0, w0, #0xffff0001
    960182a4:	32170000 	orr	w0, w0, #0x200
		sdmmc_writel(hsdmmc, VENDOR_MISC_CNTRL, misc_reg);
    960182a8:	b9000020 	str	w0, [x1]
		error = sdmmc_set_bus_width(hsdmmc);
    960182ac:	aa1303e0 	mov	x0, x19
    960182b0:	97fffb61 	bl	96017034 <sdmmc_set_bus_width>
    960182b4:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    960182b8:	35fffa80 	cbnz	w0, 96018208 <sdmmc_select_mode_transfer+0x1a4>
		cap_reg = sdmmc_readl(hsdmmc, CAPABILITIES);
    960182bc:	b9405e60 	ldr	w0, [x19, #92]
    960182c0:	11010001 	add	w1, w0, #0x40
    960182c4:	b9400022 	ldr	w2, [x1]
		cap_high_reg = sdmmc_readl(hsdmmc, CAPABILITIES_HIGHER);
    960182c8:	11011001 	add	w1, w0, #0x44
    960182cc:	b9400021 	ldr	w1, [x1]
		voltage_support_1_8_v = NV_DRF_VAL(SDMMCAB, CAPABILITIES,
    960182d0:	531a7c43 	lsr	w3, w2, #26
		if ((ddr50 != 0U) && (voltage_support_1_8_v != 0U) &&
    960182d4:	0a410861 	and	w1, w3, w1, lsr #2
    960182d8:	360001a1 	tbz	w1, #0, 9601830c <sdmmc_select_mode_transfer+0x2a8>
    960182dc:	36a80182 	tbz	w2, #21, 9601830c <sdmmc_select_mode_transfer+0x2a8>
			sdmmc_card_clock_enable(hsdmmc, false);
    960182e0:	52800001 	mov	w1, #0x0                   	// #0
    960182e4:	97fffc3a 	bl	960173cc <sdmmc_card_clock_enable.isra.0>
			host_reg = sdmmc_readl(hsdmmc, AUTO_CMD12_ERR_STATUS);
    960182e8:	b9405e61 	ldr	w1, [x19, #92]
    960182ec:	1100f021 	add	w1, w1, #0x3c
    960182f0:	b9400020 	ldr	w0, [x1]
			host_reg = NV_FLD_SET_DRF_DEF(SDMMCAB, AUTO_CMD12_ERR_STATUS,
    960182f4:	120d7000 	and	w0, w0, #0xfff8ffff
    960182f8:	320e0000 	orr	w0, w0, #0x40000
			sdmmc_writel(hsdmmc, AUTO_CMD12_ERR_STATUS, host_reg);
    960182fc:	b9000020 	str	w0, [x1]
			sdmmc_card_clock_enable(hsdmmc, true);
    96018300:	2a1503e1 	mov	w1, w21
    96018304:	b9405e60 	ldr	w0, [x19, #92]
    96018308:	97fffc31 	bl	960173cc <sdmmc_card_clock_enable.isra.0>
			sdmmc_set_tap_trim(hsdmmc);
    9601830c:	aa1303e0 	mov	x0, x19
    96018310:	97ffff2a 	bl	96017fb8 <sdmmc_set_tap_trim>
			goto fail;
    96018314:	17ffffbd 	b	96018208 <sdmmc_select_mode_transfer+0x1a4>
	} else if ((hsdmmc->card_support_speed &
    96018318:	371803a0 	tbnz	w0, #3, 9601838c <sdmmc_select_mode_transfer+0x328>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
    9601831c:	52802034 	mov	w20, #0x101                 	// #257
		pr_error("Unknown DDR operation\n");
    96018320:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018324:	911f9c00 	add	x0, x0, #0x7e7
    96018328:	940028d2 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 2);
    9601832c:	72a1e1f4 	movk	w20, #0xf0f, lsl #16
	return error;
    96018330:	17ffffb6 	b	96018208 <sdmmc_select_mode_transfer+0x1a4>
	} else if (hsdmmc->best_mode == TEGRABL_SDMMC_MODE_SDR26) {
    96018334:	35000315 	cbnz	w21, 96018394 <sdmmc_select_mode_transfer+0x330>
		pr_info("sdmmc SDR mode\n");
    96018338:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601833c:	91200400 	add	x0, x0, #0x801
    96018340:	940028cc 	bl	96022670 <tegrabl_printf>
		if (hsdmmc->device_type == DEVICE_TYPE_SD) {
    96018344:	b9408660 	ldr	w0, [x19, #132]
			hsdmmc->data_width = DATA_WIDTH_4BIT;
    96018348:	52800042 	mov	w2, #0x2                   	// #2
		error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 2);
    9601834c:	2a0203e1 	mov	w1, w2
			hsdmmc->data_width = DATA_WIDTH_4BIT;
    96018350:	7100041f 	cmp	w0, #0x1
    96018354:	1a820000 	csel	w0, w0, w2, eq  // eq = none
    96018358:	b9000e60 	str	w0, [x19, #12]
		error = sdmmc_set_card_clock(hsdmmc, MODE_DATA_TRANSFER, 2);
    9601835c:	aa1303e0 	mov	x0, x19
    96018360:	97fffc66 	bl	960174f8 <sdmmc_set_card_clock>
    96018364:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    96018368:	35fff500 	cbnz	w0, 96018208 <sdmmc_select_mode_transfer+0x1a4>
		error = sdmmc_set_bus_width(hsdmmc);
    9601836c:	aa1303e0 	mov	x0, x19
    96018370:	97fffb31 	bl	96017034 <sdmmc_set_bus_width>
    96018374:	2a0003f4 	mov	w20, w0
fail:
    96018378:	17ffffa4 	b	96018208 <sdmmc_select_mode_transfer+0x1a4>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 38);
    9601837c:	5284c054 	mov	w20, #0x2602                	// #9730
    96018380:	17ffffeb 	b	9601832c <sdmmc_select_mode_transfer+0x2c8>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96018384:	52800014 	mov	w20, #0x0                   	// #0
    96018388:	17ffffa0 	b	96018208 <sdmmc_select_mode_transfer+0x1a4>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601838c:	52800034 	mov	w20, #0x1                   	// #1
    96018390:	17ffffe7 	b	9601832c <sdmmc_select_mode_transfer+0x2c8>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 2);
    96018394:	52804034 	mov	w20, #0x201                 	// #513
    96018398:	17ffffe5 	b	9601832c <sdmmc_select_mode_transfer+0x2c8>

000000009601839c <sd_bdev_is_card_present>:

static struct tegrabl_sdmmc *contexts[4] = {0, 0, 0, 0};

tegrabl_error_t sd_bdev_is_card_present(struct gpio_info *cd_gpio, bool *is_present)
{
	return tegrabl_sd_is_card_present(cd_gpio, is_present);
    9601839c:	140001ba 	b	96018a84 <tegrabl_sd_is_card_present>

00000000960183a0 <sd_bdev_open>:

	return error;
}

tegrabl_error_t sd_bdev_open(uint32_t instance, struct tegrabl_sd_platform_params *params)
{
    960183a0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct tegrabl_sdmmc *hsdmmc = NULL;
	struct gpio_driver *gpio_drv;

	if (instance >= MAX_SDMMC_INSTANCES) {
    960183a4:	71000c1f 	cmp	w0, #0x3
{
    960183a8:	910003fd 	mov	x29, sp
    960183ac:	a90153f3 	stp	x19, x20, [sp, #16]
    960183b0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960183b4:	a90363f7 	stp	x23, x24, [sp, #48]
    960183b8:	f90023f9 	str	x25, [sp, #64]
	if (instance >= MAX_SDMMC_INSTANCES) {
    960183bc:	540014a8 	b.hi	96018650 <sd_bdev_open+0x2b0>  // b.pmore
    960183c0:	2a0003f8 	mov	w24, w0
    960183c4:	aa0103f5 	mov	x21, x1
	pr_trace("Instance: %d\n", instance);
	hsdmmc = contexts[instance];

	/* Allocate memory for context*/
	pr_trace("Allocating memory for context\n");
	hsdmmc = tegrabl_alloc(TEGRABL_HEAP_DMA, sizeof(struct tegrabl_sdmmc));
    960183c8:	52800020 	mov	w0, #0x1                   	// #1
    960183cc:	d2805901 	mov	x1, #0x2c8                 	// #712
    960183d0:	940039ad 	bl	96026a84 <tegrabl_alloc>
    960183d4:	aa0003f4 	mov	x20, x0

	/* Check for memory allocation. */
	if (!hsdmmc) {
    960183d8:	b4001440 	cbz	x0, 96018660 <sd_bdev_open+0x2c0>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 6);
		goto fail;
	}

	/* Initialize the memory with zero. */
	memset(hsdmmc, 0x0, sizeof(struct tegrabl_sdmmc));
    960183dc:	52800001 	mov	w1, #0x0                   	// #0
    960183e0:	d2805902 	mov	x2, #0x2c8                 	// #712
    960183e4:	94004691 	bl	96029e28 <memset>

	hsdmmc->device_type = DEVICE_TYPE_SD;
    960183e8:	52800036 	mov	w22, #0x1                   	// #1
	hsdmmc->clk_src = TEGRABL_CLK_SRC_PLLP_OUT0;
    960183ec:	91080280 	add	x0, x20, #0x200
    960183f0:	d2800061 	mov	x1, #0x3                   	// #3
	hsdmmc->controller_id = instance;
    960183f4:	b9005a98 	str	w24, [x20, #88]
	hsdmmc->clk_src = TEGRABL_CLK_SRC_PLLP_OUT0;
    960183f8:	f2c00021 	movk	x1, #0x1, lsl #32
	hsdmmc->device_type = DEVICE_TYPE_SD;
    960183fc:	b9008696 	str	w22, [x20, #132]
	hsdmmc->clk_src = TEGRABL_CLK_SRC_PLLP_OUT0;
    96018400:	f808c001 	stur	x1, [x0, #140]
	hsdmmc->best_mode = TEGRABL_SDMMC_MODE_DDR52;
	hsdmmc->tap_value = 9;
    96018404:	d2800120 	mov	x0, #0x9                   	// #9
    96018408:	f2c000a0 	movk	x0, #0x5, lsl #32
    9601840c:	f9014e80 	str	x0, [x20, #664]
	hsdmmc->trim_value = 5;

	/* Call sdmmc_init to proceed with initialization. */
	pr_trace("sdmmc init\n");

	if (params->vmmc_supply) {
    96018410:	b94002a0 	ldr	w0, [x21]
    96018414:	340005c0 	cbz	w0, 960184cc <sd_bdev_open+0x12c>
		error = tegrabl_regulator_enable(params->vmmc_supply);
    96018418:	97ffebda 	bl	96013380 <tegrabl_regulator_enable>
    9601841c:	2a0003f3 	mov	w19, w0
		if ((error != TEGRABL_NO_ERROR) && (TEGRABL_ERROR_REASON(error) != TEGRABL_ERR_NOT_SUPPORTED)) {
    96018420:	34000080 	cbz	w0, 96018430 <sd_bdev_open+0x90>
    96018424:	12001c00 	and	w0, w0, #0xff
    96018428:	6b16001f 	cmp	w0, w22
    9601842c:	54000321 	b.ne	96018490 <sd_bdev_open+0xf0>  // b.any
			goto fail;
		}

		error = tegrabl_regulator_set_voltage(params->vmmc_supply, 3300000, STANDARD_VOLTS);
    96018430:	b94002a0 	ldr	w0, [x21]
    96018434:	528b5401 	mov	w1, #0x5aa0                	// #23200
    96018438:	52800022 	mov	w2, #0x1                   	// #1
    9601843c:	72a00641 	movk	w1, #0x32, lsl #16
    96018440:	97ffebfe 	bl	96013438 <tegrabl_regulator_set_voltage>
    96018444:	2a0003f3 	mov	w19, w0
		if ((error != TEGRABL_NO_ERROR) && (TEGRABL_ERROR_REASON(error) != TEGRABL_ERR_NOT_SUPPORTED)) {
    96018448:	350001e0 	cbnz	w0, 96018484 <sd_bdev_open+0xe4>
		error = gpio_write(gpio_drv, params->en_vdd_sd_gpio, GPIO_PIN_STATE_HIGH);
		if (error != TEGRABL_NO_ERROR)
			goto fail;
	}

	error = sdmmc_init(hsdmmc->controller_id, hsdmmc, false);
    9601844c:	b9405a80 	ldr	w0, [x20, #88]
    96018450:	52800002 	mov	w2, #0x0                   	// #0
    96018454:	aa1403e1 	mov	x1, x20
    96018458:	97fff981 	bl	96016a5c <sdmmc_init>
	if (error != TEGRABL_NO_ERROR) {
    9601845c:	35001060 	cbnz	w0, 96018668 <sd_bdev_open+0x2c8>
		goto fail;
	}

	if (!contexts[hsdmmc->controller_id]) {
    96018460:	b9405a81 	ldr	w1, [x20, #88]
    96018464:	d00002b6 	adrp	x22, 9606e000 <__bss_start>
    96018468:	9129a2c0 	add	x0, x22, #0xa68
    9601846c:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    96018470:	b4000620 	cbz	x0, 96018534 <sd_bdev_open+0x194>
		if (error != TEGRABL_NO_ERROR) {
			goto fail;
		}
	}

	contexts[instance] = hsdmmc;
    96018474:	9129a2d6 	add	x22, x22, #0xa68
    96018478:	52800013 	mov	w19, #0x0                   	// #0
    9601847c:	f8385ad4 	str	x20, [x22, w24, uxtw #3]
    96018480:	14000004 	b	96018490 <sd_bdev_open+0xf0>
		if ((error != TEGRABL_NO_ERROR) && (TEGRABL_ERROR_REASON(error) != TEGRABL_ERR_NOT_SUPPORTED)) {
    96018484:	12001c00 	and	w0, w0, #0xff
    96018488:	7100041f 	cmp	w0, #0x1
    9601848c:	54fffe00 	b.eq	9601844c <sd_bdev_open+0xac>  // b.none
fail:

	if ((error != TEGRABL_NO_ERROR) && hsdmmc) {
    96018490:	7100027f 	cmp	w19, #0x0
    96018494:	fa401a84 	ccmp	x20, #0x0, #0x4, ne  // ne = any
    96018498:	54000080 	b.eq	960184a8 <sd_bdev_open+0x108>  // b.none
		tegrabl_dealloc(TEGRABL_HEAP_DMA, hsdmmc);
    9601849c:	aa1403e1 	mov	x1, x20
    960184a0:	52800020 	mov	w0, #0x1                   	// #1
    960184a4:	94003981 	bl	96026aa8 <tegrabl_dealloc>
	}

	/*TODO: fix this and remove delay*/
	tegrabl_mdelay(10);
    960184a8:	d2800140 	mov	x0, #0xa                   	// #10
    960184ac:	94001e1b 	bl	9601fd18 <tegrabl_mdelay>
	return error;
}
    960184b0:	2a1303e0 	mov	w0, w19
    960184b4:	f94023f9 	ldr	x25, [sp, #64]
    960184b8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960184bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960184c0:	a94363f7 	ldp	x23, x24, [sp, #48]
    960184c4:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960184c8:	d65f03c0 	ret
	} else if (params->en_vdd_sd_gpio) {
    960184cc:	b94012a0 	ldr	w0, [x21, #16]
    960184d0:	34fffbe0 	cbz	w0, 9601844c <sd_bdev_open+0xac>
		error = tegrabl_gpio_driver_get(TEGRA_GPIO_MAIN_CHIPID, &gpio_drv);
    960184d4:	910163a1 	add	x1, x29, #0x58
    960184d8:	52800000 	mov	w0, #0x0                   	// #0
    960184dc:	97ffd57d 	bl	9600dad0 <tegrabl_gpio_driver_get>
    960184e0:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR)
    960184e4:	35fffd60 	cbnz	w0, 96018490 <sd_bdev_open+0xf0>
		error = gpio_config(gpio_drv, params->en_vdd_sd_gpio, GPIO_PINMODE_OUTPUT);
    960184e8:	f9402fa0 	ldr	x0, [x29, #88]
	return drv->ops->config(gpio_num, mode, drv->driver_data);
    960184ec:	f9401401 	ldr	x1, [x0, #40]
    960184f0:	f9400802 	ldr	x2, [x0, #16]
    960184f4:	b94012a0 	ldr	w0, [x21, #16]
    960184f8:	f9400823 	ldr	x3, [x1, #16]
    960184fc:	2a1603e1 	mov	w1, w22
    96018500:	d63f0060 	blr	x3
    96018504:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR)
    96018508:	35fffc40 	cbnz	w0, 96018490 <sd_bdev_open+0xf0>
		error = gpio_write(gpio_drv, params->en_vdd_sd_gpio, GPIO_PIN_STATE_HIGH);
    9601850c:	f9402fa0 	ldr	x0, [x29, #88]
	return drv->ops->write(gpio_num, state, drv->driver_data);
    96018510:	f9401401 	ldr	x1, [x0, #40]
    96018514:	f9400802 	ldr	x2, [x0, #16]
    96018518:	b94012a0 	ldr	w0, [x21, #16]
    9601851c:	f9400423 	ldr	x3, [x1, #8]
    96018520:	2a1603e1 	mov	w1, w22
    96018524:	d63f0060 	blr	x3
    96018528:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR)
    9601852c:	35fffb20 	cbnz	w0, 96018490 <sd_bdev_open+0xf0>
    96018530:	17ffffc7 	b	9601844c <sd_bdev_open+0xac>
	hsdmmc->count_devices = 1;
    96018534:	52800020 	mov	w0, #0x1                   	// #1
    96018538:	39000680 	strb	w0, [x20, #1]
	user_priv_data = tegrabl_calloc(1, sizeof(sdmmc_priv_data_t));
    9601853c:	d2800201 	mov	x1, #0x10                  	// #16
    96018540:	d2800020 	mov	x0, #0x1                   	// #1
    96018544:	94003960 	bl	96026ac4 <tegrabl_calloc>
    96018548:	aa0003f7 	mov	x23, x0
	if (!user_priv_data) {
    9601854c:	b4000700 	cbz	x0, 9601862c <sd_bdev_open+0x28c>
	device_id = TEGRABL_STORAGE_SDCARD << 16 | hsdmmc->controller_id;
    96018550:	b9405a93 	ldr	w19, [x20, #88]
	user_priv_data->device = DEVICE_USER;
    96018554:	52800040 	mov	w0, #0x2                   	// #2
    96018558:	b90002e0 	str	w0, [x23]
	user_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    9601855c:	d2801101 	mov	x1, #0x88                  	// #136
	user_priv_data->context = (void *)hsdmmc;
    96018560:	f90006f4 	str	x20, [x23, #8]
	user_dev = tegrabl_calloc(1, sizeof(tegrabl_bdev_t));
    96018564:	d2800020 	mov	x0, #0x1                   	// #1
    96018568:	94003957 	bl	96026ac4 <tegrabl_calloc>
    9601856c:	aa0003f5 	mov	x21, x0
	if (!user_dev) {
    96018570:	b4000660 	cbz	x0, 9601863c <sd_bdev_open+0x29c>
	error = tegrabl_blockdev_initialize_bdev(user_dev, device_id,
    96018574:	b9403a83 	ldr	w3, [x20, #56]
    96018578:	320f0661 	orr	w1, w19, #0x60000
    9601857c:	b9404282 	ldr	w2, [x20, #64]
    96018580:	94000f32 	bl	9601c248 <tegrabl_blockdev_initialize_bdev>
    96018584:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR)
    96018588:	35000380 	cbnz	w0, 960185f8 <sd_bdev_open+0x258>
	user_dev->buf_align_size = TEGRABL_SD_BUF_ALIGN_SIZE;
    9601858c:	52800080 	mov	w0, #0x4                   	// #4
    96018590:	b9002ea0 	str	w0, [x21, #44]
	user_dev->read_block = sdmmc_bdev_read_block;
    96018594:	b0ffffe0 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    96018598:	912aa000 	add	x0, x0, #0xaa8
    9601859c:	f90026a0 	str	x0, [x21, #72]
	user_dev->write_block = sdmmc_bdev_write_block;
    960185a0:	b0ffffe0 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960185a4:	912b0000 	add	x0, x0, #0xac0
    960185a8:	f9002aa0 	str	x0, [x21, #80]
	user_dev->erase = sdmmc_bdev_erase;
    960185ac:	b0ffffe0 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960185b0:	912c3000 	add	x0, x0, #0xb0c
    960185b4:	f90036a0 	str	x0, [x21, #104]
	user_dev->xfer = sdmmc_bdev_xfer;
    960185b8:	b0ffffe0 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960185bc:	912b6000 	add	x0, x0, #0xad8
    960185c0:	f9002ea0 	str	x0, [x21, #88]
	user_dev->xfer_wait = sdmmc_bdev_xfer_wait;
    960185c4:	b0ffffe0 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960185c8:	912c2000 	add	x0, x0, #0xb08
    960185cc:	f90032a0 	str	x0, [x21, #96]
	user_dev->close = sdmmc_bdev_close;
    960185d0:	b0ffffe0 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960185d4:	912cb000 	add	x0, x0, #0xb2c
	user_dev->priv_data = (void *)user_priv_data;
    960185d8:	f9001ab7 	str	x23, [x21, #48]
	user_dev->close = sdmmc_bdev_close;
    960185dc:	f90042a0 	str	x0, [x21, #128]
	user_dev->ioctl = sdmmc_bdev_ioctl;
    960185e0:	b0ffffe0 	adrp	x0, 96015000 <tegrabl_sata_bdev_xfer_wait+0x8>
    960185e4:	9129e000 	add	x0, x0, #0xa78
    960185e8:	f9003ea0 	str	x0, [x21, #120]
	error = tegrabl_blockdev_register_device(user_dev);
    960185ec:	aa1503e0 	mov	x0, x21
    960185f0:	94000f3a 	bl	9601c2d8 <tegrabl_blockdev_register_device>
    960185f4:	2a0003f3 	mov	w19, w0
	if (error && user_dev) {
    960185f8:	7100027f 	cmp	w19, #0x0
    960185fc:	1a9f07f9 	cset	w25, ne  // ne = any
    96018600:	f10002bf 	cmp	x21, #0x0
    96018604:	7a401b24 	ccmp	w25, #0x0, #0x4, ne  // ne = any
    96018608:	54000060 	b.eq	96018614 <sd_bdev_open+0x274>  // b.none
		tegrabl_free(user_dev);
    9601860c:	aa1503e0 	mov	x0, x21
    96018610:	9400392a 	bl	96026ab8 <tegrabl_free>
	if (error && user_priv_data) {
    96018614:	f10002ff 	cmp	x23, #0x0
    96018618:	7a401b24 	ccmp	w25, #0x0, #0x4, ne  // ne = any
    9601861c:	54000160 	b.eq	96018648 <sd_bdev_open+0x2a8>  // b.none
		tegrabl_free(user_priv_data);
    96018620:	aa1703e0 	mov	x0, x23
    96018624:	94003925 	bl	96026ab8 <tegrabl_free>
    96018628:	17ffff9a 	b	96018490 <sd_bdev_open+0xf0>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601862c:	52800073 	mov	w19, #0x3                   	// #3
	tegrabl_bdev_t *user_dev = NULL;
    96018630:	d2800015 	mov	x21, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96018634:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
    96018638:	17fffff0 	b	960185f8 <sd_bdev_open+0x258>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    9601863c:	52802073 	mov	w19, #0x103                 	// #259
    96018640:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
    96018644:	17ffffed 	b	960185f8 <sd_bdev_open+0x258>
		if (error != TEGRABL_NO_ERROR) {
    96018648:	34fff173 	cbz	w19, 96018474 <sd_bdev_open+0xd4>
    9601864c:	17ffff91 	b	96018490 <sd_bdev_open+0xf0>
	struct tegrabl_sdmmc *hsdmmc = NULL;
    96018650:	d2800014 	mov	x20, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 6);
    96018654:	5280c033 	mov	w19, #0x601                 	// #1537
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 6);
    96018658:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
    9601865c:	17ffff8d 	b	96018490 <sd_bdev_open+0xf0>
    96018660:	5280c073 	mov	w19, #0x603                 	// #1539
    96018664:	17fffffd 	b	96018658 <sd_bdev_open+0x2b8>
fail:
    96018668:	2a0003f3 	mov	w19, w0
    9601866c:	17ffff89 	b	96018490 <sd_bdev_open+0xf0>

0000000096018670 <sd_identify_card>:
 *  @param hsdmmc Context information to determine the base
 *                 address of controller.
 *  @errurn TEGRABL_NO_ERROR if card is initiliazed successfully.
 */
tegrabl_error_t sd_identify_card(struct tegrabl_sdmmc *hsdmmc)
{
    96018670:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96018674:	910003fd 	mov	x29, sp
    96018678:	a90153f3 	stp	x19, x20, [sp, #16]
    9601867c:	aa0003f4 	mov	x20, x0
	uint32_t ocr_reg;
	uint32_t *sdmmc_response = &(hsdmmc->response[0]);

	/* Check if card is present and stable. */
	pr_trace("Check card present and stable\n");
	if (sdmmc_is_card_present(hsdmmc))
    96018680:	97fffbed 	bl	96017634 <sdmmc_is_card_present>
    96018684:	35001320 	cbnz	w0, 960188e8 <sd_identify_card+0x278>
		return TEGRABL_ERR_INVALID;

	/* Send command 0. */
	pr_trace("Send command 0\n");
	err = sdmmc_send_command(CMD_IDLE_STATE, 0, RESP_TYPE_NO_RESP, 0, hsdmmc);
    96018688:	aa1403e4 	mov	x4, x20
    9601868c:	52800003 	mov	w3, #0x0                   	// #0
    96018690:	52800002 	mov	w2, #0x0                   	// #0
    96018694:	52800001 	mov	w1, #0x0                   	// #0
    96018698:	97fff65f 	bl	96016014 <sdmmc_send_command>
    9601869c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960186a0:	34000100 	cbz	w0, 960186c0 <sd_identify_card+0x50>
		pr_error("Sending cmd 0 failed\n");
    960186a4:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960186a8:	9122a800 	add	x0, x0, #0x8aa
	}

	err = sdmmc_send_command(SD_ACMD_SET_BUS_WIDTH, SD_BUS_WIDTH_4BIT,
				RESP_TYPE_R1, 0, hsdmmc);
	if (err != TEGRABL_NO_ERROR) {
		pr_error("SdAppCmd_SetBusWidth transfer mode\n");
    960186ac:	940027f1 	bl	96022670 <tegrabl_printf>
	/* Only data region on SD card */
	hsdmmc->current_access_region = 0;

fail:
	return err;
}
    960186b0:	2a1303e0 	mov	w0, w19
    960186b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960186b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960186bc:	d65f03c0 	ret
	err = sdmmc_send_command(SD_CMD_SEND_IF_COND, cmd_arg,
    960186c0:	aa1403e4 	mov	x4, x20
    960186c4:	52800003 	mov	w3, #0x0                   	// #0
    960186c8:	528000e2 	mov	w2, #0x7                   	// #7
    960186cc:	52803541 	mov	w1, #0x1aa                 	// #426
    960186d0:	52800100 	mov	w0, #0x8                   	// #8
    960186d4:	97fff650 	bl	96016014 <sdmmc_send_command>
    960186d8:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960186dc:	34000080 	cbz	w0, 960186ec <sd_identify_card+0x7c>
		pr_error("Sending CMD_SD_SEND_IF_COND failed\n");
    960186e0:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960186e4:	91230c00 	add	x0, x0, #0x8c3
    960186e8:	17fffff1 	b	960186ac <sd_identify_card+0x3c>
		err = sdmmc_send_command(SD_CMD_APPLICATION, cmd_arg,
    960186ec:	aa1403e4 	mov	x4, x20
    960186f0:	52800003 	mov	w3, #0x0                   	// #0
    960186f4:	52800022 	mov	w2, #0x1                   	// #1
    960186f8:	52803541 	mov	w1, #0x1aa                 	// #426
    960186fc:	528006e0 	mov	w0, #0x37                  	// #55
    96018700:	97fff645 	bl	96016014 <sdmmc_send_command>
    96018704:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018708:	34000080 	cbz	w0, 96018718 <sd_identify_card+0xa8>
		pr_error("Sending CMD_SD_APPLICATION failed\n");
    9601870c:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018710:	9123a800 	add	x0, x0, #0x8ea
    96018714:	17ffffe6 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_send_command(SD_ACMD_SEND_OP_COND, ocr_reg,
    96018718:	aa1403e4 	mov	x4, x20
    9601871c:	52800003 	mov	w3, #0x0                   	// #0
    96018720:	52800062 	mov	w2, #0x3                   	// #3
    96018724:	52a80601 	mov	w1, #0x40300000            	// #1076887552
    96018728:	52800520 	mov	w0, #0x29                  	// #41
    9601872c:	97fff63a 	bl	96016014 <sdmmc_send_command>
    96018730:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018734:	34000080 	cbz	w0, 96018744 <sd_identify_card+0xd4>
		pr_error("Sending cmd SdAppCmd_SendOcr failed\n");
    96018738:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601873c:	91244000 	add	x0, x0, #0x910
    96018740:	17ffffdb 	b	960186ac <sd_identify_card+0x3c>
		ocr_reg = *sdmmc_response;
    96018744:	b9401280 	ldr	w0, [x20, #16]
		if (ocr_reg == 0) {
    96018748:	7100001f 	cmp	w0, #0x0
    9601874c:	54fffb20 	b.eq	960186b0 <sd_identify_card+0x40>  // b.none
	} while (!(ocr_reg & (uint32_t)(SD_CARD_POWERUP_STATUS_MASK)));
    96018750:	54fffcea 	b.ge	960186ec <sd_identify_card+0x7c>  // b.tcont
	if (ocr_reg & SD_CARD_CAPACITY_MASK) {
    96018754:	36f00060 	tbz	w0, #30, 96018760 <sd_identify_card+0xf0>
		hsdmmc->is_high_capacity_card = true;
    96018758:	52800020 	mov	w0, #0x1                   	// #1
    9601875c:	39009680 	strb	w0, [x20, #37]
	err = sdmmc_send_command(CMD_ALL_SEND_CID, 0, RESP_TYPE_R2, 0, hsdmmc);
    96018760:	52800042 	mov	w2, #0x2                   	// #2
    96018764:	aa1403e4 	mov	x4, x20
    96018768:	52800003 	mov	w3, #0x0                   	// #0
    9601876c:	52800001 	mov	w1, #0x0                   	// #0
    96018770:	2a0203e0 	mov	w0, w2
    96018774:	97fff628 	bl	96016014 <sdmmc_send_command>
    96018778:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601877c:	34000080 	cbz	w0, 9601878c <sd_identify_card+0x11c>
		pr_error("Sending CID failed");
    96018780:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018784:	9124e000 	add	x0, x0, #0x938
    96018788:	17ffffc9 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_send_command(CMD_SET_RELATIVE_ADDRESS, 9, RESP_TYPE_R6, 0,
    9601878c:	aa1403e4 	mov	x4, x20
    96018790:	52800003 	mov	w3, #0x0                   	// #0
    96018794:	528000c2 	mov	w2, #0x6                   	// #6
    96018798:	52800121 	mov	w1, #0x9                   	// #9
    9601879c:	52800060 	mov	w0, #0x3                   	// #3
    960187a0:	97fff61d 	bl	96016014 <sdmmc_send_command>
    960187a4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960187a8:	34000080 	cbz	w0, 960187b8 <sd_identify_card+0x148>
		pr_error("Assigning RCA failed\n");
    960187ac:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960187b0:	91253800 	add	x0, x0, #0x94e
    960187b4:	17ffffbe 	b	960186ac <sd_identify_card+0x3c>
	hsdmmc->card_rca = *sdmmc_response;
    960187b8:	b9401281 	ldr	w1, [x20, #16]
	err = sdmmc_send_command(CMD_SEND_CSD, hsdmmc->card_rca, RESP_TYPE_R2,
    960187bc:	aa1403e4 	mov	x4, x20
	hsdmmc->card_rca = *sdmmc_response;
    960187c0:	b9000681 	str	w1, [x20, #4]
	err = sdmmc_send_command(CMD_SEND_CSD, hsdmmc->card_rca, RESP_TYPE_R2,
    960187c4:	52800003 	mov	w3, #0x0                   	// #0
    960187c8:	52800042 	mov	w2, #0x2                   	// #2
    960187cc:	52800120 	mov	w0, #0x9                   	// #9
    960187d0:	97fff611 	bl	96016014 <sdmmc_send_command>
    960187d4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960187d8:	34000080 	cbz	w0, 960187e8 <sd_identify_card+0x178>
		pr_error("Query CSD failed\n");
    960187dc:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960187e0:	91259c00 	add	x0, x0, #0x967
    960187e4:	17ffffb2 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_parse_csd(hsdmmc);
    960187e8:	aa1403e0 	mov	x0, x20
    960187ec:	97fff643 	bl	960160f8 <sdmmc_parse_csd>
    960187f0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960187f4:	34000080 	cbz	w0, 96018804 <sd_identify_card+0x194>
		pr_error("Parse CSD failed\n");
    960187f8:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960187fc:	9125f000 	add	x0, x0, #0x97c
    96018800:	17ffffab 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_send_command(CMD_SELECT_DESELECT_CARD, hsdmmc->card_rca,
    96018804:	b9400681 	ldr	w1, [x20, #4]
    96018808:	aa1403e4 	mov	x4, x20
    9601880c:	52800003 	mov	w3, #0x0                   	// #0
    96018810:	52800022 	mov	w2, #0x1                   	// #1
    96018814:	528000e0 	mov	w0, #0x7                   	// #7
    96018818:	97fff5ff 	bl	96016014 <sdmmc_send_command>
    9601881c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018820:	34000080 	cbz	w0, 96018830 <sd_identify_card+0x1c0>
		pr_error("Sending cmd7 failed\n");
    96018824:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018828:	91264400 	add	x0, x0, #0x991
    9601882c:	17ffffa0 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_send_command(CMD_SEND_STATUS, hsdmmc->card_rca, RESP_TYPE_R1,
    96018830:	b9400681 	ldr	w1, [x20, #4]
    96018834:	aa1403e4 	mov	x4, x20
    96018838:	52800003 	mov	w3, #0x0                   	// #0
    9601883c:	52800022 	mov	w2, #0x1                   	// #1
    96018840:	528001a0 	mov	w0, #0xd                   	// #13
    96018844:	97fff5f4 	bl	96016014 <sdmmc_send_command>
    96018848:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601884c:	34000080 	cbz	w0, 9601885c <sd_identify_card+0x1ec>
		pr_error("Card is not in transfer mode\n");
    96018850:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018854:	9126a400 	add	x0, x0, #0x9a9
    96018858:	17ffff95 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_card_transfer_mode(hsdmmc);
    9601885c:	aa1403e0 	mov	x0, x20
    96018860:	97fff6bd 	bl	96016354 <sdmmc_card_transfer_mode>
    96018864:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018868:	34000080 	cbz	w0, 96018878 <sd_identify_card+0x208>
		pr_error("Setting card to transfer mode failed\n");
    9601886c:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018870:	91272800 	add	x0, x0, #0x9ca
    96018874:	17ffff8e 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_send_command(SD_CMD_APPLICATION, hsdmmc->card_rca,
    96018878:	b9400681 	ldr	w1, [x20, #4]
    9601887c:	aa1403e4 	mov	x4, x20
    96018880:	52800003 	mov	w3, #0x0                   	// #0
    96018884:	52800022 	mov	w2, #0x1                   	// #1
    96018888:	528006e0 	mov	w0, #0x37                  	// #55
    9601888c:	97fff5e2 	bl	96016014 <sdmmc_send_command>
    96018890:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018894:	34000080 	cbz	w0, 960188a4 <sd_identify_card+0x234>
		pr_error("Command_ApplicationCommand transfer mode\n");
    96018898:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601889c:	9127cc00 	add	x0, x0, #0x9f3
    960188a0:	17ffff83 	b	960186ac <sd_identify_card+0x3c>
	err = sdmmc_send_command(SD_ACMD_SET_BUS_WIDTH, SD_BUS_WIDTH_4BIT,
    960188a4:	aa1403e4 	mov	x4, x20
    960188a8:	52800003 	mov	w3, #0x0                   	// #0
    960188ac:	52800022 	mov	w2, #0x1                   	// #1
    960188b0:	52800041 	mov	w1, #0x2                   	// #2
    960188b4:	528000c0 	mov	w0, #0x6                   	// #6
    960188b8:	97fff5d7 	bl	96016014 <sdmmc_send_command>
    960188bc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960188c0:	34000080 	cbz	w0, 960188d0 <sd_identify_card+0x260>
		pr_error("SdAppCmd_SetBusWidth transfer mode\n");
    960188c4:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960188c8:	91288000 	add	x0, x0, #0xa20
    960188cc:	17ffff78 	b	960186ac <sd_identify_card+0x3c>
	hsdmmc->data_width = DATA_WIDTH_4BIT;
    960188d0:	52800020 	mov	w0, #0x1                   	// #1
    960188d4:	b9000e80 	str	w0, [x20, #12]
	sdmmc_set_data_width(DATA_WIDTH_4BIT, hsdmmc);
    960188d8:	aa1403e1 	mov	x1, x20
    960188dc:	97fffca8 	bl	96017b7c <sdmmc_set_data_width>
	hsdmmc->current_access_region = 0;
    960188e0:	b9002a9f 	str	wzr, [x20, #40]
    960188e4:	17ffff73 	b	960186b0 <sd_identify_card+0x40>
		return TEGRABL_ERR_INVALID;
    960188e8:	52800053 	mov	w19, #0x2                   	// #2
    960188ec:	17ffff71 	b	960186b0 <sd_identify_card+0x40>

00000000960188f0 <sd_erase>:

tegrabl_error_t sd_erase(tegrabl_bdev_t *dev, bnum_t block, bnum_t count,
	struct tegrabl_sdmmc *hsdmmc, sdmmc_device device)
{
    960188f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	time_t start_time;
	time_t end_time;

	TEGRABL_UNUSED(device);

	if ((dev == NULL) || (hsdmmc == NULL)) {
    960188f4:	f100001f 	cmp	x0, #0x0
    960188f8:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    960188fc:	910003fd 	mov	x29, sp
    96018900:	a90153f3 	stp	x19, x20, [sp, #16]
    96018904:	a9025bf5 	stp	x21, x22, [sp, #32]
    96018908:	a90363f7 	stp	x23, x24, [sp, #48]
	if ((dev == NULL) || (hsdmmc == NULL)) {
    9601890c:	54000a60 	b.eq	96018a58 <sd_erase+0x168>  // b.none
		goto fail;
	}

	/* Make sure erase won't exceed the dev's block_count */
	erase_blk_end = block + count - 1U;
	dev_blk_end = dev->block_count - 1U;
    96018910:	b9402413 	ldr	w19, [x0, #36]
	erase_blk_end = block + count - 1U;
    96018914:	51000442 	sub	w2, w2, #0x1
    96018918:	0b010054 	add	w20, w2, w1
    9601891c:	2a0103f7 	mov	w23, w1
	dev_blk_end = dev->block_count - 1U;
    96018920:	51000673 	sub	w19, w19, #0x1
    96018924:	aa0303f6 	mov	x22, x3
	if (erase_blk_end > dev_blk_end) {
    96018928:	6b13029f 	cmp	w20, w19
    9601892c:	540000e9 	b.ls	96018948 <sd_erase+0x58>  // b.plast
		pr_warn("Limit sd_erase() to 0x%x (from 0x%x)\n", dev_blk_end, erase_blk_end);
    96018930:	2a1403e2 	mov	w2, w20
    96018934:	2a1303f4 	mov	w20, w19
    96018938:	2a1303e1 	mov	w1, w19
    9601893c:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018940:	91216000 	add	x0, x0, #0x858
    96018944:	9400274b 	bl	96022670 <tegrabl_printf>
		erase_blk_end = dev_blk_end;
	}

	blk_start = block;
	blk_end = blk_start + MAX_ERASABLE_SECTORS - 1U;
    96018948:	1143e6f5 	add	w21, w23, #0xf9, lsl #12
    9601894c:	113ffeb5 	add	w21, w21, #0xfff

	while (blk_start < erase_blk_end) {
    96018950:	6b1402ff 	cmp	w23, w20
    96018954:	54000103 	b.cc	96018974 <sd_erase+0x84>  // b.lo, b.ul, b.last

		blk_start = blk_end + 1U;
		blk_end += MAX_ERASABLE_SECTORS;
	}

exit:
    96018958:	52800013 	mov	w19, #0x0                   	// #0
		pr_error("Failed to erase blocks (0x%x : 0x%x)\n", blk_start, blk_end);
	}

fail:
	return error;
}
    9601895c:	2a1303e0 	mov	w0, w19
    96018960:	a94153f3 	ldp	x19, x20, [sp, #16]
    96018964:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96018968:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601896c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96018970:	d65f03c0 	ret
    96018974:	6b1402bf 	cmp	w21, w20
		error = sdmmc_send_command(SD_CMD_ERASE_BLK_START, blk_start, RESP_TYPE_R1, 0, hsdmmc);
    96018978:	aa1603e4 	mov	x4, x22
    9601897c:	1a9492b5 	csel	w21, w21, w20, ls  // ls = plast
    96018980:	52800003 	mov	w3, #0x0                   	// #0
    96018984:	52800022 	mov	w2, #0x1                   	// #1
    96018988:	2a1703e1 	mov	w1, w23
    9601898c:	52800400 	mov	w0, #0x20                  	// #32
    96018990:	97fff5a1 	bl	96016014 <sdmmc_send_command>
    96018994:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    96018998:	350006a0 	cbnz	w0, 96018a6c <sd_erase+0x17c>
		error = sdmmc_send_command(SD_CMD_ERASE_BLK_END,
    9601899c:	aa1603e4 	mov	x4, x22
    960189a0:	52800003 	mov	w3, #0x0                   	// #0
    960189a4:	52800022 	mov	w2, #0x1                   	// #1
    960189a8:	2a1503e1 	mov	w1, w21
    960189ac:	52800420 	mov	w0, #0x21                  	// #33
    960189b0:	97fff599 	bl	96016014 <sdmmc_send_command>
    960189b4:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    960189b8:	350005a0 	cbnz	w0, 96018a6c <sd_erase+0x17c>
		error = sdmmc_send_command(SD_CMD_ERASE, 0, RESP_TYPE_R1B, 0, hsdmmc);
    960189bc:	aa1603e4 	mov	x4, x22
    960189c0:	52800003 	mov	w3, #0x0                   	// #0
    960189c4:	52800102 	mov	w2, #0x8                   	// #8
    960189c8:	52800001 	mov	w1, #0x0                   	// #0
    960189cc:	528004c0 	mov	w0, #0x26                  	// #38
    960189d0:	97fff591 	bl	96016014 <sdmmc_send_command>
    960189d4:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    960189d8:	350004a0 	cbnz	w0, 96018a6c <sd_erase+0x17c>
		error = sdmmc_verify_response(CMD_ERASE, 1, hsdmmc);
    960189dc:	aa1603e2 	mov	x2, x22
    960189e0:	52800021 	mov	w1, #0x1                   	// #1
    960189e4:	528004c0 	mov	w0, #0x26                  	// #38
    960189e8:	97fff5e3 	bl	96016174 <sdmmc_verify_response>
    960189ec:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    960189f0:	350003e0 	cbnz	w0, 96018a6c <sd_erase+0x17c>
		start_time = tegrabl_get_timestamp_ms();
    960189f4:	94001ca6 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    960189f8:	aa0003f8 	mov	x24, x0
			error = sdmmc_send_command(CMD_SEND_STATUS,
    960189fc:	b94006c1 	ldr	w1, [x22, #4]
    96018a00:	aa1603e4 	mov	x4, x22
    96018a04:	52800003 	mov	w3, #0x0                   	// #0
    96018a08:	52800022 	mov	w2, #0x1                   	// #1
    96018a0c:	528001a0 	mov	w0, #0xd                   	// #13
    96018a10:	97fff581 	bl	96016014 <sdmmc_send_command>
    96018a14:	2a0003f3 	mov	w19, w0
			if (error != TEGRABL_NO_ERROR) {
    96018a18:	350002a0 	cbnz	w0, 96018a6c <sd_erase+0x17c>
			if (sdmmc_verify_response(CMD_SEND_STATUS, 1, hsdmmc) == TEGRABL_NO_ERROR) {
    96018a1c:	aa1603e2 	mov	x2, x22
    96018a20:	52800021 	mov	w1, #0x1                   	// #1
    96018a24:	528001a0 	mov	w0, #0xd                   	// #13
    96018a28:	97fff5d3 	bl	96016174 <sdmmc_verify_response>
    96018a2c:	34000100 	cbz	w0, 96018a4c <sd_erase+0x15c>
			end_time = tegrabl_get_timestamp_ms();
    96018a30:	94001c97 	bl	9601fc8c <tegrabl_get_timestamp_ms>
			if ((end_time - start_time) > SD_ERASE_TIMEOUT_IN_MS) {
    96018a34:	cb180000 	sub	x0, x0, x24
    96018a38:	f101901f 	cmp	x0, #0x64
    96018a3c:	54000148 	b.hi	96018a64 <sd_erase+0x174>  // b.pmore
			tegrabl_mdelay(1);
    96018a40:	d2800020 	mov	x0, #0x1                   	// #1
    96018a44:	94001cb5 	bl	9601fd18 <tegrabl_mdelay>
			error = sdmmc_send_command(CMD_SEND_STATUS,
    96018a48:	17ffffed 	b	960189fc <sd_erase+0x10c>
		blk_start = blk_end + 1U;
    96018a4c:	110006b7 	add	w23, w21, #0x1
		blk_end += MAX_ERASABLE_SECTORS;
    96018a50:	1143eab5 	add	w21, w21, #0xfa, lsl #12
    96018a54:	17ffffbf 	b	96018950 <sd_erase+0x60>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 18);
    96018a58:	52824053 	mov	w19, #0x1202                	// #4610
    96018a5c:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
	return error;
    96018a60:	17ffffbf 	b	9601895c <sd_erase+0x6c>
				error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 22);
    96018a64:	5282c0d3 	mov	w19, #0x1606                	// #5638
    96018a68:	72a1e1f3 	movk	w19, #0xf0f, lsl #16
		pr_error("Failed to erase blocks (0x%x : 0x%x)\n", blk_start, blk_end);
    96018a6c:	2a1503e2 	mov	w2, w21
    96018a70:	2a1703e1 	mov	w1, w23
    96018a74:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018a78:	91220400 	add	x0, x0, #0x881
    96018a7c:	940026fd 	bl	96022670 <tegrabl_printf>
    96018a80:	17ffffb7 	b	9601895c <sd_erase+0x6c>

0000000096018a84 <tegrabl_sd_is_card_present>:
	}
	return err;
}

tegrabl_error_t tegrabl_sd_is_card_present(struct gpio_info *cd_gpio, bool *is_present)
{
    96018a84:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96018a88:	910003fd 	mov	x29, sp
    96018a8c:	f90013f5 	str	x21, [sp, #32]
    96018a90:	aa0103f5 	mov	x21, x1
	void *fdt = NULL;
    96018a94:	910143a1 	add	x1, x29, #0x50
{
    96018a98:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t chip_id = TEGRA_GPIO_MAIN_CHIPID;
    96018a9c:	b9003fbf 	str	wzr, [x29, #60]
{
    96018aa0:	aa0003f4 	mov	x20, x0
	if (tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt) == TEGRABL_NO_ERROR) {
    96018aa4:	52800000 	mov	w0, #0x0                   	// #0
	void *fdt = NULL;
    96018aa8:	f81f8c3f 	str	xzr, [x1, #-8]!
	if (tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt) == TEGRABL_NO_ERROR) {
    96018aac:	940060eb 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
    96018ab0:	340004a0 	cbz	w0, 96018b44 <tegrabl_sd_is_card_present+0xc0>
	err = tegrabl_gpio_driver_get(chip_id, &gpio_drv);
    96018ab4:	b9403fa0 	ldr	w0, [x29, #60]
    96018ab8:	910103a1 	add	x1, x29, #0x40
    96018abc:	97ffd405 	bl	9600dad0 <tegrabl_gpio_driver_get>
    96018ac0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018ac4:	350004a0 	cbnz	w0, 96018b58 <tegrabl_sd_is_card_present+0xd4>
	err = gpio_config(gpio_drv, cd_gpio->pin, GPIO_PINMODE_INPUT);
    96018ac8:	f94023a0 	ldr	x0, [x29, #64]
	return drv->ops->config(gpio_num, mode, drv->driver_data);
    96018acc:	f9401401 	ldr	x1, [x0, #40]
    96018ad0:	f9400802 	ldr	x2, [x0, #16]
    96018ad4:	b9400680 	ldr	w0, [x20, #4]
    96018ad8:	f9400823 	ldr	x3, [x1, #16]
    96018adc:	52800001 	mov	w1, #0x0                   	// #0
    96018ae0:	d63f0060 	blr	x3
    96018ae4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018ae8:	35000380 	cbnz	w0, 96018b58 <tegrabl_sd_is_card_present+0xd4>
	err = gpio_read(gpio_drv, cd_gpio->pin, pin_state);
    96018aec:	f94023a0 	ldr	x0, [x29, #64]
	return drv->ops->read(gpio_num, state, drv->driver_data);
    96018af0:	f9401401 	ldr	x1, [x0, #40]
    96018af4:	f9400802 	ldr	x2, [x0, #16]
    96018af8:	b9400680 	ldr	w0, [x20, #4]
    96018afc:	f9400023 	ldr	x3, [x1]
    96018b00:	9100e3a1 	add	x1, x29, #0x38
    96018b04:	d63f0060 	blr	x3
    96018b08:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96018b0c:	35000260 	cbnz	w0, 96018b58 <tegrabl_sd_is_card_present+0xd4>
	if (err != TEGRABL_NO_ERROR) {
		goto fail;
	}

	pr_trace("pin_state = %d\n", pin_state);
	is_active_low = !(cd_gpio->flags & 0x1);
    96018b10:	b9400a80 	ldr	w0, [x20, #8]

	*is_present = (pin_state == GPIO_PIN_STATE_HIGH) ^ is_active_low;
    96018b14:	b9403ba1 	ldr	w1, [x29, #56]
	is_active_low = !(cd_gpio->flags & 0x1);
    96018b18:	2a2003e0 	mvn	w0, w0
	*is_present = (pin_state == GPIO_PIN_STATE_HIGH) ^ is_active_low;
    96018b1c:	7100043f 	cmp	w1, #0x1
	is_active_low = !(cd_gpio->flags & 0x1);
    96018b20:	12000000 	and	w0, w0, #0x1
	*is_present = (pin_state == GPIO_PIN_STATE_HIGH) ^ is_active_low;
    96018b24:	1a9f17e1 	cset	w1, eq  // eq = none
    96018b28:	4a000022 	eor	w2, w1, w0
    96018b2c:	390002a2 	strb	w2, [x21]
	if (*is_present)
    96018b30:	6b00003f 	cmp	w1, w0
    96018b34:	540002c1 	b.ne	96018b8c <tegrabl_sd_is_card_present+0x108>  // b.any
		pr_info("Found sdcard\n");
	else
		pr_info("No sdcard\n");
    96018b38:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018b3c:	912a6000 	add	x0, x0, #0xa98
    96018b40:	1400000d 	b	96018b74 <tegrabl_sd_is_card_present+0xf0>
		err = tegrabl_gpio_get_chipid_with_phandle(cd_gpio->handle, &chip_id);
    96018b44:	b9400280 	ldr	w0, [x20]
    96018b48:	9100f3a1 	add	x1, x29, #0x3c
    96018b4c:	97ffd404 	bl	9600db5c <tegrabl_gpio_get_chipid_with_phandle>
    96018b50:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR)
    96018b54:	34fffb00 	cbz	w0, 96018ab4 <tegrabl_sd_is_card_present+0x30>
		pr_error("sd gpio pin status read failed\n");
    96018b58:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018b5c:	12005e73 	and	w19, w19, #0xffffff
    96018b60:	91291c00 	add	x0, x0, #0xa47
    96018b64:	940026c3 	bl	96022670 <tegrabl_printf>

fail:
	if (err != TEGRABL_NO_ERROR)
		pr_error("sd card detection failed\n");
    96018b68:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018b6c:	32080e73 	orr	w19, w19, #0xf000000
    96018b70:	9129a800 	add	x0, x0, #0xa6a
		pr_info("No sdcard\n");
    96018b74:	940026bf 	bl	96022670 <tegrabl_printf>
	return err;
}
    96018b78:	f94013f5 	ldr	x21, [sp, #32]
    96018b7c:	2a1303e0 	mov	w0, w19
    96018b80:	a94153f3 	ldp	x19, x20, [sp, #16]
    96018b84:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96018b88:	d65f03c0 	ret
		pr_info("Found sdcard\n");
    96018b8c:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018b90:	912a1c00 	add	x0, x0, #0xa87
    96018b94:	17fffff8 	b	96018b74 <tegrabl_sd_is_card_present+0xf0>

0000000096018b98 <tegrabl_ufs_blockdev_xfer_wait>:
	uint8_t *buf = NULL;
	time_t start_time_us;
	time_t elapsed_time_us;
	time_t timeout_us;

	if ((xfer == NULL) || (xfer->dev == NULL) || (xfer->buf == NULL)) {
    96018b98:	b50001a0 	cbnz	x0, 96018bcc <tegrabl_ufs_blockdev_xfer_wait+0x34>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018b9c:	52800040 	mov	w0, #0x2                   	// #2
    96018ba0:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
	} else {
		*status_flag = TEGRABL_BLOCKDEV_XFER_COMPLETE;
	}
fail:
	return error;
}
    96018ba4:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018ba8:	52800040 	mov	w0, #0x2                   	// #2
    96018bac:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96018bb0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96018bb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96018bb8:	a94363f7 	ldp	x23, x24, [sp, #48]
    96018bbc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96018bc0:	a94573fb 	ldp	x27, x28, [sp, #80]
    96018bc4:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96018bc8:	d65f03c0 	ret
	if ((xfer == NULL) || (xfer->dev == NULL) || (xfer->buf == NULL)) {
    96018bcc:	f9400003 	ldr	x3, [x0]
    96018bd0:	b4fffe63 	cbz	x3, 96018b9c <tegrabl_ufs_blockdev_xfer_wait+0x4>
{
    96018bd4:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96018bd8:	910003fd 	mov	x29, sp
    96018bdc:	a9025bf5 	stp	x21, x22, [sp, #32]
	if ((xfer == NULL) || (xfer->dev == NULL) || (xfer->buf == NULL)) {
    96018be0:	f9400815 	ldr	x21, [x0, #16]
{
    96018be4:	a90153f3 	stp	x19, x20, [sp, #16]
    96018be8:	a90363f7 	stp	x23, x24, [sp, #48]
    96018bec:	a9046bf9 	stp	x25, x26, [sp, #64]
    96018bf0:	a90573fb 	stp	x27, x28, [sp, #80]
	if ((xfer == NULL) || (xfer->dev == NULL) || (xfer->buf == NULL)) {
    96018bf4:	b4fffdb5 	cbz	x21, 96018ba8 <tegrabl_ufs_blockdev_xfer_wait+0x10>
	if ((xfer->xfer_type != TEGRABL_BLOCKDEV_READ) || (!xfer->is_non_blocking)) {
    96018bf8:	39402004 	ldrb	w4, [x0, #8]
    96018bfc:	7100089f 	cmp	w4, #0x2
    96018c00:	54fffd41 	b.ne	96018ba8 <tegrabl_ufs_blockdev_xfer_wait+0x10>  // b.any
    96018c04:	39408004 	ldrb	w4, [x0, #32]
    96018c08:	34fffd04 	cbz	w4, 96018ba8 <tegrabl_ufs_blockdev_xfer_wait+0x10>
	*status_flag = TEGRABL_BLOCKDEV_XFER_IN_PROGRESS;
    96018c0c:	52800024 	mov	w4, #0x1                   	// #1
	count = xfer->block_count;
    96018c10:	29434c17 	ldp	w23, w19, [x0, #24]
	*status_flag = TEGRABL_BLOCKDEV_XFER_IN_PROGRESS;
    96018c14:	39000044 	strb	w4, [x2]
	priv_data = (struct ufs_priv_data *)dev->priv_data;
    96018c18:	f940187a 	ldr	x26, [x3, #48]
	context = (struct tegrabl_ufs_context *)priv_data->context;
    96018c1c:	f9400758 	ldr	x24, [x26, #8]
	if (context == NULL) {
    96018c20:	b4fffc58 	cbz	x24, 96018ba8 <tegrabl_ufs_blockdev_xfer_wait+0x10>
    96018c24:	aa0203f6 	mov	x22, x2
    96018c28:	aa0103f9 	mov	x25, x1
    96018c2c:	aa0003f4 	mov	x20, x0
	start_time_us = tegrabl_get_timestamp_us();
    96018c30:	94001c13 	bl	9601fc7c <tegrabl_get_timestamp_us>
		bulk_count = MIN(count, UFS_RW_BLOCK_MAX);
    96018c34:	5280801c 	mov	w28, #0x400                 	// #1024
	start_time_us = tegrabl_get_timestamp_us();
    96018c38:	aa0003fb 	mov	x27, x0
	elapsed_time_us = 0;
    96018c3c:	d2800000 	mov	x0, #0x0                   	// #0
	while ((count > 0UL) && (elapsed_time_us <= timeout_us)) {
    96018c40:	7100027f 	cmp	w19, #0x0
    96018c44:	fa591002 	ccmp	x0, x25, #0x2, ne  // ne = any
    96018c48:	540000c9 	b.ls	96018c60 <tegrabl_ufs_blockdev_xfer_wait+0xc8>  // b.plast
	if (count > 0UL) {
    96018c4c:	340003f3 	cbz	w19, 96018cc8 <tegrabl_ufs_blockdev_xfer_wait+0x130>
		xfer->buf = buf;
    96018c50:	f9000a95 	str	x21, [x20, #16]
		xfer->block_count = count;
    96018c54:	29034e97 	stp	w23, w19, [x20, #24]
		*status_flag = TEGRABL_BLOCKDEV_XFER_COMPLETE;
    96018c58:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    96018c5c:	17ffffd5 	b	96018bb0 <tegrabl_ufs_blockdev_xfer_wait+0x18>
		if (context->xfer_info.dma_in_progress) {
    96018c60:	3940b300 	ldrb	w0, [x24, #44]
    96018c64:	340001a0 	cbz	w0, 96018c98 <tegrabl_ufs_blockdev_xfer_wait+0x100>
			bulk_count = context->xfer_info.bulk_count;
    96018c68:	b9403302 	ldr	w2, [x24, #48]
			error = tegrabl_ufs_rw_check_complete(bulk_count, (uint32_t *)buf);
    96018c6c:	aa1503e1 	mov	x1, x21
    96018c70:	b9006fa2 	str	w2, [x29, #108]
    96018c74:	2a0203e0 	mov	w0, w2
    96018c78:	94000648 	bl	9601a598 <tegrabl_ufs_rw_check_complete>
			if (error != TEGRABL_NO_ERROR) {
    96018c7c:	35fff9a0 	cbnz	w0, 96018bb0 <tegrabl_ufs_blockdev_xfer_wait+0x18>
			count -= bulk_count;
    96018c80:	b9406fa2 	ldr	w2, [x29, #108]
			buf += (bulk_count << context->block_size_log2);
    96018c84:	b9401f00 	ldr	w0, [x24, #28]
			count -= bulk_count;
    96018c88:	4b020273 	sub	w19, w19, w2
			block += bulk_count;
    96018c8c:	0b0202f7 	add	w23, w23, w2
			buf += (bulk_count << context->block_size_log2);
    96018c90:	1ac02040 	lsl	w0, w2, w0
    96018c94:	8b0002b5 	add	x21, x21, x0
		bulk_count = MIN(count, UFS_RW_BLOCK_MAX);
    96018c98:	7110027f 	cmp	w19, #0x400
    96018c9c:	1a9c9263 	csel	w3, w19, w28, ls  // ls = plast
		if (bulk_count <= 0UL) {
    96018ca0:	34000153 	cbz	w19, 96018cc8 <tegrabl_ufs_blockdev_xfer_wait+0x130>
		error = tegrabl_ufs_xfer(priv_data->lun_id, block, 0, bulk_count, (uint32_t *)buf);
    96018ca4:	39400340 	ldrb	w0, [x26]
    96018ca8:	aa1503e4 	mov	x4, x21
    96018cac:	52800002 	mov	w2, #0x0                   	// #0
    96018cb0:	2a1703e1 	mov	w1, w23
    96018cb4:	940009ff 	bl	9601b4b0 <tegrabl_ufs_xfer>
		if (error != TEGRABL_NO_ERROR) {
    96018cb8:	35fff7c0 	cbnz	w0, 96018bb0 <tegrabl_ufs_blockdev_xfer_wait+0x18>
		elapsed_time_us = tegrabl_get_timestamp_us() - start_time_us;
    96018cbc:	94001bf0 	bl	9601fc7c <tegrabl_get_timestamp_us>
    96018cc0:	cb1b0000 	sub	x0, x0, x27
    96018cc4:	17ffffdf 	b	96018c40 <tegrabl_ufs_blockdev_xfer_wait+0xa8>
		*status_flag = TEGRABL_BLOCKDEV_XFER_COMPLETE;
    96018cc8:	52800040 	mov	w0, #0x2                   	// #2
    96018ccc:	390002c0 	strb	w0, [x22]
    96018cd0:	17ffffe2 	b	96018c58 <tegrabl_ufs_blockdev_xfer_wait+0xc0>

0000000096018cd4 <tegrabl_ufs_blockdev_xfer>:
	if ((xfer == NULL) || ((xfer->dev == NULL)) || (xfer->buf == NULL)) {
    96018cd4:	b4000480 	cbz	x0, 96018d64 <tegrabl_ufs_blockdev_xfer+0x90>
    96018cd8:	f9400003 	ldr	x3, [x0]
    96018cdc:	b4000443 	cbz	x3, 96018d64 <tegrabl_ufs_blockdev_xfer+0x90>
    96018ce0:	f9400804 	ldr	x4, [x0, #16]
    96018ce4:	b4000404 	cbz	x4, 96018d64 <tegrabl_ufs_blockdev_xfer+0x90>
	if ((xfer->xfer_type != (uint32_t)(TEGRABL_BLOCKDEV_READ)) || (!xfer->is_non_blocking)) {
    96018ce8:	39402001 	ldrb	w1, [x0, #8]
    96018cec:	7100083f 	cmp	w1, #0x2
    96018cf0:	540003a1 	b.ne	96018d64 <tegrabl_ufs_blockdev_xfer+0x90>  // b.any
    96018cf4:	39408001 	ldrb	w1, [x0, #32]
    96018cf8:	34000361 	cbz	w1, 96018d64 <tegrabl_ufs_blockdev_xfer+0x90>
{
    96018cfc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96018d00:	910003fd 	mov	x29, sp
	priv_data = (struct ufs_priv_data *)dev->priv_data;
    96018d04:	f9401865 	ldr	x5, [x3, #48]
{
    96018d08:	a90153f3 	stp	x19, x20, [sp, #16]
	count = xfer->block_count;
    96018d0c:	29430001 	ldp	w1, w0, [x0, #24]
	context = (struct tegrabl_ufs_context *)priv_data->context;
    96018d10:	f94004b4 	ldr	x20, [x5, #8]
	if ((context == NULL)) {
    96018d14:	b40002f4 	cbz	x20, 96018d70 <tegrabl_ufs_blockdev_xfer+0x9c>
	if ((block + count) > dev->block_count) {
    96018d18:	b9402463 	ldr	w3, [x3, #36]
    96018d1c:	0b000022 	add	w2, w1, w0
    96018d20:	6b03005f 	cmp	w2, w3
    96018d24:	540002c8 	b.hi	96018d7c <tegrabl_ufs_blockdev_xfer+0xa8>  // b.pmore
	if (count != 0U) {
    96018d28:	340002e0 	cbz	w0, 96018d84 <tegrabl_ufs_blockdev_xfer+0xb0>
		bulk_count = MIN(count, UFS_RW_BLOCK_MAX);
    96018d2c:	7110001f 	cmp	w0, #0x400
    96018d30:	52808013 	mov	w19, #0x400                 	// #1024
    96018d34:	1a939013 	csel	w19, w0, w19, ls  // ls = plast
		error = tegrabl_ufs_xfer(priv_data->lun_id, block, 0,
    96018d38:	394000a0 	ldrb	w0, [x5]
    96018d3c:	2a1303e3 	mov	w3, w19
    96018d40:	52800002 	mov	w2, #0x0                   	// #0
    96018d44:	940009db 	bl	9601b4b0 <tegrabl_ufs_xfer>
		if (error != TEGRABL_NO_ERROR) {
    96018d48:	35000080 	cbnz	w0, 96018d58 <tegrabl_ufs_blockdev_xfer+0x84>
		context->xfer_info.dma_in_progress = true;
    96018d4c:	52800021 	mov	w1, #0x1                   	// #1
    96018d50:	3900b281 	strb	w1, [x20, #44]
		context->xfer_info.bulk_count = bulk_count;
    96018d54:	b9003293 	str	w19, [x20, #48]
}
    96018d58:	a94153f3 	ldp	x19, x20, [sp, #16]
    96018d5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96018d60:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018d64:	52800040 	mov	w0, #0x2                   	// #2
    96018d68:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96018d6c:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018d70:	52800040 	mov	w0, #0x2                   	// #2
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96018d74:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
    96018d78:	17fffff8 	b	96018d58 <tegrabl_ufs_blockdev_xfer+0x84>
    96018d7c:	52800080 	mov	w0, #0x4                   	// #4
    96018d80:	17fffffd 	b	96018d74 <tegrabl_ufs_blockdev_xfer+0xa0>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96018d84:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    96018d88:	17fffff4 	b	96018d58 <tegrabl_ufs_blockdev_xfer+0x84>

0000000096018d8c <tegrabl_ufs_bdev_ioctl>:
	if (dev == NULL) {
    96018d8c:	b40000c0 	cbz	x0, 96018da4 <tegrabl_ufs_bdev_ioctl+0x18>
	if ((context == NULL)) {
    96018d90:	f9401800 	ldr	x0, [x0, #48]
    96018d94:	b4000080 	cbz	x0, 96018da4 <tegrabl_ufs_bdev_ioctl+0x18>
	switch (ioctl) {
    96018d98:	71001c3f 	cmp	w1, #0x7
    96018d9c:	540000a1 	b.ne	96018db0 <tegrabl_ufs_bdev_ioctl+0x24>  // b.any
		error = tegrabl_ufs_hibernate_enter();
    96018da0:	1400030c 	b	960199d0 <tegrabl_ufs_hibernate_enter>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018da4:	52800040 	mov	w0, #0x2                   	// #2
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96018da8:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96018dac:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96018db0:	52800020 	mov	w0, #0x1                   	// #1
    96018db4:	17fffffd 	b	96018da8 <tegrabl_ufs_bdev_ioctl+0x1c>

0000000096018db8 <tegrabl_ufs_bdev_close>:
{
	struct tegrabl_ufs_context *context = NULL;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	TEGRABL_UNUSED(context);
	if (dev != NULL) {
    96018db8:	b4000160 	cbz	x0, 96018de4 <tegrabl_ufs_bdev_close+0x2c>
{
    96018dbc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96018dc0:	910003fd 	mov	x29, sp
		if (dev->priv_data != NULL) {
    96018dc4:	f9401800 	ldr	x0, [x0, #48]
    96018dc8:	b4000040 	cbz	x0, 96018dd0 <tegrabl_ufs_bdev_close+0x18>
			tegrabl_free(dev->priv_data);
    96018dcc:	9400373b 	bl	96026ab8 <tegrabl_free>
		}
		error = tegrabl_ufs_deinit();
    96018dd0:	9400034c 	bl	96019b00 <tegrabl_ufs_deinit>
		init_done = false;
    96018dd4:	d00002a1 	adrp	x1, 9606e000 <__bss_start>
	}
	return error;
}
    96018dd8:	a8c17bfd 	ldp	x29, x30, [sp], #16
		init_done = false;
    96018ddc:	392a243f 	strb	wzr, [x1, #2697]
}
    96018de0:	d65f03c0 	ret
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96018de4:	52800000 	mov	w0, #0x0                   	// #0
}
    96018de8:	d65f03c0 	ret

0000000096018dec <tegrabl_ufs_bdev_erase>:
	if (dev == NULL) {
    96018dec:	b40001e0 	cbz	x0, 96018e28 <tegrabl_ufs_bdev_erase+0x3c>
{
    96018df0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96018df4:	2a0203e3 	mov	w3, w2
    96018df8:	2a0103e2 	mov	w2, w1
    96018dfc:	910003fd 	mov	x29, sp
	error = tegrabl_ufs_erase(dev, priv_data->lun_id, block, count);
    96018e00:	f9401801 	ldr	x1, [x0, #48]
    96018e04:	39400021 	ldrb	w1, [x1]
    96018e08:	94000a1e 	bl	9601b680 <tegrabl_ufs_erase>
	if (error != TEGRABL_NO_ERROR) {
    96018e0c:	340000a0 	cbz	w0, 96018e20 <tegrabl_ufs_bdev_erase+0x34>
		pr_warn("Erase failed\n");
    96018e10:	f0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96018e14:	912a9800 	add	x0, x0, #0xaa6
    96018e18:	94002616 	bl	96022670 <tegrabl_printf>
	return TEGRABL_NO_ERROR;
    96018e1c:	52800000 	mov	w0, #0x0                   	// #0
}
    96018e20:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96018e24:	d65f03c0 	ret
		return error;
    96018e28:	52800040 	mov	w0, #0x2                   	// #2
    96018e2c:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96018e30:	d65f03c0 	ret

0000000096018e34 <tegrabl_ufs_bdev_write_block>:
	if ((dev == NULL) || (buffer == NULL)) {
    96018e34:	f100001f 	cmp	x0, #0x0
    96018e38:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96018e3c:	54000520 	b.eq	96018ee0 <tegrabl_ufs_bdev_write_block+0xac>  // b.none
{
    96018e40:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96018e44:	910003fd 	mov	x29, sp
    96018e48:	a90363f7 	stp	x23, x24, [sp, #48]
	priv_data = (struct ufs_priv_data *)dev->priv_data;
    96018e4c:	f9401817 	ldr	x23, [x0, #48]
{
    96018e50:	a90153f3 	stp	x19, x20, [sp, #16]
    96018e54:	a9025bf5 	stp	x21, x22, [sp, #32]
	context = (struct tegrabl_ufs_context *)priv_data->context;
    96018e58:	f94006f8 	ldr	x24, [x23, #8]
{
    96018e5c:	f90023f9 	str	x25, [sp, #64]
	if (context == NULL) {
    96018e60:	b4000478 	cbz	x24, 96018eec <tegrabl_ufs_bdev_write_block+0xb8>
    96018e64:	aa0103f4 	mov	x20, x1
    96018e68:	2a0203f5 	mov	w21, w2
	if ((block + count) > dev->block_count) {
    96018e6c:	0b030041 	add	w1, w2, w3
    96018e70:	b9402402 	ldr	w2, [x0, #36]
    96018e74:	2a0303f3 	mov	w19, w3
    96018e78:	6b02003f 	cmp	w1, w2
    96018e7c:	540003e8 	b.hi	96018ef8 <tegrabl_ufs_bdev_write_block+0xc4>  // b.pmore
		bulk_count = MIN(count, UFS_RW_BLOCK_MAX);
    96018e80:	52808019 	mov	w25, #0x400                 	// #1024
	while (count != 0U) {
    96018e84:	35000113 	cbnz	w19, 96018ea4 <tegrabl_ufs_bdev_write_block+0x70>
    96018e88:	52800000 	mov	w0, #0x0                   	// #0
}
    96018e8c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96018e90:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96018e94:	a94363f7 	ldp	x23, x24, [sp, #48]
    96018e98:	f94023f9 	ldr	x25, [sp, #64]
    96018e9c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96018ea0:	d65f03c0 	ret
		error = tegrabl_ufs_write(priv_data->lun_id, block, 0, bulk_count, (uint32_t *)buf);
    96018ea4:	394002e0 	ldrb	w0, [x23]
		bulk_count = MIN(count, UFS_RW_BLOCK_MAX);
    96018ea8:	7110027f 	cmp	w19, #0x400
    96018eac:	1a999276 	csel	w22, w19, w25, ls  // ls = plast
		error = tegrabl_ufs_write(priv_data->lun_id, block, 0, bulk_count, (uint32_t *)buf);
    96018eb0:	aa1403e4 	mov	x4, x20
    96018eb4:	2a1603e3 	mov	w3, w22
    96018eb8:	52800002 	mov	w2, #0x0                   	// #0
    96018ebc:	2a1503e1 	mov	w1, w21
    96018ec0:	940009a3 	bl	9601b54c <tegrabl_ufs_write>
		if (error != TEGRABL_NO_ERROR) {
    96018ec4:	35fffe40 	cbnz	w0, 96018e8c <tegrabl_ufs_bdev_write_block+0x58>
		buf += (bulk_count << context->block_size_log2);
    96018ec8:	b9401f00 	ldr	w0, [x24, #28]
		count -= bulk_count;
    96018ecc:	4b160273 	sub	w19, w19, w22
		block += bulk_count;
    96018ed0:	0b1602b5 	add	w21, w21, w22
		buf += (bulk_count << context->block_size_log2);
    96018ed4:	1ac022c0 	lsl	w0, w22, w0
    96018ed8:	8b000294 	add	x20, x20, x0
    96018edc:	17ffffea 	b	96018e84 <tegrabl_ufs_bdev_write_block+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018ee0:	52800040 	mov	w0, #0x2                   	// #2
    96018ee4:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96018ee8:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018eec:	52800040 	mov	w0, #0x2                   	// #2
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96018ef0:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
	return error;
    96018ef4:	17ffffe6 	b	96018e8c <tegrabl_ufs_bdev_write_block+0x58>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96018ef8:	52800080 	mov	w0, #0x4                   	// #4
    96018efc:	17fffffd 	b	96018ef0 <tegrabl_ufs_bdev_write_block+0xbc>

0000000096018f00 <tegrabl_ufs_bdev_read_block>:
	if ((dev == NULL) || (buffer == NULL)) {
    96018f00:	f100001f 	cmp	x0, #0x0
    96018f04:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96018f08:	54000520 	b.eq	96018fac <tegrabl_ufs_bdev_read_block+0xac>  // b.none
{
    96018f0c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96018f10:	910003fd 	mov	x29, sp
    96018f14:	a90363f7 	stp	x23, x24, [sp, #48]
	priv_data = (struct ufs_priv_data *)dev->priv_data;
    96018f18:	f9401817 	ldr	x23, [x0, #48]
{
    96018f1c:	a90153f3 	stp	x19, x20, [sp, #16]
    96018f20:	a9025bf5 	stp	x21, x22, [sp, #32]
	context = (struct tegrabl_ufs_context *)priv_data->context;
    96018f24:	f94006f8 	ldr	x24, [x23, #8]
{
    96018f28:	f90023f9 	str	x25, [sp, #64]
	if ((context == NULL)) {
    96018f2c:	b4000478 	cbz	x24, 96018fb8 <tegrabl_ufs_bdev_read_block+0xb8>
    96018f30:	aa0103f4 	mov	x20, x1
    96018f34:	2a0203f5 	mov	w21, w2
	if ((block + count) > dev->block_count) {
    96018f38:	0b030041 	add	w1, w2, w3
    96018f3c:	b9402402 	ldr	w2, [x0, #36]
    96018f40:	2a0303f3 	mov	w19, w3
    96018f44:	6b02003f 	cmp	w1, w2
    96018f48:	540003e8 	b.hi	96018fc4 <tegrabl_ufs_bdev_read_block+0xc4>  // b.pmore
		bulk_count = MIN(count, UFS_RW_BLOCK_MAX);
    96018f4c:	52808019 	mov	w25, #0x400                 	// #1024
	while (count != 0U) {
    96018f50:	35000113 	cbnz	w19, 96018f70 <tegrabl_ufs_bdev_read_block+0x70>
    96018f54:	52800000 	mov	w0, #0x0                   	// #0
}
    96018f58:	a94153f3 	ldp	x19, x20, [sp, #16]
    96018f5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96018f60:	a94363f7 	ldp	x23, x24, [sp, #48]
    96018f64:	f94023f9 	ldr	x25, [sp, #64]
    96018f68:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96018f6c:	d65f03c0 	ret
		error = tegrabl_ufs_read(priv_data->lun_id, block, 0,
    96018f70:	394002e0 	ldrb	w0, [x23]
		bulk_count = MIN(count, UFS_RW_BLOCK_MAX);
    96018f74:	7110027f 	cmp	w19, #0x400
    96018f78:	1a999276 	csel	w22, w19, w25, ls  // ls = plast
		error = tegrabl_ufs_read(priv_data->lun_id, block, 0,
    96018f7c:	aa1403e4 	mov	x4, x20
    96018f80:	2a1603e3 	mov	w3, w22
    96018f84:	52800002 	mov	w2, #0x0                   	// #0
    96018f88:	2a1503e1 	mov	w1, w21
    96018f8c:	94000951 	bl	9601b4d0 <tegrabl_ufs_read>
		if (error != TEGRABL_NO_ERROR) {
    96018f90:	35fffe40 	cbnz	w0, 96018f58 <tegrabl_ufs_bdev_read_block+0x58>
		buf += (bulk_count << context->block_size_log2);
    96018f94:	b9401f00 	ldr	w0, [x24, #28]
		count -= bulk_count;
    96018f98:	4b160273 	sub	w19, w19, w22
		block += bulk_count;
    96018f9c:	0b1602b5 	add	w21, w21, w22
		buf += (bulk_count << context->block_size_log2);
    96018fa0:	1ac022c0 	lsl	w0, w22, w0
    96018fa4:	8b000294 	add	x20, x20, x0
    96018fa8:	17ffffea 	b	96018f50 <tegrabl_ufs_bdev_read_block+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018fac:	52800040 	mov	w0, #0x2                   	// #2
    96018fb0:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96018fb4:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96018fb8:	52800040 	mov	w0, #0x2                   	// #2
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96018fbc:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
	return error;
    96018fc0:	17ffffe6 	b	96018f58 <tegrabl_ufs_bdev_read_block+0x58>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96018fc4:	52800080 	mov	w0, #0x4                   	// #4
    96018fc8:	17fffffd 	b	96018fbc <tegrabl_ufs_bdev_read_block+0xbc>

0000000096018fcc <tegrabl_ufs_bdev_open>:
#endif
	return error;
}

tegrabl_error_t tegrabl_ufs_bdev_open(bool reinit, struct tegrabl_ufs_platform_params *ufs_params)
{
    96018fcc:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
    96018fd0:	910003fd 	mov	x29, sp
    96018fd4:	a90153f3 	stp	x19, x20, [sp, #16]
	pr_trace("enable_hs_rate_b = %d\n", ufs_params->enable_hs_rate_b);
	pr_trace("enable_hs_rate_a = %d\n", ufs_params->enable_hs_rate_a);
	pr_trace("ufs_init_done = %d\n", ufs_params->ufs_init_done);
	pr_trace("skip_hs_mode_switch = %d\n", ufs_params->skip_hs_mode_switch);

	init_done = reinit;
    96018fd8:	d00002b3 	adrp	x19, 9606e000 <__bss_start>
{
    96018fdc:	a9025bf5 	stp	x21, x22, [sp, #32]
    96018fe0:	aa0103f5 	mov	x21, x1
	init_done = reinit;
    96018fe4:	392a2660 	strb	w0, [x19, #2697]

	context = tegrabl_malloc(sizeof(struct tegrabl_ufs_context));
    96018fe8:	d2802f00 	mov	x0, #0x178                 	// #376
{
    96018fec:	a90363f7 	stp	x23, x24, [sp, #48]
    96018ff0:	a9046bf9 	stp	x25, x26, [sp, #64]
    96018ff4:	a90573fb 	stp	x27, x28, [sp, #80]
	context = tegrabl_malloc(sizeof(struct tegrabl_ufs_context));
    96018ff8:	940036a0 	bl	96026a78 <tegrabl_malloc>
    96018ffc:	f90037b3 	str	x19, [x29, #104]

	if (context == NULL) {
    96019000:	b50001c0 	cbnz	x0, 96019038 <tegrabl_ufs_bdev_open+0x6c>
		pr_error("Failed to allocate memory for ufs context\n");
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96019004:	52800073 	mov	w19, #0x3                   	// #3
		pr_error("Failed to allocate memory for ufs context\n");
    96019008:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601900c:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
		pr_error("Failed to allocate memory for ufs context\n");
    96019010:	912adc00 	add	x0, x0, #0xab7
    96019014:	94002597 	bl	96022670 <tegrabl_printf>
	}
	init_done = true;

fail:
	return error;
}
    96019018:	2a1303e0 	mov	w0, w19
    9601901c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96019020:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96019024:	a94363f7 	ldp	x23, x24, [sp, #48]
    96019028:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601902c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96019030:	a8c97bfd 	ldp	x29, x30, [sp], #144
    96019034:	d65f03c0 	ret
	memset(context, 0x0, sizeof(struct tegrabl_ufs_context));
    96019038:	d2802f02 	mov	x2, #0x178                 	// #376
    9601903c:	52800001 	mov	w1, #0x0                   	// #0
    96019040:	aa0003f4 	mov	x20, x0
    96019044:	94004379 	bl	96029e28 <memset>
	tegrabl_ufs_get_params(0, ufs_params, &params);
    96019048:	52800000 	mov	w0, #0x0                   	// #0
    9601904c:	910223a2 	add	x2, x29, #0x88
    96019050:	aa1503e1 	mov	x1, x21
    96019054:	94000592 	bl	9601a69c <tegrabl_ufs_get_params>
	if (init_done) {
    96019058:	f94037a0 	ldr	x0, [x29, #104]
    9601905c:	396a2400 	ldrb	w0, [x0, #2697]
    96019060:	34000060 	cbz	w0, 9601906c <tegrabl_ufs_bdev_open+0xa0>
		context->init_done = 1UL;
    96019064:	52800020 	mov	w0, #0x1                   	// #1
    96019068:	b9003680 	str	w0, [x20, #52]
	error = tegrabl_ufs_init(params, context);
    9601906c:	f94047a0 	ldr	x0, [x29, #136]
    96019070:	aa1403e1 	mov	x1, x20
    96019074:	9400060d 	bl	9601a8a8 <tegrabl_ufs_init>
    96019078:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601907c:	340000a0 	cbz	w0, 96019090 <tegrabl_ufs_bdev_open+0xc4>
		pr_error("UFS initialization failed\n");
    96019080:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96019084:	912b9400 	add	x0, x0, #0xae5
			pr_error("Failed to register device region\n");
    96019088:	9400257a 	bl	96022670 <tegrabl_printf>
			goto fail;
    9601908c:	17ffffe3 	b	96019018 <tegrabl_ufs_bdev_open+0x4c>
	if (bdev_registration == false) {
    96019090:	b00002ba 	adrp	x26, 9606e000 <__bss_start>
    96019094:	396a2340 	ldrb	w0, [x26, #2696]
    96019098:	35000b00 	cbnz	w0, 960191f8 <tegrabl_ufs_bdev_open+0x22c>
	buffer = tegrabl_calloc(1, (TOTAL_UFS_LUNS * sizeof(struct ufs_priv_data)) +
    9601909c:	d2802601 	mov	x1, #0x130                 	// #304
    960190a0:	d2800020 	mov	x0, #0x1                   	// #1
	bnum_t block_count = 0;
    960190a4:	29107fbf 	stp	wzr, wzr, [x29, #128]
	buffer = tegrabl_calloc(1, (TOTAL_UFS_LUNS * sizeof(struct ufs_priv_data)) +
    960190a8:	94003687 	bl	96026ac4 <tegrabl_calloc>
    960190ac:	aa0003fc 	mov	x28, x0
	if (buffer == NULL) {
    960190b0:	b50000c0 	cbnz	x0, 960190c8 <tegrabl_ufs_bdev_open+0xfc>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960190b4:	52800073 	mov	w19, #0x3                   	// #3
    960190b8:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
			pr_error("Failed to register device region\n");
    960190bc:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960190c0:	912ca000 	add	x0, x0, #0xb28
    960190c4:	17fffff1 	b	96019088 <tegrabl_ufs_bdev_open+0xbc>
	boot_priv_data->lun_id = BOOT_LUN_ID;
    960190c8:	3900001f 	strb	wzr, [x0]
	error =  tegrabl_ufs_get_lun_capacity(boot_priv_data->lun_id, &block_size_log2, &block_count);
    960190cc:	910213a2 	add	x2, x29, #0x84
	boot_priv_data->context = (void *)context;
    960190d0:	f9000794 	str	x20, [x28, #8]
	error =  tegrabl_ufs_get_lun_capacity(boot_priv_data->lun_id, &block_size_log2, &block_count);
    960190d4:	910203a1 	add	x1, x29, #0x80
    960190d8:	52800000 	mov	w0, #0x0                   	// #0
    960190dc:	94000a27 	bl	9601b978 <tegrabl_ufs_get_lun_capacity>
	if (error != TEGRABL_NO_ERROR) {
    960190e0:	340000a0 	cbz	w0, 960190f4 <tegrabl_ufs_bdev_open+0x128>
    960190e4:	12005c00 	and	w0, w0, #0xffffff
    960190e8:	52ab4013 	mov	w19, #0x5a000000            	// #1509949440
    960190ec:	2a130013 	orr	w19, w0, w19
    960190f0:	17fffff3 	b	960190bc <tegrabl_ufs_bdev_open+0xf0>
	error = tegrabl_blockdev_initialize_bdev(
    960190f4:	29500fa2 	ldp	w2, w3, [x29, #128]
	ufs_boot_dev = (struct tegrabl_bdev *)(buffer + (TOTAL_UFS_LUNS * sizeof(struct ufs_priv_data)));
    960190f8:	9100839b 	add	x27, x28, #0x20
	error = tegrabl_blockdev_initialize_bdev(
    960190fc:	52a000e1 	mov	w1, #0x70000               	// #458752
    96019100:	aa1b03e0 	mov	x0, x27
    96019104:	94000c51 	bl	9601c248 <tegrabl_blockdev_initialize_bdev>
	if (error != TEGRABL_NO_ERROR) {
    96019108:	35fffee0 	cbnz	w0, 960190e4 <tegrabl_ufs_bdev_open+0x118>
	ufs_boot_dev->buf_align_size = TEGRABL_UFS_BUF_ALIGN_SIZE;
    9601910c:	52800100 	mov	w0, #0x8                   	// #8
    96019110:	b9002f60 	str	w0, [x27, #44]
	ufs_boot_dev->xfer = tegrabl_ufs_blockdev_xfer;
    96019114:	f0ffffe0 	adrp	x0, 96018000 <sdmmc_dll_caliberation+0x18>
    96019118:	91335000 	add	x0, x0, #0xcd4
	ufs_boot_dev->priv_data = (void *)boot_priv_data;
    9601911c:	f9001b7c 	str	x28, [x27, #48]
	ufs_boot_dev->read_block = tegrabl_ufs_bdev_read_block;
    96019120:	f0fffff9 	adrp	x25, 96018000 <sdmmc_dll_caliberation+0x18>
	ufs_boot_dev->xfer = tegrabl_ufs_blockdev_xfer;
    96019124:	f9002f60 	str	x0, [x27, #88]
	ufs_boot_dev->read_block = tegrabl_ufs_bdev_read_block;
    96019128:	913c0339 	add	x25, x25, #0xf00
	ufs_boot_dev->xfer = tegrabl_ufs_blockdev_xfer;
    9601912c:	f9003fa0 	str	x0, [x29, #120]
	ufs_boot_dev->write_block = tegrabl_ufs_bdev_write_block;
    96019130:	f0fffff8 	adrp	x24, 96018000 <sdmmc_dll_caliberation+0x18>
	ufs_boot_dev->erase = tegrabl_ufs_bdev_erase;
    96019134:	f0fffff7 	adrp	x23, 96018000 <sdmmc_dll_caliberation+0x18>
	ufs_boot_dev->write_block = tegrabl_ufs_bdev_write_block;
    96019138:	9138d318 	add	x24, x24, #0xe34
	ufs_boot_dev->erase = tegrabl_ufs_bdev_erase;
    9601913c:	9137b2f7 	add	x23, x23, #0xdec
	ufs_boot_dev->write_block = tegrabl_ufs_bdev_write_block;
    96019140:	a904e379 	stp	x25, x24, [x27, #72]
	ufs_boot_dev->erase = tegrabl_ufs_bdev_erase;
    96019144:	f9003777 	str	x23, [x27, #104]
	ufs_boot_dev->close = tegrabl_ufs_bdev_close;
    96019148:	f0fffff6 	adrp	x22, 96018000 <sdmmc_dll_caliberation+0x18>
	ufs_boot_dev->ioctl = tegrabl_ufs_bdev_ioctl;
    9601914c:	f0fffff5 	adrp	x21, 96018000 <sdmmc_dll_caliberation+0x18>
	ufs_boot_dev->close = tegrabl_ufs_bdev_close;
    96019150:	9136e2d6 	add	x22, x22, #0xdb8
	ufs_boot_dev->ioctl = tegrabl_ufs_bdev_ioctl;
    96019154:	913632b5 	add	x21, x21, #0xd8c
	ufs_boot_dev->xfer_wait = tegrabl_ufs_blockdev_xfer_wait;
    96019158:	f0ffffe0 	adrp	x0, 96018000 <sdmmc_dll_caliberation+0x18>
	ufs_boot_dev->close = tegrabl_ufs_bdev_close;
    9601915c:	a907db75 	stp	x21, x22, [x27, #120]
	ufs_boot_dev->xfer_wait = tegrabl_ufs_blockdev_xfer_wait;
    96019160:	912e6000 	add	x0, x0, #0xb98
    96019164:	f9003360 	str	x0, [x27, #96]
    96019168:	f9003ba0 	str	x0, [x29, #112]
	error = tegrabl_blockdev_register_device(ufs_boot_dev);
    9601916c:	aa1b03e0 	mov	x0, x27
    96019170:	94000c5a 	bl	9601c2d8 <tegrabl_blockdev_register_device>
	user_priv_data->lun_id = USER_LUN_ID;
    96019174:	5280003b 	mov	w27, #0x1                   	// #1
	pr_info("registered UFS Boot Area success\n");
    96019178:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601917c:	912c0c00 	add	x0, x0, #0xb03
    96019180:	9400253c 	bl	96022670 <tegrabl_printf>
	block_count = 0;
    96019184:	29107fbf 	stp	wzr, wzr, [x29, #128]
	user_priv_data->lun_id = USER_LUN_ID;
    96019188:	3900439b 	strb	w27, [x28, #16]
	error =  tegrabl_ufs_get_lun_capacity(boot_priv_data->lun_id, &block_size_log2, &block_count);
    9601918c:	910213a2 	add	x2, x29, #0x84
    96019190:	39400380 	ldrb	w0, [x28]
    96019194:	910203a1 	add	x1, x29, #0x80
	user_priv_data->context = (void *)context;
    96019198:	f9000f94 	str	x20, [x28, #24]
	error =  tegrabl_ufs_get_lun_capacity(boot_priv_data->lun_id, &block_size_log2, &block_count);
    9601919c:	940009f7 	bl	9601b978 <tegrabl_ufs_get_lun_capacity>
	if (error != TEGRABL_NO_ERROR) {
    960191a0:	35fffa20 	cbnz	w0, 960190e4 <tegrabl_ufs_bdev_open+0x118>
	error = tegrabl_blockdev_initialize_bdev(
    960191a4:	29500fa2 	ldp	w2, w3, [x29, #128]
	user_dev = (struct tegrabl_bdev *)(buffer + (TOTAL_UFS_LUNS * sizeof(struct ufs_priv_data)) +
    960191a8:	9102a394 	add	x20, x28, #0xa8
	error = tegrabl_blockdev_initialize_bdev(
    960191ac:	52a00101 	mov	w1, #0x80000               	// #524288
    960191b0:	aa1403e0 	mov	x0, x20
    960191b4:	94000c25 	bl	9601c248 <tegrabl_blockdev_initialize_bdev>
	if (error != TEGRABL_NO_ERROR) {
    960191b8:	35fff960 	cbnz	w0, 960190e4 <tegrabl_ufs_bdev_open+0x118>
	user_dev->buf_align_size = TEGRABL_UFS_BUF_ALIGN_SIZE;
    960191bc:	52800100 	mov	w0, #0x8                   	// #8
    960191c0:	b9002e80 	str	w0, [x20, #44]
	user_dev->xfer = tegrabl_ufs_blockdev_xfer;
    960191c4:	f9403fa0 	ldr	x0, [x29, #120]
	user_priv_data = (struct ufs_priv_data *)(buffer + sizeof(struct ufs_priv_data));
    960191c8:	91004384 	add	x4, x28, #0x10
	user_dev->xfer = tegrabl_ufs_blockdev_xfer;
    960191cc:	f9002e80 	str	x0, [x20, #88]
	user_dev->xfer_wait = tegrabl_ufs_blockdev_xfer_wait;
    960191d0:	f9403ba0 	ldr	x0, [x29, #112]
	user_dev->priv_data = (void *)user_priv_data;
    960191d4:	f9001a84 	str	x4, [x20, #48]
	user_dev->write_block = tegrabl_ufs_bdev_write_block;
    960191d8:	a904e299 	stp	x25, x24, [x20, #72]
	user_dev->xfer_wait = tegrabl_ufs_blockdev_xfer_wait;
    960191dc:	f9003280 	str	x0, [x20, #96]
	error = tegrabl_blockdev_register_device(user_dev);
    960191e0:	aa1403e0 	mov	x0, x20
	user_dev->erase = tegrabl_ufs_bdev_erase;
    960191e4:	f9003697 	str	x23, [x20, #104]
	user_dev->close = tegrabl_ufs_bdev_close;
    960191e8:	a907da95 	stp	x21, x22, [x20, #120]
	error = tegrabl_blockdev_register_device(user_dev);
    960191ec:	94000c3b 	bl	9601c2d8 <tegrabl_blockdev_register_device>
	if (error != TEGRABL_NO_ERROR) {
    960191f0:	350000c0 	cbnz	w0, 96019208 <tegrabl_ufs_bdev_open+0x23c>
	bdev_registration = true;
    960191f4:	392a235b 	strb	w27, [x26, #2696]
	init_done = true;
    960191f8:	f94037a1 	ldr	x1, [x29, #104]
    960191fc:	52800020 	mov	w0, #0x1                   	// #1
    96019200:	392a2420 	strb	w0, [x1, #2697]
	return error;
    96019204:	17ffff85 	b	96019018 <tegrabl_ufs_bdev_open+0x4c>
    96019208:	12005c00 	and	w0, w0, #0xffffff
    9601920c:	52ab4013 	mov	w19, #0x5a000000            	// #1509949440
	bdev_registration = true;
    96019210:	392a235b 	strb	w27, [x26, #2696]
    96019214:	2a130013 	orr	w19, w0, w19
    96019218:	17ffffa9 	b	960190bc <tegrabl_ufs_bdev_open+0xf0>

000000009601921c <tegrabl_ufs_link_mphy_setup>:
	if (e != TEGRABL_NO_ERROR) {
		return e;
	}
#endif
	/*Update HS_G1 Sync Length MPHY_RX_APB_CAPABILITY_88_8B_0*/
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    9601921c:	d2801101 	mov	x1, #0x88                  	// #136
{
    96019220:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    96019224:	f2a048e1 	movk	x1, #0x247, lsl #16
    96019228:	1287e7e2 	mov	w2, #0xffffc0c0            	// #-16192
{
    9601922c:	910003fd 	mov	x29, sp
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    96019230:	b9400020 	ldr	w0, [x1]
    96019234:	529fff03 	mov	w3, #0xfff8                	// #65528
{
    96019238:	a90153f3 	stp	x19, x20, [sp, #16]
    9601923c:	72bffe03 	movk	w3, #0xfff0, lsl #16
    96019240:	f90013f5 	str	x21, [sp, #32]
			MPHY_RX_APB_CAPABILITY_88_8B_0);
	reg_data &= ~RX_HS_G1_SYNC_LENGTH_CAPABILITY(~0UL);
    96019244:	12026400 	and	w0, w0, #0xc0ffffff
	reg_data |= RX_HS_G1_SYNC_LENGTH_CAPABILITY(RX_HS_SYNC_LENGTH);
    96019248:	32080c00 	orr	w0, w0, #0xf000000

	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    9601924c:	b9000020 	str	w0, [x1]
		MPHY_RX_APB_CAPABILITY_88_8B_0, reg_data);

	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE +
    96019250:	91404021 	add	x1, x1, #0x10, lsl #12
			RX_ADVANCED_FINE_GRANULARITY_CAPABILITY,
			0x0, reg_data);
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE +
		MPHY_RX_APB_CAPABILITY_98_9B_0, reg_data);

        data = 0x0;
    96019254:	910103b4 	add	x20, x29, #0x40
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE +
    96019258:	b9000020 	str	w0, [x1]
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    9601925c:	d2801281 	mov	x1, #0x94                  	// #148
    96019260:	f2a048e1 	movk	x1, #0x247, lsl #16
    96019264:	b9400020 	ldr	w0, [x1]
    96019268:	0a020000 	and	w0, w0, w2
	reg_data |= RX_HS_G3_SYNC_LENGTH_CAPABILITY(RX_HS_SYNC_LENGTH);
    9601926c:	5281e1e2 	mov	w2, #0xf0f                 	// #3855
    96019270:	2a020000 	orr	w0, w0, w2
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    96019274:	b9000020 	str	w0, [x1]
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE +
    96019278:	91404021 	add	x1, x1, #0x10, lsl #12
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, CAPABILITY_8C_8F,
    9601927c:	52a0a002 	mov	w2, #0x5000000             	// #83886080
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE +
    96019280:	b9000020 	str	w0, [x1]
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    96019284:	d2801180 	mov	x0, #0x8c                  	// #140
    96019288:	f2a048e0 	movk	x0, #0x247, lsl #16
    9601928c:	b9400001 	ldr	w1, [x0]
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, CAPABILITY_8C_8F,
    96019290:	12046c21 	and	w1, w1, #0xf0ffffff
    96019294:	2a020021 	orr	w1, w1, w2
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    96019298:	b9000001 	str	w1, [x0]
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L1_BASE +
    9601929c:	d2801181 	mov	x1, #0x8c                  	// #140
    960192a0:	f2a04901 	movk	x1, #0x248, lsl #16
    960192a4:	b9400020 	ldr	w0, [x1]
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, CAPABILITY_8C_8F,
    960192a8:	12046c00 	and	w0, w0, #0xf0ffffff
    960192ac:	2a020000 	orr	w0, w0, w2
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE +
    960192b0:	b9000020 	str	w0, [x1]
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    960192b4:	d2801300 	mov	x0, #0x98                  	// #152
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, CAPABILITY_98_9B,
    960192b8:	52a00142 	mov	w2, #0xa0000               	// #655360
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    960192bc:	f2a048e0 	movk	x0, #0x247, lsl #16
    960192c0:	b9400001 	ldr	w1, [x0]
    960192c4:	0a030021 	and	w1, w1, w3
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, CAPABILITY_98_9B,
    960192c8:	2a020021 	orr	w1, w1, w2
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    960192cc:	b9000001 	str	w1, [x0]
	reg_data =
    960192d0:	d2801301 	mov	x1, #0x98                  	// #152
    960192d4:	f2a04901 	movk	x1, #0x248, lsl #16
    960192d8:	b9400020 	ldr	w0, [x1]
    960192dc:	0a030000 	and	w0, w0, w3
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, CAPABILITY_98_9B,
    960192e0:	2a020000 	orr	w0, w0, w2
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE +
    960192e4:	b9000020 	str	w0, [x1]
        data = 0x0;
    960192e8:	b81fce9f 	str	wzr, [x20, #-4]!
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_local_tx_lcc_enable, &data);
    960192ec:	5282abc2 	mov	w2, #0x155e                	// #5470
    960192f0:	52800001 	mov	w1, #0x0                   	// #0
    960192f4:	52800040 	mov	w0, #0x2                   	// #2
    960192f8:	aa1403e3 	mov	x3, x20
    960192fc:	940000b4 	bl	960195cc <tegrabl_ufs_set_dme_command>
	if (e != TEGRABL_NO_ERROR) {
    96019300:	34000140 	cbz	w0, 96019328 <tegrabl_ufs_link_mphy_setup+0x10c>
    96019304:	2a0003f3 	mov	w19, w0
		pr_error("Setting pa_local_tx_lcc_enable failed\n");
    96019308:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601930c:	912d3400 	add	x0, x0, #0xb4d
	*/
	data = 0x0;
	e = tegrabl_ufs_set_dme_command(DME_SET, 0,
		vs_txburstclosuredelay, &data);
	if (e != TEGRABL_NO_ERROR) {
		pr_error("setting burst closure delay failed\n");
    96019310:	940024d8 	bl	96022670 <tegrabl_printf>

	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0, reg_data);
	tegrabl_mdelay(10);

	return TEGRABL_NO_ERROR;
}
    96019314:	2a1303e0 	mov	w0, w19
    96019318:	f94013f5 	ldr	x21, [sp, #32]
    9601931c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96019320:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96019324:	d65f03c0 	ret
	e = tegrabl_ufs_set_dme_command(DME_SET, 0,
    96019328:	aa1403e3 	mov	x3, x20
    9601932c:	1285ef62 	mov	w2, #0xffffd084            	// #-12156
    96019330:	52800001 	mov	w1, #0x0                   	// #0
    96019334:	52800040 	mov	w0, #0x2                   	// #2
	data = 0x0;
    96019338:	b9003fbf 	str	wzr, [x29, #60]
	e = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601933c:	940000a4 	bl	960195cc <tegrabl_ufs_set_dme_command>
    96019340:	2a0003f3 	mov	w19, w0
	if (e != TEGRABL_NO_ERROR) {
    96019344:	34000080 	cbz	w0, 96019354 <tegrabl_ufs_link_mphy_setup+0x138>
		pr_error("setting burst closure delay failed\n");
    96019348:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601934c:	912ddc00 	add	x0, x0, #0xb77
    96019350:	17fffff0 	b	96019310 <tegrabl_ufs_link_mphy_setup+0xf4>
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE + MPHY_RX_APB_VENDOR2_0);
    96019354:	d2803081 	mov	x1, #0x184                 	// #388
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0);
    96019358:	d2803095 	mov	x21, #0x184                 	// #388
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE + MPHY_RX_APB_VENDOR2_0);
    9601935c:	f2a048e1 	movk	x1, #0x247, lsl #16
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0);
    96019360:	f2a04915 	movk	x21, #0x248, lsl #16
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE + MPHY_RX_APB_VENDOR2_0);
    96019364:	b9400020 	ldr	w0, [x1]
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, VENDOR2, REGS_UPDATE,
    96019368:	32000000 	orr	w0, w0, #0x1
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L0_BASE + MPHY_RX_APB_VENDOR2_0, reg_data);
    9601936c:	b9000020 	str	w0, [x1]
	tegrabl_mdelay(10);
    96019370:	d2800140 	mov	x0, #0xa                   	// #10
    96019374:	94001a69 	bl	9601fd18 <tegrabl_mdelay>
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0);
    96019378:	b94002a0 	ldr	w0, [x21]
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, VENDOR2,
    9601937c:	32000000 	orr	w0, w0, #0x1
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0, reg_data);
    96019380:	b90002a0 	str	w0, [x21]
	tegrabl_mdelay(10);
    96019384:	d2800140 	mov	x0, #0xa                   	// #10
    96019388:	94001a64 	bl	9601fd18 <tegrabl_mdelay>
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0);
    9601938c:	b94002a0 	ldr	w0, [x21]
        data = 0x0;
    96019390:	b9003fbf 	str	wzr, [x29, #60]
	reg_data = UFS_READ32(HCS);
    96019394:	d2800600 	mov	x0, #0x30                  	// #48
    96019398:	f2a048a0 	movk	x0, #0x245, lsl #16
    9601939c:	b9400000 	ldr	w0, [x0]
	if ((reg_data != 0x0000000fUL)  && (reg_data != 0x0000010fUL)) {
    960193a0:	12177800 	and	w0, w0, #0xfffffeff
    960193a4:	71003c1f 	cmp	w0, #0xf
    960193a8:	540001a0 	b.eq	960193dc <tegrabl_ufs_link_mphy_setup+0x1c0>  // b.none
		e = tegrabl_ufs_set_dme_command(DME_LINKSTARTUP, 0, 0, &data);
    960193ac:	aa1403e3 	mov	x3, x20
    960193b0:	52800002 	mov	w2, #0x0                   	// #0
    960193b4:	52800001 	mov	w1, #0x0                   	// #0
    960193b8:	528002c0 	mov	w0, #0x16                  	// #22
    960193bc:	94000084 	bl	960195cc <tegrabl_ufs_set_dme_command>
    960193c0:	2a0003f4 	mov	w20, w0
		if (e != TEGRABL_NO_ERROR) {
    960193c4:	340000c0 	cbz	w0, 960193dc <tegrabl_ufs_link_mphy_setup+0x1c0>
			pr_error("Link startup dme_set failed\n");
    960193c8:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
			return e;
    960193cc:	2a1403f3 	mov	w19, w20
			pr_error("Link startup dme_set failed\n");
    960193d0:	912e7800 	add	x0, x0, #0xb9e
    960193d4:	940024a7 	bl	96022670 <tegrabl_printf>
			return e;
    960193d8:	17ffffcf 	b	96019314 <tegrabl_ufs_link_mphy_setup+0xf8>
		reg_data = UFS_READ32(HCS);
    960193dc:	d2800601 	mov	x1, #0x30                  	// #48
	reg_data = 0;
    960193e0:	52800000 	mov	w0, #0x0                   	// #0
		reg_data = UFS_READ32(HCS);
    960193e4:	f2a048a1 	movk	x1, #0x245, lsl #16
	while ((reg_data != 0x0000000fUL)  && (reg_data != 0x0000010fUL)) {
    960193e8:	12177800 	and	w0, w0, #0xfffffeff
    960193ec:	71003c1f 	cmp	w0, #0xf
    960193f0:	54000201 	b.ne	96019430 <tegrabl_ufs_link_mphy_setup+0x214>  // b.any
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    960193f4:	d2803081 	mov	x1, #0x184                 	// #388
    960193f8:	f2a048e1 	movk	x1, #0x247, lsl #16
    960193fc:	b9400020 	ldr	w0, [x1]
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, VENDOR2, RX_CAL_EN,
    96019400:	32110000 	orr	w0, w0, #0x8000
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L0_BASE +
    96019404:	b9000020 	str	w0, [x1]
	tegrabl_mdelay(10);
    96019408:	d2800140 	mov	x0, #0xa                   	// #10
    9601940c:	94001a43 	bl	9601fd18 <tegrabl_mdelay>
	reg_data = NV_READ32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0);
    96019410:	d2803081 	mov	x1, #0x184                 	// #388
    96019414:	f2a04901 	movk	x1, #0x248, lsl #16
    96019418:	b9400020 	ldr	w0, [x1]
	reg_data = NV_FLD_SET_DRF_NUM(MPHY_RX_APB, VENDOR2,
    9601941c:	32110000 	orr	w0, w0, #0x8000
	NV_WRITE32(NV_ADDRESS_MAP_MPHY_L1_BASE + MPHY_RX_APB_VENDOR2_0, reg_data);
    96019420:	b9000020 	str	w0, [x1]
	tegrabl_mdelay(10);
    96019424:	d2800140 	mov	x0, #0xa                   	// #10
    96019428:	94001a3c 	bl	9601fd18 <tegrabl_mdelay>
	return TEGRABL_NO_ERROR;
    9601942c:	17ffffba 	b	96019314 <tegrabl_ufs_link_mphy_setup+0xf8>
		reg_data = UFS_READ32(HCS);
    96019430:	b9400020 	ldr	w0, [x1]
    96019434:	17ffffed 	b	960193e8 <tegrabl_ufs_link_mphy_setup+0x1cc>

0000000096019438 <tegrabl_ufs_link_uphy_deinit>:
}

void tegrabl_ufs_link_uphy_deinit(uint32_t num_lanes)
{
	TEGRABL_UNUSED(num_lanes);
}
    96019438:	d65f03c0 	ret

000000009601943c <tegrabl_ufs_uphy_clk_disable_reset_enable>:
    9601943c:	d65f03c0 	ret

0000000096019440 <tegrabl_clear_err_regs>:
}

static void tegrabl_clear_err_regs(void)
{
	/* Clear any pending interrupts - write to clear */
	UFS_WRITE32(IS, 0xFFFFFFFFU);
    96019440:	d2800400 	mov	x0, #0x20                  	// #32
    96019444:	12800001 	mov	w1, #0xffffffff            	// #-1
    96019448:	f2a048a0 	movk	x0, #0x245, lsl #16

	/* Clear read to clear registers */
	NV_READ32(UECPA);
    9601944c:	91006000 	add	x0, x0, #0x18
	UFS_WRITE32(IS, 0xFFFFFFFFU);
    96019450:	b81e8001 	stur	w1, [x0, #-24]
	NV_READ32(UECPA);
    96019454:	b9400000 	ldr	w0, [x0]
	NV_READ32(UECDL);
    96019458:	d2800780 	mov	x0, #0x3c                  	// #60
    9601945c:	f2a048a0 	movk	x0, #0x245, lsl #16
    96019460:	b9400000 	ldr	w0, [x0]
	NV_READ32(UECN);
    96019464:	d2800800 	mov	x0, #0x40                  	// #64
    96019468:	f2a048a0 	movk	x0, #0x245, lsl #16
    9601946c:	b9400000 	ldr	w0, [x0]
	NV_READ32(UECT);
    96019470:	d2800880 	mov	x0, #0x44                  	// #68
    96019474:	f2a048a0 	movk	x0, #0x245, lsl #16
    96019478:	b9400000 	ldr	w0, [x0]
	NV_READ32(UECDME);
    9601947c:	d2800900 	mov	x0, #0x48                  	// #72
    96019480:	f2a048a0 	movk	x0, #0x245, lsl #16
    96019484:	b9400000 	ldr	w0, [x0]
}
    96019488:	d65f03c0 	ret

000000009601948c <tegrabl_ufs_get_tx_rx_descriptor>:
tegrabl_error_t tegrabl_ufs_get_tx_rx_descriptor(uint32_t *ptrd_index)
{
	uint32_t trd_index;
	uint32_t reg_data;

	if (pufs_context->tx_req_des_in_use < MAX_TRD_NUM) {
    9601948c:	b00002a1 	adrp	x1, 9606e000 <__bss_start>
    96019490:	f9455422 	ldr	x2, [x1, #2728]
    96019494:	b9404441 	ldr	w1, [x2, #68]
    96019498:	71002c3f 	cmp	w1, #0xb
    9601949c:	540003e8 	b.hi	96019518 <tegrabl_ufs_get_tx_rx_descriptor+0x8c>  // b.pmore
{
    960194a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		trd_index = NEXT_TRD_IDX(pufs_context->last_trd_index);
		reg_data = UFS_READ32(UTRLDBR);
    960194a4:	d2800b01 	mov	x1, #0x58                  	// #88
    960194a8:	f2a048a1 	movk	x1, #0x245, lsl #16
{
    960194ac:	910003fd 	mov	x29, sp
		reg_data = UFS_READ32(UTRLDBR);
    960194b0:	b9400021 	ldr	w1, [x1]
{
    960194b4:	f9000bf3 	str	x19, [sp, #16]
		trd_index = NEXT_TRD_IDX(pufs_context->last_trd_index);
    960194b8:	b9404853 	ldr	w19, [x2, #72]
		if ((reg_data & (1UL << trd_index)) != 0U) {
    960194bc:	2a0103e3 	mov	w3, w1
		trd_index = NEXT_TRD_IDX(pufs_context->last_trd_index);
    960194c0:	71002e7f 	cmp	w19, #0xb
    960194c4:	1a9307f3 	csinc	w19, wzr, w19, eq  // eq = none
		if ((reg_data & (1UL << trd_index)) != 0U) {
    960194c8:	9ad32463 	lsr	x3, x3, x19
    960194cc:	360001a3 	tbz	w3, #0, 96019500 <tegrabl_ufs_get_tx_rx_descriptor+0x74>
			pr_error("reg data is %0x\n", reg_data);
    960194d0:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960194d4:	9135ac00 	add	x0, x0, #0xd6b
    960194d8:	94002466 	bl	96022670 <tegrabl_printf>
			pr_error("trd index is %0x\n", trd_index);
    960194dc:	2a1303e1 	mov	w1, w19
    960194e0:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    960194e4:	9135fc00 	add	x0, x0, #0xd7f
    960194e8:	94002462 	bl	96022670 <tegrabl_printf>
			return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 0U);
    960194ec:	52800560 	mov	w0, #0x2b                  	// #43
    960194f0:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
		pufs_context->tx_req_des_in_use++;
		return TEGRABL_NO_ERROR;
	} else {
		return TEGRABL_ERROR(TEGRABL_ERR_NO_RESOURCE, 1U);
	}
}
    960194f4:	f9400bf3 	ldr	x19, [sp, #16]
    960194f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960194fc:	d65f03c0 	ret
		*ptrd_index = trd_index;
    96019500:	b9000013 	str	w19, [x0]
		pufs_context->tx_req_des_in_use++;
    96019504:	b9404440 	ldr	w0, [x2, #68]
    96019508:	11000400 	add	w0, w0, #0x1
		pufs_context->last_trd_index = trd_index;
    9601950c:	2908cc40 	stp	w0, w19, [x2, #68]
		return TEGRABL_NO_ERROR;
    96019510:	52800000 	mov	w0, #0x0                   	// #0
    96019514:	17fffff8 	b	960194f4 <tegrabl_ufs_get_tx_rx_descriptor+0x68>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_RESOURCE, 1U);
    96019518:	528024e0 	mov	w0, #0x127                 	// #295
    9601951c:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96019520:	d65f03c0 	ret

0000000096019524 <tegrabl_ufs_get_cmd_descriptor>:
	if (pufs_context->cmd_desc_in_use < MAX_CMD_DESC_NUM) {
    96019524:	b00002a1 	adrp	x1, 9606e000 <__bss_start>
    96019528:	f9455421 	ldr	x1, [x1, #2728]
    9601952c:	b9403c22 	ldr	w2, [x1, #60]
    96019530:	71001c5f 	cmp	w2, #0x7
    96019534:	54000168 	b.hi	96019560 <tegrabl_ufs_get_cmd_descriptor+0x3c>  // b.pmore
			NEXT_CD_IDX(pufs_context->last_cmd_desc_index);
    96019538:	b9404022 	ldr	w2, [x1, #64]
    9601953c:	71001c5f 	cmp	w2, #0x7
    96019540:	1a8207e2 	csinc	w2, wzr, w2, eq  // eq = none
		pufs_context->last_cmd_desc_index = next_cmd_index;
    96019544:	b9004022 	str	w2, [x1, #64]
		*cmd_desc_index = next_cmd_index;
    96019548:	b9000002 	str	w2, [x0]
		pufs_context->cmd_desc_in_use++;
    9601954c:	b9403c20 	ldr	w0, [x1, #60]
    96019550:	11000400 	add	w0, w0, #0x1
    96019554:	b9003c20 	str	w0, [x1, #60]
		return TEGRABL_NO_ERROR;
    96019558:	52800000 	mov	w0, #0x0                   	// #0
}
    9601955c:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_NO_RESOURCE, 0U);
    96019560:	528004e0 	mov	w0, #0x27                  	// #39
    96019564:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
    96019568:	17fffffd 	b	9601955c <tegrabl_ufs_get_cmd_descriptor+0x38>

000000009601956c <tegrabl_ufs_pollfield>:
{
    9601956c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96019570:	910003fd 	mov	x29, sp
    96019574:	a90153f3 	stp	x19, x20, [sp, #16]
    96019578:	2a0303f3 	mov	w19, w3
    9601957c:	a9025bf5 	stp	x21, x22, [sp, #32]
		reg_data = NV_READ32(reg_addr);
    96019580:	2a0003f4 	mov	w20, w0
{
    96019584:	2a0103f5 	mov	w21, w1
    96019588:	2a0203f6 	mov	w22, w2
		reg_data = NV_READ32(reg_addr);
    9601958c:	b9400280 	ldr	w0, [x20]
		if ((reg_data & mask) == expected_value) {
    96019590:	0a150000 	and	w0, w0, w21
    96019594:	6b16001f 	cmp	w0, w22
    96019598:	54000160 	b.eq	960195c4 <tegrabl_ufs_pollfield+0x58>  // b.none
		tegrabl_udelay(1);
    9601959c:	d2800020 	mov	x0, #0x1                   	// #1
    960195a0:	940019c1 	bl	9601fca4 <tegrabl_udelay>
	} while (timeout != 0U);
    960195a4:	71000673 	subs	w19, w19, #0x1
    960195a8:	54ffff21 	b.ne	9601958c <tegrabl_ufs_pollfield+0x20>  // b.any
	return TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 0U);
    960195ac:	528000c0 	mov	w0, #0x6                   	// #6
    960195b0:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    960195b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960195b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960195bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960195c0:	d65f03c0 	ret
			return TEGRABL_NO_ERROR;
    960195c4:	52800000 	mov	w0, #0x0                   	// #0
    960195c8:	17fffffb 	b	960195b4 <tegrabl_ufs_pollfield+0x48>

00000000960195cc <tegrabl_ufs_set_dme_command>:
{
    960195cc:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960195d0:	910003fd 	mov	x29, sp
    960195d4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960195d8:	aa0303f5 	mov	x21, x3
    960195dc:	a90153f3 	stp	x19, x20, [sp, #16]
    960195e0:	12001c16 	and	w22, w0, #0xff
    960195e4:	12003c33 	and	w19, w1, #0xffff
    960195e8:	12003c54 	and	w20, w2, #0xffff
	memset((void *)pdme_cmd, 0, sizeof(struct dme_cmd));
    960195ec:	52800001 	mov	w1, #0x0                   	// #0
    960195f0:	d2800202 	mov	x2, #0x10                  	// #16
    960195f4:	9100c3a0 	add	x0, x29, #0x30
    960195f8:	9400420c 	bl	96029e28 <memset>
	pdme_cmd->read_write_value = *data;
    960195fc:	b94002a0 	ldr	w0, [x21]
	pdme_cmd->uic_cmd_arg1.gen_selector_index = gen_sel_idx;
    96019600:	79006bb3 	strh	w19, [x29, #52]
	pdme_cmd->uic_cmd_arg1.mib_attribute = mib_attr;
    96019604:	79006fb4 	strh	w20, [x29, #54]
	pdme_cmd->read_write_value = *data;
    96019608:	b9003fa0 	str	w0, [x29, #60]
	UFS_WRITE32(UICCMDARG1, pdme_cmd->uic_cmd_arg1.dw);
    9601960c:	d2801280 	mov	x0, #0x94                  	// #148
    96019610:	f2a048a0 	movk	x0, #0x245, lsl #16
	pdme_cmd->uic_cmd.cmdop = cmd_op;
    96019614:	3900c3b6 	strb	w22, [x29, #48]
	UFS_WRITE32(UICCMDARG1, pdme_cmd->uic_cmd_arg1.dw);
    96019618:	b94037a1 	ldr	w1, [x29, #52]
    9601961c:	b9000001 	str	w1, [x0]
	if (pdme_cmd->uic_cmd.cmdop == DME_SET ||
    96019620:	3940c3a0 	ldrb	w0, [x29, #48]
    96019624:	7100081f 	cmp	w0, #0x2
    96019628:	7a441804 	ccmp	w0, #0x4, #0x4, ne  // ne = any
    9601962c:	540000e1 	b.ne	96019648 <tegrabl_ufs_set_dme_command+0x7c>  // b.any
		UFS_WRITE32(UICCMDARG2, pdme_cmd->uic_cmd_arg2.dw);
    96019630:	d2801300 	mov	x0, #0x98                  	// #152
    96019634:	b9403ba1 	ldr	w1, [x29, #56]
    96019638:	f2a048a0 	movk	x0, #0x245, lsl #16
    9601963c:	b9000001 	str	w1, [x0]
		UFS_WRITE32(UICCMDARG3, pdme_cmd->read_write_value);
    96019640:	b9403fa1 	ldr	w1, [x29, #60]
    96019644:	b9000401 	str	w1, [x0, #4]
	UFS_WRITE32(UICCMD, pdme_cmd->uic_cmd.dw);
    96019648:	d2801200 	mov	x0, #0x90                  	// #144
    9601964c:	b94033a1 	ldr	w1, [x29, #48]
    96019650:	f2a048a0 	movk	x0, #0x245, lsl #16
		error = tegrabl_ufs_pollfield(IS,
    96019654:	52942403 	mov	w3, #0xa120                	// #41248
    96019658:	72a000e3 	movk	w3, #0x7, lsl #16
	UFS_WRITE32(UICCMD, pdme_cmd->uic_cmd.dw);
    9601965c:	b9000001 	str	w1, [x0]
	if ((mib_attr == pa_pwr_mode) && (pdme_cmd->uic_cmd.cmdop == DME_SET)) {
    96019660:	5282ae20 	mov	w0, #0x1571                	// #5489
    96019664:	6b00029f 	cmp	w20, w0
    96019668:	54000321 	b.ne	960196cc <tegrabl_ufs_set_dme_command+0x100>  // b.any
    9601966c:	3940c3a0 	ldrb	w0, [x29, #48]
    96019670:	7100081f 	cmp	w0, #0x2
    96019674:	540002c1 	b.ne	960196cc <tegrabl_ufs_set_dme_command+0x100>  // b.any
		error = tegrabl_ufs_pollfield(IS,
    96019678:	52800400 	mov	w0, #0x20                  	// #32
    9601967c:	52800202 	mov	w2, #0x10                  	// #16
    96019680:	72a048a0 	movk	w0, #0x245, lsl #16
    96019684:	2a0203e1 	mov	w1, w2
    96019688:	97ffffb9 	bl	9601956c <tegrabl_ufs_pollfield>
    9601968c:	2a0003f3 	mov	w19, w0
		pdme_cmd->read_write_value = UFS_READ32(HCS);
    96019690:	d2800600 	mov	x0, #0x30                  	// #48
    96019694:	f2a048a0 	movk	x0, #0x245, lsl #16
    96019698:	b9400000 	ldr	w0, [x0]
    9601969c:	b9003fa0 	str	w0, [x29, #60]
	if (error != TEGRABL_NO_ERROR) {
    960196a0:	34000253 	cbz	w19, 960196e8 <tegrabl_ufs_set_dme_command+0x11c>
		pr_error("UPMS or UCCS was not set for attr 0x%x set/get %d\n",
    960196a4:	f0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    960196a8:	2a1603e2 	mov	w2, w22
    960196ac:	2a1403e1 	mov	w1, w20
    960196b0:	91051c00 	add	x0, x0, #0x147
    960196b4:	940023ef 	bl	96022670 <tegrabl_printf>
}
    960196b8:	2a1303e0 	mov	w0, w19
    960196bc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960196c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960196c4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960196c8:	d65f03c0 	ret
		error = tegrabl_ufs_pollfield(IS,
    960196cc:	52800400 	mov	w0, #0x20                  	// #32
    960196d0:	52808002 	mov	w2, #0x400                 	// #1024
    960196d4:	72a048a0 	movk	w0, #0x245, lsl #16
    960196d8:	2a0203e1 	mov	w1, w2
    960196dc:	97ffffa4 	bl	9601956c <tegrabl_ufs_pollfield>
    960196e0:	2a0003f3 	mov	w19, w0
    960196e4:	17ffffef 	b	960196a0 <tegrabl_ufs_set_dme_command+0xd4>
	if ((pdme_cmd->uic_cmd.cmdop == DME_HIBERNATE_ENTER) ||
    960196e8:	3940c3a1 	ldrb	w1, [x29, #48]
    960196ec:	51005c20 	sub	w0, w1, #0x17
    960196f0:	12001c00 	and	w0, w0, #0xff
    960196f4:	7100041f 	cmp	w0, #0x1
    960196f8:	54000288 	b.hi	96019748 <tegrabl_ufs_set_dme_command+0x17c>  // b.pmore
			error = tegrabl_ufs_pollfield(IS, SHIFT_MASK(IS_UHES),
    960196fc:	52942403 	mov	w3, #0xa120                	// #41248
		if ((pdme_cmd->uic_cmd.cmdop == DME_HIBERNATE_ENTER)) {
    96019700:	71005c3f 	cmp	w1, #0x17
			error = tegrabl_ufs_pollfield(IS, SHIFT_MASK(IS_UHES),
    96019704:	72a000e3 	movk	w3, #0x7, lsl #16
		if ((pdme_cmd->uic_cmd.cmdop == DME_HIBERNATE_ENTER)) {
    96019708:	54000181 	b.ne	96019738 <tegrabl_ufs_set_dme_command+0x16c>  // b.any
			error = tegrabl_ufs_pollfield(IS, SHIFT_MASK(IS_UHES),
    9601970c:	52800802 	mov	w2, #0x40                  	// #64
    96019710:	2a0203e1 	mov	w1, w2
    96019714:	52800400 	mov	w0, #0x20                  	// #32
			error = tegrabl_ufs_pollfield(IS, SHIFT_MASK(IS_UHXS),
    96019718:	72a048a0 	movk	w0, #0x245, lsl #16
    9601971c:	97ffff94 	bl	9601956c <tegrabl_ufs_pollfield>
    96019720:	2a0003f3 	mov	w19, w0
		UFS_WRITE32(IS, UFS_READ32(IS));
    96019724:	d2800400 	mov	x0, #0x20                  	// #32
    96019728:	f2a048a0 	movk	x0, #0x245, lsl #16
    9601972c:	b9400001 	ldr	w1, [x0]
    96019730:	b9000001 	str	w1, [x0]
		return error;
    96019734:	17ffffe1 	b	960196b8 <tegrabl_ufs_set_dme_command+0xec>
			error = tegrabl_ufs_pollfield(IS, SHIFT_MASK(IS_UHXS),
    96019738:	52800402 	mov	w2, #0x20                  	// #32
    9601973c:	2a0203e1 	mov	w1, w2
    96019740:	2a0203e0 	mov	w0, w2
    96019744:	17fffff5 	b	96019718 <tegrabl_ufs_set_dme_command+0x14c>
	UFS_WRITE32(IS, UFS_READ32(IS));
    96019748:	d2800400 	mov	x0, #0x20                  	// #32
    9601974c:	f2a048a0 	movk	x0, #0x245, lsl #16
	pdme_cmd->uic_cmd_arg2.dw = UFS_READ32(UICCMDARG2);
    96019750:	9101e000 	add	x0, x0, #0x78
	UFS_WRITE32(IS, UFS_READ32(IS));
    96019754:	b8588001 	ldur	w1, [x0, #-120]
    96019758:	b8188001 	stur	w1, [x0, #-120]
	pdme_cmd->uic_cmd_arg2.dw = UFS_READ32(UICCMDARG2);
    9601975c:	b9400000 	ldr	w0, [x0]
    96019760:	b9003ba0 	str	w0, [x29, #56]
	if ((pdme_cmd->uic_cmd_arg2.config_error_code) != 0UL) {
    96019764:	12001c00 	and	w0, w0, #0xff
    96019768:	35000160 	cbnz	w0, 96019794 <tegrabl_ufs_set_dme_command+0x1c8>
	if ((pdme_cmd->uic_cmd.cmdop == DME_GET) ||
    9601976c:	3940c3a0 	ldrb	w0, [x29, #48]
    96019770:	121e7800 	and	w0, w0, #0xfffffffd
    96019774:	12001c00 	and	w0, w0, #0xff
    96019778:	7100041f 	cmp	w0, #0x1
    9601977c:	54fff9e1 	b.ne	960196b8 <tegrabl_ufs_set_dme_command+0xec>  // b.any
		*data = pdme_cmd->read_write_value = UFS_READ32(UICCMDARG3);
    96019780:	d2801380 	mov	x0, #0x9c                  	// #156
    96019784:	f2a048a0 	movk	x0, #0x245, lsl #16
    96019788:	b9400000 	ldr	w0, [x0]
    9601978c:	b90002a0 	str	w0, [x21]
    96019790:	17ffffca 	b	960196b8 <tegrabl_ufs_set_dme_command+0xec>
		return TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0U);
    96019794:	528002f3 	mov	w19, #0x17                  	// #23
    96019798:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
    9601979c:	17ffffc7 	b	960196b8 <tegrabl_ufs_set_dme_command+0xec>

00000000960197a0 <tegrabl_ufs_set_activate_time>:
{
    960197a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    960197a4:	5282b542 	mov	w2, #0x15aa                	// #5546
    960197a8:	52800001 	mov	w1, #0x0                   	// #0
    960197ac:	52800020 	mov	w0, #0x1                   	// #1
{
    960197b0:	910003fd 	mov	x29, sp
	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    960197b4:	910063a3 	add	x3, x29, #0x18
	uint32_t local_tactivate = 0;
    960197b8:	29037fbf 	stp	wzr, wzr, [x29, #24]
	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    960197bc:	97ffff84 	bl	960195cc <tegrabl_ufs_set_dme_command>
	if (e != TEGRABL_NO_ERROR) {
    960197c0:	350002e0 	cbnz	w0, 9601981c <tegrabl_ufs_set_activate_time+0x7c>
	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    960197c4:	910073a3 	add	x3, x29, #0x1c
    960197c8:	5282b502 	mov	w2, #0x15a8                	// #5544
    960197cc:	52800001 	mov	w1, #0x0                   	// #0
    960197d0:	52800020 	mov	w0, #0x1                   	// #1
    960197d4:	97ffff7e 	bl	960195cc <tegrabl_ufs_set_dme_command>
	if (e != TEGRABL_NO_ERROR) {
    960197d8:	35000220 	cbnz	w0, 9601981c <tegrabl_ufs_set_activate_time+0x7c>
	tactivate = ufs_granularity_us[local_granularity] * local_tactivate;
    960197dc:	29430fa2 	ldp	w2, w3, [x29, #24]
    960197e0:	f0000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    960197e4:	91078421 	add	x1, x1, #0x1e1
    960197e8:	38626821 	ldrb	w1, [x1, x2]
    960197ec:	1b037c21 	mul	w1, w1, w3
	if (tactivate < 64UL) {
    960197f0:	7100fc3f 	cmp	w1, #0x3f
    960197f4:	54000148 	b.hi	9601981c <tegrabl_ufs_set_activate_time+0x7c>  // b.pmore
		data = ufs_tactivate_64us[local_granularity] & 0xffUL;
    960197f8:	f0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    960197fc:	9107a000 	add	x0, x0, #0x1e8
    96019800:	910083a3 	add	x3, x29, #0x20
		e = tegrabl_ufs_set_dme_command(DME_SET, 0,
    96019804:	52800001 	mov	w1, #0x0                   	// #0
		data = ufs_tactivate_64us[local_granularity] & 0xffUL;
    96019808:	38626800 	ldrb	w0, [x0, x2]
		e = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601980c:	5282b502 	mov	w2, #0x15a8                	// #5544
		data = ufs_tactivate_64us[local_granularity] & 0xffUL;
    96019810:	b81f4c60 	str	w0, [x3, #-12]!
		e = tegrabl_ufs_set_dme_command(DME_SET, 0,
    96019814:	52800040 	mov	w0, #0x2                   	// #2
    96019818:	97ffff6d 	bl	960195cc <tegrabl_ufs_set_dme_command>
}
    9601981c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96019820:	d65f03c0 	ret

0000000096019824 <tegrabl_ufs_wait_trd_request_complete>:
	return TEGRABL_NO_ERROR;
}

static tegrabl_error_t
tegrabl_ufs_wait_trd_request_complete(uint32_t trd_index, uint32_t timeout)
{
    96019824:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	struct transfer_request_descriptor *pptx_rx_desc;

	pptx_rx_desc = &ptx_rx_desc[trd_index];
	mask = 1UL << trd_index;
	shift_expected_value = 0;
	error = tegrabl_ufs_pollfield(UTRLDBR,
    96019828:	2a0103e3 	mov	w3, w1
    9601982c:	d2800021 	mov	x1, #0x1                   	// #1
    96019830:	52800002 	mov	w2, #0x0                   	// #0
{
    96019834:	910003fd 	mov	x29, sp
    96019838:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601983c:	2a0003f5 	mov	w21, w0
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019840:	b00002a0 	adrp	x0, 9606e000 <__bss_start>
{
    96019844:	a90153f3 	stp	x19, x20, [sp, #16]
    96019848:	f9001bf7 	str	x23, [sp, #48]
	error = tegrabl_ufs_pollfield(UTRLDBR,
    9601984c:	9ad52021 	lsl	x1, x1, x21
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019850:	f9455014 	ldr	x20, [x0, #2720]
	error = tegrabl_ufs_pollfield(UTRLDBR,
    96019854:	52800b00 	mov	w0, #0x58                  	// #88
    96019858:	72a048a0 	movk	w0, #0x245, lsl #16
    9601985c:	97ffff44 	bl	9601956c <tegrabl_ufs_pollfield>
			mask, shift_expected_value, timeout);
	if (error != TEGRABL_NO_ERROR) {
    96019860:	34000880 	cbz	w0, 96019970 <tegrabl_ufs_wait_trd_request_complete+0x14c>
		reg_value = 0xCAFDECAFU;
    96019864:	529d95f6 	mov	w22, #0xecaf                	// #60591
			pr_info("Unipro Reg offset: 0x%X, val: 0x%X\n",
    96019868:	f0000135 	adrp	x21, 96040000 <sdmmc_base_addr+0x9f4>
    9601986c:	2a0003f3 	mov	w19, w0
    96019870:	910642b5 	add	x21, x21, #0x190
    96019874:	5282a014 	mov	w20, #0x1500                	// #5376
		reg_value = 0xCAFDECAFU;
    96019878:	72b95fb6 	movk	w22, #0xcafd, lsl #16
		ret = tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601987c:	910133a3 	add	x3, x29, #0x4c
    96019880:	2a1403e2 	mov	w2, w20
    96019884:	52800001 	mov	w1, #0x0                   	// #0
    96019888:	52800020 	mov	w0, #0x1                   	// #1
		reg_value = 0xCAFDECAFU;
    9601988c:	b9004fb6 	str	w22, [x29, #76]
		ret = tegrabl_ufs_set_dme_command(DME_GET, 0,
    96019890:	97ffff4f 	bl	960195cc <tegrabl_ufs_set_dme_command>
		if (ret != TEGRABL_NO_ERROR) {
    96019894:	340000a0 	cbz	w0, 960198a8 <tegrabl_ufs_wait_trd_request_complete+0x84>
			pr_info("Unipro Reg offset: 0x%X, val: 0x%X\n",
    96019898:	b9404fa2 	ldr	w2, [x29, #76]
    9601989c:	2a1403e1 	mov	w1, w20
    960198a0:	aa1503e0 	mov	x0, x21
    960198a4:	94002373 	bl	96022670 <tegrabl_printf>
    960198a8:	11000694 	add	w20, w20, #0x1
	while (cnt <= 0xC2U) {
    960198ac:	5282b860 	mov	w0, #0x15c3                	// #5571
    960198b0:	6b00029f 	cmp	w20, w0
    960198b4:	54fffe41 	b.ne	9601987c <tegrabl_ufs_wait_trd_request_complete+0x58>  // b.any
		reg_value = 0xCAFDECAFU;
    960198b8:	529d95f7 	mov	w23, #0xecaf                	// #60591
			pr_info("Unipro Reg offset: 0x%X, val: 0x%X\n",
    960198bc:	f0000135 	adrp	x21, 96040000 <sdmmc_base_addr+0x9f4>
    960198c0:	910642b5 	add	x21, x21, #0x190
	while (cnt <= 0xC2U) {
    960198c4:	52840014 	mov	w20, #0x2000                	// #8192
		reg_value = 0xCAFDECAFU;
    960198c8:	72b95fb7 	movk	w23, #0xcafd, lsl #16
	while (cnt <= 0x67U) {
    960198cc:	52840d16 	mov	w22, #0x2068                	// #8296
		ret = tegrabl_ufs_set_dme_command(DME_GET, 0,
    960198d0:	910133a3 	add	x3, x29, #0x4c
    960198d4:	2a1403e2 	mov	w2, w20
    960198d8:	52800001 	mov	w1, #0x0                   	// #0
    960198dc:	52800020 	mov	w0, #0x1                   	// #1
		reg_value = 0xCAFDECAFU;
    960198e0:	b9004fb7 	str	w23, [x29, #76]
		ret = tegrabl_ufs_set_dme_command(DME_GET, 0,
    960198e4:	97ffff3a 	bl	960195cc <tegrabl_ufs_set_dme_command>
		if (ret != TEGRABL_NO_ERROR) {
    960198e8:	340000a0 	cbz	w0, 960198fc <tegrabl_ufs_wait_trd_request_complete+0xd8>
			pr_info("Unipro Reg offset: 0x%X, val: 0x%X\n",
    960198ec:	b9404fa2 	ldr	w2, [x29, #76]
    960198f0:	2a1403e1 	mov	w1, w20
    960198f4:	aa1503e0 	mov	x0, x21
    960198f8:	9400235e 	bl	96022670 <tegrabl_printf>
    960198fc:	11000694 	add	w20, w20, #0x1
	while (cnt <= 0x67U) {
    96019900:	6b16029f 	cmp	w20, w22
    96019904:	54fffe61 	b.ne	960198d0 <tegrabl_ufs_wait_trd_request_complete+0xac>  // b.any
		reg_value = 0xCAFDECAFU;
    96019908:	529d95f7 	mov	w23, #0xecaf                	// #60591
			pr_info("Unipro Reg offset: 0x%X, val: 0x%X\n",
    9601990c:	f0000135 	adrp	x21, 96040000 <sdmmc_base_addr+0x9f4>
    96019910:	910642b5 	add	x21, x21, #0x190
	while (cnt <= 0x67U) {
    96019914:	529a0834 	mov	w20, #0xd041                	// #53313
		reg_value = 0xCAFDECAFU;
    96019918:	72b95fb7 	movk	w23, #0xcafd, lsl #16
	while (cnt <= 0x5U) {
    9601991c:	529a08f6 	mov	w22, #0xd047                	// #53319
		ret = tegrabl_ufs_set_dme_command(DME_GET, 0,
    96019920:	910133a3 	add	x3, x29, #0x4c
    96019924:	2a1403e2 	mov	w2, w20
    96019928:	52800001 	mov	w1, #0x0                   	// #0
    9601992c:	52800020 	mov	w0, #0x1                   	// #1
		reg_value = 0xCAFDECAFU;
    96019930:	b9004fb7 	str	w23, [x29, #76]
		ret = tegrabl_ufs_set_dme_command(DME_GET, 0,
    96019934:	97ffff26 	bl	960195cc <tegrabl_ufs_set_dme_command>
		if (ret != TEGRABL_NO_ERROR) {
    96019938:	340000a0 	cbz	w0, 9601994c <tegrabl_ufs_wait_trd_request_complete+0x128>
			pr_info("Unipro Reg offset: 0x%X, val: 0x%X\n",
    9601993c:	b9404fa2 	ldr	w2, [x29, #76]
    96019940:	2a1403e1 	mov	w1, w20
    96019944:	aa1503e0 	mov	x0, x21
    96019948:	9400234a 	bl	96022670 <tegrabl_printf>
    9601994c:	11000694 	add	w20, w20, #0x1
	while (cnt <= 0x5U) {
    96019950:	6b16029f 	cmp	w20, w22
    96019954:	54fffe61 	b.ne	96019920 <tegrabl_ufs_wait_trd_request_complete+0xfc>  // b.any
	    (READ_FLD(IS_UTPES, reg_data) != 0UL) || (READ_FLD(IS_DFES, reg_data) != 0UL)) {
		return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 3U);
	}

	return TEGRABL_NO_ERROR;
}
    96019958:	2a1303e0 	mov	w0, w19
    9601995c:	f9401bf7 	ldr	x23, [sp, #48]
    96019960:	a94153f3 	ldp	x19, x20, [sp, #16]
    96019964:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96019968:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601996c:	d65f03c0 	ret
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019970:	d37b7eb3 	ubfiz	x19, x21, #5, #32
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019974:	528005a0 	mov	w0, #0x2d                  	// #45
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019978:	8b130293 	add	x19, x20, x19
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601997c:	52800064 	mov	w4, #0x3                   	// #3
    96019980:	d2803003 	mov	x3, #0x180                 	// #384
    96019984:	aa1303e2 	mov	x2, x19
    96019988:	52800001 	mov	w1, #0x0                   	// #0
    9601998c:	97ffa840 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	if (pptx_rx_desc->dw2.ocs != OCS_SUCCESS) {
    96019990:	39402260 	ldrb	w0, [x19, #8]
    96019994:	35000180 	cbnz	w0, 960199c4 <tegrabl_ufs_wait_trd_request_complete+0x1a0>
	reg_data = UFS_READ32(IS);
    96019998:	d2800401 	mov	x1, #0x20                  	// #32
		return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 3U);
    9601999c:	52806573 	mov	w19, #0x32b                 	// #811
	reg_data = UFS_READ32(IS);
    960199a0:	f2a048a1 	movk	x1, #0x245, lsl #16
		return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 3U);
    960199a4:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
	reg_data = UFS_READ32(IS);
    960199a8:	b9400020 	ldr	w0, [x1]
	UFS_WRITE32(IS, reg_data);
    960199ac:	b9000020 	str	w0, [x1]
	if ((READ_FLD(IS_SBFES, reg_data) != 0UL) || (READ_FLD(IS_HCFES, reg_data) != 0UL) ||
    960199b0:	12151800 	and	w0, w0, #0x3f800
    960199b4:	12107000 	and	w0, w0, #0xffff1fff
		return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 3U);
    960199b8:	7100001f 	cmp	w0, #0x0
    960199bc:	1a9303f3 	csel	w19, wzr, w19, eq  // eq = none
    960199c0:	17ffffe6 	b	96019958 <tegrabl_ufs_wait_trd_request_complete+0x134>
		return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 2U);
    960199c4:	52804573 	mov	w19, #0x22b                 	// #555
    960199c8:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
    960199cc:	17ffffe3 	b	96019958 <tegrabl_ufs_wait_trd_request_complete+0x134>

00000000960199d0 <tegrabl_ufs_hibernate_enter>:
{
    960199d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	e = tegrabl_ufs_set_dme_command(DME_HIBERNATE_ENTER, 0, 0, &data);
    960199d4:	52800002 	mov	w2, #0x0                   	// #0
    960199d8:	52800001 	mov	w1, #0x0                   	// #0
    960199dc:	528002e0 	mov	w0, #0x17                  	// #23
{
    960199e0:	910003fd 	mov	x29, sp
	uint32_t data = 0x0;
    960199e4:	9100c3a3 	add	x3, x29, #0x30
{
    960199e8:	f9000bf3 	str	x19, [sp, #16]
	uint32_t data = 0x0;
    960199ec:	b81fcc7f 	str	wzr, [x3, #-4]!
	e = tegrabl_ufs_set_dme_command(DME_HIBERNATE_ENTER, 0, 0, &data);
    960199f0:	97fffef7 	bl	960195cc <tegrabl_ufs_set_dme_command>
	if (e != TEGRABL_NO_ERROR) {
    960199f4:	350002c0 	cbnz	w0, 96019a4c <tegrabl_ufs_hibernate_enter+0x7c>
	tegrabl_udelay(2);
    960199f8:	d2800040 	mov	x0, #0x2                   	// #2
    960199fc:	940018aa 	bl	9601fca4 <tegrabl_udelay>
	UFS_READ32(HCS);
    96019a00:	d2800600 	mov	x0, #0x30                  	// #48
	e = tegrabl_ufs_pollfield(reg_addr, UFSHC_HIBERN8_MASK, UFSHC_HIBERN8_ENTRY_STATUS, IS_UCCS_TIMEOUT);
    96019a04:	52942403 	mov	w3, #0xa120                	// #41248
	UFS_READ32(HCS);
    96019a08:	f2a048a0 	movk	x0, #0x245, lsl #16
	e = tegrabl_ufs_pollfield(reg_addr, UFSHC_HIBERN8_MASK, UFSHC_HIBERN8_ENTRY_STATUS, IS_UCCS_TIMEOUT);
    96019a0c:	52800022 	mov	w2, #0x1                   	// #1
    96019a10:	72a000e3 	movk	w3, #0x7, lsl #16
    96019a14:	2a0203e1 	mov	w1, w2
	UFS_READ32(HCS);
    96019a18:	b9400000 	ldr	w0, [x0]
	e = tegrabl_ufs_pollfield(reg_addr, UFSHC_HIBERN8_MASK, UFSHC_HIBERN8_ENTRY_STATUS, IS_UCCS_TIMEOUT);
    96019a1c:	52800200 	mov	w0, #0x10                  	// #16
    96019a20:	72a048c0 	movk	w0, #0x246, lsl #16
    96019a24:	97fffed2 	bl	9601956c <tegrabl_ufs_pollfield>
    96019a28:	2a0003f3 	mov	w19, w0
	if (e != TEGRABL_NO_ERROR) {
    96019a2c:	34000080 	cbz	w0, 96019a3c <tegrabl_ufs_hibernate_enter+0x6c>
		pr_error("Hibernate entry command failed\n");
    96019a30:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96019a34:	91365000 	add	x0, x0, #0xd94
    96019a38:	9400230e 	bl	96022670 <tegrabl_printf>
}
    96019a3c:	2a1303e0 	mov	w0, w19
    96019a40:	f9400bf3 	ldr	x19, [sp, #16]
    96019a44:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96019a48:	d65f03c0 	ret
    96019a4c:	2a0003f3 	mov	w19, w0
    96019a50:	17fffff8 	b	96019a30 <tegrabl_ufs_hibernate_enter+0x60>

0000000096019a54 <tegrabl_ufs_setup_trtdm_lists>:
{
    96019a54:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tx_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019a58:	52800024 	mov	w4, #0x1                   	// #1
    96019a5c:	d2803003 	mov	x3, #0x180                 	// #384
    96019a60:	52800001 	mov	w1, #0x0                   	// #0
{
    96019a64:	910003fd 	mov	x29, sp
    96019a68:	a90153f3 	stp	x19, x20, [sp, #16]
	tx_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019a6c:	b00002b4 	adrp	x20, 9606e000 <__bss_start>
    96019a70:	528005a0 	mov	w0, #0x2d                  	// #45
	tm_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019a74:	b00002b3 	adrp	x19, 9606e000 <__bss_start>
	tx_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019a78:	f9455282 	ldr	x2, [x20, #2720]
    96019a7c:	97ffa812 	bl	96003ac4 <tegrabl_dma_map_buffer>
	UFS_WRITE32(UTRLBA, (uintptr_t)tx_address);
    96019a80:	d2800a01 	mov	x1, #0x50                  	// #80
	tm_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019a84:	f9454e62 	ldr	x2, [x19, #2712]
	UFS_WRITE32(UTRLBA, (uintptr_t)tx_address);
    96019a88:	f2a048a1 	movk	x1, #0x245, lsl #16
	tm_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019a8c:	52800024 	mov	w4, #0x1                   	// #1
    96019a90:	d2801803 	mov	x3, #0xc0                  	// #192
	UFS_WRITE32(UTRLBA, (uintptr_t)tx_address);
    96019a94:	b9000020 	str	w0, [x1]
	UFS_WRITE32(UTRLBAU, 0x0);
    96019a98:	d2800a80 	mov	x0, #0x54                  	// #84
    96019a9c:	f2a048a0 	movk	x0, #0x245, lsl #16
	tm_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019aa0:	52800001 	mov	w1, #0x0                   	// #0
	UFS_WRITE32(UTRLBAU, 0x0);
    96019aa4:	b900001f 	str	wzr, [x0]
	tm_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019aa8:	528005a0 	mov	w0, #0x2d                  	// #45
    96019aac:	97ffa806 	bl	96003ac4 <tegrabl_dma_map_buffer>
	UFS_WRITE32(UTMRLBA, (uintptr_t)tm_address);
    96019ab0:	d2800e01 	mov	x1, #0x70                  	// #112
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019ab4:	f9455282 	ldr	x2, [x20, #2720]
	UFS_WRITE32(UTMRLBA, (uintptr_t)tm_address);
    96019ab8:	f2a048a1 	movk	x1, #0x245, lsl #16
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019abc:	52800024 	mov	w4, #0x1                   	// #1
    96019ac0:	d2803003 	mov	x3, #0x180                 	// #384
	UFS_WRITE32(UTMRLBA, (uintptr_t)tm_address);
    96019ac4:	b9000020 	str	w0, [x1]
	UFS_WRITE32(UTMRLBAU, 0x0);
    96019ac8:	d2800e80 	mov	x0, #0x74                  	// #116
    96019acc:	f2a048a0 	movk	x0, #0x245, lsl #16
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019ad0:	52800001 	mov	w1, #0x0                   	// #0
	UFS_WRITE32(UTMRLBAU, 0x0);
    96019ad4:	b900001f 	str	wzr, [x0]
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019ad8:	528005a0 	mov	w0, #0x2d                  	// #45
    96019adc:	97ffa7ec 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019ae0:	f9454e62 	ldr	x2, [x19, #2712]
    96019ae4:	52800024 	mov	w4, #0x1                   	// #1
}
    96019ae8:	a94153f3 	ldp	x19, x20, [sp, #16]
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019aec:	d2802403 	mov	x3, #0x120                 	// #288
}
    96019af0:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019af4:	52800001 	mov	w1, #0x0                   	// #0
    96019af8:	528005a0 	mov	w0, #0x2d                  	// #45
    96019afc:	17ffa7e4 	b	96003a8c <tegrabl_dma_unmap_buffer>

0000000096019b00 <tegrabl_ufs_deinit>:
	reg_data = UFS_READ32(UTMRLRSR);
    96019b00:	d2801001 	mov	x1, #0x80                  	// #128
{
    96019b04:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	reg_data = UFS_READ32(UTMRLRSR);
    96019b08:	f2a048a1 	movk	x1, #0x245, lsl #16
{
    96019b0c:	910003fd 	mov	x29, sp
	reg_data = UFS_READ32(UTMRLRSR);
    96019b10:	b9400020 	ldr	w0, [x1]
{
    96019b14:	f9000bf3 	str	x19, [sp, #16]
	reg_data = SET_FLD(UTMRLRSR_UTMRLRSR, 0UL, reg_data);
    96019b18:	121f7800 	and	w0, w0, #0xfffffffe
	UFS_WRITE32(UTMRLRSR, reg_data);
    96019b1c:	b9000020 	str	w0, [x1]
	reg_data = UFS_READ32(UTRLRSR);
    96019b20:	d2800c01 	mov	x1, #0x60                  	// #96
    96019b24:	f2a048a1 	movk	x1, #0x245, lsl #16
    96019b28:	b9400020 	ldr	w0, [x1]
	reg_data = SET_FLD(UTRLRSR_UTRLRSR, 0UL, reg_data);
    96019b2c:	121f7800 	and	w0, w0, #0xfffffffe
	UFS_WRITE32(UTRLRSR, reg_data);
    96019b30:	b9000020 	str	w0, [x1]
	UFS_WRITE32(UTRLBA, 0x0U);
    96019b34:	d2800a00 	mov	x0, #0x50                  	// #80
    96019b38:	f2a048a0 	movk	x0, #0x245, lsl #16
    96019b3c:	b900001f 	str	wzr, [x0]
	UFS_WRITE32(UTRLBAU, 0x0U);
    96019b40:	b900041f 	str	wzr, [x0, #4]
	UFS_WRITE32(UTMRLBA, 0x0U);
    96019b44:	b900201f 	str	wzr, [x0, #32]
	UFS_WRITE32(UTMRLBAU, 0x0U);
    96019b48:	b900241f 	str	wzr, [x0, #36]
	if (ptx_rx_desc != NULL) {
    96019b4c:	b00002a0 	adrp	x0, 9606e000 <__bss_start>
    96019b50:	f9455001 	ldr	x1, [x0, #2720]
    96019b54:	b4000061 	cbz	x1, 96019b60 <tegrabl_ufs_deinit+0x60>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, ptx_rx_desc);
    96019b58:	52800020 	mov	w0, #0x1                   	// #1
    96019b5c:	940033d3 	bl	96026aa8 <tegrabl_dealloc>
	if (pcmd_descriptor != NULL) {
    96019b60:	b00002a0 	adrp	x0, 9606e000 <__bss_start>
    96019b64:	f9454801 	ldr	x1, [x0, #2704]
    96019b68:	b4000061 	cbz	x1, 96019b74 <tegrabl_ufs_deinit+0x74>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, pcmd_descriptor);
    96019b6c:	52800020 	mov	w0, #0x1                   	// #1
    96019b70:	940033ce 	bl	96026aa8 <tegrabl_dealloc>
	if (ptask_mgmnt_desc != NULL) {
    96019b74:	b00002a0 	adrp	x0, 9606e000 <__bss_start>
    96019b78:	f9454c01 	ldr	x1, [x0, #2712]
    96019b7c:	b4000061 	cbz	x1, 96019b88 <tegrabl_ufs_deinit+0x88>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, ptask_mgmnt_desc);
    96019b80:	52800020 	mov	w0, #0x1                   	// #1
    96019b84:	940033c9 	bl	96026aa8 <tegrabl_dealloc>
	if (pufs_context != NULL) {
    96019b88:	b00002b3 	adrp	x19, 9606e000 <__bss_start>
    96019b8c:	f9455660 	ldr	x0, [x19, #2728]
    96019b90:	b40000c0 	cbz	x0, 96019ba8 <tegrabl_ufs_deinit+0xa8>
		tegrabl_ufs_link_uphy_deinit(pufs_context->num_lanes);
    96019b94:	b9402800 	ldr	w0, [x0, #40]
    96019b98:	97fffe28 	bl	96019438 <tegrabl_ufs_link_uphy_deinit>
		tegrabl_ufs_uphy_clk_disable_reset_enable(pufs_context->num_lanes);
    96019b9c:	f9455660 	ldr	x0, [x19, #2728]
    96019ba0:	b9402800 	ldr	w0, [x0, #40]
    96019ba4:	97fffe26 	bl	9601943c <tegrabl_ufs_uphy_clk_disable_reset_enable>
}
    96019ba8:	52800000 	mov	w0, #0x0                   	// #0
    96019bac:	f9400bf3 	ldr	x19, [sp, #16]
    96019bb0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96019bb4:	d65f03c0 	ret

0000000096019bb8 <tegrabl_ufs_start_tmtr_engines>:
	reg_data = UFS_READ32(UTMRLRSR);
    96019bb8:	d2801001 	mov	x1, #0x80                  	// #128
{
    96019bbc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	reg_data = UFS_READ32(UTMRLRSR);
    96019bc0:	f2a048a1 	movk	x1, #0x245, lsl #16
	error = tegrabl_ufs_pollfield(HCS,
    96019bc4:	52942403 	mov	w3, #0xa120                	// #41248
{
    96019bc8:	910003fd 	mov	x29, sp
	reg_data = UFS_READ32(UTMRLRSR);
    96019bcc:	b9400020 	ldr	w0, [x1]
	error = tegrabl_ufs_pollfield(HCS,
    96019bd0:	52800082 	mov	w2, #0x4                   	// #4
    96019bd4:	72a000e3 	movk	w3, #0x7, lsl #16
	reg_data = SET_FLD(UTMRLRSR_UTMRLRSR, 1UL, reg_data);
    96019bd8:	32000000 	orr	w0, w0, #0x1
	UFS_WRITE32(UTMRLRSR, reg_data);
    96019bdc:	b9000020 	str	w0, [x1]
	reg_data = UFS_READ32(UTRLRSR);
    96019be0:	d2800c00 	mov	x0, #0x60                  	// #96
    96019be4:	f2a048a0 	movk	x0, #0x245, lsl #16
    96019be8:	b9400001 	ldr	w1, [x0]
	reg_data = SET_FLD(UTRLRSR_UTRLRSR, 1UL, reg_data);
    96019bec:	32000021 	orr	w1, w1, #0x1
	UFS_WRITE32(UTRLRSR, reg_data);
    96019bf0:	b9000001 	str	w1, [x0]
	error = tegrabl_ufs_pollfield(HCS,
    96019bf4:	2a0203e1 	mov	w1, w2
	reg_data = UFS_READ32(UTRLRSR);
    96019bf8:	b9400000 	ldr	w0, [x0]
	error = tegrabl_ufs_pollfield(HCS,
    96019bfc:	52800600 	mov	w0, #0x30                  	// #48
    96019c00:	72a048a0 	movk	w0, #0x245, lsl #16
    96019c04:	97fffe5a 	bl	9601956c <tegrabl_ufs_pollfield>
	if (error != TEGRABL_NO_ERROR) {
    96019c08:	35000120 	cbnz	w0, 96019c2c <tegrabl_ufs_start_tmtr_engines+0x74>
}
    96019c0c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	error = tegrabl_ufs_pollfield(HCS, SHIFT_MASK(HCS_UTRLRDY),
    96019c10:	52942403 	mov	w3, #0xa120                	// #41248
    96019c14:	52800600 	mov	w0, #0x30                  	// #48
    96019c18:	52800042 	mov	w2, #0x2                   	// #2
    96019c1c:	72a000e3 	movk	w3, #0x7, lsl #16
    96019c20:	2a0203e1 	mov	w1, w2
    96019c24:	72a048a0 	movk	w0, #0x245, lsl #16
    96019c28:	17fffe51 	b	9601956c <tegrabl_ufs_pollfield>
}
    96019c2c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96019c30:	d65f03c0 	ret

0000000096019c34 <tegrabl_ufs_create_trd>:
{
    96019c34:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019c38:	d37b7c00 	ubfiz	x0, x0, #5, #32
{
    96019c3c:	910003fd 	mov	x29, sp
    96019c40:	a9025bf5 	stp	x21, x22, [sp, #32]
    96019c44:	2a0203f6 	mov	w22, w2
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    96019c48:	b00002a2 	adrp	x2, 9606e000 <__bss_start>
{
    96019c4c:	a90153f3 	stp	x19, x20, [sp, #16]
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    96019c50:	5280c014 	mov	w20, #0x600                 	// #1536
{
    96019c54:	12003c75 	and	w21, w3, #0xffff
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    96019c58:	f9454842 	ldr	x2, [x2, #2704]
    96019c5c:	9bb40834 	umaddl	x20, w1, w20, x2
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019c60:	b00002a1 	adrp	x1, 9606e000 <__bss_start>
	memset((void *)pptx_rx_desc, 0,
    96019c64:	d2800402 	mov	x2, #0x20                  	// #32
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019c68:	f9455033 	ldr	x19, [x1, #2720]
	memset((void *)pptx_rx_desc, 0,
    96019c6c:	52800001 	mov	w1, #0x0                   	// #0
	pptx_rx_desc = &ptx_rx_desc[trd_index];
    96019c70:	8b000273 	add	x19, x19, x0
	memset((void *)pptx_rx_desc, 0,
    96019c74:	aa1303e0 	mov	x0, x19
    96019c78:	9400406c 	bl	96029e28 <memset>
	pptx_rx_desc->dw0.control_type = UFS_TRD_DW0_0_CT_UFS;
    96019c7c:	52800021 	mov	w1, #0x1                   	// #1
    96019c80:	39400e60 	ldrb	w0, [x19, #3]
    96019c84:	331c0c20 	bfi	w0, w1, #4, #4
	pptx_rx_desc->dw0.dd = (uint8_t)data_dir;
    96019c88:	331f06c0 	bfi	w0, w22, #1, #2
    96019c8c:	39000e60 	strb	w0, [x19, #3]
	pptx_rx_desc->dw2.ocs = OCS_INVALID;
    96019c90:	528001e0 	mov	w0, #0xf                   	// #15
    96019c94:	39002260 	strb	w0, [x19, #8]
	pptx_rx_desc->dw6.rul = CMD_DESC_RESP_LENGTH / 4U;
    96019c98:	320983e0 	mov	w0, #0x800080              	// #8388736
    96019c9c:	b9001a60 	str	w0, [x19, #24]
	if (data_dir != DATA_DIR_NIL) {
    96019ca0:	34000216 	cbz	w22, 96019ce0 <tegrabl_ufs_create_trd+0xac>
		if (prdt_length > MAX_PRDT_LENGTH) {
    96019ca4:	710042bf 	cmp	w21, #0x10
    96019ca8:	54000169 	b.ls	96019cd4 <tegrabl_ufs_create_trd+0xa0>  // b.plast
			pr_error("UFS %d prdt more than max.\n", prdt_length);
    96019cac:	2a1503e1 	mov	w1, w21
    96019cb0:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96019cb4:	9130c000 	add	x0, x0, #0xc30
    96019cb8:	9400226e 	bl	96022670 <tegrabl_printf>
			return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 7U);
    96019cbc:	5280e560 	mov	w0, #0x72b                 	// #1835
    96019cc0:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96019cc4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96019cc8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96019ccc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96019cd0:	d65f03c0 	ret
		pptx_rx_desc->dw7.prdto = (CMD_DESC_RESP_LENGTH+CMD_DESC_REQ_LENGTH) / 4U;
    96019cd4:	52802000 	mov	w0, #0x100                 	// #256
		pptx_rx_desc->dw7.prdtl = prdt_length;
    96019cd8:	79003a75 	strh	w21, [x19, #28]
		pptx_rx_desc->dw7.prdto = (CMD_DESC_RESP_LENGTH+CMD_DESC_REQ_LENGTH) / 4U;
    96019cdc:	79003e60 	strh	w0, [x19, #30]
	pcmd_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019ce0:	52800024 	mov	w4, #0x1                   	// #1
    96019ce4:	d2802403 	mov	x3, #0x120                 	// #288
    96019ce8:	aa1403e2 	mov	x2, x20
    96019cec:	52800001 	mov	w1, #0x0                   	// #0
    96019cf0:	528005a0 	mov	w0, #0x2d                  	// #45
    96019cf4:	97ffa774 	bl	96003ac4 <tegrabl_dma_map_buffer>
	pptx_rx_desc->dw4.ctba = ((uintptr_t)pcmd_address >> 7);
    96019cf8:	b9401261 	ldr	w1, [x19, #16]
    96019cfc:	d347fc00 	lsr	x0, x0, #7
	tx_resp_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019d00:	52800044 	mov	w4, #0x2                   	// #2
    96019d04:	d2802403 	mov	x3, #0x120                 	// #288
    96019d08:	91080282 	add	x2, x20, #0x200
	pptx_rx_desc->dw4.ctba = ((uintptr_t)pcmd_address >> 7);
    96019d0c:	33196001 	bfi	w1, w0, #7, #25
    96019d10:	b9001261 	str	w1, [x19, #16]
	tx_resp_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019d14:	528005a0 	mov	w0, #0x2d                  	// #45
    96019d18:	52800001 	mov	w1, #0x0                   	// #0
    96019d1c:	97ffa76a 	bl	96003ac4 <tegrabl_dma_map_buffer>
	data_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019d20:	52800024 	mov	w4, #0x1                   	// #1
    96019d24:	d2802003 	mov	x3, #0x100                 	// #256
    96019d28:	91100282 	add	x2, x20, #0x400
    96019d2c:	52800001 	mov	w1, #0x0                   	// #0
    96019d30:	528005a0 	mov	w0, #0x2d                  	// #45
    96019d34:	97ffa764 	bl	96003ac4 <tegrabl_dma_map_buffer>
	tx_address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    96019d38:	52800064 	mov	w4, #0x3                   	// #3
    96019d3c:	d2803003 	mov	x3, #0x180                 	// #384
    96019d40:	aa1303e2 	mov	x2, x19
    96019d44:	52800001 	mov	w1, #0x0                   	// #0
    96019d48:	528005a0 	mov	w0, #0x2d                  	// #45
    96019d4c:	97ffa75e 	bl	96003ac4 <tegrabl_dma_map_buffer>
	return TEGRABL_NO_ERROR;
    96019d50:	52800000 	mov	w0, #0x0                   	// #0
    96019d54:	17ffffdc 	b	96019cc4 <tegrabl_ufs_create_trd+0x90>

0000000096019d58 <tegrabl_ufs_free_trd_cmd_desc>:

void tegrabl_ufs_free_trd_cmd_desc(void)
{
	pufs_context->tx_req_des_in_use--;
    96019d58:	b00002a0 	adrp	x0, 9606e000 <__bss_start>
    96019d5c:	f9455400 	ldr	x0, [x0, #2728]
    96019d60:	b9404401 	ldr	w1, [x0, #68]
    96019d64:	51000421 	sub	w1, w1, #0x1
    96019d68:	b9004401 	str	w1, [x0, #68]
	pufs_context->cmd_desc_in_use--;
    96019d6c:	b9403c01 	ldr	w1, [x0, #60]
    96019d70:	51000421 	sub	w1, w1, #0x1
    96019d74:	b9003c01 	str	w1, [x0, #60]
}
    96019d78:	d65f03c0 	ret

0000000096019d7c <tegrabl_ufs_queue_trd>:
{
    96019d7c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96019d80:	910003fd 	mov	x29, sp
    96019d84:	a90153f3 	stp	x19, x20, [sp, #16]
    96019d88:	2a0103f4 	mov	w20, w1
	reg_data = UFS_READ32(UTRLDBR);
    96019d8c:	d2800b01 	mov	x1, #0x58                  	// #88
{
    96019d90:	2a0003f3 	mov	w19, w0
	reg_data = UFS_READ32(UTRLDBR);
    96019d94:	f2a048a1 	movk	x1, #0x245, lsl #16
{
    96019d98:	a9025bf5 	stp	x21, x22, [sp, #32]
	reg_data = UFS_READ32(UTRLDBR);
    96019d9c:	b9400020 	ldr	w0, [x1]
	if ((reg_data & (1UL << trd_index)) != 0U) {
    96019da0:	2a0003e0 	mov	w0, w0
    96019da4:	9ad32400 	lsr	x0, x0, x19
    96019da8:	36000100 	tbz	w0, #0, 96019dc8 <tegrabl_ufs_queue_trd+0x4c>
		tegrabl_ufs_free_trd_cmd_desc();
    96019dac:	97ffffeb 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
		return TEGRABL_ERROR(TEGRABL_ERR_FATAL, 1U);
    96019db0:	52802560 	mov	w0, #0x12b                 	// #299
    96019db4:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
}
    96019db8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96019dbc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96019dc0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96019dc4:	d65f03c0 	ret
	memset((void *)&pufs_context->trd_info[trd_index],
    96019dc8:	b00002b5 	adrp	x21, 9606e000 <__bss_start>
	reg_data = 1UL << trd_index;
    96019dcc:	d2800020 	mov	x0, #0x1                   	// #1
    96019dd0:	9ad32000 	lsl	x0, x0, x19
	memset((void *)&pufs_context->trd_info[trd_index],
    96019dd4:	d2800302 	mov	x2, #0x18                  	// #24
    96019dd8:	f94556a3 	ldr	x3, [x21, #2728]
	UFS_WRITE32(UTRLDBR, reg_data);
    96019ddc:	b9000020 	str	w0, [x1]
	memset((void *)&pufs_context->trd_info[trd_index],
    96019de0:	d2800a01 	mov	x1, #0x50                  	// #80
    96019de4:	52800300 	mov	w0, #0x18                  	// #24
    96019de8:	9ba00660 	umaddl	x0, w19, w0, x1
    96019dec:	52800001 	mov	w1, #0x0                   	// #0
    96019df0:	8b000060 	add	x0, x3, x0
    96019df4:	9400400d 	bl	96029e28 <memset>
	pufs_context->trd_info[trd_index].trd_starttime =
    96019df8:	f94556b6 	ldr	x22, [x21, #2728]
			tegrabl_get_timestamp_us();
    96019dfc:	940017a0 	bl	9601fc7c <tegrabl_get_timestamp_us>
	pufs_context->trd_info[trd_index].trd_starttime =
    96019e00:	d2800301 	mov	x1, #0x18                  	// #24
    96019e04:	9b017e73 	mul	x19, x19, x1
    96019e08:	8b1302d6 	add	x22, x22, x19
    96019e0c:	f9002ec0 	str	x0, [x22, #88]
	pufs_context->trd_info[trd_index].trd_timeout =
    96019e10:	f94556a0 	ldr	x0, [x21, #2728]
    96019e14:	8b130013 	add	x19, x0, x19
    96019e18:	52800000 	mov	w0, #0x0                   	// #0
    96019e1c:	f9003274 	str	x20, [x19, #96]
    96019e20:	17ffffe6 	b	96019db8 <tegrabl_ufs_queue_trd+0x3c>

0000000096019e24 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc>:

tegrabl_error_t tegrabl_ufs_chk_if_dev_ready_to_rec_desc(void)
{
    96019e24:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96019e28:	910003fd 	mov	x29, sp
    96019e2c:	a90153f3 	stp	x19, x20, [sp, #16]
	struct cmd_descriptor *plcmd_descriptor;
	uint32_t trd_index = 0;
	uint32_t cmd_desc_index = 0;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    96019e30:	9100e3a0 	add	x0, x29, #0x38
{
    96019e34:	f90013f5 	str	x21, [sp, #32]
	uint32_t cmd_desc_index = 0;
    96019e38:	29077fbf 	stp	wzr, wzr, [x29, #56]
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    96019e3c:	97fffd94 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
    96019e40:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96019e44:	350005e0 	cbnz	w0, 96019f00 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc+0xdc>
		return error;
	}

	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    96019e48:	9100f3a0 	add	x0, x29, #0x3c
    96019e4c:	97fffdb6 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
    96019e50:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96019e54:	35000560 	cbnz	w0, 96019f00 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc+0xdc>
		return error;
	}

	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    96019e58:	b9403fb3 	ldr	w19, [x29, #60]
    96019e5c:	5280c000 	mov	w0, #0x600                 	// #1536
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    96019e60:	d280c002 	mov	x2, #0x600                 	// #1536
    96019e64:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    96019e68:	9ba07e73 	umull	x19, w19, w0
    96019e6c:	b00002a0 	adrp	x0, 9606e000 <__bss_start>
    96019e70:	f9454815 	ldr	x21, [x0, #2704]
    96019e74:	8b1302b4 	add	x20, x21, x19
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    96019e78:	aa1403e0 	mov	x0, x20
    96019e7c:	94003feb 	bl	96029e28 <memset>

	/* Create NOP_OUT UPIU. Only Transaction Code needed */
	pnop_upiu =
		(struct nop_upiu *)&plcmd_descriptor->vucd_generic_req_upiu;
	pnop_upiu->basic_header.trans_code = UPIU_NOP_OUT_TRANSACTION;
    96019e80:	38336abf 	strb	wzr, [x21, x19]

	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    96019e84:	52800023 	mov	w3, #0x1                   	// #1
    96019e88:	52800002 	mov	w2, #0x0                   	// #0
    96019e8c:	294707a0 	ldp	w0, w1, [x29, #56]
    96019e90:	97ffff69 	bl	96019c34 <tegrabl_ufs_create_trd>
    96019e94:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96019e98:	35000340 	cbnz	w0, 96019f00 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc+0xdc>
		return error;
	}

	error = tegrabl_ufs_queue_trd(trd_index, NOP_TIMEOUT);
    96019e9c:	b9403ba0 	ldr	w0, [x29, #56]
    96019ea0:	52942401 	mov	w1, #0xa120                	// #41248
    96019ea4:	72a000e1 	movk	w1, #0x7, lsl #16
    96019ea8:	97ffffb5 	bl	96019d7c <tegrabl_ufs_queue_trd>
    96019eac:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96019eb0:	35000280 	cbnz	w0, 96019f00 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc+0xdc>
		return error;
	}

	error = tegrabl_ufs_wait_trd_request_complete(trd_index,
    96019eb4:	b9403ba0 	ldr	w0, [x29, #56]
    96019eb8:	52942401 	mov	w1, #0xa120                	// #41248
    96019ebc:	72a000e1 	movk	w1, #0x7, lsl #16
    96019ec0:	97fffe59 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
    96019ec4:	2a0003f3 	mov	w19, w0
			NOP_TIMEOUT);
	if (error != TEGRABL_NO_ERROR) {
    96019ec8:	350001c0 	cbnz	w0, 96019f00 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc+0xdc>
		return error;
	}

	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    96019ecc:	528005a0 	mov	w0, #0x2d                  	// #45
    96019ed0:	52800044 	mov	w4, #0x2                   	// #2
    96019ed4:	d2802403 	mov	x3, #0x120                 	// #288
    96019ed8:	91080282 	add	x2, x20, #0x200
    96019edc:	52800001 	mov	w1, #0x0                   	// #0
    96019ee0:	97ffa6eb 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		sizeof(union ucd_generic_resp_upiu),
		TEGRABL_DMA_FROM_DEVICE);

	pnop_upiu = (struct nop_upiu *)&plcmd_descriptor->vucd_generic_resp_upiu;

	if (pnop_upiu->basic_header.trans_code == UPIU_NOP_IN_TRANSACTION) {
    96019ee4:	39480280 	ldrb	w0, [x20, #512]
    96019ee8:	7100801f 	cmp	w0, #0x20
    96019eec:	54000141 	b.ne	96019f14 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc+0xf0>  // b.any
		pr_info("NOP successful\n");
    96019ef0:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    96019ef4:	912fd000 	add	x0, x0, #0xbf4
    96019ef8:	940021de 	bl	96022670 <tegrabl_printf>
	} else {
		pr_error("NOP command failed\n");
		error = TEGRABL_ERR_COMMAND_FAILED;
	}

	tegrabl_ufs_free_trd_cmd_desc();
    96019efc:	97ffff97 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>

	return error;
}
    96019f00:	2a1303e0 	mov	w0, w19
    96019f04:	f94013f5 	ldr	x21, [sp, #32]
    96019f08:	a94153f3 	ldp	x19, x20, [sp, #16]
    96019f0c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96019f10:	d65f03c0 	ret
		pr_error("NOP command failed\n");
    96019f14:	d0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
		error = TEGRABL_ERR_COMMAND_FAILED;
    96019f18:	528002f3 	mov	w19, #0x17                  	// #23
		pr_error("NOP command failed\n");
    96019f1c:	91301c00 	add	x0, x0, #0xc07
    96019f20:	940021d4 	bl	96022670 <tegrabl_printf>
    96019f24:	17fffff6 	b	96019efc <tegrabl_ufs_chk_if_dev_ready_to_rec_desc+0xd8>

0000000096019f28 <tegrabl_ufs_get_descriptor>:
 */
tegrabl_error_t
tegrabl_ufs_get_descriptor(uint8_t *pufsdesc,
				uint8_t descidn,
				uint8_t desc_index)
{
    96019f28:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96019f2c:	910003fd 	mov	x29, sp
    96019f30:	a90153f3 	stp	x19, x20, [sp, #16]
    96019f34:	a9025bf5 	stp	x21, x22, [sp, #32]
    96019f38:	aa0003f6 	mov	x22, x0
    96019f3c:	a90363f7 	stp	x23, x24, [sp, #48]
	uint32_t trd_index = 0;
	uint32_t cmd_desc_index = 0;
	uint32_t temp;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    96019f40:	910123a0 	add	x0, x29, #0x48
{
    96019f44:	12001c38 	and	w24, w1, #0xff
    96019f48:	12001c57 	and	w23, w2, #0xff
	uint32_t cmd_desc_index = 0;
    96019f4c:	29097fbf 	stp	wzr, wzr, [x29, #72]
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    96019f50:	97fffd4f 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
    96019f54:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96019f58:	35000860 	cbnz	w0, 9601a064 <tegrabl_ufs_get_descriptor+0x13c>
		return error;
	}
	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    96019f5c:	910133a0 	add	x0, x29, #0x4c
    96019f60:	97fffd71 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
    96019f64:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96019f68:	350007e0 	cbnz	w0, 9601a064 <tegrabl_ufs_get_descriptor+0x13c>
		return error;
	}

	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    96019f6c:	b9404fb3 	ldr	w19, [x29, #76]
    96019f70:	5280c000 	mov	w0, #0x600                 	// #1536
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    96019f74:	d280c002 	mov	x2, #0x600                 	// #1536
    96019f78:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    96019f7c:	9ba07e73 	umull	x19, w19, w0
    96019f80:	b00002a0 	adrp	x0, 9606e000 <__bss_start>
    96019f84:	f9454815 	ldr	x21, [x0, #2704]
    96019f88:	8b1302b4 	add	x20, x21, x19
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    96019f8c:	aa1403e0 	mov	x0, x20
    96019f90:	94003fa6 	bl	96029e28 <memset>
	pquery_req_upiu = (struct query_req_resp_upiu *)
		&plcmd_descriptor->vucd_generic_req_upiu;
	pquery_req_upiu->basic_header.trans_code =
    96019f94:	528002c0 	mov	w0, #0x16                  	// #22
    96019f98:	38336aa0 	strb	w0, [x21, x19]
		UPIU_QUERY_REQUEST_TRANSACTION;
	pquery_req_upiu->basic_header.query_tm_function =
		UPIU_QUERY_FUNC_STD_READ;
	pquery_req_upiu->basic_header.task_tag = 0x36;
    96019f9c:	528006c1 	mov	w1, #0x36                  	// #54
	pquery_req_upiu->basic_header.query_tm_function =
    96019fa0:	52800020 	mov	w0, #0x1                   	// #1
	pquery_req_upiu->basic_header.task_tag = 0x36;
    96019fa4:	39000e81 	strb	w1, [x20, #3]
	*/

	temp = BYTE_SWAP16(255U);
	pquery_req_upiu->vtsf.vdesc_fields.length_bige = (uint16_t)(temp);

	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    96019fa8:	52800023 	mov	w3, #0x1                   	// #1
	pquery_req_upiu->basic_header.query_tm_function =
    96019fac:	39001680 	strb	w0, [x20, #5]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    96019fb0:	52800002 	mov	w2, #0x0                   	// #0
	pquery_req_upiu->vtsf.op_code = TSF_OPCODE_READ_DESC;
    96019fb4:	39003280 	strb	w0, [x20, #12]
	pquery_req_upiu->vtsf.vdesc_fields.length_bige = (uint16_t)(temp);
    96019fb8:	12801fe0 	mov	w0, #0xffffff00            	// #-256
    96019fbc:	79002680 	strh	w0, [x20, #18]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    96019fc0:	294907a0 	ldp	w0, w1, [x29, #72]
	pquery_req_upiu->vtsf.vdesc_fields.desc_idn = descidn;
    96019fc4:	39003698 	strb	w24, [x20, #13]
	pquery_req_upiu->vtsf.vdesc_fields.index = desc_index;
    96019fc8:	39003a97 	strb	w23, [x20, #14]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    96019fcc:	97ffff1a 	bl	96019c34 <tegrabl_ufs_create_trd>
    96019fd0:	2a0003f3 	mov	w19, w0
					DATA_DIR_NIL, 1);
	if (error != TEGRABL_NO_ERROR) {
    96019fd4:	35000480 	cbnz	w0, 9601a064 <tegrabl_ufs_get_descriptor+0x13c>
		return error;
	}

	error = tegrabl_ufs_queue_trd(trd_index, QUERY_REQ_DESC_TIMEOUT);
    96019fd8:	b9404ba0 	ldr	w0, [x29, #72]
    96019fdc:	52984001 	mov	w1, #0xc200                	// #49664
    96019fe0:	72a17d61 	movk	w1, #0xbeb, lsl #16
    96019fe4:	97ffff66 	bl	96019d7c <tegrabl_ufs_queue_trd>
    96019fe8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96019fec:	350003c0 	cbnz	w0, 9601a064 <tegrabl_ufs_get_descriptor+0x13c>
		return error;
	}
	error = tegrabl_ufs_wait_trd_request_complete(trd_index,
    96019ff0:	b9404ba0 	ldr	w0, [x29, #72]
    96019ff4:	52984001 	mov	w1, #0xc200                	// #49664
    96019ff8:	72a17d61 	movk	w1, #0xbeb, lsl #16
    96019ffc:	97fffe0a 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
    9601a000:	2a0003f3 	mov	w19, w0
				QUERY_REQ_DESC_TIMEOUT);
	if (error != TEGRABL_NO_ERROR) {
    9601a004:	35000300 	cbnz	w0, 9601a064 <tegrabl_ufs_get_descriptor+0x13c>
		return error;
	}
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601a008:	52800044 	mov	w4, #0x2                   	// #2
    9601a00c:	d2802403 	mov	x3, #0x120                 	// #288
    9601a010:	91080282 	add	x2, x20, #0x200
    9601a014:	52800001 	mov	w1, #0x0                   	// #0
    9601a018:	528005a0 	mov	w0, #0x2d                  	// #45
    9601a01c:	97ffa69c 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		sizeof(union ucd_generic_resp_upiu),
		TEGRABL_DMA_FROM_DEVICE);
	pquery_resp_upiu = (struct query_req_resp_upiu *)
		&plcmd_descriptor->vucd_generic_resp_upiu;

	memcpy((void *)pufsdesc,
    9601a020:	79441682 	ldrh	w2, [x20, #522]
    9601a024:	91088281 	add	x1, x20, #0x220
    9601a028:	aa1603e0 	mov	x0, x22
    9601a02c:	5ac00442 	rev16	w2, w2
    9601a030:	92403c42 	and	x2, x2, #0xffff
    9601a034:	94003fbc 	bl	96029f24 <memcpy>
		(void *)&(pquery_resp_upiu->data_segment[0]),
		BYTE_SWAP16(pquery_resp_upiu->basic_header.data_seg_len_bige));

	if (pquery_resp_upiu->basic_header.trans_code !=
    9601a038:	39480280 	ldrb	w0, [x20, #512]
    9601a03c:	7100d81f 	cmp	w0, #0x36
    9601a040:	54000100 	b.eq	9601a060 <tegrabl_ufs_get_descriptor+0x138>  // b.none
		UPIU_QUERY_RESPONSE_TRANSACTION) {
		pr_error("Invalid %s response\n", "TRD");
		error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
    9601a044:	528002f3 	mov	w19, #0x17                  	// #23
		pr_error("Invalid %s response\n", "TRD");
    9601a048:	b0000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
		error = TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
    9601a04c:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
		pr_error("Invalid %s response\n", "TRD");
    9601a050:	91341c21 	add	x1, x1, #0xd07
    9601a054:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a058:	91342c00 	add	x0, x0, #0xd0b
    9601a05c:	94002185 	bl	96022670 <tegrabl_printf>
	}

	tegrabl_ufs_free_trd_cmd_desc();
    9601a060:	97ffff3e 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>

	return error;
}
    9601a064:	2a1303e0 	mov	w0, w19
    9601a068:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a06c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601a070:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601a074:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601a078:	d65f03c0 	ret

000000009601a07c <tegrabl_ufs_get_attribute>:
	return error;
}

tegrabl_error_t tegrabl_ufs_get_attribute(uint32_t *pufsattrb, uint32_t attrbidn,
										  uint8_t attrbindex)
{
    9601a07c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9601a080:	910003fd 	mov	x29, sp
    9601a084:	a90153f3 	stp	x19, x20, [sp, #16]
    9601a088:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601a08c:	aa0003f6 	mov	x22, x0
    9601a090:	a90363f7 	stp	x23, x24, [sp, #48]

	uint32_t trd_index = 0;
	uint32_t cmd_desc_index = 0;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601a094:	910123a0 	add	x0, x29, #0x48
{
    9601a098:	2a0103f8 	mov	w24, w1
    9601a09c:	12001c57 	and	w23, w2, #0xff
	uint32_t cmd_desc_index = 0;
    9601a0a0:	29097fbf 	stp	wzr, wzr, [x29, #72]
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601a0a4:	97fffcfa 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
    9601a0a8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a0ac:	35000780 	cbnz	w0, 9601a19c <tegrabl_ufs_get_attribute+0x120>
		return error;
	}
	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    9601a0b0:	910133a0 	add	x0, x29, #0x4c
    9601a0b4:	97fffd1c 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
    9601a0b8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a0bc:	35000700 	cbnz	w0, 9601a19c <tegrabl_ufs_get_attribute+0x120>
		return error;
	}
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a0c0:	b9404fb3 	ldr	w19, [x29, #76]
    9601a0c4:	5280c000 	mov	w0, #0x600                 	// #1536
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a0c8:	d280c002 	mov	x2, #0x600                 	// #1536
    9601a0cc:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a0d0:	9ba07e73 	umull	x19, w19, w0
    9601a0d4:	900002a0 	adrp	x0, 9606e000 <__bss_start>
    9601a0d8:	f9454815 	ldr	x21, [x0, #2704]
    9601a0dc:	8b1302b4 	add	x20, x21, x19
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a0e0:	aa1403e0 	mov	x0, x20
    9601a0e4:	94003f51 	bl	96029e28 <memset>
	pquery_req_upiu =
		(struct query_req_resp_upiu *)&plcmd_descriptor->vucd_generic_req_upiu;
	pquery_req_upiu->basic_header.trans_code = UPIU_QUERY_REQUEST_TRANSACTION;
    9601a0e8:	528002c0 	mov	w0, #0x16                  	// #22
    9601a0ec:	38336aa0 	strb	w0, [x21, x19]
	pquery_req_upiu->basic_header.query_tm_function = UPIU_QUERY_FUNC_STD_READ;
    9601a0f0:	52800020 	mov	w0, #0x1                   	// #1
    9601a0f4:	39001680 	strb	w0, [x20, #5]
	pquery_req_upiu->vtsf.op_code = TSF_OPCODE_READ_ATTRB;
    9601a0f8:	52800060 	mov	w0, #0x3                   	// #3
    9601a0fc:	39003280 	strb	w0, [x20, #12]
	/* IDN i.e Device OR Configuration OR Unit descriptor .. */
	pquery_req_upiu->vtsf.vattrb_fields.attrb_idn = (uint8_t)attrbidn;
	/* Index */
	pquery_req_upiu->vtsf.vattrb_fields.index = attrbindex;

	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, 0, 1);
    9601a100:	294907a0 	ldp	w0, w1, [x29, #72]
	pquery_req_upiu->vtsf.vattrb_fields.attrb_idn = (uint8_t)attrbidn;
    9601a104:	39003698 	strb	w24, [x20, #13]
	pquery_req_upiu->vtsf.vattrb_fields.index = attrbindex;
    9601a108:	39003a97 	strb	w23, [x20, #14]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, 0, 1);
    9601a10c:	52800023 	mov	w3, #0x1                   	// #1
    9601a110:	52800002 	mov	w2, #0x0                   	// #0
    9601a114:	97fffec8 	bl	96019c34 <tegrabl_ufs_create_trd>
    9601a118:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a11c:	35000400 	cbnz	w0, 9601a19c <tegrabl_ufs_get_attribute+0x120>
		return error;
	}

	error = tegrabl_ufs_queue_trd(trd_index, QUERY_REQ_ATTRB_TIMEOUT);
    9601a120:	b9404ba0 	ldr	w0, [x29, #72]
    9601a124:	52942401 	mov	w1, #0xa120                	// #41248
    9601a128:	72a000e1 	movk	w1, #0x7, lsl #16
    9601a12c:	97ffff14 	bl	96019d7c <tegrabl_ufs_queue_trd>
    9601a130:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a134:	35000340 	cbnz	w0, 9601a19c <tegrabl_ufs_get_attribute+0x120>
		return error;
	}
	error =
    9601a138:	b9404ba0 	ldr	w0, [x29, #72]
    9601a13c:	52942401 	mov	w1, #0xa120                	// #41248
    9601a140:	72a000e1 	movk	w1, #0x7, lsl #16
    9601a144:	97fffdb8 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
    9601a148:	2a0003f3 	mov	w19, w0
		tegrabl_ufs_wait_trd_request_complete(trd_index,
			QUERY_REQ_ATTRB_TIMEOUT);
	if (error != TEGRABL_NO_ERROR) {
    9601a14c:	35000280 	cbnz	w0, 9601a19c <tegrabl_ufs_get_attribute+0x120>
		return error;
	}
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601a150:	528005a0 	mov	w0, #0x2d                  	// #45
    9601a154:	52800044 	mov	w4, #0x2                   	// #2
    9601a158:	d2802403 	mov	x3, #0x120                 	// #288
    9601a15c:	91080282 	add	x2, x20, #0x200
    9601a160:	52800001 	mov	w1, #0x0                   	// #0
    9601a164:	97ffa64a 	bl	96003a8c <tegrabl_dma_unmap_buffer>
    9601a168:	b9421680 	ldr	w0, [x20, #532]
    9601a16c:	5ac00800 	rev	w0, w0
		&plcmd_descriptor->vucd_generic_resp_upiu,
		sizeof(union ucd_generic_resp_upiu),
		TEGRABL_DMA_FROM_DEVICE);
	pquery_resp_upiu =
		(struct query_req_resp_upiu *)&plcmd_descriptor->vucd_generic_resp_upiu;
	*pufsattrb = BYTE_SWAP32(pquery_resp_upiu->vtsf.vattrb_fields.value_bige);
    9601a170:	b90002c0 	str	w0, [x22]

	if (pquery_resp_upiu->basic_header.trans_code !=
    9601a174:	39480280 	ldrb	w0, [x20, #512]
    9601a178:	7100d81f 	cmp	w0, #0x36
    9601a17c:	540000e0 	b.eq	9601a198 <tegrabl_ufs_get_attribute+0x11c>  // b.none
		UPIU_QUERY_RESPONSE_TRANSACTION) {
		pr_error("Invalid %s response\n", "attribute");
		error = TEGRABL_ERR_COMMAND_FAILED;
    9601a180:	528002f3 	mov	w19, #0x17                  	// #23
		pr_error("Invalid %s response\n", "attribute");
    9601a184:	b0000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601a188:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a18c:	9133f421 	add	x1, x1, #0xcfd
    9601a190:	91342c00 	add	x0, x0, #0xd0b
    9601a194:	94002137 	bl	96022670 <tegrabl_printf>
	}

	tegrabl_ufs_free_trd_cmd_desc();
    9601a198:	97fffef0 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>

	return error;
}
    9601a19c:	2a1303e0 	mov	w0, w19
    9601a1a0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a1a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601a1a8:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601a1ac:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601a1b0:	d65f03c0 	ret

000000009601a1b4 <tegrabl_ufs_complete_init>:

	return error;
}

tegrabl_error_t tegrabl_ufs_complete_init(void)
{
    9601a1b4:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9601a1b8:	910003fd 	mov	x29, sp
    9601a1bc:	a90153f3 	stp	x19, x20, [sp, #16]
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601a1c0:	910163a0 	add	x0, x29, #0x58
{
    9601a1c4:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601a1c8:	a90363f7 	stp	x23, x24, [sp, #48]
    9601a1cc:	a9046bf9 	stp	x25, x26, [sp, #64]
	uint32_t cmd_desc_index = 0;
    9601a1d0:	290b7fbf 	stp	wzr, wzr, [x29, #88]
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601a1d4:	97fffcae 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
    9601a1d8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a1dc:	350007c0 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    9601a1e0:	910173a0 	add	x0, x29, #0x5c
    9601a1e4:	97fffcd0 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
    9601a1e8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a1ec:	35000740 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a1f0:	b9405fb3 	ldr	w19, [x29, #92]
    9601a1f4:	900002b5 	adrp	x21, 9606e000 <__bss_start>
    9601a1f8:	5280c016 	mov	w22, #0x600                 	// #1536
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a1fc:	d280c002 	mov	x2, #0x600                 	// #1536
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a200:	f9454ab8 	ldr	x24, [x21, #2704]
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a204:	52800001 	mov	w1, #0x0                   	// #0
	pquery_req_upiu->basic_header.trans_code = UPIU_QUERY_REQUEST_TRANSACTION;
    9601a208:	528002d7 	mov	w23, #0x16                  	// #22
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a20c:	9bb67e73 	umull	x19, w19, w22
    9601a210:	8b130314 	add	x20, x24, x19
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a214:	aa1403e0 	mov	x0, x20
    9601a218:	94003f04 	bl	96029e28 <memset>
	pquery_req_upiu->basic_header.query_tm_function = UPIU_QUERY_FUNC_STD_WRITE;
    9601a21c:	12800fc0 	mov	w0, #0xffffff81            	// #-127
	pquery_req_upiu->basic_header.trans_code = UPIU_QUERY_REQUEST_TRANSACTION;
    9601a220:	38336b17 	strb	w23, [x24, x19]
	pquery_req_upiu->basic_header.query_tm_function = UPIU_QUERY_FUNC_STD_WRITE;
    9601a224:	39001680 	strb	w0, [x20, #5]
	pquery_req_upiu->vtsf.op_code = TSF_OPCODE_SET_FLAG;
    9601a228:	528020c0 	mov	w0, #0x106                 	// #262
    9601a22c:	79001a80 	strh	w0, [x20, #12]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601a230:	52800023 	mov	w3, #0x1                   	// #1
	pquery_req_upiu->vtsf.vflag_fields.flag_idn = flagidn;
    9601a234:	39003a9f 	strb	wzr, [x20, #14]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601a238:	52800002 	mov	w2, #0x0                   	// #0
    9601a23c:	294b07a0 	ldp	w0, w1, [x29, #88]
    9601a240:	97fffe7d 	bl	96019c34 <tegrabl_ufs_create_trd>
    9601a244:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a248:	35000460 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	error = tegrabl_ufs_queue_trd(trd_index, QUERY_REQ_FLAG_TIMEOUT);
    9601a24c:	b9405ba0 	ldr	w0, [x29, #88]
    9601a250:	529c2001 	mov	w1, #0xe100                	// #57600
    9601a254:	72a0bea1 	movk	w1, #0x5f5, lsl #16
    9601a258:	97fffec9 	bl	96019d7c <tegrabl_ufs_queue_trd>
    9601a25c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a260:	350003a0 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	error = tegrabl_ufs_wait_trd_request_complete(trd_index,
    9601a264:	b9405ba0 	ldr	w0, [x29, #88]
    9601a268:	529c2001 	mov	w1, #0xe100                	// #57600
    9601a26c:	72a0bea1 	movk	w1, #0x5f5, lsl #16
    9601a270:	97fffd6d 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
    9601a274:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a278:	350002e0 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
		&plcmd_descriptor->vucd_generic_resp_upiu,
    9601a27c:	91080293 	add	x19, x20, #0x200
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601a280:	528005a0 	mov	w0, #0x2d                  	// #45
    9601a284:	aa1303e2 	mov	x2, x19
    9601a288:	52800044 	mov	w4, #0x2                   	// #2
    9601a28c:	d2802403 	mov	x3, #0x120                 	// #288
    9601a290:	52800001 	mov	w1, #0x0                   	// #0
    9601a294:	97ffa5fe 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		error = TEGRABL_ERROR(TEGRABL_ERR_FATAL, 4U);
    9601a298:	52808573 	mov	w19, #0x42b                 	// #1067
	if (flag_readback != 1UL) {
    9601a29c:	39485e80 	ldrb	w0, [x20, #535]
		error = TEGRABL_ERROR(TEGRABL_ERR_FATAL, 4U);
    9601a2a0:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
    9601a2a4:	7100041f 	cmp	w0, #0x1
	if (pquery_resp_upiu->basic_header.trans_code !=
    9601a2a8:	39480280 	ldrb	w0, [x20, #512]
		error = TEGRABL_ERROR(TEGRABL_ERR_FATAL, 4U);
    9601a2ac:	1a9303f3 	csel	w19, wzr, w19, eq  // eq = none
	if (pquery_resp_upiu->basic_header.trans_code !=
    9601a2b0:	7100d81f 	cmp	w0, #0x36
    9601a2b4:	540001e0 	b.eq	9601a2f0 <tegrabl_ufs_complete_init+0x13c>  // b.none
		pr_error("Invalid %s response\n", "set_flag");
    9601a2b8:	b0000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601a2bc:	91307821 	add	x1, x1, #0xc1e
		error = TEGRABL_ERR_COMMAND_FAILED;
    9601a2c0:	528002f3 	mov	w19, #0x17                  	// #23
		pr_error("Invalid %s response\n", "get_flag");
    9601a2c4:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a2c8:	91342c00 	add	x0, x0, #0xd0b
    9601a2cc:	940020e9 	bl	96022670 <tegrabl_printf>
	tegrabl_ufs_free_trd_cmd_desc();
    9601a2d0:	97fffea2 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
			return e;
		}
	} while (flag_device_init != 0UL);
	pr_debug("tegrabl_ufs_complete_init\n");
	return TEGRABL_NO_ERROR;
}
    9601a2d4:	2a1303e0 	mov	w0, w19
    9601a2d8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a2dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601a2e0:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601a2e4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601a2e8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9601a2ec:	d65f03c0 	ret
	tegrabl_ufs_free_trd_cmd_desc();
    9601a2f0:	97fffe9a 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
	if (e != TEGRABL_NO_ERROR) {
    9601a2f4:	35ffff13 	cbnz	w19, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	error = tegrabl_ufs_queue_trd(trd_index, QUERY_REQ_FLAG_TIMEOUT);
    9601a2f8:	529c2018 	mov	w24, #0xe100                	// #57600
	pquery_req_upiu->basic_header.query_tm_function = UPIU_QUERY_FUNC_STD_READ;
    9601a2fc:	5280003a 	mov	w26, #0x1                   	// #1
	error = tegrabl_ufs_queue_trd(trd_index, QUERY_REQ_FLAG_TIMEOUT);
    9601a300:	72a0beb8 	movk	w24, #0x5f5, lsl #16
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601a304:	910163a0 	add	x0, x29, #0x58
	uint32_t cmd_desc_index = 0;
    9601a308:	290b7fbf 	stp	wzr, wzr, [x29, #88]
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601a30c:	97fffc60 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
    9601a310:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a314:	35fffe00 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    9601a318:	910173a0 	add	x0, x29, #0x5c
    9601a31c:	97fffc82 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
    9601a320:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a324:	35fffd80 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a328:	b9405fb3 	ldr	w19, [x29, #92]
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a32c:	d280c002 	mov	x2, #0x600                 	// #1536
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a330:	f9454ab9 	ldr	x25, [x21, #2704]
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a334:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601a338:	9bb67e73 	umull	x19, w19, w22
    9601a33c:	8b130334 	add	x20, x25, x19
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601a340:	aa1403e0 	mov	x0, x20
    9601a344:	94003eb9 	bl	96029e28 <memset>
	pquery_req_upiu->basic_header.trans_code = UPIU_QUERY_REQUEST_TRANSACTION;
    9601a348:	38336b37 	strb	w23, [x25, x19]
	pquery_req_upiu->vtsf.op_code = TSF_OPCODE_READ_FLAG;
    9601a34c:	528020a0 	mov	w0, #0x105                 	// #261
	pquery_req_upiu->basic_header.query_tm_function = UPIU_QUERY_FUNC_STD_READ;
    9601a350:	3900169a 	strb	w26, [x20, #5]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601a354:	52800023 	mov	w3, #0x1                   	// #1
	pquery_req_upiu->vtsf.op_code = TSF_OPCODE_READ_FLAG;
    9601a358:	79001a80 	strh	w0, [x20, #12]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601a35c:	52800002 	mov	w2, #0x0                   	// #0
	pquery_req_upiu->vtsf.vflag_fields.flag_idn = flagidn;
    9601a360:	39003a9f 	strb	wzr, [x20, #14]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601a364:	294b07a0 	ldp	w0, w1, [x29, #88]
    9601a368:	97fffe33 	bl	96019c34 <tegrabl_ufs_create_trd>
    9601a36c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a370:	35fffb20 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	error = tegrabl_ufs_queue_trd(trd_index, QUERY_REQ_FLAG_TIMEOUT);
    9601a374:	b9405ba0 	ldr	w0, [x29, #88]
    9601a378:	2a1803e1 	mov	w1, w24
    9601a37c:	97fffe80 	bl	96019d7c <tegrabl_ufs_queue_trd>
    9601a380:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a384:	35fffa80 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
	error = tegrabl_ufs_wait_trd_request_complete(trd_index,
    9601a388:	b9405ba0 	ldr	w0, [x29, #88]
    9601a38c:	2a1803e1 	mov	w1, w24
    9601a390:	97fffd25 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
    9601a394:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a398:	35fff9e0 	cbnz	w0, 9601a2d4 <tegrabl_ufs_complete_init+0x120>
		&plcmd_descriptor->vucd_generic_resp_upiu,
    9601a39c:	91080299 	add	x25, x20, #0x200
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601a3a0:	528005a0 	mov	w0, #0x2d                  	// #45
    9601a3a4:	aa1903e2 	mov	x2, x25
    9601a3a8:	52800044 	mov	w4, #0x2                   	// #2
    9601a3ac:	d2802403 	mov	x3, #0x120                 	// #288
    9601a3b0:	52800001 	mov	w1, #0x0                   	// #0
    9601a3b4:	97ffa5b6 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	if (pquery_resp_upiu->basic_header.trans_code !=
    9601a3b8:	39480280 	ldrb	w0, [x20, #512]
	*pufsflag = pquery_resp_upiu->vtsf.vflag_fields.flag_value;
    9601a3bc:	39485e82 	ldrb	w2, [x20, #535]
	if (pquery_resp_upiu->basic_header.trans_code !=
    9601a3c0:	7100d81f 	cmp	w0, #0x36
    9601a3c4:	54000080 	b.eq	9601a3d4 <tegrabl_ufs_complete_init+0x220>  // b.none
		pr_error("Invalid %s response\n", "get_flag");
    9601a3c8:	b0000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601a3cc:	91309c21 	add	x1, x1, #0xc27
    9601a3d0:	17ffffbc 	b	9601a2c0 <tegrabl_ufs_complete_init+0x10c>
	tegrabl_ufs_free_trd_cmd_desc();
    9601a3d4:	97fffe61 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
	} while (flag_device_init != 0UL);
    9601a3d8:	35fff962 	cbnz	w2, 9601a304 <tegrabl_ufs_complete_init+0x150>
    9601a3dc:	17ffffbe 	b	9601a2d4 <tegrabl_ufs_complete_init+0x120>

000000009601a3e0 <tegrabl_ufs_hw_init>:
{
    9601a3e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9601a3e4:	910003fd 	mov	x29, sp
    9601a3e8:	a90153f3 	stp	x19, x20, [sp, #16]
    9601a3ec:	f90013f5 	str	x21, [sp, #32]
	error = tegrabl_ufs_clock_init();
    9601a3f0:	940015cc 	bl	9601fb20 <tegrabl_ufs_clock_init>
	if (error != TEGRABL_NO_ERROR) {
    9601a3f4:	340000e0 	cbz	w0, 9601a410 <tegrabl_ufs_hw_init+0x30>
    9601a3f8:	2a0003f3 	mov	w19, w0
		pr_error("Failed configuring UFS CAR error = %u\n", error);
    9601a3fc:	2a0003e1 	mov	w1, w0
    9601a400:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a404:	9136dc00 	add	x0, x0, #0xdb7
		pr_error("Failed enabling HCE = %x\n", error);
    9601a408:	9400209a 	bl	96022670 <tegrabl_printf>
    9601a40c:	14000053 	b	9601a558 <tegrabl_ufs_hw_init+0x178>
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a410:	d2800115 	mov	x21, #0x8                   	// #8
	reg_data = UFS_READ32(HCE);
    9601a414:	d2800693 	mov	x19, #0x34                  	// #52
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a418:	f2a048d5 	movk	x21, #0x246, lsl #16
	reg_data = UFS_READ32(HCE);
    9601a41c:	f2a048b3 	movk	x19, #0x245, lsl #16
	error = tegrabl_ufs_pollfield(HCE, SHIFT_MASK(HCE_HCE),
    9601a420:	52942403 	mov	w3, #0xa120                	// #41248
    9601a424:	52800002 	mov	w2, #0x0                   	// #0
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a428:	b94002a0 	ldr	w0, [x21]
	error = tegrabl_ufs_pollfield(HCE, SHIFT_MASK(HCE_HCE),
    9601a42c:	72a000e3 	movk	w3, #0x7, lsl #16
    9601a430:	52800021 	mov	w1, #0x1                   	// #1
	reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX_UFSHC, SW_EN_CLK_SLCG,
    9601a434:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a438:	b90002a0 	str	w0, [x21]
	reg_data = UFS_READ32(HCE);
    9601a43c:	b9400260 	ldr	w0, [x19]
	reg_data = SET_FLD(HCE_HCE, 0UL, reg_data);
    9601a440:	121f7800 	and	w0, w0, #0xfffffffe
	UFS_WRITE32(HCE, reg_data);
    9601a444:	b9000260 	str	w0, [x19]
	error = tegrabl_ufs_pollfield(HCE, SHIFT_MASK(HCE_HCE),
    9601a448:	2a1303e0 	mov	w0, w19
    9601a44c:	97fffc48 	bl	9601956c <tegrabl_ufs_pollfield>
	if (error != TEGRABL_NO_ERROR) {
    9601a450:	35000960 	cbnz	w0, 9601a57c <tegrabl_ufs_hw_init+0x19c>
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a454:	d2800294 	mov	x20, #0x14                  	// #20
	error = tegrabl_ufs_pollfield(HCE, SHIFT_MASK(HCE_HCE),
    9601a458:	52942403 	mov	w3, #0xa120                	// #41248
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a45c:	f2a048d4 	movk	x20, #0x246, lsl #16
	error = tegrabl_ufs_pollfield(HCE, SHIFT_MASK(HCE_HCE),
    9601a460:	52800022 	mov	w2, #0x1                   	// #1
    9601a464:	72a000e3 	movk	w3, #0x7, lsl #16
    9601a468:	2a0203e1 	mov	w1, w2
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a46c:	b9400280 	ldr	w0, [x20]
	reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX_UFSHC, DEV_CTRL,
    9601a470:	121e7400 	and	w0, w0, #0xfffffffc
	NV_WRITE32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a474:	b9000280 	str	w0, [x20]
	reg_data = UFS_READ32(HCE);
    9601a478:	b9400260 	ldr	w0, [x19]
	reg_data = SET_FLD(HCE_HCE, 1UL, reg_data);
    9601a47c:	32000000 	orr	w0, w0, #0x1
	UFS_WRITE32(HCE, reg_data);
    9601a480:	b9000260 	str	w0, [x19]
	error = tegrabl_ufs_pollfield(HCE, SHIFT_MASK(HCE_HCE),
    9601a484:	2a1303e0 	mov	w0, w19
    9601a488:	97fffc39 	bl	9601956c <tegrabl_ufs_pollfield>
	if (error != TEGRABL_NO_ERROR) {
    9601a48c:	35000780 	cbnz	w0, 9601a57c <tegrabl_ufs_hw_init+0x19c>
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a490:	b94002a0 	ldr	w0, [x21]
	reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX_UFSHC, SW_EN_CLK_SLCG,
    9601a494:	121b7800 	and	w0, w0, #0xffffffef
	NV_WRITE32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE + UFSHC_AUX_UFSHC_SW_EN_CLK_SLCG_0, reg_data);
    9601a498:	b90002a0 	str	w0, [x21]
	reg_data = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a49c:	b9400280 	ldr	w0, [x20]
	reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX_UFSHC, DEV_CTRL,
    9601a4a0:	121e7400 	and	w0, w0, #0xfffffffc
	NV_WRITE32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a4a4:	b9000280 	str	w0, [x20]
	reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX_UFSHC, DEV_CTRL,
    9601a4a8:	32000400 	orr	w0, w0, #0x3
	NV_WRITE32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE +
    9601a4ac:	b9000280 	str	w0, [x20]
	tegrabl_udelay(5);
    9601a4b0:	d28000a0 	mov	x0, #0x5                   	// #5
    9601a4b4:	940015fc 	bl	9601fca4 <tegrabl_udelay>
	reg_data = UFS_READ32(HCLKDIV);
    9601a4b8:	d2801f81 	mov	x1, #0xfc                  	// #252
	reg_data = SET_FLD(HCLKDIV_HCLKDIV, 0xccul, reg_data);
    9601a4bc:	52801982 	mov	w2, #0xcc                  	// #204
	reg_data = UFS_READ32(HCLKDIV);
    9601a4c0:	f2a048a1 	movk	x1, #0x245, lsl #16
    9601a4c4:	b9400020 	ldr	w0, [x1]
	reg_data = SET_FLD(HCLKDIV_HCLKDIV, 0xccul, reg_data);
    9601a4c8:	12103c00 	and	w0, w0, #0xffff0000
    9601a4cc:	2a020000 	orr	w0, w0, w2
	UFS_WRITE32(HCLKDIV, reg_data);
    9601a4d0:	b9000020 	str	w0, [x1]
	tegrabl_udelay(2000);
    9601a4d4:	d280fa00 	mov	x0, #0x7d0                 	// #2000
    9601a4d8:	940015f3 	bl	9601fca4 <tegrabl_udelay>
	error = tegrabl_ufs_link_mphy_setup();
    9601a4dc:	97fffb50 	bl	9601921c <tegrabl_ufs_link_mphy_setup>
    9601a4e0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a4e4:	350003a0 	cbnz	w0, 9601a558 <tegrabl_ufs_hw_init+0x178>
	tegrabl_ufs_setup_trtdm_lists();
    9601a4e8:	97fffd5b 	bl	96019a54 <tegrabl_ufs_setup_trtdm_lists>
	error = tegrabl_ufs_start_tmtr_engines();
    9601a4ec:	97fffdb3 	bl	96019bb8 <tegrabl_ufs_start_tmtr_engines>
    9601a4f0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a4f4:	35000320 	cbnz	w0, 9601a558 <tegrabl_ufs_hw_init+0x178>
	error = tegrabl_ufs_set_activate_time();
    9601a4f8:	97fffcaa 	bl	960197a0 <tegrabl_ufs_set_activate_time>
    9601a4fc:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a500:	350002c0 	cbnz	w0, 9601a558 <tegrabl_ufs_hw_init+0x178>
	error = tegrabl_ufs_chk_if_dev_ready_to_rec_desc();
    9601a504:	97fffe48 	bl	96019e24 <tegrabl_ufs_chk_if_dev_ready_to_rec_desc>
    9601a508:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a50c:	35000260 	cbnz	w0, 9601a558 <tegrabl_ufs_hw_init+0x178>
	if (NV_READ32(HCS) != 0x10ful) {
    9601a510:	d2800600 	mov	x0, #0x30                  	// #48
    9601a514:	f2a048a0 	movk	x0, #0x245, lsl #16
    9601a518:	b9400000 	ldr	w0, [x0]
    9601a51c:	71043c1f 	cmp	w0, #0x10f
    9601a520:	54000260 	b.eq	9601a56c <tegrabl_ufs_hw_init+0x18c>  // b.none
		if (pufs_context->boot_enabled == 0UL) {
    9601a524:	900002a0 	adrp	x0, 9606e000 <__bss_start>
    9601a528:	f9455400 	ldr	x0, [x0, #2728]
    9601a52c:	b9400800 	ldr	w0, [x0, #8]
    9601a530:	350001e0 	cbnz	w0, 9601a56c <tegrabl_ufs_hw_init+0x18c>
    9601a534:	528000b4 	mov	w20, #0x5                   	// #5
				error = tegrabl_ufs_complete_init();
    9601a538:	97ffff1f 	bl	9601a1b4 <tegrabl_ufs_complete_init>
    9601a53c:	2a0003f5 	mov	w21, w0
				if (error != TEGRABL_NO_ERROR) {
    9601a540:	34000160 	cbz	w0, 9601a56c <tegrabl_ufs_hw_init+0x18c>
					tegrabl_mdelay(300);
    9601a544:	d2802580 	mov	x0, #0x12c                 	// #300
    9601a548:	940015f4 	bl	9601fd18 <tegrabl_mdelay>
			while (retry != 0ul) {
    9601a54c:	71000694 	subs	w20, w20, #0x1
    9601a550:	54ffff41 	b.ne	9601a538 <tegrabl_ufs_hw_init+0x158>  // b.any
    9601a554:	2a1503f3 	mov	w19, w21
}
    9601a558:	2a1303e0 	mov	w0, w19
    9601a55c:	f94013f5 	ldr	x21, [sp, #32]
    9601a560:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a564:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601a568:	d65f03c0 	ret
	pr_info("UFS Hardware init successful\n");
    9601a56c:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a570:	91378400 	add	x0, x0, #0xde1
    9601a574:	9400203f 	bl	96022670 <tegrabl_printf>
    9601a578:	17fffff8 	b	9601a558 <tegrabl_ufs_hw_init+0x178>
    9601a57c:	12005c00 	and	w0, w0, #0xffffff
    9601a580:	52ab4013 	mov	w19, #0x5a000000            	// #1509949440
    9601a584:	2a130013 	orr	w19, w0, w19
		pr_error("Failed enabling HCE = %x\n", error);
    9601a588:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a58c:	2a1303e1 	mov	w1, w19
    9601a590:	91380800 	add	x0, x0, #0xe02
    9601a594:	17ffff9d 	b	9601a408 <tegrabl_ufs_hw_init+0x28>

000000009601a598 <tegrabl_ufs_rw_check_complete>:
	return error;
}

tegrabl_error_t
tegrabl_ufs_rw_check_complete(const uint32_t length, uint32_t *pbuffer)
{
    9601a598:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	struct cmd_descriptor *plcmd_descriptor;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	trd_index = tcinfo.trd_index;
	prdt_length = tcinfo.prdt_length;
	plcmd_descriptor = tcinfo.plcmd_descriptor;
    9601a59c:	900002a2 	adrp	x2, 9606e000 <__bss_start>
{
    9601a5a0:	910003fd 	mov	x29, sp
    9601a5a4:	a90363f7 	stp	x23, x24, [sp, #48]
    9601a5a8:	2a0003f7 	mov	w23, w0
	plcmd_descriptor = tcinfo.plcmd_descriptor;
    9601a5ac:	912b6040 	add	x0, x2, #0xad8
{
    9601a5b0:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601a5b4:	aa0103f6 	mov	x22, x1
    9601a5b8:	a90153f3 	stp	x19, x20, [sp, #16]
	direction = tcinfo.direction;
    9601a5bc:	2940e001 	ldp	w1, w24, [x0, #4]
	plcmd_descriptor = tcinfo.plcmd_descriptor;
    9601a5c0:	f9400815 	ldr	x21, [x0, #16]

	error = tegrabl_ufs_wait_trd_request_complete(trd_index, prdt_length * SCSI_REQ_READ_TIMEOUT);
    9601a5c4:	5292d000 	mov	w0, #0x9680                	// #38528
    9601a5c8:	72a01300 	movk	w0, #0x98, lsl #16
    9601a5cc:	1b007c21 	mul	w1, w1, w0
    9601a5d0:	b94ad840 	ldr	w0, [x2, #2776]
    9601a5d4:	97fffc94 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
    9601a5d8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601a5dc:	35000220 	cbnz	w0, 9601a620 <tegrabl_ufs_rw_check_complete+0x88>
		return error;
	}

	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
			&plcmd_descriptor->vucd_generic_resp_upiu,
    9601a5e0:	910802b4 	add	x20, x21, #0x200
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601a5e4:	528005a0 	mov	w0, #0x2d                  	// #45
    9601a5e8:	52800044 	mov	w4, #0x2                   	// #2
    9601a5ec:	d2802403 	mov	x3, #0x120                 	// #288
    9601a5f0:	aa1403e2 	mov	x2, x20
    9601a5f4:	52800001 	mov	w1, #0x0                   	// #0
    9601a5f8:	97ffa525 	bl	96003a8c <tegrabl_dma_unmap_buffer>
			sizeof(union ucd_generic_resp_upiu),
			TEGRABL_DMA_FROM_DEVICE);

	presponse_upiu = (struct response_upiu *)&plcmd_descriptor->vucd_generic_resp_upiu;

	if (presponse_upiu->basic_header.trans_code != UPIU_RESPONSE_TRANSACTION) {
    9601a5fc:	394802a0 	ldrb	w0, [x21, #512]
    9601a600:	7100841f 	cmp	w0, #0x21
    9601a604:	540001a0 	b.eq	9601a638 <tegrabl_ufs_rw_check_complete+0xa0>  // b.none
		pr_error("Invalid %s response\n", "data transfer");
		return TEGRABL_ERR_COMMAND_FAILED;
    9601a608:	528002f3 	mov	w19, #0x17                  	// #23
		pr_error("Invalid %s response\n", "data transfer");
    9601a60c:	d0000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601a610:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a614:	91019c21 	add	x1, x1, #0x67
    9601a618:	91342c00 	add	x0, x0, #0xd0b
    9601a61c:	94002015 	bl	96022670 <tegrabl_printf>
			((direction == 1UL) ? TEGRABL_DMA_TO_DEVICE : TEGRABL_DMA_FROM_DEVICE));

	pr_trace("R/W successfull\n");

	return error;
}
    9601a620:	2a1303e0 	mov	w0, w19
    9601a624:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a628:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601a62c:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601a630:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9601a634:	d65f03c0 	ret
	if (presponse_upiu->basic_header.response != TARGET_SUCCESS) {
    9601a638:	39401a80 	ldrb	w0, [x20, #6]
    9601a63c:	340000e0 	cbz	w0, 9601a658 <tegrabl_ufs_rw_check_complete+0xc0>
		return TEGRABL_ERROR(TEGRABL_ERR_READ_FAILED, 5U);
    9601a640:	5280a333 	mov	w19, #0x519                 	// #1305
		pr_error("UFS command response failure\n");
    9601a644:	d0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601a648:	9101d400 	add	x0, x0, #0x75
    9601a64c:	94002009 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_READ_FAILED, 6U);
    9601a650:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
    9601a654:	17fffff3 	b	9601a620 <tegrabl_ufs_rw_check_complete+0x88>
	if (presponse_upiu->basic_header.status != SCSI_STATUS_GOOD) {
    9601a658:	39401e80 	ldrb	w0, [x20, #7]
    9601a65c:	340000c0 	cbz	w0, 9601a674 <tegrabl_ufs_rw_check_complete+0xdc>
		pr_error("UFS command response not good\n");
    9601a660:	d0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
		return TEGRABL_ERROR(TEGRABL_ERR_READ_FAILED, 6U);
    9601a664:	5280c333 	mov	w19, #0x619                 	// #1561
		pr_error("UFS command response not good\n");
    9601a668:	91025800 	add	x0, x0, #0x96
    9601a66c:	94002001 	bl	96022670 <tegrabl_printf>
    9601a670:	17fffff8 	b	9601a650 <tegrabl_ufs_rw_check_complete+0xb8>
	tegrabl_ufs_free_trd_cmd_desc();
    9601a674:	97fffdb9 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601a678:	7100071f 	cmp	w24, #0x1
    9601a67c:	d3747ee3 	ubfiz	x3, x23, #12, #32
    9601a680:	1a9f07e4 	cset	w4, ne  // ne = any
    9601a684:	aa1603e2 	mov	x2, x22
    9601a688:	11000484 	add	w4, w4, #0x1
    9601a68c:	52800001 	mov	w1, #0x0                   	// #0
    9601a690:	528005a0 	mov	w0, #0x2d                  	// #45
    9601a694:	97ffa4fe 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	return error;
    9601a698:	17ffffe2 	b	9601a620 <tegrabl_ufs_rw_check_complete+0x88>

000000009601a69c <tegrabl_ufs_get_params>:
tegrabl_ufs_get_params(
	const uint32_t param_index,
	struct tegrabl_ufs_platform_params *plat_params,
	struct tegrabl_ufs_params **params)
{
	pufs_params.active_lanes =
    9601a69c:	900002a5 	adrp	x5, 9606e000 <__bss_start>
    9601a6a0:	912b00a3 	add	x3, x5, #0xac0
		NV_DRF_VAL(UFS, FUSE_PARAMS, ACTIVE_LANES, param_index) + 1UL;
    9601a6a4:	d3410404 	ubfx	x4, x0, #1, #1
	pufs_params.pwm_gear =
		NV_DRF_VAL(UFS, FUSE_PARAMS, SPEED, param_index) + 1UL;
	pufs_internal_params.page_size_log2 = UFS_PAGE_SIZE_LOG2 +
    9601a6a8:	900002a6 	adrp	x6, 9606e000 <__bss_start>
		NV_DRF_VAL(UFS, FUSE_PARAMS, ACTIVE_LANES, param_index) + 1UL;
    9601a6ac:	11000484 	add	w4, w4, #0x1
	pufs_params.active_lanes =
    9601a6b0:	b9000464 	str	w4, [x3, #4]
		NV_DRF_VAL(UFS, FUSE_PARAMS, SPEED, param_index) + 1UL;
    9601a6b4:	d3482404 	ubfx	x4, x0, #8, #2
    9601a6b8:	11000484 	add	w4, w4, #0x1
	pufs_params.pwm_gear =
    9601a6bc:	b90ac0a4 	str	w4, [x5, #2752]
	pufs_internal_params.page_size_log2 = UFS_PAGE_SIZE_LOG2 +
    9601a6c0:	912ac0c4 	add	x4, x6, #0xab0
			NV_DRF_VAL(UFS, FUSE_PARAMS, PAGE_SIZE, param_index);
    9601a6c4:	d3461c05 	ubfx	x5, x0, #6, #2
	pufs_internal_params.page_size_log2 = UFS_PAGE_SIZE_LOG2 +
    9601a6c8:	110030a5 	add	w5, w5, #0xc
		NV_DRF_VAL(UFS, FUSE_PARAMS, LUN, param_index);
	pufs_internal_params.boot_enabled =
		NV_DRF_VAL(UFS, FUSE_PARAMS, BOOT_ENABLE, param_index);
	pufs_internal_params.num_lanes =
		NV_DRF_VAL(UFS, FUSE_PARAMS, NUM_LANES, param_index) + 1UL;
	*params = &pufs_params;
    9601a6cc:	f9000043 	str	x3, [x2]
	pufs_internal_params.page_size_log2 = UFS_PAGE_SIZE_LOG2 +
    9601a6d0:	b9000485 	str	w5, [x4, #4]
		NV_DRF_VAL(UFS, FUSE_PARAMS, LUN, param_index);
    9601a6d4:	d3431405 	ubfx	x5, x0, #3, #3
	pufs_internal_params.boot_lun =
    9601a6d8:	b9000885 	str	w5, [x4, #8]
		NV_DRF_VAL(UFS, FUSE_PARAMS, BOOT_ENABLE, param_index);
    9601a6dc:	d3420805 	ubfx	x5, x0, #2, #1
		NV_DRF_VAL(UFS, FUSE_PARAMS, NUM_LANES, param_index) + 1UL;
    9601a6e0:	12000000 	and	w0, w0, #0x1
	pufs_internal_params.boot_enabled =
    9601a6e4:	b90ab0c5 	str	w5, [x6, #2736]
		NV_DRF_VAL(UFS, FUSE_PARAMS, NUM_LANES, param_index) + 1UL;
    9601a6e8:	11000400 	add	w0, w0, #0x1
	pufs_internal_params.num_lanes =
    9601a6ec:	b9000c80 	str	w0, [x4, #12]
	if (plat_params == NULL) {
    9601a6f0:	b50001e1 	cbnz	x1, 9601a72c <tegrabl_ufs_get_params+0x90>
		params->page_align_size = UFS_DEFAULT_PAGE_ALIGN_SIZE;
    9601a6f4:	52820000 	mov	w0, #0x1000                	// #4096
    9601a6f8:	b9000860 	str	w0, [x3, #8]
    9601a6fc:	52808060 	mov	w0, #0x403                 	// #1027
    9601a700:	79001860 	strh	w0, [x3, #12]
		params->max_pwm_mode = UFS_PWM_GEAR_4;
    9601a704:	52800040 	mov	w0, #0x2                   	// #2
    9601a708:	39003860 	strb	w0, [x3, #14]
		params->enable_fast_auto_mode = false;
    9601a70c:	3900407f 	strb	wzr, [x3, #16]
		params->enable_hs_modes = true;
    9601a710:	52800020 	mov	w0, #0x1                   	// #1
    9601a714:	39003c60 	strb	w0, [x3, #15]
		params->enable_hs_rate_b = true;
    9601a718:	39004460 	strb	w0, [x3, #17]
		params->enable_hs_rate_a = false;
    9601a71c:	3900487f 	strb	wzr, [x3, #18]
		params->ufs_init_done = false;
    9601a720:	39004c7f 	strb	wzr, [x3, #19]
		params->skip_hs_mode_switch = false;
    9601a724:	3900507f 	strb	wzr, [x3, #20]

	/* Update the platform params */
	tegrabl_ufs_update_platform_params(plat_params, *params);
}
    9601a728:	d65f03c0 	ret
	params->max_hs_mode = plat_params->max_hs_mode;
    9601a72c:	39400020 	ldrb	w0, [x1]
    9601a730:	39003060 	strb	w0, [x3, #12]
	params->max_pwm_mode = plat_params->max_pwm_mode;
    9601a734:	39400420 	ldrb	w0, [x1, #1]
    9601a738:	39003460 	strb	w0, [x3, #13]
	params->max_active_lanes = plat_params->max_active_lanes;
    9601a73c:	39400820 	ldrb	w0, [x1, #2]
    9601a740:	39003860 	strb	w0, [x3, #14]
	params->page_align_size = plat_params->page_align_size;
    9601a744:	b9400420 	ldr	w0, [x1, #4]
    9601a748:	b9000860 	str	w0, [x3, #8]
	params->enable_hs_modes = plat_params->enable_hs_modes;
    9601a74c:	39402020 	ldrb	w0, [x1, #8]
    9601a750:	39003c60 	strb	w0, [x3, #15]
	params->enable_fast_auto_mode = plat_params->enable_fast_auto_mode;
    9601a754:	39402420 	ldrb	w0, [x1, #9]
    9601a758:	39004060 	strb	w0, [x3, #16]
	params->enable_hs_rate_b = plat_params->enable_hs_rate_b;
    9601a75c:	39402820 	ldrb	w0, [x1, #10]
    9601a760:	39004460 	strb	w0, [x3, #17]
	params->enable_hs_rate_a = plat_params->enable_hs_rate_a;
    9601a764:	39402c20 	ldrb	w0, [x1, #11]
    9601a768:	39004860 	strb	w0, [x3, #18]
	params->ufs_init_done = plat_params->ufs_init_done;
    9601a76c:	39403020 	ldrb	w0, [x1, #12]
    9601a770:	39004c60 	strb	w0, [x3, #19]
	params->skip_hs_mode_switch = plat_params->skip_hs_mode_switch;
    9601a774:	39403420 	ldrb	w0, [x1, #13]
    9601a778:	39005060 	strb	w0, [x3, #20]
}
    9601a77c:	17ffffeb 	b	9601a728 <tegrabl_ufs_get_params+0x8c>

000000009601a780 <tegrabl_ufs_change_num_lanes>:
	*blocksizelog2 = pufs_context->block_size_log2;
	*pagesizelog2 = pufs_context->page_size_log2;
}

tegrabl_error_t tegrabl_ufs_change_num_lanes(const struct tegrabl_ufs_params *params)
{
    9601a780:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	uint32_t data = 0;
	tegrabl_error_t e = TEGRABL_NO_ERROR;

	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601a784:	5282ac22 	mov	w2, #0x1561                	// #5473
    9601a788:	52800001 	mov	w1, #0x0                   	// #0
{
    9601a78c:	910003fd 	mov	x29, sp
    9601a790:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t data = 0;
    9601a794:	9100c3b3 	add	x19, x29, #0x30
{
    9601a798:	aa0003f4 	mov	x20, x0
	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601a79c:	52800020 	mov	w0, #0x1                   	// #1
	uint32_t data = 0;
    9601a7a0:	b81fce7f 	str	wzr, [x19, #-4]!
	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601a7a4:	aa1303e3 	mov	x3, x19
    9601a7a8:	97fffb89 	bl	960195cc <tegrabl_ufs_set_dme_command>
		pa_connected_tx_data_lanes, &data);

	if (e != TEGRABL_NO_ERROR) {
    9601a7ac:	350003e0 	cbnz	w0, 9601a828 <tegrabl_ufs_change_num_lanes+0xa8>
		return e;
	}
	if (data > params->max_active_lanes) {
    9601a7b0:	39403a80 	ldrb	w0, [x20, #14]
    9601a7b4:	b9402fa1 	ldr	w1, [x29, #44]
    9601a7b8:	6b01001f 	cmp	w0, w1
    9601a7bc:	54000042 	b.cs	9601a7c4 <tegrabl_ufs_change_num_lanes+0x44>  // b.hs, b.nlast
		data = params->max_active_lanes;
    9601a7c0:	b9002fa0 	str	w0, [x29, #44]
	}
	pr_trace("pa_connected_tx_data_lanes is %d\n", data);

	e = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601a7c4:	aa1303e3 	mov	x3, x19
    9601a7c8:	5282ac02 	mov	w2, #0x1560                	// #5472
    9601a7cc:	52800001 	mov	w1, #0x0                   	// #0
    9601a7d0:	52800040 	mov	w0, #0x2                   	// #2
    9601a7d4:	97fffb7e 	bl	960195cc <tegrabl_ufs_set_dme_command>
			pa_active_tx_data_lanes, &data);
	if (e != TEGRABL_NO_ERROR) {
    9601a7d8:	35000280 	cbnz	w0, 9601a828 <tegrabl_ufs_change_num_lanes+0xa8>
		return e;
	}

	e = tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601a7dc:	aa1303e3 	mov	x3, x19
    9601a7e0:	5282b022 	mov	w2, #0x1581                	// #5505
    9601a7e4:	52800001 	mov	w1, #0x0                   	// #0
    9601a7e8:	52800020 	mov	w0, #0x1                   	// #1
    9601a7ec:	97fffb78 	bl	960195cc <tegrabl_ufs_set_dme_command>
			pa_connected_rx_data_lanes, &data);

	if (e != TEGRABL_NO_ERROR) {
    9601a7f0:	350001c0 	cbnz	w0, 9601a828 <tegrabl_ufs_change_num_lanes+0xa8>
		return e;
	}

	pr_trace("pa_connected_rx_data_lanes, is %d\n", data);

	e = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601a7f4:	aa1303e3 	mov	x3, x19
    9601a7f8:	5282b002 	mov	w2, #0x1580                	// #5504
    9601a7fc:	52800001 	mov	w1, #0x0                   	// #0
    9601a800:	52800040 	mov	w0, #0x2                   	// #2
    9601a804:	97fffb72 	bl	960195cc <tegrabl_ufs_set_dme_command>
		pa_active_rx_data_lanes, &data);

	if (e != TEGRABL_NO_ERROR) {
    9601a808:	35000100 	cbnz	w0, 9601a828 <tegrabl_ufs_change_num_lanes+0xa8>
		return e;
	}

	data = ((PWRMODE_SLOWAUTO_MODE << 4) | PWRMODE_SLOWAUTO_MODE);
    9601a80c:	52800aa0 	mov	w0, #0x55                  	// #85
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_pwr_mode, &data);
    9601a810:	aa1303e3 	mov	x3, x19
	data = ((PWRMODE_SLOWAUTO_MODE << 4) | PWRMODE_SLOWAUTO_MODE);
    9601a814:	b9002fa0 	str	w0, [x29, #44]
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_pwr_mode, &data);
    9601a818:	5282ae22 	mov	w2, #0x1571                	// #5489
    9601a81c:	52800001 	mov	w1, #0x0                   	// #0
    9601a820:	52800040 	mov	w0, #0x2                   	// #2
    9601a824:	97fffb6a 	bl	960195cc <tegrabl_ufs_set_dme_command>

	if (e == TEGRABL_NO_ERROR) {
		pr_debug("Active lanes set successfully\n");
	}
	return e;
}
    9601a828:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a82c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601a830:	d65f03c0 	ret

000000009601a834 <tegrabl_ufs_change_gear>:

tegrabl_error_t tegrabl_ufs_change_gear(uint32_t gear)
{
    9601a834:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	uint32_t data;
	tegrabl_error_t e = TEGRABL_NO_ERROR;

	data = gear;
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_tx_gear, &data);
    9601a838:	5282ad02 	mov	w2, #0x1568                	// #5480
    9601a83c:	52800001 	mov	w1, #0x0                   	// #0
{
    9601a840:	910003fd 	mov	x29, sp
    9601a844:	a90153f3 	stp	x19, x20, [sp, #16]
	data = gear;
    9601a848:	9100c3b3 	add	x19, x29, #0x30
{
    9601a84c:	2a0003f4 	mov	w20, w0
	data = gear;
    9601a850:	b81fce60 	str	w0, [x19, #-4]!
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_tx_gear, &data);
    9601a854:	52800040 	mov	w0, #0x2                   	// #2
    9601a858:	aa1303e3 	mov	x3, x19
    9601a85c:	97fffb5c 	bl	960195cc <tegrabl_ufs_set_dme_command>
	if (e != TEGRABL_NO_ERROR) {
    9601a860:	350001e0 	cbnz	w0, 9601a89c <tegrabl_ufs_change_gear+0x68>
		return e;
	}

	data = gear;
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_rx_gear, &data);
    9601a864:	aa1303e3 	mov	x3, x19
    9601a868:	5282b062 	mov	w2, #0x1583                	// #5507
    9601a86c:	52800001 	mov	w1, #0x0                   	// #0
    9601a870:	52800040 	mov	w0, #0x2                   	// #2
	data = gear;
    9601a874:	b9002fb4 	str	w20, [x29, #44]
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_rx_gear, &data);
    9601a878:	97fffb55 	bl	960195cc <tegrabl_ufs_set_dme_command>
	if (e != TEGRABL_NO_ERROR) {
    9601a87c:	35000100 	cbnz	w0, 9601a89c <tegrabl_ufs_change_gear+0x68>
	if (e != TEGRABL_NO_ERROR) {
		return e;
	}
#endif

	data =  ((PWRMODE_SLOWAUTO_MODE << 4) | PWRMODE_SLOWAUTO_MODE);
    9601a880:	52800aa0 	mov	w0, #0x55                  	// #85
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_pwr_mode, &data);
    9601a884:	aa1303e3 	mov	x3, x19
	data =  ((PWRMODE_SLOWAUTO_MODE << 4) | PWRMODE_SLOWAUTO_MODE);
    9601a888:	b9002fa0 	str	w0, [x29, #44]
	e = tegrabl_ufs_set_dme_command(DME_SET, 0, pa_pwr_mode, &data);
    9601a88c:	5282ae22 	mov	w2, #0x1571                	// #5489
    9601a890:	52800001 	mov	w1, #0x0                   	// #0
    9601a894:	52800040 	mov	w0, #0x2                   	// #2
    9601a898:	97fffb4d 	bl	960195cc <tegrabl_ufs_set_dme_command>
	return e;
}
    9601a89c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a8a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601a8a4:	d65f03c0 	ret

000000009601a8a8 <tegrabl_ufs_init>:
{
    9601a8a8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	ptx_rx_desc = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    9601a8ac:	d2803002 	mov	x2, #0x180                 	// #384
{
    9601a8b0:	910003fd 	mov	x29, sp
    9601a8b4:	a90153f3 	stp	x19, x20, [sp, #16]
    9601a8b8:	aa0103f4 	mov	x20, x1
    9601a8bc:	a9025bf5 	stp	x21, x22, [sp, #32]
	ptx_rx_desc = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    9601a8c0:	d2808001 	mov	x1, #0x400                 	// #1024
{
    9601a8c4:	aa0003f5 	mov	x21, x0
    9601a8c8:	f9001bf7 	str	x23, [sp, #48]
	ptx_rx_desc = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    9601a8cc:	52800020 	mov	w0, #0x1                   	// #1
    9601a8d0:	94003094 	bl	96026b20 <tegrabl_alloc_align>
    9601a8d4:	900002a2 	adrp	x2, 9606e000 <__bss_start>
    9601a8d8:	f9055040 	str	x0, [x2, #2720]
	if (ptx_rx_desc == NULL) {
    9601a8dc:	b50001a0 	cbnz	x0, 9601a910 <tegrabl_ufs_init+0x68>
		pr_error("Failed to allocate memory for %s\n", "TRD");
    9601a8e0:	b0000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601a8e4:	91341c21 	add	x1, x1, #0xd07
		return error;
    9601a8e8:	52800073 	mov	w19, #0x3                   	// #3
		pr_error("Failed to allocate memory for %s\n", "Command Descriptor");
    9601a8ec:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601a8f0:	913ff400 	add	x0, x0, #0xffd
    9601a8f4:	94001f5f 	bl	96022670 <tegrabl_printf>
}
    9601a8f8:	2a1303e0 	mov	w0, w19
    9601a8fc:	f9401bf7 	ldr	x23, [sp, #48]
    9601a900:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601a904:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601a908:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601a90c:	d65f03c0 	ret
	memset(ptx_rx_desc, 0,
    9601a910:	d2803002 	mov	x2, #0x180                 	// #384
    9601a914:	52800001 	mov	w1, #0x0                   	// #0
    9601a918:	94003d44 	bl	96029e28 <memset>
	pcmd_descriptor = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    9601a91c:	d2860002 	mov	x2, #0x3000                	// #12288
    9601a920:	d2801001 	mov	x1, #0x80                  	// #128
    9601a924:	52800020 	mov	w0, #0x1                   	// #1
    9601a928:	9400307e 	bl	96026b20 <tegrabl_alloc_align>
    9601a92c:	900002a2 	adrp	x2, 9606e000 <__bss_start>
    9601a930:	f9054840 	str	x0, [x2, #2704]
	if (pcmd_descriptor == NULL) {
    9601a934:	b5000080 	cbnz	x0, 9601a944 <tegrabl_ufs_init+0x9c>
		pr_error("Failed to allocate memory for %s\n", "Command Descriptor");
    9601a938:	b0000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601a93c:	91387c21 	add	x1, x1, #0xe1f
    9601a940:	17ffffea 	b	9601a8e8 <tegrabl_ufs_init+0x40>
	memset(pcmd_descriptor, 0,
    9601a944:	d2860002 	mov	x2, #0x3000                	// #12288
    9601a948:	52800001 	mov	w1, #0x0                   	// #0
    9601a94c:	94003d37 	bl	96029e28 <memset>
	ptask_mgmnt_desc = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    9601a950:	d2801802 	mov	x2, #0xc0                  	// #192
    9601a954:	d2808001 	mov	x1, #0x400                 	// #1024
    9601a958:	52800020 	mov	w0, #0x1                   	// #1
    9601a95c:	94003071 	bl	96026b20 <tegrabl_alloc_align>
    9601a960:	900002a2 	adrp	x2, 9606e000 <__bss_start>
    9601a964:	f9054c40 	str	x0, [x2, #2712]
	if (ptask_mgmnt_desc == NULL) {
    9601a968:	b5000080 	cbnz	x0, 9601a978 <tegrabl_ufs_init+0xd0>
		pr_error("Failed to allocate memory for %s\n", "TMD");
    9601a96c:	b0000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601a970:	9138c821 	add	x1, x1, #0xe32
    9601a974:	17ffffdd 	b	9601a8e8 <tegrabl_ufs_init+0x40>
	memset(ptask_mgmnt_desc, 0,
    9601a978:	d2801802 	mov	x2, #0xc0                  	// #192
    9601a97c:	52800001 	mov	w1, #0x0                   	// #0
    9601a980:	94003d2a 	bl	96029e28 <memset>
	pufs_context = context;
    9601a984:	900002b6 	adrp	x22, 9606e000 <__bss_start>
	if (pufs_internal_params.boot_enabled != 0U) {
    9601a988:	900002a0 	adrp	x0, 9606e000 <__bss_start>
    9601a98c:	912ac001 	add	x1, x0, #0xab0
	pufs_context = context;
    9601a990:	f90556d4 	str	x20, [x22, #2728]
	if (pufs_internal_params.boot_enabled != 0U) {
    9601a994:	b94ab002 	ldr	w2, [x0, #2736]
    9601a998:	340003c2 	cbz	w2, 9601aa10 <tegrabl_ufs_init+0x168>
		pufs_context->boot_enabled = 1;
    9601a99c:	52800021 	mov	w1, #0x1                   	// #1
    9601a9a0:	b9000a81 	str	w1, [x20, #8]
		pufs_context->boot_lun = 0xB0;
    9601a9a4:	52801601 	mov	w1, #0xb0                  	// #176
	pufs_context->page_size_log2 = pufs_internal_params.page_size_log2;
    9601a9a8:	912ac000 	add	x0, x0, #0xab0
		pufs_context->boot_lun = pufs_internal_params.boot_lun;
    9601a9ac:	b9001a81 	str	w1, [x20, #24]
	pufs_context->active_lanes = 1;
    9601a9b0:	52800037 	mov	w23, #0x1                   	// #1
    9601a9b4:	b9002697 	str	w23, [x20, #36]
	pufs_context->page_size_log2 = pufs_internal_params.page_size_log2;
    9601a9b8:	b9400401 	ldr	w1, [x0, #4]
	pufs_context->num_lanes = pufs_internal_params.num_lanes;
    9601a9bc:	b9400c00 	ldr	w0, [x0, #12]
    9601a9c0:	b9002a80 	str	w0, [x20, #40]
	if (params->ufs_init_done != true) {
    9601a9c4:	39404ea0 	ldrb	w0, [x21, #19]
	pufs_context->page_size_log2 = pufs_internal_params.page_size_log2;
    9601a9c8:	29038681 	stp	w1, w1, [x20, #28]
	if (params->ufs_init_done != true) {
    9601a9cc:	35000280 	cbnz	w0, 9601aa1c <tegrabl_ufs_init+0x174>
		error = tegrabl_ufs_hw_init(context->init_done);
    9601a9d0:	b9403680 	ldr	w0, [x20, #52]
    9601a9d4:	97fffe83 	bl	9601a3e0 <tegrabl_ufs_hw_init>
    9601a9d8:	2a0003f3 	mov	w19, w0
		tegrabl_clear_err_regs();
    9601a9dc:	97fffa99 	bl	96019440 <tegrabl_clear_err_regs>
		if (error != TEGRABL_NO_ERROR) {
    9601a9e0:	35fff8d3 	cbnz	w19, 9601a8f8 <tegrabl_ufs_init+0x50>
		pufs_context->current_pwm_gear = 1;
    9601a9e4:	f94556c0 	ldr	x0, [x22, #2728]
    9601a9e8:	b9003817 	str	w23, [x0, #56]
		error = tegrabl_ufs_change_num_lanes(params);
    9601a9ec:	aa1503e0 	mov	x0, x21
		context->init_done = 1;
    9601a9f0:	b9003697 	str	w23, [x20, #52]
		error = tegrabl_ufs_change_num_lanes(params);
    9601a9f4:	97ffff63 	bl	9601a780 <tegrabl_ufs_change_num_lanes>
    9601a9f8:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601a9fc:	34000640 	cbz	w0, 9601aac4 <tegrabl_ufs_init+0x21c>
			pr_error("Change lanes failed\n");
    9601aa00:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601aa04:	9138d800 	add	x0, x0, #0xe36
			pr_error("Failed to start TMTR engines\n");
    9601aa08:	94001f1a 	bl	96022670 <tegrabl_printf>
			return error;
    9601aa0c:	17ffffbb 	b	9601a8f8 <tegrabl_ufs_init+0x50>
		pufs_context->boot_lun = pufs_internal_params.boot_lun;
    9601aa10:	b9400821 	ldr	w1, [x1, #8]
		pufs_context->boot_enabled = 0;
    9601aa14:	b9000a9f 	str	wzr, [x20, #8]
    9601aa18:	17ffffe4 	b	9601a9a8 <tegrabl_ufs_init+0x100>
	hib_status = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE + UFSHC_AUX_UFSHC_STATUS_0);
    9601aa1c:	d2800213 	mov	x19, #0x10                  	// #16
		pr_info("Skipping UFS init\n");
    9601aa20:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
	hib_status = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE + UFSHC_AUX_UFSHC_STATUS_0);
    9601aa24:	f2a048d3 	movk	x19, #0x246, lsl #16
		pr_info("Skipping UFS init\n");
    9601aa28:	91393800 	add	x0, x0, #0xe4e
    9601aa2c:	94001f11 	bl	96022670 <tegrabl_printf>
	hib_status = NV_READ32(NV_ADDRESS_MAP_UFSHC_0_UNIPRO_AUX_BASE + UFSHC_AUX_UFSHC_STATUS_0);
    9601aa30:	b9400260 	ldr	w0, [x19]
		if (tegrabl_ufs_get_hibern8_status() == UFSHC_HIBERN8_ENTRY_STATUS) {
    9601aa34:	36000160 	tbz	w0, #0, 9601aa60 <tegrabl_ufs_init+0x1b8>
	uint32_t data = 0x0;
    9601aa38:	910143a3 	add	x3, x29, #0x50
	e = tegrabl_ufs_set_dme_command(DME_HIBERNATE_EXIT, 0, 0, &data);
    9601aa3c:	52800002 	mov	w2, #0x0                   	// #0
    9601aa40:	52800001 	mov	w1, #0x0                   	// #0
    9601aa44:	52800300 	mov	w0, #0x18                  	// #24
	uint32_t data = 0x0;
    9601aa48:	b81fcc7f 	str	wzr, [x3, #-4]!
	e = tegrabl_ufs_set_dme_command(DME_HIBERNATE_EXIT, 0, 0, &data);
    9601aa4c:	97fffae0 	bl	960195cc <tegrabl_ufs_set_dme_command>
	if (e != TEGRABL_NO_ERROR) {
    9601aa50:	34000160 	cbz	w0, 9601aa7c <tegrabl_ufs_init+0x1d4>
		pr_error("Hibernate exit command failed\n");
    9601aa54:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601aa58:	91399000 	add	x0, x0, #0xe64
    9601aa5c:	94001f05 	bl	96022670 <tegrabl_printf>
		tegrabl_ufs_setup_trtdm_lists();
    9601aa60:	97fffbfd 	bl	96019a54 <tegrabl_ufs_setup_trtdm_lists>
		error = tegrabl_ufs_start_tmtr_engines();
    9601aa64:	97fffc55 	bl	96019bb8 <tegrabl_ufs_start_tmtr_engines>
    9601aa68:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601aa6c:	34000220 	cbz	w0, 9601aab0 <tegrabl_ufs_init+0x208>
			pr_error("Failed to start TMTR engines\n");
    9601aa70:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601aa74:	913a1800 	add	x0, x0, #0xe86
    9601aa78:	17ffffe4 	b	9601aa08 <tegrabl_ufs_init+0x160>
	tegrabl_udelay(2);
    9601aa7c:	d2800040 	mov	x0, #0x2                   	// #2
    9601aa80:	94001489 	bl	9601fca4 <tegrabl_udelay>
	UFS_READ32(HCS);
    9601aa84:	d2800600 	mov	x0, #0x30                  	// #48
	e = tegrabl_ufs_pollfield(reg_addr, UFSHC_HIBERN8_MASK, UFSHC_HIBERN8_EXIT_STATUS, IS_UCCS_TIMEOUT);
    9601aa88:	52942403 	mov	w3, #0xa120                	// #41248
	UFS_READ32(HCS);
    9601aa8c:	f2a048a0 	movk	x0, #0x245, lsl #16
	e = tegrabl_ufs_pollfield(reg_addr, UFSHC_HIBERN8_MASK, UFSHC_HIBERN8_EXIT_STATUS, IS_UCCS_TIMEOUT);
    9601aa90:	72a000e3 	movk	w3, #0x7, lsl #16
    9601aa94:	52800002 	mov	w2, #0x0                   	// #0
    9601aa98:	2a1703e1 	mov	w1, w23
	UFS_READ32(HCS);
    9601aa9c:	b9400000 	ldr	w0, [x0]
	e = tegrabl_ufs_pollfield(reg_addr, UFSHC_HIBERN8_MASK, UFSHC_HIBERN8_EXIT_STATUS, IS_UCCS_TIMEOUT);
    9601aaa0:	2a1303e0 	mov	w0, w19
    9601aaa4:	97fffab2 	bl	9601956c <tegrabl_ufs_pollfield>
	if (e != TEGRABL_NO_ERROR) {
    9601aaa8:	34fffdc0 	cbz	w0, 9601aa60 <tegrabl_ufs_init+0x1b8>
    9601aaac:	17ffffea 	b	9601aa54 <tegrabl_ufs_init+0x1ac>
		pufs_context->current_pwm_gear = 4;
    9601aab0:	f94556c0 	ldr	x0, [x22, #2728]
    9601aab4:	52800081 	mov	w1, #0x4                   	// #4
    9601aab8:	b9003801 	str	w1, [x0, #56]
		context->init_done = 1;
    9601aabc:	52800020 	mov	w0, #0x1                   	// #1
    9601aac0:	b9003680 	str	w0, [x20, #52]
	tegrabl_ufs_clear_err_regs();
    9601aac4:	97fffa5f 	bl	96019440 <tegrabl_clear_err_regs>
	uint32_t reference_clk = 1;
    9601aac8:	52800020 	mov	w0, #0x1                   	// #1
    9601aacc:	b9004fa0 	str	w0, [x29, #76]
	if ((params->ufs_init_done == true) && (params->skip_hs_mode_switch)) {
    9601aad0:	39404ea0 	ldrb	w0, [x21, #19]
    9601aad4:	34000060 	cbz	w0, 9601aae0 <tegrabl_ufs_init+0x238>
    9601aad8:	394052a0 	ldrb	w0, [x21, #20]
    9601aadc:	35000160 	cbnz	w0, 9601ab08 <tegrabl_ufs_init+0x260>
	if (params->enable_hs_modes == true) {
    9601aae0:	39403ea0 	ldrb	w0, [x21, #15]
    9601aae4:	34000240 	cbz	w0, 9601ab2c <tegrabl_ufs_init+0x284>
		error = tegrabl_ufs_get_attribute(&reference_clk,
    9601aae8:	52800002 	mov	w2, #0x0                   	// #0
    9601aaec:	52800141 	mov	w1, #0xa                   	// #10
    9601aaf0:	910133a0 	add	x0, x29, #0x4c
    9601aaf4:	97fffd62 	bl	9601a07c <tegrabl_ufs_get_attribute>
		if (error != TEGRABL_NO_ERROR) {
    9601aaf8:	34000100 	cbz	w0, 9601ab18 <tegrabl_ufs_init+0x270>
			pr_error("reference clk retrieval failed\n");
    9601aafc:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601ab00:	913a9c00 	add	x0, x0, #0xea7
    9601ab04:	94001edb 	bl	96022670 <tegrabl_printf>
		pr_info("No UFS mode switch required\n");
    9601ab08:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601ab0c:	913dac00 	add	x0, x0, #0xf6b
    9601ab10:	94001ed8 	bl	96022670 <tegrabl_printf>
    9601ab14:	140000d9 	b	9601ae78 <tegrabl_ufs_init+0x5d0>
		if (reference_clk == 0UL) {
    9601ab18:	b9404fa0 	ldr	w0, [x29, #76]
    9601ab1c:	340001a0 	cbz	w0, 9601ab50 <tegrabl_ufs_init+0x2a8>
			pr_warn("reference clk not programmed..booting in PWM mode\n");
    9601ab20:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601ab24:	913b2800 	add	x0, x0, #0xeca
    9601ab28:	94001ed2 	bl	96022670 <tegrabl_printf>
		error = tegrabl_ufs_change_gear(params->max_pwm_mode);
    9601ab2c:	394036a0 	ldrb	w0, [x21, #13]
    9601ab30:	97ffff41 	bl	9601a834 <tegrabl_ufs_change_gear>
    9601ab34:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601ab38:	34001a00 	cbz	w0, 9601ae78 <tegrabl_ufs_init+0x5d0>
			pr_error("PWM mode switch failed %d\n", error);
    9601ab3c:	2a0003e1 	mov	w1, w0
    9601ab40:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601ab44:	913d3400 	add	x0, x0, #0xf4d
			pr_error("HS mode switch failed %d\n", error);
    9601ab48:	94001eca 	bl	96022670 <tegrabl_printf>
    9601ab4c:	17ffff6b 	b	9601a8f8 <tegrabl_ufs_init+0x50>
	data = 1;
    9601ab50:	52800020 	mov	w0, #0x1                   	// #1
	error = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ab54:	910133a3 	add	x3, x29, #0x4c
	uint32_t data = 0;
    9601ab58:	2908ffbf 	stp	wzr, wzr, [x29, #68]
	error = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ab5c:	52880402 	mov	w2, #0x4020                	// #16416
	data = 1;
    9601ab60:	b9004fa0 	str	w0, [x29, #76]
	error = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ab64:	52800001 	mov	w1, #0x0                   	// #0
    9601ab68:	52800040 	mov	w0, #0x2                   	// #2
    9601ab6c:	97fffa98 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ab70:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ab74:	35000a20 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data = 0x4f;
    9601ab78:	528009e0 	mov	w0, #0x4f                  	// #79
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ab7c:	910133a3 	add	x3, x29, #0x4c
	data = 0x4f;
    9601ab80:	b9004fa0 	str	w0, [x29, #76]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ab84:	5282aa42 	mov	w2, #0x1552                	// #5458
    9601ab88:	52800001 	mov	w1, #0x0                   	// #0
    9601ab8c:	52800040 	mov	w0, #0x2                   	// #2
    9601ab90:	97fffa8f 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ab94:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ab98:	35000900 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ab9c:	910133a3 	add	x3, x29, #0x4c
    9601aba0:	5282aa82 	mov	w2, #0x1554                	// #5460
    9601aba4:	52800001 	mov	w1, #0x0                   	// #0
    9601aba8:	52800040 	mov	w0, #0x2                   	// #2
    9601abac:	97fffa88 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601abb0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601abb4:	35000820 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601abb8:	910133a3 	add	x3, x29, #0x4c
    9601abbc:	5282aac2 	mov	w2, #0x1556                	// #5462
    9601abc0:	52800001 	mov	w1, #0x0                   	// #0
    9601abc4:	52800040 	mov	w0, #0x2                   	// #2
    9601abc8:	97fffa81 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601abcc:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601abd0:	35000740 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data = 0x1fff;
    9601abd4:	5283ffe0 	mov	w0, #0x1fff                	// #8191
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601abd8:	910133a3 	add	x3, x29, #0x4c
	data = 0x1fff;
    9601abdc:	b9004fa0 	str	w0, [x29, #76]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601abe0:	1285f7c2 	mov	w2, #0xffffd041            	// #-12223
    9601abe4:	52800001 	mov	w1, #0x0                   	// #0
    9601abe8:	52800040 	mov	w0, #0x2                   	// #2
    9601abec:	97fffa78 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601abf0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601abf4:	35000620 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data = 0xffff;
    9601abf8:	529fffe0 	mov	w0, #0xffff                	// #65535
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601abfc:	910133a3 	add	x3, x29, #0x4c
	data = 0xffff;
    9601ac00:	b9004fa0 	str	w0, [x29, #76]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac04:	1285f7a2 	mov	w2, #0xffffd042            	// #-12222
    9601ac08:	52800001 	mov	w1, #0x0                   	// #0
    9601ac0c:	52800040 	mov	w0, #0x2                   	// #2
    9601ac10:	97fffa6f 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ac14:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ac18:	35000500 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data = 0x7fff;
    9601ac1c:	528fffe0 	mov	w0, #0x7fff                	// #32767
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac20:	910133a3 	add	x3, x29, #0x4c
	data = 0x7fff;
    9601ac24:	b9004fa0 	str	w0, [x29, #76]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac28:	1285f782 	mov	w2, #0xffffd043            	// #-12221
    9601ac2c:	52800001 	mov	w1, #0x0                   	// #0
    9601ac30:	52800040 	mov	w0, #0x2                   	// #2
    9601ac34:	97fffa66 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ac38:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ac3c:	350003e0 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data = 0x1fff;
    9601ac40:	5283ffe0 	mov	w0, #0x1fff                	// #8191
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac44:	910133a3 	add	x3, x29, #0x4c
	data = 0x1fff;
    9601ac48:	b9004fa0 	str	w0, [x29, #76]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac4c:	5282b602 	mov	w2, #0x15b0                	// #5552
    9601ac50:	52800001 	mov	w1, #0x0                   	// #0
    9601ac54:	52800040 	mov	w0, #0x2                   	// #2
    9601ac58:	97fffa5d 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ac5c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ac60:	350002c0 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data = 0xffff;
    9601ac64:	529fffe0 	mov	w0, #0xffff                	// #65535
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac68:	910133a3 	add	x3, x29, #0x4c
	data = 0xffff;
    9601ac6c:	b9004fa0 	str	w0, [x29, #76]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac70:	5282b622 	mov	w2, #0x15b1                	// #5553
    9601ac74:	52800001 	mov	w1, #0x0                   	// #0
    9601ac78:	52800040 	mov	w0, #0x2                   	// #2
    9601ac7c:	97fffa54 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ac80:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ac84:	350001a0 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data = 0x7fff;
    9601ac88:	528fffe0 	mov	w0, #0x7fff                	// #32767
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac8c:	910133a3 	add	x3, x29, #0x4c
	data = 0x7fff;
    9601ac90:	b9004fa0 	str	w0, [x29, #76]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ac94:	5282b642 	mov	w2, #0x15b2                	// #5554
    9601ac98:	52800001 	mov	w1, #0x0                   	// #0
    9601ac9c:	52800040 	mov	w0, #0x2                   	// #2
    9601aca0:	97fffa4b 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601aca4:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601aca8:	34000100 	cbz	w0, 9601acc8 <tegrabl_ufs_init+0x420>
		pr_error("unipro_post_linkup failed\n");
    9601acac:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601acb0:	913c0000 	add	x0, x0, #0xf00
    9601acb4:	94001e6f 	bl	96022670 <tegrabl_printf>
			pr_error("HS mode switch failed %d\n", error);
    9601acb8:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601acbc:	2a1303e1 	mov	w1, w19
    9601acc0:	913e8c00 	add	x0, x0, #0xfa3
    9601acc4:	17ffffa1 	b	9601ab48 <tegrabl_ufs_init+0x2a0>
	error =  tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601acc8:	910113a3 	add	x3, x29, #0x44
    9601accc:	1285ebe2 	mov	w2, #0xffffd0a0            	// #-12128
    9601acd0:	52800001 	mov	w1, #0x0                   	// #0
    9601acd4:	52800020 	mov	w0, #0x1                   	// #1
    9601acd8:	97fffa3d 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601acdc:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ace0:	35fffec0 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	reg_data |= set_tref(vs_debugsaveconfigtime_st_sct);
    9601ace4:	b94047a0 	ldr	w0, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ace8:	910113a3 	add	x3, x29, #0x44
    9601acec:	1285ebe2 	mov	w2, #0xffffd0a0            	// #-12128
    9601acf0:	52800001 	mov	w1, #0x0                   	// #0
	reg_data |= set_tref(vs_debugsaveconfigtime_st_sct);
    9601acf4:	121b6800 	and	w0, w0, #0xffffffe0
    9601acf8:	321e0800 	orr	w0, w0, #0x1c
    9601acfc:	b90047a0 	str	w0, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ad00:	52800040 	mov	w0, #0x2                   	// #2
    9601ad04:	97fffa32 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ad08:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ad0c:	35fffd60 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	error =  tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601ad10:	910113a3 	add	x3, x29, #0x44
    9601ad14:	5282b0e2 	mov	w2, #0x1587                	// #5511
    9601ad18:	52800001 	mov	w1, #0x0                   	// #0
    9601ad1c:	52800020 	mov	w0, #0x1                   	// #1
    9601ad20:	97fffa2b 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ad24:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ad28:	35fffc80 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	if (reg_data > params->max_hs_mode) {
    9601ad2c:	394032a0 	ldrb	w0, [x21, #12]
    9601ad30:	b94047a1 	ldr	w1, [x29, #68]
    9601ad34:	6b01001f 	cmp	w0, w1
    9601ad38:	54000042 	b.cs	9601ad40 <tegrabl_ufs_init+0x498>  // b.hs, b.nlast
		reg_data = params->max_hs_mode;
    9601ad3c:	b90047a0 	str	w0, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ad40:	910113a3 	add	x3, x29, #0x44
    9601ad44:	5282b062 	mov	w2, #0x1583                	// #5507
    9601ad48:	52800001 	mov	w1, #0x0                   	// #0
    9601ad4c:	52800040 	mov	w0, #0x2                   	// #2
    9601ad50:	97fffa1f 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ad54:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ad58:	35fffb00 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	error =  tegrabl_ufs_set_dme_command(DME_PEER_GET, 0,
    9601ad5c:	910113a3 	add	x3, x29, #0x44
    9601ad60:	5282b0e2 	mov	w2, #0x1587                	// #5511
    9601ad64:	52800001 	mov	w1, #0x0                   	// #0
    9601ad68:	52800060 	mov	w0, #0x3                   	// #3
	gear = reg_data;
    9601ad6c:	b94047b6 	ldr	w22, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_PEER_GET, 0,
    9601ad70:	97fffa17 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ad74:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ad78:	35fffa00 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	if (reg_data > params->max_hs_mode) {
    9601ad7c:	394032a0 	ldrb	w0, [x21, #12]
    9601ad80:	b94047a1 	ldr	w1, [x29, #68]
    9601ad84:	6b01001f 	cmp	w0, w1
    9601ad88:	54000042 	b.cs	9601ad90 <tegrabl_ufs_init+0x4e8>  // b.hs, b.nlast
		reg_data = params->max_hs_mode;
    9601ad8c:	b90047a0 	str	w0, [x29, #68]
	error = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ad90:	910113a3 	add	x3, x29, #0x44
    9601ad94:	5282ad02 	mov	w2, #0x1568                	// #5480
    9601ad98:	52800001 	mov	w1, #0x0                   	// #0
    9601ad9c:	52800040 	mov	w0, #0x2                   	// #2
    9601ada0:	97fffa0b 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ada4:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ada8:	35fff880 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	reg_data = 1;
    9601adac:	52800034 	mov	w20, #0x1                   	// #1
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601adb0:	910113a3 	add	x3, x29, #0x44
    9601adb4:	5282b082 	mov	w2, #0x1584                	// #5508
    9601adb8:	52800001 	mov	w1, #0x0                   	// #0
    9601adbc:	52800040 	mov	w0, #0x2                   	// #2
	reg_data = 1;
    9601adc0:	b90047b4 	str	w20, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601adc4:	97fffa02 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601adc8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601adcc:	35fff760 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601add0:	910113a3 	add	x3, x29, #0x44
    9601add4:	5282ad22 	mov	w2, #0x1569                	// #5481
    9601add8:	52800001 	mov	w1, #0x0                   	// #0
    9601addc:	52800040 	mov	w0, #0x2                   	// #2
	reg_data = 1;
    9601ade0:	b90047b4 	str	w20, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ade4:	97fff9fa 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ade8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601adec:	35fff660 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	error =  tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601adf0:	910113a3 	add	x3, x29, #0x44
    9601adf4:	5282ad42 	mov	w2, #0x156a                	// #5482
    9601adf8:	52800001 	mov	w1, #0x0                   	// #0
    9601adfc:	2a1403e0 	mov	w0, w20
	reg_data = 0;
    9601ae00:	b90047bf 	str	wzr, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_GET, 0,
    9601ae04:	97fff9f2 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ae08:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ae0c:	35fff560 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	if (params->enable_hs_rate_b == true) {
    9601ae10:	394046a0 	ldrb	w0, [x21, #17]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ae14:	910113a3 	add	x3, x29, #0x44
		reg_data = UFS_HS_RATE_B;
    9601ae18:	52800055 	mov	w21, #0x2                   	// #2
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ae1c:	5282ad42 	mov	w2, #0x156a                	// #5482
		reg_data = UFS_HS_RATE_B;
    9601ae20:	7100001f 	cmp	w0, #0x0
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ae24:	52800001 	mov	w1, #0x0                   	// #0
		reg_data = UFS_HS_RATE_B;
    9601ae28:	1a9412b4 	csel	w20, w21, w20, ne  // ne = any
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ae2c:	2a1503e0 	mov	w0, w21
		reg_data = UFS_HS_RATE_B;
    9601ae30:	b90047b4 	str	w20, [x29, #68]
	error =  tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ae34:	97fff9e6 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ae38:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ae3c:	35fff3e0 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	data =  ((PWRMODE_FAST_MODE << 4) | PWRMODE_FAST_MODE);
    9601ae40:	910143a3 	add	x3, x29, #0x50
    9601ae44:	52800220 	mov	w0, #0x11                  	// #17
	error = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ae48:	5282ae22 	mov	w2, #0x1571                	// #5489
    9601ae4c:	52800001 	mov	w1, #0x0                   	// #0
	data =  ((PWRMODE_FAST_MODE << 4) | PWRMODE_FAST_MODE);
    9601ae50:	b81f8c60 	str	w0, [x3, #-8]!
	error = tegrabl_ufs_set_dme_command(DME_SET, 0,
    9601ae54:	2a1503e0 	mov	w0, w21
    9601ae58:	97fff9dd 	bl	960195cc <tegrabl_ufs_set_dme_command>
    9601ae5c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601ae60:	35fff2c0 	cbnz	w0, 9601acb8 <tegrabl_ufs_init+0x410>
	pr_info("Shifted to HS mode %d Gear %d successfully\n",
    9601ae64:	b94047a1 	ldr	w1, [x29, #68]
    9601ae68:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601ae6c:	2a1603e2 	mov	w2, w22
    9601ae70:	913c7800 	add	x0, x0, #0xf1e
    9601ae74:	94001dff 	bl	96022670 <tegrabl_printf>
	pr_info("UFS init successful\n");
    9601ae78:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
	return TEGRABL_NO_ERROR;
    9601ae7c:	52800013 	mov	w19, #0x0                   	// #0
	pr_info("UFS init successful\n");
    9601ae80:	913e2c00 	add	x0, x0, #0xf8b
    9601ae84:	94001dfb 	bl	96022670 <tegrabl_printf>
	return TEGRABL_NO_ERROR;
    9601ae88:	17fffe9c 	b	9601a8f8 <tegrabl_ufs_init+0x50>

000000009601ae8c <tegrabl_ufs_test_unit_ready>:
	return TEGRABL_NO_ERROR;
}

tegrabl_error_t
tegrabl_ufs_test_unit_ready(uint8_t lun)
{
    9601ae8c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9601ae90:	910003fd 	mov	x29, sp
    9601ae94:	a90153f3 	stp	x19, x20, [sp, #16]
    9601ae98:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601ae9c:	12001c16 	and	w22, w0, #0xff
	struct cmd_descriptor *plcmd_descriptor = NULL;
	struct command_upiu *pcommand_upiu = NULL;
	struct response_upiu *presponse_upiu;

	uint32_t trd_index = 0;
	uint32_t cmd_desc_index = 0;
    9601aea0:	29097fbf 	stp	wzr, wzr, [x29, #72]
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601aea4:	910123a0 	add	x0, x29, #0x48
    9601aea8:	97fff979 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
	if (error != TEGRABL_NO_ERROR) {
    9601aeac:	350007a0 	cbnz	w0, 9601afa0 <tegrabl_ufs_test_unit_ready+0x114>
		return error;
	}

	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    9601aeb0:	910133a0 	add	x0, x29, #0x4c
    9601aeb4:	97fff99c 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
	if (error != TEGRABL_NO_ERROR) {
    9601aeb8:	35000740 	cbnz	w0, 9601afa0 <tegrabl_ufs_test_unit_ready+0x114>
		return error;
	}

	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601aebc:	b9404fb4 	ldr	w20, [x29, #76]
    9601aec0:	5280c000 	mov	w0, #0x600                 	// #1536
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601aec4:	d280c002 	mov	x2, #0x600                 	// #1536
    9601aec8:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601aecc:	9ba07e94 	umull	x20, w20, w0
    9601aed0:	900002a0 	adrp	x0, 9606e000 <__bss_start>
    9601aed4:	f9454815 	ldr	x21, [x0, #2704]
    9601aed8:	8b1402b3 	add	x19, x21, x20
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601aedc:	aa1303e0 	mov	x0, x19
    9601aee0:	94003bd2 	bl	96029e28 <memset>

	pcommand_upiu =
		(struct command_upiu *)&plcmd_descriptor->vucd_generic_req_upiu;

	pcommand_upiu->basic_header.trans_code = UPIU_COMMAND_TRANSACTION;
    9601aee4:	52800020 	mov	w0, #0x1                   	// #1
    9601aee8:	38346aa0 	strb	w0, [x21, x20]
	pcommand_upiu->basic_header.lun = lun;
    9601aeec:	39000a76 	strb	w22, [x19, #2]
	pcommand_upiu->basic_header.cmd_set_type = UPIU_COMMAND_SET_SCSI;
	pcommand_upiu->expected_data_tx_len_bige = 0;
	pcommand_upiu->cdb[0] = 0x0;

	error = tegrabl_ufs_create_trd(trd_index,
    9601aef0:	52800023 	mov	w3, #0x1                   	// #1
	pcommand_upiu->basic_header.cmd_set_type = UPIU_COMMAND_SET_SCSI;
    9601aef4:	3900127f 	strb	wzr, [x19, #4]
	error = tegrabl_ufs_create_trd(trd_index,
    9601aef8:	52800002 	mov	w2, #0x0                   	// #0
    9601aefc:	294907a0 	ldp	w0, w1, [x29, #72]
	pcommand_upiu->expected_data_tx_len_bige = 0;
    9601af00:	b9000e7f 	str	wzr, [x19, #12]
	pcommand_upiu->cdb[0] = 0x0;
    9601af04:	3900427f 	strb	wzr, [x19, #16]
	error = tegrabl_ufs_create_trd(trd_index,
    9601af08:	97fffb4b 	bl	96019c34 <tegrabl_ufs_create_trd>
			cmd_desc_index, DATA_DIR_NIL, 1);
	if (error != TEGRABL_NO_ERROR) {
    9601af0c:	350004a0 	cbnz	w0, 9601afa0 <tegrabl_ufs_test_unit_ready+0x114>
		return error;
	}

	error = tegrabl_ufs_queue_trd(trd_index, REQUEST_SENSE_TIMEOUT);
    9601af10:	b9404ba0 	ldr	w0, [x29, #72]
    9601af14:	52942401 	mov	w1, #0xa120                	// #41248
    9601af18:	72a000e1 	movk	w1, #0x7, lsl #16
    9601af1c:	97fffb98 	bl	96019d7c <tegrabl_ufs_queue_trd>
	if (error != TEGRABL_NO_ERROR) {
    9601af20:	35000400 	cbnz	w0, 9601afa0 <tegrabl_ufs_test_unit_ready+0x114>
		return error;
	}

	error = tegrabl_ufs_wait_trd_request_complete(trd_index,
    9601af24:	b9404ba0 	ldr	w0, [x29, #72]
    9601af28:	52942401 	mov	w1, #0xa120                	// #41248
    9601af2c:	72a000e1 	movk	w1, #0x7, lsl #16
    9601af30:	97fffa3d 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
			REQUEST_SENSE_TIMEOUT);

	if (error != TEGRABL_NO_ERROR) {
    9601af34:	35000360 	cbnz	w0, 9601afa0 <tegrabl_ufs_test_unit_ready+0x114>
		return error;
	}

	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
		&plcmd_descriptor->vucd_generic_resp_upiu,
    9601af38:	91080274 	add	x20, x19, #0x200
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601af3c:	528005a0 	mov	w0, #0x2d                  	// #45
    9601af40:	52800044 	mov	w4, #0x2                   	// #2
    9601af44:	d2802403 	mov	x3, #0x120                 	// #288
    9601af48:	aa1403e2 	mov	x2, x20
    9601af4c:	52800001 	mov	w1, #0x0                   	// #0
    9601af50:	97ffa2cf 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		TEGRABL_DMA_FROM_DEVICE);

	presponse_upiu =
		(struct response_upiu *)&plcmd_descriptor->vucd_generic_resp_upiu;

	if (presponse_upiu->basic_header.trans_code !=
    9601af54:	39480260 	ldrb	w0, [x19, #512]
    9601af58:	7100841f 	cmp	w0, #0x21
    9601af5c:	540000c0 	b.eq	9601af74 <tegrabl_ufs_test_unit_ready+0xe8>  // b.none
		UPIU_RESPONSE_TRANSACTION) {
		pr_error("Invalid %s response\n", "unit ready command");
    9601af60:	d0000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601af64:	b0000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601af68:	9105f421 	add	x1, x1, #0x17d
    9601af6c:	91342c00 	add	x0, x0, #0xd0b
    9601af70:	94001dc0 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERR_COMMAND_FAILED;
	}

	if (presponse_upiu->basic_header.status == SCSI_STATUS_GOOD) {
    9601af74:	39401e80 	ldrb	w0, [x20, #7]
    9601af78:	340001c0 	cbz	w0, 9601afb0 <tegrabl_ufs_test_unit_ready+0x124>
		error = TEGRABL_NO_ERROR;
	} else if (presponse_upiu->basic_header.status == SCSI_STATUS_BUSY) {
    9601af7c:	7100201f 	cmp	w0, #0x8
    9601af80:	540001c0 	b.eq	9601afb8 <tegrabl_ufs_test_unit_ready+0x12c>  // b.none
		error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U);
	} else if (presponse_upiu->basic_header.status == SCSI_STATUS_CHECK_CONDITION) {
		error = TEGRABL_ERROR(TEGRABL_ERR_CONDITION, 0U);
	} else {
		error = TEGRABL_ERROR(TEGRABL_ERR_UNKNOWN_STATUS, 0U);
    9601af84:	7100081f 	cmp	w0, #0x2
    9601af88:	528005a0 	mov	w0, #0x2d                  	// #45
    9601af8c:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
    9601af90:	1a801400 	cinc	w0, w0, eq  // eq = none
    9601af94:	b9003fa0 	str	w0, [x29, #60]
	}
	tegrabl_ufs_free_trd_cmd_desc();
    9601af98:	97fffb70 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
    9601af9c:	b9403fa0 	ldr	w0, [x29, #60]
	return error;
}
    9601afa0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601afa4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601afa8:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601afac:	d65f03c0 	ret
		error = TEGRABL_NO_ERROR;
    9601afb0:	52800000 	mov	w0, #0x0                   	// #0
    9601afb4:	17fffff8 	b	9601af94 <tegrabl_ufs_test_unit_ready+0x108>
		error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U);
    9601afb8:	528001c0 	mov	w0, #0xe                   	// #14
    9601afbc:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
    9601afc0:	17fffff5 	b	9601af94 <tegrabl_ufs_test_unit_ready+0x108>

000000009601afc4 <tegrabl_ufs_request_sense>:

/* This is used to request sense data. */
tegrabl_error_t tegrabl_ufs_request_sense(uint8_t lun)
{
    9601afc4:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9601afc8:	910003fd 	mov	x29, sp
    9601afcc:	a90153f3 	stp	x19, x20, [sp, #16]
    9601afd0:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601afd4:	12001c16 	and	w22, w0, #0xff
	struct cmd_descriptor *plcmd_descriptor = NULL;
	struct command_upiu *pcommand_upiu = NULL;
	struct response_upiu *presponse_upiu;

	uint32_t trd_index = 0;
	uint32_t cmd_desc_index = 0;
    9601afd8:	29097fbf 	stp	wzr, wzr, [x29, #72]
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601afdc:	910123a0 	add	x0, x29, #0x48
    9601afe0:	97fff92b 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
	if (error != TEGRABL_NO_ERROR) {
    9601afe4:	350007e0 	cbnz	w0, 9601b0e0 <tegrabl_ufs_request_sense+0x11c>
		return error;
	}

	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    9601afe8:	910133a0 	add	x0, x29, #0x4c
    9601afec:	97fff94e 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
	if (error != TEGRABL_NO_ERROR) {
    9601aff0:	35000780 	cbnz	w0, 9601b0e0 <tegrabl_ufs_request_sense+0x11c>
		return error;
	}

	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601aff4:	b9404fb4 	ldr	w20, [x29, #76]
    9601aff8:	5280c000 	mov	w0, #0x600                 	// #1536
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601affc:	d280c002 	mov	x2, #0x600                 	// #1536
    9601b000:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b004:	9ba07e94 	umull	x20, w20, w0
    9601b008:	f0000280 	adrp	x0, 9606e000 <__bss_start>
    9601b00c:	f9454815 	ldr	x21, [x0, #2704]
    9601b010:	8b1402b3 	add	x19, x21, x20
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601b014:	aa1303e0 	mov	x0, x19
    9601b018:	94003b84 	bl	96029e28 <memset>
	pcommand_upiu =
		(struct command_upiu *)&plcmd_descriptor->vucd_generic_req_upiu;

	pcommand_upiu->basic_header.trans_code = UPIU_COMMAND_TRANSACTION;
    9601b01c:	52800020 	mov	w0, #0x1                   	// #1
    9601b020:	38346aa0 	strb	w0, [x21, x20]
	pcommand_upiu->basic_header.lun = lun;
    9601b024:	39000a76 	strb	w22, [x19, #2]
	pcommand_upiu->basic_header.cmd_set_type = UPIU_COMMAND_SET_SCSI;
	pcommand_upiu->expected_data_tx_len_bige = 0;
	pcommand_upiu->cdb[0] = 0x3;
    9601b028:	52800060 	mov	w0, #0x3                   	// #3
    9601b02c:	39004260 	strb	w0, [x19, #16]
	pcommand_upiu->cdb[4] = 0x0;

	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601b030:	52800023 	mov	w3, #0x1                   	// #1
    9601b034:	294907a0 	ldp	w0, w1, [x29, #72]
	pcommand_upiu->basic_header.cmd_set_type = UPIU_COMMAND_SET_SCSI;
    9601b038:	3900127f 	strb	wzr, [x19, #4]
	pcommand_upiu->expected_data_tx_len_bige = 0;
    9601b03c:	b9000e7f 	str	wzr, [x19, #12]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601b040:	52800002 	mov	w2, #0x0                   	// #0
	pcommand_upiu->cdb[4] = 0x0;
    9601b044:	3900527f 	strb	wzr, [x19, #20]
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index, DATA_DIR_NIL, 1);
    9601b048:	97fffafb 	bl	96019c34 <tegrabl_ufs_create_trd>
	if (error != TEGRABL_NO_ERROR) {
    9601b04c:	350004a0 	cbnz	w0, 9601b0e0 <tegrabl_ufs_request_sense+0x11c>
		return error;
	}

	error = tegrabl_ufs_queue_trd(trd_index, REQUEST_SENSE_TIMEOUT);
    9601b050:	b9404ba0 	ldr	w0, [x29, #72]
    9601b054:	52942401 	mov	w1, #0xa120                	// #41248
    9601b058:	72a000e1 	movk	w1, #0x7, lsl #16
    9601b05c:	97fffb48 	bl	96019d7c <tegrabl_ufs_queue_trd>
	if (error != TEGRABL_NO_ERROR) {
    9601b060:	35000400 	cbnz	w0, 9601b0e0 <tegrabl_ufs_request_sense+0x11c>
		return error;
	}
	error = tegrabl_ufs_wait_trd_request_complete(trd_index,
    9601b064:	b9404ba0 	ldr	w0, [x29, #72]
    9601b068:	52942401 	mov	w1, #0xa120                	// #41248
    9601b06c:	72a000e1 	movk	w1, #0x7, lsl #16
    9601b070:	97fff9ed 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
			REQUEST_SENSE_TIMEOUT);

	if (error != TEGRABL_NO_ERROR) {
    9601b074:	35000360 	cbnz	w0, 9601b0e0 <tegrabl_ufs_request_sense+0x11c>
		return error;
	}

	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
		&plcmd_descriptor->vucd_generic_resp_upiu,
    9601b078:	91080274 	add	x20, x19, #0x200
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601b07c:	528005a0 	mov	w0, #0x2d                  	// #45
    9601b080:	52800044 	mov	w4, #0x2                   	// #2
    9601b084:	d2802403 	mov	x3, #0x120                 	// #288
    9601b088:	aa1403e2 	mov	x2, x20
    9601b08c:	52800001 	mov	w1, #0x0                   	// #0
    9601b090:	97ffa27f 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		TEGRABL_DMA_FROM_DEVICE);

	presponse_upiu =
		(struct response_upiu *)&plcmd_descriptor->vucd_generic_resp_upiu;

	if (presponse_upiu->basic_header.trans_code !=
    9601b094:	39480260 	ldrb	w0, [x19, #512]
    9601b098:	7100841f 	cmp	w0, #0x21
    9601b09c:	540000c0 	b.eq	9601b0b4 <tegrabl_ufs_request_sense+0xf0>  // b.none
		UPIU_RESPONSE_TRANSACTION) {
		pr_error("Invalid %s response\n", "request-sense command");
    9601b0a0:	b0000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601b0a4:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b0a8:	91014421 	add	x1, x1, #0x51
    9601b0ac:	91342c00 	add	x0, x0, #0xd0b
    9601b0b0:	94001d70 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERR_COMMAND_FAILED;
	}

	if (presponse_upiu->basic_header.status == SCSI_STATUS_GOOD) {
    9601b0b4:	39401e80 	ldrb	w0, [x20, #7]
    9601b0b8:	340001c0 	cbz	w0, 9601b0f0 <tegrabl_ufs_request_sense+0x12c>
		error = TEGRABL_NO_ERROR;
	} else if (presponse_upiu->basic_header.status == SCSI_STATUS_BUSY) {
    9601b0bc:	7100201f 	cmp	w0, #0x8
    9601b0c0:	540001c0 	b.eq	9601b0f8 <tegrabl_ufs_request_sense+0x134>  // b.none
		error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U);
	} else if (presponse_upiu->basic_header.status == SCSI_STATUS_CHECK_CONDITION) {
		error = TEGRABL_ERROR(TEGRABL_ERR_CONDITION, 0U);
	} else {
		error = TEGRABL_ERROR(TEGRABL_ERR_UNKNOWN_STATUS, 0U);
    9601b0c4:	7100081f 	cmp	w0, #0x2
    9601b0c8:	528005a0 	mov	w0, #0x2d                  	// #45
    9601b0cc:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
    9601b0d0:	1a801400 	cinc	w0, w0, eq  // eq = none
    9601b0d4:	b9003fa0 	str	w0, [x29, #60]
	}
	tegrabl_ufs_free_trd_cmd_desc();
    9601b0d8:	97fffb20 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
    9601b0dc:	b9403fa0 	ldr	w0, [x29, #60]

	return error;
}
    9601b0e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b0e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601b0e8:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601b0ec:	d65f03c0 	ret
		error = TEGRABL_NO_ERROR;
    9601b0f0:	52800000 	mov	w0, #0x0                   	// #0
    9601b0f4:	17fffff8 	b	9601b0d4 <tegrabl_ufs_request_sense+0x110>
		error = TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U);
    9601b0f8:	528001c0 	mov	w0, #0xe                   	// #14
    9601b0fc:	72ab4b40 	movk	w0, #0x5a5a, lsl #16
    9601b100:	17fffff5 	b	9601b0d4 <tegrabl_ufs_request_sense+0x110>

000000009601b104 <tegrabl_ufs_check_lun_ready>:
	return security_lu;
}

static tegrabl_error_t
tegrabl_ufs_check_lun_ready(uint8_t lun, uint8_t *is_lun_ready)
{
    9601b104:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9601b108:	910003fd 	mov	x29, sp
    9601b10c:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint8_t retries = 10;
	do {
		error = tegrabl_ufs_test_unit_ready(lun);
		if (error == TEGRABL_NO_ERROR) {
			lun_ready = 1;
		} else if (error == TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U)) {
    9601b110:	528001d6 	mov	w22, #0xe                   	// #14
{
    9601b114:	a90363f7 	stp	x23, x24, [sp, #48]
    9601b118:	12001c15 	and	w21, w0, #0xff
			retries--;
			tegrabl_udelay(10);
		} else if (error == TEGRABL_ERROR(TEGRABL_ERR_CONDITION, 0U)) {
    9601b11c:	528005d8 	mov	w24, #0x2e                  	// #46
{
    9601b120:	aa0103f7 	mov	x23, x1
    9601b124:	a90153f3 	stp	x19, x20, [sp, #16]
		} else if (error == TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U)) {
    9601b128:	72ab4b56 	movk	w22, #0x5a5a, lsl #16
	uint8_t retries = 10;
    9601b12c:	52800153 	mov	w19, #0xa                   	// #10
		} else if (error == TEGRABL_ERROR(TEGRABL_ERR_CONDITION, 0U)) {
    9601b130:	72ab4b58 	movk	w24, #0x5a5a, lsl #16
		error = tegrabl_ufs_test_unit_ready(lun);
    9601b134:	2a1503e0 	mov	w0, w21
    9601b138:	97ffff55 	bl	9601ae8c <tegrabl_ufs_test_unit_ready>
    9601b13c:	2a0003f4 	mov	w20, w0
		if (error == TEGRABL_NO_ERROR) {
    9601b140:	340004a0 	cbz	w0, 9601b1d4 <tegrabl_ufs_check_lun_ready+0xd0>
		} else if (error == TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U)) {
    9601b144:	6b16001f 	cmp	w0, w22
    9601b148:	54000181 	b.ne	9601b178 <tegrabl_ufs_check_lun_ready+0x74>  // b.any
			retries--;
    9601b14c:	51000673 	sub	w19, w19, #0x1
			tegrabl_udelay(10);
    9601b150:	d2800140 	mov	x0, #0xa                   	// #10
			retries--;
    9601b154:	12001e73 	and	w19, w19, #0xff
			tegrabl_udelay(10);
    9601b158:	940012d3 	bl	9601fca4 <tegrabl_udelay>
			error = tegrabl_ufs_request_sense(lun);
			if ((error == TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U)) || (error == TEGRABL_NO_ERROR)) {
				retries--;
				continue;
    9601b15c:	52800001 	mov	w1, #0x0                   	// #0
			}
		} else {
			pr_error("UFS test-unit-ready error\n");
			return error;
		}
	} while ((lun_ready == 0U) && (retries > 0U));
    9601b160:	52000020 	eor	w0, w1, #0x1
    9601b164:	7100027f 	cmp	w19, #0x0
    9601b168:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    9601b16c:	35fffe40 	cbnz	w0, 9601b134 <tegrabl_ufs_check_lun_ready+0x30>
	*is_lun_ready = lun_ready;
    9601b170:	390002e1 	strb	w1, [x23]
	return error;
    9601b174:	1400000f 	b	9601b1b0 <tegrabl_ufs_check_lun_ready+0xac>
		} else if (error == TEGRABL_ERROR(TEGRABL_ERR_CONDITION, 0U)) {
    9601b178:	6b18001f 	cmp	w0, w24
    9601b17c:	54000261 	b.ne	9601b1c8 <tegrabl_ufs_check_lun_ready+0xc4>  // b.any
			error = tegrabl_ufs_request_sense(lun);
    9601b180:	2a1503e0 	mov	w0, w21
    9601b184:	97ffff90 	bl	9601afc4 <tegrabl_ufs_request_sense>
    9601b188:	2a0003f4 	mov	w20, w0
			if ((error == TEGRABL_ERROR(TEGRABL_ERR_BUSY, 0U)) || (error == TEGRABL_NO_ERROR)) {
    9601b18c:	6b16001f 	cmp	w0, w22
    9601b190:	54000040 	b.eq	9601b198 <tegrabl_ufs_check_lun_ready+0x94>  // b.none
    9601b194:	35000080 	cbnz	w0, 9601b1a4 <tegrabl_ufs_check_lun_ready+0xa0>
				retries--;
    9601b198:	51000673 	sub	w19, w19, #0x1
    9601b19c:	12001e73 	and	w19, w19, #0xff
    9601b1a0:	17ffffef 	b	9601b15c <tegrabl_ufs_check_lun_ready+0x58>
				pr_error("Request sense error\n");
    9601b1a4:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b1a8:	912ef800 	add	x0, x0, #0xbbe
			pr_error("UFS test-unit-ready error\n");
    9601b1ac:	94001d31 	bl	96022670 <tegrabl_printf>
}
    9601b1b0:	2a1403e0 	mov	w0, w20
    9601b1b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b1b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601b1bc:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601b1c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9601b1c4:	d65f03c0 	ret
			pr_error("UFS test-unit-ready error\n");
    9601b1c8:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b1cc:	912f5800 	add	x0, x0, #0xbd6
    9601b1d0:	17fffff7 	b	9601b1ac <tegrabl_ufs_check_lun_ready+0xa8>
			lun_ready = 1;
    9601b1d4:	52800021 	mov	w1, #0x1                   	// #1
    9601b1d8:	17ffffe2 	b	9601b160 <tegrabl_ufs_check_lun_ready+0x5c>

000000009601b1dc <tegrabl_ufs_rw_common>:
{
    9601b1dc:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    9601b1e0:	910003fd 	mov	x29, sp
    9601b1e4:	a90153f3 	stp	x19, x20, [sp, #16]
    9601b1e8:	2a0203f4 	mov	w20, w2
    9601b1ec:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601b1f0:	a90363f7 	stp	x23, x24, [sp, #48]
    9601b1f4:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601b1f8:	12001cb9 	and	w25, w5, #0xff
    9601b1fc:	a90573fb 	stp	x27, x28, [sp, #80]
	uint8_t ufs_security_protocol = (lun == UFS_UPIU_RPMB_WLUN) ?
    9601b200:	7103133f 	cmp	w25, #0xc4
	uint8_t lun_ready = 0;
    9601b204:	3901dfbf 	strb	wzr, [x29, #119]
	uint8_t ufs_security_protocol = (lun == UFS_UPIU_RPMB_WLUN) ?
    9601b208:	52801d9a 	mov	w26, #0xec                  	// #236
	uint32_t cmd_desc_index = 0;
    9601b20c:	290f7fbf 	stp	wzr, wzr, [x29, #120]
	uint8_t ufs_security_protocol = (lun == UFS_UPIU_RPMB_WLUN) ?
    9601b210:	1a9a13fa 	csel	w26, wzr, w26, ne  // ne = any
	if (length > MAX_PRDT_LENGTH*MAX_BLOCKS) {
    9601b214:	7110029f 	cmp	w20, #0x400
    9601b218:	540001e9 	b.ls	9601b254 <tegrabl_ufs_rw_common+0x78>  // b.plast
		return error;
    9601b21c:	52800013 	mov	w19, #0x0                   	// #0
		pr_error("# of blocks %u > %u\n", length,
    9601b220:	52808002 	mov	w2, #0x400                 	// #1024
    9601b224:	2a1403e1 	mov	w1, w20
    9601b228:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601b22c:	9102e000 	add	x0, x0, #0xb8
    9601b230:	94001d10 	bl	96022670 <tegrabl_printf>
}
    9601b234:	2a1303e0 	mov	w0, w19
    9601b238:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b23c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601b240:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601b244:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601b248:	a94573fb 	ldp	x27, x28, [sp, #80]
    9601b24c:	a8c87bfd 	ldp	x29, x30, [sp], #128
    9601b250:	d65f03c0 	ret
    9601b254:	2a0003f5 	mov	w21, w0
    9601b258:	aa0303f8 	mov	x24, x3
    9601b25c:	2a0403fb 	mov	w27, w4
	error = tegrabl_ufs_check_lun_ready(lun, &lun_ready);
    9601b260:	9101dfa1 	add	x1, x29, #0x77
    9601b264:	2a1903e0 	mov	w0, w25
    9601b268:	97ffffa7 	bl	9601b104 <tegrabl_ufs_check_lun_ready>
    9601b26c:	2a0003f3 	mov	w19, w0
	if ((error != TEGRABL_NO_ERROR) || (lun_ready != 1UL)) {
    9601b270:	35000080 	cbnz	w0, 9601b280 <tegrabl_ufs_rw_common+0xa4>
    9601b274:	3941dfbc 	ldrb	w28, [x29, #119]
    9601b278:	7100079f 	cmp	w28, #0x1
    9601b27c:	540000e0 	b.eq	9601b298 <tegrabl_ufs_rw_common+0xbc>  // b.none
		pr_error("LUN %d not ready! error code=%x\n", lun, error);
    9601b280:	2a1303e2 	mov	w2, w19
    9601b284:	2a1903e1 	mov	w1, w25
    9601b288:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601b28c:	91034000 	add	x0, x0, #0xd0
    9601b290:	94001cf8 	bl	96022670 <tegrabl_printf>
		return error;
    9601b294:	17ffffe8 	b	9601b234 <tegrabl_ufs_rw_common+0x58>
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601b298:	9101e3a0 	add	x0, x29, #0x78
    9601b29c:	97fff87c 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
    9601b2a0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b2a4:	340000a0 	cbz	w0, 9601b2b8 <tegrabl_ufs_rw_common+0xdc>
		pr_error("UFS: Tx/Rx Descriptor not available.\n");
    9601b2a8:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601b2ac:	9103d000 	add	x0, x0, #0xf4
		pr_error("UFS: Command Descriptor not available\n");
    9601b2b0:	94001cf0 	bl	96022670 <tegrabl_printf>
		return error;
    9601b2b4:	17ffffe0 	b	9601b234 <tegrabl_ufs_rw_common+0x58>
	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    9601b2b8:	9101f3a0 	add	x0, x29, #0x7c
    9601b2bc:	97fff89a 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
    9601b2c0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b2c4:	34000080 	cbz	w0, 9601b2d4 <tegrabl_ufs_rw_common+0xf8>
		pr_error("UFS: Command Descriptor not available\n");
    9601b2c8:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601b2cc:	91047400 	add	x0, x0, #0x11d
    9601b2d0:	17fffff8 	b	9601b2b0 <tegrabl_ufs_rw_common+0xd4>
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b2d4:	b9407fa0 	ldr	w0, [x29, #124]
    9601b2d8:	f0000283 	adrp	x3, 9606e000 <__bss_start>
    9601b2dc:	5280c017 	mov	w23, #0x600                 	// #1536
	uint32_t direction = ((opcode == SCSI_WRITE10_OPCODE) ||
    9601b2e0:	7100ab7f 	cmp	w27, #0x2a
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b2e4:	f9454864 	ldr	x4, [x3, #2704]
	uint32_t direction = ((opcode == SCSI_WRITE10_OPCODE) ||
    9601b2e8:	1a9f17f6 	cset	w22, eq  // eq = none
		(opcode == SCSI_SECURITY_PROTOCOL_OUT_OPCODE)) ? 1UL : 0UL;
    9601b2ec:	7102d77f 	cmp	w27, #0xb5
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601b2f0:	d280c002 	mov	x2, #0x600                 	// #1536
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b2f4:	9bb77c17 	umull	x23, w0, w23
	uint32_t direction = ((opcode == SCSI_WRITE10_OPCODE) ||
    9601b2f8:	1a9f16d6 	csinc	w22, w22, wzr, ne  // ne = any
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601b2fc:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b300:	f90037a4 	str	x4, [x29, #104]
    9601b304:	8b170093 	add	x19, x4, x23
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601b308:	aa1303e0 	mov	x0, x19
    9601b30c:	94003ac7 	bl	96029e28 <memset>
	pcommand_upiu->basic_header.trans_code = UPIU_COMMAND_TRANSACTION;
    9601b310:	f94037a4 	ldr	x4, [x29, #104]
	pcommand_upiu->basic_header.flags = 1U << ((direction == 1UL) ?
    9601b314:	710002df 	cmp	w22, #0x0
		BYTE_SWAP32(length * (1UL << pufs_context->page_size_log2));
    9601b318:	f0000282 	adrp	x2, 9606e000 <__bss_start>
	pcommand_upiu->basic_header.flags = 1U << ((direction == 1UL) ?
    9601b31c:	52800401 	mov	w1, #0x20                  	// #32
    9601b320:	52800800 	mov	w0, #0x40                  	// #64
    9601b324:	1a810000 	csel	w0, w0, w1, eq  // eq = none
	pcommand_upiu->basic_header.trans_code = UPIU_COMMAND_TRANSACTION;
    9601b328:	3837689c 	strb	w28, [x4, x23]
    9601b32c:	f0000283 	adrp	x3, 9606e000 <__bss_start>
	pcommand_upiu->basic_header.flags = 1U << ((direction == 1UL) ?
    9601b330:	39000660 	strb	w0, [x19, #1]
	pcommand_upiu->basic_header.task_tag = ((direction == 1UL) ? 0x14U : 0x15U);
    9601b334:	520002c0 	eor	w0, w22, #0x1
		BYTE_SWAP32(length * (1UL << pufs_context->page_size_log2));
    9601b338:	f9455441 	ldr	x1, [x2, #2728]
	pcommand_upiu->basic_header.task_tag = ((direction == 1UL) ? 0x14U : 0x15U);
    9601b33c:	11005000 	add	w0, w0, #0x14
	pcommand_upiu->basic_header.lun = lun;
    9601b340:	39000a79 	strb	w25, [x19, #2]
	if (lun != UFS_UPIU_RPMB_WLUN) {
    9601b344:	7103133f 	cmp	w25, #0xc4
	pcommand_upiu->basic_header.task_tag = ((direction == 1UL) ? 0x14U : 0x15U);
    9601b348:	39000e60 	strb	w0, [x19, #3]
		BYTE_SWAP32(length * (1UL << pufs_context->page_size_log2));
    9601b34c:	2a1403e0 	mov	w0, w20
	pcommand_upiu->basic_header.cmd_set_type = UPIU_COMMAND_SET_SCSI;
    9601b350:	3900127f 	strb	wzr, [x19, #4]
    9601b354:	aa0303f7 	mov	x23, x3
		BYTE_SWAP32(length * (1UL << pufs_context->page_size_log2));
    9601b358:	b9402021 	ldr	w1, [x1, #32]
	pcommand_upiu->cdb[0] = (uint8_t)opcode;
    9601b35c:	3900427b 	strb	w27, [x19, #16]
    9601b360:	aa0203fb 	mov	x27, x2
		BYTE_SWAP32(length * (1UL << pufs_context->page_size_log2));
    9601b364:	9ac12000 	lsl	x0, x0, x1
    9601b368:	5ac00800 	rev	w0, w0
	pcommand_upiu->expected_data_tx_len_bige =
    9601b36c:	b9000e60 	str	w0, [x19, #12]
    9601b370:	d3483e81 	ubfx	x1, x20, #8, #8
    9601b374:	12001e80 	and	w0, w20, #0xff
	if (lun != UFS_UPIU_RPMB_WLUN) {
    9601b378:	54000220 	b.eq	9601b3bc <tegrabl_ufs_rw_common+0x1e0>  // b.none
		pcommand_upiu->cdb[4] = (uint8_t)(block >> 8) & 0xFFU;
    9601b37c:	53087ea2 	lsr	w2, w21, #8
    9601b380:	39005262 	strb	w2, [x19, #20]
		pcommand_upiu->cdb[5] = (uint8_t)(block & 0xFFU);
    9601b384:	39005675 	strb	w21, [x19, #21]
		pcommand_upiu->cdb[3] = (uint8_t)(block >> 16) & 0xFFU;
    9601b388:	53107ea2 	lsr	w2, w21, #16
		pcommand_upiu->cdb[2] = (uint8_t)(block >> 24) & 0xFFU;
    9601b38c:	53187eb5 	lsr	w21, w21, #24
    9601b390:	39004a75 	strb	w21, [x19, #18]
		pcommand_upiu->cdb[3] = (uint8_t)(block >> 16) & 0xFFU;
    9601b394:	39004e62 	strb	w2, [x19, #19]
		pcommand_upiu->cdb[7] = (uint8_t)(length >> 8) & 0xFFU;
    9601b398:	39005e61 	strb	w1, [x19, #23]
		pcommand_upiu->cdb[8] = (uint8_t)length & 0xFFU;
    9601b39c:	39006260 	strb	w0, [x19, #24]
		pcommand_upiu->cdb[9] = 0;
    9601b3a0:	3900667f 	strb	wzr, [x19, #25]
    9601b3a4:	710002df 	cmp	w22, #0x0
    9601b3a8:	5280005a 	mov	w26, #0x2                   	// #2
	pcommand_upiu->basic_header.task_tag = ((direction == 1UL) ? 0x14U : 0x15U);
    9601b3ac:	d2800019 	mov	x25, #0x0                   	// #0
    9601b3b0:	1a9f075a 	csinc	w26, w26, wzr, eq  // eq = none
    9601b3b4:	d280081c 	mov	x28, #0x40                  	// #64
    9601b3b8:	14000021 	b	9601b43c <tegrabl_ufs_rw_common+0x260>
		pcommand_upiu->cdb[9] = (uint8_t)length & 0xFFU;
    9601b3bc:	39006660 	strb	w0, [x19, #25]
		pcommand_upiu->expected_data_tx_len_bige = BYTE_SWAP32(length);
    9601b3c0:	53185e80 	lsl	w0, w20, #8
    9601b3c4:	12101c00 	and	w0, w0, #0xff0000
		pcommand_upiu->cdb[2] = 0;
    9601b3c8:	52802002 	mov	w2, #0x100                 	// #256
		pcommand_upiu->expected_data_tx_len_bige = BYTE_SWAP32(length);
    9601b3cc:	2a146000 	orr	w0, w0, w20, lsl #24
    9601b3d0:	b9000e60 	str	w0, [x19, #12]
		pcommand_upiu->cdb[1] = ufs_security_protocol;
    9601b3d4:	3900467a 	strb	w26, [x19, #17]
		pcommand_upiu->cdb[2] = 0;
    9601b3d8:	79002662 	strh	w2, [x19, #18]
		pcommand_upiu->cdb[6] = (uint8_t)(length >> 24) & 0xFFU;
    9601b3dc:	79002e7f 	strh	wzr, [x19, #22]
		pcommand_upiu->cdb[8] = (uint8_t)(length >> 8) & 0xFFU;
    9601b3e0:	39006261 	strb	w1, [x19, #24]
    9601b3e4:	17fffff0 	b	9601b3a4 <tegrabl_ufs_rw_common+0x1c8>
    9601b3e8:	7101029f 	cmp	w20, #0x40
		address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    9601b3ec:	8b194b02 	add	x2, x24, x25, lsl #18
    9601b3f0:	9a9c9295 	csel	x21, x20, x28, ls  // ls = plast
    9601b3f4:	52800001 	mov	w1, #0x0                   	// #0
    9601b3f8:	2a1a03e4 	mov	w4, w26
    9601b3fc:	528005a0 	mov	w0, #0x2d                  	// #45
    9601b400:	53144ea3 	lsl	w3, w21, #12
    9601b404:	97ffa1b0 	bl	96003ac4 <tegrabl_dma_map_buffer>
    9601b408:	d37c7f21 	ubfiz	x1, x25, #4, #32
			((uintptr_t)(address & 0xffffffffCUL)) & ~(0x3UL);
    9601b40c:	121e7402 	and	w2, w0, #0xfffffffc
    9601b410:	8b010261 	add	x1, x19, x1
			((uintptr_t)(address >> 32) & 0xffffffffUL);
    9601b414:	d360fc00 	lsr	x0, x0, #32
    9601b418:	91000739 	add	x25, x25, #0x1
		pending_length -= num_blocks;
    9601b41c:	4b150294 	sub	w20, w20, w21
		plcmd_descriptor->vprdt[prdt_length].dw1 =
    9601b420:	b9040420 	str	w0, [x1, #1028]
			(num_blocks * (1UL << pufs_context->page_size_log2)) - 1U;
    9601b424:	f9455760 	ldr	x0, [x27, #2728]
		plcmd_descriptor->vprdt[prdt_length].dw0 =
    9601b428:	b9040022 	str	w2, [x1, #1024]
			(num_blocks * (1UL << pufs_context->page_size_log2)) - 1U;
    9601b42c:	b9402000 	ldr	w0, [x0, #32]
    9601b430:	9ac022b5 	lsl	x21, x21, x0
    9601b434:	510006b5 	sub	w21, w21, #0x1
		plcmd_descriptor->vprdt[prdt_length].dw3 =
    9601b438:	b9040c35 	str	w21, [x1, #1036]
		(pending_length > 0U) && (prdt_length < MAX_PRDT_LENGTH);
    9601b43c:	7100029f 	cmp	w20, #0x0
	for (prdt_length = 0;
    9601b440:	7a4f1b22 	ccmp	w25, #0xf, #0x2, ne  // ne = any
    9601b444:	54fffd29 	b.ls	9601b3e8 <tegrabl_ufs_rw_common+0x20c>  // b.plast
	error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    9601b448:	294f07a0 	ldp	w0, w1, [x29, #120]
    9601b44c:	520002c2 	eor	w2, w22, #0x1
    9601b450:	2a1903e3 	mov	w3, w25
    9601b454:	11000442 	add	w2, w2, #0x1
    9601b458:	97fff9f7 	bl	96019c34 <tegrabl_ufs_create_trd>
    9601b45c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b460:	35ffeea0 	cbnz	w0, 9601b234 <tegrabl_ufs_rw_common+0x58>
	error = tegrabl_ufs_queue_trd(trd_index,
    9601b464:	5292d001 	mov	w1, #0x9680                	// #38528
    9601b468:	b9407ba0 	ldr	w0, [x29, #120]
    9601b46c:	72a01301 	movk	w1, #0x98, lsl #16
    9601b470:	1b017f21 	mul	w1, w25, w1
    9601b474:	97fffa42 	bl	96019d7c <tegrabl_ufs_queue_trd>
    9601b478:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b47c:	35ffedc0 	cbnz	w0, 9601b234 <tegrabl_ufs_rw_common+0x58>
	tcinfo.trd_index = trd_index;
    9601b480:	f0000281 	adrp	x1, 9606e000 <__bss_start>
    9601b484:	b9407ba2 	ldr	w2, [x29, #120]
    9601b488:	912b6020 	add	x0, x1, #0xad8
	tcinfo.plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b48c:	5280c003 	mov	w3, #0x600                 	// #1536
	tcinfo.trd_index = trd_index;
    9601b490:	b90ad822 	str	w2, [x1, #2776]
	tcinfo.plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b494:	f9454ae2 	ldr	x2, [x23, #2704]
    9601b498:	b9407fa1 	ldr	w1, [x29, #124]
	uint32_t direction = ((opcode == SCSI_WRITE10_OPCODE) ||
    9601b49c:	2900d819 	stp	w25, w22, [x0, #4]
	tcinfo.plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b4a0:	d503201f 	nop
    9601b4a4:	9ba30821 	umaddl	x1, w1, w3, x2
    9601b4a8:	f9000801 	str	x1, [x0, #16]
	return error;
    9601b4ac:	17ffff62 	b	9601b234 <tegrabl_ufs_rw_common+0x58>

000000009601b4b0 <tegrabl_ufs_xfer>:
{
    9601b4b0:	2a0103e6 	mov	w6, w1
	error = tegrabl_ufs_rw_common(block, page, length, pbuffer,
    9601b4b4:	2a0003e5 	mov	w5, w0
{
    9601b4b8:	2a0203e1 	mov	w1, w2
	error = tegrabl_ufs_rw_common(block, page, length, pbuffer,
    9601b4bc:	2a0603e0 	mov	w0, w6
{
    9601b4c0:	2a0303e2 	mov	w2, w3
    9601b4c4:	aa0403e3 	mov	x3, x4
	error = tegrabl_ufs_rw_common(block, page, length, pbuffer,
    9601b4c8:	52800504 	mov	w4, #0x28                  	// #40
    9601b4cc:	17ffff44 	b	9601b1dc <tegrabl_ufs_rw_common>

000000009601b4d0 <tegrabl_ufs_read>:
{
    9601b4d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9601b4d4:	2a0103e6 	mov	w6, w1
	error = tegrabl_ufs_rw_common(block, page, length, pbuffer, SCSI_READ10_OPCODE, lun_id);
    9601b4d8:	2a0003e5 	mov	w5, w0
{
    9601b4dc:	2a0203e1 	mov	w1, w2
    9601b4e0:	910003fd 	mov	x29, sp
    9601b4e4:	f90013f5 	str	x21, [sp, #32]
    9601b4e8:	aa0403f5 	mov	x21, x4
    9601b4ec:	a90153f3 	stp	x19, x20, [sp, #16]
	error = tegrabl_ufs_rw_common(block, page, length, pbuffer, SCSI_READ10_OPCODE, lun_id);
    9601b4f0:	2a0303e2 	mov	w2, w3
{
    9601b4f4:	2a0303f4 	mov	w20, w3
	error = tegrabl_ufs_rw_common(block, page, length, pbuffer, SCSI_READ10_OPCODE, lun_id);
    9601b4f8:	2a0603e0 	mov	w0, w6
    9601b4fc:	52800504 	mov	w4, #0x28                  	// #40
    9601b500:	aa1503e3 	mov	x3, x21
    9601b504:	97ffff36 	bl	9601b1dc <tegrabl_ufs_rw_common>
	if (error != TEGRABL_NO_ERROR) {
    9601b508:	350001e0 	cbnz	w0, 9601b544 <tegrabl_ufs_read+0x74>
	error = tegrabl_ufs_rw_check_complete(length, pbuffer);
    9601b50c:	aa1503e1 	mov	x1, x21
    9601b510:	2a1403e0 	mov	w0, w20
    9601b514:	97fffc21 	bl	9601a598 <tegrabl_ufs_rw_check_complete>
    9601b518:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b51c:	340000a0 	cbz	w0, 9601b530 <tegrabl_ufs_read+0x60>
		pr_error("UFS Read transfer failed error = %u\n", error);
    9601b520:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b524:	2a1303e1 	mov	w1, w19
    9601b528:	913f0000 	add	x0, x0, #0xfc0
    9601b52c:	94001c51 	bl	96022670 <tegrabl_printf>
}
    9601b530:	2a1303e0 	mov	w0, w19
    9601b534:	f94013f5 	ldr	x21, [sp, #32]
    9601b538:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b53c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601b540:	d65f03c0 	ret
    9601b544:	2a0003f3 	mov	w19, w0
    9601b548:	17fffff6 	b	9601b520 <tegrabl_ufs_read+0x50>

000000009601b54c <tegrabl_ufs_write>:
{
    9601b54c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9601b550:	910003fd 	mov	x29, sp
    9601b554:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601b558:	2a0303f5 	mov	w21, w3
    9601b55c:	a90363f7 	stp	x23, x24, [sp, #48]
    9601b560:	aa0403f6 	mov	x22, x4
    9601b564:	f90023f9 	str	x25, [sp, #64]
    9601b568:	12001c17 	and	w23, w0, #0xff
    9601b56c:	2a0103f8 	mov	w24, w1
    9601b570:	2a0203f9 	mov	w25, w2
    9601b574:	a90153f3 	stp	x19, x20, [sp, #16]
    9601b578:	52800054 	mov	w20, #0x2                   	// #2
		error = tegrabl_ufs_rw_common(block, page, length, pbuffer,
    9601b57c:	2a1703e5 	mov	w5, w23
    9601b580:	52800544 	mov	w4, #0x2a                  	// #42
    9601b584:	aa1603e3 	mov	x3, x22
    9601b588:	2a1503e2 	mov	w2, w21
    9601b58c:	2a1903e1 	mov	w1, w25
    9601b590:	2a1803e0 	mov	w0, w24
    9601b594:	97ffff12 	bl	9601b1dc <tegrabl_ufs_rw_common>
    9601b598:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601b59c:	350002a0 	cbnz	w0, 9601b5f0 <tegrabl_ufs_write+0xa4>
		error = tegrabl_ufs_rw_check_complete(length, pbuffer);
    9601b5a0:	aa1603e1 	mov	x1, x22
    9601b5a4:	2a1503e0 	mov	w0, w21
    9601b5a8:	97fffbfc 	bl	9601a598 <tegrabl_ufs_rw_check_complete>
		if (error != TEGRABL_NO_ERROR) {
    9601b5ac:	340000e0 	cbz	w0, 9601b5c8 <tegrabl_ufs_write+0x7c>
			error = tegrabl_ufs_hw_init(1);
    9601b5b0:	52800020 	mov	w0, #0x1                   	// #1
    9601b5b4:	97fffb8b 	bl	9601a3e0 <tegrabl_ufs_hw_init>
    9601b5b8:	2a0003f3 	mov	w19, w0
			if (error != TEGRABL_NO_ERROR) {
    9601b5bc:	350001a0 	cbnz	w0, 9601b5f0 <tegrabl_ufs_write+0xa4>
	while (retry != 0ul) {
    9601b5c0:	7100069f 	cmp	w20, #0x1
    9601b5c4:	54000121 	b.ne	9601b5e8 <tegrabl_ufs_write+0x9c>  // b.any
    9601b5c8:	52800013 	mov	w19, #0x0                   	// #0
}
    9601b5cc:	2a1303e0 	mov	w0, w19
    9601b5d0:	f94023f9 	ldr	x25, [sp, #64]
    9601b5d4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b5d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601b5dc:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601b5e0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601b5e4:	d65f03c0 	ret
    9601b5e8:	52800034 	mov	w20, #0x1                   	// #1
    9601b5ec:	17ffffe4 	b	9601b57c <tegrabl_ufs_write+0x30>
		pr_error("UFS Write transfer failed, error = %u\n", error);
    9601b5f0:	2a1303e1 	mov	w1, w19
    9601b5f4:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601b5f8:	9106dc00 	add	x0, x0, #0x1b7
    9601b5fc:	94001c1d 	bl	96022670 <tegrabl_printf>
    9601b600:	17fffff3 	b	9601b5cc <tegrabl_ufs_write+0x80>

000000009601b604 <tegrabl_ufs_get_provisioning_type>:
{
    9601b604:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
	memset(desc_buf, 0, 256);
    9601b608:	d2802002 	mov	x2, #0x100                 	// #256
{
    9601b60c:	910003fd 	mov	x29, sp
    9601b610:	a90153f3 	stp	x19, x20, [sp, #16]
    9601b614:	2a0003f3 	mov	w19, w0
    9601b618:	aa0103f4 	mov	x20, x1
	memset(desc_buf, 0, 256);
    9601b61c:	910083a0 	add	x0, x29, #0x20
    9601b620:	52800001 	mov	w1, #0x0                   	// #0
    9601b624:	94003a01 	bl	96029e28 <memset>
	err = tegrabl_ufs_get_descriptor(&desc_buf[0],
    9601b628:	2a1303e2 	mov	w2, w19
    9601b62c:	52800041 	mov	w1, #0x2                   	// #2
    9601b630:	910083a0 	add	x0, x29, #0x20
    9601b634:	97fffa3d 	bl	96019f28 <tegrabl_ufs_get_descriptor>
    9601b638:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601b63c:	340001c0 	cbz	w0, 9601b674 <tegrabl_ufs_get_provisioning_type+0x70>
		*provision_type = 0;
    9601b640:	3900029f 	strb	wzr, [x20]
		pr_error("Read unit descriptor failed. (err:0x%x)\n", err);
    9601b644:	2a0003e1 	mov	w1, w0
    9601b648:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b64c:	91348c00 	add	x0, x0, #0xd23
    9601b650:	94001c08 	bl	96022670 <tegrabl_printf>
	pr_info("provision_type = 0x%02x\n", *provision_type);
    9601b654:	39400281 	ldrb	w1, [x20]
    9601b658:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b65c:	91353c00 	add	x0, x0, #0xd4f
    9601b660:	94001c04 	bl	96022670 <tegrabl_printf>
}
    9601b664:	2a1303e0 	mov	w0, w19
    9601b668:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b66c:	a8d27bfd 	ldp	x29, x30, [sp], #288
    9601b670:	d65f03c0 	ret
		*provision_type = desc_buf[0x17];
    9601b674:	3940dfa0 	ldrb	w0, [x29, #55]
    9601b678:	39000280 	strb	w0, [x20]
    9601b67c:	17fffff6 	b	9601b654 <tegrabl_ufs_get_provisioning_type+0x50>

000000009601b680 <tegrabl_ufs_erase>:
{
    9601b680:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9601b684:	910003fd 	mov	x29, sp
    9601b688:	a9025bf5 	stp	x21, x22, [sp, #32]
	error = tegrabl_ufs_get_provisioning_type(pufs_context->boot_lun,
    9601b68c:	f0000296 	adrp	x22, 9606e000 <__bss_start>
{
    9601b690:	a90153f3 	stp	x19, x20, [sp, #16]
    9601b694:	aa0003f4 	mov	x20, x0
	error = tegrabl_ufs_get_provisioning_type(pufs_context->boot_lun,
    9601b698:	f94556c0 	ldr	x0, [x22, #2728]
{
    9601b69c:	a90363f7 	stp	x23, x24, [sp, #48]
    9601b6a0:	2a0203f8 	mov	w24, w2
    9601b6a4:	2a0303f7 	mov	w23, w3
	uint32_t cmd_desc_index = 0;
    9601b6a8:	290b7fbf 	stp	wzr, wzr, [x29, #88]
	error = tegrabl_ufs_get_provisioning_type(pufs_context->boot_lun,
    9601b6ac:	b9401800 	ldr	w0, [x0, #24]
{
    9601b6b0:	f90023f9 	str	x25, [sp, #64]
    9601b6b4:	12001c39 	and	w25, w1, #0xff
	error = tegrabl_ufs_get_provisioning_type(pufs_context->boot_lun,
    9601b6b8:	91015fa1 	add	x1, x29, #0x57
    9601b6bc:	97ffffd2 	bl	9601b604 <tegrabl_ufs_get_provisioning_type>
	if (error != TEGRABL_NO_ERROR) {
    9601b6c0:	34000180 	cbz	w0, 9601b6f0 <tegrabl_ufs_erase+0x70>
    9601b6c4:	2a0003f3 	mov	w19, w0
		pr_error("Can't get provisioning type of LUN.\n");
    9601b6c8:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b6cc:	91313c00 	add	x0, x0, #0xc4f
    9601b6d0:	94001be8 	bl	96022670 <tegrabl_printf>
}
    9601b6d4:	2a1303e0 	mov	w0, w19
    9601b6d8:	f94023f9 	ldr	x25, [sp, #64]
    9601b6dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b6e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601b6e4:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601b6e8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9601b6ec:	d65f03c0 	ret
	if ((provision_type == 0x0U) && ((start_block != 0UL) || (blocks != dev->block_count))) {
    9601b6f0:	39415fa0 	ldrb	w0, [x29, #87]
    9601b6f4:	35000160 	cbnz	w0, 9601b720 <tegrabl_ufs_erase+0xa0>
    9601b6f8:	35000098 	cbnz	w24, 9601b708 <tegrabl_ufs_erase+0x88>
    9601b6fc:	b9402680 	ldr	w0, [x20, #36]
    9601b700:	6b17001f 	cmp	w0, w23
    9601b704:	540000e0 	b.eq	9601b720 <tegrabl_ufs_erase+0xa0>  // b.none
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601b708:	52800033 	mov	w19, #0x1                   	// #1
		pr_info("can't erase partial storage under full provision.\n");
    9601b70c:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601b710:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
		pr_info("can't erase partial storage under full provision.\n");
    9601b714:	9131dc00 	add	x0, x0, #0xc77
    9601b718:	94001bd6 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601b71c:	17ffffee 	b	9601b6d4 <tegrabl_ufs_erase+0x54>
	error = tegrabl_ufs_get_tx_rx_descriptor(&trd_index);
    9601b720:	910163a0 	add	x0, x29, #0x58
    9601b724:	97fff75a 	bl	9601948c <tegrabl_ufs_get_tx_rx_descriptor>
    9601b728:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b72c:	35001100 	cbnz	w0, 9601b94c <tegrabl_ufs_erase+0x2cc>
	error = tegrabl_ufs_get_cmd_descriptor(&cmd_desc_index);
    9601b730:	910173a0 	add	x0, x29, #0x5c
    9601b734:	97fff77c 	bl	96019524 <tegrabl_ufs_get_cmd_descriptor>
    9601b738:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b73c:	35001080 	cbnz	w0, 9601b94c <tegrabl_ufs_erase+0x2cc>
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b740:	b9405fb3 	ldr	w19, [x29, #92]
    9601b744:	5280c000 	mov	w0, #0x600                 	// #1536
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601b748:	d280c002 	mov	x2, #0x600                 	// #1536
    9601b74c:	52800001 	mov	w1, #0x0                   	// #0
	plcmd_descriptor = &pcmd_descriptor[cmd_desc_index];
    9601b750:	9ba07e73 	umull	x19, w19, w0
    9601b754:	f0000280 	adrp	x0, 9606e000 <__bss_start>
    9601b758:	f9454815 	ldr	x21, [x0, #2704]
    9601b75c:	8b1302b4 	add	x20, x21, x19
	memset((void *)plcmd_descriptor, 0, sizeof(struct cmd_descriptor));
    9601b760:	aa1403e0 	mov	x0, x20
    9601b764:	940039b1 	bl	96029e28 <memset>
	pcommand_upiu->basic_header.trans_code = UPIU_COMMAND_TRANSACTION;
    9601b768:	52840020 	mov	w0, #0x2001                	// #8193
    9601b76c:	78336aa0 	strh	w0, [x21, x19]
	pcommand_upiu->basic_header.task_tag = 0x1;
    9601b770:	52800023 	mov	w3, #0x1                   	// #1
	pcommand_upiu->basic_header.lun = lun_id;
    9601b774:	39000a99 	strb	w25, [x20, #2]
	if (provision_type == 0x0U) {
    9601b778:	39415fa0 	ldrb	w0, [x29, #87]
	pcommand_upiu->basic_header.task_tag = 0x1;
    9601b77c:	78003283 	sturh	w3, [x20, #3]
	if (provision_type == 0x0U) {
    9601b780:	350004e0 	cbnz	w0, 9601b81c <tegrabl_ufs_erase+0x19c>
		pcommand_upiu->cdb[0] = SCSI_FORMAT_UNIT_OPCODE;
    9601b784:	52800080 	mov	w0, #0x4                   	// #4
    9601b788:	39004280 	strb	w0, [x20, #16]
		error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    9601b78c:	294b07a0 	ldp	w0, w1, [x29, #88]
		pcommand_upiu->expected_data_tx_len_bige = 0;
    9601b790:	b9000e9f 	str	wzr, [x20, #12]
		error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    9601b794:	52800002 	mov	w2, #0x0                   	// #0
	uint32_t *buffer = NULL;
    9601b798:	d2800015 	mov	x21, #0x0                   	// #0
		error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    9601b79c:	97fff926 	bl	96019c34 <tegrabl_ufs_create_trd>
    9601b7a0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b7a4:	35000693 	cbnz	w19, 9601b874 <tegrabl_ufs_erase+0x1f4>
	error = tegrabl_ufs_queue_trd(trd_index, SCSI_REQ_READ_TIMEOUT);
    9601b7a8:	b9405ba0 	ldr	w0, [x29, #88]
    9601b7ac:	5292d001 	mov	w1, #0x9680                	// #38528
    9601b7b0:	72a01301 	movk	w1, #0x98, lsl #16
    9601b7b4:	97fff972 	bl	96019d7c <tegrabl_ufs_queue_trd>
    9601b7b8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b7bc:	350005c0 	cbnz	w0, 9601b874 <tegrabl_ufs_erase+0x1f4>
	error = tegrabl_ufs_wait_trd_request_complete(trd_index,
    9601b7c0:	b9405ba0 	ldr	w0, [x29, #88]
    9601b7c4:	52994001 	mov	w1, #0xca00                	// #51712
    9601b7c8:	72a77341 	movk	w1, #0x3b9a, lsl #16
    9601b7cc:	97fff816 	bl	96019824 <tegrabl_ufs_wait_trd_request_complete>
    9601b7d0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601b7d4:	35000500 	cbnz	w0, 9601b874 <tegrabl_ufs_erase+0x1f4>
		&plcmd_descriptor->vucd_generic_resp_upiu,
    9601b7d8:	91080296 	add	x22, x20, #0x200
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601b7dc:	528005a0 	mov	w0, #0x2d                  	// #45
    9601b7e0:	52800044 	mov	w4, #0x2                   	// #2
    9601b7e4:	d2802403 	mov	x3, #0x120                 	// #288
    9601b7e8:	aa1603e2 	mov	x2, x22
    9601b7ec:	52800001 	mov	w1, #0x0                   	// #0
    9601b7f0:	97ffa0a7 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	if (presponse_upiu->basic_header.trans_code !=
    9601b7f4:	39480280 	ldrb	w0, [x20, #512]
    9601b7f8:	7100841f 	cmp	w0, #0x21
    9601b7fc:	54000820 	b.eq	9601b900 <tegrabl_ufs_erase+0x280>  // b.none
		pr_error("Invalid %s response\n", "erase command");
    9601b800:	90000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601b804:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b808:	9132b421 	add	x1, x1, #0xcad
    9601b80c:	91342c00 	add	x0, x0, #0xd0b
		error = TEGRABL_ERR_COMMAND_FAILED;
    9601b810:	528002f3 	mov	w19, #0x17                  	// #23
		pr_error("Invalid %s response\n", "erase command");
    9601b814:	94001b97 	bl	96022670 <tegrabl_printf>
    9601b818:	14000017 	b	9601b874 <tegrabl_ufs_erase+0x1f4>
			BYTE_SWAP32(1UL << pufs_context->page_size_log2);
    9601b81c:	f94556c0 	ldr	x0, [x22, #2728]
    9601b820:	d2800033 	mov	x19, #0x1                   	// #1
		buffer = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    9601b824:	d2820002 	mov	x2, #0x1000                	// #4096
    9601b828:	d2808001 	mov	x1, #0x400                 	// #1024
			BYTE_SWAP32(1UL << pufs_context->page_size_log2);
    9601b82c:	b9402000 	ldr	w0, [x0, #32]
    9601b830:	9ac02260 	lsl	x0, x19, x0
    9601b834:	5ac00800 	rev	w0, w0
		pcommand_upiu->expected_data_tx_len_bige =
    9601b838:	b9000e80 	str	w0, [x20, #12]
		pcommand_upiu->cdb[0] = SCSI_UNMAP_OPCODE;
    9601b83c:	52800840 	mov	w0, #0x42                  	// #66
    9601b840:	39004280 	strb	w0, [x20, #16]
		pcommand_upiu->cdb[7] = 0x00;
    9601b844:	52830000 	mov	w0, #0x1800                	// #6144
    9601b848:	78017280 	sturh	w0, [x20, #23]
		buffer = tegrabl_alloc_align(TEGRABL_HEAP_DMA,
    9601b84c:	2a1303e0 	mov	w0, w19
    9601b850:	94002cb4 	bl	96026b20 <tegrabl_alloc_align>
    9601b854:	aa0003f5 	mov	x21, x0
		if (buffer == NULL) {
    9601b858:	b5000180 	cbnz	x0, 9601b888 <tegrabl_ufs_erase+0x208>
			error = TEGRABL_ERR_NO_MEMORY;
    9601b85c:	52800073 	mov	w19, #0x3                   	// #3
			pr_error("Failed to allocate memory for %s\n", "erase command");
    9601b860:	90000121 	adrp	x1, 9603f000 <device_info_list+0x6dc>
    9601b864:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b868:	9132b421 	add	x1, x1, #0xcad
    9601b86c:	913ff400 	add	x0, x0, #0xffd
    9601b870:	94001b80 	bl	96022670 <tegrabl_printf>
		pr_error("Device erase failed error=0x%08x\n", error);
    9601b874:	2a1303e1 	mov	w1, w19
    9601b878:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b87c:	91336000 	add	x0, x0, #0xcd8
    9601b880:	94001b7c 	bl	96022670 <tegrabl_printf>
    9601b884:	14000026 	b	9601b91c <tegrabl_ufs_erase+0x29c>
		memset(buffer, 0, BLOCK_SIZE);
    9601b888:	d2820002 	mov	x2, #0x1000                	// #4096
    9601b88c:	52800001 	mov	w1, #0x0                   	// #0
    9601b890:	94003966 	bl	96029e28 <memset>
    9601b894:	5ac00b18 	rev	w24, w24
		*((uint16_t *)buffer + 0) = (uint16_t)(temp1);
    9601b898:	5282c000 	mov	w0, #0x1600                	// #5632
    9601b89c:	5ac00af7 	rev	w23, w23
    9601b8a0:	72a20000 	movk	w0, #0x1000, lsl #16
    9601b8a4:	b90002a0 	str	w0, [x21]
		buffer[4] = BYTE_SWAP32(blocks);
    9601b8a8:	2901deb8 	stp	w24, w23, [x21, #12]
		address = tegrabl_dma_map_buffer(TEGRABL_MODULE_UFS, 0,
    9601b8ac:	2a1303e4 	mov	w4, w19
    9601b8b0:	d2820003 	mov	x3, #0x1000                	// #4096
    9601b8b4:	aa1503e2 	mov	x2, x21
    9601b8b8:	52800001 	mov	w1, #0x0                   	// #0
    9601b8bc:	528005a0 	mov	w0, #0x2d                  	// #45
    9601b8c0:	97ffa081 	bl	96003ac4 <tegrabl_dma_map_buffer>
			((uintptr_t)(address & 0xfffffffful)) & ~(0x3UL);
    9601b8c4:	121e7400 	and	w0, w0, #0xfffffffc
		plcmd_descriptor->vprdt[0].dw0 =
    9601b8c8:	b9040280 	str	w0, [x20, #1024]
		error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    9601b8cc:	2a1303e3 	mov	w3, w19
			(1UL << pufs_context->page_size_log2) - 1U;
    9601b8d0:	f94556c0 	ldr	x0, [x22, #2728]
		error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    9601b8d4:	2a1303e2 	mov	w2, w19
    9601b8d8:	b9405fa1 	ldr	w1, [x29, #92]
		plcmd_descriptor->vprdt[0].dw1 = 0;
    9601b8dc:	b904069f 	str	wzr, [x20, #1028]
			(1UL << pufs_context->page_size_log2) - 1U;
    9601b8e0:	b9402000 	ldr	w0, [x0, #32]
    9601b8e4:	9ac02260 	lsl	x0, x19, x0
    9601b8e8:	51000400 	sub	w0, w0, #0x1
		plcmd_descriptor->vprdt[0].dw3 =
    9601b8ec:	b9040e80 	str	w0, [x20, #1036]
		error = tegrabl_ufs_create_trd(trd_index, cmd_desc_index,
    9601b8f0:	b9405ba0 	ldr	w0, [x29, #88]
    9601b8f4:	97fff8d0 	bl	96019c34 <tegrabl_ufs_create_trd>
    9601b8f8:	2a0003f3 	mov	w19, w0
    9601b8fc:	17ffffaa 	b	9601b7a4 <tegrabl_ufs_erase+0x124>
	if (presponse_upiu->basic_header.response != TARGET_SUCCESS) {
    9601b900:	39401ac0 	ldrb	w0, [x22, #6]
    9601b904:	35000280 	cbnz	w0, 9601b954 <tegrabl_ufs_erase+0x2d4>
	if (presponse_upiu->basic_header.status != SCSI_STATUS_GOOD) {
    9601b908:	39401ec0 	ldrb	w0, [x22, #7]
    9601b90c:	350002a0 	cbnz	w0, 9601b960 <tegrabl_ufs_erase+0x2e0>
		pr_info("Device erase successfull\n");
    9601b910:	90000120 	adrp	x0, 9603f000 <device_info_list+0x6dc>
    9601b914:	9132ec00 	add	x0, x0, #0xcbb
    9601b918:	94001b56 	bl	96022670 <tegrabl_printf>
	tegrabl_ufs_free_trd_cmd_desc();
    9601b91c:	97fff90f 	bl	96019d58 <tegrabl_ufs_free_trd_cmd_desc>
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_UFS, 0,
    9601b920:	52800024 	mov	w4, #0x1                   	// #1
    9601b924:	d2820003 	mov	x3, #0x1000                	// #4096
    9601b928:	aa1503e2 	mov	x2, x21
    9601b92c:	52800001 	mov	w1, #0x0                   	// #0
    9601b930:	528005a0 	mov	w0, #0x2d                  	// #45
    9601b934:	97ffa056 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	if (buffer != NULL) {
    9601b938:	b4ffecf5 	cbz	x21, 9601b6d4 <tegrabl_ufs_erase+0x54>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, buffer);
    9601b93c:	aa1503e1 	mov	x1, x21
    9601b940:	52800020 	mov	w0, #0x1                   	// #1
    9601b944:	94002c59 	bl	96026aa8 <tegrabl_dealloc>
    9601b948:	17ffff63 	b	9601b6d4 <tegrabl_ufs_erase+0x54>
	uint32_t *buffer = NULL;
    9601b94c:	d2800015 	mov	x21, #0x0                   	// #0
    9601b950:	17ffffc9 	b	9601b874 <tegrabl_ufs_erase+0x1f4>
		error = TEGRABL_ERROR(TEGRABL_ERR_READ_FAILED, 2U);
    9601b954:	52804333 	mov	w19, #0x219                 	// #537
		error = TEGRABL_ERROR(TEGRABL_ERR_READ_FAILED, 3U);
    9601b958:	72ab4b53 	movk	w19, #0x5a5a, lsl #16
    9601b95c:	17ffffc6 	b	9601b874 <tegrabl_ufs_erase+0x1f4>
    9601b960:	52806333 	mov	w19, #0x319                 	// #793
    9601b964:	17fffffd 	b	9601b958 <tegrabl_ufs_erase+0x2d8>

000000009601b968 <tegrabl_ufs_default_state>:
	UFS_WRITE32(HCE, 0);
    9601b968:	d2800680 	mov	x0, #0x34                  	// #52
    9601b96c:	f2a048a0 	movk	x0, #0x245, lsl #16
    9601b970:	b900001f 	str	wzr, [x0]
	tegrabl_ufs_disable_device();
    9601b974:	14001062 	b	9601fafc <tegrabl_ufs_disable_device>

000000009601b978 <tegrabl_ufs_get_lun_capacity>:

tegrabl_error_t
tegrabl_ufs_get_lun_capacity(uint8_t lun_id, uint32_t *block_size_log2,
		uint32_t *block_count)
{
    9601b978:	a9ac7bfd 	stp	x29, x30, [sp, #-320]!
    9601b97c:	910003fd 	mov	x29, sp
    9601b980:	a90153f3 	stp	x19, x20, [sp, #16]
    9601b984:	12001c13 	and	w19, w0, #0xff
    9601b988:	f90013f5 	str	x21, [sp, #32]
    9601b98c:	aa0103f4 	mov	x20, x1
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint8_t desc_buf[256];
	struct ufs_unit_descriptor *ufs_unit_desc;
	uint32_t size_bug[2];

	memset(&desc_buf[0], 0, 256);
    9601b990:	910103a0 	add	x0, x29, #0x40
    9601b994:	52800001 	mov	w1, #0x0                   	// #0
{
    9601b998:	aa0203f5 	mov	x21, x2
	memset(&desc_buf[0], 0, 256);
    9601b99c:	d2802002 	mov	x2, #0x100                 	// #256
    9601b9a0:	94003922 	bl	96029e28 <memset>
	error = tegrabl_ufs_get_descriptor((uint8_t *)&desc_buf[0],
    9601b9a4:	2a1303e2 	mov	w2, w19
    9601b9a8:	52800041 	mov	w1, #0x2                   	// #2
    9601b9ac:	910103a0 	add	x0, x29, #0x40
    9601b9b0:	97fff95e 	bl	96019f28 <tegrabl_ufs_get_descriptor>
    9601b9b4:	2a0003f3 	mov	w19, w0
			QUERY_DESC_UNIT_DESC_IDN, lun_id);
	if (error == TEGRABL_NO_ERROR) {
    9601b9b8:	35000140 	cbnz	w0, 9601b9e0 <tegrabl_ufs_get_lun_capacity+0x68>
		ufs_unit_desc = (struct ufs_unit_descriptor *)&desc_buf[0];
		memcpy((void *)&size_bug[0], &ufs_unit_desc->logical_blockcount, sizeof(size_bug));
    9601b9bc:	d2800102 	mov	x2, #0x8                   	// #8
    9601b9c0:	91012fa1 	add	x1, x29, #0x4b
    9601b9c4:	9100e3a0 	add	x0, x29, #0x38
    9601b9c8:	94003957 	bl	96029f24 <memcpy>
    9601b9cc:	b9403fa0 	ldr	w0, [x29, #60]
    9601b9d0:	5ac00800 	rev	w0, w0
		*block_count = BYTE_SWAP32(size_bug[1]);
    9601b9d4:	b90002a0 	str	w0, [x21]
		*block_size_log2 = ufs_unit_desc->logical_blocksize;
    9601b9d8:	39412ba0 	ldrb	w0, [x29, #74]
    9601b9dc:	b9000280 	str	w0, [x20]
	}
	return error;
}
    9601b9e0:	2a1303e0 	mov	w0, w19
    9601b9e4:	f94013f5 	ldr	x21, [sp, #32]
    9601b9e8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601b9ec:	a8d47bfd 	ldp	x29, x30, [sp], #320
    9601b9f0:	d65f03c0 	ret

000000009601b9f4 <tegrabl_blockdev_default_erase>:
	TEGRABL_UNUSED(block);
	TEGRABL_UNUSED(count);
	TEGRABL_UNUSED(is_secure);

	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
}
    9601b9f4:	52800020 	mov	w0, #0x1                   	// #1
    9601b9f8:	72a1c1c0 	movk	w0, #0xe0e, lsl #16
    9601b9fc:	d65f03c0 	ret

000000009601ba00 <tegrabl_blockdev_default_read_block>:
	TEGRABL_UNUSED(dev);
	TEGRABL_UNUSED(buf);
	pr_debug("default StartBlock= %d NumofBlock = %u\n", block, count);

	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
}
    9601ba00:	52802020 	mov	w0, #0x101                 	// #257
    9601ba04:	72a1c1c0 	movk	w0, #0xe0e, lsl #16
    9601ba08:	d65f03c0 	ret

000000009601ba0c <tegrabl_blockdev_default_write_block>:
	TEGRABL_UNUSED(buf);
	TEGRABL_UNUSED(block);
	TEGRABL_UNUSED(count);

	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 2);
}
    9601ba0c:	52804020 	mov	w0, #0x201                 	// #513
    9601ba10:	72a1c1c0 	movk	w0, #0xe0e, lsl #16
    9601ba14:	d65f03c0 	ret

000000009601ba18 <tegrabl_blockdev_next_device>:

	return bdev;
}

tegrabl_bdev_t *tegrabl_blockdev_next_device(tegrabl_bdev_t *curr_bdev)
{
    9601ba18:	f0000281 	adrp	x1, 9606e000 <__bss_start>
    9601ba1c:	f9457822 	ldr	x2, [x1, #2800]
	struct list_node *next_node;

	/* If it is first registered device, get from the tail, otherwise
	 * move to head by getting the prev list.
	 */
	if (curr_bdev == NULL)
    9601ba20:	b50000a0 	cbnz	x0, 9601ba34 <tegrabl_blockdev_next_device+0x1c>
	if (list->next != list) {
    9601ba24:	f9400441 	ldr	x1, [x2, #8]
    9601ba28:	eb02003f 	cmp	x1, x2
    9601ba2c:	540000a1 	b.ne	9601ba40 <tegrabl_blockdev_next_device+0x28>  // b.any
	if (next_node != NULL) {
		next_bdev = containerof(next_node, tegrabl_bdev_t, node);
	}

	return next_bdev;
}
    9601ba30:	d65f03c0 	ret
		next_node = list_next(&bdevs->list, &curr_bdev->node);
    9601ba34:	f9400401 	ldr	x1, [x0, #8]
	if (item->next != list) {
    9601ba38:	eb02003f 	cmp	x1, x2
    9601ba3c:	54000060 	b.eq	9601ba48 <tegrabl_blockdev_next_device+0x30>  // b.none
    9601ba40:	aa0103e0 	mov	x0, x1
    9601ba44:	17fffffb 	b	9601ba30 <tegrabl_blockdev_next_device+0x18>
	tegrabl_bdev_t *next_bdev = NULL;
    9601ba48:	d2800000 	mov	x0, #0x0                   	// #0
    9601ba4c:	17fffff9 	b	9601ba30 <tegrabl_blockdev_next_device+0x18>

000000009601ba50 <tegrabl_blockdev_read>:
	list_kpi(bdevs);
}

tegrabl_error_t tegrabl_blockdev_read(tegrabl_bdev_t *dev, void *buf,
	off_t offset, off_t len)
{
    9601ba50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((dev == NULL) || (len == 0ULL)) {
    9601ba54:	f100001f 	cmp	x0, #0x0
    9601ba58:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    9601ba5c:	910003fd 	mov	x29, sp
    9601ba60:	f9000bf3 	str	x19, [sp, #16]
	if ((dev == NULL) || (len == 0ULL)) {
    9601ba64:	540003a0 	b.eq	9601bad8 <tegrabl_blockdev_read+0x88>  // b.none
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
		goto fail;
	}

	if (dev->ref <= 0UL) {
    9601ba68:	b9401006 	ldr	w6, [x0, #16]
    9601ba6c:	340003a6 	cbz	w6, 9601bae0 <tegrabl_blockdev_read+0x90>
	}

	pr_trace("dev '%d', dev size %"PRIu64", buf %p, offset %"PRIu64", len %"PRIu64"\n",
			 dev->device_id, dev->size, buf, offset, len);

	if ((offset >= dev->size) || ((offset + len) > dev->size)) {
    9601ba70:	f9400c06 	ldr	x6, [x0, #24]
    9601ba74:	eb0200df 	cmp	x6, x2
    9601ba78:	54000089 	b.ls	9601ba88 <tegrabl_blockdev_read+0x38>  // b.plast
    9601ba7c:	8b020065 	add	x5, x3, x2
    9601ba80:	eb0500df 	cmp	x6, x5
    9601ba84:	540000e2 	b.cs	9601baa0 <tegrabl_blockdev_read+0x50>  // b.hs, b.nlast
		pr_error("Either offset or requested data size from that offset is beyond device size\n");
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    9601ba88:	52800093 	mov	w19, #0x4                   	// #4
		pr_error("Either offset or requested data size from that offset is beyond device size\n");
    9601ba8c:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601ba90:	910bd000 	add	x0, x0, #0x2f4
    9601ba94:	94001af7 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    9601ba98:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601ba9c:	14000007 	b	9601bab8 <tegrabl_blockdev_read+0x68>
		goto fail;
	}

	error = dev->read(dev, buf, offset, len);
    9601baa0:	f9401c04 	ldr	x4, [x0, #56]
    9601baa4:	d63f0080 	blr	x4
    9601baa8:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601baac:	340000e0 	cbz	w0, 9601bac8 <tegrabl_blockdev_read+0x78>
    9601bab0:	12005c13 	and	w19, w0, #0xffffff
    9601bab4:	32070a73 	orr	w19, w19, #0xe000000
		goto fail;
	}

fail:
	 if (error != TEGRABL_NO_ERROR) {
		pr_error("Blockdev read: exit error = %x\n", error);
    9601bab8:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601babc:	2a1303e1 	mov	w1, w19
    9601bac0:	910d1000 	add	x0, x0, #0x344
    9601bac4:	94001aeb 	bl	96022670 <tegrabl_printf>
	}
	return error;
}
    9601bac8:	2a1303e0 	mov	w0, w19
    9601bacc:	f9400bf3 	ldr	x19, [sp, #16]
    9601bad0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601bad4:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    9601bad8:	5280c053 	mov	w19, #0x602                 	// #1538
    9601badc:	17ffffef 	b	9601ba98 <tegrabl_blockdev_read+0x48>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    9601bae0:	5280e053 	mov	w19, #0x702                 	// #1794
    9601bae4:	17ffffed 	b	9601ba98 <tegrabl_blockdev_read+0x48>

000000009601bae8 <tegrabl_blockdev_read_block>:
#endif

tegrabl_error_t tegrabl_blockdev_read_block(tegrabl_bdev_t *dev, void *buf,
	bnum_t block, bnum_t count)
{
    9601bae8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((dev == NULL) || (count == 0U)) {
    9601baec:	f100001f 	cmp	x0, #0x0
    9601baf0:	7a401864 	ccmp	w3, #0x0, #0x4, ne  // ne = any
{
    9601baf4:	910003fd 	mov	x29, sp
    9601baf8:	f9000bf3 	str	x19, [sp, #16]
	if ((dev == NULL) || (count == 0U)) {
    9601bafc:	54000360 	b.eq	9601bb68 <tegrabl_blockdev_read_block+0x80>  // b.none
	return MOD_POW2((uintptr_t)buf, dev->buf_align_size) == 0UL;
    9601bb00:	b9402c06 	ldr	w6, [x0, #44]
    9601bb04:	510004c6 	sub	w6, w6, #0x1

#if defined(CONFIG_ENABLE_BLOCKDEV_KPI)
	profile_read_start(dev);
#endif

	if (!tegrabl_blockdev_buffer_aligned(dev, buf)) {
    9601bb08:	ea06003f 	tst	x1, x6
    9601bb0c:	54000341 	b.ne	9601bb74 <tegrabl_blockdev_read_block+0x8c>  // b.any
		goto fail;
	}

	pr_trace("dev '%d', buf %p, block %d, count %u\n", dev->device_id, buf, block, count);

	if (dev->ref <= 0U) {
    9601bb10:	b9401006 	ldr	w6, [x0, #16]
    9601bb14:	34000346 	cbz	w6, 9601bb7c <tegrabl_blockdev_read_block+0x94>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
		goto fail;
	}

	/* range check */
	if ((block > dev->block_count) || ((block + count) > dev->block_count)) {
    9601bb18:	b9402406 	ldr	w6, [x0, #36]
    9601bb1c:	6b0200df 	cmp	w6, w2
    9601bb20:	54000323 	b.cc	9601bb84 <tegrabl_blockdev_read_block+0x9c>  // b.lo, b.ul, b.last
    9601bb24:	0b020065 	add	w5, w3, w2
    9601bb28:	6b0500df 	cmp	w6, w5
    9601bb2c:	540002c3 	b.cc	9601bb84 <tegrabl_blockdev_read_block+0x9c>  // b.lo, b.ul, b.last
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 1);
		goto fail;
	}

	error = dev->read_block(dev, buf, block, count);
    9601bb30:	f9402404 	ldr	x4, [x0, #72]
    9601bb34:	d63f0080 	blr	x4
    9601bb38:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601bb3c:	340000e0 	cbz	w0, 9601bb58 <tegrabl_blockdev_read_block+0x70>
    9601bb40:	12005c13 	and	w19, w0, #0xffffff
    9601bb44:	32070a73 	orr	w19, w19, #0xe000000
	profile_read_end(dev, count * (1 << dev->block_size_log2));
#endif

fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_error("Blockdev read block: exit error = %x\n", error);
    9601bb48:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601bb4c:	2a1303e1 	mov	w1, w19
    9601bb50:	910d9c00 	add	x0, x0, #0x367
    9601bb54:	94001ac7 	bl	96022670 <tegrabl_printf>
	}
	return error;
}
    9601bb58:	2a1303e0 	mov	w0, w19
    9601bb5c:	f9400bf3 	ldr	x19, [sp, #16]
    9601bb60:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601bb64:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 8);
    9601bb68:	52810053 	mov	w19, #0x802                 	// #2050
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 1);
    9601bb6c:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601bb70:	17fffff6 	b	9601bb48 <tegrabl_blockdev_read_block+0x60>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 25);
    9601bb74:	52832053 	mov	w19, #0x1902                	// #6402
    9601bb78:	17fffffd 	b	9601bb6c <tegrabl_blockdev_read_block+0x84>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
    9601bb7c:	52812053 	mov	w19, #0x902                 	// #2306
    9601bb80:	17fffffb 	b	9601bb6c <tegrabl_blockdev_read_block+0x84>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 1);
    9601bb84:	52802093 	mov	w19, #0x104                 	// #260
    9601bb88:	17fffff9 	b	9601bb6c <tegrabl_blockdev_read_block+0x84>

000000009601bb8c <tegrabl_blockdev_default_read>:
{
    9601bb8c:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	if ((dev == NULL) || (buffer == NULL)) {
    9601bb90:	f100001f 	cmp	x0, #0x0
    9601bb94:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9601bb98:	910003fd 	mov	x29, sp
    9601bb9c:	a90153f3 	stp	x19, x20, [sp, #16]
    9601bba0:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601bba4:	a90363f7 	stp	x23, x24, [sp, #48]
    9601bba8:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601bbac:	f9002bfb 	str	x27, [sp, #80]
	if ((dev == NULL) || (buffer == NULL)) {
    9601bbb0:	54001100 	b.eq	9601bdd0 <tegrabl_blockdev_default_read+0x244>  // b.none
    9601bbb4:	aa0003f7 	mov	x23, x0
    9601bbb8:	aa0103f6 	mov	x22, x1
    9601bbbc:	aa0203fa 	mov	x26, x2
	if (MOD_LOG2(offset, dev->block_size_log2) ||
    9601bbc0:	aa030041 	orr	x1, x2, x3
    9601bbc4:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    9601bbc8:	aa0303f4 	mov	x20, x3
    9601bbcc:	b94022e2 	ldr	w2, [x23, #32]
    9601bbd0:	9ac22000 	lsl	x0, x0, x2
    9601bbd4:	ea20003f 	bics	xzr, x1, x0
    9601bbd8:	54000120 	b.eq	9601bbfc <tegrabl_blockdev_default_read+0x70>  // b.none
		partial_block_buf = tegrabl_alloc_align(TEGRABL_HEAP_DMA, TEGRABL_BLOCKDEV_MEM_ALIGN_SIZE,
    9601bbdc:	d2800020 	mov	x0, #0x1                   	// #1
    9601bbe0:	d2800101 	mov	x1, #0x8                   	// #8
    9601bbe4:	9ac22002 	lsl	x2, x0, x2
    9601bbe8:	94002bce 	bl	96026b20 <tegrabl_alloc_align>
    9601bbec:	aa0003f5 	mov	x21, x0
		if (partial_block_buf == NULL) {
    9601bbf0:	b5000080 	cbnz	x0, 9601bc00 <tegrabl_blockdev_default_read+0x74>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601bbf4:	52800073 	mov	w19, #0x3                   	// #3
    9601bbf8:	14000077 	b	9601bdd4 <tegrabl_blockdev_default_read+0x248>
	void *partial_block_buf = NULL;
    9601bbfc:	d2800015 	mov	x21, #0x0                   	// #0
	block = DIV_FLOOR_LOG2(offset, dev->block_size_log2);
    9601bc00:	b94022e0 	ldr	w0, [x23, #32]
	if (MOD_LOG2(offset, dev->block_size_log2) != 0ULL) {
    9601bc04:	92800018 	mov	x24, #0xffffffffffffffff    	// #-1
	block = DIV_FLOOR_LOG2(offset, dev->block_size_log2);
    9601bc08:	9ac0275b 	lsr	x27, x26, x0
    9601bc0c:	2a1b03f9 	mov	w25, w27
	if (MOD_LOG2(offset, dev->block_size_log2) != 0ULL) {
    9601bc10:	9ac02300 	lsl	x0, x24, x0
    9601bc14:	ea20035f 	bics	xzr, x26, x0
    9601bc18:	540002e0 	b.eq	9601bc74 <tegrabl_blockdev_default_read+0xe8>  // b.none
		error = tegrabl_blockdev_read_block(dev, partial_block_buf, block, 1);
    9601bc1c:	52800023 	mov	w3, #0x1                   	// #1
    9601bc20:	2a1b03e2 	mov	w2, w27
    9601bc24:	aa1503e1 	mov	x1, x21
    9601bc28:	aa1703e0 	mov	x0, x23
    9601bc2c:	97ffffaf 	bl	9601bae8 <tegrabl_blockdev_read_block>
    9601bc30:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601bc34:	35000940 	cbnz	w0, 9601bd5c <tegrabl_blockdev_default_read+0x1d0>
		size_t block_offset = MOD_LOG2(offset, dev->block_size_log2);
    9601bc38:	b94022e0 	ldr	w0, [x23, #32]
		size_t tocopy = MIN(TEGRABL_BLOCKDEV_BLOCK_SIZE(dev) -
    9601bc3c:	d2800033 	mov	x19, #0x1                   	// #1
		block++;
    9601bc40:	11000779 	add	w25, w27, #0x1
		size_t block_offset = MOD_LOG2(offset, dev->block_size_log2);
    9601bc44:	9ac02301 	lsl	x1, x24, x0
    9601bc48:	8a210341 	bic	x1, x26, x1
		size_t tocopy = MIN(TEGRABL_BLOCKDEV_BLOCK_SIZE(dev) -
    9601bc4c:	9ac02273 	lsl	x19, x19, x0
    9601bc50:	cb010273 	sub	x19, x19, x1
    9601bc54:	eb14027f 	cmp	x19, x20
		memcpy(buf, (uint8_t *)partial_block_buf + block_offset, tocopy);
    9601bc58:	aa1603e0 	mov	x0, x22
		size_t tocopy = MIN(TEGRABL_BLOCKDEV_BLOCK_SIZE(dev) -
    9601bc5c:	9a949273 	csel	x19, x19, x20, ls  // ls = plast
		memcpy(buf, (uint8_t *)partial_block_buf + block_offset, tocopy);
    9601bc60:	8b0102a1 	add	x1, x21, x1
		buf += tocopy;
    9601bc64:	8b1302d6 	add	x22, x22, x19
		len -= tocopy;
    9601bc68:	cb130294 	sub	x20, x20, x19
		memcpy(buf, (uint8_t *)partial_block_buf + block_offset, tocopy);
    9601bc6c:	aa1303e2 	mov	x2, x19
    9601bc70:	940038ad 	bl	96029f24 <memcpy>
	if (len >= (1U << dev->block_size_log2)) {
    9601bc74:	b94022f3 	ldr	w19, [x23, #32]
    9601bc78:	52800020 	mov	w0, #0x1                   	// #1
    9601bc7c:	1ad32001 	lsl	w1, w0, w19
    9601bc80:	eb14003f 	cmp	x1, x20
    9601bc84:	54000768 	b.hi	9601bd70 <tegrabl_blockdev_default_read+0x1e4>  // b.pmore
		size_t block_count = DIV_FLOOR_LOG2(len, dev->block_size_log2);
    9601bc88:	9ad3269a 	lsr	x26, x20, x19
		size_t bytes = block_count << dev->block_size_log2;
    9601bc8c:	9ad32353 	lsl	x19, x26, x19
		if (bytes > len) {
    9601bc90:	eb13029f 	cmp	x20, x19
    9601bc94:	54000a43 	b.cc	9601bddc <tegrabl_blockdev_default_read+0x250>  // b.lo, b.ul, b.last
	return MOD_POW2((uintptr_t)buf, dev->buf_align_size) == 0UL;
    9601bc98:	b9402ee1 	ldr	w1, [x23, #44]
    9601bc9c:	51000421 	sub	w1, w1, #0x1
		if (!tegrabl_blockdev_buffer_aligned(dev, buf)) {
    9601bca0:	ea0102df 	tst	x22, x1
    9601bca4:	540004c0 	b.eq	9601bd3c <tegrabl_blockdev_default_read+0x1b0>  // b.none
			temp_buf = tegrabl_alloc_align(TEGRABL_HEAP_DMA, TEGRABL_BLOCKDEV_MEM_ALIGN_SIZE,
    9601bca8:	aa1303e2 	mov	x2, x19
    9601bcac:	d2800101 	mov	x1, #0x8                   	// #8
    9601bcb0:	94002b9c 	bl	96026b20 <tegrabl_alloc_align>
    9601bcb4:	aa0003f8 	mov	x24, x0
			if (temp_buf == NULL) {
    9601bcb8:	b4000980 	cbz	x0, 9601bde8 <tegrabl_blockdev_default_read+0x25c>
			error = tegrabl_blockdev_read_block(dev, temp_buf, block, block_count);
    9601bcbc:	aa0003e1 	mov	x1, x0
    9601bcc0:	2a1a03e3 	mov	w3, w26
    9601bcc4:	2a1903e2 	mov	w2, w25
    9601bcc8:	aa1703e0 	mov	x0, x23
    9601bccc:	97ffff87 	bl	9601bae8 <tegrabl_blockdev_read_block>
			if (error != TEGRABL_NO_ERROR) {
    9601bcd0:	34000100 	cbz	w0, 9601bcf0 <tegrabl_blockdev_default_read+0x164>
    9601bcd4:	12005c00 	and	w0, w0, #0xffffff
    9601bcd8:	32070813 	orr	w19, w0, #0xe000000
	if (partial_block_buf != NULL) {
    9601bcdc:	b40005f5 	cbz	x21, 9601bd98 <tegrabl_blockdev_default_read+0x20c>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, partial_block_buf);
    9601bce0:	aa1503e1 	mov	x1, x21
    9601bce4:	52800020 	mov	w0, #0x1                   	// #1
    9601bce8:	94002b70 	bl	96026aa8 <tegrabl_dealloc>
    9601bcec:	1400002a 	b	9601bd94 <tegrabl_blockdev_default_read+0x208>
			memcpy(buf, temp_buf, bytes);
    9601bcf0:	aa1303e2 	mov	x2, x19
    9601bcf4:	aa1803e1 	mov	x1, x24
    9601bcf8:	aa1603e0 	mov	x0, x22
    9601bcfc:	9400388a 	bl	96029f24 <memcpy>
		buf += bytes;
    9601bd00:	8b1302d6 	add	x22, x22, x19
		len -= bytes;
    9601bd04:	cb130294 	sub	x20, x20, x19
		block += block_count;
    9601bd08:	0b1a0339 	add	w25, w25, w26
	if (len > 0ULL) {
    9601bd0c:	b4000414 	cbz	x20, 9601bd8c <tegrabl_blockdev_default_read+0x200>
		if (partial_block_buf == NULL) {
    9601bd10:	b40005b5 	cbz	x21, 9601bdc4 <tegrabl_blockdev_default_read+0x238>
		error = tegrabl_blockdev_read_block(dev, partial_block_buf, block, 1);
    9601bd14:	52800023 	mov	w3, #0x1                   	// #1
    9601bd18:	2a1903e2 	mov	w2, w25
    9601bd1c:	aa1503e1 	mov	x1, x21
    9601bd20:	aa1703e0 	mov	x0, x23
    9601bd24:	97ffff71 	bl	9601bae8 <tegrabl_blockdev_read_block>
    9601bd28:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601bd2c:	34000260 	cbz	w0, 9601bd78 <tegrabl_blockdev_default_read+0x1ec>
    9601bd30:	12005c13 	and	w19, w0, #0xffffff
    9601bd34:	32070a73 	orr	w19, w19, #0xe000000
			goto fail;
    9601bd38:	17ffffea 	b	9601bce0 <tegrabl_blockdev_default_read+0x154>
			error = tegrabl_blockdev_read_block(dev, buf, block, block_count);
    9601bd3c:	2a1a03e3 	mov	w3, w26
    9601bd40:	2a1903e2 	mov	w2, w25
    9601bd44:	aa1603e1 	mov	x1, x22
    9601bd48:	aa1703e0 	mov	x0, x23
    9601bd4c:	97ffff67 	bl	9601bae8 <tegrabl_blockdev_read_block>
			if (error != TEGRABL_NO_ERROR) {
    9601bd50:	340000c0 	cbz	w0, 9601bd68 <tegrabl_blockdev_default_read+0x1dc>
    9601bd54:	12005c00 	and	w0, w0, #0xffffff
    9601bd58:	32070813 	orr	w19, w0, #0xe000000
	if (partial_block_buf != NULL) {
    9601bd5c:	d2800018 	mov	x24, #0x0                   	// #0
    9601bd60:	b5fffc15 	cbnz	x21, 9601bce0 <tegrabl_blockdev_default_read+0x154>
    9601bd64:	14000010 	b	9601bda4 <tegrabl_blockdev_default_read+0x218>
	void *temp_buf = NULL;
    9601bd68:	d2800018 	mov	x24, #0x0                   	// #0
    9601bd6c:	17ffffe5 	b	9601bd00 <tegrabl_blockdev_default_read+0x174>
    9601bd70:	d2800018 	mov	x24, #0x0                   	// #0
    9601bd74:	17ffffe6 	b	9601bd0c <tegrabl_blockdev_default_read+0x180>
		memcpy(buf, partial_block_buf, len);
    9601bd78:	aa1403e2 	mov	x2, x20
    9601bd7c:	aa1503e1 	mov	x1, x21
    9601bd80:	aa1603e0 	mov	x0, x22
    9601bd84:	94003868 	bl	96029f24 <memcpy>
    9601bd88:	17ffffd6 	b	9601bce0 <tegrabl_blockdev_default_read+0x154>
    9601bd8c:	52800013 	mov	w19, #0x0                   	// #0
	if (partial_block_buf != NULL) {
    9601bd90:	b5fffa95 	cbnz	x21, 9601bce0 <tegrabl_blockdev_default_read+0x154>
	if (temp_buf != NULL) {
    9601bd94:	b4000098 	cbz	x24, 9601bda4 <tegrabl_blockdev_default_read+0x218>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, temp_buf);
    9601bd98:	aa1803e1 	mov	x1, x24
    9601bd9c:	52800020 	mov	w0, #0x1                   	// #1
    9601bda0:	94002b42 	bl	96026aa8 <tegrabl_dealloc>
}
    9601bda4:	2a1303e0 	mov	w0, w19
    9601bda8:	f9402bfb 	ldr	x27, [sp, #80]
    9601bdac:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601bdb0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601bdb4:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601bdb8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601bdbc:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9601bdc0:	d65f03c0 	ret
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601bdc4:	52800073 	mov	w19, #0x3                   	// #3
    9601bdc8:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601bdcc:	17fffff2 	b	9601bd94 <tegrabl_blockdev_default_read+0x208>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601bdd0:	52800053 	mov	w19, #0x2                   	// #2
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601bdd4:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
	return error;
    9601bdd8:	17fffff3 	b	9601bda4 <tegrabl_blockdev_default_read+0x218>
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9601bddc:	52802053 	mov	w19, #0x102                 	// #258
				error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    9601bde0:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601bde4:	17ffffde 	b	9601bd5c <tegrabl_blockdev_default_read+0x1d0>
    9601bde8:	52802073 	mov	w19, #0x103                 	// #259
    9601bdec:	17fffffd 	b	9601bde0 <tegrabl_blockdev_default_read+0x254>

000000009601bdf0 <tegrabl_blockdev_write>:

#if !defined(CONFIG_ENABLE_BLOCKDEV_BASIC)
tegrabl_error_t tegrabl_blockdev_write(tegrabl_bdev_t *dev, const void *buf,
	off_t offset, off_t len)
{
    9601bdf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((dev == NULL) || (len == 0ULL)) {
    9601bdf4:	f100001f 	cmp	x0, #0x0
    9601bdf8:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    9601bdfc:	910003fd 	mov	x29, sp
    9601be00:	f9000bf3 	str	x19, [sp, #16]
	if ((dev == NULL) || (len == 0ULL)) {
    9601be04:	540002e0 	b.eq	9601be60 <tegrabl_blockdev_write+0x70>  // b.none
	}

	pr_trace("dev '%d', buf %p, offset %"PRIu64", len %"PRIu64"\n",
			 dev->device_id, buf, offset, len);

	if (dev->ref <= 0UL) {
    9601be08:	b9401006 	ldr	w6, [x0, #16]
    9601be0c:	34000306 	cbz	w6, 9601be6c <tegrabl_blockdev_write+0x7c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
		goto fail;
	}

	if ((offset >= dev->size) || ((offset + len) > dev->size)) {
    9601be10:	f9400c06 	ldr	x6, [x0, #24]
    9601be14:	eb0200df 	cmp	x6, x2
    9601be18:	540002e9 	b.ls	9601be74 <tegrabl_blockdev_write+0x84>  // b.plast
    9601be1c:	8b020065 	add	x5, x3, x2
    9601be20:	eb0500df 	cmp	x6, x5
    9601be24:	54000283 	b.cc	9601be74 <tegrabl_blockdev_write+0x84>  // b.lo, b.ul, b.last
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 2);
		goto fail;
	}

	error = dev->write(dev, buf, offset, len);
    9601be28:	f9402004 	ldr	x4, [x0, #64]
    9601be2c:	d63f0080 	blr	x4
    9601be30:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601be34:	340000e0 	cbz	w0, 9601be50 <tegrabl_blockdev_write+0x60>
    9601be38:	12005c13 	and	w19, w0, #0xffffff
    9601be3c:	32070a73 	orr	w19, w19, #0xe000000
		goto fail;
	}

fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_error("Blockdev write: exit error = %x\n", error);
    9601be40:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601be44:	2a1303e1 	mov	w1, w19
    9601be48:	910e4000 	add	x0, x0, #0x390
    9601be4c:	94001a09 	bl	96022670 <tegrabl_printf>
	}
	return error;
}
    9601be50:	2a1303e0 	mov	w0, w19
    9601be54:	f9400bf3 	ldr	x19, [sp, #16]
    9601be58:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601be5c:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 10);
    9601be60:	52814053 	mov	w19, #0xa02                 	// #2562
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 2);
    9601be64:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601be68:	17fffff6 	b	9601be40 <tegrabl_blockdev_write+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
    9601be6c:	52816053 	mov	w19, #0xb02                 	// #2818
    9601be70:	17fffffd 	b	9601be64 <tegrabl_blockdev_write+0x74>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 2);
    9601be74:	52804093 	mov	w19, #0x204                 	// #516
    9601be78:	17fffffb 	b	9601be64 <tegrabl_blockdev_write+0x74>

000000009601be7c <tegrabl_blockdev_write_block>:

tegrabl_error_t tegrabl_blockdev_write_block(tegrabl_bdev_t *dev,
	const void *buf, bnum_t block, bnum_t count)
{
    9601be7c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((count == 0UL) || (dev == NULL) || (buf == NULL)) {
    9601be80:	7100007f 	cmp	w3, #0x0
    9601be84:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
{
    9601be88:	910003fd 	mov	x29, sp
    9601be8c:	f9000bf3 	str	x19, [sp, #16]
	if ((count == 0UL) || (dev == NULL) || (buf == NULL)) {
    9601be90:	54000380 	b.eq	9601bf00 <tegrabl_blockdev_write_block+0x84>  // b.none
    9601be94:	b4000361 	cbz	x1, 9601bf00 <tegrabl_blockdev_write_block+0x84>
	return MOD_POW2((uintptr_t)buf, dev->buf_align_size) == 0UL;
    9601be98:	b9402c06 	ldr	w6, [x0, #44]
    9601be9c:	510004c6 	sub	w6, w6, #0x1

#if defined(CONFIG_ENABLE_BLOCKDEV_KPI)
	profile_write_start(dev);
#endif

	if (!tegrabl_blockdev_buffer_aligned(dev, buf)) {
    9601bea0:	ea06003f 	tst	x1, x6
    9601bea4:	54000341 	b.ne	9601bf0c <tegrabl_blockdev_write_block+0x90>  // b.any

	pr_trace("dev '%d', buf %p, block %d, count %u\n", dev->device_id, buf,
			 block, count);

	/* range check */
	if ((block > dev->block_count) || ((block + count) > dev->block_count)) {
    9601bea8:	b9402406 	ldr	w6, [x0, #36]
    9601beac:	6b0200df 	cmp	w6, w2
    9601beb0:	54000323 	b.cc	9601bf14 <tegrabl_blockdev_write_block+0x98>  // b.lo, b.ul, b.last
    9601beb4:	0b020065 	add	w5, w3, w2
    9601beb8:	6b0500df 	cmp	w6, w5
    9601bebc:	540002c3 	b.cc	9601bf14 <tegrabl_blockdev_write_block+0x98>  // b.lo, b.ul, b.last
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 3);
		goto fail;
	}

	if (dev->ref <= 0UL) {
    9601bec0:	b9401005 	ldr	w5, [x0, #16]
    9601bec4:	340002c5 	cbz	w5, 9601bf1c <tegrabl_blockdev_write_block+0xa0>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 13);
		goto fail;
	}

	error = dev->write_block(dev, buf, block, count);
    9601bec8:	f9402804 	ldr	x4, [x0, #80]
    9601becc:	d63f0080 	blr	x4
    9601bed0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601bed4:	340000e0 	cbz	w0, 9601bef0 <tegrabl_blockdev_write_block+0x74>
    9601bed8:	12005c13 	and	w19, w0, #0xffffff
    9601bedc:	32070a73 	orr	w19, w19, #0xe000000
	profile_write_end(dev, count * (1 << dev->block_size_log2));
#endif

fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_error("Blockdev write block: exit error = %x\n", error);
    9601bee0:	b0000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601bee4:	2a1303e1 	mov	w1, w19
    9601bee8:	910ed000 	add	x0, x0, #0x3b4
    9601beec:	940019e1 	bl	96022670 <tegrabl_printf>
	}
	return error;
}
    9601bef0:	2a1303e0 	mov	w0, w19
    9601bef4:	f9400bf3 	ldr	x19, [sp, #16]
    9601bef8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601befc:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
    9601bf00:	52818053 	mov	w19, #0xc02                 	// #3074
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 13);
    9601bf04:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601bf08:	17fffff6 	b	9601bee0 <tegrabl_blockdev_write_block+0x64>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 26);
    9601bf0c:	52834053 	mov	w19, #0x1a02                	// #6658
    9601bf10:	17fffffd 	b	9601bf04 <tegrabl_blockdev_write_block+0x88>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 3);
    9601bf14:	52806093 	mov	w19, #0x304                 	// #772
    9601bf18:	17fffffb 	b	9601bf04 <tegrabl_blockdev_write_block+0x88>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 13);
    9601bf1c:	5281a053 	mov	w19, #0xd02                 	// #3330
    9601bf20:	17fffff9 	b	9601bf04 <tegrabl_blockdev_write_block+0x88>

000000009601bf24 <tegrabl_blockdev_default_write>:
{
    9601bf24:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	if ((dev == NULL) || (buffer == NULL)) {
    9601bf28:	f100001f 	cmp	x0, #0x0
    9601bf2c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9601bf30:	910003fd 	mov	x29, sp
    9601bf34:	a90153f3 	stp	x19, x20, [sp, #16]
    9601bf38:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601bf3c:	a90363f7 	stp	x23, x24, [sp, #48]
    9601bf40:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601bf44:	f9002bfb 	str	x27, [sp, #80]
	if ((dev == NULL) || (buffer == NULL)) {
    9601bf48:	54001240 	b.eq	9601c190 <tegrabl_blockdev_default_write+0x26c>  // b.none
    9601bf4c:	aa0003f5 	mov	x21, x0
    9601bf50:	aa0103f7 	mov	x23, x1
    9601bf54:	aa0203fb 	mov	x27, x2
	if ((MOD_LOG2(offset, dev->block_size_log2) != 0U) ||
    9601bf58:	aa030041 	orr	x1, x2, x3
    9601bf5c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    9601bf60:	aa0303f3 	mov	x19, x3
    9601bf64:	b94022a2 	ldr	w2, [x21, #32]
    9601bf68:	9ac22000 	lsl	x0, x0, x2
    9601bf6c:	ea20003f 	bics	xzr, x1, x0
    9601bf70:	54000140 	b.eq	9601bf98 <tegrabl_blockdev_default_write+0x74>  // b.none
		partial_block_buf = tegrabl_alloc_align(TEGRABL_HEAP_DMA, TEGRABL_BLOCKDEV_MEM_ALIGN_SIZE,
    9601bf74:	d2800020 	mov	x0, #0x1                   	// #1
    9601bf78:	d2800101 	mov	x1, #0x8                   	// #8
    9601bf7c:	9ac22002 	lsl	x2, x0, x2
    9601bf80:	94002ae8 	bl	96026b20 <tegrabl_alloc_align>
    9601bf84:	aa0003f4 	mov	x20, x0
		if (partial_block_buf == NULL) {
    9601bf88:	b50000a0 	cbnz	x0, 9601bf9c <tegrabl_blockdev_default_write+0x78>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601bf8c:	52800073 	mov	w19, #0x3                   	// #3
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9601bf90:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
	return error;
    9601bf94:	14000015 	b	9601bfe8 <tegrabl_blockdev_default_write+0xc4>
	void *partial_block_buf = NULL;
    9601bf98:	d2800014 	mov	x20, #0x0                   	// #0
	block = DIV_FLOOR_LOG2(offset, dev->block_size_log2);
    9601bf9c:	b94022a0 	ldr	w0, [x21, #32]
	if (MOD_LOG2(offset, dev->block_size_log2) != 0U) {
    9601bfa0:	9280001a 	mov	x26, #0xffffffffffffffff    	// #-1
	block = DIV_FLOOR_LOG2(offset, dev->block_size_log2);
    9601bfa4:	9ac02778 	lsr	x24, x27, x0
    9601bfa8:	2a1803f9 	mov	w25, w24
	if (MOD_LOG2(offset, dev->block_size_log2) != 0U) {
    9601bfac:	9ac02340 	lsl	x0, x26, x0
    9601bfb0:	ea20037f 	bics	xzr, x27, x0
    9601bfb4:	54000540 	b.eq	9601c05c <tegrabl_blockdev_default_write+0x138>  // b.none
		error = tegrabl_blockdev_read_block(dev, partial_block_buf, block, 1);
    9601bfb8:	52800023 	mov	w3, #0x1                   	// #1
    9601bfbc:	2a1803e2 	mov	w2, w24
    9601bfc0:	aa1403e1 	mov	x1, x20
    9601bfc4:	aa1503e0 	mov	x0, x21
    9601bfc8:	97fffec8 	bl	9601bae8 <tegrabl_blockdev_read_block>
		if (error != TEGRABL_NO_ERROR) {
    9601bfcc:	340001e0 	cbz	w0, 9601c008 <tegrabl_blockdev_default_write+0xe4>
    9601bfd0:	12005c00 	and	w0, w0, #0xffffff
    9601bfd4:	32070813 	orr	w19, w0, #0xe000000
	if (partial_block_buf != NULL) {
    9601bfd8:	b4000094 	cbz	x20, 9601bfe8 <tegrabl_blockdev_default_write+0xc4>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, partial_block_buf);
    9601bfdc:	aa1403e1 	mov	x1, x20
    9601bfe0:	52800020 	mov	w0, #0x1                   	// #1
    9601bfe4:	94002ab1 	bl	96026aa8 <tegrabl_dealloc>
}
    9601bfe8:	2a1303e0 	mov	w0, w19
    9601bfec:	f9402bfb 	ldr	x27, [sp, #80]
    9601bff0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601bff4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601bff8:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601bffc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601c000:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9601c004:	d65f03c0 	ret
		size_t block_offset = MOD_LOG2(offset, dev->block_size_log2);
    9601c008:	b94022b6 	ldr	w22, [x21, #32]
		size_t tocopy = MIN(TEGRABL_BLOCKDEV_BLOCK_SIZE(dev) -
    9601c00c:	d2800039 	mov	x25, #0x1                   	// #1
		memcpy((uint8_t *)partial_block_buf + block_offset, buf, tocopy);
    9601c010:	aa1703e1 	mov	x1, x23
		size_t block_offset = MOD_LOG2(offset, dev->block_size_log2);
    9601c014:	9ad62340 	lsl	x0, x26, x22
    9601c018:	8a200360 	bic	x0, x27, x0
		size_t tocopy = MIN(TEGRABL_BLOCKDEV_BLOCK_SIZE(dev) -
    9601c01c:	9ad62336 	lsl	x22, x25, x22
    9601c020:	cb0002d6 	sub	x22, x22, x0
    9601c024:	eb1302df 	cmp	x22, x19
		memcpy((uint8_t *)partial_block_buf + block_offset, buf, tocopy);
    9601c028:	8b000280 	add	x0, x20, x0
		size_t tocopy = MIN(TEGRABL_BLOCKDEV_BLOCK_SIZE(dev) -
    9601c02c:	9a9392d6 	csel	x22, x22, x19, ls  // ls = plast
		memcpy((uint8_t *)partial_block_buf + block_offset, buf, tocopy);
    9601c030:	aa1603e2 	mov	x2, x22
    9601c034:	940037bc 	bl	96029f24 <memcpy>
		error = tegrabl_blockdev_write_block(dev, partial_block_buf, block, 1);
    9601c038:	2a1903e3 	mov	w3, w25
    9601c03c:	2a1803e2 	mov	w2, w24
    9601c040:	aa1403e1 	mov	x1, x20
    9601c044:	aa1503e0 	mov	x0, x21
    9601c048:	97ffff8d 	bl	9601be7c <tegrabl_blockdev_write_block>
		if (error != TEGRABL_NO_ERROR) {
    9601c04c:	35fffc20 	cbnz	w0, 9601bfd0 <tegrabl_blockdev_default_write+0xac>
		buf += tocopy;
    9601c050:	8b1602f7 	add	x23, x23, x22
		len -= tocopy;
    9601c054:	cb160273 	sub	x19, x19, x22
		block++;
    9601c058:	11000719 	add	w25, w24, #0x1
	if (len >= (1U << dev->block_size_log2)) {
    9601c05c:	b94022b6 	ldr	w22, [x21, #32]
    9601c060:	52800020 	mov	w0, #0x1                   	// #1
    9601c064:	1ad62001 	lsl	w1, w0, w22
    9601c068:	eb13003f 	cmp	x1, x19
    9601c06c:	54000968 	b.hi	9601c198 <tegrabl_blockdev_default_write+0x274>  // b.pmore
		size_t block_count = DIV_FLOOR_LOG2(len, dev->block_size_log2);
    9601c070:	9ad6267a 	lsr	x26, x19, x22
		size_t bytes = block_count << dev->block_size_log2;
    9601c074:	9ad62356 	lsl	x22, x26, x22
		if (bytes > len) {
    9601c078:	eb16027f 	cmp	x19, x22
    9601c07c:	54000803 	b.cc	9601c17c <tegrabl_blockdev_default_write+0x258>  // b.lo, b.ul, b.last
	return MOD_POW2((uintptr_t)buf, dev->buf_align_size) == 0UL;
    9601c080:	b9402ea1 	ldr	w1, [x21, #44]
    9601c084:	51000421 	sub	w1, w1, #0x1
		if (!tegrabl_blockdev_buffer_aligned(dev, buf)) {
    9601c088:	ea0102ff 	tst	x23, x1
    9601c08c:	540002c0 	b.eq	9601c0e4 <tegrabl_blockdev_default_write+0x1c0>  // b.none
			temp_buf = tegrabl_alloc_align(TEGRABL_HEAP_DMA, TEGRABL_BLOCKDEV_MEM_ALIGN_SIZE,
    9601c090:	aa1603e2 	mov	x2, x22
    9601c094:	d2800101 	mov	x1, #0x8                   	// #8
    9601c098:	94002aa2 	bl	96026b20 <tegrabl_alloc_align>
    9601c09c:	aa0003f8 	mov	x24, x0
			if (temp_buf == NULL) {
    9601c0a0:	b4000740 	cbz	x0, 9601c188 <tegrabl_blockdev_default_write+0x264>
			memcpy(temp_buf, buf, bytes);
    9601c0a4:	aa1603e2 	mov	x2, x22
    9601c0a8:	aa1703e1 	mov	x1, x23
    9601c0ac:	9400379e 	bl	96029f24 <memcpy>
			error = tegrabl_blockdev_write_block(dev, temp_buf, block, block_count);
    9601c0b0:	2a1a03e3 	mov	w3, w26
    9601c0b4:	2a1903e2 	mov	w2, w25
    9601c0b8:	aa1803e1 	mov	x1, x24
    9601c0bc:	aa1503e0 	mov	x0, x21
    9601c0c0:	97ffff6f 	bl	9601be7c <tegrabl_blockdev_write_block>
		if (error != TEGRABL_NO_ERROR) {
    9601c0c4:	340001e0 	cbz	w0, 9601c100 <tegrabl_blockdev_default_write+0x1dc>
    9601c0c8:	12005c00 	and	w0, w0, #0xffffff
    9601c0cc:	32070813 	orr	w19, w0, #0xe000000
	if (temp_buf != NULL) {
    9601c0d0:	b4fff858 	cbz	x24, 9601bfd8 <tegrabl_blockdev_default_write+0xb4>
		tegrabl_dealloc(TEGRABL_HEAP_DMA, temp_buf);
    9601c0d4:	aa1803e1 	mov	x1, x24
    9601c0d8:	52800020 	mov	w0, #0x1                   	// #1
    9601c0dc:	94002a73 	bl	96026aa8 <tegrabl_dealloc>
    9601c0e0:	17ffffbe 	b	9601bfd8 <tegrabl_blockdev_default_write+0xb4>
			error = tegrabl_blockdev_write_block(dev, buf, block, block_count);
    9601c0e4:	2a1a03e3 	mov	w3, w26
    9601c0e8:	2a1903e2 	mov	w2, w25
    9601c0ec:	aa1703e1 	mov	x1, x23
    9601c0f0:	aa1503e0 	mov	x0, x21
	void *temp_buf = NULL;
    9601c0f4:	d2800018 	mov	x24, #0x0                   	// #0
			error = tegrabl_blockdev_write_block(dev, buf, block, block_count);
    9601c0f8:	97ffff61 	bl	9601be7c <tegrabl_blockdev_write_block>
    9601c0fc:	17fffff2 	b	9601c0c4 <tegrabl_blockdev_default_write+0x1a0>
	if (len > 0ULL) {
    9601c100:	eb160273 	subs	x19, x19, x22
    9601c104:	54000380 	b.eq	9601c174 <tegrabl_blockdev_default_write+0x250>  // b.none
		if (partial_block_buf == NULL) {
    9601c108:	b4000514 	cbz	x20, 9601c1a8 <tegrabl_blockdev_default_write+0x284>
		buf += bytes;
    9601c10c:	8b1602f7 	add	x23, x23, x22
		block += block_count;
    9601c110:	0b1a0339 	add	w25, w25, w26
		error = tegrabl_blockdev_read_block(dev, partial_block_buf, block, 1);
    9601c114:	52800023 	mov	w3, #0x1                   	// #1
    9601c118:	2a1903e2 	mov	w2, w25
    9601c11c:	aa1403e1 	mov	x1, x20
    9601c120:	aa1503e0 	mov	x0, x21
    9601c124:	97fffe71 	bl	9601bae8 <tegrabl_blockdev_read_block>
		if (error != TEGRABL_NO_ERROR) {
    9601c128:	340000a0 	cbz	w0, 9601c13c <tegrabl_blockdev_default_write+0x218>
    9601c12c:	12005c00 	and	w0, w0, #0xffffff
    9601c130:	32070813 	orr	w19, w0, #0xe000000
	if (temp_buf != NULL) {
    9601c134:	b5fffd18 	cbnz	x24, 9601c0d4 <tegrabl_blockdev_default_write+0x1b0>
    9601c138:	17ffffa9 	b	9601bfdc <tegrabl_blockdev_default_write+0xb8>
		memcpy(partial_block_buf, buf, len);
    9601c13c:	aa1303e2 	mov	x2, x19
    9601c140:	aa1703e1 	mov	x1, x23
    9601c144:	aa1403e0 	mov	x0, x20
    9601c148:	94003777 	bl	96029f24 <memcpy>
		error = tegrabl_blockdev_write_block(dev, partial_block_buf, block, 1);
    9601c14c:	52800023 	mov	w3, #0x1                   	// #1
    9601c150:	2a1903e2 	mov	w2, w25
    9601c154:	aa1403e1 	mov	x1, x20
    9601c158:	aa1503e0 	mov	x0, x21
    9601c15c:	97ffff48 	bl	9601be7c <tegrabl_blockdev_write_block>
    9601c160:	2a0003f3 	mov	w19, w0
		if (error != TEGRABL_NO_ERROR) {
    9601c164:	34fffe80 	cbz	w0, 9601c134 <tegrabl_blockdev_default_write+0x210>
    9601c168:	12005c13 	and	w19, w0, #0xffffff
    9601c16c:	32070a73 	orr	w19, w19, #0xe000000
			goto fail;
    9601c170:	17fffff1 	b	9601c134 <tegrabl_blockdev_default_write+0x210>
fail:
    9601c174:	52800013 	mov	w19, #0x0                   	// #0
    9601c178:	17ffffd6 	b	9601c0d0 <tegrabl_blockdev_default_write+0x1ac>
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    9601c17c:	52806053 	mov	w19, #0x302                 	// #770
				error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 2);
    9601c180:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601c184:	17ffff95 	b	9601bfd8 <tegrabl_blockdev_default_write+0xb4>
    9601c188:	52804073 	mov	w19, #0x203                 	// #515
    9601c18c:	17fffffd 	b	9601c180 <tegrabl_blockdev_default_write+0x25c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9601c190:	52804053 	mov	w19, #0x202                 	// #514
    9601c194:	17ffff7f 	b	9601bf90 <tegrabl_blockdev_default_write+0x6c>
	if (len > 0ULL) {
    9601c198:	b4fff213 	cbz	x19, 9601bfd8 <tegrabl_blockdev_default_write+0xb4>
		if (partial_block_buf == NULL) {
    9601c19c:	b4ffef94 	cbz	x20, 9601bf8c <tegrabl_blockdev_default_write+0x68>
	void *temp_buf = NULL;
    9601c1a0:	d2800018 	mov	x24, #0x0                   	// #0
    9601c1a4:	17ffffdc 	b	9601c114 <tegrabl_blockdev_default_write+0x1f0>
	if (temp_buf != NULL) {
    9601c1a8:	b4ffef38 	cbz	x24, 9601bf8c <tegrabl_blockdev_default_write+0x68>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601c1ac:	52800073 	mov	w19, #0x3                   	// #3
    9601c1b0:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601c1b4:	17ffffc8 	b	9601c0d4 <tegrabl_blockdev_default_write+0x1b0>

000000009601c1b8 <tegrabl_blockdev_erase>:

tegrabl_error_t tegrabl_blockdev_erase(tegrabl_bdev_t *dev, bnum_t block,
	bnum_t count, bool is_secure)
{
    9601c1b8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((dev == NULL) || (count == 0UL)) {
    9601c1bc:	f100001f 	cmp	x0, #0x0
    9601c1c0:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
{
    9601c1c4:	910003fd 	mov	x29, sp
    9601c1c8:	f9000bf3 	str	x19, [sp, #16]
	if ((dev == NULL) || (count == 0UL)) {
    9601c1cc:	54000300 	b.eq	9601c22c <tegrabl_blockdev_erase+0x74>  // b.none
	}

	pr_trace("dev '%d', block %u, count %u\n", dev->device_id, block, count);

	/* range check */
	if ((block > dev->block_count) || ((block + count) > dev->block_count)) {
    9601c1d0:	b9402406 	ldr	w6, [x0, #36]
    9601c1d4:	6b0100df 	cmp	w6, w1
    9601c1d8:	54000303 	b.cc	9601c238 <tegrabl_blockdev_erase+0x80>  // b.lo, b.ul, b.last
    9601c1dc:	0b010045 	add	w5, w2, w1
    9601c1e0:	6b0500df 	cmp	w6, w5
    9601c1e4:	540002a3 	b.cc	9601c238 <tegrabl_blockdev_erase+0x80>  // b.lo, b.ul, b.last
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 4);
		goto fail;
	}

	if (dev->ref <= 0UL) {
    9601c1e8:	b9401005 	ldr	w5, [x0, #16]
    9601c1ec:	340002a5 	cbz	w5, 9601c240 <tegrabl_blockdev_erase+0x88>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 15);
		goto fail;
	}

	error = dev->erase(dev, block, count, is_secure);
    9601c1f0:	f9403404 	ldr	x4, [x0, #104]
    9601c1f4:	12001c63 	and	w3, w3, #0xff
    9601c1f8:	d63f0080 	blr	x4
    9601c1fc:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c200:	340000e0 	cbz	w0, 9601c21c <tegrabl_blockdev_erase+0x64>
    9601c204:	12005c13 	and	w19, w0, #0xffffff
    9601c208:	32070a73 	orr	w19, w19, #0xe000000
		goto fail;
	}

fail:
	 if (error != TEGRABL_NO_ERROR) {
		pr_error("Blockdev erase: exit error = %x\n", error);
    9601c20c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c210:	2a1303e1 	mov	w1, w19
    9601c214:	910a8800 	add	x0, x0, #0x2a2
    9601c218:	94001916 	bl	96022670 <tegrabl_printf>
	}
	return error;
}
    9601c21c:	2a1303e0 	mov	w0, w19
    9601c220:	f9400bf3 	ldr	x19, [sp, #16]
    9601c224:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601c228:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 14);
    9601c22c:	5281c053 	mov	w19, #0xe02                 	// #3586
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 15);
    9601c230:	72a1c1d3 	movk	w19, #0xe0e, lsl #16
    9601c234:	17fffff6 	b	9601c20c <tegrabl_blockdev_erase+0x54>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 4);
    9601c238:	52808093 	mov	w19, #0x404                 	// #1028
    9601c23c:	17fffffd 	b	9601c230 <tegrabl_blockdev_erase+0x78>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 15);
    9601c240:	5281e053 	mov	w19, #0xf02                 	// #3842
    9601c244:	17fffffb 	b	9601c230 <tegrabl_blockdev_erase+0x78>

000000009601c248 <tegrabl_blockdev_initialize_bdev>:
tegrabl_error_t tegrabl_blockdev_initialize_bdev(tegrabl_bdev_t *dev,
	uint32_t device_id, uint32_t block_size_log2, bnum_t block_count)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (dev == NULL) {
    9601c248:	b5000180 	cbnz	x0, 9601c278 <tegrabl_blockdev_initialize_bdev+0x30>
{
    9601c24c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	dev->close = NULL;
#endif

fail:
	if (error != TEGRABL_NO_ERROR) {
		pr_error("Blockdev initialize bdev: exit error = %x\n", error);
    9601c250:	52824041 	mov	w1, #0x1202                	// #4610
    9601c254:	72a1c1c1 	movk	w1, #0xe0e, lsl #16
    9601c258:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
{
    9601c25c:	910003fd 	mov	x29, sp
		pr_error("Blockdev initialize bdev: exit error = %x\n", error);
    9601c260:	910b1800 	add	x0, x0, #0x2c6
    9601c264:	94001903 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 18);
    9601c268:	52824040 	mov	w0, #0x1202                	// #4610
    9601c26c:	72a1c1c0 	movk	w0, #0xe0e, lsl #16
	}
	return error;
}
    9601c270:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9601c274:	d65f03c0 	ret
	dev->device_id = device_id;
    9601c278:	2902041f 	stp	wzr, w1, [x0, #16]
	dev->read = tegrabl_blockdev_default_read;
    9601c27c:	f0ffffe1 	adrp	x1, 9601b000 <tegrabl_ufs_request_sense+0x3c>
    9601c280:	912e3021 	add	x1, x1, #0xb8c
    9601c284:	f9001c01 	str	x1, [x0, #56]
	dev->read_block = tegrabl_blockdev_default_read_block;
    9601c288:	f0ffffe1 	adrp	x1, 9601b000 <tegrabl_ufs_request_sense+0x3c>
    9601c28c:	91280021 	add	x1, x1, #0xa00
	dev->block_count = block_count;
    9601c290:	29040c02 	stp	w2, w3, [x0, #32]
	dev->size = (off_t)block_count << block_size_log2;
    9601c294:	2a0303e3 	mov	w3, w3
	dev->read_block = tegrabl_blockdev_default_read_block;
    9601c298:	f9002401 	str	x1, [x0, #72]
	dev->write = tegrabl_blockdev_default_write;
    9601c29c:	f0ffffe1 	adrp	x1, 9601b000 <tegrabl_ufs_request_sense+0x3c>
    9601c2a0:	913c9021 	add	x1, x1, #0xf24
    9601c2a4:	f9002001 	str	x1, [x0, #64]
	dev->write_block = tegrabl_blockdev_default_write_block;
    9601c2a8:	f0ffffe1 	adrp	x1, 9601b000 <tegrabl_ufs_request_sense+0x3c>
    9601c2ac:	91283021 	add	x1, x1, #0xa0c
	item->prev = item->next = 0;
    9601c2b0:	a9007c1f 	stp	xzr, xzr, [x0]
	dev->size = (off_t)block_count << block_size_log2;
    9601c2b4:	9ac22062 	lsl	x2, x3, x2
    9601c2b8:	f9000c02 	str	x2, [x0, #24]
	dev->write_block = tegrabl_blockdev_default_write_block;
    9601c2bc:	f9002801 	str	x1, [x0, #80]
	dev->erase = tegrabl_blockdev_default_erase;
    9601c2c0:	f0ffffe1 	adrp	x1, 9601b000 <tegrabl_ufs_request_sense+0x3c>
	dev->close = NULL;
    9601c2c4:	f900401f 	str	xzr, [x0, #128]
	dev->erase = tegrabl_blockdev_default_erase;
    9601c2c8:	9127d021 	add	x1, x1, #0x9f4
    9601c2cc:	f9003401 	str	x1, [x0, #104]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9601c2d0:	52800000 	mov	w0, #0x0                   	// #0
}
    9601c2d4:	d65f03c0 	ret

000000009601c2d8 <tegrabl_blockdev_register_device>:
tegrabl_error_t tegrabl_blockdev_register_device(tegrabl_bdev_t *dev)
{
	tegrabl_bdev_t *entry;
	bool duplicate = false;

	if (dev == NULL) {
    9601c2d8:	b40002c0 	cbz	x0, 9601c330 <tegrabl_blockdev_register_device+0x58>
	dev->ref += 1U;
    9601c2dc:	b9401001 	ldr	w1, [x0, #16]
    9601c2e0:	11000421 	add	w1, w1, #0x1
    9601c2e4:	b9001001 	str	w1, [x0, #16]
	pr_trace("Blockdev device id = %x\n", dev->device_id);

	bdev_inc_ref(dev);

	/* Check if duplicate */
	list_for_every_entry(&bdevs->list, entry, tegrabl_bdev_t, node) {
    9601c2e8:	d0000281 	adrp	x1, 9606e000 <__bss_start>
    9601c2ec:	f9457821 	ldr	x1, [x1, #2800]
    9601c2f0:	f9400422 	ldr	x2, [x1, #8]
    9601c2f4:	eb02003f 	cmp	x1, x2
    9601c2f8:	54000101 	b.ne	9601c318 <tegrabl_blockdev_register_device+0x40>  // b.any
	item->prev = list->prev;
    9601c2fc:	f9400022 	ldr	x2, [x1]
	item->next = list;
    9601c300:	a9000402 	stp	x2, x1, [x0]
	list->prev->next = item;
    9601c304:	f9400022 	ldr	x2, [x1]
    9601c308:	f9000440 	str	x0, [x2, #8]
	list->prev = item;
    9601c30c:	f9000020 	str	x0, [x1]
		}
	}
	if (!duplicate)
		list_add_tail(&bdevs->list, &dev->node);

	return (duplicate) ? TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0) :
    9601c310:	52800000 	mov	w0, #0x0                   	// #0
    9601c314:	14000009 	b	9601c338 <tegrabl_blockdev_register_device+0x60>
		if (entry->device_id == dev->device_id) {
    9601c318:	b9401403 	ldr	w3, [x0, #20]
    9601c31c:	b9401444 	ldr	w4, [x2, #20]
    9601c320:	6b03009f 	cmp	w4, w3
    9601c324:	540000c0 	b.eq	9601c33c <tegrabl_blockdev_register_device+0x64>  // b.none
	list_for_every_entry(&bdevs->list, entry, tegrabl_bdev_t, node) {
    9601c328:	f9400442 	ldr	x2, [x2, #8]
    9601c32c:	17fffff2 	b	9601c2f4 <tegrabl_blockdev_register_device+0x1c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 20);
    9601c330:	52828040 	mov	w0, #0x1402                	// #5122
	return (duplicate) ? TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0) :
    9601c334:	72a1c1c0 	movk	w0, #0xe0e, lsl #16
			TEGRABL_NO_ERROR;

}
    9601c338:	d65f03c0 	ret
	return (duplicate) ? TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0) :
    9601c33c:	52800420 	mov	w0, #0x21                  	// #33
    9601c340:	17fffffd 	b	9601c334 <tegrabl_blockdev_register_device+0x5c>

000000009601c344 <tegrabl_blockdev_get_name>:
				 entry->size, TEGRABL_BLOCKDEV_BLOCK_SIZE(entry), entry->ref);
	}
}

const char *tegrabl_blockdev_get_name(tegrabl_storage_type_t type)
{
    9601c344:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
	const char * const storage_name[TEGRABL_STORAGE_MAX] = {
    9601c348:	d2800b02 	mov	x2, #0x58                  	// #88
    9601c34c:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c350:	9107c021 	add	x1, x1, #0x1f0
{
    9601c354:	910003fd 	mov	x29, sp
	const char * const storage_name[TEGRABL_STORAGE_MAX] = {
    9601c358:	9100a3a3 	add	x3, x29, #0x28
{
    9601c35c:	f9000bf3 	str	x19, [sp, #16]
    9601c360:	2a0003f3 	mov	w19, w0
	const char * const storage_name[TEGRABL_STORAGE_MAX] = {
    9601c364:	aa0303e0 	mov	x0, x3
    9601c368:	940036ef 	bl	96029f24 <memcpy>
		[TEGRABL_STORAGE_UFS_RPMB] = "UFS_RPMB",
		[TEGRABL_STORAGE_NVME] = "NVME",
	};

	TEGRABL_COMPILE_ASSERT(ARRAY_SIZE(storage_name) == TEGRABL_STORAGE_MAX, "missing storage-type in array");
	if (type >= TEGRABL_STORAGE_MAX) {
    9601c36c:	71002a7f 	cmp	w19, #0xa
    9601c370:	540000a8 	b.hi	9601c384 <tegrabl_blockdev_get_name+0x40>  // b.pmore
		return NULL;
	}
	return storage_name[type];
    9601c374:	f8735800 	ldr	x0, [x0, w19, uxtw #3]
}
    9601c378:	f9400bf3 	ldr	x19, [sp, #16]
    9601c37c:	a8c87bfd 	ldp	x29, x30, [sp], #128
    9601c380:	d65f03c0 	ret
		return NULL;
    9601c384:	d2800000 	mov	x0, #0x0                   	// #0
    9601c388:	17fffffc 	b	9601c378 <tegrabl_blockdev_get_name+0x34>

000000009601c38c <tegrabl_blockdev_init>:

tegrabl_error_t tegrabl_blockdev_init(void)
{
    9601c38c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601c390:	910003fd 	mov	x29, sp
    9601c394:	f9000bf3 	str	x19, [sp, #16]
	if (bdevs != NULL) {
    9601c398:	d0000293 	adrp	x19, 9606e000 <__bss_start>
    9601c39c:	f9457a60 	ldr	x0, [x19, #2800]
    9601c3a0:	b50000c0 	cbnz	x0, 9601c3b8 <tegrabl_blockdev_init+0x2c>
		pr_debug("Block dev already initialized:\n");
		return TEGRABL_NO_ERROR;
	} else {
		bdevs = tegrabl_malloc(sizeof(*bdevs));
    9601c3a4:	d2800200 	mov	x0, #0x10                  	// #16
    9601c3a8:	940029b4 	bl	96026a78 <tegrabl_malloc>
    9601c3ac:	f9057a60 	str	x0, [x19, #2800]
		if (bdevs == NULL) {
    9601c3b0:	b40000c0 	cbz	x0, 9601c3c8 <tegrabl_blockdev_init+0x3c>
	list->prev = list->next = list;
    9601c3b4:	a9000000 	stp	x0, x0, [x0]
		return TEGRABL_NO_ERROR;
    9601c3b8:	52800000 	mov	w0, #0x0                   	// #0
	}

	list_initialize(&bdevs->list);

	return TEGRABL_NO_ERROR;
}
    9601c3bc:	f9400bf3 	ldr	x19, [sp, #16]
    9601c3c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601c3c4:	d65f03c0 	ret
			return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 2);
    9601c3c8:	52804060 	mov	w0, #0x203                 	// #515
    9601c3cc:	72a1c1c0 	movk	w0, #0xe0e, lsl #16
    9601c3d0:	17fffffb 	b	9601c3bc <tegrabl_blockdev_init+0x30>

000000009601c3d4 <eeprom_read>:
{
	TEGRABL_UNUSED(in_data);

	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (!eeprom) {
    9601c3d4:	b4000220 	cbz	x0, 9601c418 <eeprom_read+0x44>
{
    9601c3d8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601c3dc:	910003fd 	mov	x29, sp
    9601c3e0:	f9000bf3 	str	x19, [sp, #16]
    9601c3e4:	aa0003f3 	mov	x19, x0
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	eeprom->data_valid = false;
    9601c3e8:	3900a01f 	strb	wzr, [x0, #40]
	error = tegrabl_eeprom_read(eeprom);
    9601c3ec:	97ffc2b1 	bl	9600ceb0 <tegrabl_eeprom_read>
	if (error != TEGRABL_NO_ERROR) {
    9601c3f0:	340000e0 	cbz	w0, 9601c40c <eeprom_read+0x38>
    9601c3f4:	12005c00 	and	w0, w0, #0xffffff
    9601c3f8:	52a6a001 	mov	w1, #0x35000000            	// #889192448
    9601c3fc:	2a010000 	orr	w0, w0, w1
		return error;
	}
	eeprom->data_valid = true;

	return error;
}
    9601c400:	f9400bf3 	ldr	x19, [sp, #16]
    9601c404:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601c408:	d65f03c0 	ret
	eeprom->data_valid = true;
    9601c40c:	52800021 	mov	w1, #0x1                   	// #1
    9601c410:	3900a261 	strb	w1, [x19, #40]
	return error;
    9601c414:	17fffffb 	b	9601c400 <eeprom_read+0x2c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601c418:	52800040 	mov	w0, #0x2                   	// #2
    9601c41c:	72a6a6a0 	movk	w0, #0x3535, lsl #16
}
    9601c420:	d65f03c0 	ret

000000009601c424 <eeprom_general_read>:

	if (!eeprom) {
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	if (!eeprom->name) {
    9601c424:	f9400002 	ldr	x2, [x0]
    9601c428:	b5000042 	cbnz	x2, 9601c430 <eeprom_general_read+0xc>
		return eeprom_read(eeprom, in_data);
    9601c42c:	17ffffea 	b	9601c3d4 <eeprom_read>
{
    9601c430:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9601c434:	910003fd 	mov	x29, sp
    9601c438:	a90153f3 	stp	x19, x20, [sp, #16]
	}

	uint8_t index = 0;

	for (index = 0; index < TEGRABL_EEPROM_DEVICE_MAX; index++) {
		if (!eeprom_ops[index].name) {
    9601c43c:	90000134 	adrp	x20, 96040000 <sdmmc_base_addr+0x9f4>
{
    9601c440:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601c444:	aa0003f3 	mov	x19, x0
    9601c448:	f9001bf7 	str	x23, [sp, #48]
		if (!eeprom_ops[index].name) {
    9601c44c:	91156296 	add	x22, x20, #0x558
    9601c450:	aa0103f7 	mov	x23, x1
    9601c454:	d2800015 	mov	x21, #0x0                   	// #0
    9601c458:	d37ceea0 	lsl	x0, x21, #4
    9601c45c:	2a1503f4 	mov	w20, w21
    9601c460:	f8766801 	ldr	x1, [x0, x22]
    9601c464:	b5000141 	cbnz	x1, 9601c48c <eeprom_general_read+0x68>
			return eeprom_ops[index].ops(eeprom, in_data);
		}

		if (!strcmp(eeprom->name, eeprom_ops[index].name)) {
			return eeprom_ops[index].ops(eeprom, in_data);
    9601c468:	8b34d2d4 	add	x20, x22, w20, sxtw #4
    9601c46c:	aa1703e1 	mov	x1, x23
    9601c470:	aa1303e0 	mov	x0, x19
		}
	}

	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
}
    9601c474:	f9401bf7 	ldr	x23, [sp, #48]
    9601c478:	a9425bf5 	ldp	x21, x22, [sp, #32]
			return eeprom_ops[index].ops(eeprom, in_data);
    9601c47c:	f9400682 	ldr	x2, [x20, #8]
}
    9601c480:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601c484:	a8c47bfd 	ldp	x29, x30, [sp], #64
			return eeprom_ops[index].ops(eeprom, in_data);
    9601c488:	d61f0040 	br	x2
		if (!strcmp(eeprom->name, eeprom_ops[index].name)) {
    9601c48c:	f9400260 	ldr	x0, [x19]
    9601c490:	9400376f 	bl	9602a24c <strcmp>
    9601c494:	34fffea0 	cbz	w0, 9601c468 <eeprom_general_read+0x44>
    9601c498:	910006b5 	add	x21, x21, #0x1
	for (index = 0; index < TEGRABL_EEPROM_DEVICE_MAX; index++) {
    9601c49c:	f1000ebf 	cmp	x21, #0x3
    9601c4a0:	54fffdc1 	b.ne	9601c458 <eeprom_general_read+0x34>  // b.any
}
    9601c4a4:	52800020 	mov	w0, #0x1                   	// #1
    9601c4a8:	f9401bf7 	ldr	x23, [sp, #48]
    9601c4ac:	72a6a6a0 	movk	w0, #0x3535, lsl #16
    9601c4b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601c4b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601c4b8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9601c4bc:	d65f03c0 	ret

000000009601c4c0 <cam_eeprom_read>:
{
    9601c4c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9601c4c4:	910003fd 	mov	x29, sp
    9601c4c8:	a90153f3 	stp	x19, x20, [sp, #16]
    9601c4cc:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (!eeprom) {
    9601c4d0:	b4000e20 	cbz	x0, 9601c694 <cam_eeprom_read+0x1d4>
    9601c4d4:	aa0103e2 	mov	x2, x1
	void *fdt = NULL;
    9601c4d8:	910143a1 	add	x1, x29, #0x50
    9601c4dc:	aa0003f4 	mov	x20, x0
	error = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9601c4e0:	52800000 	mov	w0, #0x0                   	// #0
	void *fdt = NULL;
    9601c4e4:	f81e8c3f 	str	xzr, [x1, #-24]!
	int node = *(int *)in_data;
    9601c4e8:	b9400055 	ldr	w21, [x2]
	error = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9601c4ec:	9400525b 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
    9601c4f0:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c4f4:	340001c0 	cbz	w0, 9601c52c <cam_eeprom_read+0x6c>
		pr_error("%s: Failed to get BL-dtb handle\n", __func__);
    9601c4f8:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c4fc:	b0000100 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9601c500:	910f7821 	add	x1, x1, #0x3de
    9601c504:	91273c00 	add	x0, x0, #0x9cf
    9601c508:	12005e73 	and	w19, w19, #0xffffff
    9601c50c:	94001859 	bl	96022670 <tegrabl_printf>
    9601c510:	52a6a000 	mov	w0, #0x35000000            	// #889192448
    9601c514:	2a000273 	orr	w19, w19, w0
}
    9601c518:	2a1303e0 	mov	w0, w19
    9601c51c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601c520:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601c524:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601c528:	d65f03c0 	ret
	return tegrabl_dt_get_prop_array(fdt, node, prop, U32_SZ, nmem, res, num);
    9601c52c:	f9401fa0 	ldr	x0, [x29, #56]
    9601c530:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601c534:	d2800006 	mov	x6, #0x0                   	// #0
    9601c538:	910123a5 	add	x5, x29, #0x48
    9601c53c:	52800044 	mov	w4, #0x2                   	// #2
    9601c540:	d2800083 	mov	x3, #0x4                   	// #4
    9601c544:	91111042 	add	x2, x2, #0x444
    9601c548:	2a1503e1 	mov	w1, w21
    9601c54c:	940052bd 	bl	96031040 <tegrabl_dt_get_prop_array>
	if (error != TEGRABL_NO_ERROR) {
    9601c550:	34000120 	cbz	w0, 9601c574 <cam_eeprom_read+0xb4>
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9601c554:	528001b3 	mov	w19, #0xd                   	// #13
		pr_error("%s: Cannot find enable-gpio property\n", __func__);
    9601c558:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c55c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c560:	910f7821 	add	x1, x1, #0x3de
    9601c564:	91114000 	add	x0, x0, #0x450
    9601c568:	94001842 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601c56c:	72a6a6b3 	movk	w19, #0x3535, lsl #16
    9601c570:	17ffffea 	b	9601c518 <cam_eeprom_read+0x58>
	gpio_num = gpio_prop[1];
    9601c574:	29495bb5 	ldp	w21, w22, [x29, #72]
	pr_info("Enabling gpio chip_id = %u, gpio pin = %u\n", chip_id, gpio_num);
    9601c578:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c57c:	9111e400 	add	x0, x0, #0x479
    9601c580:	2a1603e2 	mov	w2, w22
    9601c584:	2a1503e1 	mov	w1, w21
    9601c588:	9400183a 	bl	96022670 <tegrabl_printf>
	error = tegrabl_gpio_driver_get(chip_id, &gpio_drv);
    9601c58c:	910103a1 	add	x1, x29, #0x40
    9601c590:	2a1503e0 	mov	w0, w21
    9601c594:	97ffc54f 	bl	9600dad0 <tegrabl_gpio_driver_get>
    9601c598:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c59c:	340000e0 	cbz	w0, 9601c5b8 <cam_eeprom_read+0xf8>
		pr_error("%s: Can't get gpio driver\n", __func__);
    9601c5a0:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c5a4:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c5a8:	910f7821 	add	x1, x1, #0x3de
    9601c5ac:	91129c00 	add	x0, x0, #0x4a7
		pr_error("%s: Error disabling gpio pin\n", __func__);
    9601c5b0:	94001830 	bl	96022670 <tegrabl_printf>
		return error;
    9601c5b4:	17ffffd9 	b	9601c518 <cam_eeprom_read+0x58>
	error = gpio_config(gpio_drv, gpio_num, GPIO_PINMODE_OUTPUT);
    9601c5b8:	f94023a0 	ldr	x0, [x29, #64]
	return drv->ops->config(gpio_num, mode, drv->driver_data);
    9601c5bc:	f9401401 	ldr	x1, [x0, #40]
    9601c5c0:	f9400802 	ldr	x2, [x0, #16]
    9601c5c4:	2a1603e0 	mov	w0, w22
    9601c5c8:	f9400823 	ldr	x3, [x1, #16]
    9601c5cc:	52800021 	mov	w1, #0x1                   	// #1
    9601c5d0:	d63f0060 	blr	x3
    9601c5d4:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c5d8:	340000c0 	cbz	w0, 9601c5f0 <cam_eeprom_read+0x130>
		pr_error("%s: Error config gpio pin\n", __func__);
    9601c5dc:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c5e0:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c5e4:	910f7821 	add	x1, x1, #0x3de
    9601c5e8:	91131400 	add	x0, x0, #0x4c5
    9601c5ec:	17fffff1 	b	9601c5b0 <cam_eeprom_read+0xf0>
	error = gpio_write(gpio_drv, gpio_num, GPIO_PIN_STATE_HIGH);
    9601c5f0:	f94023a0 	ldr	x0, [x29, #64]
	return drv->ops->write(gpio_num, state, drv->driver_data);
    9601c5f4:	f9401401 	ldr	x1, [x0, #40]
    9601c5f8:	f9400802 	ldr	x2, [x0, #16]
    9601c5fc:	2a1603e0 	mov	w0, w22
    9601c600:	f9400423 	ldr	x3, [x1, #8]
    9601c604:	52800021 	mov	w1, #0x1                   	// #1
    9601c608:	d63f0060 	blr	x3
    9601c60c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c610:	340000c0 	cbz	w0, 9601c628 <cam_eeprom_read+0x168>
		pr_error("%s: Error enabling gpio pin\n", __func__);
    9601c614:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c618:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c61c:	910f7821 	add	x1, x1, #0x3de
    9601c620:	91138c00 	add	x0, x0, #0x4e3
    9601c624:	17ffffe3 	b	9601c5b0 <cam_eeprom_read+0xf0>
	tegrabl_udelay(100);
    9601c628:	d2800c80 	mov	x0, #0x64                  	// #100
    9601c62c:	94000d9e 	bl	9601fca4 <tegrabl_udelay>
	eeprom->data_valid = false;
    9601c630:	3900a29f 	strb	wzr, [x20, #40]
	error = tegrabl_eeprom_read(eeprom);
    9601c634:	aa1403e0 	mov	x0, x20
    9601c638:	97ffc21e 	bl	9600ceb0 <tegrabl_eeprom_read>
	if (error == TEGRABL_NO_ERROR) {
    9601c63c:	35000060 	cbnz	w0, 9601c648 <cam_eeprom_read+0x188>
		eeprom->data_valid = true;
    9601c640:	52800020 	mov	w0, #0x1                   	// #1
    9601c644:	3900a280 	strb	w0, [x20, #40]
	pr_info("Disabling gpio chip_id = %u, gpio pin = %u\n", chip_id, gpio_num);
    9601c648:	2a1603e2 	mov	w2, w22
    9601c64c:	2a1503e1 	mov	w1, w21
    9601c650:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c654:	91140c00 	add	x0, x0, #0x503
    9601c658:	94001806 	bl	96022670 <tegrabl_printf>
	error = gpio_write(gpio_drv, gpio_num, GPIO_PIN_STATE_LOW);
    9601c65c:	f94023a0 	ldr	x0, [x29, #64]
    9601c660:	f9401401 	ldr	x1, [x0, #40]
    9601c664:	f9400802 	ldr	x2, [x0, #16]
    9601c668:	2a1603e0 	mov	w0, w22
    9601c66c:	f9400423 	ldr	x3, [x1, #8]
    9601c670:	52800001 	mov	w1, #0x0                   	// #0
    9601c674:	d63f0060 	blr	x3
    9601c678:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c67c:	34fff4e0 	cbz	w0, 9601c518 <cam_eeprom_read+0x58>
		pr_error("%s: Error disabling gpio pin\n", __func__);
    9601c680:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c684:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c688:	910f7821 	add	x1, x1, #0x3de
    9601c68c:	9114c800 	add	x0, x0, #0x532
    9601c690:	17ffffc8 	b	9601c5b0 <cam_eeprom_read+0xf0>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601c694:	52800053 	mov	w19, #0x2                   	// #2
    9601c698:	17ffffb5 	b	9601c56c <cam_eeprom_read+0xac>

000000009601c69c <tegrabl_eeprom_manager_init>:

	return TEGRABL_NO_ERROR;
}

tegrabl_error_t tegrabl_eeprom_manager_init(void)
{
    9601c69c:	d115c3ff 	sub	sp, sp, #0x570
	int parent, len, err, node = -1;
    9601c6a0:	12800000 	mov	w0, #0xffffffff            	// #-1
{
    9601c6a4:	a9007bfd 	stp	x29, x30, [sp]
    9601c6a8:	910003fd 	mov	x29, sp
	int parent, len, err, node = -1;
    9601c6ac:	b900aba0 	str	w0, [x29, #168]
	const char *name;
	char path[1024];
	uintptr_t base;
	void *fdt;

	if (eeprom_manager_initialized) {
    9601c6b0:	d0000280 	adrp	x0, 9606e000 <__bss_start>
{
    9601c6b4:	a90153f3 	stp	x19, x20, [sp, #16]
	if (eeprom_manager_initialized) {
    9601c6b8:	396be401 	ldrb	w1, [x0, #2809]
{
    9601c6bc:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601c6c0:	a90363f7 	stp	x23, x24, [sp, #48]
    9601c6c4:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601c6c8:	a90573fb 	stp	x27, x28, [sp, #80]
    9601c6cc:	f9003ba0 	str	x0, [x29, #112]
	if (eeprom_manager_initialized) {
    9601c6d0:	350058a1 	cbnz	w1, 9601d1e4 <tegrabl_eeprom_manager_init+0xb48>
		/* return early */
		return TEGRABL_NO_ERROR;
	}

	error = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9601c6d4:	910383a1 	add	x1, x29, #0xe0
    9601c6d8:	52800000 	mov	w0, #0x0                   	// #0
    9601c6dc:	940051df 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
    9601c6e0:	2a0003f5 	mov	w21, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c6e4:	35000460 	cbnz	w0, 9601c770 <tegrabl_eeprom_manager_init+0xd4>
		return error;
	}

	/* reset the global count */
	count = 0;
    9601c6e8:	d0000293 	adrp	x19, 9606e000 <__bss_start>
		if (!name) {
			pr_error("failed to get name for node %d\n", node);
			continue;
		}

		if (strncmp(name, "eeprom", 6) != 0) {
    9601c6ec:	b0000157 	adrp	x23, 96045000 <__func__.3796+0x7>
    9601c6f0:	9117eef7 	add	x23, x23, #0x5fb
	count = 0;
    9601c6f4:	392be27f 	strb	wzr, [x19, #2808]
	while (count < TEGRABL_EEPROM_MAX_NUM) {
    9601c6f8:	396be260 	ldrb	w0, [x19, #2808]
    9601c6fc:	71011c1f 	cmp	w0, #0x47
    9601c700:	54000128 	b.hi	9601c724 <tegrabl_eeprom_manager_init+0x88>  // b.pmore
		node = fdt_next_node(fdt, node, NULL);
    9601c704:	b940aba1 	ldr	w1, [x29, #168]
    9601c708:	d2800002 	mov	x2, #0x0                   	// #0
    9601c70c:	f94073a0 	ldr	x0, [x29, #224]
    9601c710:	9400547c 	bl	96031900 <fdt_next_node>
    9601c714:	b900aba0 	str	w0, [x29, #168]
		if (node < 0) {
    9601c718:	36f803e0 	tbz	w0, #31, 9601c794 <tegrabl_eeprom_manager_init+0xf8>
			if (node == -FDT_ERR_NOTFOUND)
    9601c71c:	3100041f 	cmn	w0, #0x1
    9601c720:	54000261 	b.ne	9601c76c <tegrabl_eeprom_manager_init+0xd0>  // b.any
		pr_info("EEPROM: %s: %s (%u bytes)\n", path, name, size);

		count++;
	}

	if (count == 0) {
    9601c724:	396be260 	ldrb	w0, [x19, #2808]
    9601c728:	35002260 	cbnz	w0, 9601cb74 <tegrabl_eeprom_manager_init+0x4d8>
	error = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9601c72c:	9103a3a1 	add	x1, x29, #0xe8
    9601c730:	52800000 	mov	w0, #0x0                   	// #0
	void *fdt = NULL;
    9601c734:	f90077bf 	str	xzr, [x29, #232]
	error = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9601c738:	940051c8 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
    9601c73c:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR) {
    9601c740:	34001900 	cbz	w0, 9601ca60 <tegrabl_eeprom_manager_init+0x3c4>
		pr_error("%s: Failed to get BL-dtb handle\n", __func__);
    9601c744:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601c748:	b0000100 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9601c74c:	91108421 	add	x1, x1, #0x421
    9601c750:	91273c00 	add	x0, x0, #0x9cf
    9601c754:	12005e94 	and	w20, w20, #0xffffff
    9601c758:	940017c6 	bl	96022670 <tegrabl_printf>
    9601c75c:	52a6a000 	mov	w0, #0x35000000            	// #889192448
    9601c760:	2a000294 	orr	w20, w20, w0
    9601c764:	2a1403f5 	mov	w21, w20
    9601c768:	14000117 	b	9601cbc4 <tegrabl_eeprom_manager_init+0x528>
			return node;
    9601c76c:	2a0003f5 	mov	w21, w0
		}
	}

	eeprom_manager_initialized = true;
	return TEGRABL_NO_ERROR;
}
    9601c770:	2a1503e0 	mov	w0, w21
    9601c774:	a9407bfd 	ldp	x29, x30, [sp]
    9601c778:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601c77c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601c780:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601c784:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601c788:	a94573fb 	ldp	x27, x28, [sp, #80]
    9601c78c:	9115c3ff 	add	sp, sp, #0x570
    9601c790:	d65f03c0 	ret
		name = fdt_get_name(fdt, node, &len);
    9601c794:	2a0003e1 	mov	w1, w0
    9601c798:	f94073a0 	ldr	x0, [x29, #224]
    9601c79c:	910293a2 	add	x2, x29, #0xa4
    9601c7a0:	9400555f 	bl	96031d1c <fdt_get_name>
    9601c7a4:	f9006ba0 	str	x0, [x29, #208]
		if (!name) {
    9601c7a8:	b50000c0 	cbnz	x0, 9601c7c0 <tegrabl_eeprom_manager_init+0x124>
			pr_error("failed to get name for node %d\n", node);
    9601c7ac:	b940aba1 	ldr	w1, [x29, #168]
    9601c7b0:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c7b4:	91163000 	add	x0, x0, #0x58c
    9601c7b8:	940017ae 	bl	96022670 <tegrabl_printf>
			continue;
    9601c7bc:	17ffffcf 	b	9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
		if (strncmp(name, "eeprom", 6) != 0) {
    9601c7c0:	d28000c2 	mov	x2, #0x6                   	// #6
    9601c7c4:	aa1703e1 	mov	x1, x23
    9601c7c8:	940036ad 	bl	9602a27c <strncmp>
    9601c7cc:	35fff960 	cbnz	w0, 9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
		err = fdt_get_path(fdt, node, path, sizeof(path));
    9601c7d0:	b940aba1 	ldr	w1, [x29, #168]
    9601c7d4:	52808003 	mov	w3, #0x400                 	// #1024
    9601c7d8:	f94073a0 	ldr	x0, [x29, #224]
    9601c7dc:	9105c3a2 	add	x2, x29, #0x170
    9601c7e0:	94005693 	bl	9603222c <fdt_get_path>
		if (err < 0) {
    9601c7e4:	36f800e0 	tbz	w0, #31, 9601c800 <tegrabl_eeprom_manager_init+0x164>
			pr_error("failed to get path for node %d: %d\n", node, err);
    9601c7e8:	b940aba1 	ldr	w1, [x29, #168]
    9601c7ec:	2a0003e2 	mov	w2, w0
    9601c7f0:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c7f4:	9116bc00 	add	x0, x0, #0x5af
			pr_error("failed to read label property for node %d: %d\n", node, error);
    9601c7f8:	9400179e 	bl	96022670 <tegrabl_printf>
			continue;
    9601c7fc:	17ffffbf 	b	9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
		error = tegrabl_dt_get_prop_string(fdt, node, "label", &name);
    9601c800:	b940aba1 	ldr	w1, [x29, #168]
    9601c804:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601c808:	f94073a0 	ldr	x0, [x29, #224]
    9601c80c:	910343a3 	add	x3, x29, #0xd0
    9601c810:	91175842 	add	x2, x2, #0x5d6
    9601c814:	94005249 	bl	96031138 <tegrabl_dt_get_prop_string>
		if (error != TEGRABL_NO_ERROR) {
    9601c818:	340000c0 	cbz	w0, 9601c830 <tegrabl_eeprom_manager_init+0x194>
			pr_error("failed to read label property for node %d: %d\n", node, error);
    9601c81c:	2a0003e2 	mov	w2, w0
    9601c820:	b940aba1 	ldr	w1, [x29, #168]
    9601c824:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c828:	91177000 	add	x0, x0, #0x5dc
    9601c82c:	17fffff3 	b	9601c7f8 <tegrabl_eeprom_manager_init+0x15c>
	return tegrabl_dt_get_prop_by_idx(fdt, node, prop, U32_SZ, 0, res);
    9601c830:	b940aba1 	ldr	w1, [x29, #168]
    9601c834:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601c838:	f94073a0 	ldr	x0, [x29, #224]
    9601c83c:	9102b3a5 	add	x5, x29, #0xac
    9601c840:	52800004 	mov	w4, #0x0                   	// #0
    9601c844:	d2800083 	mov	x3, #0x4                   	// #4
    9601c848:	91183842 	add	x2, x2, #0x60e
    9601c84c:	940051d8 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (error != TEGRABL_NO_ERROR) {
    9601c850:	340000c0 	cbz	w0, 9601c868 <tegrabl_eeprom_manager_init+0x1cc>
			pr_error("failed to read reg property for node %d: %d\n", node, error);
    9601c854:	2a0003e2 	mov	w2, w0
    9601c858:	b940aba1 	ldr	w1, [x29, #168]
    9601c85c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c860:	91184800 	add	x0, x0, #0x612
    9601c864:	17ffffe5 	b	9601c7f8 <tegrabl_eeprom_manager_init+0x15c>
    9601c868:	b940aba1 	ldr	w1, [x29, #168]
    9601c86c:	b0000142 	adrp	x2, 96045000 <__func__.3796+0x7>
    9601c870:	f94073a0 	ldr	x0, [x29, #224]
    9601c874:	9102c3a5 	add	x5, x29, #0xb0
    9601c878:	52800004 	mov	w4, #0x0                   	// #0
    9601c87c:	d2800083 	mov	x3, #0x4                   	// #4
    9601c880:	9136e442 	add	x2, x2, #0xdb9
    9601c884:	940051ca 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (error != TEGRABL_NO_ERROR) {
    9601c888:	340000c0 	cbz	w0, 9601c8a0 <tegrabl_eeprom_manager_init+0x204>
			pr_error("failed to read size property for node %d: %d\n", node, error);
    9601c88c:	2a0003e2 	mov	w2, w0
    9601c890:	b940aba1 	ldr	w1, [x29, #168]
    9601c894:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c898:	91190800 	add	x0, x0, #0x642
    9601c89c:	17ffffd7 	b	9601c7f8 <tegrabl_eeprom_manager_init+0x15c>
		parent = fdt_parent_offset(fdt, node);
    9601c8a0:	b940aba1 	ldr	w1, [x29, #168]
    9601c8a4:	f94073a0 	ldr	x0, [x29, #224]
    9601c8a8:	940056f8 	bl	96032488 <fdt_parent_offset>
    9601c8ac:	2a0003f9 	mov	w25, w0
		if (parent < 0) {
    9601c8b0:	36f800e0 	tbz	w0, #31, 9601c8cc <tegrabl_eeprom_manager_init+0x230>
			pr_error("failed to get parent for node %s: %d\n", name, parent);
    9601c8b4:	f9406ba1 	ldr	x1, [x29, #208]
    9601c8b8:	2a0003e2 	mov	w2, w0
    9601c8bc:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c8c0:	9119cc00 	add	x0, x0, #0x673
			pr_error("failed to get registers for %s: %d\n", name, error);
    9601c8c4:	9400176b 	bl	96022670 <tegrabl_printf>
			continue;
    9601c8c8:	17ffff8c 	b	9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
		error = tegrabl_dt_read_reg_by_index(fdt, parent, 0, &base, NULL);
    9601c8cc:	2a0003e1 	mov	w1, w0
    9601c8d0:	f94073a0 	ldr	x0, [x29, #224]
    9601c8d4:	d2800004 	mov	x4, #0x0                   	// #0
    9601c8d8:	910363a3 	add	x3, x29, #0xd8
    9601c8dc:	52800002 	mov	w2, #0x0                   	// #0
    9601c8e0:	940050d3 	bl	96030c2c <tegrabl_dt_read_reg_by_index>
		if (error != TEGRABL_NO_ERROR) {
    9601c8e4:	340000c0 	cbz	w0, 9601c8fc <tegrabl_eeprom_manager_init+0x260>
			pr_error("failed to get registers for %s: %d\n", name, error);
    9601c8e8:	2a0003e2 	mov	w2, w0
    9601c8ec:	f9406ba1 	ldr	x1, [x29, #208]
    9601c8f0:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c8f4:	911a7000 	add	x0, x0, #0x69c
    9601c8f8:	17fffff3 	b	9601c8c4 <tegrabl_eeprom_manager_init+0x228>
		eeproms[count].size = MAX(size, EEPROM_SZ);
    9601c8fc:	396be276 	ldrb	w22, [x19, #2808]
    9601c900:	d2800618 	mov	x24, #0x30                  	// #48
    9601c904:	b940b3a0 	ldr	w0, [x29, #176]
    9601c908:	d0000294 	adrp	x20, 9606e000 <__bss_start>
    9601c90c:	912c0294 	add	x20, x20, #0xb00
    9601c910:	52802002 	mov	w2, #0x100                 	// #256
    9601c914:	7104001f 	cmp	w0, #0x100
    9601c918:	9b187ed6 	mul	x22, x22, x24
    9601c91c:	1a822000 	csel	w0, w0, w2, cs  // cs = hs, nlast
    9601c920:	8b160281 	add	x1, x20, x22
    9601c924:	b9001820 	str	w0, [x1, #24]
		eeproms[count].name = strdup(name);
    9601c928:	f9406ba0 	ldr	x0, [x29, #208]
    9601c92c:	940036c2 	bl	9602a434 <strdup>
    9601c930:	f8366a80 	str	x0, [x20, x22]
		eeproms[count].data = tegrabl_malloc(eeproms[count].size);
    9601c934:	396be276 	ldrb	w22, [x19, #2808]
    9601c938:	9b1852d6 	madd	x22, x22, x24, x20
    9601c93c:	b9401ac0 	ldr	w0, [x22, #24]
    9601c940:	9400284e 	bl	96026a78 <tegrabl_malloc>
    9601c944:	f90012c0 	str	x0, [x22, #32]
		if (!eeproms[count].data) {
    9601c948:	396be260 	ldrb	w0, [x19, #2808]
    9601c94c:	aa0003e1 	mov	x1, x0
    9601c950:	9b185000 	madd	x0, x0, x24, x20
    9601c954:	f9401000 	ldr	x0, [x0, #32]
    9601c958:	b50000a0 	cbnz	x0, 9601c96c <tegrabl_eeprom_manager_init+0x2d0>
			pr_error("failed to allocate memory for EEPROM data\n");
    9601c95c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c960:	911b0c00 	add	x0, x0, #0x6c3
    9601c964:	94001743 	bl	96022670 <tegrabl_printf>
			continue;
    9601c968:	17ffff64 	b	9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
		error = tegrabl_i2c_lookup(base, &eeproms[count].instance);
    9601c96c:	d2800200 	mov	x0, #0x10                  	// #16
    9601c970:	9ba10301 	umaddl	x1, w24, w1, x0
    9601c974:	f9406fa0 	ldr	x0, [x29, #216]
    9601c978:	8b010281 	add	x1, x20, x1
    9601c97c:	97ffc72f 	bl	9600e638 <tegrabl_i2c_lookup>
		if (error != TEGRABL_NO_ERROR) {
    9601c980:	340000c0 	cbz	w0, 9601c998 <tegrabl_eeprom_manager_init+0x2fc>
			pr_error("no I2C instance found for base %lx\n", base);
    9601c984:	f9406fa1 	ldr	x1, [x29, #216]
    9601c988:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601c98c:	911bc400 	add	x0, x0, #0x6f1
    9601c990:	94001738 	bl	96022670 <tegrabl_printf>
			continue;
    9601c994:	17ffff59 	b	9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
		eeproms[count].crc_valid = false;
    9601c998:	396be261 	ldrb	w1, [x19, #2808]
		eeproms[count].slave_addr = address << 1;
    9601c99c:	b940afa2 	ldr	w2, [x29, #172]
		eeproms[count].crc_valid = false;
    9601c9a0:	aa0103e0 	mov	x0, x1
    9601c9a4:	9b185021 	madd	x1, x1, x24, x20
		eeproms[count].slave_addr = address << 1;
    9601c9a8:	531f1842 	ubfiz	w2, w2, #1, #7
		error = eeprom_general_read(&eeproms[count], &node);
    9601c9ac:	9bb87c00 	umull	x0, w0, w24
    9601c9b0:	8b000280 	add	x0, x20, x0
		eeproms[count].slave_addr = address << 1;
    9601c9b4:	39005022 	strb	w2, [x1, #20]
		eeproms[count].crc_valid = false;
    9601c9b8:	3900703f 	strb	wzr, [x1, #28]
		eeproms[count].data_valid = false;
    9601c9bc:	3900a03f 	strb	wzr, [x1, #40]
		error = eeprom_general_read(&eeproms[count], &node);
    9601c9c0:	9102a3a1 	add	x1, x29, #0xa8
    9601c9c4:	97fffe98 	bl	9601c424 <eeprom_general_read>
    9601c9c8:	396be276 	ldrb	w22, [x19, #2808]
		if (error != TEGRABL_NO_ERROR) {
    9601c9cc:	34000080 	cbz	w0, 9601c9dc <tegrabl_eeprom_manager_init+0x340>
			tegrabl_free(eeproms[count].data);
    9601c9d0:	9b1852d4 	madd	x20, x22, x24, x20
    9601c9d4:	f9401280 	ldr	x0, [x20, #32]
    9601c9d8:	14000005 	b	9601c9ec <tegrabl_eeprom_manager_init+0x350>
		if (!eeproms[count].data_valid) {
    9601c9dc:	9b1852d6 	madd	x22, x22, x24, x20
    9601c9e0:	3940a2c0 	ldrb	w0, [x22, #40]
    9601c9e4:	35000080 	cbnz	w0, 9601c9f4 <tegrabl_eeprom_manager_init+0x358>
			tegrabl_free(eeproms[count].data);
    9601c9e8:	f94012c0 	ldr	x0, [x22, #32]
			tegrabl_free(eeproms[count].data);
    9601c9ec:	94002833 	bl	96026ab8 <tegrabl_free>
			continue;
    9601c9f0:	17ffff42 	b	9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
		eeproms[count].bus_node_name = tegrabl_malloc(BUS_NODE_NAME);
    9601c9f4:	d2800c80 	mov	x0, #0x64                  	// #100
    9601c9f8:	94002820 	bl	96026a78 <tegrabl_malloc>
    9601c9fc:	f90006c0 	str	x0, [x22, #8]
		if (!eeproms[count].bus_node_name) {
    9601ca00:	396be260 	ldrb	w0, [x19, #2808]
    9601ca04:	9b185000 	madd	x0, x0, x24, x20
    9601ca08:	f9400402 	ldr	x2, [x0, #8]
    9601ca0c:	b50000c2 	cbnz	x2, 9601ca24 <tegrabl_eeprom_manager_init+0x388>
			pr_error("failed to allocate memory for EEPROM bus node name\n");
    9601ca10:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601ca14:	911c6000 	add	x0, x0, #0x718
    9601ca18:	94001716 	bl	96022670 <tegrabl_printf>
			tegrabl_free(eeproms[count].data);
    9601ca1c:	396be276 	ldrb	w22, [x19, #2808]
    9601ca20:	17ffffec 	b	9601c9d0 <tegrabl_eeprom_manager_init+0x334>
		err = fdt_get_path(fdt, parent, eeproms[count].bus_node_name, BUS_NODE_NAME);
    9601ca24:	f94073a0 	ldr	x0, [x29, #224]
    9601ca28:	52800c83 	mov	w3, #0x64                  	// #100
    9601ca2c:	2a1903e1 	mov	w1, w25
    9601ca30:	940055ff 	bl	9603222c <fdt_get_path>
		if (err < 0) {
    9601ca34:	37ffff40 	tbnz	w0, #31, 9601ca1c <tegrabl_eeprom_manager_init+0x380>
		pr_info("EEPROM: %s: %s (%u bytes)\n", path, name, size);
    9601ca38:	b940b3a3 	ldr	w3, [x29, #176]
    9601ca3c:	9105c3a1 	add	x1, x29, #0x170
    9601ca40:	f9406ba2 	ldr	x2, [x29, #208]
    9601ca44:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601ca48:	911d3c00 	add	x0, x0, #0x74f
    9601ca4c:	94001709 	bl	96022670 <tegrabl_printf>
		count++;
    9601ca50:	396be260 	ldrb	w0, [x19, #2808]
    9601ca54:	11000400 	add	w0, w0, #0x1
    9601ca58:	392be260 	strb	w0, [x19, #2808]
    9601ca5c:	17ffff27 	b	9601c6f8 <tegrabl_eeprom_manager_init+0x5c>
	error = tegrabl_dt_get_node_with_path(fdt, "/eeprom-manager",
    9601ca60:	f94077a0 	ldr	x0, [x29, #232]
    9601ca64:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
	count = 0;
    9601ca68:	392be27f 	strb	wzr, [x19, #2808]
	error = tegrabl_dt_get_node_with_path(fdt, "/eeprom-manager",
    9601ca6c:	9102d3a2 	add	x2, x29, #0xb4
    9601ca70:	911db421 	add	x1, x1, #0x76d
	int eeprom_node = 0, instance_addr = 0;
    9601ca74:	2916ffbf 	stp	wzr, wzr, [x29, #180]
	uint32_t eeprom_size = 0, slave_addr = 0;
    9601ca78:	2917ffbf 	stp	wzr, wzr, [x29, #188]
    9601ca7c:	b900c7bf 	str	wzr, [x29, #196]
	error = tegrabl_dt_get_node_with_path(fdt, "/eeprom-manager",
    9601ca80:	9400523f 	bl	9603137c <tegrabl_dt_get_node_with_path>
	if (error != TEGRABL_NO_ERROR) {
    9601ca84:	34000800 	cbz	w0, 9601cb84 <tegrabl_eeprom_manager_init+0x4e8>
		pr_error("Cannot find DT node for EEPROM Manager\n");
    9601ca88:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601ca8c:	911df400 	add	x0, x0, #0x77d
    9601ca90:	940016f8 	bl	96022670 <tegrabl_printf>
		eeproms[count].name = "module";
    9601ca94:	d2800617 	mov	x23, #0x30                  	// #48
		pr_info("Loading CVM eeprom only\n");
    9601ca98:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601ca9c:	911ea000 	add	x0, x0, #0x7a8
    9601caa0:	940016f4 	bl	96022670 <tegrabl_printf>
		eeproms[count].name = "module";
    9601caa4:	d0000296 	adrp	x22, 9606e000 <__bss_start>
    9601caa8:	396be260 	ldrb	w0, [x19, #2808]
    9601caac:	912c02d6 	add	x22, x22, #0xb00
    9601cab0:	b0000101 	adrp	x1, 9603d000 <__func__.3609+0x209>
    9601cab4:	91212821 	add	x1, x1, #0x84a
		eeproms[count].crc_valid = true;
    9601cab8:	52800038 	mov	w24, #0x1                   	// #1
		eeproms[count].name = "module";
    9601cabc:	9b177c00 	mul	x0, x0, x23
    9601cac0:	8b0002d4 	add	x20, x22, x0
    9601cac4:	f8206ac1 	str	x1, [x22, x0]
		eeproms[count].size = EEPROM_SZ;
    9601cac8:	52802000 	mov	w0, #0x100                 	// #256
    9601cacc:	b9001a80 	str	w0, [x20, #24]
		eeproms[count].instance = TEGRABL_INSTANCE_I2C8;
    9601cad0:	528000e0 	mov	w0, #0x7                   	// #7
    9601cad4:	b9001280 	str	w0, [x20, #16]
		eeproms[count].slave_addr = 0xA0;
    9601cad8:	12800be0 	mov	w0, #0xffffffa0            	// #-96
    9601cadc:	39005280 	strb	w0, [x20, #20]
		eeproms[count].data = tegrabl_malloc(eeproms[count].size);
    9601cae0:	d2802000 	mov	x0, #0x100                 	// #256
		eeproms[count].crc_valid = true;
    9601cae4:	39007298 	strb	w24, [x20, #28]
		eeproms[count].data_valid = false;
    9601cae8:	3900a29f 	strb	wzr, [x20, #40]
		eeproms[count].data = tegrabl_malloc(eeproms[count].size);
    9601caec:	940027e3 	bl	96026a78 <tegrabl_malloc>
    9601caf0:	f9001280 	str	x0, [x20, #32]
		if (!eeproms[count].data) {
    9601caf4:	396be261 	ldrb	w1, [x19, #2808]
    9601caf8:	aa0103e0 	mov	x0, x1
    9601cafc:	9b175821 	madd	x1, x1, x23, x22
    9601cb00:	f9401021 	ldr	x1, [x1, #32]
    9601cb04:	b5000101 	cbnz	x1, 9601cb24 <tegrabl_eeprom_manager_init+0x488>
			pr_error("%s: Malloc for eeprom data failed\n", __func__);
    9601cb08:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cb0c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cb10:	91108421 	add	x1, x1, #0x421
    9601cb14:	911f1000 	add	x0, x0, #0x7c4
				pr_error("%s: Malloc for eeprom bus node name failed\n",
    9601cb18:	940016d6 	bl	96022670 <tegrabl_printf>
				return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601cb1c:	52800075 	mov	w21, #0x3                   	// #3
    9601cb20:	14000028 	b	9601cbc0 <tegrabl_eeprom_manager_init+0x524>
		error = tegrabl_eeprom_read(&eeproms[count]);
    9601cb24:	9bb77c00 	umull	x0, w0, w23
    9601cb28:	8b0002c0 	add	x0, x22, x0
    9601cb2c:	97ffc0e1 	bl	9600ceb0 <tegrabl_eeprom_read>
    9601cb30:	2a0003f4 	mov	w20, w0
		if (error != TEGRABL_NO_ERROR) {
    9601cb34:	34000140 	cbz	w0, 9601cb5c <tegrabl_eeprom_manager_init+0x4c0>
			pr_info("Eeprom read failed 0x%08x\n", error);
    9601cb38:	2a0003e1 	mov	w1, w0
    9601cb3c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cb40:	911fa800 	add	x0, x0, #0x7ea
    9601cb44:	940016cb 	bl	96022670 <tegrabl_printf>
			tegrabl_free(eeproms[count].data);
    9601cb48:	396be260 	ldrb	w0, [x19, #2808]
    9601cb4c:	9b175816 	madd	x22, x0, x23, x22
    9601cb50:	f94012c0 	ldr	x0, [x22, #32]
    9601cb54:	940027d9 	bl	96026ab8 <tegrabl_free>
    9601cb58:	17ffff03 	b	9601c764 <tegrabl_eeprom_manager_init+0xc8>
		eeproms[count].data_valid = true;
    9601cb5c:	396be261 	ldrb	w1, [x19, #2808]
		count++;
    9601cb60:	11000420 	add	w0, w1, #0x1
    9601cb64:	392be260 	strb	w0, [x19, #2808]
		eeproms[count].data_valid = true;
    9601cb68:	d503201f 	nop
    9601cb6c:	9b175836 	madd	x22, x1, x23, x22
    9601cb70:	3900a2d8 	strb	w24, [x22, #40]
	eeprom_manager_initialized = true;
    9601cb74:	f9403ba1 	ldr	x1, [x29, #112]
    9601cb78:	52800020 	mov	w0, #0x1                   	// #1
    9601cb7c:	392be420 	strb	w0, [x1, #2809]
	return TEGRABL_NO_ERROR;
    9601cb80:	17fffefc 	b	9601c770 <tegrabl_eeprom_manager_init+0xd4>
    9601cb84:	b940b7a1 	ldr	w1, [x29, #180]
    9601cb88:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601cb8c:	f94077a0 	ldr	x0, [x29, #232]
    9601cb90:	910303a5 	add	x5, x29, #0xc0
    9601cb94:	52800004 	mov	w4, #0x0                   	// #0
    9601cb98:	d2800083 	mov	x3, #0x4                   	// #4
    9601cb9c:	91202042 	add	x2, x2, #0x808
    9601cba0:	94005103 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
	if (error != TEGRABL_NO_ERROR) {
    9601cba4:	34000180 	cbz	w0, 9601cbd4 <tegrabl_eeprom_manager_init+0x538>
		pr_error("%s: Cannot find data-size\n", __func__);
    9601cba8:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cbac:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cbb0:	91108421 	add	x1, x1, #0x421
    9601cbb4:	91204800 	add	x0, x0, #0x812
				return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9601cbb8:	528001b5 	mov	w21, #0xd                   	// #13
				pr_error("%s: Slave address not found\n", __func__);
    9601cbbc:	940016ad 	bl	96022670 <tegrabl_printf>
				return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601cbc0:	72a6a6b5 	movk	w21, #0x3535, lsl #16
			pr_error("failed to initialize legacy EEPROM support\n");
    9601cbc4:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cbc8:	912b1c00 	add	x0, x0, #0xac7
    9601cbcc:	940016a9 	bl	96022670 <tegrabl_printf>
			return error;
    9601cbd0:	17fffee8 	b	9601c770 <tegrabl_eeprom_manager_init+0xd4>
	tegrabl_dt_for_each_child(fdt, manager_node, manager_subnode) {
    9601cbd4:	b940b7a1 	ldr	w1, [x29, #180]
    9601cbd8:	f94077a0 	ldr	x0, [x29, #232]
    9601cbdc:	94005375 	bl	960319b0 <fdt_first_subnode>
    9601cbe0:	2a0003f9 	mov	w25, w0
		pr_info("Mux addr : 0x%02x and type %d\n", mux_slave_addr, mux_type);
    9601cbe4:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cbe8:	91274c00 	add	x0, x0, #0x9d3
    9601cbec:	f90033a0 	str	x0, [x29, #96]
	tegrabl_dt_for_each_child(fdt, manager_node, manager_subnode) {
    9601cbf0:	3100073f 	cmn	w25, #0x1
    9601cbf4:	54fffc00 	b.eq	9601cb74 <tegrabl_eeprom_manager_init+0x4d8>  // b.none
	error = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9601cbf8:	9103e3a1 	add	x1, x29, #0xf8
    9601cbfc:	52800000 	mov	w0, #0x0                   	// #0
	void *fdt = NULL;
    9601cc00:	f9007fbf 	str	xzr, [x29, #248]
	error = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    9601cc04:	94005095 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if (error != TEGRABL_NO_ERROR) {
    9601cc08:	340000e0 	cbz	w0, 9601cc24 <tegrabl_eeprom_manager_init+0x588>
		pr_error("%s: Failed to get BL-dtb handle\n", __func__);
    9601cc0c:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cc10:	b0000100 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9601cc14:	910fb821 	add	x1, x1, #0x3ee
    9601cc18:	91273c00 	add	x0, x0, #0x9cf
		pr_error("%s: Alias instance not found\n", __func__);
    9601cc1c:	94001695 	bl	96022670 <tegrabl_printf>
    9601cc20:	14000035 	b	9601ccf4 <tegrabl_eeprom_manager_init+0x658>
    9601cc24:	f9407fa0 	ldr	x0, [x29, #248]
    9601cc28:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601cc2c:	910333a5 	add	x5, x29, #0xcc
    9601cc30:	52800004 	mov	w4, #0x0                   	// #0
    9601cc34:	d2800083 	mov	x3, #0x4                   	// #4
    9601cc38:	9120c042 	add	x2, x2, #0x830
    9601cc3c:	2a1903e1 	mov	w1, w25
    9601cc40:	940050db 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
	if (error != TEGRABL_NO_ERROR) {
    9601cc44:	340000c0 	cbz	w0, 9601cc5c <tegrabl_eeprom_manager_init+0x5c0>
		pr_error("%s: Cannot find i2c-bus property\n", __func__);
    9601cc48:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cc4c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cc50:	910fb821 	add	x1, x1, #0x3ee
    9601cc54:	9120e000 	add	x0, x0, #0x838
    9601cc58:	17fffff1 	b	9601cc1c <tegrabl_eeprom_manager_init+0x580>
	i2c_nodeoffset = fdt_node_offset_by_phandle(fdt, phandle);
    9601cc5c:	b940cfa1 	ldr	w1, [x29, #204]
    9601cc60:	f9407fa0 	ldr	x0, [x29, #248]
    9601cc64:	94005647 	bl	96032580 <fdt_node_offset_by_phandle>
	if (i2c_nodeoffset <= 0) {
    9601cc68:	7100001f 	cmp	w0, #0x0
    9601cc6c:	540000cc 	b.gt	9601cc84 <tegrabl_eeprom_manager_init+0x5e8>
		pr_error("%s: Cannot get the i2c nodeoffset\n", __func__);
    9601cc70:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cc74:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cc78:	910fb821 	add	x1, x1, #0x3ee
    9601cc7c:	91217400 	add	x0, x0, #0x85d
    9601cc80:	17ffffe7 	b	9601cc1c <tegrabl_eeprom_manager_init+0x580>
	node_value = fdt_get_name(fdt, i2c_nodeoffset, &value_len);
    9601cc84:	2a0003e1 	mov	w1, w0
    9601cc88:	f9407fa0 	ldr	x0, [x29, #248]
    9601cc8c:	910323a2 	add	x2, x29, #0xc8
    9601cc90:	94005423 	bl	96031d1c <fdt_get_name>
	if (node_value == NULL) {
    9601cc94:	b50000c0 	cbnz	x0, 9601ccac <tegrabl_eeprom_manager_init+0x610>
		pr_error("%s: Cannot get i2c node name\n", __func__);
    9601cc98:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cc9c:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cca0:	910fb821 	add	x1, x1, #0x3ee
    9601cca4:	91220c00 	add	x0, x0, #0x883
    9601cca8:	17ffffdd 	b	9601cc1c <tegrabl_eeprom_manager_init+0x580>
	tegrabl_snprintf(i2c_nodename, ALIAS_NAME_LEN, "/%s",
    9601ccac:	aa0003e3 	mov	x3, x0
    9601ccb0:	d2800641 	mov	x1, #0x32                  	// #50
    9601ccb4:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601ccb8:	910403a0 	add	x0, x29, #0x100
    9601ccbc:	91229042 	add	x2, x2, #0x8a4
    9601ccc0:	94001641 	bl	960225c4 <tegrabl_snprintf>
	error = tegrabl_get_alias_by_name(fdt, i2c_nodename, i2c_alias,
    9601ccc4:	f9407fa0 	ldr	x0, [x29, #248]
    9601ccc8:	910323a3 	add	x3, x29, #0xc8
    9601cccc:	9104e3a2 	add	x2, x29, #0x138
    9601ccd0:	910403a1 	add	x1, x29, #0x100
    9601ccd4:	94005203 	bl	960314e0 <tegrabl_get_alias_by_name>
	if (error != TEGRABL_NO_ERROR) {
    9601ccd8:	34000260 	cbz	w0, 9601cd24 <tegrabl_eeprom_manager_init+0x688>
		pr_error("%s: Alias %s not found\n", __func__, i2c_nodename);
    9601ccdc:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cce0:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cce4:	910403a2 	add	x2, x29, #0x100
    9601cce8:	910fb821 	add	x1, x1, #0x3ee
    9601ccec:	9122a000 	add	x0, x0, #0x8a8
    9601ccf0:	94001660 	bl	96022670 <tegrabl_printf>
		tegrabl_dt_for_each_child(fdt, manager_subnode, eeprom_node) {
    9601ccf4:	f94077a0 	ldr	x0, [x29, #232]
    9601ccf8:	2a1903e1 	mov	w1, w25
    9601ccfc:	9400532d 	bl	960319b0 <fdt_first_subnode>
    9601cd00:	b900bba0 	str	w0, [x29, #184]
    9601cd04:	b940bba1 	ldr	w1, [x29, #184]
    9601cd08:	3100043f 	cmn	w1, #0x1
    9601cd0c:	54000221 	b.ne	9601cd50 <tegrabl_eeprom_manager_init+0x6b4>  // b.any
	tegrabl_dt_for_each_child(fdt, manager_node, manager_subnode) {
    9601cd10:	f94077a0 	ldr	x0, [x29, #232]
    9601cd14:	2a1903e1 	mov	w1, w25
    9601cd18:	94005333 	bl	960319e4 <fdt_next_subnode>
    9601cd1c:	2a0003f9 	mov	w25, w0
    9601cd20:	17ffffb4 	b	9601cbf0 <tegrabl_eeprom_manager_init+0x554>
	error = tegrabl_get_alias_id("i2c", i2c_alias, instance);
    9601cd24:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd28:	9102f3a2 	add	x2, x29, #0xbc
    9601cd2c:	9104e3a1 	add	x1, x29, #0x138
    9601cd30:	91230c00 	add	x0, x0, #0x8c3
    9601cd34:	94005225 	bl	960315c8 <tegrabl_get_alias_id>
	if (error != TEGRABL_NO_ERROR) {
    9601cd38:	34fffde0 	cbz	w0, 9601ccf4 <tegrabl_eeprom_manager_init+0x658>
		pr_error("%s: Alias instance not found\n", __func__);
    9601cd3c:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd40:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd44:	910fb821 	add	x1, x1, #0x3ee
    9601cd48:	91231c00 	add	x0, x0, #0x8c7
    9601cd4c:	17ffffb4 	b	9601cc1c <tegrabl_eeprom_manager_init+0x580>
			if (count == TEGRABL_EEPROM_MAX_NUM) {
    9601cd50:	396be260 	ldrb	w0, [x19, #2808]
    9601cd54:	7101201f 	cmp	w0, #0x48
    9601cd58:	540000c1 	b.ne	9601cd70 <tegrabl_eeprom_manager_init+0x6d4>  // b.any
				pr_error("%s: Too many eeprom node scanned\n", __func__);
    9601cd5c:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd60:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd64:	91108421 	add	x1, x1, #0x421
    9601cd68:	9123a000 	add	x0, x0, #0x8e8
    9601cd6c:	17ffff6b 	b	9601cb18 <tegrabl_eeprom_manager_init+0x47c>
    9601cd70:	f94077a0 	ldr	x0, [x29, #232]
    9601cd74:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd78:	910313a5 	add	x5, x29, #0xc4
    9601cd7c:	52800004 	mov	w4, #0x0                   	// #0
    9601cd80:	d2800083 	mov	x3, #0x4                   	// #4
    9601cd84:	91243442 	add	x2, x2, #0x90d
    9601cd88:	94005089 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
			if (error != TEGRABL_NO_ERROR) {
    9601cd8c:	340000c0 	cbz	w0, 9601cda4 <tegrabl_eeprom_manager_init+0x708>
				pr_error("%s: Slave address not found\n", __func__);
    9601cd90:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd94:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cd98:	91108421 	add	x1, x1, #0x421
    9601cd9c:	91246c00 	add	x0, x0, #0x91b
    9601cda0:	17ffff86 	b	9601cbb8 <tegrabl_eeprom_manager_init+0x51c>
			error = tegrabl_dt_get_prop_string(fdt, eeprom_node,
    9601cda4:	b940bba1 	ldr	w1, [x29, #184]
    9601cda8:	9103c3a3 	add	x3, x29, #0xf0
    9601cdac:	f94077a0 	ldr	x0, [x29, #232]
    9601cdb0:	90000122 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601cdb4:	d0000296 	adrp	x22, 9606e000 <__bss_start>
    9601cdb8:	91175842 	add	x2, x2, #0x5d6
    9601cdbc:	940050df 	bl	96031138 <tegrabl_dt_get_prop_string>
    9601cdc0:	396be274 	ldrb	w20, [x19, #2808]
			if (error == TEGRABL_NO_ERROR) {
    9601cdc4:	35000ae0 	cbnz	w0, 9601cf20 <tegrabl_eeprom_manager_init+0x884>
				eeproms[count].name = tegrabl_malloc(EEPROM_NAME_LEN);
    9601cdc8:	d2800140 	mov	x0, #0xa                   	// #10
    9601cdcc:	9400272b 	bl	96026a78 <tegrabl_malloc>
    9601cdd0:	d2800602 	mov	x2, #0x30                  	// #48
    9601cdd4:	912c02c1 	add	x1, x22, #0xb00
    9601cdd8:	9b027e94 	mul	x20, x20, x2
    9601cddc:	f8346820 	str	x0, [x1, x20]
				if (!eeproms[count].name) {
    9601cde0:	396be260 	ldrb	w0, [x19, #2808]
    9601cde4:	9b027c00 	mul	x0, x0, x2
    9601cde8:	f8606820 	ldr	x0, [x1, x0]
    9601cdec:	b50000c0 	cbnz	x0, 9601ce04 <tegrabl_eeprom_manager_init+0x768>
					pr_error("%s: Malloc for eeprom name failed\n", __func__);
    9601cdf0:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cdf4:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cdf8:	91108421 	add	x1, x1, #0x421
    9601cdfc:	9124ec00 	add	x0, x0, #0x93b
    9601ce00:	17ffff46 	b	9601cb18 <tegrabl_eeprom_manager_init+0x47c>
				if (strcmp(node_value, "cvm") == 0)
    9601ce04:	f9407ba0 	ldr	x0, [x29, #240]
    9601ce08:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601ce0c:	91258421 	add	x1, x1, #0x961
    9601ce10:	9400350f 	bl	9602a24c <strcmp>
    9601ce14:	35000080 	cbnz	w0, 9601ce24 <tegrabl_eeprom_manager_init+0x788>
					node_value = "module";
    9601ce18:	b0000100 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9601ce1c:	91212800 	add	x0, x0, #0x84a
    9601ce20:	f9007ba0 	str	x0, [x29, #240]
				tegrabl_snprintf(eeproms[count].name, EEPROM_NAME_LEN, "%s",
    9601ce24:	396be260 	ldrb	w0, [x19, #2808]
    9601ce28:	d2800601 	mov	x1, #0x30                  	// #48
    9601ce2c:	912c02c4 	add	x4, x22, #0xb00
    9601ce30:	f9407ba3 	ldr	x3, [x29, #240]
    9601ce34:	f0000102 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    9601ce38:	910d9842 	add	x2, x2, #0x366
    9601ce3c:	9b017c00 	mul	x0, x0, x1
    9601ce40:	d2800141 	mov	x1, #0xa                   	// #10
    9601ce44:	f8606880 	ldr	x0, [x4, x0]
    9601ce48:	940015df 	bl	960225c4 <tegrabl_snprintf>
			eeproms[count].size = (eeprom_size > EEPROM_SZ) ?
    9601ce4c:	396be277 	ldrb	w23, [x19, #2808]
    9601ce50:	912c02d4 	add	x20, x22, #0xb00
    9601ce54:	d280061a 	mov	x26, #0x30                  	// #48
								  EEPROM_SZ : eeprom_size;
    9601ce58:	b940c3a0 	ldr	w0, [x29, #192]
    9601ce5c:	52802001 	mov	w1, #0x100                 	// #256
    9601ce60:	7104001f 	cmp	w0, #0x100
			eeproms[count].size = (eeprom_size > EEPROM_SZ) ?
    9601ce64:	9b1a52f7 	madd	x23, x23, x26, x20
								  EEPROM_SZ : eeprom_size;
    9601ce68:	1a819000 	csel	w0, w0, w1, ls  // ls = plast
			eeproms[count].size = (eeprom_size > EEPROM_SZ) ?
    9601ce6c:	b9001ae0 	str	w0, [x23, #24]
			eeproms[count].data = tegrabl_malloc(eeproms[count].size);
    9601ce70:	2a0003e0 	mov	w0, w0
    9601ce74:	94002701 	bl	96026a78 <tegrabl_malloc>
    9601ce78:	f90012e0 	str	x0, [x23, #32]
			if (!eeproms[count].data) {
    9601ce7c:	396be260 	ldrb	w0, [x19, #2808]
    9601ce80:	9b1a5000 	madd	x0, x0, x26, x20
    9601ce84:	f9401001 	ldr	x1, [x0, #32]
    9601ce88:	b4ffe401 	cbz	x1, 9601cb08 <tegrabl_eeprom_manager_init+0x46c>
			eeproms[count].slave_addr = slave_addr << 1;
    9601ce8c:	b940c7a2 	ldr	w2, [x29, #196]
			eeproms[count].instance = instance_addr;
    9601ce90:	b940bfa1 	ldr	w1, [x29, #188]
    9601ce94:	b9001001 	str	w1, [x0, #16]
			eeproms[count].slave_addr = slave_addr << 1;
    9601ce98:	531f1843 	ubfiz	w3, w2, #1, #7
    9601ce9c:	39005003 	strb	w3, [x0, #20]
			eeproms[count].crc_valid = false;
    9601cea0:	3900701f 	strb	wzr, [x0, #28]
			eeproms[count].data_valid = false;
    9601cea4:	3900a01f 	strb	wzr, [x0, #40]
			pr_info("Reading eeprom i2c=%d address=0x%x\n",
    9601cea8:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601ceac:	91259400 	add	x0, x0, #0x965
    9601ceb0:	940015f0 	bl	96022670 <tegrabl_printf>
			error = eeprom_general_read(&eeproms[count], &eeprom_node);
    9601ceb4:	396be260 	ldrb	w0, [x19, #2808]
    9601ceb8:	9102e3a1 	add	x1, x29, #0xb8
    9601cebc:	9b1a5000 	madd	x0, x0, x26, x20
    9601cec0:	97fffd59 	bl	9601c424 <eeprom_general_read>
			if (!eeproms[count].data_valid) {
    9601cec4:	396be277 	ldrb	w23, [x19, #2808]
    9601cec8:	9b1a52f7 	madd	x23, x23, x26, x20
    9601cecc:	3940a2e1 	ldrb	w1, [x23, #40]
    9601ced0:	35000321 	cbnz	w1, 9601cf34 <tegrabl_eeprom_manager_init+0x898>
				pr_info("Eeprom read failed 0x%08x\n", error);
    9601ced4:	2a0003e1 	mov	w1, w0
    9601ced8:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cedc:	911fa800 	add	x0, x0, #0x7ea
    9601cee0:	940015e4 	bl	96022670 <tegrabl_printf>
				if (eeproms[count].name) {
    9601cee4:	396be260 	ldrb	w0, [x19, #2808]
    9601cee8:	9b1a7c1a 	mul	x26, x0, x26
    9601ceec:	f87a6a80 	ldr	x0, [x20, x26]
    9601cef0:	b4000040 	cbz	x0, 9601cef8 <tegrabl_eeprom_manager_init+0x85c>
					tegrabl_free(eeproms[count].name);
    9601cef4:	940026f1 	bl	96026ab8 <tegrabl_free>
				tegrabl_free(eeproms[count].data);
    9601cef8:	396be260 	ldrb	w0, [x19, #2808]
    9601cefc:	912c02d6 	add	x22, x22, #0xb00
    9601cf00:	d2800601 	mov	x1, #0x30                  	// #48
    9601cf04:	9b015816 	madd	x22, x0, x1, x22
    9601cf08:	f94012c0 	ldr	x0, [x22, #32]
    9601cf0c:	940026eb 	bl	96026ab8 <tegrabl_free>
		tegrabl_dt_for_each_child(fdt, manager_subnode, eeprom_node) {
    9601cf10:	b940bba1 	ldr	w1, [x29, #184]
    9601cf14:	f94077a0 	ldr	x0, [x29, #232]
    9601cf18:	940052b3 	bl	960319e4 <fdt_next_subnode>
    9601cf1c:	17ffff79 	b	9601cd00 <tegrabl_eeprom_manager_init+0x664>
				eeproms[count].name = NULL;
    9601cf20:	d2800601 	mov	x1, #0x30                  	// #48
    9601cf24:	912c02c0 	add	x0, x22, #0xb00
    9601cf28:	9b017e94 	mul	x20, x20, x1
    9601cf2c:	f834681f 	str	xzr, [x0, x20]
    9601cf30:	17ffffc7 	b	9601ce4c <tegrabl_eeprom_manager_init+0x7b0>
			eeproms[count].bus_node_name = tegrabl_malloc(BUS_NODE_NAME);
    9601cf34:	d2800c80 	mov	x0, #0x64                  	// #100
    9601cf38:	940026d0 	bl	96026a78 <tegrabl_malloc>
    9601cf3c:	f90006e0 	str	x0, [x23, #8]
			if (!eeproms[count].bus_node_name) {
    9601cf40:	396be260 	ldrb	w0, [x19, #2808]
    9601cf44:	9b1a5000 	madd	x0, x0, x26, x20
    9601cf48:	f9400400 	ldr	x0, [x0, #8]
    9601cf4c:	b50000c0 	cbnz	x0, 9601cf64 <tegrabl_eeprom_manager_init+0x8c8>
				pr_error("%s: Malloc for eeprom bus node name failed\n",
    9601cf50:	90000121 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601cf54:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cf58:	91108421 	add	x1, x1, #0x421
    9601cf5c:	91263000 	add	x0, x0, #0x98c
    9601cf60:	17fffeee 	b	9601cb18 <tegrabl_eeprom_manager_init+0x47c>
			tegrabl_snprintf(eeproms[count].bus_node_name, BUS_NODE_NAME, "%s",
    9601cf64:	910403a3 	add	x3, x29, #0x100
    9601cf68:	d2800c81 	mov	x1, #0x64                  	// #100
    9601cf6c:	f0000102 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    9601cf70:	910d9842 	add	x2, x2, #0x366
    9601cf74:	94001594 	bl	960225c4 <tegrabl_snprintf>
			pr_info("Device at %s:0x%02x\n", i2c_nodename, slave_addr);
    9601cf78:	b940c7a2 	ldr	w2, [x29, #196]
    9601cf7c:	910403a1 	add	x1, x29, #0x100
    9601cf80:	90000120 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601cf84:	9126ec00 	add	x0, x0, #0x9bb
    9601cf88:	940015ba 	bl	96022670 <tegrabl_printf>
			eeproms[count].data_valid = true;
    9601cf8c:	396be277 	ldrb	w23, [x19, #2808]
    9601cf90:	52800020 	mov	w0, #0x1                   	// #1
		mux_slave_addr = eeproms[old_count].data[mux_base_index];
    9601cf94:	f90043ba 	str	x26, [x29, #128]
			eeproms[count].data_valid = true;
    9601cf98:	aa1703f8 	mov	x24, x23
	uint8_t ncount = old_count + 1;
    9601cf9c:	11000718 	add	w24, w24, #0x1
			eeproms[count].data_valid = true;
    9601cfa0:	9b1a52f7 	madd	x23, x23, x26, x20
	uint8_t ncount = old_count + 1;
    9601cfa4:	12001f18 	and	w24, w24, #0xff
    9601cfa8:	2a1803f6 	mov	w22, w24
			eeproms[count].data_valid = true;
    9601cfac:	3900a2e0 	strb	w0, [x23, #40]
	uint32_t size = eeproms[old_count].size;
    9601cfb0:	b9401ae0 	ldr	w0, [x23, #24]
    9601cfb4:	b90097a0 	str	w0, [x29, #148]
	tegrabl_instance_i2c_t instance = eeproms[old_count].instance;
    9601cfb8:	b94012e0 	ldr	w0, [x23, #16]
    9601cfbc:	b9009fa0 	str	w0, [x29, #156]
	uint8_t old_slave_addr = eeproms[old_count].slave_addr;
    9601cfc0:	394052e0 	ldrb	w0, [x23, #20]
    9601cfc4:	b90093a0 	str	w0, [x29, #144]
	uint8_t mux_base_index = BOARD_ID_EEPROM_MUX_START_INDEX;
    9601cfc8:	52800b20 	mov	w0, #0x59                  	// #89
    9601cfcc:	b9009ba0 	str	w0, [x29, #152]
		mux_slave_addr = eeproms[old_count].data[mux_base_index];
    9601cfd0:	394263a1 	ldrb	w1, [x29, #152]
    9601cfd4:	f94012e0 	ldr	x0, [x23, #32]
    9601cfd8:	3861681a 	ldrb	w26, [x0, x1]
		mux_type = eeproms[old_count].data[mux_base_index + 1];
    9601cfdc:	8b010000 	add	x0, x0, x1
    9601cfe0:	3940041b 	ldrb	w27, [x0, #1]
		if ((mux_slave_addr == 0x00) || (mux_slave_addr == 0xFF)) {
    9601cfe4:	51000740 	sub	w0, w26, #0x1
    9601cfe8:	12001c00 	and	w0, w0, #0xff
    9601cfec:	7103f41f 	cmp	w0, #0xfd
    9601cff0:	54000288 	b.hi	9601d040 <tegrabl_eeprom_manager_init+0x9a4>  // b.pmore
		if (mux_type != I2C_MUX_TYPE_TCA9546A) {
    9601cff4:	7100077f 	cmp	w27, #0x1
    9601cff8:	54000241 	b.ne	9601d040 <tegrabl_eeprom_manager_init+0x9a4>  // b.any
		pr_info("Mux addr : 0x%02x and type %d\n", mux_slave_addr, mux_type);
    9601cffc:	f94033a0 	ldr	x0, [x29, #96]
		mux_slave_addr <<= 1;
    9601d000:	531f1b5a 	ubfiz	w26, w26, #1, #7
		pr_info("Mux addr : 0x%02x and type %d\n", mux_slave_addr, mux_type);
    9601d004:	2a1b03e2 	mov	w2, w27
    9601d008:	2a1a03e1 	mov	w1, w26
    9601d00c:	94001599 	bl	96022670 <tegrabl_printf>
		hi2cdev = tegrabl_i2c_dev_open(instance, mux_slave_addr, 1, 1);
    9601d010:	b9409fa0 	ldr	w0, [x29, #156]
    9601d014:	2a1b03e3 	mov	w3, w27
    9601d018:	2a1b03e2 	mov	w2, w27
    9601d01c:	2a1a03e1 	mov	w1, w26
    9601d020:	97ffc875 	bl	9600f1f4 <tegrabl_i2c_dev_open>
    9601d024:	f90047a0 	str	x0, [x29, #136]
		if (!hi2cdev) {
    9601d028:	b5000100 	cbnz	x0, 9601d048 <tegrabl_eeprom_manager_init+0x9ac>
			pr_error("Can't get handle to mux device @%d\n", mux_slave_addr);
    9601d02c:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d030:	2a1a03e1 	mov	w1, w26
    9601d034:	9127d400 	add	x0, x0, #0x9f5
    9601d038:	9400158e 	bl	96022670 <tegrabl_printf>
	*new_count = old_count + 1;
    9601d03c:	2a1803f6 	mov	w22, w24
			count = new_count;
    9601d040:	392be276 	strb	w22, [x19, #2808]
    9601d044:	17ffffb3 	b	9601cf10 <tegrabl_eeprom_manager_init+0x874>
		pr_info("Reading muxed eeprom i2c=%d:0x%x\n", instance, mux_slave_addr);
    9601d048:	b9409fa1 	ldr	w1, [x29, #156]
    9601d04c:	2a1a03e2 	mov	w2, w26
    9601d050:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d054:	91287000 	add	x0, x0, #0xa1c
    9601d058:	94001586 	bl	96022670 <tegrabl_printf>
				tegrabl_snprintf(eeproms[ncount].bus_node_name, BUS_NODE_NAME,
    9601d05c:	53017f40 	lsr	w0, w26, #1
    9601d060:	5280001a 	mov	w26, #0x0                   	// #0
    9601d064:	b9007fa0 	str	w0, [x29, #124]
			error = tegrabl_i2c_dev_write(hi2cdev, fake_buf, 1 << channel, 0);
    9601d068:	f94047a0 	ldr	x0, [x29, #136]
    9601d06c:	52800022 	mov	w2, #0x1                   	// #1
    9601d070:	52800003 	mov	w3, #0x0                   	// #0
    9601d074:	1ada2042 	lsl	w2, w2, w26
    9601d078:	9104e3a1 	add	x1, x29, #0x138
    9601d07c:	97ffc932 	bl	9600f544 <tegrabl_i2c_dev_write>
			if (error != TEGRABL_NO_ERROR) {
    9601d080:	340000e0 	cbz	w0, 9601d09c <tegrabl_eeprom_manager_init+0xa00>
				pr_error("%s: Cannot set mi2c mux channel\n", __func__);
    9601d084:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d088:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d08c:	91101c21 	add	x1, x1, #0x407
    9601d090:	91290400 	add	x0, x0, #0xa41
    9601d094:	94001577 	bl	96022670 <tegrabl_printf>
    9601d098:	17ffffe9 	b	9601d03c <tegrabl_eeprom_manager_init+0x9a0>
			tegrabl_udelay(100);
    9601d09c:	d2800c80 	mov	x0, #0x64                  	// #100
    9601d0a0:	94000b01 	bl	9601fca4 <tegrabl_udelay>
				eeproms[ncount].data = tegrabl_malloc(size);
    9601d0a4:	b94097a0 	ldr	w0, [x29, #148]
			tegrabl_udelay(100);
    9601d0a8:	52800a1b 	mov	w27, #0x50                  	// #80
				eeproms[ncount].data = tegrabl_malloc(size);
    9601d0ac:	f90037a0 	str	x0, [x29, #104]
				if (old_slave_addr == eep_addr) {
    9601d0b0:	b94093a0 	ldr	w0, [x29, #144]
    9601d0b4:	531f1b62 	ubfiz	w2, w27, #1, #7
    9601d0b8:	b9007ba2 	str	w2, [x29, #120]
    9601d0bc:	6b22001f 	cmp	w0, w2, uxtb
    9601d0c0:	54000440 	b.eq	9601d148 <tegrabl_eeprom_manager_init+0xaac>  // b.none
				eeproms[ncount].data = tegrabl_malloc(size);
    9601d0c4:	f94037a0 	ldr	x0, [x29, #104]
    9601d0c8:	9400266c 	bl	96026a78 <tegrabl_malloc>
    9601d0cc:	f94043a2 	ldr	x2, [x29, #128]
    9601d0d0:	93407ec1 	sxtw	x1, w22
    9601d0d4:	9b027c21 	mul	x1, x1, x2
				if (!eeproms[ncount].data) {
    9601d0d8:	b9407ba2 	ldr	w2, [x29, #120]
				eeproms[ncount].data = tegrabl_malloc(size);
    9601d0dc:	8b01029c 	add	x28, x20, x1
    9601d0e0:	f9001380 	str	x0, [x28, #32]
				if (!eeproms[ncount].data) {
    9601d0e4:	b50000c0 	cbnz	x0, 9601d0fc <tegrabl_eeprom_manager_init+0xa60>
					pr_error("%s: Malloc for eeprom data failed\n", __func__);
    9601d0e8:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d0ec:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d0f0:	91101c21 	add	x1, x1, #0x407
    9601d0f4:	911f1000 	add	x0, x0, #0x7c4
    9601d0f8:	17ffffe7 	b	9601d094 <tegrabl_eeprom_manager_init+0x9f8>
				eeproms[ncount].instance = instance;
    9601d0fc:	b9409fa0 	ldr	w0, [x29, #156]
    9601d100:	b9001380 	str	w0, [x28, #16]
				eeproms[ncount].size = size;
    9601d104:	b94097a0 	ldr	w0, [x29, #148]
    9601d108:	b9001b80 	str	w0, [x28, #24]
				error = tegrabl_eeprom_read(&eeproms[ncount]);
    9601d10c:	b94083a0 	ldr	w0, [x29, #128]
				eeproms[ncount].name = NULL;
    9601d110:	f8216a9f 	str	xzr, [x20, x1]
				eeproms[ncount].slave_addr = eep_addr;
    9601d114:	39005382 	strb	w2, [x28, #20]
				eeproms[ncount].crc_valid = false;
    9601d118:	3900739f 	strb	wzr, [x28, #28]
				error = tegrabl_eeprom_read(&eeproms[ncount]);
    9601d11c:	9ba07ec0 	umull	x0, w22, w0
				eeproms[ncount].data_valid = false;
    9601d120:	3900a39f 	strb	wzr, [x28, #40]
				error = tegrabl_eeprom_read(&eeproms[ncount]);
    9601d124:	8b000280 	add	x0, x20, x0
    9601d128:	97ffbf62 	bl	9600ceb0 <tegrabl_eeprom_read>
				if (error != TEGRABL_NO_ERROR) {
    9601d12c:	34000240 	cbz	w0, 9601d174 <tegrabl_eeprom_manager_init+0xad8>
					pr_error("Eeprom read failed 0x%08x\n", error);
    9601d130:	2a0003e1 	mov	w1, w0
    9601d134:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d138:	91299400 	add	x0, x0, #0xa65
    9601d13c:	9400154d 	bl	96022670 <tegrabl_printf>
					tegrabl_free(eeproms[ncount].data);
    9601d140:	f9401380 	ldr	x0, [x28, #32]
    9601d144:	9400265d 	bl	96026ab8 <tegrabl_free>
    9601d148:	1100077b 	add	w27, w27, #0x1
			for (addr = BOARD_ID_EEPROM_START_ADD;
    9601d14c:	7101677f 	cmp	w27, #0x59
    9601d150:	54fffb01 	b.ne	9601d0b0 <tegrabl_eeprom_manager_init+0xa14>  // b.any
    9601d154:	1100075a 	add	w26, w26, #0x1
		for (channel = 0; channel < I2C_MUX_TCA9546A_MAX_CHANNEL; ++channel) {
    9601d158:	7100135f 	cmp	w26, #0x4
    9601d15c:	54fff861 	b.ne	9601d068 <tegrabl_eeprom_manager_init+0x9cc>  // b.any
		mux_base_index += 2;
    9601d160:	b9409ba0 	ldr	w0, [x29, #152]
    9601d164:	11000800 	add	w0, w0, #0x2
    9601d168:	12001c00 	and	w0, w0, #0xff
    9601d16c:	b9009ba0 	str	w0, [x29, #152]
    9601d170:	17ffff98 	b	9601cfd0 <tegrabl_eeprom_manager_init+0x934>
				eeproms[ncount].data_valid = true;
    9601d174:	52800020 	mov	w0, #0x1                   	// #1
    9601d178:	3900a380 	strb	w0, [x28, #40]
				eeproms[ncount].bus_node_name = tegrabl_malloc(BUS_NODE_NAME);
    9601d17c:	d2800c80 	mov	x0, #0x64                  	// #100
    9601d180:	9400263e 	bl	96026a78 <tegrabl_malloc>
    9601d184:	f9000780 	str	x0, [x28, #8]
				if (!eeproms[ncount].bus_node_name) {
    9601d188:	b50000c0 	cbnz	x0, 9601d1a0 <tegrabl_eeprom_manager_init+0xb04>
					pr_error("%s: Malloc for eeprom bus node name failed\n",
    9601d18c:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d190:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d194:	91101c21 	add	x1, x1, #0x407
    9601d198:	91263000 	add	x0, x0, #0x98c
    9601d19c:	17ffffbe 	b	9601d094 <tegrabl_eeprom_manager_init+0x9f8>
				tegrabl_snprintf(eeproms[ncount].bus_node_name, BUS_NODE_NAME,
    9601d1a0:	b9407fa5 	ldr	w5, [x29, #124]
    9601d1a4:	2a1a03e6 	mov	w6, w26
    9601d1a8:	f94006e3 	ldr	x3, [x23, #8]
    9601d1ac:	d2800c81 	mov	x1, #0x64                  	// #100
    9601d1b0:	394052e4 	ldrb	w4, [x23, #20]
    9601d1b4:	f0000102 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9601d1b8:	912a0c42 	add	x2, x2, #0xa83
				ncount++;
    9601d1bc:	110006d6 	add	w22, w22, #0x1
    9601d1c0:	12001ed6 	and	w22, w22, #0xff
				tegrabl_snprintf(eeproms[ncount].bus_node_name, BUS_NODE_NAME,
    9601d1c4:	53017c84 	lsr	w4, w4, #1
    9601d1c8:	940014ff 	bl	960225c4 <tegrabl_snprintf>
				pr_info("Device at %s:module@0x%02x\n",
    9601d1cc:	f9400781 	ldr	x1, [x28, #8]
    9601d1d0:	2a1b03e2 	mov	w2, w27
    9601d1d4:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d1d8:	912aa000 	add	x0, x0, #0xaa8
    9601d1dc:	94001525 	bl	96022670 <tegrabl_printf>
    9601d1e0:	17ffffda 	b	9601d148 <tegrabl_eeprom_manager_init+0xaac>
		return TEGRABL_NO_ERROR;
    9601d1e4:	52800015 	mov	w21, #0x0                   	// #0
    9601d1e8:	17fffd62 	b	9601c770 <tegrabl_eeprom_manager_init+0xd4>

000000009601d1ec <tegrabl_eeprom_manager_max>:

tegrabl_error_t tegrabl_eeprom_manager_max(uint8_t *num)
{
    9601d1ec:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601d1f0:	910003fd 	mov	x29, sp
    9601d1f4:	f9000bf3 	str	x19, [sp, #16]
    9601d1f8:	aa0003f3 	mov	x19, x0
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	error = tegrabl_eeprom_manager_init();
    9601d1fc:	97fffd28 	bl	9601c69c <tegrabl_eeprom_manager_init>

	if (error != TEGRABL_NO_ERROR) {
    9601d200:	340000e0 	cbz	w0, 9601d21c <tegrabl_eeprom_manager_max+0x30>
    9601d204:	12005c00 	and	w0, w0, #0xffffff
    9601d208:	52a6a001 	mov	w1, #0x35000000            	// #889192448
    9601d20c:	2a010000 	orr	w0, w0, w1
	}

	*num = count;

	return TEGRABL_NO_ERROR;
}
    9601d210:	f9400bf3 	ldr	x19, [sp, #16]
    9601d214:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601d218:	d65f03c0 	ret
	*num = count;
    9601d21c:	b0000281 	adrp	x1, 9606e000 <__bss_start>
    9601d220:	396be021 	ldrb	w1, [x1, #2808]
    9601d224:	39000261 	strb	w1, [x19]
	return TEGRABL_NO_ERROR;
    9601d228:	17fffffa 	b	9601d210 <tegrabl_eeprom_manager_max+0x24>

000000009601d22c <tegrabl_eeprom_manager_get_eeprom_by_id>:

tegrabl_error_t tegrabl_eeprom_manager_get_eeprom_by_id(uint8_t module_id,
												struct tegrabl_eeprom **eeprom)
{
    9601d22c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601d230:	910003fd 	mov	x29, sp
    9601d234:	a90153f3 	stp	x19, x20, [sp, #16]
    9601d238:	12001c13 	and	w19, w0, #0xff
    9601d23c:	aa0103f4 	mov	x20, x1
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	error = tegrabl_eeprom_manager_init();
    9601d240:	97fffd17 	bl	9601c69c <tegrabl_eeprom_manager_init>

	if (error != TEGRABL_NO_ERROR) {
    9601d244:	340000e0 	cbz	w0, 9601d260 <tegrabl_eeprom_manager_get_eeprom_by_id+0x34>
    9601d248:	12005c00 	and	w0, w0, #0xffffff
    9601d24c:	52a6a001 	mov	w1, #0x35000000            	// #889192448
    9601d250:	2a010000 	orr	w0, w0, w1
	}

	*eeprom = &eeproms[module_id];

	return TEGRABL_NO_ERROR;
}
    9601d254:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601d258:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601d25c:	d65f03c0 	ret
	if (module_id >= count) {
    9601d260:	b0000281 	adrp	x1, 9606e000 <__bss_start>
    9601d264:	396be021 	ldrb	w1, [x1, #2808]
    9601d268:	6b13003f 	cmp	w1, w19
    9601d26c:	540000e9 	b.ls	9601d288 <tegrabl_eeprom_manager_get_eeprom_by_id+0x5c>  // b.plast
	*eeprom = &eeproms[module_id];
    9601d270:	b0000282 	adrp	x2, 9606e000 <__bss_start>
    9601d274:	912c0042 	add	x2, x2, #0xb00
    9601d278:	52800601 	mov	w1, #0x30                  	// #48
    9601d27c:	9ba10a73 	umaddl	x19, w19, w1, x2
    9601d280:	f9000293 	str	x19, [x20]
	return TEGRABL_NO_ERROR;
    9601d284:	17fffff4 	b	9601d254 <tegrabl_eeprom_manager_get_eeprom_by_id+0x28>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601d288:	52800040 	mov	w0, #0x2                   	// #2
    9601d28c:	72a6a6a0 	movk	w0, #0x3535, lsl #16
    9601d290:	17fffff1 	b	9601d254 <tegrabl_eeprom_manager_get_eeprom_by_id+0x28>

000000009601d294 <tegrabl_eeprom_manager_get_eeprom_by_name>:
												struct tegrabl_eeprom **eeprom)
{
	uint8_t index = 0;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (!name) {
    9601d294:	b40005e0 	cbz	x0, 9601d350 <tegrabl_eeprom_manager_get_eeprom_by_name+0xbc>
{
    9601d298:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9601d29c:	910003fd 	mov	x29, sp
    9601d2a0:	a90153f3 	stp	x19, x20, [sp, #16]
    9601d2a4:	aa0003f4 	mov	x20, x0
    9601d2a8:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601d2ac:	a90363f7 	stp	x23, x24, [sp, #48]
    9601d2b0:	aa0103f7 	mov	x23, x1
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	error = tegrabl_eeprom_manager_init();
    9601d2b4:	97fffcfa 	bl	9601c69c <tegrabl_eeprom_manager_init>

	if (error != TEGRABL_NO_ERROR) {
    9601d2b8:	340003e0 	cbz	w0, 9601d334 <tegrabl_eeprom_manager_get_eeprom_by_name+0xa0>
    9601d2bc:	12005c00 	and	w0, w0, #0xffffff
    9601d2c0:	52a6a001 	mov	w1, #0x35000000            	// #889192448
    9601d2c4:	2a010000 	orr	w0, w0, w1
			return error;
		}
	}

	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
}
    9601d2c8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601d2cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601d2d0:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601d2d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9601d2d8:	d65f03c0 	ret
		if (eeproms[index].name == NULL) {
    9601d2dc:	93407e60 	sxtw	x0, w19
    9601d2e0:	9b187c00 	mul	x0, x0, x24
    9601d2e4:	f8606ac0 	ldr	x0, [x22, x0]
    9601d2e8:	b4000160 	cbz	x0, 9601d314 <tegrabl_eeprom_manager_get_eeprom_by_name+0x80>
		if (!strcmp(eeproms[index].name, (const char *)name)) {
    9601d2ec:	aa1403e1 	mov	x1, x20
    9601d2f0:	940033d7 	bl	9602a24c <strcmp>
    9601d2f4:	35000100 	cbnz	w0, 9601d314 <tegrabl_eeprom_manager_get_eeprom_by_name+0x80>
			error = tegrabl_eeprom_manager_get_eeprom_by_id(index, eeprom);
    9601d2f8:	aa1703e1 	mov	x1, x23
    9601d2fc:	2a1303e0 	mov	w0, w19
}
    9601d300:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601d304:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601d308:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601d30c:	a8c47bfd 	ldp	x29, x30, [sp], #64
			error = tegrabl_eeprom_manager_get_eeprom_by_id(index, eeprom);
    9601d310:	17ffffc7 	b	9601d22c <tegrabl_eeprom_manager_get_eeprom_by_id>
	for (index = 0; index < count; index++) {
    9601d314:	11000673 	add	w19, w19, #0x1
    9601d318:	12001e73 	and	w19, w19, #0xff
    9601d31c:	394002a0 	ldrb	w0, [x21]
    9601d320:	6b13001f 	cmp	w0, w19
    9601d324:	54fffdc8 	b.hi	9601d2dc <tegrabl_eeprom_manager_get_eeprom_by_name+0x48>  // b.pmore
	return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601d328:	52800020 	mov	w0, #0x1                   	// #1
    9601d32c:	72a6a6a0 	movk	w0, #0x3535, lsl #16
    9601d330:	17ffffe6 	b	9601d2c8 <tegrabl_eeprom_manager_get_eeprom_by_name+0x34>
	for (index = 0; index < count; index++) {
    9601d334:	b0000295 	adrp	x21, 9606e000 <__bss_start>
		if (eeproms[index].name == NULL) {
    9601d338:	b0000296 	adrp	x22, 9606e000 <__bss_start>
	for (index = 0; index < count; index++) {
    9601d33c:	52800013 	mov	w19, #0x0                   	// #0
    9601d340:	912be2b5 	add	x21, x21, #0xaf8
		if (eeproms[index].name == NULL) {
    9601d344:	912c02d6 	add	x22, x22, #0xb00
    9601d348:	d2800618 	mov	x24, #0x30                  	// #48
    9601d34c:	17fffff4 	b	9601d31c <tegrabl_eeprom_manager_get_eeprom_by_name+0x88>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601d350:	52800040 	mov	w0, #0x2                   	// #2
    9601d354:	72a6a6a0 	movk	w0, #0x3535, lsl #16
}
    9601d358:	d65f03c0 	ret

000000009601d35c <tegrabl_exit_get_ops>:
static struct tegrabl_exit_ops ops;

struct tegrabl_exit_ops *tegrabl_exit_get_ops(void)
{
	return &ops;
}
    9601d35c:	d0000280 	adrp	x0, 9606f000 <eeproms+0x500>
    9601d360:	91220000 	add	x0, x0, #0x880
    9601d364:	d65f03c0 	ret

000000009601d368 <tegrabl_reset>:

tegrabl_error_t tegrabl_reset(void)
{
	if (ops.sys_reset == NULL) {
    9601d368:	d0000280 	adrp	x0, 9606f000 <eeproms+0x500>
    9601d36c:	f9444401 	ldr	x1, [x0, #2184]
    9601d370:	b4000061 	cbz	x1, 9601d37c <tegrabl_reset+0x14>
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
	}
	return ops.sys_reset(NULL);
    9601d374:	d2800000 	mov	x0, #0x0                   	// #0
    9601d378:	d61f0020 	br	x1
}
    9601d37c:	52800020 	mov	w0, #0x1                   	// #1
    9601d380:	72aa6a60 	movk	w0, #0x5353, lsl #16
    9601d384:	d65f03c0 	ret

000000009601d388 <tegrabl_get_cur_in_frame>:
	return TEGRABL_NO_ERROR;
}

static struct frame_data *tegrabl_get_cur_in_frame(uint32_t channel)
{
	return s_channels[channel].ib;
    9601d388:	d37c7c00 	ubfiz	x0, x0, #4, #32
}
    9601d38c:	d0000281 	adrp	x1, 9606f000 <eeproms+0x500>
    9601d390:	91234021 	add	x1, x1, #0x8d0
    9601d394:	f8606820 	ldr	x0, [x1, x0]
    9601d398:	d65f03c0 	ret

000000009601d39c <tegrabl_ivc_notify>:
{
	/*
	 * Any writes to this register has the same effect, uses master ID of
	 * the write transaction and set corresponding flag.
	 */
	HSP_DB_WRITE(HSP_DBELL_3_TRIGGER_0, 1);
    9601d39c:	d2806000 	mov	x0, #0x300                 	// #768
    9601d3a0:	52800021 	mov	w1, #0x1                   	// #1
    9601d3a4:	f2a07920 	movk	x0, #0x3c9, lsl #16
    9601d3a8:	b9000001 	str	w1, [x0]
static void tegrabl_ivc_notify(struct ivc *ivc)
{
	TEGRABL_UNUSED(ivc);

	tegrabl_ring_bpmp_doorbell();
}
    9601d3ac:	d65f03c0 	ret

000000009601d3b0 <tegrabl_ccpelx_bpmp_signal_slave>:
	tegra_ivc_write_advance(ivc_ccplex_bpmp_channels + channel);
    9601d3b0:	d0000281 	adrp	x1, 9606f000 <eeproms+0x500>
    9601d3b4:	9122a021 	add	x1, x1, #0x8a8
    9601d3b8:	52800502 	mov	w2, #0x28                  	// #40
    9601d3bc:	9ba20400 	umaddl	x0, w0, w2, x1
    9601d3c0:	140001c0 	b	9601dac0 <tegra_ivc_write_advance>

000000009601d3c4 <tegrabl_ccplex_bpmp_getnext_outframe>:
{
    9601d3c4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
						(struct frame_data *)tegra_ivc_write_get_next_frame(
    9601d3c8:	52800501 	mov	w1, #0x28                  	// #40
{
    9601d3cc:	910003fd 	mov	x29, sp
    9601d3d0:	a90153f3 	stp	x19, x20, [sp, #16]
    9601d3d4:	2a0003f3 	mov	w19, w0
						(struct frame_data *)tegra_ivc_write_get_next_frame(
    9601d3d8:	d0000280 	adrp	x0, 9606f000 <eeproms+0x500>
    9601d3dc:	9122a000 	add	x0, x0, #0x8a8
    9601d3e0:	9ba10260 	umaddl	x0, w19, w1, x0
    9601d3e4:	940001a6 	bl	9601da7c <tegra_ivc_write_get_next_frame>
	s_channels[channel].ob =
    9601d3e8:	d0000281 	adrp	x1, 9606f000 <eeproms+0x500>
    9601d3ec:	91234022 	add	x2, x1, #0x8d0
    9601d3f0:	8b131042 	add	x2, x2, x19, lsl #4
    9601d3f4:	aa0103f4 	mov	x20, x1
    9601d3f8:	f9000440 	str	x0, [x2, #8]
	if (s_channels[channel].ob == NULL) {
    9601d3fc:	b50000c0 	cbnz	x0, 9601d414 <tegrabl_ccplex_bpmp_getnext_outframe+0x50>
		pr_error("%s: Error in getting next frame, exiting\n", __func__);
    9601d400:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d404:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d408:	912bd821 	add	x1, x1, #0xaf6
    9601d40c:	912f6c00 	add	x0, x0, #0xbdb
    9601d410:	94001498 	bl	96022670 <tegrabl_printf>
	return s_channels[channel].ob;
    9601d414:	91234281 	add	x1, x20, #0x8d0
    9601d418:	8b131033 	add	x19, x1, x19, lsl #4
}
    9601d41c:	f9400660 	ldr	x0, [x19, #8]
    9601d420:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601d424:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601d428:	d65f03c0 	ret

000000009601d42c <tegrabl_connect_bpmp>:
	reg = HSP_DB_READ(HSP_DBELL_1_ENABLE_0);
    9601d42c:	d2802081 	mov	x1, #0x104                 	// #260

/*
 * Initializes the BPMP<--->CCPlex connection.
 */
static tegrabl_error_t tegrabl_connect_bpmp(void)
{
    9601d430:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	reg = HSP_DB_READ(HSP_DBELL_1_ENABLE_0);
    9601d434:	f2a07921 	movk	x1, #0x3c9, lsl #16
{
    9601d438:	910003fd 	mov	x29, sp
	reg = HSP_DB_READ(HSP_DBELL_1_ENABLE_0);
    9601d43c:	b9400020 	ldr	w0, [x1]
{
    9601d440:	a90153f3 	stp	x19, x20, [sp, #16]
			tegrabl_udelay(delay_us); /* bpmp turn-around time */
			timeout -= delay_us;
		} while (timeout > 0);

		if (timeout <= 0)
			pr_info("%s: Waiting for BPMP FW readiness..\n", __func__);
    9601d444:	f0000114 	adrp	x20, 96040000 <sdmmc_base_addr+0x9f4>
{
    9601d448:	a9025bf5 	stp	x21, x22, [sp, #32]
			pr_info("%s: Waiting for BPMP FW readiness..\n", __func__);
    9601d44c:	f0000113 	adrp	x19, 96040000 <sdmmc_base_addr+0x9f4>
	reg = HSP_DB_READ(HSP_DBELL_3_ENABLE_0);
    9601d450:	d2806096 	mov	x22, #0x304                 	// #772
			pr_info("%s: Waiting for BPMP FW readiness..\n", __func__);
    9601d454:	912d8a94 	add	x20, x20, #0xb62
    9601d458:	9136b673 	add	x19, x19, #0xdad
	reg |= NV_DRF_BIT(HSP_MASTER_BPMP);
    9601d45c:	320d0000 	orr	w0, w0, #0x80000
	reg = HSP_DB_READ(HSP_DBELL_3_ENABLE_0);
    9601d460:	f2a07936 	movk	x22, #0x3c9, lsl #16
	HSP_DB_WRITE(HSP_DBELL_1_ENABLE_0, reg);
    9601d464:	b9000020 	str	w0, [x1]
{
    9601d468:	d2884815 	mov	x21, #0x4240                	// #16960
    9601d46c:	f2a001f5 	movk	x21, #0xf, lsl #16
	reg = HSP_DB_READ(HSP_DBELL_3_ENABLE_0);
    9601d470:	b94002c0 	ldr	w0, [x22]
	if (reg & NV_DRF_BIT(HSP_MASTER_CCPLEX)) {
    9601d474:	378805a0 	tbnz	w0, #17, 9601d528 <tegrabl_connect_bpmp+0xfc>
			tegrabl_udelay(delay_us); /* bpmp turn-around time */
    9601d478:	d2800020 	mov	x0, #0x1                   	// #1
    9601d47c:	94000a0a 	bl	9601fca4 <tegrabl_udelay>
		} while (timeout > 0);
    9601d480:	f10006b5 	subs	x21, x21, #0x1
    9601d484:	54ffff61 	b.ne	9601d470 <tegrabl_connect_bpmp+0x44>  // b.any
			pr_info("%s: Waiting for BPMP FW readiness..\n", __func__);
    9601d488:	aa1403e1 	mov	x1, x20
    9601d48c:	aa1303e0 	mov	x0, x19
    9601d490:	94001478 	bl	96022670 <tegrabl_printf>
		timeout = TIMEOUT_RESPONSE_FROM_BPMP;
    9601d494:	17fffff5 	b	9601d468 <tegrabl_connect_bpmp+0x3c>
			NV_CHECK_PRINT_ERR
			(TEGRABL_ERR_BUSY,
			 "%s: Failed in tegra_ivc_init(), channel id %d, error code%d\n",
			 __func__, i, error);
		}
		tegra_ivc_channel_reset(ivc_ccplex_bpmp_channels + i);
    9601d498:	aa1303e0 	mov	x0, x19
    9601d49c:	940001b0 	bl	9601db5c <tegra_ivc_channel_reset>
		while (tegra_ivc_channel_notified(ivc_ccplex_bpmp_channels + i)) {
    9601d4a0:	aa1303e0 	mov	x0, x19
    9601d4a4:	940001bc 	bl	9601db94 <tegra_ivc_channel_notified>
    9601d4a8:	35ffffc0 	cbnz	w0, 9601d4a0 <tegrabl_connect_bpmp+0x74>
			;
		}
	}

	pr_info("%s: All communication channels initialized\n", __func__);
    9601d4ac:	912d8a81 	add	x1, x20, #0xb62
    9601d4b0:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d4b4:	9135f800 	add	x0, x0, #0xd7e
    9601d4b8:	9400146e 	bl	96022670 <tegrabl_printf>
	return TEGRABL_NO_ERROR;
    9601d4bc:	52800000 	mov	w0, #0x0                   	// #0
    9601d4c0:	14000030 	b	9601d580 <tegrabl_connect_bpmp+0x154>
		error = tegra_ivc_init(ivc_ccplex_bpmp_channels + i, rx_base, tx_base,
    9601d4c4:	d0000293 	adrp	x19, 9606f000 <eeproms+0x500>
    9601d4c8:	d29c0002 	mov	x2, #0xe000                	// #57344
    9601d4cc:	9122a273 	add	x19, x19, #0x8a8
    9601d4d0:	d29e0001 	mov	x1, #0xf000                	// #61440
    9601d4d4:	90000005 	adrp	x5, 9601d000 <tegrabl_eeprom_manager_init+0x964>
    9601d4d8:	2a1603e4 	mov	w4, w22
    9601d4dc:	910e70a5 	add	x5, x5, #0x39c
    9601d4e0:	52800023 	mov	w3, #0x1                   	// #1
    9601d4e4:	f2a60082 	movk	x2, #0x3004, lsl #16
    9601d4e8:	f2a60081 	movk	x1, #0x3004, lsl #16
    9601d4ec:	aa1303e0 	mov	x0, x19
    9601d4f0:	940001f6 	bl	9601dcc8 <tegra_ivc_init>
		if (error) {
    9601d4f4:	34fffd20 	cbz	w0, 9601d498 <tegrabl_connect_bpmp+0x6c>
			NV_CHECK_PRINT_ERR
    9601d4f8:	2a0003e3 	mov	w3, w0
    9601d4fc:	52800002 	mov	w2, #0x0                   	// #0
    9601d500:	aa1503e1 	mov	x1, x21
    9601d504:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d508:	91350400 	add	x0, x0, #0xd41
    9601d50c:	94001459 	bl	96022670 <tegrabl_printf>
    9601d510:	528001c1 	mov	w1, #0xe                   	// #14
    9601d514:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d518:	9134c000 	add	x0, x0, #0xd30
    9601d51c:	94001455 	bl	96022670 <tegrabl_printf>
    9601d520:	528001c0 	mov	w0, #0xe                   	// #14
    9601d524:	14000017 	b	9601d580 <tegrabl_connect_bpmp+0x154>
	pr_info("%s: BPMP handshake completed\n", __func__);
    9601d528:	f0000114 	adrp	x20, 96040000 <sdmmc_base_addr+0x9f4>
    9601d52c:	912d8a95 	add	x21, x20, #0xb62
    9601d530:	aa1503e1 	mov	x1, x21
    9601d534:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d538:	91375400 	add	x0, x0, #0xdd5
    9601d53c:	9400144d 	bl	96022670 <tegrabl_printf>
	msg_size = tegra_ivc_align(MSG_SZ);
    9601d540:	d2801000 	mov	x0, #0x80                  	// #128
    9601d544:	940001d0 	bl	9601dc84 <tegra_ivc_align>
    9601d548:	aa0003f6 	mov	x22, x0
	frame_size = tegra_ivc_total_queue_size(msg_size);
    9601d54c:	940001d1 	bl	9601dc90 <tegra_ivc_total_queue_size>
	if ((frame_size * NO_OF_CHANNELS) > IPC_CPU_MASTER_SIZE)
    9601d550:	7140041f 	cmp	w0, #0x1, lsl #12
    9601d554:	54fffb89 	b.ls	9601d4c4 <tegrabl_connect_bpmp+0x98>  // b.plast
		NV_CHECK_PRINT_ERR
    9601d558:	52800022 	mov	w2, #0x1                   	// #1
    9601d55c:	aa1503e1 	mov	x1, x21
    9601d560:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d564:	9133f000 	add	x0, x0, #0xcfc
    9601d568:	94001442 	bl	96022670 <tegrabl_printf>
    9601d56c:	52800181 	mov	w1, #0xc                   	// #12
    9601d570:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d574:	9134c000 	add	x0, x0, #0xd30
    9601d578:	9400143e 	bl	96022670 <tegrabl_printf>
    9601d57c:	52800180 	mov	w0, #0xc                   	// #12

fail:
	return e;
}
    9601d580:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601d584:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601d588:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601d58c:	d65f03c0 	ret

000000009601d590 <tegrabl_ccplex_bpmp_free_master>:
	e = tegra_ivc_read_advance(ivc_ccplex_bpmp_channels + channel);
    9601d590:	d0000281 	adrp	x1, 9606f000 <eeproms+0x500>
    9601d594:	9122a021 	add	x1, x1, #0x8a8
    9601d598:	52800502 	mov	w2, #0x28                  	// #40
{
    9601d59c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	e = tegra_ivc_read_advance(ivc_ccplex_bpmp_channels + channel);
    9601d5a0:	d503201f 	nop
    9601d5a4:	9ba20400 	umaddl	x0, w0, w2, x1
{
    9601d5a8:	910003fd 	mov	x29, sp
	e = tegra_ivc_read_advance(ivc_ccplex_bpmp_channels + channel);
    9601d5ac:	94000114 	bl	9601d9fc <tegra_ivc_read_advance>
	if (e) {
    9601d5b0:	34000120 	cbz	w0, 9601d5d4 <tegrabl_ccplex_bpmp_free_master+0x44>
		pr_error("%s: Error in tegrabl_ccplex_bpmp_free_master()\n",
    9601d5b4:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d5b8:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d5bc:	912c6c21 	add	x1, x1, #0xb1b
    9601d5c0:	912ea000 	add	x0, x0, #0xba8
    9601d5c4:	9400142b 	bl	96022670 <tegrabl_printf>
    9601d5c8:	528002a0 	mov	w0, #0x15                  	// #21
}
    9601d5cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9601d5d0:	d65f03c0 	ret
	return TEGRABL_NO_ERROR;
    9601d5d4:	52800000 	mov	w0, #0x0                   	// #0
    9601d5d8:	17fffffd 	b	9601d5cc <tegrabl_ccplex_bpmp_free_master+0x3c>

000000009601d5dc <tegrabl_ccplex_bpmp_wait_for_slave_ack>:
{
    9601d5dc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9601d5e0:	910003fd 	mov	x29, sp
    9601d5e4:	f90013f5 	str	x21, [sp, #32]
					(struct frame_data *)tegra_ivc_read_get_next_frame(
    9601d5e8:	d0000295 	adrp	x21, 9606f000 <eeproms+0x500>
    9601d5ec:	9122a2a1 	add	x1, x21, #0x8a8
    9601d5f0:	52800515 	mov	w21, #0x28                  	// #40
{
    9601d5f4:	a90153f3 	stp	x19, x20, [sp, #16]
	s_channels[channel].ib =
    9601d5f8:	d0000293 	adrp	x19, 9606f000 <eeproms+0x500>
    9601d5fc:	91234273 	add	x19, x19, #0x8d0
					(struct frame_data *)tegra_ivc_read_get_next_frame(
    9601d600:	52884814 	mov	w20, #0x4240                	// #16960
    9601d604:	9bb50415 	umaddl	x21, w0, w21, x1
	s_channels[channel].ib =
    9601d608:	d37c7c00 	ubfiz	x0, x0, #4, #32
    9601d60c:	8b000273 	add	x19, x19, x0
					(struct frame_data *)tegra_ivc_read_get_next_frame(
    9601d610:	72a001f4 	movk	w20, #0xf, lsl #16
    9601d614:	aa1503e0 	mov	x0, x21
    9601d618:	940000df 	bl	9601d994 <tegra_ivc_read_get_next_frame>
	s_channels[channel].ib =
    9601d61c:	f9000260 	str	x0, [x19]
	if (s_channels[channel].ib == NULL) {
    9601d620:	b50001e0 	cbnz	x0, 9601d65c <tegrabl_ccplex_bpmp_wait_for_slave_ack+0x80>
		tegrabl_udelay(50);
    9601d624:	d2800640 	mov	x0, #0x32                  	// #50
    9601d628:	9400099f 	bl	9601fca4 <tegrabl_udelay>
	} while (timeout);
    9601d62c:	71000694 	subs	w20, w20, #0x1
    9601d630:	54ffff21 	b.ne	9601d614 <tegrabl_ccplex_bpmp_wait_for_slave_ack+0x38>  // b.any
	pr_error("%s: Didn't get response from BPMP, exiting\n", __func__);
    9601d634:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d638:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d63c:	912cec21 	add	x1, x1, #0xb3b
    9601d640:	91302000 	add	x0, x0, #0xc08
    9601d644:	9400140b 	bl	96022670 <tegrabl_printf>
    9601d648:	528000c0 	mov	w0, #0x6                   	// #6
}
    9601d64c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601d650:	f94013f5 	ldr	x21, [sp, #32]
    9601d654:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601d658:	d65f03c0 	ret
			return TEGRABL_NO_ERROR;
    9601d65c:	52800000 	mov	w0, #0x0                   	// #0
    9601d660:	17fffffb 	b	9601d64c <tegrabl_ccplex_bpmp_wait_for_slave_ack+0x70>

000000009601d664 <tegrabl_ipc_init>:
};

static void tegrabl_ipc_callbacks(struct ccplex_bpmp_ipc **s_ipc_callbacks)
{
	TEGRABL_ASSERT(s_ipc_callbacks);
	*s_ipc_callbacks = &ccplex_bpmp_ipc;
    9601d664:	b0000160 	adrp	x0, 9604a000 <s_qspi_info+0x20>
    9601d668:	91004002 	add	x2, x0, #0x10
    9601d66c:	d0000281 	adrp	x1, 9606f000 <eeproms+0x500>
 */
tegrabl_error_t tegrabl_ipc_init(void)
{
	tegrabl_error_t e = TEGRABL_NO_ERROR;
	tegrabl_ipc_callbacks(&s_ipc_callbacks);
	e = s_ipc_callbacks->connect();
    9601d670:	f9400800 	ldr	x0, [x0, #16]
	*s_ipc_callbacks = &ccplex_bpmp_ipc;
    9601d674:	f9047022 	str	x2, [x1, #2272]
	e = s_ipc_callbacks->connect();
    9601d678:	d61f0000 	br	x0

000000009601d67c <tegrabl_ccplex_bpmp_xfer>:
		void *p_out,
		void *p_in,
		uint32_t size_out,
		uint32_t size_in,
		uint32_t mrq)
{
    9601d67c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9601d680:	910003fd 	mov	x29, sp
    9601d684:	a90153f3 	stp	x19, x20, [sp, #16]
    9601d688:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601d68c:	a90363f7 	stp	x23, x24, [sp, #48]
    9601d690:	f90023f9 	str	x25, [sp, #64]
	tegrabl_error_t e = TEGRABL_NO_ERROR;
	struct frame_data *p;

	if (p_out == NULL) {
    9601d694:	b50001a0 	cbnz	x0, 9601d6c8 <tegrabl_ccplex_bpmp_xfer+0x4c>
		pr_error("%s: out buffer is null, exiting\n", __func__);
    9601d698:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d69c:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d6a0:	912e3c21 	add	x1, x1, #0xb8f
    9601d6a4:	9130dc00 	add	x0, x0, #0xc37
    9601d6a8:	940013f2 	bl	96022670 <tegrabl_printf>
		return -1;
    9601d6ac:	12800000 	mov	w0, #0xffffffff            	// #-1
	if (e) {
		pr_error("%s: failed to send/receive, err:%x\n", __func__, e);
	}

	return TEGRABL_ERR_INVALID;
}
    9601d6b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601d6b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601d6b8:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601d6bc:	f94023f9 	ldr	x25, [sp, #64]
    9601d6c0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601d6c4:	d65f03c0 	ret
			(!s_ipc_callbacks->connect) ||
    9601d6c8:	d0000294 	adrp	x20, 9606f000 <eeproms+0x500>
    9601d6cc:	aa0003f7 	mov	x23, x0
    9601d6d0:	aa0103f5 	mov	x21, x1
	channel_id = CH0_CPU_0_TO_BPMP;
    9601d6d4:	d0000293 	adrp	x19, 9606f000 <eeproms+0x500>
			(!s_ipc_callbacks->connect) ||
    9601d6d8:	f9447280 	ldr	x0, [x20, #2272]
	channel_id = CH0_CPU_0_TO_BPMP;
    9601d6dc:	b908a27f 	str	wzr, [x19, #2208]
	if (
    9601d6e0:	f9400001 	ldr	x1, [x0]
    9601d6e4:	b4000341 	cbz	x1, 9601d74c <tegrabl_ccplex_bpmp_xfer+0xd0>
			(!s_ipc_callbacks->get_next_out_frame) ||
    9601d6e8:	f9400401 	ldr	x1, [x0, #8]
			(!s_ipc_callbacks->connect) ||
    9601d6ec:	b4000301 	cbz	x1, 9601d74c <tegrabl_ccplex_bpmp_xfer+0xd0>
    9601d6f0:	2a0203f8 	mov	w24, w2
			(!s_ipc_callbacks->get_next_out_frame) ||
    9601d6f4:	f9400802 	ldr	x2, [x0, #16]
    9601d6f8:	b40002a2 	cbz	x2, 9601d74c <tegrabl_ccplex_bpmp_xfer+0xd0>
			(!s_ipc_callbacks->signal_slave) ||
    9601d6fc:	f9400c02 	ldr	x2, [x0, #24]
    9601d700:	b4000262 	cbz	x2, 9601d74c <tegrabl_ccplex_bpmp_xfer+0xd0>
			(!s_ipc_callbacks->wait_for_slave_ack) ||
    9601d704:	f9401402 	ldr	x2, [x0, #40]
    9601d708:	b4000222 	cbz	x2, 9601d74c <tegrabl_ccplex_bpmp_xfer+0xd0>
			(!s_ipc_callbacks->get_cur_in_frame) ||
    9601d70c:	f9401000 	ldr	x0, [x0, #32]
    9601d710:	b40001e0 	cbz	x0, 9601d74c <tegrabl_ccplex_bpmp_xfer+0xd0>
    9601d714:	2a0303f6 	mov	w22, w3
    9601d718:	2a0403f9 	mov	w25, w4
	p = s_ipc_callbacks->get_next_out_frame(channel_id);
    9601d71c:	52800000 	mov	w0, #0x0                   	// #0
    9601d720:	d63f0020 	blr	x1
	if (!p) {
    9601d724:	b5000300 	cbnz	x0, 9601d784 <tegrabl_ccplex_bpmp_xfer+0x108>
		NV_CHECK_PRINT_ERR(TEGRABL_ERR_INVALID_STATE,
    9601d728:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d72c:	91323800 	add	x0, x0, #0xc8e
		NV_CHECK_PRINT_ERR(TEGRABL_ERR_INVALID_STATE,
    9601d730:	940013d0 	bl	96022670 <tegrabl_printf>
    9601d734:	528002a1 	mov	w1, #0x15                  	// #21
    9601d738:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d73c:	9134c000 	add	x0, x0, #0xd30
    9601d740:	940013cc 	bl	96022670 <tegrabl_printf>
    9601d744:	528002a0 	mov	w0, #0x15                  	// #21
    9601d748:	14000007 	b	9601d764 <tegrabl_ccplex_bpmp_xfer+0xe8>
	pr_error("%s: One or more parameters are set incorrectly\n", __func__);
    9601d74c:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d750:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d754:	912ddc21 	add	x1, x1, #0xb77
    9601d758:	91316c00 	add	x0, x0, #0xc5b
    9601d75c:	940013c5 	bl	96022670 <tegrabl_printf>
	return e;
    9601d760:	52800540 	mov	w0, #0x2a                  	// #42
		pr_error("%s: failed to send/receive, err:%x\n", __func__, e);
    9601d764:	2a0003e2 	mov	w2, w0
    9601d768:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601d76c:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d770:	912e3c21 	add	x1, x1, #0xb8f
    9601d774:	91335400 	add	x0, x0, #0xcd5
    9601d778:	940013be 	bl	96022670 <tegrabl_printf>
	return TEGRABL_ERR_INVALID;
    9601d77c:	52800040 	mov	w0, #0x2                   	// #2
    9601d780:	17ffffcc 	b	9601d6b0 <tegrabl_ccplex_bpmp_xfer+0x34>
	p->flags = FLAG_DO_ACK;
    9601d784:	52800021 	mov	w1, #0x1                   	// #1
    9601d788:	29000419 	stp	w25, w1, [x0]
	memcpy(p->data, p_out, size_out);
    9601d78c:	2a1803e2 	mov	w2, w24
    9601d790:	aa1703e1 	mov	x1, x23
    9601d794:	91002000 	add	x0, x0, #0x8
    9601d798:	940031e3 	bl	96029f24 <memcpy>
	s_ipc_callbacks->signal_slave(channel_id);
    9601d79c:	f9447280 	ldr	x0, [x20, #2272]
    9601d7a0:	f9400801 	ldr	x1, [x0, #16]
    9601d7a4:	b948a260 	ldr	w0, [x19, #2208]
    9601d7a8:	d63f0020 	blr	x1
	NV_CHECK_ERROR_CLEANUP(
    9601d7ac:	f9447280 	ldr	x0, [x20, #2272]
    9601d7b0:	f9400c01 	ldr	x1, [x0, #24]
    9601d7b4:	b948a260 	ldr	w0, [x19, #2208]
    9601d7b8:	d63f0020 	blr	x1
    9601d7bc:	35fffd40 	cbnz	w0, 9601d764 <tegrabl_ccplex_bpmp_xfer+0xe8>
	p = s_ipc_callbacks->get_cur_in_frame(channel_id);
    9601d7c0:	f9447280 	ldr	x0, [x20, #2272]
    9601d7c4:	f9401401 	ldr	x1, [x0, #40]
    9601d7c8:	b948a260 	ldr	w0, [x19, #2208]
    9601d7cc:	d63f0020 	blr	x1
	if (!p) {
    9601d7d0:	b5000080 	cbnz	x0, 9601d7e0 <tegrabl_ccplex_bpmp_xfer+0x164>
		NV_CHECK_PRINT_ERR(TEGRABL_ERR_INVALID_STATE,
    9601d7d4:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601d7d8:	9132c000 	add	x0, x0, #0xcb0
    9601d7dc:	17ffffd5 	b	9601d730 <tegrabl_ccplex_bpmp_xfer+0xb4>
	if ((size_in) && (p_in != NULL)) {
    9601d7e0:	710002df 	cmp	w22, #0x0
    9601d7e4:	fa401aa4 	ccmp	x21, #0x0, #0x4, ne  // ne = any
    9601d7e8:	540000a0 	b.eq	9601d7fc <tegrabl_ccplex_bpmp_xfer+0x180>  // b.none
		memcpy(p_in, p->data, size_in);
    9601d7ec:	91002001 	add	x1, x0, #0x8
    9601d7f0:	2a1603e2 	mov	w2, w22
    9601d7f4:	aa1503e0 	mov	x0, x21
    9601d7f8:	940031cb 	bl	96029f24 <memcpy>
	NV_CHECK_ERROR_CLEANUP(s_ipc_callbacks->free_master(channel_id));
    9601d7fc:	f9447280 	ldr	x0, [x20, #2272]
    9601d800:	f9401001 	ldr	x1, [x0, #32]
    9601d804:	b948a260 	ldr	w0, [x19, #2208]
    9601d808:	d63f0020 	blr	x1
    9601d80c:	35fffac0 	cbnz	w0, 9601d764 <tegrabl_ccplex_bpmp_xfer+0xe8>
    9601d810:	17ffffa8 	b	9601d6b0 <tegrabl_ccplex_bpmp_xfer+0x34>

000000009601d814 <ivc_advance_tx>:
	return ch->w_count - ch->r_count;
}

static inline void ivc_advance_tx(struct ivc *ivc)
{
	ivc->tx_channel->w_count = ivc->tx_channel->w_count + 1;
    9601d814:	f9400402 	ldr	x2, [x0, #8]
    9601d818:	b9400041 	ldr	w1, [x2]
    9601d81c:	11000421 	add	w1, w1, #0x1
    9601d820:	b9000041 	str	w1, [x2]

	if (ivc->w_pos == ivc->nframes - 1)
    9601d824:	b9402002 	ldr	w2, [x0, #32]
    9601d828:	b9401001 	ldr	w1, [x0, #16]
    9601d82c:	51000442 	sub	w2, w2, #0x1
		ivc->w_pos = 0;
    9601d830:	6b02003f 	cmp	w1, w2
    9601d834:	1a8107e1 	csinc	w1, wzr, w1, eq  // eq = none
    9601d838:	b9001001 	str	w1, [x0, #16]
	else
		ivc->w_pos++;
}
    9601d83c:	d65f03c0 	ret

000000009601d840 <ivc_advance_rx>:

static inline void ivc_advance_rx(struct ivc *ivc)
{
	ivc->rx_channel->r_count = ivc->rx_channel->r_count + 1;
    9601d840:	f9400002 	ldr	x2, [x0]
    9601d844:	b9404041 	ldr	w1, [x2, #64]
    9601d848:	11000421 	add	w1, w1, #0x1
    9601d84c:	b9004041 	str	w1, [x2, #64]

	if (ivc->r_pos == ivc->nframes - 1)
    9601d850:	b9402002 	ldr	w2, [x0, #32]
    9601d854:	b9401401 	ldr	w1, [x0, #20]
    9601d858:	51000442 	sub	w2, w2, #0x1
		ivc->r_pos = 0;
    9601d85c:	6b02003f 	cmp	w1, w2
    9601d860:	1a8107e1 	csinc	w1, wzr, w1, eq  // eq = none
    9601d864:	b9001401 	str	w1, [x0, #20]
	else
		ivc->r_pos++;
}
    9601d868:	d65f03c0 	ret

000000009601d86c <ivc_printf>:
}
    9601d86c:	d65f03c0 	ret

000000009601d870 <ivc_cache_invalidate>:
}
    9601d870:	d65f03c0 	ret

000000009601d874 <ivc_check_read>:
	 * transmit counters until we've acknowledged its synchronization
	 * request, so no additional synchronization is required because an
	 * asynchronous transition of rx_channel->state to ivc_state_ack is not
	 * allowed.
	 */
	if (ivc->tx_channel->state != ivc_state_established) {
    9601d874:	f9400401 	ldr	x1, [x0, #8]
    9601d878:	b9400421 	ldr	w1, [x1, #4]
    9601d87c:	350003c1 	cbnz	w1, 9601d8f4 <ivc_check_read+0x80>
	* Avoid unnecessary invalidations when performing repeated accesses to
	* an IVC channel by checking the old queue pointers first.
	* Synchronization is only necessary when these pointers indicate empty
	* or full.
	*/
	if (!ivc_channel_empty(ivc, ivc->rx_channel)) {
    9601d880:	f9400002 	ldr	x2, [x0]
	if (w_count - r_count > ivc->nframes) {
    9601d884:	b9402005 	ldr	w5, [x0, #32]
	uint32_t w_count = ch->w_count;
    9601d888:	b9400043 	ldr	w3, [x2]
	uint32_t r_count = ch->r_count;
    9601d88c:	b9404041 	ldr	w1, [x2, #64]
	if (w_count - r_count > ivc->nframes) {
    9601d890:	4b010064 	sub	w4, w3, w1
    9601d894:	6b0400bf 	cmp	w5, w4
    9601d898:	54000063 	b.cc	9601d8a4 <ivc_check_read+0x30>  // b.lo, b.ul, b.last
	if (!ivc_channel_empty(ivc, ivc->rx_channel)) {
    9601d89c:	6b01007f 	cmp	w3, w1
    9601d8a0:	54000321 	b.ne	9601d904 <ivc_check_read+0x90>  // b.any
{
    9601d8a4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		return 0;
	}

	ivc_cache_invalidate((void *)&ivc->rx_channel->w_count,
    9601d8a8:	d2800081 	mov	x1, #0x4                   	// #4
{
    9601d8ac:	910003fd 	mov	x29, sp
    9601d8b0:	f9000bf3 	str	x19, [sp, #16]
    9601d8b4:	aa0003f3 	mov	x19, x0
	ivc_cache_invalidate((void *)&ivc->rx_channel->w_count,
    9601d8b8:	aa0203e0 	mov	x0, x2
    9601d8bc:	97ffffed 	bl	9601d870 <ivc_cache_invalidate>
			sizeof(ivc->rx_channel->w_count));
	return ivc_channel_empty(ivc, ivc->rx_channel) ? -ENOMEM : 0;
    9601d8c0:	f9400260 	ldr	x0, [x19]
	if (w_count - r_count > ivc->nframes) {
    9601d8c4:	b9402263 	ldr	w3, [x19, #32]
	uint32_t w_count = ch->w_count;
    9601d8c8:	b9400001 	ldr	w1, [x0]
	uint32_t r_count = ch->r_count;
    9601d8cc:	b9404000 	ldr	w0, [x0, #64]
	if (w_count - r_count > ivc->nframes) {
    9601d8d0:	4b000022 	sub	w2, w1, w0
    9601d8d4:	6b02007f 	cmp	w3, w2
    9601d8d8:	54000123 	b.cc	9601d8fc <ivc_check_read+0x88>  // b.lo, b.ul, b.last
	return ivc_channel_empty(ivc, ivc->rx_channel) ? -ENOMEM : 0;
    9601d8dc:	6b00003f 	cmp	w1, w0
    9601d8e0:	540000e0 	b.eq	9601d8fc <ivc_check_read+0x88>  // b.none
    9601d8e4:	52800000 	mov	w0, #0x0                   	// #0
}
    9601d8e8:	f9400bf3 	ldr	x19, [sp, #16]
    9601d8ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601d8f0:	d65f03c0 	ret
		return -ECONNRESET;
    9601d8f4:	12800ce0 	mov	w0, #0xffffff98            	// #-104
    9601d8f8:	d65f03c0 	ret
	return ivc_channel_empty(ivc, ivc->rx_channel) ? -ENOMEM : 0;
    9601d8fc:	12800160 	mov	w0, #0xfffffff4            	// #-12
    9601d900:	17fffffa 	b	9601d8e8 <ivc_check_read+0x74>
    9601d904:	52800000 	mov	w0, #0x0                   	// #0
}
    9601d908:	d65f03c0 	ret

000000009601d90c <ivc_check_write>:

static inline int ivc_check_write(struct ivc *ivc)
{
	if (ivc->tx_channel->state != ivc_state_established) {
    9601d90c:	f9400402 	ldr	x2, [x0, #8]
    9601d910:	b9400441 	ldr	w1, [x2, #4]
    9601d914:	35000321 	cbnz	w1, 9601d978 <ivc_check_write+0x6c>
	return ch->w_count - ch->r_count >= ivc->nframes;
    9601d918:	b9400041 	ldr	w1, [x2]
    9601d91c:	b9404043 	ldr	w3, [x2, #64]
    9601d920:	4b030021 	sub	w1, w1, w3
		return -ECONNRESET;
	}

	if (!ivc_channel_full(ivc, ivc->tx_channel)) {
    9601d924:	b9402003 	ldr	w3, [x0, #32]
    9601d928:	6b01007f 	cmp	w3, w1
    9601d92c:	540002e8 	b.hi	9601d988 <ivc_check_write+0x7c>  // b.pmore
{
    9601d930:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		return 0;
	}

	ivc_cache_invalidate((void *)&ivc->tx_channel->r_count,
    9601d934:	d2800081 	mov	x1, #0x4                   	// #4
{
    9601d938:	910003fd 	mov	x29, sp
    9601d93c:	f9000bf3 	str	x19, [sp, #16]
    9601d940:	aa0003f3 	mov	x19, x0
	ivc_cache_invalidate((void *)&ivc->tx_channel->r_count,
    9601d944:	91010040 	add	x0, x2, #0x40
    9601d948:	97ffffca 	bl	9601d870 <ivc_cache_invalidate>
			sizeof(ivc->tx_channel->r_count));
	return ivc_channel_full(ivc, ivc->tx_channel) ? -ENOMEM : 0;
    9601d94c:	f9400661 	ldr	x1, [x19, #8]
	return ch->w_count - ch->r_count >= ivc->nframes;
    9601d950:	b9400020 	ldr	w0, [x1]
    9601d954:	b9404021 	ldr	w1, [x1, #64]
    9601d958:	4b010000 	sub	w0, w0, w1
	return ivc_channel_full(ivc, ivc->tx_channel) ? -ENOMEM : 0;
    9601d95c:	b9402261 	ldr	w1, [x19, #32]
    9601d960:	6b00003f 	cmp	w1, w0
    9601d964:	540000e9 	b.ls	9601d980 <ivc_check_write+0x74>  // b.plast
    9601d968:	52800000 	mov	w0, #0x0                   	// #0
}
    9601d96c:	f9400bf3 	ldr	x19, [sp, #16]
    9601d970:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601d974:	d65f03c0 	ret
		return -ECONNRESET;
    9601d978:	12800ce0 	mov	w0, #0xffffff98            	// #-104
    9601d97c:	d65f03c0 	ret
	return ivc_channel_full(ivc, ivc->tx_channel) ? -ENOMEM : 0;
    9601d980:	12800160 	mov	w0, #0xfffffff4            	// #-12
    9601d984:	17fffffa 	b	9601d96c <ivc_check_write+0x60>
    9601d988:	52800000 	mov	w0, #0x0                   	// #0
}
    9601d98c:	d65f03c0 	ret

000000009601d990 <ivc_cache_flush>:
    9601d990:	d65f03c0 	ret

000000009601d994 <tegra_ivc_read_get_next_frame>:
	return (int)count;
}

/* directly peek at the next frame rx'ed */
void *tegra_ivc_read_get_next_frame(struct ivc *ivc)
{
    9601d994:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601d998:	910003fd 	mov	x29, sp
    9601d99c:	f9000bf3 	str	x19, [sp, #16]
    9601d9a0:	aa0003f3 	mov	x19, x0
	if (ivc_check_read(ivc)) {
    9601d9a4:	97ffffb4 	bl	9601d874 <ivc_check_read>
    9601d9a8:	35000260 	cbnz	w0, 9601d9f4 <tegra_ivc_read_get_next_frame+0x60>
#endif
}
static inline void ivc_rmb(void)
{
#ifdef IVC_AARCH64
	dmb(ld);
    9601d9ac:	d5033dbf 	dmb	ld
	 * data read.
	 */
	ivc_rmb();

	ivc_invalidate_frame(ivc, ivc->rx_channel, ivc->r_pos, 0,
			ivc->frame_size);
    9601d9b0:	b9402661 	ldr	w1, [x19, #36]
			ivc->frame_size * frame + offset), len);
    9601d9b4:	b9401660 	ldr	w0, [x19, #20]
	ivc_cache_invalidate((void *)((uintptr_t)(ch + 1) +
    9601d9b8:	f9400262 	ldr	x2, [x19]
    9601d9bc:	91020042 	add	x2, x2, #0x80
			ivc->frame_size * frame + offset), len);
    9601d9c0:	1b007c20 	mul	w0, w1, w0
	ivc_cache_invalidate((void *)((uintptr_t)(ch + 1) +
    9601d9c4:	2a0103e1 	mov	w1, w1
    9601d9c8:	8b000040 	add	x0, x2, x0
    9601d9cc:	97ffffa9 	bl	9601d870 <ivc_cache_invalidate>
	return (void *)((uintptr_t)(ch + 1) + ivc->frame_size * frame);
    9601d9d0:	b9402661 	ldr	w1, [x19, #36]
    9601d9d4:	b9401660 	ldr	w0, [x19, #20]
    9601d9d8:	1b017c00 	mul	w0, w0, w1
    9601d9dc:	f9400261 	ldr	x1, [x19]
    9601d9e0:	91020021 	add	x1, x1, #0x80
    9601d9e4:	8b010000 	add	x0, x0, x1
	return ivc_frame_pointer(ivc, ivc->rx_channel, ivc->r_pos);
}
    9601d9e8:	f9400bf3 	ldr	x19, [sp, #16]
    9601d9ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601d9f0:	d65f03c0 	ret
		return NULL;
    9601d9f4:	d2800000 	mov	x0, #0x0                   	// #0
    9601d9f8:	17fffffc 	b	9601d9e8 <tegra_ivc_read_get_next_frame+0x54>

000000009601d9fc <tegra_ivc_read_advance>:

int tegra_ivc_read_advance(struct ivc *ivc)
{
    9601d9fc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601da00:	910003fd 	mov	x29, sp
    9601da04:	a90153f3 	stp	x19, x20, [sp, #16]
    9601da08:	aa0003f3 	mov	x19, x0
	/*
	 * No read barriers or synchronization here: the caller is expected to
	 * have already observed the channel non-empty. This check is just to
	 * catch programming errors.
	 */
	int result = ivc_check_read(ivc);
    9601da0c:	97ffff9a 	bl	9601d874 <ivc_check_read>
    9601da10:	2a0003f4 	mov	w20, w0
	if (result) {
    9601da14:	350002c0 	cbnz	w0, 9601da6c <tegra_ivc_read_advance+0x70>
		return result;
	}

	ivc_advance_rx(ivc);
    9601da18:	aa1303e0 	mov	x0, x19
    9601da1c:	97ffff89 	bl	9601d840 <ivc_advance_rx>
	ivc_cache_flush((void *)&ivc->rx_channel->r_count,
    9601da20:	f9400260 	ldr	x0, [x19]
    9601da24:	d2800081 	mov	x1, #0x4                   	// #4
    9601da28:	91010000 	add	x0, x0, #0x40
    9601da2c:	97ffffd9 	bl	9601d990 <ivc_cache_flush>
	dmb(ish);
    9601da30:	d5033bbf 	dmb	ish
	/*
	 * Notify only upon transition from full to non-full.
	 * The available count can only asynchronously increase, so the
	 * worst possible side-effect will be a spurious notification.
	 */
	ivc_cache_invalidate((void *)&ivc->rx_channel->w_count,
    9601da34:	f9400260 	ldr	x0, [x19]
    9601da38:	d2800081 	mov	x1, #0x4                   	// #4
    9601da3c:	97ffff8d 	bl	9601d870 <ivc_cache_invalidate>
			sizeof(ivc->rx_channel->w_count));
	if (ivc_channel_avail_count(ivc, ivc->rx_channel) == ivc->nframes - 1)
    9601da40:	f9400261 	ldr	x1, [x19]
	return ch->w_count - ch->r_count;
    9601da44:	b9400020 	ldr	w0, [x1]
    9601da48:	b9404022 	ldr	w2, [x1, #64]
	if (ivc_channel_avail_count(ivc, ivc->rx_channel) == ivc->nframes - 1)
    9601da4c:	b9402261 	ldr	w1, [x19, #32]
	return ch->w_count - ch->r_count;
    9601da50:	4b020000 	sub	w0, w0, w2
	if (ivc_channel_avail_count(ivc, ivc->rx_channel) == ivc->nframes - 1)
    9601da54:	51000421 	sub	w1, w1, #0x1
    9601da58:	6b00003f 	cmp	w1, w0
    9601da5c:	54000081 	b.ne	9601da6c <tegra_ivc_read_advance+0x70>  // b.any
		ivc->notify(ivc);
    9601da60:	f9400e61 	ldr	x1, [x19, #24]
    9601da64:	aa1303e0 	mov	x0, x19
    9601da68:	d63f0020 	blr	x1

	return 0;
}
    9601da6c:	2a1403e0 	mov	w0, w20
    9601da70:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601da74:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601da78:	d65f03c0 	ret

000000009601da7c <tegra_ivc_write_get_next_frame>:
	return (int)count;
}

/* directly poke at the next frame to be tx'ed */
void *tegra_ivc_write_get_next_frame(struct ivc *ivc)
{
    9601da7c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601da80:	910003fd 	mov	x29, sp
    9601da84:	f9000bf3 	str	x19, [sp, #16]
    9601da88:	aa0003f3 	mov	x19, x0
	if (ivc_check_write(ivc)) {
    9601da8c:	97ffffa0 	bl	9601d90c <ivc_check_write>
    9601da90:	35000140 	cbnz	w0, 9601dab8 <tegra_ivc_write_get_next_frame+0x3c>
	return (void *)((uintptr_t)(ch + 1) + ivc->frame_size * frame);
    9601da94:	b9402661 	ldr	w1, [x19, #36]
    9601da98:	b9401260 	ldr	w0, [x19, #16]
    9601da9c:	1b017c00 	mul	w0, w0, w1
    9601daa0:	f9400661 	ldr	x1, [x19, #8]
    9601daa4:	91020021 	add	x1, x1, #0x80
    9601daa8:	8b010000 	add	x0, x0, x1
		return NULL;
	}

	return ivc_frame_pointer(ivc, ivc->tx_channel, ivc->w_pos);
}
    9601daac:	f9400bf3 	ldr	x19, [sp, #16]
    9601dab0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601dab4:	d65f03c0 	ret
		return NULL;
    9601dab8:	d2800000 	mov	x0, #0x0                   	// #0
    9601dabc:	17fffffc 	b	9601daac <tegra_ivc_write_get_next_frame+0x30>

000000009601dac0 <tegra_ivc_write_advance>:

/* advance the tx buffer */
int tegra_ivc_write_advance(struct ivc *ivc)
{
    9601dac0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9601dac4:	910003fd 	mov	x29, sp
    9601dac8:	a90153f3 	stp	x19, x20, [sp, #16]
    9601dacc:	aa0003f3 	mov	x19, x0
	int result = ivc_check_write(ivc);
    9601dad0:	97ffff8f 	bl	9601d90c <ivc_check_write>
    9601dad4:	2a0003f4 	mov	w20, w0
	if (result) {
    9601dad8:	350003a0 	cbnz	w0, 9601db4c <tegra_ivc_write_advance+0x8c>
		return result;
	}

	ivc_flush_frame(ivc, ivc->tx_channel, ivc->w_pos, 0, ivc->frame_size);
    9601dadc:	b9402661 	ldr	w1, [x19, #36]
			ivc->frame_size * frame + offset), len);
    9601dae0:	b9401260 	ldr	w0, [x19, #16]
	ivc_cache_flush((void *)((uintptr_t)(ch + 1) +
    9601dae4:	f9400662 	ldr	x2, [x19, #8]
    9601dae8:	91020042 	add	x2, x2, #0x80
			ivc->frame_size * frame + offset), len);
    9601daec:	1b007c20 	mul	w0, w1, w0
	ivc_cache_flush((void *)((uintptr_t)(ch + 1) +
    9601daf0:	2a0103e1 	mov	w1, w1
    9601daf4:	8b000040 	add	x0, x2, x0
    9601daf8:	97ffffa6 	bl	9601d990 <ivc_cache_flush>
	dmb();
#endif
}
static inline void ivc_wmb(void)
{
	dmb(st);
    9601dafc:	d5033ebf 	dmb	st
	/*
	 * Order any possible stores to the frame before update of w_pos.
	 */
	ivc_wmb();

	ivc_advance_tx(ivc);
    9601db00:	aa1303e0 	mov	x0, x19
    9601db04:	97ffff44 	bl	9601d814 <ivc_advance_tx>
	ivc_cache_flush((void *)&ivc->tx_channel->w_count,
    9601db08:	f9400660 	ldr	x0, [x19, #8]
    9601db0c:	d2800081 	mov	x1, #0x4                   	// #4
    9601db10:	97ffffa0 	bl	9601d990 <ivc_cache_flush>
	dmb(ish);
    9601db14:	d5033bbf 	dmb	ish
	/*
	 * Notify only upon transition from empty to non-empty.
	 * The available count can only asynchronously decrease, so the
	 * worst possible side-effect will be a spurious notification.
	 */
	ivc_cache_invalidate((void *)&ivc->tx_channel->r_count,
    9601db18:	f9400660 	ldr	x0, [x19, #8]
    9601db1c:	d2800081 	mov	x1, #0x4                   	// #4
    9601db20:	91010000 	add	x0, x0, #0x40
    9601db24:	97ffff53 	bl	9601d870 <ivc_cache_invalidate>
			sizeof(ivc->tx_channel->r_count));
	if (ivc_channel_avail_count(ivc, ivc->tx_channel) == 1)
    9601db28:	f9400661 	ldr	x1, [x19, #8]
	return ch->w_count - ch->r_count;
    9601db2c:	b9400020 	ldr	w0, [x1]
    9601db30:	b9404021 	ldr	w1, [x1, #64]
    9601db34:	4b010000 	sub	w0, w0, w1
	if (ivc_channel_avail_count(ivc, ivc->tx_channel) == 1)
    9601db38:	7100041f 	cmp	w0, #0x1
    9601db3c:	54000081 	b.ne	9601db4c <tegra_ivc_write_advance+0x8c>  // b.any
		ivc->notify(ivc);
    9601db40:	f9400e61 	ldr	x1, [x19, #24]
    9601db44:	aa1303e0 	mov	x0, x19
    9601db48:	d63f0020 	blr	x1

	return 0;
}
    9601db4c:	2a1403e0 	mov	w0, w20
    9601db50:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601db54:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601db58:	d65f03c0 	ret

000000009601db5c <tegra_ivc_channel_reset>:

void tegra_ivc_channel_reset(struct ivc *ivc)
{
    9601db5c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	ivc->tx_channel->state = ivc_state_sync;
    9601db60:	52800021 	mov	w1, #0x1                   	// #1
{
    9601db64:	910003fd 	mov	x29, sp
    9601db68:	f9000bf3 	str	x19, [sp, #16]
    9601db6c:	aa0003f3 	mov	x19, x0
	ivc->tx_channel->state = ivc_state_sync;
    9601db70:	f9400400 	ldr	x0, [x0, #8]
    9601db74:	b9000401 	str	w1, [x0, #4]
	ivc_cache_flush((void *)&ivc->tx_channel->w_count,
    9601db78:	d2800081 	mov	x1, #0x4                   	// #4
    9601db7c:	97ffff85 	bl	9601d990 <ivc_cache_flush>
			sizeof(ivc->tx_channel->w_count));
	ivc->notify(ivc);
    9601db80:	aa1303e0 	mov	x0, x19
    9601db84:	f9400e61 	ldr	x1, [x19, #24]
}
    9601db88:	f9400bf3 	ldr	x19, [sp, #16]
    9601db8c:	a8c27bfd 	ldp	x29, x30, [sp], #32
	ivc->notify(ivc);
    9601db90:	d61f0020 	br	x1

000000009601db94 <tegra_ivc_channel_notified>:
 *
 * ===============================================================
 */

int tegra_ivc_channel_notified(struct ivc *ivc)
{
    9601db94:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	uint32_t peer_state;

	/* Copy the receiver's state out of shared memory. */
	ivc_cache_invalidate((void *)&ivc->rx_channel->state,
    9601db98:	d2800081 	mov	x1, #0x4                   	// #4
{
    9601db9c:	910003fd 	mov	x29, sp
    9601dba0:	f9000bf3 	str	x19, [sp, #16]
    9601dba4:	aa0003f3 	mov	x19, x0
	ivc_cache_invalidate((void *)&ivc->rx_channel->state,
    9601dba8:	f9400000 	ldr	x0, [x0]
    9601dbac:	8b010000 	add	x0, x0, x1
    9601dbb0:	97ffff30 	bl	9601d870 <ivc_cache_invalidate>
			sizeof(ivc->rx_channel->state));
	peer_state = ivc->rx_channel->state;
    9601dbb4:	f9400260 	ldr	x0, [x19]
    9601dbb8:	b9400401 	ldr	w1, [x0, #4]

	if (peer_state == ivc_state_sync) {
    9601dbbc:	7100043f 	cmp	w1, #0x1
    9601dbc0:	54000341 	b.ne	9601dc28 <tegra_ivc_channel_notified+0x94>  // b.any
	dmb(ld);
    9601dbc4:	d5033dbf 	dmb	ld
		/*
		 * Reset tx_channel counters. The remote end is in the SYNC
		 * state and won't make progress until we change our state,
		 * so the counters are not in use at this time.
		 */
		ivc->tx_channel->w_count = 0;
    9601dbc8:	f9400660 	ldr	x0, [x19, #8]
		ivc->rx_channel->r_count = 0;

		ivc->w_pos = 0;
		ivc->r_pos = 0;

		ivc_cache_flush((void *)&ivc->rx_channel->r_count,
    9601dbcc:	d2800081 	mov	x1, #0x4                   	// #4
		ivc->tx_channel->w_count = 0;
    9601dbd0:	b900001f 	str	wzr, [x0]
		ivc->rx_channel->r_count = 0;
    9601dbd4:	f9400260 	ldr	x0, [x19]
    9601dbd8:	b8040c1f 	str	wzr, [x0, #64]!
		ivc->w_pos = 0;
    9601dbdc:	f9000a7f 	str	xzr, [x19, #16]
		ivc_cache_flush((void *)&ivc->rx_channel->r_count,
    9601dbe0:	97ffff6c 	bl	9601d990 <ivc_cache_flush>
	dmb(st);
    9601dbe4:	d5033ebf 	dmb	st

		/*
		 * Move to ACK state. We have just cleared our counters, so it
		 * is now safe for the remote end to start using these values.
		 */
		ivc->tx_channel->state = ivc_state_ack;
    9601dbe8:	f9400660 	ldr	x0, [x19, #8]
    9601dbec:	52800041 	mov	w1, #0x2                   	// #2
    9601dbf0:	b9000401 	str	w1, [x0, #4]
		 * cleared our counters, and we know that the remote end has
		 * cleared its counters, so it is safe to start writing/reading
		 * on this channel.
		 */
		ivc->tx_channel->state = ivc_state_established;
		ivc_cache_flush((void *)&ivc->tx_channel->w_count,
    9601dbf4:	d2800081 	mov	x1, #0x4                   	// #4
    9601dbf8:	97ffff66 	bl	9601d990 <ivc_cache_flush>
				sizeof(ivc->tx_channel->w_count));

		/*
		 * Notify remote end to observe state transition.
		 */
		ivc->notify(ivc);
    9601dbfc:	f9400e61 	ldr	x1, [x19, #24]
    9601dc00:	aa1303e0 	mov	x0, x19
    9601dc04:	d63f0020 	blr	x1
		 * the remote end to catch up with our current state. Refer
		 * to the diagram in "IVC State Transition Table" above.
		 */
	}

	return ivc->tx_channel->state == ivc_state_established ? 0 : -EAGAIN;
    9601dc08:	f9400660 	ldr	x0, [x19, #8]
}
    9601dc0c:	f9400bf3 	ldr	x19, [sp, #16]
    9601dc10:	a8c27bfd 	ldp	x29, x30, [sp], #32
	return ivc->tx_channel->state == ivc_state_established ? 0 : -EAGAIN;
    9601dc14:	b9400400 	ldr	w0, [x0, #4]
    9601dc18:	7100001f 	cmp	w0, #0x0
}
    9601dc1c:	12800140 	mov	w0, #0xfffffff5            	// #-11
    9601dc20:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    9601dc24:	d65f03c0 	ret
	} else if (ivc->tx_channel->state == ivc_state_sync &&
    9601dc28:	f9400660 	ldr	x0, [x19, #8]
    9601dc2c:	b9400402 	ldr	w2, [x0, #4]
    9601dc30:	7100045f 	cmp	w2, #0x1
    9601dc34:	540001e1 	b.ne	9601dc70 <tegra_ivc_channel_notified+0xdc>  // b.any
    9601dc38:	7100083f 	cmp	w1, #0x2
    9601dc3c:	540001a1 	b.ne	9601dc70 <tegra_ivc_channel_notified+0xdc>  // b.any
	dmb(ld);
    9601dc40:	d5033dbf 	dmb	ld
		ivc->tx_channel->w_count = 0;
    9601dc44:	f9400660 	ldr	x0, [x19, #8]
		ivc_cache_flush((void *)&ivc->rx_channel->r_count,
    9601dc48:	d2800081 	mov	x1, #0x4                   	// #4
		ivc->tx_channel->w_count = 0;
    9601dc4c:	b900001f 	str	wzr, [x0]
		ivc->rx_channel->r_count = 0;
    9601dc50:	f9400260 	ldr	x0, [x19]
    9601dc54:	b8040c1f 	str	wzr, [x0, #64]!
		ivc->w_pos = 0;
    9601dc58:	f9000a7f 	str	xzr, [x19, #16]
		ivc_cache_flush((void *)&ivc->rx_channel->r_count,
    9601dc5c:	97ffff4d 	bl	9601d990 <ivc_cache_flush>
	dmb(st);
    9601dc60:	d5033ebf 	dmb	st
		ivc->tx_channel->state = ivc_state_established;
    9601dc64:	f9400660 	ldr	x0, [x19, #8]
    9601dc68:	b900041f 	str	wzr, [x0, #4]
    9601dc6c:	17ffffe2 	b	9601dbf4 <tegra_ivc_channel_notified+0x60>
	} else if (ivc->tx_channel->state == ivc_state_ack) {
    9601dc70:	b9400400 	ldr	w0, [x0, #4]
    9601dc74:	7100081f 	cmp	w0, #0x2
    9601dc78:	54fffc81 	b.ne	9601dc08 <tegra_ivc_channel_notified+0x74>  // b.any
	dmb(ld);
    9601dc7c:	d5033dbf 	dmb	ld
    9601dc80:	17fffff9 	b	9601dc64 <tegra_ivc_channel_notified+0xd0>

000000009601dc84 <tegra_ivc_align>:
	return 0;
}

size_t tegra_ivc_align(size_t size)
{
	return (size + (IVC_ALIGN - 1)) & ~(IVC_ALIGN - 1);
    9601dc84:	9100fc00 	add	x0, x0, #0x3f
}
    9601dc88:	927ae400 	and	x0, x0, #0xffffffffffffffc0
    9601dc8c:	d65f03c0 	ret

000000009601dc90 <tegra_ivc_total_queue_size>:

unsigned tegra_ivc_total_queue_size(unsigned queue_size)
{
	if (queue_size & (IVC_ALIGN - 1)) {
    9601dc90:	f240141f 	tst	x0, #0x3f
    9601dc94:	54000160 	b.eq	9601dcc0 <tegra_ivc_total_queue_size+0x30>  // b.none
{
    9601dc98:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9601dc9c:	2a0003e1 	mov	w1, w0
		ivc_printf("queue_size (%u) must be %u-byte aligned\n",
    9601dca0:	52800802 	mov	w2, #0x40                  	// #64
    9601dca4:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
{
    9601dca8:	910003fd 	mov	x29, sp
		ivc_printf("queue_size (%u) must be %u-byte aligned\n",
    9601dcac:	913a1800 	add	x0, x0, #0xe86
    9601dcb0:	97fffeef 	bl	9601d86c <ivc_printf>
				queue_size, IVC_ALIGN);
		return 0;
    9601dcb4:	52800000 	mov	w0, #0x0                   	// #0
	}
	return queue_size + sizeof(struct ivc_channel_header);
}
    9601dcb8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9601dcbc:	d65f03c0 	ret
	return queue_size + sizeof(struct ivc_channel_header);
    9601dcc0:	11020000 	add	w0, w0, #0x80
}
    9601dcc4:	d65f03c0 	ret

000000009601dcc8 <tegra_ivc_init>:
}

int tegra_ivc_init(struct ivc *ivc, uintptr_t rx_base, uintptr_t tx_base,
		unsigned nframes, unsigned frame_size,
		void (*notify)(struct ivc *))
{
    9601dcc8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9601dccc:	aa0203e6 	mov	x6, x2
    9601dcd0:	2a0403e2 	mov	w2, w4
	if ((uint64_t)nframes * (uint64_t)frame_size >= 0x100000000ull) {
    9601dcd4:	9ba47c64 	umull	x4, w3, w4
{
    9601dcd8:	910003fd 	mov	x29, sp
    9601dcdc:	2a0303e8 	mov	w8, w3
	if ((uint64_t)nframes * (uint64_t)frame_size >= 0x100000000ull) {
    9601dce0:	b2407fe3 	mov	x3, #0xffffffff            	// #4294967295
    9601dce4:	eb03009f 	cmp	x4, x3
    9601dce8:	540000e9 	b.ls	9601dd04 <tegra_ivc_init+0x3c>  // b.plast
		ivc_printf("nframes * frame_size overflows\n");
    9601dcec:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601dcf0:	9137d800 	add	x0, x0, #0xdf6
    9601dcf4:	97fffede 	bl	9601d86c <ivc_printf>
			return -EINVAL;
    9601dcf8:	128002a0 	mov	w0, #0xffffffea            	// #-22
	ivc->nframes = nframes;
	ivc->w_pos = 0;
	ivc->r_pos = 0;

	return 0;
}
    9601dcfc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9601dd00:	d65f03c0 	ret
    9601dd04:	aa0103e7 	mov	x7, x1
	if (queue_base1 & (IVC_ALIGN - 1)) {
    9601dd08:	f240143f 	tst	x1, #0x3f
    9601dd0c:	540000a0 	b.eq	9601dd20 <tegra_ivc_init+0x58>  // b.none
		ivc_printf("ivc channel start not aligned: %lx\n", queue_base2);
    9601dd10:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601dd14:	91385800 	add	x0, x0, #0xe16
    9601dd18:	97fffed5 	bl	9601d86c <ivc_printf>
    9601dd1c:	17fffff7 	b	9601dcf8 <tegra_ivc_init+0x30>
	if (queue_base2 & (IVC_ALIGN - 1)) {
    9601dd20:	f24014df 	tst	x6, #0x3f
    9601dd24:	54000060 	b.eq	9601dd30 <tegra_ivc_init+0x68>  // b.none
		ivc_printf("ivc channel start not aligned: %lx\n", queue_base2);
    9601dd28:	aa0603e1 	mov	x1, x6
    9601dd2c:	17fffff9 	b	9601dd10 <tegra_ivc_init+0x48>
	if (frame_size & (IVC_ALIGN - 1)) {
    9601dd30:	f240145f 	tst	x2, #0x3f
    9601dd34:	540000c0 	b.eq	9601dd4c <tegra_ivc_init+0x84>  // b.none
		ivc_printf("frame size not adequately aligned: %u\n",
    9601dd38:	2a0203e1 	mov	w1, w2
    9601dd3c:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601dd40:	9138e800 	add	x0, x0, #0xe3a
    9601dd44:	97fffeca 	bl	9601d86c <ivc_printf>
    9601dd48:	17ffffec 	b	9601dcf8 <tegra_ivc_init+0x30>
    9601dd4c:	1b027d03 	mul	w3, w8, w2
	if (queue_base1 < queue_base2) {
    9601dd50:	eb06003f 	cmp	x1, x6
    9601dd54:	54000102 	b.cs	9601dd74 <tegra_ivc_init+0xac>  // b.hs, b.nlast
		if (queue_base1 + frame_size * nframes > queue_base2) {
    9601dd58:	8b040024 	add	x4, x1, x4
    9601dd5c:	eb0400df 	cmp	x6, x4
    9601dd60:	54000142 	b.cs	9601dd88 <tegra_ivc_init+0xc0>  // b.hs, b.nlast
			ivc_printf("queue regions overlap: %lx + %x, %x\n",
    9601dd64:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601dd68:	91398400 	add	x0, x0, #0xe61
    9601dd6c:	97fffec0 	bl	9601d86c <ivc_printf>
    9601dd70:	17ffffe2 	b	9601dcf8 <tegra_ivc_init+0x30>
		if (queue_base2 + frame_size * nframes > queue_base1) {
    9601dd74:	8b0400c4 	add	x4, x6, x4
    9601dd78:	eb04003f 	cmp	x1, x4
    9601dd7c:	54000062 	b.cs	9601dd88 <tegra_ivc_init+0xc0>  // b.hs, b.nlast
			ivc_printf("queue regions overlap: %lx + %x, %x\n",
    9601dd80:	aa0603e1 	mov	x1, x6
    9601dd84:	17fffff8 	b	9601dd64 <tegra_ivc_init+0x9c>
	if (frame_size > (1u << 31)) {
    9601dd88:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
    9601dd8c:	6b01005f 	cmp	w2, w1
    9601dd90:	540000c8 	b.hi	9601dda8 <tegra_ivc_init+0xe0>  // b.pmore
	ivc->tx_channel = (struct ivc_channel_header *)tx_base;
    9601dd94:	a9001807 	stp	x7, x6, [x0]
	ivc->notify = notify;
    9601dd98:	a901141f 	stp	xzr, x5, [x0, #16]
	ivc->frame_size = frame_size;
    9601dd9c:	29040808 	stp	w8, w2, [x0, #32]
	return 0;
    9601dda0:	52800000 	mov	w0, #0x0                   	// #0
    9601dda4:	17ffffd6 	b	9601dcfc <tegra_ivc_init+0x34>
		return -E2BIG;
    9601dda8:	128000c0 	mov	w0, #0xfffffff9            	// #-7
    9601ddac:	17ffffd4 	b	9601dcfc <tegra_ivc_init+0x34>

000000009601ddb0 <tegrabl_profiler_add_record>:
static struct profiler_record *local_profiler_data;
static uint32_t profiler_count;
static uint32_t profiler_limit;

void tegrabl_profiler_add_record(const char *str, uint64_t tstamp)
{
    9601ddb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	if (profiler_count >= profiler_limit) {
    9601ddb4:	d0000283 	adrp	x3, 9606f000 <eeproms+0x500>
{
    9601ddb8:	910003fd 	mov	x29, sp
    9601ddbc:	a90153f3 	stp	x19, x20, [sp, #16]
	if (profiler_count >= profiler_limit) {
    9601ddc0:	d0000293 	adrp	x19, 9606f000 <eeproms+0x500>
    9601ddc4:	b948f463 	ldr	w3, [x3, #2292]
    9601ddc8:	b948f262 	ldr	w2, [x19, #2288]
{
    9601ddcc:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (profiler_count >= profiler_limit) {
    9601ddd0:	6b03005f 	cmp	w2, w3
    9601ddd4:	540000e3 	b.cc	9601ddf0 <tegrabl_profiler_add_record+0x40>  // b.lo, b.ul, b.last
		pr_warn("profiler entries reached limit\n");
    9601ddd8:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601dddc:	913abc00 	add	x0, x0, #0xeaf
		strncpy(local_profiler_data[profiler_count].str, str,
				MAX_PROFILE_STRLEN);
		local_profiler_data[profiler_count].str[MAX_PROFILE_STRLEN - 1U] = '\0';
	}
	profiler_count++;
}
    9601dde0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601dde4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601dde8:	a8c37bfd 	ldp	x29, x30, [sp], #48
		pr_warn("Profiler not initialized\n");
    9601ddec:	14001221 	b	96022670 <tegrabl_printf>
	if ((local_profiler_data == NULL) || (profiler_page_base == NULL)) {
    9601ddf0:	d0000294 	adrp	x20, 9606f000 <eeproms+0x500>
    9601ddf4:	f9447695 	ldr	x21, [x20, #2280]
    9601ddf8:	b4000095 	cbz	x21, 9601de08 <tegrabl_profiler_add_record+0x58>
    9601ddfc:	d0000283 	adrp	x3, 9606f000 <eeproms+0x500>
    9601de00:	f9447c63 	ldr	x3, [x3, #2296]
    9601de04:	b5000083 	cbnz	x3, 9601de14 <tegrabl_profiler_add_record+0x64>
		pr_warn("Profiler not initialized\n");
    9601de08:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601de0c:	913b4800 	add	x0, x0, #0xed2
    9601de10:	17fffff4 	b	9601dde0 <tegrabl_profiler_add_record+0x30>
    9601de14:	d37a7c42 	ubfiz	x2, x2, #6, #32
    9601de18:	aa0003f6 	mov	x22, x0
    9601de1c:	8b0202b5 	add	x21, x21, x2
	if (tstamp != 0ULL) {
    9601de20:	b4000281 	cbz	x1, 9601de70 <tegrabl_profiler_add_record+0xc0>
		local_profiler_data[profiler_count].timestamp = tstamp;
    9601de24:	f9001ea1 	str	x1, [x21, #56]
	if (str != NULL) {
    9601de28:	b4000176 	cbz	x22, 9601de54 <tegrabl_profiler_add_record+0xa4>
		strncpy(local_profiler_data[profiler_count].str, str,
    9601de2c:	b948f263 	ldr	w3, [x19, #2288]
    9601de30:	aa1603e1 	mov	x1, x22
    9601de34:	f9447680 	ldr	x0, [x20, #2280]
    9601de38:	d28006e2 	mov	x2, #0x37                  	// #55
    9601de3c:	8b031800 	add	x0, x0, x3, lsl #6
    9601de40:	94003124 	bl	9602a2d0 <strncpy>
		local_profiler_data[profiler_count].str[MAX_PROFILE_STRLEN - 1U] = '\0';
    9601de44:	b948f260 	ldr	w0, [x19, #2288]
    9601de48:	f9447681 	ldr	x1, [x20, #2280]
    9601de4c:	8b001820 	add	x0, x1, x0, lsl #6
    9601de50:	3900d81f 	strb	wzr, [x0, #54]
	profiler_count++;
    9601de54:	b948f260 	ldr	w0, [x19, #2288]
}
    9601de58:	a9425bf5 	ldp	x21, x22, [sp, #32]
	profiler_count++;
    9601de5c:	11000400 	add	w0, w0, #0x1
    9601de60:	b908f260 	str	w0, [x19, #2288]
}
    9601de64:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601de68:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601de6c:	d65f03c0 	ret
								tegrabl_get_timestamp_us();
    9601de70:	94000783 	bl	9601fc7c <tegrabl_get_timestamp_us>
		local_profiler_data[profiler_count].timestamp =
    9601de74:	f9001ea0 	str	x0, [x21, #56]
    9601de78:	17ffffec 	b	9601de28 <tegrabl_profiler_add_record+0x78>

000000009601de7c <tegrabl_profiler_init>:
	return 0;
}

tegrabl_error_t tegrabl_profiler_init(uint64_t page_addr, uint32_t offset, uint32_t size)
{
	profiler_page_base = (void *)(uintptr_t)page_addr;
    9601de7c:	d0000283 	adrp	x3, 9606f000 <eeproms+0x500>
	local_profiler_data = (void *)(uintptr_t)(page_addr + offset);
    9601de80:	8b214001 	add	x1, x0, w1, uxtw
	profiler_count = 0;
	profiler_limit = size / sizeof(struct profiler_record);
    9601de84:	53067c42 	lsr	w2, w2, #6
	profiler_page_base = (void *)(uintptr_t)page_addr;
    9601de88:	f9047c60 	str	x0, [x3, #2296]
	local_profiler_data = (void *)(uintptr_t)(page_addr + offset);
    9601de8c:	d0000283 	adrp	x3, 9606f000 <eeproms+0x500>
    9601de90:	f9047461 	str	x1, [x3, #2280]
	profiler_count = 0;
    9601de94:	d0000283 	adrp	x3, 9606f000 <eeproms+0x500>
    9601de98:	b908f07f 	str	wzr, [x3, #2288]
	profiler_limit = size / sizeof(struct profiler_record);
    9601de9c:	d0000283 	adrp	x3, 9606f000 <eeproms+0x500>
    9601dea0:	b908f462 	str	w2, [x3, #2292]

	if ((local_profiler_data == NULL) || (profiler_page_base == NULL)) {
    9601dea4:	b4000041 	cbz	x1, 9601deac <tegrabl_profiler_init+0x30>
    9601dea8:	b5000120 	cbnz	x0, 9601decc <tegrabl_profiler_init+0x50>
{
    9601deac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		pr_error("invalid profiling data address\n");
    9601deb0:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601deb4:	913bbc00 	add	x0, x0, #0xeef
{
    9601deb8:	910003fd 	mov	x29, sp
		pr_error("invalid profiling data address\n");
    9601debc:	940011ed 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601dec0:	52800040 	mov	w0, #0x2                   	// #2
	}

	return TEGRABL_NO_ERROR;
    9601dec4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9601dec8:	d65f03c0 	ret
	return TEGRABL_NO_ERROR;
    9601decc:	52800000 	mov	w0, #0x0                   	// #0
    9601ded0:	d65f03c0 	ret

000000009601ded4 <tegrabl_psci_smc>:

#include <tegrabl_asm.h>

/* int tegrabl_psci_smc(u64 function_id, u64 arg0, u64 arg1, u64 arg2) */
FUNCTION(tegrabl_psci_smc)
	smc #0
    9601ded4:	d4000003 	smc	#0x0

000000009601ded8 <tegrabl_psci_sys_reset>:

/**
* @brief reset the board
*/
void tegrabl_psci_sys_reset(void)
{
    9601ded8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	tegrabl_psci_smc(TEGRABL_PSCI_0_2_SYSTEM_RESET, 0, 0, 0);
    9601dedc:	d2800120 	mov	x0, #0x9                   	// #9
    9601dee0:	d2800003 	mov	x3, #0x0                   	// #0
    9601dee4:	d2800002 	mov	x2, #0x0                   	// #0
{
    9601dee8:	910003fd 	mov	x29, sp
	tegrabl_psci_smc(TEGRABL_PSCI_0_2_SYSTEM_RESET, 0, 0, 0);
    9601deec:	d2800001 	mov	x1, #0x0                   	// #0
    9601def0:	f2b08000 	movk	x0, #0x8400, lsl #16
    9601def4:	97fffff8 	bl	9601ded4 <tegrabl_psci_smc>

000000009601def8 <tegrabl_psci_sys_off>:

/**
* @brief power-off the board
*/
void tegrabl_psci_sys_off(void)
{
    9601def8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	tegrabl_psci_smc(TEGRABL_PSCI_0_2_SYSTEM_OFF, 0, 0, 0);
    9601defc:	d2800100 	mov	x0, #0x8                   	// #8
    9601df00:	d2800003 	mov	x3, #0x0                   	// #0
    9601df04:	d2800002 	mov	x2, #0x0                   	// #0
{
    9601df08:	910003fd 	mov	x29, sp
	tegrabl_psci_smc(TEGRABL_PSCI_0_2_SYSTEM_OFF, 0, 0, 0);
    9601df0c:	d2800001 	mov	x1, #0x0                   	// #0
    9601df10:	f2b08000 	movk	x0, #0x8400, lsl #16
    9601df14:	97fffff0 	bl	9601ded4 <tegrabl_psci_smc>

000000009601df18 <tegrabl_storage_init_dev>:
tegrabl_error_t tegrabl_storage_init_dev(
						tegrabl_storage_type_t type, uint32_t instance,
						struct tegrabl_mb1bct_device_params *const dev_params,
						struct tegrabl_sd_platform_params *const sd_params,
						bool sdmmc_skip_init, bool ufs_reinit)
{
    9601df18:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	TEGRABL_UNUSED(sd_params);
#endif

	TEGRABL_UNUSED(ufs_reinit);

	switch (type) {
    9601df1c:	71001c1f 	cmp	w0, #0x7
{
    9601df20:	910003fd 	mov	x29, sp
    9601df24:	a90153f3 	stp	x19, x20, [sp, #16]
    9601df28:	f90013f5 	str	x21, [sp, #32]
	bool is_sd_present = 0;
    9601df2c:	3900ffbf 	strb	wzr, [x29, #63]
	switch (type) {
    9601df30:	540012a8 	b.hi	9601e184 <tegrabl_storage_init_dev+0x26c>  // b.pmore
    9601df34:	2a0103f4 	mov	w20, w1
    9601df38:	aa0303f5 	mov	x21, x3
    9601df3c:	f0000101 	adrp	x1, 96040000 <sdmmc_base_addr+0x9f4>
    9601df40:	913c5021 	add	x1, x1, #0xf14
    9601df44:	78605821 	ldrh	w1, [x1, w0, uxtw #1]
    9601df48:	10000063 	adr	x3, 9601df54 <tegrabl_storage_init_dev+0x3c>
    9601df4c:	8b21a861 	add	x1, x3, w1, sxth #2
    9601df50:	d61f0020 	br	x1

#if defined(CONFIG_ENABLE_EMMC)
	case TEGRABL_STORAGE_SDMMC_BOOT:
	case TEGRABL_STORAGE_SDMMC_USER:

		if (dev_params->emmc.clk_src == 0U) {
    9601df54:	b9402c40 	ldr	w0, [x2, #44]
    9601df58:	12001c84 	and	w4, w4, #0xff
    9601df5c:	35000260 	cbnz	w0, 9601dfa8 <tegrabl_storage_init_dev+0x90>
			/* fill the params */
			sdmmc_params.clk_src = TEGRABL_CLK_SRC_PLLP_OUT0;
    9601df60:	52800060 	mov	w0, #0x3                   	// #3
    9601df64:	b90043a0 	str	w0, [x29, #64]
			sdmmc_params.best_mode = TEGRABL_SDMMC_MODE_DDR52;
    9601df68:	d2800020 	mov	x0, #0x1                   	// #1
    9601df6c:	f2c00120 	movk	x0, #0x9, lsl #32
    9601df70:	f90027a0 	str	x0, [x29, #72]
			sdmmc_params.tap_value = 9;
    9601df74:	528000a0 	mov	w0, #0x5                   	// #5
		} else {
			/* Copy parameter from device param to qspi_flash parameters */
			sdmmc_params.clk_src = dev_params->emmc.clk_src;
			sdmmc_params.best_mode = dev_params->emmc.best_mode;
			sdmmc_params.tap_value = dev_params->emmc.tap_value;
			sdmmc_params.trim_value = dev_params->emmc.trim_value;
    9601df78:	b90053a0 	str	w0, [x29, #80]
		}
		sdmmc_params.is_skip_init = sdmmc_skip_init;
		err = sdmmc_bdev_open(instance, &sdmmc_params);
    9601df7c:	910103a1 	add	x1, x29, #0x40
		sdmmc_params.is_skip_init = sdmmc_skip_init;
    9601df80:	39017ba4 	strb	w4, [x29, #94]
		err = sdmmc_bdev_open(instance, &sdmmc_params);
    9601df84:	2a1403e0 	mov	w0, w20
    9601df88:	97ffdf08 	bl	96015ba8 <sdmmc_bdev_open>
    9601df8c:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601df90:	34000440 	cbz	w0, 9601e018 <tegrabl_storage_init_dev+0x100>
			pr_error("Error opening sdmmc-%d\n", instance);
    9601df94:	f0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601df98:	2a1403e1 	mov	w1, w20
    9601df9c:	913d0000 	add	x0, x0, #0xf40

#if defined(CONFIG_ENABLE_SATA)
	case TEGRABL_STORAGE_SATA:
		err = tegrabl_sata_bdev_open(instance, NULL, NULL);
		if (err != TEGRABL_NO_ERROR) {
			pr_error("Failed to open sata-%d\n", instance);
    9601dfa0:	940011b4 	bl	96022670 <tegrabl_printf>
    9601dfa4:	1400001d 	b	9601e018 <tegrabl_storage_init_dev+0x100>
			sdmmc_params.clk_src = dev_params->emmc.clk_src;
    9601dfa8:	b90043a0 	str	w0, [x29, #64]
			sdmmc_params.best_mode = dev_params->emmc.best_mode;
    9601dfac:	b9403440 	ldr	w0, [x2, #52]
    9601dfb0:	b9004ba0 	str	w0, [x29, #72]
			sdmmc_params.tap_value = dev_params->emmc.tap_value;
    9601dfb4:	b9403840 	ldr	w0, [x2, #56]
    9601dfb8:	b9004fa0 	str	w0, [x29, #76]
			sdmmc_params.trim_value = dev_params->emmc.trim_value;
    9601dfbc:	b9403c40 	ldr	w0, [x2, #60]
    9601dfc0:	17ffffee 	b	9601df78 <tegrabl_storage_init_dev+0x60>
    9601dfc4:	12001ca5 	and	w5, w5, #0xff
		ufs_params.max_hs_mode = UFS_NO_HS_GEAR;
    9601dfc8:	52808000 	mov	w0, #0x400                 	// #1024
    9601dfcc:	790083a0 	strh	w0, [x29, #64]
		ufs_params.max_pwm_mode = UFS_PWM_GEAR_4;
    9601dfd0:	52800040 	mov	w0, #0x2                   	// #2
    9601dfd4:	39010ba0 	strb	w0, [x29, #66]
		ufs_params.page_align_size = UFS_DEFAULT_PAGE_ALIGN_SIZE;
    9601dfd8:	52820000 	mov	w0, #0x1000                	// #4096
		err = tegrabl_ufs_bdev_open(ufs_reinit, &ufs_params);
    9601dfdc:	910103a1 	add	x1, x29, #0x40
		ufs_params.page_align_size = UFS_DEFAULT_PAGE_ALIGN_SIZE;
    9601dfe0:	b90047a0 	str	w0, [x29, #68]
		ufs_params.enable_hs_modes = false;
    9601dfe4:	390123bf 	strb	wzr, [x29, #72]
		err = tegrabl_ufs_bdev_open(ufs_reinit, &ufs_params);
    9601dfe8:	2a0503e0 	mov	w0, w5
		ufs_params.enable_fast_auto_mode = false;
    9601dfec:	390127bf 	strb	wzr, [x29, #73]
		ufs_params.enable_hs_rate_b = false;
    9601dff0:	39012bbf 	strb	wzr, [x29, #74]
		ufs_params.enable_hs_rate_a = false;
    9601dff4:	39012fbf 	strb	wzr, [x29, #75]
		ufs_params.ufs_init_done = false;
    9601dff8:	390133bf 	strb	wzr, [x29, #76]
		ufs_params.skip_hs_mode_switch = false;
    9601dffc:	390137bf 	strb	wzr, [x29, #77]
		err = tegrabl_ufs_bdev_open(ufs_reinit, &ufs_params);
    9601e000:	97ffebf3 	bl	96018fcc <tegrabl_ufs_bdev_open>
    9601e004:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601e008:	34000080 	cbz	w0, 9601e018 <tegrabl_storage_init_dev+0x100>
			pr_error("Error opening ufs\n");
    9601e00c:	d0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601e010:	913d6c00 	add	x0, x0, #0xf5b
			pr_error("Error opening qspi\n");
    9601e014:	94001197 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
		break;
	}

	return err;
}
    9601e018:	2a1303e0 	mov	w0, w19
    9601e01c:	f94013f5 	ldr	x21, [sp, #32]
    9601e020:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601e024:	a8c77bfd 	ldp	x29, x30, [sp], #112
    9601e028:	d65f03c0 	ret
		if (dev_params->qspi.clk_div == 0U) {
    9601e02c:	b9400840 	ldr	w0, [x2, #8]
    9601e030:	35000260 	cbnz	w0, 9601e07c <tegrabl_storage_init_dev+0x164>
			qflash_params.enable_ddr_read = true;
    9601e034:	52800020 	mov	w0, #0x1                   	// #1
    9601e038:	390153a0 	strb	w0, [x29, #84]
			qflash_params.clk_src = TEGRABL_CLK_SRC_CLK_M;
    9601e03c:	b20003e0 	mov	x0, #0x100000001           	// #4294967297
			qflash_params.clk_div = 1;
    9601e040:	a9047fa0 	stp	x0, xzr, [x29, #64]
			qflash_params.dma_type = DMA_GPC;
    9601e044:	d2c00020 	mov	x0, #0x100000000           	// #4294967296
			qflash_params.interface_freq = 0U;
    9601e048:	b90053bf 	str	wzr, [x29, #80]
			qflash_params.dma_type = DMA_GPC;
    9601e04c:	f9002fa0 	str	x0, [x29, #88]
			qflash_params.fifo_access_mode = QSPI_MODE_DMA;
    9601e050:	d2800100 	mov	x0, #0x8                   	// #8
    9601e054:	f90033a0 	str	x0, [x29, #96]
			qflash_params.trimmer1_val = 0;
    9601e058:	b9006bbf 	str	wzr, [x29, #104]
		err = tegrabl_qspi_flash_open(0, &qflash_params);
    9601e05c:	910103a1 	add	x1, x29, #0x40
    9601e060:	52800000 	mov	w0, #0x0                   	// #0
    9601e064:	97ffce2d 	bl	96011918 <tegrabl_qspi_flash_open>
    9601e068:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601e06c:	34fffd60 	cbz	w0, 9601e018 <tegrabl_storage_init_dev+0x100>
			pr_error("Error opening qspi\n");
    9601e070:	d0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601e074:	913dc400 	add	x0, x0, #0xf71
    9601e078:	17ffffe7 	b	9601e014 <tegrabl_storage_init_dev+0xfc>
			qflash_params.clk_src = dev_params->qspi.clk_src;
    9601e07c:	b9400441 	ldr	w1, [x2, #4]
			qflash_params.clk_div = dev_params->qspi.clk_div;
    9601e080:	290803a1 	stp	w1, w0, [x29, #64]
			qflash_params.max_bus_width = dev_params->qspi.width;
    9601e084:	b9400c40 	ldr	w0, [x2, #12]
    9601e088:	b90053a0 	str	w0, [x29, #80]
			qflash_params.enable_ddr_read = true;
    9601e08c:	52800020 	mov	w0, #0x1                   	// #1
    9601e090:	390153a0 	strb	w0, [x29, #84]
			qflash_params.dma_type = dev_params->qspi.dma_type;
    9601e094:	b9401040 	ldr	w0, [x2, #16]
    9601e098:	b9005ba0 	str	w0, [x29, #88]
			qflash_params.fifo_access_mode = dev_params->qspi.xfer_mode;
    9601e09c:	b9401440 	ldr	w0, [x2, #20]
    9601e0a0:	b9005fa0 	str	w0, [x29, #92]
			qflash_params.read_dummy_cycles = dev_params->qspi.read_dummy_cycles;
    9601e0a4:	b9401840 	ldr	w0, [x2, #24]
    9601e0a8:	b90063a0 	str	w0, [x29, #96]
			qflash_params.trimmer1_val = dev_params->qspi.trimmer_val1;
    9601e0ac:	b9401c40 	ldr	w0, [x2, #28]
    9601e0b0:	b90067a0 	str	w0, [x29, #100]
			qflash_params.trimmer2_val = dev_params->qspi.trimmer_val2;
    9601e0b4:	b9402040 	ldr	w0, [x2, #32]
			qflash_params.clk_src_freq = 0U;
    9601e0b8:	f90027bf 	str	xzr, [x29, #72]
			qflash_params.trimmer2_val = dev_params->qspi.trimmer_val2;
    9601e0bc:	b9006ba0 	str	w0, [x29, #104]
    9601e0c0:	17ffffe7 	b	9601e05c <tegrabl_storage_init_dev+0x144>
		err = tegrabl_sata_bdev_open(instance, NULL, NULL);
    9601e0c4:	d2800002 	mov	x2, #0x0                   	// #0
    9601e0c8:	d2800001 	mov	x1, #0x0                   	// #0
    9601e0cc:	2a1403e0 	mov	w0, w20
    9601e0d0:	97ffddcf 	bl	9601580c <tegrabl_sata_bdev_open>
    9601e0d4:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601e0d8:	34fffa00 	cbz	w0, 9601e018 <tegrabl_storage_init_dev+0x100>
			pr_error("Failed to open sata-%d\n", instance);
    9601e0dc:	d0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601e0e0:	2a1403e1 	mov	w1, w20
    9601e0e4:	913e2000 	add	x0, x0, #0xf88
    9601e0e8:	17ffffae 	b	9601dfa0 <tegrabl_storage_init_dev+0x88>
		if (sd_params == NULL) {
    9601e0ec:	b50000d5 	cbnz	x21, 9601e104 <tegrabl_storage_init_dev+0x1ec>
			pr_warn("SD param is NULL, missing SD card boot params.\n");
    9601e0f0:	d0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9601e0f4:	52800013 	mov	w19, #0x0                   	// #0
			pr_warn("SD param is NULL, missing SD card boot params.\n");
    9601e0f8:	913e8c00 	add	x0, x0, #0xfa3
    9601e0fc:	9400115d 	bl	96022670 <tegrabl_printf>
			break;
    9601e100:	17ffffc6 	b	9601e018 <tegrabl_storage_init_dev+0x100>
		gpio_framework_init();
    9601e104:	97ffbea9 	bl	9600dba8 <gpio_framework_init>
		err = tegrabl_gpio_driver_init();
    9601e108:	97ffbdf4 	bl	9600d8d8 <tegrabl_gpio_driver_init>
    9601e10c:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601e110:	34000080 	cbz	w0, 9601e120 <tegrabl_storage_init_dev+0x208>
			pr_error("GPIO driver init failed\n");
    9601e114:	f00000c0 	adrp	x0, 96039000 <__reloc_begin+0x25f0>
    9601e118:	91317400 	add	x0, x0, #0xc5d
    9601e11c:	17ffffbe 	b	9601e014 <tegrabl_storage_init_dev+0xfc>
			err = sd_bdev_is_card_present(&sd_params->cd_gpio, &is_sd_present);
    9601e120:	9100ffa1 	add	x1, x29, #0x3f
    9601e124:	910012a0 	add	x0, x21, #0x4
    9601e128:	97ffe89d 	bl	9601839c <sd_bdev_is_card_present>
    9601e12c:	2a0003f3 	mov	w19, w0
			if (err != TEGRABL_NO_ERROR) {
    9601e130:	340000a0 	cbz	w0, 9601e144 <tegrabl_storage_init_dev+0x22c>
				pr_warn("SD card detection error: %d.\n", err);
    9601e134:	2a0003e1 	mov	w1, w0
    9601e138:	d0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
    9601e13c:	913f5800 	add	x0, x0, #0xfd6
    9601e140:	17ffff98 	b	9601dfa0 <tegrabl_storage_init_dev+0x88>
			} else if(!is_sd_present) {
    9601e144:	3940ffa0 	ldrb	w0, [x29, #63]
    9601e148:	350000c0 	cbnz	w0, 9601e160 <tegrabl_storage_init_dev+0x248>
				pr_warn("No SD-card is present!\n");
    9601e14c:	d0000100 	adrp	x0, 96040000 <sdmmc_base_addr+0x9f4>
				err = TEGRABL_ERR_EMPTY;
    9601e150:	52800513 	mov	w19, #0x28                  	// #40
				pr_warn("No SD-card is present!\n");
    9601e154:	913fdc00 	add	x0, x0, #0xff7
    9601e158:	94001146 	bl	96022670 <tegrabl_printf>
    9601e15c:	17ffffaf 	b	9601e018 <tegrabl_storage_init_dev+0x100>
				err = sd_bdev_open(sd_params->sd_instance, sd_params);
    9601e160:	b94016a0 	ldr	w0, [x21, #20]
    9601e164:	aa1503e1 	mov	x1, x21
    9601e168:	97ffe88e 	bl	960183a0 <sd_bdev_open>
    9601e16c:	2a0003f3 	mov	w19, w0
				if (err != TEGRABL_NO_ERROR)
    9601e170:	34fff540 	cbz	w0, 9601e018 <tegrabl_storage_init_dev+0x100>
					pr_warn("Initialzing SD card failed: %d\n", err);
    9601e174:	2a0003e1 	mov	w1, w0
    9601e178:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e17c:	91004800 	add	x0, x0, #0x12
    9601e180:	17ffff88 	b	9601dfa0 <tegrabl_storage_init_dev+0x88>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601e184:	52800033 	mov	w19, #0x1                   	// #1
		pr_error("device: %u is not supported\n", type);
    9601e188:	2a0003e1 	mov	w1, w0
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9601e18c:	72acccd3 	movk	w19, #0x6666, lsl #16
		pr_error("device: %u is not supported\n", type);
    9601e190:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e194:	9100d400 	add	x0, x0, #0x35
    9601e198:	94001136 	bl	96022670 <tegrabl_printf>
	return err;
    9601e19c:	17ffff9f 	b	9601e018 <tegrabl_storage_init_dev+0x100>

000000009601e1a0 <tegrabl_storage_init_storage_devs>:
						const struct tegrabl_device *const storage_devs,
						struct tegrabl_mb1bct_device_params *const dev_params,
						tegrabl_storage_type_t boot_dev,
						bool sdmmc_skip_init,
						bool ufs_reinit)
{
    9601e1a0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	tegrabl_storage_type_t dev_type;
	uint32_t instance;
	uint8_t i;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((storage_devs == NULL) || (dev_params == NULL)) {
    9601e1a4:	f100001f 	cmp	x0, #0x0
    9601e1a8:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9601e1ac:	910003fd 	mov	x29, sp
    9601e1b0:	a90153f3 	stp	x19, x20, [sp, #16]
    9601e1b4:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601e1b8:	a90363f7 	stp	x23, x24, [sp, #48]
    9601e1bc:	a9046bf9 	stp	x25, x26, [sp, #64]
    9601e1c0:	f9002bfb 	str	x27, [sp, #80]
	if ((storage_devs == NULL) || (dev_params == NULL)) {
    9601e1c4:	54000501 	b.ne	9601e264 <tegrabl_storage_init_storage_devs+0xc4>  // b.any

		pr_error("Invalid storage devices or device params passed\n");
    9601e1c8:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e1cc:	91015400 	add	x0, x0, #0x55
    9601e1d0:	94001128 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9601e1d4:	52802040 	mov	w0, #0x102                 	// #258
    9601e1d8:	72acccc0 	movk	w0, #0x6666, lsl #16
		}
	}

fail:
	return err;
}
    9601e1dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601e1e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601e1e4:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601e1e8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601e1ec:	f9402bfb 	ldr	x27, [sp, #80]
    9601e1f0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9601e1f4:	d65f03c0 	ret
		dev_type = map_to_storage_type_from_mb1_bct_type[storage_devs[i].type];
    9601e1f8:	b860dab6 	ldr	w22, [x21, w0, sxtw #2]
		if (dev_type == boot_dev) {
    9601e1fc:	6b1802df 	cmp	w22, w24
    9601e200:	54000101 	b.ne	9601e220 <tegrabl_storage_init_storage_devs+0x80>  // b.any
    9601e204:	91000a73 	add	x19, x19, #0x2
		 (storage_devs[i].type != (uint8_t)TEGRABL_MB1BCT_NONE) &&
    9601e208:	38736a80 	ldrb	w0, [x20, x19]
	for (i = 0;
    9601e20c:	34000060 	cbz	w0, 9601e218 <tegrabl_storage_init_storage_devs+0x78>
		 (storage_devs[i].type != (uint8_t)TEGRABL_MB1BCT_NONE) &&
    9601e210:	f1002a7f 	cmp	x19, #0xa
    9601e214:	54ffff21 	b.ne	9601e1f8 <tegrabl_storage_init_storage_devs+0x58>  // b.any
fail:
    9601e218:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    9601e21c:	17fffff0 	b	9601e1dc <tegrabl_storage_init_storage_devs+0x3c>
		instance = storage_devs[i].instance;
    9601e220:	8b130280 	add	x0, x20, x19
		if ((dev_type == TEGRABL_STORAGE_UFS) &&
    9601e224:	71001edf 	cmp	w22, #0x7
		instance = storage_devs[i].instance;
    9601e228:	3940041b 	ldrb	w27, [x0, #1]
		if ((dev_type == TEGRABL_STORAGE_UFS) &&
    9601e22c:	54000140 	b.eq	9601e254 <tegrabl_storage_init_storage_devs+0xb4>  // b.none
		err = tegrabl_storage_init_dev(dev_type, instance, dev_params, NULL,
    9601e230:	2a1a03e5 	mov	w5, w26
    9601e234:	2a1903e4 	mov	w4, w25
    9601e238:	d2800003 	mov	x3, #0x0                   	// #0
    9601e23c:	aa1703e2 	mov	x2, x23
    9601e240:	2a1b03e1 	mov	w1, w27
    9601e244:	2a1603e0 	mov	w0, w22
    9601e248:	97ffff34 	bl	9601df18 <tegrabl_storage_init_dev>
		if (err != TEGRABL_NO_ERROR) {
    9601e24c:	34fffdc0 	cbz	w0, 9601e204 <tegrabl_storage_init_storage_devs+0x64>
    9601e250:	17ffffe3 	b	9601e1dc <tegrabl_storage_init_storage_devs+0x3c>
			(tegrabl_is_ufs_enable() == false)) {
    9601e254:	94000cfe 	bl	9602164c <tegrabl_is_ufs_enable>
		if ((dev_type == TEGRABL_STORAGE_UFS) &&
    9601e258:	72001c1f 	tst	w0, #0xff
    9601e25c:	54fffea1 	b.ne	9601e230 <tegrabl_storage_init_storage_devs+0x90>  // b.any
    9601e260:	17ffffe9 	b	9601e204 <tegrabl_storage_init_storage_devs+0x64>
		dev_type = map_to_storage_type_from_mb1_bct_type[storage_devs[i].type];
    9601e264:	d0000115 	adrp	x21, 96040000 <sdmmc_base_addr+0x9f4>
    9601e268:	aa0003f4 	mov	x20, x0
    9601e26c:	aa0103f7 	mov	x23, x1
    9601e270:	2a0203f8 	mov	w24, w2
    9601e274:	12001c79 	and	w25, w3, #0xff
    9601e278:	12001c9a 	and	w26, w4, #0xff
    9601e27c:	d2800013 	mov	x19, #0x0                   	// #0
    9601e280:	913c92b5 	add	x21, x21, #0xf24
    9601e284:	17ffffe1 	b	9601e208 <tegrabl_storage_init_storage_devs+0x68>

000000009601e288 <tegrabl_storage_is_storage_enabled>:
	uint8_t i;
	bool is_dev_found = false;
	tegrabl_storage_type_t s_dev_type;
	uint32_t s_instance = 0;

	if (storage_devs == NULL) {
    9601e288:	b50002a0 	cbnz	x0, 9601e2dc <tegrabl_storage_is_storage_enabled+0x54>
{
    9601e28c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		pr_error("Invalid storage devices passed\n");
    9601e290:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e294:	91022400 	add	x0, x0, #0x89
{
    9601e298:	910003fd 	mov	x29, sp
		pr_error("Invalid storage devices passed\n");
    9601e29c:	940010f5 	bl	96022670 <tegrabl_printf>
	bool is_dev_found = false;
    9601e2a0:	52800003 	mov	w3, #0x0                   	// #0
			break;
		}
	}
fail:
	return is_dev_found;
}
    9601e2a4:	2a0303e0 	mov	w0, w3
    9601e2a8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9601e2ac:	d65f03c0 	ret
		s_instance = storage_devs[i].instance;
    9601e2b0:	8b040003 	add	x3, x0, x4
		if ((dev_type == s_dev_type) && (instance == s_instance)) {
    9601e2b4:	b866d8a6 	ldr	w6, [x5, w6, sxtw #2]
    9601e2b8:	91000884 	add	x4, x4, #0x2
		s_instance = storage_devs[i].instance;
    9601e2bc:	39400463 	ldrb	w3, [x3, #1]
		if ((dev_type == s_dev_type) && (instance == s_instance)) {
    9601e2c0:	6b02007f 	cmp	w3, w2
    9601e2c4:	1a9f17e3 	cset	w3, eq  // eq = none
    9601e2c8:	6b0100df 	cmp	w6, w1
    9601e2cc:	1a9f0063 	csel	w3, w3, wzr, eq  // eq = none
    9601e2d0:	340000c3 	cbz	w3, 9601e2e8 <tegrabl_storage_is_storage_enabled+0x60>
}
    9601e2d4:	2a0303e0 	mov	w0, w3
    9601e2d8:	d65f03c0 	ret
		s_dev_type = map_to_storage_type_from_mb1_bct_type[storage_devs[i].type];
    9601e2dc:	d0000105 	adrp	x5, 96040000 <sdmmc_base_addr+0x9f4>
    9601e2e0:	913c90a5 	add	x5, x5, #0xf24
    9601e2e4:	d2800004 	mov	x4, #0x0                   	// #0
		(storage_devs[i].type != TEGRABL_MB1BCT_NONE) &&
    9601e2e8:	38646806 	ldrb	w6, [x0, x4]
	for (i = 0;
    9601e2ec:	34000066 	cbz	w6, 9601e2f8 <tegrabl_storage_is_storage_enabled+0x70>
		(storage_devs[i].type != TEGRABL_MB1BCT_NONE) &&
    9601e2f0:	f100289f 	cmp	x4, #0xa
    9601e2f4:	54fffde1 	b.ne	9601e2b0 <tegrabl_storage_is_storage_enabled+0x28>  // b.any
	bool is_dev_found = false;
    9601e2f8:	52800003 	mov	w3, #0x0                   	// #0
    9601e2fc:	17fffff6 	b	9601e2d4 <tegrabl_storage_is_storage_enabled+0x4c>

000000009601e300 <tegrabl_error_print>:

	return count;
}

void tegrabl_error_print(bool set_first_error, uint32_t level, tegrabl_error_t error, ...)
{
    9601e300:	a9a57bfd 	stp	x29, x30, [sp, #-432]!
    9601e304:	910003fd 	mov	x29, sp
    9601e308:	a90153f3 	stp	x19, x20, [sp, #16]
#else
	log_level = CONFIG_DEBUG_LOGLEVEL;
#endif

	module = TEGRABL_ERROR_MODULE(error);
	reason = TEGRABL_ERROR_REASON(error);
    9601e30c:	12001c54 	and	w20, w2, #0xff
{
    9601e310:	f90013f5 	str	x21, [sp, #32]

	if (reason >= TEGRABL_ERR_REASON_END) {
    9601e314:	7101169f 	cmp	w20, #0x45
{
    9601e318:	a91893a3 	stp	x3, x4, [x29, #392]
    9601e31c:	a9199ba5 	stp	x5, x6, [x29, #408]
    9601e320:	f900d7a7 	str	x7, [x29, #424]
    9601e324:	3d8043a0 	str	q0, [x29, #256]
    9601e328:	3d8047a1 	str	q1, [x29, #272]
    9601e32c:	3d804ba2 	str	q2, [x29, #288]
    9601e330:	3d804fa3 	str	q3, [x29, #304]
    9601e334:	3d8053a4 	str	q4, [x29, #320]
    9601e338:	3d8057a5 	str	q5, [x29, #336]
    9601e33c:	3d805ba6 	str	q6, [x29, #352]
    9601e340:	3d805fa7 	str	q7, [x29, #368]
	if (reason >= TEGRABL_ERR_REASON_END) {
    9601e344:	54000129 	b.ls	9601e368 <tegrabl_error_print+0x68>  // b.plast
		pr_error("Invalid reason 0x%02x\n", reason);
    9601e348:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e34c:	2a1403e1 	mov	w1, w20
    9601e350:	912dec00 	add	x0, x0, #0xb7b
		return;
	}

	if (module >= TEGRABL_ERR_MODULE_END) {
		pr_error("Invalid module 0x%02x\n", module);
    9601e354:	940010c7 	bl	96022670 <tegrabl_printf>
		ret = tegrabl_vprintf(err, args);
	}

	va_end(copy_args);
	va_end(args);
}
    9601e358:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601e35c:	f94013f5 	ldr	x21, [sp, #32]
    9601e360:	a8db7bfd 	ldp	x29, x30, [sp], #432
    9601e364:	d65f03c0 	ret
    9601e368:	2a0103f3 	mov	w19, w1
	module = TEGRABL_ERROR_MODULE(error);
    9601e36c:	d3505c41 	ubfx	x1, x2, #16, #8
	if (module >= TEGRABL_ERR_MODULE_END) {
    9601e370:	7102003f 	cmp	w1, #0x80
    9601e374:	54000089 	b.ls	9601e384 <tegrabl_error_print+0x84>  // b.plast
		pr_error("Invalid module 0x%02x\n", module);
    9601e378:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e37c:	912e5400 	add	x0, x0, #0xb95
    9601e380:	17fffff5 	b	9601e354 <tegrabl_error_print+0x54>
    9601e384:	12001c15 	and	w21, w0, #0xff
	va_start(args, error);
    9601e388:	9106c3a0 	add	x0, x29, #0x1b0
    9601e38c:	a90583a0 	stp	x0, x0, [x29, #88]
    9601e390:	910603a0 	add	x0, x29, #0x180
    9601e394:	f90037a0 	str	x0, [x29, #104]
    9601e398:	128004e0 	mov	w0, #0xffffffd8            	// #-40
    9601e39c:	b90073a0 	str	w0, [x29, #112]
    9601e3a0:	12800fe0 	mov	w0, #0xffffff80            	// #-128
    9601e3a4:	b90077a0 	str	w0, [x29, #116]
	va_copy(copy_args, args);
    9601e3a8:	a9458fa2 	ldp	x2, x3, [x29, #88]
    9601e3ac:	a9078fa2 	stp	x2, x3, [x29, #120]
    9601e3b0:	a9468fa2 	ldp	x2, x3, [x29, #104]
    9601e3b4:	a9088fa2 	stp	x2, x3, [x29, #136]
    9601e3b8:	51000662 	sub	w2, w19, #0x1
    9601e3bc:	7100105f 	cmp	w2, #0x4
    9601e3c0:	540008c8 	b.hi	9601e4d8 <tegrabl_error_print+0x1d8>  // b.pmore
    9601e3c4:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e3c8:	9102b000 	add	x0, x0, #0xac
    9601e3cc:	38624803 	ldrb	w3, [x0, w2, uxtw]
	ret = tegrabl_snprintf(err, sizeof(err), "%c> %s: ", level_char, module_strings[module]);
    9601e3d0:	2a0103e1 	mov	w1, w1
    9601e3d4:	90000160 	adrp	x0, 9604a000 <s_qspi_info+0x20>
    9601e3d8:	9109c000 	add	x0, x0, #0x270
    9601e3dc:	f0000102 	adrp	x2, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e3e0:	912ebc42 	add	x2, x2, #0xbaf
    9601e3e4:	f8617804 	ldr	x4, [x0, x1, lsl #3]
    9601e3e8:	d2800c81 	mov	x1, #0x64                  	// #100
    9601e3ec:	910263a0 	add	x0, x29, #0x98
    9601e3f0:	94001075 	bl	960225c4 <tegrabl_snprintf>
	count = pre_process_error_string(&err[ret], (sizeof(err) - (uint32_t)ret), reason, copy_args);
    9601e3f4:	910263a1 	add	x1, x29, #0x98
    9601e3f8:	b94093a4 	ldr	w4, [x29, #144]
    9601e3fc:	8b20c028 	add	x8, x1, w0, sxtw
	const char *err_str = error_reason_strings[reason];
    9601e400:	90000161 	adrp	x1, 9604a000 <s_qspi_info+0x20>
    9601e404:	91010021 	add	x1, x1, #0x40
	count = pre_process_error_string(&err[ret], (sizeof(err) - (uint32_t)ret), reason, copy_args);
    9601e408:	52800c86 	mov	w6, #0x64                  	// #100
    9601e40c:	a947afa2 	ldp	x2, x11, [x29, #120]
    9601e410:	4b0000c6 	sub	w6, w6, w0
	const char *err_str = error_reason_strings[reason];
    9601e414:	f8747829 	ldr	x9, [x1, x20, lsl #3]
	int32_t count = 0;
    9601e418:	52800003 	mov	w3, #0x0                   	// #0
	bool open_bracket = false;
    9601e41c:	52800007 	mov	w7, #0x0                   	// #0
	uint32_t index = 0;
    9601e420:	52800001 	mov	w1, #0x0                   	// #0
	while ((*err_str != '\0') && (index < err_size)) {
    9601e424:	39400125 	ldrb	w5, [x9]
    9601e428:	34000065 	cbz	w5, 9601e434 <tegrabl_error_print+0x134>
    9601e42c:	6b0100df 	cmp	w6, w1
    9601e430:	54000588 	b.hi	9601e4e0 <tegrabl_error_print+0x1e0>  // b.pmore
	err[MIN(index, (err_size - 1U))] = '\0';
    9601e434:	52800c62 	mov	w2, #0x63                  	// #99
    9601e438:	4b000040 	sub	w0, w2, w0
    9601e43c:	6b00003f 	cmp	w1, w0
	while (count > 0) {
    9601e440:	52800002 	mov	w2, #0x0                   	// #0
	err[MIN(index, (err_size - 1U))] = '\0';
    9601e444:	1a812000 	csel	w0, w0, w1, cs  // cs = hs, nlast
    9601e448:	b94073a1 	ldr	w1, [x29, #112]
	while (count > 0) {
    9601e44c:	52800004 	mov	w4, #0x0                   	// #0
	err[MIN(index, (err_size - 1U))] = '\0';
    9601e450:	3820691f 	strb	wzr, [x8, x0]
    9601e454:	f9402fa0 	ldr	x0, [x29, #88]
	while (count > 0) {
    9601e458:	35000963 	cbnz	w3, 9601e584 <tegrabl_error_print+0x284>
    9601e45c:	34000044 	cbz	w4, 9601e464 <tegrabl_error_print+0x164>
    9601e460:	b90073a1 	str	w1, [x29, #112]
    9601e464:	34000042 	cbz	w2, 9601e46c <tegrabl_error_print+0x16c>
    9601e468:	f9002fa0 	str	x0, [x29, #88]
	err[sizeof(err) - 1U] = '\0';
    9601e46c:	3903efbf 	strb	wzr, [x29, #251]
	if (set_first_error) {
    9601e470:	34000215 	cbz	w21, 9601e4b0 <tegrabl_error_print+0x1b0>
		if (first_error == NULL) {
    9601e474:	900002d5 	adrp	x21, 96076000 <free_dram_block+0x38e8>
    9601e478:	f94656a0 	ldr	x0, [x21, #3240]
    9601e47c:	b50001a0 	cbnz	x0, 9601e4b0 <tegrabl_error_print+0x1b0>
			tegrabl_vsnprintf(error_string, sizeof(error_string), err, args);
    9601e480:	a94587a0 	ldp	x0, x1, [x29, #88]
    9601e484:	a90307a0 	stp	x0, x1, [x29, #48]
    9601e488:	a94687a0 	ldp	x0, x1, [x29, #104]
    9601e48c:	b0000294 	adrp	x20, 9606f000 <eeproms+0x500>
    9601e490:	91240294 	add	x20, x20, #0x900
    9601e494:	a90407a0 	stp	x0, x1, [x29, #64]
    9601e498:	9100c3a3 	add	x3, x29, #0x30
    9601e49c:	910263a2 	add	x2, x29, #0x98
    9601e4a0:	d2802001 	mov	x1, #0x100                 	// #256
    9601e4a4:	aa1403e0 	mov	x0, x20
    9601e4a8:	94002ff6 	bl	9602a480 <tegrabl_vsnprintf>
			first_error = error_string;
    9601e4ac:	f90656b4 	str	x20, [x21, #3240]
	if (log_level >= level) {
    9601e4b0:	7100127f 	cmp	w19, #0x4
    9601e4b4:	54fff528 	b.hi	9601e358 <tegrabl_error_print+0x58>  // b.pmore
		ret = tegrabl_vprintf(err, args);
    9601e4b8:	a94587a0 	ldp	x0, x1, [x29, #88]
    9601e4bc:	a90307a0 	stp	x0, x1, [x29, #48]
    9601e4c0:	a94687a0 	ldp	x0, x1, [x29, #104]
    9601e4c4:	a90407a0 	stp	x0, x1, [x29, #64]
    9601e4c8:	9100c3a1 	add	x1, x29, #0x30
    9601e4cc:	910263a0 	add	x0, x29, #0x98
    9601e4d0:	9400108b 	bl	960226fc <tegrabl_vprintf>
    9601e4d4:	17ffffa1 	b	9601e358 <tegrabl_error_print+0x58>
	va_copy(copy_args, args);
    9601e4d8:	52800403 	mov	w3, #0x20                  	// #32
    9601e4dc:	17ffffbd 	b	9601e3d0 <tegrabl_error_print+0xd0>
		switch (*err_str) {
    9601e4e0:	7101ecbf 	cmp	w5, #0x7b
    9601e4e4:	54000100 	b.eq	9601e504 <tegrabl_error_print+0x204>  // b.none
    9601e4e8:	7101f4bf 	cmp	w5, #0x7d
    9601e4ec:	54000480 	b.eq	9601e57c <tegrabl_error_print+0x27c>  // b.none
			if (!open_bracket) {
    9601e4f0:	35000067 	cbnz	w7, 9601e4fc <tegrabl_error_print+0x1fc>
				err[index] = *err_str;
    9601e4f4:	38214905 	strb	w5, [x8, w1, uxtw]
				index++;
    9601e4f8:	11000421 	add	w1, w1, #0x1
		err_str++;
    9601e4fc:	91000529 	add	x9, x9, #0x1
    9601e500:	17ffffc9 	b	9601e424 <tegrabl_error_print+0x124>
			count++;
    9601e504:	11000463 	add	w3, w3, #0x1
			format = va_arg(args, char *);
    9601e508:	37f801e4 	tbnz	w4, #31, 9601e544 <tegrabl_error_print+0x244>
    9601e50c:	91003c47 	add	x7, x2, #0xf
    9601e510:	aa0203e5 	mov	x5, x2
    9601e514:	927df0e2 	and	x2, x7, #0xfffffffffffffff8
				err[index] = *format;
    9601e518:	8b21410d 	add	x13, x8, w1, uxtw
			format = va_arg(args, char *);
    9601e51c:	f94000ac 	ldr	x12, [x5]
    9601e520:	d2800005 	mov	x5, #0x0                   	// #0
			while ((*format != '\0') && (index < err_size)) {
    9601e524:	3865698a 	ldrb	w10, [x12, x5]
    9601e528:	0b050027 	add	w7, w1, w5
    9601e52c:	3400006a 	cbz	w10, 9601e538 <tegrabl_error_print+0x238>
    9601e530:	6b0700df 	cmp	w6, w7
    9601e534:	540001e8 	b.hi	9601e570 <tegrabl_error_print+0x270>  // b.pmore
    9601e538:	2a0703e1 	mov	w1, w7
			open_bracket = true;
    9601e53c:	52800027 	mov	w7, #0x1                   	// #1
    9601e540:	17ffffef 	b	9601e4fc <tegrabl_error_print+0x1fc>
			format = va_arg(args, char *);
    9601e544:	11002087 	add	w7, w4, #0x8
    9601e548:	710000ff 	cmp	w7, #0x0
    9601e54c:	540000cd 	b.le	9601e564 <tegrabl_error_print+0x264>
    9601e550:	91003c4a 	add	x10, x2, #0xf
    9601e554:	aa0203e5 	mov	x5, x2
    9601e558:	2a0703e4 	mov	w4, w7
    9601e55c:	927df142 	and	x2, x10, #0xfffffffffffffff8
    9601e560:	17ffffee 	b	9601e518 <tegrabl_error_print+0x218>
    9601e564:	8b24c165 	add	x5, x11, w4, sxtw
    9601e568:	2a0703e4 	mov	w4, w7
    9601e56c:	17ffffeb 	b	9601e518 <tegrabl_error_print+0x218>
				err[index] = *format;
    9601e570:	382569aa 	strb	w10, [x13, x5]
    9601e574:	910004a5 	add	x5, x5, #0x1
    9601e578:	17ffffeb 	b	9601e524 <tegrabl_error_print+0x224>
			open_bracket = false;
    9601e57c:	52800007 	mov	w7, #0x0                   	// #0
    9601e580:	17ffffdf 	b	9601e4fc <tegrabl_error_print+0x1fc>
		va_arg(args, char *);
    9601e584:	37f800c1 	tbnz	w1, #31, 9601e59c <tegrabl_error_print+0x29c>
    9601e588:	91003c00 	add	x0, x0, #0xf
    9601e58c:	52800022 	mov	w2, #0x1                   	// #1
    9601e590:	927df000 	and	x0, x0, #0xfffffffffffffff8
		count--;
    9601e594:	51000463 	sub	w3, w3, #0x1
    9601e598:	17ffffb0 	b	9601e458 <tegrabl_error_print+0x158>
		va_arg(args, char *);
    9601e59c:	11002021 	add	w1, w1, #0x8
    9601e5a0:	7100003f 	cmp	w1, #0x0
    9601e5a4:	5400008d 	b.le	9601e5b4 <tegrabl_error_print+0x2b4>
    9601e5a8:	91003c00 	add	x0, x0, #0xf
    9601e5ac:	52800022 	mov	w2, #0x1                   	// #1
    9601e5b0:	927df000 	and	x0, x0, #0xfffffffffffffff8
    9601e5b4:	52800024 	mov	w4, #0x1                   	// #1
    9601e5b8:	17fffff7 	b	9601e594 <tegrabl_error_print+0x294>

000000009601e5bc <tegrabl_error_print_error>:
	tegrabl_err_module_t top_module;
	tegrabl_err_module_t lowest_module;
	uint32_t aux_info;
	tegrabl_error_t reason;

	lowest_module = TEGRABL_ERROR_MODULE(error);
    9601e5bc:	d3505c01 	ubfx	x1, x0, #16, #8
	aux_info = TEGRABL_ERROR_AUX_INFO(error);
	top_module = (uint8_t)TEGRABL_ERROR_HIGHEST_MODULE(error);
    9601e5c0:	53187c02 	lsr	w2, w0, #24
	reason = TEGRABL_ERROR_REASON(error);

	if (lowest_module >= TEGRABL_ERR_MODULE_END) {
		lowest_module = TEGRABL_ERR_NO_MODULE;
    9601e5c4:	7102043f 	cmp	w1, #0x81

	if (top_module >= TEGRABL_ERR_MODULE_END) {
		top_module = TEGRABL_ERR_NO_MODULE;
	}

	pr_error("Top caller module: %s, error module: %s, reason: 0x%02x, aux_info: 0x%02x\n",
    9601e5c8:	90000165 	adrp	x5, 9604a000 <s_qspi_info+0x20>
		lowest_module = TEGRABL_ERR_NO_MODULE;
    9601e5cc:	1a9f3021 	csel	w1, w1, wzr, cc  // cc = lo, ul, last
		top_module = TEGRABL_ERR_NO_MODULE;
    9601e5d0:	7102045f 	cmp	w2, #0x81
	pr_error("Top caller module: %s, error module: %s, reason: 0x%02x, aux_info: 0x%02x\n",
    9601e5d4:	9109c0a5 	add	x5, x5, #0x270
    9601e5d8:	1a9f3046 	csel	w6, w2, wzr, cc  // cc = lo, ul, last
    9601e5dc:	2a0103e1 	mov	w1, w1
    9601e5e0:	d3483c04 	ubfx	x4, x0, #8, #8
    9601e5e4:	12001c03 	and	w3, w0, #0xff
    9601e5e8:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e5ec:	912ee000 	add	x0, x0, #0xbb8
    9601e5f0:	f86178a2 	ldr	x2, [x5, x1, lsl #3]
    9601e5f4:	f86678a1 	ldr	x1, [x5, x6, lsl #3]
    9601e5f8:	1400101e 	b	96022670 <tegrabl_printf>

000000009601e5fc <tegrabl_copy_fuse_bytes>:
{
	uint32_t regdata;
	uint32_t i;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((nbytes == 0U) || (regaddress == 0U) || (pbyte == NULL)) {
    9601e5fc:	b4000201 	cbz	x1, 9601e63c <tegrabl_copy_fuse_bytes+0x40>
    9601e600:	d2800003 	mov	x3, #0x0                   	// #0
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		return err;
	}
	regdata = 0;
    9601e604:	52800004 	mov	w4, #0x0                   	// #0
	for (i = 0; i < nbytes; i++) {
		if ((i & 3U) == 0U) {
			regdata = NV_FUSE_READ(regaddress);
    9601e608:	d2a07045 	mov	x5, #0x3820000             	// #58851328
		if ((i & 3U) == 0U) {
    9601e60c:	f240047f 	tst	x3, #0x3
    9601e610:	54000081 	b.ne	9601e620 <tegrabl_copy_fuse_bytes+0x24>  // b.any
			regdata = NV_FUSE_READ(regaddress);
    9601e614:	2a0003e4 	mov	w4, w0
			regaddress += 4U;
    9601e618:	11001000 	add	w0, w0, #0x4
			regdata = NV_FUSE_READ(regaddress);
    9601e61c:	b8656884 	ldr	w4, [x4, x5]
		}
		pbyte[i] = (uint8_t)(regdata & 0xFFUL);
    9601e620:	38236824 	strb	w4, [x1, x3]
    9601e624:	91000463 	add	x3, x3, #0x1
		regdata >>= 8;
    9601e628:	53087c84 	lsr	w4, w4, #8
	for (i = 0; i < nbytes; i++) {
    9601e62c:	6b03005f 	cmp	w2, w3
    9601e630:	54fffee8 	b.hi	9601e60c <tegrabl_copy_fuse_bytes+0x10>  // b.pmore
    9601e634:	52800000 	mov	w0, #0x0                   	// #0
	}
	return err;
}
    9601e638:	d65f03c0 	ret
		return err;
    9601e63c:	52800040 	mov	w0, #0x2                   	// #2
    9601e640:	72a52520 	movk	w0, #0x2929, lsl #16
    9601e644:	17fffffd 	b	9601e638 <tegrabl_copy_fuse_bytes+0x3c>

000000009601e648 <tegrabl_fuse_program_mirroring>:
	data = PMC_IMPL_READ(PMC_IMPL_FUSE_CONTROL_0);
    9601e648:	d2802002 	mov	x2, #0x100                 	// #256
{
    9601e64c:	12001c00 	and	w0, w0, #0xff
	data = PMC_IMPL_READ(PMC_IMPL_FUSE_CONTROL_0);
    9601e650:	f2a186c2 	movk	x2, #0xc36, lsl #16
    9601e654:	b9400041 	ldr	w1, [x2]
	data = NV_FLD_SET_DRF_NUM(PMC_IMPL, FUSE_CONTROL, ENABLE_REDIRECTION,
    9601e658:	121f7821 	and	w1, w1, #0xfffffffe
    9601e65c:	2a010000 	orr	w0, w0, w1
	PMC_IMPL_WRITE(PMC_IMPL_FUSE_CONTROL_0, data);
    9601e660:	b9000040 	str	w0, [x2]
}
    9601e664:	d65f03c0 	ret

000000009601e668 <tegrabl_pmc_fuse_control_ps18_latch_set>:
{
    9601e668:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_mdelay(1);
    9601e66c:	d2800020 	mov	x0, #0x1                   	// #1
{
    9601e670:	910003fd 	mov	x29, sp
    9601e674:	a90153f3 	stp	x19, x20, [sp, #16]
	data = PMC_IMPL_READ(PMC_IMPL_FUSE_CONTROL_0);
    9601e678:	d2802014 	mov	x20, #0x100                 	// #256
    9601e67c:	f2a186d4 	movk	x20, #0xc36, lsl #16
    9601e680:	b9400293 	ldr	w19, [x20]
	data = NV_FLD_SET_DRF_NUM(PMC_IMPL, FUSE_CONTROL, PS18_LATCH_CLEAR,
    9601e684:	12167a73 	and	w19, w19, #0xfffffdff
	PMC_IMPL_WRITE(PMC_IMPL_FUSE_CONTROL_0, data);
    9601e688:	b9000293 	str	w19, [x20]
	data = NV_FLD_SET_DRF_NUM(PMC_IMPL, FUSE_CONTROL, PS18_LATCH_SET,
    9601e68c:	32180273 	orr	w19, w19, #0x100
	tegrabl_mdelay(1);
    9601e690:	940005a2 	bl	9601fd18 <tegrabl_mdelay>
	PMC_IMPL_WRITE(PMC_IMPL_FUSE_CONTROL_0, data);
    9601e694:	b9000293 	str	w19, [x20]
}
    9601e698:	a94153f3 	ldp	x19, x20, [sp, #16]
	tegrabl_mdelay(1);
    9601e69c:	d2800020 	mov	x0, #0x1                   	// #1
}
    9601e6a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_mdelay(1);
    9601e6a4:	1400059d 	b	9601fd18 <tegrabl_mdelay>

000000009601e6a8 <tegrabl_pmc_fuse_control_ps18_latch_clear>:
{
    9601e6a8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_mdelay(1);
    9601e6ac:	d2800020 	mov	x0, #0x1                   	// #1
{
    9601e6b0:	910003fd 	mov	x29, sp
    9601e6b4:	a90153f3 	stp	x19, x20, [sp, #16]
	data = PMC_IMPL_READ(PMC_IMPL_FUSE_CONTROL_0);
    9601e6b8:	d2802014 	mov	x20, #0x100                 	// #256
    9601e6bc:	f2a186d4 	movk	x20, #0xc36, lsl #16
    9601e6c0:	b9400293 	ldr	w19, [x20]
	data = NV_FLD_SET_DRF_NUM(PMC_IMPL, FUSE_CONTROL, PS18_LATCH_SET,
    9601e6c4:	12177a73 	and	w19, w19, #0xfffffeff
	PMC_IMPL_WRITE(PMC_IMPL_FUSE_CONTROL_0, data);
    9601e6c8:	b9000293 	str	w19, [x20]
	data = NV_FLD_SET_DRF_NUM(PMC_IMPL, FUSE_CONTROL, PS18_LATCH_CLEAR,
    9601e6cc:	32170273 	orr	w19, w19, #0x200
	tegrabl_mdelay(1);
    9601e6d0:	94000592 	bl	9601fd18 <tegrabl_mdelay>
	PMC_IMPL_WRITE(PMC_IMPL_FUSE_CONTROL_0, data);
    9601e6d4:	b9000293 	str	w19, [x20]
}
    9601e6d8:	a94153f3 	ldp	x19, x20, [sp, #16]
	tegrabl_mdelay(1);
    9601e6dc:	d2800020 	mov	x0, #0x1                   	// #1
}
    9601e6e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_mdelay(1);
    9601e6e4:	1400058d 	b	9601fd18 <tegrabl_mdelay>

000000009601e6e8 <tegrabl_fuse_ignore_dev_sel_straps>:
	val = NV_FUSE_READ(FUSE_RESERVED_SW_0);
    9601e6e8:	d2803800 	mov	x0, #0x1c0                 	// #448
    9601e6ec:	f2a07040 	movk	x0, #0x382, lsl #16
    9601e6f0:	b9400000 	ldr	w0, [x0]
}
    9601e6f4:	d3430c00 	ubfx	x0, x0, #3, #1
    9601e6f8:	d65f03c0 	ret

000000009601e6fc <tegrabl_fuse_get_security_info>:
{
    9601e6fc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	original_visibility = tegrabl_set_fuse_reg_visibility(true);
    9601e700:	52800020 	mov	w0, #0x1                   	// #1
{
    9601e704:	910003fd 	mov	x29, sp
    9601e708:	f9000bf3 	str	x19, [sp, #16]
	original_visibility = tegrabl_set_fuse_reg_visibility(true);
    9601e70c:	940004db 	bl	9601fa78 <tegrabl_set_fuse_reg_visibility>
	val =  NV_FUSE_READ(FUSE_BOOT_SECURITY_INFO_0);
    9601e710:	d2804d01 	mov	x1, #0x268                 	// #616
    9601e714:	f2a07041 	movk	x1, #0x382, lsl #16
    9601e718:	b9400033 	ldr	w19, [x1]
	(void)tegrabl_set_fuse_reg_visibility(original_visibility);
    9601e71c:	940004d7 	bl	9601fa78 <tegrabl_set_fuse_reg_visibility>
}
    9601e720:	2a1303e0 	mov	w0, w19
    9601e724:	f9400bf3 	ldr	x19, [sp, #16]
    9601e728:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601e72c:	d65f03c0 	ret

000000009601e730 <fuse_is_nv_production_mode>:
	if ((NV_FUSE_READ(FUSE_PRODUCTION_MODE_0)) != 0U) {
    9601e730:	d2802000 	mov	x0, #0x100                 	// #256
    9601e734:	f2a07040 	movk	x0, #0x382, lsl #16
    9601e738:	b9400000 	ldr	w0, [x0]
    9601e73c:	7100001f 	cmp	w0, #0x0
}
    9601e740:	1a9f07e0 	cset	w0, ne  // ne = any
    9601e744:	d65f03c0 	ret

000000009601e748 <tegrabl_fuse_query_size>:
	if (size == NULL) {
    9601e748:	b4000401 	cbz	x1, 9601e7c8 <tegrabl_fuse_query_size+0x80>
	switch (type) {
    9601e74c:	7100e01f 	cmp	w0, #0x38
    9601e750:	54000228 	b.hi	9601e794 <tegrabl_fuse_query_size+0x4c>  // b.pmore
    9601e754:	f0000102 	adrp	x2, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e758:	91302042 	add	x2, x2, #0xc08
    9601e75c:	38604840 	ldrb	w0, [x2, w0, uxtw]
    9601e760:	10000062 	adr	x2, 9601e76c <tegrabl_fuse_query_size+0x24>
    9601e764:	8b208840 	add	x0, x2, w0, sxtb #2
    9601e768:	d61f0000 	br	x0
		*size = sizeof(uint32_t);
    9601e76c:	52800080 	mov	w0, #0x4                   	// #4
		*size = ECID_SIZE_BYTES;
    9601e770:	b9000020 	str	w0, [x1]
	return TEGRABL_NO_ERROR;
    9601e774:	52800000 	mov	w0, #0x0                   	// #0
    9601e778:	d65f03c0 	ret
		*size = ECID_SIZE_BYTES;
    9601e77c:	52800200 	mov	w0, #0x10                  	// #16
    9601e780:	17fffffc 	b	9601e770 <tegrabl_fuse_query_size+0x28>
		*size = PUBKEY_SIZE_BYTES;
    9601e784:	52800400 	mov	w0, #0x20                  	// #32
    9601e788:	17fffffa 	b	9601e770 <tegrabl_fuse_query_size+0x28>
		*size = ODMID_SIZE_BYTES;
    9601e78c:	52800100 	mov	w0, #0x8                   	// #8
    9601e790:	17fffff8 	b	9601e770 <tegrabl_fuse_query_size+0x28>
{
    9601e794:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		pr_error("Unknown fuse type size requested\n");
    9601e798:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e79c:	91336000 	add	x0, x0, #0xcd8
{
    9601e7a0:	910003fd 	mov	x29, sp
    9601e7a4:	f9000bf3 	str	x19, [sp, #16]
    9601e7a8:	aa0103f3 	mov	x19, x1
		pr_error("Unknown fuse type size requested\n");
    9601e7ac:	94000fb1 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9601e7b0:	528001a0 	mov	w0, #0xd                   	// #13
		*size = 0;
    9601e7b4:	b900027f 	str	wzr, [x19]
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9601e7b8:	72a52520 	movk	w0, #0x2929, lsl #16
}
    9601e7bc:	f9400bf3 	ldr	x19, [sp, #16]
    9601e7c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601e7c4:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601e7c8:	52800060 	mov	w0, #0x3                   	// #3
    9601e7cc:	72a52520 	movk	w0, #0x2929, lsl #16
}
    9601e7d0:	d65f03c0 	ret

000000009601e7d4 <tegrabl_fuse_read>:
 *
 * @return TEGRABL_NO_ERROR if operation is successful.
 */
tegrabl_error_t tegrabl_fuse_read(
	fuse_type_t type, uint32_t *buffer, uint32_t size)
{
    9601e7d4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9601e7d8:	910003fd 	mov	x29, sp
    9601e7dc:	a90153f3 	stp	x19, x20, [sp, #16]
    9601e7e0:	aa0103f3 	mov	x19, x1
    9601e7e4:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601e7e8:	2a0003f6 	mov	w22, w0
    9601e7ec:	2a0203f5 	mov	w21, w2
	uint32_t temp_size = 0;
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t reg_data = 0;
	(void)tegrabl_set_fuse_reg_visibility(true);
    9601e7f0:	52800020 	mov	w0, #0x1                   	// #1
	uint32_t temp_size = 0;
    9601e7f4:	b9003fbf 	str	wzr, [x29, #60]
	(void)tegrabl_set_fuse_reg_visibility(true);
    9601e7f8:	940004a0 	bl	9601fa78 <tegrabl_set_fuse_reg_visibility>
	if (buffer == NULL) {
    9601e7fc:	b5000093 	cbnz	x19, 9601e80c <tegrabl_fuse_read+0x38>
		pr_debug("Null pointer passed to read the fuse\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601e800:	52800054 	mov	w20, #0x2                   	// #2
	case FUSE_CCPLEX_DFD_ACCESS_DISABLE:
		*buffer = NV_FUSE_READ(FUSE_DENVER_DFD_ACCESS_DISABLE_0);
		break;
	default:
		pr_debug("Unkown fuse type read requested\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9601e804:	72a52534 	movk	w20, #0x2929, lsl #16
    9601e808:	1400004e 	b	9601e940 <tegrabl_fuse_read+0x16c>
	if (size > 0U) {
    9601e80c:	34ffffb5 	cbz	w21, 9601e800 <tegrabl_fuse_read+0x2c>
		err = tegrabl_fuse_query_size(type, &temp_size);
    9601e810:	9100f3a1 	add	x1, x29, #0x3c
    9601e814:	2a1603e0 	mov	w0, w22
    9601e818:	97ffffcc 	bl	9601e748 <tegrabl_fuse_query_size>
    9601e81c:	2a0003f4 	mov	w20, w0
		if (err != 0) {
    9601e820:	35000900 	cbnz	w0, 9601e940 <tegrabl_fuse_read+0x16c>
		if (temp_size < size) {
    9601e824:	b9403fa0 	ldr	w0, [x29, #60]
    9601e828:	6b15001f 	cmp	w0, w21
    9601e82c:	54fffea3 	b.cc	9601e800 <tegrabl_fuse_read+0x2c>  // b.lo, b.ul, b.last
	switch (type) {
    9601e830:	7100e2df 	cmp	w22, #0x38
    9601e834:	54001a08 	b.hi	9601eb74 <tegrabl_fuse_read+0x3a0>  // b.pmore
    9601e838:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e83c:	91311000 	add	x0, x0, #0xc44
    9601e840:	78765800 	ldrh	w0, [x0, w22, uxtw #1]
    9601e844:	10000061 	adr	x1, 9601e850 <tegrabl_fuse_read+0x7c>
    9601e848:	8b20a820 	add	x0, x1, w0, sxth #2
    9601e84c:	d61f0000 	br	x0
	if (tegrabl_fuse_ignore_dev_sel_straps()) {
    9601e850:	97ffffa6 	bl	9601e6e8 <tegrabl_fuse_ignore_dev_sel_straps>
    9601e854:	72001c1f 	tst	w0, #0xff
    9601e858:	54fffd40 	b.eq	9601e800 <tegrabl_fuse_read+0x2c>  // b.none
		*buffer = (NV_FUSE_READ(FUSE_RESERVED_SW_0) >>
    9601e85c:	d2803800 	mov	x0, #0x1c0                 	// #448
    9601e860:	f2a07040 	movk	x0, #0x382, lsl #16
    9601e864:	b9400000 	ldr	w0, [x0]
				FUSE_RESERVED_BOOT_DEVICE_SHIFT) &
    9601e868:	12000800 	and	w0, w0, #0x7
    9601e86c:	14000006 	b	9601e884 <tegrabl_fuse_read+0xb0>
	val = tegrabl_fuse_get_security_info();
    9601e870:	97ffffa3 	bl	9601e6fc <tegrabl_fuse_get_security_info>
	return secure_mode[val];
    9601e874:	92400800 	and	x0, x0, #0x7
		*buffer = fuse_get_boot_security_info();
    9601e878:	f0000101 	adrp	x1, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e87c:	9132e021 	add	x1, x1, #0xcb8
    9601e880:	b8607820 	ldr	w0, [x1, x0, lsl #2]
    9601e884:	b9000260 	str	w0, [x19]
fail:
	if (err != 0U) {
		pr_error("Error = %d in tegrabl_fuse_read\n", err);
	}
	return err;
}
    9601e888:	2a1403e0 	mov	w0, w20
    9601e88c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601e890:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601e894:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9601e898:	d65f03c0 	ret
		if (ECID_SIZE_BYTES != size) {
    9601e89c:	710042bf 	cmp	w21, #0x10
    9601e8a0:	540016e1 	b.ne	9601eb7c <tegrabl_fuse_read+0x3a8>  // b.any
	original_visibility = tegrabl_set_fuse_reg_visibility(true);
    9601e8a4:	52800020 	mov	w0, #0x1                   	// #1
    9601e8a8:	94000474 	bl	9601fa78 <tegrabl_set_fuse_reg_visibility>
	reg = NV_FUSE_READ(FUSE_OPT_VENDOR_CODE_0);
    9601e8ac:	d2804001 	mov	x1, #0x200                 	// #512
	reg = NV_FUSE_READ(FUSE_OPT_OPS_RESERVED_0);
    9601e8b0:	d2804403 	mov	x3, #0x220                 	// #544
	reg = NV_FUSE_READ(FUSE_OPT_VENDOR_CODE_0);
    9601e8b4:	f2a07041 	movk	x1, #0x382, lsl #16
	reg = NV_FUSE_READ(FUSE_OPT_Y_COORDINATE_0);
    9601e8b8:	91006021 	add	x1, x1, #0x18
	reg = NV_FUSE_READ(FUSE_OPT_OPS_RESERVED_0);
    9601e8bc:	f2a07043 	movk	x3, #0x382, lsl #16
	reg = NV_FUSE_READ(FUSE_OPT_VENDOR_CODE_0);
    9601e8c0:	b85e8025 	ldur	w5, [x1, #-24]
	reg = NV_FUSE_READ(FUSE_OPT_FAB_CODE_0);
    9601e8c4:	b85ec026 	ldur	w6, [x1, #-20]
	lot0 = NV_FUSE_READ(FUSE_OPT_LOT_CODE_0_0);
    9601e8c8:	b85f0028 	ldur	w8, [x1, #-16]
	reg = NV_FUSE_READ(FUSE_OPT_LOT_CODE_1_0);
    9601e8cc:	b85f4022 	ldur	w2, [x1, #-12]
	reg = NV_FUSE_READ(FUSE_OPT_WAFER_ID_0);
    9601e8d0:	b85f8024 	ldur	w4, [x1, #-8]
	reg = NV_FUSE_READ(FUSE_OPT_X_COORDINATE_0);
    9601e8d4:	b85fc027 	ldur	w7, [x1, #-4]
	lot1 = reg & FUSE_OPT_LOT_CODE_1_0_READ_MASK;
    9601e8d8:	12006c42 	and	w2, w2, #0xfffffff
	reg = NV_FUSE_READ(FUSE_OPT_Y_COORDINATE_0);
    9601e8dc:	b9400021 	ldr	w1, [x1]
	reg |= (wafer & ECID_ECID0_0_WAFER_MASK) << ECID_ECID0_0_WAFER_RANGE;
    9601e8e0:	53081484 	ubfiz	w4, w4, #24, #6
	reg = NV_FUSE_READ(FUSE_OPT_OPS_RESERVED_0);
    9601e8e4:	b9400063 	ldr	w3, [x3]
	reg |= (x & ECID_ECID0_0_X_MASK) << ECID_ECID0_0_X_RANGE;
    9601e8e8:	531120e7 	ubfiz	w7, w7, #15, #9
    9601e8ec:	2a027884 	orr	w4, w4, w2, lsl #30
	reg |= (y & ECID_ECID0_0_Y_MASK) << ECID_ECID0_0_Y_RANGE;
    9601e8f0:	531a2021 	ubfiz	w1, w1, #6, #9
	rsvd1 = reg & FUSE_OPT_OPS_RESERVED_0_READ_MASK;
    9601e8f4:	12001463 	and	w3, w3, #0x3f
    9601e8f8:	2a070021 	orr	w1, w1, w7
    9601e8fc:	2a040021 	orr	w1, w1, w4
	reg |= (lot1 & ECID_ECID0_0_LOT1_MASK) << ECID_ECID0_0_LOT1_RANGE;
    9601e900:	2a010061 	orr	w1, w3, w1
	serial_no[0] = reg;
    9601e904:	b9000261 	str	w1, [x19]
	reg |= (lot0 & ECID_ECID1_0_LOT0_MASK) << ECID_ECID1_0_LOT0_RANGE;
    9601e908:	53061501 	lsl	w1, w8, #26
    9601e90c:	2a420822 	orr	w2, w1, w2, lsr #2
	reg |= (fab & ECID_ECID2_0_FAB_MASK) << ECID_ECID2_0_FAB_RANGE;
    9601e910:	138818c1 	extr	w1, w6, w8, #6
	serial_no[2] = reg;
    9601e914:	29008662 	stp	w2, w1, [x19, #4]
	vendor = reg & FUSE_OPT_VENDOR_CODE_0_READ_MASK;
    9601e918:	12000ca1 	and	w1, w5, #0xf
	serial_no[3] = reg;
    9601e91c:	b9000e61 	str	w1, [x19, #12]
	(void)tegrabl_set_fuse_reg_visibility(original_visibility);
    9601e920:	94000456 	bl	9601fa78 <tegrabl_set_fuse_reg_visibility>
    9601e924:	17ffffd9 	b	9601e888 <tegrabl_fuse_read+0xb4>
	return tegrabl_copy_fuse_bytes(FUSE_PUBLIC_KEY0_0,
    9601e928:	aa1303e1 	mov	x1, x19
    9601e92c:	52800402 	mov	w2, #0x20                  	// #32
    9601e930:	52802c80 	mov	w0, #0x164                 	// #356
	return tegrabl_copy_fuse_bytes(FUSE_KEK00_0,
    9601e934:	97ffff32 	bl	9601e5fc <tegrabl_copy_fuse_bytes>
    9601e938:	2a0003f4 	mov	w20, w0
	if (err != 0U) {
    9601e93c:	34fffa60 	cbz	w0, 9601e888 <tegrabl_fuse_read+0xb4>
		pr_error("Error = %d in tegrabl_fuse_read\n", err);
    9601e940:	2a1403e1 	mov	w1, w20
    9601e944:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601e948:	91347000 	add	x0, x0, #0xd1c
    9601e94c:	94000f49 	bl	96022670 <tegrabl_printf>
	return err;
    9601e950:	17ffffce 	b	9601e888 <tegrabl_fuse_read+0xb4>
	return tegrabl_copy_fuse_bytes(FUSE_PRIVATE_KEY0_0,
    9601e954:	52800202 	mov	w2, #0x10                  	// #16
    9601e958:	aa1303e1 	mov	x1, x19
    9601e95c:	52803480 	mov	w0, #0x1a4                 	// #420
    9601e960:	17fffff5 	b	9601e934 <tegrabl_fuse_read+0x160>
	return tegrabl_copy_fuse_bytes(FUSE_KEK00_0,
    9601e964:	52800402 	mov	w2, #0x20                  	// #32
    9601e968:	aa1303e1 	mov	x1, x19
    9601e96c:	52807800 	mov	w0, #0x3c0                 	// #960
    9601e970:	17fffff1 	b	9601e934 <tegrabl_fuse_read+0x160>
	return tegrabl_copy_fuse_bytes(FUSE_KEK00_0,
    9601e974:	52800202 	mov	w2, #0x10                  	// #16
    9601e978:	17fffffc 	b	9601e968 <tegrabl_fuse_read+0x194>
	return tegrabl_copy_fuse_bytes(FUSE_KEK10_0,
    9601e97c:	52800202 	mov	w2, #0x10                  	// #16
    9601e980:	aa1303e1 	mov	x1, x19
    9601e984:	52807a00 	mov	w0, #0x3d0                 	// #976
    9601e988:	17ffffeb 	b	9601e934 <tegrabl_fuse_read+0x160>
	return tegrabl_copy_fuse_bytes(FUSE_KEK20_0,
    9601e98c:	52800202 	mov	w2, #0x10                  	// #16
    9601e990:	aa1303e1 	mov	x1, x19
    9601e994:	52807c00 	mov	w0, #0x3e0                 	// #992
    9601e998:	17ffffe7 	b	9601e934 <tegrabl_fuse_read+0x160>
		reg_data = NV_FUSE_READ(FUSE_SKU_INFO_0);
    9601e99c:	d2802200 	mov	x0, #0x110                 	// #272
    9601e9a0:	f2a07040 	movk	x0, #0x382, lsl #16
    9601e9a4:	b9400000 	ldr	w0, [x0]
		*buffer = reg_data & (uint32_t)FUSE_SKU_INFO_0_READ_MASK;
    9601e9a8:	12001c00 	and	w0, w0, #0xff
    9601e9ac:	17ffffb6 	b	9601e884 <tegrabl_fuse_read+0xb0>
		*buffer = NV_FUSE_READ(FUSE_CPU_SPEEDO_0_CALIB_0);
    9601e9b0:	d2802280 	mov	x0, #0x114                 	// #276
		*buffer = NV_FUSE_READ(FUSE_DENVER_DFD_ACCESS_DISABLE_0);
    9601e9b4:	f2a07040 	movk	x0, #0x382, lsl #16
    9601e9b8:	b9400000 	ldr	w0, [x0]
    9601e9bc:	17ffffb2 	b	9601e884 <tegrabl_fuse_read+0xb0>
		*buffer = NV_FUSE_READ(FUSE_CPU_SPEEDO_1_CALIB_0);
    9601e9c0:	d2802580 	mov	x0, #0x12c                 	// #300
    9601e9c4:	17fffffc 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_CPU_SPEEDO_2_CALIB_0);
    9601e9c8:	d2802600 	mov	x0, #0x130                 	// #304
    9601e9cc:	17fffffa 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_MCLUSTER_WITH_RAM_HT_IDDQ_CALIB_0);
    9601e9d0:	d2802300 	mov	x0, #0x118                 	// #280
    9601e9d4:	17fffff8 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_SOC_SPEEDO_0_CALIB_0);
    9601e9d8:	d2802680 	mov	x0, #0x134                 	// #308
    9601e9dc:	17fffff6 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_SOC_SPEEDO_1_CALIB_0);
    9601e9e0:	d2802700 	mov	x0, #0x138                 	// #312
    9601e9e4:	17fffff4 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_SOC_SPEEDO_2_CALIB_0);
    9601e9e8:	d2802780 	mov	x0, #0x13c                 	// #316
    9601e9ec:	17fffff2 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_SOC_HT_IDDQ_CALIB_0);
    9601e9f0:	d2802800 	mov	x0, #0x140                 	// #320
    9601e9f4:	17fffff0 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		reg = NV_FUSE_READ(FUSE_OPT_ARM_CORE_DISABLE_0);
    9601e9f8:	d2806f00 	mov	x0, #0x378                 	// #888
		disabled_core_mask = NV_FLD_SET_DRF_NUM(CPU, CORE_ABSENT_MASK,
    9601e9fc:	12801e61 	mov	w1, #0xffffff0c            	// #-244
		reg = NV_FUSE_READ(FUSE_OPT_ARM_CORE_DISABLE_0);
    9601ea00:	f2a07040 	movk	x0, #0x382, lsl #16
    9601ea04:	b9400015 	ldr	w21, [x0]
		reg = NV_FUSE_READ(FUSE_OPT_DENVER_CORE_DISABLE_0);
    9601ea08:	d2806280 	mov	x0, #0x314                 	// #788
    9601ea0c:	f2a07040 	movk	x0, #0x382, lsl #16
    9601ea10:	b9400000 	ldr	w0, [x0]
		disabled_core_mask = NV_FLD_SET_DRF_NUM(CPU, CORE_ABSENT_MASK,
    9601ea14:	531c0eb5 	ubfiz	w21, w21, #4, #4
		reg = NV_DRF_VAL(FUSE, OPT_DENVER_CORE_DISABLE,
    9601ea18:	12000400 	and	w0, w0, #0x3
		disabled_core_mask = NV_FLD_SET_DRF_NUM(CPU, CORE_ABSENT_MASK,
    9601ea1c:	2a010000 	orr	w0, w0, w1
    9601ea20:	2a0002b5 	orr	w21, w21, w0
		pr_info("disabled_core_mask: 0x%08x\n", disabled_core_mask);
    9601ea24:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601ea28:	2a1503e1 	mov	w1, w21
    9601ea2c:	9133f400 	add	x0, x0, #0xcfd
	*enabled_cores = ~disabled_core_mask;
    9601ea30:	2a3503f5 	mvn	w21, w21
		pr_info("disabled_core_mask: 0x%08x\n", disabled_core_mask);
    9601ea34:	94000f0f 	bl	96022670 <tegrabl_printf>
	*enabled_cores = ~disabled_core_mask;
    9601ea38:	b9000275 	str	w21, [x19]
    9601ea3c:	17ffff93 	b	9601e888 <tegrabl_fuse_read+0xb4>
		*buffer = NV_FUSE_READ(FUSE_OPT_TPC_DISABLE_0);
    9601ea40:	d2806180 	mov	x0, #0x30c                 	// #780
    9601ea44:	17ffffdc 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
	val = NV_FUSE_READ(FUSE_SKU_DIRECT_CONFIG_0);
    9601ea48:	d2803e80 	mov	x0, #0x1f4                 	// #500
		*buffer = (NV_FUSE_READ(FUSE_RESERVED_SW_0) >>
    9601ea4c:	f2a07040 	movk	x0, #0x382, lsl #16
    9601ea50:	b9400000 	ldr	w0, [x0]
				FUSE_RESERVED_IGNORE_STRAP_SHIFT) &
    9601ea54:	d3430c00 	ubfx	x0, x0, #3, #1
    9601ea58:	17ffff8b 	b	9601e884 <tegrabl_fuse_read+0xb0>
		*buffer = NV_FUSE_READ(FUSE_SATA_NV_CALIB_0);
    9601ea5c:	d2809380 	mov	x0, #0x49c                 	// #1180
		*buffer = NV_FUSE_READ(FUSE_SATA_MPHY_ODM_CALIB_0);
    9601ea60:	f2a07040 	movk	x0, #0x382, lsl #16
    9601ea64:	b9400000 	ldr	w0, [x0]
		*buffer = NV_DRF_VAL(FUSE, SATA_MPHY_ODM_CALIB,
    9601ea68:	12000c00 	and	w0, w0, #0xf
    9601ea6c:	17ffff86 	b	9601e884 <tegrabl_fuse_read+0xb0>
		*buffer = NV_FUSE_READ(FUSE_SATA_MPHY_ODM_CALIB_0);
    9601ea70:	d2804480 	mov	x0, #0x224                 	// #548
    9601ea74:	17fffffb 	b	9601ea60 <tegrabl_fuse_read+0x28c>
		*buffer = NV_FUSE_READ(FUSE_TSENSOR9_CALIB_0);
    9601ea78:	d2806380 	mov	x0, #0x31c                 	// #796
    9601ea7c:	17ffffce 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_TSENSOR_COMMON_T1_0);
    9601ea80:	d2805000 	mov	x0, #0x280                 	// #640
    9601ea84:	17ffffcc 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_TSENSOR_COMMON_T2_0);
    9601ea88:	d2806b80 	mov	x0, #0x35c                 	// #860
    9601ea8c:	17ffffca 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_HYPERVOLTAGING_0);
    9601ea90:	d2806a80 	mov	x0, #0x354                 	// #852
    9601ea94:	17ffffc8 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_CALIB0_0);
    9601ea98:	d2806080 	mov	x0, #0x304                 	// #772
    9601ea9c:	17ffffc6 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_OPT_PRIV_SEC_EN_0);
    9601eaa0:	d2804c80 	mov	x0, #0x264                 	// #612
    9601eaa4:	17ffffc4 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_USB_CALIB_0);
    9601eaa8:	d2803e00 	mov	x0, #0x1f0                 	// #496
    9601eaac:	17ffffc2 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_USB_CALIB_EXT_0);
    9601eab0:	d2806a00 	mov	x0, #0x350                 	// #848
    9601eab4:	17ffffc0 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM0_0);
    9601eab8:	d2803900 	mov	x0, #0x1c8                 	// #456
    9601eabc:	17ffffbe 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM1_0);
    9601eac0:	d2803980 	mov	x0, #0x1cc                 	// #460
    9601eac4:	17ffffbc 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM2_0);
    9601eac8:	d2803a00 	mov	x0, #0x1d0                 	// #464
    9601eacc:	17ffffba 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM3_0);
    9601ead0:	d2803a80 	mov	x0, #0x1d4                 	// #468
    9601ead4:	17ffffb8 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM4_0);
    9601ead8:	d2803b00 	mov	x0, #0x1d8                 	// #472
    9601eadc:	17ffffb6 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM5_0);
    9601eae0:	d2803b80 	mov	x0, #0x1dc                 	// #476
    9601eae4:	17ffffb4 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM6_0);
    9601eae8:	d2803c00 	mov	x0, #0x1e0                 	// #480
    9601eaec:	17ffffb2 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_RESERVED_ODM7_0);
    9601eaf0:	d2803c80 	mov	x0, #0x1e4                 	// #484
    9601eaf4:	17ffffb0 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = (NV_FUSE_READ(FUSE_RESERVED_SW_0) >>
    9601eaf8:	d2803800 	mov	x0, #0x1c0                 	// #448
    9601eafc:	f2a07040 	movk	x0, #0x382, lsl #16
    9601eb00:	b9400000 	ldr	w0, [x0]
				FUSE_RESERVED_SW_SHIFT) & FUSE_RESERVED_SW_MASK;
    9601eb04:	d3442c00 	ubfx	x0, x0, #4, #8
    9601eb08:	17ffff5f 	b	9601e884 <tegrabl_fuse_read+0xb0>
		*buffer = (NV_FUSE_READ(FUSE_RESERVED_SW_0) >>
    9601eb0c:	d2803800 	mov	x0, #0x1c0                 	// #448
    9601eb10:	17ffffcf 	b	9601ea4c <tegrabl_fuse_read+0x278>
	return tegrabl_copy_fuse_bytes(FUSE_EK0_0,
    9601eb14:	52800402 	mov	w2, #0x20                  	// #32
    9601eb18:	aa1303e1 	mov	x1, x19
    9601eb1c:	52807200 	mov	w0, #0x390                 	// #912
    9601eb20:	17ffff85 	b	9601e934 <tegrabl_fuse_read+0x160>
	return tegrabl_copy_fuse_bytes(FUSE_ODMID0_0,
    9601eb24:	52800102 	mov	w2, #0x8                   	// #8
    9601eb28:	aa1303e1 	mov	x1, x19
    9601eb2c:	52808100 	mov	w0, #0x408                 	// #1032
    9601eb30:	17ffff81 	b	9601e934 <tegrabl_fuse_read+0x160>
		*buffer = NV_FUSE_READ(FUSE_PRODUCTION_MODE_0);
    9601eb34:	d2802000 	mov	x0, #0x100                 	// #256
    9601eb38:	17ffff9f 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_SECURITY_MODE_0);
    9601eb3c:	d2803400 	mov	x0, #0x1a0                 	// #416
    9601eb40:	17ffff9d 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_ODM_LOCK_0);
    9601eb44:	d2802100 	mov	x0, #0x108                 	// #264
    9601eb48:	17ffff9b 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_ARM_JTAG_DIS_0);
    9601eb4c:	d2803700 	mov	x0, #0x1b8                 	// #440
    9601eb50:	17ffff99 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_H2_0);
    9601eb54:	d2808780 	mov	x0, #0x43c                 	// #1084
    9601eb58:	17ffff97 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_ODM_INFO_0);
    9601eb5c:	d2805380 	mov	x0, #0x29c                 	// #668
    9601eb60:	17ffff95 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_DEBUG_AUTHENTICATION_0);
    9601eb64:	d2805c80 	mov	x0, #0x2e4                 	// #740
    9601eb68:	17ffff93 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		*buffer = NV_FUSE_READ(FUSE_DENVER_DFD_ACCESS_DISABLE_0);
    9601eb6c:	d2805780 	mov	x0, #0x2bc                 	// #700
    9601eb70:	17ffff91 	b	9601e9b4 <tegrabl_fuse_read+0x1e0>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9601eb74:	528001b4 	mov	w20, #0xd                   	// #13
    9601eb78:	17ffff23 	b	9601e804 <tegrabl_fuse_read+0x30>
			err = TEGRABL_ERR_OUT_OF_RANGE;
    9601eb7c:	52800174 	mov	w20, #0xb                   	// #11
    9601eb80:	17ffff70 	b	9601e940 <tegrabl_fuse_read+0x16c>

000000009601eb84 <fuse_burn>:

	data = NV_FUSE_READ(FUSE_FUSERDATA_0);
}

static tegrabl_error_t fuse_burn(uint32_t addr)
{
    9601eb84:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9601eb88:	910003fd 	mov	x29, sp
    9601eb8c:	a90153f3 	stp	x19, x20, [sp, #16]
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (fuse_word == 0UL) {
    9601eb90:	b0000294 	adrp	x20, 9606f000 <eeproms+0x500>
{
    9601eb94:	f90013f5 	str	x21, [sp, #32]
	if (fuse_word == 0UL) {
    9601eb98:	b94a0281 	ldr	w1, [x20, #2560]
    9601eb9c:	340010e1 	cbz	w1, 9601edb8 <fuse_burn+0x234>
    9601eba0:	2a0003f5 	mov	w21, w0
	val = NV_FUSE_READ(FUSE_DISABLEREGPROGRAM_0);
    9601eba4:	d2800580 	mov	x0, #0x2c                  	// #44
    9601eba8:	f2a07040 	movk	x0, #0x382, lsl #16
    9601ebac:	b9400000 	ldr	w0, [x0]
	if ((val & FUSE_DISABLEREGPROGRAM_0_VAL_MASK) != 0U) {
    9601ebb0:	37000700 	tbnz	w0, #0, 9601ec90 <fuse_burn+0x10c>
	data = NV_FUSE_READ(FUSE_WRITE_ACCESS_SW_0);
    9601ebb4:	d2800601 	mov	x1, #0x30                  	// #48
    9601ebb8:	f2a07041 	movk	x1, #0x382, lsl #16
    9601ebbc:	b9400020 	ldr	w0, [x1]
	data = NV_FLD_SET_DRF_NUM(FUSE, WRITE_ACCESS_SW,
    9601ebc0:	32000000 	orr	w0, w0, #0x1
	NV_FUSE_WRITE(FUSE_WRITE_ACCESS_SW_0, data);
    9601ebc4:	b9000020 	str	w0, [x1]
	err = tegrabl_car_get_osc_freq_khz(&oscillator_frequency_khz);
    9601ebc8:	9100f3a0 	add	x0, x29, #0x3c
    9601ebcc:	94000316 	bl	9601f824 <tegrabl_car_get_osc_freq_khz>
    9601ebd0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601ebd4:	35000620 	cbnz	w0, 9601ec98 <fuse_burn+0x114>
	data = NV_FUSE_READ(FUSE_FUSETIME_PGM2_0);
    9601ebd8:	d2800382 	mov	x2, #0x1c                  	// #28
	strobe_width = (oscillator_frequency * strobe_pulse) / (1000U * 1000U);
    9601ebdc:	52827103 	mov	w3, #0x1388                	// #5000
	data = NV_FUSE_READ(FUSE_FUSETIME_PGM2_0);
    9601ebe0:	f2a07042 	movk	x2, #0x382, lsl #16
    9601ebe4:	b9400041 	ldr	w1, [x2]
	data = NV_FLD_SET_DRF_NUM(FUSE, FUSETIME_PGM2, FUSETIME_PGM2_TWIDTH_PGM,
    9601ebe8:	12103c20 	and	w0, w1, #0xffff0000
	strobe_width = (oscillator_frequency * strobe_pulse) / (1000U * 1000U);
    9601ebec:	b9403fa1 	ldr	w1, [x29, #60]
    9601ebf0:	1b037c21 	mul	w1, w1, w3
    9601ebf4:	52884803 	mov	w3, #0x4240                	// #16960
    9601ebf8:	72a001e3 	movk	w3, #0xf, lsl #16
    9601ebfc:	1ac30821 	udiv	w1, w1, w3
	data = NV_FLD_SET_DRF_NUM(FUSE, FUSETIME_PGM2, FUSETIME_PGM2_TWIDTH_PGM,
    9601ec00:	2a000021 	orr	w1, w1, w0
	NV_FUSE_WRITE(FUSE_FUSETIME_PGM2_0, data);
    9601ec04:	b9000041 	str	w1, [x2]
	err = tegrabl_set_soc_core_voltage(850);
    9601ec08:	52806a40 	mov	w0, #0x352                 	// #850
    9601ec0c:	94000a28 	bl	960214ac <tegrabl_set_soc_core_voltage>
    9601ec10:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601ec14:	35000240 	cbnz	w0, 9601ec5c <fuse_burn+0xd8>
	tegrabl_fuse_program_mirroring(false);
    9601ec18:	52800000 	mov	w0, #0x0                   	// #0
    9601ec1c:	97fffe8b 	bl	9601e648 <tegrabl_fuse_program_mirroring>
	data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ec20:	d2a07040 	mov	x0, #0x3820000             	// #58851328
    9601ec24:	b9400001 	ldr	w1, [x0]
		if (pd_ctrl == 0UL) {
    9601ec28:	36d000c1 	tbz	w1, #26, 9601ec40 <fuse_burn+0xbc>
			data = NV_FLD_SET_DRF_NUM(FUSE, FUSECTRL,
    9601ec2c:	12057821 	and	w1, w1, #0xfbffffff
			NV_FUSE_WRITE(FUSE_FUSECTRL_0, data);
    9601ec30:	b9000001 	str	w1, [x0]
			data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ec34:	b9400000 	ldr	w0, [x0]
			tegrabl_udelay(1);
    9601ec38:	d2800020 	mov	x0, #0x1                   	// #1
    9601ec3c:	9400041a 	bl	9601fca4 <tegrabl_udelay>
	data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ec40:	d2a07053 	mov	x19, #0x3820000             	// #58851328
    9601ec44:	b9400260 	ldr	w0, [x19]
	data = NV_DRF_VAL(FUSE, FUSECTRL, FUSECTRL_STATE, data);
    9601ec48:	d3505000 	ubfx	x0, x0, #16, #5
	if (data != FUSE_FUSECTRL_0_FUSECTRL_STATE_STATE_IDLE) {
    9601ec4c:	7100101f 	cmp	w0, #0x4
    9601ec50:	540002e0 	b.eq	9601ecac <fuse_burn+0x128>  // b.none
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9601ec54:	52804053 	mov	w19, #0x202                 	// #514
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9601ec58:	72a52533 	movk	w19, #0x2929, lsl #16
		pr_error("error = 0x%x in fuse_write_pre_process\n", err);
    9601ec5c:	2a1303e1 	mov	w1, w19
    9601ec60:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601ec64:	91350000 	add	x0, x0, #0xd40
    9601ec68:	94000e82 	bl	96022670 <tegrabl_printf>
	fuse_initiate_burn();

	fuse_write_post_process();
fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("error = 0x%x in fuse_burn\n", err);
    9601ec6c:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601ec70:	2a1303e1 	mov	w1, w19
    9601ec74:	9135ac00 	add	x0, x0, #0xd6b
    9601ec78:	94000e7e 	bl	96022670 <tegrabl_printf>
	}
	return err;
}
    9601ec7c:	2a1303e0 	mov	w0, w19
    9601ec80:	f94013f5 	ldr	x21, [sp, #32]
    9601ec84:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601ec88:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9601ec8c:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9601ec90:	52802053 	mov	w19, #0x102                 	// #258
    9601ec94:	17fffff1 	b	9601ec58 <fuse_burn+0xd4>
		pr_error("error = 0x%x in program_fuse_strobe\n", err);
    9601ec98:	2a0003e1 	mov	w1, w0
    9601ec9c:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601eca0:	91362400 	add	x0, x0, #0xd89
    9601eca4:	94000e73 	bl	96022670 <tegrabl_printf>
    9601eca8:	17ffffed 	b	9601ec5c <fuse_burn+0xd8>
	NV_FUSE_WRITE(FUSE_FUSEADDR_0, addr);
    9601ecac:	d2800080 	mov	x0, #0x4                   	// #4
    9601ecb0:	f2a07040 	movk	x0, #0x382, lsl #16
    9601ecb4:	b9000015 	str	w21, [x0]
	NV_FUSE_WRITE(FUSE_FUSEWDATA_0, fuse_word);
    9601ecb8:	b94a0281 	ldr	w1, [x20, #2560]
    9601ecbc:	b9000801 	str	w1, [x0, #8]
	data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ecc0:	b9400260 	ldr	w0, [x19]
	data = NV_FLD_SET_DRF_DEF(FUSE, FUSECTRL, FUSECTRL_CMD, WRITE, data);
    9601ecc4:	121e7400 	and	w0, w0, #0xfffffffc
    9601ecc8:	321f0000 	orr	w0, w0, #0x2
	NV_FUSE_WRITE(FUSE_FUSECTRL_0, data);
    9601eccc:	b9000260 	str	w0, [x19]
	tegrabl_udelay(50);
    9601ecd0:	d2800640 	mov	x0, #0x32                  	// #50
    9601ecd4:	940003f4 	bl	9601fca4 <tegrabl_udelay>
		data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ecd8:	b9400260 	ldr	w0, [x19]
		data = NV_DRF_VAL(FUSE, FUSECTRL, FUSECTRL_STATE, data);
    9601ecdc:	d3505000 	ubfx	x0, x0, #16, #5
	} while (data != FUSE_FUSECTRL_0_FUSECTRL_STATE_STATE_IDLE);
    9601ece0:	7100101f 	cmp	w0, #0x4
    9601ece4:	54ffffa1 	b.ne	9601ecd8 <fuse_burn+0x154>  // b.any
		data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ece8:	d2a07041 	mov	x1, #0x3820000             	// #58851328
    9601ecec:	b9400020 	ldr	w0, [x1]
		data = NV_DRF_VAL(FUSE, FUSECTRL, FUSECTRL_STATE, data);
    9601ecf0:	d3505000 	ubfx	x0, x0, #16, #5
	} while (data != FUSE_FUSECTRL_0_FUSECTRL_STATE_STATE_IDLE);
    9601ecf4:	7100101f 	cmp	w0, #0x4
    9601ecf8:	54ffffa1 	b.ne	9601ecec <fuse_burn+0x168>  // b.any
	data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ecfc:	b9400020 	ldr	w0, [x1]
		data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ed00:	d2a07054 	mov	x20, #0x3820000             	// #58851328
	data = NV_FLD_SET_DRF_DEF(FUSE, FUSECTRL, FUSECTRL_CMD, READ, data);
    9601ed04:	121e7400 	and	w0, w0, #0xfffffffc
    9601ed08:	32000000 	orr	w0, w0, #0x1
	NV_FUSE_WRITE(FUSE_FUSECTRL_0, data);
    9601ed0c:	b9000020 	str	w0, [x1]
	tegrabl_udelay(50);
    9601ed10:	d2800640 	mov	x0, #0x32                  	// #50
    9601ed14:	940003e4 	bl	9601fca4 <tegrabl_udelay>
		data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ed18:	b9400280 	ldr	w0, [x20]
		data = NV_DRF_VAL(FUSE, FUSECTRL, FUSECTRL_STATE, data);
    9601ed1c:	d3505000 	ubfx	x0, x0, #16, #5
	} while (data != FUSE_FUSECTRL_0_FUSECTRL_STATE_STATE_IDLE);
    9601ed20:	7100101f 	cmp	w0, #0x4
    9601ed24:	54ffffa1 	b.ne	9601ed18 <fuse_burn+0x194>  // b.any
	data = NV_FUSE_READ(FUSE_FUSERDATA_0);
    9601ed28:	d2800100 	mov	x0, #0x8                   	// #8
    9601ed2c:	f2a07040 	movk	x0, #0x382, lsl #16
    9601ed30:	b9400000 	ldr	w0, [x0]
	tegrabl_fuse_program_mirroring(true);
    9601ed34:	52800020 	mov	w0, #0x1                   	// #1
    9601ed38:	97fffe44 	bl	9601e648 <tegrabl_fuse_program_mirroring>
	data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ed3c:	b9400293 	ldr	w19, [x20]
		if (pd_ctrl != 0UL) {
    9601ed40:	37d000b3 	tbnz	w19, #26, 9601ed54 <fuse_burn+0x1d0>
			tegrabl_udelay(1);
    9601ed44:	d2800020 	mov	x0, #0x1                   	// #1
			data = NV_FLD_SET_DRF_NUM(FUSE, FUSECTRL,
    9601ed48:	32060273 	orr	w19, w19, #0x4000000
			tegrabl_udelay(1);
    9601ed4c:	940003d6 	bl	9601fca4 <tegrabl_udelay>
			NV_FUSE_WRITE(FUSE_FUSECTRL_0, data);
    9601ed50:	b9000293 	str	w19, [x20]
	data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ed54:	d2a07053 	mov	x19, #0x3820000             	// #58851328
    9601ed58:	b9400260 	ldr	w0, [x19]
	data = NV_FLD_SET_DRF_DEF(FUSE, FUSECTRL, FUSECTRL_CMD, SENSE_CTRL, data);
    9601ed5c:	32000400 	orr	w0, w0, #0x3
	NV_FUSE_WRITE(FUSE_FUSECTRL_0, data);
    9601ed60:	b9000260 	str	w0, [x19]
	tegrabl_udelay(50);
    9601ed64:	d2800640 	mov	x0, #0x32                  	// #50
    9601ed68:	940003cf 	bl	9601fca4 <tegrabl_udelay>
		data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ed6c:	b9400260 	ldr	w0, [x19]
		data = NV_DRF_VAL(FUSE, FUSECTRL, FUSECTRL_STATE, data);
    9601ed70:	d3505000 	ubfx	x0, x0, #16, #5
	} while (data != FUSE_FUSECTRL_0_FUSECTRL_STATE_STATE_IDLE);
    9601ed74:	7100101f 	cmp	w0, #0x4
    9601ed78:	54ffffa1 	b.ne	9601ed6c <fuse_burn+0x1e8>  // b.any
	data = NV_FUSE_READ(FUSE_PRIV2INTFC_START_0);
    9601ed7c:	d2800401 	mov	x1, #0x20                  	// #32
    9601ed80:	f2a07041 	movk	x1, #0x382, lsl #16
    9601ed84:	b9400020 	ldr	w0, [x1]
	data = NV_FLD_SET_DRF_NUM(FUSE, PRIV2INTFC_START,
    9601ed88:	32000400 	orr	w0, w0, #0x3
	NV_FUSE_WRITE(FUSE_PRIV2INTFC_START_0, data);
    9601ed8c:	b9000020 	str	w0, [x1]
	tegrabl_udelay(50);
    9601ed90:	d2800640 	mov	x0, #0x32                  	// #50
    9601ed94:	940003c4 	bl	9601fca4 <tegrabl_udelay>
		data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601ed98:	d2a07041 	mov	x1, #0x3820000             	// #58851328
    9601ed9c:	b9400020 	ldr	w0, [x1]
	} while (data == 0UL);
    9601eda0:	36f7ffe0 	tbz	w0, #30, 9601ed9c <fuse_burn+0x218>
		data = NV_FUSE_READ(FUSE_FUSECTRL_0);
    9601eda4:	d2a07041 	mov	x1, #0x3820000             	// #58851328
    9601eda8:	b9400020 	ldr	w0, [x1]
		data = NV_DRF_VAL(FUSE, FUSECTRL, FUSECTRL_STATE, data);
    9601edac:	d3505000 	ubfx	x0, x0, #16, #5
	} while (data != FUSE_FUSECTRL_0_FUSECTRL_STATE_STATE_IDLE);
    9601edb0:	7100101f 	cmp	w0, #0x4
    9601edb4:	54ffffa1 	b.ne	9601eda8 <fuse_burn+0x224>  // b.any
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9601edb8:	52800013 	mov	w19, #0x0                   	// #0
	return err;
    9601edbc:	17ffffb0 	b	9601ec7c <fuse_burn+0xf8>

000000009601edc0 <tegrabl_fuse_write>:
	return err;
}

tegrabl_error_t tegrabl_fuse_write(
	uint32_t fuse_type, uint32_t *fuse_val, uint32_t size)
{
    9601edc0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9601edc4:	910003fd 	mov	x29, sp
    9601edc8:	a90153f3 	stp	x19, x20, [sp, #16]
    9601edcc:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601edd0:	a90363f7 	stp	x23, x24, [sp, #48]
    9601edd4:	a9046bf9 	stp	x25, x26, [sp, #64]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	bool original_visibility;
	uint32_t val_bef_burn;

	if (fuse_val == NULL) {
    9601edd8:	b4001841 	cbz	x1, 9601f0e0 <tegrabl_fuse_write+0x320>
	uint32_t temp_size = 0;
    9601eddc:	910183b7 	add	x23, x29, #0x60
    9601ede0:	aa0103f4 	mov	x20, x1
    9601ede4:	2a0203f6 	mov	w22, w2
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
		goto fail;
	}

	val_bef_burn = *fuse_val;
    9601ede8:	b9400039 	ldr	w25, [x1]
    9601edec:	2a0003f5 	mov	w21, w0

	/* Make all fuse registers visible */
	original_visibility = tegrabl_set_fuse_reg_visibility(true);
    9601edf0:	52800020 	mov	w0, #0x1                   	// #1
    9601edf4:	94000321 	bl	9601fa78 <tegrabl_set_fuse_reg_visibility>
    9601edf8:	2a0003fa 	mov	w26, w0
	tegrabl_pmc_fuse_control_ps18_latch_set();
    9601edfc:	97fffe1b 	bl	9601e668 <tegrabl_pmc_fuse_control_ps18_latch_set>
	uint32_t temp_size = 0;
    9601ee00:	b81fceff 	str	wzr, [x23, #-4]!
	err = tegrabl_fuse_query_size(fuse_type, &temp_size);
    9601ee04:	2a1503e0 	mov	w0, w21
    9601ee08:	aa1703e1 	mov	x1, x23
    9601ee0c:	97fffe4f 	bl	9601e748 <tegrabl_fuse_query_size>
    9601ee10:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601ee14:	35000f00 	cbnz	w0, 9601eff4 <tegrabl_fuse_write+0x234>
	if (temp_size > size) {
    9601ee18:	b9405fa0 	ldr	w0, [x29, #92]
    9601ee1c:	6b0002df 	cmp	w22, w0
    9601ee20:	54000e63 	b.cc	9601efec <tegrabl_fuse_write+0x22c>  // b.lo, b.ul, b.last
	temp_buffer = tegrabl_malloc(temp_size);
    9601ee24:	2a0003e0 	mov	w0, w0
    9601ee28:	94001f14 	bl	96026a78 <tegrabl_malloc>
    9601ee2c:	aa0003f6 	mov	x22, x0
	if (temp_buffer == NULL) {
    9601ee30:	b4000f40 	cbz	x0, 9601f018 <tegrabl_fuse_write+0x258>
	memset(temp_buffer, 0, temp_size);
    9601ee34:	b9405fa2 	ldr	w2, [x29, #92]
    9601ee38:	52800001 	mov	w1, #0x0                   	// #0
    9601ee3c:	94002bfb 	bl	96029e28 <memset>
	err = tegrabl_fuse_read(fuse_type, temp_buffer, temp_size);
    9601ee40:	b9405fa2 	ldr	w2, [x29, #92]
    9601ee44:	aa1603e1 	mov	x1, x22
    9601ee48:	2a1503e0 	mov	w0, w21
    9601ee4c:	97fffe62 	bl	9601e7d4 <tegrabl_fuse_read>
    9601ee50:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601ee54:	35000340 	cbnz	w0, 9601eebc <tegrabl_fuse_write+0xfc>
	while (i < (temp_size >> 2)) {
    9601ee58:	b9405fa3 	ldr	w3, [x29, #92]
    9601ee5c:	d2800000 	mov	x0, #0x0                   	// #0
    9601ee60:	53027c63 	lsr	w3, w3, #2
    9601ee64:	6b00007f 	cmp	w3, w0
    9601ee68:	540004c8 	b.hi	9601ef00 <tegrabl_fuse_write+0x140>  // b.pmore
	switch (fuse_type) {
    9601ee6c:	710062bf 	cmp	w21, #0x18
    9601ee70:	540006e0 	b.eq	9601ef4c <tegrabl_fuse_write+0x18c>  // b.none
    9601ee74:	71008ebf 	cmp	w21, #0x23
    9601ee78:	54000840 	b.eq	9601ef80 <tegrabl_fuse_write+0x1c0>  // b.none
    9601ee7c:	71005ebf 	cmp	w21, #0x17
    9601ee80:	54001341 	b.ne	9601f0e8 <tegrabl_fuse_write+0x328>  // b.any
		write_fuse_word_0(FUSE_HYPERVOLTAGING, buffer[0])
    9601ee84:	b9400280 	ldr	w0, [x20]
    9601ee88:	b0000298 	adrp	x24, 9606f000 <eeproms+0x500>
    9601ee8c:	53165400 	lsl	w0, w0, #10
    9601ee90:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_HYPERVOLTAGING_ADDR_0);
    9601ee94:	528002c0 	mov	w0, #0x16                  	// #22
    9601ee98:	97ffff3b 	bl	9601eb84 <fuse_burn>
    9601ee9c:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601eea0:	350000e0 	cbnz	w0, 9601eebc <tegrabl_fuse_write+0xfc>
		write_fuse_word_1(FUSE_HYPERVOLTAGING, buffer[0])
    9601eea4:	b9400280 	ldr	w0, [x20]
    9601eea8:	53167c00 	lsr	w0, w0, #22
    9601eeac:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_HYPERVOLTAGING_ADDR_1);
    9601eeb0:	2a1503e0 	mov	w0, w21
		err = fuse_burn(FUSE_RESERVED_ODM3_REDUNDANT_ADDR_1);
    9601eeb4:	97ffff34 	bl	9601eb84 <fuse_burn>
    9601eeb8:	2a0003f3 	mov	w19, w0
		tegrabl_free(temp_buffer);
    9601eebc:	aa1603e0 	mov	x0, x22
    9601eec0:	94001efe 	bl	96026ab8 <tegrabl_free>
	if (err != TEGRABL_NO_ERROR) {
    9601eec4:	35000993 	cbnz	w19, 9601eff4 <tegrabl_fuse_write+0x234>
	if (err != TEGRABL_NO_ERROR) {
		goto fail;
	}

	/* Wait to make sure fuses are burnt */
	tegrabl_mdelay(2);
    9601eec8:	d2800040 	mov	x0, #0x2                   	// #2
    9601eecc:	94000393 	bl	9601fd18 <tegrabl_mdelay>

	tegrabl_pmc_fuse_control_ps18_latch_clear();
    9601eed0:	97fffdf6 	bl	9601e6a8 <tegrabl_pmc_fuse_control_ps18_latch_clear>

	/* Restore back the original visibility */
	(void)tegrabl_set_fuse_reg_visibility(original_visibility);
    9601eed4:	2a1a03e0 	mov	w0, w26
    9601eed8:	940002e8 	bl	9601fa78 <tegrabl_set_fuse_reg_visibility>
	err = tegrabl_fuse_query_size(type, &size);
    9601eedc:	aa1703e1 	mov	x1, x23
    9601eee0:	2a1503e0 	mov	w0, w21
    9601eee4:	97fffe19 	bl	9601e748 <tegrabl_fuse_query_size>
    9601eee8:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9601eeec:	340009a0 	cbz	w0, 9601f020 <tegrabl_fuse_write+0x260>
		pr_error("Failed to query fuse size\n");
    9601eef0:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601eef4:	9138ac00 	add	x0, x0, #0xe2b
    9601eef8:	94000dde 	bl	96022670 <tegrabl_printf>
    9601eefc:	14000042 	b	9601f004 <tegrabl_fuse_write+0x244>
		buffer[i] = buffer[i] ^ temp_buffer[i];
    9601ef00:	b8607ac1 	ldr	w1, [x22, x0, lsl #2]
    9601ef04:	b8607a82 	ldr	w2, [x20, x0, lsl #2]
    9601ef08:	4a010042 	eor	w2, w2, w1
    9601ef0c:	b8207a82 	str	w2, [x20, x0, lsl #2]
		if ((buffer[i] & temp_buffer[i]) != 0UL) {
    9601ef10:	b8607ac1 	ldr	w1, [x22, x0, lsl #2]
    9601ef14:	91000400 	add	x0, x0, #0x1
    9601ef18:	6a01005f 	tst	w2, w1
    9601ef1c:	54fffa40 	b.eq	9601ee64 <tegrabl_fuse_write+0xa4>  // b.none
			pr_warn("read fuse value = 0x%0x\n", temp_buffer[i]);
    9601ef20:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    9601ef24:	52808053 	mov	w19, #0x402                 	// #1026
			pr_warn("read fuse value = 0x%0x\n", temp_buffer[i]);
    9601ef28:	9136c400 	add	x0, x0, #0xdb1
    9601ef2c:	94000dd1 	bl	96022670 <tegrabl_printf>
			pr_error("Error = %d in fuse_write: tried to set 1 to 0\n", err);
    9601ef30:	52808041 	mov	w1, #0x402                 	// #1026
    9601ef34:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601ef38:	72a52521 	movk	w1, #0x2929, lsl #16
    9601ef3c:	91373400 	add	x0, x0, #0xdcd
    9601ef40:	94000dcc 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    9601ef44:	72a52533 	movk	w19, #0x2929, lsl #16
    9601ef48:	17ffffdd 	b	9601eebc <tegrabl_fuse_write+0xfc>
		write_fuse_word_0(FUSE_RESERVED_CALIB0, buffer[0])
    9601ef4c:	b9400280 	ldr	w0, [x20]
    9601ef50:	b0000298 	adrp	x24, 9606f000 <eeproms+0x500>
    9601ef54:	531c6c00 	lsl	w0, w0, #4
    9601ef58:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_RESERVED_CALIB0_ADDR_0);
    9601ef5c:	528005c0 	mov	w0, #0x2e                  	// #46
    9601ef60:	97ffff09 	bl	9601eb84 <fuse_burn>
    9601ef64:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601ef68:	35fffaa0 	cbnz	w0, 9601eebc <tegrabl_fuse_write+0xfc>
		write_fuse_word_1(FUSE_RESERVED_CALIB0, buffer[0])
    9601ef6c:	b9400280 	ldr	w0, [x20]
    9601ef70:	531c7c00 	lsr	w0, w0, #28
    9601ef74:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_RESERVED_CALIB0_ADDR_1);
    9601ef78:	528005e0 	mov	w0, #0x2f                  	// #47
    9601ef7c:	17ffffce 	b	9601eeb4 <tegrabl_fuse_write+0xf4>
		write_fuse_word_0(FUSE_RESERVED_ODM3, buffer[0])
    9601ef80:	b9400280 	ldr	w0, [x20]
    9601ef84:	b0000298 	adrp	x24, 9606f000 <eeproms+0x500>
    9601ef88:	531e7400 	lsl	w0, w0, #2
    9601ef8c:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_RESERVED_ODM3_ADDR_0);
    9601ef90:	52800100 	mov	w0, #0x8                   	// #8
    9601ef94:	97fffefc 	bl	9601eb84 <fuse_burn>
    9601ef98:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601ef9c:	35fff900 	cbnz	w0, 9601eebc <tegrabl_fuse_write+0xfc>
		write_fuse_word_1(FUSE_RESERVED_ODM3, buffer[0])
    9601efa0:	b9400280 	ldr	w0, [x20]
    9601efa4:	531e7c00 	lsr	w0, w0, #30
    9601efa8:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_RESERVED_ODM3_ADDR_1);
    9601efac:	52800140 	mov	w0, #0xa                   	// #10
    9601efb0:	97fffef5 	bl	9601eb84 <fuse_burn>
    9601efb4:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601efb8:	35fff820 	cbnz	w0, 9601eebc <tegrabl_fuse_write+0xfc>
		write_fuse_word_0(FUSE_RESERVED_ODM3_REDUNDANT, buffer[0])
    9601efbc:	b9400280 	ldr	w0, [x20]
    9601efc0:	531e7400 	lsl	w0, w0, #2
    9601efc4:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_RESERVED_ODM3_REDUNDANT_ADDR_0);
    9601efc8:	52800120 	mov	w0, #0x9                   	// #9
    9601efcc:	97fffeee 	bl	9601eb84 <fuse_burn>
    9601efd0:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601efd4:	35fff740 	cbnz	w0, 9601eebc <tegrabl_fuse_write+0xfc>
		write_fuse_word_1(FUSE_RESERVED_ODM3_REDUNDANT, buffer[0])
    9601efd8:	b9400280 	ldr	w0, [x20]
    9601efdc:	531e7c00 	lsr	w0, w0, #30
    9601efe0:	b90a0300 	str	w0, [x24, #2560]
		err = fuse_burn(FUSE_RESERVED_ODM3_REDUNDANT_ADDR_1);
    9601efe4:	52800160 	mov	w0, #0xb                   	// #11
    9601efe8:	17ffffb3 	b	9601eeb4 <tegrabl_fuse_write+0xf4>
		err = TEGRABL_ERROR(TEGRABL_ERR_TOO_SMALL, 0);
    9601efec:	52800113 	mov	w19, #0x8                   	// #8
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601eff0:	72a52533 	movk	w19, #0x2929, lsl #16
		pr_error("error = 0x%x in fuse_set_macro_and_burn\n", err);
    9601eff4:	f0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601eff8:	2a1303e1 	mov	w1, w19
    9601effc:	9137fc00 	add	x0, x0, #0xdff
    9601f000:	94000d9c 	bl	96022670 <tegrabl_printf>
		goto fail;
	}

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("error = 0x%x in tegrabl_fuse_write\n", err);
    9601f004:	2a1303e1 	mov	w1, w19
    9601f008:	d0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f00c:	913b9400 	add	x0, x0, #0xee5
    9601f010:	94000d98 	bl	96022670 <tegrabl_printf>
	}
	return err;
    9601f014:	14000027 	b	9601f0b0 <tegrabl_fuse_write+0x2f0>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601f018:	52800073 	mov	w19, #0x3                   	// #3
    9601f01c:	17fffff5 	b	9601eff0 <tegrabl_fuse_write+0x230>
	val = tegrabl_malloc(size);
    9601f020:	b9405fa0 	ldr	w0, [x29, #92]
    9601f024:	94001e95 	bl	96026a78 <tegrabl_malloc>
    9601f028:	aa0003f4 	mov	x20, x0
	if (val == NULL) {
    9601f02c:	b5000080 	cbnz	x0, 9601f03c <tegrabl_fuse_write+0x27c>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9601f030:	52800073 	mov	w19, #0x3                   	// #3
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    9601f034:	72a52533 	movk	w19, #0x2929, lsl #16
    9601f038:	17fffff3 	b	9601f004 <tegrabl_fuse_write+0x244>
	memset(val, 0, size);
    9601f03c:	b9405fa2 	ldr	w2, [x29, #92]
    9601f040:	52800001 	mov	w1, #0x0                   	// #0
    9601f044:	94002b79 	bl	96029e28 <memset>
	if (type == FUSE_TYPE_BOOT_SECURITY_INFO) {
    9601f048:	350001d5 	cbnz	w21, 9601f080 <tegrabl_fuse_write+0x2c0>
		*val = tegrabl_fuse_get_security_info();
    9601f04c:	97fffdac 	bl	9601e6fc <tegrabl_fuse_get_security_info>
    9601f050:	b9000280 	str	w0, [x20]
	if (*val != val_written) {
    9601f054:	b9400283 	ldr	w3, [x20]
		pr_error("Fuse (%u) is not burnt\n"
    9601f058:	2a1903e2 	mov	w2, w25
    9601f05c:	2a1503e1 	mov	w1, w21
	if (*val != val_written) {
    9601f060:	6b03033f 	cmp	w25, w3
    9601f064:	54000340 	b.eq	9601f0cc <tegrabl_fuse_write+0x30c>  // b.none
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601f068:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("Fuse (%u) is not burnt\n"
    9601f06c:	d0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9601f070:	72a52533 	movk	w19, #0x2929, lsl #16
		pr_error("Fuse (%u) is not burnt\n"
    9601f074:	91398400 	add	x0, x0, #0xe61
    9601f078:	94000d7e 	bl	96022670 <tegrabl_printf>
    9601f07c:	1400000a 	b	9601f0a4 <tegrabl_fuse_write+0x2e4>
		err = tegrabl_fuse_read(type, val, size);
    9601f080:	b9405fa2 	ldr	w2, [x29, #92]
    9601f084:	aa1403e1 	mov	x1, x20
    9601f088:	2a1503e0 	mov	w0, w21
    9601f08c:	97fffdd2 	bl	9601e7d4 <tegrabl_fuse_read>
    9601f090:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9601f094:	34fffe00 	cbz	w0, 9601f054 <tegrabl_fuse_write+0x294>
			pr_error("Failed to read fuse\n");
    9601f098:	d0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f09c:	91392400 	add	x0, x0, #0xe49
    9601f0a0:	94000d74 	bl	96022670 <tegrabl_printf>
		tegrabl_free(val);
    9601f0a4:	aa1403e0 	mov	x0, x20
    9601f0a8:	94001e84 	bl	96026ab8 <tegrabl_free>
	if (err != TEGRABL_NO_ERROR) {
    9601f0ac:	35fffad3 	cbnz	w19, 9601f004 <tegrabl_fuse_write+0x244>
}
    9601f0b0:	2a1303e0 	mov	w0, w19
    9601f0b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601f0b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601f0bc:	a94363f7 	ldp	x23, x24, [sp, #48]
    9601f0c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9601f0c4:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9601f0c8:	d65f03c0 	ret
		pr_info("Fuse (%u) burnt successfully with val 0x%08x\n", type, *val);
    9601f0cc:	d0000100 	adrp	x0, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f0d0:	52800013 	mov	w19, #0x0                   	// #0
    9601f0d4:	913ad000 	add	x0, x0, #0xeb4
    9601f0d8:	94000d66 	bl	96022670 <tegrabl_printf>
    9601f0dc:	17fffff2 	b	9601f0a4 <tegrabl_fuse_write+0x2e4>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    9601f0e0:	5280c053 	mov	w19, #0x602                 	// #1538
    9601f0e4:	17ffffd4 	b	9601f034 <tegrabl_fuse_write+0x274>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    9601f0e8:	5280a053 	mov	w19, #0x502                 	// #1282
    9601f0ec:	17ffff96 	b	9601ef44 <tegrabl_fuse_write+0x184>

000000009601f0f0 <tegrabl_padctl_config_to_gpio>:
#include <tegrabl_padctl.h>

void tegrabl_padctl_config_to_gpio(uint32_t pin_num)
{
	/*dummy func, not required in T186, as pin is already set to GPIO mode in pinmux.cfg */
}
    9601f0f0:	d65f03c0 	ret

000000009601f0f4 <tegrabl_module_to_bpmp_id>:
				tegrabl_module_t module_num,
				uint8_t instance,
				bool clk_or_rst)
{
	/* TODO - Complete below mapping */
	switch (module_num) {
    9601f0f4:	51000400 	sub	w0, w0, #0x1
{
    9601f0f8:	12001c21 	and	w1, w1, #0xff
    9601f0fc:	12001c42 	and	w2, w2, #0xff
	switch (module_num) {
    9601f100:	7100e01f 	cmp	w0, #0x38
    9601f104:	54001688 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
    9601f108:	d0000103 	adrp	x3, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f10c:	913c3063 	add	x3, x3, #0xf0c
    9601f110:	78605860 	ldrh	w0, [x3, w0, uxtw #1]
    9601f114:	10000063 	adr	x3, 9601f120 <tegrabl_module_to_bpmp_id+0x2c>
    9601f118:	8b20a860 	add	x0, x3, w0, sxth #2
    9601f11c:	d61f0000 	br	x0
	case (TEGRABL_MODULE_UART):
	{
		if (instance < UART_MAX_INSTANCES_A2G) {
    9601f120:	7100183f 	cmp	w1, #0x6
    9601f124:	54001588 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
			return uart_module_instances[instance][clk_or_rst];
    9601f128:	937f7c20 	sbfiz	x0, x1, #1, #32
    9601f12c:	8b22c001 	add	x1, x0, w2, sxtw
    9601f130:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f134:	91106000 	add	x0, x0, #0x418
		break;
	}
	case (TEGRABL_MODULE_I2C):
	{
		if (instance < I2C_MAX_INSTANCES_1TO14) {
			return i2c_module_instances[instance][clk_or_rst];
    9601f138:	b8617800 	ldr	w0, [x0, x1, lsl #2]
    9601f13c:	1400000c 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		if (instance < SDMMC_MAX_INSTANCES_1TO4) {
    9601f140:	71000c3f 	cmp	w1, #0x3
    9601f144:	54001488 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
			return sdmmc_module_instances[instance][clk_or_rst];
    9601f148:	937f7c20 	sbfiz	x0, x1, #1, #32
    9601f14c:	8b22c001 	add	x1, x0, w2, sxtw
    9601f150:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f154:	9109b000 	add	x0, x0, #0x26c
    9601f158:	17fffff8 	b	9601f138 <tegrabl_module_to_bpmp_id+0x44>
			return TEGRA186_CLK_GPCCLK;
    9601f15c:	7100005f 	cmp	w2, #0x0
    9601f160:	528008c0 	mov	w0, #0x46                  	// #70
    9601f164:	528026c1 	mov	w1, #0x136                 	// #310
			return TEGRA186_CLK_QSPI;
    9601f168:	1a811000 	csel	w0, w0, w1, ne  // ne = any

	default:
		break;
	}
	return MODULE_NOT_SUPPORTED;
}
    9601f16c:	d65f03c0 	ret
			return TEGRA186_CLK_QSPI;
    9601f170:	7100005f 	cmp	w2, #0x0
    9601f174:	52801020 	mov	w0, #0x81                  	// #129
    9601f178:	52801081 	mov	w1, #0x84                  	// #132
    9601f17c:	17fffffb 	b	9601f168 <tegrabl_module_to_bpmp_id+0x74>
		if (instance < I2C_MAX_INSTANCES_1TO14) {
    9601f180:	7100343f 	cmp	w1, #0xd
    9601f184:	54001288 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
			return i2c_module_instances[instance][clk_or_rst];
    9601f188:	937f7c21 	sbfiz	x1, x1, #1, #32
    9601f18c:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f190:	8b22c021 	add	x1, x1, w2, sxtw
    9601f194:	9102f000 	add	x0, x0, #0xbc
    9601f198:	17ffffe8 	b	9601f138 <tegrabl_module_to_bpmp_id+0x44>
		return xusb_module_instances[internal_xusb_index_map][clk_or_rst];
    9601f19c:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f1a0:	91152000 	add	x0, x0, #0x548
    9601f1a4:	b862d800 	ldr	w0, [x0, w2, sxtw #2]
    9601f1a8:	17fffff1 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return xusb_module_instances[internal_xusb_index_map][clk_or_rst];
    9601f1ac:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f1b0:	91152021 	add	x1, x1, #0x548
    9601f1b4:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f1b8:	b9400820 	ldr	w0, [x1, #8]
    9601f1bc:	17ffffec 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return xusb_module_instances[internal_xusb_index_map][clk_or_rst];
    9601f1c0:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f1c4:	91152021 	add	x1, x1, #0x548
    9601f1c8:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f1cc:	b9401020 	ldr	w0, [x1, #16]
    9601f1d0:	17ffffe7 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return xusb_module_instances[internal_xusb_index_map][clk_or_rst];
    9601f1d4:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f1d8:	91152021 	add	x1, x1, #0x548
    9601f1dc:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f1e0:	b9401820 	ldr	w0, [x1, #24]
    9601f1e4:	17ffffe2 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return xusb_module_instances[internal_xusb_index_map][clk_or_rst];
    9601f1e8:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f1ec:	91152021 	add	x1, x1, #0x548
    9601f1f0:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f1f4:	b9402020 	ldr	w0, [x1, #32]
    9601f1f8:	17ffffdd 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		if (instance > 3) /* DSI, DSIB, DSIC, DSID */ {
    9601f1fc:	71000c3f 	cmp	w1, #0x3
    9601f200:	54000ea8 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
		index_nvdisp_map = TEGRABL_NVDISP_DSI + instance;
    9601f204:	11002820 	add	w0, w1, #0xa
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f208:	d37f2000 	ubfiz	x0, x0, #1, #9
    9601f20c:	8b22c001 	add	x1, x0, w2, sxtw
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f210:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f214:	9105f000 	add	x0, x0, #0x17c
    9601f218:	17ffffc8 	b	9601f138 <tegrabl_module_to_bpmp_id+0x44>
		if (instance > 1) /* SOR0, SOR1 */ {
    9601f21c:	7100043f 	cmp	w1, #0x1
    9601f220:	54000da8 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
		index_nvdisp_map = TEGRABL_NVDISP_SOR0 + instance;
    9601f224:	11003821 	add	w1, w1, #0xe
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f228:	d37f2021 	ubfiz	x1, x1, #1, #9
    9601f22c:	14000033 	b	9601f2f8 <tegrabl_module_to_bpmp_id+0x204>
		if (instance > 1) /* SOR0_OUT, SOR1_OUT */ {
    9601f230:	7100043f 	cmp	w1, #0x1
    9601f234:	54000d08 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
		index_nvdisp_map = TEGRABL_NVDISP_SOR0_OUT + instance;
    9601f238:	11006821 	add	w1, w1, #0x1a
    9601f23c:	17fffffb 	b	9601f228 <tegrabl_module_to_bpmp_id+0x134>
		if (instance > 1) /* SOR0_PAD_CLKOUT, SOR1_PAD_CLKOUT */ {
    9601f240:	7100043f 	cmp	w1, #0x1
    9601f244:	54000c88 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
		index_nvdisp_map = TEGRABL_NVDISP_SOR0_PAD_CLKOUT + instance;
    9601f248:	11005c21 	add	w1, w1, #0x17
    9601f24c:	17fffff7 	b	9601f228 <tegrabl_module_to_bpmp_id+0x134>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f250:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f254:	9105f021 	add	x1, x1, #0x17c
    9601f258:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f25c:	b940c820 	ldr	w0, [x1, #200]
    9601f260:	17ffffc3 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f264:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f268:	9105f021 	add	x1, x1, #0x17c
    9601f26c:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f270:	b940e020 	ldr	w0, [x1, #224]
    9601f274:	17ffffbe 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f278:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f27c:	9105f021 	add	x1, x1, #0x17c
    9601f280:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f284:	b940e820 	ldr	w0, [x1, #232]
    9601f288:	17ffffb9 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f28c:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f290:	9105f021 	add	x1, x1, #0x17c
    9601f294:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f298:	b940a020 	ldr	w0, [x1, #160]
    9601f29c:	17ffffb4 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f2a0:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f2a4:	9105f021 	add	x1, x1, #0x17c
    9601f2a8:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f2ac:	b940a820 	ldr	w0, [x1, #168]
    9601f2b0:	17ffffaf 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f2b4:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f2b8:	9105f021 	add	x1, x1, #0x17c
    9601f2bc:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f2c0:	b940b020 	ldr	w0, [x1, #176]
    9601f2c4:	17ffffaa 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		if (instance > 2) /* P0 to P2 */ {
    9601f2c8:	7100083f 	cmp	w1, #0x2
    9601f2cc:	54000848 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
		index_nvdisp_map = TEGRABL_NVDISP_P0 + instance;
    9601f2d0:	11004021 	add	w1, w1, #0x10
    9601f2d4:	17ffffd5 	b	9601f228 <tegrabl_module_to_bpmp_id+0x134>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f2d8:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f2dc:	9105f021 	add	x1, x1, #0x17c
    9601f2e0:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f2e4:	b9409820 	ldr	w0, [x1, #152]
    9601f2e8:	17ffffa1 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		if (instance > 2) /* HEAD0 to HEAD2 */ {
    9601f2ec:	7100083f 	cmp	w1, #0x2
    9601f2f0:	54000728 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f2f4:	d37f1c21 	ubfiz	x1, x1, #1, #8
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f2f8:	8b22c021 	add	x1, x1, w2, sxtw
    9601f2fc:	17ffffc5 	b	9601f210 <tegrabl_module_to_bpmp_id+0x11c>
		if (instance > 5) /* WGRP0 to WGRP5 */ {
    9601f300:	7100143f 	cmp	w1, #0x5
    9601f304:	54000688 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
					(TEGRABL_RST_NVDISPLAY0_WGRP0 + instance);
    9601f308:	11000c21 	add	w1, w1, #0x3
    9601f30c:	17ffffc7 	b	9601f228 <tegrabl_module_to_bpmp_id+0x134>
		return nvdisp_module_instance[index_nvdisp_map][clk_or_rst];
    9601f310:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f314:	9105f021 	add	x1, x1, #0x17c
    9601f318:	8b22c821 	add	x1, x1, w2, sxtw #2
    9601f31c:	b9404820 	ldr	w0, [x1, #72]
    9601f320:	17ffff93 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
			return TEGRA186_CLK_SE;
    9601f324:	7100045f 	cmp	w2, #0x1
    9601f328:	528004a0 	mov	w0, #0x25                  	// #37
    9601f32c:	52800ce1 	mov	w1, #0x67                  	// #103
			return TEGRA186_CLK_VIC;
    9601f330:	1a810000 	csel	w0, w0, w1, eq  // eq = none
    9601f334:	17ffff8e 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
		if (instance < SPI_MAX_INSTANCES_1TO4) {
    9601f338:	71000c3f 	cmp	w1, #0x3
    9601f33c:	540004c8 	b.hi	9601f3d4 <tegrabl_module_to_bpmp_id+0x2e0>  // b.pmore
			return spi_module_instances[instance][clk_or_rst];
    9601f340:	937f7c21 	sbfiz	x1, x1, #1, #32
    9601f344:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f348:	8b22c021 	add	x1, x1, w2, sxtw
    9601f34c:	910a3000 	add	x0, x0, #0x28c
    9601f350:	17ffff7a 	b	9601f138 <tegrabl_module_to_bpmp_id+0x44>
			return TEGRA186_CLK_AUD_MCLK;
    9601f354:	7100045f 	cmp	w2, #0x1
    9601f358:	52801240 	mov	w0, #0x92                  	// #146
    9601f35c:	52800f81 	mov	w1, #0x7c                  	// #124
    9601f360:	17fffff4 	b	9601f330 <tegrabl_module_to_bpmp_id+0x23c>
			return TEGRA186_CLK_SATA;
    9601f364:	7100045f 	cmp	w2, #0x1
    9601f368:	528003e0 	mov	w0, #0x1f                  	// #31
    9601f36c:	52800c61 	mov	w1, #0x63                  	// #99
    9601f370:	17fffff0 	b	9601f330 <tegrabl_module_to_bpmp_id+0x23c>
			return TEGRA186_CLK_SATA_OOB;
    9601f374:	7100045f 	cmp	w2, #0x1
    9601f378:	52800400 	mov	w0, #0x20                  	// #32
    9601f37c:	52800c81 	mov	w1, #0x64                  	// #100
    9601f380:	17ffffec 	b	9601f330 <tegrabl_module_to_bpmp_id+0x23c>
			return TEGRA186_RESET_PCIE;
    9601f384:	7100005f 	cmp	w2, #0x0
    9601f388:	52800c80 	mov	w0, #0x64                  	// #100
    9601f38c:	528003a1 	mov	w1, #0x1d                  	// #29
    9601f390:	17ffffe8 	b	9601f330 <tegrabl_module_to_bpmp_id+0x23c>
			return TEGRA186_CLK_PCIE;
    9601f394:	7100045f 	cmp	w2, #0x1
    9601f398:	528003a0 	mov	w0, #0x1d                  	// #29
    9601f39c:	52800061 	mov	w1, #0x3                   	// #3
    9601f3a0:	17ffffe4 	b	9601f330 <tegrabl_module_to_bpmp_id+0x23c>
			return TEGRA186_CLK_AFI;
    9601f3a4:	7100045f 	cmp	w2, #0x1
    9601f3a8:	528003c0 	mov	w0, #0x1e                  	// #30
    9601f3ac:	52800081 	mov	w1, #0x4                   	// #4
    9601f3b0:	17ffffe0 	b	9601f330 <tegrabl_module_to_bpmp_id+0x23c>
    9601f3b4:	7100045f 	cmp	w2, #0x1
    9601f3b8:	52800080 	mov	w0, #0x4                   	// #4
    9601f3bc:	1a9f1400 	csinc	w0, w0, wzr, ne  // ne = any
    9601f3c0:	17ffff6b 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>
			return TEGRA186_CLK_VIC;
    9601f3c4:	7100045f 	cmp	w2, #0x1
    9601f3c8:	52800680 	mov	w0, #0x34                  	// #52
    9601f3cc:	52800fe1 	mov	w1, #0x7f                  	// #127
    9601f3d0:	17ffffd8 	b	9601f330 <tegrabl_module_to_bpmp_id+0x23c>
	return MODULE_NOT_SUPPORTED;
    9601f3d4:	52804f80 	mov	w0, #0x27c                 	// #636
    9601f3d8:	17ffff65 	b	9601f16c <tegrabl_module_to_bpmp_id+0x78>

000000009601f3dc <internal_tegrabl_car_clk_is_enabled>:
static bool internal_tegrabl_car_clk_is_enabled(uint32_t clk_id)
{
	struct mrq_clk_request req_clk_is_enabled;
	struct mrq_clk_response resp_clk_is_enabled;

	if (clk_id == MODULE_NOT_SUPPORTED) {
    9601f3dc:	7109f01f 	cmp	w0, #0x27c
    9601f3e0:	54000320 	b.eq	9601f444 <internal_tegrabl_car_clk_is_enabled+0x68>  // b.none
{
    9601f3e4:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
		return false;
	}

	req_clk_is_enabled.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_IS_ENABLED, clk_id);
    9601f3e8:	32070400 	orr	w0, w0, #0x6000000

	/* TX */
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f3ec:	528002c4 	mov	w4, #0x16                  	// #22
    9601f3f0:	52800e23 	mov	w3, #0x71                  	// #113
{
    9601f3f4:	910003fd 	mov	x29, sp
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f3f8:	52800202 	mov	w2, #0x10                  	// #16
    9601f3fc:	9100a3a1 	add	x1, x29, #0x28
	req_clk_is_enabled.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_IS_ENABLED, clk_id);
    9601f400:	b9001ba0 	str	w0, [x29, #24]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f404:	910063a0 	add	x0, x29, #0x18
    9601f408:	97fff89d 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9601f40c:	34000140 	cbz	w0, 9601f434 <internal_tegrabl_car_clk_is_enabled+0x58>
					&req_clk_is_enabled, &resp_clk_is_enabled,
					sizeof(struct mrq_clk_request),
					sizeof(struct mrq_clk_response),
					MRQ_CLK)) {
		pr_error("Error in tx-rx: %s,%d\n", __func__, __LINE__);
    9601f410:	52806982 	mov	w2, #0x34c                 	// #844
    9601f414:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f418:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f41c:	9100f421 	add	x1, x1, #0x3d
    9601f420:	9104b000 	add	x0, x0, #0x12c
    9601f424:	94000c93 	bl	96022670 <tegrabl_printf>
    9601f428:	52800000 	mov	w0, #0x0                   	// #0

	pr_debug("(%s,%d) clk(%d) state = %d\n", __func__, __LINE__, clk_id,
			 resp_clk_is_enabled.clk_is_enabled.state);

	return (bool)resp_clk_is_enabled.clk_is_enabled.state;
}
    9601f42c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9601f430:	d65f03c0 	ret
	return (bool)resp_clk_is_enabled.clk_is_enabled.state;
    9601f434:	b9402ba0 	ldr	w0, [x29, #40]
    9601f438:	7100001f 	cmp	w0, #0x0
    9601f43c:	1a9f07e0 	cset	w0, ne  // ne = any
    9601f440:	17fffffb 	b	9601f42c <internal_tegrabl_car_clk_is_enabled+0x50>
		return false;
    9601f444:	52800000 	mov	w0, #0x0                   	// #0
}
    9601f448:	d65f03c0 	ret

000000009601f44c <internal_tegrabl_car_set_clk_src>:
{
    9601f44c:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
	if ((clk_id == MODULE_NOT_SUPPORTED) ||
    9601f450:	7109f01f 	cmp	w0, #0x27c
    9601f454:	52804f82 	mov	w2, #0x27c                 	// #636
    9601f458:	7a421024 	ccmp	w1, w2, #0x4, ne  // ne = any
{
    9601f45c:	910003fd 	mov	x29, sp
	if ((clk_id == MODULE_NOT_SUPPORTED) ||
    9601f460:	54000141 	b.ne	9601f488 <internal_tegrabl_car_set_clk_src+0x3c>  // b.any
			pr_error("%s coudn't set %d (bpmpid) as parent, returning\n",
    9601f464:	2a0103e2 	mov	w2, w1
    9601f468:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f46c:	d0000101 	adrp	x1, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f470:	91051800 	add	x0, x0, #0x146
    9601f474:	913ee021 	add	x1, x1, #0xfb8
    9601f478:	94000c7e 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERR_NOT_SUPPORTED;
    9601f47c:	52800020 	mov	w0, #0x1                   	// #1
}
    9601f480:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9601f484:	d65f03c0 	ret
	req_clk_set_src.clk_set_parent.parent_id = clk_src;
    9601f488:	b9001fa1 	str	w1, [x29, #28]
	req_clk_set_src.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_SET_PARENT, clk_id);
    9601f48c:	52a0a001 	mov	w1, #0x5000000             	// #83886080
    9601f490:	2a010000 	orr	w0, w0, w1
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f494:	528002c4 	mov	w4, #0x16                  	// #22
	req_clk_set_src.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_SET_PARENT, clk_id);
    9601f498:	b9001ba0 	str	w0, [x29, #24]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f49c:	52800e23 	mov	w3, #0x71                  	// #113
    9601f4a0:	52800202 	mov	w2, #0x10                  	// #16
    9601f4a4:	9100a3a1 	add	x1, x29, #0x28
    9601f4a8:	910063a0 	add	x0, x29, #0x18
    9601f4ac:	97fff874 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9601f4b0:	34fffe80 	cbz	w0, 9601f480 <internal_tegrabl_car_set_clk_src+0x34>
		pr_error("Error in tx-rx: %s,%d\n", __func__, __LINE__);
    9601f4b4:	52805b42 	mov	w2, #0x2da                 	// #730
    9601f4b8:	d0000101 	adrp	x1, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f4bc:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f4c0:	913ee021 	add	x1, x1, #0xfb8
    9601f4c4:	9104b000 	add	x0, x0, #0x12c
    9601f4c8:	94000c6a 	bl	96022670 <tegrabl_printf>
    9601f4cc:	52800040 	mov	w0, #0x2                   	// #2
    9601f4d0:	17ffffec 	b	9601f480 <internal_tegrabl_car_set_clk_src+0x34>

000000009601f4d4 <internal_tegrabl_car_get_clk_rate>:
	if (clk_id == TEGRA186_CLK_CLK_MAX) {
    9601f4d4:	7109f01f 	cmp	w0, #0x27c
    9601f4d8:	540003a0 	b.eq	9601f54c <internal_tegrabl_car_get_clk_rate+0x78>  // b.none
{
    9601f4dc:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
	req_clk_get_rate.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_GET_RATE, clk_id);
    9601f4e0:	32080000 	orr	w0, w0, #0x1000000
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f4e4:	528002c4 	mov	w4, #0x16                  	// #22
    9601f4e8:	52800e23 	mov	w3, #0x71                  	// #113
{
    9601f4ec:	910003fd 	mov	x29, sp
    9601f4f0:	f9000bf3 	str	x19, [sp, #16]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f4f4:	52800202 	mov	w2, #0x10                  	// #16
    9601f4f8:	aa0103f3 	mov	x19, x1
    9601f4fc:	9100e3a1 	add	x1, x29, #0x38
	req_clk_get_rate.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_GET_RATE, clk_id);
    9601f500:	b9002ba0 	str	w0, [x29, #40]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f504:	9100a3a0 	add	x0, x29, #0x28
    9601f508:	97fff85d 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9601f50c:	34000160 	cbz	w0, 9601f538 <internal_tegrabl_car_get_clk_rate+0x64>
		pr_error("Error in tx-rx: %s,%d\n", __func__, __LINE__);
    9601f510:	52805e82 	mov	w2, #0x2f4                 	// #756
    9601f514:	d0000101 	adrp	x1, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f518:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f51c:	913f6421 	add	x1, x1, #0xfd9
    9601f520:	9104b000 	add	x0, x0, #0x12c
    9601f524:	94000c53 	bl	96022670 <tegrabl_printf>
    9601f528:	52800040 	mov	w0, #0x2                   	// #2
}
    9601f52c:	f9400bf3 	ldr	x19, [sp, #16]
    9601f530:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9601f534:	d65f03c0 	ret
	*rate_khz = (resp_clk_get_rate.clk_get_rate.rate)/HZ_1K;
    9601f538:	f9401fa1 	ldr	x1, [x29, #56]
    9601f53c:	d2807d02 	mov	x2, #0x3e8                 	// #1000
    9601f540:	9ac20c21 	sdiv	x1, x1, x2
    9601f544:	b9000261 	str	w1, [x19]
	return TEGRABL_NO_ERROR;
    9601f548:	17fffff9 	b	9601f52c <internal_tegrabl_car_get_clk_rate+0x58>
		return TEGRABL_ERR_NOT_SUPPORTED;
    9601f54c:	52800020 	mov	w0, #0x1                   	// #1
}
    9601f550:	d65f03c0 	ret

000000009601f554 <internal_tegrabl_car_set_clk_rate>:
	if (clk_id == MODULE_NOT_SUPPORTED) {
    9601f554:	7109f01f 	cmp	w0, #0x27c
    9601f558:	54000400 	b.eq	9601f5d8 <internal_tegrabl_car_set_clk_rate+0x84>  // b.none
{
    9601f55c:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
	req_clk_set_rate.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_SET_RATE, clk_id);
    9601f560:	32070000 	orr	w0, w0, #0x2000000
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f564:	528002c4 	mov	w4, #0x16                  	// #22
    9601f568:	52800e23 	mov	w3, #0x71                  	// #113
{
    9601f56c:	910003fd 	mov	x29, sp
    9601f570:	f9000bf3 	str	x19, [sp, #16]
    9601f574:	aa0203f3 	mov	x19, x2
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f578:	52800202 	mov	w2, #0x10                  	// #16
	req_clk_set_rate.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_SET_RATE, clk_id);
    9601f57c:	b9002ba0 	str	w0, [x29, #40]
	req_clk_set_rate.clk_set_rate.rate = rate_khz*HZ_1K;
    9601f580:	52807d00 	mov	w0, #0x3e8                 	// #1000
    9601f584:	1b007c21 	mul	w1, w1, w0
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f588:	9100a3a0 	add	x0, x29, #0x28
	req_clk_set_rate.clk_set_rate.rate = rate_khz*HZ_1K;
    9601f58c:	f9001ba1 	str	x1, [x29, #48]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f590:	9100e3a1 	add	x1, x29, #0x38
    9601f594:	97fff83a 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9601f598:	34000160 	cbz	w0, 9601f5c4 <internal_tegrabl_car_set_clk_rate+0x70>
		pr_error("Error in tx-rx: %s,%d\n", __func__, __LINE__);
    9601f59c:	52806282 	mov	w2, #0x314                 	// #788
    9601f5a0:	d0000101 	adrp	x1, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f5a4:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f5a8:	913fec21 	add	x1, x1, #0xffb
    9601f5ac:	9104b000 	add	x0, x0, #0x12c
    9601f5b0:	94000c30 	bl	96022670 <tegrabl_printf>
    9601f5b4:	52800040 	mov	w0, #0x2                   	// #2
}
    9601f5b8:	f9400bf3 	ldr	x19, [sp, #16]
    9601f5bc:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9601f5c0:	d65f03c0 	ret
	*rate_set_khz = (resp_clk_set_rate.clk_set_rate.rate)/HZ_1K;
    9601f5c4:	f9401fa1 	ldr	x1, [x29, #56]
    9601f5c8:	d2807d02 	mov	x2, #0x3e8                 	// #1000
    9601f5cc:	9ac20c21 	sdiv	x1, x1, x2
    9601f5d0:	b9000261 	str	w1, [x19]
	return TEGRABL_NO_ERROR;
    9601f5d4:	17fffff9 	b	9601f5b8 <internal_tegrabl_car_set_clk_rate+0x64>
		return TEGRABL_ERR_NOT_SUPPORTED;
    9601f5d8:	52800020 	mov	w0, #0x1                   	// #1
}
    9601f5dc:	d65f03c0 	ret

000000009601f5e0 <internal_tegrabl_car_clk_enable>:
	if (clk_id == MODULE_NOT_SUPPORTED) {
    9601f5e0:	7109f01f 	cmp	w0, #0x27c
    9601f5e4:	540002a0 	b.eq	9601f638 <internal_tegrabl_car_clk_enable+0x58>  // b.none
{
    9601f5e8:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
	req_clk_enable.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_ENABLE, clk_id);
    9601f5ec:	32080800 	orr	w0, w0, #0x7000000
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f5f0:	528002c4 	mov	w4, #0x16                  	// #22
    9601f5f4:	52800e23 	mov	w3, #0x71                  	// #113
{
    9601f5f8:	910003fd 	mov	x29, sp
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f5fc:	52800202 	mov	w2, #0x10                  	// #16
    9601f600:	9100a3a1 	add	x1, x29, #0x28
	req_clk_enable.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_ENABLE, clk_id);
    9601f604:	b9001ba0 	str	w0, [x29, #24]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f608:	910063a0 	add	x0, x29, #0x18
    9601f60c:	97fff81c 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9601f610:	34000100 	cbz	w0, 9601f630 <internal_tegrabl_car_clk_enable+0x50>
		pr_error("Error in tx-rx: %s,%d\n", __func__, __LINE__);
    9601f614:	52806642 	mov	w2, #0x332                 	// #818
    9601f618:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f61c:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f620:	91007421 	add	x1, x1, #0x1d
    9601f624:	9104b000 	add	x0, x0, #0x12c
    9601f628:	94000c12 	bl	96022670 <tegrabl_printf>
    9601f62c:	52800040 	mov	w0, #0x2                   	// #2
}
    9601f630:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9601f634:	d65f03c0 	ret
		return TEGRABL_ERR_NOT_SUPPORTED;
    9601f638:	52800020 	mov	w0, #0x1                   	// #1
}
    9601f63c:	d65f03c0 	ret

000000009601f640 <internal_tegrabl_car_clk_disable>:
	return internal_tegrabl_car_clk_is_enabled(bpmp_id);
}


static tegrabl_error_t internal_tegrabl_car_clk_disable(uint32_t clk_id)
{
    9601f640:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    9601f644:	910003fd 	mov	x29, sp
    9601f648:	f9000bf3 	str	x19, [sp, #16]
    9601f64c:	2a0003f3 	mov	w19, w0
	struct mrq_clk_request req_clk_disable;
	struct mrq_clk_response resp_clk_disable;

	if (!internal_tegrabl_car_clk_is_enabled(clk_id)) {
    9601f650:	97ffff63 	bl	9601f3dc <internal_tegrabl_car_clk_is_enabled>
    9601f654:	72001c1f 	tst	w0, #0xff
    9601f658:	540000a1 	b.ne	9601f66c <internal_tegrabl_car_clk_disable+0x2c>  // b.any
		pr_debug("clock (id - %d) not enabled. skipping disable request\n",
				 clk_id);
		return TEGRABL_NO_ERROR;
    9601f65c:	52800000 	mov	w0, #0x0                   	// #0
	}

	pr_debug("(%s,%d) Disabled - %d\n", __func__, __LINE__, clk_id);

		return TEGRABL_NO_ERROR;
}
    9601f660:	f9400bf3 	ldr	x19, [sp, #16]
    9601f664:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9601f668:	d65f03c0 	ret
	if (clk_id == MODULE_NOT_SUPPORTED) {
    9601f66c:	7109f27f 	cmp	w19, #0x27c
    9601f670:	54000240 	b.eq	9601f6b8 <internal_tegrabl_car_clk_disable+0x78>  // b.none
	req_clk_disable.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_DISABLE, clk_id);
    9601f674:	32050273 	orr	w19, w19, #0x8000000
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f678:	528002c4 	mov	w4, #0x16                  	// #22
    9601f67c:	52800e23 	mov	w3, #0x71                  	// #113
    9601f680:	52800202 	mov	w2, #0x10                  	// #16
    9601f684:	9100e3a1 	add	x1, x29, #0x38
    9601f688:	9100a3a0 	add	x0, x29, #0x28
	req_clk_disable.cmd_and_id = BPMP_CLK_CMD(CMD_CLK_DISABLE, clk_id);
    9601f68c:	b9002bb3 	str	w19, [x29, #40]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f690:	97fff7fb 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9601f694:	34fffe40 	cbz	w0, 9601f65c <internal_tegrabl_car_clk_disable+0x1c>
		pr_error("Error in tx-rx: %s,%d\n", __func__, __LINE__);
    9601f698:	52806f42 	mov	w2, #0x37a                 	// #890
    9601f69c:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f6a0:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f6a4:	91018421 	add	x1, x1, #0x61
    9601f6a8:	9104b000 	add	x0, x0, #0x12c
    9601f6ac:	94000bf1 	bl	96022670 <tegrabl_printf>
    9601f6b0:	52800040 	mov	w0, #0x2                   	// #2
    9601f6b4:	17ffffeb 	b	9601f660 <internal_tegrabl_car_clk_disable+0x20>
		return TEGRABL_ERR_NOT_SUPPORTED;
    9601f6b8:	52800020 	mov	w0, #0x1                   	// #1
    9601f6bc:	17ffffe9 	b	9601f660 <internal_tegrabl_car_clk_disable+0x20>

000000009601f6c0 <internal_tegrabl_car_rst>:
static tegrabl_error_t internal_tegrabl_car_rst(uint32_t rst_id, uint32_t flag)
{
	struct mrq_reset_request req_rst;
	uint32_t resp_rst;

	if (rst_id == MODULE_NOT_SUPPORTED) {
    9601f6c0:	7109f01f 	cmp	w0, #0x27c
    9601f6c4:	54000280 	b.eq	9601f714 <internal_tegrabl_car_rst+0x54>  // b.none
{
    9601f6c8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	pr_debug("(%s,%d) reset operation on %d\n", __func__, __LINE__, rst_id);
	req_rst.cmd = flag;
	req_rst.reset_id = rst_id;

	/* TX */
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f6cc:	52800284 	mov	w4, #0x14                  	// #20
    9601f6d0:	52800083 	mov	w3, #0x4                   	// #4
    9601f6d4:	52800102 	mov	w2, #0x8                   	// #8
{
    9601f6d8:	910003fd 	mov	x29, sp
	req_rst.reset_id = rst_id;
    9601f6dc:	290303a1 	stp	w1, w0, [x29, #24]
	if (TEGRABL_NO_ERROR != tegrabl_ccplex_bpmp_xfer(
    9601f6e0:	910053a1 	add	x1, x29, #0x14
    9601f6e4:	910063a0 	add	x0, x29, #0x18
    9601f6e8:	97fff7e5 	bl	9601d67c <tegrabl_ccplex_bpmp_xfer>
    9601f6ec:	34000100 	cbz	w0, 9601f70c <internal_tegrabl_car_rst+0x4c>
					&req_rst, &resp_rst,
					sizeof(req_rst),
					sizeof(resp_rst),
					MRQ_RESET)) {
		pr_error("Error in tx-rx: %s,%d\n", __func__, __LINE__);
    9601f6f0:	528072c2 	mov	w2, #0x396                 	// #918
    9601f6f4:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f6f8:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f6fc:	91020821 	add	x1, x1, #0x82
    9601f700:	9104b000 	add	x0, x0, #0x12c
    9601f704:	94000bdb 	bl	96022670 <tegrabl_printf>
    9601f708:	52800000 	mov	w0, #0x0                   	// #0
	}

	return TEGRABL_NO_ERROR;
}
    9601f70c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601f710:	d65f03c0 	ret
		return TEGRABL_ERR_NOT_SUPPORTED;
    9601f714:	52800020 	mov	w0, #0x1                   	// #1
}
    9601f718:	d65f03c0 	ret

000000009601f71c <tegrabl_car_clk_is_enabled>:
{
    9601f71c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bpmp_id = tegrabl_module_to_bpmp_id(module, instance, MOD_CLK);
    9601f720:	52800002 	mov	w2, #0x0                   	// #0
{
    9601f724:	910003fd 	mov	x29, sp
	bpmp_id = tegrabl_module_to_bpmp_id(module, instance, MOD_CLK);
    9601f728:	97fffe73 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
	if (bpmp_id == MODULE_NOT_SUPPORTED) {
    9601f72c:	7109f01f 	cmp	w0, #0x27c
    9601f730:	54000060 	b.eq	9601f73c <tegrabl_car_clk_is_enabled+0x20>  // b.none
}
    9601f734:	a8c17bfd 	ldp	x29, x30, [sp], #16
	return internal_tegrabl_car_clk_is_enabled(bpmp_id);
    9601f738:	17ffff29 	b	9601f3dc <internal_tegrabl_car_clk_is_enabled>
}
    9601f73c:	52800000 	mov	w0, #0x0                   	// #0
    9601f740:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9601f744:	d65f03c0 	ret

000000009601f748 <tegrabl_car_set_clk_src>:
 */
tegrabl_error_t tegrabl_car_set_clk_src(
		tegrabl_module_t module,
		uint8_t instance,
		tegrabl_clk_src_id_t clk_src)
{
    9601f748:	2a0203e4 	mov	w4, w2
    9601f74c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	pr_debug("(%s,%d) %d, %d\n", __func__, __LINE__,
			 module, instance);

	return internal_tegrabl_car_set_clk_src(
					tegrabl_module_to_bpmp_id(module, instance, MOD_CLK),
    9601f750:	52800002 	mov	w2, #0x0                   	// #0
{
    9601f754:	910003fd 	mov	x29, sp
					tegrabl_module_to_bpmp_id(module, instance, MOD_CLK),
    9601f758:	97fffe67 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
    9601f75c:	51000482 	sub	w2, w4, #0x1
    9601f760:	7100705f 	cmp	w2, #0x1c
    9601f764:	540000c8 	b.hi	9601f77c <tegrabl_car_set_clk_src+0x34>  // b.pmore
    9601f768:	d0000101 	adrp	x1, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f76c:	913df821 	add	x1, x1, #0xf7e
    9601f770:	78625821 	ldrh	w1, [x1, w2, uxtw #1]
					src_clk_tegrabl_to_bpmp(clk_src));
}
    9601f774:	a8c17bfd 	ldp	x29, x30, [sp], #16
	return internal_tegrabl_car_set_clk_src(
    9601f778:	17ffff35 	b	9601f44c <internal_tegrabl_car_set_clk_src>
    9601f77c:	52804f81 	mov	w1, #0x27c                 	// #636
    9601f780:	17fffffd 	b	9601f774 <tegrabl_car_set_clk_src+0x2c>

000000009601f784 <tegrabl_car_get_clk_rate>:
 */
tegrabl_error_t tegrabl_car_get_clk_rate(
		tegrabl_module_t module,
		uint8_t instance,
		uint32_t *rate_khz)
{
    9601f784:	aa0203e4 	mov	x4, x2
    9601f788:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	pr_debug("(%s,%d) %d, %d\n", __func__, __LINE__,
			 module, instance);

	return internal_tegrabl_car_get_clk_rate(
			tegrabl_module_to_bpmp_id(module, instance, MOD_CLK),
    9601f78c:	52800002 	mov	w2, #0x0                   	// #0
{
    9601f790:	910003fd 	mov	x29, sp
			tegrabl_module_to_bpmp_id(module, instance, MOD_CLK),
    9601f794:	97fffe58 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
	return internal_tegrabl_car_get_clk_rate(
    9601f798:	aa0403e1 	mov	x1, x4
			rate_khz);
}
    9601f79c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	return internal_tegrabl_car_get_clk_rate(
    9601f7a0:	17ffff4d 	b	9601f4d4 <internal_tegrabl_car_get_clk_rate>

000000009601f7a4 <tegrabl_car_get_clk_src_rate>:
		tegrabl_clk_src_id_t src_id,
		uint32_t *rate_khz)
{
	pr_debug("(%s,%d) %d\n", __func__, __LINE__, src_id);

	if ((src_id == TEGRABL_CLK_SRC_PLLC4_MUXED) && (pllc4_muxed_rate != 0)) {
    9601f7a4:	7100181f 	cmp	w0, #0x6
    9601f7a8:	54000081 	b.ne	9601f7b8 <tegrabl_car_get_clk_src_rate+0x14>  // b.any
    9601f7ac:	90000282 	adrp	x2, 9606f000 <eeproms+0x500>
    9601f7b0:	b94a0442 	ldr	w2, [x2, #2564]
    9601f7b4:	35000142 	cbnz	w2, 9601f7dc <tegrabl_car_get_clk_src_rate+0x38>
    9601f7b8:	51000400 	sub	w0, w0, #0x1
    9601f7bc:	7100701f 	cmp	w0, #0x1c
    9601f7c0:	540000a8 	b.hi	9601f7d4 <tegrabl_car_get_clk_src_rate+0x30>  // b.pmore
    9601f7c4:	d0000102 	adrp	x2, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f7c8:	913df842 	add	x2, x2, #0xf7e
    9601f7cc:	78605840 	ldrh	w0, [x2, w0, uxtw #1]
		*rate_khz = pllc4_muxed_rate;
		return TEGRABL_NO_ERROR;
	}

	return internal_tegrabl_car_get_clk_rate(
    9601f7d0:	17ffff41 	b	9601f4d4 <internal_tegrabl_car_get_clk_rate>
{
    9601f7d4:	52804f80 	mov	w0, #0x27c                 	// #636
    9601f7d8:	17fffffe 	b	9601f7d0 <tegrabl_car_get_clk_src_rate+0x2c>
			src_clk_tegrabl_to_bpmp(src_id),
			rate_khz);
}
    9601f7dc:	52800000 	mov	w0, #0x0                   	// #0
		*rate_khz = pllc4_muxed_rate;
    9601f7e0:	b9000022 	str	w2, [x1]
}
    9601f7e4:	d65f03c0 	ret

000000009601f7e8 <tegrabl_car_set_clk_src_rate>:
		uint32_t rate_khz,
		uint32_t *rate_set_khz)
{
	pr_debug("(%s,%d) %d\n", __func__, __LINE__, src_id);

	if (src_id == TEGRABL_CLK_SRC_PLLC4_MUXED) {
    9601f7e8:	7100181f 	cmp	w0, #0x6
    9601f7ec:	54000140 	b.eq	9601f814 <tegrabl_car_set_clk_src_rate+0x2c>  // b.none
    9601f7f0:	51000400 	sub	w0, w0, #0x1
    9601f7f4:	7100701f 	cmp	w0, #0x1c
    9601f7f8:	540000a8 	b.hi	9601f80c <tegrabl_car_set_clk_src_rate+0x24>  // b.pmore
    9601f7fc:	d0000103 	adrp	x3, 96041000 <map_to_storage_type_from_mb1_bct_type+0xdc>
    9601f800:	913df863 	add	x3, x3, #0xf7e
    9601f804:	78605860 	ldrh	w0, [x3, w0, uxtw #1]
		 *  Save the requested rate for future use */
		pllc4_muxed_rate = rate_khz;
		return TEGRABL_NO_ERROR;
	}

	return internal_tegrabl_car_set_clk_rate(
    9601f808:	17ffff53 	b	9601f554 <internal_tegrabl_car_set_clk_rate>
	if (src_id == TEGRABL_CLK_SRC_PLLC4_MUXED) {
    9601f80c:	52804f80 	mov	w0, #0x27c                 	// #636
    9601f810:	17fffffe 	b	9601f808 <tegrabl_car_set_clk_src_rate+0x20>
		pllc4_muxed_rate = rate_khz;
    9601f814:	90000280 	adrp	x0, 9606f000 <eeproms+0x500>
    9601f818:	b90a0401 	str	w1, [x0, #2564]
			src_clk_tegrabl_to_bpmp(src_id),
			rate_khz,
			rate_set_khz);
}
    9601f81c:	52800000 	mov	w0, #0x0                   	// #0
    9601f820:	d65f03c0 	ret

000000009601f824 <tegrabl_car_get_osc_freq_khz>:
 */
tegrabl_error_t tegrabl_car_get_osc_freq_khz(uint32_t *freq_khz)
{
	pr_debug("(%s,%d)\n", __func__, __LINE__);

	return internal_tegrabl_car_get_clk_rate(
    9601f824:	aa0003e1 	mov	x1, x0
    9601f828:	52804c80 	mov	w0, #0x264                 	// #612
    9601f82c:	17ffff2a 	b	9601f4d4 <internal_tegrabl_car_get_clk_rate>

000000009601f830 <tegrabl_car_init_pll_with_rate>:
 * @return - TEGRABL_NO_ERROR if success, error-reason otherwise.
 */
tegrabl_error_t tegrabl_car_init_pll_with_rate(
		tegrabl_clk_pll_id_t pll_id, uint32_t rate_khz,
		void *priv_data)
{
    9601f830:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	uint32_t rate_set_khz; /* filler - to avoid NULL exception */
	uint32_t clk_id = tegrabl_pllid_to_bpmp_pllid[pll_id];
    9601f834:	f0000102 	adrp	x2, 96042000 <__func__.4833+0x5>
    9601f838:	910df042 	add	x2, x2, #0x37c
{
    9601f83c:	910003fd 	mov	x29, sp
    9601f840:	a90153f3 	stp	x19, x20, [sp, #16]
    9601f844:	f90013f5 	str	x21, [sp, #32]
	uint32_t clk_id = tegrabl_pllid_to_bpmp_pllid[pll_id];
    9601f848:	b8605853 	ldr	w19, [x2, w0, uxtw #2]

	TEGRABL_UNUSED(priv_data);

	pr_debug("(%s,%d) %d, %d\n", __func__, __LINE__, pll_id, rate_khz);
	/* Check if requested PLL is supported (at present) */
	if (clk_id == TEGRA186_CLK_CLK_MAX)
    9601f84c:	7109f27f 	cmp	w19, #0x27c
    9601f850:	540003a0 	b.eq	9601f8c4 <tegrabl_car_init_pll_with_rate+0x94>  // b.none
    9601f854:	2a0103f5 	mov	w21, w1
    9601f858:	2a0003f4 	mov	w20, w0
		return TEGRABL_ERR_NOT_SUPPORTED;

	state = internal_tegrabl_car_clk_is_enabled(clk_id);
    9601f85c:	2a1303e0 	mov	w0, w19
    9601f860:	97fffedf 	bl	9601f3dc <internal_tegrabl_car_clk_is_enabled>
	/* Check if already initialized by BR/BL. If so, do nothing */
	if (state) {
    9601f864:	72001c1f 	tst	w0, #0xff
    9601f868:	54000180 	b.eq	9601f898 <tegrabl_car_init_pll_with_rate+0x68>  // b.none
		pr_info("(%s) Requested PLL(%d) already enabled. skipping init\n",
    9601f86c:	2a1403e2 	mov	w2, w20
    9601f870:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601f874:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f878:	91026c21 	add	x1, x1, #0x9b
    9601f87c:	910d0400 	add	x0, x0, #0x341
    9601f880:	94000b7c 	bl	96022670 <tegrabl_printf>
				__func__, pll_id);
		return TEGRABL_NO_ERROR;
    9601f884:	52800000 	mov	w0, #0x0                   	// #0
	if (TEGRABL_NO_ERROR != internal_tegrabl_car_clk_enable(clk_id)) {
		return TEGRABL_ERR_INVALID;
	}

	return TEGRABL_NO_ERROR;
}
    9601f888:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601f88c:	f94013f5 	ldr	x21, [sp, #32]
    9601f890:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9601f894:	d65f03c0 	ret
	if (TEGRABL_NO_ERROR != internal_tegrabl_car_set_clk_rate(
    9601f898:	9100f3a2 	add	x2, x29, #0x3c
    9601f89c:	2a1503e1 	mov	w1, w21
    9601f8a0:	2a1303e0 	mov	w0, w19
    9601f8a4:	97ffff2c 	bl	9601f554 <internal_tegrabl_car_set_clk_rate>
    9601f8a8:	34000060 	cbz	w0, 9601f8b4 <tegrabl_car_init_pll_with_rate+0x84>
		return TEGRABL_ERR_INVALID;
    9601f8ac:	52800040 	mov	w0, #0x2                   	// #2
    9601f8b0:	17fffff6 	b	9601f888 <tegrabl_car_init_pll_with_rate+0x58>
	if (TEGRABL_NO_ERROR != internal_tegrabl_car_clk_enable(clk_id)) {
    9601f8b4:	2a1303e0 	mov	w0, w19
    9601f8b8:	97ffff4a 	bl	9601f5e0 <internal_tegrabl_car_clk_enable>
    9601f8bc:	34fffe60 	cbz	w0, 9601f888 <tegrabl_car_init_pll_with_rate+0x58>
    9601f8c0:	17fffffb 	b	9601f8ac <tegrabl_car_init_pll_with_rate+0x7c>
		return TEGRABL_ERR_NOT_SUPPORTED;
    9601f8c4:	52800020 	mov	w0, #0x1                   	// #1
    9601f8c8:	17fffff0 	b	9601f888 <tegrabl_car_init_pll_with_rate+0x58>

000000009601f8cc <tegrabl_car_clk_enable>:
 * @return - TEGRABL_NO_ERROR if success, error-reason otherwise.
 */
tegrabl_error_t tegrabl_car_clk_enable(tegrabl_module_t module,
					uint8_t instance,
					void *priv_data)
{
    9601f8cc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	/* Do QSPI specific init based on priv_data */
	if ((module == TEGRABL_MODULE_QSPI) && (priv_data != NULL)) {
    9601f8d0:	f100005f 	cmp	x2, #0x0
    9601f8d4:	7a431800 	ccmp	w0, #0x3, #0x0, ne  // ne = any
{
    9601f8d8:	910003fd 	mov	x29, sp
    9601f8dc:	a90153f3 	stp	x19, x20, [sp, #16]
	if ((module == TEGRABL_MODULE_QSPI) && (priv_data != NULL)) {
    9601f8e0:	540008e1 	b.ne	9601f9fc <tegrabl_car_clk_enable+0x130>  // b.any
		struct qspi_clk_data *clk_data;

		clk_data = (struct qspi_clk_data *)priv_data;

		/* Map TEGRABL_CLK_SRC ids to bpmp-abi clk ids */
		switch (clk_data->clk_src) {
    9601f8e4:	b9400053 	ldr	w19, [x2]
    9601f8e8:	aa0203f4 	mov	x20, x2
    9601f8ec:	7100067f 	cmp	w19, #0x1
    9601f8f0:	540002e0 	b.eq	9601f94c <tegrabl_car_clk_enable+0x80>  // b.none
    9601f8f4:	71001a7f 	cmp	w19, #0x6
    9601f8f8:	540007a1 	b.ne	9601f9ec <tegrabl_car_clk_enable+0x120>  // b.any
		case TEGRABL_CLK_SRC_PLLC4_MUXED:
			/* Fetch exact parent info in case of C4_MUXED */
			/* 1. Obtain pllc4 vco freq */
			internal_tegrabl_car_get_clk_rate(TEGRA186_CLK_PLLC4_VCO,
    9601f8fc:	9100b3a1 	add	x1, x29, #0x2c
    9601f900:	52804180 	mov	w0, #0x20c                 	// #524
    9601f904:	97fffef4 	bl	9601f4d4 <internal_tegrabl_car_get_clk_rate>
											  &c4_vco_khz);
			/* 2. Calculate divisor */
			tegrabl_car_get_clk_src_rate(TEGRABL_CLK_SRC_PLLC4_MUXED,
    9601f908:	9100a3a1 	add	x1, x29, #0x28
    9601f90c:	2a1303e0 	mov	w0, w19
    9601f910:	97ffffa5 	bl	9601f7a4 <tegrabl_car_get_clk_src_rate>
										 &rate_set_khz);
			c4_mux_sel = div_round_off(c4_vco_khz, rate_set_khz);
    9601f914:	294503a1 	ldp	w1, w0, [x29, #40]
	if (((n) % (d)) >= ((d)/2))
    9601f918:	1ac10813 	udiv	w19, w0, w1
    9601f91c:	1b018260 	msub	w0, w19, w1, w0
		return (n) / (d) + 1;
    9601f920:	6b41041f 	cmp	w0, w1, lsr #1
			/* 3. Obtain parent info */
			pr_info("c4 vco-div (mux selection) = %d\n", c4_mux_sel);
    9601f924:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
		return (n) / (d) + 1;
    9601f928:	1a933673 	cinc	w19, w19, cs  // cs = hs, nlast
			pr_info("c4 vco-div (mux selection) = %d\n", c4_mux_sel);
    9601f92c:	910ab000 	add	x0, x0, #0x2ac
    9601f930:	2a1303e1 	mov	w1, w19
    9601f934:	94000b4f 	bl	96022670 <tegrabl_printf>
			switch (c4_mux_sel) {
    9601f938:	71000a7f 	cmp	w19, #0x2
    9601f93c:	540005c0 	b.eq	9601f9f4 <tegrabl_car_clk_enable+0x128>  // b.none
			case (2):
				src = TEGRA186_CLK_PLLC4_VCO_DIV2;
				break;
			case (3):
			default:
				src = TEGRA186_CLK_PLLC4_OUT1;
    9601f940:	7100167f 	cmp	w19, #0x5
    9601f944:	1a9f17f3 	cset	w19, eq  // eq = none
    9601f948:	11045673 	add	w19, w19, #0x115
			src = TEGRA186_CLK_PLLP_OUT0;
			break;
		}

		/* Set parent */
		err = internal_tegrabl_car_set_clk_src(TEGRA186_CLK_QSPI, src);
    9601f94c:	2a1303e1 	mov	w1, w19
    9601f950:	52801080 	mov	w0, #0x84                  	// #132
    9601f954:	97fffebe 	bl	9601f44c <internal_tegrabl_car_set_clk_src>
		if (err != TEGRABL_NO_ERROR) {
    9601f958:	35000420 	cbnz	w0, 9601f9dc <tegrabl_car_clk_enable+0x110>
			goto fail;
		}

		/* Get parent rate */
		err = internal_tegrabl_car_get_clk_rate(src, &rate_set_khz);
    9601f95c:	9100a3a1 	add	x1, x29, #0x28
    9601f960:	2a1303e0 	mov	w0, w19
    9601f964:	97fffedc 	bl	9601f4d4 <internal_tegrabl_car_get_clk_rate>
		if (err != TEGRABL_NO_ERROR) {
    9601f968:	350003a0 	cbnz	w0, 9601f9dc <tegrabl_car_clk_enable+0x110>
		}

		/* Derive clk rate from src rate and divisor */
		/* clk_rate = (src_rate / ((N / 2) + 1)) */
		rate_khz =
			(rate_set_khz / (div_round_off(clk_data->clk_divisor, 2) + 1));
    9601f96c:	b9400693 	ldr	w19, [x20, #4]
    9601f970:	b9402ba1 	ldr	w1, [x29, #40]
    9601f974:	12000260 	and	w0, w19, #0x1
    9601f978:	0b530413 	add	w19, w0, w19, lsr #1
		pr_info("QSPI source rate = %d Khz\n", rate_set_khz);
    9601f97c:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
			(rate_set_khz / (div_round_off(clk_data->clk_divisor, 2) + 1));
    9601f980:	11000673 	add	w19, w19, #0x1
		pr_info("QSPI source rate = %d Khz\n", rate_set_khz);
    9601f984:	910b4000 	add	x0, x0, #0x2d0
		rate_khz =
    9601f988:	1ad30833 	udiv	w19, w1, w19
		pr_info("QSPI source rate = %d Khz\n", rate_set_khz);
    9601f98c:	94000b39 	bl	96022670 <tegrabl_printf>
		pr_info("Requested rate for QSPI clock = %d Khz\n", rate_khz);
    9601f990:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f994:	910bb800 	add	x0, x0, #0x2ee
    9601f998:	2a1303e1 	mov	w1, w19
    9601f99c:	94000b35 	bl	96022670 <tegrabl_printf>
		err = internal_tegrabl_car_set_clk_rate
    9601f9a0:	9100a3a2 	add	x2, x29, #0x28
    9601f9a4:	2a1303e1 	mov	w1, w19
    9601f9a8:	52801080 	mov	w0, #0x84                  	// #132
    9601f9ac:	97fffeea 	bl	9601f554 <internal_tegrabl_car_set_clk_rate>
				(TEGRA186_CLK_QSPI, rate_khz, &rate_set_khz);
		if (err != TEGRABL_NO_ERROR) {
    9601f9b0:	35000160 	cbnz	w0, 9601f9dc <tegrabl_car_clk_enable+0x110>
			goto fail;
		}
		pr_info("BPMP-set rate for QSPI clk = %d Khz\n", rate_set_khz);
    9601f9b4:	b9402ba1 	ldr	w1, [x29, #40]
    9601f9b8:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601f9bc:	910c6400 	add	x0, x0, #0x319
    9601f9c0:	94000b2c 	bl	96022670 <tegrabl_printf>

		/* Enable QSPI clk */
		err = internal_tegrabl_car_clk_enable(TEGRA186_CLK_QSPI);
    9601f9c4:	52801080 	mov	w0, #0x84                  	// #132
    9601f9c8:	97ffff06 	bl	9601f5e0 <internal_tegrabl_car_clk_enable>
		if (err != TEGRABL_NO_ERROR) {
    9601f9cc:	35000080 	cbnz	w0, 9601f9dc <tegrabl_car_clk_enable+0x110>
			goto fail;
		}

#if defined(CONFIG_ENABLE_QSPI_QDDR_READ)
		err = internal_tegrabl_car_clk_enable(TEGRA186_CLK_QSPI_OUT);
    9601f9d0:	528026a0 	mov	w0, #0x135                 	// #309
	}

	pr_debug("(%s,%d) %d, %d\n", __func__, __LINE__,
			 module, instance);

	err = internal_tegrabl_car_clk_enable(
    9601f9d4:	97ffff03 	bl	9601f5e0 <internal_tegrabl_car_clk_enable>
			tegrabl_module_to_bpmp_id(module, instance, MOD_CLK));

fail:
	if (err != TEGRABL_NO_ERROR) {
    9601f9d8:	34000040 	cbz	w0, 9601f9e0 <tegrabl_car_clk_enable+0x114>
		err = TEGRABL_ERROR_HIGHEST_MODULE(err);
    9601f9dc:	53187c00 	lsr	w0, w0, #24
	}

	return err;
}
    9601f9e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601f9e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601f9e8:	d65f03c0 	ret
			src = TEGRA186_CLK_PLLP_OUT0;
    9601f9ec:	528021b3 	mov	w19, #0x10d                 	// #269
    9601f9f0:	17ffffd7 	b	9601f94c <tegrabl_car_clk_enable+0x80>
				src = TEGRA186_CLK_PLLC4_VCO_DIV2;
    9601f9f4:	528042f3 	mov	w19, #0x217                 	// #535
    9601f9f8:	17ffffd5 	b	9601f94c <tegrabl_car_clk_enable+0x80>
    9601f9fc:	12001c21 	and	w1, w1, #0xff
			tegrabl_module_to_bpmp_id(module, instance, MOD_CLK));
    9601fa00:	52800002 	mov	w2, #0x0                   	// #0
    9601fa04:	97fffdbc 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
    9601fa08:	17fffff3 	b	9601f9d4 <tegrabl_car_clk_enable+0x108>

000000009601fa0c <tegrabl_car_set_clk_rate>:
{
    9601fa0c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9601fa10:	910003fd 	mov	x29, sp
    9601fa14:	a90153f3 	stp	x19, x20, [sp, #16]
    9601fa18:	12001c33 	and	w19, w1, #0xff
    9601fa1c:	a9025bf5 	stp	x21, x22, [sp, #32]
    9601fa20:	2a0203f4 	mov	w20, w2
    9601fa24:	aa0303f5 	mov	x21, x3
    9601fa28:	2a0003f6 	mov	w22, w0
	tegrabl_car_clk_enable(module, instance, NULL);
    9601fa2c:	2a1303e1 	mov	w1, w19
    9601fa30:	d2800002 	mov	x2, #0x0                   	// #0
    9601fa34:	97ffffa6 	bl	9601f8cc <tegrabl_car_clk_enable>
			tegrabl_module_to_bpmp_id(module, instance, MOD_CLK),
    9601fa38:	2a1303e1 	mov	w1, w19
    9601fa3c:	52800002 	mov	w2, #0x0                   	// #0
    9601fa40:	2a1603e0 	mov	w0, w22
    9601fa44:	97fffdac 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
	return internal_tegrabl_car_set_clk_rate(
    9601fa48:	aa1503e2 	mov	x2, x21
    9601fa4c:	2a1403e1 	mov	w1, w20
}
    9601fa50:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601fa54:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9601fa58:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return internal_tegrabl_car_set_clk_rate(
    9601fa5c:	17fffebe 	b	9601f554 <internal_tegrabl_car_set_clk_rate>

000000009601fa60 <tegrabl_car_clk_disable>:
 * @instance  Instance of the module
 * @return - TEGRABL_NO_ERROR if success, error-reason otherwise.
 */
tegrabl_error_t tegrabl_car_clk_disable(tegrabl_module_t module,
					uint8_t instance)
{
    9601fa60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	pr_debug("(%s,%d) %d, %d\n", __func__, __LINE__,
			 module, instance);

	return internal_tegrabl_car_clk_disable(
			tegrabl_module_to_bpmp_id(module, instance, MOD_CLK));
    9601fa64:	52800002 	mov	w2, #0x0                   	// #0
{
    9601fa68:	910003fd 	mov	x29, sp
			tegrabl_module_to_bpmp_id(module, instance, MOD_CLK));
    9601fa6c:	97fffda2 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
}
    9601fa70:	a8c17bfd 	ldp	x29, x30, [sp], #16
	return internal_tegrabl_car_clk_disable(
    9601fa74:	17fffef3 	b	9601f640 <internal_tegrabl_car_clk_disable>

000000009601fa78 <tegrabl_set_fuse_reg_visibility>:
{
	/* Stub to return TRUE
	 * BPMP fw keeps this enabled */
	TEGRABL_UNUSED(visibility);
	return true;
}
    9601fa78:	52800020 	mov	w0, #0x1                   	// #1
    9601fa7c:	d65f03c0 	ret

000000009601fa80 <tegrabl_car_rst_set>:
 * @instance - Instance of the module
 * @return - TEGRABL_NO_ERROR if success, error-reason otherwise.
 */
tegrabl_error_t tegrabl_car_rst_set(tegrabl_module_t module,
				uint8_t instance)
{
    9601fa80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	pr_debug("(%s,%d) %d, %d\n", __func__, __LINE__,
			 module, instance);

	return internal_tegrabl_car_rst(
				tegrabl_module_to_bpmp_id(module, instance, MOD_RST),
    9601fa84:	52800022 	mov	w2, #0x1                   	// #1
{
    9601fa88:	910003fd 	mov	x29, sp
				tegrabl_module_to_bpmp_id(module, instance, MOD_RST),
    9601fa8c:	97fffd9a 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
				CMD_RESET_ASSERT);
}
    9601fa90:	a8c17bfd 	ldp	x29, x30, [sp], #16
	return internal_tegrabl_car_rst(
    9601fa94:	52800021 	mov	w1, #0x1                   	// #1
    9601fa98:	17ffff0a 	b	9601f6c0 <internal_tegrabl_car_rst>

000000009601fa9c <tegrabl_car_rst_clear>:
 * @instance - Instance of the module
 * @return - TEGRABL_NO_ERROR if success, error-reason otherwise.
 */
tegrabl_error_t tegrabl_car_rst_clear(tegrabl_module_t module,
				uint8_t instance)
{
    9601fa9c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	pr_debug("(%s,%d) %d, %d\n", __func__, __LINE__,
			 module, instance);

	return internal_tegrabl_car_rst(
				tegrabl_module_to_bpmp_id(module, instance, MOD_RST),
    9601faa0:	52800022 	mov	w2, #0x1                   	// #1
{
    9601faa4:	910003fd 	mov	x29, sp
				tegrabl_module_to_bpmp_id(module, instance, MOD_RST),
    9601faa8:	97fffd93 	bl	9601f0f4 <tegrabl_module_to_bpmp_id>
				CMD_RESET_DEASSERT);
}
    9601faac:	a8c17bfd 	ldp	x29, x30, [sp], #16
	return internal_tegrabl_car_rst(
    9601fab0:	52800041 	mov	w1, #0x2                   	// #2
    9601fab4:	17ffff03 	b	9601f6c0 <internal_tegrabl_car_rst>

000000009601fab8 <tegrabl_ufs_clock_deinit>:

	return;
}

void tegrabl_ufs_clock_deinit(void)
{
    9601fab8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	uint32_t i;

	pr_info("disabling ufs clocks\n");
    9601fabc:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fac0:	910f1000 	add	x0, x0, #0x3c4
{
    9601fac4:	910003fd 	mov	x29, sp
    9601fac8:	a90153f3 	stp	x19, x20, [sp, #16]
	pr_info("disabling ufs clocks\n");
    9601facc:	94000ae9 	bl	96022670 <tegrabl_printf>
    9601fad0:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fad4:	91114000 	add	x0, x0, #0x450
    9601fad8:	91033014 	add	x20, x0, #0xcc
    9601fadc:	91006013 	add	x19, x0, #0x18
	for (i = NUM_UFS_CLKS - 1; i > 2; i--) {
		/* 1. disable clks */
		internal_tegrabl_car_clk_disable(ufs_clk_data[i][NAME_INDEX]);
    9601fae0:	b85f4680 	ldr	w0, [x20], #-12
    9601fae4:	97fffed7 	bl	9601f640 <internal_tegrabl_car_clk_disable>
	for (i = NUM_UFS_CLKS - 1; i > 2; i--) {
    9601fae8:	eb13029f 	cmp	x20, x19
    9601faec:	54ffffa1 	b.ne	9601fae0 <tegrabl_ufs_clock_deinit+0x28>  // b.any
	}

}
    9601faf0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601faf4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9601faf8:	d65f03c0 	ret

000000009601fafc <tegrabl_ufs_disable_device>:
void tegrabl_ufs_disable_device(void)
{
        uint32_t reg_data;

        /* disable reference clock to Device. OE pin on UFS GPIO pad */
        reg_data = NV_READ32(UFSHC_AUX_UFSHC_DEV_CTRL_0);
    9601fafc:	d2800280 	mov	x0, #0x14                  	// #20
    9601fb00:	f2a048c0 	movk	x0, #0x246, lsl #16
    9601fb04:	b9400001 	ldr	w1, [x0]
        reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX,
    9601fb08:	121f7821 	and	w1, w1, #0xfffffffe
                        UFSHC_DEV_CTRL, UFSHC_DEV_CLK_EN, 0, reg_data);
        NV_WRITE32(UFSHC_AUX_UFSHC_DEV_CTRL_0, reg_data);
    9601fb0c:	b9000001 	str	w1, [x0]

        /* reset to device.*/
        reg_data = NV_READ32(UFSHC_AUX_UFSHC_DEV_CTRL_0);
    9601fb10:	b9400001 	ldr	w1, [x0]
        reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX,
    9601fb14:	121e7821 	and	w1, w1, #0xfffffffd
                        UFSHC_DEV_CTRL, UFSHC_DEV_RESET, 0, reg_data);
        NV_WRITE32(UFSHC_AUX_UFSHC_DEV_CTRL_0, reg_data);
    9601fb18:	b9000001 	str	w1, [x0]

}
    9601fb1c:	d65f03c0 	ret

000000009601fb20 <tegrabl_ufs_clock_init>:

tegrabl_error_t tegrabl_ufs_clock_init(void)
{
    9601fb20:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	pr_info("Programming ufs clocks\n");
    9601fb24:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fb28:	910f7400 	add	x0, x0, #0x3dd
{
    9601fb2c:	910003fd 	mov	x29, sp
    9601fb30:	a90153f3 	stp	x19, x20, [sp, #16]
    9601fb34:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint32_t rate = 0;
    9601fb38:	910143b5 	add	x21, x29, #0x50
{
    9601fb3c:	a90363f7 	stp	x23, x24, [sp, #48]
	pr_info("Programming ufs clocks\n");
    9601fb40:	94000acc 	bl	96022670 <tegrabl_printf>
    9601fb44:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fb48:	91114013 	add	x19, x0, #0x450
    9601fb4c:	91036277 	add	x23, x19, #0xd8
    9601fb50:	aa0003f4 	mov	x20, x0
	uint32_t rate = 0;
    9601fb54:	b81fcebf 	str	wzr, [x21, #-4]!
		internal_tegrabl_car_clk_enable(ufs_clk_data[i][NAME_INDEX]);
    9601fb58:	b9400276 	ldr	w22, [x19]
    9601fb5c:	2a1603e0 	mov	w0, w22
    9601fb60:	97fffea0 	bl	9601f5e0 <internal_tegrabl_car_clk_enable>
		tegrabl_udelay(200);
    9601fb64:	d2801900 	mov	x0, #0xc8                  	// #200
    9601fb68:	9400004f 	bl	9601fca4 <tegrabl_udelay>
		if (ufs_clk_data[i][UFS_PARENT_INDEX] != TEGRA186_CLK_CLK_MAX) {
    9601fb6c:	b9400a61 	ldr	w1, [x19, #8]
    9601fb70:	7109f03f 	cmp	w1, #0x27c
    9601fb74:	54000060 	b.eq	9601fb80 <tegrabl_ufs_clock_init+0x60>  // b.none
			internal_tegrabl_car_set_clk_src(
    9601fb78:	2a1603e0 	mov	w0, w22
    9601fb7c:	97fffe34 	bl	9601f44c <internal_tegrabl_car_set_clk_src>
		tegrabl_udelay(200);
    9601fb80:	d2801900 	mov	x0, #0xc8                  	// #200
    9601fb84:	94000048 	bl	9601fca4 <tegrabl_udelay>
		if (ufs_clk_data[i][UFS_RATE_INDEX] != 0) {
    9601fb88:	b9400661 	ldr	w1, [x19, #4]
    9601fb8c:	34000081 	cbz	w1, 9601fb9c <tegrabl_ufs_clock_init+0x7c>
			internal_tegrabl_car_set_clk_rate(
    9601fb90:	aa1503e2 	mov	x2, x21
    9601fb94:	2a1603e0 	mov	w0, w22
    9601fb98:	97fffe6f 	bl	9601f554 <internal_tegrabl_car_set_clk_rate>
		tegrabl_udelay(200);
    9601fb9c:	d2801900 	mov	x0, #0xc8                  	// #200
    9601fba0:	91003273 	add	x19, x19, #0xc
    9601fba4:	94000040 	bl	9601fca4 <tegrabl_udelay>
	for (i = 0; i < NUM_UFS_CLKS; i++) {
    9601fba8:	eb17027f 	cmp	x19, x23
    9601fbac:	54fffd61 	b.ne	9601fb58 <tegrabl_ufs_clock_init+0x38>  // b.any
		pr_info("index=%d enabled=%d rate=%u\n", i, enabled, rate);
    9601fbb0:	f0000115 	adrp	x21, 96042000 <__func__.4833+0x5>
			internal_tegrabl_car_clk_is_enabled(ufs_clk_data[i][NAME_INDEX]);
    9601fbb4:	91114294 	add	x20, x20, #0x450
		pr_info("index=%d enabled=%d rate=%u\n", i, enabled, rate);
    9601fbb8:	910fe2b5 	add	x21, x21, #0x3f8
	for (i = 0; i < NUM_UFS_CLKS; i++) {
    9601fbbc:	d2800013 	mov	x19, #0x0                   	// #0
			internal_tegrabl_car_clk_is_enabled(ufs_clk_data[i][NAME_INDEX]);
    9601fbc0:	d2800198 	mov	x24, #0xc                   	// #12
    9601fbc4:	9b187e60 	mul	x0, x19, x24
    9601fbc8:	b8746816 	ldr	w22, [x0, x20]
		enabled =
    9601fbcc:	2a1603e0 	mov	w0, w22
    9601fbd0:	97fffe03 	bl	9601f3dc <internal_tegrabl_car_clk_is_enabled>
		internal_tegrabl_car_get_clk_rate(ufs_clk_data[i][NAME_INDEX], &rate);
    9601fbd4:	910133a1 	add	x1, x29, #0x4c
		enabled =
    9601fbd8:	12001c17 	and	w23, w0, #0xff
		internal_tegrabl_car_get_clk_rate(ufs_clk_data[i][NAME_INDEX], &rate);
    9601fbdc:	2a1603e0 	mov	w0, w22
    9601fbe0:	97fffe3d 	bl	9601f4d4 <internal_tegrabl_car_get_clk_rate>
		pr_info("index=%d enabled=%d rate=%u\n", i, enabled, rate);
    9601fbe4:	b9404fa3 	ldr	w3, [x29, #76]
    9601fbe8:	2a1303e1 	mov	w1, w19
    9601fbec:	2a1703e2 	mov	w2, w23
    9601fbf0:	aa1503e0 	mov	x0, x21
    9601fbf4:	91000673 	add	x19, x19, #0x1
    9601fbf8:	94000a9e 	bl	96022670 <tegrabl_printf>
	for (i = 0; i < NUM_UFS_CLKS; i++) {
    9601fbfc:	f1004a7f 	cmp	x19, #0x12
    9601fc00:	54fffe21 	b.ne	9601fbc4 <tegrabl_ufs_clock_init+0xa4>  // b.any
		internal_tegrabl_car_rst(ufs_rst_data[i], CMD_RESET_DEASSERT);
    9601fc04:	f0000114 	adrp	x20, 96042000 <__func__.4833+0x5>
    9601fc08:	9114a294 	add	x20, x20, #0x528
	for (i = 0; i < NUM_UFS_CLKS; i++) {
    9601fc0c:	d2800013 	mov	x19, #0x0                   	// #0
		internal_tegrabl_car_rst(ufs_rst_data[i], CMD_RESET_DEASSERT);
    9601fc10:	b8737a80 	ldr	w0, [x20, x19, lsl #2]
    9601fc14:	52800041 	mov	w1, #0x2                   	// #2
    9601fc18:	91000673 	add	x19, x19, #0x1
    9601fc1c:	97fffea9 	bl	9601f6c0 <internal_tegrabl_car_rst>
		tegrabl_udelay(200);
    9601fc20:	d2801900 	mov	x0, #0xc8                  	// #200
    9601fc24:	94000020 	bl	9601fca4 <tegrabl_udelay>
	for (i = 0; i < NUM_UFS_RSTS; i++) {
    9601fc28:	f100227f 	cmp	x19, #0x8
    9601fc2c:	54ffff21 	b.ne	9601fc10 <tegrabl_ufs_clock_init+0xf0>  // b.any
	reg_data = NV_READ32(NV_ADDRESS_MAP_PMC_IMPL_BASE +
    9601fc30:	d2801e81 	mov	x1, #0xf4                  	// #244
    9601fc34:	f2a186c1 	movk	x1, #0xc36, lsl #16
	/* Configure clocks and de-assert relevant reset modules */
	tegrabl_ufs_program_clock();

	return TEGRABL_NO_ERROR;
}
    9601fc38:	a94153f3 	ldp	x19, x20, [sp, #16]
	reg_data = NV_READ32(NV_ADDRESS_MAP_PMC_IMPL_BASE +
    9601fc3c:	b9400020 	ldr	w0, [x1]
}
    9601fc40:	a9425bf5 	ldp	x21, x22, [sp, #32]
	reg_data = NV_FLD_SET_DRF_DEF(PMC_IMPL, UFSHC_PWR_CNTRL,
    9601fc44:	121f7800 	and	w0, w0, #0xfffffffe
}
    9601fc48:	a94363f7 	ldp	x23, x24, [sp, #48]
	NV_WRITE32(NV_ADDRESS_MAP_PMC_IMPL_BASE + PMC_IMPL_UFSHC_PWR_CNTRL_0,
    9601fc4c:	b9000020 	str	w0, [x1]
	reg_data = NV_READ32(UFSHC_AUX_UFSHC_DEV_CTRL_0);
    9601fc50:	d2800280 	mov	x0, #0x14                  	// #20
    9601fc54:	f2a048c0 	movk	x0, #0x246, lsl #16
    9601fc58:	b9400001 	ldr	w1, [x0]
	reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX, UFSHC_DEV_CTRL,
    9601fc5c:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32(UFSHC_AUX_UFSHC_DEV_CTRL_0, reg_data);
    9601fc60:	b9000001 	str	w1, [x0]
	reg_data = NV_READ32(UFSHC_AUX_UFSHC_DEV_CTRL_0);
    9601fc64:	b9400001 	ldr	w1, [x0]
	reg_data = NV_FLD_SET_DRF_NUM(UFSHC_AUX, UFSHC_DEV_CTRL,
    9601fc68:	321f0021 	orr	w1, w1, #0x2
	NV_WRITE32(UFSHC_AUX_UFSHC_DEV_CTRL_0, reg_data);
    9601fc6c:	b9000001 	str	w1, [x0]
}
    9601fc70:	52800000 	mov	w0, #0x0                   	// #0
    9601fc74:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9601fc78:	d65f03c0 	ret

000000009601fc7c <tegrabl_get_timestamp_us>:
 #define ASMLOOP_DELAY_US	30U
 #define ASMLOOP_COUNT		6U

time_t tegrabl_get_timestamp_us(void)
{
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fc7c:	d2a185c0 	mov	x0, #0xc2e0000             	// #204341248
    9601fc80:	b9400000 	ldr	w0, [x0]
}
    9601fc84:	2a0003e0 	mov	w0, w0
    9601fc88:	d65f03c0 	ret

000000009601fc8c <tegrabl_get_timestamp_ms>:
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fc8c:	d2a185c0 	mov	x0, #0xc2e0000             	// #204341248

time_t tegrabl_get_timestamp_ms(void)
{
	return tegrabl_get_timestamp_us()/1000U;
}
    9601fc90:	d2807d01 	mov	x1, #0x3e8                 	// #1000
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fc94:	b9400000 	ldr	w0, [x0]
    9601fc98:	2a0003e0 	mov	w0, w0
}
    9601fc9c:	9ac10800 	udiv	x0, x0, x1
    9601fca0:	d65f03c0 	ret

000000009601fca4 <tegrabl_udelay>:
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fca4:	d2a185c1 	mov	x1, #0xc2e0000             	// #204341248
	time_t t0;
	time_t t1;

	t0 = tegrabl_get_timestamp_us();

	if (usec > ASMLOOP_DELAY_US) {
    9601fca8:	f100781f 	cmp	x0, #0x1e
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fcac:	b9400022 	ldr	w2, [x1]
    9601fcb0:	2a0203e2 	mov	w2, w2
	if (usec > ASMLOOP_DELAY_US) {
    9601fcb4:	54000209 	b.ls	9601fcf4 <tegrabl_udelay+0x50>  // b.plast
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fcb8:	aa0103e3 	mov	x3, x1
		while (true) {
			t1 = tegrabl_get_timestamp_us();
			/* its 30usec from here */
			if ((t1 - t0) > (usec - ASMLOOP_DELAY_US)) {
    9601fcbc:	d1007804 	sub	x4, x0, #0x1e
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fcc0:	b9400061 	ldr	w1, [x3]
    9601fcc4:	2a0103e1 	mov	w1, w1
			if ((t1 - t0) > (usec - ASMLOOP_DELAY_US)) {
    9601fcc8:	cb020021 	sub	x1, x1, x2
    9601fccc:	eb04003f 	cmp	x1, x4
    9601fcd0:	54000128 	b.hi	9601fcf4 <tegrabl_udelay+0x50>  // b.pmore
	asm volatile ("isb" : : : "memory", "cc");
}

static inline void tegrabl_nop(void)
{
	asm volatile ("nop" : : : "memory", "cc");
    9601fcd4:	d503201f 	nop
    9601fcd8:	d503201f 	nop
    9601fcdc:	d503201f 	nop
    9601fce0:	d503201f 	nop
    9601fce4:	d503201f 	nop
    9601fce8:	d503201f 	nop
}

static inline void tegrabl_yield(void)
{
	asm volatile ("yield" : : : "memory", "cc");
    9601fcec:	d503203f 	yield
    9601fcf0:	17fffff4 	b	9601fcc0 <tegrabl_udelay+0x1c>
	return NV_READ32(NV_ADDRESS_MAP_TSCUS_BASE);
    9601fcf4:	d2a185c3 	mov	x3, #0xc2e0000             	// #204341248
    9601fcf8:	b9400061 	ldr	w1, [x3]
    9601fcfc:	2a0103e1 	mov	w1, w1
			tegrabl_yield();
		}
	}
	t1 = tegrabl_get_timestamp_us();

	while ((t1 - t0) <= usec) {
    9601fd00:	cb020021 	sub	x1, x1, x2
    9601fd04:	eb00003f 	cmp	x1, x0
    9601fd08:	54000049 	b.ls	9601fd10 <tegrabl_udelay+0x6c>  // b.plast
		tegrabl_yield();
		t1 = tegrabl_get_timestamp_us();
	}
}
    9601fd0c:	d65f03c0 	ret
    9601fd10:	d503203f 	yield
    9601fd14:	17fffff9 	b	9601fcf8 <tegrabl_udelay+0x54>

000000009601fd18 <tegrabl_mdelay>:

void tegrabl_mdelay(time_t msec)
{
	tegrabl_udelay(msec * 1000U);
    9601fd18:	d2807d01 	mov	x1, #0x3e8                 	// #1000
    9601fd1c:	9b017c00 	mul	x0, x0, x1
    9601fd20:	17ffffe1 	b	9601fca4 <tegrabl_udelay>

000000009601fd24 <cb_vic_scrub>:

	return TEGRABL_NO_ERROR;
}

tegrabl_error_t cb_vic_scrub(uint32_t instance, uint32_t cmd, void *p_buf)
{
    9601fd24:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9601fd28:	910003fd 	mov	x29, sp
    9601fd2c:	a90153f3 	stp	x19, x20, [sp, #16]
    9601fd30:	2a0103f4 	mov	w20, w1
    9601fd34:	f90013f5 	str	x21, [sp, #32]
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	TEGRABL_ASSERT(instance < MAX_VIC_CONTROLLERS);

	switch (cmd) {
    9601fd38:	340000a1 	cbz	w1, 9601fd4c <cb_vic_scrub+0x28>
    9601fd3c:	7100043f 	cmp	w1, #0x1
    9601fd40:	54001540 	b.eq	9601ffe8 <cb_vic_scrub+0x2c4>  // b.none
		if (err != TEGRABL_NO_ERROR)
			goto fail;
		break;
	}
	default:
			err = TEGRABL_ERR_BAD_PARAMETER;
    9601fd44:	52800542 	mov	w2, #0x2a                  	// #42
    9601fd48:	14000028 	b	9601fde8 <cb_vic_scrub+0xc4>
		err = cb_vic_copy(p_vic_transfer_config->dest_addr_phy,
    9601fd4c:	a940a043 	ldp	x3, x8, [x2, #8]
	if (size >= SIZE_1M) {
    9601fd50:	12bffe00 	mov	w0, #0xfffff               	// #1048575
		err = cb_vic_copy(p_vic_transfer_config->dest_addr_phy,
    9601fd54:	b9400042 	ldr	w2, [x2]
		block_height = VIC_BLOCK_HEIGHT2;
    9601fd58:	52807ff3 	mov	w19, #0x3ff                 	// #1023
    9601fd5c:	52800087 	mov	w7, #0x4                   	// #4
    9601fd60:	52880001 	mov	w1, #0x4000                	// #16384
    9601fd64:	6b00005f 	cmp	w2, w0
	if ((size > VIC_SRUB_SIZE_MAX) || (size < VIC_SRUB_SIZE_MIN) ||
    9601fd68:	51100044 	sub	w4, w2, #0x400
		block_height = VIC_BLOCK_HEIGHT2;
    9601fd6c:	1a938013 	csel	w19, w0, w19, hi  // hi = pmore
    9601fd70:	52800800 	mov	w0, #0x40                  	// #64
    9601fd74:	1a9f80e6 	csel	w6, w7, wzr, hi  // hi = pmore
    9601fd78:	1a808021 	csel	w1, w1, w0, hi  // hi = pmore
	if ((size > VIC_SRUB_SIZE_MAX) || (size < VIC_SRUB_SIZE_MIN) ||
    9601fd7c:	32164fe0 	mov	w0, #0x3ffffc00            	// #1073740800
    9601fd80:	6b00009f 	cmp	w4, w0
    9601fd84:	54000068 	b.hi	9601fd90 <cb_vic_scrub+0x6c>  // b.pmore
    9601fd88:	6a13005f 	tst	w2, w19
    9601fd8c:	540001a0 	b.eq	9601fdc0 <cb_vic_scrub+0x9c>  // b.none
		pr_error("%s Size %d not valid,Max = 0x%x,Min = 0x%x or not aligned ",
    9601fd90:	52808004 	mov	w4, #0x400                 	// #1024
    9601fd94:	52a80003 	mov	w3, #0x40000000            	// #1073741824
    9601fd98:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601fd9c:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fda0:	9115c021 	add	x1, x1, #0x570
    9601fda4:	91180000 	add	x0, x0, #0x600
    9601fda8:	94000a32 	bl	96022670 <tegrabl_printf>
		pr_error("%d bytes\n", (size_alignment + 1));
    9601fdac:	11000661 	add	w1, w19, #0x1
    9601fdb0:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fdb4:	9118f800 	add	x0, x0, #0x63e
    9601fdb8:	94000a2e 	bl	96022670 <tegrabl_printf>
    9601fdbc:	17ffffe2 	b	9601fd44 <cb_vic_scrub+0x20>
	width  = ((size / CB_VIC_BYTES_PER_PIXEL) / height);
    9601fdc0:	53027c42 	lsr	w2, w2, #2
    9601fdc4:	1ac10842 	udiv	w2, w2, w1
	if (width % 16) {
    9601fdc8:	f2400c5f 	tst	x2, #0xf
    9601fdcc:	540002c0 	b.eq	9601fe24 <cb_vic_scrub+0x100>  // b.none
		pr_error("%s Width %d not aligned to 16 bytes\n", __func__, width);
    9601fdd0:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601fdd4:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fdd8:	9115c021 	add	x1, x1, #0x570
    9601fddc:	91192c00 	add	x0, x0, #0x64b
    9601fde0:	94000a24 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERR_BAD_ADDRESS;
    9601fde4:	52800122 	mov	w2, #0x9                   	// #9
	}
fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s: VIC Scrub Failure, error 0x%x, cmd = 0x%x\n",
    9601fde8:	f0000113 	adrp	x19, 96042000 <__func__.4833+0x5>
    9601fdec:	9115f273 	add	x19, x19, #0x57c
    9601fdf0:	2a1403e3 	mov	w3, w20
    9601fdf4:	aa1303e1 	mov	x1, x19
    9601fdf8:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fdfc:	9119cc00 	add	x0, x0, #0x673
    9601fe00:	94000a1c 	bl	96022670 <tegrabl_printf>
				 __func__, err, cmd);
		/* Boot Shall be aborted when there is a failure in scrubbing */
		pr_error("Bug %s:%d (%s)\n", __FILE__, __LINE__, __func__);
    9601fe04:	f0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9601fe08:	f0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9601fe0c:	aa1303e3 	mov	x3, x19
    9601fe10:	52802a22 	mov	w2, #0x151                 	// #337
    9601fe14:	911a9421 	add	x1, x1, #0x6a5
    9601fe18:	911bf800 	add	x0, x0, #0x6fe
    9601fe1c:	94000a15 	bl	96022670 <tegrabl_printf>
    9601fe20:	14000000 	b	9601fe20 <cb_vic_scrub+0xfc>
	cb_vic_priv_write_extended(NV_CVIC_SC_SFC0_BASE_LUMA(0), src >> 8);
    9601fe24:	d348fc60 	lsr	x0, x3, #8
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fe28:	d282a183 	mov	x3, #0x150c                	// #5388
    9601fe2c:	f2a2a683 	movk	x3, #0x1534, lsl #16
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fe30:	52800025 	mov	w5, #0x1                   	// #1
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fe34:	52802024 	mov	w4, #0x101                 	// #257
						VIC_DRF_NUM(_CVIC_FC, _CFG_STRUCT_SLOT_SFC_SIZE,
    9601fe38:	51000421 	sub	w1, w1, #0x1
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fe3c:	b9000060 	str	w0, [x3]
    9601fe40:	d2828583 	mov	x3, #0x142c                	// #5164
    9601fe44:	f2a2a683 	movk	x3, #0x1534, lsl #16
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fe48:	d2821580 	mov	x0, #0x10ac                	// #4268
    9601fe4c:	f2a2a680 	movk	x0, #0x1534, lsl #16
						VIC_DRF_NUM(_CVIC_FC, _CFG_STRUCT_SLOT_SFC_SIZE,
    9601fe50:	51000442 	sub	w2, w2, #0x1
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fe54:	b900007f 	str	wzr, [x3]
						VIC_DRF_NUM(_CVIC_FC, _CFG_STRUCT_SLOT_SFC_SIZE,
    9601fe58:	53103c21 	lsl	w1, w1, #16
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fe5c:	b9000005 	str	w5, [x0]
    9601fe60:	528000a9 	mov	w9, #0x5                   	// #5
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fe64:	b9000064 	str	w4, [x3]
	cb_vic_priv_write_extended(NV_CVIC_FC_CFG_STRUCT_SLOT_CFG2,
    9601fe68:	52802404 	mov	w4, #0x120                 	// #288
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601fe6c:	b900001f 	str	wzr, [x0]
	cb_vic_priv_write_extended(NV_CVIC_FC_CFG_STRUCT_SLOT_CFG2,
    9601fe70:	2a063086 	orr	w6, w4, w6, lsl #12
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fe74:	52800064 	mov	w4, #0x3                   	// #3
    9601fe78:	b9000004 	str	w4, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fe7c:	b9000066 	str	w6, [x3]
						VIC_DRF_NUM(_CVIC_FC, _CFG_STRUCT_SLOT_SFC_SIZE,
    9601fe80:	12003444 	and	w4, w2, #0x3fff
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601fe84:	b900001f 	str	wzr, [x0]
	cb_vic_priv_write_extended(NV_CVIC_FC_CFG_STRUCT_SLOT_SFC_SIZE,
    9601fe88:	2a010084 	orr	w4, w4, w1
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fe8c:	b9000007 	str	w7, [x0]
    9601fe90:	528000ea 	mov	w10, #0x7                   	// #7
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fe94:	b9000064 	str	w4, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fe98:	5280010b 	mov	w11, #0x8                   	// #8
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601fe9c:	b900001f 	str	wzr, [x0]
						VIC_DRF_NUM(_CVIC_FC, _CFG_STRUCT_SLOT_SRC_RECT_RIGHT,
    9601fea0:	53103c42 	lsl	w2, w2, #16
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fea4:	b9000009 	str	w9, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fea8:	b9000064 	str	w4, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601feac:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601feb0:	b900000a 	str	w10, [x0]
	cb_vic_priv_write_extended(NV_CVIC_FC_CFG_STRUCT_SLOT_SRC_RECT_RIGHT,
    9601feb4:	1200744a 	and	w10, w2, #0x3fffffff
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601feb8:	b900007f 	str	wzr, [x3]
	cb_vic_priv_write_extended(NV_CVIC_FC_CFG_STRUCT_SLOT_DST_RECT_LR,
    9601febc:	12103442 	and	w2, w2, #0x3fff0000
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601fec0:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fec4:	b900000b 	str	w11, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fec8:	128001eb 	mov	w11, #0xfffffff0            	// #-16
    9601fecc:	b900006a 	str	w10, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fed0:	5280012a 	mov	w10, #0x9                   	// #9
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601fed4:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fed8:	b900000a 	str	w10, [x0]
    9601fedc:	5280014a 	mov	w10, #0xa                   	// #10
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fee0:	b900007f 	str	wzr, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601fee4:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fee8:	b900000a 	str	w10, [x0]
    9601feec:	5280018a 	mov	w10, #0xc                   	// #12
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601fef0:	b9000061 	str	w1, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601fef4:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601fef8:	b900000a 	str	w10, [x0]
    9601fefc:	528001aa 	mov	w10, #0xd                   	// #13
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff00:	b9000062 	str	w2, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ff04:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ff08:	b900000a 	str	w10, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff0c:	d282860a 	mov	x10, #0x1430                	// #5168
    9601ff10:	b9000061 	str	w1, [x3]
    9601ff14:	f2a2a68a 	movk	x10, #0x1534, lsl #16
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ff18:	b900001f 	str	wzr, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff1c:	b900014b 	str	w11, [x10]
    9601ff20:	1280000b 	mov	w11, #0xffffffff            	// #-1
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ff24:	b9000005 	str	w5, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff28:	b900014b 	str	w11, [x10]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ff2c:	528001ca 	mov	w10, #0xe                   	// #14
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ff30:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ff34:	b900000a 	str	w10, [x0]
    9601ff38:	528001ea 	mov	w10, #0xf                   	// #15
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff3c:	b9000062 	str	w2, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ff40:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ff44:	b900000a 	str	w10, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff48:	b9000061 	str	w1, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ff4c:	b900001f 	str	wzr, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff50:	b900587f 	str	wzr, [x3, #88]
    9601ff54:	b9006c65 	str	w5, [x3, #108]
    9601ff58:	d2829103 	mov	x3, #0x1488                	// #5256
    9601ff5c:	f2a2a683 	movk	x3, #0x1534, lsl #16
    9601ff60:	b9000062 	str	w2, [x3]
    9601ff64:	b9000461 	str	w1, [x3, #4]
    9601ff68:	b9000862 	str	w2, [x3, #8]
    9601ff6c:	b9000c61 	str	w1, [x3, #12]
	cb_vic_priv_write_extended(NV_CVIC_BL_TARGET_BASADR, dst >> 8);
    9601ff70:	d348fd03 	lsr	x3, x8, #8
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff74:	d2831008 	mov	x8, #0x1880                	// #6272
    9601ff78:	f2a2a688 	movk	x8, #0x1534, lsl #16
    9601ff7c:	b9000103 	str	w3, [x8]
    9601ff80:	d2831603 	mov	x3, #0x18b0                	// #6320
    9601ff84:	f2a2a683 	movk	x3, #0x1534, lsl #16
    9601ff88:	b9000066 	str	w6, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ff8c:	52800046 	mov	w6, #0x2                   	// #2
    9601ff90:	b9000005 	str	w5, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ff94:	b9000064 	str	w4, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ff98:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ff9c:	b9000006 	str	w6, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ffa0:	b9000064 	str	w4, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ffa4:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ffa8:	b9000007 	str	w7, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ffac:	b9000062 	str	w2, [x3]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ffb0:	b900001f 	str	wzr, [x0]
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, (adr & 0xff) >> 2);
    9601ffb4:	b9000009 	str	w9, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ffb8:	b9000061 	str	w1, [x3]
    9601ffbc:	5283e0a1 	mov	w1, #0x1f05                	// #7941
		CB_VIC_PRIV_WR(NV_PVIC_FALCON_ADDR, 0);
    9601ffc0:	b900001f 	str	wzr, [x0]
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    9601ffc4:	b907f401 	str	w1, [x0, #2036]
    9601ffc8:	d2828000 	mov	x0, #0x1400                	// #5120
    9601ffcc:	f2a2a680 	movk	x0, #0x1534, lsl #16
    9601ffd0:	b9000005 	str	w5, [x0]
		while (true) {
			/* Reboot */
		}
	}
	return err;
}
    9601ffd4:	52800000 	mov	w0, #0x0                   	// #0
    9601ffd8:	f94013f5 	ldr	x21, [sp, #32]
    9601ffdc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9601ffe0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9601ffe4:	d65f03c0 	ret
	while (NV_READ32(NV_ADDRESS_MAP_VIC_BASE + NV_PVIC_FALCON_IDLESTATE) != 0) {
    9601ffe8:	d2820995 	mov	x21, #0x104c                	// #4172
	switch (cmd) {
    9601ffec:	52817713 	mov	w19, #0xbb8                 	// #3000
	while (NV_READ32(NV_ADDRESS_MAP_VIC_BASE + NV_PVIC_FALCON_IDLESTATE) != 0) {
    9601fff0:	f2a2a695 	movk	x21, #0x1534, lsl #16
    9601fff4:	b94002a0 	ldr	w0, [x21]
    9601fff8:	34fffee0 	cbz	w0, 9601ffd4 <cb_vic_scrub+0x2b0>
		tegrabl_udelay(50);
    9601fffc:	d2800640 	mov	x0, #0x32                  	// #50
    96020000:	97ffff29 	bl	9601fca4 <tegrabl_udelay>
		if (timeout_count >= VIC_POLL_DELAY_COUNT) {
    96020004:	71000673 	subs	w19, w19, #0x1
    96020008:	54ffff61 	b.ne	9601fff4 <cb_vic_scrub+0x2d0>  // b.any
			return TEGRABL_ERR_TIMEOUT;
    9602000c:	528000c2 	mov	w2, #0x6                   	// #6
    96020010:	17ffff76 	b	9601fde8 <cb_vic_scrub+0xc4>

0000000096020014 <cb_vic_init>:
		pr_error("%s: VIC clock enable failure, error %x\n", __func__, err);
	return err;
}

tegrabl_error_t cb_vic_init(void)
{
    96020014:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	err = tegrabl_car_rst_clear(TEGRABL_MODULE_HOST1X, 0);
    96020018:	52800001 	mov	w1, #0x0                   	// #0
    9602001c:	52800160 	mov	w0, #0xb                   	// #11
{
    96020020:	910003fd 	mov	x29, sp
    96020024:	f9000bf3 	str	x19, [sp, #16]
	err = tegrabl_car_rst_clear(TEGRABL_MODULE_HOST1X, 0);
    96020028:	97fffe9d 	bl	9601fa9c <tegrabl_car_rst_clear>
    9602002c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    96020030:	350006a0 	cbnz	w0, 96020104 <cb_vic_init+0xf0>
	err = tegrabl_car_clk_enable(TEGRABL_MODULE_HOST1X, 0, NULL);
    96020034:	d2800002 	mov	x2, #0x0                   	// #0
    96020038:	52800001 	mov	w1, #0x0                   	// #0
    9602003c:	52800160 	mov	w0, #0xb                   	// #11
    96020040:	97fffe23 	bl	9601f8cc <tegrabl_car_clk_enable>
    96020044:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    96020048:	350005e0 	cbnz	w0, 96020104 <cb_vic_init+0xf0>
	err = tegrabl_car_set_clk_rate(TEGRABL_MODULE_HOST1X, 0,
    9602004c:	5286a002 	mov	w2, #0x3500                	// #13568
    96020050:	9100b3a3 	add	x3, x29, #0x2c
    96020054:	72a00182 	movk	w2, #0xc, lsl #16
    96020058:	52800001 	mov	w1, #0x0                   	// #0
    9602005c:	52800160 	mov	w0, #0xb                   	// #11
    96020060:	97fffe6b 	bl	9601fa0c <tegrabl_car_set_clk_rate>
    96020064:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    96020068:	350004e0 	cbnz	w0, 96020104 <cb_vic_init+0xf0>
	err = tegrabl_car_rst_clear(TEGRABL_MODULE_VIC, 0);
    9602006c:	52800001 	mov	w1, #0x0                   	// #0
    96020070:	52800720 	mov	w0, #0x39                  	// #57
    96020074:	97fffe8a 	bl	9601fa9c <tegrabl_car_rst_clear>
    96020078:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    9602007c:	35000440 	cbnz	w0, 96020104 <cb_vic_init+0xf0>
	err = tegrabl_car_clk_enable(TEGRABL_MODULE_VIC, 0, NULL);
    96020080:	d2800002 	mov	x2, #0x0                   	// #0
    96020084:	52800001 	mov	w1, #0x0                   	// #0
    96020088:	52800720 	mov	w0, #0x39                  	// #57
    9602008c:	97fffe10 	bl	9601f8cc <tegrabl_car_clk_enable>
    96020090:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    96020094:	35000380 	cbnz	w0, 96020104 <cb_vic_init+0xf0>
	err = tegrabl_car_set_clk_rate(TEGRABL_MODULE_VIC, 0,
    96020098:	5286a002 	mov	w2, #0x3500                	// #13568
    9602009c:	9100a3a3 	add	x3, x29, #0x28
    960200a0:	72a00182 	movk	w2, #0xc, lsl #16
    960200a4:	52800001 	mov	w1, #0x0                   	// #0
    960200a8:	52800720 	mov	w0, #0x39                  	// #57
    960200ac:	97fffe58 	bl	9601fa0c <tegrabl_car_set_clk_rate>
    960200b0:	2a0003f3 	mov	w19, w0
    960200b4:	d2800000 	mov	x0, #0x0                   	// #0
	if (err != TEGRABL_NO_ERROR)
    960200b8:	35000273 	cbnz	w19, 96020104 <cb_vic_init+0xf0>
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    960200bc:	d2828904 	mov	x4, #0x1448                	// #5192
		cb_vic_priv_write_extended(NV_CVIC_FC_FCE_UCODE_INST,
    960200c0:	d0000141 	adrp	x1, 9604a000 <s_qspi_info+0x20>
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    960200c4:	d2828982 	mov	x2, #0x144c                	// #5196
		cb_vic_priv_write_extended(NV_CVIC_FC_FCE_UCODE_INST,
    960200c8:	9119e021 	add	x1, x1, #0x678
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    960200cc:	f2a2a684 	movk	x4, #0x1534, lsl #16
    960200d0:	f2a2a682 	movk	x2, #0x1534, lsl #16
    960200d4:	531e7403 	lsl	w3, w0, #2
    960200d8:	b9000083 	str	w3, [x4]
		cb_vic_priv_write_extended(NV_CVIC_FC_FCE_UCODE_INST,
    960200dc:	b8607823 	ldr	w3, [x1, x0, lsl #2]
    960200e0:	91000400 	add	x0, x0, #0x1
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    960200e4:	b9000043 	str	w3, [x2]
	for (count = 0; count < sizeof(fce_ucode_data_vic) / sizeof(uint32_t);
    960200e8:	f105001f 	cmp	x0, #0x140
    960200ec:	54ffff41 	b.ne	960200d4 <cb_vic_init+0xc0>  // b.any
	CB_VIC_PRIV_WR(0x1000 + (adr >> 6), data);
    960200f0:	d2828800 	mov	x0, #0x1440                	// #5184
    960200f4:	52800021 	mov	w1, #0x1                   	// #1
    960200f8:	f2a2a680 	movk	x0, #0x1534, lsl #16
    960200fc:	b9000001 	str	w1, [x0]
    96020100:	14000007 	b	9602011c <cb_vic_init+0x108>
		pr_error("%s: VIC clock enable failure, error %x\n", __func__, err);
    96020104:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96020108:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9602010c:	2a1303e2 	mov	w2, w19
    96020110:	91162421 	add	x1, x1, #0x589
    96020114:	91175400 	add	x0, x0, #0x5d5
    96020118:	94000956 	bl	96022670 <tegrabl_printf>
	/* Load VIC Code at the VIC base address */
	cb_vic_boot();

	pr_debug("VIC FW Initialized\n");
	return TEGRABL_NO_ERROR;
}
    9602011c:	2a1303e0 	mov	w0, w19
    96020120:	f9400bf3 	ldr	x19, [sp, #16]
    96020124:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96020128:	d65f03c0 	ret

000000009602012c <cb_vic_exit>:

tegrabl_error_t cb_vic_exit(void)
{
    9602012c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	err = tegrabl_car_rst_set(TEGRABL_MODULE_VIC, 0);
    96020130:	52800001 	mov	w1, #0x0                   	// #0
    96020134:	52800720 	mov	w0, #0x39                  	// #57
{
    96020138:	910003fd 	mov	x29, sp
    9602013c:	f9000bf3 	str	x19, [sp, #16]
	err = tegrabl_car_rst_set(TEGRABL_MODULE_VIC, 0);
    96020140:	97fffe50 	bl	9601fa80 <tegrabl_car_rst_set>
    96020144:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    96020148:	35000200 	cbnz	w0, 96020188 <cb_vic_exit+0x5c>
		goto fail;

	err = tegrabl_car_clk_disable(TEGRABL_MODULE_VIC, 0);
    9602014c:	52800001 	mov	w1, #0x0                   	// #0
    96020150:	52800720 	mov	w0, #0x39                  	// #57
    96020154:	97fffe43 	bl	9601fa60 <tegrabl_car_clk_disable>
    96020158:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    9602015c:	35000160 	cbnz	w0, 96020188 <cb_vic_exit+0x5c>
		goto fail;

	err = tegrabl_car_rst_set(TEGRABL_MODULE_HOST1X, 0);
    96020160:	52800001 	mov	w1, #0x0                   	// #0
    96020164:	52800160 	mov	w0, #0xb                   	// #11
    96020168:	97fffe46 	bl	9601fa80 <tegrabl_car_rst_set>
    9602016c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
    96020170:	350000c0 	cbnz	w0, 96020188 <cb_vic_exit+0x5c>
		goto fail;

	err = tegrabl_car_clk_disable(TEGRABL_MODULE_HOST1X, 0);
    96020174:	52800001 	mov	w1, #0x0                   	// #0
    96020178:	52800160 	mov	w0, #0xb                   	// #11
    9602017c:	97fffe39 	bl	9601fa60 <tegrabl_car_clk_disable>
    96020180:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR)
		goto fail;

	pr_debug("VIC FC closed\n");
fail:
	if (err != TEGRABL_NO_ERROR)
    96020184:	340000e0 	cbz	w0, 960201a0 <cb_vic_exit+0x74>
		pr_error("%s: VIC clock Disable Failure, error %x\n", __func__, err);
    96020188:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9602018c:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020190:	2a1303e2 	mov	w2, w19
    96020194:	91167421 	add	x1, x1, #0x59d
    96020198:	9116a400 	add	x0, x0, #0x5a9
    9602019c:	94000935 	bl	96022670 <tegrabl_printf>
	return err;
}
    960201a0:	2a1303e0 	mov	w0, w19
    960201a4:	f9400bf3 	ldr	x19, [sp, #16]
    960201a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960201ac:	d65f03c0 	ret

00000000960201b0 <tegrabl_mce_roc_cache_flush>:
#include <tegrabl_debug.h>
#include <tegrabl_arm64_smccc.h>
#include <tegrabl_mce.h>

tegrabl_error_t tegrabl_mce_roc_cache_flush(void)
{
    960201b0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	struct tegrabl_arm64_smc64_params smc_regs = {
    960201b4:	d29fe161 	mov	x1, #0xff0b                	// #65291
    960201b8:	f2b05fe1 	movk	x1, #0x82ff, lsl #16
{
    960201bc:	910003fd 	mov	x29, sp
	struct tegrabl_arm64_smc64_params smc_regs = {
    960201c0:	910143a0 	add	x0, x29, #0x50
    960201c4:	a9027fbf 	stp	xzr, xzr, [x29, #32]
    960201c8:	a9037fbf 	stp	xzr, xzr, [x29, #48]
    960201cc:	a9047fbf 	stp	xzr, xzr, [x29, #64]
    960201d0:	f81c8c01 	str	x1, [x0, #-56]!
		{MCE_SMC_ROC_FLUSH_CACHE}
	};

	tegrabl_arm64_send_smc64(&smc_regs);
    960201d4:	97ff9587 	bl	960057f0 <tegrabl_arm64_send_smc64>

	if (smc_regs.reg[0] != 0) {
    960201d8:	f9400fa0 	ldr	x0, [x29, #24]
    960201dc:	b4000180 	cbz	x0, 9602020c <tegrabl_mce_roc_cache_flush+0x5c>
		pr_error("SMC_ROC_FLUSH_CACHE failed\n");
    960201e0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960201e4:	911cec00 	add	x0, x0, #0x73b
    960201e8:	94000922 	bl	96022670 <tegrabl_printf>
		pr_error("SMC returned 0x%lx 0x%lx 0x%lx 0x%lx\n",
    960201ec:	a9418ba1 	ldp	x1, x2, [x29, #24]
    960201f0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960201f4:	a94293a3 	ldp	x3, x4, [x29, #40]
    960201f8:	911d6800 	add	x0, x0, #0x75a
    960201fc:	9400091d 	bl	96022670 <tegrabl_printf>
				 smc_regs.reg[0], smc_regs.reg[1],
				 smc_regs.reg[2], smc_regs.reg[3]);

		return TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
    96020200:	528002e0 	mov	w0, #0x17                  	// #23
	}

	return TEGRABL_NO_ERROR;
}
    96020204:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96020208:	d65f03c0 	ret
	return TEGRABL_NO_ERROR;
    9602020c:	52800000 	mov	w0, #0x0                   	// #0
    96020210:	17fffffd 	b	96020204 <tegrabl_mce_roc_cache_flush+0x54>

0000000096020214 <tegrabl_mce_roc_cache_clean>:

tegrabl_error_t tegrabl_mce_roc_cache_clean(void)
{
    96020214:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	struct tegrabl_arm64_smc64_params smc_regs = {
    96020218:	d29fe1e1 	mov	x1, #0xff0f                	// #65295
    9602021c:	f2b05fe1 	movk	x1, #0x82ff, lsl #16
{
    96020220:	910003fd 	mov	x29, sp
	struct tegrabl_arm64_smc64_params smc_regs = {
    96020224:	910143a0 	add	x0, x29, #0x50
    96020228:	a9027fbf 	stp	xzr, xzr, [x29, #32]
    9602022c:	a9037fbf 	stp	xzr, xzr, [x29, #48]
    96020230:	a9047fbf 	stp	xzr, xzr, [x29, #64]
    96020234:	f81c8c01 	str	x1, [x0, #-56]!
		{MCE_SMC_ROC_CLEAN_CACHE_ONLY}
	};

	tegrabl_arm64_send_smc64(&smc_regs);
    96020238:	97ff956e 	bl	960057f0 <tegrabl_arm64_send_smc64>

	if (smc_regs.reg[0] != 0) {
    9602023c:	f9400fa0 	ldr	x0, [x29, #24]
    96020240:	b4000180 	cbz	x0, 96020270 <tegrabl_mce_roc_cache_clean+0x5c>
		pr_error("SMC_ROC_FLUSH_CLEAN_CACHE_ONLY failed\n");
    96020244:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020248:	911c4400 	add	x0, x0, #0x711
    9602024c:	94000909 	bl	96022670 <tegrabl_printf>
		pr_error("SMC returned 0x%lx 0x%lx 0x%lx 0x%lx\n",
    96020250:	a9418ba1 	ldp	x1, x2, [x29, #24]
    96020254:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020258:	a94293a3 	ldp	x3, x4, [x29, #40]
    9602025c:	911d6800 	add	x0, x0, #0x75a
    96020260:	94000904 	bl	96022670 <tegrabl_printf>
				 smc_regs.reg[0], smc_regs.reg[1],
				 smc_regs.reg[2], smc_regs.reg[3]);

		return TEGRABL_ERROR(TEGRABL_ERR_COMMAND_FAILED, 0);
    96020264:	528002e0 	mov	w0, #0x17                  	// #23
	}

	return TEGRABL_NO_ERROR;
}
    96020268:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602026c:	d65f03c0 	ret
	return TEGRABL_NO_ERROR;
    96020270:	52800000 	mov	w0, #0x0                   	// #0
    96020274:	17fffffd 	b	96020268 <tegrabl_mce_roc_cache_clean+0x54>

0000000096020278 <tegrabl_rollback_fusevalue_to_level>:

static struct tegrabl_rollback *rb_data;

uint8_t tegrabl_rollback_fusevalue_to_level(uint32_t fuse_value)
{
	uint8_t level = 0;
    96020278:	52800001 	mov	w1, #0x0                   	// #0
	while (fuse_value) {
    9602027c:	35000060 	cbnz	w0, 96020288 <tegrabl_rollback_fusevalue_to_level+0x10>
		level += 1U;
		fuse_value = fuse_value >> 1U;
	}
	return level;
}
    96020280:	2a0103e0 	mov	w0, w1
    96020284:	d65f03c0 	ret
		level += 1U;
    96020288:	11000421 	add	w1, w1, #0x1
		fuse_value = fuse_value >> 1U;
    9602028c:	53017c00 	lsr	w0, w0, #1
		level += 1U;
    96020290:	12001c21 	and	w1, w1, #0xff
    96020294:	17fffffa 	b	9602027c <tegrabl_rollback_fusevalue_to_level+0x4>

0000000096020298 <tegrabl_init_rollback_data>:
	return fuse_value;
}

tegrabl_error_t tegrabl_init_rollback_data(struct tegrabl_rollback *rb)
{
	rb_data = rb;
    96020298:	f0000261 	adrp	x1, 9606f000 <eeproms+0x500>
    9602029c:	f9050420 	str	x0, [x1, #2568]
	return TEGRABL_NO_ERROR;
}
    960202a0:	52800000 	mov	w0, #0x0                   	// #0
    960202a4:	d65f03c0 	ret

00000000960202a8 <tegrabl_get_rollback_data>:

inline struct tegrabl_rollback *tegrabl_get_rollback_data(void)
{
	return rb_data;
}
    960202a8:	f0000260 	adrp	x0, 9606f000 <eeproms+0x500>
    960202ac:	f9450400 	ldr	x0, [x0, #2568]
    960202b0:	d65f03c0 	ret

00000000960202b4 <tegrabl_cipher_binary>:
	return error;
}

tegrabl_error_t tegrabl_cipher_binary(void *buffer,
		uint32_t buffer_size, void *output_buffer, bool is_decrypt)
{
    960202b4:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	tegrabl_error_t error2 = TEGRABL_NO_ERROR;
	struct tegrabl_crypto_aes_context crypto_aes_context = { 0 };
	struct se_aes_context *se_aes_context = NULL;

	if ((buffer == NULL) || (buffer_size == 0U) || (output_buffer == NULL)) {
    960202b8:	f100001f 	cmp	x0, #0x0
    960202bc:	7a401824 	ccmp	w1, #0x0, #0x4, ne  // ne = any
{
    960202c0:	910003fd 	mov	x29, sp
    960202c4:	a90153f3 	stp	x19, x20, [sp, #16]
    960202c8:	f90013f5 	str	x21, [sp, #32]
	struct tegrabl_crypto_aes_context crypto_aes_context = { 0 };
    960202cc:	a903ffbf 	stp	xzr, xzr, [x29, #56]
    960202d0:	a904ffbf 	stp	xzr, xzr, [x29, #72]
    960202d4:	a905ffbf 	stp	xzr, xzr, [x29, #88]
    960202d8:	a906ffbf 	stp	xzr, xzr, [x29, #104]
    960202dc:	a907ffbf 	stp	xzr, xzr, [x29, #120]
    960202e0:	a908ffbf 	stp	xzr, xzr, [x29, #136]
    960202e4:	f9004fbf 	str	xzr, [x29, #152]
	if ((buffer == NULL) || (buffer_size == 0U) || (output_buffer == NULL)) {
    960202e8:	54000540 	b.eq	96020390 <tegrabl_cipher_binary+0xdc>  // b.none
    960202ec:	aa0203f5 	mov	x21, x2
    960202f0:	b4000502 	cbz	x2, 96020390 <tegrabl_cipher_binary+0xdc>
    960202f4:	2a0103f3 	mov	w19, w1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	if ((buffer_size % SE_AES_BLOCK_LENGTH) != 0U) {
    960202f8:	f2400e7f 	tst	x19, #0xf
    960202fc:	540004a1 	b.ne	96020390 <tegrabl_cipher_binary+0xdc>  // b.any
    96020300:	aa0003f4 	mov	x20, x0
    96020304:	12001c63 	and	w3, w3, #0xff
    96020308:	52800020 	mov	w0, #0x1                   	// #1
	se_aes_context = &crypto_aes_context.se_context;

	crypto_aes_context.is_verify = false;
	se_aes_context->keysize = TEGRABL_CRYPTO_AES_KEYSIZE_128;
	/* set decryption flag based on is_decrypt param */
	if (is_decrypt == true) {
    9602030c:	34000243 	cbz	w3, 96020354 <tegrabl_cipher_binary+0xa0>
		se_aes_context->is_decrypt = true;
    96020310:	390163a0 	strb	w0, [x29, #88]
	} else {
		se_aes_context->is_encrypt = true;
	}
	/* encryption/decryption using SBK key slot*/
	se_aes_context->keyslot = 14;
    96020314:	528001c0 	mov	w0, #0xe                   	// #14
	se_aes_context->is_hash = false;
	se_aes_context->total_size = buffer_size;

	pr_debug("Initializing AES context\n");
	error = tegrabl_crypto_init(TEGRABL_CRYPTO_AES,
    96020318:	9100e3a1 	add	x1, x29, #0x38
	se_aes_context->total_size = buffer_size;
    9602031c:	b9005fb3 	str	w19, [x29, #92]
	se_aes_context->keyslot = 14;
    96020320:	390183a0 	strb	w0, [x29, #96]
	error = tegrabl_crypto_init(TEGRABL_CRYPTO_AES,
    96020324:	52800000 	mov	w0, #0x0                   	// #0
    96020328:	97ff953f 	bl	96005824 <tegrabl_crypto_init>
			(void *)&crypto_aes_context);
	if (error != TEGRABL_NO_ERROR) {
    9602032c:	34000180 	cbz	w0, 9602035c <tegrabl_cipher_binary+0xa8>
    96020330:	12005c00 	and	w0, w0, #0xffffff
    96020334:	32020013 	orr	w19, w0, #0x40000000
		TEGRABL_SET_HIGHEST_MODULE(error);
		goto fail;
	}

fail:
	error2 = tegrabl_crypto_close((void *)&crypto_aes_context);
    96020338:	9100e3a0 	add	x0, x29, #0x38
    9602033c:	97ff9646 	bl	96005c54 <tegrabl_crypto_close>
	if (error2 != TEGRABL_NO_ERROR) {
		pr_debug("Failed to close context");
	}

	return error;
}
    96020340:	2a1303e0 	mov	w0, w19
    96020344:	f94013f5 	ldr	x21, [sp, #32]
    96020348:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602034c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    96020350:	d65f03c0 	ret
		se_aes_context->is_encrypt = true;
    96020354:	390167a0 	strb	w0, [x29, #89]
    96020358:	17ffffef 	b	96020314 <tegrabl_cipher_binary+0x60>
	error = tegrabl_crypto_process_block((void *)&crypto_aes_context,
    9602035c:	aa1503e3 	mov	x3, x21
    96020360:	2a1303e2 	mov	w2, w19
    96020364:	aa1403e1 	mov	x1, x20
    96020368:	9100e3a0 	add	x0, x29, #0x38
    9602036c:	97ff95a9 	bl	96005a10 <tegrabl_crypto_process_block>
	if (error != TEGRABL_NO_ERROR) {
    96020370:	35fffe00 	cbnz	w0, 96020330 <tegrabl_cipher_binary+0x7c>
	error = tegrabl_crypto_finalize((void *)&crypto_aes_context);
    96020374:	9100e3a0 	add	x0, x29, #0x38
    96020378:	97ff95fa 	bl	96005b60 <tegrabl_crypto_finalize>
    9602037c:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    96020380:	34fffdc0 	cbz	w0, 96020338 <tegrabl_cipher_binary+0x84>
    96020384:	12005c13 	and	w19, w0, #0xffffff
    96020388:	32020273 	orr	w19, w19, #0x40000000
		goto fail;
    9602038c:	17ffffeb 	b	96020338 <tegrabl_cipher_binary+0x84>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020390:	52800053 	mov	w19, #0x2                   	// #2
    96020394:	72a80813 	movk	w19, #0x4040, lsl #16
    96020398:	17ffffe8 	b	96020338 <tegrabl_cipher_binary+0x84>

000000009602039c <tegrabl_auth_subprocess>:
 * @return TEGRABL_NO_ERROR if successful else appropriate error.
 */
static tegrabl_error_t tegrabl_auth_subprocess(
		struct tegrabl_auth_header_info *header, void *buffer,
		uint32_t buffer_size, void *dest)
{
    9602039c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960203a0:	910003fd 	mov	x29, sp
    960203a4:	a90153f3 	stp	x19, x20, [sp, #16]
    960203a8:	aa0003f4 	mov	x20, x0
	uint8_t *buf = (uint8_t *)buffer;
	bool has_aes = false;
	bool has_rsa = false;
	bool has_ecc = false;

	buffer_size = MIN(buffer_size,
    960203ac:	29408013 	ldp	w19, w0, [x0, #4]
{
    960203b0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960203b4:	f9001bf7 	str	x23, [sp, #48]
	buffer_size = MIN(buffer_size,
    960203b8:	4b000273 	sub	w19, w19, w0
    960203bc:	6b02027f 	cmp	w19, w2
    960203c0:	1a829273 	csel	w19, w19, w2, ls  // ls = plast
			header->validation_size - header->processed_size);

	pr_debug("Processed size %d, validation size %d, buffer size %d",
			header->processed_size, header->validation_size, buffer_size);

	if (buffer_size == 0U) {
    960203c4:	34000633 	cbz	w19, 96020488 <tegrabl_auth_subprocess+0xec>
		pr_debug("All data processed for %d header\n",
				header->mode);
		goto fail;
	}

	has_rsa = (TEGRABL_SIGNINGTYPE_NVIDIA_RSA == header->mode) ||
    960203c8:	b9400280 	ldr	w0, [x20]
    960203cc:	aa0103f5 	mov	x21, x1
    960203d0:	aa0303f7 	mov	x23, x3
    960203d4:	121e7801 	and	w1, w0, #0xfffffffd
			   (TEGRABL_SIGNINGTYPE_OEM_RSA == header->mode) ||
    960203d8:	7100043f 	cmp	w1, #0x1
    960203dc:	54000080 	b.eq	960203ec <tegrabl_auth_subprocess+0x50>  // b.none
    960203e0:	52800016 	mov	w22, #0x0                   	// #0
			   (TEGRABL_SIGNINGTYPE_OEM_RSA_SBK == header->mode);
	if (has_rsa) {
    960203e4:	7100181f 	cmp	w0, #0x6
    960203e8:	540002a1 	b.ne	9602043c <tegrabl_auth_subprocess+0xa0>  // b.any
		struct tegrabl_crypto_rsa_pss_context *rsa_pss_context;
		rsa_pss_context = &header->rsa_pss_context;
		pr_debug("Applying sha algorithm on buffer of size %d @%p\n",
				buffer_size, buf);
		err = tegrabl_crypto_process_block(
    960203ec:	aa1703e3 	mov	x3, x23
    960203f0:	2a1303e2 	mov	w2, w19
    960203f4:	aa1503e1 	mov	x1, x21
    960203f8:	9101e280 	add	x0, x20, #0x78
    960203fc:	97ff9585 	bl	96005a10 <tegrabl_crypto_process_block>
				(union tegrabl_crypto_context *)rsa_pss_context, buf,
				buffer_size, dest);
		if (err != TEGRABL_NO_ERROR) {
    96020400:	34000100 	cbz	w0, 96020420 <tegrabl_auth_subprocess+0x84>
    96020404:	12005c00 	and	w0, w0, #0xffffff
    96020408:	32020000 	orr	w0, w0, #0x40000000

	header->processed_size += buffer_size;

fail:
	return err;
}
    9602040c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96020410:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96020414:	f9401bf7 	ldr	x23, [sp, #48]
    96020418:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602041c:	d65f03c0 	ret
		if (header->processed_size == 0U) {
    96020420:	b9400a80 	ldr	w0, [x20, #8]
    96020424:	350000a0 	cbnz	w0, 96020438 <tegrabl_auth_subprocess+0x9c>
			buf += SIGNED_SECTION_LEN;
    96020428:	910042b5 	add	x21, x21, #0x10
			buffer_size -= SIGNED_SECTION_LEN;
    9602042c:	51004273 	sub	w19, w19, #0x10
			header->processed_size += SIGNED_SECTION_LEN;
    96020430:	52800200 	mov	w0, #0x10                  	// #16
    96020434:	b9000a80 	str	w0, [x20, #8]
    96020438:	52800036 	mov	w22, #0x1                   	// #1
	has_aes = (TEGRABL_SIGNINGTYPE_SBK == header->mode) ||
    9602043c:	b9400281 	ldr	w1, [x20]
    96020440:	7100143f 	cmp	w1, #0x5
			   (TEGRABL_SIGNINGTYPE_NVIDIA_RSA == header->mode) ||
    96020444:	7a431824 	ccmp	w1, #0x3, #0x4, ne  // ne = any
    96020448:	54000080 	b.eq	96020458 <tegrabl_auth_subprocess+0xbc>  // b.none
    9602044c:	52800000 	mov	w0, #0x0                   	// #0
	if (has_aes) {
    96020450:	7100183f 	cmp	w1, #0x6
    96020454:	54000101 	b.ne	96020474 <tegrabl_auth_subprocess+0xd8>  // b.any
		err = tegrabl_crypto_process_block(
    96020458:	aa1703e3 	mov	x3, x23
    9602045c:	2a1303e2 	mov	w2, w19
    96020460:	aa1503e1 	mov	x1, x21
    96020464:	91004280 	add	x0, x20, #0x10
    96020468:	97ff956a 	bl	96005a10 <tegrabl_crypto_process_block>
		if (err != TEGRABL_NO_ERROR) {
    9602046c:	35fffcc0 	cbnz	w0, 96020404 <tegrabl_auth_subprocess+0x68>
    96020470:	52800020 	mov	w0, #0x1                   	// #1
	if (!(has_aes || has_rsa || has_ecc)) {
    96020474:	2a160000 	orr	w0, w0, w22
    96020478:	340000c0 	cbz	w0, 96020490 <tegrabl_auth_subprocess+0xf4>
	header->processed_size += buffer_size;
    9602047c:	b9400a82 	ldr	w2, [x20, #8]
    96020480:	0b130053 	add	w19, w2, w19
    96020484:	b9000a93 	str	w19, [x20, #8]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96020488:	52800000 	mov	w0, #0x0                   	// #0
    9602048c:	17ffffe0 	b	9602040c <tegrabl_auth_subprocess+0x70>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020490:	52800040 	mov	w0, #0x2                   	// #2
    96020494:	72a80800 	movk	w0, #0x4040, lsl #16
	return err;
    96020498:	17ffffdd 	b	9602040c <tegrabl_auth_subprocess+0x70>

000000009602049c <tegrabl_auth_check_sigheader>:
{
    9602049c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	if ((strncmp((const char *)buff, "GSHV", 4) == 0)
    960204a0:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    960204a4:	d2800082 	mov	x2, #0x4                   	// #4
    960204a8:	911f7821 	add	x1, x1, #0x7de
{
    960204ac:	910003fd 	mov	x29, sp
    960204b0:	f9000bf3 	str	x19, [sp, #16]
    960204b4:	aa0003f3 	mov	x19, x0
	if ((strncmp((const char *)buff, "GSHV", 4) == 0)
    960204b8:	94002771 	bl	9602a27c <strncmp>
    960204bc:	34000160 	cbz	w0, 960204e8 <tegrabl_auth_check_sigheader+0x4c>
		|| (strncmp((const char *)buff, "NVDA", 4) == 0)) {
    960204c0:	d2800082 	mov	x2, #0x4                   	// #4
    960204c4:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    960204c8:	aa1303e0 	mov	x0, x19
    960204cc:	911f8c21 	add	x1, x1, #0x7e3
    960204d0:	9400276b 	bl	9602a27c <strncmp>
    960204d4:	7100001f 	cmp	w0, #0x0
    960204d8:	1a9f17e0 	cset	w0, eq  // eq = none
}
    960204dc:	f9400bf3 	ldr	x19, [sp, #16]
    960204e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960204e4:	d65f03c0 	ret
		return true;
    960204e8:	52800020 	mov	w0, #0x1                   	// #1
    960204ec:	17fffffc 	b	960204dc <tegrabl_auth_check_sigheader+0x40>

00000000960204f0 <tegrabl_auth_initiate>:
	if ((dest_addr == NULL) || (dest_size == 0U) || (auth == NULL) ||
    960204f0:	71063c5f 	cmp	w2, #0x18f
    960204f4:	fa408824 	ccmp	x1, #0x0, #0x4, hi  // hi = pmore
    960204f8:	54000380 	b.eq	96020568 <tegrabl_auth_initiate+0x78>  // b.none
    960204fc:	b4000363 	cbz	x3, 96020568 <tegrabl_auth_initiate+0x78>
{
    96020500:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96020504:	910003fd 	mov	x29, sp
    96020508:	a90153f3 	stp	x19, x20, [sp, #16]
    9602050c:	aa0303f3 	mov	x19, x3
    96020510:	2a0003f4 	mov	w20, w0
    96020514:	a9025bf5 	stp	x21, x22, [sp, #32]
	memset(auth, 0x0, sizeof(struct tegrabl_auth_handle));
    96020518:	aa0303e0 	mov	x0, x3
    9602051c:	2a0203f6 	mov	w22, w2
    96020520:	aa0103f5 	mov	x21, x1
    96020524:	d2803b02 	mov	x2, #0x1d8                 	// #472
    96020528:	52800001 	mov	w1, #0x0                   	// #0
    9602052c:	9400263f 	bl	96029e28 <memset>
	auth->bin_type = bin_type;
    96020530:	b9000274 	str	w20, [x19]
										(uint32_t)TEGRABL_BINARY_MTS_PREBOOT) ||
    96020534:	51000694 	sub	w20, w20, #0x1
    96020538:	7100069f 	cmp	w20, #0x1
	auth->allow_oem_modes = true;
    9602053c:	52800020 	mov	w0, #0x1                   	// #1
	auth->dest_size = dest_size;
    96020540:	b9000a76 	str	w22, [x19, #8]
	auth->dest_location = dest_addr;
    96020544:	a9025675 	stp	x21, x21, [x19, #32]
	auth->allow_oem_modes = true;
    96020548:	39074260 	strb	w0, [x19, #464]
										(uint32_t)TEGRABL_BINARY_MTS_PREBOOT) ||
    9602054c:	1a9f87e0 	cset	w0, ls  // ls = plast
    96020550:	39074a60 	strb	w0, [x19, #466]
	auth->check_nvidia_header = ((bin_type ==
    96020554:	52800000 	mov	w0, #0x0                   	// #0
}
    96020558:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602055c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96020560:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96020564:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020568:	52800040 	mov	w0, #0x2                   	// #2
    9602056c:	72a80800 	movk	w0, #0x4040, lsl #16
}
    96020570:	d65f03c0 	ret

0000000096020574 <tegrabl_auth_process_block>:
	bool found_header = false;
	struct tegrabl_auth_header_info *header_info = NULL;
	uint32_t num_headers = 0;

	pr_debug("Processing block of size %d @%p\n", buffer_size, buffer);
	if ((auth == NULL) || (buffer == NULL) || (buffer_size == 0UL)) {
    96020574:	f100001f 	cmp	x0, #0x0
    96020578:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    9602057c:	54002260 	b.eq	960209c8 <tegrabl_auth_process_block+0x454>  // b.none
{
    96020580:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96020584:	910003fd 	mov	x29, sp
    96020588:	a90153f3 	stp	x19, x20, [sp, #16]
    9602058c:	2a0203f4 	mov	w20, w2
    96020590:	a9025bf5 	stp	x21, x22, [sp, #32]
    96020594:	a90363f7 	stp	x23, x24, [sp, #48]
    96020598:	a9046bf9 	stp	x25, x26, [sp, #64]
    9602059c:	a90573fb 	stp	x27, x28, [sp, #80]
	if ((auth == NULL) || (buffer == NULL) || (buffer_size == 0UL)) {
    960205a0:	340008e2 	cbz	w2, 960206bc <tegrabl_auth_process_block+0x148>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	dest_addr = auth->dest_location;
    960205a4:	a9425c16 	ldp	x22, x23, [x0, #32]
    960205a8:	aa0003fa 	mov	x26, x0
	safe_dest_location = auth->safe_dest_location;
	cur_header = auth->cur_header;
	header_info = &auth->headers[cur_header];
	num_headers = auth->num_headers;

	if ((dest_addr == NULL) || (safe_dest_location == NULL) ||
    960205ac:	f10002ff 	cmp	x23, #0x0
    960205b0:	fa401ac4 	ccmp	x22, #0x0, #0x4, ne  // ne = any
    960205b4:	54000840 	b.eq	960206bc <tegrabl_auth_process_block+0x148>  // b.none
    960205b8:	b9400800 	ldr	w0, [x0, #8]
    960205bc:	71063c1f 	cmp	w0, #0x18f
    960205c0:	540007e9 	b.ls	960206bc <tegrabl_auth_process_block+0x148>  // b.plast
	cur_header = auth->cur_header;
    960205c4:	29436758 	ldp	w24, w25, [x26, #24]
	header_info = &auth->headers[cur_header];
    960205c8:	52801a13 	mov	w19, #0xd0                  	// #208
    960205cc:	aa0103f5 	mov	x21, x1
    960205d0:	12001c63 	and	w3, w3, #0xff
    960205d4:	9bb36b33 	umaddl	x19, w25, w19, x26
    960205d8:	9100c273 	add	x19, x19, #0x30
		(auth->dest_size < sizeof(struct tegrabl_sigheader))) {
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	if (check_header) {
    960205dc:	340020c3 	cbz	w3, 960209f4 <tegrabl_auth_process_block+0x480>
		pr_debug("Checking for header\n");

		if (buffer_size < sizeof(struct tegrabl_sigheader)) {
    960205e0:	71063c5f 	cmp	w2, #0x18f
    960205e4:	540006c9 	b.ls	960206bc <tegrabl_auth_process_block+0x148>  // b.plast
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
			goto fail;
		}

		if (tegrabl_auth_check_sigheader(buffer)) {
    960205e8:	aa0103e0 	mov	x0, x1
    960205ec:	97ffffac 	bl	9602049c <tegrabl_auth_check_sigheader>
    960205f0:	72001c1f 	tst	w0, #0xff
    960205f4:	54001e40 	b.eq	960209bc <tegrabl_auth_process_block+0x448>  // b.none
			found_header = true;

			if (num_headers >= 1U) {
    960205f8:	34000078 	cbz	w24, 96020604 <tegrabl_auth_process_block+0x90>
				header_info++;
    960205fc:	91034273 	add	x19, x19, #0xd0
				cur_header++;
    96020600:	11000739 	add	w25, w25, #0x1
	if (secure_mode == 0U) {
    96020604:	f000027b 	adrp	x27, 9606f000 <eeproms+0x500>
			}

			num_headers++;
    96020608:	11000718 	add	w24, w24, #0x1
	if (secure_mode == 0U) {
    9602060c:	91286361 	add	x1, x27, #0xa18
    96020610:	b94a1b60 	ldr	w0, [x27, #2584]
    96020614:	350001a0 	cbnz	w0, 96020648 <tegrabl_auth_process_block+0xd4>
		err = tegrabl_fuse_read(FUSE_TYPE_BOOT_SECURITY_INFO,
    96020618:	52800082 	mov	w2, #0x4                   	// #4
    9602061c:	97fff86e 	bl	9601e7d4 <tegrabl_fuse_read>
		if (err != TEGRABL_NO_ERROR) {
    96020620:	34000140 	cbz	w0, 96020648 <tegrabl_auth_process_block+0xd4>
    96020624:	12005c00 	and	w0, w0, #0xffffff
    96020628:	32020000 	orr	w0, w0, #0x40000000
	pr_debug("Processed size %d\n", auth->processed_size);
	pr_debug("Safe destination location %p\n", auth->safe_dest_location);

fail:
	return err;
}
    9602062c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96020630:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96020634:	a94363f7 	ldp	x23, x24, [sp, #48]
    96020638:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9602063c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96020640:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96020644:	d65f03c0 	ret
	if (header->signtype == TEGRABL_SIGNINGTYPE_NVIDIA_RSA) {
    96020648:	b94186a0 	ldr	w0, [x21, #388]
    9602064c:	71000c1f 	cmp	w0, #0x3
    96020650:	54000180 	b.eq	96020680 <tegrabl_auth_process_block+0x10c>  // b.none
		if (secure_mode == FUSE_BOOT_SECURITY_AESCMAC) {
    96020654:	b94a1b61 	ldr	w1, [x27, #2584]
    96020658:	34000361 	cbz	w1, 960206c4 <tegrabl_auth_process_block+0x150>
		} else if (secure_mode == FUSE_BOOT_SECURITY_RSA) {
    9602065c:	7100043f 	cmp	w1, #0x1
    96020660:	54000360 	b.eq	960206cc <tegrabl_auth_process_block+0x158>  // b.none
		} else if (secure_mode == FUSE_BOOT_SECURITY_RSA_ENCRYPTION) {
    96020664:	7100103f 	cmp	w1, #0x4
    96020668:	54000201 	b.ne	960206a8 <tegrabl_auth_process_block+0x134>  // b.any
			pr_info("cboot: Info: Handle RSA_SBK as RSA.");
    9602066c:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020670:	9127b000 	add	x0, x0, #0x9ec
    96020674:	940007ff 	bl	96022670 <tegrabl_printf>
			secure_mode = FUSE_BOOT_SECURITY_RSA;
    96020678:	52800020 	mov	w0, #0x1                   	// #1
    9602067c:	b90a1b60 	str	w0, [x27, #2584]
	if (auth->dest_size < header->binarylength) {
    96020680:	b9418aa3 	ldr	w3, [x21, #392]
    96020684:	b9400b41 	ldr	w1, [x26, #8]
    96020688:	6b03003f 	cmp	w1, w3
    9602068c:	54000242 	b.cs	960206d4 <tegrabl_auth_process_block+0x160>  // b.hs, b.nlast
		pr_error("Binary size in header exceeds allowed size\n");
    96020690:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020694:	9128c800 	add	x0, x0, #0xa32
    96020698:	940007f6 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    9602069c:	52800080 	mov	w0, #0x4                   	// #4
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 0);
    960206a0:	72a80800 	movk	w0, #0x4040, lsl #16
    960206a4:	17ffffe2 	b	9602062c <tegrabl_auth_process_block+0xb8>
		} else if (secure_mode == FUSE_BOOT_SECURITY_ECC) {
    960206a8:	7100083f 	cmp	w1, #0x2
    960206ac:	54000100 	b.eq	960206cc <tegrabl_auth_process_block+0x158>  // b.none
			pr_critical("unsupported secure mode %d\n", secure_mode);
    960206b0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960206b4:	91284c00 	add	x0, x0, #0xa13
    960206b8:	940007ee 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960206bc:	52800040 	mov	w0, #0x2                   	// #2
    960206c0:	17fffff8 	b	960206a0 <tegrabl_auth_process_block+0x12c>
			sign_type = TEGRABL_SIGNINGTYPE_ZERO_SBK;
    960206c4:	528000a0 	mov	w0, #0x5                   	// #5
    960206c8:	17ffffee 	b	96020680 <tegrabl_auth_process_block+0x10c>
				sign_type = TEGRABL_SIGNINGTYPE_OEM_ECC;
    960206cc:	2a0103e0 	mov	w0, w1
    960206d0:	17ffffec 	b	96020680 <tegrabl_auth_process_block+0x10c>
	if ((auth->binary_size != 0U) && (auth->binary_size < (header->binarylength + HEADER_SIZE))) {
    960206d4:	b9401341 	ldr	w1, [x26, #16]
    960206d8:	34000161 	cbz	w1, 96020704 <tegrabl_auth_process_block+0x190>
    960206dc:	11064062 	add	w2, w3, #0x190
    960206e0:	6b02003f 	cmp	w1, w2
    960206e4:	54000102 	b.cs	96020704 <tegrabl_auth_process_block+0x190>  // b.hs, b.nlast
		pr_error("Binary size in inner header cannot exceed ");
    960206e8:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960206ec:	91298400 	add	x0, x0, #0xa61
    960206f0:	940007e0 	bl	96022670 <tegrabl_printf>
		pr_error("binary size on outer header\n");
    960206f4:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960206f8:	912a3c00 	add	x0, x0, #0xa8f
				pr_error("binary size is less than 1kb\n");
    960206fc:	940007dd 	bl	96022670 <tegrabl_printf>
    96020700:	17ffffef 	b	960206bc <tegrabl_auth_process_block+0x148>
	bin_type = auth->bin_type;
    96020704:	b940035c 	ldr	w28, [x26]
	if (auth->allow_oem_modes == true) {
    96020708:	39474341 	ldrb	w1, [x26, #464]
	switch (auth->bin_type) {
    9602070c:	5100079c 	sub	w28, w28, #0x1
		allowed_modes |= tegrabl_auth_mode(TEGRABL_SIGNINGTYPE_NVIDIA_RSA);
    96020710:	71000b9f 	cmp	w28, #0x2
    96020714:	1a9f27e2 	cset	w2, cc  // cc = lo, ul, last
    96020718:	531d7042 	lsl	w2, w2, #3
	if (auth->allow_oem_modes == true) {
    9602071c:	34000061 	cbz	w1, 96020728 <tegrabl_auth_process_block+0x1b4>
		allowed_modes |= tegrabl_auth_mode(TEGRABL_SIGNINGTYPE_SBK) |
    96020720:	52800cc1 	mov	w1, #0x66                  	// #102
    96020724:	2a010042 	orr	w2, w2, w1
	auth->allowed_modes = allowed_modes;
    96020728:	b9000742 	str	w2, [x26, #4]
	return 1UL << (uint32_t)mode;
    9602072c:	d2800024 	mov	x4, #0x1                   	// #1
    96020730:	9ac02081 	lsl	x1, x4, x0
	if ((tegrabl_auth_mode(sign_type) & auth->allowed_modes) == 0U) {
    96020734:	6a01005f 	tst	w2, w1
    96020738:	540000c1 	b.ne	96020750 <tegrabl_auth_process_block+0x1dc>  // b.any
		pr_error("Invalid mode in header 0x%08x, allowed 0x%08x\n",
    9602073c:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020740:	912abc00 	add	x0, x0, #0xaaf
    96020744:	940007cb 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 0);
    96020748:	52800300 	mov	w0, #0x18                  	// #24
    9602074c:	17ffffd5 	b	960206a0 <tegrabl_auth_process_block+0x12c>
	auth->allow_oem_modes = false;
    96020750:	3907435f 	strb	wzr, [x26, #464]
	header_info->validation_size = header->binarylength + SIGNED_SECTION_LEN;
    96020754:	11004062 	add	w2, w3, #0x10
	header_info->mode = sign_type;
    96020758:	b9000260 	str	w0, [x19]
	crypto_aes_context = &header_info->aes_context;
    9602075c:	91004261 	add	x1, x19, #0x10
	auth->binary_size = header->binarylength;
    96020760:	b9001343 	str	w3, [x26, #16]
	crypto_rsa_pss_context = &header_info->rsa_pss_context;
    96020764:	9101e27b 	add	x27, x19, #0x78
	header_info->validation_size = header->binarylength + SIGNED_SECTION_LEN;
    96020768:	b9000662 	str	w2, [x19, #4]
	switch (sign_type) {
    9602076c:	71000c1f 	cmp	w0, #0x3
	header_info->binary_size = header->binarylength;
    96020770:	b9000e63 	str	w3, [x19, #12]
	switch (sign_type) {
    96020774:	54000420 	b.eq	960207f8 <tegrabl_auth_process_block+0x284>  // b.none
    96020778:	7100141f 	cmp	w0, #0x5
    9602077c:	540001c0 	b.eq	960207b4 <tegrabl_auth_process_block+0x240>  // b.none
    96020780:	7100041f 	cmp	w0, #0x1
    96020784:	54001281 	b.ne	960209d4 <tegrabl_auth_process_block+0x460>  // b.any
		crypto_rsa_pss_context->key_size = RSA_2048_KEY_SIZE_BITS;
    96020788:	52810000 	mov	w0, #0x800                 	// #2048
    9602078c:	b9002f60 	str	w0, [x27, #44]
			(void *)header->signatures.rsapsssig;
    96020790:	910062a0 	add	x0, x21, #0x18
		crypto_rsa_pss_context->se_context.input_size =
    96020794:	b9002362 	str	w2, [x27, #32]
		crypto_rsa_pss_context->signature =
    96020798:	f9002360 	str	x0, [x27, #64]
									(uint32_t *)tegrabl_brbct_pubkey_rsa_get();
    9602079c:	940001fe 	bl	96020f94 <tegrabl_brbct_pubkey_rsa_get>
		crypto_rsa_pss_context->key =
    960207a0:	f9001f60 	str	x0, [x27, #56]
		err = tegrabl_crypto_init(TEGRABL_CRYPTO_RSA_PSS,
    960207a4:	d2800024 	mov	x4, #0x1                   	// #1
    960207a8:	aa1b03e1 	mov	x1, x27
    960207ac:	2a0403e0 	mov	w0, w4
    960207b0:	1400000a 	b	960207d8 <tegrabl_auth_process_block+0x264>
		crypto_aes_context->is_verify = true;
    960207b4:	39018424 	strb	w4, [x1, #97]
		crypto_aes_context->in_hash = header->signatures.cryptohash;
    960207b8:	910022a0 	add	x0, x21, #0x8
    960207bc:	f9002c20 	str	x0, [x1, #88]
		se_aes_context->keyslot = 14;
    960207c0:	528001c3 	mov	w3, #0xe                   	// #14
		se_aes_context->is_decrypt = false;
    960207c4:	3900c27f 	strb	wzr, [x19, #48]
		err = tegrabl_crypto_init(TEGRABL_CRYPTO_AES,
    960207c8:	52800000 	mov	w0, #0x0                   	// #0
		se_aes_context->is_hash = true;
    960207cc:	3900ca64 	strb	w4, [x19, #50]
		se_aes_context->total_size = header_info->validation_size;
    960207d0:	b9003662 	str	w2, [x19, #52]
		se_aes_context->keyslot = 14;
    960207d4:	79007263 	strh	w3, [x19, #56]
		err = tegrabl_crypto_init(TEGRABL_CRYPTO_RSA_PSS,
    960207d8:	97ff9413 	bl	96005824 <tegrabl_crypto_init>
			if (err != TEGRABL_NO_ERROR) {
    960207dc:	35fff280 	cbnz	w0, 9602062c <tegrabl_auth_process_block+0xb8>
			if (header_info->binary_size < ONE_KB) {
    960207e0:	b9400e60 	ldr	w0, [x19, #12]
    960207e4:	710ffc1f 	cmp	w0, #0x3ff
    960207e8:	540007e8 	b.hi	960208e4 <tegrabl_auth_process_block+0x370>  // b.pmore
				pr_error("binary size is less than 1kb\n");
    960207ec:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960207f0:	912b8400 	add	x0, x0, #0xae1
    960207f4:	17ffffc2 	b	960206fc <tegrabl_auth_process_block+0x188>
		crypto_aes_context->in_hash = NULL;
    960207f8:	f9002c3f 	str	xzr, [x1, #88]
	switch (bin_type) {
    960207fc:	7100439f 	cmp	w28, #0x10
		crypto_aes_context->is_verify = false;
    96020800:	3901843f 	strb	wzr, [x1, #97]
		se_aes_context->is_decrypt = true;
    96020804:	3900c264 	strb	w4, [x19, #48]
		se_aes_context->is_hash = false;
    96020808:	3900ca7f 	strb	wzr, [x19, #50]
		se_aes_context->total_size = header_info->validation_size -
    9602080c:	b9003663 	str	w3, [x19, #52]
	switch (bin_type) {
    96020810:	54000e68 	b.hi	960209dc <tegrabl_auth_process_block+0x468>  // b.pmore
    96020814:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020818:	911e1000 	add	x0, x0, #0x784
    9602081c:	387c4800 	ldrb	w0, [x0, w28, uxtw]
    96020820:	10000062 	adr	x2, 9602082c <tegrabl_auth_process_block+0x2b8>
    96020824:	8b208840 	add	x0, x2, w0, sxtb #2
    96020828:	d61f0000 	br	x0
		aes_params->keyslot = 8;
    9602082c:	52800100 	mov	w0, #0x8                   	// #8
		aes_params->keyslot = 10;
    96020830:	3900e260 	strb	w0, [x19, #56]
		err = tegrabl_crypto_init(TEGRABL_CRYPTO_AES,
    96020834:	52800000 	mov	w0, #0x0                   	// #0
    96020838:	97ff93fb 	bl	96005824 <tegrabl_crypto_init>
		if (err != TEGRABL_NO_ERROR) {
    9602083c:	35ffef40 	cbnz	w0, 96020624 <tegrabl_auth_process_block+0xb0>
		crypto_rsa_pss_context->key_size = RSA_2048_KEY_SIZE_BITS;
    96020840:	52810000 	mov	w0, #0x800                 	// #2048
	if (pubkey == NULL) {
    96020844:	f0000261 	adrp	x1, 9606f000 <eeproms+0x500>
		crypto_rsa_pss_context->key_size = RSA_2048_KEY_SIZE_BITS;
    96020848:	b9002f60 	str	w0, [x27, #44]
		crypto_rsa_pss_context->se_context.input_size =
    9602084c:	b9400660 	ldr	w0, [x19, #4]
    96020850:	b9002360 	str	w0, [x27, #32]
	if (pubkey == NULL) {
    96020854:	f9450820 	ldr	x0, [x1, #2576]
    96020858:	b5000080 	cbnz	x0, 96020868 <tegrabl_auth_process_block+0x2f4>
		pubkey = tegrabl_keystore_get();
    9602085c:	9400026f 	bl	96021218 <tegrabl_keystore_get>
    96020860:	f0000261 	adrp	x1, 9606f000 <eeproms+0x500>
    96020864:	f9050820 	str	x0, [x1, #2576]
	if (pubkey == NULL) {
    96020868:	f9450820 	ldr	x0, [x1, #2576]
    9602086c:	b4000bc0 	cbz	x0, 960209e4 <tegrabl_auth_process_block+0x470>
	switch (bin_type) {
    96020870:	7100439f 	cmp	w28, #0x10
    96020874:	54000bc8 	b.hi	960209ec <tegrabl_auth_process_block+0x478>  // b.pmore
    96020878:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    9602087c:	911e6021 	add	x1, x1, #0x798
    96020880:	387c4821 	ldrb	w1, [x1, w28, uxtw]
    96020884:	10000062 	adr	x2, 96020890 <tegrabl_auth_process_block+0x31c>
    96020888:	8b218841 	add	x1, x2, w1, sxtb #2
    9602088c:	d61f0020 	br	x1
		aes_params->keyslot = 6;
    96020890:	528000c0 	mov	w0, #0x6                   	// #6
    96020894:	17ffffe7 	b	96020830 <tegrabl_auth_process_block+0x2bc>
		aes_params->keyslot = 9;
    96020898:	52800120 	mov	w0, #0x9                   	// #9
    9602089c:	17ffffe5 	b	96020830 <tegrabl_auth_process_block+0x2bc>
		aes_params->keyslot = 7;
    960208a0:	528000e0 	mov	w0, #0x7                   	// #7
    960208a4:	17ffffe3 	b	96020830 <tegrabl_auth_process_block+0x2bc>
		aes_params->keyslot = 10;
    960208a8:	52800140 	mov	w0, #0xa                   	// #10
    960208ac:	17ffffe1 	b	96020830 <tegrabl_auth_process_block+0x2bc>
		rsa_pss_context->key = (uint32_t *)pubkey->spe_fw_pub_rsa_key;
    960208b0:	91040000 	add	x0, x0, #0x100
		rsa_pss_context->key = (uint32_t *)pubkey->mts_pub_rsa_key;
    960208b4:	f9005a60 	str	x0, [x19, #176]
			(void *)header->signatures.rsapsssig;
    960208b8:	910062a0 	add	x0, x21, #0x18
		err = tegrabl_crypto_init(TEGRABL_CRYPTO_RSA_PSS,
    960208bc:	aa1b03e1 	mov	x1, x27
		crypto_rsa_pss_context->signature =
    960208c0:	f9002360 	str	x0, [x27, #64]
		err = tegrabl_crypto_init(TEGRABL_CRYPTO_RSA_PSS,
    960208c4:	52800020 	mov	w0, #0x1                   	// #1
    960208c8:	17ffffc4 	b	960207d8 <tegrabl_auth_process_block+0x264>
		rsa_pss_context->key = (uint32_t *)pubkey->ape_fw_pub_rsa_key;
    960208cc:	91080000 	add	x0, x0, #0x200
    960208d0:	17fffff9 	b	960208b4 <tegrabl_auth_process_block+0x340>
		rsa_pss_context->key = (uint32_t *)pubkey->scecpe_fw_pub_rsa_key;
    960208d4:	910c0000 	add	x0, x0, #0x300
    960208d8:	17fffff7 	b	960208b4 <tegrabl_auth_process_block+0x340>
		rsa_pss_context->key = (uint32_t *)pubkey->mts_pub_rsa_key;
    960208dc:	91100000 	add	x0, x0, #0x400
    960208e0:	17fffff5 	b	960208b4 <tegrabl_auth_process_block+0x340>
			if (header_info->validation_size < FULL_BINARY_VERIFY_THRESHOLD &&
    960208e4:	b9400662 	ldr	w2, [x19, #4]
    960208e8:	528c7fe1 	mov	w1, #0x63ff                	// #25599
    960208ec:	6b01005f 	cmp	w2, w1
    960208f0:	54000308 	b.hi	96020950 <tegrabl_auth_process_block+0x3dc>  // b.pmore
				header_info->binary_size > (buffer_size - HEADER_SIZE)) {
    960208f4:	51064281 	sub	w1, w20, #0x190
			if (header_info->validation_size < FULL_BINARY_VERIFY_THRESHOLD &&
    960208f8:	6b01001f 	cmp	w0, w1
    960208fc:	540002a9 	b.ls	96020950 <tegrabl_auth_process_block+0x3dc>  // b.plast
				memcpy(safe_dest_location, buffer, buffer_size);
    96020900:	aa1503e1 	mov	x1, x21
    96020904:	2a1403e2 	mov	w2, w20
    96020908:	aa1603e0 	mov	x0, x22
    9602090c:	94002586 	bl	96029f24 <memcpy>
				auth->remaining_size = header_info->binary_size -
    96020910:	52803200 	mov	w0, #0x190                 	// #400
    96020914:	4b140001 	sub	w1, w0, w20
    96020918:	b9400e60 	ldr	w0, [x19, #12]
    9602091c:	0b010000 	add	w0, w0, w1
    96020920:	b9001740 	str	w0, [x26, #20]
				auth->short_binary = true;
    96020924:	52800020 	mov	w0, #0x1                   	// #1
    96020928:	39074740 	strb	w0, [x26, #465]
	auth->processed_size += buffer_size;
    9602092c:	b9400f40 	ldr	w0, [x26, #12]
	auth->cur_header = cur_header;
    96020930:	29036758 	stp	w24, w25, [x26, #24]
	auth->processed_size += buffer_size;
    96020934:	0b000294 	add	w20, w20, w0
	auth->safe_dest_location = (void *)((uintptr_t)auth->dest_location +
    96020938:	f9401740 	ldr	x0, [x26, #40]
	auth->processed_size += buffer_size;
    9602093c:	b9000f54 	str	w20, [x26, #12]
	auth->safe_dest_location = (void *)((uintptr_t)auth->dest_location +
    96020940:	8b344014 	add	x20, x0, w20, uxtw
	auth->num_headers = num_headers;
    96020944:	52800000 	mov	w0, #0x0                   	// #0
	auth->safe_dest_location = (void *)((uintptr_t)auth->dest_location +
    96020948:	f9001354 	str	x20, [x26, #32]
    9602094c:	17ffff38 	b	9602062c <tegrabl_auth_process_block+0xb8>
			buffer_size -= (HEADER_SIZE - SIGNED_SECTION_LEN);
    96020950:	51060294 	sub	w20, w20, #0x180
			err = tegrabl_auth_subprocess(header_info, buffer,
    96020954:	aa1703e3 	mov	x3, x23
    96020958:	2a1403e2 	mov	w2, w20
    9602095c:	910602a1 	add	x1, x21, #0x180
    96020960:	aa1303e0 	mov	x0, x19
    96020964:	97fffe8e 	bl	9602039c <tegrabl_auth_subprocess>
			if (err != TEGRABL_NO_ERROR) {
    96020968:	35ffe620 	cbnz	w0, 9602062c <tegrabl_auth_process_block+0xb8>
			buffer_size = MIN(buffer_size, header_info->validation_size);
    9602096c:	b9400660 	ldr	w0, [x19, #4]
			buffer = (void *)((uintptr_t)buffer + SIGNED_SECTION_LEN);
    96020970:	910642a1 	add	x1, x21, #0x190
			auth->processed_size = 0;
    96020974:	b9000f5f 	str	wzr, [x26, #12]
			buffer_size = MIN(buffer_size, header_info->validation_size);
    96020978:	6b00029f 	cmp	w20, w0
    9602097c:	1a809294 	csel	w20, w20, w0, ls  // ls = plast
		if (safe_dest_location != buffer) {
    96020980:	eb0102df 	cmp	x22, x1
			auth->remaining_size = header_info->validation_size - buffer_size;
    96020984:	4b140000 	sub	w0, w0, w20
    96020988:	b9001740 	str	w0, [x26, #20]
			buffer_size -= SIGNED_SECTION_LEN;
    9602098c:	51004294 	sub	w20, w20, #0x10
		if (safe_dest_location != buffer) {
    96020990:	54fffce0 	b.eq	9602092c <tegrabl_auth_process_block+0x3b8>  // b.none
			if ((buffer_size != 0U) &&
    96020994:	34fffcd4 	cbz	w20, 9602092c <tegrabl_auth_process_block+0x3b8>
				(header_info->mode != TEGRABL_SIGNINGTYPE_NVIDIA_RSA) &&
    96020998:	b9400260 	ldr	w0, [x19]
			if ((buffer_size != 0U) &&
    9602099c:	71000c1f 	cmp	w0, #0x3
    960209a0:	54fffc60 	b.eq	9602092c <tegrabl_auth_process_block+0x3b8>  // b.none
				(header_info->mode != TEGRABL_SIGNINGTYPE_NVIDIA_RSA) &&
    960209a4:	7100181f 	cmp	w0, #0x6
    960209a8:	54fffc20 	b.eq	9602092c <tegrabl_auth_process_block+0x3b8>  // b.none
				memcpy(safe_dest_location, buffer, buffer_size);
    960209ac:	2a1403e2 	mov	w2, w20
    960209b0:	aa1603e0 	mov	x0, x22
    960209b4:	9400255c 	bl	96029f24 <memcpy>
    960209b8:	17ffffdd 	b	9602092c <tegrabl_auth_process_block+0x3b8>
		} else if (num_headers == 0U) {
    960209bc:	350001d8 	cbnz	w24, 960209f4 <tegrabl_auth_process_block+0x480>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    960209c0:	528001a0 	mov	w0, #0xd                   	// #13
    960209c4:	17ffff37 	b	960206a0 <tegrabl_auth_process_block+0x12c>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960209c8:	52800040 	mov	w0, #0x2                   	// #2
    960209cc:	72a80800 	movk	w0, #0x4040, lsl #16
}
    960209d0:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    960209d4:	52800020 	mov	w0, #0x1                   	// #1
    960209d8:	17ffff32 	b	960206a0 <tegrabl_auth_process_block+0x12c>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    960209dc:	5280a040 	mov	w0, #0x502                 	// #1282
    960209e0:	17ffff30 	b	960206a0 <tegrabl_auth_process_block+0x12c>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 0);
    960209e4:	52800400 	mov	w0, #0x20                  	// #32
    960209e8:	17ffff2e 	b	960206a0 <tegrabl_auth_process_block+0x12c>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    960209ec:	5280e040 	mov	w0, #0x702                 	// #1794
    960209f0:	17ffff2c 	b	960206a0 <tegrabl_auth_process_block+0x12c>
	if (header_info->mode == TEGRABL_SIGNINGTYPE_OEM_RSA_SBK) {
    960209f4:	2a1903fb 	mov	w27, w25
    960209f8:	d2801a00 	mov	x0, #0xd0                  	// #208
    960209fc:	9b006b60 	madd	x0, x27, x0, x26
    96020a00:	b9403000 	ldr	w0, [x0, #48]
    96020a04:	7100181f 	cmp	w0, #0x6
    96020a08:	540000a1 	b.ne	96020a1c <tegrabl_auth_process_block+0x4a8>  // b.any
		memcpy(safe_dest_location, buffer, buffer_size);
    96020a0c:	2a1403e2 	mov	w2, w20
    96020a10:	aa1503e1 	mov	x1, x21
    96020a14:	aa1603e0 	mov	x0, x22
    96020a18:	94002543 	bl	96029f24 <memcpy>
	if (!auth->short_binary) {
    96020a1c:	39474740 	ldrb	w0, [x26, #465]
    96020a20:	350005c0 	cbnz	w0, 96020ad8 <tegrabl_auth_process_block+0x564>
		err = tegrabl_auth_subprocess(header_info, buffer, buffer_size,
    96020a24:	aa1603e3 	mov	x3, x22
    96020a28:	2a1403e2 	mov	w2, w20
    96020a2c:	aa1503e1 	mov	x1, x21
    96020a30:	aa1303e0 	mov	x0, x19
    96020a34:	97fffe5a 	bl	9602039c <tegrabl_auth_subprocess>
		if (err != TEGRABL_NO_ERROR) {
    96020a38:	35ffdfa0 	cbnz	w0, 9602062c <tegrabl_auth_process_block+0xb8>
	if (safe_dest_location != buffer && header_info->mode != TEGRABL_SIGNINGTYPE_OEM_RSA_SBK &&
    96020a3c:	eb1602bf 	cmp	x21, x22
    96020a40:	54000180 	b.eq	96020a70 <tegrabl_auth_process_block+0x4fc>  // b.none
    96020a44:	d2801a00 	mov	x0, #0xd0                  	// #208
    96020a48:	9b006b60 	madd	x0, x27, x0, x26
    96020a4c:	b9403000 	ldr	w0, [x0, #48]
    96020a50:	7100181f 	cmp	w0, #0x6
    96020a54:	540000e0 	b.eq	96020a70 <tegrabl_auth_process_block+0x4fc>  // b.none
    96020a58:	71000c1f 	cmp	w0, #0x3
    96020a5c:	540000a0 	b.eq	96020a70 <tegrabl_auth_process_block+0x4fc>  // b.none
		memcpy(safe_dest_location, buffer, buffer_size);
    96020a60:	2a1403e2 	mov	w2, w20
    96020a64:	aa1503e1 	mov	x1, x21
    96020a68:	aa1603e0 	mov	x0, x22
    96020a6c:	9400252e 	bl	96029f24 <memcpy>
	if (auth->short_binary && (auth->remaining_size <= buffer_size)) {
    96020a70:	39474740 	ldrb	w0, [x26, #465]
    96020a74:	340002a0 	cbz	w0, 96020ac8 <tegrabl_auth_process_block+0x554>
    96020a78:	b9401740 	ldr	w0, [x26, #20]
    96020a7c:	6b00029f 	cmp	w20, w0
    96020a80:	54000243 	b.cc	96020ac8 <tegrabl_auth_process_block+0x554>  // b.lo, b.ul, b.last
		err = tegrabl_auth_subprocess(header_info,
    96020a84:	b9400f42 	ldr	w2, [x26, #12]
    96020a88:	aa1703e3 	mov	x3, x23
    96020a8c:	910602e1 	add	x1, x23, #0x180
    96020a90:	aa1303e0 	mov	x0, x19
    96020a94:	0b020282 	add	w2, w20, w2
    96020a98:	97fffe41 	bl	9602039c <tegrabl_auth_subprocess>
		if (err != TEGRABL_NO_ERROR) {
    96020a9c:	35ffdc80 	cbnz	w0, 9602062c <tegrabl_auth_process_block+0xb8>
		if (header_info->mode != TEGRABL_SIGNINGTYPE_NVIDIA_RSA &&
    96020aa0:	d2801a00 	mov	x0, #0xd0                  	// #208
    96020aa4:	9b006b60 	madd	x0, x27, x0, x26
    96020aa8:	b9403001 	ldr	w1, [x0, #48]
    96020aac:	71000c3f 	cmp	w1, #0x3
    96020ab0:	7a461824 	ccmp	w1, #0x6, #0x4, ne  // ne = any
    96020ab4:	540000a0 	b.eq	96020ac8 <tegrabl_auth_process_block+0x554>  // b.none
			memmove(dest_addr,
    96020ab8:	b9403c02 	ldr	w2, [x0, #60]
    96020abc:	910642e1 	add	x1, x23, #0x190
    96020ac0:	aa1703e0 	mov	x0, x23
    96020ac4:	94002597 	bl	9602a120 <memmove>
	auth->remaining_size = auth->remaining_size - buffer_size;
    96020ac8:	b9401740 	ldr	w0, [x26, #20]
    96020acc:	4b140000 	sub	w0, w0, w20
    96020ad0:	b9001740 	str	w0, [x26, #20]
    96020ad4:	17ffff96 	b	9602092c <tegrabl_auth_process_block+0x3b8>
	if (safe_dest_location != buffer && header_info->mode != TEGRABL_SIGNINGTYPE_OEM_RSA_SBK &&
    96020ad8:	eb1602bf 	cmp	x21, x22
    96020adc:	54fffb41 	b.ne	96020a44 <tegrabl_auth_process_block+0x4d0>  // b.any
    96020ae0:	17ffffe6 	b	96020a78 <tegrabl_auth_process_block+0x504>

0000000096020ae4 <tegrabl_auth_finalize>:
fail:
	return size;
}

tegrabl_error_t tegrabl_auth_finalize(struct tegrabl_auth_handle *auth)
{
    96020ae4:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96020ae8:	910003fd 	mov	x29, sp
    96020aec:	a90153f3 	stp	x19, x20, [sp, #16]
    96020af0:	a9025bf5 	stp	x21, x22, [sp, #32]
    96020af4:	a90363f7 	stp	x23, x24, [sp, #48]
    96020af8:	f90023f9 	str	x25, [sp, #64]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t i = 0;
	struct tegrabl_auth_header_info *headers = NULL;

	pr_debug("Verifying signature/hash of binary\n");
	if (auth == NULL) {
    96020afc:	b40001e0 	cbz	x0, 96020b38 <tegrabl_auth_finalize+0x54>
				goto fail;
			}
			break;
		}
		default:
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020b00:	52800059 	mov	w25, #0x2                   	// #2
		switch (headers[i].mode) {
    96020b04:	d0000116 	adrp	x22, 96042000 <__func__.4833+0x5>
    96020b08:	aa0003f4 	mov	x20, x0
	headers = auth->headers;
    96020b0c:	9100c017 	add	x23, x0, #0x30
		switch (headers[i].mode) {
    96020b10:	911eb2d6 	add	x22, x22, #0x7ac
	for (i = 0; i < auth->num_headers; i++) {
    96020b14:	52800001 	mov	w1, #0x0                   	// #0
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96020b18:	52800013 	mov	w19, #0x0                   	// #0
		switch (headers[i].mode) {
    96020b1c:	52801a18 	mov	w24, #0xd0                  	// #208
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020b20:	72a80819 	movk	w25, #0x4040, lsl #16
	for (i = 0; i < auth->num_headers; i++) {
    96020b24:	b9401a80 	ldr	w0, [x20, #24]
    96020b28:	6b01001f 	cmp	w0, w1
    96020b2c:	540000c8 	b.hi	96020b44 <tegrabl_auth_finalize+0x60>  // b.pmore
			break;
		}
	}

	if (auth->check_nvidia_header == true) {
    96020b30:	39474a80 	ldrb	w0, [x20, #466]
    96020b34:	34000440 	cbz	w0, 96020bbc <tegrabl_auth_finalize+0xd8>
		pr_debug("Binary is not Nvidia signed\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020b38:	52800053 	mov	w19, #0x2                   	// #2
    96020b3c:	72a80813 	movk	w19, #0x4040, lsl #16
		goto fail;
	}

fail:
	return err;
    96020b40:	1400001f 	b	96020bbc <tegrabl_auth_finalize+0xd8>
		switch (headers[i].mode) {
    96020b44:	9bb87c22 	umull	x2, w1, w24
    96020b48:	11000435 	add	w21, w1, #0x1
    96020b4c:	8b0202e0 	add	x0, x23, x2
    96020b50:	b8626ae2 	ldr	w2, [x23, x2]
    96020b54:	51000443 	sub	w3, w2, #0x1
    96020b58:	7100147f 	cmp	w3, #0x5
    96020b5c:	54000508 	b.hi	96020bfc <tegrabl_auth_finalize+0x118>  // b.pmore
    96020b60:	38634ac1 	ldrb	w1, [x22, w3, uxtw]
    96020b64:	10000063 	adr	x3, 96020b70 <tegrabl_auth_finalize+0x8c>
    96020b68:	8b218861 	add	x1, x3, w1, sxtb #2
    96020b6c:	d61f0020 	br	x1
			auth->check_nvidia_header = (auth->check_nvidia_header == true) &&
    96020b70:	39474a81 	ldrb	w1, [x20, #466]
    96020b74:	34000141 	cbz	w1, 96020b9c <tegrabl_auth_finalize+0xb8>
    96020b78:	71000c5f 	cmp	w2, #0x3
    96020b7c:	1a9f07e1 	cset	w1, ne  // ne = any
    96020b80:	39074a81 	strb	w1, [x20, #466]
			err = tegrabl_crypto_finalize(
    96020b84:	9101e000 	add	x0, x0, #0x78
    96020b88:	97ff93f6 	bl	96005b60 <tegrabl_crypto_finalize>
			if (err != TEGRABL_NO_ERROR) {
    96020b8c:	350000c0 	cbnz	w0, 96020ba4 <tegrabl_auth_finalize+0xc0>
			auth->check_nvidia_header = (auth->check_nvidia_header == true) &&
    96020b90:	52800013 	mov	w19, #0x0                   	// #0
	for (i = 0; i < auth->num_headers; i++) {
    96020b94:	2a1503e1 	mov	w1, w21
    96020b98:	17ffffe3 	b	96020b24 <tegrabl_auth_finalize+0x40>
			auth->check_nvidia_header = (auth->check_nvidia_header == true) &&
    96020b9c:	52800001 	mov	w1, #0x0                   	// #0
    96020ba0:	17fffff8 	b	96020b80 <tegrabl_auth_finalize+0x9c>
    96020ba4:	12005c00 	and	w0, w0, #0xffffff
				pr_error("SHA verification failed for header %d\n", i + 1U);
    96020ba8:	2a1503e1 	mov	w1, w21
    96020bac:	32020013 	orr	w19, w0, #0x40000000
    96020bb0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020bb4:	91205000 	add	x0, x0, #0x814
				pr_error("AES verification failed for header %d\n", i + 1U);
    96020bb8:	940006ae 	bl	96022670 <tegrabl_printf>
}
    96020bbc:	2a1303e0 	mov	w0, w19
    96020bc0:	f94023f9 	ldr	x25, [sp, #64]
    96020bc4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96020bc8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96020bcc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96020bd0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96020bd4:	d65f03c0 	ret
			err = tegrabl_crypto_finalize(
    96020bd8:	91004000 	add	x0, x0, #0x10
    96020bdc:	97ff93e1 	bl	96005b60 <tegrabl_crypto_finalize>
			if (err != TEGRABL_NO_ERROR) {
    96020be0:	34fffd80 	cbz	w0, 96020b90 <tegrabl_auth_finalize+0xac>
    96020be4:	12005c00 	and	w0, w0, #0xffffff
				pr_error("AES verification failed for header %d\n", i + 1U);
    96020be8:	2a1503e1 	mov	w1, w21
    96020bec:	32020013 	orr	w19, w0, #0x40000000
    96020bf0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020bf4:	9120f800 	add	x0, x0, #0x83e
    96020bf8:	17fffff0 	b	96020bb8 <tegrabl_auth_finalize+0xd4>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020bfc:	2a1903f3 	mov	w19, w25
    96020c00:	17ffffe5 	b	96020b94 <tegrabl_auth_finalize+0xb0>

0000000096020c04 <tegrabl_auth_end>:
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t i = 0;
	struct tegrabl_auth_header_info *headers = NULL;

	if (auth == NULL) {
    96020c04:	b40004c0 	cbz	x0, 96020c9c <tegrabl_auth_end+0x98>
{
    96020c08:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96020c0c:	910003fd 	mov	x29, sp
    96020c10:	a90153f3 	stp	x19, x20, [sp, #16]
    96020c14:	aa0003f3 	mov	x19, x0
    96020c18:	a9025bf5 	stp	x21, x22, [sp, #32]
	}

	pr_debug("Releasing resources\n");
	headers = auth->headers;

	for (i = 0; i < auth->num_headers; i++) {
    96020c1c:	52800014 	mov	w20, #0x0                   	// #0
{
    96020c20:	a90363f7 	stp	x23, x24, [sp, #48]
	headers = auth->headers;
    96020c24:	9100c015 	add	x21, x0, #0x30
		if (headers[i].mode == TEGRABL_SIGNINGTYPE_NVIDIA_RSA ||
    96020c28:	52801a18 	mov	w24, #0xd0                  	// #208
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96020c2c:	52800000 	mov	w0, #0x0                   	// #0
	for (i = 0; i < auth->num_headers; i++) {
    96020c30:	b9401a61 	ldr	w1, [x19, #24]
    96020c34:	6b14003f 	cmp	w1, w20
    96020c38:	540000c8 	b.hi	96020c50 <tegrabl_auth_end+0x4c>  // b.pmore

	}

fail:
	return err;
}
    96020c3c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96020c40:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96020c44:	a94363f7 	ldp	x23, x24, [sp, #48]
    96020c48:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96020c4c:	d65f03c0 	ret
		if (headers[i].mode == TEGRABL_SIGNINGTYPE_NVIDIA_RSA ||
    96020c50:	9bb87e96 	umull	x22, w20, w24
    96020c54:	8b1602b7 	add	x23, x21, x22
    96020c58:	b8766aa1 	ldr	w1, [x21, x22]
    96020c5c:	121e7822 	and	w2, w1, #0xfffffffd
    96020c60:	7100045f 	cmp	w2, #0x1
    96020c64:	54000060 	b.eq	96020c70 <tegrabl_auth_end+0x6c>  // b.none
			headers[i].mode == TEGRABL_SIGNINGTYPE_OEM_RSA ||
    96020c68:	7100183f 	cmp	w1, #0x6
    96020c6c:	54000061 	b.ne	96020c78 <tegrabl_auth_end+0x74>  // b.any
			err = tegrabl_crypto_close(
    96020c70:	9101e2e0 	add	x0, x23, #0x78
    96020c74:	97ff93f8 	bl	96005c54 <tegrabl_crypto_close>
		if (headers[i].mode == TEGRABL_SIGNINGTYPE_NVIDIA_RSA ||
    96020c78:	b8766aa1 	ldr	w1, [x21, x22]
    96020c7c:	51001422 	sub	w2, w1, #0x5
    96020c80:	7100045f 	cmp	w2, #0x1
    96020c84:	7a438824 	ccmp	w1, #0x3, #0x4, hi  // hi = pmore
    96020c88:	54000061 	b.ne	96020c94 <tegrabl_auth_end+0x90>  // b.any
			err = tegrabl_crypto_close(
    96020c8c:	910042e0 	add	x0, x23, #0x10
    96020c90:	97ff93f1 	bl	96005c54 <tegrabl_crypto_close>
	for (i = 0; i < auth->num_headers; i++) {
    96020c94:	11000694 	add	w20, w20, #0x1
    96020c98:	17ffffe6 	b	96020c30 <tegrabl_auth_end+0x2c>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96020c9c:	52800040 	mov	w0, #0x2                   	// #2
    96020ca0:	72a80800 	movk	w0, #0x4040, lsl #16
}
    96020ca4:	d65f03c0 	ret

0000000096020ca8 <tegrabl_auth_get_binary_len>:
{
	return sizeof(struct tegrabl_sigheader);
}

uint32_t tegrabl_auth_get_binary_len(void *bin_load_addr)
{
    96020ca8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96020cac:	910003fd 	mov	x29, sp
    96020cb0:	f9000bf3 	str	x19, [sp, #16]
    96020cb4:	aa0003f3 	mov	x19, x0
	uint32_t bin_len;
	struct tegrabl_sigheader *header = (struct tegrabl_sigheader *)bin_load_addr;

	if (tegrabl_auth_check_sigheader(bin_load_addr)) {
    96020cb8:	97fffdf9 	bl	9602049c <tegrabl_auth_check_sigheader>
    96020cbc:	72001c1f 	tst	w0, #0xff
    96020cc0:	540000a0 	b.eq	96020cd4 <tegrabl_auth_get_binary_len+0x2c>  // b.none
		pr_trace("Binary len: %u\n", header->binarylength);
		bin_len = header->binarylength;
    96020cc4:	b9418a60 	ldr	w0, [x19, #392]

		bin_len = 0;
	}

	return bin_len;
}
    96020cc8:	f9400bf3 	ldr	x19, [sp, #16]
    96020ccc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96020cd0:	d65f03c0 	ret
		bin_len = 0;
    96020cd4:	52800000 	mov	w0, #0x0                   	// #0
	return bin_len;
    96020cd8:	17fffffc 	b	96020cc8 <tegrabl_auth_get_binary_len+0x20>

0000000096020cdc <tegrabl_auth_payload>:
{
    96020cdc:	d10883ff 	sub	sp, sp, #0x220
    96020ce0:	a9007bfd 	stp	x29, x30, [sp]
    96020ce4:	910003fd 	mov	x29, sp
    96020ce8:	a90153f3 	stp	x19, x20, [sp, #16]
    96020cec:	2a0003f3 	mov	w19, w0
    96020cf0:	a9025bf5 	stp	x21, x22, [sp, #32]
    96020cf4:	aa0203f4 	mov	x20, x2
    96020cf8:	2a0303f6 	mov	w22, w3
	struct tegrabl_auth_handle auth = {0};
    96020cfc:	d2803b02 	mov	x2, #0x1d8                 	// #472
{
    96020d00:	f9001bf7 	str	x23, [sp, #48]
	struct tegrabl_auth_handle auth = {0};
    96020d04:	910123a0 	add	x0, x29, #0x48
{
    96020d08:	aa0103f7 	mov	x23, x1
	struct tegrabl_auth_handle auth = {0};
    96020d0c:	52800001 	mov	w1, #0x0                   	// #0
    96020d10:	94002446 	bl	96029e28 <memset>
	pr_info("T18x: Authenticate %s (bin_type %u), max size 0x%x\n", name,
    96020d14:	2a1603e3 	mov	w3, w22
    96020d18:	2a1303e2 	mov	w2, w19
    96020d1c:	aa1703e1 	mov	x1, x23
    96020d20:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020d24:	9121a000 	add	x0, x0, #0x868
    96020d28:	94000652 	bl	96022670 <tegrabl_printf>
    96020d2c:	7100767f 	cmp	w19, #0x1d
    96020d30:	540000c8 	b.hi	96020d48 <tegrabl_auth_payload+0x6c>  // b.pmore
    96020d34:	d2800035 	mov	x21, #0x1                   	// #1
    96020d38:	d2a62400 	mov	x0, #0x31200000            	// #824180736
    96020d3c:	9ad322a1 	lsl	x1, x21, x19
    96020d40:	ea00003f 	tst	x1, x0
    96020d44:	54000101 	b.ne	96020d64 <tegrabl_auth_payload+0x88>  // b.any
		pr_info("Error: Unsupported partition %s (bin_type %d)\n", name,
    96020d48:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020d4c:	2a1303e2 	mov	w2, w19
    96020d50:	aa1703e1 	mov	x1, x23
    96020d54:	91227c00 	add	x0, x0, #0x89f
    96020d58:	94000646 	bl	96022670 <tegrabl_printf>
	err = tegrabl_decrypt_block(payload, binary_len, AES_KEYSLOT_SBK);
    96020d5c:	52800013 	mov	w19, #0x0                   	// #0
    96020d60:	14000009 	b	96020d84 <tegrabl_auth_payload+0xa8>
	binary_len = tegrabl_auth_get_binary_len(payload);
    96020d64:	aa1403e0 	mov	x0, x20
    96020d68:	97ffffd0 	bl	96020ca8 <tegrabl_auth_get_binary_len>
    96020d6c:	2a0003f7 	mov	w23, w0
	if (binary_len == 0) {
    96020d70:	350001c0 	cbnz	w0, 96020da8 <tegrabl_auth_payload+0xcc>
		err = TEGRABL_ERR_INVALID;
    96020d74:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("binary has 0 length\n");
    96020d78:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020d7c:	91234400 	add	x0, x0, #0x8d1
    96020d80:	9400063c 	bl	96022670 <tegrabl_printf>
	tegrabl_auth_end(&auth);
    96020d84:	910123a0 	add	x0, x29, #0x48
    96020d88:	97ffff9f 	bl	96020c04 <tegrabl_auth_end>
}
    96020d8c:	2a1303e0 	mov	w0, w19
    96020d90:	f9401bf7 	ldr	x23, [sp, #48]
    96020d94:	a9407bfd 	ldp	x29, x30, [sp]
    96020d98:	a94153f3 	ldp	x19, x20, [sp, #16]
    96020d9c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96020da0:	910883ff 	add	sp, sp, #0x220
    96020da4:	d65f03c0 	ret
	err = tegrabl_auth_initiate(bin_type, payload, max_size, &auth);
    96020da8:	910123a3 	add	x3, x29, #0x48
    96020dac:	2a1603e2 	mov	w2, w22
    96020db0:	aa1403e1 	mov	x1, x20
    96020db4:	2a1303e0 	mov	w0, w19
    96020db8:	97fffdce 	bl	960204f0 <tegrabl_auth_initiate>
	if (err != TEGRABL_NO_ERROR) {
    96020dbc:	34000080 	cbz	w0, 96020dcc <tegrabl_auth_payload+0xf0>
    96020dc0:	12005c00 	and	w0, w0, #0xffffff
    96020dc4:	32020013 	orr	w19, w0, #0x40000000
		goto fail;
    96020dc8:	17ffffef 	b	96020d84 <tegrabl_auth_payload+0xa8>
	err = tegrabl_auth_process_block(&auth, payload, max_size, true);
    96020dcc:	2a1503e3 	mov	w3, w21
    96020dd0:	2a1603e2 	mov	w2, w22
    96020dd4:	aa1403e1 	mov	x1, x20
    96020dd8:	910123a0 	add	x0, x29, #0x48
    96020ddc:	97fffde6 	bl	96020574 <tegrabl_auth_process_block>
	if (err != TEGRABL_NO_ERROR) {
    96020de0:	35ffff00 	cbnz	w0, 96020dc0 <tegrabl_auth_payload+0xe4>
	err = tegrabl_auth_finalize(&auth);
    96020de4:	910123a0 	add	x0, x29, #0x48
    96020de8:	97ffff3f 	bl	96020ae4 <tegrabl_auth_finalize>
	if (err != TEGRABL_NO_ERROR) {
    96020dec:	35fffea0 	cbnz	w0, 96020dc0 <tegrabl_auth_payload+0xe4>
	pr_info("Decrypt the buffer ... ");
    96020df0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020df4:	9123a400 	add	x0, x0, #0x8e9
    96020df8:	9400061e 	bl	96022670 <tegrabl_printf>
	err = tegrabl_fuse_read(FUSE_TYPE_BOOT_SECURITY_INFO, &fuse, sizeof(fuse));
    96020dfc:	52800082 	mov	w2, #0x4                   	// #4
    96020e00:	910113a1 	add	x1, x29, #0x44
    96020e04:	52800000 	mov	w0, #0x0                   	// #0
    96020e08:	97fff673 	bl	9601e7d4 <tegrabl_fuse_read>
    96020e0c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96020e10:	340001a0 	cbz	w0, 96020e44 <tegrabl_auth_payload+0x168>
    96020e14:	12005e73 	and	w19, w19, #0xffffff
		pr_error("%s: failed to read fuse\n", __func__);
    96020e18:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96020e1c:	32020273 	orr	w19, w19, #0x40000000
    96020e20:	911ec821 	add	x1, x1, #0x7b2
    96020e24:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020e28:	91241000 	add	x0, x0, #0x904
    96020e2c:	94000611 	bl	96022670 <tegrabl_printf>
		pr_error("\nFailed to decrypt the buffer (err=%u)\n", err);
    96020e30:	2a1303e1 	mov	w1, w19
    96020e34:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020e38:	9126e000 	add	x0, x0, #0x9b8
    96020e3c:	9400060d 	bl	96022670 <tegrabl_printf>
    96020e40:	17ffffd1 	b	96020d84 <tegrabl_auth_payload+0xa8>
	if (fuse != FUSE_BOOT_SECURITY_RSA_ENCRYPTION) {
    96020e44:	b94047a2 	ldr	w2, [x29, #68]
    96020e48:	7100105f 	cmp	w2, #0x4
    96020e4c:	54000160 	b.eq	96020e78 <tegrabl_auth_payload+0x19c>  // b.none
		pr_warn("%s: fuse (0x%x) is not burnt to do encryption (0x%x); skip decryption.\n", __func__, fuse,
    96020e50:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96020e54:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020e58:	52800083 	mov	w3, #0x4                   	// #4
    96020e5c:	911ec821 	add	x1, x1, #0x7b2
    96020e60:	91248000 	add	x0, x0, #0x920
    96020e64:	94000603 	bl	96022670 <tegrabl_printf>
		pr_info("done\n");
    96020e68:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020e6c:	91278c00 	add	x0, x0, #0x9e3
    96020e70:	94000600 	bl	96022670 <tegrabl_printf>
    96020e74:	17ffffba 	b	96020d5c <tegrabl_auth_payload+0x80>
	if (tegrabl_keyslot_check_if_key_is_nonzero(keyslot)) {
    96020e78:	528001c0 	mov	w0, #0xe                   	// #14
    96020e7c:	9400024b 	bl	960217a8 <tegrabl_keyslot_check_if_key_is_nonzero>
    96020e80:	72001c1f 	tst	w0, #0xff
    96020e84:	540000c1 	b.ne	96020e9c <tegrabl_auth_payload+0x1c0>  // b.any
		pr_warn("fuse is burnt to do encryption, but keyslot %u is zero; skip decryption.\n", keyslot);
    96020e88:	528001c1 	mov	w1, #0xe                   	// #14
    96020e8c:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020e90:	9125ac00 	add	x0, x0, #0x96b
    96020e94:	940005f7 	bl	96022670 <tegrabl_printf>
    96020e98:	17fffff4 	b	96020e68 <tegrabl_auth_payload+0x18c>
	err = tegrabl_cipher_binary(buffer, buffer_size, buffer, true);
    96020e9c:	2a1503e3 	mov	w3, w21
    96020ea0:	aa1403e2 	mov	x2, x20
    96020ea4:	2a1703e1 	mov	w1, w23
    96020ea8:	aa1403e0 	mov	x0, x20
    96020eac:	97fffd02 	bl	960202b4 <tegrabl_cipher_binary>
    96020eb0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96020eb4:	35fffbe0 	cbnz	w0, 96020e30 <tegrabl_auth_payload+0x154>
    96020eb8:	17ffffec 	b	96020e68 <tegrabl_auth_payload+0x18c>

0000000096020ebc <tegrabl_auth_complete>:

/* Final step: clear the SBK keyslot */
tegrabl_error_t tegrabl_auth_complete(void)
{
    96020ebc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t err;

	err = tegrabl_se_clear_aes_keyslot(AES_KEYSLOT_SBK);
    96020ec0:	528001c0 	mov	w0, #0xe                   	// #14
{
    96020ec4:	910003fd 	mov	x29, sp
    96020ec8:	f9000bf3 	str	x19, [sp, #16]
	err = tegrabl_se_clear_aes_keyslot(AES_KEYSLOT_SBK);
    96020ecc:	94002d42 	bl	9602c3d4 <tegrabl_se_clear_aes_keyslot>
    96020ed0:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96020ed4:	34000100 	cbz	w0, 96020ef4 <tegrabl_auth_complete+0x38>
		pr_error("%s: failed to clear keyslot %u (err=%d)\n", __func__, AES_KEYSLOT_SBK, err);
    96020ed8:	2a0003e3 	mov	w3, w0
    96020edc:	d0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96020ee0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020ee4:	528001c2 	mov	w2, #0xe                   	// #14
    96020ee8:	911f2021 	add	x1, x1, #0x7c8
    96020eec:	911fa000 	add	x0, x0, #0x7e8
    96020ef0:	940005e0 	bl	96022670 <tegrabl_printf>
	}

	return err;
}
    96020ef4:	2a1303e0 	mov	w0, w19
    96020ef8:	f9400bf3 	ldr	x19, [sp, #16]
    96020efc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96020f00:	d65f03c0 	ret

0000000096020f04 <tegrabl_brbct_init>:

tegrabl_error_t tegrabl_brbct_init(uintptr_t load_address)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (load_address == 0) {
    96020f04:	b40000a0 	cbz	x0, 96020f18 <tegrabl_brbct_init+0x14>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		return err;
	}
	brbct = load_address;
    96020f08:	f0000261 	adrp	x1, 9606f000 <eeproms+0x500>
    96020f0c:	f9051020 	str	x0, [x1, #2592]

	return err;
    96020f10:	52800000 	mov	w0, #0x0                   	// #0
}
    96020f14:	d65f03c0 	ret
		return err;
    96020f18:	52800040 	mov	w0, #0x2                   	// #2
    96020f1c:	72a12120 	movk	w0, #0x909, lsl #16
    96020f20:	17fffffd 	b	96020f14 <tegrabl_brbct_init+0x10>

0000000096020f24 <tegrabl_brbct_get>:

uintptr_t tegrabl_brbct_get(void)
{
    96020f24:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96020f28:	910003fd 	mov	x29, sp
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t brbct_location = 0;
    96020f2c:	9100c3a0 	add	x0, x29, #0x30
{
    96020f30:	f9000bf3 	str	x19, [sp, #16]
	void *ptr = &brbct_location;
	uint32_t size = sizeof(brbct_location);

	if (brbct == 0UL) {
    96020f34:	f0000273 	adrp	x19, 9606f000 <eeproms+0x500>
	uint32_t brbct_location = 0;
    96020f38:	b81f0c1f 	str	wzr, [x0, #-16]!
	void *ptr = &brbct_location;
    96020f3c:	f90017a0 	str	x0, [x29, #40]
	uint32_t size = sizeof(brbct_location);
    96020f40:	52800080 	mov	w0, #0x4                   	// #4
    96020f44:	b90027a0 	str	w0, [x29, #36]
	if (brbct == 0UL) {
    96020f48:	f9451260 	ldr	x0, [x19, #2592]
    96020f4c:	b50001c0 	cbnz	x0, 96020f84 <tegrabl_brbct_get+0x60>
		err = tegrabl_brbit_get_data(TEGRABL_BRBIT_DATA_ACTIVE_BCT_PTR, 0,
    96020f50:	910093a3 	add	x3, x29, #0x24
    96020f54:	9100a3a2 	add	x2, x29, #0x28
    96020f58:	52800001 	mov	w1, #0x0                   	// #0
    96020f5c:	52800180 	mov	w0, #0xc                   	// #12
    96020f60:	9400002f 	bl	9602101c <tegrabl_brbit_get_data>
			(void **)&ptr, &size);
		if (err == TEGRABL_NO_ERROR) {
    96020f64:	35000060 	cbnz	w0, 96020f70 <tegrabl_brbct_get+0x4c>
			brbct = brbct_location;
    96020f68:	b94023a0 	ldr	w0, [x29, #32]
    96020f6c:	f9051260 	str	x0, [x19, #2592]
		}
	}

	if (brbct == 0UL) {
    96020f70:	f9451260 	ldr	x0, [x19, #2592]
    96020f74:	b5000080 	cbnz	x0, 96020f84 <tegrabl_brbct_get+0x60>
		brbct = DEFAULT_BRBCT_LOAD_ADDRESS;
    96020f78:	d29d0000 	mov	x0, #0xe800                	// #59392
    96020f7c:	f2a80080 	movk	x0, #0x4004, lsl #16
    96020f80:	f9051260 	str	x0, [x19, #2592]
	}

	pr_trace("br bct location = %p\n", (void *)brbct);

	return brbct;
}
    96020f84:	f9451260 	ldr	x0, [x19, #2592]
    96020f88:	f9400bf3 	ldr	x19, [sp, #16]
    96020f8c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96020f90:	d65f03c0 	ret

0000000096020f94 <tegrabl_brbct_pubkey_rsa_get>:
{
	return T18X_ACTIVE_MARKER_OFFSET;
}

uintptr_t tegrabl_brbct_pubkey_rsa_get(void)
{
    96020f94:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96020f98:	910003fd 	mov	x29, sp
	uintptr_t bct = tegrabl_brbct_get();
    96020f9c:	97ffffe2 	bl	96020f24 <tegrabl_brbct_get>
	return (uintptr_t)((char *)bct + offsetof(NvBootConfigTable, Pcp) +
					offsetof(NvBootPublicCryptoParameters, RsaPublicParams));
}
    96020fa0:	91003000 	add	x0, x0, #0xc
    96020fa4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96020fa8:	d65f03c0 	ret

0000000096020fac <tegrabl_brbit_open>:
 * authenticity and sets brptr.
 *
 * @return TEGRABL_NO_ERROR if successful else appropriate error.
 */
static tegrabl_error_t tegrabl_brbit_open(void)
{
    96020fac:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96020fb0:	910003fd 	mov	x29, sp
    96020fb4:	f9000bf3 	str	x19, [sp, #16]
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (brptr != NULL) {
    96020fb8:	f0000273 	adrp	x19, 9606f000 <eeproms+0x500>
    96020fbc:	f9451660 	ldr	x0, [x19, #2600]
    96020fc0:	b40000a0 	cbz	x0, 96020fd4 <tegrabl_brbit_open+0x28>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96020fc4:	52800000 	mov	w0, #0x0                   	// #0
		goto fail;
	}

fail:
	return error;
}
    96020fc8:	f9400bf3 	ldr	x19, [sp, #16]
    96020fcc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96020fd0:	d65f03c0 	ret
	brptr = (uint8_t *)tegrabl_brbit_location();
    96020fd4:	94000051 	bl	96021118 <tegrabl_brbit_location>
    96020fd8:	f9051660 	str	x0, [x19, #2600]
	if (brptr == NULL) {
    96020fdc:	b50000e0 	cbnz	x0, 96020ff8 <tegrabl_brbit_open+0x4c>
		pr_error("Failed to get the address of bit\n");
    96020fe0:	d0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96020fe4:	912cf800 	add	x0, x0, #0xb3e
    96020fe8:	940005a2 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 0);
    96020fec:	52800400 	mov	w0, #0x20                  	// #32
		pr_error("Failed to verify bit\n");
    96020ff0:	72a16160 	movk	w0, #0xb0b, lsl #16
	return error;
    96020ff4:	17fffff5 	b	96020fc8 <tegrabl_brbit_open+0x1c>
	if (!tegrabl_brbit_verify(brptr)) {
    96020ff8:	9400004a 	bl	96021120 <tegrabl_brbit_verify>
    96020ffc:	72001c1f 	tst	w0, #0xff
    96021000:	54fffe21 	b.ne	96020fc4 <tegrabl_brbit_open+0x18>  // b.any
		brptr = NULL;
    96021004:	f905167f 	str	xzr, [x19, #2600]
		pr_error("Failed to verify bit\n");
    96021008:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9602100c:	912d8c00 	add	x0, x0, #0xb63
    96021010:	94000598 	bl	96022670 <tegrabl_printf>
    96021014:	52800300 	mov	w0, #0x18                  	// #24
    96021018:	17fffff6 	b	96020ff0 <tegrabl_brbit_open+0x44>

000000009602101c <tegrabl_brbit_get_data>:

tegrabl_error_t tegrabl_brbit_get_data(tegrabl_brbit_data_type_t type,
		uint32_t instance, void **buffer, uint32_t *buffer_size)
{
    9602101c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96021020:	910003fd 	mov	x29, sp
    96021024:	a90153f3 	stp	x19, x20, [sp, #16]
    96021028:	a9025bf5 	stp	x21, x22, [sp, #32]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	uint32_t offset = 0;
	uint32_t size = 0;
    9602102c:	29097fbf 	stp	wzr, wzr, [x29, #72]
{
    96021030:	f9001bf7 	str	x23, [sp, #48]

	if (buffer == NULL) {
    96021034:	b4000642 	cbz	x2, 960210fc <tegrabl_brbit_get_data+0xe0>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	if ((*buffer != NULL) && (buffer_size == NULL)) {
    96021038:	f9400044 	ldr	x4, [x2]
    9602103c:	b4000044 	cbz	x4, 96021044 <tegrabl_brbit_get_data+0x28>
    96021040:	b4000643 	cbz	x3, 96021108 <tegrabl_brbit_get_data+0xec>
    96021044:	aa0303f6 	mov	x22, x3
    96021048:	aa0203f7 	mov	x23, x2
    9602104c:	2a0103f5 	mov	w21, w1
    96021050:	2a0003f4 	mov	w20, w0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
		goto fail;
	}

	error = tegrabl_brbit_open();
    96021054:	97ffffd6 	bl	96020fac <tegrabl_brbit_open>
    96021058:	2a0003f3 	mov	w19, w0
	if (TEGRABL_NO_ERROR != error) {
    9602105c:	34000140 	cbz	w0, 96021084 <tegrabl_brbit_get_data+0x68>
		pr_error("Failed to open BR BIT\n");
    96021060:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021064:	912c0800 	add	x0, x0, #0xb02
	}

	error = tegrabl_brbit_get_offset_size(type, instance, &offset,
			&size);
	if (TEGRABL_NO_ERROR != error) {
		pr_error("Failed to get offset and size\n");
    96021068:	94000582 	bl	96022670 <tegrabl_printf>
		*buffer_size = size;
	}

fail:
	return error;
}
    9602106c:	2a1303e0 	mov	w0, w19
    96021070:	f9401bf7 	ldr	x23, [sp, #48]
    96021074:	a94153f3 	ldp	x19, x20, [sp, #16]
    96021078:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602107c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96021080:	d65f03c0 	ret
	error = tegrabl_brbit_get_offset_size(type, instance, &offset,
    96021084:	910133a3 	add	x3, x29, #0x4c
    96021088:	910123a2 	add	x2, x29, #0x48
    9602108c:	2a1503e1 	mov	w1, w21
    96021090:	2a1403e0 	mov	w0, w20
    96021094:	94000035 	bl	96021168 <tegrabl_brbit_get_offset_size>
    96021098:	2a0003f3 	mov	w19, w0
	if (TEGRABL_NO_ERROR != error) {
    9602109c:	34000080 	cbz	w0, 960210ac <tegrabl_brbit_get_data+0x90>
		pr_error("Failed to get offset and size\n");
    960210a0:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960210a4:	912c7000 	add	x0, x0, #0xb1c
    960210a8:	17fffff0 	b	96021068 <tegrabl_brbit_get_data+0x4c>
	if (*buffer != NULL) {
    960210ac:	f94002e0 	ldr	x0, [x23]
    960210b0:	b9404fa2 	ldr	w2, [x29, #76]
    960210b4:	b4000160 	cbz	x0, 960210e0 <tegrabl_brbit_get_data+0xc4>
		if (*buffer_size < size) {
    960210b8:	b94002c1 	ldr	w1, [x22]
    960210bc:	6b02003f 	cmp	w1, w2
    960210c0:	54000283 	b.cc	96021110 <tegrabl_brbit_get_data+0xf4>  // b.lo, b.ul, b.last
		memcpy(*buffer, brptr + offset, size);
    960210c4:	d0000263 	adrp	x3, 9606f000 <eeproms+0x500>
    960210c8:	b9404ba1 	ldr	w1, [x29, #72]
    960210cc:	2a0203e2 	mov	w2, w2
    960210d0:	f9451463 	ldr	x3, [x3, #2600]
    960210d4:	8b010061 	add	x1, x3, x1
    960210d8:	94002393 	bl	96029f24 <memcpy>
    960210dc:	17ffffe4 	b	9602106c <tegrabl_brbit_get_data+0x50>
		*buffer = brptr + offset;
    960210e0:	d0000260 	adrp	x0, 9606f000 <eeproms+0x500>
    960210e4:	b9404ba1 	ldr	w1, [x29, #72]
    960210e8:	f9451400 	ldr	x0, [x0, #2600]
    960210ec:	8b010000 	add	x0, x0, x1
    960210f0:	f90002e0 	str	x0, [x23]
		*buffer_size = size;
    960210f4:	b90002c2 	str	w2, [x22]
    960210f8:	17ffffdd 	b	9602106c <tegrabl_brbit_get_data+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960210fc:	52800053 	mov	w19, #0x2                   	// #2
			error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96021100:	72a16173 	movk	w19, #0xb0b, lsl #16
	return error;
    96021104:	17ffffda 	b	9602106c <tegrabl_brbit_get_data+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96021108:	52802053 	mov	w19, #0x102                 	// #258
    9602110c:	17fffffd 	b	96021100 <tegrabl_brbit_get_data+0xe4>
			error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96021110:	52800093 	mov	w19, #0x4                   	// #4
    96021114:	17fffffb 	b	96021100 <tegrabl_brbit_get_data+0xe4>

0000000096021118 <tegrabl_brbit_location>:
	uint64_t address = 0;

	address = (TEGRABL_BRBIT_LOCATION + TEGRABL_AVP_CACHE_LINE_MASK) & (~TEGRABL_AVP_CACHE_LINE_MASK);

	return (void *)(intptr_t) address;
}
    96021118:	d2a1a900 	mov	x0, #0xd480000             	// #222822400
    9602111c:	d65f03c0 	ret

0000000096021120 <tegrabl_brbit_verify>:

bool tegrabl_brbit_verify(void *buffer)
{
	NvBootInfoTable *boot_info = (NvBootInfoTable *)buffer;

	if (((boot_info->BootRomVersion == NVBOOT_VERSION(TEGRABL_CHIP, 0x01)) ||
    96021120:	b9400001 	ldr	w1, [x0]
    96021124:	12a00302 	mov	w2, #0xffe7ffff            	// #-1572865
    96021128:	0b020021 	add	w1, w1, w2
    9602112c:	7100043f 	cmp	w1, #0x1
    96021130:	54000188 	b.hi	96021160 <tegrabl_brbit_verify+0x40>  // b.pmore
		 (boot_info->BootRomVersion == NVBOOT_VERSION(TEGRABL_CHIP, 0x02))) &&
    96021134:	b9400402 	ldr	w2, [x0, #4]
    96021138:	51460041 	sub	w1, w2, #0x180, lsl #12
    9602113c:	71000421 	subs	w1, w1, #0x1
    96021140:	54000101 	b.ne	96021160 <tegrabl_brbit_verify+0x40>  // b.any
		 (boot_info->DataVersion    == NVBOOT_VERSION(TEGRABL_CHIP, 0x01)) &&
    96021144:	b9400801 	ldr	w1, [x0, #8]
    96021148:	6b02003f 	cmp	w1, w2
    9602114c:	540000a1 	b.ne	96021160 <tegrabl_brbit_verify+0x40>  // b.any
		 (boot_info->RcmVersion     == NVBOOT_VERSION(TEGRABL_CHIP, 0x01)) &&
    96021150:	b9401000 	ldr	w0, [x0, #16]
    96021154:	71000c1f 	cmp	w0, #0x3
    96021158:	1a9f17e0 	cset	w0, eq  // eq = none
		 (boot_info->PrimaryDevice  == NvBootDevType_Irom)) {
		return true;
	}

	return false;
}
    9602115c:	d65f03c0 	ret
	return false;
    96021160:	52800000 	mov	w0, #0x0                   	// #0
    96021164:	17fffffe 	b	9602115c <tegrabl_brbit_verify+0x3c>

0000000096021168 <tegrabl_brbit_get_offset_size>:
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	TEGRABL_UNUSED(instance);

	if (!offset || !size) {
    96021168:	f100005f 	cmp	x2, #0x0
    9602116c:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
    96021170:	54000500 	b.eq	96021210 <tegrabl_brbit_get_offset_size+0xa8>  // b.none
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	switch (type) {
    96021174:	7100381f 	cmp	w0, #0xe
    96021178:	54000468 	b.hi	96021204 <tegrabl_brbit_get_offset_size+0x9c>  // b.pmore
    9602117c:	b0000104 	adrp	x4, 96042000 <__func__.4833+0x5>
    96021180:	912df084 	add	x4, x4, #0xb7c
    96021184:	38604880 	ldrb	w0, [x4, w0, uxtw]
    96021188:	10000064 	adr	x4, 96021194 <tegrabl_brbit_get_offset_size+0x2c>
    9602118c:	8b208880 	add	x0, x4, w0, sxtb #2
    96021190:	d61f0000 	br	x0
	case TEGRABL_BRBIT_DATA_BRBIT:
		*offset = 0;
		*size = sizeof(NvBootInfoTable);
    96021194:	52808100 	mov	w0, #0x408                 	// #1032
		*offset = 0;
    96021198:	b900005f 	str	wzr, [x2]
		if (instance >= NVBOOT_MAX_BOOTLOADERS) {
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
			goto fail;
		}
		*offset = offsetof(NvBootInfoTable, BlState[instance]);
		*size = sizeoff(NvBootInfoTable, BlState[instance]);
    9602119c:	b9000060 	str	w0, [x3]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960211a0:	52800000 	mov	w0, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
	}

fail:
	return error;
}
    960211a4:	d65f03c0 	ret
		*offset = offsetof(NvBootInfoTable, BootType);
    960211a8:	52800180 	mov	w0, #0xc                   	// #12
		*offset = offsetof(NvBootInfoTable, BctSize);
    960211ac:	b9000040 	str	w0, [x2]
		*size = sizeoff(NvBootInfoTable, BctSize);
    960211b0:	52800080 	mov	w0, #0x4                   	// #4
    960211b4:	17fffffa 	b	9602119c <tegrabl_brbit_get_offset_size+0x34>
		*offset = offsetof(NvBootInfoTable, SafeStartAddr);
    960211b8:	52807500 	mov	w0, #0x3a8                 	// #936
    960211bc:	17fffffc 	b	960211ac <tegrabl_brbit_get_offset_size+0x44>
		*offset = offsetof(NvBootInfoTable, BctPtr);
    960211c0:	52806000 	mov	w0, #0x300                 	// #768
    960211c4:	b9000040 	str	w0, [x2]
		*size = sizeoff(NvBootInfoTable, BctPtr);
    960211c8:	52800100 	mov	w0, #0x8                   	// #8
    960211cc:	17fffff4 	b	9602119c <tegrabl_brbit_get_offset_size+0x34>
		*offset = offsetof(NvBootInfoTable, BctBlock);
    960211d0:	52805e00 	mov	w0, #0x2f0                 	// #752
    960211d4:	17fffff6 	b	960211ac <tegrabl_brbit_get_offset_size+0x44>
		*offset = offsetof(NvBootInfoTable, BctPage);
    960211d8:	52805e80 	mov	w0, #0x2f4                 	// #756
    960211dc:	17fffff4 	b	960211ac <tegrabl_brbit_get_offset_size+0x44>
		*offset = offsetof(NvBootInfoTable, BctSize);
    960211e0:	52805f00 	mov	w0, #0x2f8                 	// #760
    960211e4:	17fffff2 	b	960211ac <tegrabl_brbit_get_offset_size+0x44>
		if (instance >= NVBOOT_MAX_BOOTLOADERS) {
    960211e8:	71000c3f 	cmp	w1, #0x3
    960211ec:	54000128 	b.hi	96021210 <tegrabl_brbit_get_offset_size+0xa8>  // b.pmore
		*offset = offsetof(NvBootInfoTable, BlState[instance]);
    960211f0:	52800300 	mov	w0, #0x18                  	// #24
    960211f4:	9ba07c21 	umull	x1, w1, w0
    960211f8:	910c2021 	add	x1, x1, #0x308
    960211fc:	b9000041 	str	w1, [x2]
    96021200:	17ffffe7 	b	9602119c <tegrabl_brbit_get_offset_size+0x34>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96021204:	52800020 	mov	w0, #0x1                   	// #1
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96021208:	72a16160 	movk	w0, #0xb0b, lsl #16
	return error;
    9602120c:	17ffffe6 	b	960211a4 <tegrabl_brbit_get_offset_size+0x3c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96021210:	52800040 	mov	w0, #0x2                   	// #2
    96021214:	17fffffd 	b	96021208 <tegrabl_brbit_get_offset_size+0xa0>

0000000096021218 <tegrabl_keystore_get>:
}

struct tegrabl_pubkey *tegrabl_keystore_get(void)
{
	return keystore;
}
    96021218:	d0000260 	adrp	x0, 9606f000 <eeproms+0x500>
    9602121c:	f9451800 	ldr	x0, [x0, #2608]
    96021220:	d65f03c0 	ret

0000000096021224 <read_miscreg_strap>:
	static uint32_t ram_code_val;
	static bool is_strap_read;
	uint32_t fld_val = 0U;

	/* Read strap boot sel from SECURE_RSV3_SCRATCH_0 */
	if (!is_strap_read) {
    96021224:	d0000262 	adrp	x2, 9606f000 <eeproms+0x500>
    96021228:	3968f041 	ldrb	w1, [x2, #2620]
    9602122c:	35000181 	cbnz	w1, 9602125c <read_miscreg_strap+0x38>
		uint32_t strap_val = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE +
    96021230:	d280cd01 	mov	x1, #0x668                 	// #1640
				SCRATCH_SECURE_RSV3_SCRATCH_0);

		/* store the values and keep it future references */
		boot_dev_val = (tegrabl_fuse_boot_dev_t)(NV_DRF_VAL(MISCREG_STRAP,
    96021234:	d0000263 	adrp	x3, 9606f000 <eeproms+0x500>
		uint32_t strap_val = NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE +
    96021238:	f2a18721 	movk	x1, #0xc39, lsl #16
    9602123c:	b9400021 	ldr	w1, [x1]
		boot_dev_val = (tegrabl_fuse_boot_dev_t)(NV_DRF_VAL(MISCREG_STRAP,
    96021240:	d35a7024 	ubfx	x4, x1, #26, #3
    96021244:	b90a3864 	str	w4, [x3, #2616]
						STRAPPING_OPT_A,
						BOOT_SELECT,
						strap_val));

		/* use lower 2 bits for RAM_CODE */
		ram_code_val = (NV_DRF_VAL(MISCREG_STRAP,
    96021248:	d0000263 	adrp	x3, 9606f000 <eeproms+0x500>
						STRAPPING_OPT_A,
						RAM_CODE,
						strap_val)) & 0x3U;
    9602124c:	d3441421 	ubfx	x1, x1, #4, #2
		ram_code_val = (NV_DRF_VAL(MISCREG_STRAP,
    96021250:	b90a4061 	str	w1, [x3, #2624]

		is_strap_read = true;
    96021254:	52800021 	mov	w1, #0x1                   	// #1
    96021258:	3928f041 	strb	w1, [x2, #2620]
	}

	switch (fld) {
    9602125c:	340000c0 	cbz	w0, 96021274 <read_miscreg_strap+0x50>
	uint32_t fld_val = 0U;
    96021260:	d0000261 	adrp	x1, 9606f000 <eeproms+0x500>
    96021264:	7100041f 	cmp	w0, #0x1
    96021268:	b94a4021 	ldr	w1, [x1, #2624]
    9602126c:	1a8113e0 	csel	w0, wzr, w1, ne  // ne = any
	default:
		break;
	}

	return fld_val;
}
    96021270:	d65f03c0 	ret
		fld_val = boot_dev_val;
    96021274:	d0000260 	adrp	x0, 9606f000 <eeproms+0x500>
    96021278:	b94a3800 	ldr	w0, [x0, #2616]
		break;
    9602127c:	17fffffd 	b	96021270 <read_miscreg_strap+0x4c>

0000000096021280 <tegrabl_soc_get_bootdev>:

tegrabl_error_t tegrabl_soc_get_bootdev(
		tegrabl_storage_type_t *device, uint32_t *instance)
{
    96021280:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	tegrabl_fuse_boot_dev_t fdev;

	if ((device == NULL) || (instance == NULL)) {
    96021284:	f100001f 	cmp	x0, #0x0
    96021288:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9602128c:	910003fd 	mov	x29, sp
    96021290:	a90153f3 	stp	x19, x20, [sp, #16]
    96021294:	f90013f5 	str	x21, [sp, #32]
	if ((device == NULL) || (instance == NULL)) {
    96021298:	54000740 	b.eq	96021380 <tegrabl_soc_get_bootdev+0x100>  // b.none
    9602129c:	aa0103f4 	mov	x20, x1
    960212a0:	aa0003f5 	mov	x21, x0
	     read from "SECURE_RSV3_SCRATCH_0" register.

	  TEGRABL_FUSE_BOOT_DEV_RESVD_4 is to represent
	  to read boot device from fuses
	*/
	fdev = read_miscreg_strap(BOOT_SELECT_FIELD);
    960212a4:	52800000 	mov	w0, #0x0                   	// #0
    960212a8:	97ffffdf 	bl	96021224 <read_miscreg_strap>
    960212ac:	b9003fa0 	str	w0, [x29, #60]
	if (tegrabl_fuse_ignore_dev_sel_straps() ||
    960212b0:	97fff50e 	bl	9601e6e8 <tegrabl_fuse_ignore_dev_sel_straps>
    960212b4:	72001c1f 	tst	w0, #0xff
    960212b8:	54000081 	b.ne	960212c8 <tegrabl_soc_get_bootdev+0x48>  // b.any
    960212bc:	b9403fa0 	ldr	w0, [x29, #60]
    960212c0:	71000c1f 	cmp	w0, #0x3
    960212c4:	540001a1 	b.ne	960212f8 <tegrabl_soc_get_bootdev+0x78>  // b.any
		(fdev == TEGRABL_FUSE_BOOT_DEV_RESVD_4)) {
		/* Read boot dev value from fuse */
		err = tegrabl_fuse_read(FUSE_SEC_BOOTDEV, (uint32_t *)&fdev,
    960212c8:	52800082 	mov	w2, #0x4                   	// #4
    960212cc:	9100f3a1 	add	x1, x29, #0x3c
    960212d0:	52800020 	mov	w0, #0x1                   	// #1
    960212d4:	97fff540 	bl	9601e7d4 <tegrabl_fuse_read>
			sizeof(tegrabl_fuse_boot_dev_t));
		if (TEGRABL_NO_ERROR != err) {
    960212d8:	34000100 	cbz	w0, 960212f8 <tegrabl_soc_get_bootdev+0x78>
    960212dc:	12005c00 	and	w0, w0, #0xffffff
    960212e0:	32070c13 	orr	w19, w0, #0x1e000000
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
		break;
	}
fail:
	return err;
}
    960212e4:	2a1303e0 	mov	w0, w19
    960212e8:	f94013f5 	ldr	x21, [sp, #32]
    960212ec:	a94153f3 	ldp	x19, x20, [sp, #16]
    960212f0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960212f4:	d65f03c0 	ret
	switch (fdev) {
    960212f8:	b9403fb3 	ldr	w19, [x29, #60]
    960212fc:	7100067f 	cmp	w19, #0x1
    96021300:	54000240 	b.eq	96021348 <tegrabl_soc_get_bootdev+0xc8>  // b.none
    96021304:	34000153 	cbz	w19, 9602132c <tegrabl_soc_get_bootdev+0xac>
    96021308:	71000a7f 	cmp	w19, #0x2
    9602130c:	540002e0 	b.eq	96021368 <tegrabl_soc_get_bootdev+0xe8>  // b.none
		pr_error("Unsupported boot-device strap-reg: 0x%08x\n", fdev);
    96021310:	2a1303e1 	mov	w1, w19
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96021314:	52800033 	mov	w19, #0x1                   	// #1
		pr_error("Unsupported boot-device strap-reg: 0x%08x\n", fdev);
    96021318:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9602131c:	91338c00 	add	x0, x0, #0xce3
    96021320:	940004d4 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96021324:	72a3c3d3 	movk	w19, #0x1e1e, lsl #16
	return err;
    96021328:	17ffffef 	b	960212e4 <tegrabl_soc_get_bootdev+0x64>
		*device = TEGRABL_STORAGE_SDMMC_BOOT;
    9602132c:	b90002bf 	str	wzr, [x21]
		*instance = 3;
    96021330:	52800060 	mov	w0, #0x3                   	// #3
    96021334:	b9000280 	str	w0, [x20]
		pr_info("Boot-device: eMMC\n");
    96021338:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9602133c:	91328400 	add	x0, x0, #0xca1
    96021340:	940004cc 	bl	96022670 <tegrabl_printf>
    96021344:	17ffffe8 	b	960212e4 <tegrabl_soc_get_bootdev+0x64>
		*device = TEGRABL_STORAGE_QSPI_FLASH;
    96021348:	52800060 	mov	w0, #0x3                   	// #3
    9602134c:	b90002a0 	str	w0, [x21]
		pr_info("Boot-device: QSPI\n");
    96021350:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021354:	9132dc00 	add	x0, x0, #0xcb7
		*instance = 0;
    96021358:	b900029f 	str	wzr, [x20]
		pr_info("Boot-device: SATA\n");
    9602135c:	940004c5 	bl	96022670 <tegrabl_printf>
    96021360:	52800013 	mov	w19, #0x0                   	// #0
    96021364:	17ffffe0 	b	960212e4 <tegrabl_soc_get_bootdev+0x64>
		*device = TEGRABL_STORAGE_SATA;
    96021368:	52800080 	mov	w0, #0x4                   	// #4
    9602136c:	b90002a0 	str	w0, [x21]
		*instance = 0;
    96021370:	b900029f 	str	wzr, [x20]
		pr_info("Boot-device: SATA\n");
    96021374:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021378:	91333400 	add	x0, x0, #0xccd
    9602137c:	17fffff8 	b	9602135c <tegrabl_soc_get_bootdev+0xdc>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96021380:	52800053 	mov	w19, #0x2                   	// #2
    96021384:	17ffffe8 	b	96021324 <tegrabl_soc_get_bootdev+0xa4>

0000000096021388 <tegrabl_get_rst_status>:
tegrabl_error_t tegrabl_get_rst_status(tegrabl_rst_source_t *rst_source,
									   tegrabl_rst_level_t *rst_level)
{
	uint32_t reg_val = 0;

	if ((rst_source == NULL) && (rst_level == NULL)) {
    96021388:	f100001f 	cmp	x0, #0x0
    9602138c:	fa400820 	ccmp	x1, #0x0, #0x0, eq  // eq = none
    96021390:	54000180 	b.eq	960213c0 <tegrabl_get_rst_status+0x38>  // b.none
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	reg_val = PMC_READ(RST_STATUS);
    96021394:	d2800e02 	mov	x2, #0x70                  	// #112
    96021398:	f2a186c2 	movk	x2, #0xc36, lsl #16
    9602139c:	b9400042 	ldr	w2, [x2]

	if (rst_source != NULL) {
    960213a0:	b4000060 	cbz	x0, 960213ac <tegrabl_get_rst_status+0x24>
		*rst_source = NV_DRF_VAL(PMC_IMPL, RST_STATUS, RST_SOURCE, reg_val);
    960213a4:	d3421443 	ubfx	x3, x2, #2, #4
    960213a8:	b9000003 	str	w3, [x0]
	}

	if (rst_level != NULL) {
    960213ac:	b4000061 	cbz	x1, 960213b8 <tegrabl_get_rst_status+0x30>
		*rst_level = NV_DRF_VAL(PMC_IMPL, RST_STATUS, RST_LEVEL, reg_val);
    960213b0:	12000442 	and	w2, w2, #0x3
    960213b4:	b9000022 	str	w2, [x1]
	if (rst_level != NULL) {
    960213b8:	52800000 	mov	w0, #0x0                   	// #0
    960213bc:	14000003 	b	960213c8 <tegrabl_get_rst_status+0x40>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960213c0:	52800040 	mov	w0, #0x2                   	// #2
    960213c4:	72a3c3c0 	movk	w0, #0x1e1e, lsl #16
	}

	return TEGRABL_NO_ERROR;
}
    960213c8:	d65f03c0 	ret

00000000960213cc <tegrabl_set_pmc_scratch0_flag>:

tegrabl_error_t tegrabl_set_pmc_scratch0_flag(
		tegrabl_scratch0_flag_t flag, bool set)
{
	uint32_t reg;
	reg = SCRATCH_READ(SCRATCH0_0);
    960213cc:	d2840004 	mov	x4, #0x2000                	// #8192
    960213d0:	71007c1f 	cmp	w0, #0x1f
    960213d4:	f2a18724 	movk	x4, #0xc39, lsl #16
    960213d8:	b9400085 	ldr	w5, [x4]
    960213dc:	540001c8 	b.hi	96021414 <tegrabl_set_pmc_scratch0_flag+0x48>  // b.pmore
    960213e0:	d2800022 	mov	x2, #0x1                   	// #1
    960213e4:	9ac02042 	lsl	x2, x2, x0
    960213e8:	927f7843 	and	x3, x2, #0xfffffffe
    960213ec:	92628c63 	and	x3, x3, #0xffffffffc0000003
    960213f0:	b4000123 	cbz	x3, 96021414 <tegrabl_set_pmc_scratch0_flag+0x48>
    960213f4:	12001c21 	and	w1, w1, #0xff
	switch (flag) {
	case TEGRABL_PMC_SCRATCH0_FLAG_FORCED_RECOVERY:
	case TEGRABL_PMC_SCRATCH0_FLAG_BOOT_RECOVERY_KERNEL:
	case TEGRABL_PMC_SCRATCH0_FLAG_FASTBOOT:
		if (set) {
			reg |= (1UL << flag);
    960213f8:	2a0200a0 	orr	w0, w5, w2
    960213fc:	7100003f 	cmp	w1, #0x0
    96021400:	0a2200a2 	bic	w2, w5, w2
    96021404:	1a800042 	csel	w2, w2, w0, eq  // eq = none
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96021408:	52800000 	mov	w0, #0x0                   	// #0
		} else {
			reg &= ~(1UL << flag);
		}
		SCRATCH_WRITE(SCRATCH0_0, reg);
    9602140c:	b9000082 	str	w2, [x4]
		pr_error("Flag %u not handled\n", flag);
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
		break;
	}
	return err;
}
    96021410:	d65f03c0 	ret
{
    96021414:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96021418:	2a0003e1 	mov	w1, w0
		pr_error("Flag %u not handled\n", flag);
    9602141c:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021420:	91322400 	add	x0, x0, #0xc89
{
    96021424:	910003fd 	mov	x29, sp
		pr_error("Flag %u not handled\n", flag);
    96021428:	94000492 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9602142c:	52800020 	mov	w0, #0x1                   	// #1
    96021430:	72a3c3c0 	movk	w0, #0x1e1e, lsl #16
}
    96021434:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96021438:	d65f03c0 	ret

000000009602143c <tegrabl_get_pmc_scratch0_flag>:
tegrabl_error_t tegrabl_get_pmc_scratch0_flag(
	tegrabl_scratch0_flag_t flag, bool *is_set)
{
	uint32_t reg;

	if (is_set == NULL) {
    9602143c:	b4000341 	cbz	x1, 960214a4 <tegrabl_get_pmc_scratch0_flag+0x68>
		return TEGRABL_ERR_INVALID;
	}

	reg = SCRATCH_READ(SCRATCH0_0);
    96021440:	d2840002 	mov	x2, #0x2000                	// #8192
    96021444:	71007c1f 	cmp	w0, #0x1f
    96021448:	f2a18722 	movk	x2, #0xc39, lsl #16
    9602144c:	b9400042 	ldr	w2, [x2]
    96021450:	54000188 	b.hi	96021480 <tegrabl_get_pmc_scratch0_flag+0x44>  // b.pmore
    96021454:	d2800023 	mov	x3, #0x1                   	// #1
    96021458:	9ac02063 	lsl	x3, x3, x0
    9602145c:	927f7863 	and	x3, x3, #0xfffffffe
    96021460:	92628c63 	and	x3, x3, #0xffffffffc0000003
    96021464:	b40000e3 	cbz	x3, 96021480 <tegrabl_get_pmc_scratch0_flag+0x44>
	switch (flag) {
	case TEGRABL_PMC_SCRATCH0_FLAG_FORCED_RECOVERY:
	case TEGRABL_PMC_SCRATCH0_FLAG_BOOT_RECOVERY_KERNEL:
	case TEGRABL_PMC_SCRATCH0_FLAG_FASTBOOT:
		*is_set = ((reg & (1UL << flag)) != 0UL) ? true : false;
    96021468:	2a0203e2 	mov	w2, w2
    9602146c:	9ac02440 	lsr	x0, x2, x0
    96021470:	12000000 	and	w0, w0, #0x1
    96021474:	39000020 	strb	w0, [x1]
		break;
	default:
		pr_critical("Flag %u not handled\n", flag);
		break;
	}
	return TEGRABL_NO_ERROR;
    96021478:	52800000 	mov	w0, #0x0                   	// #0
		break;
    9602147c:	d65f03c0 	ret
{
    96021480:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96021484:	2a0003e1 	mov	w1, w0
		pr_critical("Flag %u not handled\n", flag);
    96021488:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9602148c:	9131c400 	add	x0, x0, #0xc71
{
    96021490:	910003fd 	mov	x29, sp
		pr_critical("Flag %u not handled\n", flag);
    96021494:	94000477 	bl	96022670 <tegrabl_printf>
	return TEGRABL_NO_ERROR;
    96021498:	52800000 	mov	w0, #0x0                   	// #0
}
    9602149c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960214a0:	d65f03c0 	ret
		return TEGRABL_ERR_INVALID;
    960214a4:	52800040 	mov	w0, #0x2                   	// #2
}
    960214a8:	d65f03c0 	ret

00000000960214ac <tegrabl_set_soc_core_voltage>:
tegrabl_error_t tegrabl_set_soc_core_voltage(uint32_t soc_mv)
{
	TEGRABL_UNUSED(soc_mv);
	/* Dummy function */
	return TEGRABL_NO_ERROR;
}
    960214ac:	52800000 	mov	w0, #0x0                   	// #0
    960214b0:	d65f03c0 	ret

00000000960214b4 <tegrabl_get_chip_info>:

void tegrabl_get_chip_info(struct tegrabl_chip_info *info)
{
	uint32_t reg, rev;

	if (info == NULL) {
    960214b4:	b40001a0 	cbz	x0, 960214e8 <tegrabl_get_chip_info+0x34>
		return;
	}

	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_HIDREV_0);
    960214b8:	d2800081 	mov	x1, #0x4                   	// #4
	rev = NV_READ32(NV_ADDRESS_MAP_FUSE_BASE + FUSE_OPT_SUBREVISION_0);
    960214bc:	d2804902 	mov	x2, #0x248                 	// #584
	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_HIDREV_0);
    960214c0:	f2a00201 	movk	x1, #0x10, lsl #16
	rev = NV_READ32(NV_ADDRESS_MAP_FUSE_BASE + FUSE_OPT_SUBREVISION_0);
    960214c4:	f2a07042 	movk	x2, #0x382, lsl #16
	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_HIDREV_0);
    960214c8:	b9400021 	ldr	w1, [x1]
	rev = NV_READ32(NV_ADDRESS_MAP_FUSE_BASE + FUSE_OPT_SUBREVISION_0);
    960214cc:	b9400042 	ldr	w2, [x2]

	info->chip_id = NV_DRF_VAL(MISCREG, HIDREV, CHIPID, reg);
	info->major = NV_DRF_VAL(MISCREG, HIDREV, MAJORREV, reg);
	info->minor = NV_DRF_VAL(MISCREG, HIDREV, MINORREV, reg);
	info->revision = rev;
    960214d0:	b9000c02 	str	w2, [x0, #12]
	info->chip_id = NV_DRF_VAL(MISCREG, HIDREV, CHIPID, reg);
    960214d4:	d3483c23 	ubfx	x3, x1, #8, #8
    960214d8:	b9000003 	str	w3, [x0]
	info->major = NV_DRF_VAL(MISCREG, HIDREV, MAJORREV, reg);
    960214dc:	d3441c23 	ubfx	x3, x1, #4, #4
	info->minor = NV_DRF_VAL(MISCREG, HIDREV, MINORREV, reg);
    960214e0:	d3504c21 	ubfx	x1, x1, #16, #4
    960214e4:	29008403 	stp	w3, w1, [x0, #4]
}
    960214e8:	d65f03c0 	ret

00000000960214ec <tegrabl_is_wdt_enable>:

	return ack;
}

bool tegrabl_is_wdt_enable(void)
{
    960214ec:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960214f0:	910003fd 	mov	x29, sp
    960214f4:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t odmdata_wdt = 0;
	uint32_t halt_in_fiq = 0;

	/* Get tegra-ap-wdt bit of odmdata 0:Tegra AP watchdog disable
	and value of HALT_IN_FIQ */
	odmdata_wdt = tegrabl_odmdata_get();
    960214f8:	94004701 	bl	960330fc <tegrabl_odmdata_get>
    960214fc:	2a0003f4 	mov	w20, w0
	reg_val = PMC_READ(RAMDUMP_CTL_STATUS);
    96021500:	d2802180 	mov	x0, #0x10c                 	// #268
    96021504:	f2a186c0 	movk	x0, #0xc36, lsl #16
    96021508:	b9400013 	ldr	w19, [x0]
	halt_in_fiq = NV_DRF_VAL(PMC_IMPL, RAMDUMP_CTL_STATUS, HALT_IN_FIQ,
				reg_val);

	if (fuse_is_nv_production_mode()) {
    9602150c:	97fff489 	bl	9601e730 <fuse_is_nv_production_mode>
    96021510:	72001c1f 	tst	w0, #0xff
    96021514:	540000a0 	b.eq	96021528 <tegrabl_is_wdt_enable+0x3c>  // b.none
		return ((odmdata_wdt & TEGRA_WDT_MASK) != 0U);
    96021518:	d34f3e80 	ubfx	x0, x20, #15, #1
	}

	return ((odmdata_wdt & TEGRA_WDT_MASK) != 0U) && (halt_in_fiq == 0U);
}
    9602151c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96021520:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96021524:	d65f03c0 	ret
	return ((odmdata_wdt & TEGRA_WDT_MASK) != 0U) && (halt_in_fiq == 0U);
    96021528:	d2640260 	eor	x0, x19, #0x10000000
    9602152c:	f271029f 	tst	x20, #0x8000
    96021530:	d35c7000 	ubfx	x0, x0, #28, #1
    96021534:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    96021538:	17fffff9 	b	9602151c <tegrabl_is_wdt_enable+0x30>

000000009602153c <tegrabl_get_kernel_type>:

tegrabl_binary_type_t tegrabl_get_kernel_type(void)
{
    9602153c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	bool boot_recovery_kernel = false;
	tegrabl_binary_type_t bin_type;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	err = tegrabl_get_pmc_scratch0_flag(TEGRABL_PMC_SCRATCH0_FLAG_BOOT_RECOVERY_KERNEL,
    96021540:	528003e0 	mov	w0, #0x1f                  	// #31
{
    96021544:	910003fd 	mov	x29, sp
	bool boot_recovery_kernel = false;
    96021548:	910083a1 	add	x1, x29, #0x20
    9602154c:	381ffc3f 	strb	wzr, [x1, #-1]!
	err = tegrabl_get_pmc_scratch0_flag(TEGRABL_PMC_SCRATCH0_FLAG_BOOT_RECOVERY_KERNEL,
    96021550:	97ffffbb 	bl	9602143c <tegrabl_get_pmc_scratch0_flag>
								&boot_recovery_kernel);
	if (err != TEGRABL_NO_ERROR) {
    96021554:	34000080 	cbz	w0, 96021564 <tegrabl_get_kernel_type+0x28>
		pr_info("Failed to get scratch0_flag\n");
    96021558:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    9602155c:	91307400 	add	x0, x0, #0xc1d
    96021560:	94000444 	bl	96022670 <tegrabl_printf>
	}
	if (boot_recovery_kernel == false) {
    96021564:	39407fa0 	ldrb	w0, [x29, #31]
    96021568:	350000e0 	cbnz	w0, 96021584 <tegrabl_get_kernel_type+0x48>
		bin_type = TEGRABL_BINARY_KERNEL;
		pr_info("Kernel type = Normal\n");
    9602156c:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021570:	9130f400 	add	x0, x0, #0xc3d
    96021574:	9400043f 	bl	96022670 <tegrabl_printf>
		bin_type = TEGRABL_BINARY_KERNEL;
    96021578:	52800300 	mov	w0, #0x18                  	// #24
	} else {
		bin_type = TEGRABL_BINARY_RECOVERY_KERNEL;
		pr_info("Kernel type = Recovery\n");
	}
	return bin_type;
}
    9602157c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96021580:	d65f03c0 	ret
		pr_info("Kernel type = Recovery\n");
    96021584:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021588:	91315800 	add	x0, x0, #0xc56
    9602158c:	94000439 	bl	96022670 <tegrabl_printf>
		bin_type = TEGRABL_BINARY_RECOVERY_KERNEL;
    96021590:	52800320 	mov	w0, #0x19                  	// #25
	return bin_type;
    96021594:	17fffffa 	b	9602157c <tegrabl_get_kernel_type+0x40>

0000000096021598 <tegrabl_register_prod_settings>:
#else
		NULL,
#endif
	};

	if (num_settings == 0U) {
    96021598:	35000061 	cbnz	w1, 960215a4 <tegrabl_register_prod_settings+0xc>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9602159c:	52800000 	mov	w0, #0x0                   	// #0
		prod_settings += (num_configs + 1) * 3;
	}

done:
	return err;
}
    960215a0:	d65f03c0 	ret
{
    960215a4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960215a8:	910003fd 	mov	x29, sp
    960215ac:	a90153f3 	stp	x19, x20, [sp, #16]
    960215b0:	aa0003f4 	mov	x20, x0
    960215b4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960215b8:	f9001bf7 	str	x23, [sp, #48]
	if (prod_settings == NULL) {
    960215bc:	b4000420 	cbz	x0, 96021640 <tegrabl_register_prod_settings+0xa8>
			(register_function[controller_id] == NULL)) {
    960215c0:	b0000116 	adrp	x22, 96042000 <__func__.4833+0x5>
    960215c4:	2a0103f7 	mov	w23, w1
    960215c8:	912e42d6 	add	x22, x22, #0xb90
	for (i = 0; i < num_settings; i++) {
    960215cc:	52800015 	mov	w21, #0x0                   	// #0
		controller_instance = BITFIELD_GET(prod_settings[0],
    960215d0:	b9400280 	ldr	w0, [x20]
		num_configs = prod_settings[2];
    960215d4:	b9400a93 	ldr	w19, [x20, #8]
		controller_id = BITFIELD_GET(prod_settings[0],
    960215d8:	53107c01 	lsr	w1, w0, #16
		if (controller_id >= ARRAY_SIZE(register_function) ||
    960215dc:	7100083f 	cmp	w1, #0x2
    960215e0:	54000068 	b.hi	960215ec <tegrabl_register_prod_settings+0x54>  // b.pmore
			(register_function[controller_id] == NULL)) {
    960215e4:	f8617ac4 	ldr	x4, [x22, x1, lsl #3]
		if (controller_id >= ARRAY_SIZE(register_function) ||
    960215e8:	b50001a4 	cbnz	x4, 9602161c <tegrabl_register_prod_settings+0x84>
		prod_settings += (num_configs + 1) * 3;
    960215ec:	11000673 	add	w19, w19, #0x1
	for (i = 0; i < num_settings; i++) {
    960215f0:	110006b5 	add	w21, w21, #0x1
    960215f4:	6b1502ff 	cmp	w23, w21
		prod_settings += (num_configs + 1) * 3;
    960215f8:	0b130673 	add	w19, w19, w19, lsl #1
    960215fc:	8b130a94 	add	x20, x20, x19, lsl #2
	for (i = 0; i < num_settings; i++) {
    96021600:	54fffe81 	b.ne	960215d0 <tegrabl_register_prod_settings+0x38>  // b.any
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96021604:	52800000 	mov	w0, #0x0                   	// #0
}
    96021608:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602160c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96021610:	f9401bf7 	ldr	x23, [sp, #48]
    96021614:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96021618:	d65f03c0 	ret
		err = register_function[controller_id](
    9602161c:	b9400681 	ldr	w1, [x20, #4]
    96021620:	2a1303e3 	mov	w3, w19
    96021624:	91003282 	add	x2, x20, #0xc
    96021628:	12003c00 	and	w0, w0, #0xffff
    9602162c:	d63f0080 	blr	x4
		if (err != TEGRABL_NO_ERROR) {
    96021630:	34fffde0 	cbz	w0, 960215ec <tegrabl_register_prod_settings+0x54>
    96021634:	12005c00 	and	w0, w0, #0xffffff
    96021638:	32070c00 	orr	w0, w0, #0x1e000000
			return err;
    9602163c:	17fffff3 	b	96021608 <tegrabl_register_prod_settings+0x70>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96021640:	52800040 	mov	w0, #0x2                   	// #2
    96021644:	72a3c3c0 	movk	w0, #0x1e1e, lsl #16
    96021648:	17fffff0 	b	96021608 <tegrabl_register_prod_settings+0x70>

000000009602164c <tegrabl_is_ufs_enable>:
{
	return SCRATCH_READ(SCRATCH_8);
}

bool tegrabl_is_ufs_enable(void)
{
    9602164c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96021650:	910003fd 	mov	x29, sp
	uint32_t odmdata = 0;

	odmdata = tegrabl_odmdata_get();
    96021654:	940046aa 	bl	960330fc <tegrabl_odmdata_get>
	if ((odmdata & 0x10000000U) != 0U) {
		return true;
	} else {
		return false;
	}
}
    96021658:	531c7000 	ubfx	w0, w0, #28, #1
    9602165c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96021660:	d65f03c0 	ret

0000000096021664 <tegrabl_get_ecid_str>:
	return SCRATCH_READ(SCRATCH_7);
}

#define FUSE_ECID_MAX_SIZE 4U /* in Bytes */
tegrabl_error_t tegrabl_get_ecid_str(char *ecid_str, uint32_t size)
{
    96021664:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96021668:	910003fd 	mov	x29, sp
    9602166c:	a90153f3 	stp	x19, x20, [sp, #16]
    96021670:	a9025bf5 	stp	x21, x22, [sp, #32]
    96021674:	a90363f7 	stp	x23, x24, [sp, #48]
	tegrabl_error_t err;
	uint32_t ecid[FUSE_ECID_MAX_SIZE];
	uint32_t ecid_size;
	uint32_t *ptr;

	if (ecid_str == NULL) {
    96021678:	b5000180 	cbnz	x0, 960216a8 <tegrabl_get_ecid_str+0x44>
		pr_error("Invalid ECID addr\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602167c:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("Invalid ECID addr\n");
    96021680:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021684:	912ea000 	add	x0, x0, #0xba8
    96021688:	940003fa 	bl	96022670 <tegrabl_printf>
		TEGRABL_SET_HIGHEST_MODULE(err);
		goto done;
	}
	if ((ecid_size > (FUSE_ECID_MAX_SIZE * sizeof(uint32_t))) || (size < (ecid_size * 2U))) {
		pr_error("Not enough buffer for ECID\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9602168c:	72a3c3d3 	movk	w19, #0x1e1e, lsl #16
		tegrabl_snprintf(ecid_str, size, "%s%08x", ecid_str, *ptr);
	}

done:
	return err;
}
    96021690:	2a1303e0 	mov	w0, w19
    96021694:	a94153f3 	ldp	x19, x20, [sp, #16]
    96021698:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602169c:	a94363f7 	ldp	x23, x24, [sp, #48]
    960216a0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960216a4:	d65f03c0 	ret
    960216a8:	aa0003f7 	mov	x23, x0
    960216ac:	2a0103f5 	mov	w21, w1
	err = tegrabl_fuse_query_size(FUSE_UID, &ecid_size);
    960216b0:	52800040 	mov	w0, #0x2                   	// #2
    960216b4:	910133a1 	add	x1, x29, #0x4c
    960216b8:	97fff424 	bl	9601e748 <tegrabl_fuse_query_size>
    960216bc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960216c0:	340000e0 	cbz	w0, 960216dc <tegrabl_get_ecid_str+0x78>
		pr_error("Failed to query size of ECID\n");
    960216c4:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960216c8:	912ef800 	add	x0, x0, #0xbbe
    960216cc:	12005e73 	and	w19, w19, #0xffffff
		pr_error("Failed to read ECID\n");
    960216d0:	940003e8 	bl	96022670 <tegrabl_printf>
    960216d4:	32070e73 	orr	w19, w19, #0x1e000000
		goto done;
    960216d8:	17ffffee 	b	96021690 <tegrabl_get_ecid_str+0x2c>
	if ((ecid_size > (FUSE_ECID_MAX_SIZE * sizeof(uint32_t))) || (size < (ecid_size * 2U))) {
    960216dc:	b9404fa2 	ldr	w2, [x29, #76]
    960216e0:	7100405f 	cmp	w2, #0x10
    960216e4:	54000068 	b.hi	960216f0 <tegrabl_get_ecid_str+0x8c>  // b.pmore
    960216e8:	6b0206bf 	cmp	w21, w2, lsl #1
    960216ec:	540000c2 	b.cs	96021704 <tegrabl_get_ecid_str+0xa0>  // b.hs, b.nlast
		pr_error("Not enough buffer for ECID\n");
    960216f0:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960216f4:	52800073 	mov	w19, #0x3                   	// #3
		pr_error("Not enough buffer for ECID\n");
    960216f8:	912f7c00 	add	x0, x0, #0xbdf
    960216fc:	940003dd 	bl	96022670 <tegrabl_printf>
    96021700:	17ffffe3 	b	9602168c <tegrabl_get_ecid_str+0x28>
	err = tegrabl_fuse_read(FUSE_UID, ecid, ecid_size);
    96021704:	910143b6 	add	x22, x29, #0x50
    96021708:	52800040 	mov	w0, #0x2                   	// #2
    9602170c:	aa1603e1 	mov	x1, x22
    96021710:	97fff431 	bl	9601e7d4 <tegrabl_fuse_read>
    96021714:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96021718:	34000080 	cbz	w0, 96021728 <tegrabl_get_ecid_str+0xc4>
		pr_error("Failed to read ECID\n");
    9602171c:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021720:	912ff800 	add	x0, x0, #0xbfe
    96021724:	17ffffea 	b	960216cc <tegrabl_get_ecid_str+0x68>
	for (ptr = ecid + ecid_size / sizeof(uint32_t) - 1; ptr >= ecid; ptr--) {
    96021728:	b9404fb4 	ldr	w20, [x29, #76]
    9602172c:	92800060 	mov	x0, #0xfffffffffffffffc    	// #-4
		tegrabl_snprintf(ecid_str, size, "%s%08x", ecid_str, *ptr);
    96021730:	b0000118 	adrp	x24, 96042000 <__func__.4833+0x5>
    96021734:	91305b18 	add	x24, x24, #0xc16
	for (ptr = ecid + ecid_size / sizeof(uint32_t) - 1; ptr >= ecid; ptr--) {
    96021738:	53027e94 	lsr	w20, w20, #2
    9602173c:	8b344814 	add	x20, x0, w20, uxtw #2
    96021740:	8b1402d4 	add	x20, x22, x20
    96021744:	eb16029f 	cmp	x20, x22
    96021748:	54fffa43 	b.cc	96021690 <tegrabl_get_ecid_str+0x2c>  // b.lo, b.ul, b.last
		tegrabl_snprintf(ecid_str, size, "%s%08x", ecid_str, *ptr);
    9602174c:	b85fc684 	ldr	w4, [x20], #-4
    96021750:	aa1703e3 	mov	x3, x23
    96021754:	aa1803e2 	mov	x2, x24
    96021758:	aa1503e1 	mov	x1, x21
    9602175c:	aa1703e0 	mov	x0, x23
    96021760:	94000399 	bl	960225c4 <tegrabl_snprintf>
    96021764:	17fffff8 	b	96021744 <tegrabl_get_ecid_str+0xe0>

0000000096021768 <tegrabl_set_boot_slot_reg>:
#include <arscratch.h>
#include <tegrabl_soc_misc.h>

void tegrabl_set_boot_slot_reg(uint32_t slot_info)
{
	NV_WRITE32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_99, slot_info);
    96021768:	d2815b81 	mov	x1, #0xadc                 	// #2780
    9602176c:	f2a18721 	movk	x1, #0xc39, lsl #16
    96021770:	b9000020 	str	w0, [x1]
}
    96021774:	d65f03c0 	ret

0000000096021778 <tegrabl_get_boot_slot_reg>:

uint32_t tegrabl_get_boot_slot_reg(void)
{
	return NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_99);
    96021778:	d2815b80 	mov	x0, #0xadc                 	// #2780
    9602177c:	f2a18720 	movk	x0, #0xc39, lsl #16
    96021780:	b9400000 	ldr	w0, [x0]
}
    96021784:	d65f03c0 	ret

0000000096021788 <tegrabl_set_rootfs_slot_reg>:

void tegrabl_set_rootfs_slot_reg(uint32_t slot_info)
{
	NV_WRITE32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_13, slot_info);
    96021788:	d2813081 	mov	x1, #0x984                 	// #2436
    9602178c:	f2a18721 	movk	x1, #0xc39, lsl #16
    96021790:	b9000020 	str	w0, [x1]
}
    96021794:	d65f03c0 	ret

0000000096021798 <tegrabl_get_rootfs_slot_reg>:

uint32_t tegrabl_get_rootfs_slot_reg(void)
{
	return NV_READ32(NV_ADDRESS_MAP_SCRATCH_BASE + SCRATCH_SCRATCH_13);
    96021798:	d2813080 	mov	x0, #0x984                 	// #2436
    9602179c:	f2a18720 	movk	x0, #0xc39, lsl #16
    960217a0:	b9400000 	ldr	w0, [x0]
}
    960217a4:	d65f03c0 	ret

00000000960217a8 <tegrabl_keyslot_check_if_key_is_nonzero>:
        0x9F, 0x97, 0x46, 0x66,
        0x16, 0xE6, 0xA2, 0x82
};

bool tegrabl_keyslot_check_if_key_is_nonzero(uint8_t keyslot)
{
    960217a8:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
	struct se_aes_input_params input_params = {0};
	struct se_aes_context context = {0};
	uint8_t *input_data = NULL;
	uint8_t *input_iv = NULL;

	input_data = tegrabl_alloc(TEGRABL_HEAP_DMA, SE_AES_BLOCK_LENGTH);
    960217ac:	d2800201 	mov	x1, #0x10                  	// #16
{
    960217b0:	910003fd 	mov	x29, sp
    960217b4:	a90153f3 	stp	x19, x20, [sp, #16]
    960217b8:	12001c14 	and	w20, w0, #0xff
    960217bc:	f90013f5 	str	x21, [sp, #32]
	input_data = tegrabl_alloc(TEGRABL_HEAP_DMA, SE_AES_BLOCK_LENGTH);
    960217c0:	52800020 	mov	w0, #0x1                   	// #1
	struct se_aes_input_params input_params = {0};
    960217c4:	a9037fbf 	stp	xzr, xzr, [x29, #48]
    960217c8:	f90023bf 	str	xzr, [x29, #64]
	struct se_aes_context context = {0};
    960217cc:	a904ffbf 	stp	xzr, xzr, [x29, #72]
    960217d0:	a905ffbf 	stp	xzr, xzr, [x29, #88]
    960217d4:	a906ffbf 	stp	xzr, xzr, [x29, #104]
    960217d8:	f9003fbf 	str	xzr, [x29, #120]
	input_data = tegrabl_alloc(TEGRABL_HEAP_DMA, SE_AES_BLOCK_LENGTH);
    960217dc:	940014aa 	bl	96026a84 <tegrabl_alloc>
	if (input_data == NULL) {
    960217e0:	b5000140 	cbnz	x0, 96021808 <tegrabl_keyslot_check_if_key_is_nonzero+0x60>
	bool fuse_status = false;
    960217e4:	52800014 	mov	w20, #0x0                   	// #0
		pr_error("Unable to allocate memory for input_data\n");
    960217e8:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960217ec:	91344400 	add	x0, x0, #0xd11
    960217f0:	940003a0 	bl	96022670 <tegrabl_printf>
	if (input_iv != NULL) {
		tegrabl_free(input_iv);
	}

	return fuse_status;
}
    960217f4:	2a1403e0 	mov	w0, w20
    960217f8:	f94013f5 	ldr	x21, [sp, #32]
    960217fc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96021800:	a8c87bfd 	ldp	x29, x30, [sp], #128
    96021804:	d65f03c0 	ret
	memcpy(input_data , sample_text, SE_AES_BLOCK_LENGTH);
    96021808:	d2800202 	mov	x2, #0x10                  	// #16
    9602180c:	aa0003f3 	mov	x19, x0
    96021810:	b0000141 	adrp	x1, 9604a000 <s_qspi_info+0x20>
    96021814:	912e2021 	add	x1, x1, #0xb88
    96021818:	940021c3 	bl	96029f24 <memcpy>
	input_iv = tegrabl_alloc(TEGRABL_HEAP_DMA, SE_AES_BLOCK_LENGTH);
    9602181c:	d2800201 	mov	x1, #0x10                  	// #16
    96021820:	52800020 	mov	w0, #0x1                   	// #1
    96021824:	94001498 	bl	96026a84 <tegrabl_alloc>
    96021828:	aa0003f5 	mov	x21, x0
	if (input_iv == NULL) {
    9602182c:	b5000160 	cbnz	x0, 96021858 <tegrabl_keyslot_check_if_key_is_nonzero+0xb0>
		pr_error("Unable to allocate memory for input_iv\n");
    96021830:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021834:	9134f800 	add	x0, x0, #0xd3e
	bool fuse_status = false;
    96021838:	52800014 	mov	w20, #0x0                   	// #0
		pr_error("Failed to encrypt input data\n");
    9602183c:	9400038d 	bl	96022670 <tegrabl_printf>
		tegrabl_free(input_data);
    96021840:	aa1303e0 	mov	x0, x19
    96021844:	9400149d 	bl	96026ab8 <tegrabl_free>
	if (input_iv != NULL) {
    96021848:	b4fffd75 	cbz	x21, 960217f4 <tegrabl_keyslot_check_if_key_is_nonzero+0x4c>
		tegrabl_free(input_iv);
    9602184c:	aa1503e0 	mov	x0, x21
    96021850:	9400149a 	bl	96026ab8 <tegrabl_free>
    96021854:	17ffffe8 	b	960217f4 <tegrabl_keyslot_check_if_key_is_nonzero+0x4c>
	memset(input_iv , 0, SE_AES_BLOCK_LENGTH);
    96021858:	52800001 	mov	w1, #0x0                   	// #0
    9602185c:	d2800202 	mov	x2, #0x10                  	// #16
    96021860:	94002172 	bl	96029e28 <memset>
	input_params.dst =  input_params.src;
    96021864:	a9034fb3 	stp	x19, x19, [x29, #48]
	context.is_encrypt = true;
    96021868:	52800020 	mov	w0, #0x1                   	// #1
    9602186c:	390127a0 	strb	w0, [x29, #73]
	context.total_size = SE_AES_BLOCK_LENGTH;
    96021870:	52800200 	mov	w0, #0x10                  	// #16
    96021874:	b9004fa0 	str	w0, [x29, #76]
	input_params.input_size = context.total_size;
    96021878:	b21c03e0 	mov	x0, #0x1000000010          	// #68719476752
	context.is_hash = false;
    9602187c:	39012bbf 	strb	wzr, [x29, #74]
	input_params.input_size = context.total_size;
    96021880:	f90023a0 	str	x0, [x29, #64]
	error = tegrabl_se_aes_process_block(&input_params, &context);
    96021884:	910123a1 	add	x1, x29, #0x48
	context.keyslot = keyslot;
    96021888:	390143b4 	strb	w20, [x29, #80]
	error = tegrabl_se_aes_process_block(&input_params, &context);
    9602188c:	9100c3a0 	add	x0, x29, #0x30
	context.iv_encrypt = input_iv;
    96021890:	f9002fb5 	str	x21, [x29, #88]
	error = tegrabl_se_aes_process_block(&input_params, &context);
    96021894:	940026d4 	bl	9602b3e4 <tegrabl_se_aes_process_block>
	if (error != TEGRABL_NO_ERROR) {
    96021898:	34000080 	cbz	w0, 960218a8 <tegrabl_keyslot_check_if_key_is_nonzero+0x100>
		pr_error("Failed to encrypt input data\n");
    9602189c:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960218a0:	9135a400 	add	x0, x0, #0xd69
    960218a4:	17ffffe5 	b	96021838 <tegrabl_keyslot_check_if_key_is_nonzero+0x90>
	if (memcmp(input_data, cipher_test, SE_AES_BLOCK_LENGTH) != 0) {
    960218a8:	d2800202 	mov	x2, #0x10                  	// #16
    960218ac:	b0000141 	adrp	x1, 9604a000 <s_qspi_info+0x20>
    960218b0:	aa1303e0 	mov	x0, x19
    960218b4:	912de021 	add	x1, x1, #0xb78
    960218b8:	940021ee 	bl	9602a070 <memcmp>
    960218bc:	7100001f 	cmp	w0, #0x0
    960218c0:	1a9f07f4 	cset	w20, ne  // ne = any
fail:
    960218c4:	17ffffdf 	b	96021840 <tegrabl_keyslot_check_if_key_is_nonzero+0x98>

00000000960218c8 <__cpu_early_init>:
			"bne .            \n"
			"mov %0, x5       \n"
//			: "=r" (g_boot_params)
	);
#endif
}
    960218c8:	d65f03c0 	ret

00000000960218cc <platform_irq>:
};

static struct ihandler handler[TEGRA_MAX_INT];

handler_return_t platform_irq(struct arm64_iframe_short *frame)
{
    960218cc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    handler_return_t ret = INT_NO_RESCHEDULE;
    uint32_t iar;
    uint32_t irq_num;
    iar = GICC_READ(GICC_IAR);
    960218d0:	d0000260 	adrp	x0, 9606f000 <eeproms+0x500>
{
    960218d4:	910003fd 	mov	x29, sp
    iar = GICC_READ(GICC_IAR);
    960218d8:	f9452401 	ldr	x1, [x0, #2632]
{
    960218dc:	a9025bf5 	stp	x21, x22, [sp, #32]
    960218e0:	a90153f3 	stp	x19, x20, [sp, #16]
    iar = GICC_READ(GICC_IAR);
    960218e4:	b9400c35 	ldr	w21, [x1, #12]
    irq_num = iar & 0x3FF;
    960218e8:	120026a1 	and	w1, w21, #0x3ff

    if (irq_num >= TEGRA_MAX_INT) {
    960218ec:	7103fc3f 	cmp	w1, #0xff
    960218f0:	54000488 	b.hi	96021980 <platform_irq+0xb4>  // b.pmore
    960218f4:	aa0003f6 	mov	x22, x0
static inline void inc_critical_section(void) { critical_section_count++; }
    960218f8:	b00002a0 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    inc_critical_section();

    THREAD_STATS_INC(interrupts);
    KEVLOG_IRQ_ENTER(irq_num);

    if (handler[irq_num].func)
    960218fc:	d37c2421 	ubfiz	x1, x1, #4, #10
    96021900:	aa0003f3 	mov	x19, x0
    96021904:	b94c9802 	ldr	w2, [x0, #3224]
    96021908:	11000442 	add	w2, w2, #0x1
    9602190c:	b90c9802 	str	w2, [x0, #3224]
    THREAD_STATS_INC(interrupts);
    96021910:	b00002a2 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96021914:	9131a042 	add	x2, x2, #0xc68
    96021918:	b9402043 	ldr	w3, [x2, #32]
    9602191c:	11000463 	add	w3, w3, #0x1
    96021920:	b9002043 	str	w3, [x2, #32]
    if (handler[irq_num].func)
    96021924:	d0000262 	adrp	x2, 9606f000 <eeproms+0x500>
    96021928:	91296042 	add	x2, x2, #0xa58
    9602192c:	8b010043 	add	x3, x2, x1
    96021930:	f8616841 	ldr	x1, [x2, x1]
    96021934:	b4000221 	cbz	x1, 96021978 <platform_irq+0xac>
        ret = handler[irq_num].func(handler[irq_num].arg);
    96021938:	f9400460 	ldr	x0, [x3, #8]
    9602193c:	d63f0020 	blr	x1
    96021940:	2a0003f4 	mov	w20, w0

    GICC_WRITE(GICC_EOIR,(iar & 0x1FFF));
    96021944:	f94526c0 	ldr	x0, [x22, #2632]
    96021948:	120032b5 	and	w21, w21, #0x1fff
    9602194c:	b9001015 	str	w21, [x0, #16]

    KEVLOG_IRQ_EXIT(irq_num);

    if (ret != INT_NO_RESCHEDULE)
    96021950:	34000054 	cbz	w20, 96021958 <platform_irq+0x8c>
        thread_preempt();
    96021954:	97ff8b9a 	bl	960047bc <thread_preempt>
static inline void dec_critical_section(void) { critical_section_count--; }
    96021958:	b94c9a60 	ldr	w0, [x19, #3224]
    9602195c:	51000400 	sub	w0, w0, #0x1
    96021960:	b90c9a60 	str	w0, [x19, #3224]

    dec_critical_section();

    return ret;
}
    96021964:	2a1403e0 	mov	w0, w20
    96021968:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602196c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96021970:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96021974:	d65f03c0 	ret
    handler_return_t ret = INT_NO_RESCHEDULE;
    96021978:	52800014 	mov	w20, #0x0                   	// #0
    9602197c:	17fffff2 	b	96021944 <platform_irq+0x78>
        return INT_NO_RESCHEDULE;
    96021980:	52800014 	mov	w20, #0x0                   	// #0
    96021984:	17fffff8 	b	96021964 <platform_irq+0x98>

0000000096021988 <platform_fiq>:

void platform_fiq(struct arm64_iframe_short *frame)
{
    96021988:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    PANIC_UNIMPLEMENTED;
    9602198c:	b0000102 	adrp	x2, 96042000 <__func__.4833+0x5>
    96021990:	b0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96021994:	91362842 	add	x2, x2, #0xd8a
{
    96021998:	910003fd 	mov	x29, sp
    PANIC_UNIMPLEMENTED;
    9602199c:	91365c21 	add	x1, x1, #0xd97
    960219a0:	aa1e03e0 	mov	x0, x30
    960219a4:	94001868 	bl	96027b44 <_panic>

00000000960219a8 <platform_init_interrupts>:
}

void platform_init_interrupts(void)
{
    960219a8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    uint32_t spi_lines;
    uint32_t cpu_num;
    uint32_t i;

	gicd_base = T186_GICD_BASE;
    960219ac:	d0000262 	adrp	x2, 9606f000 <eeproms+0x500>
	gicc_base = T186_GICC_BASE;
    960219b0:	d0000261 	adrp	x1, 9606f000 <eeproms+0x500>
	gicd_base = T186_GICD_BASE;
    960219b4:	d2820000 	mov	x0, #0x1000                	// #4096
{
    960219b8:	910003fd 	mov	x29, sp
	gicd_base = T186_GICD_BASE;
    960219bc:	f2a07100 	movk	x0, #0x388, lsl #16
    960219c0:	f9052840 	str	x0, [x2, #2640]
	gicc_base = T186_GICC_BASE;
    960219c4:	91400400 	add	x0, x0, #0x1, lsl #12
    960219c8:	f9052420 	str	x0, [x1, #2632]

    // Get number of Shared peripheral interupt lines
    spi_lines = GICD_READ(GICD_TYPER);
    960219cc:	d2820080 	mov	x0, #0x1004                	// #4100
{
    960219d0:	a90153f3 	stp	x19, x20, [sp, #16]
    spi_lines = GICD_READ(GICD_TYPER);
    960219d4:	f2a07100 	movk	x0, #0x388, lsl #16
{
    960219d8:	a9025bf5 	stp	x21, x22, [sp, #32]
    spi_lines = (spi_lines & 0x1F) * 32;

    // Clear all interrupt enables (including SGIs & PPIs)
    for (i = 0; i < ((spi_lines / 32) + 1); i++)
    960219dc:	d2823003 	mov	x3, #0x1180                	// #4480
    960219e0:	aa0203f6 	mov	x22, x2
    spi_lines = GICD_READ(GICD_TYPER);
    960219e4:	b9400013 	ldr	w19, [x0]
    960219e8:	aa0103f5 	mov	x21, x1
    for (i = 0; i < ((spi_lines / 32) + 1); i++)
    960219ec:	f2a07103 	movk	x3, #0x388, lsl #16
        GICD_WRITE(GICD_ICENABLE + (i * 4),0xFFFFFFFF);
    960219f0:	12800001 	mov	w1, #0xffffffff            	// #-1
    spi_lines = (spi_lines & 0x1F) * 32;
    960219f4:	12001273 	and	w19, w19, #0x1f
    960219f8:	11000660 	add	w0, w19, #0x1
    960219fc:	aa0003f3 	mov	x19, x0
    96021a00:	91788000 	add	x0, x0, #0xe20, lsl #12
    96021a04:	91118000 	add	x0, x0, #0x460
    96021a08:	d37ef400 	lsl	x0, x0, #2
    for (i = 0; i < ((spi_lines / 32) + 1); i++)
    96021a0c:	eb00007f 	cmp	x3, x0
    96021a10:	54000481 	b.ne	96021aa0 <platform_init_interrupts+0xf8>  // b.any
	mpidr = ARM64_READ_SYSREG(MPIDR_EL1);
    96021a14:	d53800a1 	mrs	x1, mpidr_el1
	cpu_num = mpidr & (MAX_CPUS_PER_CLUSTER - 1);
    96021a18:	12000434 	and	w20, w1, #0x3
	cpu_num += (((mpidr) >> 8) & (MAX_CPU_CLUSTERS - 1)) * MAX_CPUS_PER_CLUSTER;
    96021a1c:	53082021 	ubfx	w1, w1, #8, #1

	cpu_num = arm64_get_cpu_idx();
	dprintf(SPEW, "GIC-SPI Target CPU: %u\n", cpu_num);
    96021a20:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021a24:	9136a400 	add	x0, x0, #0xda9
    96021a28:	0b010a94 	add	w20, w20, w1, lsl #2

    cpu_num = 1 << cpu_num;
    cpu_num = ((cpu_num << 24) | (cpu_num << 16) | (cpu_num << 8) | cpu_num);
    for (i = 0; i < (((spi_lines / 32) + 1) * 8); i++)
    96021a2c:	531d7273 	lsl	w19, w19, #3
	dprintf(SPEW, "GIC-SPI Target CPU: %u\n", cpu_num);
    96021a30:	2a1403e1 	mov	w1, w20
    96021a34:	94001814 	bl	96027a84 <_dprintf>
    cpu_num = 1 << cpu_num;
    96021a38:	52800021 	mov	w1, #0x1                   	// #1
        GICD_WRITE(GICD_ITARGETS + (i * 4),cpu_num);
    96021a3c:	f9452ac2 	ldr	x2, [x22, #2640]
    cpu_num = 1 << cpu_num;
    96021a40:	1ad42021 	lsl	w1, w1, w20
    cpu_num = ((cpu_num << 24) | (cpu_num << 16) | (cpu_num << 8) | cpu_num);
    96021a44:	53103c20 	lsl	w0, w1, #16
    96021a48:	2a016000 	orr	w0, w0, w1, lsl #24
    96021a4c:	2a012021 	orr	w1, w1, w1, lsl #8
    96021a50:	2a010001 	orr	w1, w0, w1
    96021a54:	91200040 	add	x0, x2, #0x800
    96021a58:	8b334813 	add	x19, x0, w19, uxtw #2
    for (i = 0; i < (((spi_lines / 32) + 1) * 8); i++)
    96021a5c:	eb13001f 	cmp	x0, x19
    96021a60:	54000241 	b.ne	96021aa8 <platform_init_interrupts+0x100>  // b.any

    //Enable GIC distributor
    i = GICD_READ(GICD_CTLR);
    96021a64:	b9400040 	ldr	w0, [x2]
    GICC_WRITE(GICC_CTLR,i);

    //Set lowest priority
    GICC_WRITE(GICC_PMR,0xFF);
	dprintf(INFO,"Interrupts Init done\n");
}
    96021a68:	a94153f3 	ldp	x19, x20, [sp, #16]
    i |= 0x1;
    96021a6c:	32000000 	orr	w0, w0, #0x1
    GICD_WRITE(GICD_CTLR,i);
    96021a70:	b9000040 	str	w0, [x2]
    i = GICC_READ(GICC_CTLR);
    96021a74:	f94526a0 	ldr	x0, [x21, #2632]
}
    96021a78:	a9425bf5 	ldp	x21, x22, [sp, #32]
    i = GICC_READ(GICC_CTLR);
    96021a7c:	b9400001 	ldr	w1, [x0]
    i |= 0x1;
    96021a80:	32000021 	orr	w1, w1, #0x1
    GICC_WRITE(GICC_CTLR,i);
    96021a84:	b9000001 	str	w1, [x0]
    GICC_WRITE(GICC_PMR,0xFF);
    96021a88:	52801fe1 	mov	w1, #0xff                  	// #255
    96021a8c:	b9000401 	str	w1, [x0, #4]
	dprintf(INFO,"Interrupts Init done\n");
    96021a90:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021a94:	91370400 	add	x0, x0, #0xdc1
}
    96021a98:	a8c37bfd 	ldp	x29, x30, [sp], #48
	dprintf(INFO,"Interrupts Init done\n");
    96021a9c:	140017fa 	b	96027a84 <_dprintf>
        GICD_WRITE(GICD_ICENABLE + (i * 4),0xFFFFFFFF);
    96021aa0:	b8004461 	str	w1, [x3], #4
    96021aa4:	17ffffda 	b	96021a0c <platform_init_interrupts+0x64>
        GICD_WRITE(GICD_ITARGETS + (i * 4),cpu_num);
    96021aa8:	b8004401 	str	w1, [x0], #4
    96021aac:	17ffffec 	b	96021a5c <platform_init_interrupts+0xb4>

0000000096021ab0 <register_int_handler>:

void register_int_handler(unsigned int vector, int_handler func, void *arg)
{
    ASSERT(vector < TEGRA_MAX_INT);
    96021ab0:	7103fc1f 	cmp	w0, #0xff
    96021ab4:	54000189 	b.ls	96021ae4 <register_int_handler+0x34>  // b.plast
{
    96021ab8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    ASSERT(vector < TEGRA_MAX_INT);
    96021abc:	b0000104 	adrp	x4, 96042000 <__func__.4833+0x5>
    96021ac0:	b0000102 	adrp	x2, 96042000 <__func__.4833+0x5>
    96021ac4:	b00000c1 	adrp	x1, 9603a000 <__exidx_end+0x548>
{
    96021ac8:	910003fd 	mov	x29, sp
    96021acc:	aa1e03e0 	mov	x0, x30
    ASSERT(vector < TEGRA_MAX_INT);
    96021ad0:	91375c84 	add	x4, x4, #0xdd7
    96021ad4:	52801263 	mov	w3, #0x93                  	// #147
    96021ad8:	9137b842 	add	x2, x2, #0xdee
    96021adc:	91325421 	add	x1, x1, #0xc95
    96021ae0:	94001819 	bl	96027b44 <_panic>
	if (critical_section_count == 0)
    96021ae4:	b00002a3 	adrp	x3, 96076000 <free_dram_block+0x38e8>
    96021ae8:	b94c9864 	ldr	w4, [x3, #3224]
    96021aec:	35000044 	cbnz	w4, 96021af4 <register_int_handler+0x44>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96021af0:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96021af4:	b94c9864 	ldr	w4, [x3, #3224]
    96021af8:	11000484 	add	w4, w4, #0x1
    96021afc:	b90c9864 	str	w4, [x3, #3224]

    enter_critical_section();
    handler[vector].func = func;
    96021b00:	d0000264 	adrp	x4, 9606f000 <eeproms+0x500>
    96021b04:	d37c7c00 	ubfiz	x0, x0, #4, #32
    96021b08:	91296084 	add	x4, x4, #0xa58
    96021b0c:	8b000085 	add	x5, x4, x0
    96021b10:	f8206881 	str	x1, [x4, x0]
    handler[vector].arg = arg;
    96021b14:	f90004a2 	str	x2, [x5, #8]
	critical_section_count--;
    96021b18:	b94c9860 	ldr	w0, [x3, #3224]
    96021b1c:	51000400 	sub	w0, w0, #0x1
    96021b20:	b90c9860 	str	w0, [x3, #3224]
	if (critical_section_count == 0)
    96021b24:	35000040 	cbnz	w0, 96021b2c <register_int_handler+0x7c>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96021b28:	d50343ff 	msr	daifclr, #0x3
	CF;
    96021b2c:	d65f03c0 	ret

0000000096021b30 <mask_interrupt>:
	if (critical_section_count == 0)
    96021b30:	b00002a1 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96021b34:	b94c9822 	ldr	w2, [x1, #3224]
    96021b38:	35000042 	cbnz	w2, 96021b40 <mask_interrupt+0x10>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96021b3c:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96021b40:	b94c9822 	ldr	w2, [x1, #3224]
    96021b44:	11000442 	add	w2, w2, #0x1
    96021b48:	b90c9822 	str	w2, [x1, #3224]

status_t mask_interrupt(unsigned int vector)
{
    enter_critical_section();

    GICD_WRITE(GICD_ICENABLE + ((vector / 32) * 4), 1 << (vector % 32));
    96021b4c:	d0000262 	adrp	x2, 9606f000 <eeproms+0x500>
    96021b50:	53057c03 	lsr	w3, w0, #5
    96021b54:	12001000 	and	w0, w0, #0x1f
    96021b58:	52800024 	mov	w4, #0x1                   	// #1
    96021b5c:	f9452842 	ldr	x2, [x2, #2640]
    96021b60:	d37e6863 	ubfiz	x3, x3, #2, #27
    96021b64:	1ac02080 	lsl	w0, w4, w0
    96021b68:	91060042 	add	x2, x2, #0x180
    96021b6c:	b8226860 	str	w0, [x3, x2]
	critical_section_count--;
    96021b70:	b94c9820 	ldr	w0, [x1, #3224]
    96021b74:	51000400 	sub	w0, w0, #0x1
    96021b78:	b90c9820 	str	w0, [x1, #3224]
	if (critical_section_count == 0)
    96021b7c:	35000040 	cbnz	w0, 96021b84 <mask_interrupt+0x54>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96021b80:	d50343ff 	msr	daifclr, #0x3

    exit_critical_section();

    return NO_ERROR;
}
    96021b84:	52800000 	mov	w0, #0x0                   	// #0
    96021b88:	d65f03c0 	ret

0000000096021b8c <unmask_interrupt>:
	if (critical_section_count == 0)
    96021b8c:	b00002a1 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96021b90:	b94c9822 	ldr	w2, [x1, #3224]
    96021b94:	35000042 	cbnz	w2, 96021b9c <unmask_interrupt+0x10>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96021b98:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96021b9c:	b94c9822 	ldr	w2, [x1, #3224]
    96021ba0:	11000442 	add	w2, w2, #0x1
    96021ba4:	b90c9822 	str	w2, [x1, #3224]

status_t unmask_interrupt(unsigned int vector)
{
    enter_critical_section();

    GICD_WRITE(GICD_ISENABLE + ((vector / 32) * 4), 1 << (vector % 32));
    96021ba8:	d0000262 	adrp	x2, 9606f000 <eeproms+0x500>
    96021bac:	53057c03 	lsr	w3, w0, #5
    96021bb0:	12001000 	and	w0, w0, #0x1f
    96021bb4:	52800024 	mov	w4, #0x1                   	// #1
    96021bb8:	f9452842 	ldr	x2, [x2, #2640]
    96021bbc:	d37e6863 	ubfiz	x3, x3, #2, #27
    96021bc0:	1ac02080 	lsl	w0, w4, w0
    96021bc4:	91040042 	add	x2, x2, #0x100
    96021bc8:	b8226860 	str	w0, [x3, x2]
	critical_section_count--;
    96021bcc:	b94c9820 	ldr	w0, [x1, #3224]
    96021bd0:	51000400 	sub	w0, w0, #0x1
    96021bd4:	b90c9820 	str	w0, [x1, #3224]
	if (critical_section_count == 0)
    96021bd8:	35000040 	cbnz	w0, 96021be0 <unmask_interrupt+0x54>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96021bdc:	d50343ff 	msr	daifclr, #0x3

    exit_critical_section();

    return NO_ERROR;
}
    96021be0:	52800000 	mov	w0, #0x0                   	// #0
    96021be4:	d65f03c0 	ret

0000000096021be8 <timer_irq>:
static volatile uint32_t ticks;

static handler_return_t timer_irq(void *arg)
{
	/*  Clears the interrupt */
	writel((1 << 30), tmrs[0].reg_base + PCR);
    96021be8:	b00002a0 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96021bec:	52a80002 	mov	w2, #0x40000000            	// #1073741824
    96021bf0:	f9465801 	ldr	x1, [x0, #3248]
    96021bf4:	d2800080 	mov	x0, #0x4                   	// #4
    96021bf8:	f2a00040 	movk	x0, #0x2, lsl #16
    96021bfc:	b8206822 	str	w2, [x1, x0]
	ticks += timer_interval;
    96021c00:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96021c04:	f0000262 	adrp	x2, 96070000 <handler+0x5a8>
    96021c08:	b94a5801 	ldr	w1, [x0, #2648]
    96021c0c:	f9453842 	ldr	x2, [x2, #2672]
    96021c10:	0b020021 	add	w1, w1, w2
    96021c14:	b90a5801 	str	w1, [x0, #2648]
	return timer_callback(timer_arg, ticks);
    96021c18:	b94a5801 	ldr	w1, [x0, #2648]
    96021c1c:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96021c20:	f9453402 	ldr	x2, [x0, #2664]
    96021c24:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96021c28:	2a0103e1 	mov	w1, w1
    96021c2c:	f9453000 	ldr	x0, [x0, #2656]
    96021c30:	d61f0040 	br	x2

0000000096021c34 <platform_set_periodic_timer>:
}

status_t platform_set_periodic_timer(platform_timer_callback callback, void *arg, lk_time_t interval)
{
    96021c34:	a9be7bfd 	stp	x29, x30, [sp, #-32]!

	tmrs[0].reg_base = TMR_BT;
    96021c38:	b00002a3 	adrp	x3, 96076000 <free_dram_block+0x38e8>
    96021c3c:	9132c064 	add	x4, x3, #0xcb0
    96021c40:	d2a06025 	mov	x5, #0x3010000             	// #50397184
{
    96021c44:	910003fd 	mov	x29, sp
    96021c48:	a90153f3 	stp	x19, x20, [sp, #16]
	tmrs[0].reg_base = TMR_BT;
    96021c4c:	f9065865 	str	x5, [x3, #3248]
	tmrs[0].intr = INT_NUM;
    96021c50:	52800425 	mov	w5, #0x21                  	// #33
    96021c54:	b9000885 	str	w5, [x4, #8]
	if (critical_section_count == 0)
    96021c58:	b00002b3 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96021c5c:	b94c9a64 	ldr	w4, [x19, #3224]
    96021c60:	35000044 	cbnz	w4, 96021c68 <platform_set_periodic_timer+0x34>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96021c64:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96021c68:	b94c9a64 	ldr	w4, [x19, #3224]
    96021c6c:	11000484 	add	w4, w4, #0x1
    96021c70:	b90c9a64 	str	w4, [x19, #3224]
	enter_critical_section();

	timer_callback = callback;
    96021c74:	f0000264 	adrp	x4, 96070000 <handler+0x5a8>
	timer_arg = arg;
	timer_interval = interval;

	/* 1. TKECR => BTKE+16 | Do not disable TSC, us and OSC counters */
	writel(0, tmrs[0].reg_base + TKECR);
    96021c78:	9132c074 	add	x20, x3, #0xcb0
	timer_callback = callback;
    96021c7c:	f9053480 	str	x0, [x4, #2664]
	timer_arg = arg;
    96021c80:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96021c84:	f9053001 	str	x1, [x0, #2656]
	timer_interval = interval;
    96021c88:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>

	/* 2. TKEIE{i} => BTKE+0x100+4*{i} */
	writel(1 << (TMR_INDEX) , tmrs[0].reg_base + TKEIE + (4 * INT_INDEX));
    96021c8c:	52800041 	mov	w1, #0x2                   	// #2
	timer_interval = interval;
    96021c90:	f9053802 	str	x2, [x0, #2672]
	writel(0, tmrs[0].reg_base + TKECR);
    96021c94:	f9465860 	ldr	x0, [x3, #3248]
    96021c98:	b900101f 	str	wzr, [x0, #16]
	writel(1 << (TMR_INDEX) , tmrs[0].reg_base + TKEIE + (4 * INT_INDEX));
    96021c9c:	b9010401 	str	w1, [x0, #260]

	/* 3. TMRCSSR{t} => BT+P*{t}+8 */
	/* 00b is the 1 microsecond pulse,
	   01b is OSC (for SPE TKE) or clk_m (all others)
	   10b is any change in bit 0 of the local TSC counter */
	writel(0 , tmrs[0].reg_base + TMRCSSR);
    96021ca0:	d2800101 	mov	x1, #0x8                   	// #8
    96021ca4:	f2a00041 	movk	x1, #0x2, lsl #16
    96021ca8:	b821681f 	str	wzr, [x0, x1]

	/* 4. TMRCR{t} => BT+P*{t}+0 */
	writel(((3 << 30)|(timer_interval*1000)) , tmrs[0].reg_base + TMRCR);
    96021cac:	52807d01 	mov	w1, #0x3e8                 	// #1000
    96021cb0:	91408000 	add	x0, x0, #0x20, lsl #12
    96021cb4:	1b017c42 	mul	w2, w2, w1

	register_int_handler(tmrs[0].intr, timer_irq, 0);
    96021cb8:	90000001 	adrp	x1, 96021000 <tegrabl_brbit_open+0x54>
    96021cbc:	912fa021 	add	x1, x1, #0xbe8
	writel(((3 << 30)|(timer_interval*1000)) , tmrs[0].reg_base + TMRCR);
    96021cc0:	32020442 	orr	w2, w2, #0xc0000000
    96021cc4:	b9000002 	str	w2, [x0]
	register_int_handler(tmrs[0].intr, timer_irq, 0);
    96021cc8:	d2800002 	mov	x2, #0x0                   	// #0
    96021ccc:	b9400a80 	ldr	w0, [x20, #8]
    96021cd0:	97ffff78 	bl	96021ab0 <register_int_handler>
	unmask_interrupt(tmrs[0].intr);
    96021cd4:	b9400a80 	ldr	w0, [x20, #8]
    96021cd8:	97ffffad 	bl	96021b8c <unmask_interrupt>
	critical_section_count--;
    96021cdc:	b94c9a60 	ldr	w0, [x19, #3224]
    96021ce0:	51000400 	sub	w0, w0, #0x1
    96021ce4:	b90c9a60 	str	w0, [x19, #3224]
	if (critical_section_count == 0)
    96021ce8:	35000040 	cbnz	w0, 96021cf0 <platform_set_periodic_timer+0xbc>
    __asm__ volatile("msr daifclr, #3" ::: "memory");
    96021cec:	d50343ff 	msr	daifclr, #0x3

	exit_critical_section();

	return 0;
}
    96021cf0:	52800000 	mov	w0, #0x0                   	// #0
    96021cf4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96021cf8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96021cfc:	d65f03c0 	ret

0000000096021d00 <current_time>:

/* returns time in milli seconds */
lk_time_t current_time(void)
{
	return ticks;
    96021d00:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96021d04:	b94a5800 	ldr	w0, [x0, #2648]
}
    96021d08:	2a0003e0 	mov	w0, w0
    96021d0c:	d65f03c0 	ret

0000000096021d10 <platform_init_timer>:
	return (get_time_stamp_us() / 1000);
}

void platform_init_timer(void)
{
}
    96021d10:	d65f03c0 	ret

0000000096021d14 <platform_uninit_timer>:

void platform_uninit_timer(void)
{
    96021d14:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96021d18:	910003fd 	mov	x29, sp
    96021d1c:	f9000bf3 	str	x19, [sp, #16]
	mask_interrupt(tmrs[0].intr);
    96021d20:	b00002b3 	adrp	x19, 96076000 <free_dram_block+0x38e8>
    96021d24:	9132c260 	add	x0, x19, #0xcb0
    96021d28:	b9400800 	ldr	w0, [x0, #8]
    96021d2c:	97ffff81 	bl	96021b30 <mask_interrupt>
	writel(0, tmrs[0].reg_base + PTV);
    96021d30:	f9465a60 	ldr	x0, [x19, #3248]
}
    96021d34:	f9400bf3 	ldr	x19, [sp, #16]
	writel(0, tmrs[0].reg_base + PTV);
    96021d38:	91408000 	add	x0, x0, #0x20, lsl #12
    96021d3c:	b900001f 	str	wzr, [x0]
}
    96021d40:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96021d44:	d65f03c0 	ret

0000000096021d48 <current_time_hires>:
}

/* Return current time in micro seconds */
lk_bigtime_t current_time_hires(void)
{
	return ticks * 1000ULL;
    96021d48:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96021d4c:	b94a5801 	ldr	w1, [x0, #2648]
}
    96021d50:	52807d00 	mov	w0, #0x3e8                 	// #1000
    96021d54:	9ba07c20 	umull	x0, w1, w0
    96021d58:	d65f03c0 	ret

0000000096021d5c <platform_dputc>:
#endif

}

void platform_dputc(char c)
{
    96021d5c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96021d60:	910003fd 	mov	x29, sp
    96021d64:	a9025bf5 	stp	x21, x22, [sp, #32]
    96021d68:	12001c15 	and	w21, w0, #0xff
	lk_time_t time_lapse = 0;
	char time_stamp[TIME_STAMP_LENGTH];
	static char t = 0;

	/* if last char was new line print time stamp*/
	if (t == '\n') {
    96021d6c:	f0000260 	adrp	x0, 96070000 <handler+0x5a8>
{
    96021d70:	a90153f3 	stp	x19, x20, [sp, #16]
    96021d74:	aa0003f3 	mov	x19, x0
	if (t == '\n') {
    96021d78:	3969e001 	ldrb	w1, [x0, #2680]
    96021d7c:	7100283f 	cmp	w1, #0xa
    96021d80:	54000201 	b.ne	96021dc0 <platform_dputc+0x64>  // b.any
		time_lapse = tegrabl_get_timestamp_ms();
    96021d84:	97fff7c2 	bl	9601fc8c <tegrabl_get_timestamp_ms>

		sprintf(time_stamp, "[%04lu.%03lu] ",
    96021d88:	d2800014 	mov	x20, #0x0                   	// #0
    96021d8c:	d2807d03 	mov	x3, #0x3e8                 	// #1000
    96021d90:	9100c3b6 	add	x22, x29, #0x30
    96021d94:	b0000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96021d98:	91393c21 	add	x1, x1, #0xe4f
    96021d9c:	9ac30802 	udiv	x2, x0, x3
    96021da0:	9b038043 	msub	x3, x2, x3, x0
    96021da4:	aa1603e0 	mov	x0, x22
    96021da8:	94001a67 	bl	96028744 <sprintf>
				time_lapse / 1000, time_lapse % 1000);

		for (i = 0; i < (TIME_STAMP_LENGTH - 1) ; i++) {
			tegrabl_putc(time_stamp[i]);
    96021dac:	38746ac0 	ldrb	w0, [x22, x20]
    96021db0:	91000694 	add	x20, x20, #0x1
    96021db4:	9400028e 	bl	960227ec <tegrabl_putc>
		for (i = 0; i < (TIME_STAMP_LENGTH - 1) ; i++) {
    96021db8:	f1002e9f 	cmp	x20, #0xb
    96021dbc:	54ffff81 	b.ne	96021dac <platform_dputc+0x50>  // b.any
		}
	}
	/* cache the printed character for next timestamp */
	t = c;
    96021dc0:	3929e275 	strb	w21, [x19, #2680]
#endif

	if (c == '\n')
    96021dc4:	71002abf 	cmp	w21, #0xa
    96021dc8:	54000061 	b.ne	96021dd4 <platform_dputc+0x78>  // b.any
		tegrabl_putc('\r');
    96021dcc:	528001a0 	mov	w0, #0xd                   	// #13
    96021dd0:	94000287 	bl	960227ec <tegrabl_putc>
	tegrabl_putc(c);
    96021dd4:	2a1503e0 	mov	w0, w21
    96021dd8:	94000285 	bl	960227ec <tegrabl_putc>
}
    96021ddc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96021de0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96021de4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96021de8:	d65f03c0 	ret

0000000096021dec <platform_dgetc>:

int platform_dgetc(char *c, bool wait)
{
    96021dec:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96021df0:	910003fd 	mov	x29, sp
    96021df4:	f9000bf3 	str	x19, [sp, #16]
    96021df8:	aa0003f3 	mov	x19, x0
	int _c;

	_c = tegrabl_getc();
    96021dfc:	94000289 	bl	96022820 <tegrabl_getc>
	if (_c < 0)
    96021e00:	37f800c0 	tbnz	w0, #31, 96021e18 <platform_dgetc+0x2c>
		return -1;

	*c = _c;
    96021e04:	39000260 	strb	w0, [x19]
	return 0;
    96021e08:	52800000 	mov	w0, #0x0                   	// #0
}
    96021e0c:	f9400bf3 	ldr	x19, [sp, #16]
    96021e10:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96021e14:	d65f03c0 	ret
		return -1;
    96021e18:	12800000 	mov	w0, #0xffffffff            	// #-1
    96021e1c:	17fffffc 	b	96021e0c <platform_dgetc+0x20>

0000000096021e20 <platform_halt>:

void platform_halt(void)
{
    96021e20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	dprintf(ALWAYS, "HALT: spinning forever...\n");
    96021e24:	b0000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96021e28:	91397800 	add	x0, x0, #0xe5e
{
    96021e2c:	910003fd 	mov	x29, sp
	dprintf(ALWAYS, "HALT: spinning forever...\n");
    96021e30:	94001715 	bl	96027a84 <_dprintf>
    96021e34:	14000000 	b	96021e34 <platform_halt+0x14>

0000000096021e38 <target_early_init>:
 * chooses not to implement.
 */

__WEAK void target_early_init(void)
{
}
    96021e38:	d65f03c0 	ret

0000000096021e3c <target_init>:
    96021e3c:	d65f03c0 	ret

0000000096021e40 <tegrabl_uart_open>:
	uart_writel(huart, LCR, reg_value);
	return e;
}

struct tegrabl_uart *tegrabl_uart_open(uint32_t instance)
{
    96021e40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96021e44:	910003fd 	mov	x29, sp
    96021e48:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t delay;
	struct tegrabl_uart *huart = NULL;
	uint32_t num_of_instances;
	uint32_t count = 0;

	tegrabl_uart_soc_get_info(&huart, &num_of_instances);
    96021e4c:	910093a1 	add	x1, x29, #0x24
{
    96021e50:	2a0003f3 	mov	w19, w0
	tegrabl_uart_soc_get_info(&huart, &num_of_instances);
    96021e54:	9100a3a0 	add	x0, x29, #0x28
	uint32_t uart_freq = 0;
    96021e58:	b90023bf 	str	wzr, [x29, #32]
	struct tegrabl_uart *huart = NULL;
    96021e5c:	f90017bf 	str	xzr, [x29, #40]
	tegrabl_uart_soc_get_info(&huart, &num_of_instances);
    96021e60:	9400010b 	bl	9602228c <tegrabl_uart_soc_get_info>

	if (instance >= num_of_instances) {
    96021e64:	b94027a1 	ldr	w1, [x29, #36]
    96021e68:	6b13003f 	cmp	w1, w19
    96021e6c:	540000c8 	b.hi	96021e84 <tegrabl_uart_open+0x44>  // b.pmore
		(void)uart_rx_byte(huart);
	}

fail:
	if (error != TEGRABL_NO_ERROR) {
		huart = NULL;
    96021e70:	f90017bf 	str	xzr, [x29, #40]
	}

	return huart;
}
    96021e74:	f94017a0 	ldr	x0, [x29, #40]
    96021e78:	a94153f3 	ldp	x19, x20, [sp, #16]
    96021e7c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96021e80:	d65f03c0 	ret
    96021e84:	f94017a0 	ldr	x0, [x29, #40]
    96021e88:	52800182 	mov	w2, #0xc                   	// #12
    96021e8c:	91003004 	add	x4, x0, #0xc
    96021e90:	9ba20023 	umaddl	x3, w1, w2, x0
    96021e94:	51000421 	sub	w1, w1, #0x1
    96021e98:	9ba21021 	umaddl	x1, w1, w2, x4
	if (instance >= num_of_instances) {
    96021e9c:	52800002 	mov	w2, #0x0                   	// #0
	while (count++ < num_of_instances) {
    96021ea0:	eb03001f 	cmp	x0, x3
    96021ea4:	54000080 	b.eq	96021eb4 <tegrabl_uart_open+0x74>  // b.none
		if (huart->instance == instance) {
    96021ea8:	b9400404 	ldr	w4, [x0, #4]
    96021eac:	6b13009f 	cmp	w4, w19
    96021eb0:	54000a01 	b.ne	96021ff0 <tegrabl_uart_open+0x1b0>  // b.any
    96021eb4:	34000042 	cbz	w2, 96021ebc <tegrabl_uart_open+0x7c>
    96021eb8:	f90017a0 	str	x0, [x29, #40]
	if (instance == 2)
    96021ebc:	71000a7f 	cmp	w19, #0x2
    96021ec0:	f0000274 	adrp	x20, 96070000 <handler+0x5a8>
    96021ec4:	f94017a0 	ldr	x0, [x29, #40]
    96021ec8:	540009e1 	b.ne	96022004 <tegrabl_uart_open+0x1c4>  // b.any
		CUSTOM = 1;
    96021ecc:	52800021 	mov	w1, #0x1                   	// #1
    96021ed0:	3929e681 	strb	w1, [x20, #2681]
		huart->baud_rate = SECURE_BAUD_RATE;
    96021ed4:	52810001 	mov	w1, #0x800                 	// #2048
    96021ed8:	72a000e1 	movk	w1, #0x7, lsl #16
		huart->baud_rate = BAUD_RATE;
    96021edc:	b9000801 	str	w1, [x0, #8]
	error = tegrabl_car_rst_set(TEGRABL_MODULE_UART, (uint8_t)instance);
    96021ee0:	12001e73 	and	w19, w19, #0xff
    96021ee4:	2a1303e1 	mov	w1, w19
    96021ee8:	52800020 	mov	w0, #0x1                   	// #1
    96021eec:	97fff6e5 	bl	9601fa80 <tegrabl_car_rst_set>
	if (error != TEGRABL_NO_ERROR) {
    96021ef0:	35fffc00 	cbnz	w0, 96021e70 <tegrabl_uart_open+0x30>
	error = tegrabl_car_clk_enable(TEGRABL_MODULE_UART, (uint8_t)instance, 0);
    96021ef4:	d2800002 	mov	x2, #0x0                   	// #0
    96021ef8:	2a1303e1 	mov	w1, w19
    96021efc:	52800020 	mov	w0, #0x1                   	// #1
    96021f00:	97fff673 	bl	9601f8cc <tegrabl_car_clk_enable>
	if (error != TEGRABL_NO_ERROR) {
    96021f04:	35fffb60 	cbnz	w0, 96021e70 <tegrabl_uart_open+0x30>
	error = tegrabl_car_rst_clear(TEGRABL_MODULE_UART, (uint8_t)instance);
    96021f08:	2a1303e1 	mov	w1, w19
    96021f0c:	52800020 	mov	w0, #0x1                   	// #1
    96021f10:	97fff6e3 	bl	9601fa9c <tegrabl_car_rst_clear>
	if (error != TEGRABL_NO_ERROR) {
    96021f14:	35fffae0 	cbnz	w0, 96021e70 <tegrabl_uart_open+0x30>
	error = tegrabl_car_get_clk_rate(TEGRABL_MODULE_UART, (uint8_t)instance, &uart_freq);
    96021f18:	910083a2 	add	x2, x29, #0x20
    96021f1c:	2a1303e1 	mov	w1, w19
    96021f20:	52800020 	mov	w0, #0x1                   	// #1
    96021f24:	97fff618 	bl	9601f784 <tegrabl_car_get_clk_rate>
	if (error != TEGRABL_NO_ERROR) {
    96021f28:	35fffa40 	cbnz	w0, 96021e70 <tegrabl_uart_open+0x30>
	error = uart_set_baudrate(huart, uart_freq);
    96021f2c:	f94017a1 	ldr	x1, [x29, #40]
	uart_writel(huart, LCR, reg_value);
    96021f30:	52801003 	mov	w3, #0x80                  	// #128
	error = uart_set_baudrate(huart, uart_freq);
    96021f34:	b94023a0 	ldr	w0, [x29, #32]
	uart_writel(huart, LCR, reg_value);
    96021f38:	b9400022 	ldr	w2, [x1]
    96021f3c:	b9000c43 	str	w3, [x2, #12]
	reg_value = (pllp_freq * 1000U) / (huart->baud_rate * 16U);
    96021f40:	52807d02 	mov	w2, #0x3e8                 	// #1000
    96021f44:	1b027c00 	mul	w0, w0, w2
    96021f48:	b9400822 	ldr	w2, [x1, #8]
    96021f4c:	531c6c42 	lsl	w2, w2, #4
    96021f50:	1ac20800 	udiv	w0, w0, w2
	uart_writel(huart, THR_DLAB_0, reg_value & 0xFFU);
    96021f54:	b9400022 	ldr	w2, [x1]
    96021f58:	12001c03 	and	w3, w0, #0xff
    96021f5c:	b9000043 	str	w3, [x2]
	uart_writel(huart, IER_DLAB_0, (reg_value >> 8) & 0xFFU);
    96021f60:	d3483c00 	ubfx	x0, x0, #8, #8
    96021f64:	b9400022 	ldr	w2, [x1]
    96021f68:	b9000440 	str	w0, [x2, #4]
	uart_writel(huart, IIR_FCR, reg_value);
    96021f6c:	528000e2 	mov	w2, #0x7                   	// #7
	uart_writel(huart, LCR, reg_value);
    96021f70:	b9400020 	ldr	w0, [x1]
    96021f74:	b9000c1f 	str	wzr, [x0, #12]
	CUSTOM = 0;
    96021f78:	3929e69f 	strb	wzr, [x20, #2681]
	uart_writel(huart, IIR_FCR, reg_value);
    96021f7c:	b9400020 	ldr	w0, [x1]
    96021f80:	b9000802 	str	w2, [x0, #8]
	delay = ((1000000U / huart->baud_rate) + 1U) * 2U;
    96021f84:	52884800 	mov	w0, #0x4240                	// #16960
    96021f88:	72a001e0 	movk	w0, #0xf, lsl #16
    96021f8c:	b9400821 	ldr	w1, [x1, #8]
    96021f90:	1ac10800 	udiv	w0, w0, w1
    96021f94:	11000400 	add	w0, w0, #0x1
	tegrabl_udelay((uint64_t)delay);
    96021f98:	d37f5000 	ubfiz	x0, x0, #1, #21
    96021f9c:	97fff742 	bl	9601fca4 <tegrabl_udelay>
	uart_writel(huart, LCR, reg_value);
    96021fa0:	f94017a0 	ldr	x0, [x29, #40]
    96021fa4:	52800062 	mov	w2, #0x3                   	// #3
    96021fa8:	b9400001 	ldr	w1, [x0]
    96021fac:	b9000c22 	str	w2, [x1, #12]
	uart_writel(huart, MCR, 0);
    96021fb0:	b9400001 	ldr	w1, [x0]
    96021fb4:	b900103f 	str	wzr, [x1, #16]
	uart_writel(huart, MSR, 0);
    96021fb8:	b9400001 	ldr	w1, [x0]
    96021fbc:	b900183f 	str	wzr, [x1, #24]
	uart_writel(huart, SPR, 0);
    96021fc0:	b9400001 	ldr	w1, [x0]
    96021fc4:	b9001c3f 	str	wzr, [x1, #28]
	uart_writel(huart, IRDA_CSR, 0);
    96021fc8:	b9400001 	ldr	w1, [x0]
    96021fcc:	b900203f 	str	wzr, [x1, #32]
	uart_writel(huart, ASR, 0);
    96021fd0:	b9400001 	ldr	w1, [x0]
    96021fd4:	b9003c3f 	str	wzr, [x1, #60]
	reg = uart_readl(huart, LSR);
    96021fd8:	b9400000 	ldr	w0, [x0]
    96021fdc:	91005001 	add	x1, x0, #0x14
    96021fe0:	b9400022 	ldr	w2, [x1]
	if ((NV_DRF_VAL(UART, LSR, RDR, reg)) == 1U) {
    96021fe4:	3607f482 	tbz	w2, #0, 96021e74 <tegrabl_uart_open+0x34>
	reg = uart_readl(huart, THR_DLAB_0);
    96021fe8:	b9400002 	ldr	w2, [x0]
    96021fec:	17fffffd 	b	96021fe0 <tegrabl_uart_open+0x1a0>
    96021ff0:	91003000 	add	x0, x0, #0xc
    96021ff4:	52800022 	mov	w2, #0x1                   	// #1
		if (count >= num_of_instances) {
    96021ff8:	eb01001f 	cmp	x0, x1
    96021ffc:	54fff521 	b.ne	96021ea0 <tegrabl_uart_open+0x60>  // b.any
    96022000:	17ffff9c 	b	96021e70 <tegrabl_uart_open+0x30>
		huart->baud_rate = BAUD_RATE;
    96022004:	52984001 	mov	w1, #0xc200                	// #49664
		CUSTOM = 0;
    96022008:	3929e69f 	strb	wzr, [x20, #2681]
		huart->baud_rate = BAUD_RATE;
    9602200c:	72a00021 	movk	w1, #0x1, lsl #16
    96022010:	17ffffb3 	b	96021edc <tegrabl_uart_open+0x9c>

0000000096022014 <tegrabl_uart_tx>:

tegrabl_error_t tegrabl_uart_tx(struct tegrabl_uart *huart, const void *tx_buf,
	uint32_t len, uint32_t *bytes_transmitted, time_t tfr_timeout)
{
    96022014:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	uint32_t index = 0;
	time_t start_time = 0;
	time_t present_time = 0;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if ((huart == NULL) || (tx_buf == NULL) || (bytes_transmitted == NULL)) {
    96022018:	f100001f 	cmp	x0, #0x0
    9602201c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    96022020:	910003fd 	mov	x29, sp
    96022024:	a90153f3 	stp	x19, x20, [sp, #16]
    96022028:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602202c:	a90363f7 	stp	x23, x24, [sp, #48]
    96022030:	a9046bf9 	stp	x25, x26, [sp, #64]
    96022034:	f9002bfb 	str	x27, [sp, #80]
	if ((huart == NULL) || (tx_buf == NULL) || (bytes_transmitted == NULL)) {
    96022038:	54000740 	b.eq	96022120 <tegrabl_uart_tx+0x10c>  // b.none
    9602203c:	b4000723 	cbz	x3, 96022120 <tegrabl_uart_tx+0x10c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
	}

	*bytes_transmitted = 0;
    96022040:	b900007f 	str	wzr, [x3]
    96022044:	aa0403f8 	mov	x24, x4
    96022048:	aa0303f5 	mov	x21, x3
    9602204c:	2a0203f6 	mov	w22, w2
    96022050:	aa0103f7 	mov	x23, x1
    96022054:	aa0003f3 	mov	x19, x0
	start_time =  tegrabl_get_timestamp_us();
    96022058:	97fff709 	bl	9601fc7c <tegrabl_get_timestamp_us>
    9602205c:	aa0003f9 	mov	x25, x0

	while (index < len) {
    96022060:	d2800014 	mov	x20, #0x0                   	// #0
	uart_writel(huart, THR_DLAB_0, reg);
    96022064:	528001bb 	mov	w27, #0xd                   	// #13
    96022068:	2a1403fa 	mov	w26, w20
	while (index < len) {
    9602206c:	eb1402df 	cmp	x22, x20
    96022070:	54000281 	b.ne	960220c0 <tegrabl_uart_tx+0xac>  // b.any
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96022074:	52800014 	mov	w20, #0x0                   	// #0
	reg = uart_readl(huart, LSR);
    96022078:	b9400260 	ldr	w0, [x19]
    9602207c:	b9401400 	ldr	w0, [x0, #20]
	if (NV_DRF_VAL(UART, LSR, TMTY, reg) == 1U) {
    96022080:	373000e0 	tbnz	w0, #6, 9602209c <tegrabl_uart_tx+0x88>
		uart_tx_byte(huart, buf[index]);
		index++;
	}

	while (uart_trasmit_complete(huart) != true) {
		present_time = tegrabl_get_timestamp_us();
    96022084:	97fff6fe 	bl	9601fc7c <tegrabl_get_timestamp_us>
		if ((present_time - start_time) >= tfr_timeout) {
    96022088:	cb190000 	sub	x0, x0, x25
    9602208c:	eb18001f 	cmp	x0, x24
    96022090:	54ffff43 	b.cc	96022078 <tegrabl_uart_tx+0x64>  // b.lo, b.ul, b.last
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 1);
    96022094:	528020d4 	mov	w20, #0x106                 	// #262
    96022098:	72a40414 	movk	w20, #0x2020, lsl #16
			break;
		}
	}
	*bytes_transmitted = index;
    9602209c:	b90002ba 	str	w26, [x21]
	return error;
}
    960220a0:	2a1403e0 	mov	w0, w20
    960220a4:	f9402bfb 	ldr	x27, [sp, #80]
    960220a8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960220ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960220b0:	a94363f7 	ldp	x23, x24, [sp, #48]
    960220b4:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960220b8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960220bc:	d65f03c0 	ret
		present_time = tegrabl_get_timestamp_us();
    960220c0:	97fff6ef 	bl	9601fc7c <tegrabl_get_timestamp_us>
		if ((present_time - start_time) >= tfr_timeout) {
    960220c4:	cb190000 	sub	x0, x0, x25
    960220c8:	eb18001f 	cmp	x0, x24
    960220cc:	54000242 	b.cs	96022114 <tegrabl_uart_tx+0x100>  // b.hs, b.nlast
	reg = uart_readl(huart, LSR);
    960220d0:	b9400260 	ldr	w0, [x19]
    960220d4:	91005002 	add	x2, x0, #0x14
    960220d8:	b9400041 	ldr	w1, [x2]
	if ((NV_DRF_VAL(UART, LSR, THRE, reg)) == 1U) {
    960220dc:	362fffe1 	tbz	w1, #5, 960220d8 <tegrabl_uart_tx+0xc4>
		if (buf[index] == (uint8_t)'\n') {
    960220e0:	38746ae1 	ldrb	w1, [x23, x20]
    960220e4:	7100283f 	cmp	w1, #0xa
    960220e8:	540000c1 	b.ne	96022100 <tegrabl_uart_tx+0xec>  // b.any
	uart_writel(huart, THR_DLAB_0, reg);
    960220ec:	b900001b 	str	w27, [x0]
	reg = uart_readl(huart, LSR);
    960220f0:	b9400260 	ldr	w0, [x19]
    960220f4:	91005000 	add	x0, x0, #0x14
    960220f8:	b9400001 	ldr	w1, [x0]
	if ((NV_DRF_VAL(UART, LSR, THRE, reg)) == 1U) {
    960220fc:	362fffe1 	tbz	w1, #5, 960220f8 <tegrabl_uart_tx+0xe4>
	uart_writel(huart, THR_DLAB_0, reg);
    96022100:	b9400260 	ldr	w0, [x19]
    96022104:	38746ae1 	ldrb	w1, [x23, x20]
    96022108:	91000694 	add	x20, x20, #0x1
    9602210c:	b9000001 	str	w1, [x0]
    96022110:	17ffffd6 	b	96022068 <tegrabl_uart_tx+0x54>
			error = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 0);
    96022114:	528000d4 	mov	w20, #0x6                   	// #6
    96022118:	72a40414 	movk	w20, #0x2020, lsl #16
    9602211c:	17ffffd7 	b	96022078 <tegrabl_uart_tx+0x64>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    96022120:	52804054 	mov	w20, #0x202                 	// #514
    96022124:	72a40414 	movk	w20, #0x2020, lsl #16
    96022128:	17ffffde 	b	960220a0 <tegrabl_uart_tx+0x8c>

000000009602212c <tegrabl_uart_rx>:
	time_t start_time;
	time_t present_time;
	uint8_t *buf = rx_buf;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((huart == NULL) || (rx_buf == NULL) || (bytes_received == NULL)) {
    9602212c:	f100001f 	cmp	x0, #0x0
    96022130:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96022134:	54000520 	b.eq	960221d8 <tegrabl_uart_rx+0xac>  // b.none
    96022138:	b4000503 	cbz	x3, 960221d8 <tegrabl_uart_rx+0xac>
{
    9602213c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96022140:	910003fd 	mov	x29, sp
    96022144:	a90153f3 	stp	x19, x20, [sp, #16]
    96022148:	2a0203f4 	mov	w20, w2
    9602214c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96022150:	aa0303f5 	mov	x21, x3
    96022154:	a90363f7 	stp	x23, x24, [sp, #48]
    96022158:	aa0003f6 	mov	x22, x0
    9602215c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96022160:	aa0403f7 	mov	x23, x4
    96022164:	aa0103f8 	mov	x24, x1
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
	}

	start_time =  tegrabl_get_timestamp_us();
    96022168:	97fff6c5 	bl	9601fc7c <tegrabl_get_timestamp_us>
    9602216c:	aa0003fa 	mov	x26, x0

	while (index < len) {
    96022170:	d2800013 	mov	x19, #0x0                   	// #0
    96022174:	2a1303f9 	mov	w25, w19
    96022178:	eb13029f 	cmp	x20, x19
    9602217c:	54000121 	b.ne	960221a0 <tegrabl_uart_rx+0x74>  // b.any
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96022180:	52800000 	mov	w0, #0x0                   	// #0
	}

fail:
	*bytes_received = index;
	return err;
}
    96022184:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022188:	a94363f7 	ldp	x23, x24, [sp, #48]
	*bytes_received = index;
    9602218c:	b90002b9 	str	w25, [x21]
}
    96022190:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96022194:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96022198:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602219c:	d65f03c0 	ret
	reg = uart_readl(huart, LSR);
    960221a0:	b94002c2 	ldr	w2, [x22]
    960221a4:	b9401440 	ldr	w0, [x2, #20]
	if ((NV_DRF_VAL(UART, LSR, RDR, reg)) == 1U) {
    960221a8:	360000a0 	tbz	w0, #0, 960221bc <tegrabl_uart_rx+0x90>
	reg = uart_readl(huart, THR_DLAB_0);
    960221ac:	b9400040 	ldr	w0, [x2]
		buf[index++] = (uint8_t)reg;
    960221b0:	38336b00 	strb	w0, [x24, x19]
    960221b4:	91000673 	add	x19, x19, #0x1
    960221b8:	17ffffef 	b	96022174 <tegrabl_uart_rx+0x48>
			present_time = tegrabl_get_timestamp_us();
    960221bc:	97fff6b0 	bl	9601fc7c <tegrabl_get_timestamp_us>
			if ((present_time - start_time) >= tfr_timeout) {
    960221c0:	cb1a0000 	sub	x0, x0, x26
    960221c4:	eb17001f 	cmp	x0, x23
    960221c8:	54fffec3 	b.cc	960221a0 <tegrabl_uart_rx+0x74>  // b.lo, b.ul, b.last
				err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 2);
    960221cc:	528040c0 	mov	w0, #0x206                 	// #518
    960221d0:	72a40400 	movk	w0, #0x2020, lsl #16
    960221d4:	17ffffec 	b	96022184 <tegrabl_uart_rx+0x58>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    960221d8:	52806040 	mov	w0, #0x302                 	// #770
    960221dc:	72a40400 	movk	w0, #0x2020, lsl #16
}
    960221e0:	d65f03c0 	ret

00000000960221e4 <tegrabl_uart_get_address>:

tegrabl_error_t tegrabl_uart_get_address(uint32_t instance, uint64_t *addr)
{
    960221e4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960221e8:	910003fd 	mov	x29, sp
    960221ec:	a90153f3 	stp	x19, x20, [sp, #16]
    960221f0:	2a0003f3 	mov	w19, w0
    960221f4:	aa0103f4 	mov	x20, x1
	struct tegrabl_uart *huart;
	uint32_t num_of_instances;
	uint32_t count = 0;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	tegrabl_uart_soc_get_info(&huart, &num_of_instances);
    960221f8:	9100a3a0 	add	x0, x29, #0x28
    960221fc:	910093a1 	add	x1, x29, #0x24
    96022200:	94000023 	bl	9602228c <tegrabl_uart_soc_get_info>

	if ((instance >= num_of_instances) || (addr == NULL)) {
    96022204:	b94027a1 	ldr	w1, [x29, #36]
    96022208:	6b13003f 	cmp	w1, w19
    9602220c:	540002c9 	b.ls	96022264 <tegrabl_uart_get_address+0x80>  // b.plast
    96022210:	b40002b4 	cbz	x20, 96022264 <tegrabl_uart_get_address+0x80>
    96022214:	f94017a0 	ldr	x0, [x29, #40]
    96022218:	52800182 	mov	w2, #0xc                   	// #12
    9602221c:	9ba20023 	umaddl	x3, w1, w2, x0
    96022220:	51000421 	sub	w1, w1, #0x1
    96022224:	9ba20021 	umaddl	x1, w1, w2, x0
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
		goto fail;
	}

	while (count++ < num_of_instances) {
    96022228:	eb00007f 	cmp	x3, x0
    9602222c:	540000c0 	b.eq	96022244 <tegrabl_uart_get_address+0x60>  // b.none
		if (huart->instance == instance) {
    96022230:	b9400402 	ldr	w2, [x0, #4]
    96022234:	6b13005f 	cmp	w2, w19
    96022238:	540000e1 	b.ne	96022254 <tegrabl_uart_get_address+0x70>  // b.any
			*addr = huart->base_addr;
    9602223c:	b9400000 	ldr	w0, [x0]
    96022240:	f9000280 	str	x0, [x20]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96022244:	52800000 	mov	w0, #0x0                   	// #0
		huart++;
	}

fail:
	return err;
}
    96022248:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602224c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96022250:	d65f03c0 	ret
		if (count >= num_of_instances) {
    96022254:	eb01001f 	cmp	x0, x1
    96022258:	540000c0 	b.eq	96022270 <tegrabl_uart_get_address+0x8c>  // b.none
		huart++;
    9602225c:	91003000 	add	x0, x0, #0xc
    96022260:	17fffff2 	b	96022228 <tegrabl_uart_get_address+0x44>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    96022264:	52808040 	mov	w0, #0x402                 	// #1026
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    96022268:	72a40400 	movk	w0, #0x2020, lsl #16
	return err;
    9602226c:	17fffff7 	b	96022248 <tegrabl_uart_get_address+0x64>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    96022270:	5280a040 	mov	w0, #0x502                 	// #1282
    96022274:	17fffffd 	b	96022268 <tegrabl_uart_get_address+0x84>

0000000096022278 <tegrabl_uart_close>:
tegrabl_error_t tegrabl_uart_close(struct tegrabl_uart *huart)
{
	if (huart == NULL) {
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
	}
	return TEGRABL_NO_ERROR;
    96022278:	f100001f 	cmp	x0, #0x0
}
    9602227c:	5280c040 	mov	w0, #0x602                 	// #1538
    96022280:	72a40400 	movk	w0, #0x2020, lsl #16
    96022284:	1a9f0000 	csel	w0, w0, wzr, eq  // eq = none
    96022288:	d65f03c0 	ret

000000009602228c <tegrabl_uart_soc_get_info>:
};

void tegrabl_uart_soc_get_info(struct tegrabl_uart **huart,
	uint32_t *num_of_instances)
{
	*huart = &uart_list[0];
    9602228c:	90000142 	adrp	x2, 9604a000 <s_qspi_info+0x20>
    96022290:	912e6042 	add	x2, x2, #0xb98
    96022294:	f9000002 	str	x2, [x0]
	*num_of_instances = ARRAY_SIZE(uart_list);
    96022298:	528000e0 	mov	w0, #0x7                   	// #7
    9602229c:	b9000020 	str	w0, [x1]

	return;
}
    960222a0:	d65f03c0 	ret

00000000960222a4 <tegrabl_uart_console_putchar>:
	return tegrabl_uart_open(instance);
}

tegrabl_error_t tegrabl_uart_console_putchar(struct tegrabl_console *hcnsl,
	char ch)
{
    960222a4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960222a8:	910003fd 	mov	x29, sp
    960222ac:	39007fa1 	strb	w1, [x29, #31]
	uint32_t bytes_transmitted;

	if (hcnsl == NULL) {
    960222b0:	b4000120 	cbz	x0, 960222d4 <tegrabl_uart_console_putchar+0x30>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
	}

	/* bytes transmitted dummy here */
	return tegrabl_uart_tx(hcnsl->dev, &ch, 1, &bytes_transmitted, 0XFFFFFFFFUL);
    960222b4:	f9400400 	ldr	x0, [x0, #8]
    960222b8:	b2407fe4 	mov	x4, #0xffffffff            	// #4294967295
    960222bc:	9100b3a3 	add	x3, x29, #0x2c
    960222c0:	52800022 	mov	w2, #0x1                   	// #1
    960222c4:	91007fa1 	add	x1, x29, #0x1f
    960222c8:	97ffff53 	bl	96022014 <tegrabl_uart_tx>
}
    960222cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960222d0:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    960222d4:	52806040 	mov	w0, #0x302                 	// #770
    960222d8:	72a40400 	movk	w0, #0x2020, lsl #16
    960222dc:	17fffffc 	b	960222cc <tegrabl_uart_console_putchar+0x28>

00000000960222e0 <tegrabl_uart_console_getchar>:
tegrabl_error_t tegrabl_uart_console_getchar(struct tegrabl_console *hcnsl,
	char *ch, time_t timeout)
{
	uint32_t bytes_received;

	if (hcnsl == NULL) {
    960222e0:	b4000140 	cbz	x0, 96022308 <tegrabl_uart_console_getchar+0x28>
{
    960222e4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960222e8:	aa0203e4 	mov	x4, x2
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
	}

	/* bytes received dummy here */
	return tegrabl_uart_rx(hcnsl->dev, ch, 1, &bytes_received, timeout);
    960222ec:	52800022 	mov	w2, #0x1                   	// #1
{
    960222f0:	910003fd 	mov	x29, sp
	return tegrabl_uart_rx(hcnsl->dev, ch, 1, &bytes_received, timeout);
    960222f4:	f9400400 	ldr	x0, [x0, #8]
    960222f8:	910073a3 	add	x3, x29, #0x1c
    960222fc:	97ffff8c 	bl	9602212c <tegrabl_uart_rx>
}
    96022300:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96022304:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    96022308:	52808040 	mov	w0, #0x402                 	// #1026
    9602230c:	72a40400 	movk	w0, #0x2020, lsl #16
}
    96022310:	d65f03c0 	ret

0000000096022314 <tegrabl_uart_console_puts>:
tegrabl_error_t tegrabl_uart_console_puts(struct tegrabl_console *hcnsl,
	char *str)
{
	uint32_t bytes_transmitted;

	if (hcnsl == NULL) {
    96022314:	b4000220 	cbz	x0, 96022358 <tegrabl_uart_console_puts+0x44>
{
    96022318:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602231c:	910003fd 	mov	x29, sp
    96022320:	a90153f3 	stp	x19, x20, [sp, #16]
    96022324:	aa0103f3 	mov	x19, x1
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
	}

	/* bytes transmitted dummy here */
	return tegrabl_uart_tx(hcnsl->dev, str, strlen(str), &bytes_transmitted, 0XFFFFFFFFUL);
    96022328:	f9400414 	ldr	x20, [x0, #8]
    9602232c:	aa0103e0 	mov	x0, x1
    96022330:	94001ff7 	bl	9602a30c <strlen>
    96022334:	2a0003e2 	mov	w2, w0
    96022338:	9100b3a3 	add	x3, x29, #0x2c
    9602233c:	aa1303e1 	mov	x1, x19
    96022340:	b2407fe4 	mov	x4, #0xffffffff            	// #4294967295
    96022344:	aa1403e0 	mov	x0, x20
    96022348:	97ffff33 	bl	96022014 <tegrabl_uart_tx>
}
    9602234c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022350:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96022354:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    96022358:	5280a040 	mov	w0, #0x502                 	// #1282
    9602235c:	72a40400 	movk	w0, #0x2020, lsl #16
}
    96022360:	d65f03c0 	ret

0000000096022364 <tegrabl_uart_console_close>:

tegrabl_error_t tegrabl_uart_console_close(struct tegrabl_console *hcnsl)
{
	if (hcnsl == NULL) {
    96022364:	b4000060 	cbz	x0, 96022370 <tegrabl_uart_console_close+0xc>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
	}
	return tegrabl_uart_close(hcnsl->dev);
    96022368:	f9400400 	ldr	x0, [x0, #8]
    9602236c:	17ffffc3 	b	96022278 <tegrabl_uart_close>
}
    96022370:	5280c040 	mov	w0, #0x602                 	// #1538
    96022374:	72a40400 	movk	w0, #0x2020, lsl #16
    96022378:	d65f03c0 	ret

000000009602237c <tegrabl_wdt_disable>:
void tegrabl_wdt_disable(tegrabl_wdt_instance_t instance)
{
	uint32_t val;

	/* set StartCounter to 0 */
	val = NV_TKE_READ(instance, wdtcmdr[instance]);
    9602237c:	2a0003e0 	mov	w0, w0
    96022380:	90000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96022384:	913a5021 	add	x1, x1, #0xe94
    96022388:	b8607822 	ldr	w2, [x1, x0, lsl #2]
    9602238c:	90000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96022390:	913ab021 	add	x1, x1, #0xeac
    96022394:	b8607821 	ldr	w1, [x1, x0, lsl #2]
    96022398:	0b010041 	add	w1, w2, w1
    9602239c:	b9400023 	ldr	w3, [x1]
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, WDT0_WDTCMDR, StartCounter, 0, val);
    960223a0:	121f7863 	and	w3, w3, #0xfffffffe
	NV_TKE_WRITE(instance, wdtcmdr[instance], val);
    960223a4:	b9000023 	str	w3, [x1]

	/* program unlock pattern */
	NV_TKE_WRITE(instance, wdtur[instance], WDTUR_UNLOCK_PATTERN);
    960223a8:	90000103 	adrp	x3, 96042000 <__func__.4833+0x5>
    960223ac:	913ad063 	add	x3, x3, #0xeb4
    960223b0:	b8607860 	ldr	w0, [x3, x0, lsl #2]
    960223b4:	0b000042 	add	w2, w2, w0
    960223b8:	52988b40 	mov	w0, #0xc45a                	// #50266
    960223bc:	b9000040 	str	w0, [x2]

	/* Set Disable Counter*/
	val = NV_TKE_READ(instance, wdtcmdr[instance]);
    960223c0:	b9400020 	ldr	w0, [x1]
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, WDT0_WDTCMDR, DisableCounter, 1, val);
    960223c4:	321f0000 	orr	w0, w0, #0x2
	NV_TKE_WRITE(instance, wdtcmdr[instance], val);
    960223c8:	b9000020 	str	w0, [x1]
}
    960223cc:	d65f03c0 	ret

00000000960223d0 <tegrabl_wdt_enable>:

tegrabl_error_t tegrabl_wdt_enable(tegrabl_wdt_instance_t instance,
								   uint8_t expiry, uint8_t period,
								   tegrabl_wdt_clk_src_t clk_src)
{
    960223d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960223d4:	910003fd 	mov	x29, sp
    960223d8:	a90153f3 	stp	x19, x20, [sp, #16]
    960223dc:	2a0003f3 	mov	w19, w0
    960223e0:	2a0303f4 	mov	w20, w3
	if (tegrabl_is_wdt_enable()) {
    960223e4:	97fffc42 	bl	960214ec <tegrabl_is_wdt_enable>
    960223e8:	72001c1f 	tst	w0, #0xff
    960223ec:	54000680 	b.eq	960224bc <tegrabl_wdt_enable+0xec>  // b.none
	uint32_t wdt_to_tmr_src[TEGRABL_WDT_SRC_MAX] = {
    960223f0:	d2c00020 	mov	x0, #0x100000000           	// #4294967296
    960223f4:	f90013a0 	str	x0, [x29, #32]
    960223f8:	d2800040 	mov	x0, #0x2                   	// #2
    960223fc:	f2c00060 	movk	x0, #0x3, lsl #32
    96022400:	f90017a0 	str	x0, [x29, #40]
	if (clk_src == TEGRABL_WDT_SRC_USECCNT) {
    96022404:	34000154 	cbz	w20, 9602242c <tegrabl_wdt_enable+0x5c>
	else if (clk_src == TEGRABL_WDT_SRC_TSCCNT_29_0) {
    96022408:	71000a9f 	cmp	w20, #0x2
    9602240c:	540005c0 	b.eq	960224c4 <tegrabl_wdt_enable+0xf4>  // b.none
		pr_error("Invalid clock source");
    96022410:	90000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    96022414:	9139e400 	add	x0, x0, #0xe79
    96022418:	94000096 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERR_NOT_SUPPORTED;
    9602241c:	52800020 	mov	w0, #0x1                   	// #1
		return tegrabl_wdt_configure(instance, expiry, period, clk_src);
	} else {
		pr_debug("WDT not enabled\n");
		return TEGRABL_NO_ERROR;
	}
}
    96022420:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022424:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96022428:	d65f03c0 	ret
		cycles_per_sec = USEC_COUNTER_CYCLES_PER_SECOND;
    9602242c:	52884806 	mov	w6, #0x4240                	// #16960
    96022430:	72a001e6 	movk	w6, #0xf, lsl #16
	val = NV_TKE_READ(instance, tmrcssr[instance]);
    96022434:	2a1303e0 	mov	w0, w19
    96022438:	90000102 	adrp	x2, 96042000 <__func__.4833+0x5>
    9602243c:	90000103 	adrp	x3, 96042000 <__func__.4833+0x5>
    96022440:	913a5042 	add	x2, x2, #0xe94
    96022444:	913a9063 	add	x3, x3, #0xea4
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, TIMER_TMR0_TMRCSSR, SRC_ID,
    96022448:	910083a1 	add	x1, x29, #0x20
	val = NV_TKE_READ(instance, tmrcssr[instance]);
    9602244c:	b8607842 	ldr	w2, [x2, x0, lsl #2]
    96022450:	b8607864 	ldr	w4, [x3, x0, lsl #2]
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, TIMER_TMR0_TMRCSSR, SRC_ID,
    96022454:	b8745823 	ldr	w3, [x1, w20, uxtw #2]
	val = NV_TKE_READ(instance, tmrcssr[instance]);
    96022458:	0b040044 	add	w4, w2, w4
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, TIMER_TMR0_TMRCSSR, SRC_ID,
    9602245c:	12000463 	and	w3, w3, #0x3
	val = NV_TKE_READ(instance, tmrcssr[instance]);
    96022460:	b9400085 	ldr	w5, [x4]
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, TIMER_TMR0_TMRCSSR, SRC_ID,
    96022464:	121e74a5 	and	w5, w5, #0xfffffffc
    96022468:	2a050063 	orr	w3, w3, w5
	NV_TKE_WRITE(instance, tmrcssr[instance], val);
    9602246c:	b9000083 	str	w3, [x4]
	val = NV_TKE_READ(instance, tmrcr[instance]);
    96022470:	90000103 	adrp	x3, 96042000 <__func__.4833+0x5>
    96022474:	913a7063 	add	x3, x3, #0xe9c
    96022478:	b8607863 	ldr	w3, [x3, x0, lsl #2]
    9602247c:	0b030043 	add	w3, w2, w3
    96022480:	b9400061 	ldr	w1, [x3]
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, TIMER_TMR0_TMRCR, PTV,
    96022484:	12030821 	and	w1, w1, #0xe0000000
    96022488:	32020021 	orr	w1, w1, #0x40000000
    9602248c:	2a060021 	orr	w1, w1, w6
	NV_TKE_WRITE(instance, tmrcr[instance], val);
    96022490:	b9000061 	str	w1, [x3]
	val = NV_TKE_READ(instance, tmrcr[instance]);
    96022494:	b9400061 	ldr	w1, [x3]
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, TIMER_TMR0_TMRCR, EN, 1, val);
    96022498:	32010021 	orr	w1, w1, #0x80000000
	NV_TKE_WRITE(instance, tmrcr[instance], val);
    9602249c:	b9000061 	str	w1, [x3]
	val = NV_TKE_READ(instance, wdtcmdr[instance]);
    960224a0:	90000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    960224a4:	913ab021 	add	x1, x1, #0xeac
    960224a8:	b8607820 	ldr	w0, [x1, x0, lsl #2]
    960224ac:	0b000042 	add	w2, w2, w0
    960224b0:	b9400040 	ldr	w0, [x2]
	val = NV_FLD_SET_DRF_NUM(TKE_BPMP, WDT0_WDTCMDR, StartCounter, 1, val);
    960224b4:	32000000 	orr	w0, w0, #0x1
	NV_TKE_WRITE(instance, wdtcmdr[instance], val);
    960224b8:	b9000040 	str	w0, [x2]
		return TEGRABL_NO_ERROR;
    960224bc:	52800000 	mov	w0, #0x0                   	// #0
    960224c0:	17ffffd8 	b	96022420 <tegrabl_wdt_enable+0x50>
		cycles_per_sec = TSC_COUNTER_CYCLES_PER_SECOND;
    960224c4:	529aca06 	mov	w6, #0xd650                	// #54864
    960224c8:	72a03b86 	movk	w6, #0x1dc, lsl #16
    960224cc:	17ffffda 	b	96022434 <tegrabl_wdt_enable+0x64>

00000000960224d0 <tegrabl_console_register>:

static struct tegrabl_console s_console;

tegrabl_error_t tegrabl_console_register(
	tegrabl_console_interface_t interface, uint32_t instance, void *data)
{
    960224d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	struct tegrabl_uart *huart;
#endif
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	hconsole = &s_console;
	hconsole->interface = interface;
    960224d4:	d0000262 	adrp	x2, 96070000 <handler+0x5a8>
{
    960224d8:	910003fd 	mov	x29, sp
    960224dc:	f9000bf3 	str	x19, [sp, #16]
	hconsole->interface = interface;
    960224e0:	912a0053 	add	x19, x2, #0xa80
    960224e4:	b90a8040 	str	w0, [x2, #2688]
	hconsole->instance = instance;
    960224e8:	b9000661 	str	w1, [x19, #4]

	TEGRABL_UNUSED(data);

	switch (hconsole->interface) {
    960224ec:	350002e0 	cbnz	w0, 96022548 <tegrabl_console_register+0x78>
    960224f0:	2a0103e0 	mov	w0, w1
#if defined(CONFIG_ENABLE_UART)
	case TEGRABL_CONSOLE_UART:
		hconsole->putchar = tegrabl_uart_console_putchar;
    960224f4:	90000001 	adrp	x1, 96022000 <tegrabl_uart_open+0x1c0>
    960224f8:	910a9021 	add	x1, x1, #0x2a4
    960224fc:	f9001261 	str	x1, [x19, #32]
		hconsole->getchar = tegrabl_uart_console_getchar;
    96022500:	90000001 	adrp	x1, 96022000 <tegrabl_uart_open+0x1c0>
    96022504:	910b8021 	add	x1, x1, #0x2e0
    96022508:	f9000e61 	str	x1, [x19, #24]
		hconsole->puts = tegrabl_uart_console_puts;
    9602250c:	90000001 	adrp	x1, 96022000 <tegrabl_uart_open+0x1c0>
    96022510:	910c5021 	add	x1, x1, #0x314
    96022514:	f9001661 	str	x1, [x19, #40]
		hconsole->close = tegrabl_uart_console_close;
    96022518:	90000001 	adrp	x1, 96022000 <tegrabl_uart_open+0x1c0>
    9602251c:	910d9021 	add	x1, x1, #0x364
    96022520:	f9001a61 	str	x1, [x19, #48]
		huart = tegrabl_uart_open(hconsole->instance);
    96022524:	97fffe47 	bl	96021e40 <tegrabl_uart_open>
		if (huart != NULL) {
    96022528:	b4000180 	cbz	x0, 96022558 <tegrabl_console_register+0x88>
			hconsole->dev = huart;
    9602252c:	f9000660 	str	x0, [x19, #8]
			hconsole->is_registered = true;
    96022530:	52800020 	mov	w0, #0x1                   	// #1
    96022534:	39004260 	strb	w0, [x19, #16]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96022538:	52800000 	mov	w0, #0x0                   	// #0
		hconsole->is_registered = false;
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
		break;
	}
	return error;
}
    9602253c:	f9400bf3 	ldr	x19, [sp, #16]
    96022540:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96022544:	d65f03c0 	ret
		hconsole->is_registered = false;
    96022548:	3900427f 	strb	wzr, [x19, #16]
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9602254c:	52800020 	mov	w0, #0x1                   	// #1
			error = TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
    96022550:	72a42420 	movk	w0, #0x2121, lsl #16
	return error;
    96022554:	17fffffa 	b	9602253c <tegrabl_console_register+0x6c>
			error = TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
    96022558:	52800240 	mov	w0, #0x12                  	// #18
    9602255c:	17fffffd 	b	96022550 <tegrabl_console_register+0x80>

0000000096022560 <tegrabl_console_open>:
struct tegrabl_console *tegrabl_console_open(void)
{
	struct tegrabl_console *hconsole;

	hconsole = &s_console;
	if (hconsole->is_registered == true) {
    96022560:	d0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96022564:	912a0000 	add	x0, x0, #0xa80
    96022568:	39404001 	ldrb	w1, [x0, #16]
		return hconsole;
	} else {
		return NULL;
    9602256c:	7100003f 	cmp	w1, #0x0
	}
}
    96022570:	9a9f1000 	csel	x0, x0, xzr, ne  // ne = any
    96022574:	d65f03c0 	ret

0000000096022578 <tegrabl_console_putchar>:

tegrabl_error_t tegrabl_console_putchar(struct tegrabl_console *hconsole,
	char ch)
{
    96022578:	12001c21 	and	w1, w1, #0xff
	tegrabl_error_t error;

	if (hconsole == NULL) {
    9602257c:	b4000060 	cbz	x0, 96022588 <tegrabl_console_putchar+0x10>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	error = hconsole->putchar(hconsole, ch);
    96022580:	f9401002 	ldr	x2, [x0, #32]
    96022584:	d61f0040 	br	x2
	if (error != TEGRABL_NO_ERROR) {
		tegrabl_err_set_highest_module(error, MODULE);
	}
	return error;
}
    96022588:	52800040 	mov	w0, #0x2                   	// #2
    9602258c:	72a42420 	movk	w0, #0x2121, lsl #16
    96022590:	d65f03c0 	ret

0000000096022594 <tegrabl_console_getchar>:
tegrabl_error_t tegrabl_console_getchar(struct tegrabl_console *hconsole,
	char *ch, time_t timeout)
{
	tegrabl_error_t error;

	if (hconsole == NULL) {
    96022594:	b4000060 	cbz	x0, 960225a0 <tegrabl_console_getchar+0xc>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
	}

	error = hconsole->getchar(hconsole, ch, timeout);
    96022598:	f9400c03 	ldr	x3, [x0, #24]
    9602259c:	d61f0060 	br	x3
	if (error != TEGRABL_NO_ERROR) {
		tegrabl_err_set_highest_module(error, MODULE);
	}
	return error;
}
    960225a0:	52802040 	mov	w0, #0x102                 	// #258
    960225a4:	72a42420 	movk	w0, #0x2121, lsl #16
    960225a8:	d65f03c0 	ret

00000000960225ac <tegrabl_console_puts>:
tegrabl_error_t tegrabl_console_puts(struct tegrabl_console *hconsole,
	char *str)
{
	tegrabl_error_t error;

	if (hconsole == NULL) {
    960225ac:	b4000060 	cbz	x0, 960225b8 <tegrabl_console_puts+0xc>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
	}

	error = hconsole->puts(hconsole, str);
    960225b0:	f9401402 	ldr	x2, [x0, #40]
    960225b4:	d61f0040 	br	x2
	if (error != TEGRABL_NO_ERROR) {
		tegrabl_err_set_highest_module(error, MODULE);
	}
	return error;
}
    960225b8:	52804040 	mov	w0, #0x202                 	// #514
    960225bc:	72a42420 	movk	w0, #0x2121, lsl #16
    960225c0:	d65f03c0 	ret

00000000960225c4 <tegrabl_snprintf>:

	return curr_timestamp_setting;
}

int tegrabl_snprintf(char *str, size_t size, const char *format, ...)
{
    960225c4:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    960225c8:	910003fd 	mov	x29, sp
    960225cc:	a90d93a3 	stp	x3, x4, [x29, #216]
	int n = 0;
	va_list ap;

	va_start(ap, format);
    960225d0:	910403a3 	add	x3, x29, #0x100
    960225d4:	a9030fa3 	stp	x3, x3, [x29, #48]
    960225d8:	910343a3 	add	x3, x29, #0xd0
    960225dc:	f90023a3 	str	x3, [x29, #64]
    960225e0:	128004e3 	mov	w3, #0xffffffd8            	// #-40
    960225e4:	b9004ba3 	str	w3, [x29, #72]
    960225e8:	12800fe3 	mov	w3, #0xffffff80            	// #-128
    960225ec:	b9004fa3 	str	w3, [x29, #76]
	n = tegrabl_vsnprintf(str, size, format, ap);
    960225f0:	910043a3 	add	x3, x29, #0x10
{
    960225f4:	a90e9ba5 	stp	x5, x6, [x29, #232]
	n = tegrabl_vsnprintf(str, size, format, ap);
    960225f8:	a94317a4 	ldp	x4, x5, [x29, #48]
    960225fc:	a90117a4 	stp	x4, x5, [x29, #16]
    96022600:	a94417a4 	ldp	x4, x5, [x29, #64]
    96022604:	a90217a4 	stp	x4, x5, [x29, #32]
{
    96022608:	3d8017a0 	str	q0, [x29, #80]
    9602260c:	3d801ba1 	str	q1, [x29, #96]
    96022610:	3d801fa2 	str	q2, [x29, #112]
    96022614:	3d8023a3 	str	q3, [x29, #128]
    96022618:	3d8027a4 	str	q4, [x29, #144]
    9602261c:	3d802ba5 	str	q5, [x29, #160]
    96022620:	3d802fa6 	str	q6, [x29, #176]
    96022624:	3d8033a7 	str	q7, [x29, #192]
    96022628:	f9007fa7 	str	x7, [x29, #248]
	n = tegrabl_vsnprintf(str, size, format, ap);
    9602262c:	94001f95 	bl	9602a480 <tegrabl_vsnprintf>
	va_end(ap);
	return n;
}
    96022630:	a8d07bfd 	ldp	x29, x30, [sp], #256
    96022634:	d65f03c0 	ret

0000000096022638 <tegrabl_debug_init>:
	}
	return ret;
}

tegrabl_error_t tegrabl_debug_init(void)
{
    96022638:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9602263c:	910003fd 	mov	x29, sp
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	hdev = tegrabl_console_open();
    96022640:	97ffffc8 	bl	96022560 <tegrabl_console_open>
	if (hdev == NULL) {
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96022644:	f100001f 	cmp	x0, #0x0
	hdev = tegrabl_console_open();
    96022648:	d0000261 	adrp	x1, 96070000 <handler+0x5a8>
	}

	return error;
}
    9602264c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	hdev = tegrabl_console_open();
    96022650:	f9055c20 	str	x0, [x1, #2744]
}
    96022654:	52800020 	mov	w0, #0x1                   	// #1
    96022658:	72a44440 	movk	w0, #0x2222, lsl #16
    9602265c:	1a9f0000 	csel	w0, w0, wzr, eq  // eq = none
    96022660:	d65f03c0 	ret

0000000096022664 <tegrabl_debug_deinit>:

void tegrabl_debug_deinit(void)
{
	hdev = NULL;
    96022664:	d0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96022668:	f9055c1f 	str	xzr, [x0, #2744]
}
    9602266c:	d65f03c0 	ret

0000000096022670 <tegrabl_printf>:

int tegrabl_printf(const char *format, ...)
{
    96022670:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    96022674:	910003fd 	mov	x29, sp
    96022678:	a90d8ba1 	stp	x1, x2, [x29, #216]
	va_list ap;
	int ret = 0;

	if (hdev == NULL) {
    9602267c:	d0000261 	adrp	x1, 96070000 <handler+0x5a8>
{
    96022680:	a90e93a3 	stp	x3, x4, [x29, #232]
	if (hdev == NULL) {
    96022684:	f9455c21 	ldr	x1, [x1, #2744]
{
    96022688:	a90f9ba5 	stp	x5, x6, [x29, #248]
    9602268c:	f90087a7 	str	x7, [x29, #264]
    96022690:	3d8017a0 	str	q0, [x29, #80]
    96022694:	3d801ba1 	str	q1, [x29, #96]
    96022698:	3d801fa2 	str	q2, [x29, #112]
    9602269c:	3d8023a3 	str	q3, [x29, #128]
    960226a0:	3d8027a4 	str	q4, [x29, #144]
    960226a4:	3d802ba5 	str	q5, [x29, #160]
    960226a8:	3d802fa6 	str	q6, [x29, #176]
    960226ac:	3d8033a7 	str	q7, [x29, #192]
	if (hdev == NULL) {
    960226b0:	b4000221 	cbz	x1, 960226f4 <tegrabl_printf+0x84>
		return 0;
	}

	va_start(ap, format);
    960226b4:	910443a1 	add	x1, x29, #0x110
    960226b8:	a90307a1 	stp	x1, x1, [x29, #48]
    960226bc:	910343a1 	add	x1, x29, #0xd0
    960226c0:	f90023a1 	str	x1, [x29, #64]
    960226c4:	128006e1 	mov	w1, #0xffffffc8            	// #-56
    960226c8:	b9004ba1 	str	w1, [x29, #72]
    960226cc:	12800fe1 	mov	w1, #0xffffff80            	// #-128
    960226d0:	b9004fa1 	str	w1, [x29, #76]
	ret = tegrabl_vprintf(format, ap);
    960226d4:	a9430fa2 	ldp	x2, x3, [x29, #48]
    960226d8:	a9010fa2 	stp	x2, x3, [x29, #16]
    960226dc:	a9440fa2 	ldp	x2, x3, [x29, #64]
    960226e0:	a9020fa2 	stp	x2, x3, [x29, #32]
    960226e4:	910043a1 	add	x1, x29, #0x10
    960226e8:	94000005 	bl	960226fc <tegrabl_vprintf>
	va_end(ap);

	return ret;
}
    960226ec:	a8d17bfd 	ldp	x29, x30, [sp], #272
    960226f0:	d65f03c0 	ret
		return 0;
    960226f4:	52800000 	mov	w0, #0x0                   	// #0
    960226f8:	17fffffd 	b	960226ec <tegrabl_printf+0x7c>

00000000960226fc <tegrabl_vprintf>:
{
    960226fc:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96022700:	910003fd 	mov	x29, sp
    96022704:	f9001bf7 	str	x23, [sp, #48]
    96022708:	aa0003f7 	mov	x23, x0
	if (enable_timestamp) {
    9602270c:	90000140 	adrp	x0, 9604a000 <s_qspi_info+0x20>
{
    96022710:	a90153f3 	stp	x19, x20, [sp, #16]
    96022714:	a9025bf5 	stp	x21, x22, [sp, #32]
    96022718:	d0000274 	adrp	x20, 96070000 <handler+0x5a8>
	if (enable_timestamp) {
    9602271c:	396fb000 	ldrb	w0, [x0, #3052]
{
    96022720:	aa0103f6 	mov	x22, x1
	if (enable_timestamp) {
    96022724:	340005e0 	cbz	w0, 960227e0 <tegrabl_vprintf+0xe4>
		msec = tegrabl_get_timestamp_ms();
    96022728:	97fff559 	bl	9601fc8c <tegrabl_get_timestamp_ms>
		ret += tegrabl_snprintf(msg, size, "[%07d] ", (uint32_t)msec);
    9602272c:	912b0293 	add	x19, x20, #0xac0
    96022730:	2a0003e3 	mov	w3, w0
    96022734:	d2800161 	mov	x1, #0xb                   	// #11
    96022738:	aa1303e0 	mov	x0, x19
    9602273c:	90000102 	adrp	x2, 96042000 <__func__.4833+0x5>
    96022740:	913af042 	add	x2, x2, #0xebc
    96022744:	97ffffa0 	bl	960225c4 <tegrabl_snprintf>
    96022748:	91002a61 	add	x1, x19, #0xa
    9602274c:	2a0003f5 	mov	w21, w0
    96022750:	91001273 	add	x19, x19, #0x4
			msg[i] = msg[i - 1UL];
    96022754:	39400020 	ldrb	w0, [x1]
    96022758:	d1000421 	sub	x1, x1, #0x1
    9602275c:	39000820 	strb	w0, [x1, #2]
		for (i = size; i > 5UL; i--) {
    96022760:	eb13003f 	cmp	x1, x19
    96022764:	54ffff81 	b.ne	96022754 <tegrabl_vprintf+0x58>  // b.any
		msg[i] = '.';
    96022768:	912b0280 	add	x0, x20, #0xac0
    9602276c:	528005c1 	mov	w1, #0x2e                  	// #46
    96022770:	39001401 	strb	w1, [x0, #5]
		size = 11;
    96022774:	d2800160 	mov	x0, #0xb                   	// #11
	ret += tegrabl_vsnprintf(msg + size, sizeof(msg) - size, format, ap);
    96022778:	a9400ec2 	ldp	x2, x3, [x22]
    9602277c:	a9040fa2 	stp	x2, x3, [x29, #64]
    96022780:	912b0294 	add	x20, x20, #0xac0
    96022784:	d2810001 	mov	x1, #0x800                 	// #2048
    96022788:	a9410ec2 	ldp	x2, x3, [x22, #16]
    9602278c:	a9050fa2 	stp	x2, x3, [x29, #80]
    96022790:	cb000021 	sub	x1, x1, x0
    96022794:	910103a3 	add	x3, x29, #0x40
    96022798:	aa1703e2 	mov	x2, x23
    9602279c:	8b000280 	add	x0, x20, x0
    960227a0:	94001f38 	bl	9602a480 <tegrabl_vsnprintf>
    960227a4:	0b0002b5 	add	w21, w21, w0
	err = tegrabl_console_puts(hdev, msg);
    960227a8:	d0000260 	adrp	x0, 96070000 <handler+0x5a8>
    960227ac:	aa1403e1 	mov	x1, x20
    960227b0:	f9455c00 	ldr	x0, [x0, #2744]
    960227b4:	97ffff7e 	bl	960225ac <tegrabl_console_puts>
	if (err != TEGRABL_NO_ERROR) {
    960227b8:	34000080 	cbz	w0, 960227c8 <tegrabl_vprintf+0xcc>
		pr_error("failed to print\n");
    960227bc:	90000100 	adrp	x0, 96042000 <__func__.4833+0x5>
    960227c0:	913b1000 	add	x0, x0, #0xec4
    960227c4:	97ffffab 	bl	96022670 <tegrabl_printf>
}
    960227c8:	2a1503e0 	mov	w0, w21
    960227cc:	f9401bf7 	ldr	x23, [sp, #48]
    960227d0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960227d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960227d8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960227dc:	d65f03c0 	ret
	int32_t ret = 0;
    960227e0:	52800015 	mov	w21, #0x0                   	// #0
	uint32_t size = 0;
    960227e4:	d2800000 	mov	x0, #0x0                   	// #0
    960227e8:	17ffffe4 	b	96022778 <tegrabl_vprintf+0x7c>

00000000960227ec <tegrabl_putc>:

int tegrabl_putc(char ch)
{
    960227ec:	12001c01 	and	w1, w0, #0xff
	tegrabl_error_t error;
	if (hdev == NULL) {
    960227f0:	d0000260 	adrp	x0, 96070000 <handler+0x5a8>
    960227f4:	f9455c00 	ldr	x0, [x0, #2744]
    960227f8:	b4000100 	cbz	x0, 96022818 <tegrabl_putc+0x2c>
{
    960227fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96022800:	910003fd 	mov	x29, sp
		return 0;
	}

	error = tegrabl_console_putchar(hdev, ch);
    96022804:	97ffff5d 	bl	96022578 <tegrabl_console_putchar>
	if (error != TEGRABL_NO_ERROR) {
    96022808:	7100001f 	cmp	w0, #0x0
    9602280c:	1a9f17e0 	cset	w0, eq  // eq = none
		return 0;
	}
	return 1;
}
    96022810:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96022814:	d65f03c0 	ret
		return 0;
    96022818:	52800000 	mov	w0, #0x0                   	// #0
}
    9602281c:	d65f03c0 	ret

0000000096022820 <tegrabl_getc>:
int32_t tegrabl_getc(void)
{
	tegrabl_error_t error;
	char ch;

	if (hdev == NULL) {
    96022820:	d0000260 	adrp	x0, 96070000 <handler+0x5a8>
    96022824:	f9455c00 	ldr	x0, [x0, #2744]
    96022828:	b50000c0 	cbnz	x0, 96022840 <tegrabl_getc+0x20>
		return -1;
    9602282c:	12800000 	mov	w0, #0xffffffff            	// #-1
	error = tegrabl_console_getchar(hdev, &ch, ~(0x0u));
	if (error != TEGRABL_NO_ERROR) {
		return -1;
	}
	return (int32_t)ch;
}
    96022830:	d65f03c0 	ret
		return -1;
    96022834:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96022838:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602283c:	d65f03c0 	ret
{
    96022840:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	error = tegrabl_console_getchar(hdev, &ch, ~(0x0u));
    96022844:	b2407fe2 	mov	x2, #0xffffffff            	// #4294967295
{
    96022848:	910003fd 	mov	x29, sp
	error = tegrabl_console_getchar(hdev, &ch, ~(0x0u));
    9602284c:	91007fa1 	add	x1, x29, #0x1f
    96022850:	97ffff51 	bl	96022594 <tegrabl_console_getchar>
	if (error != TEGRABL_NO_ERROR) {
    96022854:	35ffff00 	cbnz	w0, 96022834 <tegrabl_getc+0x14>
	return (int32_t)ch;
    96022858:	39407fa0 	ldrb	w0, [x29, #31]
    9602285c:	17fffff7 	b	96022838 <tegrabl_getc+0x18>

0000000096022860 <set_hex>:
fail:
	return error;
}

static inline void set_hex(const uint8_t guid, char *hex)
{
    96022860:	12001c00 	and	w0, w0, #0xff
	uint8_t high, low;

	high = guid >> 4U;
    96022864:	53047c03 	lsr	w3, w0, #4
	low = guid & 0x0FU;
    96022868:	12000c00 	and	w0, w0, #0xf

	if (high > 9U) {
		*hex = 'a' + high - 10;
    9602286c:	1100c064 	add	w4, w3, #0x30
    96022870:	7100247f 	cmp	w3, #0x9
    96022874:	11015c62 	add	w2, w3, #0x57
	} else {
		*hex = '0' + high;
	}

	if (low > 9U) {
		*(hex + 1) = 'a' + low - 10;
    96022878:	1100c003 	add	w3, w0, #0x30
		*hex = 'a' + high - 10;
    9602287c:	1a848042 	csel	w2, w2, w4, hi  // hi = pmore
		*(hex + 1) = 'a' + low - 10;
    96022880:	7100241f 	cmp	w0, #0x9
		*hex = 'a' + high - 10;
    96022884:	39000022 	strb	w2, [x1]
		*(hex + 1) = 'a' + low - 10;
    96022888:	11015c02 	add	w2, w0, #0x57
    9602288c:	1a838040 	csel	w0, w2, w3, hi  // hi = pmore
    96022890:	39000420 	strb	w0, [x1, #1]
	} else {
		*(hex + 1) = '0' + low;
	}
}
    96022894:	d65f03c0 	ret

0000000096022898 <guid_to_str.part.0>:

static tegrabl_error_t guid_to_str(const uint8_t *guid, char *guid_str)
    96022898:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9602289c:	aa0003e6 	mov	x6, x0
    960228a0:	aa0103e5 	mov	x5, x1
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	/* The GUID encoding is somewhat peculiar in terms of byte order. It
	 * is what it is. */
	set_hex(guid[0], guid_str + 6);
    960228a4:	91001821 	add	x1, x1, #0x6
static tegrabl_error_t guid_to_str(const uint8_t *guid, char *guid_str)
    960228a8:	910003fd 	mov	x29, sp
	set_hex(guid[0], guid_str + 6);
    960228ac:	39400000 	ldrb	w0, [x0]
    960228b0:	97ffffec 	bl	96022860 <set_hex>
	set_hex(guid[1], guid_str + 4);
    960228b4:	394004c0 	ldrb	w0, [x6, #1]
    960228b8:	910010a1 	add	x1, x5, #0x4
    960228bc:	97ffffe9 	bl	96022860 <set_hex>
	set_hex(guid[2], guid_str + 2);
    960228c0:	394008c0 	ldrb	w0, [x6, #2]
    960228c4:	910008a1 	add	x1, x5, #0x2
    960228c8:	97ffffe6 	bl	96022860 <set_hex>
	set_hex(guid[3], guid_str + 0);
    960228cc:	39400cc0 	ldrb	w0, [x6, #3]
    960228d0:	aa0503e1 	mov	x1, x5
    960228d4:	97ffffe3 	bl	96022860 <set_hex>
	guid_str[8] = '-';
	set_hex(guid[4], guid_str + 11);
    960228d8:	91002ca1 	add	x1, x5, #0xb
	guid_str[8] = '-';
    960228dc:	528005a7 	mov	w7, #0x2d                  	// #45
    960228e0:	390020a7 	strb	w7, [x5, #8]
	set_hex(guid[4], guid_str + 11);
    960228e4:	394010c0 	ldrb	w0, [x6, #4]
    960228e8:	97ffffde 	bl	96022860 <set_hex>
	set_hex(guid[5], guid_str + 9);
    960228ec:	394014c0 	ldrb	w0, [x6, #5]
    960228f0:	910024a1 	add	x1, x5, #0x9
    960228f4:	97ffffdb 	bl	96022860 <set_hex>
	guid_str[13] = '-';
    960228f8:	390034a7 	strb	w7, [x5, #13]
	set_hex(guid[6], guid_str + 16);
    960228fc:	910040a1 	add	x1, x5, #0x10
    96022900:	394018c0 	ldrb	w0, [x6, #6]
    96022904:	97ffffd7 	bl	96022860 <set_hex>
	set_hex(guid[7], guid_str + 14);
    96022908:	39401cc0 	ldrb	w0, [x6, #7]
    9602290c:	910038a1 	add	x1, x5, #0xe
    96022910:	97ffffd4 	bl	96022860 <set_hex>
	guid_str[18] = '-';
    96022914:	390048a7 	strb	w7, [x5, #18]
	set_hex(guid[8], guid_str + 19);
    96022918:	91004ca1 	add	x1, x5, #0x13
    9602291c:	394020c0 	ldrb	w0, [x6, #8]
    96022920:	97ffffd0 	bl	96022860 <set_hex>
	set_hex(guid[9], guid_str + 21);
    96022924:	394024c0 	ldrb	w0, [x6, #9]
    96022928:	910054a1 	add	x1, x5, #0x15
    9602292c:	97ffffcd 	bl	96022860 <set_hex>
	guid_str[23] = '-';
    96022930:	39005ca7 	strb	w7, [x5, #23]
	set_hex(guid[10], guid_str + 24);
    96022934:	910060a1 	add	x1, x5, #0x18
    96022938:	394028c0 	ldrb	w0, [x6, #10]
    9602293c:	97ffffc9 	bl	96022860 <set_hex>
	set_hex(guid[11], guid_str + 26);
    96022940:	39402cc0 	ldrb	w0, [x6, #11]
    96022944:	910068a1 	add	x1, x5, #0x1a
    96022948:	97ffffc6 	bl	96022860 <set_hex>
	set_hex(guid[12], guid_str + 28);
    9602294c:	394030c0 	ldrb	w0, [x6, #12]
    96022950:	910070a1 	add	x1, x5, #0x1c
    96022954:	97ffffc3 	bl	96022860 <set_hex>
	set_hex(guid[13], guid_str + 30);
    96022958:	394034c0 	ldrb	w0, [x6, #13]
    9602295c:	910078a1 	add	x1, x5, #0x1e
    96022960:	97ffffc0 	bl	96022860 <set_hex>
	set_hex(guid[14], guid_str + 32);
    96022964:	394038c0 	ldrb	w0, [x6, #14]
    96022968:	910080a1 	add	x1, x5, #0x20
    9602296c:	97ffffbd 	bl	96022860 <set_hex>
	set_hex(guid[15], guid_str + 34);
    96022970:	39403cc0 	ldrb	w0, [x6, #15]
    96022974:	910088a1 	add	x1, x5, #0x22
    96022978:	97ffffba 	bl	96022860 <set_hex>
	guid_str[36] = '\0';
    9602297c:	390090bf 	strb	wzr, [x5, #36]

	return TEGRABL_NO_ERROR;
}
    96022980:	52800000 	mov	w0, #0x0                   	// #0
    96022984:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96022988:	d65f03c0 	ret

000000009602298c <tegrabl_gpt_publish>:

tegrabl_error_t tegrabl_gpt_publish(tegrabl_bdev_t *dev,
		off_t offset, struct tegrabl_partition_info **partition_list,
		uint32_t *num_partitions)
{
    9602298c:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
	struct tegrabl_partition_info *partitions = NULL;
	uint64_t start_sector;
	uint64_t num_sectors;
	uint16_t partition_name;

	if ((partition_list == NULL) || (dev == NULL) || (num_partitions == NULL)) {
    96022990:	f100005f 	cmp	x2, #0x0
    96022994:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
{
    96022998:	910003fd 	mov	x29, sp
    9602299c:	a90153f3 	stp	x19, x20, [sp, #16]
    960229a0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960229a4:	a90363f7 	stp	x23, x24, [sp, #48]
    960229a8:	a9046bf9 	stp	x25, x26, [sp, #64]
    960229ac:	a90573fb 	stp	x27, x28, [sp, #80]
	if ((partition_list == NULL) || (dev == NULL) || (num_partitions == NULL)) {
    960229b0:	54000d40 	b.eq	96022b58 <tegrabl_gpt_publish+0x1cc>  // b.none
    960229b4:	aa0303f9 	mov	x25, x3
    960229b8:	b4000d03 	cbz	x3, 96022b58 <tegrabl_gpt_publish+0x1cc>
    960229bc:	aa0003fb 	mov	x27, x0
    960229c0:	aa0203f8 	mov	x24, x2
	if (offset > 0ULL) {
    960229c4:	b4000b61 	cbz	x1, 96022b30 <tegrabl_gpt_publish+0x1a4>
		count = 1;
    960229c8:	52800037 	mov	w23, #0x1                   	// #1
		offsets[0] = offset;
    960229cc:	f9003fa1 	str	x1, [x29, #120]
	if (strncmp(hdr->signature, "EFI PART", 8) != 0) {
    960229d0:	9000011a 	adrp	x26, 96042000 <__func__.4833+0x5>
    960229d4:	913b635a 	add	x26, x26, #0xed8
		count = 2;
    960229d8:	d2800016 	mov	x22, #0x0                   	// #0
	size += TEGRABL_BLOCKDEV_BLOCK_SIZE(dev);
    960229dc:	d2800034 	mov	x20, #0x1                   	// #1
    960229e0:	b9402363 	ldr	w3, [x27, #32]
		error = tegrabl_gpt_read_validate(dev, offsets[i], buf, buf_size);
    960229e4:	9101e3a0 	add	x0, x29, #0x78
		buffer = (uint8_t *)tegrabl_alloc_align(TEGRABL_HEAP_DMA, 4096, size);
    960229e8:	d2820001 	mov	x1, #0x1000                	// #4096
	size += TEGRABL_BLOCKDEV_BLOCK_SIZE(dev);
    960229ec:	9ac32283 	lsl	x3, x20, x3
		buffer = (uint8_t *)tegrabl_alloc_align(TEGRABL_HEAP_DMA, 4096, size);
    960229f0:	11401063 	add	w3, w3, #0x4, lsl #12
		error = tegrabl_gpt_read_validate(dev, offsets[i], buf, buf_size);
    960229f4:	f8767815 	ldr	x21, [x0, x22, lsl #3]
		buffer = (uint8_t *)tegrabl_alloc_align(TEGRABL_HEAP_DMA, 4096, size);
    960229f8:	aa0303e2 	mov	x2, x3
    960229fc:	52800020 	mov	w0, #0x1                   	// #1
    96022a00:	f90037a3 	str	x3, [x29, #104]
    96022a04:	94001047 	bl	96026b20 <tegrabl_alloc_align>
    96022a08:	aa0003f3 	mov	x19, x0
		if (buffer == NULL) {
    96022a0c:	b4000880 	cbz	x0, 96022b1c <tegrabl_gpt_publish+0x190>
		memset(buffer, 0x0, size);
    96022a10:	f94037a3 	ldr	x3, [x29, #104]
    96022a14:	52800001 	mov	w1, #0x0                   	// #0
    96022a18:	aa0303e2 	mov	x2, x3
    96022a1c:	94001d03 	bl	96029e28 <memset>
					(uint32_t)DIV_CEIL_LOG2(offset, dev->block_size_log2), 1);
    96022a20:	b9402362 	ldr	w2, [x27, #32]
	error = tegrabl_blockdev_read_block(dev, buffer,
    96022a24:	52800023 	mov	w3, #0x1                   	// #1
    96022a28:	aa1303e1 	mov	x1, x19
					(uint32_t)DIV_CEIL_LOG2(offset, dev->block_size_log2), 1);
    96022a2c:	9ac22280 	lsl	x0, x20, x2
    96022a30:	d1000400 	sub	x0, x0, #0x1
    96022a34:	8b150015 	add	x21, x0, x21
	error = tegrabl_blockdev_read_block(dev, buffer,
    96022a38:	aa1b03e0 	mov	x0, x27
    96022a3c:	9ac226a2 	lsr	x2, x21, x2
    96022a40:	97ffe42a 	bl	9601bae8 <tegrabl_blockdev_read_block>
	if (TEGRABL_NO_ERROR != error) {
    96022a44:	350006c0 	cbnz	w0, 96022b1c <tegrabl_gpt_publish+0x190>
	error = tegrabl_gpt_validate_header(buffer, dev->block_count);
    96022a48:	b9402775 	ldr	w21, [x27, #36]
	if ((buf == NULL) || (total_blocks == 0ULL)) {
    96022a4c:	b4000695 	cbz	x21, 96022b1c <tegrabl_gpt_publish+0x190>
	if (strncmp(hdr->signature, "EFI PART", 8) != 0) {
    96022a50:	d2800102 	mov	x2, #0x8                   	// #8
    96022a54:	aa1a03e1 	mov	x1, x26
    96022a58:	aa1303e0 	mov	x0, x19
    96022a5c:	94001e08 	bl	9602a27c <strncmp>
    96022a60:	350005e0 	cbnz	w0, 96022b1c <tegrabl_gpt_publish+0x190>
	if (hdr->hdr_size != 0x5CUL) {
    96022a64:	b9400e61 	ldr	w1, [x19, #12]
    96022a68:	7101703f 	cmp	w1, #0x5c
    96022a6c:	54000581 	b.ne	96022b1c <tegrabl_gpt_publish+0x190>  // b.any
	hdr_crc32 = hdr->hdr_crc32;
    96022a70:	b9401263 	ldr	w3, [x19, #16]
	if (hdr_crc32 != tegrabl_utils_crc32(0, (void *)buf, hdr->hdr_size)) {
    96022a74:	d2800b82 	mov	x2, #0x5c                  	// #92
	hdr->hdr_crc32 = 0;
    96022a78:	b900127f 	str	wzr, [x19, #16]
	if (hdr_crc32 != tegrabl_utils_crc32(0, (void *)buf, hdr->hdr_size)) {
    96022a7c:	aa1303e1 	mov	x1, x19
	hdr_crc32 = hdr->hdr_crc32;
    96022a80:	b9006ba3 	str	w3, [x29, #104]
	if (hdr_crc32 != tegrabl_utils_crc32(0, (void *)buf, hdr->hdr_size)) {
    96022a84:	940013a2 	bl	9602790c <tegrabl_utils_crc32>
    96022a88:	b9406ba3 	ldr	w3, [x29, #104]
    96022a8c:	6b00007f 	cmp	w3, w0
    96022a90:	54000461 	b.ne	96022b1c <tegrabl_gpt_publish+0x190>  // b.any
	if ((hdr->first_lba >= total_blocks) ||
    96022a94:	f9401660 	ldr	x0, [x19, #40]
	hdr->hdr_crc32 = hdr_crc32;
    96022a98:	b9001263 	str	w3, [x19, #16]
	if ((hdr->first_lba >= total_blocks) ||
    96022a9c:	eb0002bf 	cmp	x21, x0
    96022aa0:	540003e9 	b.ls	96022b1c <tegrabl_gpt_publish+0x190>  // b.plast
    96022aa4:	f9401a60 	ldr	x0, [x19, #48]
    96022aa8:	eb0002bf 	cmp	x21, x0
    96022aac:	54000389 	b.ls	96022b1c <tegrabl_gpt_publish+0x190>  // b.plast
	if (hdr->num_entries > TEGRABL_GPT_MAX_PARTITION_ENTRIES) {
    96022ab0:	b9405265 	ldr	w5, [x19, #80]
    96022ab4:	710200bf 	cmp	w5, #0x80
    96022ab8:	54000328 	b.hi	96022b1c <tegrabl_gpt_publish+0x190>  // b.pmore
	if (hdr->entry_size > sizeof(struct tegrabl_gpt_entry)) {
    96022abc:	b9405661 	ldr	w1, [x19, #84]
    96022ac0:	7102003f 	cmp	w1, #0x80
    96022ac4:	540002c8 	b.hi	96022b1c <tegrabl_gpt_publish+0x190>  // b.pmore
		(struct tegrabl_gpt_entry *)(buffer + TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96022ac8:	b9402363 	ldr	w3, [x27, #32]
							DIV_CEIL_LOG2(table_size, dev->block_size_log2));
    96022acc:	1b017ca5 	mul	w5, w5, w1
	error =	tegrabl_blockdev_read_block(dev, entries,
    96022ad0:	b9404a62 	ldr	w2, [x19, #72]
		(struct tegrabl_gpt_entry *)(buffer + TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96022ad4:	9ac32280 	lsl	x0, x20, x3
	entries =
    96022ad8:	8b000266 	add	x6, x19, x0
							DIV_CEIL_LOG2(table_size, dev->block_size_log2));
    96022adc:	d1000400 	sub	x0, x0, #0x1
	error =	tegrabl_blockdev_read_block(dev, entries,
    96022ae0:	aa0603e1 	mov	x1, x6
							DIV_CEIL_LOG2(table_size, dev->block_size_log2));
    96022ae4:	8b050000 	add	x0, x0, x5
	error =	tegrabl_blockdev_read_block(dev, entries,
    96022ae8:	a9061ba5 	stp	x5, x6, [x29, #96]
    96022aec:	9ac32403 	lsr	x3, x0, x3
    96022af0:	aa1b03e0 	mov	x0, x27
    96022af4:	97ffe3fd 	bl	9601bae8 <tegrabl_blockdev_read_block>
    96022af8:	2a0003f5 	mov	w21, w0
	if (TEGRABL_NO_ERROR != error) {
    96022afc:	a9461ba5 	ldp	x5, x6, [x29, #96]
    96022b00:	350000e0 	cbnz	w0, 96022b1c <tegrabl_gpt_publish+0x190>
	crc32 = tegrabl_utils_crc32(0, entries, table_size);
    96022b04:	aa0603e1 	mov	x1, x6
    96022b08:	aa0503e2 	mov	x2, x5
    96022b0c:	94001380 	bl	9602790c <tegrabl_utils_crc32>
	if (hdr->table_crc32 != crc32) {
    96022b10:	b9405a61 	ldr	w1, [x19, #88]
    96022b14:	6b01001f 	cmp	w0, w1
    96022b18:	540002a0 	b.eq	96022b6c <tegrabl_gpt_publish+0x1e0>  // b.none
    96022b1c:	910006d6 	add	x22, x22, #0x1
	for (i = 0; i < count; i++) {
    96022b20:	6b1602ff 	cmp	w23, w22
    96022b24:	54fff5e8 	b.hi	960229e0 <tegrabl_gpt_publish+0x54>  // b.pmore
    96022b28:	d2800013 	mov	x19, #0x0                   	// #0
    96022b2c:	14000012 	b	96022b74 <tegrabl_gpt_publish+0x1e8>
	block_size = TEGRABL_BLOCKDEV_BLOCK_SIZE(dev);
    96022b30:	b9402361 	ldr	w1, [x27, #32]
    96022b34:	d2800020 	mov	x0, #0x1                   	// #1
		count = 2;
    96022b38:	52800057 	mov	w23, #0x2                   	// #2
	block_size = TEGRABL_BLOCKDEV_BLOCK_SIZE(dev);
    96022b3c:	9ac12000 	lsl	x0, x0, x1
		offsets[1] = dev->size - block_size;
    96022b40:	f9400f61 	ldr	x1, [x27, #24]
    96022b44:	92407c00 	and	x0, x0, #0xffffffff
		offsets[0] = block_size;
    96022b48:	f9003fa0 	str	x0, [x29, #120]
		offsets[1] = dev->size - block_size;
    96022b4c:	cb000020 	sub	x0, x1, x0
    96022b50:	f90043a0 	str	x0, [x29, #128]
    96022b54:	17ffff9f 	b	960229d0 <tegrabl_gpt_publish+0x44>
	uint8_t *buffer = NULL;
    96022b58:	d2800013 	mov	x19, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    96022b5c:	5280a055 	mov	w21, #0x502                 	// #1282
    96022b60:	14000006 	b	96022b78 <tegrabl_gpt_publish+0x1ec>
			num_entries++;
	}

	partitions = tegrabl_malloc(sizeof(struct tegrabl_partition_info) * num_entries);
	if (partitions == NULL) {
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96022b64:	52802075 	mov	w21, #0x103                 	// #259
    96022b68:	14000004 	b	96022b78 <tegrabl_gpt_publish+0x1ec>
	if (i >= count) {
    96022b6c:	6b1602ff 	cmp	w23, w22
    96022b70:	54000088 	b.hi	96022b80 <tegrabl_gpt_publish+0x1f4>  // b.pmore
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96022b74:	528001b5 	mov	w21, #0xd                   	// #13
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96022b78:	72a38395 	movk	w21, #0x1c1c, lsl #16
    96022b7c:	14000036 	b	96022c54 <tegrabl_gpt_publish+0x2c8>
		(struct tegrabl_gpt_entry *)(buffer + TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96022b80:	b9402360 	ldr	w0, [x27, #32]
    96022b84:	d2880401 	mov	x1, #0x4020                	// #16416
	uint32_t num_entries = 0;
    96022b88:	52800017 	mov	w23, #0x0                   	// #0
		(struct tegrabl_gpt_entry *)(buffer + TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96022b8c:	9ac02294 	lsl	x20, x20, x0
	entries =
    96022b90:	8b140274 	add	x20, x19, x20
    96022b94:	91008280 	add	x0, x20, #0x20
    96022b98:	aa1403f6 	mov	x22, x20
    96022b9c:	8b010281 	add	x1, x20, x1
		if (entries[i].last_lba > entries[i].first_lba)
    96022ba0:	f9400403 	ldr	x3, [x0, #8]
    96022ba4:	f8480402 	ldr	x2, [x0], #128
			num_entries++;
    96022ba8:	eb02007f 	cmp	x3, x2
    96022bac:	1a9796f7 	cinc	w23, w23, hi  // hi = pmore
	for (i = 0; i < TEGRABL_GPT_MAX_PARTITION_ENTRIES; i++) {
    96022bb0:	eb00003f 	cmp	x1, x0
    96022bb4:	54ffff61 	b.ne	96022ba0 <tegrabl_gpt_publish+0x214>  // b.any
	partitions = tegrabl_malloc(sizeof(struct tegrabl_partition_info) * num_entries);
    96022bb8:	5280121a 	mov	w26, #0x90                  	// #144
    96022bbc:	9bba7ee0 	umull	x0, w23, w26
    96022bc0:	94000fae 	bl	96026a78 <tegrabl_malloc>
    96022bc4:	aa0003ea 	mov	x10, x0
	if (partitions == NULL) {
    96022bc8:	b4fffce0 	cbz	x0, 96022b64 <tegrabl_gpt_publish+0x1d8>
    96022bcc:	91401294 	add	x20, x20, #0x4, lsl #12
		pr_debug("Failed to allocate memory for partition array\n");
		goto fail;
	}

	for (k = 0, j = 0; k < TEGRABL_GPT_MAX_PARTITION_ENTRIES; k++) {
    96022bd0:	52800009 	mov	w9, #0x0                   	// #0
		if (entries[k].last_lba <= entries[k].first_lba) {
    96022bd4:	a94202c2 	ldp	x2, x0, [x22, #32]
    96022bd8:	eb02001f 	cmp	x0, x2
    96022bdc:	54000329 	b.ls	96022c40 <tegrabl_gpt_publish+0x2b4>  // b.plast
			continue;
		}

		for (i = 0; i < TEGRABL_GPT_MAX_PARTITION_NAME; i++) {
			partition_name = entries[k].pname[i] & 0xFFU;
			partitions[j].name[i] = (char)partition_name;
    96022be0:	9bba2928 	umaddl	x8, w9, w26, x10
    96022be4:	d2800001 	mov	x1, #0x0                   	// #0
			partition_name = entries[k].pname[i] & 0xFFU;
    96022be8:	8b0106c3 	add	x3, x22, x1, lsl #1
			partitions[j].name[i] = (char)partition_name;
    96022bec:	79407063 	ldrh	w3, [x3, #56]
    96022bf0:	38216903 	strb	w3, [x8, x1]
    96022bf4:	91000421 	add	x1, x1, #0x1
		for (i = 0; i < TEGRABL_GPT_MAX_PARTITION_NAME; i++) {
    96022bf8:	f100903f 	cmp	x1, #0x24
    96022bfc:	54ffff61 	b.ne	96022be8 <tegrabl_gpt_publish+0x25c>  // b.any
		}

		partitions[j].name[i] = '\0';
    96022c00:	3900911f 	strb	wzr, [x8, #36]
		start_sector = entries[k].first_lba;
		num_sectors = entries[k].last_lba - start_sector + 1ULL;
    96022c04:	91000400 	add	x0, x0, #0x1
    96022c08:	cb020000 	sub	x0, x0, x2
		partitions[j].start_sector = start_sector;
		partitions[j].num_sectors = num_sectors;
		partitions[j].total_size = num_sectors << dev->block_size_log2;
    96022c0c:	b9402361 	ldr	w1, [x27, #32]
		partitions[j].num_sectors = num_sectors;
    96022c10:	a9078102 	stp	x2, x0, [x8, #120]
		partitions[j].total_size = num_sectors << dev->block_size_log2;
    96022c14:	9ac12000 	lsl	x0, x0, x1
    96022c18:	f9004500 	str	x0, [x8, #136]
    96022c1c:	9100a101 	add	x1, x8, #0x28
    96022c20:	910042c0 	add	x0, x22, #0x10
    96022c24:	97ffff1d 	bl	96022898 <guid_to_str.part.0>
    96022c28:	91013501 	add	x1, x8, #0x4d
    96022c2c:	aa1603e0 	mov	x0, x22
    96022c30:	97ffff1a 	bl	96022898 <guid_to_str.part.0>
		pr_debug("Start sector: %"PRIu64"\n", start_sector);
		pr_debug("Num sectors : %"PRIu64"\n", num_sectors);
		pr_debug("Size        : %"PRIu64"\n", partitions[j].total_size);
		pr_debug("Ptype guid  : %s\n", partitions[j].ptype_guid);

		j++;
    96022c34:	11000529 	add	w9, w9, #0x1
		if (j == num_entries) {
    96022c38:	6b0902ff 	cmp	w23, w9
    96022c3c:	54000080 	b.eq	96022c4c <tegrabl_gpt_publish+0x2c0>  // b.none
    96022c40:	910202d6 	add	x22, x22, #0x80
	for (k = 0, j = 0; k < TEGRABL_GPT_MAX_PARTITION_ENTRIES; k++) {
    96022c44:	eb16029f 	cmp	x20, x22
    96022c48:	54fffc61 	b.ne	96022bd4 <tegrabl_gpt_publish+0x248>  // b.any
			pr_debug("All valid entries are found\n");
			break;
		}
	}

	*partition_list = partitions;
    96022c4c:	f900030a 	str	x10, [x24]
	*num_partitions = num_entries;
    96022c50:	b9000337 	str	w23, [x25]

fail:
	tegrabl_dealloc(TEGRABL_HEAP_DMA, buffer);
    96022c54:	aa1303e1 	mov	x1, x19
    96022c58:	52800020 	mov	w0, #0x1                   	// #1
    96022c5c:	94000f93 	bl	96026aa8 <tegrabl_dealloc>
	return error;
}
    96022c60:	2a1503e0 	mov	w0, w21
    96022c64:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022c68:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96022c6c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96022c70:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96022c74:	a94573fb 	ldp	x27, x28, [sp, #80]
    96022c78:	a8c97bfd 	ldp	x29, x30, [sp], #144
    96022c7c:	d65f03c0 	ret

0000000096022c80 <tegrabl_linuxboot_add_nvdumper_info>:
		return 0;
}

static int tegrabl_linuxboot_add_nvdumper_info(char *cmdline, int len,
											   char *param, void *priv)
{
    96022c80:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	struct tegrabl_linuxboot_memblock memblock;
	uint32_t carveout_type = TEGRABL_LINUXBOOT_CARVEOUT_NVDUMPER;
    96022c84:	52800083 	mov	w3, #0x4                   	// #4

	TEGRABL_UNUSED(priv);

	if (!cmdline || !param) {
    96022c88:	f100001f 	cmp	x0, #0x0
{
    96022c8c:	910003fd 	mov	x29, sp
    96022c90:	a90153f3 	stp	x19, x20, [sp, #16]
	if (!cmdline || !param) {
    96022c94:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
{
    96022c98:	f90013f5 	str	x21, [sp, #32]
	uint32_t carveout_type = TEGRABL_LINUXBOOT_CARVEOUT_NVDUMPER;
    96022c9c:	b9003fa3 	str	w3, [x29, #60]
	if (!cmdline || !param) {
    96022ca0:	540000c1 	b.ne	96022cb8 <tegrabl_linuxboot_add_nvdumper_info+0x38>  // b.any
		return -1;
    96022ca4:	12800000 	mov	w0, #0xffffffff            	// #-1
	if (memblock.size)
		return tegrabl_snprintf(cmdline, len, "%s=0x%08" PRIx64 " ",
								param, memblock.base);
	else
		return 0;
}
    96022ca8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022cac:	f94013f5 	ldr	x21, [sp, #32]
    96022cb0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96022cb4:	d65f03c0 	ret
    96022cb8:	aa0203f4 	mov	x20, x2
    96022cbc:	2a0103f5 	mov	w21, w1
    96022cc0:	aa0003f3 	mov	x19, x0
	if (tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_CARVEOUT,
    96022cc4:	910103a2 	add	x2, x29, #0x40
    96022cc8:	9100f3a1 	add	x1, x29, #0x3c
    96022ccc:	528000a0 	mov	w0, #0x5                   	// #5
    96022cd0:	94000a4a 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    96022cd4:	35fffe80 	cbnz	w0, 96022ca4 <tegrabl_linuxboot_add_nvdumper_info+0x24>
	if (memblock.size)
    96022cd8:	f94027a0 	ldr	x0, [x29, #72]
    96022cdc:	b4000120 	cbz	x0, 96022d00 <tegrabl_linuxboot_add_nvdumper_info+0x80>
		return tegrabl_snprintf(cmdline, len, "%s=0x%08" PRIx64 " ",
    96022ce0:	f94023a4 	ldr	x4, [x29, #64]
    96022ce4:	aa1403e3 	mov	x3, x20
    96022ce8:	b0000102 	adrp	x2, 96043000 <common_params>
    96022cec:	93407ea1 	sxtw	x1, w21
    96022cf0:	9110ac42 	add	x2, x2, #0x42b
    96022cf4:	aa1303e0 	mov	x0, x19
    96022cf8:	97fffe33 	bl	960225c4 <tegrabl_snprintf>
    96022cfc:	17ffffeb 	b	96022ca8 <tegrabl_linuxboot_add_nvdumper_info+0x28>
		return 0;
    96022d00:	52800000 	mov	w0, #0x0                   	// #0
    96022d04:	17ffffe9 	b	96022ca8 <tegrabl_linuxboot_add_nvdumper_info+0x28>

0000000096022d08 <tegrabl_linuxboot_add_carveout>:
{
    96022d08:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	if (!cmdline || !param) {
    96022d0c:	f100001f 	cmp	x0, #0x0
    96022d10:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
{
    96022d14:	910003fd 	mov	x29, sp
    96022d18:	a90153f3 	stp	x19, x20, [sp, #16]
    96022d1c:	f90013f5 	str	x21, [sp, #32]
	uint32_t carveout_type = (uint32_t)((uintptr_t)priv);
    96022d20:	b9003fa3 	str	w3, [x29, #60]
	if (!cmdline || !param) {
    96022d24:	540000c1 	b.ne	96022d3c <tegrabl_linuxboot_add_carveout+0x34>  // b.any
		return -1;
    96022d28:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96022d2c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022d30:	f94013f5 	ldr	x21, [sp, #32]
    96022d34:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96022d38:	d65f03c0 	ret
    96022d3c:	aa0203f4 	mov	x20, x2
    96022d40:	2a0103f5 	mov	w21, w1
    96022d44:	aa0003f3 	mov	x19, x0
	if (tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_CARVEOUT,
    96022d48:	910103a2 	add	x2, x29, #0x40
    96022d4c:	9100f3a1 	add	x1, x29, #0x3c
    96022d50:	528000a0 	mov	w0, #0x5                   	// #5
    96022d54:	94000a29 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    96022d58:	35fffe80 	cbnz	w0, 96022d28 <tegrabl_linuxboot_add_carveout+0x20>
	if (memblock.size)
    96022d5c:	f94027a4 	ldr	x4, [x29, #72]
    96022d60:	b4000124 	cbz	x4, 96022d84 <tegrabl_linuxboot_add_carveout+0x7c>
		return tegrabl_snprintf(cmdline, len, "%s=0x%" PRIx64 "@0x%08" PRIx64
    96022d64:	f94023a5 	ldr	x5, [x29, #64]
    96022d68:	aa1403e3 	mov	x3, x20
    96022d6c:	b0000102 	adrp	x2, 96043000 <common_params>
    96022d70:	93407ea1 	sxtw	x1, w21
    96022d74:	910d3842 	add	x2, x2, #0x34e
    96022d78:	aa1303e0 	mov	x0, x19
    96022d7c:	97fffe12 	bl	960225c4 <tegrabl_snprintf>
    96022d80:	17ffffeb 	b	96022d2c <tegrabl_linuxboot_add_carveout+0x24>
		return 0;
    96022d84:	52800000 	mov	w0, #0x0                   	// #0
    96022d88:	17ffffe9 	b	96022d2c <tegrabl_linuxboot_add_carveout+0x24>

0000000096022d8c <tegrabl_linuxboot_add_disp_param>:
}
#endif

#if defined(CONFIG_ENABLE_DISPLAY)
static int tegrabl_linuxboot_add_disp_param(char *cmdline, int len, char *param, void *priv)
{
    96022d8c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96022d90:	910003fd 	mov	x29, sp
    96022d94:	a90153f3 	stp	x19, x20, [sp, #16]
    96022d98:	aa0203f3 	mov	x19, x2
    96022d9c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96022da0:	aa0003f5 	mov	x21, x0
    96022da4:	a90363f7 	stp	x23, x24, [sp, #48]
    96022da8:	2a0103f6 	mov	w22, w1
			pr_error("%s, du %d failed to get display params\n", __func__, du_idx);
			goto fail;
		}

		if (disp_params.size != 0) {
			if (!strcmp(param, "tegra_fbmem") && (disp_params.instance == 0)) {
    96022dac:	b0000117 	adrp	x23, 96043000 <common_params>
				return tegrabl_snprintf(cmdline, len, "%s=0x%x@0x%08"PRIx64" "
						"lut_mem=0x%x@0x%08"PRIx64" ", param,
						disp_params.size, disp_params.addr,
						disp_params.lut_size, disp_params.lut_addr);
			} else if (!strcmp(param, "tegra_fbmem2") && (disp_params.instance == 1)) {
    96022db0:	b0000118 	adrp	x24, 96043000 <common_params>
			if (!strcmp(param, "tegra_fbmem") && (disp_params.instance == 0)) {
    96022db4:	910d82f7 	add	x23, x23, #0x360
			} else if (!strcmp(param, "tegra_fbmem2") && (disp_params.instance == 1)) {
    96022db8:	910e4b18 	add	x24, x24, #0x392
	for (du_idx = 0; du_idx < DISPLAY_OUT_MAX; du_idx++) {
    96022dbc:	52800014 	mov	w20, #0x0                   	// #0
		err = tegrabl_display_get_params(du_idx, &disp_params);
    96022dc0:	910103a1 	add	x1, x29, #0x40
    96022dc4:	2a1403e0 	mov	w0, w20
    96022dc8:	97ff8cc0 	bl	960060c8 <tegrabl_display_get_params>
		if (err != TEGRABL_NO_ERROR) {
    96022dcc:	34000120 	cbz	w0, 96022df0 <tegrabl_linuxboot_add_disp_param+0x64>
			pr_error("%s, du %d failed to get display params\n", __func__, du_idx);
    96022dd0:	90000101 	adrp	x1, 96042000 <__func__.4833+0x5>
    96022dd4:	b00000c0 	adrp	x0, 9603b000 <tt_level+0x328>
    96022dd8:	2a1403e2 	mov	w2, w20
    96022ddc:	913ea021 	add	x1, x1, #0xfa8
    96022de0:	91323c00 	add	x0, x0, #0xc8f
    96022de4:	97fffe23 	bl	96022670 <tegrabl_printf>
			}
		}
	}

fail:
	return -1;
    96022de8:	12800000 	mov	w0, #0xffffffff            	// #-1
    96022dec:	14000013 	b	96022e38 <tegrabl_linuxboot_add_disp_param+0xac>
		if (disp_params.size != 0) {
    96022df0:	b94043a0 	ldr	w0, [x29, #64]
    96022df4:	340006a0 	cbz	w0, 96022ec8 <tegrabl_linuxboot_add_disp_param+0x13c>
			if (!strcmp(param, "tegra_fbmem") && (disp_params.instance == 0)) {
    96022df8:	aa1703e1 	mov	x1, x23
    96022dfc:	aa1303e0 	mov	x0, x19
    96022e00:	94001d13 	bl	9602a24c <strcmp>
    96022e04:	35000240 	cbnz	w0, 96022e4c <tegrabl_linuxboot_add_disp_param+0xc0>
    96022e08:	b94053a0 	ldr	w0, [x29, #80]
    96022e0c:	35000200 	cbnz	w0, 96022e4c <tegrabl_linuxboot_add_disp_param+0xc0>
				return tegrabl_snprintf(cmdline, len, "%s=0x%x@0x%08"PRIx64" "
    96022e10:	b94043a4 	ldr	w4, [x29, #64]
    96022e14:	b0000102 	adrp	x2, 96043000 <common_params>
    96022e18:	b9406ba6 	ldr	w6, [x29, #104]
    96022e1c:	aa1303e3 	mov	x3, x19
    96022e20:	f94027a5 	ldr	x5, [x29, #72]
    96022e24:	910db042 	add	x2, x2, #0x36c
    96022e28:	f94033a7 	ldr	x7, [x29, #96]
				return tegrabl_snprintf(cmdline, len, "%s=0x%x@0x%08"PRIx64" "
    96022e2c:	93407ec1 	sxtw	x1, w22
    96022e30:	aa1503e0 	mov	x0, x21
    96022e34:	97fffde4 	bl	960225c4 <tegrabl_snprintf>
}
    96022e38:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022e3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96022e40:	a94363f7 	ldp	x23, x24, [sp, #48]
    96022e44:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96022e48:	d65f03c0 	ret
			} else if (!strcmp(param, "tegra_fbmem2") && (disp_params.instance == 1)) {
    96022e4c:	aa1803e1 	mov	x1, x24
    96022e50:	aa1303e0 	mov	x0, x19
    96022e54:	94001cfe 	bl	9602a24c <strcmp>
    96022e58:	35000180 	cbnz	w0, 96022e88 <tegrabl_linuxboot_add_disp_param+0xfc>
    96022e5c:	b94053a0 	ldr	w0, [x29, #80]
    96022e60:	7100041f 	cmp	w0, #0x1
    96022e64:	54000121 	b.ne	96022e88 <tegrabl_linuxboot_add_disp_param+0xfc>  // b.any
				return tegrabl_snprintf(cmdline, len, "%s=0x%x@0x%08"PRIx64" "
    96022e68:	b0000102 	adrp	x2, 96043000 <common_params>
    96022e6c:	aa1303e3 	mov	x3, x19
    96022e70:	910e7c42 	add	x2, x2, #0x39f
    96022e74:	b94043a4 	ldr	w4, [x29, #64]
    96022e78:	b9406ba6 	ldr	w6, [x29, #104]
    96022e7c:	f94027a5 	ldr	x5, [x29, #72]
    96022e80:	f94033a7 	ldr	x7, [x29, #96]
    96022e84:	17ffffea 	b	96022e2c <tegrabl_linuxboot_add_disp_param+0xa0>
			} else if (!strcmp(param, "tegra_fbmem3") && (disp_params.instance == 2)) {
    96022e88:	b0000101 	adrp	x1, 96043000 <common_params>
    96022e8c:	aa1303e0 	mov	x0, x19
    96022e90:	910f1821 	add	x1, x1, #0x3c6
    96022e94:	94001cee 	bl	9602a24c <strcmp>
    96022e98:	35000180 	cbnz	w0, 96022ec8 <tegrabl_linuxboot_add_disp_param+0x13c>
    96022e9c:	b94053a0 	ldr	w0, [x29, #80]
    96022ea0:	7100081f 	cmp	w0, #0x2
    96022ea4:	54000121 	b.ne	96022ec8 <tegrabl_linuxboot_add_disp_param+0x13c>  // b.any
				return tegrabl_snprintf(cmdline, len, "%s=0x%x@0x%08"PRIx64" "
    96022ea8:	b0000102 	adrp	x2, 96043000 <common_params>
    96022eac:	aa1303e3 	mov	x3, x19
    96022eb0:	910f4c42 	add	x2, x2, #0x3d3
    96022eb4:	b94043a4 	ldr	w4, [x29, #64]
    96022eb8:	b9406ba6 	ldr	w6, [x29, #104]
    96022ebc:	f94027a5 	ldr	x5, [x29, #72]
    96022ec0:	f94033a7 	ldr	x7, [x29, #96]
    96022ec4:	17ffffda 	b	96022e2c <tegrabl_linuxboot_add_disp_param+0xa0>
	for (du_idx = 0; du_idx < DISPLAY_OUT_MAX; du_idx++) {
    96022ec8:	11000694 	add	w20, w20, #0x1
    96022ecc:	7100169f 	cmp	w20, #0x5
    96022ed0:	54fff781 	b.ne	96022dc0 <tegrabl_linuxboot_add_disp_param+0x34>  // b.any
fail:
    96022ed4:	17ffffc5 	b	96022de8 <tegrabl_linuxboot_add_disp_param+0x5c>

0000000096022ed8 <tegrabl_linuxboot_add_earlycon>:
	if ((cmdline == NULL) || (param == NULL)) {
    96022ed8:	f100001f 	cmp	x0, #0x0
    96022edc:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96022ee0:	54000101 	b.ne	96022f00 <tegrabl_linuxboot_add_earlycon+0x28>  // b.any
		ret_val = -1;
    96022ee4:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96022ee8:	d65f03c0 	ret
		ret_val = -1;
    96022eec:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96022ef0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96022ef4:	f94013f5 	ldr	x21, [sp, #32]
    96022ef8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96022efc:	d65f03c0 	ret
{
    96022f00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96022f04:	910003fd 	mov	x29, sp
    96022f08:	a90153f3 	stp	x19, x20, [sp, #16]
    96022f0c:	aa0203f4 	mov	x20, x2
    96022f10:	f90013f5 	str	x21, [sp, #32]
    96022f14:	aa0003f3 	mov	x19, x0
    96022f18:	2a0103f5 	mov	w21, w1
	odm_config_set = tegrabl_odmdata_get_config_by_name("enable-high-speed-uart");
    96022f1c:	b0000100 	adrp	x0, 96043000 <common_params>
    96022f20:	910fe800 	add	x0, x0, #0x3fa
    96022f24:	94004095 	bl	96033178 <tegrabl_odmdata_get_config_by_name>
	if (odm_config_set) {
    96022f28:	72001c1f 	tst	w0, #0xff
    96022f2c:	54000060 	b.eq	96022f38 <tegrabl_linuxboot_add_earlycon+0x60>  // b.none
		ret_val = 0;
    96022f30:	52800000 	mov	w0, #0x0                   	// #0
    96022f34:	17ffffef 	b	96022ef0 <tegrabl_linuxboot_add_earlycon+0x18>
	err = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_DEBUG_CONSOLE, NULL, &console);
    96022f38:	9100d3a2 	add	x2, x29, #0x34
    96022f3c:	d2800001 	mov	x1, #0x0                   	// #0
    96022f40:	52800040 	mov	w0, #0x2                   	// #2
    96022f44:	940009ad 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
	if (err != TEGRABL_NO_ERROR) {
    96022f48:	35fffd20 	cbnz	w0, 96022eec <tegrabl_linuxboot_add_earlycon+0x14>
	if (console != TEGRABL_LINUXBOOT_DEBUG_CONSOLE_NONE) {
    96022f4c:	b94037a0 	ldr	w0, [x29, #52]
    96022f50:	34ffff00 	cbz	w0, 96022f30 <tegrabl_linuxboot_add_earlycon+0x58>
		if (console != TEGRABL_LINUXBOOT_DEBUG_CONSOLE_COMB_UART) {
    96022f54:	71002c1f 	cmp	w0, #0xb
    96022f58:	54fffec0 	b.eq	96022f30 <tegrabl_linuxboot_add_earlycon+0x58>  // b.none
			err = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_EARLYUART_BASE, NULL, &addr);
    96022f5c:	9100e3a2 	add	x2, x29, #0x38
    96022f60:	d2800001 	mov	x1, #0x0                   	// #0
    96022f64:	52800060 	mov	w0, #0x3                   	// #3
    96022f68:	940009a4 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
			if (err != TEGRABL_NO_ERROR) {
    96022f6c:	35fffc00 	cbnz	w0, 96022eec <tegrabl_linuxboot_add_earlycon+0x14>
			ret_val = tegrabl_snprintf(cmdline, len, "%s=uart8250,mmio32,0x%"PRIx64" ", param, addr);
    96022f70:	f9401fa4 	ldr	x4, [x29, #56]
    96022f74:	aa1403e3 	mov	x3, x20
    96022f78:	b0000102 	adrp	x2, 96043000 <common_params>
    96022f7c:	93407ea1 	sxtw	x1, w21
    96022f80:	91104442 	add	x2, x2, #0x411
    96022f84:	aa1303e0 	mov	x0, x19
    96022f88:	97fffd8f 	bl	960225c4 <tegrabl_snprintf>
    96022f8c:	13001c00 	sxtb	w0, w0
    96022f90:	17ffffd8 	b	96022ef0 <tegrabl_linuxboot_add_earlycon+0x18>

0000000096022f94 <iswhitespace>:
static int n_orig_cmdlen, n_ignore_fastboot;
static const char * const ignore_fastboot_cmd = IGNORE_FASTBOOT_CMD;

static bool iswhitespace(int ch)
{
	if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r')
    96022f94:	7100801f 	cmp	w0, #0x20
    96022f98:	1a9f17e1 	cset	w1, eq  // eq = none
    96022f9c:	7100241f 	cmp	w0, #0x9
    96022fa0:	1a9f1421 	csinc	w1, w1, wzr, ne  // ne = any
    96022fa4:	350000a1 	cbnz	w1, 96022fb8 <iswhitespace+0x24>
    96022fa8:	7100281f 	cmp	w0, #0xa
    96022fac:	1a9f17e1 	cset	w1, eq  // eq = none
    96022fb0:	7100341f 	cmp	w0, #0xd
    96022fb4:	1a9f1421 	csinc	w1, w1, wzr, ne  // ne = any
		return true;
	else
		return false;
}
    96022fb8:	2a0103e0 	mov	w0, w1
    96022fbc:	d65f03c0 	ret

0000000096022fc0 <does_command_exist>:
}

/* Check if given param is already present in the cmdline passed to
 * init_cmd_list() */
static int32_t does_command_exist(const char *command)
{
    96022fc0:	aa0003e5 	mov	x5, x0
	int32_t i, mood = 0, quote = 0;
	uint8_t curr_char;
	const char *p = command;

	/* ignore fastboot */
	if (n_ignore_fastboot) {
    96022fc4:	f0000260 	adrp	x0, 96071000 <msg+0x540>
    96022fc8:	b942c000 	ldr	w0, [x0, #704]
    96022fcc:	35000a80 	cbnz	w0, 9602311c <does_command_exist+0x15c>
		return !0;
	}
	/* nothing to find */
	if (!p || !*p) {
    96022fd0:	b4000225 	cbz	x5, 96023014 <does_command_exist+0x54>
    96022fd4:	394000a0 	ldrb	w0, [x5]
    96022fd8:	340001e0 	cbz	w0, 96023014 <does_command_exist+0x54>
		return 0;
	}

	for (i = 0; i < n_orig_cmdlen; i++) {
    96022fdc:	f0000260 	adrp	x0, 96071000 <msg+0x540>
		curr_char = s_cmdline[i];
    96022fe0:	f0000267 	adrp	x7, 96071000 <msg+0x540>
	for (i = 0; i < n_orig_cmdlen; i++) {
    96022fe4:	aa0503e3 	mov	x3, x5
		curr_char = s_cmdline[i];
    96022fe8:	910b20e7 	add	x7, x7, #0x2c8
	for (i = 0; i < n_orig_cmdlen; i++) {
    96022fec:	b942c409 	ldr	w9, [x0, #708]
	int32_t i, mood = 0, quote = 0;
    96022ff0:	52800001 	mov	w1, #0x0                   	// #0
    96022ff4:	52800000 	mov	w0, #0x0                   	// #0
	for (i = 0; i < n_orig_cmdlen; i++) {
    96022ff8:	d2800006 	mov	x6, #0x0                   	// #0
			continue;
		} else if (4 == mood) {
			if (*p == curr_char) /* match, try rest */
				p++, mood = 1;
			else /* no match, wait until the next cmd */
				mood = 2;
    96022ffc:	52800048 	mov	w8, #0x2                   	// #2
			if ('=' == curr_char || ' ' == curr_char)
    96023000:	5280040a 	mov	w10, #0x20                  	// #32
				} else if (' ' == curr_char || '=' == curr_char) {
    96023004:	528007ab 	mov	w11, #0x3d                  	// #61
						mood = 2; /* alas, wait until the next cmd */
    96023008:	5280006c 	mov	w12, #0x3                   	// #3
	for (i = 0; i < n_orig_cmdlen; i++) {
    9602300c:	6b06013f 	cmp	w9, w6
    96023010:	5400006c 	b.gt	9602301c <does_command_exist+0x5c>
		return 0;
    96023014:	52800000 	mov	w0, #0x0                   	// #0
			continue;
		}
	}

	return 0;
}
    96023018:	d65f03c0 	ret
		curr_char = s_cmdline[i];
    9602301c:	386768c2 	ldrb	w2, [x6, x7]
		if (0 == mood) { /* skip space */
    96023020:	35000121 	cbnz	w1, 96023044 <does_command_exist+0x84>
			if ('"' == curr_char) /* quote at the begining of a cmd */
    96023024:	7100885f 	cmp	w2, #0x22
    96023028:	540007e0 	b.eq	96023124 <does_command_exist+0x164>  // b.none
			if (*p == curr_char) /* match, try rest */
    9602302c:	39400061 	ldrb	w1, [x3]
    96023030:	6b02003f 	cmp	w1, w2
    96023034:	54000321 	b.ne	96023098 <does_command_exist+0xd8>  // b.any
				p++, mood = 1;
    96023038:	91000463 	add	x3, x3, #0x1
    9602303c:	52800021 	mov	w1, #0x1                   	// #1
    96023040:	1400000a 	b	96023068 <does_command_exist+0xa8>
		} else if (1 == mood) { /* try matching cmd */
    96023044:	7100043f 	cmp	w1, #0x1
    96023048:	54000461 	b.ne	960230d4 <does_command_exist+0x114>  // b.any
			if (*p == curr_char) { /* match character */
    9602304c:	39400064 	ldrb	w4, [x3]
    96023050:	6b04005f 	cmp	w2, w4
    96023054:	540000e1 	b.ne	96023070 <does_command_exist+0xb0>  // b.any
				if ('"' == curr_char) /* keep the quote logic happy */ {
    96023058:	7100885f 	cmp	w2, #0x22
    9602305c:	54000041 	b.ne	96023064 <does_command_exist+0xa4>  // b.any
    96023060:	52000000 	eor	w0, w0, #0x1
				p++;
    96023064:	91000463 	add	x3, x3, #0x1
    96023068:	910004c6 	add	x6, x6, #0x1
    9602306c:	17ffffe8 	b	9602300c <does_command_exist+0x4c>
			} else if (*p) { /* match failed */
    96023070:	34000184 	cbz	w4, 960230a0 <does_command_exist+0xe0>
				if (' ' == curr_char) { /* separator ? */
    96023074:	7100805f 	cmp	w2, #0x20
    96023078:	540000a1 	b.ne	9602308c <does_command_exist+0xcc>  // b.any
					if (quote) /* not end of cmd in quote */
    9602307c:	7100001f 	cmp	w0, #0x0
    96023080:	9a851063 	csel	x3, x3, x5, ne  // ne = any
    96023084:	1a9f1101 	csel	w1, w8, wzr, ne  // ne = any
    96023088:	17fffff8 	b	96023068 <does_command_exist+0xa8>
					if ('"' == curr_char) /* keep the quote logic happy */ {
    9602308c:	7100885f 	cmp	w2, #0x22
    96023090:	54000041 	b.ne	96023098 <does_command_exist+0xd8>  // b.any
    96023094:	52000000 	eor	w0, w0, #0x1
				mood = 2;
    96023098:	52800041 	mov	w1, #0x2                   	// #2
    9602309c:	17fffff3 	b	96023068 <does_command_exist+0xa8>
				if (quote) { /* quoted */
    960230a0:	340000e0 	cbz	w0, 960230bc <does_command_exist+0xfc>
					if ('=' == curr_char) {
    960230a4:	7100f45f 	cmp	w2, #0x3d
    960230a8:	54fffb80 	b.eq	96023018 <does_command_exist+0x58>  // b.none
						mood = 2; /* alas, wait until the next cmd */
    960230ac:	7100885f 	cmp	w2, #0x22
    960230b0:	1a880181 	csel	w1, w12, w8, eq  // eq = none
    960230b4:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    960230b8:	17ffffec 	b	96023068 <does_command_exist+0xa8>
				} else if (' ' == curr_char || '=' == curr_char) {
    960230bc:	7100805f 	cmp	w2, #0x20
    960230c0:	7a4b1044 	ccmp	w2, w11, #0x4, ne  // ne = any
    960230c4:	540002c0 	b.eq	9602311c <does_command_exist+0x15c>  // b.none
					if ('"' == curr_char) /* keep the quote logic happy */ {
    960230c8:	7100885f 	cmp	w2, #0x22
    960230cc:	1a9f17e0 	cset	w0, eq  // eq = none
    960230d0:	17fffff2 	b	96023098 <does_command_exist+0xd8>
		} else if (2 == mood) { /* wait until the next cmd */
    960230d4:	7100083f 	cmp	w1, #0x2
    960230d8:	54000181 	b.ne	96023108 <does_command_exist+0x148>  // b.any
    960230dc:	52000004 	eor	w4, w0, #0x1
			if ('"' == curr_char) /* quote */
    960230e0:	7100885f 	cmp	w2, #0x22
    960230e4:	54000260 	b.eq	96023130 <does_command_exist+0x170>  // b.none
			else if (!quote && ' ' == curr_char) /* end of a cmd */
    960230e8:	7100805f 	cmp	w2, #0x20
    960230ec:	12000084 	and	w4, w4, #0x1
    960230f0:	1a9f0084 	csel	w4, w4, wzr, eq  // eq = none
    960230f4:	34fffba4 	cbz	w4, 96023068 <does_command_exist+0xa8>
    960230f8:	aa0503e3 	mov	x3, x5
				p = command, mood = 0; /* try the next cmd */
    960230fc:	52800001 	mov	w1, #0x0                   	// #0
			else if (!quote && ' ' == curr_char) /* end of a cmd */
    96023100:	52800000 	mov	w0, #0x0                   	// #0
    96023104:	17ffffd9 	b	96023068 <does_command_exist+0xa8>
		} else if (3 == mood) { /* matched cmd string while quoted */
    96023108:	71000c3f 	cmp	w1, #0x3
    9602310c:	54fff901 	b.ne	9602302c <does_command_exist+0x6c>  // b.any
			if ('=' == curr_char || ' ' == curr_char)
    96023110:	7100f45f 	cmp	w2, #0x3d
    96023114:	7a4a1044 	ccmp	w2, w10, #0x4, ne  // ne = any
    96023118:	54fffc01 	b.ne	96023098 <does_command_exist+0xd8>  // b.any
		return !0;
    9602311c:	52800020 	mov	w0, #0x1                   	// #1
    96023120:	17ffffbe 	b	96023018 <does_command_exist+0x58>
				mood = 4, quote = !0;
    96023124:	52800020 	mov	w0, #0x1                   	// #1
    96023128:	52800081 	mov	w1, #0x4                   	// #4
    9602312c:	17ffffcf 	b	96023068 <does_command_exist+0xa8>
				quote = !quote;
    96023130:	2a0403e0 	mov	w0, w4
    96023134:	17ffffcd 	b	96023068 <does_command_exist+0xa8>

0000000096023138 <tegrabl_linuxboot_add_string>:
	if (!cmdline || !param) {
    96023138:	f100001f 	cmp	x0, #0x0
    9602313c:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96023140:	54000180 	b.eq	96023170 <tegrabl_linuxboot_add_string+0x38>  // b.none
    96023144:	93407c21 	sxtw	x1, w1
	if (priv)
    96023148:	b40000c3 	cbz	x3, 96023160 <tegrabl_linuxboot_add_string+0x28>
		return tegrabl_snprintf(cmdline, len, "%s=%s ", param, (char *)priv);
    9602314c:	aa0303e4 	mov	x4, x3
    96023150:	aa0203e3 	mov	x3, x2
    96023154:	90000102 	adrp	x2, 96043000 <common_params>
    96023158:	9110dc42 	add	x2, x2, #0x437
    9602315c:	17fffd1a 	b	960225c4 <tegrabl_snprintf>
		return tegrabl_snprintf(cmdline, len, "%s ", param);
    96023160:	aa0203e3 	mov	x3, x2
    96023164:	90000102 	adrp	x2, 96043000 <common_params>
    96023168:	9110e842 	add	x2, x2, #0x43a
    9602316c:	17fffd16 	b	960225c4 <tegrabl_snprintf>
}
    96023170:	12800000 	mov	w0, #0xffffffff            	// #-1
    96023174:	d65f03c0 	ret

0000000096023178 <tegrabl_linuxboot_add_rootfs_param>:
	if (!cmdline || !param) {
    96023178:	f100001f 	cmp	x0, #0x0
    9602317c:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96023180:	54000101 	b.ne	960231a0 <tegrabl_linuxboot_add_rootfs_param+0x28>  // b.any
		return -1;
    96023184:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96023188:	d65f03c0 	ret
		return -1;
    9602318c:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96023190:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023194:	f94013f5 	ldr	x21, [sp, #32]
    96023198:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602319c:	d65f03c0 	ret
{
    960231a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960231a4:	910003fd 	mov	x29, sp
    960231a8:	a90153f3 	stp	x19, x20, [sp, #16]
    960231ac:	aa0003f3 	mov	x19, x0
    960231b0:	f90013f5 	str	x21, [sp, #32]
    960231b4:	aa0203f4 	mov	x20, x2
    960231b8:	2a0103f5 	mov	w21, w1
	error = tegrabl_a_b_get_rootfs_suffix(rootfs_suffix, false);
    960231bc:	9100e3a0 	add	x0, x29, #0x38
    960231c0:	52800001 	mov	w1, #0x0                   	// #0
    960231c4:	94002873 	bl	9602d390 <tegrabl_a_b_get_rootfs_suffix>
	if (error != TEGRABL_NO_ERROR) {
    960231c8:	35fffe20 	cbnz	w0, 9602318c <tegrabl_linuxboot_add_rootfs_param+0x14>
	return tegrabl_linuxboot_add_string(cmdline, len, param, rootfs_suffix);
    960231cc:	9100e3a3 	add	x3, x29, #0x38
    960231d0:	aa1403e2 	mov	x2, x20
    960231d4:	2a1503e1 	mov	w1, w21
    960231d8:	aa1303e0 	mov	x0, x19
    960231dc:	97ffffd7 	bl	96023138 <tegrabl_linuxboot_add_string>
    960231e0:	17ffffec 	b	96023190 <tegrabl_linuxboot_add_rootfs_param+0x18>

00000000960231e4 <check_ignore_fastboot_cmd.constprop.3>:
static bool check_ignore_fastboot_cmd(const char *cmd, int length,
    960231e4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	if ('"' == s_cmdline[start]) {
    960231e8:	d0000263 	adrp	x3, 96071000 <msg+0x540>
    960231ec:	93407c25 	sxtw	x5, w1
    960231f0:	910b2063 	add	x3, x3, #0x2c8
static bool check_ignore_fastboot_cmd(const char *cmd, int length,
    960231f4:	910003fd 	mov	x29, sp
    960231f8:	f9000bf3 	str	x19, [sp, #16]
    960231fc:	4b010044 	sub	w4, w2, w1
    96023200:	d0000273 	adrp	x19, 96071000 <msg+0x540>
	if ('"' == s_cmdline[start]) {
    96023204:	38656866 	ldrb	w6, [x3, x5]
    96023208:	710088df 	cmp	w6, #0x22
    9602320c:	540002e1 	b.ne	96023268 <check_ignore_fastboot_cmd.constprop.3+0x84>  // b.any
		if (length == end - start - 2 &&
    96023210:	51000884 	sub	w4, w4, #0x2
    96023214:	6b00009f 	cmp	w4, w0
    96023218:	540001c1 	b.ne	96023250 <check_ignore_fastboot_cmd.constprop.3+0x6c>  // b.any
			'"' == s_cmdline[end - 1])
    9602321c:	51000442 	sub	w2, w2, #0x1
		if (length == end - start - 2 &&
    96023220:	3862c860 	ldrb	w0, [x3, w2, sxtw]
    96023224:	7100881f 	cmp	w0, #0x22
    96023228:	54000141 	b.ne	96023250 <check_ignore_fastboot_cmd.constprop.3+0x6c>  // b.any
			n_ignore_fastboot = !memcmp(&s_cmdline[start + 1], cmd, length);
    9602322c:	11000420 	add	w0, w1, #0x1
    96023230:	93407c82 	sxtw	x2, w4
    96023234:	f00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    96023238:	913fac21 	add	x1, x1, #0xfeb
    9602323c:	8b20c060 	add	x0, x3, w0, sxtw
			n_ignore_fastboot = !memcmp(&s_cmdline[start], cmd, length);
    96023240:	94001b8c 	bl	9602a070 <memcmp>
    96023244:	7100001f 	cmp	w0, #0x0
    96023248:	1a9f17e0 	cset	w0, eq  // eq = none
    9602324c:	b902c260 	str	w0, [x19, #704]
	return n_ignore_fastboot;
    96023250:	b942c260 	ldr	w0, [x19, #704]
}
    96023254:	f9400bf3 	ldr	x19, [sp, #16]
	return n_ignore_fastboot;
    96023258:	7100001f 	cmp	w0, #0x0
}
    9602325c:	1a9f07e0 	cset	w0, ne  // ne = any
    96023260:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96023264:	d65f03c0 	ret
		if (length == end - start)
    96023268:	6b04001f 	cmp	w0, w4
    9602326c:	54ffff21 	b.ne	96023250 <check_ignore_fastboot_cmd.constprop.3+0x6c>  // b.any
			n_ignore_fastboot = !memcmp(&s_cmdline[start], cmd, length);
    96023270:	93407c02 	sxtw	x2, w0
    96023274:	f00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    96023278:	8b050060 	add	x0, x3, x5
    9602327c:	913fac21 	add	x1, x1, #0xfeb
    96023280:	17fffff0 	b	96023240 <check_ignore_fastboot_cmd.constprop.3+0x5c>

0000000096023284 <tegrabl_linuxboot_prepare_cmdline>:

char *tegrabl_linuxboot_prepare_cmdline(char *initcmdline)
{
    96023284:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    96023288:	910003fd 	mov	x29, sp
    9602328c:	a90153f3 	stp	x19, x20, [sp, #16]
    96023290:	a9025bf5 	stp	x21, x22, [sp, #32]
    96023294:	aa0003f6 	mov	x22, x0
    96023298:	a90363f7 	stp	x23, x24, [sp, #48]
	int idx, remain;
	uint32_t i;
	struct tegrabl_linuxboot_param *extra_params = NULL;
	char *bootimg_cmdline = tegrabl_get_bootimg_cmdline();

	memset(s_cmdline, 0, sizeof(s_cmdline));
    9602329c:	d0000275 	adrp	x21, 96071000 <msg+0x540>
{
    960232a0:	a9046bf9 	stp	x25, x26, [sp, #64]
    960232a4:	a90573fb 	stp	x27, x28, [sp, #80]
	memset(s_cmdline, 0, sizeof(s_cmdline));
    960232a8:	910b22bc 	add	x28, x21, #0x2c8
	struct tegrabl_linuxboot_param *extra_params = NULL;
    960232ac:	f9003fbf 	str	xzr, [x29, #120]
	char *bootimg_cmdline = tegrabl_get_bootimg_cmdline();
    960232b0:	94000b75 	bl	96026084 <tegrabl_get_bootimg_cmdline>
	memset(s_cmdline, 0, sizeof(s_cmdline));
    960232b4:	d2810002 	mov	x2, #0x800                 	// #2048
    960232b8:	52800001 	mov	w1, #0x0                   	// #0
	char *bootimg_cmdline = tegrabl_get_bootimg_cmdline();
    960232bc:	aa0003f7 	mov	x23, x0
	memset(s_cmdline, 0, sizeof(s_cmdline));
    960232c0:	aa1c03e0 	mov	x0, x28
    960232c4:	94001ad9 	bl	96029e28 <memset>
	int32_t ignore_fastboot_cmdlen = strlen(ignore_fastboot_cmd);
    960232c8:	f00000e0 	adrp	x0, 96042000 <__func__.4833+0x5>
    960232cc:	913fac00 	add	x0, x0, #0xfeb
    960232d0:	94001c0f 	bl	9602a30c <strlen>
	if (!cmdline) { /* Nothing to do. Early return */
    960232d4:	b5000536 	cbnz	x22, 96023378 <tegrabl_linuxboot_prepare_cmdline+0xf4>
		s_cmdline[0] = '\0';
    960232d8:	390b22bf 	strb	wzr, [x21, #712]
		return 0;
    960232dc:	52800013 	mov	w19, #0x0                   	// #0
	i = init_cmd_list(initcmdline);

	remain = sizeof(s_cmdline) / sizeof(char) - i;
	ptr = &s_cmdline[i];
    960232e0:	910b22a0 	add	x0, x21, #0x2c8
	remain = sizeof(s_cmdline) / sizeof(char) - i;
    960232e4:	52810014 	mov	w20, #0x800                 	// #2048
    960232e8:	4b130294 	sub	w20, w20, w19
	ptr = &s_cmdline[i];
    960232ec:	8b334013 	add	x19, x0, w19, uxtw

	if (bootimg_cmdline && strlen(bootimg_cmdline)) {
    960232f0:	b4000217 	cbz	x23, 96023330 <tegrabl_linuxboot_prepare_cmdline+0xac>
    960232f4:	aa1703e0 	mov	x0, x23
    960232f8:	94001c05 	bl	9602a30c <strlen>
    960232fc:	b40001a0 	cbz	x0, 96023330 <tegrabl_linuxboot_prepare_cmdline+0xac>
		pr_debug("Bootimg cmdline: %s\n", bootimg_cmdline);
		idx = tegrabl_linuxboot_add_string(ptr, remain, bootimg_cmdline, NULL);
    96023300:	d2800003 	mov	x3, #0x0                   	// #0
    96023304:	aa1703e2 	mov	x2, x23
    96023308:	2a1403e1 	mov	w1, w20
    9602330c:	aa1303e0 	mov	x0, x19
    96023310:	97ffff8a 	bl	96023138 <tegrabl_linuxboot_add_string>
		if (idx <= 0) {
    96023314:	7100001f 	cmp	w0, #0x0
    96023318:	540010ac 	b.gt	9602352c <tegrabl_linuxboot_prepare_cmdline+0x2a8>
			pr_error("%s: failed to integrate bootimg cmdline\n", __func__);
    9602331c:	f00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    96023320:	90000100 	adrp	x0, 96043000 <common_params>
    96023324:	913f2421 	add	x1, x1, #0xfc9
    96023328:	9110f800 	add	x0, x0, #0x43e
    9602332c:	97fffcd1 	bl	96022670 <tegrabl_printf>
    96023330:	90000116 	adrp	x22, 96043000 <common_params>
	}

	for (i = 0; common_params[i].str != NULL; i++) {
		if (!does_command_exist(common_params[i].str)) {
			if (common_params[i].append == NULL) {
				pr_error("No append-handler for '%s'\n", common_params[i].str);
    96023334:	90000117 	adrp	x23, 96043000 <common_params>
    96023338:	910002d6 	add	x22, x22, #0x0
    9602333c:	911256f7 	add	x23, x23, #0x495
	for (i = 0; common_params[i].str != NULL; i++) {
    96023340:	f94002cd 	ldr	x13, [x22]
    96023344:	b500124d 	cbnz	x13, 9602358c <tegrabl_linuxboot_prepare_cmdline+0x308>
			}
		}
		pr_debug("Cmdline: %s\n", s_cmdline);
	}

	if ((tegrabl_linuxboot_helper_get_info(
    96023348:	9101e3a2 	add	x2, x29, #0x78
    9602334c:	d2800001 	mov	x1, #0x0                   	// #0
    96023350:	52800000 	mov	w0, #0x0                   	// #0
    96023354:	940008a9 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    96023358:	35000fa0 	cbnz	w0, 9602354c <tegrabl_linuxboot_prepare_cmdline+0x2c8>
			TEGRABL_LINUXBOOT_INFO_EXTRA_CMDLINE_PARAMS,
			NULL, &extra_params) == TEGRABL_NO_ERROR) && (extra_params)) {
    9602335c:	f9403fa0 	ldr	x0, [x29, #120]
    96023360:	b4000f60 	cbz	x0, 9602354c <tegrabl_linuxboot_prepare_cmdline+0x2c8>
		pr_debug("%s: extra_params: %p\n", __func__, extra_params);
		for (i = 0; extra_params[i].str != NULL; i++) {
			if (!does_command_exist(extra_params[i].str)) {
				if (extra_params[i].append == NULL) {
					pr_error("No append-handler for '%s'\n",
    96023364:	90000117 	adrp	x23, 96043000 <common_params>
		for (i = 0; extra_params[i].str != NULL; i++) {
    96023368:	52800016 	mov	w22, #0x0                   	// #0
    9602336c:	52800318 	mov	w24, #0x18                  	// #24
					pr_error("No append-handler for '%s'\n",
    96023370:	911256f7 	add	x23, x23, #0x495
    96023374:	140000a4 	b	96023604 <tegrabl_linuxboot_prepare_cmdline+0x380>
    96023378:	aa0003f8 	mov	x24, x0
	len_cmdline = strlen(cmdline);
    9602337c:	aa1603fa 	mov	x26, x22
    96023380:	aa1603e0 	mov	x0, x22
	int32_t ignore_fastboot_cmdlen = strlen(ignore_fastboot_cmd);
    96023384:	b9006fb8 	str	w24, [x29, #108]
	len_cmdline = strlen(cmdline);
    96023388:	94001be1 	bl	9602a30c <strlen>
	int32_t next, mood = 0, quote = 0, start = 0;
    9602338c:	52800014 	mov	w20, #0x0                   	// #0
					if (!n_ignore_fastboot) {
    96023390:	d0000266 	adrp	x6, 96071000 <msg+0x540>
	int32_t next, mood = 0, quote = 0, start = 0;
    96023394:	52800019 	mov	w25, #0x0                   	// #0
					if (!n_ignore_fastboot) {
    96023398:	910b00db 	add	x27, x6, #0x2c0
	for (i = next = 0; (i < len_cmdline) && (i < COMMAND_LINE_SIZE); i++) {
    9602339c:	52800013 	mov	w19, #0x0                   	// #0
	int32_t next, mood = 0, quote = 0, start = 0;
    960233a0:	52800004 	mov	w4, #0x0                   	// #0
					if (!n_ignore_fastboot) {
    960233a4:	f90033bb 	str	x27, [x29, #96]
	len_cmdline = strlen(cmdline);
    960233a8:	b9006ba0 	str	w0, [x29, #104]
    960233ac:	4b160340 	sub	w0, w26, w22
	for (i = next = 0; (i < len_cmdline) && (i < COMMAND_LINE_SIZE); i++) {
    960233b0:	b9406ba1 	ldr	w1, [x29, #104]
    960233b4:	711ffc1f 	cmp	w0, #0x7ff
    960233b8:	7a419002 	ccmp	w0, w1, #0x2, ls  // ls = plast
    960233bc:	54000722 	b.cs	960234a0 <tegrabl_linuxboot_prepare_cmdline+0x21c>  // b.hs, b.nlast
		curr_char = cmdline[i];
    960233c0:	39400342 	ldrb	w2, [x26]
    960233c4:	2a0203e0 	mov	w0, w2
    960233c8:	97fffef3 	bl	96022f94 <iswhitespace>
    960233cc:	12001c00 	and	w0, w0, #0xff
		if (0 == mood) {
    960233d0:	35000184 	cbnz	w4, 96023400 <tegrabl_linuxboot_prepare_cmdline+0x17c>
			if (!iswhitespace(curr_char)) {
    960233d4:	350009e0 	cbnz	w0, 96023510 <tegrabl_linuxboot_prepare_cmdline+0x28c>
				if (curr_char) {
    960233d8:	34000642 	cbz	w2, 960234a0 <tegrabl_linuxboot_prepare_cmdline+0x21c>
					s_cmdline[start = next++] = curr_char;
    960233dc:	3833cb82 	strb	w2, [x28, w19, sxtw]
    960233e0:	11000660 	add	w0, w19, #0x1
					if ('"' == curr_char) /* quote */ {
    960233e4:	2a1303f4 	mov	w20, w19
    960233e8:	7100885f 	cmp	w2, #0x22
    960233ec:	54000960 	b.eq	96023518 <tegrabl_linuxboot_prepare_cmdline+0x294>  // b.none
					mood = 1;
    960233f0:	52800024 	mov	w4, #0x1                   	// #1
    960233f4:	9100075a 	add	x26, x26, #0x1
	for (i = next = 0; (i < len_cmdline) && (i < COMMAND_LINE_SIZE); i++) {
    960233f8:	2a0003f3 	mov	w19, w0
    960233fc:	17ffffec 	b	960233ac <tegrabl_linuxboot_prepare_cmdline+0x128>
			if (iswhitespace(curr_char)) {
    96023400:	340002a0 	cbz	w0, 96023454 <tegrabl_linuxboot_prepare_cmdline+0x1d0>
				if (quote) {/* quoted -> space does not count as a separator */
    96023404:	340000b9 	cbz	w25, 96023418 <tegrabl_linuxboot_prepare_cmdline+0x194>
					s_cmdline[next++] = curr_char;
    96023408:	11000660 	add	w0, w19, #0x1
    9602340c:	3833cb82 	strb	w2, [x28, w19, sxtw]
					mood = 1;
    96023410:	2a1903e4 	mov	w4, w25
    96023414:	17fffff8 	b	960233f4 <tegrabl_linuxboot_prepare_cmdline+0x170>
					if (!n_ignore_fastboot) {
    96023418:	b9400360 	ldr	w0, [x27]
    9602341c:	350000e0 	cbnz	w0, 96023438 <tegrabl_linuxboot_prepare_cmdline+0x1b4>
						if (check_ignore_fastboot_cmd(ignore_fastboot_cmd,
    96023420:	b9406fa0 	ldr	w0, [x29, #108]
    96023424:	2a1303e2 	mov	w2, w19
    96023428:	2a1403e1 	mov	w1, w20
    9602342c:	97ffff6e 	bl	960231e4 <check_ignore_fastboot_cmd.constprop.3>
    96023430:	72001c1f 	tst	w0, #0xff
    96023434:	1a940273 	csel	w19, w19, w20, eq  // eq = none
					if (!n_ignore_fastboot) {
    96023438:	f94033a0 	ldr	x0, [x29, #96]
    9602343c:	b9400004 	ldr	w4, [x0]
    96023440:	35000704 	cbnz	w4, 96023520 <tegrabl_linuxboot_prepare_cmdline+0x29c>
						s_cmdline[next++] = ' ';
    96023444:	52800401 	mov	w1, #0x20                  	// #32
    96023448:	11000660 	add	w0, w19, #0x1
    9602344c:	3833cb81 	strb	w1, [x28, w19, sxtw]
    96023450:	17ffffe9 	b	960233f4 <tegrabl_linuxboot_prepare_cmdline+0x170>
			} else if ('"' == curr_char) {/* quote character */
    96023454:	7100885f 	cmp	w2, #0x22
    96023458:	540000a1 	b.ne	9602346c <tegrabl_linuxboot_prepare_cmdline+0x1e8>  // b.any
				s_cmdline[next++] = curr_char, quote = !quote;
    9602345c:	11000660 	add	w0, w19, #0x1
    96023460:	3833cb82 	strb	w2, [x28, w19, sxtw]
    96023464:	52000339 	eor	w25, w25, #0x1
    96023468:	17ffffe3 	b	960233f4 <tegrabl_linuxboot_prepare_cmdline+0x170>
				if (curr_char) { /* non-space, non-quote, non-null */
    9602346c:	34000082 	cbz	w2, 9602347c <tegrabl_linuxboot_prepare_cmdline+0x1f8>
					s_cmdline[next++] = curr_char;
    96023470:	11000660 	add	w0, w19, #0x1
    96023474:	3833cb82 	strb	w2, [x28, w19, sxtw]
    96023478:	17ffffdf 	b	960233f4 <tegrabl_linuxboot_prepare_cmdline+0x170>
					if (!n_ignore_fastboot) {
    9602347c:	d0000260 	adrp	x0, 96071000 <msg+0x540>
    96023480:	b942c000 	ldr	w0, [x0, #704]
    96023484:	350000e0 	cbnz	w0, 960234a0 <tegrabl_linuxboot_prepare_cmdline+0x21c>
						if (check_ignore_fastboot_cmd(ignore_fastboot_cmd,
    96023488:	2a1303e2 	mov	w2, w19
    9602348c:	2a1403e1 	mov	w1, w20
    96023490:	2a1803e0 	mov	w0, w24
    96023494:	97ffff54 	bl	960231e4 <check_ignore_fastboot_cmd.constprop.3>
    96023498:	72001c1f 	tst	w0, #0xff
    9602349c:	1a940273 	csel	w19, w19, w20, eq  // eq = none
	if (next) {
    960234a0:	340002f3 	cbz	w19, 960234fc <tegrabl_linuxboot_prepare_cmdline+0x278>
		if (quote)
    960234a4:	340000b9 	cbz	w25, 960234b8 <tegrabl_linuxboot_prepare_cmdline+0x234>
			s_cmdline[next++] = '"';
    960234a8:	910b22a0 	add	x0, x21, #0x2c8
    960234ac:	52800441 	mov	w1, #0x22                  	// #34
    960234b0:	3833c801 	strb	w1, [x0, w19, sxtw]
    960234b4:	11000673 	add	w19, w19, #0x1
		if (!n_ignore_fastboot) {
    960234b8:	d0000260 	adrp	x0, 96071000 <msg+0x540>
    960234bc:	b942c000 	ldr	w0, [x0, #704]
    960234c0:	350000e0 	cbnz	w0, 960234dc <tegrabl_linuxboot_prepare_cmdline+0x258>
			if (check_ignore_fastboot_cmd(ignore_fastboot_cmd,
    960234c4:	2a1303e2 	mov	w2, w19
    960234c8:	2a1403e1 	mov	w1, w20
    960234cc:	2a1803e0 	mov	w0, w24
    960234d0:	97ffff45 	bl	960231e4 <check_ignore_fastboot_cmd.constprop.3>
    960234d4:	72001c1f 	tst	w0, #0xff
    960234d8:	1a940273 	csel	w19, w19, w20, eq  // eq = none
		if (' ' != s_cmdline[next - 1])
    960234dc:	910b22a0 	add	x0, x21, #0x2c8
    960234e0:	51000661 	sub	w1, w19, #0x1
    960234e4:	3861c801 	ldrb	w1, [x0, w1, sxtw]
    960234e8:	7100803f 	cmp	w1, #0x20
    960234ec:	54000080 	b.eq	960234fc <tegrabl_linuxboot_prepare_cmdline+0x278>  // b.none
			s_cmdline[next++] = ' ';
    960234f0:	52800401 	mov	w1, #0x20                  	// #32
    960234f4:	3833c801 	strb	w1, [x0, w19, sxtw]
    960234f8:	11000673 	add	w19, w19, #0x1
	s_cmdline[next] = 0; /* The END */
    960234fc:	910b22a0 	add	x0, x21, #0x2c8
    96023500:	3833c81f 	strb	wzr, [x0, w19, sxtw]
	return n_orig_cmdlen = next;
    96023504:	d0000260 	adrp	x0, 96071000 <msg+0x540>
    96023508:	b902c413 	str	w19, [x0, #708]
    9602350c:	17ffff75 	b	960232e0 <tegrabl_linuxboot_prepare_cmdline+0x5c>
			if (!iswhitespace(curr_char)) {
    96023510:	2a1303e0 	mov	w0, w19
    96023514:	17ffffb8 	b	960233f4 <tegrabl_linuxboot_prepare_cmdline+0x170>
						quote = !0;
    96023518:	52800039 	mov	w25, #0x1                   	// #1
    9602351c:	17ffffbd 	b	96023410 <tegrabl_linuxboot_prepare_cmdline+0x18c>
					if (!n_ignore_fastboot) {
    96023520:	2a1303e0 	mov	w0, w19
					mood = 0;
    96023524:	52800004 	mov	w4, #0x0                   	// #0
    96023528:	17ffffb3 	b	960233f4 <tegrabl_linuxboot_prepare_cmdline+0x170>
		} else if (idx > remain) {
    9602352c:	6b00029f 	cmp	w20, w0
    96023530:	5400028a 	b.ge	96023580 <tegrabl_linuxboot_prepare_cmdline+0x2fc>  // b.tcont
			pr_error("%s: bootimg cmdline is truncated to %s\n", __func__, ptr);
    96023534:	f00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    96023538:	90000100 	adrp	x0, 96043000 <common_params>
    9602353c:	aa1303e2 	mov	x2, x19
    96023540:	913f2421 	add	x1, x1, #0xfc9
    96023544:	9111a800 	add	x0, x0, #0x46a
    96023548:	97fffc4a 	bl	96022670 <tegrabl_printf>
		}
		pr_debug("Cmdline: %s\n", s_cmdline);
	}

done:
	pr_info("Linux Cmdline: %s\n", s_cmdline);
    9602354c:	910b22b5 	add	x21, x21, #0x2c8
    96023550:	90000100 	adrp	x0, 96043000 <common_params>
    96023554:	aa1503e1 	mov	x1, x21
    96023558:	9112d000 	add	x0, x0, #0x4b4
    9602355c:	97fffc45 	bl	96022670 <tegrabl_printf>

	return s_cmdline;
}
    96023560:	aa1503e0 	mov	x0, x21
    96023564:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023568:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602356c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96023570:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96023574:	a94573fb 	ldp	x27, x28, [sp, #80]
    96023578:	a8c87bfd 	ldp	x29, x30, [sp], #128
    9602357c:	d65f03c0 	ret
			remain -= idx;
    96023580:	4b000294 	sub	w20, w20, w0
			ptr += idx;
    96023584:	8b20c273 	add	x19, x19, w0, sxtw
    96023588:	17ffff6a 	b	96023330 <tegrabl_linuxboot_prepare_cmdline+0xac>
		if (!does_command_exist(common_params[i].str)) {
    9602358c:	aa0d03e0 	mov	x0, x13
    96023590:	97fffe8c 	bl	96022fc0 <does_command_exist>
    96023594:	350000c0 	cbnz	w0, 960235ac <tegrabl_linuxboot_prepare_cmdline+0x328>
			if (common_params[i].append == NULL) {
    96023598:	f94006c4 	ldr	x4, [x22, #8]
    9602359c:	b50000c4 	cbnz	x4, 960235b4 <tegrabl_linuxboot_prepare_cmdline+0x330>
				pr_error("No append-handler for '%s'\n", common_params[i].str);
    960235a0:	aa0d03e1 	mov	x1, x13
    960235a4:	aa1703e0 	mov	x0, x23
    960235a8:	97fffc32 	bl	96022670 <tegrabl_printf>
    960235ac:	910062d6 	add	x22, x22, #0x18
    960235b0:	17ffff64 	b	96023340 <tegrabl_linuxboot_prepare_cmdline+0xbc>
			idx = common_params[i].append(ptr, remain,
    960235b4:	f9400ac3 	ldr	x3, [x22, #16]
    960235b8:	aa0d03e2 	mov	x2, x13
    960235bc:	2a1403e1 	mov	w1, w20
    960235c0:	aa1303e0 	mov	x0, x19
    960235c4:	d63f0080 	blr	x4
			if ((idx > 0) && (idx <= remain)) {
    960235c8:	7100001f 	cmp	w0, #0x0
    960235cc:	7a40c281 	ccmp	w20, w0, #0x1, gt
    960235d0:	54fffeeb 	b.lt	960235ac <tegrabl_linuxboot_prepare_cmdline+0x328>  // b.tstop
				remain -= idx;
    960235d4:	4b000294 	sub	w20, w20, w0
				ptr += idx;
    960235d8:	8b20c273 	add	x19, x19, w0, sxtw
    960235dc:	17fffff4 	b	960235ac <tegrabl_linuxboot_prepare_cmdline+0x328>
			if (!does_command_exist(extra_params[i].str)) {
    960235e0:	aa0d03e0 	mov	x0, x13
    960235e4:	97fffe77 	bl	96022fc0 <does_command_exist>
    960235e8:	350000c0 	cbnz	w0, 96023600 <tegrabl_linuxboot_prepare_cmdline+0x37c>
				if (extra_params[i].append == NULL) {
    960235ec:	f94005c4 	ldr	x4, [x14, #8]
    960235f0:	b5000164 	cbnz	x4, 9602361c <tegrabl_linuxboot_prepare_cmdline+0x398>
					pr_error("No append-handler for '%s'\n",
    960235f4:	aa0d03e1 	mov	x1, x13
    960235f8:	aa1703e0 	mov	x0, x23
    960235fc:	97fffc1d 	bl	96022670 <tegrabl_printf>
		for (i = 0; extra_params[i].str != NULL; i++) {
    96023600:	110006d6 	add	w22, w22, #0x1
    96023604:	9bb87ec0 	umull	x0, w22, w24
    96023608:	f9403fa1 	ldr	x1, [x29, #120]
    9602360c:	8b00002e 	add	x14, x1, x0
    96023610:	f860682d 	ldr	x13, [x1, x0]
    96023614:	b5fffe6d 	cbnz	x13, 960235e0 <tegrabl_linuxboot_prepare_cmdline+0x35c>
    96023618:	17ffffcd 	b	9602354c <tegrabl_linuxboot_prepare_cmdline+0x2c8>
				idx = extra_params[i].append(ptr, remain,
    9602361c:	f94009c3 	ldr	x3, [x14, #16]
    96023620:	aa0d03e2 	mov	x2, x13
    96023624:	2a1403e1 	mov	w1, w20
    96023628:	aa1303e0 	mov	x0, x19
    9602362c:	d63f0080 	blr	x4
				if ((idx > 0) && (idx <= remain)) {
    96023630:	7100001f 	cmp	w0, #0x0
    96023634:	7a40c281 	ccmp	w20, w0, #0x1, gt
    96023638:	54fffe4b 	b.lt	96023600 <tegrabl_linuxboot_prepare_cmdline+0x37c>  // b.tstop
					remain -= idx;
    9602363c:	4b000294 	sub	w20, w20, w0
					ptr += idx;
    96023640:	8b20c273 	add	x19, x19, w0, sxtw
    96023644:	17ffffef 	b	96023600 <tegrabl_linuxboot_prepare_cmdline+0x37c>

0000000096023648 <fdt64_to_cpu>:

static inline uint64_t fdt64_to_cpu(uint64_t x)
{
	return (_B(0) << 56) | (_B(1) << 48) | (_B(2) << 40) | (_B(3) << 32)
		| (_B(4) << 24) | (_B(5) << 16) | (_B(6) << 8) | _B(7);
}
    96023648:	dac00c00 	rev	x0, x0
    9602364c:	d65f03c0 	ret

0000000096023650 <fdt64_to_cpu>:
    96023650:	dac00c00 	rev	x0, x0
    96023654:	d65f03c0 	ret

0000000096023658 <add_disp_param>:
fail:
	return err;
}

static tegrabl_error_t add_disp_param(void *fdt, int nodeoffset)
{
    96023658:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    9602365c:	910003fd 	mov	x29, sp
    96023660:	a90153f3 	stp	x19, x20, [sp, #16]
	buf[0] = cpu_to_fdt64(disp_params->addr);
    96023664:	d0000273 	adrp	x19, 96071000 <msg+0x540>
{
    96023668:	a9025bf5 	stp	x21, x22, [sp, #32]
	buf[0] = cpu_to_fdt64(disp_params->addr);
    9602366c:	912b4273 	add	x19, x19, #0xad0
{
    96023670:	a90363f7 	stp	x23, x24, [sp, #48]
	offset = tegrabl_add_subnode_if_absent(fdt, rm_offset, fb_carveout_node[instance]);
    96023674:	90000115 	adrp	x21, 96043000 <common_params>
{
    96023678:	aa0003f7 	mov	x23, x0
    9602367c:	2a0103f8 	mov	w24, w1
	offset = tegrabl_add_subnode_if_absent(fdt, rm_offset, fb_carveout_node[instance]);
    96023680:	9127e2b5 	add	x21, x21, #0x9f8
	uint32_t du_idx = 0;
	struct tegrabl_display_unit_params disp_params;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	for (du_idx = 0; du_idx < DISPLAY_OUT_MAX; du_idx++) {
    96023684:	52800014 	mov	w20, #0x0                   	// #0
		err = tegrabl_display_get_params(du_idx, &disp_params);
    96023688:	910103a1 	add	x1, x29, #0x40
    9602368c:	2a1403e0 	mov	w0, w20
    96023690:	97ff8a8e 	bl	960060c8 <tegrabl_display_get_params>
		if (err != TEGRABL_NO_ERROR) {
    96023694:	340001a0 	cbz	w0, 960236c8 <add_disp_param+0x70>
			pr_error("%s: failed to get display params for du=%d\n", __func__, du_idx);
    96023698:	90000101 	adrp	x1, 96043000 <common_params>
    9602369c:	90000100 	adrp	x0, 96043000 <common_params>
    960236a0:	2a1403e2 	mov	w2, w20
    960236a4:	91137421 	add	x1, x1, #0x4dd
    960236a8:	9117bc00 	add	x0, x0, #0x5ef
		}

		if (disp_params.size != 0) {
			err = update_fb_carveout(fdt, nodeoffset, &disp_params);
			if (err != TEGRABL_NO_ERROR) {
				pr_error("%s, failed to update display params for du=%d\n", __func__, du_idx);
    960236ac:	97fffbf1 	bl	96022670 <tegrabl_printf>
	}

fail:
	/*Having no external display is not an error*/
	return TEGRABL_NO_ERROR;
}
    960236b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960236b4:	52800000 	mov	w0, #0x0                   	// #0
    960236b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960236bc:	a94363f7 	ldp	x23, x24, [sp, #48]
    960236c0:	a8c77bfd 	ldp	x29, x30, [sp], #112
    960236c4:	d65f03c0 	ret
		if (disp_params.size != 0) {
    960236c8:	b94043a1 	ldr	w1, [x29, #64]
    960236cc:	34000341 	cbz	w1, 96023734 <add_disp_param+0xdc>
	instance = disp_params->instance;
    960236d0:	b94053a2 	ldr	w2, [x29, #80]
	buf[0] = cpu_to_fdt64(disp_params->addr);
    960236d4:	f94027a0 	ldr	x0, [x29, #72]
    960236d8:	97ffffdc 	bl	96023648 <fdt64_to_cpu>
    960236dc:	f9000260 	str	x0, [x19]
	buf[1] = cpu_to_fdt64(disp_params->size);
    960236e0:	2a0103e0 	mov	w0, w1
    960236e4:	97ffffd9 	bl	96023648 <fdt64_to_cpu>
    960236e8:	f9000660 	str	x0, [x19, #8]
	buf[2] = cpu_to_fdt64(disp_params->lut_addr);
    960236ec:	f94033a0 	ldr	x0, [x29, #96]
    960236f0:	97ffffd6 	bl	96023648 <fdt64_to_cpu>
    960236f4:	f9000a60 	str	x0, [x19, #16]
	buf[3] = cpu_to_fdt64(disp_params->lut_size);
    960236f8:	b9406ba0 	ldr	w0, [x29, #104]
    960236fc:	97ffffd3 	bl	96023648 <fdt64_to_cpu>
	offset = tegrabl_add_subnode_if_absent(fdt, rm_offset, fb_carveout_node[instance]);
    96023700:	f8625ab6 	ldr	x22, [x21, w2, uxtw #3]
	buf[3] = cpu_to_fdt64(disp_params->lut_size);
    96023704:	f9000e60 	str	x0, [x19, #24]
	offset = tegrabl_add_subnode_if_absent(fdt, rm_offset, fb_carveout_node[instance]);
    96023708:	2a1803e1 	mov	w1, w24
    9602370c:	aa1603e2 	mov	x2, x22
    96023710:	aa1703e0 	mov	x0, x23
    96023714:	94003756 	bl	9603146c <tegrabl_add_subnode_if_absent>
	if (offset < 0) {
    96023718:	36f80160 	tbz	w0, #31, 96023744 <add_disp_param+0xec>
		pr_error("%s: error in adding %s subnode in DT\n", __func__, fb_carveout_node[instance]);
    9602371c:	90000101 	adrp	x1, 96043000 <common_params>
    96023720:	90000100 	adrp	x0, 96043000 <common_params>
    96023724:	aa1603e2 	mov	x2, x22
    96023728:	91132821 	add	x1, x1, #0x4ca
    9602372c:	91187800 	add	x0, x0, #0x61e
    96023730:	97fffbd0 	bl	96022670 <tegrabl_printf>
	for (du_idx = 0; du_idx < DISPLAY_OUT_MAX; du_idx++) {
    96023734:	11000694 	add	w20, w20, #0x1
    96023738:	7100169f 	cmp	w20, #0x5
    9602373c:	54fffa61 	b.ne	96023688 <add_disp_param+0x30>  // b.any
fail:
    96023740:	17ffffdc 	b	960236b0 <add_disp_param+0x58>
	err = fdt_setprop(fdt, offset, "reg", buf, sizeof(buf));
    96023744:	b00000e2 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    96023748:	2a0003e1 	mov	w1, w0
    9602374c:	52800404 	mov	w4, #0x20                  	// #32
    96023750:	aa1303e3 	mov	x3, x19
    96023754:	91183842 	add	x2, x2, #0x60e
    96023758:	aa1703e0 	mov	x0, x23
    9602375c:	94003cfa 	bl	96032b44 <fdt_setprop>
	if (err != TEGRABL_NO_ERROR) {
    96023760:	34fffea0 	cbz	w0, 96023734 <add_disp_param+0xdc>
		pr_error("%s, error updating \"reg\" property in %s\n", __func__, fb_carveout_node[instance]);
    96023764:	aa1603e2 	mov	x2, x22
    96023768:	90000101 	adrp	x1, 96043000 <common_params>
    9602376c:	90000100 	adrp	x0, 96043000 <common_params>
    96023770:	91132821 	add	x1, x1, #0x4ca
    96023774:	91191c00 	add	x0, x0, #0x647
    96023778:	97fffbbe 	bl	96022670 <tegrabl_printf>
				pr_error("%s, failed to update display params for du=%d\n", __func__, du_idx);
    9602377c:	90000101 	adrp	x1, 96043000 <common_params>
    96023780:	90000100 	adrp	x0, 96043000 <common_params>
    96023784:	2a1403e2 	mov	w2, w20
    96023788:	91137421 	add	x1, x1, #0x4dd
    9602378c:	9119cc00 	add	x0, x0, #0x673
    96023790:	17ffffc7 	b	960236ac <add_disp_param+0x54>

0000000096023794 <add_initrd_info>:
{
    96023794:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96023798:	910003fd 	mov	x29, sp
    9602379c:	a90153f3 	stp	x19, x20, [sp, #16]
	if (tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_INITRD,
    960237a0:	910103a2 	add	x2, x29, #0x40
{
    960237a4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960237a8:	aa0003f5 	mov	x21, x0
    960237ac:	2a0103f6 	mov	w22, w1
	if (tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_INITRD,
    960237b0:	52800100 	mov	w0, #0x8                   	// #8
    960237b4:	d2800001 	mov	x1, #0x0                   	// #0
    960237b8:	94000790 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    960237bc:	350005c0 	cbnz	w0, 96023874 <add_initrd_info+0xe0>
	buf = cpu_to_fdt64((uint64_t)memblock.base);
    960237c0:	f94023a0 	ldr	x0, [x29, #64]
    960237c4:	910143b4 	add	x20, x29, #0x50
	ret = fdt_setprop(fdt, nodeoffset, "linux,initrd-start", &buf, sizeof(buf));
    960237c8:	90000113 	adrp	x19, 96043000 <common_params>
    960237cc:	911a9673 	add	x19, x19, #0x6a5
	buf = cpu_to_fdt64((uint64_t)memblock.base);
    960237d0:	97ffff9e 	bl	96023648 <fdt64_to_cpu>
    960237d4:	f81e8e80 	str	x0, [x20, #-24]!
	ret = fdt_setprop(fdt, nodeoffset, "linux,initrd-start", &buf, sizeof(buf));
    960237d8:	52800104 	mov	w4, #0x8                   	// #8
    960237dc:	aa1303e2 	mov	x2, x19
    960237e0:	aa1403e3 	mov	x3, x20
    960237e4:	2a1603e1 	mov	w1, w22
    960237e8:	aa1503e0 	mov	x0, x21
    960237ec:	94003cd6 	bl	96032b44 <fdt_setprop>
	if (ret < 0) {
    960237f0:	36f80160 	tbz	w0, #31, 9602381c <add_initrd_info+0x88>
		pr_error("Unable to set \"%s\" in FDT\n", "linux,initrd-end");
    960237f4:	aa1303e1 	mov	x1, x19
    960237f8:	90000100 	adrp	x0, 96043000 <common_params>
    960237fc:	911ae000 	add	x0, x0, #0x6b8
    96023800:	97fffb9c 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96023804:	52800440 	mov	w0, #0x22                  	// #34
    96023808:	72a56560 	movk	w0, #0x2b2b, lsl #16
}
    9602380c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023810:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96023814:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96023818:	d65f03c0 	ret
	buf = cpu_to_fdt64((uint64_t)(memblock.base + memblock.size));
    9602381c:	a94403a1 	ldp	x1, x0, [x29, #64]
	ret = fdt_setprop(fdt, nodeoffset, "linux,initrd-end", &buf, sizeof(buf));
    96023820:	90000113 	adrp	x19, 96043000 <common_params>
    96023824:	911b5a73 	add	x19, x19, #0x6d6
	buf = cpu_to_fdt64((uint64_t)(memblock.base + memblock.size));
    96023828:	8b000020 	add	x0, x1, x0
    9602382c:	97ffff87 	bl	96023648 <fdt64_to_cpu>
    96023830:	f9001fa0 	str	x0, [x29, #56]
	ret = fdt_setprop(fdt, nodeoffset, "linux,initrd-end", &buf, sizeof(buf));
    96023834:	52800104 	mov	w4, #0x8                   	// #8
    96023838:	aa1403e3 	mov	x3, x20
    9602383c:	aa1303e2 	mov	x2, x19
    96023840:	2a1603e1 	mov	w1, w22
    96023844:	aa1503e0 	mov	x0, x21
    96023848:	94003cbf 	bl	96032b44 <fdt_setprop>
	if (ret < 0) {
    9602384c:	37fffd40 	tbnz	w0, #31, 960237f4 <add_initrd_info+0x60>
	pr_info("Ramdisk: Base: 0x%lx; Size: 0x%lx\n",
    96023850:	a9440ba1 	ldp	x1, x2, [x29, #64]
    96023854:	90000100 	adrp	x0, 96043000 <common_params>
    96023858:	911b9c00 	add	x0, x0, #0x6e7
    9602385c:	97fffb85 	bl	96022670 <tegrabl_printf>
	pr_info("Updated %s info to DTB\n", "initrd");
    96023860:	90000101 	adrp	x1, 96043000 <common_params>
    96023864:	90000100 	adrp	x0, 96043000 <common_params>
    96023868:	911c3421 	add	x1, x1, #0x70d
    9602386c:	911c5000 	add	x0, x0, #0x714
    96023870:	97fffb80 	bl	96022670 <tegrabl_printf>
	tegrabl_error_t status = TEGRABL_NO_ERROR;
    96023874:	52800000 	mov	w0, #0x0                   	// #0
	return status;
    96023878:	17ffffe5 	b	9602380c <add_initrd_info+0x78>

000000009602387c <add_mac_addr_info>:
{
    9602387c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96023880:	910003fd 	mov	x29, sp
    96023884:	a90153f3 	stp	x19, x20, [sp, #16]
    96023888:	f0000133 	adrp	x19, 9604a000 <s_qspi_info+0x20>
    9602388c:	912fc273 	add	x19, x19, #0xbf0
    96023890:	a9025bf5 	stp	x21, x22, [sp, #32]
    96023894:	a90363f7 	stp	x23, x24, [sp, #48]
		pr_error("Failed to install %s MAC Addr in DT (%s)\n",
    96023898:	90000115 	adrp	x21, 96043000 <common_params>
			pr_error("Failed to update DT for %s MAC address\n",
    9602389c:	90000116 	adrp	x22, 96043000 <common_params>
{
    960238a0:	aa0003f7 	mov	x23, x0
    960238a4:	2a0103f8 	mov	w24, w1
    960238a8:	91002273 	add	x19, x19, #0x8
		pr_error("Failed to install %s MAC Addr in DT (%s)\n",
    960238ac:	911d42b5 	add	x21, x21, #0x750
			pr_error("Failed to update DT for %s MAC address\n",
    960238b0:	911df6d6 	add	x22, x22, #0x77d
{
    960238b4:	a9046bf9 	stp	x25, x26, [sp, #64]
	for (i = 0; i < MAC_ADDR_TYPE_MAX; i++) {
    960238b8:	52800014 	mov	w20, #0x0                   	// #0
		status = tegrabl_get_mac_address(i, NULL, (uint8_t *)mac_addr);
    960238bc:	910163a2 	add	x2, x29, #0x58
    960238c0:	d2800001 	mov	x1, #0x0                   	// #0
    960238c4:	2a1403e0 	mov	w0, w20
    960238c8:	94002856 	bl	9602da20 <tegrabl_get_mac_address>
		if (status != TEGRABL_NO_ERROR) {
    960238cc:	34000200 	cbz	w0, 9602390c <add_mac_addr_info+0x90>
			pr_error("Failed to get %s MAC address\n",
    960238d0:	f85f8261 	ldur	x1, [x19, #-8]
    960238d4:	90000100 	adrp	x0, 96043000 <common_params>
    960238d8:	911cbc00 	add	x0, x0, #0x72f
			pr_error("Failed to update DT for %s MAC address\n",
    960238dc:	97fffb65 	bl	96022670 <tegrabl_printf>
	for (i = 0; i < MAC_ADDR_TYPE_MAX; i++) {
    960238e0:	11000694 	add	w20, w20, #0x1
    960238e4:	91004273 	add	x19, x19, #0x10
    960238e8:	71000e9f 	cmp	w20, #0x3
    960238ec:	54fffe81 	b.ne	960238bc <add_mac_addr_info+0x40>  // b.any
}
    960238f0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960238f4:	52800000 	mov	w0, #0x0                   	// #0
    960238f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960238fc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96023900:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96023904:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96023908:	d65f03c0 	ret
	char *chosen_prop = mac_addr_meta_data[type].chosen_prop;
    9602390c:	a97fea79 	ldp	x25, x26, [x19, #-8]
	err = fdt_setprop_string(fdt, nodeoffset, chosen_prop, mac_addr);
    96023910:	910163a0 	add	x0, x29, #0x58
    96023914:	94001a7e 	bl	9602a30c <strlen>
    96023918:	11000404 	add	w4, w0, #0x1
    9602391c:	910163a3 	add	x3, x29, #0x58
    96023920:	aa1a03e2 	mov	x2, x26
    96023924:	2a1803e1 	mov	w1, w24
    96023928:	aa1703e0 	mov	x0, x23
    9602392c:	94003c86 	bl	96032b44 <fdt_setprop>
	if (err < 0) {
    96023930:	36fffd80 	tbz	w0, #31, 960238e0 <add_mac_addr_info+0x64>
		pr_error("Failed to install %s MAC Addr in DT (%s)\n",
    96023934:	94003ddf 	bl	960330b0 <fdt_strerror>
    96023938:	aa0003e2 	mov	x2, x0
    9602393c:	aa1903e1 	mov	x1, x25
    96023940:	aa1503e0 	mov	x0, x21
    96023944:	97fffb4b 	bl	96022670 <tegrabl_printf>
			pr_error("Failed to update DT for %s MAC address\n",
    96023948:	aa1603e0 	mov	x0, x22
    9602394c:	f85f8261 	ldur	x1, [x19, #-8]
    96023950:	17ffffe3 	b	960238dc <add_mac_addr_info+0x60>

0000000096023954 <add_plugin_manager_ids>:
{
    96023954:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96023958:	910003fd 	mov	x29, sp
    9602395c:	a90153f3 	stp	x19, x20, [sp, #16]
    96023960:	aa0003f3 	mov	x19, x0
    96023964:	2a0103f4 	mov	w20, w1
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &bl_fdt);
    96023968:	52800000 	mov	w0, #0x0                   	// #0
    9602396c:	9100a3a1 	add	x1, x29, #0x28
    96023970:	9400353a 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if (err == TEGRABL_NO_ERROR) {
    96023974:	34000140 	cbz	w0, 9602399c <add_plugin_manager_ids+0x48>
		pr_warn("Add plugin manager ids from board info\n");
    96023978:	90000100 	adrp	x0, 96043000 <common_params>
    9602397c:	9124e800 	add	x0, x0, #0x93a
    96023980:	97fffb3c 	bl	96022670 <tegrabl_printf>
		err = tegrabl_add_plugin_manager_ids(fdt, nodeoffset);
    96023984:	2a1403e1 	mov	w1, w20
    96023988:	aa1303e0 	mov	x0, x19
    9602398c:	94003e1a 	bl	960331f4 <tegrabl_add_plugin_manager_ids>
}
    96023990:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023994:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96023998:	d65f03c0 	ret
		err = tegrabl_copy_plugin_manager_ids(fdt, bl_fdt, nodeoffset);
    9602399c:	f94017a1 	ldr	x1, [x29, #40]
    960239a0:	2a1403e2 	mov	w2, w20
    960239a4:	aa1303e0 	mov	x0, x19
    960239a8:	94004051 	bl	96033aec <tegrabl_copy_plugin_manager_ids>
	if (err != TEGRABL_NO_ERROR) {
    960239ac:	34ffff20 	cbz	w0, 96023990 <add_plugin_manager_ids+0x3c>
    960239b0:	17fffff2 	b	96023978 <add_plugin_manager_ids+0x24>

00000000960239b4 <add_bootarg_info>:
{
    960239b4:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    960239b8:	910003fd 	mov	x29, sp
	int len = 0;
    960239bc:	910203a3 	add	x3, x29, #0x80
{
    960239c0:	a90153f3 	stp	x19, x20, [sp, #16]
    960239c4:	a9025bf5 	stp	x21, x22, [sp, #32]
	dtb_cmdline = (char *)fdt_getprop(fdt, nodeoffset, "bootargs", &len);
    960239c8:	90000116 	adrp	x22, 96043000 <common_params>
{
    960239cc:	a90363f7 	stp	x23, x24, [sp, #48]
	dtb_cmdline = (char *)fdt_getprop(fdt, nodeoffset, "bootargs", &len);
    960239d0:	91144ac2 	add	x2, x22, #0x512
{
    960239d4:	a9046bf9 	stp	x25, x26, [sp, #64]
    960239d8:	2a0103f8 	mov	w24, w1
    960239dc:	a90573fb 	stp	x27, x28, [sp, #80]
	int len = 0;
    960239e0:	b81f8c7f 	str	wzr, [x3, #-8]!
{
    960239e4:	f90037a0 	str	x0, [x29, #104]
	dtb_cmdline = (char *)fdt_getprop(fdt, nodeoffset, "bootargs", &len);
    960239e8:	94003988 	bl	96032008 <fdt_getprop>
    960239ec:	aa0003f3 	mov	x19, x0
	if (len <= 0) {
    960239f0:	b9407ba0 	ldr	w0, [x29, #120]
    960239f4:	7100001f 	cmp	w0, #0x0
    960239f8:	5400008c 	b.gt	96023a08 <add_bootarg_info+0x54>
		dtb_cmdline = "";
    960239fc:	900000d3 	adrp	x19, 9603b000 <tt_level+0x328>
    96023a00:	91081e73 	add	x19, x19, #0x207
		len = 0;
    96023a04:	b9007bbf 	str	wzr, [x29, #120]
	odm_config_set = tegrabl_odmdata_get_config_by_name("enable-high-speed-uart");
    96023a08:	90000100 	adrp	x0, 96043000 <common_params>
    96023a0c:	910fe800 	add	x0, x0, #0x3fa
    96023a10:	94003dda 	bl	96033178 <tegrabl_odmdata_get_config_by_name>
    96023a14:	12001c14 	and	w20, w0, #0xff
	err = tegrabl_linuxboot_helper_get_info(
    96023a18:	9101f3a2 	add	x2, x29, #0x7c
    96023a1c:	d2800001 	mov	x1, #0x0                   	// #0
    96023a20:	52800040 	mov	w0, #0x2                   	// #2
    96023a24:	940006f5 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
	if (((err == TEGRABL_NO_ERROR) && (console == TEGRABL_LINUXBOOT_DEBUG_CONSOLE_NONE)) || odm_config_set) {
    96023a28:	35000060 	cbnz	w0, 96023a34 <add_bootarg_info+0x80>
    96023a2c:	b9407fa0 	ldr	w0, [x29, #124]
    96023a30:	34000040 	cbz	w0, 96023a38 <add_bootarg_info+0x84>
    96023a34:	34000d94 	cbz	w20, 96023be4 <add_bootarg_info+0x230>
	if (!cmdline || !len || !param || !value)
    96023a38:	b40005d3 	cbz	x19, 96023af0 <add_bootarg_info+0x13c>
	end = cmdline + strlen(cmdline);
    96023a3c:	aa1303e0 	mov	x0, x19
	cmd_len = *len;
    96023a40:	b9407bbb 	ldr	w27, [x29, #120]
	end = cmdline + strlen(cmdline);
    96023a44:	94001a32 	bl	9602a30c <strlen>
    96023a48:	aa0003f5 	mov	x21, x0
    96023a4c:	aa1303e0 	mov	x0, x19
		if (*cmdline != *p) {
    96023a50:	90000102 	adrp	x2, 96043000 <common_params>
	for (; *cmdline != '\0'; cmdline++) {
    96023a54:	39400001 	ldrb	w1, [x0]
    96023a58:	340004c1 	cbz	w1, 96023af0 <add_bootarg_info+0x13c>
		if (*cmdline != *p) {
    96023a5c:	71018c3f 	cmp	w1, #0x63
    96023a60:	540000e1 	b.ne	96023a7c <add_bootarg_info+0xc8>  // b.any
    96023a64:	aa0003f9 	mov	x25, x0
    96023a68:	91142441 	add	x1, x2, #0x509
		while (*c++ == *p++)
    96023a6c:	38401724 	ldrb	w4, [x25], #1
    96023a70:	38401423 	ldrb	w3, [x1], #1
    96023a74:	6b03009f 	cmp	w4, w3
    96023a78:	54000060 	b.eq	96023a84 <add_bootarg_info+0xd0>  // b.none
	for (; *cmdline != '\0'; cmdline++) {
    96023a7c:	91000400 	add	x0, x0, #0x1
    96023a80:	17fffff5 	b	96023a54 <add_bootarg_info+0xa0>
			if (*p == '\0') {
    96023a84:	39400023 	ldrb	w3, [x1]
    96023a88:	35ffff23 	cbnz	w3, 96023a6c <add_bootarg_info+0xb8>
		while (*c++ == *p++)
    96023a8c:	aa1903f4 	mov	x20, x25
    96023a90:	14000002 	b	96023a98 <add_bootarg_info+0xe4>
					c++;
    96023a94:	91000694 	add	x20, x20, #0x1
				while ((*c != ' ') && (*c != '\0'))
    96023a98:	39400281 	ldrb	w1, [x20]
    96023a9c:	52801be0 	mov	w0, #0xdf                  	// #223
    96023aa0:	6a00003f 	tst	w1, w0
    96023aa4:	54ffff81 	b.ne	96023a94 <add_bootarg_info+0xe0>  // b.any
				new_len = strlen(value);
    96023aa8:	9000011a 	adrp	x26, 96043000 <common_params>
				old_len = c - cmdline;
    96023aac:	cb190297 	sub	x23, x20, x25
				new_len = strlen(value);
    96023ab0:	91146f40 	add	x0, x26, #0x51b
    96023ab4:	94001a16 	bl	9602a30c <strlen>
    96023ab8:	aa1a03e1 	mov	x1, x26
    96023abc:	aa0003fc 	mov	x28, x0
				if (new_len > old_len) {
    96023ac0:	6b0002ff 	cmp	w23, w0
    96023ac4:	4b17001a 	sub	w26, w0, w23
    96023ac8:	5400060b 	b.lt	96023b88 <add_bootarg_info+0x1d4>  // b.tstop
				cmdline = strncpy(cmdline, value, new_len);
    96023acc:	93407f95 	sxtw	x21, w28
    96023ad0:	91146c21 	add	x1, x1, #0x51b
    96023ad4:	aa1503e2 	mov	x2, x21
    96023ad8:	aa1903e0 	mov	x0, x25
    96023adc:	940019fd 	bl	9602a2d0 <strncpy>
				cmd_len += new_len - old_len;
    96023ae0:	0b1b035a 	add	w26, w26, w27
				if (new_len <= old_len) {
    96023ae4:	6b1c02ff 	cmp	w23, w28
    96023ae8:	540006aa 	b.ge	96023bbc <add_bootarg_info+0x208>  // b.tcont
				*len = cmd_len;
    96023aec:	b9007bba 	str	w26, [x29, #120]
	len = tegrabl_snprintf(ptr, remain, "%s ",
    96023af0:	aa1303e0 	mov	x0, x19
    96023af4:	97fffde4 	bl	96023284 <tegrabl_linuxboot_prepare_cmdline>
    96023af8:	d2810001 	mov	x1, #0x800                 	// #2048
    96023afc:	d0000273 	adrp	x19, 96071000 <msg+0x540>
    96023b00:	912bc273 	add	x19, x19, #0xaf0
    96023b04:	aa0003e3 	mov	x3, x0
    96023b08:	90000102 	adrp	x2, 96043000 <common_params>
    96023b0c:	aa1303e0 	mov	x0, x19
    96023b10:	9110e842 	add	x2, x2, #0x43a
    96023b14:	97fffaac 	bl	960225c4 <tegrabl_snprintf>
	if ((len > 0) && (len <= remain)) {
    96023b18:	51000401 	sub	w1, w0, #0x1
    96023b1c:	52810004 	mov	w4, #0x800                 	// #2048
	len = tegrabl_snprintf(ptr, remain, "%s ",
    96023b20:	b9007ba0 	str	w0, [x29, #120]
		remain -= len;
    96023b24:	6b04003f 	cmp	w1, w4
    96023b28:	4b000080 	sub	w0, w4, w0
	err = fdt_setprop(fdt, nodeoffset, "bootargs", cmdline,
    96023b2c:	aa1303e3 	mov	x3, x19
		remain -= len;
    96023b30:	1a843000 	csel	w0, w0, w4, cc  // cc = lo, ul, last
	err = fdt_setprop(fdt, nodeoffset, "bootargs", cmdline,
    96023b34:	52810024 	mov	w4, #0x801                 	// #2049
    96023b38:	4b000084 	sub	w4, w4, w0
    96023b3c:	f94037a0 	ldr	x0, [x29, #104]
    96023b40:	91144ac2 	add	x2, x22, #0x512
    96023b44:	2a1803e1 	mov	w1, w24
    96023b48:	94003bff 	bl	96032b44 <fdt_setprop>
	if (err < 0) {
    96023b4c:	36f80540 	tbz	w0, #31, 96023bf4 <add_bootarg_info+0x240>
		pr_error("Failed to set bootargs in DTB (%s)\n", fdt_strerror(err));
    96023b50:	94003d58 	bl	960330b0 <fdt_strerror>
    96023b54:	aa0003e1 	mov	x1, x0
    96023b58:	90000100 	adrp	x0, 96043000 <common_params>
    96023b5c:	91156400 	add	x0, x0, #0x559
    96023b60:	97fffac4 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96023b64:	52800440 	mov	w0, #0x22                  	// #34
    96023b68:	72a56560 	movk	w0, #0x2b2b, lsl #16
}
    96023b6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023b70:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96023b74:	a94363f7 	ldp	x23, x24, [sp, #48]
    96023b78:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96023b7c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96023b80:	a8c87bfd 	ldp	x29, x30, [sp], #128
    96023b84:	d65f03c0 	ret
					if (cmd_len + (new_len - old_len) > MAX_COMMAND_LINE_SIZE)
    96023b88:	0b1a0360 	add	w0, w27, w26
    96023b8c:	7120001f 	cmp	w0, #0x800
    96023b90:	54fffb0c 	b.gt	96023af0 <add_bootarg_info+0x13c>
	end = cmdline + strlen(cmdline);
    96023b94:	8b150260 	add	x0, x19, x21
					end = pre_end + (new_len - old_len);
    96023b98:	d2800002 	mov	x2, #0x0                   	// #0
    96023b9c:	8b3ac005 	add	x5, x0, w26, sxtw
					while (pre_end >= c)
    96023ba0:	8b020004 	add	x4, x0, x2
    96023ba4:	eb04029f 	cmp	x20, x4
    96023ba8:	54fff928 	b.hi	96023acc <add_bootarg_info+0x118>  // b.pmore
						*end-- = *pre_end--;
    96023bac:	38626804 	ldrb	w4, [x0, x2]
    96023bb0:	382268a4 	strb	w4, [x5, x2]
    96023bb4:	d1000442 	sub	x2, x2, #0x1
    96023bb8:	17fffffa 	b	96023ba0 <add_bootarg_info+0x1ec>
				cmdline += new_len;
    96023bbc:	8b150000 	add	x0, x0, x21
    96023bc0:	d2800001 	mov	x1, #0x0                   	// #0
					while (*c != '\0')
    96023bc4:	38616a82 	ldrb	w2, [x20, x1]
    96023bc8:	8b010003 	add	x3, x0, x1
    96023bcc:	35000062 	cbnz	w2, 96023bd8 <add_bootarg_info+0x224>
					*cmdline = '\0';
    96023bd0:	3900007f 	strb	wzr, [x3]
    96023bd4:	17ffffc6 	b	96023aec <add_bootarg_info+0x138>
						*cmdline++ = *c++;
    96023bd8:	38216802 	strb	w2, [x0, x1]
    96023bdc:	91000421 	add	x1, x1, #0x1
    96023be0:	17fffff9 	b	96023bc4 <add_bootarg_info+0x210>
		pr_warn("WARN: Fail to override \"console=none\" in commandline\n");
    96023be4:	90000100 	adrp	x0, 96043000 <common_params>
    96023be8:	91148000 	add	x0, x0, #0x520
    96023bec:	97fffaa1 	bl	96022670 <tegrabl_printf>
    96023bf0:	17ffffc0 	b	96023af0 <add_bootarg_info+0x13c>
	pr_info("Updated %s info to DTB\n", "bootarg");
    96023bf4:	90000101 	adrp	x1, 96043000 <common_params>
    96023bf8:	90000100 	adrp	x0, 96043000 <common_params>
    96023bfc:	91160021 	add	x1, x1, #0x580
    96023c00:	911c5000 	add	x0, x0, #0x714
    96023c04:	97fffa9b 	bl	96022670 <tegrabl_printf>
	tegrabl_error_t status = TEGRABL_NO_ERROR;
    96023c08:	52800000 	mov	w0, #0x0                   	// #0
	return status;
    96023c0c:	17ffffd8 	b	96023b6c <add_bootarg_info+0x1b8>

0000000096023c10 <add_odmdata_info>:
{
    96023c10:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96023c14:	910003fd 	mov	x29, sp
    96023c18:	a90153f3 	stp	x19, x20, [sp, #16]
    96023c1c:	2a0103f4 	mov	w20, w1
    96023c20:	a9025bf5 	stp	x21, x22, [sp, #32]
    96023c24:	aa0003f5 	mov	x21, x0
    96023c28:	a90363f7 	stp	x23, x24, [sp, #48]
    96023c2c:	f90023f9 	str	x25, [sp, #64]
	uint32_t odmdata = tegrabl_odmdata_get();
    96023c30:	94003d33 	bl	960330fc <tegrabl_odmdata_get>
	status = tegrabl_odmdata_params_get(&podmdata_list, &odmdata_list_size);
    96023c34:	910143a1 	add	x1, x29, #0x50
	uint32_t odmdata = tegrabl_odmdata_get();
    96023c38:	2a0003f8 	mov	w24, w0
	struct odmdata_params *podmdata_list = NULL;
    96023c3c:	f9002fbf 	str	xzr, [x29, #88]
	status = tegrabl_odmdata_params_get(&podmdata_list, &odmdata_list_size);
    96023c40:	910163a0 	add	x0, x29, #0x58
    96023c44:	94003d38 	bl	96033124 <tegrabl_odmdata_params_get>
    96023c48:	2a0003f3 	mov	w19, w0
	if (status) {
    96023c4c:	35000700 	cbnz	w0, 96023d2c <add_odmdata_info+0x11c>
	node = tegrabl_add_subnode_if_absent(fdt, nodeoffset, "plugin-manager");
    96023c50:	90000122 	adrp	x2, 96047000 <__func__.3913+0x316>
    96023c54:	2a1403e1 	mov	w1, w20
    96023c58:	9107a842 	add	x2, x2, #0x1ea
    96023c5c:	aa1503e0 	mov	x0, x21
    96023c60:	94003603 	bl	9603146c <tegrabl_add_subnode_if_absent>
	if (node < 0) {
    96023c64:	37f80720 	tbnz	w0, #31, 96023d48 <add_odmdata_info+0x138>
	node = tegrabl_add_subnode_if_absent(fdt, node, "odm-data");
    96023c68:	2a0003e1 	mov	w1, w0
    96023c6c:	90000102 	adrp	x2, 96043000 <common_params>
    96023c70:	aa1503e0 	mov	x0, x21
    96023c74:	9122c042 	add	x2, x2, #0x8b0
    96023c78:	940035fd 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96023c7c:	2a0003f7 	mov	w23, w0
	if (node < 0) {
    96023c80:	37f80680 	tbnz	w0, #31, 96023d50 <add_odmdata_info+0x140>
	for (idx = 0; idx < odmdata_list_size; idx++) {
    96023c84:	52800014 	mov	w20, #0x0                   	// #0
 *	-FDT_ERR_TRUNCATED, standard meanings
 */
static inline int fdt_setprop_cell(void *fdt, int nodeoffset, const char *name,
				   uint32_t val)
{
	val = cpu_to_fdt32(val);
    96023c88:	52a02019 	mov	w25, #0x1000000             	// #16777216
	pr_info("Adding /chosen/plugin-manager/odm-data\n");
    96023c8c:	90000100 	adrp	x0, 96043000 <common_params>
    96023c90:	9122e400 	add	x0, x0, #0x8b9
    96023c94:	97fffa77 	bl	96022670 <tegrabl_printf>
	for (idx = 0; idx < odmdata_list_size; idx++) {
    96023c98:	b94053a0 	ldr	w0, [x29, #80]
    96023c9c:	6b14001f 	cmp	w0, w20
    96023ca0:	54000108 	b.hi	96023cc0 <add_odmdata_info+0xb0>  // b.pmore
}
    96023ca4:	2a1303e0 	mov	w0, w19
    96023ca8:	f94023f9 	ldr	x25, [sp, #64]
    96023cac:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023cb0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96023cb4:	a94363f7 	ldp	x23, x24, [sp, #48]
    96023cb8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96023cbc:	d65f03c0 	ret
		mask = podmdata_list[idx].mask;
    96023cc0:	f9402fa0 	ldr	x0, [x29, #88]
    96023cc4:	d37c7e96 	ubfiz	x22, x20, #4, #32
    96023cc8:	8b160001 	add	x1, x0, x22
		if ((odmdata & mask) != val) {
    96023ccc:	b8766800 	ldr	w0, [x0, x22]
    96023cd0:	b9400422 	ldr	w2, [x1, #4]
    96023cd4:	0a000300 	and	w0, w24, w0
    96023cd8:	6b02001f 	cmp	w0, w2
    96023cdc:	54000321 	b.ne	96023d40 <add_odmdata_info+0x130>  // b.any
		err = fdt_setprop_cell(fdt, node, podmdata_list[idx].name, 1);
    96023ce0:	f9400422 	ldr	x2, [x1, #8]
	return fdt_setprop(fdt, nodeoffset, name, &val, sizeof(val));
    96023ce4:	52800084 	mov	w4, #0x4                   	// #4
    96023ce8:	910153a3 	add	x3, x29, #0x54
    96023cec:	aa1503e0 	mov	x0, x21
    96023cf0:	2a1703e1 	mov	w1, w23
	val = cpu_to_fdt32(val);
    96023cf4:	b90057b9 	str	w25, [x29, #84]
	return fdt_setprop(fdt, nodeoffset, name, &val, sizeof(val));
    96023cf8:	94003b93 	bl	96032b44 <fdt_setprop>
		if (err < 0) {
    96023cfc:	36f80220 	tbz	w0, #31, 96023d40 <add_odmdata_info+0x130>
			pr_error("Unable to set /chosen/plugin-manager/%s (%s)\n",
    96023d00:	f9402fa1 	ldr	x1, [x29, #88]
    96023d04:	8b160021 	add	x1, x1, x22
    96023d08:	f9400433 	ldr	x19, [x1, #8]
    96023d0c:	94003ce9 	bl	960330b0 <fdt_strerror>
    96023d10:	aa0003e2 	mov	x2, x0
    96023d14:	90000100 	adrp	x0, 96043000 <common_params>
    96023d18:	aa1303e1 	mov	x1, x19
			status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96023d1c:	52800453 	mov	w19, #0x22                  	// #34
			pr_error("Unable to set /chosen/plugin-manager/%s (%s)\n",
    96023d20:	91239000 	add	x0, x0, #0x8e4
    96023d24:	97fffa53 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 2);
    96023d28:	72a56573 	movk	w19, #0x2b2b, lsl #16
		pr_error("Error = %d in 'add_odmdata_info'\n", status);
    96023d2c:	2a1303e1 	mov	w1, w19
    96023d30:	90000100 	adrp	x0, 96043000 <common_params>
    96023d34:	91245400 	add	x0, x0, #0x915
    96023d38:	97fffa4e 	bl	96022670 <tegrabl_printf>
	return status;
    96023d3c:	17ffffda 	b	96023ca4 <add_odmdata_info+0x94>
	for (idx = 0; idx < odmdata_list_size; idx++) {
    96023d40:	11000694 	add	w20, w20, #0x1
    96023d44:	17ffffd5 	b	96023c98 <add_odmdata_info+0x88>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 1);
    96023d48:	52802453 	mov	w19, #0x122                 	// #290
    96023d4c:	17fffff7 	b	96023d28 <add_odmdata_info+0x118>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 2);
    96023d50:	52804453 	mov	w19, #0x222                 	// #546
    96023d54:	17fffff5 	b	96023d28 <add_odmdata_info+0x118>

0000000096023d58 <add_bpmp_info>:
{
    96023d58:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96023d5c:	910003fd 	mov	x29, sp
    96023d60:	a90153f3 	stp	x19, x20, [sp, #16]
    96023d64:	aa0003f4 	mov	x20, x0
	tegrabl_linuxboot_carveout_type_t carveout_type =
    96023d68:	52800040 	mov	w0, #0x2                   	// #2
{
    96023d6c:	a9025bf5 	stp	x21, x22, [sp, #32]
	tegrabl_linuxboot_carveout_type_t carveout_type =
    96023d70:	b9003ba0 	str	w0, [x29, #56]
{
    96023d74:	2a0103f5 	mov	w21, w1
	status = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_CARVEOUT,
    96023d78:	910103a2 	add	x2, x29, #0x40
    96023d7c:	9100e3a1 	add	x1, x29, #0x38
    96023d80:	528000a0 	mov	w0, #0x5                   	// #5
    96023d84:	9400061d 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    96023d88:	2a0003f3 	mov	w19, w0
	if (status != TEGRABL_NO_ERROR) {
    96023d8c:	34000180 	cbz	w0, 96023dbc <add_bpmp_info+0x64>
		pr_error("Failed to get bpmp mem layout\n");
    96023d90:	90000100 	adrp	x0, 96043000 <common_params>
    96023d94:	12005e73 	and	w19, w19, #0xffffff
    96023d98:	91162000 	add	x0, x0, #0x588
    96023d9c:	97fffa35 	bl	96022670 <tegrabl_printf>
    96023da0:	52a56000 	mov	w0, #0x2b000000            	// #721420288
    96023da4:	2a000273 	orr	w19, w19, w0
}
    96023da8:	2a1303e0 	mov	w0, w19
    96023dac:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023db0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96023db4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96023db8:	d65f03c0 	ret
	if ((memblock.size == 0x0) || (memblock.base == 0x0)) {
    96023dbc:	f94027a0 	ldr	x0, [x29, #72]
    96023dc0:	b4000060 	cbz	x0, 96023dcc <add_bpmp_info+0x74>
    96023dc4:	f94023a0 	ldr	x0, [x29, #64]
    96023dc8:	b50000a0 	cbnz	x0, 96023ddc <add_bpmp_info+0x84>
		pr_info("Skipping BPMP FW node addition\n");
    96023dcc:	90000100 	adrp	x0, 96043000 <common_params>
    96023dd0:	9116a800 	add	x0, x0, #0x5aa
    96023dd4:	97fffa27 	bl	96022670 <tegrabl_printf>
		goto fail;
    96023dd8:	17fffff4 	b	96023da8 <add_bpmp_info+0x50>
	return (_B(0) << 24) | (_B(1) << 16) | (_B(2) << 8) | _B(3);
    96023ddc:	53105c02 	ubfx	w2, w0, #16, #8
    96023de0:	53083c01 	ubfx	w1, w0, #8, #8
	buf = cpu_to_fdt32((uint32_t)memblock.base);
    96023de4:	910143b6 	add	x22, x29, #0x50
	err = fdt_setprop(fdt, nodeoffset, "carveout-start", &buf, sizeof(buf));
    96023de8:	52800084 	mov	w4, #0x4                   	// #4
    96023dec:	53185c42 	lsl	w2, w2, #8
    96023df0:	2a014041 	orr	w1, w2, w1, lsl #16
    96023df4:	53187c02 	lsr	w2, w0, #24
    96023df8:	2a006040 	orr	w0, w2, w0, lsl #24
    96023dfc:	90000102 	adrp	x2, 96043000 <common_params>
    96023e00:	2a000020 	orr	w0, w1, w0
	buf = cpu_to_fdt32((uint32_t)memblock.base);
    96023e04:	b81ecec0 	str	w0, [x22, #-20]!
	err = fdt_setprop(fdt, nodeoffset, "carveout-start", &buf, sizeof(buf));
    96023e08:	91173442 	add	x2, x2, #0x5cd
    96023e0c:	2a1503e1 	mov	w1, w21
    96023e10:	aa1603e3 	mov	x3, x22
    96023e14:	aa1403e0 	mov	x0, x20
    96023e18:	94003b4b 	bl	96032b44 <fdt_setprop>
	if (err) {
    96023e1c:	34000080 	cbz	w0, 96023e2c <add_bpmp_info+0xd4>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96023e20:	52800453 	mov	w19, #0x22                  	// #34
    96023e24:	72a56573 	movk	w19, #0x2b2b, lsl #16
    96023e28:	17ffffe0 	b	96023da8 <add_bpmp_info+0x50>
	buf = cpu_to_fdt32((uint32_t)memblock.size);
    96023e2c:	f94027a0 	ldr	x0, [x29, #72]
	err = fdt_setprop(fdt, nodeoffset, "carveout-size", &buf, sizeof(buf));
    96023e30:	52800084 	mov	w4, #0x4                   	// #4
    96023e34:	aa1603e3 	mov	x3, x22
    96023e38:	53105c02 	ubfx	w2, w0, #16, #8
    96023e3c:	53083c01 	ubfx	w1, w0, #8, #8
    96023e40:	53185c42 	lsl	w2, w2, #8
    96023e44:	2a014041 	orr	w1, w2, w1, lsl #16
    96023e48:	53187c02 	lsr	w2, w0, #24
    96023e4c:	2a006040 	orr	w0, w2, w0, lsl #24
    96023e50:	90000102 	adrp	x2, 96043000 <common_params>
    96023e54:	2a000020 	orr	w0, w1, w0
    96023e58:	91177042 	add	x2, x2, #0x5dc
	buf = cpu_to_fdt32((uint32_t)memblock.size);
    96023e5c:	b9003fa0 	str	w0, [x29, #60]
	err = fdt_setprop(fdt, nodeoffset, "carveout-size", &buf, sizeof(buf));
    96023e60:	2a1503e1 	mov	w1, w21
    96023e64:	aa1403e0 	mov	x0, x20
    96023e68:	94003b37 	bl	96032b44 <fdt_setprop>
	if (err) {
    96023e6c:	35fffda0 	cbnz	w0, 96023e20 <add_bpmp_info+0xc8>
	pr_info("Updated %s info to DTB\n", "bpmp");
    96023e70:	90000101 	adrp	x1, 96043000 <common_params>
    96023e74:	90000100 	adrp	x0, 96043000 <common_params>
    96023e78:	9117a821 	add	x1, x1, #0x5ea
    96023e7c:	911c5000 	add	x0, x0, #0x714
    96023e80:	97fff9fc 	bl	96022670 <tegrabl_printf>
	return status;
    96023e84:	17ffffc9 	b	96023da8 <add_bpmp_info+0x50>

0000000096023e88 <tegrabl_get_memblk_info_array>:

static uint32_t blk_info_array_cnt;

tegrabl_error_t tegrabl_get_memblk_info_array(uint32_t *array_items_num,
			struct tegrabl_linuxboot_memblock **blk_arr)
{
    96023e88:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	uint64_t tmp;
	uint32_t idx = 0;
	struct tegrabl_linuxboot_memblock memblock;
	tegrabl_error_t status = TEGRABL_NO_ERROR;

	if ((NULL == array_items_num) || (NULL == blk_arr)) {
    96023e8c:	f100001f 	cmp	x0, #0x0
    96023e90:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    96023e94:	910003fd 	mov	x29, sp
    96023e98:	a90153f3 	stp	x19, x20, [sp, #16]
    96023e9c:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint32_t idx = 0;
    96023ea0:	b9003fbf 	str	wzr, [x29, #60]
	if ((NULL == array_items_num) || (NULL == blk_arr)) {
    96023ea4:	54000720 	b.eq	96023f88 <tegrabl_get_memblk_info_array+0x100>  // b.none
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	if (blk_info_array_cnt > 0) {
    96023ea8:	d0000273 	adrp	x19, 96071000 <msg+0x540>
    96023eac:	b94aca62 	ldr	w2, [x19, #2760]
    96023eb0:	35000262 	cbnz	w2, 96023efc <tegrabl_get_memblk_info_array+0x74>
		memblock.size &= ~0x1FFFFFLLU;

		memblock.base = tmp;

		if (memblock.size > 0) {
			memblock_info_array[blk_info_array_cnt].base = memblock.base;
    96023eb4:	f0000276 	adrp	x22, 96072000 <cmdline+0x510>
    96023eb8:	aa0103f5 	mov	x21, x1
    96023ebc:	aa0003f4 	mov	x20, x0
    96023ec0:	910bc2d6 	add	x22, x22, #0x2f0
	for (idx = 0; idx < MAX_MEM_CHUNKS; idx++) {
    96023ec4:	b9403fa0 	ldr	w0, [x29, #60]
    96023ec8:	71004c1f 	cmp	w0, #0x13
    96023ecc:	540000c8 	b.hi	96023ee4 <tegrabl_get_memblk_info_array+0x5c>  // b.pmore
		status = tegrabl_linuxboot_helper_get_info(
    96023ed0:	910103a2 	add	x2, x29, #0x40
    96023ed4:	9100f3a1 	add	x1, x29, #0x3c
    96023ed8:	528000e0 	mov	w0, #0x7                   	// #7
    96023edc:	940005c7 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
		if ((status != TEGRABL_NO_ERROR) || (memblock.size == 0) ||
    96023ee0:	34000200 	cbz	w0, 96023f20 <tegrabl_get_memblk_info_array+0x98>
			memblock_info_array[blk_info_array_cnt].size = memblock.size;
			blk_info_array_cnt++;
		}
	}

	*array_items_num = blk_info_array_cnt;
    96023ee4:	b94aca60 	ldr	w0, [x19, #2760]
    96023ee8:	b9000280 	str	w0, [x20]
	*blk_arr = memblock_info_array;
    96023eec:	f0000260 	adrp	x0, 96072000 <cmdline+0x510>
    96023ef0:	910bc000 	add	x0, x0, #0x2f0
    96023ef4:	f90002a0 	str	x0, [x21]
    96023ef8:	14000005 	b	96023f0c <tegrabl_get_memblk_info_array+0x84>
		*array_items_num = blk_info_array_cnt;
    96023efc:	b9000002 	str	w2, [x0]
		*blk_arr = memblock_info_array;
    96023f00:	f0000260 	adrp	x0, 96072000 <cmdline+0x510>
    96023f04:	910bc000 	add	x0, x0, #0x2f0
    96023f08:	f9000020 	str	x0, [x1]

	return TEGRABL_NO_ERROR;
    96023f0c:	52800000 	mov	w0, #0x0                   	// #0
}
    96023f10:	a94153f3 	ldp	x19, x20, [sp, #16]
    96023f14:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96023f18:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96023f1c:	d65f03c0 	ret
		if ((status != TEGRABL_NO_ERROR) || (memblock.size == 0) ||
    96023f20:	f94027a2 	ldr	x2, [x29, #72]
    96023f24:	b94aca60 	ldr	w0, [x19, #2760]
    96023f28:	b4fffde2 	cbz	x2, 96023ee4 <tegrabl_get_memblk_info_array+0x5c>
    96023f2c:	71004c1f 	cmp	w0, #0x13
    96023f30:	54fffda8 	b.hi	96023ee4 <tegrabl_get_memblk_info_array+0x5c>  // b.pmore
		tmp = ROUND_UP_POW2(memblock.base, 0x200000LLU);
    96023f34:	f94023a1 	ldr	x1, [x29, #64]
    96023f38:	d1000423 	sub	x3, x1, #0x1
		if (tmp >= (memblock.base + memblock.size)) {
    96023f3c:	8b010042 	add	x2, x2, x1
		tmp = ROUND_UP_POW2(memblock.base, 0x200000LLU);
    96023f40:	926ba863 	and	x3, x3, #0xffffffffffe00000
    96023f44:	91480063 	add	x3, x3, #0x200, lsl #12
		if (tmp >= (memblock.base + memblock.size)) {
    96023f48:	eb03005f 	cmp	x2, x3
    96023f4c:	54000169 	b.ls	96023f78 <tegrabl_get_memblk_info_array+0xf0>  // b.plast
		memblock.size -= (tmp - memblock.base);
    96023f50:	cb030042 	sub	x2, x2, x3
		memblock.size &= ~0x1FFFFFLLU;
    96023f54:	926ba842 	and	x2, x2, #0xffffffffffe00000
    96023f58:	a9040ba3 	stp	x3, x2, [x29, #64]
		if (memblock.size > 0) {
    96023f5c:	b40000e2 	cbz	x2, 96023f78 <tegrabl_get_memblk_info_array+0xf0>
			memblock_info_array[blk_info_array_cnt].base = memblock.base;
    96023f60:	d37c7c01 	ubfiz	x1, x0, #4, #32
			blk_info_array_cnt++;
    96023f64:	11000400 	add	w0, w0, #0x1
			memblock_info_array[blk_info_array_cnt].base = memblock.base;
    96023f68:	8b0102c4 	add	x4, x22, x1
			blk_info_array_cnt++;
    96023f6c:	b90aca60 	str	w0, [x19, #2760]
			memblock_info_array[blk_info_array_cnt].base = memblock.base;
    96023f70:	f8216ac3 	str	x3, [x22, x1]
			memblock_info_array[blk_info_array_cnt].size = memblock.size;
    96023f74:	f9000482 	str	x2, [x4, #8]
	for (idx = 0; idx < MAX_MEM_CHUNKS; idx++) {
    96023f78:	b9403fa0 	ldr	w0, [x29, #60]
    96023f7c:	11000400 	add	w0, w0, #0x1
    96023f80:	b9003fa0 	str	w0, [x29, #60]
    96023f84:	17ffffd0 	b	96023ec4 <tegrabl_get_memblk_info_array+0x3c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96023f88:	52800040 	mov	w0, #0x2                   	// #2
    96023f8c:	72a56560 	movk	w0, #0x2b2b, lsl #16
    96023f90:	17ffffe0 	b	96023f10 <tegrabl_get_memblk_info_array+0x88>

0000000096023f94 <add_memory_info>:
{
    96023f94:	a9a47bfd 	stp	x29, x30, [sp, #-448]!
    96023f98:	910003fd 	mov	x29, sp
    96023f9c:	a90153f3 	stp	x19, x20, [sp, #16]
	status = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_ENABLE_OS_MEM_ENCR,
    96023fa0:	910183a2 	add	x2, x29, #0x60
{
    96023fa4:	a9025bf5 	stp	x21, x22, [sp, #32]
    96023fa8:	a90363f7 	stp	x23, x24, [sp, #48]
    96023fac:	aa0003f7 	mov	x23, x0
    96023fb0:	2a0103f8 	mov	w24, w1
	status = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_ENABLE_OS_MEM_ENCR,
    96023fb4:	52800180 	mov	w0, #0xc                   	// #12
    96023fb8:	d2800001 	mov	x1, #0x0                   	// #0
	uint32_t enable_os_mem_encryption = 0;
    96023fbc:	290bffbf 	stp	wzr, wzr, [x29, #92]
	struct tegrabl_linuxboot_memblock *blk_arr = NULL;
    96023fc0:	f90037bf 	str	xzr, [x29, #104]
{
    96023fc4:	f90023f9 	str	x25, [sp, #64]
	status = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_ENABLE_OS_MEM_ENCR,
    96023fc8:	9400058c 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    96023fcc:	2a0003f3 	mov	w19, w0
	if (TEGRABL_ERROR_REASON(status) == TEGRABL_ERR_INVALID) {
    96023fd0:	12001c00 	and	w0, w0, #0xff
    96023fd4:	7100081f 	cmp	w0, #0x2
    96023fd8:	54000160 	b.eq	96024004 <add_memory_info+0x70>  // b.none
		tegrabl_get_memblk_info_array(&blk_arr_cnt, &blk_arr) :
    96023fdc:	b94063a0 	ldr	w0, [x29, #96]
    96023fe0:	35000200 	cbnz	w0, 96024020 <add_memory_info+0x8c>
    96023fe4:	9101a3a1 	add	x1, x29, #0x68
    96023fe8:	910173a0 	add	x0, x29, #0x5c
    96023fec:	97ffffa7 	bl	96023e88 <tegrabl_get_memblk_info_array>
    96023ff0:	2a0003f3 	mov	w19, w0
	if (status != TEGRABL_NO_ERROR) {
    96023ff4:	34000780 	cbz	w0, 960240e4 <add_memory_info+0x150>
		pr_error("Failed to get memory blocks info array\n");
    96023ff8:	90000100 	adrp	x0, 96043000 <common_params>
    96023ffc:	9120ac00 	add	x0, x0, #0x82b
    96024000:	97fff99c 	bl	96022670 <tegrabl_printf>
}
    96024004:	2a1303e0 	mov	w0, w19
    96024008:	f94023f9 	ldr	x25, [sp, #64]
    9602400c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96024010:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96024014:	a94363f7 	ldp	x23, x24, [sp, #48]
    96024018:	a8dc7bfd 	ldp	x29, x30, [sp], #448
    9602401c:	d65f03c0 	ret
	uint32_t carveout_list[MAX_ENCR_CARVEOUT] = {0};
    96024020:	a9087fbf 	stp	xzr, xzr, [x29, #128]
	pr_info("Full DRAM encryption enabled, update the memory info\n");
    96024024:	f00000e0 	adrp	x0, 96043000 <common_params>
	uint32_t carveout_list[MAX_ENCR_CARVEOUT] = {0};
    96024028:	a9097fbf 	stp	xzr, xzr, [x29, #144]
	pr_info("Full DRAM encryption enabled, update the memory info\n");
    9602402c:	911ea000 	add	x0, x0, #0x7a8
	uint32_t carveout_list[MAX_ENCR_CARVEOUT] = {0};
    96024030:	a90a7fbf 	stp	xzr, xzr, [x29, #160]
	status = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_MEMENCR_GSC_LIST,
    96024034:	910203b9 	add	x25, x29, #0x80
	uint32_t carveout_list[MAX_ENCR_CARVEOUT] = {0};
    96024038:	a90b7fbf 	stp	xzr, xzr, [x29, #176]
	pr_info("Full DRAM encryption enabled, update the memory info\n");
    9602403c:	97fff98d 	bl	96022670 <tegrabl_printf>
	status = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_MEMENCR_GSC_LIST,
    96024040:	aa1903e2 	mov	x2, x25
    96024044:	d2800001 	mov	x1, #0x0                   	// #0
    96024048:	528001a0 	mov	w0, #0xd                   	// #13
    9602404c:	9400056b 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    96024050:	2a0003f3 	mov	w19, w0
	if (status != TEGRABL_NO_ERROR) {
    96024054:	340000a0 	cbz	w0, 96024068 <add_memory_info+0xd4>
		pr_error("Failed to get the carveout list\n");
    96024058:	f00000e0 	adrp	x0, 96043000 <common_params>
    9602405c:	911f8400 	add	x0, x0, #0x7e1
    96024060:	97fff984 	bl	96022670 <tegrabl_printf>
    96024064:	17ffffe5 	b	96023ff8 <add_memory_info+0x64>
    96024068:	d0000260 	adrp	x0, 96072000 <cmdline+0x510>
    9602406c:	910bc016 	add	x22, x0, #0x2f0
    96024070:	910022d6 	add	x22, x22, #0x8
    96024074:	aa0003f4 	mov	x20, x0
	if (status != TEGRABL_NO_ERROR) {
    96024078:	d2800015 	mov	x21, #0x0                   	// #0
		carveout_id = carveout_list[i];
    9602407c:	b8757b21 	ldr	w1, [x25, x21, lsl #2]
    96024080:	2a1503e0 	mov	w0, w21
    96024084:	b90067a1 	str	w1, [x29, #100]
		if (carveout_id == 0) {
    96024088:	34000281 	cbz	w1, 960240d8 <add_memory_info+0x144>
		status = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_MEMENCR_ADDR,
    9602408c:	9101c3a2 	add	x2, x29, #0x70
    96024090:	910193a1 	add	x1, x29, #0x64
    96024094:	52800160 	mov	w0, #0xb                   	// #11
    96024098:	94000558 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    9602409c:	2a0003f3 	mov	w19, w0
		if (status != TEGRABL_NO_ERROR) {
    960240a0:	340000c0 	cbz	w0, 960240b8 <add_memory_info+0x124>
			pr_error("Failed to get GSC: %d information\n", carveout_id);
    960240a4:	b94067a1 	ldr	w1, [x29, #100]
    960240a8:	f00000e0 	adrp	x0, 96043000 <common_params>
    960240ac:	91201400 	add	x0, x0, #0x805
    960240b0:	97fff970 	bl	96022670 <tegrabl_printf>
    960240b4:	17ffffd1 	b	96023ff8 <add_memory_info+0x64>
		memblock_info_array[i].base = memblock.base;
    960240b8:	f9403ba0 	ldr	x0, [x29, #112]
    960240bc:	910006b5 	add	x21, x21, #0x1
    960240c0:	f81f82c0 	stur	x0, [x22, #-8]
	for (i = 0; i < MAX_ENCR_CARVEOUT; i++) {
    960240c4:	f10042bf 	cmp	x21, #0x10
		memblock_info_array[i].size = memblock.size;
    960240c8:	f9403fa0 	ldr	x0, [x29, #120]
    960240cc:	f80106c0 	str	x0, [x22], #16
	for (i = 0; i < MAX_ENCR_CARVEOUT; i++) {
    960240d0:	54fffd61 	b.ne	9602407c <add_memory_info+0xe8>  // b.any
    960240d4:	2a1503e0 	mov	w0, w21
	*blk_arr_cnt = i;
    960240d8:	b9005fa0 	str	w0, [x29, #92]
	*blk_arr = memblock_info_array;
    960240dc:	910bc280 	add	x0, x20, #0x2f0
    960240e0:	f90037a0 	str	x0, [x29, #104]
		pr_info("added [base:0x%"PRIx64", size:0x%"PRIx64"] to /memory\n",
    960240e4:	f00000f5 	adrp	x21, 96043000 <common_params>
		buf[num_memory_chunks * 2 + 0] = cpu_to_fdt64(blk_arr[num_memory_chunks].base);
    960240e8:	910203b6 	add	x22, x29, #0x80
		pr_info("added [base:0x%"PRIx64", size:0x%"PRIx64"] to /memory\n",
    960240ec:	91215ab5 	add	x21, x21, #0x856
	for (i = 0; i < MAX_ENCR_CARVEOUT; i++) {
    960240f0:	d2800013 	mov	x19, #0x0                   	// #0
    960240f4:	52800014 	mov	w20, #0x0                   	// #0
	for (num_memory_chunks = 0; num_memory_chunks < blk_arr_cnt; num_memory_chunks++) {
    960240f8:	b9405fa0 	ldr	w0, [x29, #92]
    960240fc:	6b14001f 	cmp	w0, w20
    96024100:	540002c8 	b.hi	96024158 <add_memory_info+0x1c4>  // b.pmore
						 name, strlen(name)+1);
    96024104:	b0000113 	adrp	x19, 96045000 <__func__.3796+0x7>
    96024108:	912d0676 	add	x22, x19, #0xb41
    9602410c:	aa1603e0 	mov	x0, x22
	err = fdt_setprop(fdt, nodeoffset, "device_type",
    96024110:	f00000d5 	adrp	x21, 9603f000 <device_info_list+0x6dc>
						 name, strlen(name)+1);
    96024114:	9400187e 	bl	9602a30c <strlen>
	err = fdt_setprop(fdt, nodeoffset, "device_type",
    96024118:	9107e2b5 	add	x21, x21, #0x1f8
    9602411c:	11000404 	add	w4, w0, #0x1
    96024120:	aa1603e3 	mov	x3, x22
    96024124:	aa1503e2 	mov	x2, x21
    96024128:	2a1803e1 	mov	w1, w24
    9602412c:	aa1703e0 	mov	x0, x23
    96024130:	94003a85 	bl	96032b44 <fdt_setprop>
	if (err < 0) {
    96024134:	36f80320 	tbz	w0, #31, 96024198 <add_memory_info+0x204>
			pr_error("Failed to update /memory/%s in DTB (%s)\n",
    96024138:	94003bde 	bl	960330b0 <fdt_strerror>
    9602413c:	aa0003e2 	mov	x2, x0
    96024140:	aa1503e1 	mov	x1, x21
    96024144:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024148:	91221000 	add	x0, x0, #0x884
    9602414c:	97fff949 	bl	96022670 <tegrabl_printf>
	status = (enable_os_mem_encryption == 0) ?
    96024150:	52800013 	mov	w19, #0x0                   	// #0
	return status;
    96024154:	17ffffac 	b	96024004 <add_memory_info+0x70>
		buf[num_memory_chunks * 2 + 0] = cpu_to_fdt64(blk_arr[num_memory_chunks].base);
    96024158:	f94037a1 	ldr	x1, [x29, #104]
	for (num_memory_chunks = 0; num_memory_chunks < blk_arr_cnt; num_memory_chunks++) {
    9602415c:	11000694 	add	w20, w20, #0x1
		buf[num_memory_chunks * 2 + 0] = cpu_to_fdt64(blk_arr[num_memory_chunks].base);
    96024160:	8b130022 	add	x2, x1, x19
    96024164:	f8736820 	ldr	x0, [x1, x19]
    96024168:	97fffd38 	bl	96023648 <fdt64_to_cpu>
    9602416c:	f8336ac0 	str	x0, [x22, x19]
		buf[num_memory_chunks * 2 + 1] = cpu_to_fdt64(blk_arr[num_memory_chunks].size);
    96024170:	f9400440 	ldr	x0, [x2, #8]
    96024174:	97fffd35 	bl	96023648 <fdt64_to_cpu>
    96024178:	8b1302c3 	add	x3, x22, x19
    9602417c:	f9000460 	str	x0, [x3, #8]
		pr_info("added [base:0x%"PRIx64", size:0x%"PRIx64"] to /memory\n",
    96024180:	aa1503e0 	mov	x0, x21
    96024184:	f8736821 	ldr	x1, [x1, x19]
    96024188:	91004273 	add	x19, x19, #0x10
    9602418c:	f9400442 	ldr	x2, [x2, #8]
    96024190:	97fff938 	bl	96022670 <tegrabl_printf>
    96024194:	17ffffd9 	b	960240f8 <add_memory_info+0x164>
	if (num_memory_chunks) {
    96024198:	34000154 	cbz	w20, 960241c0 <add_memory_info+0x22c>
		err = fdt_setprop(fdt, nodeoffset, "reg", buf,
    9602419c:	900000f5 	adrp	x21, 96040000 <sdmmc_base_addr+0x9f4>
    960241a0:	91183ab5 	add	x21, x21, #0x60e
    960241a4:	531c6e84 	lsl	w4, w20, #4
    960241a8:	910203a3 	add	x3, x29, #0x80
    960241ac:	aa1503e2 	mov	x2, x21
    960241b0:	2a1803e1 	mov	w1, w24
    960241b4:	aa1703e0 	mov	x0, x23
    960241b8:	94003a63 	bl	96032b44 <fdt_setprop>
		if (err < 0) {
    960241bc:	37fffbe0 	tbnz	w0, #31, 96024138 <add_memory_info+0x1a4>
	pr_info("Updated %s info to DTB\n", "memory");
    960241c0:	912d0661 	add	x1, x19, #0xb41
    960241c4:	f00000e0 	adrp	x0, 96043000 <common_params>
    960241c8:	911c5000 	add	x0, x0, #0x714
    960241cc:	97fff929 	bl	96022670 <tegrabl_printf>
    960241d0:	17ffffe0 	b	96024150 <add_memory_info+0x1bc>

00000000960241d4 <tegrabl_linuxboot_update_dtb>:

tegrabl_error_t tegrabl_linuxboot_update_dtb(void *fdt)
{
    960241d4:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    960241d8:	910003fd 	mov	x29, sp
    960241dc:	a90153f3 	stp	x19, x20, [sp, #16]
    960241e0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960241e4:	a90363f7 	stp	x23, x24, [sp, #48]
	uint32_t i;
	int node = -1;
	int prev_offset = -1;
	char *prev_name = NULL;
	tegrabl_error_t status;
	struct tegrabl_linuxboot_dtnode_info *extra_nodes = NULL;
    960241e8:	f90027bf 	str	xzr, [x29, #72]

	if (fdt == NULL)
    960241ec:	b40014c0 	cbz	x0, 96024484 <tegrabl_linuxboot_update_dtb+0x2b0>
    960241f0:	f00000f4 	adrp	x20, 96043000 <common_params>
    960241f4:	9125a294 	add	x20, x20, #0x968
    960241f8:	aa0003f3 	mov	x19, x0
    960241fc:	91002294 	add	x20, x20, #0x8
	char *prev_name = NULL;
    96024200:	d2800017 	mov	x23, #0x0                   	// #0
	int prev_offset = -1;
    96024204:	12800015 	mov	w21, #0xffffffff            	// #-1
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);

	for (i = 0; common_nodes[i].node_name != NULL; i++) {
    96024208:	f85f8296 	ldur	x22, [x20, #-8]
    9602420c:	b50002f6 	cbnz	x22, 96024268 <tegrabl_linuxboot_update_dtb+0x94>
			}
		}
	}

	prev_name = NULL;
	if (tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_EXTRA_DT_NODES,
    96024210:	910123a2 	add	x2, x29, #0x48
    96024214:	d2800001 	mov	x1, #0x0                   	// #0
    96024218:	52800020 	mov	w0, #0x1                   	// #1
    9602421c:	940004f7 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
    96024220:	34000b00 	cbz	w0, 96024380 <tegrabl_linuxboot_update_dtb+0x1ac>
	tegrabl_tos_type_t tos_type = 0;
    96024224:	9101c3b4 	add	x20, x29, #0x70
	err = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_SECUREOS,
    96024228:	d2800001 	mov	x1, #0x0                   	// #0
    9602422c:	52800140 	mov	w0, #0xa                   	// #10
	tegrabl_tos_type_t tos_type = 0;
    96024230:	b81e0e9f 	str	wzr, [x20, #-32]!
	err = tegrabl_linuxboot_helper_get_info(TEGRABL_LINUXBOOT_INFO_SECUREOS,
    96024234:	aa1403e2 	mov	x2, x20
    96024238:	940004f0 	bl	960255f8 <tegrabl_linuxboot_helper_get_info>
	if (err != TEGRABL_NO_ERROR) {
    9602423c:	34000a60 	cbz	w0, 96024388 <tegrabl_linuxboot_update_dtb+0x1b4>
	err = tegrabl_get_serial_no((uint8_t *)sno);
    96024240:	aa1403e0 	mov	x0, x20
    96024244:	940025c5 	bl	9602d958 <tegrabl_get_serial_no>
	if (err != TEGRABL_NO_ERROR) {
    96024248:	34000d40 	cbz	w0, 960243f0 <tegrabl_linuxboot_update_dtb+0x21c>
		pr_error("Failed to get serial number\n");
    9602424c:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024250:	9128dc00 	add	x0, x0, #0xa37
			pr_error("Failed to add serialno in /firmware/android\n");
    96024254:	97fff907 	bl	96022670 <tegrabl_printf>
	/* add serial number as kernel DT property */
	tegrabl_add_serialno(fdt);

	/* plugin-manager overlay */
#if defined(CONFIG_ENABLE_PLUGIN_MANAGER)
	tegrabl_plugin_manager_overlay(fdt);
    96024258:	aa1303e0 	mov	x0, x19
#endif

	pr_debug("%s: done\n", __func__);

	return TEGRABL_NO_ERROR;
    9602425c:	52800015 	mov	w21, #0x0                   	// #0
	tegrabl_plugin_manager_overlay(fdt);
    96024260:	94004070 	bl	96034420 <tegrabl_plugin_manager_overlay>
	return TEGRABL_NO_ERROR;
    96024264:	14000015 	b	960242b8 <tegrabl_linuxboot_update_dtb+0xe4>
		if (!prev_name || strcmp(prev_name, common_nodes[i].node_name)) {
    96024268:	b5000357 	cbnz	x23, 960242d0 <tegrabl_linuxboot_update_dtb+0xfc>
			node = tegrabl_add_subnode_if_absent(fdt, 0,
    9602426c:	aa1603e2 	mov	x2, x22
    96024270:	52800001 	mov	w1, #0x0                   	// #0
    96024274:	aa1303e0 	mov	x0, x19
    96024278:	9400347d 	bl	9603146c <tegrabl_add_subnode_if_absent>
    9602427c:	2a0003f6 	mov	w22, w0
		if (node < 0)
    96024280:	37f80356 	tbnz	w22, #31, 960242e8 <tegrabl_linuxboot_update_dtb+0x114>
		if (common_nodes[i].fill_dtnode) {
    96024284:	a97fe297 	ldp	x23, x24, [x20, #-8]
    96024288:	b4000338 	cbz	x24, 960242ec <tegrabl_linuxboot_update_dtb+0x118>
			status = common_nodes[i].fill_dtnode(fdt, node);
    9602428c:	2a1603e1 	mov	w1, w22
    96024290:	aa1303e0 	mov	x0, x19
    96024294:	d63f0300 	blr	x24
    96024298:	2a0003f5 	mov	w21, w0
		    if (status != TEGRABL_NO_ERROR) {
    9602429c:	34000280 	cbz	w0, 960242ec <tegrabl_linuxboot_update_dtb+0x118>
				pr_error("%s: %p failed\n", __func__,
    960242a0:	aa1803e2 	mov	x2, x24
					pr_error("%s: %p failed\n", __func__,
    960242a4:	f00000e1 	adrp	x1, 96043000 <common_params>
    960242a8:	f00000e0 	adrp	x0, 96043000 <common_params>
    960242ac:	9113b021 	add	x1, x1, #0x4ec
    960242b0:	91286000 	add	x0, x0, #0xa18
    960242b4:	97fff8ef 	bl	96022670 <tegrabl_printf>
}
    960242b8:	2a1503e0 	mov	w0, w21
    960242bc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960242c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960242c4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960242c8:	a8c77bfd 	ldp	x29, x30, [sp], #112
    960242cc:	d65f03c0 	ret
		if (!prev_name || strcmp(prev_name, common_nodes[i].node_name)) {
    960242d0:	aa1603e1 	mov	x1, x22
    960242d4:	aa1703e0 	mov	x0, x23
    960242d8:	940017dd 	bl	9602a24c <strcmp>
    960242dc:	35fffc80 	cbnz	w0, 9602426c <tegrabl_linuxboot_update_dtb+0x98>
    960242e0:	2a1503f6 	mov	w22, w21
    960242e4:	17ffffe7 	b	96024280 <tegrabl_linuxboot_update_dtb+0xac>
    960242e8:	2a1503f6 	mov	w22, w21
    960242ec:	91004294 	add	x20, x20, #0x10
	int prev_offset = -1;
    960242f0:	2a1603f5 	mov	w21, w22
    960242f4:	17ffffc5 	b	96024208 <tegrabl_linuxboot_update_dtb+0x34>
			if (!prev_name || strcmp(prev_name, extra_nodes[i].node_name)) {
    960242f8:	aa1603e0 	mov	x0, x22
    960242fc:	940017d4 	bl	9602a24c <strcmp>
    96024300:	35000160 	cbnz	w0, 9602432c <tegrabl_linuxboot_update_dtb+0x158>
				node = prev_offset;
    96024304:	2a1503f7 	mov	w23, w21
    96024308:	1400000f 	b	96024344 <tegrabl_linuxboot_update_dtb+0x170>
    9602430c:	2a1503f7 	mov	w23, w21
		for (i = 0; extra_nodes[i].node_name != NULL; i++) {
    96024310:	11000718 	add	w24, w24, #0x1
    96024314:	2a1703f5 	mov	w21, w23
    96024318:	d37c7f14 	ubfiz	x20, x24, #4, #32
    9602431c:	f94027a0 	ldr	x0, [x29, #72]
    96024320:	f8746801 	ldr	x1, [x0, x20]
    96024324:	b4fff801 	cbz	x1, 96024224 <tegrabl_linuxboot_update_dtb+0x50>
			if (!prev_name || strcmp(prev_name, extra_nodes[i].node_name)) {
    96024328:	b5fffe96 	cbnz	x22, 960242f8 <tegrabl_linuxboot_update_dtb+0x124>
				node = tegrabl_add_subnode_if_absent(fdt, 0,
    9602432c:	f94027a0 	ldr	x0, [x29, #72]
    96024330:	52800001 	mov	w1, #0x0                   	// #0
    96024334:	f8746802 	ldr	x2, [x0, x20]
    96024338:	aa1303e0 	mov	x0, x19
    9602433c:	9400344c 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96024340:	2a0003f7 	mov	w23, w0
			if (node < 0)
    96024344:	37fffe57 	tbnz	w23, #31, 9602430c <tegrabl_linuxboot_update_dtb+0x138>
			prev_name = extra_nodes[i].node_name;
    96024348:	f94027a0 	ldr	x0, [x29, #72]
    9602434c:	8b140001 	add	x1, x0, x20
    96024350:	f8746816 	ldr	x22, [x0, x20]
			if (extra_nodes[i].fill_dtnode) {
    96024354:	f9400422 	ldr	x2, [x1, #8]
    96024358:	b4fffdc2 	cbz	x2, 96024310 <tegrabl_linuxboot_update_dtb+0x13c>
				status = extra_nodes[i].fill_dtnode(fdt, node);
    9602435c:	2a1703e1 	mov	w1, w23
    96024360:	aa1303e0 	mov	x0, x19
    96024364:	d63f0040 	blr	x2
    96024368:	2a0003f5 	mov	w21, w0
				if (status != TEGRABL_NO_ERROR) {
    9602436c:	34fffd20 	cbz	w0, 96024310 <tegrabl_linuxboot_update_dtb+0x13c>
					pr_error("%s: %p failed\n", __func__,
    96024370:	f94027a0 	ldr	x0, [x29, #72]
    96024374:	8b140014 	add	x20, x0, x20
    96024378:	f9400682 	ldr	x2, [x20, #8]
    9602437c:	17ffffca 	b	960242a4 <tegrabl_linuxboot_update_dtb+0xd0>
		for (i = 0; extra_nodes[i].node_name != NULL; i++) {
    96024380:	52800018 	mov	w24, #0x0                   	// #0
    96024384:	17ffffe5 	b	96024318 <tegrabl_linuxboot_update_dtb+0x144>
	switch (tos_type) {
    96024388:	b94053a0 	ldr	w0, [x29, #80]
    9602438c:	7100041f 	cmp	w0, #0x1
    96024390:	540000c0 	b.eq	960243a8 <tegrabl_linuxboot_update_dtb+0x1d4>  // b.none
    96024394:	7100081f 	cmp	w0, #0x2
    96024398:	54fff541 	b.ne	96024240 <tegrabl_linuxboot_update_dtb+0x6c>  // b.any
		node = fdt_path_offset(fdt, "/trusty");
    9602439c:	f00000e1 	adrp	x1, 96043000 <common_params>
    960243a0:	9128bc21 	add	x1, x1, #0xa2f
    960243a4:	14000003 	b	960243b0 <tegrabl_linuxboot_update_dtb+0x1dc>
		node = fdt_path_offset(fdt, "/tlk");
    960243a8:	f00000e1 	adrp	x1, 96043000 <common_params>
    960243ac:	9128a821 	add	x1, x1, #0xa2a
		node = fdt_path_offset(fdt, "/trusty");
    960243b0:	aa1303e0 	mov	x0, x19
    960243b4:	94003760 	bl	96032134 <fdt_path_offset>
    960243b8:	2a0003f5 	mov	w21, w0
		if (node < 0) {
    960243bc:	37fff420 	tbnz	w0, #31, 96024240 <tegrabl_linuxboot_update_dtb+0x6c>
	fdt_err = fdt_setprop_string(fdt, node, "status", "okay");
    960243c0:	900000d6 	adrp	x22, 9603c000 <__func__.4414+0x9>
    960243c4:	9123c6d6 	add	x22, x22, #0x8f1
    960243c8:	aa1603e0 	mov	x0, x22
    960243cc:	940017d0 	bl	9602a30c <strlen>
    960243d0:	aa1603e3 	mov	x3, x22
    960243d4:	11000404 	add	w4, w0, #0x1
    960243d8:	900000c2 	adrp	x2, 9603c000 <__func__.4414+0x9>
    960243dc:	2a1503e1 	mov	w1, w21
    960243e0:	9123a842 	add	x2, x2, #0x8ea
    960243e4:	aa1303e0 	mov	x0, x19
    960243e8:	940039d7 	bl	96032b44 <fdt_setprop>
    960243ec:	17ffff95 	b	96024240 <tegrabl_linuxboot_update_dtb+0x6c>
	pr_info("Add serial number:%s as DT property\n", sno);
    960243f0:	aa1403e1 	mov	x1, x20
    960243f4:	f00000e0 	adrp	x0, 96043000 <common_params>
    960243f8:	91295c00 	add	x0, x0, #0xa57
    960243fc:	97fff89d 	bl	96022670 <tegrabl_printf>
	fdt_err = fdt_setprop_string(fdt, 0, "serial-number", sno);
    96024400:	aa1403e0 	mov	x0, x20
    96024404:	940017c2 	bl	9602a30c <strlen>
    96024408:	11000404 	add	w4, w0, #0x1
    9602440c:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024410:	aa1403e3 	mov	x3, x20
    96024414:	9129fc42 	add	x2, x2, #0xa7f
    96024418:	52800001 	mov	w1, #0x0                   	// #0
    9602441c:	aa1303e0 	mov	x0, x19
    96024420:	940039c9 	bl	96032b44 <fdt_setprop>
	if (fdt_err < 0) {
    96024424:	36f80080 	tbz	w0, #31, 96024434 <tegrabl_linuxboot_update_dtb+0x260>
		pr_error("Failed to add serialno in DT\n");
    96024428:	f00000e0 	adrp	x0, 96043000 <common_params>
    9602442c:	912a3400 	add	x0, x0, #0xa8d
    96024430:	17ffff89 	b	96024254 <tegrabl_linuxboot_update_dtb+0x80>
	node = fdt_path_offset(fdt, "/firmware/android");
    96024434:	f00000e1 	adrp	x1, 96043000 <common_params>
    96024438:	aa1303e0 	mov	x0, x19
    9602443c:	912ab821 	add	x1, x1, #0xaae
    96024440:	9400373d 	bl	96032134 <fdt_path_offset>
    96024444:	2a0003f5 	mov	w21, w0
	if (node > 0) {
    96024448:	7100001f 	cmp	w0, #0x0
    9602444c:	54fff06d 	b.le	96024258 <tegrabl_linuxboot_update_dtb+0x84>
		fdt_err = fdt_setprop_string(fdt, node, "serialno", sno);
    96024450:	aa1403e0 	mov	x0, x20
    96024454:	940017ae 	bl	9602a30c <strlen>
    96024458:	f00000e2 	adrp	x2, 96043000 <common_params>
    9602445c:	11000404 	add	w4, w0, #0x1
    96024460:	aa1403e3 	mov	x3, x20
    96024464:	912b0042 	add	x2, x2, #0xac0
    96024468:	2a1503e1 	mov	w1, w21
    9602446c:	aa1303e0 	mov	x0, x19
    96024470:	940039b5 	bl	96032b44 <fdt_setprop>
		if (fdt_err < 0) {
    96024474:	36ffef20 	tbz	w0, #31, 96024258 <tegrabl_linuxboot_update_dtb+0x84>
			pr_error("Failed to add serialno in /firmware/android\n");
    96024478:	f00000e0 	adrp	x0, 96043000 <common_params>
    9602447c:	912b2400 	add	x0, x0, #0xac9
    96024480:	17ffff75 	b	96024254 <tegrabl_linuxboot_update_dtb+0x80>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96024484:	52800055 	mov	w21, #0x2                   	// #2
    96024488:	72a56575 	movk	w21, #0x2b2b, lsl #16
    9602448c:	17ffff8b 	b	960242b8 <tegrabl_linuxboot_update_dtb+0xe4>

0000000096024490 <is_dram_address_free>:
 * Returns false if addr is already allocated. available_addr will be updated
 * with an address that is not allocated.
 */
static bool is_dram_address_free(void *addr, uint64_t size, void **available_addr)
{
	struct dram_alloc *ptr_alloc = &dram_alloc_base;
    96024490:	d0000263 	adrp	x3, 96072000 <cmdline+0x510>
    96024494:	9110c063 	add	x3, x3, #0x430
	void *alloc_addr_start;
	void *alloc_addr_end;
	void *addr_end;
	bool ret = true;
    96024498:	52800027 	mov	w7, #0x1                   	// #1

	/* Loop through all allocated regions */
	while (ptr_alloc) {
		alloc_addr_start = ptr_alloc->start;
		alloc_addr_end = alloc_addr_start + ptr_alloc->size;
    9602449c:	a9401065 	ldp	x5, x4, [x3]
		addr_end = addr + size;
    960244a0:	8b010006 	add	x6, x0, x1
		/*
		 * Check if the addresses overlap
		 * 1. Is allocated address region overlapping with input range
		 * 2. Is input region part of any allocated address region
		 */
		if ((((alloc_addr_start >= addr) && (alloc_addr_start <= addr_end)) ||
    960244a4:	eb0600bf 	cmp	x5, x6
		alloc_addr_end = alloc_addr_start + ptr_alloc->size;
    960244a8:	8b0400a4 	add	x4, x5, x4
		if ((((alloc_addr_start >= addr) && (alloc_addr_start <= addr_end)) ||
    960244ac:	1a9f87e8 	cset	w8, ls  // ls = plast
    960244b0:	7100011f 	cmp	w8, #0x0
    960244b4:	fa4010a0 	ccmp	x5, x0, #0x0, ne  // ne = any
    960244b8:	54000102 	b.cs	960244d8 <is_dram_address_free+0x48>  // b.hs, b.nlast
				((alloc_addr_end >= addr) && (alloc_addr_end <= addr_end)))	||
    960244bc:	eb06009f 	cmp	x4, x6
    960244c0:	fa4080a0 	ccmp	x5, x0, #0x0, hi  // hi = pmore
    960244c4:	fa409080 	ccmp	x4, x0, #0x0, ls  // ls = plast
    960244c8:	54000082 	b.cs	960244d8 <is_dram_address_free+0x48>  // b.hs, b.nlast
		    (((addr >= alloc_addr_start) && (addr <= alloc_addr_end))		||
				((addr_end >= alloc_addr_start) && (addr_end <= alloc_addr_end)))) {
    960244cc:	7100011f 	cmp	w8, #0x0
		    (((addr >= alloc_addr_start) && (addr <= alloc_addr_end))		||
    960244d0:	fa461080 	ccmp	x4, x6, #0x0, ne  // ne = any
    960244d4:	54000063 	b.cc	960244e0 <is_dram_address_free+0x50>  // b.lo, b.ul, b.last
			ret = false;
			/* If addr is allocated, suggest next page after this region */
			addr = alloc_addr_end + PAGE_SIZE;
    960244d8:	91404080 	add	x0, x4, #0x10, lsl #12
			ret = false;
    960244dc:	52800007 	mov	w7, #0x0                   	// #0
		}
		ptr_alloc = ptr_alloc->next;
    960244e0:	f9400863 	ldr	x3, [x3, #16]
	while (ptr_alloc) {
    960244e4:	b5fffdc3 	cbnz	x3, 9602449c <is_dram_address_free+0xc>
	}
	if (available_addr != NULL) {
    960244e8:	b4000042 	cbz	x2, 960244f0 <is_dram_address_free+0x60>
		*available_addr = addr;
    960244ec:	f9000040 	str	x0, [x2]
	}

	return ret;
}
    960244f0:	2a0703e0 	mov	w0, w7
    960244f4:	d65f03c0 	ret

00000000960244f8 <alloc_dram_free_region>:

/* Add dram address range to a sorted linked list */
static void alloc_dram_free_region(void *addr, uint64_t size)
{
    960244f8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	struct dram_alloc *ptr_alloc = &dram_alloc_base;
	struct dram_alloc *ptr_temp = NULL;

	if (dram_alloc_base.start != NULL) {
    960244fc:	d0000262 	adrp	x2, 96072000 <cmdline+0x510>
{
    96024500:	910003fd 	mov	x29, sp
    96024504:	a9025bf5 	stp	x21, x22, [sp, #32]
    96024508:	aa0103f6 	mov	x22, x1
	if (dram_alloc_base.start != NULL) {
    9602450c:	f9421841 	ldr	x1, [x2, #1072]
{
    96024510:	aa0003f5 	mov	x21, x0
    96024514:	a90153f3 	stp	x19, x20, [sp, #16]
	if (dram_alloc_base.start != NULL) {
    96024518:	9110c040 	add	x0, x2, #0x430
    9602451c:	b4000261 	cbz	x1, 96024568 <alloc_dram_free_region+0x70>
	struct dram_alloc *ptr_alloc = &dram_alloc_base;
    96024520:	aa0003f3 	mov	x19, x0
		/* Find the right position in sorted list */
		while ((addr > (ptr_alloc->start + ptr_alloc->size)) && (ptr_alloc->next)) {
    96024524:	a9400660 	ldp	x0, x1, [x19]
    96024528:	f9400a74 	ldr	x20, [x19, #16]
    9602452c:	8b010000 	add	x0, x0, x1
    96024530:	eb0002bf 	cmp	x21, x0
    96024534:	54000049 	b.ls	9602453c <alloc_dram_free_region+0x44>  // b.plast
    96024538:	b5000154 	cbnz	x20, 96024560 <alloc_dram_free_region+0x68>
			ptr_alloc = ptr_alloc->next;
		}
		ptr_temp = ptr_alloc->next;
		ptr_alloc->next = tegrabl_malloc(sizeof(struct dram_alloc));
    9602453c:	d2800300 	mov	x0, #0x18                  	// #24
    96024540:	9400094e 	bl	96026a78 <tegrabl_malloc>
    96024544:	f9000a60 	str	x0, [x19, #16]
		ptr_alloc = ptr_alloc->next;
	}
	ptr_alloc->start = addr;
	ptr_alloc->size = size;
    96024548:	a9005815 	stp	x21, x22, [x0]
	ptr_alloc->next = ptr_temp;
    9602454c:	f9000814 	str	x20, [x0, #16]
}
    96024550:	a94153f3 	ldp	x19, x20, [sp, #16]
    96024554:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96024558:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602455c:	d65f03c0 	ret
    96024560:	aa1403f3 	mov	x19, x20
    96024564:	17fffff0 	b	96024524 <alloc_dram_free_region+0x2c>
	struct dram_alloc *ptr_temp = NULL;
    96024568:	d2800014 	mov	x20, #0x0                   	// #0
    9602456c:	17fffff7 	b	96024548 <alloc_dram_free_region+0x50>

0000000096024570 <disable_floorswept_cpus>:
{
    96024570:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	err = tegrabl_fuse_read(FUSE_ENABLED_CPU_CORES,
    96024574:	52800082 	mov	w2, #0x4                   	// #4
{
    96024578:	910003fd 	mov	x29, sp
    9602457c:	a90153f3 	stp	x19, x20, [sp, #16]
    96024580:	a9025bf5 	stp	x21, x22, [sp, #32]
    96024584:	aa0003f6 	mov	x22, x0
    96024588:	a90363f7 	stp	x23, x24, [sp, #48]
	err = tegrabl_fuse_read(FUSE_ENABLED_CPU_CORES,
    9602458c:	52800180 	mov	w0, #0xc                   	// #12
{
    96024590:	a9046bf9 	stp	x25, x26, [sp, #64]
    96024594:	2a0103f8 	mov	w24, w1
    96024598:	f9002bfb 	str	x27, [sp, #80]
	err = tegrabl_fuse_read(FUSE_ENABLED_CPU_CORES,
    9602459c:	9101b3a1 	add	x1, x29, #0x6c
    960245a0:	97ffe88d 	bl	9601e7d4 <tegrabl_fuse_read>
    960245a4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960245a8:	34000980 	cbz	w0, 960246d8 <disable_floorswept_cpus+0x168>
    960245ac:	12005c13 	and	w19, w0, #0xffffff
    960245b0:	52a56000 	mov	w0, #0x2b000000            	// #721420288
    960245b4:	2a000273 	orr	w19, w19, w0
}
    960245b8:	2a1303e0 	mov	w0, w19
    960245bc:	f9402bfb 	ldr	x27, [sp, #80]
    960245c0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960245c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960245c8:	a94363f7 	ldp	x23, x24, [sp, #48]
    960245cc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960245d0:	a8c77bfd 	ldp	x29, x30, [sp], #112
    960245d4:	d65f03c0 	ret
			mpidr = fdt32_to_cpu(*((uint32_t *)p_reg + 1));
    960245d8:	b9400401 	ldr	w1, [x0, #4]
    960245dc:	d3505c22 	ubfx	x2, x1, #16, #8
    960245e0:	d3483c20 	ubfx	x0, x1, #8, #8
    960245e4:	53185c42 	lsl	w2, w2, #8
    960245e8:	2a004040 	orr	w0, w2, w0, lsl #16
    960245ec:	53187c22 	lsr	w2, w1, #24
    960245f0:	2a016041 	orr	w1, w2, w1, lsl #24
    960245f4:	2a010000 	orr	w0, w0, w1
			if (!(enabled_cores_mask & (1 << cpu))) {
    960245f8:	b9406fa1 	ldr	w1, [x29, #108]
			cpu = mpidr_to_cpu_idx(mpidr);
    960245fc:	d348241a 	ubfx	x26, x0, #8, #2
    96024600:	12000400 	and	w0, w0, #0x3
    96024604:	0b1a081a 	add	w26, w0, w26, lsl #2
			if (!(enabled_cores_mask & (1 << cpu))) {
    96024608:	52800020 	mov	w0, #0x1                   	// #1
    9602460c:	1ada2000 	lsl	w0, w0, w26
    96024610:	6a01001f 	tst	w0, w1
    96024614:	54000301 	b.ne	96024674 <disable_floorswept_cpus+0x104>  // b.any
									"disabled", strlen("disabled") + 1);
    96024618:	b00000db 	adrp	x27, 9603d000 <__func__.3609+0x209>
    9602461c:	9106877b 	add	x27, x27, #0x1a1
    96024620:	aa1b03e0 	mov	x0, x27
    96024624:	9400173a 	bl	9602a30c <strlen>
				dterr = fdt_setprop(fdt, offset, "status",
    96024628:	900000c2 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9602462c:	11000404 	add	w4, w0, #0x1
    96024630:	aa1b03e3 	mov	x3, x27
    96024634:	9123a842 	add	x2, x2, #0x8ea
    96024638:	2a1403e1 	mov	w1, w20
    9602463c:	aa1603e0 	mov	x0, x22
    96024640:	94003941 	bl	96032b44 <fdt_setprop>
				if (dterr < 0) {
    96024644:	36f80100 	tbz	w0, #31, 96024664 <disable_floorswept_cpus+0xf4>
					pr_error("Failed to disable cpu node: %s\n",
    96024648:	94003a9a 	bl	960330b0 <fdt_strerror>
					return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    9602464c:	52800453 	mov	w19, #0x22                  	// #34
					pr_error("Failed to disable cpu node: %s\n",
    96024650:	aa0003e1 	mov	x1, x0
    96024654:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024658:	91340800 	add	x0, x0, #0xd02
    9602465c:	97fff805 	bl	96022670 <tegrabl_printf>
    96024660:	1400001c 	b	960246d0 <disable_floorswept_cpus+0x160>
				pr_info("Disabled cpu-%u node in FDT\n", cpu);
    96024664:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024668:	2a1a03e1 	mov	w1, w26
    9602466c:	91349400 	add	x0, x0, #0xd25
    96024670:	97fff800 	bl	96022670 <tegrabl_printf>
	while (offset > 0) {
    96024674:	7100029f 	cmp	w20, #0x0
    96024678:	54fffa0d 	b.le	960245b8 <disable_floorswept_cpus+0x48>
											   "cpu", strlen("cpu")+1);
    9602467c:	aa1503e0 	mov	x0, x21
    96024680:	94001723 	bl	9602a30c <strlen>
		offset = fdt_node_offset_by_prop_value(fdt, offset,
    96024684:	2a1403e1 	mov	w1, w20
    96024688:	11000404 	add	w4, w0, #0x1
    9602468c:	aa1503e3 	mov	x3, x21
    96024690:	aa1703e2 	mov	x2, x23
    96024694:	aa1603e0 	mov	x0, x22
    96024698:	9400378d 	bl	960324cc <fdt_node_offset_by_prop_value>
    9602469c:	2a0003f4 	mov	w20, w0
		if (offset > nodeoffset) {
    960246a0:	6b00031f 	cmp	w24, w0
    960246a4:	54fffe8a 	b.ge	96024674 <disable_floorswept_cpus+0x104>  // b.tcont
			p_reg = fdt_getprop(fdt, offset, "reg", NULL);
    960246a8:	2a0003e1 	mov	w1, w0
    960246ac:	d2800003 	mov	x3, #0x0                   	// #0
    960246b0:	91183b22 	add	x2, x25, #0x60e
    960246b4:	aa1603e0 	mov	x0, x22
    960246b8:	94003654 	bl	96032008 <fdt_getprop>
			if (!p_reg) {
    960246bc:	b5fff8e0 	cbnz	x0, 960245d8 <disable_floorswept_cpus+0x68>
				return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    960246c0:	528001b3 	mov	w19, #0xd                   	// #13
				pr_error("couldn't find reg property in cpu node\n");
    960246c4:	f00000e0 	adrp	x0, 96043000 <common_params>
    960246c8:	91335c00 	add	x0, x0, #0xcd7
    960246cc:	97fff7e9 	bl	96022670 <tegrabl_printf>
					return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    960246d0:	72a56573 	movk	w19, #0x2b2b, lsl #16
    960246d4:	17ffffb9 	b	960245b8 <disable_floorswept_cpus+0x48>
											   "cpu", strlen("cpu")+1);
    960246d8:	f00000f5 	adrp	x21, 96043000 <common_params>
		offset = fdt_node_offset_by_prop_value(fdt, offset,
    960246dc:	f00000d7 	adrp	x23, 9603f000 <device_info_list+0x6dc>
	offset = nodeoffset;
    960246e0:	2a1803f4 	mov	w20, w24
											   "cpu", strlen("cpu")+1);
    960246e4:	91334eb5 	add	x21, x21, #0xcd3
		offset = fdt_node_offset_by_prop_value(fdt, offset,
    960246e8:	9107e2f7 	add	x23, x23, #0x1f8
			p_reg = fdt_getprop(fdt, offset, "reg", NULL);
    960246ec:	900000f9 	adrp	x25, 96040000 <sdmmc_base_addr+0x9f4>
    960246f0:	17ffffe1 	b	96024674 <disable_floorswept_cpus+0x104>

00000000960246f4 <add_ecid_info>:
{
    960246f4:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    960246f8:	910003fd 	mov	x29, sp
    960246fc:	a90153f3 	stp	x19, x20, [sp, #16]
    96024700:	aa0003f4 	mov	x20, x0
    96024704:	f90013f5 	str	x21, [sp, #32]
	err = tegrabl_get_ecid_str(ecid_str, ECID_STR_SIZE);
    96024708:	9100c3a0 	add	x0, x29, #0x30
	char ecid_str[ECID_STR_SIZE] = {'\0'};
    9602470c:	a9037fbf 	stp	xzr, xzr, [x29, #48]
{
    96024710:	2a0103f5 	mov	w21, w1
	char ecid_str[ECID_STR_SIZE] = {'\0'};
    96024714:	a9047fbf 	stp	xzr, xzr, [x29, #64]
	err = tegrabl_get_ecid_str(ecid_str, ECID_STR_SIZE);
    96024718:	52800801 	mov	w1, #0x40                  	// #64
	char ecid_str[ECID_STR_SIZE] = {'\0'};
    9602471c:	a9057fbf 	stp	xzr, xzr, [x29, #80]
    96024720:	a9067fbf 	stp	xzr, xzr, [x29, #96]
	err = tegrabl_get_ecid_str(ecid_str, ECID_STR_SIZE);
    96024724:	97fff3d0 	bl	96021664 <tegrabl_get_ecid_str>
    96024728:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9602472c:	34000160 	cbz	w0, 96024758 <add_ecid_info+0x64>
		err = TEGRABL_NO_ERROR;
    96024730:	52800013 	mov	w19, #0x0                   	// #0
		pr_warn("Failed to read ecid (err = %x), skip adding to DT ...\n", err);
    96024734:	2a0003e1 	mov	w1, w0
    96024738:	f00000e0 	adrp	x0, 96043000 <common_params>
    9602473c:	912cec00 	add	x0, x0, #0xb3b
    96024740:	97fff7cc 	bl	96022670 <tegrabl_printf>
}
    96024744:	2a1303e0 	mov	w0, w19
    96024748:	f94013f5 	ldr	x21, [sp, #32]
    9602474c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96024750:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96024754:	d65f03c0 	ret
	fdt_err = fdt_setprop_string(fdt, nodeoffset, "ecid", ecid_str);
    96024758:	9100c3a0 	add	x0, x29, #0x30
    9602475c:	940016ec 	bl	9602a30c <strlen>
    96024760:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024764:	11000404 	add	w4, w0, #0x1
    96024768:	9100c3a3 	add	x3, x29, #0x30
    9602476c:	912dd442 	add	x2, x2, #0xb75
    96024770:	2a1503e1 	mov	w1, w21
    96024774:	aa1403e0 	mov	x0, x20
    96024778:	940038f3 	bl	96032b44 <fdt_setprop>
	if (fdt_err < 0) {
    9602477c:	36f800e0 	tbz	w0, #31, 96024798 <add_ecid_info+0xa4>
		err = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96024780:	52800453 	mov	w19, #0x22                  	// #34
		pr_error("Failed to add ecid in DT\n");
    96024784:	f00000e0 	adrp	x0, 96043000 <common_params>
		err = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96024788:	72a56573 	movk	w19, #0x2b2b, lsl #16
		pr_error("Failed to add ecid in DT\n");
    9602478c:	912de800 	add	x0, x0, #0xb7a
    96024790:	97fff7b8 	bl	96022670 <tegrabl_printf>
		goto fail;
    96024794:	17ffffec 	b	96024744 <add_ecid_info+0x50>
	pr_info("Adding ecid(%s) to DT\n", ecid_str);
    96024798:	9100c3a1 	add	x1, x29, #0x30
    9602479c:	f00000e0 	adrp	x0, 96043000 <common_params>
    960247a0:	912e5c00 	add	x0, x0, #0xb97
    960247a4:	97fff7b3 	bl	96022670 <tegrabl_printf>
	return err;
    960247a8:	17ffffe7 	b	96024744 <add_ecid_info+0x50>

00000000960247ac <add_profiler_carveout>:
	if (boot_params->global_data.profiling_carveout) {
    960247ac:	d0000283 	adrp	x3, 96076000 <free_dram_block+0x38e8>
    960247b0:	f9462063 	ldr	x3, [x3, #3136]
    960247b4:	f9401865 	ldr	x5, [x3, #48]
    960247b8:	b40000e5 	cbz	x5, 960247d4 <add_profiler_carveout+0x28>
		ret += tegrabl_snprintf(cmdline, len, "%s=0x%" PRIx32 "@0x%08" PRIx64
    960247bc:	aa0203e3 	mov	x3, x2
    960247c0:	52a00024 	mov	w4, #0x10000               	// #65536
    960247c4:	f00000e2 	adrp	x2, 96043000 <common_params>
    960247c8:	93407c21 	sxtw	x1, w1
    960247cc:	9131e842 	add	x2, x2, #0xc7a
    960247d0:	17fff77d 	b	960225c4 <tegrabl_snprintf>
}
    960247d4:	52800000 	mov	w0, #0x0                   	// #0
    960247d8:	d65f03c0 	ret

00000000960247dc <tegrabl_linuxboot_add_vpr_info>:
	if (!cmdline || !param) {
    960247dc:	f100001f 	cmp	x0, #0x0
    960247e0:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    960247e4:	54000240 	b.eq	9602482c <tegrabl_linuxboot_add_vpr_info+0x50>  // b.none
	reg = mc_read32(MC_VIDEO_PROTECT_BOM_0);
    960247e8:	d280c903 	mov	x3, #0x648                 	// #1608
	reg = mc_read32(MC_VIDEO_PROTECT_SIZE_MB_0);
    960247ec:	d280c984 	mov	x4, #0x64c                 	// #1612
	reg = mc_read32(MC_VIDEO_PROTECT_BOM_0);
    960247f0:	f2a05823 	movk	x3, #0x2c1, lsl #16
	reg = mc_read32(MC_VIDEO_PROTECT_SIZE_MB_0);
    960247f4:	f2a05824 	movk	x4, #0x2c1, lsl #16
	reg = mc_read32(MC_VIDEO_PROTECT_BOM_0);
    960247f8:	b9400065 	ldr	w5, [x3]
	reg = mc_read32(MC_VIDEO_PROTECT_BOM_ADR_HI_0);
    960247fc:	910cc063 	add	x3, x3, #0x330
    96024800:	b9400063 	ldr	w3, [x3]
	reg = mc_read32(MC_VIDEO_PROTECT_SIZE_MB_0);
    96024804:	b9400084 	ldr	w4, [x4]
	size = ((uint64_t)reg << 20);
    96024808:	d36c7c84 	ubfiz	x4, x4, #20, #32
	if (size)
    9602480c:	b4000144 	cbz	x4, 96024834 <tegrabl_linuxboot_add_vpr_info+0x58>
	base = (uint64_t)reg;
    96024810:	2a0503e5 	mov	w5, w5
		return tegrabl_snprintf(cmdline, len, "%s=0x%" PRIx64 "@0x%08" PRIx64
    96024814:	93407c21 	sxtw	x1, w1
    96024818:	aa0380a5 	orr	x5, x5, x3, lsl #32
    9602481c:	aa0203e3 	mov	x3, x2
    96024820:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024824:	910d3842 	add	x2, x2, #0x34e
    96024828:	17fff767 	b	960225c4 <tegrabl_snprintf>
		return -1;
    9602482c:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96024830:	d65f03c0 	ret
		return 0;
    96024834:	52800000 	mov	w0, #0x0                   	// #0
    96024838:	17fffffe 	b	96024830 <tegrabl_linuxboot_add_vpr_info+0x54>

000000009602483c <add_maxcpus>:
{
    9602483c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	if (!cmdline || !param) {
    96024840:	f100001f 	cmp	x0, #0x0
{
    96024844:	910003fd 	mov	x29, sp
    96024848:	a90153f3 	stp	x19, x20, [sp, #16]
	if (!cmdline || !param) {
    9602484c:	1a9f17f3 	cset	w19, eq  // eq = none
{
    96024850:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (!cmdline || !param) {
    96024854:	f100005f 	cmp	x2, #0x0
    96024858:	1a9f1673 	csinc	w19, w19, wzr, ne  // ne = any
    9602485c:	340000d3 	cbz	w19, 96024874 <add_maxcpus+0x38>
		return -1;
    96024860:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96024864:	a94153f3 	ldp	x19, x20, [sp, #16]
    96024868:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602486c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96024870:	d65f03c0 	ret
    96024874:	aa0203f5 	mov	x21, x2
    96024878:	2a0103f6 	mov	w22, w1
    9602487c:	aa0003f4 	mov	x20, x0
	if (tegrabl_fuse_read(FUSE_ENABLED_CPU_CORES,
    96024880:	52800082 	mov	w2, #0x4                   	// #4
    96024884:	9100f3a1 	add	x1, x29, #0x3c
    96024888:	52800180 	mov	w0, #0xc                   	// #12
    9602488c:	97ffe7d2 	bl	9601e7d4 <tegrabl_fuse_read>
    96024890:	35fffe80 	cbnz	w0, 96024860 <add_maxcpus+0x24>
    96024894:	b9403fa0 	ldr	w0, [x29, #60]
	uint32_t num_cores = 0;
    96024898:	52800004 	mov	w4, #0x0                   	// #0
	while (enabled_cores_mask != 0) {
    9602489c:	35000140 	cbnz	w0, 960248c4 <add_maxcpus+0x88>
    960248a0:	34000053 	cbz	w19, 960248a8 <add_maxcpus+0x6c>
    960248a4:	b9003fbf 	str	wzr, [x29, #60]
	return tegrabl_snprintf(cmdline, len, "%s=%u ", param, num_cores);
    960248a8:	aa1503e3 	mov	x3, x21
    960248ac:	f00000e2 	adrp	x2, 96043000 <common_params>
    960248b0:	93407ec1 	sxtw	x1, w22
    960248b4:	912ec442 	add	x2, x2, #0xbb1
    960248b8:	aa1403e0 	mov	x0, x20
    960248bc:	97fff742 	bl	960225c4 <tegrabl_snprintf>
    960248c0:	17ffffe9 	b	96024864 <add_maxcpus+0x28>
			num_cores++;
    960248c4:	12000001 	and	w1, w0, #0x1
    960248c8:	52800033 	mov	w19, #0x1                   	// #1
    960248cc:	0b010084 	add	w4, w4, w1
		enabled_cores_mask >>= 1;
    960248d0:	53017c00 	lsr	w0, w0, #1
    960248d4:	17fffff2 	b	9602489c <add_maxcpus+0x60>

00000000960248d8 <add_tegraid>:
	if (!cmdline || !param) {
    960248d8:	f100001f 	cmp	x0, #0x0
    960248dc:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    960248e0:	54000300 	b.eq	96024940 <add_tegraid+0x68>  // b.none
{
    960248e4:	d10083ff 	sub	sp, sp, #0x20
    960248e8:	aa0203e3 	mov	x3, x2
	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_HIDREV_0);
    960248ec:	d2800082 	mov	x2, #0x4                   	// #4
	return tegrabl_snprintf(cmdline, len, "%s=%x.%x.%x.%x.%x ", param,
    960248f0:	93407c21 	sxtw	x1, w1
	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_HIDREV_0);
    960248f4:	f2a00202 	movk	x2, #0x10, lsl #16
{
    960248f8:	a9017bfd 	stp	x29, x30, [sp, #16]
    960248fc:	910043fd 	add	x29, sp, #0x10
	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_HIDREV_0);
    96024900:	b9400044 	ldr	w4, [x2]
	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_EMU_REVID_0);
    96024904:	d2862c02 	mov	x2, #0x3160                	// #12640
    96024908:	f2a00202 	movk	x2, #0x10, lsl #16
	return tegrabl_snprintf(cmdline, len, "%s=%x.%x.%x.%x.%x ", param,
    9602490c:	d3504c86 	ubfx	x6, x4, #16, #4
    96024910:	d3441c85 	ubfx	x5, x4, #4, #4
	reg = NV_READ32(NV_ADDRESS_MAP_MISC_BASE + MISCREG_EMU_REVID_0);
    96024914:	b9400047 	ldr	w7, [x2]
	return tegrabl_snprintf(cmdline, len, "%s=%x.%x.%x.%x.%x ", param,
    96024918:	d3483c84 	ubfx	x4, x4, #8, #8
    9602491c:	d3483ce2 	ubfx	x2, x7, #8, #8
    96024920:	b90003e2 	str	w2, [sp]
    96024924:	12001ce7 	and	w7, w7, #0xff
    96024928:	f00000e2 	adrp	x2, 96043000 <common_params>
    9602492c:	91330042 	add	x2, x2, #0xcc0
    96024930:	97fff725 	bl	960225c4 <tegrabl_snprintf>
}
    96024934:	a9417bfd 	ldp	x29, x30, [sp, #16]
    96024938:	910083ff 	add	sp, sp, #0x20
    9602493c:	d65f03c0 	ret
		return -1;
    96024940:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96024944:	d65f03c0 	ret

0000000096024948 <add_pmc_reset_info>:
{
    96024948:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
	char *pmc_reset_source_table[] = {
    9602494c:	d2800f02 	mov	x2, #0x78                  	// #120
{
    96024950:	910003fd 	mov	x29, sp
    96024954:	a9025bf5 	stp	x21, x22, [sp, #32]
	char *pmc_reset_source_table[] = {
    96024958:	910123b6 	add	x22, x29, #0x48
{
    9602495c:	a90153f3 	stp	x19, x20, [sp, #16]
    96024960:	aa0003f4 	mov	x20, x0
    96024964:	2a0103f3 	mov	w19, w1
	char *pmc_reset_source_table[] = {
    96024968:	aa1603e0 	mov	x0, x22
    9602496c:	d00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    96024970:	913ba021 	add	x1, x1, #0xee8
    96024974:	9400156c 	bl	96029f24 <memcpy>
	node = tegrabl_add_subnode_if_absent(fdt, nodeoffset, "reset");
    96024978:	f00000c2 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    9602497c:	2a1303e1 	mov	w1, w19
    96024980:	91136c42 	add	x2, x2, #0x4db
    96024984:	aa1403e0 	mov	x0, x20
    96024988:	940032b9 	bl	9603146c <tegrabl_add_subnode_if_absent>
	if (node < 0) {
    9602498c:	36f80080 	tbz	w0, #31, 9602499c <add_pmc_reset_info+0x54>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96024990:	52800453 	mov	w19, #0x22                  	// #34
		status = TEGRABL_ERROR(TEGRABL_ERR_NAME_TOO_LONG, 0);
    96024994:	72a56573 	movk	w19, #0x2b2b, lsl #16
    96024998:	14000013 	b	960249e4 <add_pmc_reset_info+0x9c>
	node_pmc = tegrabl_add_subnode_if_absent(fdt, node, "pmc-reset-reason");
    9602499c:	2a0003e1 	mov	w1, w0
    960249a0:	f00000e2 	adrp	x2, 96043000 <common_params>
    960249a4:	aa1403e0 	mov	x0, x20
    960249a8:	912ee042 	add	x2, x2, #0xbb8
    960249ac:	940032b0 	bl	9603146c <tegrabl_add_subnode_if_absent>
    960249b0:	2a0003f5 	mov	w21, w0
	if (node_pmc < 0) {
    960249b4:	37fffee0 	tbnz	w0, #31, 96024990 <add_pmc_reset_info+0x48>
	status = tegrabl_get_rst_status(&rst_source, &rst_level);
    960249b8:	9100d3a1 	add	x1, x29, #0x34
    960249bc:	9100c3a0 	add	x0, x29, #0x30
    960249c0:	97fff272 	bl	96021388 <tegrabl_get_rst_status>
    960249c4:	2a0003f3 	mov	w19, w0
	if (status != TEGRABL_NO_ERROR) {
    960249c8:	34000180 	cbz	w0, 960249f8 <add_pmc_reset_info+0xb0>
    960249cc:	12005c13 	and	w19, w0, #0xffffff
    960249d0:	52a56000 	mov	w0, #0x2b000000            	// #721420288
    960249d4:	2a000273 	orr	w19, w19, w0
		pr_error("Unable to set pmc-reset-reason\n");
    960249d8:	f00000e0 	adrp	x0, 96043000 <common_params>
    960249dc:	912f2400 	add	x0, x0, #0xbc9
    960249e0:	97fff724 	bl	96022670 <tegrabl_printf>
}
    960249e4:	2a1303e0 	mov	w0, w19
    960249e8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960249ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960249f0:	a8cc7bfd 	ldp	x29, x30, [sp], #192
    960249f4:	d65f03c0 	ret
	memset(str, '\0', sizeof(str));
    960249f8:	d2800182 	mov	x2, #0xc                   	// #12
    960249fc:	52800001 	mov	w1, #0x0                   	// #0
    96024a00:	9100e3a0 	add	x0, x29, #0x38
    96024a04:	94001509 	bl	96029e28 <memset>
	if (sizeof(str) >= strlen(pmc_reset_source_table[rst_source]) + 1U)
    96024a08:	b94033a0 	ldr	w0, [x29, #48]
    96024a0c:	f8607ac0 	ldr	x0, [x22, x0, lsl #3]
    96024a10:	9400163f 	bl	9602a30c <strlen>
    96024a14:	91000400 	add	x0, x0, #0x1
    96024a18:	f100301f 	cmp	x0, #0xc
    96024a1c:	54000548 	b.hi	96024ac4 <add_pmc_reset_info+0x17c>  // b.pmore
		strcpy(str, pmc_reset_source_table[rst_source]);
    96024a20:	b94033a0 	ldr	w0, [x29, #48]
    96024a24:	f8607ac1 	ldr	x1, [x22, x0, lsl #3]
    96024a28:	9100e3a0 	add	x0, x29, #0x38
    96024a2c:	94001623 	bl	9602a2b8 <strcpy>
	err = fdt_setprop_string(fdt, node_pmc, "reset-source", str);
    96024a30:	9100e3a0 	add	x0, x29, #0x38
    96024a34:	94001636 	bl	9602a30c <strlen>
    96024a38:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024a3c:	11000404 	add	w4, w0, #0x1
    96024a40:	9100e3a3 	add	x3, x29, #0x38
    96024a44:	912fb042 	add	x2, x2, #0xbec
    96024a48:	2a1503e1 	mov	w1, w21
    96024a4c:	aa1403e0 	mov	x0, x20
    96024a50:	9400383d 	bl	96032b44 <fdt_setprop>
	if (err < 0) {
    96024a54:	36f800e0 	tbz	w0, #31, 96024a70 <add_pmc_reset_info+0x128>
		pr_error("Unable to set pmc-reset-reason (%s)\n",
    96024a58:	94003996 	bl	960330b0 <fdt_strerror>
    96024a5c:	aa0003e1 	mov	x1, x0
    96024a60:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024a64:	912fe400 	add	x0, x0, #0xbf9
    96024a68:	97fff702 	bl	96022670 <tegrabl_printf>
    96024a6c:	17ffffc9 	b	96024990 <add_pmc_reset_info+0x48>
	memset(str, '\0', sizeof(str));
    96024a70:	d2800182 	mov	x2, #0xc                   	// #12
    96024a74:	52800001 	mov	w1, #0x0                   	// #0
    96024a78:	9100e3a0 	add	x0, x29, #0x38
    96024a7c:	940014eb 	bl	96029e28 <memset>
	tegrabl_snprintf(str, sizeof("x"), "%x", rst_level);
    96024a80:	b94037a3 	ldr	w3, [x29, #52]
    96024a84:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024a88:	91308442 	add	x2, x2, #0xc21
    96024a8c:	d2800041 	mov	x1, #0x2                   	// #2
    96024a90:	9100e3a0 	add	x0, x29, #0x38
    96024a94:	97fff6cc 	bl	960225c4 <tegrabl_snprintf>
	err = fdt_setprop_string(fdt, node_pmc, "reset-level", str);
    96024a98:	9100e3a0 	add	x0, x29, #0x38
    96024a9c:	9400161c 	bl	9602a30c <strlen>
    96024aa0:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024aa4:	11000404 	add	w4, w0, #0x1
    96024aa8:	9100e3a3 	add	x3, x29, #0x38
    96024aac:	91309042 	add	x2, x2, #0xc24
    96024ab0:	2a1503e1 	mov	w1, w21
    96024ab4:	aa1403e0 	mov	x0, x20
    96024ab8:	94003823 	bl	96032b44 <fdt_setprop>
	if (err < 0) {
    96024abc:	36fff940 	tbz	w0, #31, 960249e4 <add_pmc_reset_info+0x9c>
    96024ac0:	17ffffe6 	b	96024a58 <add_pmc_reset_info+0x110>
		status = TEGRABL_ERROR(TEGRABL_ERR_NAME_TOO_LONG, 0);
    96024ac4:	52800153 	mov	w19, #0xa                   	// #10
    96024ac8:	17ffffb3 	b	96024994 <add_pmc_reset_info+0x4c>

0000000096024acc <add_ratchet_values>:
{
    96024acc:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96024ad0:	910003fd 	mov	x29, sp
    96024ad4:	a90153f3 	stp	x19, x20, [sp, #16]
    96024ad8:	aa0003f3 	mov	x19, x0
    96024adc:	f90013f5 	str	x21, [sp, #32]
    96024ae0:	2a0103f4 	mov	w20, w1
	uint32_t rb_ratchet = 0;
    96024ae4:	b9003fbf 	str	wzr, [x29, #60]
{
    96024ae8:	aa0203f5 	mov	x21, x2
	rb = tegrabl_get_rollback_data();
    96024aec:	97ffedef 	bl	960202a8 <tegrabl_get_rollback_data>
	if (rb != NULL) {
    96024af0:	b4000260 	cbz	x0, 96024b3c <add_ratchet_values+0x70>
		rollback_fuse_idx = rb->fuse_idx;
    96024af4:	39400800 	ldrb	w0, [x0, #2]
		err = tegrabl_fuse_read(FUSE_RESERVED_ODM0 + rollback_fuse_idx,
    96024af8:	52800082 	mov	w2, #0x4                   	// #4
    96024afc:	9100f3a1 	add	x1, x29, #0x3c
    96024b00:	11008000 	add	w0, w0, #0x20
    96024b04:	97ffe734 	bl	9601e7d4 <tegrabl_fuse_read>
		if (err != TEGRABL_NO_ERROR) {
    96024b08:	34000120 	cbz	w0, 96024b2c <add_ratchet_values+0x60>
			pr_error("Failed to read OEM rollback ratchet\n");
    96024b0c:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024b10:	91322c00 	add	x0, x0, #0xc8b
    96024b14:	97fff6d7 	bl	96022670 <tegrabl_printf>
			return -1;
    96024b18:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96024b1c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96024b20:	f94013f5 	ldr	x21, [sp, #32]
    96024b24:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96024b28:	d65f03c0 	ret
		rb_ratchet = tegrabl_rollback_fusevalue_to_level(rb_ratchet);
    96024b2c:	b9403fa0 	ldr	w0, [x29, #60]
    96024b30:	97ffedd2 	bl	96020278 <tegrabl_rollback_fusevalue_to_level>
    96024b34:	12001c00 	and	w0, w0, #0xff
    96024b38:	b9003fa0 	str	w0, [x29, #60]
	mb1_ratchet = SCRATCH_READ(SECURE_RSV54_SCRATCH_0);
    96024b3c:	d2810000 	mov	x0, #0x800                 	// #2048
	return tegrabl_snprintf(cmdline, len, "%s=%u.%u.%u ", param,
    96024b40:	b9403fa4 	ldr	w4, [x29, #60]
	mb1_ratchet = SCRATCH_READ(SECURE_RSV54_SCRATCH_0);
    96024b44:	f2a18720 	movk	x0, #0xc39, lsl #16
	return tegrabl_snprintf(cmdline, len, "%s=%u.%u.%u ", param,
    96024b48:	aa1503e3 	mov	x3, x21
    96024b4c:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024b50:	93407e81 	sxtw	x1, w20
	mb1_ratchet = SCRATCH_READ(SECURE_RSV54_SCRATCH_0);
    96024b54:	b9400005 	ldr	w5, [x0]
	mts_ratchet = SCRATCH_READ(SECURE_RSV52_SCRATCH_1);
    96024b58:	d280fe80 	mov	x0, #0x7f4                 	// #2036
    96024b5c:	f2a18720 	movk	x0, #0xc39, lsl #16
	return tegrabl_snprintf(cmdline, len, "%s=%u.%u.%u ", param,
    96024b60:	9132cc42 	add	x2, x2, #0xcb3
	mts_ratchet = SCRATCH_READ(SECURE_RSV52_SCRATCH_1);
    96024b64:	b9400006 	ldr	w6, [x0]
	return tegrabl_snprintf(cmdline, len, "%s=%u.%u.%u ", param,
    96024b68:	aa1303e0 	mov	x0, x19
    96024b6c:	97fff696 	bl	960225c4 <tegrabl_snprintf>
    96024b70:	17ffffeb 	b	96024b1c <add_ratchet_values+0x50>

0000000096024b74 <add_pmic_reset_info>:
{
    96024b74:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
	char *pmic_reset_reason_table[] = {
    96024b78:	d2800902 	mov	x2, #0x48                  	// #72
{
    96024b7c:	910003fd 	mov	x29, sp
    96024b80:	a90153f3 	stp	x19, x20, [sp, #16]
    96024b84:	2a0103f3 	mov	w19, w1
    96024b88:	a9025bf5 	stp	x21, x22, [sp, #32]
	char *pmic_reset_reason_table[] = {
    96024b8c:	d00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    96024b90:	910163b6 	add	x22, x29, #0x58
    96024b94:	913ba021 	add	x1, x1, #0xee8
{
    96024b98:	aa0003f4 	mov	x20, x0
	char *pmic_reset_reason_table[] = {
    96024b9c:	9101e021 	add	x1, x1, #0x78
    96024ba0:	aa1603e0 	mov	x0, x22
    96024ba4:	940014e0 	bl	96029f24 <memcpy>
	node = tegrabl_add_subnode_if_absent(fdt, nodeoffset, "reset");
    96024ba8:	f00000c2 	adrp	x2, 9603f000 <device_info_list+0x6dc>
    96024bac:	2a1303e1 	mov	w1, w19
    96024bb0:	91136c42 	add	x2, x2, #0x4db
    96024bb4:	aa1403e0 	mov	x0, x20
    96024bb8:	9400322d 	bl	9603146c <tegrabl_add_subnode_if_absent>
	if (node < 0) {
    96024bbc:	36f80100 	tbz	w0, #31, 96024bdc <add_pmic_reset_info+0x68>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96024bc0:	52800441 	mov	w1, #0x22                  	// #34
		status = TEGRABL_ERROR(TEGRABL_ERR_NAME_TOO_LONG, 1);
    96024bc4:	72a56561 	movk	w1, #0x2b2b, lsl #16
}
    96024bc8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96024bcc:	2a0103e0 	mov	w0, w1
    96024bd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96024bd4:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    96024bd8:	d65f03c0 	ret
	node_pmic = tegrabl_add_subnode_if_absent(fdt, node, "pmic-reset-reason");
    96024bdc:	2a0003e1 	mov	w1, w0
    96024be0:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024be4:	aa1403e0 	mov	x0, x20
    96024be8:	9130c042 	add	x2, x2, #0xc30
    96024bec:	94003220 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96024bf0:	2a0003f5 	mov	w21, w0
	if (node_pmic < 0) {
    96024bf4:	37fffe60 	tbnz	w0, #31, 96024bc0 <add_pmic_reset_info+0x4c>
	reset_status = boot_params->global_data.pmic_rst_reason;
    96024bf8:	d0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
	memset(str, '\0', sizeof(str));
    96024bfc:	d2800322 	mov	x2, #0x19                  	// #25
    96024c00:	52800001 	mov	w1, #0x0                   	// #0
	reset_status = boot_params->global_data.pmic_rst_reason;
    96024c04:	f9462000 	ldr	x0, [x0, #3136]
    96024c08:	b9631013 	ldr	w19, [x0, #8976]
	memset(str, '\0', sizeof(str));
    96024c0c:	9100e3a0 	add	x0, x29, #0x38
    96024c10:	94001486 	bl	96029e28 <memset>
	tegrabl_snprintf(str, sizeof("0xAB"), "0x%02x", reset_status);
    96024c14:	2a1303e3 	mov	w3, w19
    96024c18:	b0000102 	adrp	x2, 96045000 <__func__.3796+0x7>
    96024c1c:	91204c42 	add	x2, x2, #0x813
    96024c20:	d28000a1 	mov	x1, #0x5                   	// #5
    96024c24:	9100e3a0 	add	x0, x29, #0x38
    96024c28:	97fff667 	bl	960225c4 <tegrabl_snprintf>
	err = fdt_setprop_string(fdt, node_pmic, "register-value", str);
    96024c2c:	9100e3a0 	add	x0, x29, #0x38
    96024c30:	940015b7 	bl	9602a30c <strlen>
    96024c34:	11000404 	add	w4, w0, #0x1
    96024c38:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024c3c:	9100e3a3 	add	x3, x29, #0x38
    96024c40:	91310842 	add	x2, x2, #0xc42
    96024c44:	2a1503e1 	mov	w1, w21
    96024c48:	aa1403e0 	mov	x0, x20
    96024c4c:	940037be 	bl	96032b44 <fdt_setprop>
	if (err < 0) {
    96024c50:	36f800e0 	tbz	w0, #31, 96024c6c <add_pmic_reset_info+0xf8>
		pr_error("Unable to set pmic-reset-reason (%s)\n",
    96024c54:	94003917 	bl	960330b0 <fdt_strerror>
    96024c58:	aa0003e1 	mov	x1, x0
    96024c5c:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024c60:	91314400 	add	x0, x0, #0xc51
    96024c64:	97fff683 	bl	96022670 <tegrabl_printf>
    96024c68:	17ffffd6 	b	96024bc0 <add_pmic_reset_info+0x4c>
	memset(str, '\0', sizeof(str));
    96024c6c:	d2800322 	mov	x2, #0x19                  	// #25
    96024c70:	52800001 	mov	w1, #0x0                   	// #0
    96024c74:	9100e3a0 	add	x0, x29, #0x38
    96024c78:	9400146c 	bl	96029e28 <memset>
	return n && (!(n & (n-1)));
    96024c7c:	72001e60 	ands	w0, w19, #0xff
    96024c80:	540000c0 	b.eq	96024c98 <add_pmic_reset_info+0x124>  // b.none
    96024c84:	12001e73 	and	w19, w19, #0xff
    96024c88:	51000660 	sub	w0, w19, #0x1
    96024c8c:	6a13001f 	tst	w0, w19
    96024c90:	54000460 	b.eq	96024d1c <add_pmic_reset_info+0x1a8>  // b.none
		return 0;
    96024c94:	52800000 	mov	w0, #0x0                   	// #0
		strlen(pmic_reset_reason_table[find_set_position(reset_status)]) + 1U)
    96024c98:	f860dad3 	ldr	x19, [x22, w0, sxtw #3]
    96024c9c:	aa1303e0 	mov	x0, x19
    96024ca0:	9400159b 	bl	9602a30c <strlen>
    96024ca4:	91000400 	add	x0, x0, #0x1
	if (sizeof(str) >=
    96024ca8:	f100641f 	cmp	x0, #0x19
    96024cac:	540003e8 	b.hi	96024d28 <add_pmic_reset_info+0x1b4>  // b.pmore
		strcpy(str, pmic_reset_reason_table[find_set_position(reset_status)]);
    96024cb0:	aa1303e1 	mov	x1, x19
    96024cb4:	9100e3a0 	add	x0, x29, #0x38
    96024cb8:	94001580 	bl	9602a2b8 <strcpy>
	err = fdt_setprop_string(fdt, node_pmic, "reason", str);
    96024cbc:	9100e3a0 	add	x0, x29, #0x38
    96024cc0:	94001593 	bl	9602a30c <strlen>
    96024cc4:	11000404 	add	w4, w0, #0x1
    96024cc8:	2a1503e1 	mov	w1, w21
    96024ccc:	9100e3a3 	add	x3, x29, #0x38
    96024cd0:	f00000e2 	adrp	x2, 96043000 <common_params>
    96024cd4:	aa1403e0 	mov	x0, x20
    96024cd8:	9130ec42 	add	x2, x2, #0xc3b
    96024cdc:	9400379a 	bl	96032b44 <fdt_setprop>
	return TEGRABL_NO_ERROR;
    96024ce0:	52800001 	mov	w1, #0x0                   	// #0
	if (err < 0) {
    96024ce4:	36fff720 	tbz	w0, #31, 96024bc8 <add_pmic_reset_info+0x54>
		pr_error("Unable to set pmic-reset-reason (%s)\n",
    96024ce8:	940038f2 	bl	960330b0 <fdt_strerror>
    96024cec:	aa0003e1 	mov	x1, x0
    96024cf0:	f00000e0 	adrp	x0, 96043000 <common_params>
    96024cf4:	91314400 	add	x0, x0, #0xc51
    96024cf8:	97fff65e 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 2);
    96024cfc:	52804441 	mov	w1, #0x222                 	// #546
    96024d00:	17ffffb1 	b	96024bc4 <add_pmic_reset_info+0x50>
		i = i << 1;
    96024d04:	531f7821 	lsl	w1, w1, #1
		++pos;
    96024d08:	11000400 	add	w0, w0, #0x1
	while (!(i & n)) {
    96024d0c:	6a01027f 	tst	w19, w1
    96024d10:	54ffffa0 	b.eq	96024d04 <add_pmic_reset_info+0x190>  // b.none
	return pos;
    96024d14:	12001c00 	and	w0, w0, #0xff
    96024d18:	17ffffe0 	b	96024c98 <add_pmic_reset_info+0x124>
	unsigned i = 1, pos = 1;
    96024d1c:	52800020 	mov	w0, #0x1                   	// #1
    96024d20:	2a0003e1 	mov	w1, w0
    96024d24:	17fffffa 	b	96024d0c <add_pmic_reset_info+0x198>
		status = TEGRABL_ERROR(TEGRABL_ERR_NAME_TOO_LONG, 1);
    96024d28:	52802141 	mov	w1, #0x10a                 	// #266
    96024d2c:	17ffffa6 	b	96024bc4 <add_pmic_reset_info+0x50>

0000000096024d30 <calculate_free_dram_regions.part.1>:
static uint32_t calculate_free_dram_regions(struct tegrabl_linuxboot_memblock
    96024d30:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
	p_carveout = (struct tegrabl_carveout_info *)(boot_params->global_data.carveout);
    96024d34:	d0000281 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96024d38:	d2a20008 	mov	x8, #0x10000000            	// #268435456
	count = 0;
    96024d3c:	52800002 	mov	w2, #0x0                   	// #0
static uint32_t calculate_free_dram_regions(struct tegrabl_linuxboot_memblock
    96024d40:	910003fd 	mov	x29, sp
	p_carveout = (struct tegrabl_carveout_info *)(boot_params->global_data.carveout);
    96024d44:	f9462025 	ldr	x5, [x1, #3136]
    96024d48:	d0000281 	adrp	x1, 96076000 <free_dram_block+0x38e8>
		if ((p_carveout[cotype].base < SDRAM_START_ADDRESS) ||
    96024d4c:	b2407be6 	mov	x6, #0x7fffffff            	// #2147483647
    96024d50:	d2800027 	mov	x7, #0x1                   	// #1
    96024d54:	910140a3 	add	x3, x5, #0x50
	p_carveout = (struct tegrabl_carveout_info *)(boot_params->global_data.carveout);
    96024d58:	910100a4 	add	x4, x5, #0x40
    96024d5c:	f2c0b8c8 	movk	x8, #0x5c6, lsl #32
    96024d60:	f904f824 	str	x4, [x1, #2544]
static uint32_t calculate_free_dram_regions(struct tegrabl_linuxboot_memblock
    96024d64:	f9000bf3 	str	x19, [sp, #16]
	for (cotype = CARVEOUT_NVDEC; cotype < CARVEOUT_NUM; cotype++) {
    96024d68:	52800021 	mov	w1, #0x1                   	// #1
		if ((p_carveout[cotype].base < SDRAM_START_ADDRESS) ||
    96024d6c:	f9400069 	ldr	x9, [x3]
    96024d70:	eb06013f 	cmp	x9, x6
    96024d74:	54000169 	b.ls	96024da0 <calculate_free_dram_regions.part.1+0x70>  // b.plast
    96024d78:	f9400469 	ldr	x9, [x3, #8]
    96024d7c:	b4000129 	cbz	x9, 96024da0 <calculate_free_dram_regions.part.1+0x70>
    96024d80:	7100ac3f 	cmp	w1, #0x2b
    96024d84:	54000080 	b.eq	96024d94 <calculate_free_dram_regions.part.1+0x64>  // b.none
    96024d88:	9ac120e9 	lsl	x9, x7, x1
    96024d8c:	ea08013f 	tst	x9, x8
    96024d90:	54000081 	b.ne	96024da0 <calculate_free_dram_regions.part.1+0x70>  // b.any
			perm_carveouts[count] = (uint32_t)cotype;
    96024d94:	910083a9 	add	x9, x29, #0x20
    96024d98:	b822d921 	str	w1, [x9, w2, sxtw #2]
			count++;
    96024d9c:	11000442 	add	w2, w2, #0x1
	for (cotype = CARVEOUT_NVDEC; cotype < CARVEOUT_NUM; cotype++) {
    96024da0:	11000421 	add	w1, w1, #0x1
    96024da4:	91004063 	add	x3, x3, #0x10
    96024da8:	7100b03f 	cmp	w1, #0x2c
    96024dac:	54fffe01 	b.ne	96024d6c <calculate_free_dram_regions.part.1+0x3c>  // b.any
	if (count < 2)
    96024db0:	7100045f 	cmp	w2, #0x1
    96024db4:	5400036d 	b.le	96024e20 <calculate_free_dram_regions.part.1+0xf0>
    96024db8:	d2800023 	mov	x3, #0x1                   	// #1
		val = array[i];
    96024dbc:	910083a1 	add	x1, x29, #0x20
    96024dc0:	b8637827 	ldr	w7, [x1, x3, lsl #2]
	if (p_carveout[a].base < p_carveout[b].base)
    96024dc4:	d37c7ce1 	ubfiz	x1, x7, #4, #32
    96024dc8:	f8616889 	ldr	x9, [x4, x1]
    96024dcc:	d1000461 	sub	x1, x3, #0x1
				 (j >= 0) && (bom_compare(val, array[j]) < 0);
    96024dd0:	910083a8 	add	x8, x29, #0x20
    96024dd4:	2a0103e6 	mov	w6, w1
    96024dd8:	b8617908 	ldr	w8, [x8, x1, lsl #2]
	if (p_carveout[a].base < p_carveout[b].base)
    96024ddc:	d37c7d0a 	ubfiz	x10, x8, #4, #32
    96024de0:	f86a688a 	ldr	x10, [x4, x10]
    96024de4:	eb0a013f 	cmp	x9, x10
    96024de8:	54000102 	b.cs	96024e08 <calculate_free_dram_regions.part.1+0xd8>  // b.hs, b.nlast
			array[j + 1] = array[j];
    96024dec:	910083a6 	add	x6, x29, #0x20
    96024df0:	8b0108c6 	add	x6, x6, x1, lsl #2
    96024df4:	d1000421 	sub	x1, x1, #0x1
		for (j = (i - 1);
    96024df8:	3100043f 	cmn	w1, #0x1
			array[j + 1] = array[j];
    96024dfc:	b90004c8 	str	w8, [x6, #4]
    96024e00:	2a0103e6 	mov	w6, w1
		for (j = (i - 1);
    96024e04:	54fffe61 	b.ne	96024dd0 <calculate_free_dram_regions.part.1+0xa0>  // b.any
		array[j + 1] = val;
    96024e08:	910083a1 	add	x1, x29, #0x20
    96024e0c:	91000463 	add	x3, x3, #0x1
    96024e10:	8b26c826 	add	x6, x1, w6, sxtw #2
	for (i = 1; i < count; i++) {
    96024e14:	6b03005f 	cmp	w2, w3
		array[j + 1] = val;
    96024e18:	b90004c7 	str	w7, [x6, #4]
	for (i = 1; i < count; i++) {
    96024e1c:	54fffd0c 	b.gt	96024dbc <calculate_free_dram_regions.part.1+0x8c>
			free_block[rgn].base = cur_start;
    96024e20:	d0000267 	adrp	x7, 96072000 <cmdline+0x510>
    96024e24:	911120e7 	add	x7, x7, #0x448
	if (count < 2)
    96024e28:	d2800006 	mov	x6, #0x0                   	// #0
    96024e2c:	d2b00001 	mov	x1, #0x80000000            	// #2147483648
    96024e30:	52800003 	mov	w3, #0x0                   	// #0
	for (i = 0; i < count; i++) {
    96024e34:	6b06005f 	cmp	w2, w6
    96024e38:	5400056c 	b.gt	96024ee4 <calculate_free_dram_regions.part.1+0x1b4>
	sdram_size = NV_READ32(NV_ADDRESS_MAP_MCB_BASE + MC_EMEM_CFG_0);
    96024e3c:	d2800a02 	mov	x2, #0x50                  	// #80
	cur_end = SDRAM_START_ADDRESS + sdram_size;
    96024e40:	d2b00004 	mov	x4, #0x80000000            	// #2147483648
	sdram_size = NV_READ32(NV_ADDRESS_MAP_MCB_BASE + MC_EMEM_CFG_0);
    96024e44:	f2a05822 	movk	x2, #0x2c1, lsl #16
    96024e48:	b9400042 	ldr	w2, [x2]
	sdram_size = sdram_size << 20;
    96024e4c:	d36c7c42 	ubfiz	x2, x2, #20, #32
	cur_end = SDRAM_START_ADDRESS + sdram_size;
    96024e50:	8b040042 	add	x2, x2, x4
	if (cur_end > cur_start) {
    96024e54:	eb02003f 	cmp	x1, x2
    96024e58:	54000122 	b.cs	96024e7c <calculate_free_dram_regions.part.1+0x14c>  // b.hs, b.nlast
		free_block[rgn].base = cur_start;
    96024e5c:	937c7c66 	sbfiz	x6, x3, #4, #32
    96024e60:	d0000264 	adrp	x4, 96072000 <cmdline+0x510>
    96024e64:	91112084 	add	x4, x4, #0x448
		rgn++;
    96024e68:	11000463 	add	w3, w3, #0x1
		free_block[rgn].base = cur_start;
    96024e6c:	8b060087 	add	x7, x4, x6
    96024e70:	f8266881 	str	x1, [x4, x6]
		free_block[rgn].size = cur_end - cur_start;
    96024e74:	cb010041 	sub	x1, x2, x1
    96024e78:	f90004e1 	str	x1, [x7, #8]
	free_dram_block_count = rgn;
    96024e7c:	d000028a 	adrp	x10, 96076000 <free_dram_block+0x38e8>
	bad_page_count = boot_params->global_data.valid_dram_bad_page_count;
    96024e80:	f94180ad 	ldr	x13, [x5, #768]
	bad_page_arr = (uint64_t *)(boot_params->global_data.dram_bad_pages);
    96024e84:	910c20ac 	add	x12, x5, #0x308
	free_dram_block_count = rgn;
    96024e88:	b909e943 	str	w3, [x10, #2536]
	if (bad_page_count > 1)
    96024e8c:	f10005bf 	cmp	x13, #0x1
    96024e90:	54000069 	b.ls	96024e9c <calculate_free_dram_regions.part.1+0x16c>  // b.plast
    96024e94:	d10005a2 	sub	x2, x13, #0x1
	for (i = 0; i < count-1; i++) {
    96024e98:	b5000602 	cbnz	x2, 96024f58 <calculate_free_dram_regions.part.1+0x228>
			if ((free_dram_block[rgn].base == 0) &&
    96024e9c:	d0000264 	adrp	x4, 96072000 <cmdline+0x510>
    96024ea0:	911c6084 	add	x4, x4, #0x718
    96024ea4:	d0000265 	adrp	x5, 96072000 <cmdline+0x510>
    96024ea8:	93407c69 	sxtw	x9, w3
    96024eac:	911120b0 	add	x16, x5, #0x448
			if (bad_page_arr[page_idx] == free_dram_block[rgn].base) {
    96024eb0:	aa0403ef 	mov	x15, x4
	for (page_idx = 0; page_idx < bad_page_count; page_idx++) {
    96024eb4:	d2800001 	mov	x1, #0x0                   	// #0
    96024eb8:	d280000e 	mov	x14, #0x0                   	// #0
    96024ebc:	d2800002 	mov	x2, #0x0                   	// #0
    96024ec0:	928001f1 	mov	x17, #0xfffffffffffffff0    	// #-16
    96024ec4:	eb0e01bf 	cmp	x13, x14
    96024ec8:	54000ba0 	b.eq	9602503c <calculate_free_dram_regions.part.1+0x30c>  // b.none
    96024ecc:	9b117c2b 	mul	x11, x1, x17
    96024ed0:	d37cec28 	lsl	x8, x1, #4
    96024ed4:	cb02003e 	sub	x30, x1, x2
    96024ed8:	8b02116b 	add	x11, x11, x2, lsl #4
    96024edc:	8b0b020b 	add	x11, x16, x11
    96024ee0:	1400003c 	b	96024fd0 <calculate_free_dram_regions.part.1+0x2a0>
		cur_end = p_carveout[perm_carveouts[i]].base;
    96024ee4:	910083a8 	add	x8, x29, #0x20
    96024ee8:	b8667908 	ldr	w8, [x8, x6, lsl #2]
    96024eec:	d37ced08 	lsl	x8, x8, #4
    96024ef0:	8b08008a 	add	x10, x4, x8
    96024ef4:	f8686888 	ldr	x8, [x4, x8]
		if (cur_end > cur_start) {
    96024ef8:	eb01011f 	cmp	x8, x1
    96024efc:	540000e9 	b.ls	96024f18 <calculate_free_dram_regions.part.1+0x1e8>  // b.plast
			free_block[rgn].base = cur_start;
    96024f00:	937c7c69 	sbfiz	x9, x3, #4, #32
			rgn++;
    96024f04:	11000463 	add	w3, w3, #0x1
			free_block[rgn].base = cur_start;
    96024f08:	8b0900eb 	add	x11, x7, x9
    96024f0c:	f82968e1 	str	x1, [x7, x9]
			free_block[rgn].size = cur_end - cur_start;
    96024f10:	cb010101 	sub	x1, x8, x1
    96024f14:	f9000561 	str	x1, [x11, #8]
		cur_start = p_carveout[perm_carveouts[i]].base +
    96024f18:	f9400541 	ldr	x1, [x10, #8]
    96024f1c:	910004c6 	add	x6, x6, #0x1
    96024f20:	8b010101 	add	x1, x8, x1
    96024f24:	17ffffc4 	b	96024e34 <calculate_free_dram_regions.part.1+0x104>
			if (arr[j] > arr[j+1]) {
    96024f28:	f8617984 	ldr	x4, [x12, x1, lsl #3]
    96024f2c:	91000421 	add	x1, x1, #0x1
    96024f30:	f8617985 	ldr	x5, [x12, x1, lsl #3]
    96024f34:	eb05009f 	cmp	x4, x5
    96024f38:	54000089 	b.ls	96024f48 <calculate_free_dram_regions.part.1+0x218>  // b.plast
				arr[j] = arr[j+1];
    96024f3c:	8b010d86 	add	x6, x12, x1, lsl #3
    96024f40:	f81f80c5 	stur	x5, [x6, #-8]
				arr[j+1] = temp;
    96024f44:	f8217984 	str	x4, [x12, x1, lsl #3]
		for (j = 0; j < count - i - 1; j++) {
    96024f48:	eb01005f 	cmp	x2, x1
    96024f4c:	54fffee8 	b.hi	96024f28 <calculate_free_dram_regions.part.1+0x1f8>  // b.pmore
    96024f50:	d1000442 	sub	x2, x2, #0x1
    96024f54:	17ffffd1 	b	96024e98 <calculate_free_dram_regions.part.1+0x168>
    96024f58:	d2800001 	mov	x1, #0x0                   	// #0
    96024f5c:	17fffffb 	b	96024f48 <calculate_free_dram_regions.part.1+0x218>
					free_dram_block[rgn].base + free_dram_block[rgn].size - PAGE_SIZE) {
    96024f60:	f94004c6 	ldr	x6, [x6, #8]
    96024f64:	8b0600f2 	add	x18, x7, x6
    96024f68:	d1404253 	sub	x19, x18, #0x10, lsl #12
			if (bad_page_arr[page_idx] ==
    96024f6c:	eb13007f 	cmp	x3, x19
    96024f70:	540000a1 	b.ne	96024f84 <calculate_free_dram_regions.part.1+0x254>  // b.any
				free_dram_block[rgn].size = free_dram_block[rgn].size - PAGE_SIZE;
    96024f74:	8b011083 	add	x3, x4, x1, lsl #4
    96024f78:	d14040c6 	sub	x6, x6, #0x10, lsl #12
    96024f7c:	f9000466 	str	x6, [x3, #8]
    96024f80:	1400002d 	b	96025034 <calculate_free_dram_regions.part.1+0x304>
			if (bad_page_arr[page_idx] > free_dram_block[rgn].base &&
    96024f84:	eb07007f 	cmp	x3, x7
    96024f88:	54000209 	b.ls	96024fc8 <calculate_free_dram_regions.part.1+0x298>  // b.plast
    96024f8c:	eb12007f 	cmp	x3, x18
    96024f90:	540001c2 	b.cs	96024fc8 <calculate_free_dram_regions.part.1+0x298>  // b.hs, b.nlast
				free_dram_block[rgn].size = bad_page_arr[page_idx] - free_dram_block[rgn].base;
    96024f94:	8b011088 	add	x8, x4, x1, lsl #4
				rgn += 1;
    96024f98:	91000421 	add	x1, x1, #0x1
				free_dram_block[rgn].size = bad_page_arr[page_idx] - free_dram_block[rgn].base;
    96024f9c:	cb070063 	sub	x3, x3, x7
				free_dram_block[rgn].size = temp_size - free_dram_block[rgn - 1].size - PAGE_SIZE;
    96024fa0:	d14040c6 	sub	x6, x6, #0x10, lsl #12
					free_dram_block[rgn - 1].base + free_dram_block[rgn - 1].size + PAGE_SIZE;
    96024fa4:	914040e7 	add	x7, x7, #0x10, lsl #12
				free_dram_block[rgn].size = bad_page_arr[page_idx] - free_dram_block[rgn].base;
    96024fa8:	f9000503 	str	x3, [x8, #8]
				free_dram_block[rgn].base =
    96024fac:	d37cec28 	lsl	x8, x1, #4
    96024fb0:	8b08008b 	add	x11, x4, x8
					free_dram_block[rgn - 1].base + free_dram_block[rgn - 1].size + PAGE_SIZE;
    96024fb4:	8b0300e7 	add	x7, x7, x3
				free_dram_block[rgn].size = temp_size - free_dram_block[rgn - 1].size - PAGE_SIZE;
    96024fb8:	cb0300c3 	sub	x3, x6, x3
				free_dram_block[rgn].base =
    96024fbc:	f8286887 	str	x7, [x4, x8]
				free_dram_block[rgn].size = temp_size - free_dram_block[rgn - 1].size - PAGE_SIZE;
    96024fc0:	f9000563 	str	x3, [x11, #8]
    96024fc4:	1400001c 	b	96025034 <calculate_free_dram_regions.part.1+0x304>
			chunk_idx++;
    96024fc8:	91000442 	add	x2, x2, #0x1
    96024fcc:	91004108 	add	x8, x8, #0x10
    96024fd0:	8b0203c1 	add	x1, x30, x2
		while (chunk_idx < free_dram_block_count) {
    96024fd4:	eb09005f 	cmp	x2, x9
    96024fd8:	540002e2 	b.cs	96025034 <calculate_free_dram_regions.part.1+0x304>  // b.hs, b.nlast
			if ((free_dram_block[rgn].base == 0) &&
    96024fdc:	f8646906 	ldr	x6, [x8, x4]
    96024fe0:	8b040103 	add	x3, x8, x4
    96024fe4:	b5000106 	cbnz	x6, 96025004 <calculate_free_dram_regions.part.1+0x2d4>
    96024fe8:	f9400466 	ldr	x6, [x3, #8]
    96024fec:	b50000c6 	cbnz	x6, 96025004 <calculate_free_dram_regions.part.1+0x2d4>
				free_dram_block[rgn].base = free_block[chunk_idx].base;
    96024ff0:	f8686966 	ldr	x6, [x11, x8]
    96024ff4:	f9000066 	str	x6, [x3]
				free_dram_block[rgn].size = free_block[chunk_idx].size;
    96024ff8:	8b080166 	add	x6, x11, x8
    96024ffc:	f94004c6 	ldr	x6, [x6, #8]
    96025000:	f9000466 	str	x6, [x3, #8]
			if (bad_page_arr[page_idx] == free_dram_block[rgn].base) {
    96025004:	f86e7983 	ldr	x3, [x12, x14, lsl #3]
    96025008:	8b0f0106 	add	x6, x8, x15
    9602500c:	f86f6907 	ldr	x7, [x8, x15]
    96025010:	eb07007f 	cmp	x3, x7
    96025014:	54fffa61 	b.ne	96024f60 <calculate_free_dram_regions.part.1+0x230>  // b.any
				free_dram_block[rgn].base = free_dram_block[rgn].base + PAGE_SIZE;
    96025018:	d37cec27 	lsl	x7, x1, #4
    9602501c:	91404063 	add	x3, x3, #0x10, lsl #12
    96025020:	8b070086 	add	x6, x4, x7
    96025024:	f8276883 	str	x3, [x4, x7]
				free_dram_block[rgn].size = free_dram_block[rgn].size - PAGE_SIZE;
    96025028:	f94004c3 	ldr	x3, [x6, #8]
    9602502c:	d1404063 	sub	x3, x3, #0x10, lsl #12
    96025030:	f90004c3 	str	x3, [x6, #8]
	for (page_idx = 0; page_idx < bad_page_count; page_idx++) {
    96025034:	910005ce 	add	x14, x14, #0x1
    96025038:	17ffffa3 	b	96024ec4 <calculate_free_dram_regions.part.1+0x194>
	if (bad_page_count > 0) {
    9602503c:	b400006d 	cbz	x13, 96025048 <calculate_free_dram_regions.part.1+0x318>
		chunk_idx++;
    96025040:	91000442 	add	x2, x2, #0x1
		rgn++;
    96025044:	91000421 	add	x1, x1, #0x1
    96025048:	911120a3 	add	x3, x5, #0x448
    9602504c:	d37cec24 	lsl	x4, x1, #4
    96025050:	8b021063 	add	x3, x3, x2, lsl #4
    96025054:	91002084 	add	x4, x4, #0x8
    96025058:	b0000265 	adrp	x5, 96072000 <cmdline+0x510>
    9602505c:	911c60a6 	add	x6, x5, #0x718
    96025060:	91002063 	add	x3, x3, #0x8
    96025064:	8b060084 	add	x4, x4, x6
    96025068:	cb010042 	sub	x2, x2, x1
	while (chunk_idx < free_dram_block_count) {
    9602506c:	8b020026 	add	x6, x1, x2
    96025070:	eb06013f 	cmp	x9, x6
    96025074:	54000108 	b.hi	96025094 <calculate_free_dram_regions.part.1+0x364>  // b.pmore
}
    96025078:	f9400bf3 	ldr	x19, [sp, #16]
	*free_dram_regions = update_bad_page();
    9602507c:	911c60a5 	add	x5, x5, #0x718
	free_dram_block_count = rgn;
    96025080:	b909e941 	str	w1, [x10, #2536]
	*free_dram_regions = update_bad_page();
    96025084:	f9000005 	str	x5, [x0]
}
    96025088:	2a0103e0 	mov	w0, w1
    9602508c:	a8cd7bfd 	ldp	x29, x30, [sp], #208
    96025090:	d65f03c0 	ret
		free_dram_block[rgn].base = free_block[chunk_idx].base;
    96025094:	f85f8066 	ldur	x6, [x3, #-8]
		rgn++;
    96025098:	91000421 	add	x1, x1, #0x1
		free_dram_block[rgn].base = free_block[chunk_idx].base;
    9602509c:	f81f8086 	stur	x6, [x4, #-8]
		free_dram_block[rgn].size = free_block[chunk_idx].size;
    960250a0:	f8410466 	ldr	x6, [x3], #16
    960250a4:	f8010486 	str	x6, [x4], #16
    960250a8:	17fffff1 	b	9602506c <calculate_free_dram_regions.part.1+0x33c>

00000000960250ac <update_vpr_info>:
	reg = mc_read32(MC_VIDEO_PROTECT_REG_CTRL_0);
    960250ac:	d280ca02 	mov	x2, #0x650                 	// #1616
    960250b0:	f2a05822 	movk	x2, #0x2c1, lsl #16
    960250b4:	b9400042 	ldr	w2, [x2]
	if (NV_DRF_VAL(MC, VIDEO_PROTECT_REG_CTRL,
    960250b8:	360800a2 	tbz	w2, #1, 960250cc <update_vpr_info+0x20>
		reg = mc_read32(MC_VIDEO_PROTECT_SIZE_MB_0);
    960250bc:	d280c982 	mov	x2, #0x64c                 	// #1612
    960250c0:	f2a05822 	movk	x2, #0x2c1, lsl #16
    960250c4:	b9400042 	ldr	w2, [x2]
		if (!reg) {
    960250c8:	340003a2 	cbz	w2, 9602513c <update_vpr_info+0x90>
{
    960250cc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	node = fdt_subnode_offset(fdt, nodeoffset, "vpr-carveout");
    960250d0:	d00000e2 	adrp	x2, 96043000 <common_params>
    960250d4:	913c1c42 	add	x2, x2, #0xf07
{
    960250d8:	910003fd 	mov	x29, sp
    960250dc:	a90153f3 	stp	x19, x20, [sp, #16]
    960250e0:	aa0003f3 	mov	x19, x0
	node = fdt_subnode_offset(fdt, nodeoffset, "vpr-carveout");
    960250e4:	940032fd 	bl	96031cd8 <fdt_subnode_offset>
    960250e8:	2a0003f4 	mov	w20, w0
	if (node < 0) {
    960250ec:	37f80200 	tbnz	w0, #31, 9602512c <update_vpr_info+0x80>
	fdt_delprop(fdt, node, "compatible");
    960250f0:	2a0003e1 	mov	w1, w0
    960250f4:	d00000e2 	adrp	x2, 96043000 <common_params>
    960250f8:	aa1303e0 	mov	x0, x19
    960250fc:	913c5042 	add	x2, x2, #0xf14
    96025100:	94003708 	bl	96032d20 <fdt_delprop>
	fdt_delprop(fdt, node, "reg");
    96025104:	2a1403e1 	mov	w1, w20
    96025108:	f00000c2 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9602510c:	aa1303e0 	mov	x0, x19
    96025110:	91183842 	add	x2, x2, #0x60e
    96025114:	94003703 	bl	96032d20 <fdt_delprop>
	fdt_delprop(fdt, node, "size");
    96025118:	90000102 	adrp	x2, 96045000 <__func__.3796+0x7>
    9602511c:	2a1403e1 	mov	w1, w20
    96025120:	9136e442 	add	x2, x2, #0xdb9
    96025124:	aa1303e0 	mov	x0, x19
    96025128:	940036fe 	bl	96032d20 <fdt_delprop>
}
    9602512c:	52800000 	mov	w0, #0x0                   	// #0
    96025130:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025134:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96025138:	d65f03c0 	ret
    9602513c:	52800000 	mov	w0, #0x0                   	// #0
    96025140:	d65f03c0 	ret

0000000096025144 <tegrabl_linuxboot_add_vprresize_info>:
	if (!cmdline || !param) {
    96025144:	f100001f 	cmp	x0, #0x0
    96025148:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    9602514c:	540001c0 	b.eq	96025184 <tegrabl_linuxboot_add_vprresize_info+0x40>  // b.none
	reg = mc_read32(MC_VIDEO_PROTECT_SIZE_MB_0);
    96025150:	d280c983 	mov	x3, #0x64c                 	// #1612
    96025154:	f2a05823 	movk	x3, #0x2c1, lsl #16
    96025158:	b9400064 	ldr	w4, [x3]
	size = ((uint64_t)reg << 20);
    9602515c:	d36c7c84 	ubfiz	x4, x4, #20, #32
	if (size) {
    96025160:	b5000164 	cbnz	x4, 9602518c <tegrabl_linuxboot_add_vprresize_info+0x48>
	reg = mc_read32(MC_VIDEO_PROTECT_REG_CTRL_0);
    96025164:	91001063 	add	x3, x3, #0x4
    96025168:	b9400063 	ldr	w3, [x3]
	if (NV_DRF_VAL(MC, VIDEO_PROTECT_REG_CTRL,
    9602516c:	36080103 	tbz	w3, #1, 9602518c <tegrabl_linuxboot_add_vprresize_info+0x48>
		return tegrabl_snprintf(cmdline, len, "%s ", param);
    96025170:	aa0203e3 	mov	x3, x2
    96025174:	93407c21 	sxtw	x1, w1
    96025178:	d00000e2 	adrp	x2, 96043000 <common_params>
    9602517c:	9110e842 	add	x2, x2, #0x43a
    96025180:	17fff511 	b	960225c4 <tegrabl_snprintf>
		return -1;
    96025184:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96025188:	d65f03c0 	ret
		return 0;
    9602518c:	52800000 	mov	w0, #0x0                   	// #0
    96025190:	17fffffe 	b	96025188 <tegrabl_linuxboot_add_vprresize_info+0x44>

0000000096025194 <add_boot_slot_suffix>:
	if (!cmdline || !param) {
    96025194:	f100001f 	cmp	x0, #0x0
    96025198:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    9602519c:	54000400 	b.eq	9602521c <add_boot_slot_suffix+0x88>  // b.none
{
    960251a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960251a4:	910003fd 	mov	x29, sp
    960251a8:	a90153f3 	stp	x19, x20, [sp, #16]
    960251ac:	aa0003f3 	mov	x19, x0
    960251b0:	f90013f5 	str	x21, [sp, #32]
    960251b4:	aa0203f4 	mov	x20, x2
    960251b8:	2a0103f5 	mov	w21, w1
	status = tegrabl_a_b_get_bootslot_suffix(slot_suffix, false);
    960251bc:	9100e3a0 	add	x0, x29, #0x38
    960251c0:	52800001 	mov	w1, #0x0                   	// #0
    960251c4:	94001f94 	bl	9602d014 <tegrabl_a_b_get_bootslot_suffix>
	if (status != TEGRABL_NO_ERROR) {
    960251c8:	35000240 	cbnz	w0, 96025210 <add_boot_slot_suffix+0x7c>
	pr_info("%s: slot_suffix = %s\n", __func__, slot_suffix);
    960251cc:	9100e3a2 	add	x2, x29, #0x38
    960251d0:	d00000e1 	adrp	x1, 96043000 <common_params>
    960251d4:	d00000e0 	adrp	x0, 96043000 <common_params>
    960251d8:	912c3421 	add	x1, x1, #0xb0d
    960251dc:	912c8800 	add	x0, x0, #0xb22
    960251e0:	97fff524 	bl	96022670 <tegrabl_printf>
	return tegrabl_snprintf(cmdline, len, "%s=%s ", param, slot_suffix);
    960251e4:	d00000e2 	adrp	x2, 96043000 <common_params>
    960251e8:	9100e3a4 	add	x4, x29, #0x38
    960251ec:	aa1403e3 	mov	x3, x20
    960251f0:	9110dc42 	add	x2, x2, #0x437
    960251f4:	93407ea1 	sxtw	x1, w21
    960251f8:	aa1303e0 	mov	x0, x19
    960251fc:	97fff4f2 	bl	960225c4 <tegrabl_snprintf>
}
    96025200:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025204:	f94013f5 	ldr	x21, [sp, #32]
    96025208:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602520c:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96025210:	52802040 	mov	w0, #0x102                 	// #258
    96025214:	72a56560 	movk	w0, #0x2b2b, lsl #16
    96025218:	17fffffa 	b	96025200 <add_boot_slot_suffix+0x6c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602521c:	52800040 	mov	w0, #0x2                   	// #2
    96025220:	72a56560 	movk	w0, #0x2b2b, lsl #16
}
    96025224:	d65f03c0 	ret

0000000096025228 <update_gamedata_info>:
{
    96025228:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602522c:	910003fd 	mov	x29, sp
    96025230:	a90153f3 	stp	x19, x20, [sp, #16]
    96025234:	aa0003f3 	mov	x19, x0
	gamedata_addr = boot_params->global_data.carveout
    96025238:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602523c:	f9462000 	ldr	x0, [x0, #3136]
    96025240:	f9416800 	ldr	x0, [x0, #720]
	reg[0] = cpu_to_fdt64(gamedata_addr);
    96025244:	91540000 	add	x0, x0, #0x500, lsl #12
    96025248:	97fff902 	bl	96023650 <fdt64_to_cpu>
    9602524c:	f90013a0 	str	x0, [x29, #32]
	reg[1] = cpu_to_fdt64(gamedata_size);
    96025250:	d2c20000 	mov	x0, #0x100000000000        	// #17592186044416
	node = fdt_subnode_offset(fdt, nodeoffset, "gamedata_carveout");
    96025254:	d00000e2 	adrp	x2, 96043000 <common_params>
	reg[1] = cpu_to_fdt64(gamedata_size);
    96025258:	f90017a0 	str	x0, [x29, #40]
	node = fdt_subnode_offset(fdt, nodeoffset, "gamedata_carveout");
    9602525c:	91399042 	add	x2, x2, #0xe64
    96025260:	aa1303e0 	mov	x0, x19
    96025264:	9400329d 	bl	96031cd8 <fdt_subnode_offset>
	if (node < 0) {
    96025268:	36f800a0 	tbz	w0, #31, 9602527c <update_gamedata_info+0x54>
		return TEGRABL_NO_ERROR;
    9602526c:	52800000 	mov	w0, #0x0                   	// #0
}
    96025270:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025274:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96025278:	d65f03c0 	ret
    9602527c:	2a0003f4 	mov	w20, w0
	fdt_delprop(fdt, node, "size");
    96025280:	2a0003e1 	mov	w1, w0
    96025284:	90000102 	adrp	x2, 96045000 <__func__.3796+0x7>
    96025288:	aa1303e0 	mov	x0, x19
    9602528c:	9136e442 	add	x2, x2, #0xdb9
    96025290:	940036a4 	bl	96032d20 <fdt_delprop>
	fdt_delprop(fdt, node, "alloc-ranges");
    96025294:	2a1403e1 	mov	w1, w20
    96025298:	d00000e2 	adrp	x2, 96043000 <common_params>
    9602529c:	aa1303e0 	mov	x0, x19
    960252a0:	9139d842 	add	x2, x2, #0xe76
    960252a4:	9400369f 	bl	96032d20 <fdt_delprop>
	dterr = fdt_setprop(fdt, node, "reg", reg, 2 * sizeof(uint64_t));
    960252a8:	f00000c2 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    960252ac:	52800204 	mov	w4, #0x10                  	// #16
    960252b0:	910083a3 	add	x3, x29, #0x20
    960252b4:	91183842 	add	x2, x2, #0x60e
    960252b8:	2a1403e1 	mov	w1, w20
    960252bc:	aa1303e0 	mov	x0, x19
    960252c0:	94003621 	bl	96032b44 <fdt_setprop>
	if (dterr < 0) {
    960252c4:	36fffd40 	tbz	w0, #31, 9602526c <update_gamedata_info+0x44>
		pr_error("Failed to set reg base for gamedata_carveout node: %s\n",
    960252c8:	9400377a 	bl	960330b0 <fdt_strerror>
    960252cc:	aa0003e1 	mov	x1, x0
    960252d0:	d00000e0 	adrp	x0, 96043000 <common_params>
    960252d4:	913a0c00 	add	x0, x0, #0xe83
    960252d8:	97fff4e6 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    960252dc:	52800440 	mov	w0, #0x22                  	// #34
    960252e0:	72a56560 	movk	w0, #0x2b2b, lsl #16
    960252e4:	17ffffe3 	b	96025270 <update_gamedata_info+0x48>

00000000960252e8 <update_ramoops_info>:
{
    960252e8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960252ec:	910003fd 	mov	x29, sp
    960252f0:	a90153f3 	stp	x19, x20, [sp, #16]
    960252f4:	aa0003f3 	mov	x19, x0
	ramoops_addr = boot_params->global_data.carveout[CARVEOUT_CPUBL_PARAMS].base;
    960252f8:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960252fc:	f9462000 	ldr	x0, [x0, #3136]
    96025300:	f9416800 	ldr	x0, [x0, #720]
	reg[0] = cpu_to_fdt64(ramoops_addr);
    96025304:	91420000 	add	x0, x0, #0x80, lsl #12
    96025308:	97fff8d2 	bl	96023650 <fdt64_to_cpu>
    9602530c:	f90013a0 	str	x0, [x29, #32]
	reg[1] = cpu_to_fdt64(ramoops_size);
    96025310:	d2c40000 	mov	x0, #0x200000000000        	// #35184372088832
	node = fdt_subnode_offset(fdt, nodeoffset, "ramoops_carveout");
    96025314:	d00000e2 	adrp	x2, 96043000 <common_params>
	reg[1] = cpu_to_fdt64(ramoops_size);
    96025318:	f90017a0 	str	x0, [x29, #40]
	node = fdt_subnode_offset(fdt, nodeoffset, "ramoops_carveout");
    9602531c:	913af442 	add	x2, x2, #0xebd
    96025320:	aa1303e0 	mov	x0, x19
    96025324:	9400326d 	bl	96031cd8 <fdt_subnode_offset>
	if (node < 0) {
    96025328:	36f800a0 	tbz	w0, #31, 9602533c <update_ramoops_info+0x54>
		return TEGRABL_NO_ERROR;
    9602532c:	52800000 	mov	w0, #0x0                   	// #0
}
    96025330:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025334:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96025338:	d65f03c0 	ret
    9602533c:	2a0003f4 	mov	w20, w0
	fdt_delprop(fdt, node, "size");
    96025340:	2a0003e1 	mov	w1, w0
    96025344:	90000102 	adrp	x2, 96045000 <__func__.3796+0x7>
    96025348:	aa1303e0 	mov	x0, x19
    9602534c:	9136e442 	add	x2, x2, #0xdb9
    96025350:	94003674 	bl	96032d20 <fdt_delprop>
	fdt_delprop(fdt, node, "alloc-ranges");
    96025354:	2a1403e1 	mov	w1, w20
    96025358:	d00000e2 	adrp	x2, 96043000 <common_params>
    9602535c:	aa1303e0 	mov	x0, x19
    96025360:	9139d842 	add	x2, x2, #0xe76
    96025364:	9400366f 	bl	96032d20 <fdt_delprop>
	dterr = fdt_setprop(fdt, node, "reg", reg, 2 * sizeof(uint64_t));
    96025368:	f00000c2 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    9602536c:	52800204 	mov	w4, #0x10                  	// #16
    96025370:	910083a3 	add	x3, x29, #0x20
    96025374:	91183842 	add	x2, x2, #0x60e
    96025378:	2a1403e1 	mov	w1, w20
    9602537c:	aa1303e0 	mov	x0, x19
    96025380:	940035f1 	bl	96032b44 <fdt_setprop>
	if (dterr < 0) {
    96025384:	36fffd40 	tbz	w0, #31, 9602532c <update_ramoops_info+0x44>
		pr_error("Failed to set reg base for ramoops_carveout node: %s\n",
    96025388:	9400374a 	bl	960330b0 <fdt_strerror>
    9602538c:	aa0003e1 	mov	x1, x0
    96025390:	d00000e0 	adrp	x0, 96043000 <common_params>
    96025394:	913b3800 	add	x0, x0, #0xece
    96025398:	97fff4b6 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    9602539c:	52800440 	mov	w0, #0x22                  	// #34
    960253a0:	72a56560 	movk	w0, #0x2b2b, lsl #16
    960253a4:	17ffffe3 	b	96025330 <update_ramoops_info+0x48>

00000000960253a8 <get_free_dram_regions_info>:
	if (p_carveout != NULL) {
    960253a8:	b0000282 	adrp	x2, 96076000 <free_dram_block+0x38e8>
{
    960253ac:	aa0003e1 	mov	x1, x0
	if (p_carveout != NULL) {
    960253b0:	f944f842 	ldr	x2, [x2, #2544]
    960253b4:	b5000042 	cbnz	x2, 960253bc <get_free_dram_regions_info+0x14>
    960253b8:	17fffe5e 	b	96024d30 <calculate_free_dram_regions.part.1>
		*free_dram_regions = free_dram_block;
    960253bc:	b0000260 	adrp	x0, 96072000 <cmdline+0x510>
    960253c0:	911c6000 	add	x0, x0, #0x718
    960253c4:	f9000020 	str	x0, [x1]
		return free_dram_block_count;
    960253c8:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960253cc:	b949e800 	ldr	w0, [x0, #2536]
}
    960253d0:	d65f03c0 	ret

00000000960253d4 <tegrabl_get_free_dram_address>:

uint64_t tegrabl_get_free_dram_address(uint64_t size)
{
    960253d4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960253d8:	b0000269 	adrp	x9, 96072000 <cmdline+0x510>
	void *address = NULL;
	uint64_t i;

	for (i = 0; i < free_dram_block_count; i++) {
    960253dc:	b000028c 	adrp	x12, 96076000 <free_dram_block+0x38e8>
{
    960253e0:	aa0003ea 	mov	x10, x0
    960253e4:	910003fd 	mov	x29, sp
    960253e8:	911c8129 	add	x9, x9, #0x720
	void *address = NULL;
    960253ec:	910083ad 	add	x13, x29, #0x20
	for (i = 0; i < free_dram_block_count; i++) {
    960253f0:	9127a18c 	add	x12, x12, #0x9e8
    960253f4:	d280000b 	mov	x11, #0x0                   	// #0
	void *address = NULL;
    960253f8:	f81f8dbf 	str	xzr, [x13, #-8]!
	for (i = 0; i < free_dram_block_count; i++) {
    960253fc:	b9400180 	ldr	w0, [x12]
    96025400:	eb0b001f 	cmp	x0, x11
    96025404:	54000189 	b.ls	96025434 <tegrabl_get_free_dram_address+0x60>  // b.plast
		if (free_dram_block[i].size >= size) {
    96025408:	f9400120 	ldr	x0, [x9]
    9602540c:	eb0a001f 	cmp	x0, x10
    96025410:	540002a3 	b.cc	96025464 <tegrabl_get_free_dram_address+0x90>  // b.lo, b.ul, b.last
			/*
			 * Check if free dram block is unallocated.
			 * If not update address with free region available
			 */
			if (is_dram_address_free((void *)free_dram_block[i].base, size, &address)) {
    96025414:	f85f8120 	ldur	x0, [x9, #-8]
    96025418:	aa0d03e2 	mov	x2, x13
    9602541c:	aa0a03e1 	mov	x1, x10
    96025420:	97fffc1c 	bl	96024490 <is_dram_address_free>
    96025424:	72001c1f 	tst	w0, #0xff
    96025428:	540000c0 	b.eq	96025440 <tegrabl_get_free_dram_address+0x6c>  // b.none
				alloc_dram_free_region((void *)address, size);
    9602542c:	f9400fa0 	ldr	x0, [x29, #24]
				/*
				 * If free region updated in address is within
				 * same free dram block, use it
				 */
				if ((address + size) < (void *)(free_dram_block[i].base + free_dram_block[i].size)) {
					alloc_dram_free_region((void *)address, size);
    96025430:	97fffc32 	bl	960244f8 <alloc_dram_free_region>
				}
			}
		}
	}
	return (uint64_t)address;
}
    96025434:	f9400fa0 	ldr	x0, [x29, #24]
    96025438:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602543c:	d65f03c0 	ret
				if ((address + size) < (void *)(free_dram_block[i].base + free_dram_block[i].size)) {
    96025440:	a97f8d21 	ldp	x1, x3, [x9, #-8]
    96025444:	f9400fa0 	ldr	x0, [x29, #24]
    96025448:	8b030021 	add	x1, x1, x3
    9602544c:	8b0a0002 	add	x2, x0, x10
    96025450:	eb01005f 	cmp	x2, x1
    96025454:	54000062 	b.cs	96025460 <tegrabl_get_free_dram_address+0x8c>  // b.hs, b.nlast
					alloc_dram_free_region((void *)address, size);
    96025458:	aa0a03e1 	mov	x1, x10
    9602545c:	17fffff5 	b	96025430 <tegrabl_get_free_dram_address+0x5c>
					address = NULL;
    96025460:	f9000fbf 	str	xzr, [x29, #24]
	for (i = 0; i < free_dram_block_count; i++) {
    96025464:	9100056b 	add	x11, x11, #0x1
    96025468:	91004129 	add	x9, x9, #0x10
    9602546c:	17ffffe4 	b	960253fc <tegrabl_get_free_dram_address+0x28>

0000000096025470 <tegrabl_dealloc_free_dram_region>:

/* Free memory allocations made while allocating dram free region */
void tegrabl_dealloc_free_dram_region(void)
{
    96025470:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	struct dram_alloc *ptr_alloc = dram_alloc_base.next;
    96025474:	b0000260 	adrp	x0, 96072000 <cmdline+0x510>
{
    96025478:	910003fd 	mov	x29, sp
    9602547c:	f9000bf3 	str	x19, [sp, #16]
	struct dram_alloc *ptr_alloc = dram_alloc_base.next;
    96025480:	f9422013 	ldr	x19, [x0, #1088]

	while (ptr_alloc) {
    96025484:	b5000093 	cbnz	x19, 96025494 <tegrabl_dealloc_free_dram_region+0x24>
		tegrabl_free(ptr_alloc);
		ptr_alloc = ptr_alloc->next;
	}
}
    96025488:	f9400bf3 	ldr	x19, [sp, #16]
    9602548c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96025490:	d65f03c0 	ret
		tegrabl_free(ptr_alloc);
    96025494:	aa1303e0 	mov	x0, x19
    96025498:	94000588 	bl	96026ab8 <tegrabl_free>
		ptr_alloc = ptr_alloc->next;
    9602549c:	f9400a73 	ldr	x19, [x19, #16]
    960254a0:	17fffff9 	b	96025484 <tegrabl_dealloc_free_dram_region+0x14>

00000000960254a4 <tegrabl_dealloc_dram_address>:

void tegrabl_dealloc_dram_address(uint64_t addr)
{
    960254a4:	aa0003e4 	mov	x4, x0
	struct dram_alloc *ptr_alloc = &dram_alloc_base;
    960254a8:	b0000262 	adrp	x2, 96072000 <cmdline+0x510>
    960254ac:	9110c040 	add	x0, x2, #0x430
	struct dram_alloc *ptr_prev = NULL;
    960254b0:	d2800003 	mov	x3, #0x0                   	// #0
	void *address = (void *)addr;

	while (ptr_alloc) {
		if (ptr_alloc->start == address) {
    960254b4:	f9400005 	ldr	x5, [x0]
    960254b8:	f9400801 	ldr	x1, [x0, #16]
    960254bc:	eb0400bf 	cmp	x5, x4
    960254c0:	54000201 	b.ne	96025500 <tegrabl_dealloc_dram_address+0x5c>  // b.any
			if (ptr_prev != NULL) {
    960254c4:	b4000063 	cbz	x3, 960254d0 <tegrabl_dealloc_dram_address+0x2c>
				ptr_prev->next = ptr_alloc->next;
    960254c8:	f9000861 	str	x1, [x3, #16]
			} else {
				if (ptr_alloc->next != NULL) {
					dram_alloc_base.start = ptr_alloc->next->start;
					dram_alloc_base.size = ptr_alloc->next->size;
					dram_alloc_base.next = ptr_alloc->next->next;
					tegrabl_free(ptr_alloc->next);
    960254cc:	1400057b 	b	96026ab8 <tegrabl_free>
				if (ptr_alloc->next != NULL) {
    960254d0:	b4000101 	cbz	x1, 960254f0 <tegrabl_dealloc_dram_address+0x4c>
					dram_alloc_base.start = ptr_alloc->next->start;
    960254d4:	9110c043 	add	x3, x2, #0x430
    960254d8:	f9400024 	ldr	x4, [x1]
    960254dc:	f9021844 	str	x4, [x2, #1072]
					dram_alloc_base.next = ptr_alloc->next->next;
    960254e0:	a9408422 	ldp	x2, x1, [x1, #8]
    960254e4:	a9008462 	stp	x2, x1, [x3, #8]
					tegrabl_free(ptr_alloc->next);
    960254e8:	f9400800 	ldr	x0, [x0, #16]
    960254ec:	17fffff8 	b	960254cc <tegrabl_dealloc_dram_address+0x28>
				} else {
					dram_alloc_base.start = NULL;
    960254f0:	9110c040 	add	x0, x2, #0x430
    960254f4:	f902185f 	str	xzr, [x2, #1072]
					dram_alloc_base.size = 0;
					dram_alloc_base.next = NULL;
    960254f8:	a900fc1f 	stp	xzr, xzr, [x0, #8]
			break;
	}
	ptr_prev = ptr_alloc;
	ptr_alloc = ptr_alloc->next;
	}
}
    960254fc:	d65f03c0 	ret
    96025500:	aa0003e3 	mov	x3, x0
	while (ptr_alloc) {
    96025504:	b4ffffc1 	cbz	x1, 960254fc <tegrabl_dealloc_dram_address+0x58>
    96025508:	aa0103e0 	mov	x0, x1
    9602550c:	17ffffea 	b	960254b4 <tegrabl_dealloc_dram_address+0x10>

0000000096025510 <tegrabl_alloc_u_boot_top>:

tegrabl_error_t tegrabl_alloc_u_boot_top(uint64_t size)
{
    96025510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	uint64_t block = free_dram_block_count;
    96025514:	b0000281 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96025518:	b0000262 	adrp	x2, 96072000 <cmdline+0x510>
    9602551c:	911c8042 	add	x2, x2, #0x720
{
    96025520:	910003fd 	mov	x29, sp
	uint64_t block = free_dram_block_count;
    96025524:	b949e824 	ldr	w4, [x1, #2536]
	uint64_t block_base = 0;
	tegrabl_error_t err = TEGRABL_ERR_NO_MEMORY;
	uint64_t i;

	/* align size to 2MB */
	size += MEM_SZ_2MB;
    96025528:	91480009 	add	x9, x0, #0x200, lsl #12
{
    9602552c:	f9000bf3 	str	x19, [sp, #16]
	for (i = 0; i < free_dram_block_count; i++) {
    96025530:	d2800000 	mov	x0, #0x0                   	// #0
		if (free_dram_block[i].base > U_BOOT_TOP) {
    96025534:	d2c00033 	mov	x19, #0x100000000           	// #4294967296
	for (i = 0; i < free_dram_block_count; i++) {
    96025538:	eb04001f 	cmp	x0, x4
    9602553c:	540000c2 	b.cs	96025554 <tegrabl_alloc_u_boot_top+0x44>  // b.hs, b.nlast
		if (free_dram_block[i].base > U_BOOT_TOP) {
    96025540:	f85f8041 	ldur	x1, [x2, #-8]
    96025544:	aa0203e3 	mov	x3, x2
    96025548:	eb13003f 	cmp	x1, x19
    9602554c:	54000429 	b.ls	960255d0 <tegrabl_alloc_u_boot_top+0xc0>  // b.plast
			if (i > 0) {
    96025550:	b50000a0 	cbnz	x0, 96025564 <tegrabl_alloc_u_boot_top+0x54>
	tegrabl_error_t err = TEGRABL_ERR_NO_MEMORY;
    96025554:	52800060 	mov	w0, #0x3                   	// #3
			alloc_dram_free_region((void *)block_base, size);
			pr_info("Reserved memory at 0x%lx for U-Boot relocation\n", block_base);
		}
	}
	return err;
}
    96025558:	f9400bf3 	ldr	x19, [sp, #16]
    9602555c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96025560:	d65f03c0 	ret
				block = i - 1;
    96025564:	d1000400 	sub	x0, x0, #0x1
				block_size = free_dram_block[block].size;
    96025568:	b0000262 	adrp	x2, 96072000 <cmdline+0x510>
    9602556c:	911c6042 	add	x2, x2, #0x718
	if ((block < free_dram_block_count) && (block_size > size)) {
    96025570:	eb00009f 	cmp	x4, x0
				block_size = free_dram_block[block].size;
    96025574:	d37cec03 	lsl	x3, x0, #4
    96025578:	8b030041 	add	x1, x2, x3
				block_base = free_dram_block[block].base + block_size - size;
    9602557c:	f8636853 	ldr	x19, [x2, x3]
				block_size = free_dram_block[block].size;
    96025580:	f9400421 	ldr	x1, [x1, #8]
				block_base = free_dram_block[block].base + block_size - size;
    96025584:	8b130033 	add	x19, x1, x19
    96025588:	cb090273 	sub	x19, x19, x9
	if ((block < free_dram_block_count) && (block_size > size)) {
    9602558c:	54fffe49 	b.ls	96025554 <tegrabl_alloc_u_boot_top+0x44>  // b.plast
    96025590:	eb01013f 	cmp	x9, x1
    96025594:	54fffe02 	b.cs	96025554 <tegrabl_alloc_u_boot_top+0x44>  // b.hs, b.nlast
		if (is_dram_address_free((void *)block_base, size, NULL)) {
    96025598:	d2800002 	mov	x2, #0x0                   	// #0
    9602559c:	aa0903e1 	mov	x1, x9
    960255a0:	aa1303e0 	mov	x0, x19
    960255a4:	97fffbbb 	bl	96024490 <is_dram_address_free>
    960255a8:	72001c1f 	tst	w0, #0xff
    960255ac:	54fffd40 	b.eq	96025554 <tegrabl_alloc_u_boot_top+0x44>  // b.none
			alloc_dram_free_region((void *)block_base, size);
    960255b0:	aa1303e0 	mov	x0, x19
    960255b4:	97fffbd1 	bl	960244f8 <alloc_dram_free_region>
			pr_info("Reserved memory at 0x%lx for U-Boot relocation\n", block_base);
    960255b8:	aa1303e1 	mov	x1, x19
    960255bc:	d00000e0 	adrp	x0, 96043000 <common_params>
    960255c0:	91351400 	add	x0, x0, #0xd45
    960255c4:	97fff42b 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_NO_ERROR;
    960255c8:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    960255cc:	17ffffe3 	b	96025558 <tegrabl_alloc_u_boot_top+0x48>
		if ((free_dram_block[i].base + free_dram_block[i].size) > U_BOOT_TOP) {
    960255d0:	f9400063 	ldr	x3, [x3]
    960255d4:	91004042 	add	x2, x2, #0x10
    960255d8:	8b030023 	add	x3, x1, x3
    960255dc:	eb13007f 	cmp	x3, x19
    960255e0:	54000089 	b.ls	960255f0 <tegrabl_alloc_u_boot_top+0xe0>  // b.plast
			block_size = U_BOOT_TOP - free_dram_block[i].base;
    960255e4:	cb010261 	sub	x1, x19, x1
			block_base = U_BOOT_TOP - size;
    960255e8:	cb090273 	sub	x19, x19, x9
    960255ec:	17ffffe9 	b	96025590 <tegrabl_alloc_u_boot_top+0x80>
	for (i = 0; i < free_dram_block_count; i++) {
    960255f0:	91000400 	add	x0, x0, #0x1
    960255f4:	17ffffd1 	b	96025538 <tegrabl_alloc_u_boot_top+0x28>

00000000960255f8 <tegrabl_linuxboot_helper_get_info>:
#endif /* CONFIG_DYNAMIC_LOAD_ADDRESS */

tegrabl_error_t tegrabl_linuxboot_helper_get_info(
					tegrabl_linux_boot_info_t info,
					const void *in_data, void *out_data)
{
    960255f8:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960255fc:	910003fd 	mov	x29, sp
    96025600:	a90153f3 	stp	x19, x20, [sp, #16]
    96025604:	f90013f5 	str	x21, [sp, #32]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	struct tegrabl_linuxboot_memblock *memblock;
	struct tegrabl_linuxboot_memblock *free_dram_regions = NULL;
    96025608:	f9001bbf 	str	xzr, [x29, #48]
	uint32_t temp32;
	uint64_t addr;

	/* Note: in_data is not mandatory for all info-types */
	if (out_data == NULL) {
    9602560c:	b50000c2 	cbnz	x2, 96025624 <tegrabl_linuxboot_helper_get_info+0x2c>
		pr_error("out_data is NULL\n");
    96025610:	d00000e0 	adrp	x0, 96043000 <common_params>
    96025614:	91393c00 	add	x0, x0, #0xe4f
    96025618:	97fff416 	bl	96022670 <tegrabl_printf>
				 *((uint64_t *)out_data));
		break;

	case TEGRABL_LINUXBOOT_INFO_CARVEOUT:
		if (in_data == NULL) {
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602561c:	52800040 	mov	w0, #0x2                   	// #2
    96025620:	1400006e 	b	960257d8 <tegrabl_linuxboot_helper_get_info+0x1e0>
	switch (info) {
    96025624:	7100281f 	cmp	w0, #0xa
    96025628:	54000d68 	b.hi	960257d4 <tegrabl_linuxboot_helper_get_info+0x1dc>  // b.pmore
    9602562c:	aa0203f3 	mov	x19, x2
    96025630:	d00000e2 	adrp	x2, 96043000 <common_params>
    96025634:	912bf042 	add	x2, x2, #0xafc
    96025638:	38604840 	ldrb	w0, [x2, w0, uxtw]
    9602563c:	10000062 	adr	x2, 96025648 <tegrabl_linuxboot_helper_get_info+0x50>
    96025640:	8b208840 	add	x0, x2, w0, sxtb #2
    96025644:	d61f0000 	br	x0
		*(struct tegrabl_linuxboot_param **)out_data = extra_params;
    96025648:	b0000120 	adrp	x0, 9604a000 <s_qspi_info+0x20>
    9602564c:	91328000 	add	x0, x0, #0xca0
		pr_debug("%s: ramdisk (base:0x%lx, size:0x%lx)\n",
				 __func__, memblock->base, memblock->size);
		break;

	case TEGRABL_LINUXBOOT_INFO_BOOTIMAGE_CMDLINE:
		*(char **)out_data = tegrabl_get_bootimg_cmdline();
    96025650:	f9000260 	str	x0, [x19]
    96025654:	14000009 	b	96025678 <tegrabl_linuxboot_helper_get_info+0x80>
		*(struct tegrabl_linuxboot_dtnode_info **)out_data = extra_nodes;
    96025658:	b0000120 	adrp	x0, 9604a000 <s_qspi_info+0x20>
    9602565c:	91308000 	add	x0, x0, #0xc20
    96025660:	17fffffc 	b	96025650 <tegrabl_linuxboot_helper_get_info+0x58>
		if (boot_params->enable_log == 0) {
    96025664:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96025668:	f9462000 	ldr	x0, [x0, #3136]
    9602566c:	b9642001 	ldr	w1, [x0, #9248]
    96025670:	350000e1 	cbnz	w1, 9602568c <tegrabl_linuxboot_helper_get_info+0x94>
			*(tegrabl_linuxboot_debug_console_t *)out_data =
    96025674:	b900027f 	str	wzr, [x19]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96025678:	52800000 	mov	w0, #0x0                   	// #0
		break;
	};

fail:
	return err;
}
    9602567c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025680:	f94013f5 	ldr	x21, [sp, #32]
    96025684:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96025688:	d65f03c0 	ret
				TEGRABL_LINUXBOOT_DEBUG_CONSOLE_UARTA +
    9602568c:	b9641c00 	ldr	w0, [x0, #9244]
    96025690:	11000800 	add	w0, w0, #0x2
		*(uint32_t *)out_data = boot_params->secureos_type;
    96025694:	b9000260 	str	w0, [x19]
    96025698:	17fffff8 	b	96025678 <tegrabl_linuxboot_helper_get_info+0x80>
		if (tegrabl_uart_get_address(boot_params->uart_instance, &addr) !=
    9602569c:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960256a0:	9100e3a1 	add	x1, x29, #0x38
    960256a4:	f9462000 	ldr	x0, [x0, #3136]
    960256a8:	b9641c00 	ldr	w0, [x0, #9244]
    960256ac:	97fff2ce 	bl	960221e4 <tegrabl_uart_get_address>
    960256b0:	34000060 	cbz	w0, 960256bc <tegrabl_linuxboot_helper_get_info+0xc4>
			*(uint64_t *)out_data = 0;
    960256b4:	f900027f 	str	xzr, [x19]
    960256b8:	17fffff0 	b	96025678 <tegrabl_linuxboot_helper_get_info+0x80>
			*(uint64_t *)out_data = addr;
    960256bc:	f9401fa0 	ldr	x0, [x29, #56]
    960256c0:	17ffffe4 	b	96025650 <tegrabl_linuxboot_helper_get_info+0x58>
		if (in_data == NULL) {
    960256c4:	b4fffac1 	cbz	x1, 9602561c <tegrabl_linuxboot_helper_get_info+0x24>
		switch (temp32) {
    960256c8:	b9400021 	ldr	w1, [x1]
    960256cc:	7100103f 	cmp	w1, #0x4
    960256d0:	54000568 	b.hi	9602577c <tegrabl_linuxboot_helper_get_info+0x184>  // b.pmore
    960256d4:	d00000e0 	adrp	x0, 96043000 <common_params>
    960256d8:	912c2000 	add	x0, x0, #0xb08
    960256dc:	38614800 	ldrb	w0, [x0, w1, uxtw]
    960256e0:	10000061 	adr	x1, 960256ec <tegrabl_linuxboot_helper_get_info+0xf4>
    960256e4:	8b208820 	add	x0, x1, w0, sxtb #2
    960256e8:	d61f0000 	br	x0
				boot_params->global_data.carveout[CARVEOUT_VPR].base;
    960256ec:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960256f0:	f9462000 	ldr	x0, [x0, #3136]
			memblock->base =
    960256f4:	f9411801 	ldr	x1, [x0, #560]
			memblock->size =
    960256f8:	f9411c00 	ldr	x0, [x0, #568]
			memblock->base =
    960256fc:	f9000261 	str	x1, [x19]
			memblock->size = free_dram_regions[temp32].size;
    96025700:	f9000660 	str	x0, [x19, #8]
    96025704:	17ffffdd 	b	96025678 <tegrabl_linuxboot_helper_get_info+0x80>
				boot_params->global_data.carveout[CARVEOUT_BPMP].base;
    96025708:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602570c:	f9462000 	ldr	x0, [x0, #3136]
			memblock->size =
    96025710:	a94a0001 	ldp	x1, x0, [x0, #160]
			memblock->base =
    96025714:	f9000261 	str	x1, [x19]
    96025718:	17fffffa 	b	96025700 <tegrabl_linuxboot_helper_get_info+0x108>
				boot_params->global_data.carveout[CARVEOUT_SC7_RESUME_FW].base;
    9602571c:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96025720:	f9462000 	ldr	x0, [x0, #3136]
			memblock->size =
    96025724:	a95b0001 	ldp	x1, x0, [x0, #432]
			memblock->base =
    96025728:	f9000261 	str	x1, [x19]
    9602572c:	17fffff5 	b	96025700 <tegrabl_linuxboot_helper_get_info+0x108>
				boot_params->global_data.carveout[CARVEOUT_RAMDUMP].base;
    96025730:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96025734:	f9462000 	ldr	x0, [x0, #3136]
			memblock->base =
    96025738:	f9414801 	ldr	x1, [x0, #656]
			memblock->size =
    9602573c:	f9414c00 	ldr	x0, [x0, #664]
			memblock->base =
    96025740:	f9000261 	str	x1, [x19]
    96025744:	17ffffef 	b	96025700 <tegrabl_linuxboot_helper_get_info+0x108>
		if (in_data == NULL) {
    96025748:	b4fff6a1 	cbz	x1, 9602561c <tegrabl_linuxboot_helper_get_info+0x24>
	if (p_carveout != NULL) {
    9602574c:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96025750:	b0000295 	adrp	x21, 96076000 <free_dram_block+0x38e8>
		temp32 = *((uint32_t *)in_data);
    96025754:	b9400034 	ldr	w20, [x1]
	if (p_carveout != NULL) {
    96025758:	f944f800 	ldr	x0, [x0, #2544]
    9602575c:	b4000140 	cbz	x0, 96025784 <tegrabl_linuxboot_helper_get_info+0x18c>
		*free_dram_regions = free_dram_block;
    96025760:	b0000260 	adrp	x0, 96072000 <cmdline+0x510>
    96025764:	911c6000 	add	x0, x0, #0x718
    96025768:	f9001ba0 	str	x0, [x29, #48]
		return free_dram_block_count;
    9602576c:	b949eaa0 	ldr	w0, [x21, #2536]
		free_dram_block_count = calculate_free_dram_regions(&free_dram_regions);
    96025770:	b909eaa0 	str	w0, [x21, #2536]
		if (temp32 >= free_dram_block_count) {
    96025774:	6b00029f 	cmp	w20, w0
    96025778:	540000c3 	b.cc	96025790 <tegrabl_linuxboot_helper_get_info+0x198>  // b.lo, b.ul, b.last
			memblock->size = 0;
    9602577c:	a9007e7f 	stp	xzr, xzr, [x19]
    96025780:	17ffffbe 	b	96025678 <tegrabl_linuxboot_helper_get_info+0x80>
    96025784:	9100c3a0 	add	x0, x29, #0x30
    96025788:	97fffd6a 	bl	96024d30 <calculate_free_dram_regions.part.1>
    9602578c:	17fffff9 	b	96025770 <tegrabl_linuxboot_helper_get_info+0x178>
			memblock->base = free_dram_regions[temp32].base;
    96025790:	f9401ba0 	ldr	x0, [x29, #48]
    96025794:	d37c7e94 	ubfiz	x20, x20, #4, #32
    96025798:	8b140001 	add	x1, x0, x20
    9602579c:	f8746800 	ldr	x0, [x0, x20]
    960257a0:	f9000260 	str	x0, [x19]
			memblock->size = free_dram_regions[temp32].size;
    960257a4:	f9400420 	ldr	x0, [x1, #8]
    960257a8:	17ffffd6 	b	96025700 <tegrabl_linuxboot_helper_get_info+0x108>
		tegrabl_get_ramdisk_info(&memblock->base, &memblock->size);
    960257ac:	91002261 	add	x1, x19, #0x8
    960257b0:	aa1303e0 	mov	x0, x19
    960257b4:	9400022b 	bl	96026060 <tegrabl_get_ramdisk_info>
    960257b8:	17ffffb0 	b	96025678 <tegrabl_linuxboot_helper_get_info+0x80>
		*(char **)out_data = tegrabl_get_bootimg_cmdline();
    960257bc:	94000232 	bl	96026084 <tegrabl_get_bootimg_cmdline>
    960257c0:	17ffffa4 	b	96025650 <tegrabl_linuxboot_helper_get_info+0x58>
		*(uint32_t *)out_data = boot_params->secureos_type;
    960257c4:	b0000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960257c8:	f9462000 	ldr	x0, [x0, #3136]
    960257cc:	b9647000 	ldr	w0, [x0, #9328]
    960257d0:	17ffffb1 	b	96025694 <tegrabl_linuxboot_helper_get_info+0x9c>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    960257d4:	52800020 	mov	w0, #0x1                   	// #1
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960257d8:	72a56560 	movk	w0, #0x2b2b, lsl #16
	return err;
    960257dc:	17ffffa8 	b	9602567c <tegrabl_linuxboot_helper_get_info+0x84>

00000000960257e0 <tegrabl_get_nct_load_addr>:

#if defined(CONFIG_DYNAMIC_LOAD_ADDRESS)
tegrabl_error_t tegrabl_get_nct_load_addr(void **load_addr)
{
    960257e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960257e4:	910003fd 	mov	x29, sp
    960257e8:	f9000bf3 	str	x19, [sp, #16]
    960257ec:	aa0003f3 	mov	x19, x0
	uint64_t addr;
	addr = tegrabl_get_free_dram_address(NCT_PART_SIZE + MEM_SZ_64KB);
    960257f0:	d2a00420 	mov	x0, #0x210000              	// #2162688
    960257f4:	97fffef8 	bl	960253d4 <tegrabl_get_free_dram_address>
	*load_addr = (void *)MEM_ALIGN(addr, MEM_SZ_64KB);
    960257f8:	d29fffe1 	mov	x1, #0xffff                	// #65535
    960257fc:	8b010000 	add	x0, x0, x1
    96025800:	9270bc00 	and	x0, x0, #0xffffffffffff0000
    96025804:	f9000260 	str	x0, [x19]
	return TEGRABL_NO_ERROR;
}
    96025808:	52800000 	mov	w0, #0x0                   	// #0
    9602580c:	f9400bf3 	ldr	x19, [sp, #16]
    96025810:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96025814:	d65f03c0 	ret

0000000096025818 <tegrabl_get_boot_img_load_addr>:

tegrabl_error_t tegrabl_get_boot_img_load_addr(void **load_addr)
{
    96025818:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
	char partition_name[TEGRABL_GPT_MAX_PARTITION_NAME + 1];
	struct tegrabl_partition partition;
	uint8_t *ptr;
	union tegrabl_bootimg_header *bootimg_header = NULL;

	err = tegrabl_get_partition_name(TEGRABL_BINARY_KERNEL, 0, partition_name);
    9602581c:	52800001 	mov	w1, #0x0                   	// #0
{
    96025820:	910003fd 	mov	x29, sp
    96025824:	a90153f3 	stp	x19, x20, [sp, #16]
	err = tegrabl_get_partition_name(TEGRABL_BINARY_KERNEL, 0, partition_name);
    96025828:	910163a2 	add	x2, x29, #0x58
{
    9602582c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96025830:	aa0003f6 	mov	x22, x0
    96025834:	a90363f7 	stp	x23, x24, [sp, #48]
	err = tegrabl_get_partition_name(TEGRABL_BINARY_KERNEL, 0, partition_name);
    96025838:	52800300 	mov	w0, #0x18                  	// #24
    9602583c:	94001b8c 	bl	9602c66c <tegrabl_get_partition_name>
	if (err != TEGRABL_NO_ERROR) {
    96025840:	34000160 	cbz	w0, 9602586c <tegrabl_get_boot_img_load_addr+0x54>
    96025844:	2a0003f5 	mov	w21, w0
		pr_error("Failed to get bootimage partition name\n");
    96025848:	d00000e0 	adrp	x0, 96043000 <common_params>
    9602584c:	9135e000 	add	x0, x0, #0xd78
		err = TEGRABL_ERR_NO_MEMORY;
		goto exit;
	}
	err = tegrabl_partition_read(&partition, (void *)addr_align, HEADERS_TOTAL_SIZE);
	if (err != TEGRABL_NO_ERROR) {
		pr_error("Failed to read bootimage partition\n");
    96025850:	97fff388 	bl	96022670 <tegrabl_printf>
	}
	*load_addr = addr_align;
	pr_info("Boot image load address: %p\n", addr_align);
exit:
	return err;
}
    96025854:	2a1503e0 	mov	w0, w21
    96025858:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602585c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96025860:	a94363f7 	ldp	x23, x24, [sp, #48]
    96025864:	a8c87bfd 	ldp	x29, x30, [sp], #128
    96025868:	d65f03c0 	ret
	err = tegrabl_partition_open(partition_name, &partition);
    9602586c:	910103a1 	add	x1, x29, #0x40
    96025870:	910163a0 	add	x0, x29, #0x58
    96025874:	940006e2 	bl	960273fc <tegrabl_partition_open>
    96025878:	2a0003f5 	mov	w21, w0
	if (err != TEGRABL_NO_ERROR) {
    9602587c:	34000080 	cbz	w0, 9602588c <tegrabl_get_boot_img_load_addr+0x74>
		pr_error("Failed while opening bootimage partition\n");
    96025880:	d00000e0 	adrp	x0, 96043000 <common_params>
    96025884:	91368c00 	add	x0, x0, #0xda3
    96025888:	17fffff2 	b	96025850 <tegrabl_get_boot_img_load_addr+0x38>
	partition_size = tegrabl_partition_size(&partition);
    9602588c:	910103a0 	add	x0, x29, #0x40
    96025890:	9400071e 	bl	96027508 <tegrabl_partition_size>
	addr = tegrabl_get_free_dram_address(partition_size + MEM_SZ_2MB);
    96025894:	91480000 	add	x0, x0, #0x200, lsl #12
    96025898:	97fffecf 	bl	960253d4 <tegrabl_get_free_dram_address>
	addr_align = (void *)MEM_ALIGN(addr, MEM_SZ_2MB);
    9602589c:	b24053e2 	mov	x2, #0x1fffff              	// #2097151
    960258a0:	8b020014 	add	x20, x0, x2
    960258a4:	926baa94 	and	x20, x20, #0xffffffffffe00000
	if (!U_BOOT_LOAD_ADDRESS_IS_VALID((uint64_t)addr_align, HEADERS_TOTAL_SIZE)) {
    960258a8:	d2c00021 	mov	x1, #0x100000000           	// #4294967296
    960258ac:	91276282 	add	x2, x20, #0x9d8
	addr = tegrabl_get_free_dram_address(partition_size + MEM_SZ_2MB);
    960258b0:	aa0003f8 	mov	x24, x0
	if (!U_BOOT_LOAD_ADDRESS_IS_VALID((uint64_t)addr_align, HEADERS_TOTAL_SIZE)) {
    960258b4:	eb01005f 	cmp	x2, x1
    960258b8:	d2b00001 	mov	x1, #0x80000000            	// #2147483648
    960258bc:	fa419280 	ccmp	x20, x1, #0x0, ls  // ls = plast
    960258c0:	54000088 	b.hi	960258d0 <tegrabl_get_boot_img_load_addr+0xb8>  // b.pmore
			tegrabl_dealloc_dram_address(addr);
    960258c4:	97fffef8 	bl	960254a4 <tegrabl_dealloc_dram_address>
			err = TEGRABL_ERR_NO_MEMORY;
    960258c8:	52800075 	mov	w21, #0x3                   	// #3
			goto exit;
    960258cc:	17ffffe2 	b	96025854 <tegrabl_get_boot_img_load_addr+0x3c>
	err = tegrabl_partition_read(&partition, (void *)addr_align, HEADERS_TOTAL_SIZE);
    960258d0:	d2813b02 	mov	x2, #0x9d8                 	// #2520
    960258d4:	aa1403e1 	mov	x1, x20
    960258d8:	910103a0 	add	x0, x29, #0x40
	addr_align = (void *)MEM_ALIGN(addr, MEM_SZ_2MB);
    960258dc:	aa1403f3 	mov	x19, x20
	err = tegrabl_partition_read(&partition, (void *)addr_align, HEADERS_TOTAL_SIZE);
    960258e0:	94000756 	bl	96027638 <tegrabl_partition_read>
    960258e4:	2a0003f5 	mov	w21, w0
	if (err != TEGRABL_NO_ERROR) {
    960258e8:	34000080 	cbz	w0, 960258f8 <tegrabl_get_boot_img_load_addr+0xe0>
		pr_error("Failed to read bootimage partition\n");
    960258ec:	d00000e0 	adrp	x0, 96043000 <common_params>
    960258f0:	91374000 	add	x0, x0, #0xdd0
    960258f4:	17ffffd7 	b	96025850 <tegrabl_get_boot_img_load_addr+0x38>
	if ((strncmp((const char *)ptr, "GSHV", 4) == 0)
    960258f8:	b00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    960258fc:	d2800082 	mov	x2, #0x4                   	// #4
    96025900:	911f7821 	add	x1, x1, #0x7de
    96025904:	aa1403e0 	mov	x0, x20
    96025908:	9400125d 	bl	9602a27c <strncmp>
    9602590c:	35000500 	cbnz	w0, 960259ac <tegrabl_get_boot_img_load_addr+0x194>
		ptr += sizeof(struct tegrabl_sigheader);
    96025910:	91064294 	add	x20, x20, #0x190
	if (strncmp((const char *)ptr, "ANDROID", 7) == 0) {
    96025914:	d00000e1 	adrp	x1, 96043000 <common_params>
    96025918:	d28000e2 	mov	x2, #0x7                   	// #7
    9602591c:	9137dc21 	add	x1, x1, #0xdf7
    96025920:	aa1403e0 	mov	x0, x20
    96025924:	94001256 	bl	9602a27c <strncmp>
    96025928:	35000500 	cbnz	w0, 960259c8 <tegrabl_get_boot_img_load_addr+0x1b0>
		bootimg_size += bootimg_header->kernelsize;
    9602592c:	b9400a80 	ldr	w0, [x20, #8]
		bootimg_size += bootimg_header->ramdisksize;
    96025930:	b9401294 	ldr	w20, [x20, #16]
    96025934:	8b140014 	add	x20, x0, x20
		pr_info("Boot image size read from image header: %lx\n", bootimg_size);
    96025938:	d00000e0 	adrp	x0, 96043000 <common_params>
    9602593c:	aa1403e1 	mov	x1, x20
    96025940:	9137fc00 	add	x0, x0, #0xdff
    96025944:	97fff34b 	bl	96022670 <tegrabl_printf>
	tegrabl_partition_close(&partition);
    96025948:	910103a0 	add	x0, x29, #0x40
    9602594c:	940006f6 	bl	96027524 <tegrabl_partition_close>
	if (bootimg_size > 0) {
    96025950:	b4000234 	cbz	x20, 96025994 <tegrabl_get_boot_img_load_addr+0x17c>
		tegrabl_dealloc_dram_address(addr);
    96025954:	aa1803e0 	mov	x0, x24
    96025958:	97fffed3 	bl	960254a4 <tegrabl_dealloc_dram_address>
		addr = tegrabl_get_free_dram_address(loading_total_size + MEM_SZ_2MB);
    9602595c:	91480280 	add	x0, x20, #0x200, lsl #12
		loading_total_size = HEADERS_TOTAL_SIZE + bootimg_size;
    96025960:	91276297 	add	x23, x20, #0x9d8
		addr = tegrabl_get_free_dram_address(loading_total_size + MEM_SZ_2MB);
    96025964:	91276000 	add	x0, x0, #0x9d8
    96025968:	97fffe9b 	bl	960253d4 <tegrabl_get_free_dram_address>
		addr_align = (void *)MEM_ALIGN(addr, MEM_SZ_2MB);
    9602596c:	b24053e1 	mov	x1, #0x1fffff              	// #2097151
    96025970:	8b010013 	add	x19, x0, x1
    96025974:	926baa73 	and	x19, x19, #0xffffffffffe00000
		if (!U_BOOT_LOAD_ADDRESS_IS_VALID((uint64_t)addr_align, loading_total_size)) {
    96025978:	d2b00001 	mov	x1, #0x80000000            	// #2147483648
    9602597c:	eb01027f 	cmp	x19, x1
    96025980:	54fffa29 	b.ls	960258c4 <tegrabl_get_boot_img_load_addr+0xac>  // b.plast
    96025984:	8b170277 	add	x23, x19, x23
    96025988:	d2c00021 	mov	x1, #0x100000000           	// #4294967296
    9602598c:	eb0102ff 	cmp	x23, x1
    96025990:	54fff9a8 	b.hi	960258c4 <tegrabl_get_boot_img_load_addr+0xac>  // b.pmore
	*load_addr = addr_align;
    96025994:	f90002d3 	str	x19, [x22]
	pr_info("Boot image load address: %p\n", addr_align);
    96025998:	aa1303e1 	mov	x1, x19
    9602599c:	d00000e0 	adrp	x0, 96043000 <common_params>
    960259a0:	9138bc00 	add	x0, x0, #0xe2f
    960259a4:	97fff333 	bl	96022670 <tegrabl_printf>
	return err;
    960259a8:	17ffffab 	b	96025854 <tegrabl_get_boot_img_load_addr+0x3c>
		|| (strncmp((const char *)ptr, "NVDA", 4) == 0)) {
    960259ac:	b00000e1 	adrp	x1, 96042000 <__func__.4833+0x5>
    960259b0:	d2800082 	mov	x2, #0x4                   	// #4
    960259b4:	911f8c21 	add	x1, x1, #0x7e3
    960259b8:	aa1403e0 	mov	x0, x20
    960259bc:	94001230 	bl	9602a27c <strncmp>
    960259c0:	34fffa80 	cbz	w0, 96025910 <tegrabl_get_boot_img_load_addr+0xf8>
    960259c4:	17ffffd4 	b	96025914 <tegrabl_get_boot_img_load_addr+0xfc>
	uint64_t bootimg_size = 0;
    960259c8:	d2800014 	mov	x20, #0x0                   	// #0
    960259cc:	17ffffdf 	b	96025948 <tegrabl_get_boot_img_load_addr+0x130>

00000000960259d0 <tegrabl_get_kernel_load_addr>:

uint64_t tegrabl_get_kernel_load_addr(void)
{
    960259d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	uint64_t addr;
	addr = tegrabl_get_free_dram_address(MAX_KERNEL_IMAGE_SIZE + MEM_SZ_2MB);
    960259d4:	d2a28400 	mov	x0, #0x14200000            	// #337641472
{
    960259d8:	910003fd 	mov	x29, sp
	addr = tegrabl_get_free_dram_address(MAX_KERNEL_IMAGE_SIZE + MEM_SZ_2MB);
    960259dc:	97fffe7e 	bl	960253d4 <tegrabl_get_free_dram_address>
	return MEM_ALIGN(addr, MEM_SZ_2MB);
    960259e0:	b24053e1 	mov	x1, #0x1fffff              	// #2097151
    960259e4:	8b010000 	add	x0, x0, x1
}
    960259e8:	926ba800 	and	x0, x0, #0xffffffffffe00000
    960259ec:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960259f0:	d65f03c0 	ret

00000000960259f4 <tegrabl_get_dtb_load_addr>:

uint64_t tegrabl_get_dtb_load_addr(void)
{
    960259f4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	uint64_t addr;
	addr = tegrabl_get_free_dram_address(DTB_MAX_SIZE + MEM_SZ_2MB);
    960259f8:	d2a00600 	mov	x0, #0x300000              	// #3145728
{
    960259fc:	910003fd 	mov	x29, sp
	addr = tegrabl_get_free_dram_address(DTB_MAX_SIZE + MEM_SZ_2MB);
    96025a00:	97fffe75 	bl	960253d4 <tegrabl_get_free_dram_address>
	return MEM_ALIGN(addr, MEM_SZ_2MB);
    96025a04:	b24053e1 	mov	x1, #0x1fffff              	// #2097151
    96025a08:	8b010000 	add	x0, x0, x1
}
    96025a0c:	926ba800 	and	x0, x0, #0xffffffffffe00000
    96025a10:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96025a14:	d65f03c0 	ret

0000000096025a18 <tegrabl_get_ramdisk_load_addr>:

uint64_t tegrabl_get_ramdisk_load_addr(void)
{
    96025a18:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	uint64_t addr;
	addr = tegrabl_get_free_dram_address(RAMDISK_MAX_SIZE + MEM_SZ_64KB);
    96025a1c:	d2a18020 	mov	x0, #0xc010000             	// #201392128
{
    96025a20:	910003fd 	mov	x29, sp
	addr = tegrabl_get_free_dram_address(RAMDISK_MAX_SIZE + MEM_SZ_64KB);
    96025a24:	97fffe6c 	bl	960253d4 <tegrabl_get_free_dram_address>
	return MEM_ALIGN(addr, MEM_SZ_64KB);
    96025a28:	d29fffe1 	mov	x1, #0xffff                	// #65535
    96025a2c:	8b010000 	add	x0, x0, x1
}
    96025a30:	9270bc00 	and	x0, x0, #0xffffffffffff0000
    96025a34:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96025a38:	d65f03c0 	ret

0000000096025a3c <tegrabl_get_recovery_img_load_addr>:
#endif /* CONFIG_DYNAMIC_LOAD_ADDRESS */

#if defined(CONFIG_ENABLE_L4T_RECOVERY)
tegrabl_error_t tegrabl_get_recovery_img_load_addr(void **load_addr)
{
	*load_addr = (void *)BOOT_IMAGE_LOAD_ADDRESS;
    96025a3c:	d2b50001 	mov	x1, #0xa8000000            	// #2818572288
    96025a40:	f9000001 	str	x1, [x0]
	return TEGRABL_NO_ERROR;
}
    96025a44:	52800000 	mov	w0, #0x0                   	// #0
    96025a48:	d65f03c0 	ret

0000000096025a4c <tegrabl_get_kernel_text_offset>:
#endif

uint64_t tegrabl_get_kernel_text_offset(void)
{
	return 0;
}
    96025a4c:	d2800000 	mov	x0, #0x0                   	// #0
    96025a50:	d65f03c0 	ret

0000000096025a54 <tegrabl_do_ratchet_check>:
bool tegrabl_do_ratchet_check(uint8_t bin_type, void * const addr)
{
	TEGRABL_UNUSED(bin_type);
	TEGRABL_UNUSED(addr);
	return true;
}
    96025a54:	52800020 	mov	w0, #0x1                   	// #1
    96025a58:	d65f03c0 	ret

0000000096025a5c <tegrabl_bom_compare>:
#include <tegrabl_bootimg.h>
#include <tegrabl_linuxboot_utils.h>

int32_t tegrabl_bom_compare(struct tegrabl_carveout_info *p_carveout, const uint32_t a, const uint32_t b)
{
	if (p_carveout[a].base < p_carveout[b].base)
    96025a5c:	d37c7c21 	ubfiz	x1, x1, #4, #32
    96025a60:	d37c7c42 	ubfiz	x2, x2, #4, #32
    96025a64:	f8616803 	ldr	x3, [x0, x1]
    96025a68:	f8626801 	ldr	x1, [x0, x2]
    96025a6c:	eb01007f 	cmp	x3, x1
		return -1;
	else if (p_carveout[a].base > p_carveout[b].base)
    96025a70:	1a9f97e0 	cset	w0, hi  // hi = pmore
    96025a74:	5a9f2000 	csinv	w0, w0, wzr, cs  // cs = hs, nlast
		return 1;
	else
		return 0;
}
    96025a78:	d65f03c0 	ret

0000000096025a7c <tegrabl_sort>:
{
	uint32_t val;
	int32_t i;
	int32_t j;

	if (count < 2)
    96025a7c:	7100045f 	cmp	w2, #0x1
    96025a80:	540003cd 	b.le	96025af8 <tegrabl_sort+0x7c>
    96025a84:	51000844 	sub	w4, w2, #0x2
    96025a88:	aa0103e6 	mov	x6, x1
    96025a8c:	aa0003e9 	mov	x9, x0
    96025a90:	91000884 	add	x4, x4, #0x2
{
    96025a94:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	if (count < 2)
    96025a98:	d2800027 	mov	x7, #0x1                   	// #1
{
    96025a9c:	910003fd 	mov	x29, sp
		return;

	for (i = 1; i < count; i++) {
		val = array[i];
    96025aa0:	b86778ca 	ldr	w10, [x6, x7, lsl #2]
    96025aa4:	d10004e5 	sub	x5, x7, #0x1

		for (j = (i - 1);
				 (j >= 0) && (tegrabl_bom_compare(p_carveout, val, array[j]) < 0);
    96025aa8:	b86578cb 	ldr	w11, [x6, x5, lsl #2]
    96025aac:	2a0503e8 	mov	w8, w5
    96025ab0:	2a0a03e1 	mov	w1, w10
    96025ab4:	aa0903e0 	mov	x0, x9
    96025ab8:	2a0b03e2 	mov	w2, w11
    96025abc:	97ffffe8 	bl	96025a5c <tegrabl_bom_compare>
    96025ac0:	36f800e0 	tbz	w0, #31, 96025adc <tegrabl_sort+0x60>
				 j--) {
			array[j + 1] = array[j];
    96025ac4:	8b0508c0 	add	x0, x6, x5, lsl #2
    96025ac8:	d10004a5 	sub	x5, x5, #0x1
    96025acc:	2a0503e8 	mov	w8, w5
		for (j = (i - 1);
    96025ad0:	310004bf 	cmn	w5, #0x1
			array[j + 1] = array[j];
    96025ad4:	b900040b 	str	w11, [x0, #4]
		for (j = (i - 1);
    96025ad8:	54fffe81 	b.ne	96025aa8 <tegrabl_sort+0x2c>  // b.any
		}

		array[j + 1] = val;
    96025adc:	8b28c8c8 	add	x8, x6, w8, sxtw #2
    96025ae0:	910004e7 	add	x7, x7, #0x1
	for (i = 1; i < count; i++) {
    96025ae4:	eb07009f 	cmp	x4, x7
		array[j + 1] = val;
    96025ae8:	b900050a 	str	w10, [x8, #4]
	for (i = 1; i < count; i++) {
    96025aec:	54fffda1 	b.ne	96025aa0 <tegrabl_sort+0x24>  // b.any
	}
}
    96025af0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96025af4:	d65f03c0 	ret
    96025af8:	d65f03c0 	ret

0000000096025afc <tegrabl_validate_binary>:

#if defined(CONFIG_ENABLE_SECURE_BOOT)
tegrabl_error_t tegrabl_validate_binary(uint32_t bin_type, char *bin_name, uint32_t bin_max_size,
										void *load_addr, uint32_t *bin_len)
{
    96025afc:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96025b00:	910003fd 	mov	x29, sp
    96025b04:	a90153f3 	stp	x19, x20, [sp, #16]
    96025b08:	aa0303f3 	mov	x19, x3
    96025b0c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96025b10:	2a0003f4 	mov	w20, w0
    96025b14:	aa0103f6 	mov	x22, x1
    96025b18:	aa0403f5 	mov	x21, x4
    96025b1c:	f9001bf7 	str	x23, [sp, #48]

	pr_trace("%s(): %u\n", __func__, __LINE__);

	TEGRABL_UNUSED(bin_max_size);

	pr_info("Validate %s ...\n", bin_name);
    96025b20:	d00000e0 	adrp	x0, 96043000 <common_params>
{
    96025b24:	2a0203f7 	mov	w23, w2
	pr_info("Validate %s ...\n", bin_name);
    96025b28:	913c7c00 	add	x0, x0, #0xf1f
    96025b2c:	97fff2d1 	bl	96022670 <tegrabl_printf>

	if (!tegrabl_do_ratchet_check(bin_type, load_addr)) {
    96025b30:	aa1303e1 	mov	x1, x19
    96025b34:	2a1403e0 	mov	w0, w20
    96025b38:	97ffffc7 	bl	96025a54 <tegrabl_do_ratchet_check>
    96025b3c:	72001c1f 	tst	w0, #0xff
    96025b40:	540001c0 	b.eq	96025b78 <tegrabl_validate_binary+0x7c>  // b.none
		err = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 2);
		goto fail;
	}

	if (bin_len != NULL) {
    96025b44:	b4000095 	cbz	x21, 96025b54 <tegrabl_validate_binary+0x58>
		*bin_len = tegrabl_auth_get_binary_len(load_addr);
    96025b48:	aa1303e0 	mov	x0, x19
    96025b4c:	97ffec57 	bl	96020ca8 <tegrabl_auth_get_binary_len>
    96025b50:	b90002a0 	str	w0, [x21]
	}

	err = tegrabl_auth_payload(bin_type, bin_name, load_addr, bin_max_size);
    96025b54:	2a1703e3 	mov	w3, w23
    96025b58:	aa1303e2 	mov	x2, x19
    96025b5c:	aa1603e1 	mov	x1, x22
    96025b60:	2a1403e0 	mov	w0, w20
		goto fail;
	}

fail:
	 return err;
 }
    96025b64:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025b68:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96025b6c:	f9401bf7 	ldr	x23, [sp, #48]
    96025b70:	a8c47bfd 	ldp	x29, x30, [sp], #64
	err = tegrabl_auth_payload(bin_type, bin_name, load_addr, bin_max_size);
    96025b74:	17ffec5a 	b	96020cdc <tegrabl_auth_payload>
 }
    96025b78:	52804300 	mov	w0, #0x218                 	// #536
    96025b7c:	f9401bf7 	ldr	x23, [sp, #48]
    96025b80:	72a56560 	movk	w0, #0x2b2b, lsl #16
    96025b84:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025b88:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96025b8c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96025b90:	d65f03c0 	ret

0000000096025b94 <tegrabl_verify_boot_img_hdr>:
#endif  /* CONFIG_ENABLE_SECURE_BOOT */

/* Sanity checks the kernel image extracted from Android boot image */
tegrabl_error_t tegrabl_verify_boot_img_hdr(union tegrabl_bootimg_header *hdr, uint32_t img_size)
{
    96025b94:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96025b98:	910003fd 	mov	x29, sp
    96025b9c:	a90153f3 	stp	x19, x20, [sp, #16]
    96025ba0:	aa0003f3 	mov	x19, x0
    96025ba4:	f90013f5 	str	x21, [sp, #32]
	uint64_t hdr_fields_sum;
	uint32_t known_crc = 0;
	uint32_t calculated_crc = 0;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	pr_info("Checking boot.img header magic ... ");
    96025ba8:	d00000e0 	adrp	x0, 96043000 <common_params>
{
    96025bac:	2a0103f5 	mov	w21, w1
	pr_info("Checking boot.img header magic ... ");
    96025bb0:	913ccc00 	add	x0, x0, #0xf33
    96025bb4:	97fff2af 	bl	96022670 <tegrabl_printf>
	if (memcmp(hdr->magic, ANDROID_MAGIC, ANDROID_MAGIC_SIZE)) {
    96025bb8:	d00000e1 	adrp	x1, 96043000 <common_params>
    96025bbc:	d2800102 	mov	x2, #0x8                   	// #8
    96025bc0:	913d6821 	add	x1, x1, #0xf5a
    96025bc4:	aa1303e0 	mov	x0, x19
    96025bc8:	9400112a 	bl	9602a070 <memcmp>
    96025bcc:	34000140 	cbz	w0, 96025bf4 <tegrabl_verify_boot_img_hdr+0x60>
		pr_error("Invalid header magic\n");
    96025bd0:	d00000e0 	adrp	x0, 96043000 <common_params>
    96025bd4:	913d8c00 	add	x0, x0, #0xf63
    96025bd8:	97fff2a6 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 0);
    96025bdc:	52800300 	mov	w0, #0x18                  	// #24
	if (known_crc) {
		pr_info("Checking boot.img header crc ... ");
		calculated_crc = tegrabl_utils_crc32(0, (char *)hdr, ANDROID_HEADER_SIZE);
		if (calculated_crc != known_crc) {
			pr_error("Invalid boot.img @ %p (header crc mismatch)\n", hdr);
			err = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 1);
    96025be0:	72a56560 	movk	w0, #0x2b2b, lsl #16
		pr_info("[OK]\n");
	}

fail:
	return err;
}
    96025be4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025be8:	f94013f5 	ldr	x21, [sp, #32]
    96025bec:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96025bf0:	d65f03c0 	ret
	pr_info("[OK]\n");
    96025bf4:	d00000f4 	adrp	x20, 96043000 <common_params>
    96025bf8:	913df294 	add	x20, x20, #0xf7c
    96025bfc:	aa1403e0 	mov	x0, x20
    96025c00:	97fff29c 	bl	96022670 <tegrabl_printf>
	if (hdr->pagesize < sizeof(union tegrabl_bootimg_header)) {
    96025c04:	b9402661 	ldr	w1, [x19, #36]
    96025c08:	711ffc3f 	cmp	w1, #0x7ff
    96025c0c:	540000e8 	b.hi	96025c28 <tegrabl_verify_boot_img_hdr+0x94>  // b.pmore
		pr_error("Page size field (0x%08x) is less than header structure size (0x%08lx)\n",
    96025c10:	d2810002 	mov	x2, #0x800                 	// #2048
    96025c14:	d00000e0 	adrp	x0, 96043000 <common_params>
    96025c18:	913e1400 	add	x0, x0, #0xf85
    96025c1c:	97fff295 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96025c20:	52800040 	mov	w0, #0x2                   	// #2
    96025c24:	17ffffef 	b	96025be0 <tegrabl_verify_boot_img_hdr+0x4c>
	hdr_fields_sum = hdr_size + hdr->kernelsize + hdr->ramdisksize + hdr->secondsize;
    96025c28:	b9401a62 	ldr	w2, [x19, #24]
    96025c2c:	b9401260 	ldr	w0, [x19, #16]
    96025c30:	0b020000 	add	w0, w0, w2
    96025c34:	b9400a62 	ldr	w2, [x19, #8]
    96025c38:	0b020021 	add	w1, w1, w2
    96025c3c:	0b010001 	add	w1, w0, w1
	if (hdr_fields_sum > img_size) {
    96025c40:	6b15003f 	cmp	w1, w21
    96025c44:	540000e9 	b.ls	96025c60 <tegrabl_verify_boot_img_hdr+0xcc>  // b.plast
		pr_error("Header size fields (0x%016lx) is greater than actual binary or buffer size (0x%08x)\n",
    96025c48:	2a1503e2 	mov	w2, w21
    96025c4c:	d00000e0 	adrp	x0, 96043000 <common_params>
    96025c50:	913f3c00 	add	x0, x0, #0xfcf
    96025c54:	97fff287 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96025c58:	52802040 	mov	w0, #0x102                 	// #258
    96025c5c:	17ffffe1 	b	96025be0 <tegrabl_verify_boot_img_hdr+0x4c>
	known_crc = hdr->word[(ANDROID_HEADER_SIZE - CRC32_SIZE) / sizeof(uint32_t)];
    96025c60:	b947fe75 	ldr	w21, [x19, #2044]
	if (known_crc) {
    96025c64:	34000255 	cbz	w21, 96025cac <tegrabl_verify_boot_img_hdr+0x118>
		pr_info("Checking boot.img header crc ... ");
    96025c68:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025c6c:	91009c00 	add	x0, x0, #0x27
    96025c70:	97fff280 	bl	96022670 <tegrabl_printf>
		calculated_crc = tegrabl_utils_crc32(0, (char *)hdr, ANDROID_HEADER_SIZE);
    96025c74:	d2810002 	mov	x2, #0x800                 	// #2048
    96025c78:	aa1303e1 	mov	x1, x19
    96025c7c:	52800000 	mov	w0, #0x0                   	// #0
    96025c80:	94000723 	bl	9602790c <tegrabl_utils_crc32>
		if (calculated_crc != known_crc) {
    96025c84:	6b0002bf 	cmp	w21, w0
    96025c88:	540000e0 	b.eq	96025ca4 <tegrabl_verify_boot_img_hdr+0x110>  // b.none
			pr_error("Invalid boot.img @ %p (header crc mismatch)\n", hdr);
    96025c8c:	aa1303e1 	mov	x1, x19
    96025c90:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025c94:	91013000 	add	x0, x0, #0x4c
    96025c98:	97fff276 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 1);
    96025c9c:	52802300 	mov	w0, #0x118                 	// #280
    96025ca0:	17ffffd0 	b	96025be0 <tegrabl_verify_boot_img_hdr+0x4c>
		pr_info("[OK]\n");
    96025ca4:	aa1403e0 	mov	x0, x20
    96025ca8:	97fff272 	bl	96022670 <tegrabl_printf>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96025cac:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    96025cb0:	17ffffcd 	b	96025be4 <tegrabl_verify_boot_img_hdr+0x50>

0000000096025cb4 <tegrabl_load_from_partition.isra.0>:
	},
#endif
};

static tegrabl_error_t
tegrabl_load_from_partition(struct tegrabl_kernel_bin *kernel,
    96025cb4:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!

	TEGRABL_UNUSED(kernel_dtbo);
	TEGRABL_UNUSED(boot_to_recovery);

#if defined(CONFIG_ENABLE_L4T_RECOVERY)
	img_dtb_fdt = boot_to_recovery ? &img_dtb_fdt_table[1] : &img_dtb_fdt_table[0];
    96025cb8:	72001cbf 	tst	w5, #0xff
tegrabl_load_from_partition(struct tegrabl_kernel_bin *kernel,
    96025cbc:	910003fd 	mov	x29, sp
    96025cc0:	a90153f3 	stp	x19, x20, [sp, #16]
    96025cc4:	b0000133 	adrp	x19, 9604a000 <s_qspi_info+0x20>
    96025cc8:	a9025bf5 	stp	x21, x22, [sp, #32]
    96025ccc:	aa0203f4 	mov	x20, x2
    96025cd0:	f9001bf7 	str	x23, [sp, #48]
	img_dtb_fdt = boot_to_recovery ? &img_dtb_fdt_table[1] : &img_dtb_fdt_table[0];
    96025cd4:	91364262 	add	x2, x19, #0xd90
    96025cd8:	91008053 	add	x19, x2, #0x20
tegrabl_load_from_partition(struct tegrabl_kernel_bin *kernel,
    96025cdc:	aa0103f5 	mov	x21, x1
	img_dtb_fdt = boot_to_recovery ? &img_dtb_fdt_table[1] : &img_dtb_fdt_table[0];
    96025ce0:	9a821273 	csel	x19, x19, x2, ne  // ne = any
#else
	img_dtb_fdt = &img_dtb_fdt_table[0];
#endif

	/* Load boot image from memory */
	if (!kernel->load_from_storage) {
    96025ce4:	72001c1f 	tst	w0, #0xff
    96025ce8:	540004a1 	b.ne	96025d7c <tegrabl_load_from_partition.isra.0+0xc8>  // b.any
    96025cec:	aa0303f6 	mov	x22, x3
		pr_info("Loading kernel from memory ...\n");
    96025cf0:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025cf4:	2a0403f7 	mov	w23, w4
    96025cf8:	91048400 	add	x0, x0, #0x121
    96025cfc:	97fff25d 	bl	96022670 <tegrabl_printf>
		if (!data) {
    96025d00:	b5000176 	cbnz	x22, 96025d2c <tegrabl_load_from_partition.isra.0+0x78>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
			pr_error("Found no kernel in memory\n");
    96025d04:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025d08:	91051000 	add	x0, x0, #0x144
    96025d0c:	97fff259 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96025d10:	52800040 	mov	w0, #0x2                   	// #2
    96025d14:	72a56560 	movk	w0, #0x2b2b, lsl #16
		*dtb_load_addr = NULL;
#endif /* CONFIG_DT_SUPPORT */

fail:
	return err;
}
    96025d18:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025d1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96025d20:	f9401bf7 	ldr	x23, [sp, #48]
    96025d24:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96025d28:	d65f03c0 	ret
		*boot_img_load_addr = data;
    96025d2c:	f90002b6 	str	x22, [x21]
		boot_img_size = data_size;
    96025d30:	b9004fb7 	str	w23, [x29, #76]
	err = tegrabl_dt_get_fdt_handle(img_dtb_fdt->preload_dtb_bin_type, dtb_load_addr);
    96025d34:	b9401a60 	ldr	w0, [x19, #24]
    96025d38:	aa1403e1 	mov	x1, x20
    96025d3c:	94002c47 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if ((err != TEGRABL_NO_ERROR) || (*dtb_load_addr == NULL)) {
    96025d40:	35000060 	cbnz	w0, 96025d4c <tegrabl_load_from_partition.isra.0+0x98>
    96025d44:	f9400280 	ldr	x0, [x20]
    96025d48:	b50003a0 	cbnz	x0, 96025dbc <tegrabl_load_from_partition.isra.0+0x108>
		err = tegrabl_load_binary(img_dtb_fdt->dtb_bin_type,
    96025d4c:	b9401660 	ldr	w0, [x19, #20]
    96025d50:	d2800002 	mov	x2, #0x0                   	// #0
    96025d54:	aa1403e1 	mov	x1, x20
    96025d58:	94001afb 	bl	9602c944 <tegrabl_load_binary>
		if (err != TEGRABL_NO_ERROR) {
    96025d5c:	35fffde0 	cbnz	w0, 96025d18 <tegrabl_load_from_partition.isra.0+0x64>
	err = tegrabl_validate_binary(img_dtb_fdt->dtb_bin_type, img_dtb_fdt->dtb_name_str, DTB_MAX_SIZE,
    96025d60:	b9401660 	ldr	w0, [x19, #20]
    96025d64:	d2800004 	mov	x4, #0x0                   	// #0
    96025d68:	f9400661 	ldr	x1, [x19, #8]
    96025d6c:	52a00202 	mov	w2, #0x100000              	// #1048576
    96025d70:	f9400283 	ldr	x3, [x20]
    96025d74:	97ffff62 	bl	96025afc <tegrabl_validate_binary>
    96025d78:	17ffffe8 	b	96025d18 <tegrabl_load_from_partition.isra.0+0x64>
	err = tegrabl_load_binary(img_dtb_fdt->img_bin_type, boot_img_load_addr,
    96025d7c:	b9401260 	ldr	w0, [x19, #16]
    96025d80:	910133a2 	add	x2, x29, #0x4c
    96025d84:	94001af0 	bl	9602c944 <tegrabl_load_binary>
	if (err != TEGRABL_NO_ERROR) {
    96025d88:	35fffc80 	cbnz	w0, 96025d18 <tegrabl_load_from_partition.isra.0+0x64>
	err = tegrabl_validate_binary(img_dtb_fdt->img_bin_type, img_dtb_fdt->img_name_str, BOOT_IMAGE_MAX_SIZE,
    96025d8c:	b9401260 	ldr	w0, [x19, #16]
    96025d90:	910133a4 	add	x4, x29, #0x4c
    96025d94:	f9400261 	ldr	x1, [x19]
    96025d98:	52a08002 	mov	w2, #0x4000000             	// #67108864
    96025d9c:	f94002a3 	ldr	x3, [x21]
    96025da0:	97ffff57 	bl	96025afc <tegrabl_validate_binary>
	if (err != TEGRABL_NO_ERROR) {
    96025da4:	35fffba0 	cbnz	w0, 96025d18 <tegrabl_load_from_partition.isra.0+0x64>
	err = tegrabl_verify_boot_img_hdr(*boot_img_load_addr, boot_img_size);
    96025da8:	b9404fa1 	ldr	w1, [x29, #76]
    96025dac:	f94002a0 	ldr	x0, [x21]
    96025db0:	97ffff79 	bl	96025b94 <tegrabl_verify_boot_img_hdr>
	if (err != TEGRABL_NO_ERROR) {
    96025db4:	34fffc00 	cbz	w0, 96025d34 <tegrabl_load_from_partition.isra.0+0x80>
    96025db8:	17ffffd8 	b	96025d18 <tegrabl_load_from_partition.isra.0+0x64>
		pr_info("kernel-dtb is already loaded\n");
    96025dbc:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025dc0:	91058800 	add	x0, x0, #0x162
    96025dc4:	97fff22b 	bl	96022670 <tegrabl_printf>
    96025dc8:	17ffffe6 	b	96025d60 <tegrabl_load_from_partition.isra.0+0xac>

0000000096025dcc <fixed_boot_load_kernel_and_dtb>:
											   void **ramdisk_load_addr,
											   void *data,
											   uint32_t data_size,
											   uint32_t *kernel_size,
											   uint64_t *ramdisk_size)
{
    96025dcc:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96025dd0:	910003fd 	mov	x29, sp
    96025dd4:	a90153f3 	stp	x19, x20, [sp, #16]
    96025dd8:	aa0103f3 	mov	x19, x1
    96025ddc:	a9025bf5 	stp	x21, x22, [sp, #32]
    96025de0:	aa0203f4 	mov	x20, x2
    96025de4:	a90363f7 	stp	x23, x24, [sp, #48]
    96025de8:	aa0003f5 	mov	x21, x0
    96025dec:	aa0503f6 	mov	x22, x5
    96025df0:	2a0603f7 	mov	w23, w6
#if defined(CONFIG_ENABLE_L4T_RECOVERY)
	struct tegrabl_kernel_bootctrl bootctrl;
	bool boot_to_recovery = false;
#endif

	pr_info("########## Fixed storage boot ##########\n");
    96025df4:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025df8:	9101f000 	add	x0, x0, #0x7c
    96025dfc:	97fff21d 	bl	96022670 <tegrabl_printf>

	if ((boot_img_load_addr == NULL) || (dtb_load_addr == NULL)) {
    96025e00:	f100027f 	cmp	x19, #0x0
    96025e04:	fa401a84 	ccmp	x20, #0x0, #0x4, ne  // ne = any
    96025e08:	54000181 	b.ne	96025e38 <fixed_boot_load_kernel_and_dtb+0x6c>  // b.any
		pr_error("Invalid args passed\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96025e0c:	52802053 	mov	w19, #0x102                 	// #258
		pr_error("Invalid args passed\n");
    96025e10:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96025e14:	72a56573 	movk	w19, #0x2b2b, lsl #16
		pr_error("Invalid args passed\n");
    96025e18:	9102a400 	add	x0, x0, #0xa9
    96025e1c:	97fff215 	bl	96022670 <tegrabl_printf>
		tegrabl_fm_close(fm_handle);
	}
#endif

	return err;
}
    96025e20:	2a1303e0 	mov	w0, w19
    96025e24:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025e28:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96025e2c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96025e30:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96025e34:	d65f03c0 	ret
	tegrabl_get_kernel_bootctrl(&bootctrl);
    96025e38:	910123a0 	add	x0, x29, #0x48
    96025e3c:	94000028 	bl	96025edc <tegrabl_get_kernel_bootctrl>
	if (tegrabl_a_b_rootfs_is_all_unbootable(NULL)) {
    96025e40:	d2800000 	mov	x0, #0x0                   	// #0
	if (bootctrl.mode == BOOT_TO_RECOVERY_MODE) {
    96025e44:	b9404fb8 	ldr	w24, [x29, #76]
	if (tegrabl_a_b_rootfs_is_all_unbootable(NULL)) {
    96025e48:	94001d7b 	bl	9602d434 <tegrabl_a_b_rootfs_is_all_unbootable>
    96025e4c:	72001c1f 	tst	w0, #0xff
    96025e50:	54000061 	b.ne	96025e5c <fixed_boot_load_kernel_and_dtb+0x90>  // b.any
	if (boot_to_recovery) {
    96025e54:	7100071f 	cmp	w24, #0x1
    96025e58:	54000201 	b.ne	96025e98 <fixed_boot_load_kernel_and_dtb+0xcc>  // b.any
		err = tegrabl_load_from_partition(kernel, boot_img_load_addr,
    96025e5c:	394012a0 	ldrb	w0, [x21, #4]
    96025e60:	aa1303e1 	mov	x1, x19
    96025e64:	52800025 	mov	w5, #0x1                   	// #1
    96025e68:	2a1703e4 	mov	w4, w23
    96025e6c:	aa1603e3 	mov	x3, x22
    96025e70:	aa1403e2 	mov	x2, x20
    96025e74:	97ffff90 	bl	96025cb4 <tegrabl_load_from_partition.isra.0>
    96025e78:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96025e7c:	34fffd20 	cbz	w0, 96025e20 <fixed_boot_load_kernel_and_dtb+0x54>
			pr_error("Load recovery image failed, err: %u\n", err);
    96025e80:	2a0003e1 	mov	w1, w0
    96025e84:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025e88:	91030400 	add	x0, x0, #0xc1
    96025e8c:	97fff1f9 	bl	96022670 <tegrabl_printf>
		tegrabl_reset();
    96025e90:	97ffdd36 	bl	9601d368 <tegrabl_reset>
	return err;
    96025e94:	17ffffe3 	b	96025e20 <fixed_boot_load_kernel_and_dtb+0x54>
	err = tegrabl_load_from_partition(kernel, boot_img_load_addr,
    96025e98:	394012a0 	ldrb	w0, [x21, #4]
    96025e9c:	aa1303e1 	mov	x1, x19
    96025ea0:	52800005 	mov	w5, #0x0                   	// #0
    96025ea4:	2a1703e4 	mov	w4, w23
    96025ea8:	aa1603e3 	mov	x3, x22
    96025eac:	aa1403e2 	mov	x2, x20
    96025eb0:	97ffff81 	bl	96025cb4 <tegrabl_load_from_partition.isra.0>
    96025eb4:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96025eb8:	34fffb40 	cbz	w0, 96025e20 <fixed_boot_load_kernel_and_dtb+0x54>
		pr_error("Storage boot failed, err: %u\n", err);
    96025ebc:	2a0003e1 	mov	w1, w0
    96025ec0:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025ec4:	9103a400 	add	x0, x0, #0xe9
    96025ec8:	97fff1ea 	bl	96022670 <tegrabl_printf>
		pr_error("A/B loader failure\n");
    96025ecc:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025ed0:	91042800 	add	x0, x0, #0x10a
    96025ed4:	97fff1e7 	bl	96022670 <tegrabl_printf>
    96025ed8:	17ffffee 	b	96025e90 <fixed_boot_load_kernel_and_dtb+0xc4>

0000000096025edc <tegrabl_get_kernel_bootctrl>:
	.version = KERNEL_BOOTCTRL_VERSION,
	.crc32 = 0x1cd6a971,
};

void tegrabl_get_kernel_bootctrl(struct tegrabl_kernel_bootctrl *control)
{
    96025edc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96025ee0:	910003fd 	mov	x29, sp
    96025ee4:	a90153f3 	stp	x19, x20, [sp, #16]
	void *kernel_bootctrl_load_addr;
	uint32_t binary_length;
	uint32_t crc32;
	uint32_t bootctrl_exist;

	if (!control) {
    96025ee8:	b50000e0 	cbnz	x0, 96025f04 <tegrabl_get_kernel_bootctrl+0x28>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		pr_error("Invalid passed-in control\n");
    96025eec:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025ef0:	9106ec00 	add	x0, x0, #0x1bb
    96025ef4:	97fff1df 	bl	96022670 <tegrabl_printf>

bootctrl_done:
	pr_debug("%s: version=%u, mode=%u, command=%u\n",
		__func__, control->version, control->mode,
		control->command);
}
    96025ef8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96025efc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96025f00:	d65f03c0 	ret
    96025f04:	aa0003f3 	mov	x19, x0
	err = tegrabl_load_binary_copy(TEGRABL_BINARY_KERNEL_BOOTCTRL,
    96025f08:	52800003 	mov	w3, #0x0                   	// #0
    96025f0c:	910093a2 	add	x2, x29, #0x24
    96025f10:	9100a3a1 	add	x1, x29, #0x28
    96025f14:	528003c0 	mov	w0, #0x1e                  	// #30
    96025f18:	94001a1c 	bl	9602c788 <tegrabl_load_binary_copy>
	if (err != TEGRABL_NO_ERROR) {
    96025f1c:	34000380 	cbz	w0, 96025f8c <tegrabl_get_kernel_bootctrl+0xb0>
		pr_warn("%s: failed to read primary bootctrl data\n",
    96025f20:	f00000f4 	adrp	x20, 96044000 <__func__.6231+0x4f3>
    96025f24:	91060e94 	add	x20, x20, #0x183
    96025f28:	aa1403e1 	mov	x1, x20
    96025f2c:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025f30:	91076400 	add	x0, x0, #0x1d9
    96025f34:	97fff1cf 	bl	96022670 <tegrabl_printf>
		err = tegrabl_load_binary_copy(TEGRABL_BINARY_KERNEL_BOOTCTRL,
    96025f38:	52800023 	mov	w3, #0x1                   	// #1
    96025f3c:	910093a2 	add	x2, x29, #0x24
    96025f40:	9100a3a1 	add	x1, x29, #0x28
    96025f44:	528003c0 	mov	w0, #0x1e                  	// #30
    96025f48:	94001a10 	bl	9602c788 <tegrabl_load_binary_copy>
		if (err != TEGRABL_NO_ERROR) {
    96025f4c:	34000200 	cbz	w0, 96025f8c <tegrabl_get_kernel_bootctrl+0xb0>
			pr_warn("%s: failed to read recovery bootctrl data\n",
    96025f50:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025f54:	aa1403e1 	mov	x1, x20
    96025f58:	91081800 	add	x0, x0, #0x206
    96025f5c:	97fff1c5 	bl	96022670 <tegrabl_printf>
	pr_warn("%s: use default dummy boot control data\n", __func__);
    96025f60:	f00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96025f64:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025f68:	91060c21 	add	x1, x1, #0x183
    96025f6c:	910bac00 	add	x0, x0, #0x2eb
    96025f70:	97fff1c0 	bl	96022670 <tegrabl_printf>
	memcpy(control, &dummy_kernel_bootctrl, sizeof(struct tegrabl_kernel_bootctrl));
    96025f74:	d2800282 	mov	x2, #0x14                  	// #20
    96025f78:	b0000121 	adrp	x1, 9604a000 <s_qspi_info+0x20>
    96025f7c:	aa1303e0 	mov	x0, x19
    96025f80:	91374021 	add	x1, x1, #0xdd0
    96025f84:	94000fe8 	bl	96029f24 <memcpy>
    96025f88:	17ffffdc 	b	96025ef8 <tegrabl_get_kernel_bootctrl+0x1c>
		memcpy(control,
    96025f8c:	f94017a1 	ldr	x1, [x29, #40]
    96025f90:	d2800282 	mov	x2, #0x14                  	// #20
    96025f94:	aa1303e0 	mov	x0, x19
    96025f98:	94000fe3 	bl	96029f24 <memcpy>
		if (control->magic_number != KERNEL_BOOTCTRL_MAGIC_NUMBER) {
    96025f9c:	b9400262 	ldr	w2, [x19]
    96025fa0:	52886840 	mov	w0, #0x4342                	// #17218
    96025fa4:	72a98a80 	movk	w0, #0x4c54, lsl #16
    96025fa8:	6b00005f 	cmp	w2, w0
    96025fac:	540000e0 	b.eq	96025fc8 <tegrabl_get_kernel_bootctrl+0xec>  // b.none
			pr_warn("%s: magic number(0x%08x) is invalid\n",
    96025fb0:	f00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96025fb4:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025fb8:	91060c21 	add	x1, x1, #0x183
    96025fbc:	9108d000 	add	x0, x0, #0x234
					pr_warn("%s: recovery mode command(%u) is invalid\n",
    96025fc0:	97fff1ac 	bl	96022670 <tegrabl_printf>
    96025fc4:	17ffffe7 	b	96025f60 <tegrabl_get_kernel_bootctrl+0x84>
			crc32 = tegrabl_utils_crc32(0, (char *)control,
    96025fc8:	d2800202 	mov	x2, #0x10                  	// #16
    96025fcc:	aa1303e1 	mov	x1, x19
    96025fd0:	52800000 	mov	w0, #0x0                   	// #0
    96025fd4:	9400064e 	bl	9602790c <tegrabl_utils_crc32>
			if (crc32 != control->crc32) {
    96025fd8:	b9401263 	ldr	w3, [x19, #16]
    96025fdc:	6b00007f 	cmp	w3, w0
    96025fe0:	54000100 	b.eq	96026000 <tegrabl_get_kernel_bootctrl+0x124>  // b.none
				pr_warn("%s: crc32(0x%08x) != (0x%08x)\n",
    96025fe4:	2a0003e2 	mov	w2, w0
    96025fe8:	f00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96025fec:	f00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96025ff0:	91060c21 	add	x1, x1, #0x183
    96025ff4:	91097000 	add	x0, x0, #0x25c
    96025ff8:	97fff19e 	bl	96022670 <tegrabl_printf>
    96025ffc:	17ffffd9 	b	96025f60 <tegrabl_get_kernel_bootctrl+0x84>
				if (control->version != KERNEL_BOOTCTRL_VERSION) {
    96026000:	b9400e62 	ldr	w2, [x19, #12]
    96026004:	7100045f 	cmp	w2, #0x1
    96026008:	540000c0 	b.eq	96026020 <tegrabl_get_kernel_bootctrl+0x144>  // b.none
					pr_warn("%s: version(%u) is invalid\n",
    9602600c:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026010:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026014:	91060c21 	add	x1, x1, #0x183
    96026018:	9109f800 	add	x0, x0, #0x27e
    9602601c:	17ffffe9 	b	96025fc0 <tegrabl_get_kernel_bootctrl+0xe4>
				} else if (control->mode > BOOT_MODE_MAX) {
    96026020:	b9400662 	ldr	w2, [x19, #4]
    96026024:	7100045f 	cmp	w2, #0x1
    96026028:	540000c9 	b.ls	96026040 <tegrabl_get_kernel_bootctrl+0x164>  // b.plast
					pr_warn("%s: boot mode(%u) is invalid\n",
    9602602c:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026030:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026034:	91060c21 	add	x1, x1, #0x183
    96026038:	910a7400 	add	x0, x0, #0x29d
    9602603c:	17ffffe1 	b	96025fc0 <tegrabl_get_kernel_bootctrl+0xe4>
				} else if (control->command > RECOVERY_CMD_MAX) {
    96026040:	b9400a62 	ldr	w2, [x19, #8]
    96026044:	7100085f 	cmp	w2, #0x2
    96026048:	54fff589 	b.ls	96025ef8 <tegrabl_get_kernel_bootctrl+0x1c>  // b.plast
					pr_warn("%s: recovery mode command(%u) is invalid\n",
    9602604c:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026050:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026054:	91060c21 	add	x1, x1, #0x183
    96026058:	910af800 	add	x0, x0, #0x2be
    9602605c:	17ffffd9 	b	96025fc0 <tegrabl_get_kernel_bootctrl+0xe4>

0000000096026060 <tegrabl_get_ramdisk_info>:
#endif

void tegrabl_get_ramdisk_info(uint64_t *start, uint64_t *size)
{
	if (start) {
    96026060:	b4000080 	cbz	x0, 96026070 <tegrabl_get_ramdisk_info+0x10>
		*start = ramdisk_load;
    96026064:	90000282 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96026068:	f9450042 	ldr	x2, [x2, #2560]
    9602606c:	f9000002 	str	x2, [x0]
	}
	if (size) {
    96026070:	b4000081 	cbz	x1, 96026080 <tegrabl_get_ramdisk_info+0x20>
		*size = ramdisk_size;
    96026074:	90000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96026078:	f9450400 	ldr	x0, [x0, #2568]
    9602607c:	f9000020 	str	x0, [x1]
	}
}
    96026080:	d65f03c0 	ret

0000000096026084 <tegrabl_get_bootimg_cmdline>:

char *tegrabl_get_bootimg_cmdline(void)
{
	return bootimg_cmdline;
}
    96026084:	90000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96026088:	f944fc00 	ldr	x0, [x0, #2552]
    9602608c:	d65f03c0 	ret

0000000096026090 <tegrabl_load_kernel_and_dtb>:
											void **kernel_entry_point,
											void **kernel_dtb,
											struct tegrabl_kernel_load_callbacks *callbacks,
											void *data,
											uint32_t data_size)
{
    96026090:	d10243ff 	sub	sp, sp, #0x90
	void *ramdisk_load_addr = NULL;
	uint32_t kernel_size = 0;

	pr_trace("%s(): %u\n", __func__, __LINE__);

	if (!kernel_entry_point || !kernel_dtb) {
    96026094:	f100003f 	cmp	x1, #0x0
    96026098:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
{
    9602609c:	a9017bfd 	stp	x29, x30, [sp, #16]
    960260a0:	910043fd 	add	x29, sp, #0x10
    960260a4:	a90253f3 	stp	x19, x20, [sp, #32]
    960260a8:	a9035bf5 	stp	x21, x22, [sp, #48]
    960260ac:	a90463f7 	stp	x23, x24, [sp, #64]
    960260b0:	a9056bf9 	stp	x25, x26, [sp, #80]
	uint32_t kernel_size = 0;
    960260b4:	b9005bbf 	str	wzr, [x29, #88]
	void *boot_img_load_addr = NULL;
    960260b8:	a9067fbf 	stp	xzr, xzr, [x29, #96]
	void *ramdisk_load_addr = NULL;
    960260bc:	f9003bbf 	str	xzr, [x29, #112]
	if (!kernel_entry_point || !kernel_dtb) {
    960260c0:	54000260 	b.eq	9602610c <tegrabl_load_kernel_and_dtb+0x7c>  // b.none
    960260c4:	aa0103f7 	mov	x23, x1
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	err = fixed_boot_load_kernel_and_dtb(kernel,
    960260c8:	90000296 	adrp	x22, 96076000 <free_dram_block+0x38e8>
    960260cc:	912822c1 	add	x1, x22, #0xa08
    960260d0:	f90003e1 	str	x1, [sp]
    960260d4:	aa0303f3 	mov	x19, x3
    960260d8:	2a0503e6 	mov	w6, w5
    960260dc:	aa0203f4 	mov	x20, x2
    960260e0:	aa0403e5 	mov	x5, x4
    960260e4:	910163a7 	add	x7, x29, #0x58
    960260e8:	9101c3a4 	add	x4, x29, #0x70
    960260ec:	910183a3 	add	x3, x29, #0x60
    960260f0:	9101a3a1 	add	x1, x29, #0x68
    960260f4:	97ffff36 	bl	96025dcc <fixed_boot_load_kernel_and_dtb>
										 &ramdisk_load_addr,
										 data,
										 data_size,
										 &kernel_size,
										 &ramdisk_size);
	if (err != TEGRABL_NO_ERROR) {
    960260f8:	34000220 	cbz	w0, 9602613c <tegrabl_load_kernel_and_dtb+0xac>
		pr_error("Error (%u) builtin kernel/dtb load failed\n", err);
    960260fc:	2a0003e1 	mov	w1, w0
    96026100:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026104:	910c5c00 	add	x0, x0, #0x317
	}

	if (HAS_BOOT_IMG_HDR((union tegrabl_bootimg_header *)boot_img_load_addr)) {
		err = extract_ramdisk(boot_img_load_addr);
		if (err != TEGRABL_NO_ERROR) {
			pr_error("Error %u loading the ramdisk\n", err);
    96026108:	97fff15a 	bl	96022670 <tegrabl_printf>
	pr_info("%s: Done\n", __func__);

fail:
#if defined(CONFIG_ENABLE_SECURE_BOOT)
	pr_debug("%s: completing auth ...\n", __func__);
	err = tegrabl_auth_complete();
    9602610c:	97ffeb6c 	bl	96020ebc <tegrabl_auth_complete>
    96026110:	2a0003f3 	mov	w19, w0
#endif
	tegrabl_free(kernel_dtbo);
    96026114:	f94033a0 	ldr	x0, [x29, #96]
    96026118:	94000268 	bl	96026ab8 <tegrabl_free>

	return err;
}
    9602611c:	2a1303e0 	mov	w0, w19
    96026120:	a9417bfd 	ldp	x29, x30, [sp, #16]
    96026124:	a94253f3 	ldp	x19, x20, [sp, #32]
    96026128:	a9435bf5 	ldp	x21, x22, [sp, #48]
    9602612c:	a94463f7 	ldp	x23, x24, [sp, #64]
    96026130:	a9456bf9 	ldp	x25, x26, [sp, #80]
    96026134:	910243ff 	add	sp, sp, #0x90
    96026138:	d65f03c0 	ret
	pr_info("Kernel hdr @%p\n", boot_img_load_addr);
    9602613c:	f94037a1 	ldr	x1, [x29, #104]
    96026140:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026144:	910d1400 	add	x0, x0, #0x345
    96026148:	97fff14a 	bl	96022670 <tegrabl_printf>
	pr_info("Kernel dtb @%p\n", *kernel_dtb);
    9602614c:	f9400281 	ldr	x1, [x20]
    96026150:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026154:	910d6000 	add	x0, x0, #0x358
    96026158:	97fff146 	bl	96022670 <tegrabl_printf>
	if (callbacks != NULL && callbacks->verify_boot != NULL) {
    9602615c:	b40000f3 	cbz	x19, 96026178 <tegrabl_load_kernel_and_dtb+0xe8>
    96026160:	f9400263 	ldr	x3, [x19]
    96026164:	f94037a0 	ldr	x0, [x29, #104]
    96026168:	b4000083 	cbz	x3, 96026178 <tegrabl_load_kernel_and_dtb+0xe8>
		callbacks->verify_boot(boot_img_load_addr, *kernel_dtb, kernel_dtbo);
    9602616c:	f9400281 	ldr	x1, [x20]
    96026170:	f94033a2 	ldr	x2, [x29, #96]
    96026174:	d63f0060 	blr	x3
	err = extract_kernel(boot_img_load_addr, kernel_size, kernel_entry_point);
    96026178:	f94037ba 	ldr	x26, [x29, #104]
	if (HAS_BOOT_IMG_HDR(hdr)) {
    9602617c:	b00000f8 	adrp	x24, 96043000 <common_params>
	err = extract_kernel(boot_img_load_addr, kernel_size, kernel_entry_point);
    96026180:	b9405bb5 	ldr	w21, [x29, #88]
	uint32_t decomp_size = 0; /* kernel size after decompressing */
    96026184:	b9005fbf 	str	wzr, [x29, #92]
    96026188:	aa1a03f3 	mov	x19, x26
	decompressor *decomp = NULL;
    9602618c:	f9003fbf 	str	xzr, [x29, #120]
	uint64_t kernel_text_offset = tegrabl_get_kernel_text_offset();
    96026190:	97fffe2f 	bl	96025a4c <tegrabl_get_kernel_text_offset>
	if (HAS_BOOT_IMG_HDR(hdr)) {
    96026194:	d2800102 	mov	x2, #0x8                   	// #8
	uint64_t kernel_text_offset = tegrabl_get_kernel_text_offset();
    96026198:	aa0003f9 	mov	x25, x0
	if (HAS_BOOT_IMG_HDR(hdr)) {
    9602619c:	913d6b01 	add	x1, x24, #0xf5a
    960261a0:	aa1a03e0 	mov	x0, x26
    960261a4:	94000fb3 	bl	9602a070 <memcmp>
    960261a8:	35000240 	cbnz	w0, 960261f0 <tegrabl_load_kernel_and_dtb+0x160>
		payload_addr = (uintptr_t)hdr + hdr->pagesize;
    960261ac:	b9402740 	ldr	w0, [x26, #36]
		kernel_size = hdr->kernelsize;
    960261b0:	b9400b55 	ldr	w21, [x26, #8]
		payload_addr = (uintptr_t)hdr + hdr->pagesize;
    960261b4:	8b000353 	add	x19, x26, x0
	if (kernel_size > MAX_KERNEL_IMAGE_SIZE) {
    960261b8:	52a2801a 	mov	w26, #0x14000000            	// #335544320
    960261bc:	6b1a02bf 	cmp	w21, w26
    960261c0:	54000269 	b.ls	9602620c <tegrabl_load_kernel_and_dtb+0x17c>  // b.plast
		err = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE, 0);
    960261c4:	528000f3 	mov	w19, #0x7                   	// #7
		pr_error("Kernel size (0x%08x) is greater than allocated size (0x%08x)\n",
    960261c8:	2a1a03e2 	mov	w2, w26
		err = TEGRABL_ERROR(TEGRABL_ERR_TOO_LARGE, 0);
    960261cc:	72a56573 	movk	w19, #0x2b2b, lsl #16
		pr_error("Kernel size (0x%08x) is greater than allocated size (0x%08x)\n",
    960261d0:	2a1503e1 	mov	w1, w21
    960261d4:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960261d8:	910dac00 	add	x0, x0, #0x36b
    960261dc:	97fff125 	bl	96022670 <tegrabl_printf>
		pr_error("Error %u loading the kernel\n", err);
    960261e0:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960261e4:	2a1303e1 	mov	w1, w19
    960261e8:	91111c00 	add	x0, x0, #0x447
    960261ec:	17ffffc7 	b	96026108 <tegrabl_load_kernel_and_dtb+0x78>
		if (ahdr->magic == ARM64_MAGIC) {
    960261f0:	b9403b41 	ldr	w1, [x26, #56]
    960261f4:	528a4820 	mov	w0, #0x5241                	// #21057
    960261f8:	72ac89a0 	movk	w0, #0x644d, lsl #16
    960261fc:	6b00003f 	cmp	w1, w0
    96026200:	54fffdc1 	b.ne	960261b8 <tegrabl_load_kernel_and_dtb+0x128>  // b.any
			kernel_text_offset = ahdr->text_offset;
    96026204:	f9400759 	ldr	x25, [x26, #8]
    96026208:	17ffffec 	b	960261b8 <tegrabl_load_kernel_and_dtb+0x128>
	*kernel_load_addr = (void *)(tegrabl_get_kernel_load_addr() + kernel_text_offset);
    9602620c:	97fffdf1 	bl	960259d0 <tegrabl_get_kernel_load_addr>
    96026210:	8b190000 	add	x0, x0, x25
    96026214:	f90002e0 	str	x0, [x23]
	is_compressed = is_compressed_content((uint8_t *)payload_addr, &decomp);
    96026218:	9101e3a1 	add	x1, x29, #0x78
    9602621c:	aa1303e0 	mov	x0, x19
    96026220:	94001ff6 	bl	9602e1f8 <is_compressed_content>
	if (!is_compressed) {
    96026224:	72001c1f 	tst	w0, #0xff
		pr_info("Copying kernel image (%u bytes) from %p to %p ... ",
    96026228:	aa1303e2 	mov	x2, x19
    9602622c:	2a1503e1 	mov	w1, w21
    96026230:	f94002e3 	ldr	x3, [x23]
	if (!is_compressed) {
    96026234:	54000381 	b.ne	960262a4 <tegrabl_load_kernel_and_dtb+0x214>  // b.any
		pr_info("Copying kernel image (%u bytes) from %p to %p ... ",
    96026238:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602623c:	910eb000 	add	x0, x0, #0x3ac
    96026240:	97fff10c 	bl	96022670 <tegrabl_printf>
		memmove(*kernel_load_addr, (char *)payload_addr, kernel_size);
    96026244:	f94002e0 	ldr	x0, [x23]
    96026248:	2a1503e2 	mov	w2, w21
    9602624c:	aa1303e1 	mov	x1, x19
    96026250:	94000fb4 	bl	9602a120 <memmove>
	pr_info("Done\n");
    96026254:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026258:	9110f800 	add	x0, x0, #0x43e
    9602625c:	97fff105 	bl	96022670 <tegrabl_printf>
	if (HAS_BOOT_IMG_HDR((union tegrabl_bootimg_header *)boot_img_load_addr)) {
    96026260:	f94037a0 	ldr	x0, [x29, #104]
    96026264:	d2800102 	mov	x2, #0x8                   	// #8
    96026268:	913d6b01 	add	x1, x24, #0xf5a
    9602626c:	94000f81 	bl	9602a070 <memcmp>
    96026270:	340003c0 	cbz	w0, 960262e8 <tegrabl_load_kernel_and_dtb+0x258>
	err = tegrabl_dt_create_space(*kernel_dtb, FDT_SIZE_BL_DT_NODES, DTB_MAX_SIZE);
    96026274:	f9400280 	ldr	x0, [x20]
    96026278:	52a00202 	mov	w2, #0x100000              	// #1048576
    9602627c:	5283f401 	mov	w1, #0x1fa0                	// #8096
    96026280:	94002cef 	bl	9603163c <tegrabl_dt_create_space>
	if (err != TEGRABL_NO_ERROR) {
    96026284:	34000840 	cbz	w0, 9602638c <tegrabl_load_kernel_and_dtb+0x2fc>
    96026288:	12005c00 	and	w0, w0, #0xffffff
    9602628c:	52a56001 	mov	w1, #0x2b000000            	// #721420288
    96026290:	2a010000 	orr	w0, w0, w1
		pr_error("Error %u loading the kernel DTB\n", err);
    96026294:	2a0003e1 	mov	w1, w0
    96026298:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602629c:	9113e800 	add	x0, x0, #0x4fa
    960262a0:	17ffff9a 	b	96026108 <tegrabl_load_kernel_and_dtb+0x78>
		pr_info("Decompressing kernel image (%u bytes) from %p to %p ... ",
    960262a4:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960262a8:	910f8800 	add	x0, x0, #0x3e2
    960262ac:	97fff0f1 	bl	96022670 <tegrabl_printf>
		decomp_size = MAX_KERNEL_IMAGE_SIZE;
    960262b0:	910203a4 	add	x4, x29, #0x80
		err = do_decompress(decomp, (uint8_t *)payload_addr, kernel_size, *kernel_load_addr, &decomp_size);
    960262b4:	f94002e3 	ldr	x3, [x23]
    960262b8:	f9403fa0 	ldr	x0, [x29, #120]
    960262bc:	aa1303e1 	mov	x1, x19
    960262c0:	2a1503e2 	mov	w2, w21
		decomp_size = MAX_KERNEL_IMAGE_SIZE;
    960262c4:	b81dcc9a 	str	w26, [x4, #-36]!
		err = do_decompress(decomp, (uint8_t *)payload_addr, kernel_size, *kernel_load_addr, &decomp_size);
    960262c8:	94001ff4 	bl	9602e298 <do_decompress>
    960262cc:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    960262d0:	34fffc20 	cbz	w0, 96026254 <tegrabl_load_kernel_and_dtb+0x1c4>
			pr_error("\nError %d decompress kernel\n", err);
    960262d4:	2a0003e1 	mov	w1, w0
    960262d8:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960262dc:	91107800 	add	x0, x0, #0x41e
    960262e0:	97fff0e4 	bl	96022670 <tegrabl_printf>
    960262e4:	17ffffbf 	b	960261e0 <tegrabl_load_kernel_and_dtb+0x150>
		err = extract_ramdisk(boot_img_load_addr);
    960262e8:	f94037b5 	ldr	x21, [x29, #104]
	ramdisk_load = tegrabl_get_ramdisk_load_addr();
    960262ec:	90000297 	adrp	x23, 96076000 <free_dram_block+0x38e8>
    960262f0:	97fffdca 	bl	96025a18 <tegrabl_get_ramdisk_load_addr>
    960262f4:	f90502e0 	str	x0, [x23, #2560]
	if (hdr->ramdisksize > RAMDISK_MAX_SIZE) {
    960262f8:	52a18002 	mov	w2, #0xc000000             	// #201326592
    960262fc:	b94012a1 	ldr	w1, [x21, #16]
    96026300:	6b02003f 	cmp	w1, w2
    96026304:	54000129 	b.ls	96026328 <tegrabl_load_kernel_and_dtb+0x298>  // b.plast
		pr_error("Ramdisk size (0x%08x) is greater than allocated size (0x%08x)\n",
    96026308:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602630c:	91119c00 	add	x0, x0, #0x467
    96026310:	97fff0d8 	bl	96022670 <tegrabl_printf>
			pr_error("Error %u loading the ramdisk\n", err);
    96026314:	528020e1 	mov	w1, #0x107                 	// #263
    96026318:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602631c:	72a56561 	movk	w1, #0x2b2b, lsl #16
    96026320:	9112a400 	add	x0, x0, #0x4a9
    96026324:	17ffff79 	b	96026108 <tegrabl_load_kernel_and_dtb+0x78>
	ramdisk_offset = ROUND_UP_POW2(hdr->pagesize + hdr->kernelsize, hdr->pagesize);
    96026328:	b94026a2 	ldr	w2, [x21, #36]
	ramdisk_size = hdr->ramdisksize;
    9602632c:	2a0103e1 	mov	w1, w1
	ramdisk_offset = ROUND_UP_POW2(hdr->pagesize + hdr->kernelsize, hdr->pagesize);
    96026330:	b9400ab3 	ldr	w19, [x21, #8]
    96026334:	4b0203e3 	neg	w3, w2
	ramdisk_size = hdr->ramdisksize;
    96026338:	f90506c1 	str	x1, [x22, #2568]
	ramdisk_offset = ROUND_UP_POW2(hdr->pagesize + hdr->kernelsize, hdr->pagesize);
    9602633c:	0b130053 	add	w19, w2, w19
    96026340:	51000673 	sub	w19, w19, #0x1
    96026344:	0a030273 	and	w19, w19, w3
    96026348:	0b020273 	add	w19, w19, w2
	ramdisk_offset = (uintptr_t)hdr + ramdisk_offset;
    9602634c:	8b1302b3 	add	x19, x21, x19
	if (ramdisk_offset != ramdisk_load) {
    96026350:	eb13001f 	cmp	x0, x19
    96026354:	54000140 	b.eq	9602637c <tegrabl_load_kernel_and_dtb+0x2ec>  // b.none
		pr_info("Move ramdisk (len: %"PRIu64") from 0x%"PRIx64" to 0x%"PRIx64
    96026358:	aa0003e3 	mov	x3, x0
    9602635c:	aa1303e2 	mov	x2, x19
    96026360:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026364:	91132800 	add	x0, x0, #0x4ca
    96026368:	97fff0c2 	bl	96022670 <tegrabl_printf>
		memmove((void *)((uintptr_t)ramdisk_load), (void *)((uintptr_t)ramdisk_offset), ramdisk_size);
    9602636c:	f94506c2 	ldr	x2, [x22, #2568]
    96026370:	aa1303e1 	mov	x1, x19
    96026374:	f94502e0 	ldr	x0, [x23, #2560]
    96026378:	94000f6a 	bl	9602a120 <memmove>
	bootimg_cmdline = (char *)hdr->cmdline;
    9602637c:	90000280 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96026380:	910102b5 	add	x21, x21, #0x40
    96026384:	f904fc15 	str	x21, [x0, #2552]
    96026388:	17ffffbb 	b	96026274 <tegrabl_load_kernel_and_dtb+0x1e4>
	err = tegrabl_dt_set_fdt_handle(TEGRABL_DT_KERNEL, *kernel_dtb);
    9602638c:	f9400281 	ldr	x1, [x20]
    96026390:	52800020 	mov	w0, #0x1                   	// #1
    96026394:	94002aa7 	bl	96030e30 <tegrabl_dt_set_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    96026398:	35fff7e0 	cbnz	w0, 96026294 <tegrabl_load_kernel_and_dtb+0x204>
	err = tegrabl_linuxboot_update_dtb(*kernel_dtb);
    9602639c:	f9400280 	ldr	x0, [x20]
    960263a0:	97fff78d 	bl	960241d4 <tegrabl_linuxboot_update_dtb>
	if (err != TEGRABL_NO_ERROR) {
    960263a4:	35fff780 	cbnz	w0, 96026294 <tegrabl_load_kernel_and_dtb+0x204>
	pr_info("%s: Done\n", __func__);
    960263a8:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    960263ac:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960263b0:	91067c21 	add	x1, x1, #0x19f
    960263b4:	91147800 	add	x0, x0, #0x51e
    960263b8:	97fff0ae 	bl	96022670 <tegrabl_printf>
    960263bc:	17ffff54 	b	9602610c <tegrabl_load_kernel_and_dtb+0x7c>

00000000960263c0 <tegrabl_heap_split_block>:
 * @return Pointer to allocated block.
 */
static tegrabl_heap_alloc_block_t *tegrabl_heap_split_block(tegrabl_heap_type_t heap_type,
	tegrabl_heap_free_block_t *free_block,
	size_t size)
{
    960263c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960263c4:	910003fd 	mov	x29, sp
    960263c8:	a90153f3 	stp	x19, x20, [sp, #16]
    960263cc:	aa0103f3 	mov	x19, x1
	tegrabl_heap_free_block_t *prev_block;
	tegrabl_heap_free_block_t *next_block;

	TEGRABL_ASSERT(free_block != NULL);

	remaining_size = free_block->size - size;
    960263d0:	f9400421 	ldr	x1, [x1, #8]
{
    960263d4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960263d8:	a90363f7 	stp	x23, x24, [sp, #48]
    960263dc:	a9046bf9 	stp	x25, x26, [sp, #64]
	remaining_size = free_block->size - size;
    960263e0:	cb02003a 	sub	x26, x1, x2
	uintptr_t end = start + cur_block->size;
    960263e4:	8b130021 	add	x1, x1, x19
{
    960263e8:	aa0203f9 	mov	x25, x2
	if (end < start) {
    960263ec:	eb01027f 	cmp	x19, x1

	prev_block = free_block->prev;
	next_block = free_block->next;
    960263f0:	a9415a77 	ldp	x23, x22, [x19, #16]
	if (end < start) {
    960263f4:	54000049 	b.ls	960263fc <tegrabl_heap_split_block+0x3c>  // b.plast
/**
 * @brief Infinite loop.
 */
static inline void tegrabl_hang(void)
{
    asm volatile ("b ." : : : "memory", "cc");
    960263f8:	14000000 	b	960263f8 <tegrabl_heap_split_block+0x38>
	if ((start < heap_info[heap_type].start) || (end > heap_info[heap_type].end)) {
    960263fc:	2a0003f4 	mov	w20, w0
    96026400:	90000295 	adrp	x21, 96076000 <free_dram_block+0x38e8>
    96026404:	912842a3 	add	x3, x21, #0xa10
    96026408:	d2800502 	mov	x2, #0x28                  	// #40
    9602640c:	9b020e82 	madd	x2, x20, x2, x3
    96026410:	f9400840 	ldr	x0, [x2, #16]
    96026414:	eb00027f 	cmp	x19, x0
    96026418:	54000083 	b.cc	96026428 <tegrabl_heap_split_block+0x68>  // b.lo, b.ul, b.last
    9602641c:	f9400c40 	ldr	x0, [x2, #24]
    96026420:	eb00003f 	cmp	x1, x0
    96026424:	540000a9 	b.ls	96026438 <tegrabl_heap_split_block+0x78>  // b.plast
		pr_error("Heap corrupted !!!\n");
    96026428:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602642c:	9114ac00 	add	x0, x0, #0x52b
    96026430:	97fff090 	bl	96022670 <tegrabl_printf>
    96026434:	14000000 	b	96026434 <tegrabl_heap_split_block+0x74>
	if (prev_block != NULL && prev_block->next != cur_block) {
    96026438:	b4000117 	cbz	x23, 96026458 <tegrabl_heap_split_block+0x98>
    9602643c:	f9400ee0 	ldr	x0, [x23, #24]
    96026440:	eb00027f 	cmp	x19, x0
    96026444:	540000a0 	b.eq	96026458 <tegrabl_heap_split_block+0x98>  // b.none
		pr_error("Heap free list corrupted !!!\n");
    96026448:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602644c:	91150800 	add	x0, x0, #0x542
    96026450:	97fff088 	bl	96022670 <tegrabl_printf>
    96026454:	14000000 	b	96026454 <tegrabl_heap_split_block+0x94>
	if (next_block != NULL && next_block->prev != cur_block) {
    96026458:	b4000116 	cbz	x22, 96026478 <tegrabl_heap_split_block+0xb8>
    9602645c:	f9400ac0 	ldr	x0, [x22, #16]
    96026460:	eb00027f 	cmp	x19, x0
    96026464:	540000a0 	b.eq	96026478 <tegrabl_heap_split_block+0xb8>  // b.none
		pr_error("Heap free list corrupted !!!\n");
    96026468:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602646c:	91150800 	add	x0, x0, #0x542
    96026470:	97fff080 	bl	96022670 <tegrabl_printf>
    96026474:	14000000 	b	96026474 <tegrabl_heap_split_block+0xb4>

	check_link(free_block, prev_block, next_block, heap_type);
	free_block->prev = NULL;
	free_block->next = NULL;
    96026478:	a9017e7f 	stp	xzr, xzr, [x19, #16]

	/* If remaining size is less than size required to
	 * store free block information. Then no need to
	 * split.
	 */
	if (remaining_size <= MIN_SIZE) {
    9602647c:	f100835f 	cmp	x26, #0x20
    96026480:	54000368 	b.hi	960264ec <tegrabl_heap_split_block+0x12c>  // b.pmore
		if (free_block == heap_info[heap_type].free_list) {
    96026484:	912842a0 	add	x0, x21, #0xa10
    96026488:	d2800501 	mov	x1, #0x28                  	// #40
    9602648c:	9b010280 	madd	x0, x20, x1, x0
    96026490:	f9401001 	ldr	x1, [x0, #32]
    96026494:	eb13003f 	cmp	x1, x19
    96026498:	54000041 	b.ne	960264a0 <tegrabl_heap_split_block+0xe0>  // b.any
			heap_info[heap_type].free_list = next_block;
    9602649c:	f9001016 	str	x22, [x0, #32]
		}
		if (next_block != NULL) {
    960264a0:	b4000056 	cbz	x22, 960264a8 <tegrabl_heap_split_block+0xe8>
			next_block->prev = prev_block;
    960264a4:	f9000ad7 	str	x23, [x22, #16]
		}
		if (prev_block != NULL) {
    960264a8:	b4000057 	cbz	x23, 960264b0 <tegrabl_heap_split_block+0xf0>
			prev_block->next = next_block;
    960264ac:	f9000ef6 	str	x22, [x23, #24]
	} else {
		/* No Action required */
	}

done:
	heap_info[heap_type].free_size = heap_info[heap_type].free_size - free_block->size;
    960264b0:	912842b5 	add	x21, x21, #0xa10
    960264b4:	d2800500 	mov	x0, #0x28                  	// #40
    960264b8:	f9400661 	ldr	x1, [x19, #8]
	return (tegrabl_heap_alloc_block_t *)(void *)free_block;
}
    960264bc:	a94363f7 	ldp	x23, x24, [sp, #48]
	heap_info[heap_type].free_size = heap_info[heap_type].free_size - free_block->size;
    960264c0:	d503201f 	nop
    960264c4:	9b005694 	madd	x20, x20, x0, x21
}
    960264c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960264cc:	a9446bf9 	ldp	x25, x26, [sp, #64]
	heap_info[heap_type].free_size = heap_info[heap_type].free_size - free_block->size;
    960264d0:	f9400680 	ldr	x0, [x20, #8]
    960264d4:	cb010000 	sub	x0, x0, x1
    960264d8:	f9000680 	str	x0, [x20, #8]
}
    960264dc:	aa1303e0 	mov	x0, x19
    960264e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960264e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960264e8:	d65f03c0 	ret
	new_free = (tegrabl_heap_free_block_t *)(tmp + size);
    960264ec:	8b190278 	add	x24, x19, x25
	new_free->next = next_block;
    960264f0:	a9015b17 	stp	x23, x22, [x24, #16]
	if (prev_block != NULL) {
    960264f4:	b4000057 	cbz	x23, 960264fc <tegrabl_heap_split_block+0x13c>
		prev_block->next = new_free;
    960264f8:	f9000ef8 	str	x24, [x23, #24]
	if (next_block != NULL) {
    960264fc:	b4000056 	cbz	x22, 96026504 <tegrabl_heap_split_block+0x144>
		next_block->prev = new_free;
    96026500:	f9000ad8 	str	x24, [x22, #16]
	new_free->magic = FREE_MAGIC;
    96026504:	5297ddc0 	mov	w0, #0xbeee                	// #48878
	new_free->size = remaining_size;
    96026508:	f900071a 	str	x26, [x24, #8]
	new_free->magic = FREE_MAGIC;
    9602650c:	72bbdde0 	movk	w0, #0xdeef, lsl #16
    96026510:	b8396a60 	str	w0, [x19, x25]
	if (size > heap_info[heap_type].free_size) {
    96026514:	912842a0 	add	x0, x21, #0xa10
    96026518:	d2800501 	mov	x1, #0x28                  	// #40
	free_block->size = size;
    9602651c:	f9000679 	str	x25, [x19, #8]
	if (size > heap_info[heap_type].free_size) {
    96026520:	d503201f 	nop
    96026524:	9b010280 	madd	x0, x20, x1, x0
    96026528:	f9400400 	ldr	x0, [x0, #8]
    9602652c:	eb19001f 	cmp	x0, x25
    96026530:	540000a2 	b.cs	96026544 <tegrabl_heap_split_block+0x184>  // b.hs, b.nlast
		pr_error("Heap free list corrupted !!!\n");
    96026534:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026538:	91150800 	add	x0, x0, #0x542
    9602653c:	97fff04d 	bl	96022670 <tegrabl_printf>
    96026540:	14000000 	b	96026540 <tegrabl_heap_split_block+0x180>
	if (free_block == heap_info[heap_type].free_list) {
    96026544:	912842a0 	add	x0, x21, #0xa10
    96026548:	d2800501 	mov	x1, #0x28                  	// #40
    9602654c:	9b010280 	madd	x0, x20, x1, x0
    96026550:	f9401001 	ldr	x1, [x0, #32]
    96026554:	eb13003f 	cmp	x1, x19
    96026558:	54fffac1 	b.ne	960264b0 <tegrabl_heap_split_block+0xf0>  // b.any
		heap_info[heap_type].free_list = new_free;
    9602655c:	f9001018 	str	x24, [x0, #32]
    96026560:	17ffffd4 	b	960264b0 <tegrabl_heap_split_block+0xf0>

0000000096026564 <tegrabl_generic_malloc>:
	tegrabl_heap_free_block_t *free_block = NULL;
	tegrabl_heap_alloc_block_t *alloc_block = NULL;
	void *found = NULL;
	size_t alloc_size;

	if ((size == 0UL) || (size > heap_info[heap_type].free_size)) {
    96026564:	b4000281 	cbz	x1, 960265b4 <tegrabl_generic_malloc+0x50>
    96026568:	aa0103e3 	mov	x3, x1
    9602656c:	2a0003e2 	mov	w2, w0
    96026570:	90000281 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96026574:	91284021 	add	x1, x1, #0xa10
    96026578:	d2800504 	mov	x4, #0x28                  	// #40
    9602657c:	9b040442 	madd	x2, x2, x4, x1
    96026580:	f9400441 	ldr	x1, [x2, #8]
    96026584:	eb03003f 	cmp	x1, x3
    96026588:	54000163 	b.cc	960265b4 <tegrabl_generic_malloc+0x50>  // b.lo, b.ul, b.last
		return NULL;
	}

	free_block = heap_info[heap_type].free_list;
    9602658c:	f9401041 	ldr	x1, [x2, #32]

	alloc_size = ROUND_UP(size, sizeof(uintptr_t));
    96026590:	91001c62 	add	x2, x3, #0x7
    96026594:	927df042 	and	x2, x2, #0xfffffffffffffff8

	alloc_size = alloc_size + sizeof(tegrabl_heap_alloc_block_t);
    96026598:	91006042 	add	x2, x2, #0x18

	/* Ensure addition didn't wrap the value. */
	if (alloc_size < size) {
    9602659c:	eb02007f 	cmp	x3, x2
    960265a0:	540000a8 	b.hi	960265b4 <tegrabl_generic_malloc+0x50>  // b.pmore

	/* Minimum size to allocate is the size required to store
	 * free block information. This will ensure sufficient
	 * space to store free block information when freed later.
	 */
	alloc_size = MAX(alloc_size, MIN_SIZE);
    960265a4:	f100805f 	cmp	x2, #0x20
    960265a8:	d2800403 	mov	x3, #0x20                  	// #32
    960265ac:	9a832042 	csel	x2, x2, x3, cs  // cs = hs, nlast

	/* Find the first free block having sufficient space. */
	while (free_block != NULL) {
    960265b0:	b5000061 	cbnz	x1, 960265bc <tegrabl_generic_malloc+0x58>
		return NULL;
    960265b4:	d2800000 	mov	x0, #0x0                   	// #0
		alloc_block->start = alloc_block;
		alloc_block->magic = ALLOC_MAGIC;
	}

	return found;
}
    960265b8:	d65f03c0 	ret
		if (free_block->size > alloc_size) {
    960265bc:	f9400423 	ldr	x3, [x1, #8]
    960265c0:	eb02007f 	cmp	x3, x2
    960265c4:	54000249 	b.ls	9602660c <tegrabl_generic_malloc+0xa8>  // b.plast
{
    960265c8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
			if (free_block->magic != FREE_MAGIC) {
    960265cc:	5297ddc3 	mov	w3, #0xbeee                	// #48878
    960265d0:	72bbdde3 	movk	w3, #0xdeef, lsl #16
{
    960265d4:	910003fd 	mov	x29, sp
			if (free_block->magic != FREE_MAGIC) {
    960265d8:	b9400024 	ldr	w4, [x1]
    960265dc:	6b03009f 	cmp	w4, w3
    960265e0:	540000a0 	b.eq	960265f4 <tegrabl_generic_malloc+0x90>  // b.none
				pr_error("Heap free list corrupted !!!\n");
    960265e4:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960265e8:	91150800 	add	x0, x0, #0x542
    960265ec:	97fff021 	bl	96022670 <tegrabl_printf>
    960265f0:	14000000 	b	960265f0 <tegrabl_generic_malloc+0x8c>
			alloc_block = tegrabl_heap_split_block(heap_type, free_block, alloc_size);
    960265f4:	97ffff73 	bl	960263c0 <tegrabl_heap_split_block>
    960265f8:	aa0003e1 	mov	x1, x0
			found = (uint8_t *)alloc_block + sizeof(*alloc_block);
    960265fc:	91006000 	add	x0, x0, #0x18
	if (alloc_block != NULL) {
    96026600:	b50000a1 	cbnz	x1, 96026614 <tegrabl_generic_malloc+0xb0>
}
    96026604:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96026608:	d65f03c0 	ret
		free_block = free_block->next;
    9602660c:	f9400c21 	ldr	x1, [x1, #24]
    96026610:	17ffffe8 	b	960265b0 <tegrabl_generic_malloc+0x4c>
		alloc_block->magic = ALLOC_MAGIC;
    96026614:	5297ddc2 	mov	w2, #0xbeee                	// #48878
		alloc_block->start = alloc_block;
    96026618:	f9000821 	str	x1, [x1, #16]
		alloc_block->magic = ALLOC_MAGIC;
    9602661c:	72bbd5a2 	movk	w2, #0xdead, lsl #16
    96026620:	b9000022 	str	w2, [x1]
    96026624:	17fffff8 	b	96026604 <tegrabl_generic_malloc+0xa0>

0000000096026628 <tegrabl_memalign_generic>:
	size_t align_size;
	size_t orig_size;
	uintptr_t address;
	uint8_t *ptr;

	if (size == 0UL) {
    96026628:	b4000702 	cbz	x2, 96026708 <tegrabl_memalign_generic+0xe0>
{
    9602662c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96026630:	910003fd 	mov	x29, sp
    96026634:	a90153f3 	stp	x19, x20, [sp, #16]
		return NULL;
	}

	size = ROUND_UP(size, sizeof(uintptr_t));
    96026638:	91001c54 	add	x20, x2, #0x7
    9602663c:	927df294 	and	x20, x20, #0xfffffffffffffff8
	alloc_size = size + sizeof(tegrabl_heap_alloc_block_t);
	/* Minimum size to allocate is the size required to store
	 * free block information. This will ensure sufficient
	 * space to store free block information when freed later.
	 */
	alloc_size = MAX(alloc_size, MIN_SIZE);
    96026640:	d2800402 	mov	x2, #0x20                  	// #32
	alloc_size = size + sizeof(tegrabl_heap_alloc_block_t);
    96026644:	91006294 	add	x20, x20, #0x18
{
    96026648:	a90363f7 	stp	x23, x24, [sp, #48]
	alloc_size = MAX(alloc_size, MIN_SIZE);
    9602664c:	f100829f 	cmp	x20, #0x20
	tegrabl_heap_free_block_t *free_block = heap_info[heap_type].free_list;
    96026650:	90000297 	adrp	x23, 96076000 <free_dram_block+0x38e8>
{
    96026654:	f90023f9 	str	x25, [sp, #64]
	tegrabl_heap_free_block_t *free_block = heap_info[heap_type].free_list;
    96026658:	912842e3 	add	x3, x23, #0xa10
    9602665c:	2a0003f9 	mov	w25, w0
	alloc_size = MAX(alloc_size, MIN_SIZE);
    96026660:	9a822294 	csel	x20, x20, x2, cs  // cs = hs, nlast
	tegrabl_heap_free_block_t *free_block = heap_info[heap_type].free_list;
    96026664:	d2800502 	mov	x2, #0x28                  	// #40
{
    96026668:	a9025bf5 	stp	x21, x22, [sp, #32]
	tegrabl_heap_free_block_t *free_block = heap_info[heap_type].free_list;
    9602666c:	d503201f 	nop
    96026670:	9b020f22 	madd	x2, x25, x2, x3
    96026674:	f9401053 	ldr	x19, [x2, #32]
	while (free_block != NULL) {
    96026678:	b5000113 	cbnz	x19, 96026698 <tegrabl_memalign_generic+0x70>
		return NULL;
    9602667c:	d2800000 	mov	x0, #0x0                   	// #0
	update_free_list_head(heap_type, free_block);

done:
	TEGRABL_ASSERT((((uintptr_t)found) % alignment) == 0);
	return found;
}
    96026680:	a94153f3 	ldp	x19, x20, [sp, #16]
    96026684:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96026688:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602668c:	f94023f9 	ldr	x25, [sp, #64]
    96026690:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96026694:	d65f03c0 	ret
		block_size = free_block->size;
    96026698:	f9400663 	ldr	x3, [x19, #8]
		if (block_size < alloc_size) {
    9602669c:	eb03029f 	cmp	x20, x3
    960266a0:	54000069 	b.ls	960266ac <tegrabl_memalign_generic+0x84>  // b.plast
			free_block = free_block->next;
    960266a4:	f9400e73 	ldr	x19, [x19, #24]
    960266a8:	17fffff4 	b	96026678 <tegrabl_memalign_generic+0x50>
		address = ((uintptr_t)(uint8_t *)free_block) + sizeof(tegrabl_heap_alloc_block_t);
    960266ac:	91006262 	add	x2, x19, #0x18
		align_size = alignment - (address % alignment);
    960266b0:	9ac10856 	udiv	x22, x2, x1
    960266b4:	9b018ad6 	msub	x22, x22, x1, x2
    960266b8:	cb160036 	sub	x22, x1, x22
		if ((align_size + alloc_size) > block_size) {
    960266bc:	8b160282 	add	x2, x20, x22
    960266c0:	eb02007f 	cmp	x3, x2
    960266c4:	54ffff03 	b.cc	960266a4 <tegrabl_memalign_generic+0x7c>  // b.lo, b.ul, b.last
		if (free_block->magic != FREE_MAGIC) {
    960266c8:	b9400263 	ldr	w3, [x19]
    960266cc:	5297ddc1 	mov	w1, #0xbeee                	// #48878
    960266d0:	72bbdde1 	movk	w1, #0xdeef, lsl #16
    960266d4:	6b01007f 	cmp	w3, w1
    960266d8:	540001c0 	b.eq	96026710 <tegrabl_memalign_generic+0xe8>  // b.none
			pr_error("Heap free list corrupted !!!\n");
    960266dc:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960266e0:	91150800 	add	x0, x0, #0x542
    960266e4:	97ffefe3 	bl	96022670 <tegrabl_printf>
    960266e8:	14000000 	b	960266e8 <tegrabl_memalign_generic+0xc0>
	} else if (next_block == NULL) {
    960266ec:	b5000075 	cbnz	x21, 960266f8 <tegrabl_memalign_generic+0xd0>
		next_block = prev_block->next;
    960266f0:	f9400f15 	ldr	x21, [x24, #24]
    960266f4:	1400001d 	b	96026768 <tegrabl_memalign_generic+0x140>
	} else if (next_block->prev != prev_block) {
    960266f8:	f9400aa2 	ldr	x2, [x21, #16]
    960266fc:	eb18005f 	cmp	x2, x24
    96026700:	9a8202b5 	csel	x21, x21, x2, eq  // eq = none
    96026704:	14000019 	b	96026768 <tegrabl_memalign_generic+0x140>
		return NULL;
    96026708:	d2800000 	mov	x0, #0x0                   	// #0
}
    9602670c:	d65f03c0 	ret
	alloc_block = tegrabl_heap_split_block(heap_type, free_block, alloc_size + align_size);
    96026710:	aa1303e1 	mov	x1, x19
	next_block = free_block->next;
    96026714:	a9415678 	ldp	x24, x21, [x19, #16]
	alloc_block = tegrabl_heap_split_block(heap_type, free_block, alloc_size + align_size);
    96026718:	97ffff2a 	bl	960263c0 <tegrabl_heap_split_block>
    9602671c:	aa0003e2 	mov	x2, x0
	found = ptr + sizeof(*alloc_block) + align_size;
    96026720:	910062c1 	add	x1, x22, #0x18
    96026724:	8b010000 	add	x0, x0, x1
	alloc_block = (tegrabl_heap_alloc_block_t *) (ptr + align_size);
    96026728:	8b160041 	add	x1, x2, x22
	if (align_size < MIN_SIZE) {
    9602672c:	f1007edf 	cmp	x22, #0x1f
	orig_size = alloc_block->size;
    96026730:	f9400443 	ldr	x3, [x2, #8]
	alloc_block->size = orig_size;
    96026734:	f9000423 	str	x3, [x1, #8]
	alloc_block->magic = ALLOC_MAGIC;
    96026738:	5297ddc3 	mov	w3, #0xbeee                	// #48878
    9602673c:	72bbd5a3 	movk	w3, #0xdead, lsl #16
    96026740:	b8366843 	str	w3, [x2, x22]
	alloc_block->start = ptr;
    96026744:	f9000822 	str	x2, [x1, #16]
	if (align_size < MIN_SIZE) {
    96026748:	54fff9c9 	b.ls	96026680 <tegrabl_memalign_generic+0x58>  // b.plast
	if ((prev_block == NULL) && (next_block == NULL)) {
    9602674c:	f100031f 	cmp	x24, #0x0
    96026750:	fa400aa0 	ccmp	x21, #0x0, #0x0, eq  // eq = none
    96026754:	54fffcc1 	b.ne	960266ec <tegrabl_memalign_generic+0xc4>  // b.any
		next_block = heap_info[heap_type].free_list;
    96026758:	912842e2 	add	x2, x23, #0xa10
    9602675c:	d2800503 	mov	x3, #0x28                  	// #40
    96026760:	9b030b22 	madd	x2, x25, x3, x2
    96026764:	f9401055 	ldr	x21, [x2, #32]
	alloc_block->start = ptr + align_size;
    96026768:	a9008434 	stp	x20, x1, [x1, #8]
	free_block->magic = FREE_MAGIC;
    9602676c:	5297ddc1 	mov	w1, #0xbeee                	// #48878
    96026770:	72bbdde1 	movk	w1, #0xdeef, lsl #16
    96026774:	b9000261 	str	w1, [x19]
	heap_info[heap_type].free_size = heap_info[heap_type].free_size + align_size;
    96026778:	912842e1 	add	x1, x23, #0xa10
    9602677c:	d2800502 	mov	x2, #0x28                  	// #40
	free_block->prev = prev_block;
    96026780:	a900e276 	stp	x22, x24, [x19, #8]
	free_block->next = next_block;
    96026784:	f9000e75 	str	x21, [x19, #24]
	heap_info[heap_type].free_size = heap_info[heap_type].free_size + align_size;
    96026788:	d503201f 	nop
    9602678c:	9b020721 	madd	x1, x25, x2, x1
    96026790:	f9400422 	ldr	x2, [x1, #8]
    96026794:	8b160056 	add	x22, x2, x22
    96026798:	f9000436 	str	x22, [x1, #8]
	if (next_block != NULL) {
    9602679c:	b4000055 	cbz	x21, 960267a4 <tegrabl_memalign_generic+0x17c>
		next_block->prev = free_block;
    960267a0:	f9000ab3 	str	x19, [x21, #16]
	if (prev_block != NULL) {
    960267a4:	b4000058 	cbz	x24, 960267ac <tegrabl_memalign_generic+0x184>
		prev_block->next = free_block;
    960267a8:	f9000f13 	str	x19, [x24, #24]
	tegrabl_heap_free_block_t *free_list = heap_info[heap_type].free_list;
    960267ac:	912842f7 	add	x23, x23, #0xa10
    960267b0:	d2800501 	mov	x1, #0x28                  	// #40
    960267b4:	9b015f39 	madd	x25, x25, x1, x23
    960267b8:	f9401321 	ldr	x1, [x25, #32]
	if ((free_list == NULL) || (free_list_addr > free_block_addr)) {
    960267bc:	f100003f 	cmp	x1, #0x0
    960267c0:	fa411260 	ccmp	x19, x1, #0x0, ne  // ne = any
    960267c4:	54fff5e2 	b.cs	96026680 <tegrabl_memalign_generic+0x58>  // b.hs, b.nlast
		heap_info[heap_type].free_list = free_block;
    960267c8:	f9001333 	str	x19, [x25, #32]
    960267cc:	17ffffad 	b	96026680 <tegrabl_memalign_generic+0x58>

00000000960267d0 <tegrabl_heap_merge_with_next>:
{
    960267d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960267d4:	910003fd 	mov	x29, sp
    960267d8:	f90013f5 	str	x21, [sp, #32]
	uintptr_t cur_mem_end = cur_mem + cur_block->size;
    960267dc:	f9400415 	ldr	x21, [x0, #8]
{
    960267e0:	a90153f3 	stp	x19, x20, [sp, #16]
    960267e4:	aa0003f3 	mov	x19, x0
	uintptr_t cur_mem_end = cur_mem + cur_block->size;
    960267e8:	8b150015 	add	x21, x0, x21
{
    960267ec:	aa0103f4 	mov	x20, x1
	if ((cur_mem_end < cur_mem) || (cur_mem_end > next_mem)) {
    960267f0:	eb15001f 	cmp	x0, x21
    960267f4:	fa559020 	ccmp	x1, x21, #0x0, ls  // ls = plast
    960267f8:	540000a2 	b.cs	9602680c <tegrabl_heap_merge_with_next+0x3c>  // b.hs, b.nlast
		pr_error("Heap corrupted !!!\n");
    960267fc:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026800:	9114ac00 	add	x0, x0, #0x52b
    96026804:	97ffef9b 	bl	96022670 <tegrabl_printf>
    96026808:	14000000 	b	96026808 <tegrabl_heap_merge_with_next+0x38>
	if (cur_mem_end == next_mem) {
    9602680c:	eb15029f 	cmp	x20, x21
    96026810:	54000141 	b.ne	96026838 <tegrabl_heap_merge_with_next+0x68>  // b.any
		cur_block->size = cur_block->size + next_block->size;
    96026814:	f9400681 	ldr	x1, [x20, #8]
    96026818:	f9400660 	ldr	x0, [x19, #8]
    9602681c:	8b010000 	add	x0, x0, x1
    96026820:	f9000660 	str	x0, [x19, #8]
		cur_block->next = next_block->next;
    96026824:	f9400e80 	ldr	x0, [x20, #24]
    96026828:	f9000e60 	str	x0, [x19, #24]
		if (next_block->next != NULL) {
    9602682c:	f9400e80 	ldr	x0, [x20, #24]
    96026830:	b4000040 	cbz	x0, 96026838 <tegrabl_heap_merge_with_next+0x68>
			next_block->next->prev = cur_block;
    96026834:	f9000813 	str	x19, [x0, #16]
}
    96026838:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602683c:	f94013f5 	ldr	x21, [sp, #32]
    96026840:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96026844:	d65f03c0 	ret

0000000096026848 <tegrabl_dealloc.part.1>:
void tegrabl_dealloc(tegrabl_heap_type_t heap_type, const void *ptr)
    96026848:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602684c:	910003fd 	mov	x29, sp
    96026850:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (heap_info[TEGRABL_HEAP_DMA].free_list == NULL) {
    96026854:	90000296 	adrp	x22, 96076000 <free_dram_block+0x38e8>
    96026858:	912842c2 	add	x2, x22, #0xa10
void tegrabl_dealloc(tegrabl_heap_type_t heap_type, const void *ptr)
    9602685c:	a90153f3 	stp	x19, x20, [sp, #16]
	if (heap_info[TEGRABL_HEAP_DMA].free_list == NULL) {
    96026860:	f9402442 	ldr	x2, [x2, #72]
void tegrabl_dealloc(tegrabl_heap_type_t heap_type, const void *ptr)
    96026864:	f9001bf7 	str	x23, [sp, #48]
		type = TEGRABL_HEAP_DEFAULT;
    96026868:	f100005f 	cmp	x2, #0x0
    9602686c:	1a9f1014 	csel	w20, w0, wzr, ne  // ne = any
	if (ptr == NULL) {
    96026870:	b4000ae1 	cbz	x1, 960269cc <tegrabl_dealloc.part.1+0x184>
	uintptr_t start = (uintptr_t)(uint8_t *)alloc_block->start;
    96026874:	a97f0c22 	ldp	x2, x3, [x1, #-16]
    96026878:	d1006024 	sub	x4, x1, #0x18
	uintptr_t end = start + alloc_block->size;
    9602687c:	8b020062 	add	x2, x3, x2
	if ((end < start) || (start > alloc_ptr) || (alloc_ptr > end)) {
    96026880:	eb02007f 	cmp	x3, x2
    96026884:	fa449062 	ccmp	x3, x4, #0x2, ls  // ls = plast
    96026888:	54000068 	b.hi	96026894 <tegrabl_dealloc.part.1+0x4c>  // b.pmore
    9602688c:	eb04005f 	cmp	x2, x4
    96026890:	54000042 	b.cs	96026898 <tegrabl_dealloc.part.1+0x50>  // b.hs, b.nlast
    96026894:	14000000 	b	96026894 <tegrabl_dealloc.part.1+0x4c>
	if (alloc_block->magic != ALLOC_MAGIC) {
    96026898:	b85e8024 	ldur	w4, [x1, #-24]
    9602689c:	5297ddc0 	mov	w0, #0xbeee                	// #48878
    960268a0:	72bbd5a0 	movk	w0, #0xdead, lsl #16
    960268a4:	6b00009f 	cmp	w4, w0
    960268a8:	54000040 	b.eq	960268b0 <tegrabl_dealloc.part.1+0x68>  // b.none
    960268ac:	14000000 	b	960268ac <tegrabl_dealloc.part.1+0x64>
	if ((start < heap_info[heap_type].start) || (end > heap_info[heap_type].end)) {
    960268b0:	912842c0 	add	x0, x22, #0xa10
    960268b4:	2a1403f4 	mov	w20, w20
    960268b8:	aa0103f5 	mov	x21, x1
    960268bc:	d2800501 	mov	x1, #0x28                  	// #40
    960268c0:	9b010280 	madd	x0, x20, x1, x0
    960268c4:	f9400801 	ldr	x1, [x0, #16]
    960268c8:	eb01007f 	cmp	x3, x1
    960268cc:	54000083 	b.cc	960268dc <tegrabl_dealloc.part.1+0x94>  // b.lo, b.ul, b.last
    960268d0:	f9400c00 	ldr	x0, [x0, #24]
    960268d4:	eb00005f 	cmp	x2, x0
    960268d8:	540000a9 	b.ls	960268ec <tegrabl_dealloc.part.1+0xa4>  // b.plast
		pr_error("Heap corrupted !!!\n");
    960268dc:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960268e0:	9114ac00 	add	x0, x0, #0x52b
    960268e4:	97ffef63 	bl	96022670 <tegrabl_printf>
    960268e8:	14000000 	b	960268e8 <tegrabl_dealloc.part.1+0xa0>
	total_free_size = alloc_block->size + heap_info[heap_type].free_size;
    960268ec:	d2800501 	mov	x1, #0x28                  	// #40
    960268f0:	912842c2 	add	x2, x22, #0xa10
    960268f4:	9b017e81 	mul	x1, x20, x1
    960268f8:	8b010040 	add	x0, x2, x1
    960268fc:	f9400403 	ldr	x3, [x0, #8]
    96026900:	f85f02a0 	ldur	x0, [x21, #-16]
    96026904:	8b000060 	add	x0, x3, x0
	if ((total_free_size < heap_info[heap_type].free_size) ||
    96026908:	eb00007f 	cmp	x3, x0
    9602690c:	54000088 	b.hi	9602691c <tegrabl_dealloc.part.1+0xd4>  // b.pmore
    96026910:	f8616841 	ldr	x1, [x2, x1]
    96026914:	eb01001f 	cmp	x0, x1
    96026918:	540000a9 	b.ls	9602692c <tegrabl_dealloc.part.1+0xe4>  // b.plast
		pr_error("Heap corrupted !!!\n");
    9602691c:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026920:	9114ac00 	add	x0, x0, #0x52b
    96026924:	97ffef53 	bl	96022670 <tegrabl_printf>
    96026928:	14000000 	b	96026928 <tegrabl_dealloc.part.1+0xe0>
	free_block = heap_info[heap_type].free_list;
    9602692c:	912842c0 	add	x0, x22, #0xa10
    96026930:	d2800501 	mov	x1, #0x28                  	// #40
	tmp_free = (tegrabl_heap_free_block_t *) alloc_block->start;
    96026934:	a97f4eb7 	ldp	x23, x19, [x21, #-16]
	free_block = heap_info[heap_type].free_list;
    96026938:	d503201f 	nop
    9602693c:	9b010280 	madd	x0, x20, x1, x0
	tegrabl_heap_free_block_t *prev_block = NULL;
    96026940:	d2800001 	mov	x1, #0x0                   	// #0
	tmp_free->size = free_size;
    96026944:	f9000677 	str	x23, [x19, #8]
	free_block = heap_info[heap_type].free_list;
    96026948:	f9401000 	ldr	x0, [x0, #32]
	while ((free_block != NULL) && ((uintptr_t)(const uint8_t *)ptr > (uintptr_t)free_block)) {
    9602694c:	f100001f 	cmp	x0, #0x0
    96026950:	fa4012a0 	ccmp	x21, x0, #0x0, ne  // ne = any
    96026954:	54000468 	b.hi	960269e0 <tegrabl_dealloc.part.1+0x198>  // b.pmore
	if (prev_block != NULL) {
    96026958:	b4000041 	cbz	x1, 96026960 <tegrabl_dealloc.part.1+0x118>
		prev_block->next = tmp_free;
    9602695c:	f9000c33 	str	x19, [x1, #24]
	tmp_free->next = free_block;
    96026960:	a9010261 	stp	x1, x0, [x19, #16]
	tmp_free->magic = FREE_MAGIC;
    96026964:	5297ddc1 	mov	w1, #0xbeee                	// #48878
    96026968:	72bbdde1 	movk	w1, #0xdeef, lsl #16
    9602696c:	b9000261 	str	w1, [x19]
	if (free_block != NULL) {
    96026970:	b4000040 	cbz	x0, 96026978 <tegrabl_dealloc.part.1+0x130>
		free_block->prev = tmp_free;
    96026974:	f9000813 	str	x19, [x0, #16]
	next = free_block->next;
    96026978:	a9410675 	ldp	x21, x1, [x19, #16]
	if (next != NULL) {
    9602697c:	b4000061 	cbz	x1, 96026988 <tegrabl_dealloc.part.1+0x140>
		tegrabl_heap_merge_with_next(free_block, next);
    96026980:	aa1303e0 	mov	x0, x19
    96026984:	97ffff93 	bl	960267d0 <tegrabl_heap_merge_with_next>
	if (prev != NULL) {
    96026988:	b4000375 	cbz	x21, 960269f4 <tegrabl_dealloc.part.1+0x1ac>
		tegrabl_heap_merge_with_next(prev, free_block);
    9602698c:	aa1303e1 	mov	x1, x19
    96026990:	aa1503e0 	mov	x0, x21
    96026994:	97ffff8f 	bl	960267d0 <tegrabl_heap_merge_with_next>
		if (free_block == tmp_free) {
    96026998:	eb15027f 	cmp	x19, x21
    9602699c:	54000281 	b.ne	960269ec <tegrabl_dealloc.part.1+0x1a4>  // b.any
	heap_info[heap_type].free_size = heap_info[heap_type].free_size + free_size;
    960269a0:	912842c0 	add	x0, x22, #0xa10
    960269a4:	d2800501 	mov	x1, #0x28                  	// #40
    960269a8:	9b010294 	madd	x20, x20, x1, x0
    960269ac:	f9400680 	ldr	x0, [x20, #8]
    960269b0:	8b170000 	add	x0, x0, x23
    960269b4:	f9000680 	str	x0, [x20, #8]
	tegrabl_heap_free_block_t *free_list = heap_info[heap_type].free_list;
    960269b8:	f9401280 	ldr	x0, [x20, #32]
	if ((free_list == NULL) || (free_list_addr > free_block_addr)) {
    960269bc:	f100001f 	cmp	x0, #0x0
    960269c0:	fa551002 	ccmp	x0, x21, #0x2, ne  // ne = any
    960269c4:	54000049 	b.ls	960269cc <tegrabl_dealloc.part.1+0x184>  // b.plast
		heap_info[heap_type].free_list = free_block;
    960269c8:	f9001295 	str	x21, [x20, #32]
}
    960269cc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960269d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960269d4:	f9401bf7 	ldr	x23, [sp, #48]
    960269d8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960269dc:	d65f03c0 	ret
		free_block = free_block->next;
    960269e0:	aa0003e1 	mov	x1, x0
    960269e4:	f9400c00 	ldr	x0, [x0, #24]
    960269e8:	17ffffd9 	b	9602694c <tegrabl_dealloc.part.1+0x104>
		if (free_block == tmp_free) {
    960269ec:	aa1503f3 	mov	x19, x21
    960269f0:	17ffffe2 	b	96026978 <tegrabl_dealloc.part.1+0x130>
	if (prev != NULL) {
    960269f4:	aa1303f5 	mov	x21, x19
    960269f8:	17ffffea 	b	960269a0 <tegrabl_dealloc.part.1+0x158>

00000000960269fc <tegrabl_heap_init>:
	if (size < MIN_SIZE) {
    960269fc:	f1007c5f 	cmp	x2, #0x1f
    96026a00:	540002e9 	b.ls	96026a5c <tegrabl_heap_init+0x60>  // b.plast
	if (heap_type >= TEGRABL_HEAP_TYPE_MAX) {
    96026a04:	7100041f 	cmp	w0, #0x1
    96026a08:	54000308 	b.hi	96026a68 <tegrabl_heap_init+0x6c>  // b.pmore
	if (heap_info[heap_type].free_list != NULL) {
    96026a0c:	2a0003e0 	mov	w0, w0
    96026a10:	d2800503 	mov	x3, #0x28                  	// #40
    96026a14:	90000284 	adrp	x4, 96076000 <free_dram_block+0x38e8>
    96026a18:	91284084 	add	x4, x4, #0xa10
    96026a1c:	9b037c00 	mul	x0, x0, x3
    96026a20:	8b000083 	add	x3, x4, x0
    96026a24:	f9401065 	ldr	x5, [x3, #32]
    96026a28:	b5000245 	cbnz	x5, 96026a70 <tegrabl_heap_init+0x74>
	free_list->magic = FREE_MAGIC;
    96026a2c:	5297ddc5 	mov	w5, #0xbeee                	// #48878
	heap_info[heap_type].max_size = size;
    96026a30:	f8206882 	str	x2, [x4, x0]
	free_list->magic = FREE_MAGIC;
    96026a34:	72bbdde5 	movk	w5, #0xdeef, lsl #16
	free_list->prev = NULL;
    96026a38:	a900fc22 	stp	x2, xzr, [x1, #8]
	heap_info[heap_type].start = (uintptr_t)free_list;
    96026a3c:	a9008462 	stp	x2, x1, [x3, #8]
	return TEGRABL_NO_ERROR;
    96026a40:	52800000 	mov	w0, #0x0                   	// #0
	heap_info[heap_type].end = heap_info[heap_type].start + size;
    96026a44:	8b010042 	add	x2, x2, x1
	free_list->magic = FREE_MAGIC;
    96026a48:	b9000025 	str	w5, [x1]
	free_list->next = NULL;
    96026a4c:	f9000c3f 	str	xzr, [x1, #24]
	heap_info[heap_type].end = heap_info[heap_type].start + size;
    96026a50:	f9000c62 	str	x2, [x3, #24]
	heap_info[heap_type].free_list = free_list;
    96026a54:	f9001061 	str	x1, [x3, #32]
}
    96026a58:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_TOO_SMALL, 0UL);
    96026a5c:	52800100 	mov	w0, #0x8                   	// #8
		return TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0UL);
    96026a60:	72a34340 	movk	w0, #0x1a1a, lsl #16
    96026a64:	17fffffd 	b	96026a58 <tegrabl_heap_init+0x5c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0UL);
    96026a68:	52800040 	mov	w0, #0x2                   	// #2
    96026a6c:	17fffffd 	b	96026a60 <tegrabl_heap_init+0x64>
		return TEGRABL_ERROR(TEGRABL_ERR_ALREADY_EXISTS, 0UL);
    96026a70:	52800420 	mov	w0, #0x21                  	// #33
    96026a74:	17fffffb 	b	96026a60 <tegrabl_heap_init+0x64>

0000000096026a78 <tegrabl_malloc>:
	return tegrabl_generic_malloc(TEGRABL_HEAP_DEFAULT, size);
    96026a78:	aa0003e1 	mov	x1, x0
    96026a7c:	52800000 	mov	w0, #0x0                   	// #0
    96026a80:	17fffeb9 	b	96026564 <tegrabl_generic_malloc>

0000000096026a84 <tegrabl_alloc>:
	if (heap_type >= TEGRABL_HEAP_TYPE_MAX) {
    96026a84:	7100041f 	cmp	w0, #0x1
    96026a88:	540000c8 	b.hi	96026aa0 <tegrabl_alloc+0x1c>  // b.pmore
	if (heap_info[TEGRABL_HEAP_DMA].free_list == NULL) {
    96026a8c:	90000282 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96026a90:	f9452c42 	ldr	x2, [x2, #2648]
		type = TEGRABL_HEAP_DEFAULT;
    96026a94:	f100005f 	cmp	x2, #0x0
	return tegrabl_generic_malloc(type, size);
    96026a98:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    96026a9c:	17fffeb2 	b	96026564 <tegrabl_generic_malloc>
}
    96026aa0:	d2800000 	mov	x0, #0x0                   	// #0
    96026aa4:	d65f03c0 	ret

0000000096026aa8 <tegrabl_dealloc>:
	if (heap_type >= TEGRABL_HEAP_TYPE_MAX) {
    96026aa8:	7100041f 	cmp	w0, #0x1
    96026aac:	54000048 	b.hi	96026ab4 <tegrabl_dealloc+0xc>  // b.pmore
    96026ab0:	17ffff66 	b	96026848 <tegrabl_dealloc.part.1>
}
    96026ab4:	d65f03c0 	ret

0000000096026ab8 <tegrabl_free>:
{
    96026ab8:	aa0003e1 	mov	x1, x0
    96026abc:	52800000 	mov	w0, #0x0                   	// #0
    96026ac0:	17ffff62 	b	96026848 <tegrabl_dealloc.part.1>

0000000096026ac4 <tegrabl_calloc>:
{
    96026ac4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96026ac8:	910003fd 	mov	x29, sp
    96026acc:	a90153f3 	stp	x19, x20, [sp, #16]
	size_t total_size = size * nmemb;
    96026ad0:	9b007c34 	mul	x20, x1, x0
	if (size == U8(0)) {
    96026ad4:	b4000221 	cbz	x1, 96026b18 <tegrabl_calloc+0x54>
	if (nmemb > (heap_info[TEGRABL_HEAP_DEFAULT].max_size / size)) {
    96026ad8:	90000282 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96026adc:	f9450843 	ldr	x3, [x2, #2576]
    96026ae0:	9ac10861 	udiv	x1, x3, x1
    96026ae4:	eb00003f 	cmp	x1, x0
    96026ae8:	54000183 	b.cc	96026b18 <tegrabl_calloc+0x54>  // b.lo, b.ul, b.last
	mem = tegrabl_malloc(total_size);
    96026aec:	aa1403e0 	mov	x0, x20
    96026af0:	97ffffe2 	bl	96026a78 <tegrabl_malloc>
    96026af4:	aa0003f3 	mov	x19, x0
	if (mem != NULL) {
    96026af8:	b4000080 	cbz	x0, 96026b08 <tegrabl_calloc+0x44>
		(void)memset(mem, 0x0, total_size);
    96026afc:	aa1403e2 	mov	x2, x20
    96026b00:	52800001 	mov	w1, #0x0                   	// #0
    96026b04:	94000cc9 	bl	96029e28 <memset>
}
    96026b08:	aa1303e0 	mov	x0, x19
    96026b0c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96026b10:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96026b14:	d65f03c0 	ret
		return NULL;
    96026b18:	d2800013 	mov	x19, #0x0                   	// #0
    96026b1c:	17fffffb 	b	96026b08 <tegrabl_calloc+0x44>

0000000096026b20 <tegrabl_alloc_align>:

void *tegrabl_alloc_align(tegrabl_heap_type_t heap_type, size_t alignment, size_t size)
{
	tegrabl_heap_type_t type = heap_type;

	if (heap_type >= TEGRABL_HEAP_TYPE_MAX) {
    96026b20:	7100041f 	cmp	w0, #0x1
    96026b24:	540002c8 	b.hi	96026b7c <tegrabl_alloc_align+0x5c>  // b.pmore
		return NULL;
	}

	if (heap_info[TEGRABL_HEAP_DMA].free_list == NULL) {
    96026b28:	90000283 	adrp	x3, 96076000 <free_dram_block+0x38e8>
    96026b2c:	91284063 	add	x3, x3, #0xa10
	if (size > heap_info[heap_type].max_size) {
    96026b30:	d2800507 	mov	x7, #0x28                  	// #40
	if (heap_info[TEGRABL_HEAP_DMA].free_list == NULL) {
    96026b34:	f9402466 	ldr	x6, [x3, #72]
		type = TEGRABL_HEAP_DEFAULT;
    96026b38:	f10000df 	cmp	x6, #0x0
    96026b3c:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
	if (size > heap_info[heap_type].max_size) {
    96026b40:	2a0003e6 	mov	w6, w0
    96026b44:	9b077cc6 	mul	x6, x6, x7
    96026b48:	f8666866 	ldr	x6, [x3, x6]
    96026b4c:	eb06005f 	cmp	x2, x6
    96026b50:	54000168 	b.hi	96026b7c <tegrabl_alloc_align+0x5c>  // b.pmore
	if (alignment > heap_info[heap_type].max_size) {
    96026b54:	eb06003f 	cmp	x1, x6
    96026b58:	54000128 	b.hi	96026b7c <tegrabl_alloc_align+0x5c>  // b.pmore
	size_t max_size = size + alignment;
    96026b5c:	8b020023 	add	x3, x1, x2
	if (max_size > heap_info[heap_type].max_size) {
    96026b60:	eb06007f 	cmp	x3, x6
    96026b64:	540000c8 	b.hi	96026b7c <tegrabl_alloc_align+0x5c>  // b.pmore
	if (max_size < size) {
    96026b68:	eb03005f 	cmp	x2, x3
    96026b6c:	54000088 	b.hi	96026b7c <tegrabl_alloc_align+0x5c>  // b.pmore
	if (max_size < alignment) {
    96026b70:	eb03003f 	cmp	x1, x3
    96026b74:	54000048 	b.hi	96026b7c <tegrabl_alloc_align+0x5c>  // b.pmore

	if (!is_size_alignment_valid(type, alignment, size)) {
		return NULL;
	}

	return tegrabl_memalign_generic(type, alignment, size);
    96026b78:	17fffeac 	b	96026628 <tegrabl_memalign_generic>
}
    96026b7c:	d2800000 	mov	x0, #0x0                   	// #0
    96026b80:	d65f03c0 	ret

0000000096026b84 <tegrabl_memalign>:
	if (size > heap_info[heap_type].max_size) {
    96026b84:	90000282 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96026b88:	f9450843 	ldr	x3, [x2, #2576]
    96026b8c:	eb03003f 	cmp	x1, x3
    96026b90:	540001c8 	b.hi	96026bc8 <tegrabl_memalign+0x44>  // b.pmore
	if (alignment > heap_info[heap_type].max_size) {
    96026b94:	eb03001f 	cmp	x0, x3
    96026b98:	54000188 	b.hi	96026bc8 <tegrabl_memalign+0x44>  // b.pmore
	size_t max_size = size + alignment;
    96026b9c:	8b010002 	add	x2, x0, x1
	if (max_size > heap_info[heap_type].max_size) {
    96026ba0:	eb03005f 	cmp	x2, x3
    96026ba4:	54000128 	b.hi	96026bc8 <tegrabl_memalign+0x44>  // b.pmore
	if (max_size < size) {
    96026ba8:	eb02003f 	cmp	x1, x2
    96026bac:	540000e8 	b.hi	96026bc8 <tegrabl_memalign+0x44>  // b.pmore
	if (max_size < alignment) {
    96026bb0:	eb02001f 	cmp	x0, x2
    96026bb4:	540000a8 	b.hi	96026bc8 <tegrabl_memalign+0x44>  // b.pmore
{
	if (!is_size_alignment_valid(TEGRABL_HEAP_DEFAULT, alignment, size)) {
		return NULL;
	}

	return tegrabl_memalign_generic(TEGRABL_HEAP_DEFAULT, alignment, size);
    96026bb8:	aa0103e2 	mov	x2, x1
    96026bbc:	aa0003e1 	mov	x1, x0
    96026bc0:	52800000 	mov	w0, #0x0                   	// #0
    96026bc4:	17fffe99 	b	96026628 <tegrabl_memalign_generic>
}
    96026bc8:	d2800000 	mov	x0, #0x0                   	// #0
    96026bcc:	d65f03c0 	ret

0000000096026bd0 <tegrabl_blob_init>:
	return err;
}

tegrabl_error_t tegrabl_blob_init(char *part_name, uint8_t *bptr,
								  tegrabl_blob_handle *bhdl)
{
    96026bd0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
    96026bd4:	910003fd 	mov	x29, sp
    96026bd8:	a90153f3 	stp	x19, x20, [sp, #16]
    96026bdc:	a9025bf5 	stp	x21, x22, [sp, #32]
    96026be0:	aa0103f6 	mov	x22, x1
    96026be4:	a90363f7 	stp	x23, x24, [sp, #48]
    96026be8:	aa0003f8 	mov	x24, x0
    96026bec:	a9046bf9 	stp	x25, x26, [sp, #64]

	hdr_size =	sizeof(struct signed_header) > sizeof(struct blob_header) ?
			   sizeof(struct signed_header) : sizeof(struct blob_header);

	bh_size = sizeof(struct blob_info);
	bh = (struct blob_info *)tegrabl_malloc(bh_size);
    96026bf0:	d2800300 	mov	x0, #0x18                  	// #24
{
    96026bf4:	a90573fb 	stp	x27, x28, [sp, #80]
    96026bf8:	aa0203fb 	mov	x27, x2
	decompressor *decomp = NULL;
    96026bfc:	f9003bbf 	str	xzr, [x29, #112]
	bh = (struct blob_info *)tegrabl_malloc(bh_size);
    96026c00:	97ffff9e 	bl	96026a78 <tegrabl_malloc>
    96026c04:	aa0003f5 	mov	x21, x0
	if (bh == NULL) {
    96026c08:	b50002a0 	cbnz	x0, 96026c5c <tegrabl_blob_init+0x8c>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026c0c:	52800074 	mov	w20, #0x3                   	// #3
	size_t header_asize = 0;
    96026c10:	d2800016 	mov	x22, #0x0                   	// #0
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026c14:	72aa4a54 	movk	w20, #0x5252, lsl #16
		pr_error("%s:%d not enough memory\n", __func__, __LINE__);
    96026c18:	52801982 	mov	w2, #0xcc                  	// #204
    96026c1c:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026c20:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026c24:	9115fc21 	add	x1, x1, #0x57f
    96026c28:	9118a800 	add	x0, x0, #0x62a
    96026c2c:	97ffee91 	bl	96022670 <tegrabl_printf>
	void *header = NULL;
    96026c30:	d2800013 	mov	x19, #0x0                   	// #0

	bh->start = (uint8_t *)header;
	bh->data_mem_size = (uint32_t)data_size;
fail:
	if (error != TEGRABL_NO_ERROR) {
		if (header && header_asize) {
    96026c34:	f100027f 	cmp	x19, #0x0
    96026c38:	fa401ac4 	ccmp	x22, #0x0, #0x4, ne  // ne = any
    96026c3c:	54000060 	b.eq	96026c48 <tegrabl_blob_init+0x78>  // b.none
			tegrabl_free(header);
    96026c40:	aa1303e0 	mov	x0, x19
    96026c44:	97ffff9d 	bl	96026ab8 <tegrabl_free>
		}
		if (bh) {
    96026c48:	b40016f5 	cbz	x21, 96026f24 <tegrabl_blob_init+0x354>
			tegrabl_free(bh);
    96026c4c:	aa1503e0 	mov	x0, x21
		}
		bh = NULL;
    96026c50:	d2800015 	mov	x21, #0x0                   	// #0
			tegrabl_free(bh);
    96026c54:	97ffff99 	bl	96026ab8 <tegrabl_free>
    96026c58:	140000b3 	b	96026f24 <tegrabl_blob_init+0x354>
	memset(bh, 0, sizeof(struct blob_info));
    96026c5c:	d2800302 	mov	x2, #0x18                  	// #24
    96026c60:	52800001 	mov	w1, #0x0                   	// #0
    96026c64:	94000c71 	bl	96029e28 <memset>
	bh->info_mem_size = bh_size;
    96026c68:	52800300 	mov	w0, #0x18                  	// #24
    96026c6c:	b90012a0 	str	w0, [x21, #16]
	if (bptr)
    96026c70:	b5000456 	cbnz	x22, 96026cf8 <tegrabl_blob_init+0x128>
		error = tegrabl_partition_open(part_name, &partition);
    96026c74:	9101e3a1 	add	x1, x29, #0x78
    96026c78:	aa1803e0 	mov	x0, x24
    96026c7c:	940001e0 	bl	960273fc <tegrabl_partition_open>
    96026c80:	2a0003f4 	mov	w20, w0
		if (TEGRABL_NO_ERROR != error) {
    96026c84:	340000a0 	cbz	w0, 96026c98 <tegrabl_blob_init+0xc8>
			pr_error("Failed to open partition");
    96026c88:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026c8c:	91191800 	add	x0, x0, #0x646
    96026c90:	97ffee78 	bl	96022670 <tegrabl_printf>
    96026c94:	17ffffe7 	b	96026c30 <tegrabl_blob_init+0x60>
		header = tegrabl_malloc(hdr_size);
    96026c98:	d2800600 	mov	x0, #0x30                  	// #48
    96026c9c:	97ffff77 	bl	96026a78 <tegrabl_malloc>
    96026ca0:	aa0003f3 	mov	x19, x0
		if (header == NULL) {
    96026ca4:	b5000140 	cbnz	x0, 96026ccc <tegrabl_blob_init+0xfc>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026ca8:	52800074 	mov	w20, #0x3                   	// #3
			pr_error("%s: Not enough memory\n", __func__);
    96026cac:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026cb0:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026cb4:	9115fc21 	add	x1, x1, #0x57f
    96026cb8:	91198800 	add	x0, x0, #0x662
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026cbc:	72aa4a54 	movk	w20, #0x5252, lsl #16
			pr_error("%s: Not enough memory\n", __func__);
    96026cc0:	97ffee6c 	bl	96022670 <tegrabl_printf>
	size_t header_asize = 0;
    96026cc4:	d2800016 	mov	x22, #0x0                   	// #0
    96026cc8:	17ffffdb 	b	96026c34 <tegrabl_blob_init+0x64>
		error = tegrabl_partition_read(&partition, (void *)header, hdr_size);
    96026ccc:	aa0003e1 	mov	x1, x0
    96026cd0:	d2800602 	mov	x2, #0x30                  	// #48
    96026cd4:	9101e3a0 	add	x0, x29, #0x78
    96026cd8:	94000258 	bl	96027638 <tegrabl_partition_read>
    96026cdc:	2a0003f4 	mov	w20, w0
		if (TEGRABL_NO_ERROR != error) {
    96026ce0:	34000480 	cbz	w0, 96026d70 <tegrabl_blob_init+0x1a0>
			pr_error("Failed to read partition");
    96026ce4:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
		header_asize = hdr_size;
    96026ce8:	d2800616 	mov	x22, #0x30                  	// #48
			pr_error("Failed to read partition");
    96026cec:	9119f000 	add	x0, x0, #0x67c
    96026cf0:	97ffee60 	bl	96022670 <tegrabl_printf>
			goto fail;
    96026cf4:	17ffffd0 	b	96026c34 <tegrabl_blob_init+0x64>
    96026cf8:	aa1603f3 	mov	x19, x22
	size_t header_asize = 0;
    96026cfc:	d2800014 	mov	x20, #0x0                   	// #0
	if (!strncmp((char *)shdr->magic, SIGNED_UPDATE_MAGIC,
    96026d00:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026d04:	d2800282 	mov	x2, #0x14                  	// #20
    96026d08:	911a6021 	add	x1, x1, #0x698
    96026d0c:	aa1303e0 	mov	x0, x19
    96026d10:	94000d5b 	bl	9602a27c <strncmp>
    96026d14:	35000320 	cbnz	w0, 96026d78 <tegrabl_blob_init+0x1a8>
		bh->offset = sizeof(struct signed_header);
    96026d18:	52800380 	mov	w0, #0x1c                  	// #28
		data_size = shdr->actual_blob_size +
    96026d1c:	b9401677 	ldr	w23, [x19, #20]
		bh->offset = sizeof(struct signed_header);
    96026d20:	b9000aa0 	str	w0, [x21, #8]
		data_size = shdr->actual_blob_size +
    96026d24:	b9401a60 	ldr	w0, [x19, #24]
    96026d28:	0b0002f7 	add	w23, w23, w0
    96026d2c:	110072f7 	add	w23, w23, #0x1c
	if (!bptr) {
    96026d30:	b5000f56 	cbnz	x22, 96026f18 <tegrabl_blob_init+0x348>
		tegrabl_free(header);
    96026d34:	aa1303e0 	mov	x0, x19
		header = tegrabl_malloc(data_size);
    96026d38:	2a1703f6 	mov	w22, w23
		tegrabl_free(header);
    96026d3c:	97ffff5f 	bl	96026ab8 <tegrabl_free>
		header = tegrabl_malloc(data_size);
    96026d40:	aa1603e0 	mov	x0, x22
    96026d44:	97ffff4d 	bl	96026a78 <tegrabl_malloc>
    96026d48:	aa0003f3 	mov	x19, x0
		if (header == NULL) {
    96026d4c:	b50003c0 	cbnz	x0, 96026dc4 <tegrabl_blob_init+0x1f4>
			pr_error("%s: Not enough memory\n", __func__);
    96026d50:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026d54:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026d58:	9115fc21 	add	x1, x1, #0x57f
    96026d5c:	91198800 	add	x0, x0, #0x662
    96026d60:	aa1403f6 	mov	x22, x20
    96026d64:	97ffee43 	bl	96022670 <tegrabl_printf>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026d68:	52800074 	mov	w20, #0x3                   	// #3
    96026d6c:	14000014 	b	96026dbc <tegrabl_blob_init+0x1ec>
		header_asize = hdr_size;
    96026d70:	d2800614 	mov	x20, #0x30                  	// #48
    96026d74:	17ffffe3 	b	96026d00 <tegrabl_blob_init+0x130>
		if (!strncmp((char *)blobheader->magic, UPDATE_MAGIC,
    96026d78:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026d7c:	d2800202 	mov	x2, #0x10                  	// #16
    96026d80:	911ab421 	add	x1, x1, #0x6ad
    96026d84:	aa1303e0 	mov	x0, x19
    96026d88:	94000d3d 	bl	9602a27c <strncmp>
    96026d8c:	35000080 	cbnz	w0, 96026d9c <tegrabl_blob_init+0x1cc>
			data_size = blobheader->size;
    96026d90:	b9401677 	ldr	w23, [x19, #20]
			bh->offset = 0;
    96026d94:	b9000abf 	str	wzr, [x21, #8]
    96026d98:	17ffffe6 	b	96026d30 <tegrabl_blob_init+0x160>
			goto fail;
    96026d9c:	aa1403f6 	mov	x22, x20
			error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96026da0:	52800054 	mov	w20, #0x2                   	// #2
			pr_error("%s: %s partition does not have valid Blob\n",
    96026da4:	aa1803e2 	mov	x2, x24
    96026da8:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026dac:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026db0:	9115fc21 	add	x1, x1, #0x57f
    96026db4:	911af800 	add	x0, x0, #0x6be
    96026db8:	97ffee2e 	bl	96022670 <tegrabl_printf>
			error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026dbc:	72aa4a54 	movk	w20, #0x5252, lsl #16
    96026dc0:	17ffff9d 	b	96026c34 <tegrabl_blob_init+0x64>
		error = tegrabl_partition_seek(&partition, 0,
    96026dc4:	52800002 	mov	w2, #0x0                   	// #0
    96026dc8:	d2800001 	mov	x1, #0x0                   	// #0
    96026dcc:	9101e3a0 	add	x0, x29, #0x78
    96026dd0:	9400024c 	bl	96027700 <tegrabl_partition_seek>
    96026dd4:	2a0003f4 	mov	w20, w0
		if (TEGRABL_NO_ERROR != error) {
    96026dd8:	340000a0 	cbz	w0, 96026dec <tegrabl_blob_init+0x21c>
			pr_error("Failed to seek partition");
    96026ddc:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026de0:	911bb000 	add	x0, x0, #0x6ec
			pr_error("Failed to read partition");
    96026de4:	97ffee23 	bl	96022670 <tegrabl_printf>
			goto fail;
    96026de8:	17ffff93 	b	96026c34 <tegrabl_blob_init+0x64>
		error = tegrabl_partition_read(&partition, (void *)header, data_size);
    96026dec:	aa1603e2 	mov	x2, x22
    96026df0:	aa1303e1 	mov	x1, x19
    96026df4:	9101e3a0 	add	x0, x29, #0x78
    96026df8:	94000210 	bl	96027638 <tegrabl_partition_read>
    96026dfc:	2a0003f4 	mov	w20, w0
		if (TEGRABL_NO_ERROR != error) {
    96026e00:	34000080 	cbz	w0, 96026e10 <tegrabl_blob_init+0x240>
			pr_error("Failed to read partition");
    96026e04:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026e08:	9119f000 	add	x0, x0, #0x67c
    96026e0c:	17fffff6 	b	96026de4 <tegrabl_blob_init+0x214>
				(uint8_t *)header + blobheader->entries_offset, &decomp)) {
    96026e10:	b9401a60 	ldr	w0, [x19, #24]
		if (is_compressed_content(
    96026e14:	9101c3a1 	add	x1, x29, #0x70
    96026e18:	8b000260 	add	x0, x19, x0
    96026e1c:	94001cf7 	bl	9602e1f8 <is_compressed_content>
    96026e20:	72001c1f 	tst	w0, #0xff
    96026e24:	540007a0 	b.eq	96026f18 <tegrabl_blob_init+0x348>  // b.none
			} else if ((blobheader->entries_offset != LEGACY_BLOB_HEADER_LEN) && ( blobheader->uncomp_size < blobheader->entries_offset)){
    96026e28:	b9401a60 	ldr	w0, [x19, #24]
    96026e2c:	7100901f 	cmp	w0, #0x24
    96026e30:	54000080 	b.eq	96026e40 <tegrabl_blob_init+0x270>  // b.none
    96026e34:	b9402661 	ldr	w1, [x19, #36]
    96026e38:	6b01001f 	cmp	w0, w1
    96026e3c:	54000868 	b.hi	96026f48 <tegrabl_blob_init+0x378>  // b.pmore
			if (data_size < blobheader->entries_offset){
    96026e40:	6b17001f 	cmp	w0, w23
    96026e44:	54000888 	b.hi	96026f54 <tegrabl_blob_init+0x384>  // b.pmore
			pr_info("decompressing %s blob ...\n", part_name);
    96026e48:	aa1803e1 	mov	x1, x24
    96026e4c:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026e50:	911c2000 	add	x0, x0, #0x708
    96026e54:	97ffee07 	bl	96022670 <tegrabl_printf>
			error = blob_decompress(&blob_buf, (uint32_t *)&blob_asize, header,
    96026e58:	b9401a7a 	ldr	w26, [x19, #24]
	uint32_t decomp_size = 0;
    96026e5c:	b9006fbf 	str	wzr, [x29, #108]
	if (blobheader->entries_offset == LEGACY_BLOB_HEADER_LEN) {
    96026e60:	7100935f 	cmp	w26, #0x24
			error = blob_decompress(&blob_buf, (uint32_t *)&blob_asize, header,
    96026e64:	f9403bbc 	ldr	x28, [x29, #112]
	if (blobheader->entries_offset == LEGACY_BLOB_HEADER_LEN) {
    96026e68:	54000240 	b.eq	96026eb0 <tegrabl_blob_init+0x2e0>  // b.none
		outbuf_size = blobheader->uncomp_size;
    96026e6c:	b9402679 	ldr	w25, [x19, #36]
	outbuf = tegrabl_malloc(outbuf_size);
    96026e70:	2a1903e0 	mov	w0, w25
    96026e74:	97ffff01 	bl	96026a78 <tegrabl_malloc>
    96026e78:	aa0003f8 	mov	x24, x0
	if (NULL == outbuf) {
    96026e7c:	b50001e0 	cbnz	x0, 96026eb8 <tegrabl_blob_init+0x2e8>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026e80:	52800074 	mov	w20, #0x3                   	// #3
		pr_error("%s: Not enough memory\n", __func__);
    96026e84:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96026e88:	72aa4a54 	movk	w20, #0x5252, lsl #16
		pr_error("%s: Not enough memory\n", __func__);
    96026e8c:	9115bc21 	add	x1, x1, #0x56f
    96026e90:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026e94:	91198800 	add	x0, x0, #0x662
    96026e98:	97ffedf6 	bl	96022670 <tegrabl_printf>
				pr_error("failed to decompress blob, err=%d\n", error);
    96026e9c:	2a1403e1 	mov	w1, w20
    96026ea0:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026ea4:	911d2000 	add	x0, x0, #0x748
    96026ea8:	97ffedf2 	bl	96022670 <tegrabl_printf>
				goto fail;
    96026eac:	17ffff62 	b	96026c34 <tegrabl_blob_init+0x64>
		outbuf_size = MAX_BLOB_SIZE;
    96026eb0:	52a07819 	mov	w25, #0x3c00000             	// #62914560
    96026eb4:	17ffffef 	b	96026e70 <tegrabl_blob_init+0x2a0>
	memmove(outbuf, inbuf, hdr_size);
    96026eb8:	2a1a03f4 	mov	w20, w26
    96026ebc:	aa1303e1 	mov	x1, x19
    96026ec0:	aa1403e2 	mov	x2, x20
    96026ec4:	94000c97 	bl	9602a120 <memmove>
	decomp_size = outbuf_size;
    96026ec8:	910243a4 	add	x4, x29, #0x90
	err = do_decompress(decomp, (uint8_t *)inbuf + hdr_size,
    96026ecc:	8b140303 	add	x3, x24, x20
    96026ed0:	8b140261 	add	x1, x19, x20
    96026ed4:	4b1a02e2 	sub	w2, w23, w26
    96026ed8:	aa1c03e0 	mov	x0, x28
	decomp_size = outbuf_size;
    96026edc:	b81dcc99 	str	w25, [x4, #-36]!
	err = do_decompress(decomp, (uint8_t *)inbuf + hdr_size,
    96026ee0:	94001cee 	bl	9602e298 <do_decompress>
    96026ee4:	2a0003f4 	mov	w20, w0
	if (TEGRABL_NO_ERROR != err) {
    96026ee8:	34000100 	cbz	w0, 96026f08 <tegrabl_blob_init+0x338>
		pr_error("decompression failed (err=%d)\n", err);
    96026eec:	2a0003e1 	mov	w1, w0
    96026ef0:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96026ef4:	911c9800 	add	x0, x0, #0x726
    96026ef8:	97ffedde 	bl	96022670 <tegrabl_printf>
		tegrabl_free(outbuf);
    96026efc:	aa1803e0 	mov	x0, x24
    96026f00:	97fffeee 	bl	96026ab8 <tegrabl_free>
    96026f04:	17ffffe6 	b	96026e9c <tegrabl_blob_init+0x2cc>
	blobheader->size = outbuf_size;
    96026f08:	b9001719 	str	w25, [x24, #20]
			tegrabl_free(header);
    96026f0c:	aa1303e0 	mov	x0, x19
    96026f10:	aa1803f3 	mov	x19, x24
    96026f14:	97fffee9 	bl	96026ab8 <tegrabl_free>
	bh->data_mem_size = (uint32_t)data_size;
    96026f18:	52800014 	mov	w20, #0x0                   	// #0
	bh->start = (uint8_t *)header;
    96026f1c:	f90002b3 	str	x19, [x21]
	bh->data_mem_size = (uint32_t)data_size;
    96026f20:	b9000eb7 	str	w23, [x21, #12]
	}

	*bhdl = (tegrabl_blob_handle)bh;
    96026f24:	f9000375 	str	x21, [x27]
	return error;
}
    96026f28:	2a1403e0 	mov	w0, w20
    96026f2c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96026f30:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96026f34:	a94363f7 	ldp	x23, x24, [sp, #48]
    96026f38:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96026f3c:	a94573fb 	ldp	x27, x28, [sp, #80]
    96026f40:	a8c97bfd 	ldp	x29, x30, [sp], #144
    96026f44:	d65f03c0 	ret
				return TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_BLOB_TYPE_UNCOMP_SIZE);
    96026f48:	52804054 	mov	w20, #0x202                 	// #514
				return TEGRABL_ERROR(TEGRABL_ERR_INVALID, TEGRABL_BLOB_TYPE_DATA_SIZE);
    96026f4c:	72aa4a54 	movk	w20, #0x5252, lsl #16
    96026f50:	17fffff6 	b	96026f28 <tegrabl_blob_init+0x358>
    96026f54:	52806054 	mov	w20, #0x302                 	// #770
    96026f58:	17fffffd 	b	96026f4c <tegrabl_blob_init+0x37c>

0000000096026f5c <tegrabl_blob_get_type>:
{
	struct blob_info *bh = (struct blob_info *)b;
	struct blob_header *blobheader = NULL;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (!(bh && bh->start)) {
    96026f5c:	b4000140 	cbz	x0, 96026f84 <tegrabl_blob_get_type+0x28>
    96026f60:	f9400002 	ldr	x2, [x0]
    96026f64:	b4000102 	cbz	x2, 96026f84 <tegrabl_blob_get_type+0x28>
	}

	blobheader = (struct blob_header *)(bh->start + bh->offset);

	pr_debug("%s: blob-type is %d\n", __func__, blobheader->type);
	if (type) {
    96026f68:	b40000a1 	cbz	x1, 96026f7c <tegrabl_blob_get_type+0x20>
	blobheader = (struct blob_header *)(bh->start + bh->offset);
    96026f6c:	b9400800 	ldr	w0, [x0, #8]
		*type = blobheader->type;
    96026f70:	8b000042 	add	x2, x2, x0
    96026f74:	b9402040 	ldr	w0, [x2, #32]
    96026f78:	b9000020 	str	w0, [x1]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96026f7c:	52800000 	mov	w0, #0x0                   	// #0
	}
fail:
	return error;
    96026f80:	14000003 	b	96026f8c <tegrabl_blob_get_type+0x30>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96026f84:	52800040 	mov	w0, #0x2                   	// #2
    96026f88:	72aa4a40 	movk	w0, #0x5252, lsl #16
}
    96026f8c:	d65f03c0 	ret

0000000096026f90 <tegrabl_blob_get_num_entries>:
{
	struct blob_info *bh = (struct blob_info *)b;
	struct blob_header *blobheader = NULL;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (!(bh && bh->start)) {
    96026f90:	b4000140 	cbz	x0, 96026fb8 <tegrabl_blob_get_num_entries+0x28>
    96026f94:	f9400002 	ldr	x2, [x0]
    96026f98:	b4000102 	cbz	x2, 96026fb8 <tegrabl_blob_get_num_entries+0x28>
		goto fail;
	}

	blobheader = (struct blob_header *)(bh->start + bh->offset);

	if (num_entries) {
    96026f9c:	b40000a1 	cbz	x1, 96026fb0 <tegrabl_blob_get_num_entries+0x20>
	blobheader = (struct blob_header *)(bh->start + bh->offset);
    96026fa0:	b9400800 	ldr	w0, [x0, #8]
		*num_entries = blobheader->num_entries;
    96026fa4:	8b000042 	add	x2, x2, x0
    96026fa8:	b9401c40 	ldr	w0, [x2, #28]
    96026fac:	b9000020 	str	w0, [x1]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96026fb0:	52800000 	mov	w0, #0x0                   	// #0
	}
	pr_debug("%s: number of entries is %d\n", __func__, *num_entries);
fail:
	return error;
    96026fb4:	14000003 	b	96026fc0 <tegrabl_blob_get_num_entries+0x30>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96026fb8:	52800040 	mov	w0, #0x2                   	// #2
    96026fbc:	72aa4a40 	movk	w0, #0x5252, lsl #16
}
    96026fc0:	d65f03c0 	ret

0000000096026fc4 <tegrabl_blob_get_entry>:
	struct blob_info *bh = (struct blob_info *)b;
	struct blob_header *blobheader = NULL;
	union blob_entry *blobentry = NULL;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (!(bh && bh->start)) {
    96026fc4:	b4000400 	cbz	x0, 96027044 <tegrabl_blob_get_entry+0x80>
    96026fc8:	f9400003 	ldr	x3, [x0]
    96026fcc:	b40003c3 	cbz	x3, 96027044 <tegrabl_blob_get_entry+0x80>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	blobheader = (struct blob_header *)(bh->start + bh->offset);
    96026fd0:	b9400800 	ldr	w0, [x0, #8]
    96026fd4:	8b000060 	add	x0, x3, x0

	blobentry = (union blob_entry *)((uint8_t *)blobheader +
									blobheader->entries_offset);
    96026fd8:	b9401803 	ldr	w3, [x0, #24]
	blobentry = (union blob_entry *)((uint8_t *)blobheader +
    96026fdc:	8b030003 	add	x3, x0, x3

	switch (blobheader->type) {
    96026fe0:	b9402000 	ldr	w0, [x0, #32]
    96026fe4:	340001e0 	cbz	w0, 96027020 <tegrabl_blob_get_entry+0x5c>
    96026fe8:	7100041f 	cmp	w0, #0x1
    96026fec:	54000240 	b.eq	96027034 <tegrabl_blob_get_entry+0x70>  // b.none
{
    96026ff0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	case BLOB_BMP:
		blobentry = (union blob_entry *)((struct tegrabl_bmp_entry *)blobentry
										 + index);
		break;
	default:
		pr_error("%s: blobtype %d is not valid\n", __func__, blobheader->type);
    96026ff4:	2a0003e2 	mov	w2, w0
    96026ff8:	d00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96026ffc:	d00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
{
    96027000:	910003fd 	mov	x29, sp
		pr_error("%s: blobtype %d is not valid\n", __func__, blobheader->type);
    96027004:	91164421 	add	x1, x1, #0x591
    96027008:	91171000 	add	x0, x0, #0x5c4
    9602700c:	97ffed99 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96027010:	52800040 	mov	w0, #0x2                   	// #2
    96027014:	72aa4a40 	movk	w0, #0x5252, lsl #16
	if (entry) {
		*entry = blobentry;
	}
fail:
	return error;
}
    96027018:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602701c:	d65f03c0 	ret
		blobentry = (union blob_entry *)((struct tegrabl_image_entry *)blobentry
    96027020:	52800f00 	mov	w0, #0x78                  	// #120
		blobentry = (union blob_entry *)((struct tegrabl_bmp_entry *)blobentry
    96027024:	9ba00c21 	umaddl	x1, w1, w0, x3
	if (entry) {
    96027028:	b50000a2 	cbnz	x2, 9602703c <tegrabl_blob_get_entry+0x78>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    9602702c:	52800000 	mov	w0, #0x0                   	// #0
}
    96027030:	d65f03c0 	ret
		blobentry = (union blob_entry *)((struct tegrabl_bmp_entry *)blobentry
    96027034:	52800680 	mov	w0, #0x34                  	// #52
    96027038:	17fffffb 	b	96027024 <tegrabl_blob_get_entry+0x60>
		*entry = blobentry;
    9602703c:	f9000041 	str	x1, [x2]
    96027040:	17fffffb 	b	9602702c <tegrabl_blob_get_entry+0x68>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96027044:	52800040 	mov	w0, #0x2                   	// #2
    96027048:	72aa4a40 	movk	w0, #0x5252, lsl #16
	return error;
    9602704c:	d65f03c0 	ret

0000000096027050 <tegrabl_blob_get_entry_data>:

tegrabl_error_t tegrabl_blob_get_entry_data(tegrabl_blob_handle b,
	uint32_t index, uint8_t **data, uint32_t *size)
{
    96027050:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	struct blob_info *bh = (struct blob_info *)b;
	uint32_t offset = 0;
	uint32_t length = 0;
	tegrabl_blob_type_t type = BLOB_NONE;
    96027054:	52800044 	mov	w4, #0x2                   	// #2
{
    96027058:	910003fd 	mov	x29, sp
    9602705c:	a90153f3 	stp	x19, x20, [sp, #16]
    96027060:	a9025bf5 	stp	x21, x22, [sp, #32]
	tegrabl_blob_type_t type = BLOB_NONE;
    96027064:	b9003fa4 	str	w4, [x29, #60]
	struct blob_header *blob_header = NULL;
	union blob_entry *blob_entry = NULL;
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (!(bh && bh->start)) {
    96027068:	b4000260 	cbz	x0, 960270b4 <tegrabl_blob_get_entry_data+0x64>
    9602706c:	f9400004 	ldr	x4, [x0]
    96027070:	b4000224 	cbz	x4, 960270b4 <tegrabl_blob_get_entry_data+0x64>
    96027074:	aa0003f4 	mov	x20, x0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	blob_header = (struct blob_header *)(bh->start + bh->offset);
    96027078:	b9400800 	ldr	w0, [x0, #8]
    9602707c:	aa0203f6 	mov	x22, x2
    96027080:	aa0303f5 	mov	x21, x3
    96027084:	8b000080 	add	x0, x4, x0

	blob_entry = (union blob_entry *)((uint8_t *)blob_header +
									blob_header->entries_offset);

	switch (blob_header->type) {
    96027088:	b9402002 	ldr	w2, [x0, #32]
									blob_header->entries_offset);
    9602708c:	b9401813 	ldr	w19, [x0, #24]
	blob_entry = (union blob_entry *)((uint8_t *)blob_header +
    96027090:	8b130013 	add	x19, x0, x19
	switch (blob_header->type) {
    96027094:	340001c2 	cbz	w2, 960270cc <tegrabl_blob_get_entry_data+0x7c>
    96027098:	7100045f 	cmp	w2, #0x1
    9602709c:	54000460 	b.eq	96027128 <tegrabl_blob_get_entry_data+0xd8>  // b.none
	case BLOB_BMP:
		blob_entry = (union blob_entry *)((struct tegrabl_bmp_entry *)
										  blob_entry + index);
		break;
	default:
		pr_error("%s: blobtype %d is not valid\n", __func__, blob_header->type);
    960270a0:	b00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    960270a4:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960270a8:	9116a021 	add	x1, x1, #0x5a8
    960270ac:	91171000 	add	x0, x0, #0x5c4
    960270b0:	97ffed70 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960270b4:	52800040 	mov	w0, #0x2                   	// #2
    960270b8:	72aa4a40 	movk	w0, #0x5252, lsl #16
	if (size) {
		*size = length;
	}
fail:
	return error;
}
    960270bc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960270c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960270c4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960270c8:	d65f03c0 	ret
		blob_entry = (union blob_entry *)((struct tegrabl_image_entry *)
    960270cc:	52800f00 	mov	w0, #0x78                  	// #120
		blob_entry = (union blob_entry *)((struct tegrabl_bmp_entry *)
    960270d0:	9ba04c33 	umaddl	x19, w1, w0, x19
	tegrabl_blob_get_type((tegrabl_blob_handle)bh, &type);
    960270d4:	9100f3a1 	add	x1, x29, #0x3c
    960270d8:	aa1403e0 	mov	x0, x20
    960270dc:	97ffffa0 	bl	96026f5c <tegrabl_blob_get_type>
	print_entry(__func__, type, blob_entry);
    960270e0:	b9403fa2 	ldr	w2, [x29, #60]
	switch(t) {
    960270e4:	7100045f 	cmp	w2, #0x1
    960270e8:	540000c9 	b.ls	96027100 <tegrabl_blob_get_entry_data+0xb0>  // b.plast
			pr_error("%s: blobtype %d is not supported\n", func, t);
    960270ec:	b00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    960270f0:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960270f4:	9116a021 	add	x1, x1, #0x5a8
    960270f8:	91179400 	add	x0, x0, #0x5e5
    960270fc:	97ffed5d 	bl	96022670 <tegrabl_printf>
	switch(t) {
    96027100:	b9403fa0 	ldr	w0, [x29, #60]
    96027104:	34000160 	cbz	w0, 96027130 <tegrabl_blob_get_entry_data+0xe0>
    96027108:	7100041f 	cmp	w0, #0x1
    9602710c:	54000280 	b.eq	9602715c <tegrabl_blob_get_entry_data+0x10c>  // b.none
			pr_error("%s: BlobType not supported.\n", __func__);
    96027110:	b00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96027114:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96027118:	91158c21 	add	x1, x1, #0x563
    9602711c:	91182800 	add	x0, x0, #0x60a
    96027120:	97ffed54 	bl	96022670 <tegrabl_printf>
    96027124:	17ffffe4 	b	960270b4 <tegrabl_blob_get_entry_data+0x64>
		blob_entry = (union blob_entry *)((struct tegrabl_bmp_entry *)
    96027128:	52800680 	mov	w0, #0x34                  	// #52
    9602712c:	17ffffe9 	b	960270d0 <tegrabl_blob_get_entry_data+0x80>
			*length = e->uentry.image_size;
    96027130:	29450a60 	ldp	w0, w2, [x19, #40]
	if (data) {
    96027134:	b40000d6 	cbz	x22, 9602714c <tegrabl_blob_get_entry_data+0xfc>
		*data = bh->start + bh->offset + offset;
    96027138:	b9400a81 	ldr	w1, [x20, #8]
    9602713c:	8b204020 	add	x0, x1, w0, uxtw
    96027140:	f9400281 	ldr	x1, [x20]
    96027144:	8b000020 	add	x0, x1, x0
    96027148:	f90002c0 	str	x0, [x22]
	if (size) {
    9602714c:	b4000055 	cbz	x21, 96027154 <tegrabl_blob_get_entry_data+0x104>
		*size = length;
    96027150:	b90002a2 	str	w2, [x21]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    96027154:	52800000 	mov	w0, #0x0                   	// #0
	return error;
    96027158:	17ffffd9 	b	960270bc <tegrabl_blob_get_entry_data+0x6c>
			*length = e->bentry.bmp_size;
    9602715c:	29408a60 	ldp	w0, w2, [x19, #4]
    96027160:	17fffff5 	b	96027134 <tegrabl_blob_get_entry_data+0xe4>

0000000096027164 <tegrabl_blob_close>:

void tegrabl_blob_close(tegrabl_blob_handle b)
{
	struct blob_info *bh = (struct blob_info *)b;
	if (!bh) {
    96027164:	b40001c0 	cbz	x0, 9602719c <tegrabl_blob_close+0x38>
{
    96027168:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602716c:	910003fd 	mov	x29, sp
    96027170:	f9000bf3 	str	x19, [sp, #16]
    96027174:	aa0003f3 	mov	x19, x0
		return;
	}

	if (bh->start && bh->data_mem_size) {
    96027178:	f9400000 	ldr	x0, [x0]
    9602717c:	b4000080 	cbz	x0, 9602718c <tegrabl_blob_close+0x28>
    96027180:	b9400e61 	ldr	w1, [x19, #12]
    96027184:	34000041 	cbz	w1, 9602718c <tegrabl_blob_close+0x28>
		tegrabl_free(bh->start);
    96027188:	97fffe4c 	bl	96026ab8 <tegrabl_free>
	}

	tegrabl_free(bh);
    9602718c:	aa1303e0 	mov	x0, x19
}
    96027190:	f9400bf3 	ldr	x19, [sp, #16]
    96027194:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_free(bh);
    96027198:	17fffe48 	b	96026ab8 <tegrabl_free>
    9602719c:	d65f03c0 	ret

00000000960271a0 <tegrabl_load_bmp_blob>:
			return BMPRES_480P;
	}
}

tegrabl_error_t tegrabl_load_bmp_blob(char* part_name)
{
    960271a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	tegrabl_blob_type_t btype = BLOB_NONE;
    960271a4:	52800041 	mov	w1, #0x2                   	// #2
{
    960271a8:	910003fd 	mov	x29, sp
    960271ac:	a90153f3 	stp	x19, x20, [sp, #16]
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (bh == 0)
    960271b0:	f0000273 	adrp	x19, 96076000 <free_dram_block+0x38e8>
{
    960271b4:	f90013f5 	str	x21, [sp, #32]
	tegrabl_blob_type_t btype = BLOB_NONE;
    960271b8:	b9003fa1 	str	w1, [x29, #60]
	if (bh == 0)
    960271bc:	f9466e61 	ldr	x1, [x19, #3288]
    960271c0:	b50001e1 	cbnz	x1, 960271fc <tegrabl_load_bmp_blob+0x5c>
    960271c4:	91336262 	add	x2, x19, #0xcd8
	{
		error = tegrabl_blob_init(part_name, NULL, &bh);
    960271c8:	97fffe82 	bl	96026bd0 <tegrabl_blob_init>
    960271cc:	2a0003f4 	mov	w20, w0
		if(error != TEGRABL_NO_ERROR)
    960271d0:	34000160 	cbz	w0, 960271fc <tegrabl_load_bmp_blob+0x5c>
		{
			pr_error("%s: BMP blob initialization failed\n", __func__);
    960271d4:	b00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    960271d8:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960271dc:	911db821 	add	x1, x1, #0x76e
    960271e0:	911ff400 	add	x0, x0, #0x7fd
    960271e4:	97ffed23 	bl	96022670 <tegrabl_printf>
	}

	is_initialized = true;
fail:
	return error;
}
    960271e8:	2a1403e0 	mov	w0, w20
    960271ec:	f94013f5 	ldr	x21, [sp, #32]
    960271f0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960271f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960271f8:	d65f03c0 	ret
	error = tegrabl_blob_get_type(bh, &btype);
    960271fc:	f9466e60 	ldr	x0, [x19, #3288]
    96027200:	9100f3a1 	add	x1, x29, #0x3c
    96027204:	97ffff56 	bl	96026f5c <tegrabl_blob_get_type>
    96027208:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR)
    9602720c:	34000060 	cbz	w0, 96027218 <tegrabl_load_bmp_blob+0x78>
		bh = 0;
    96027210:	f9066e7f 	str	xzr, [x19, #3288]
		goto fail;
    96027214:	17fffff5 	b	960271e8 <tegrabl_load_bmp_blob+0x48>
	if (btype != BLOB_BMP)
    96027218:	b9403fb5 	ldr	w21, [x29, #60]
    9602721c:	f9466e60 	ldr	x0, [x19, #3288]
    96027220:	710006bf 	cmp	w21, #0x1
    96027224:	54000120 	b.eq	96027248 <tegrabl_load_bmp_blob+0xa8>  // b.none
		tegrabl_blob_close(bh);
    96027228:	97ffffcf 	bl	96027164 <tegrabl_blob_close>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602722c:	52800054 	mov	w20, #0x2                   	// #2
		bh = 0;
    96027230:	f9066e7f 	str	xzr, [x19, #3288]
		pr_error("No valid bmp blob found\n");
    96027234:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96027238:	72aa4a54 	movk	w20, #0x5252, lsl #16
		pr_error("No valid bmp blob found\n");
    9602723c:	91209000 	add	x0, x0, #0x824
    96027240:	97ffed0c 	bl	96022670 <tegrabl_printf>
    96027244:	17ffffe9 	b	960271e8 <tegrabl_load_bmp_blob+0x48>
	error = tegrabl_blob_get_num_entries(bh, &num_images);
    96027248:	f0000261 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602724c:	91334021 	add	x1, x1, #0xcd0
    96027250:	97ffff50 	bl	96026f90 <tegrabl_blob_get_num_entries>
    96027254:	2a0003f4 	mov	w20, w0
	if (error != TEGRABL_NO_ERROR)
    96027258:	35fffc80 	cbnz	w0, 960271e8 <tegrabl_load_bmp_blob+0x48>
	is_initialized = true;
    9602725c:	f0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96027260:	39335015 	strb	w21, [x0, #3284]
	return error;
    96027264:	17ffffe1 	b	960271e8 <tegrabl_load_bmp_blob+0x48>

0000000096027268 <tegrabl_get_bmp>:
	tegrabl_blob_close(bh);
	is_initialized = false;
}

tegrabl_error_t tegrabl_get_bmp(struct tegrabl_bmp_image *img)
{
    96027268:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9602726c:	910003fd 	mov	x29, sp
    96027270:	a90153f3 	stp	x19, x20, [sp, #16]
    96027274:	a9025bf5 	stp	x21, x22, [sp, #32]
    96027278:	a90363f7 	stp	x23, x24, [sp, #48]
	tegrabl_bmp_resolution_t default_image_res = BMPRES_480P;
	tegrabl_bmp_resolution_t optimal_image_res;
	uint32_t i = 0;
	struct tegrabl_bmp_entry *image_info = NULL;
	int desired_entry = -1;
	uint32_t bmp_length = 0;
    9602727c:	b90057bf 	str	wzr, [x29, #84]
	struct tegrabl_bmp_entry *image_info = NULL;
    96027280:	f9002fbf 	str	xzr, [x29, #88]
{
    96027284:	f90023f9 	str	x25, [sp, #64]
	tegrabl_error_t error = TEGRABL_NO_ERROR;

	if (img == NULL) {
    96027288:	b4000b60 	cbz	x0, 960273f4 <tegrabl_get_bmp+0x18c>
    9602728c:	aa0003f3 	mov	x19, x0
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	if (is_initialized != true)
    96027290:	f0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96027294:	39735000 	ldrb	w0, [x0, #3284]
    96027298:	350000e0 	cbnz	w0, 960272b4 <tegrabl_get_bmp+0x4c>
	{
		pr_error("bmp blob is not loaded and initialized\n");
    9602729c:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960272a0:	911e5000 	add	x0, x0, #0x794
    960272a4:	97ffecf3 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 1);
    960272a8:	528021a0 	mov	w0, #0x10d                 	// #269
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960272ac:	72aa4a40 	movk	w0, #0x5252, lsl #16
	}

	img->image_size = bmp_length;

fail:
	return error;
    960272b0:	1400004b 	b	960273dc <tegrabl_get_bmp+0x174>
	optimal_image_res = get_optimal_bmp_resolution(img->panel_resolution,
    960272b4:	b9402262 	ldr	w2, [x19, #32]
    960272b8:	39407261 	ldrb	w1, [x19, #28]
	if (rotation_angle == 0 || rotation_angle == 180)
    960272bc:	7102d05f 	cmp	w2, #0xb4
	optimal_image_res = get_optimal_bmp_resolution(img->panel_resolution,
    960272c0:	b9401a60 	ldr	w0, [x19, #24]
	if (rotation_angle == 0 || rotation_angle == 180)
    960272c4:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
		is_bmp_portrait = is_panel_portrait ? false : true;
    960272c8:	2a0103e2 	mov	w2, w1
    960272cc:	52000021 	eor	w1, w1, #0x1
    960272d0:	1a821021 	csel	w1, w1, w2, ne  // ne = any
	if (is_bmp_portrait) {
    960272d4:	35000401 	cbnz	w1, 96027354 <tegrabl_get_bmp+0xec>
		if (panel_resolution >= 2160)
    960272d8:	7121bc1f 	cmp	w0, #0x86f
    960272dc:	54000408 	b.hi	9602735c <tegrabl_get_bmp+0xf4>  // b.pmore
		else if (panel_resolution >= 1080 && panel_resolution < 2160)
    960272e0:	5110e001 	sub	w1, w0, #0x438
    960272e4:	7110dc3f 	cmp	w1, #0x437
    960272e8:	540003e9 	b.ls	96027364 <tegrabl_get_bmp+0xfc>  // b.plast
		else if (panel_resolution >= 810 && panel_resolution < 1080)
    960272ec:	510ca801 	sub	w1, w0, #0x32a
    960272f0:	7104343f 	cmp	w1, #0x10d
    960272f4:	540003c9 	b.ls	9602736c <tegrabl_get_bmp+0x104>  // b.plast
		else if (panel_resolution >= 720 && panel_resolution < 810)
    960272f8:	510b4000 	sub	w0, w0, #0x2d0
    960272fc:	7101641f 	cmp	w0, #0x59
    96027300:	1a9f87f4 	cset	w20, ls  // ls = plast
	while (i < num_images) {
    96027304:	f0000277 	adrp	x23, 96076000 <free_dram_block+0x38e8>
    96027308:	913342f7 	add	x23, x23, #0xcd0
	int desired_entry = -1;
    9602730c:	12800016 	mov	w22, #0xffffffff            	// #-1
	uint32_t i = 0;
    96027310:	52800015 	mov	w21, #0x0                   	// #0
	tegrabl_bmp_resolution_t default_image_res = BMPRES_480P;
    96027314:	52800018 	mov	w24, #0x0                   	// #0
		error = tegrabl_blob_get_entry(bh, i, (void **)&image_info);
    96027318:	f0000279 	adrp	x25, 96076000 <free_dram_block+0x38e8>
	while (i < num_images) {
    9602731c:	b94002e0 	ldr	w0, [x23]
    96027320:	6b15001f 	cmp	w0, w21
    96027324:	54000288 	b.hi	96027374 <tegrabl_get_bmp+0x10c>  // b.pmore
	if (desired_entry == -1) {
    96027328:	310006df 	cmn	w22, #0x1
    9602732c:	54000461 	b.ne	960273b8 <tegrabl_get_bmp+0x150>  // b.any
		pr_error("%s: Required BMP %d with resolution type=%d \
    96027330:	b9400262 	ldr	w2, [x19]
    96027334:	2a1403e3 	mov	w3, w20
    96027338:	b00000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    9602733c:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96027340:	911e1021 	add	x1, x1, #0x784
    96027344:	911efc00 	add	x0, x0, #0x7bf
    96027348:	97ffecca 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 2);
    9602734c:	528041a0 	mov	w0, #0x20d                 	// #525
    96027350:	17ffffd7 	b	960272ac <tegrabl_get_bmp+0x44>
		return BMPRES_1200P_P;
    96027354:	528000b4 	mov	w20, #0x5                   	// #5
    96027358:	17ffffeb 	b	96027304 <tegrabl_get_bmp+0x9c>
			return BMPRES_4K;
    9602735c:	52800094 	mov	w20, #0x4                   	// #4
    96027360:	17ffffe9 	b	96027304 <tegrabl_get_bmp+0x9c>
			return BMPRES_1080P;
    96027364:	52800074 	mov	w20, #0x3                   	// #3
    96027368:	17ffffe7 	b	96027304 <tegrabl_get_bmp+0x9c>
			return BMPRES_810P;
    9602736c:	52800054 	mov	w20, #0x2                   	// #2
    96027370:	17ffffe5 	b	96027304 <tegrabl_get_bmp+0x9c>
		error = tegrabl_blob_get_entry(bh, i, (void **)&image_info);
    96027374:	f9466f20 	ldr	x0, [x25, #3288]
    96027378:	910163a2 	add	x2, x29, #0x58
    9602737c:	2a1503e1 	mov	w1, w21
    96027380:	97ffff11 	bl	96026fc4 <tegrabl_blob_get_entry>
		if (image_info->bmp_type == img->img_type)
    96027384:	f9402fa0 	ldr	x0, [x29, #88]
    96027388:	b9400261 	ldr	w1, [x19]
    9602738c:	b9400002 	ldr	w2, [x0]
    96027390:	6b01005f 	cmp	w2, w1
    96027394:	540000e1 	b.ne	960273b0 <tegrabl_get_bmp+0x148>  // b.any
			if (image_info->bmp_res >= default_image_res &&
    96027398:	b9400c00 	ldr	w0, [x0, #12]
    9602739c:	6b18001f 	cmp	w0, w24
    960273a0:	54000083 	b.cc	960273b0 <tegrabl_get_bmp+0x148>  // b.lo, b.ul, b.last
					desired_entry = i;
    960273a4:	6b14001f 	cmp	w0, w20
    960273a8:	1a9582d6 	csel	w22, w22, w21, hi  // hi = pmore
    960273ac:	1a808318 	csel	w24, w24, w0, hi  // hi = pmore
		i++;
    960273b0:	110006b5 	add	w21, w21, #0x1
    960273b4:	17ffffda 	b	9602731c <tegrabl_get_bmp+0xb4>
	error = tegrabl_blob_get_entry_data(bh, desired_entry, &(img->bmp),
    960273b8:	f0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960273bc:	910153a3 	add	x3, x29, #0x54
    960273c0:	91002262 	add	x2, x19, #0x8
    960273c4:	2a1603e1 	mov	w1, w22
    960273c8:	f9466c00 	ldr	x0, [x0, #3288]
    960273cc:	97ffff21 	bl	96027050 <tegrabl_blob_get_entry_data>
	if (error != TEGRABL_NO_ERROR) {
    960273d0:	35000060 	cbnz	w0, 960273dc <tegrabl_get_bmp+0x174>
	img->image_size = bmp_length;
    960273d4:	b94057a1 	ldr	w1, [x29, #84]
    960273d8:	f9000a61 	str	x1, [x19, #16]
}
    960273dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960273e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960273e4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960273e8:	f94023f9 	ldr	x25, [sp, #64]
    960273ec:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960273f0:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960273f4:	52800040 	mov	w0, #0x2                   	// #2
    960273f8:	17ffffad 	b	960272ac <tegrabl_get_bmp+0x44>

00000000960273fc <tegrabl_partition_open>:
	struct tegrabl_partition_info *partition_info = NULL;
	struct tegrabl_storage_info *entry = NULL;
	uint32_t num_partitions = 0;
	uint32_t i = 0;

	if ((partition_name == NULL) || (partition == NULL)) {
    960273fc:	f100001f 	cmp	x0, #0x0
    96027400:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96027404:	540007c0 	b.eq	960274fc <tegrabl_partition_open+0x100>  // b.none
{
    96027408:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9602740c:	910003fd 	mov	x29, sp
    96027410:	a9025bf5 	stp	x21, x22, [sp, #32]
    96027414:	aa0003f5 	mov	x21, x0
	}

	pr_trace("Open partition %s\n", partition_name);


	if (storage_list == NULL) {
    96027418:	f0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
{
    9602741c:	a90153f3 	stp	x19, x20, [sp, #16]
    96027420:	aa0103f3 	mov	x19, x1
    96027424:	a90363f7 	stp	x23, x24, [sp, #48]
	if (storage_list == NULL) {
    96027428:	f9453001 	ldr	x1, [x0, #2656]
    9602742c:	aa0003f7 	mov	x23, x0
{
    96027430:	a9046bf9 	stp	x25, x26, [sp, #64]
    96027434:	f9002bfb 	str	x27, [sp, #80]
	if (storage_list == NULL) {
    96027438:	b50001a1 	cbnz	x1, 9602746c <tegrabl_partition_open+0x70>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, AUX_INFO_PARTITION_NOT_INIT);
		pr_error("Partition manager might not be initialized.\n");
    9602743c:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96027440:	91210000 	add	x0, x0, #0x840
    96027444:	97ffec8b 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, AUX_INFO_PARTITION_NOT_INIT);
    96027448:	5282e400 	mov	w0, #0x1720                	// #5920
		}
	}

	if (partition_info == NULL) {
		pr_error("Cannot find partition %s\n", partition_name);
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9602744c:	72a1a1a0 	movk	w0, #0xd0d, lsl #16
	partition->block_device = entry->bdev;
	partition->offset = 0;

fail:
	return error;
}
    96027450:	a94153f3 	ldp	x19, x20, [sp, #16]
    96027454:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96027458:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602745c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96027460:	f9402bfb 	ldr	x27, [sp, #80]
    96027464:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96027468:	d65f03c0 	ret
	list_for_every_entry(storage_list, entry,
    9602746c:	f9400434 	ldr	x20, [x1, #8]
    96027470:	5280121b 	mov	w27, #0x90                  	// #144
    96027474:	f94532e0 	ldr	x0, [x23, #2656]
    96027478:	eb00029f 	cmp	x20, x0
    9602747c:	54000161 	b.ne	960274a8 <tegrabl_partition_open+0xac>  // b.any
		pr_error("Cannot find partition %s\n", partition_name);
    96027480:	aa1503e1 	mov	x1, x21
    96027484:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96027488:	9121c000 	add	x0, x0, #0x870
    9602748c:	97ffec79 	bl	96022670 <tegrabl_printf>
		(void)memset(partition, 0x0, sizeof(*partition));
    96027490:	d2800302 	mov	x2, #0x18                  	// #24
    96027494:	52800001 	mov	w1, #0x0                   	// #0
    96027498:	aa1303e0 	mov	x0, x19
    9602749c:	94000a63 	bl	96029e28 <memset>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    960274a0:	528001a0 	mov	w0, #0xd                   	// #13
    960274a4:	17ffffea 	b	9602744c <tegrabl_partition_open+0x50>
		partition_info = entry->partitions;
    960274a8:	f9401298 	ldr	x24, [x20, #32]
    960274ac:	b9401a99 	ldr	w25, [x20, #24]
    960274b0:	aa1803f6 	mov	x22, x24
    960274b4:	9bbb6339 	umaddl	x25, w25, w27, x24
		for (i = 0; i < num_partitions; i++) {
    960274b8:	eb1902df 	cmp	x22, x25
    960274bc:	54000061 	b.ne	960274c8 <tegrabl_partition_open+0xcc>  // b.any
	list_for_every_entry(storage_list, entry,
    960274c0:	f9400694 	ldr	x20, [x20, #8]
    960274c4:	17ffffec 	b	96027474 <tegrabl_partition_open+0x78>
	return tegrabl_a_b_match_part_name(partition_name, name);
    960274c8:	aa1603e0 	mov	x0, x22
			if (match_partition_name(partition_info[i].name, partition_name)) {
    960274cc:	aa1603fa 	mov	x26, x22
	return tegrabl_a_b_match_part_name(partition_name, name);
    960274d0:	aa1503e1 	mov	x1, x21
    960274d4:	910242d6 	add	x22, x22, #0x90
    960274d8:	940018ba 	bl	9602d7c0 <tegrabl_a_b_match_part_name>
			if (match_partition_name(partition_info[i].name, partition_name)) {
    960274dc:	72001c1f 	tst	w0, #0xff
    960274e0:	54fffec0 	b.eq	960274b8 <tegrabl_partition_open+0xbc>  // b.none
	if (partition_info == NULL) {
    960274e4:	b4fffcf8 	cbz	x24, 96027480 <tegrabl_partition_open+0x84>
	partition->block_device = entry->bdev;
    960274e8:	f9400a80 	ldr	x0, [x20, #16]
    960274ec:	a900027a 	stp	x26, x0, [x19]
	partition->offset = 0;
    960274f0:	f9000a7f 	str	xzr, [x19, #16]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960274f4:	52800000 	mov	w0, #0x0                   	// #0
    960274f8:	17ffffd6 	b	96027450 <tegrabl_partition_open+0x54>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 19);
    960274fc:	52826040 	mov	w0, #0x1302                	// #4866
    96027500:	72a1a1a0 	movk	w0, #0xd0d, lsl #16
}
    96027504:	d65f03c0 	ret

0000000096027508 <tegrabl_partition_size>:

uint64_t tegrabl_partition_size(struct tegrabl_partition *partition)
{
	struct tegrabl_partition_info *partition_info = NULL;

	if (partition == NULL) {
    96027508:	b40000a0 	cbz	x0, 9602751c <tegrabl_partition_size+0x14>
		goto fail;
	}

	partition_info = partition->partition_info;
    9602750c:	f9400000 	ldr	x0, [x0]

	if (partition_info == NULL) {
    96027510:	b4000060 	cbz	x0, 9602751c <tegrabl_partition_size+0x14>
		pr_debug("Partition handle is not initialized appropriately.\n");
		goto fail;
	}

	return partition_info->total_size;
    96027514:	f9404400 	ldr	x0, [x0, #136]
fail:
	return 0;
}
    96027518:	d65f03c0 	ret
	return 0;
    9602751c:	d2800000 	mov	x0, #0x0                   	// #0
    96027520:	17fffffe 	b	96027518 <tegrabl_partition_size+0x10>

0000000096027524 <tegrabl_partition_close>:

void tegrabl_partition_close(struct tegrabl_partition *partition)
{
	if (partition != NULL) {
    96027524:	b4000080 	cbz	x0, 96027534 <tegrabl_partition_close+0x10>
		(void)memset(partition, 0x0, sizeof(*partition));
    96027528:	d2800302 	mov	x2, #0x18                  	// #24
    9602752c:	52800001 	mov	w1, #0x0                   	// #0
    96027530:	14000a3e 	b	96029e28 <memset>
	}
}
    96027534:	d65f03c0 	ret

0000000096027538 <tegrabl_partition_erase>:
		bool secure)
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct tegrabl_partition_info *partition_info = NULL;

	if (partition == NULL) {
    96027538:	b4000220 	cbz	x0, 9602757c <tegrabl_partition_erase+0x44>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
		goto fail;
	}

	partition_info = partition->partition_info;
    9602753c:	f9400004 	ldr	x4, [x0]

	if ((partition_info == NULL) || (partition->block_device == NULL)) {
    96027540:	b4000244 	cbz	x4, 96027588 <tegrabl_partition_erase+0x50>
    96027544:	f9400400 	ldr	x0, [x0, #8]
    96027548:	b4000200 	cbz	x0, 96027588 <tegrabl_partition_erase+0x50>
{
    9602754c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96027550:	12001c23 	and	w3, w1, #0xff
    96027554:	910003fd 	mov	x29, sp
		goto fail;
	}

	pr_debug("Erasing partition %s\n", partition_info->name);

	error = tegrabl_blockdev_erase(partition->block_device,
    96027558:	b9407881 	ldr	w1, [x4, #120]
    9602755c:	b9408082 	ldr	w2, [x4, #128]
    96027560:	97ffd316 	bl	9601c1b8 <tegrabl_blockdev_erase>
								   (uint32_t)partition_info->start_sector,
								   (uint32_t)partition_info->num_sectors,
								   secure);

	if (TEGRABL_NO_ERROR != error) {
    96027564:	34000080 	cbz	w0, 96027574 <tegrabl_partition_erase+0x3c>
    96027568:	12005c00 	and	w0, w0, #0xffffff
    9602756c:	52a1a001 	mov	w1, #0xd000000             	// #218103808
    96027570:	2a010000 	orr	w0, w0, w1
		error = tegrabl_err_set_highest_module(error, MODULE);
	}

fail:
	return error;
}
    96027574:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96027578:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9602757c:	52802040 	mov	w0, #0x102                 	// #258
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 2);
    96027580:	72a1a1a0 	movk	w0, #0xd0d, lsl #16
}
    96027584:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 2);
    96027588:	52804400 	mov	w0, #0x220                 	// #544
    9602758c:	17fffffd 	b	96027580 <tegrabl_partition_erase+0x48>

0000000096027590 <tegrabl_partition_write>:
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct tegrabl_partition_info *partition_info = NULL;
	off_t offset = 0;

	if ((partition == NULL) || (buf == NULL) || (num_bytes == 0U)) {
    96027590:	f100001f 	cmp	x0, #0x0
    96027594:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96027598:	54000420 	b.eq	9602761c <tegrabl_partition_write+0x8c>  // b.none
    9602759c:	b4000402 	cbz	x2, 9602761c <tegrabl_partition_write+0x8c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
		goto fail;
	}

	partition_info = partition->partition_info;
    960275a0:	f9400003 	ldr	x3, [x0]

	if ((partition_info == NULL) || (partition->block_device == NULL)) {
    960275a4:	b4000423 	cbz	x3, 96027628 <tegrabl_partition_write+0x98>
    960275a8:	f9400404 	ldr	x4, [x0, #8]
    960275ac:	b40003e4 	cbz	x4, 96027628 <tegrabl_partition_write+0x98>
	}

	pr_debug("Writing %s from offset %"PRIu64 "num_bytes %zd\n",
			 partition_info->name, partition->offset, num_bytes);

	if (partition_info->total_size < (num_bytes + partition->offset)) {
    960275b0:	f9400805 	ldr	x5, [x0, #16]
    960275b4:	f9404467 	ldr	x7, [x3, #136]
    960275b8:	8b0200a6 	add	x6, x5, x2
    960275bc:	eb0600ff 	cmp	x7, x6
    960275c0:	54000383 	b.cc	96027630 <tegrabl_partition_write+0xa0>  // b.lo, b.ul, b.last
{
    960275c4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960275c8:	910003fd 	mov	x29, sp
    960275cc:	a90153f3 	stp	x19, x20, [sp, #16]
    960275d0:	aa0203f4 	mov	x20, x2
    960275d4:	aa0003f3 	mov	x19, x0
		pr_debug("Cannot write beyond partition boundary for %s\n",
				 partition_info->name);
		goto fail;
	}

	offset = partition->offset + (partition_info->start_sector <<
    960275d8:	b9402082 	ldr	w2, [x4, #32]
    960275dc:	f9403c60 	ldr	x0, [x3, #120]
								  partition->block_device->block_size_log2);

	error = tegrabl_blockdev_write(partition->block_device, buf,
    960275e0:	aa1403e3 	mov	x3, x20
	offset = partition->offset + (partition_info->start_sector <<
    960275e4:	9ac22002 	lsl	x2, x0, x2
	error = tegrabl_blockdev_write(partition->block_device, buf,
    960275e8:	aa0403e0 	mov	x0, x4
    960275ec:	8b050042 	add	x2, x2, x5
    960275f0:	97ffd200 	bl	9601bdf0 <tegrabl_blockdev_write>
			offset, num_bytes);

	if (TEGRABL_NO_ERROR != error) {
    960275f4:	34000080 	cbz	w0, 96027604 <tegrabl_partition_write+0x74>
    960275f8:	12005c00 	and	w0, w0, #0xffffff
    960275fc:	52a1a001 	mov	w1, #0xd000000             	// #218103808
    96027600:	2a010000 	orr	w0, w0, w1
		error = tegrabl_err_set_highest_module(error, MODULE);
	}

	partition->offset += num_bytes;
    96027604:	f9400a62 	ldr	x2, [x19, #16]
    96027608:	8b140042 	add	x2, x2, x20
    9602760c:	f9000a62 	str	x2, [x19, #16]

fail:
	return error;
}
    96027610:	a94153f3 	ldp	x19, x20, [sp, #16]
    96027614:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96027618:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9602761c:	52804040 	mov	w0, #0x202                 	// #514
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96027620:	72a1a1a0 	movk	w0, #0xd0d, lsl #16
}
    96027624:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 3);
    96027628:	52806400 	mov	w0, #0x320                 	// #800
    9602762c:	17fffffd 	b	96027620 <tegrabl_partition_write+0x90>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    96027630:	52800080 	mov	w0, #0x4                   	// #4
    96027634:	17fffffb 	b	96027620 <tegrabl_partition_write+0x90>

0000000096027638 <tegrabl_partition_read>:
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct tegrabl_partition_info *partition_info = NULL;
	off_t offset = 0;

	if ((partition == NULL) || (buf == NULL) || (num_bytes == 0U)) {
    96027638:	f100001f 	cmp	x0, #0x0
    9602763c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96027640:	540005a0 	b.eq	960276f4 <tegrabl_partition_read+0xbc>  // b.none
    96027644:	b4000582 	cbz	x2, 960276f4 <tegrabl_partition_read+0xbc>
{
    96027648:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602764c:	910003fd 	mov	x29, sp
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
		goto fail;
	}

	partition_info = partition->partition_info;
    96027650:	f9400003 	ldr	x3, [x0]
{
    96027654:	a90153f3 	stp	x19, x20, [sp, #16]
    96027658:	aa0203f4 	mov	x20, x2
    9602765c:	aa0003f3 	mov	x19, x0

	if ((partition_info == NULL) || (partition->block_device == NULL)) {
    96027660:	b4000063 	cbz	x3, 9602766c <tegrabl_partition_read+0x34>
    96027664:	f9400400 	ldr	x0, [x0, #8]
    96027668:	b5000120 	cbnz	x0, 9602768c <tegrabl_partition_read+0x54>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 4);
		pr_error("Partition handle is not initialized appropriately.\n");
    9602766c:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96027670:	91240800 	add	x0, x0, #0x902
    96027674:	97ffebff 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 4);
    96027678:	52808400 	mov	w0, #0x420                 	// #1056
		goto fail;
	}

	if (partition_info->total_size < (num_bytes + partition->offset)) {
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 1);
    9602767c:	72a1a1a0 	movk	w0, #0xd0d, lsl #16

	partition->offset += num_bytes;

fail:
	return error;
}
    96027680:	a94153f3 	ldp	x19, x20, [sp, #16]
    96027684:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96027688:	d65f03c0 	ret
	if (partition_info->total_size < (num_bytes + partition->offset)) {
    9602768c:	f9400a64 	ldr	x4, [x19, #16]
    96027690:	f9404465 	ldr	x5, [x3, #136]
    96027694:	8b020082 	add	x2, x4, x2
    96027698:	eb0200bf 	cmp	x5, x2
    9602769c:	540000e2 	b.cs	960276b8 <tegrabl_partition_read+0x80>  // b.hs, b.nlast
		pr_error("Cannot read beyond partition boundary for %s\n",
    960276a0:	aa0303e1 	mov	x1, x3
    960276a4:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    960276a8:	9124e400 	add	x0, x0, #0x939
    960276ac:	97ffebf1 	bl	96022670 <tegrabl_printf>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 1);
    960276b0:	52802080 	mov	w0, #0x104                 	// #260
    960276b4:	17fffff2 	b	9602767c <tegrabl_partition_read+0x44>
	offset = partition->offset + (partition_info->start_sector <<
    960276b8:	f9403c63 	ldr	x3, [x3, #120]
    960276bc:	b9402002 	ldr	w2, [x0, #32]
    960276c0:	9ac22062 	lsl	x2, x3, x2
	error = tegrabl_blockdev_read(partition->block_device, buf,
    960276c4:	aa1403e3 	mov	x3, x20
    960276c8:	8b040042 	add	x2, x2, x4
    960276cc:	97ffd0e1 	bl	9601ba50 <tegrabl_blockdev_read>
	if (TEGRABL_NO_ERROR != error) {
    960276d0:	340000a0 	cbz	w0, 960276e4 <tegrabl_partition_read+0xac>
    960276d4:	12005c00 	and	w0, w0, #0xffffff
    960276d8:	52a1a001 	mov	w1, #0xd000000             	// #218103808
    960276dc:	2a010000 	orr	w0, w0, w1
		goto fail;
    960276e0:	17ffffe8 	b	96027680 <tegrabl_partition_read+0x48>
	partition->offset += num_bytes;
    960276e4:	f9400a62 	ldr	x2, [x19, #16]
    960276e8:	8b140054 	add	x20, x2, x20
    960276ec:	f9000a74 	str	x20, [x19, #16]
    960276f0:	17ffffe4 	b	96027680 <tegrabl_partition_read+0x48>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    960276f4:	52808040 	mov	w0, #0x402                 	// #1026
    960276f8:	72a1a1a0 	movk	w0, #0xd0d, lsl #16
}
    960276fc:	d65f03c0 	ret

0000000096027700 <tegrabl_partition_seek>:
{
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct tegrabl_partition_info *partition_info = NULL;
	int64_t new_offset = 0;

	if (partition == NULL) {
    96027700:	b4000320 	cbz	x0, 96027764 <tegrabl_partition_seek+0x64>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
		goto fail;
	}

	partition_info = partition->partition_info;
    96027704:	f9400003 	ldr	x3, [x0]

	if ((partition_info == NULL) || (partition->block_device == NULL)) {
    96027708:	b4000343 	cbz	x3, 96027770 <tegrabl_partition_seek+0x70>
    9602770c:	f9400404 	ldr	x4, [x0, #8]
    96027710:	b4000304 	cbz	x4, 96027770 <tegrabl_partition_seek+0x70>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 5);
		pr_debug("Partition handle is not initialized appropriately.\n");
		goto fail;
	}

	switch (origin) {
    96027714:	7100045f 	cmp	w2, #0x1
    96027718:	540000c0 	b.eq	96027730 <tegrabl_partition_seek+0x30>  // b.none
    9602771c:	34000202 	cbz	w2, 9602775c <tegrabl_partition_seek+0x5c>
    96027720:	7100085f 	cmp	w2, #0x2
    96027724:	54000180 	b.eq	96027754 <tegrabl_partition_seek+0x54>  // b.none
		break;
	case TEGRABL_PARTITION_SEEK_END:
		new_offset = (int64_t)partition_info->total_size;
		break;
	default:
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    96027728:	5280c040 	mov	w0, #0x602                 	// #1538
    9602772c:	1400000f 	b	96027768 <tegrabl_partition_seek+0x68>
		new_offset = (int64_t)partition->offset;
    96027730:	f9400802 	ldr	x2, [x0, #16]
		goto fail;
	}

	new_offset += offset;

	if (new_offset < 0) {
    96027734:	ab020021 	adds	x1, x1, x2
    96027738:	54000204 	b.mi	96027778 <tegrabl_partition_seek+0x78>  // b.first
		error = TEGRABL_ERROR(TEGRABL_ERR_UNDERFLOW, 0);
		goto fail;
	}

	if (partition_info->total_size < (uint64_t)new_offset) {
    9602773c:	f9404462 	ldr	x2, [x3, #136]
    96027740:	eb01005f 	cmp	x2, x1
    96027744:	540001e3 	b.cc	96027780 <tegrabl_partition_seek+0x80>  // b.lo, b.ul, b.last
	}

	pr_debug("Seeking %s from offset %"PRIu64 "to %"PRIu64"\n",
			 partition_info->name, partition->offset, new_offset);

	partition->offset = (uint64_t)new_offset;
    96027748:	f9000801 	str	x1, [x0, #16]
    9602774c:	52800000 	mov	w0, #0x0                   	// #0

fail:
	return error;
}
    96027750:	d65f03c0 	ret
		new_offset = (int64_t)partition_info->total_size;
    96027754:	f9404462 	ldr	x2, [x3, #136]
    96027758:	17fffff7 	b	96027734 <tegrabl_partition_seek+0x34>
		new_offset = 0;
    9602775c:	d2800002 	mov	x2, #0x0                   	// #0
    96027760:	17fffff5 	b	96027734 <tegrabl_partition_seek+0x34>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    96027764:	5280a040 	mov	w0, #0x502                 	// #1282
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 2);
    96027768:	72a1a1a0 	movk	w0, #0xd0d, lsl #16
	return error;
    9602776c:	17fffff9 	b	96027750 <tegrabl_partition_seek+0x50>
		error = TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 5);
    96027770:	5280a400 	mov	w0, #0x520                 	// #1312
    96027774:	17fffffd 	b	96027768 <tegrabl_partition_seek+0x68>
		error = TEGRABL_ERROR(TEGRABL_ERR_UNDERFLOW, 0);
    96027778:	528000a0 	mov	w0, #0x5                   	// #5
    9602777c:	17fffffb 	b	96027768 <tegrabl_partition_seek+0x68>
		error = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 2);
    96027780:	52804080 	mov	w0, #0x204                 	// #516
    96027784:	17fffff9 	b	96027768 <tegrabl_partition_seek+0x68>

0000000096027788 <tegrabl_partition_publish>:
	}
	return err;
}

tegrabl_error_t tegrabl_partition_publish(tegrabl_bdev_t *dev, off_t offset)
{
    96027788:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602778c:	910003fd 	mov	x29, sp
    96027790:	a90153f3 	stp	x19, x20, [sp, #16]
    96027794:	f90013f5 	str	x21, [sp, #32]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	int32_t i = 0;
	uint32_t num = 0;
    96027798:	b90037bf 	str	wzr, [x29, #52]
	struct tegrabl_storage_info  *storage_info = NULL;
	struct tegrabl_partition_info *partitions = NULL;
    9602779c:	f9001fbf 	str	xzr, [x29, #56]
	size_t array_size;
	array_size = ARRAY_SIZE(publish_partition);
	if (dev == NULL) {
    960277a0:	b4000620 	cbz	x0, 96027864 <tegrabl_partition_publish+0xdc>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 15);
		goto fail;
	}

	if (dev->published == true) {
    960277a4:	3940a002 	ldrb	w2, [x0, #40]
    960277a8:	aa0003f3 	mov	x19, x0
    960277ac:	34000162 	cbz	w2, 960277d8 <tegrabl_partition_publish+0x50>
		pr_info("Already published: %08x\n", dev->device_id);
    960277b0:	b9401661 	ldr	w1, [x19, #20]
    960277b4:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960277b8:	52800014 	mov	w20, #0x0                   	// #0
		pr_info("Already published: %08x\n", dev->device_id);
    960277bc:	91223400 	add	x0, x0, #0x88d
    960277c0:	97ffebac 	bl	96022670 <tegrabl_printf>
		}
	}

fail:
	return error;
}
    960277c4:	2a1403e0 	mov	w0, w20
    960277c8:	f94013f5 	ldr	x21, [sp, #32]
    960277cc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960277d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960277d4:	d65f03c0 	ret
				error = publish_partition[i](dev, offset, &partitions, &num);
    960277d8:	9100d3a3 	add	x3, x29, #0x34
    960277dc:	9100e3a2 	add	x2, x29, #0x38
    960277e0:	97ffec6b 	bl	9602298c <tegrabl_gpt_publish>
    960277e4:	2a0003f4 	mov	w20, w0
				if (TEGRABL_NO_ERROR != error) {
    960277e8:	35000480 	cbnz	w0, 96027878 <tegrabl_partition_publish+0xf0>
				pr_info("Found %d partitions in %s (instance %x)\n",
    960277ec:	79402e60 	ldrh	w0, [x19, #22]
    960277f0:	b94037b5 	ldr	w21, [x29, #52]
    960277f4:	12000c00 	and	w0, w0, #0xf
    960277f8:	97ffd2d3 	bl	9601c344 <tegrabl_blockdev_get_name>
    960277fc:	b9401663 	ldr	w3, [x19, #20]
    96027800:	aa0003e2 	mov	x2, x0
    96027804:	2a1503e1 	mov	w1, w21
    96027808:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602780c:	12000c63 	and	w3, w3, #0xf
    96027810:	9122a400 	add	x0, x0, #0x8a9
    96027814:	97ffeb97 	bl	96022670 <tegrabl_printf>
				storage_info = tegrabl_malloc(sizeof(*storage_info));
    96027818:	d2800500 	mov	x0, #0x28                  	// #40
    9602781c:	97fffc97 	bl	96026a78 <tegrabl_malloc>
				if (storage_info == NULL) {
    96027820:	b4000280 	cbz	x0, 96027870 <tegrabl_partition_publish+0xe8>
				storage_info->partitions = partitions;
    96027824:	f9401fa1 	ldr	x1, [x29, #56]
    96027828:	f9001001 	str	x1, [x0, #32]
				storage_info->num_partitions = num;
    9602782c:	b94037a1 	ldr	w1, [x29, #52]
    96027830:	b9001801 	str	w1, [x0, #24]
				list_add_head(storage_list, &storage_info->node);
    96027834:	f0000261 	adrp	x1, 96076000 <free_dram_block+0x38e8>
				storage_info->bdev = dev;
    96027838:	f9000813 	str	x19, [x0, #16]
				list_add_head(storage_list, &storage_info->node);
    9602783c:	f9453021 	ldr	x1, [x1, #2656]
	item->next = list->next;
    96027840:	f9400422 	ldr	x2, [x1, #8]
    96027844:	a9000801 	stp	x1, x2, [x0]
	list->next->prev = item;
    96027848:	f9400422 	ldr	x2, [x1, #8]
    9602784c:	f9000040 	str	x0, [x2]
	list->next = item;
    96027850:	f9000420 	str	x0, [x1, #8]
		dev->published = (error == TEGRABL_NO_ERROR);
    96027854:	7100029f 	cmp	w20, #0x0
    96027858:	1a9f17e0 	cset	w0, eq  // eq = none
    9602785c:	3900a260 	strb	w0, [x19, #40]
fail:
    96027860:	17ffffd9 	b	960277c4 <tegrabl_partition_publish+0x3c>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 15);
    96027864:	5281e054 	mov	w20, #0xf02                 	// #3842
					error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96027868:	72a1a1b4 	movk	w20, #0xd0d, lsl #16
	return error;
    9602786c:	17ffffd6 	b	960277c4 <tegrabl_partition_publish+0x3c>
					error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96027870:	52800074 	mov	w20, #0x3                   	// #3
    96027874:	17fffffd 	b	96027868 <tegrabl_partition_publish+0xe0>
			pr_warn("Cannot find any partition table for %08x\n",
    96027878:	b9401661 	ldr	w1, [x19, #20]
			error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9602787c:	52800034 	mov	w20, #0x1                   	// #1
			pr_warn("Cannot find any partition table for %08x\n",
    96027880:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
			error = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96027884:	72a1a1b4 	movk	w20, #0xd0d, lsl #16
			pr_warn("Cannot find any partition table for %08x\n",
    96027888:	91235400 	add	x0, x0, #0x8d5
    9602788c:	97ffeb79 	bl	96022670 <tegrabl_printf>
    96027890:	17fffff1 	b	96027854 <tegrabl_partition_publish+0xcc>

0000000096027894 <tegrabl_partition_manager_init>:
fail:
	return error;
}

tegrabl_error_t tegrabl_partition_manager_init(void)
{
    96027894:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	tegrabl_bdev_t *dev = NULL;

	pr_trace("Partition Manager init started\n");

	storage_list = tegrabl_malloc(sizeof(*storage_list));
    96027898:	d2800200 	mov	x0, #0x10                  	// #16
{
    9602789c:	910003fd 	mov	x29, sp
    960278a0:	f9000bf3 	str	x19, [sp, #16]
	storage_list = tegrabl_malloc(sizeof(*storage_list));
    960278a4:	97fffc75 	bl	96026a78 <tegrabl_malloc>
    960278a8:	f0000261 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    960278ac:	f9053020 	str	x0, [x1, #2656]

	if (storage_list == NULL) {
    960278b0:	b4000280 	cbz	x0, 96027900 <tegrabl_partition_manager_init+0x6c>
	tegrabl_bdev_t *dev = NULL;
    960278b4:	d2800013 	mov	x19, #0x0                   	// #0
	list->prev = list->next = list;
    960278b8:	a9000000 	stp	x0, x0, [x0]
		goto fail;
	}

	list_initialize(storage_list);

	while ((dev = tegrabl_blockdev_next_device(dev)) != NULL) {
    960278bc:	aa1303e0 	mov	x0, x19
    960278c0:	97ffd056 	bl	9601ba18 <tegrabl_blockdev_next_device>
    960278c4:	aa0003f3 	mov	x19, x0
    960278c8:	b50000a0 	cbnz	x0, 960278dc <tegrabl_partition_manager_init+0x48>
	tegrabl_error_t error = TEGRABL_NO_ERROR;
    960278cc:	52800000 	mov	w0, #0x0                   	// #0
	list_initialize(&verify_list);
#endif

fail:
	return error;
}
    960278d0:	f9400bf3 	ldr	x19, [sp, #16]
    960278d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960278d8:	d65f03c0 	ret
static inline uint16_t tegrabl_blockdev_get_storage_type(
		struct tegrabl_bdev *bdev)
{
	if (bdev != NULL) {
		return (uint16_t)
			MIN(((bdev->device_id >> 16) & 0xFFU), TEGRABL_STORAGE_INVALID);
    960278dc:	39405a60 	ldrb	w0, [x19, #22]
		return (uint16_t)
    960278e0:	7100281f 	cmp	w0, #0xa
    960278e4:	54000068 	b.hi	960278f0 <tegrabl_partition_manager_init+0x5c>  // b.pmore
		if (tegrabl_blockdev_get_storage_type(dev) != TEGRABL_STORAGE_SDMMC_RPMB) {
    960278e8:	7100081f 	cmp	w0, #0x2
    960278ec:	54fffe80 	b.eq	960278bc <tegrabl_partition_manager_init+0x28>  // b.none
			tegrabl_partition_publish(dev, 0);
    960278f0:	d2800001 	mov	x1, #0x0                   	// #0
    960278f4:	aa1303e0 	mov	x0, x19
    960278f8:	97ffffa4 	bl	96027788 <tegrabl_partition_publish>
    960278fc:	17fffff0 	b	960278bc <tegrabl_partition_manager_init+0x28>
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96027900:	52802060 	mov	w0, #0x103                 	// #259
    96027904:	72a1a1a0 	movk	w0, #0xd0d, lsl #16
	return error;
    96027908:	17fffff2 	b	960278d0 <tegrabl_partition_manager_init+0x3c>

000000009602790c <tegrabl_utils_crc32>:
{
	uint32_t final_crc = val ^ ~0U;
	uint8_t *buf = (uint8_t *) buffer;

	while (buffer_size != 0U) {
		final_crc = (tegrabl_crc32_tab[(final_crc ^ *buf) & 0xFFU] ^
    9602790c:	b00000e5 	adrp	x5, 96044000 <__func__.6231+0x4f3>
	uint32_t final_crc = val ^ ~0U;
    96027910:	2a2003e0 	mvn	w0, w0
		final_crc = (tegrabl_crc32_tab[(final_crc ^ *buf) & 0xFFU] ^
    96027914:	9125b0a5 	add	x5, x5, #0x96c
	while (buffer_size != 0U) {
    96027918:	d2800004 	mov	x4, #0x0                   	// #0
    9602791c:	eb04005f 	cmp	x2, x4
    96027920:	54000061 	b.ne	9602792c <tegrabl_utils_crc32+0x20>  // b.any
		buf++;
		buffer_size--;
	}

	return final_crc ^ ~0U;
}
    96027924:	2a2003e0 	mvn	w0, w0
    96027928:	d65f03c0 	ret
		final_crc = (tegrabl_crc32_tab[(final_crc ^ *buf) & 0xFFU] ^
    9602792c:	38646823 	ldrb	w3, [x1, x4]
    96027930:	91000484 	add	x4, x4, #0x1
    96027934:	4a000063 	eor	w3, w3, w0
    96027938:	92401c63 	and	x3, x3, #0xff
    9602793c:	b86378a3 	ldr	w3, [x5, x3, lsl #2]
    96027940:	4a402060 	eor	w0, w3, w0, lsr #8
    96027944:	17fffff6 	b	9602791c <tegrabl_utils_crc32+0x10>

0000000096027948 <tegrabl_utils_crc8>:

	return checksum;
}

uint8_t tegrabl_utils_crc8(uint8_t *buffer, uint32_t len)
{
    96027948:	8b214001 	add	x1, x0, w1, uxtw
	uint8_t crc8 = 0, t, i;
    9602794c:	52800002 	mov	w2, #0x0                   	// #0
		for (i = 0; i < 8U; i++) {
			odd = (((t ^ crc8) & 1U) == 1U);
			crc8 >>= 1;
			t >>= 1;
			if (odd) {
				crc8 ^= 0x8cU;
    96027950:	12800e65 	mov	w5, #0xffffff8c            	// #-116
	while (len != 0U) {
    96027954:	eb01001f 	cmp	x0, x1
    96027958:	54000061 	b.ne	96027964 <tegrabl_utils_crc8+0x1c>  // b.any
		buffer++;
		len--;
	}

	return crc8;
}
    9602795c:	2a0203e0 	mov	w0, w2
    96027960:	d65f03c0 	ret
		t = *buffer;
    96027964:	39400004 	ldrb	w4, [x0]
    96027968:	52800103 	mov	w3, #0x8                   	// #8
			odd = (((t ^ crc8) & 1U) == 1U);
    9602796c:	4a040046 	eor	w6, w2, w4
			crc8 >>= 1;
    96027970:	53017c42 	lsr	w2, w2, #1
			t >>= 1;
    96027974:	53017c84 	lsr	w4, w4, #1
			if (odd) {
    96027978:	36000066 	tbz	w6, #0, 96027984 <tegrabl_utils_crc8+0x3c>
				crc8 ^= 0x8cU;
    9602797c:	4a050042 	eor	w2, w2, w5
    96027980:	12001c42 	and	w2, w2, #0xff
    96027984:	51000463 	sub	w3, w3, #0x1
		for (i = 0; i < 8U; i++) {
    96027988:	72001c63 	ands	w3, w3, #0xff
    9602798c:	54ffff01 	b.ne	9602796c <tegrabl_utils_crc8+0x24>  // b.any
		buffer++;
    96027990:	91000400 	add	x0, x0, #0x1
    96027994:	17fffff0 	b	96027954 <tegrabl_utils_crc8+0xc>

0000000096027998 <__debug_stdio_fgetc>:
{
	return _dputs(s);
}

static int __debug_stdio_fgetc(void *ctx)
{
    96027998:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	char c;
	int err;

	err = platform_dgetc(&c, true);
    9602799c:	52800021 	mov	w1, #0x1                   	// #1
{
    960279a0:	910003fd 	mov	x29, sp
	err = platform_dgetc(&c, true);
    960279a4:	91007fa0 	add	x0, x29, #0x1f
    960279a8:	97ffe911 	bl	96021dec <platform_dgetc>
	if (err < 0)
    960279ac:	37f80040 	tbnz	w0, #31, 960279b4 <__debug_stdio_fgetc+0x1c>
		return err;
	return (unsigned char)c;
    960279b0:	39407fa0 	ldrb	w0, [x29, #31]
}
    960279b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960279b8:	d65f03c0 	ret

00000000960279bc <__debug_stdio_fputc>:
{
    960279bc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	_dputc(c);
    960279c0:	2a0103e0 	mov	w0, w1
{
    960279c4:	910003fd 	mov	x29, sp
	_dputc(c);
    960279c8:	97ffe8e5 	bl	96021d5c <platform_dputc>
}
    960279cc:	52800000 	mov	w0, #0x0                   	// #0
    960279d0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960279d4:	d65f03c0 	ret

00000000960279d8 <_dprintf_output_func>:

	return 0;
}

static int _dprintf_output_func(const char *str, size_t len, void *state)
{
    960279d8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960279dc:	910003fd 	mov	x29, sp
    960279e0:	a90153f3 	stp	x19, x20, [sp, #16]
    960279e4:	aa0003f4 	mov	x20, x0
    960279e8:	f90013f5 	str	x21, [sp, #32]
    960279ec:	aa0103f5 	mov	x21, x1
	size_t count = 0;
    960279f0:	d2800013 	mov	x19, #0x0                   	// #0
	while (count < len && *str) {
    960279f4:	eb15027f 	cmp	x19, x21
    960279f8:	54000060 	b.eq	96027a04 <_dprintf_output_func+0x2c>  // b.none
    960279fc:	38736a80 	ldrb	w0, [x20, x19]
    96027a00:	350000c0 	cbnz	w0, 96027a18 <_dprintf_output_func+0x40>
		str++;
		count++;
	}

	return count;
}
    96027a04:	2a1303e0 	mov	w0, w19
    96027a08:	f94013f5 	ldr	x21, [sp, #32]
    96027a0c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96027a10:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96027a14:	d65f03c0 	ret
		_dputc(*str);
    96027a18:	97ffe8d1 	bl	96021d5c <platform_dputc>
		count++;
    96027a1c:	91000673 	add	x19, x19, #0x1
    96027a20:	17fffff5 	b	960279f4 <_dprintf_output_func+0x1c>

0000000096027a24 <halt>:
{
    96027a24:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96027a28:	910003fd 	mov	x29, sp
	if (critical_section_count == 0)
    96027a2c:	f0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96027a30:	b94c9801 	ldr	w1, [x0, #3224]
    96027a34:	35000041 	cbnz	w1, 96027a3c <halt+0x18>
    __asm__ volatile("msr daifset, #3" ::: "memory");
    96027a38:	d50343df 	msr	daifset, #0x3
	critical_section_count++;
    96027a3c:	b94c9801 	ldr	w1, [x0, #3224]
    96027a40:	11000421 	add	w1, w1, #0x1
    96027a44:	b90c9801 	str	w1, [x0, #3224]
	platform_halt();
    96027a48:	97ffe8f6 	bl	96021e20 <platform_halt>

0000000096027a4c <_dputs>:
{
    96027a4c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96027a50:	910003fd 	mov	x29, sp
    96027a54:	f9000bf3 	str	x19, [sp, #16]
    96027a58:	aa0003f3 	mov	x19, x0
	while (*str != 0) {
    96027a5c:	39400260 	ldrb	w0, [x19]
    96027a60:	35000080 	cbnz	w0, 96027a70 <_dputs+0x24>
}
    96027a64:	f9400bf3 	ldr	x19, [sp, #16]
    96027a68:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96027a6c:	d65f03c0 	ret
		_dputc(*str++);
    96027a70:	91000673 	add	x19, x19, #0x1
    96027a74:	97ffe8ba 	bl	96021d5c <platform_dputc>
    96027a78:	17fffff9 	b	96027a5c <_dputs+0x10>

0000000096027a7c <__debug_stdio_fputs>:
	return _dputs(s);
    96027a7c:	aa0103e0 	mov	x0, x1
    96027a80:	17fffff3 	b	96027a4c <_dputs>

0000000096027a84 <_dprintf>:

int _dprintf(const char *fmt, ...)
{
    96027a84:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    96027a88:	910003fd 	mov	x29, sp
    96027a8c:	a90d8ba1 	stp	x1, x2, [x29, #216]
	int err;

	va_list ap;
	va_start(ap, fmt);
    96027a90:	910443a1 	add	x1, x29, #0x110
    96027a94:	a90307a1 	stp	x1, x1, [x29, #48]
    96027a98:	910343a1 	add	x1, x29, #0xd0
    96027a9c:	f90023a1 	str	x1, [x29, #64]
    96027aa0:	128006e1 	mov	w1, #0xffffffc8            	// #-56
    96027aa4:	b9004ba1 	str	w1, [x29, #72]
    96027aa8:	12800fe1 	mov	w1, #0xffffff80            	// #-128
    96027aac:	b9004fa1 	str	w1, [x29, #76]
	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027ab0:	d2800001 	mov	x1, #0x0                   	// #0
{
    96027ab4:	a90e93a3 	stp	x3, x4, [x29, #232]
	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027ab8:	a9430fa2 	ldp	x2, x3, [x29, #48]
    96027abc:	a9010fa2 	stp	x2, x3, [x29, #16]
    96027ac0:	a9440fa2 	ldp	x2, x3, [x29, #64]
    96027ac4:	a9020fa2 	stp	x2, x3, [x29, #32]
{
    96027ac8:	3d8017a0 	str	q0, [x29, #80]
	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027acc:	910043a3 	add	x3, x29, #0x10
{
    96027ad0:	3d801ba1 	str	q1, [x29, #96]
	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027ad4:	aa0003e2 	mov	x2, x0
{
    96027ad8:	3d801fa2 	str	q2, [x29, #112]
	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027adc:	90000000 	adrp	x0, 96027000 <tegrabl_blob_get_entry+0x3c>
{
    96027ae0:	3d8023a3 	str	q3, [x29, #128]
	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027ae4:	91276000 	add	x0, x0, #0x9d8
{
    96027ae8:	3d8027a4 	str	q4, [x29, #144]
    96027aec:	3d802ba5 	str	q5, [x29, #160]
    96027af0:	3d802fa6 	str	q6, [x29, #176]
    96027af4:	3d8033a7 	str	q7, [x29, #192]
    96027af8:	a90f9ba5 	stp	x5, x6, [x29, #248]
    96027afc:	f90087a7 	str	x7, [x29, #264]
	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027b00:	940000c5 	bl	96027e14 <_printf_engine>
	va_end(ap);

	return err;
}
    96027b04:	a8d17bfd 	ldp	x29, x30, [sp], #272
    96027b08:	d65f03c0 	ret

0000000096027b0c <_dvprintf>:

int _dvprintf(const char *fmt, va_list ap)
{
    96027b0c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96027b10:	910003fd 	mov	x29, sp
	int err;

	err = _printf_engine(&_dprintf_output_func, NULL, fmt, ap);
    96027b14:	a9400c22 	ldp	x2, x3, [x1]
    96027b18:	a9010fa2 	stp	x2, x3, [x29, #16]
    96027b1c:	a9410c22 	ldp	x2, x3, [x1, #16]
    96027b20:	a9020fa2 	stp	x2, x3, [x29, #32]
    96027b24:	d2800001 	mov	x1, #0x0                   	// #0
    96027b28:	910043a3 	add	x3, x29, #0x10
    96027b2c:	aa0003e2 	mov	x2, x0
    96027b30:	90000000 	adrp	x0, 96027000 <tegrabl_blob_get_entry+0x3c>
    96027b34:	91276000 	add	x0, x0, #0x9d8
    96027b38:	940000b7 	bl	96027e14 <_printf_engine>

	return err;
}
    96027b3c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96027b40:	d65f03c0 	ret

0000000096027b44 <_panic>:
{
    96027b44:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    96027b48:	910003fd 	mov	x29, sp
    96027b4c:	f9000bf3 	str	x19, [sp, #16]
    96027b50:	aa0103f3 	mov	x19, x1
	dprintf(ALWAYS, "panic (caller %p): ", caller);
    96027b54:	aa0003e1 	mov	x1, x0
    96027b58:	b00000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
{
    96027b5c:	3d801ba0 	str	q0, [x29, #96]
	dprintf(ALWAYS, "panic (caller %p): ", caller);
    96027b60:	9135b000 	add	x0, x0, #0xd6c
{
    96027b64:	3d801fa1 	str	q1, [x29, #112]
    96027b68:	3d8023a2 	str	q2, [x29, #128]
    96027b6c:	3d8027a3 	str	q3, [x29, #144]
    96027b70:	3d802ba4 	str	q4, [x29, #160]
    96027b74:	3d802fa5 	str	q5, [x29, #176]
    96027b78:	3d8033a6 	str	q6, [x29, #192]
    96027b7c:	3d8037a7 	str	q7, [x29, #208]
    96027b80:	a90e0fa2 	stp	x2, x3, [x29, #224]
    96027b84:	a90f17a4 	stp	x4, x5, [x29, #240]
    96027b88:	a9101fa6 	stp	x6, x7, [x29, #256]
	dprintf(ALWAYS, "panic (caller %p): ", caller);
    96027b8c:	97ffffbe 	bl	96027a84 <_dprintf>
	va_start(ap, fmt);
    96027b90:	910443a0 	add	x0, x29, #0x110
    96027b94:	a90403a0 	stp	x0, x0, [x29, #64]
    96027b98:	910383a0 	add	x0, x29, #0xe0
    96027b9c:	f9002ba0 	str	x0, [x29, #80]
    96027ba0:	128005e0 	mov	w0, #0xffffffd0            	// #-48
    96027ba4:	b9005ba0 	str	w0, [x29, #88]
    96027ba8:	12800fe0 	mov	w0, #0xffffff80            	// #-128
    96027bac:	b9005fa0 	str	w0, [x29, #92]
	_dvprintf(fmt, ap);
    96027bb0:	a94407a0 	ldp	x0, x1, [x29, #64]
    96027bb4:	a90207a0 	stp	x0, x1, [x29, #32]
    96027bb8:	a94507a0 	ldp	x0, x1, [x29, #80]
    96027bbc:	a90307a0 	stp	x0, x1, [x29, #48]
    96027bc0:	910083a1 	add	x1, x29, #0x20
    96027bc4:	aa1303e0 	mov	x0, x19
    96027bc8:	97ffffd1 	bl	96027b0c <_dvprintf>
	halt();
    96027bcc:	97ffff96 	bl	96027a24 <halt>

0000000096027bd0 <__debug_stdio_vfprintf>:
{
    96027bd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96027bd4:	aa0103e0 	mov	x0, x1
    96027bd8:	910003fd 	mov	x29, sp
	return _dvprintf(fmt, ap);
    96027bdc:	a9401444 	ldp	x4, x5, [x2]
    96027be0:	910043a1 	add	x1, x29, #0x10
    96027be4:	a90117a4 	stp	x4, x5, [x29, #16]
    96027be8:	a9410c42 	ldp	x2, x3, [x2, #16]
    96027bec:	a9020fa2 	stp	x2, x3, [x29, #32]
    96027bf0:	97ffffc7 	bl	96027b0c <_dvprintf>
}
    96027bf4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96027bf8:	d65f03c0 	ret

0000000096027bfc <hexval>:
#include <ctype.h>

#define LONG_IS_INT 1

static int hexval(char c)
{
    96027bfc:	12001c01 	and	w1, w0, #0xff
	if (c >= '0' && c <= '9')
    96027c00:	5100c020 	sub	w0, w1, #0x30
    96027c04:	12001c02 	and	w2, w0, #0xff
    96027c08:	7100245f 	cmp	w2, #0x9
    96027c0c:	540000c9 	b.ls	96027c24 <hexval+0x28>  // b.plast
		return c - '0';
	else if (c >= 'a' && c <= 'f')
    96027c10:	51018420 	sub	w0, w1, #0x61
    96027c14:	12001c00 	and	w0, w0, #0xff
    96027c18:	7100141f 	cmp	w0, #0x5
    96027c1c:	54000068 	b.hi	96027c28 <hexval+0x2c>  // b.pmore
		return c - 'a' + 10;
    96027c20:	51015c20 	sub	w0, w1, #0x57
	else if (c >= 'A' && c <= 'F')
		return c - 'A' + 10;

	return 0;
}
    96027c24:	d65f03c0 	ret
	else if (c >= 'A' && c <= 'F')
    96027c28:	51010420 	sub	w0, w1, #0x41
		return c - 'A' + 10;
    96027c2c:	5100dc21 	sub	w1, w1, #0x37
	else if (c >= 'A' && c <= 'F')
    96027c30:	12001c00 	and	w0, w0, #0xff
		return c - 'A' + 10;
    96027c34:	7100181f 	cmp	w0, #0x6
    96027c38:	1a9f3020 	csel	w0, w1, wzr, cc  // cc = lo, ul, last
    96027c3c:	17fffffa 	b	96027c24 <hexval+0x28>

0000000096027c40 <atol>:
	return atoul(num);
#endif
}

long atol(const char *num)
{
    96027c40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96027c44:	910003fd 	mov	x29, sp
    96027c48:	a90153f3 	stp	x19, x20, [sp, #16]
    96027c4c:	aa0003f4 	mov	x20, x0
    96027c50:	a9025bf5 	stp	x21, x22, [sp, #32]
	long value = 0;
	int neg = 0;

	if (num[0] == '0' && num[1] == 'x') {
    96027c54:	39400000 	ldrb	w0, [x0]
    96027c58:	7100c01f 	cmp	w0, #0x30
    96027c5c:	54000281 	b.ne	96027cac <atol+0x6c>  // b.any
    96027c60:	39400680 	ldrb	w0, [x20, #1]
    96027c64:	7101e01f 	cmp	w0, #0x78
    96027c68:	54000301 	b.ne	96027cc8 <atol+0x88>  // b.any
		// hex
		num += 2;
    96027c6c:	91000a94 	add	x20, x20, #0x2
	long value = 0;
    96027c70:	d2800013 	mov	x19, #0x0                   	// #0
		while (*num && isxdigit(*num))
    96027c74:	39400280 	ldrb	w0, [x20]
    96027c78:	34000060 	cbz	w0, 96027c84 <atol+0x44>
    96027c7c:	9400002d 	bl	96027d30 <isxdigit>
    96027c80:	350000c0 	cbnz	w0, 96027c98 <atol+0x58>

	if (neg)
		value = -value;

	return value;
}
    96027c84:	aa1303e0 	mov	x0, x19
    96027c88:	a94153f3 	ldp	x19, x20, [sp, #16]
    96027c8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96027c90:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96027c94:	d65f03c0 	ret
			value = value * 16 + hexval(*num++);
    96027c98:	38401680 	ldrb	w0, [x20], #1
    96027c9c:	d37cee73 	lsl	x19, x19, #4
    96027ca0:	97ffffd7 	bl	96027bfc <hexval>
    96027ca4:	8b20c273 	add	x19, x19, w0, sxtw
    96027ca8:	17fffff3 	b	96027c74 <atol+0x34>
		if (num[0] == '-') {
    96027cac:	7100b41f 	cmp	w0, #0x2d
    96027cb0:	540000c1 	b.ne	96027cc8 <atol+0x88>  // b.any
			num++;
    96027cb4:	91000694 	add	x20, x20, #0x1
			neg = 1;
    96027cb8:	52800035 	mov	w21, #0x1                   	// #1
	int neg = 0;
    96027cbc:	d2800013 	mov	x19, #0x0                   	// #0
			value = value * 10 + *num++  - '0';
    96027cc0:	d2800156 	mov	x22, #0xa                   	// #10
    96027cc4:	14000008 	b	96027ce4 <atol+0xa4>
	int neg = 0;
    96027cc8:	52800015 	mov	w21, #0x0                   	// #0
    96027ccc:	17fffffc 	b	96027cbc <atol+0x7c>
		while (*num && isdigit(*num))
    96027cd0:	9400000f 	bl	96027d0c <isdigit>
    96027cd4:	340000c0 	cbz	w0, 96027cec <atol+0xac>
			value = value * 10 + *num++  - '0';
    96027cd8:	38401680 	ldrb	w0, [x20], #1
    96027cdc:	9b160273 	madd	x19, x19, x22, x0
    96027ce0:	d100c273 	sub	x19, x19, #0x30
		while (*num && isdigit(*num))
    96027ce4:	39400280 	ldrb	w0, [x20]
    96027ce8:	35ffff40 	cbnz	w0, 96027cd0 <atol+0x90>
	if (neg)
    96027cec:	34fffcd5 	cbz	w21, 96027c84 <atol+0x44>
		value = -value;
    96027cf0:	cb1303f3 	neg	x19, x19
	return value;
    96027cf4:	17ffffe4 	b	96027c84 <atol+0x44>

0000000096027cf8 <atoi>:
{
    96027cf8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96027cfc:	910003fd 	mov	x29, sp
	return atol(num);
    96027d00:	97ffffd0 	bl	96027c40 <atol>
}
    96027d04:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96027d08:	d65f03c0 	ret

0000000096027d0c <isdigit>:
	return ((c >= 'A') && (c <= 'Z'));
}

int isdigit(int c)
{
	return ((c >= '0') && (c <= '9'));
    96027d0c:	5100c000 	sub	w0, w0, #0x30
    96027d10:	7100241f 	cmp	w0, #0x9
}
    96027d14:	1a9f87e0 	cset	w0, ls  // ls = plast
    96027d18:	d65f03c0 	ret

0000000096027d1c <isalpha>:

int isalpha(int c)
{
	return isupper(c) || islower(c);
    96027d1c:	121a7800 	and	w0, w0, #0xffffffdf
    96027d20:	51010400 	sub	w0, w0, #0x41
    96027d24:	7100641f 	cmp	w0, #0x19
}
    96027d28:	1a9f87e0 	cset	w0, ls  // ls = plast
    96027d2c:	d65f03c0 	ret

0000000096027d30 <isxdigit>:
	return ((c >= '0') && (c <= '9'));
    96027d30:	5100c001 	sub	w1, w0, #0x30
	return isalpha(c) || isdigit(c);
}

int isxdigit(int c)
{
	return isdigit(c) || ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'));
    96027d34:	7100243f 	cmp	w1, #0x9
    96027d38:	540000c9 	b.ls	96027d50 <isxdigit+0x20>  // b.plast
    96027d3c:	121a7800 	and	w0, w0, #0xffffffdf
    96027d40:	51010400 	sub	w0, w0, #0x41
    96027d44:	7100141f 	cmp	w0, #0x5
    96027d48:	1a9f87e0 	cset	w0, ls  // ls = plast
}
    96027d4c:	d65f03c0 	ret
	return isdigit(c) || ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'));
    96027d50:	52800020 	mov	w0, #0x1                   	// #1
    96027d54:	17fffffe 	b	96027d4c <isxdigit+0x1c>

0000000096027d58 <_vsnprintf_output>:

static int _vsnprintf_output(const char *str, size_t len, void *state)
{
	struct _output_args *args = state;

	size_t count = 0;
    96027d58:	d2800003 	mov	x3, #0x0                   	// #0
	while (count < len && *str) {
    96027d5c:	eb01007f 	cmp	x3, x1
    96027d60:	54000060 	b.eq	96027d6c <_vsnprintf_output+0x14>  // b.none
    96027d64:	38636804 	ldrb	w4, [x0, x3]
    96027d68:	35000064 	cbnz	w4, 96027d74 <_vsnprintf_output+0x1c>
		str++;
		count++;
	}

	return count;
}
    96027d6c:	2a0303e0 	mov	w0, w3
    96027d70:	d65f03c0 	ret
		if (args->pos < args->len) {
    96027d74:	a9409045 	ldp	x5, x4, [x2, #8]
    96027d78:	eb05009f 	cmp	x4, x5
    96027d7c:	540000c2 	b.cs	96027d94 <_vsnprintf_output+0x3c>  // b.hs, b.nlast
			args->outstr[args->pos++] = *str;
    96027d80:	91000486 	add	x6, x4, #0x1
    96027d84:	f9400045 	ldr	x5, [x2]
    96027d88:	f9000846 	str	x6, [x2, #16]
    96027d8c:	38636806 	ldrb	w6, [x0, x3]
    96027d90:	382468a6 	strb	w6, [x5, x4]
		count++;
    96027d94:	91000463 	add	x3, x3, #0x1
    96027d98:	17fffff1 	b	96027d5c <_vsnprintf_output+0x4>

0000000096027d9c <longlong_to_string.constprop.1>:
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    96027d9c:	365001e2 	tbz	w2, #10, 96027dd8 <longlong_to_string.constprop.1+0x3c>
    96027da0:	b6f801c1 	tbz	x1, #63, 96027dd8 <longlong_to_string.constprop.1+0x3c>
		n = -n;
    96027da4:	cb0103e1 	neg	x1, x1
		negative = 1;
    96027da8:	52800024 	mov	w4, #0x1                   	// #1
	buf[--pos] = 0;
    96027dac:	39007c1f 	strb	wzr, [x0, #31]
    96027db0:	91007800 	add	x0, x0, #0x1e
		int digit = n % 10;
    96027db4:	d2800146 	mov	x6, #0xa                   	// #10
	while (n >= 10) {
    96027db8:	f100243f 	cmp	x1, #0x9
    96027dbc:	54000128 	b.hi	96027de0 <longlong_to_string.constprop.1+0x44>  // b.pmore
	buf[--pos] = n + '0';
    96027dc0:	1100c021 	add	w1, w1, #0x30
    96027dc4:	39000001 	strb	w1, [x0]
	if (negative)
    96027dc8:	34000184 	cbz	w4, 96027df8 <longlong_to_string.constprop.1+0x5c>
		*signchar = '-';
    96027dcc:	528005a1 	mov	w1, #0x2d                  	// #45
		*signchar = ' ';
    96027dd0:	39000061 	strb	w1, [x3]
}
    96027dd4:	d65f03c0 	ret
	int negative = 0;
    96027dd8:	52800004 	mov	w4, #0x0                   	// #0
    96027ddc:	17fffff4 	b	96027dac <longlong_to_string.constprop.1+0x10>
		int digit = n % 10;
    96027de0:	9ac60827 	udiv	x7, x1, x6
    96027de4:	9b0684e5 	msub	x5, x7, x6, x1
		n /= 10;
    96027de8:	aa0703e1 	mov	x1, x7
		buf[--pos] = digit + '0';
    96027dec:	1100c0a5 	add	w5, w5, #0x30
    96027df0:	381ff405 	strb	w5, [x0], #-1
    96027df4:	17fffff1 	b	96027db8 <longlong_to_string.constprop.1+0x1c>
	else if ((flag & SHOWSIGNFLAG))
    96027df8:	36480062 	tbz	w2, #9, 96027e04 <longlong_to_string.constprop.1+0x68>
		*signchar = '+';
    96027dfc:	52800561 	mov	w1, #0x2b                  	// #43
    96027e00:	17fffff4 	b	96027dd0 <longlong_to_string.constprop.1+0x34>
		*signchar = ' ';
    96027e04:	f273005f 	tst	x2, #0x2000
    96027e08:	52800401 	mov	w1, #0x20                  	// #32
    96027e0c:	1a9f1021 	csel	w1, w1, wzr, ne  // ne = any
    96027e10:	17fffff0 	b	96027dd0 <longlong_to_string.constprop.1+0x34>

0000000096027e14 <_printf_engine>:
		str[wlen] = '\0';
	return wlen;
}

int _printf_engine(_printf_engine_output_func out, void *state, const char *fmt, va_list ap)
{
    96027e14:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    96027e18:	910003fd 	mov	x29, sp
    96027e1c:	a90153f3 	stp	x19, x20, [sp, #16]
    96027e20:	aa0003f4 	mov	x20, x0
    96027e24:	a9025bf5 	stp	x21, x22, [sp, #32]
    96027e28:	aa0203e0 	mov	x0, x2
    96027e2c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96027e30:	aa0103f5 	mov	x21, x1
    96027e34:	b940187a 	ldr	w26, [x3, #24]
    96027e38:	a9404c76 	ldp	x22, x19, [x3]
    96027e3c:	a90363f7 	stp	x23, x24, [sp, #48]
    96027e40:	a90573fb 	stp	x27, x28, [sp, #80]
	unsigned long long n;
	void *ptr;
	int flags;
	unsigned int format_num;
	char signchar;
	size_t chars_written = 0;
    96027e44:	d280001b 	mov	x27, #0x0                   	// #0
		signchar = '\0';

		/* handle regular chars that aren't format related */
		s = fmt;
		string_len = 0;
		while ((c = *fmt++) != 0) {
    96027e48:	f9003fa0 	str	x0, [x29, #120]
		signchar = '\0';
    96027e4c:	39023fbf 	strb	wzr, [x29, #143]
		while ((c = *fmt++) != 0) {
    96027e50:	f9403fa2 	ldr	x2, [x29, #120]
    96027e54:	f9403fa1 	ldr	x1, [x29, #120]
    96027e58:	38401457 	ldrb	w23, [x2], #1
    96027e5c:	cb000021 	sub	x1, x1, x0
    96027e60:	f9003fa2 	str	x2, [x29, #120]
    96027e64:	34000077 	cbz	w23, 96027e70 <_printf_engine+0x5c>
			if (c == '%')
    96027e68:	710096ff 	cmp	w23, #0x25
    96027e6c:	54ffff21 	b.ne	96027e50 <_printf_engine+0x3c>  // b.any
				break; /* we saw a '%', break and start parsing format */
			string_len++;
		}

		/* output the string we've accumulated */
		OUTPUT_STRING(s, string_len);
    96027e70:	aa1503e2 	mov	x2, x21
    96027e74:	d63f0280 	blr	x20
    96027e78:	2a0003e3 	mov	w3, w0
    96027e7c:	37f839a0 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    96027e80:	8b20c37b 	add	x27, x27, w0, sxtw

		/* make sure we haven't just hit the end of the string */
		if (c == 0)
    96027e84:	34004117 	cbz	w23, 960286a4 <_printf_engine+0x890>
		format_num = 0;
    96027e88:	52800017 	mov	w23, #0x0                   	// #0
		flags = 0;
    96027e8c:	52800018 	mov	w24, #0x0                   	// #0

		switch (c) {
			case '0'...'9':
				if (c == '0' && format_num == 0)
					flags |= LEADZEROFLAG;
				format_num *= 10;
    96027e90:	52800140 	mov	w0, #0xa                   	// #10
		c = *fmt++;
    96027e94:	f9403fa1 	ldr	x1, [x29, #120]
    96027e98:	3840143c 	ldrb	w28, [x1], #1
    96027e9c:	f9003fa1 	str	x1, [x29, #120]
		if (c == 0)
    96027ea0:	3400403c 	cbz	w28, 960286a4 <_printf_engine+0x890>
		switch (c) {
    96027ea4:	7101939f 	cmp	w28, #0x64
    96027ea8:	540008c0 	b.eq	96027fc0 <_printf_engine+0x1ac>  // b.none
    96027eac:	54000768 	b.hi	96027f98 <_printf_engine+0x184>  // b.pmore
    96027eb0:	7100b79f 	cmp	w28, #0x2d
    96027eb4:	540014e0 	b.eq	96028150 <_printf_engine+0x33c>  // b.none
    96027eb8:	540003e8 	b.hi	96027f34 <_printf_engine+0x120>  // b.pmore
    96027ebc:	71008f9f 	cmp	w28, #0x23
    96027ec0:	54001500 	b.eq	96028160 <_printf_engine+0x34c>  // b.none
    96027ec4:	540002c8 	b.hi	96027f1c <_printf_engine+0x108>  // b.pmore
    96027ec8:	7100839f 	cmp	w28, #0x20
    96027ecc:	54001460 	b.eq	96028158 <_printf_engine+0x344>  // b.none
					*(size_t *)ptr = chars_written;
				else
					*(int *)ptr = chars_written;
				break;
			default:
				OUTPUT_CHAR('%');
    96027ed0:	528004a0 	mov	w0, #0x25                  	// #37
    96027ed4:	390223a0 	strb	w0, [x29, #136]
    96027ed8:	aa1503e2 	mov	x2, x21
    96027edc:	d2800021 	mov	x1, #0x1                   	// #1
    96027ee0:	910223a0 	add	x0, x29, #0x88
    96027ee4:	d63f0280 	blr	x20
    96027ee8:	2a0003e3 	mov	w3, w0
    96027eec:	37f83620 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    96027ef0:	b90073a3 	str	w3, [x29, #112]
				OUTPUT_CHAR(c);
    96027ef4:	aa1503e2 	mov	x2, x21
    96027ef8:	390223bc 	strb	w28, [x29, #136]
    96027efc:	d2800021 	mov	x1, #0x1                   	// #1
    96027f00:	910223a0 	add	x0, x29, #0x88
    96027f04:	d63f0280 	blr	x20
    96027f08:	37f83520 	tbnz	w0, #31, 960285ac <_printf_engine+0x798>
				OUTPUT_CHAR('%');
    96027f0c:	b94073a3 	ldr	w3, [x29, #112]
    96027f10:	8b23c363 	add	x3, x27, w3, sxtw
				OUTPUT_CHAR(c);
    96027f14:	8b20c07b 	add	x27, x3, w0, sxtw
    96027f18:	1400005a 	b	96028080 <_printf_engine+0x26c>
		switch (c) {
    96027f1c:	7100979f 	cmp	w28, #0x25
    96027f20:	54000a00 	b.eq	96028060 <_printf_engine+0x24c>  // b.none
    96027f24:	7100af9f 	cmp	w28, #0x2b
    96027f28:	54fffd41 	b.ne	96027ed0 <_printf_engine+0xbc>  // b.any
				flags |= SHOWSIGNFLAG;
    96027f2c:	32170318 	orr	w24, w24, #0x200
				goto next_format;
    96027f30:	17ffffd9 	b	96027e94 <_printf_engine+0x80>
		switch (c) {
    96027f34:	7100e79f 	cmp	w28, #0x39
    96027f38:	540000c8 	b.hi	96027f50 <_printf_engine+0x13c>  // b.pmore
    96027f3c:	7100c39f 	cmp	w28, #0x30
    96027f40:	54000842 	b.cs	96028048 <_printf_engine+0x234>  // b.hs, b.nlast
    96027f44:	7100bb9f 	cmp	w28, #0x2e
    96027f48:	54fffa60 	b.eq	96027e94 <_printf_engine+0x80>  // b.none
    96027f4c:	17ffffe1 	b	96027ed0 <_printf_engine+0xbc>
    96027f50:	7101639f 	cmp	w28, #0x58
    96027f54:	540023a0 	b.eq	960283c8 <_printf_engine+0x5b4>  // b.none
    96027f58:	71018f9f 	cmp	w28, #0x63
    96027f5c:	54fffba1 	b.ne	96027ed0 <_printf_engine+0xbc>  // b.any
				uc = va_arg(ap, unsigned int);
    96027f60:	37f8097a 	tbnz	w26, #31, 9602808c <_printf_engine+0x278>
    96027f64:	91002ec4 	add	x4, x22, #0xb
    96027f68:	2a1a03fc 	mov	w28, w26
    96027f6c:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96027f70:	b94002c0 	ldr	w0, [x22]
				OUTPUT_CHAR(uc);
    96027f74:	aa1503e2 	mov	x2, x21
				uc = va_arg(ap, unsigned int);
    96027f78:	390223a0 	strb	w0, [x29, #136]
				OUTPUT_CHAR(uc);
    96027f7c:	910223a0 	add	x0, x29, #0x88
    96027f80:	d2800021 	mov	x1, #0x1                   	// #1
			/* if not leading zeros, output the sign char just before the number */
			if (!(flags & LEADZEROFLAG) && signchar != '\0')
				OUTPUT_CHAR(signchar);

			/* output the string */
			OUTPUT_STRING(s, SIZE_MAX);
    96027f84:	d63f0280 	blr	x20
    96027f88:	2a0003e3 	mov	w3, w0
    96027f8c:	37f83120 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    96027f90:	8b20c37b 	add	x27, x27, w0, sxtw
    96027f94:	1400017c 	b	96028584 <_printf_engine+0x770>
		switch (c) {
    96027f98:	7101c39f 	cmp	w28, #0x70
    96027f9c:	54002040 	b.eq	960283a4 <_printf_engine+0x590>  // b.none
    96027fa0:	54000368 	b.hi	9602800c <_printf_engine+0x1f8>  // b.pmore
    96027fa4:	7101ab9f 	cmp	w28, #0x6a
    96027fa8:	54000f00 	b.eq	96028188 <_printf_engine+0x374>  // b.none
    96027fac:	54000188 	b.hi	96027fdc <_printf_engine+0x1c8>  // b.pmore
    96027fb0:	7101a39f 	cmp	w28, #0x68
    96027fb4:	54000e20 	b.eq	96028178 <_printf_engine+0x364>  // b.none
    96027fb8:	7101a79f 	cmp	w28, #0x69
    96027fbc:	54fff8a1 	b.ne	96027ed0 <_printf_engine+0xbc>  // b.any
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    96027fc0:	36080e98 	tbz	w24, #1, 96028190 <_printf_engine+0x37c>
				    (flags & PTRDIFFFLAG) ? va_arg(ap, ptrdiff_t) :
    96027fc4:	37f8147a 	tbnz	w26, #31, 96028250 <_printf_engine+0x43c>
    96027fc8:	91003ec4 	add	x4, x22, #0xf
    96027fcc:	2a1a03fc 	mov	w28, w26
    96027fd0:	927df099 	and	x25, x4, #0xfffffffffffffff8
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    96027fd4:	f94002c1 	ldr	x1, [x22]
    96027fd8:	14000075 	b	960281ac <_printf_engine+0x398>
		switch (c) {
    96027fdc:	7101b39f 	cmp	w28, #0x6c
    96027fe0:	54000c40 	b.eq	96028168 <_printf_engine+0x354>  // b.none
    96027fe4:	7101bb9f 	cmp	w28, #0x6e
    96027fe8:	54fff741 	b.ne	96027ed0 <_printf_engine+0xbc>  // b.any
				ptr = va_arg(ap, void *);
    96027fec:	37f82b5a 	tbnz	w26, #31, 96028554 <_printf_engine+0x740>
    96027ff0:	91003ec4 	add	x4, x22, #0xf
    96027ff4:	2a1a03fc 	mov	w28, w26
    96027ff8:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96027ffc:	f94002c0 	ldr	x0, [x22]
				if (flags & LONGLONGFLAG)
    96028000:	36082bd8 	tbz	w24, #1, 96028578 <_printf_engine+0x764>
					*(size_t *)ptr = chars_written;
    96028004:	f900001b 	str	x27, [x0]
    96028008:	1400015f 	b	96028584 <_printf_engine+0x770>
		switch (c) {
    9602800c:	7101d79f 	cmp	w28, #0x75
    96028010:	54001440 	b.eq	96028298 <_printf_engine+0x484>  // b.none
    96028014:	540000e8 	b.hi	96028030 <_printf_engine+0x21c>  // b.pmore
    96028018:	7101cf9f 	cmp	w28, #0x73
    9602801c:	540004a0 	b.eq	960280b0 <_printf_engine+0x29c>  // b.none
    96028020:	7101d39f 	cmp	w28, #0x74
    96028024:	54fff561 	b.ne	96027ed0 <_printf_engine+0xbc>  // b.any
				flags |= PTRDIFFFLAG;
    96028028:	321a0318 	orr	w24, w24, #0x40
				goto next_format;
    9602802c:	17ffff9a 	b	96027e94 <_printf_engine+0x80>
		switch (c) {
    96028030:	7101e39f 	cmp	w28, #0x78
    96028034:	54001bc0 	b.eq	960283ac <_printf_engine+0x598>  // b.none
    96028038:	7101eb9f 	cmp	w28, #0x7a
    9602803c:	54fff4a1 	b.ne	96027ed0 <_printf_engine+0xbc>  // b.any
				flags |= SIZETFLAG;
    96028040:	321c0318 	orr	w24, w24, #0x10
				goto next_format;
    96028044:	17ffff94 	b	96027e94 <_printf_engine+0x80>
				format_num += c - '0';
    96028048:	5100c39c 	sub	w28, w28, #0x30
				if (c == '0' && format_num == 0)
    9602804c:	7a400ae0 	ccmp	w23, #0x0, #0x0, eq  // eq = none
					flags |= LEADZEROFLAG;
    96028050:	32140306 	orr	w6, w24, #0x1000
    96028054:	1a9800d8 	csel	w24, w6, w24, eq  // eq = none
				format_num += c - '0';
    96028058:	1b0072f7 	madd	w23, w23, w0, w28
				goto next_format;
    9602805c:	17ffff8e 	b	96027e94 <_printf_engine+0x80>
				OUTPUT_CHAR('%');
    96028060:	390223bc 	strb	w28, [x29, #136]
    96028064:	aa1503e2 	mov	x2, x21
    96028068:	d2800021 	mov	x1, #0x1                   	// #1
    9602806c:	910223a0 	add	x0, x29, #0x88
    96028070:	d63f0280 	blr	x20
    96028074:	2a0003e3 	mov	w3, w0
    96028078:	37f829c0 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    9602807c:	8b20c37b 	add	x27, x27, w0, sxtw
				break;
    96028080:	2a1a03fc 	mov	w28, w26
    96028084:	aa1603f9 	mov	x25, x22
    96028088:	1400013f 	b	96028584 <_printf_engine+0x770>
				uc = va_arg(ap, unsigned int);
    9602808c:	1100235c 	add	w28, w26, #0x8
    96028090:	7100039f 	cmp	w28, #0x0
    96028094:	5400008d 	b.le	960280a4 <_printf_engine+0x290>
    96028098:	91002ec4 	add	x4, x22, #0xb
    9602809c:	927df099 	and	x25, x4, #0xfffffffffffffff8
    960280a0:	17ffffb4 	b	96027f70 <_printf_engine+0x15c>
    960280a4:	aa1603f9 	mov	x25, x22
    960280a8:	8b3ac276 	add	x22, x19, w26, sxtw
    960280ac:	17ffffb1 	b	96027f70 <_printf_engine+0x15c>
				s = va_arg(ap, const char *);
    960280b0:	37f803fa 	tbnz	w26, #31, 9602812c <_printf_engine+0x318>
    960280b4:	91003ec4 	add	x4, x22, #0xf
    960280b8:	2a1a03fc 	mov	w28, w26
    960280bc:	927df099 	and	x25, x4, #0xfffffffffffffff8
    960280c0:	f94002d6 	ldr	x22, [x22]
				if (s == 0)
    960280c4:	b5000076 	cbnz	x22, 960280d0 <_printf_engine+0x2bc>
					s = "<null>";
    960280c8:	900000f6 	adrp	x22, 96044000 <__func__.6231+0x4f3>
    960280cc:	913602d6 	add	x22, x22, #0xd80
				flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
    960280d0:	12137b18 	and	w24, w24, #0xffffefff
		if (flags & LEFTFORMATFLAG) {
    960280d4:	365827f8 	tbz	w24, #11, 960285d0 <_printf_engine+0x7bc>
			OUTPUT_STRING(s, SIZE_MAX);
    960280d8:	aa1503e2 	mov	x2, x21
    960280dc:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
    960280e0:	aa1603e0 	mov	x0, x22
    960280e4:	d63f0280 	blr	x20
    960280e8:	2a0003e3 	mov	w3, w0
    960280ec:	37f82620 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    960280f0:	8b20c37b 	add	x27, x27, w0, sxtw
			uint written = err;
    960280f4:	2a0003f6 	mov	w22, w0
			for (; format_num > written; format_num--)
    960280f8:	6b1602ff 	cmp	w23, w22
    960280fc:	54002449 	b.ls	96028584 <_printf_engine+0x770>  // b.plast
				OUTPUT_CHAR(' ');
    96028100:	52800400 	mov	w0, #0x20                  	// #32
    96028104:	390223a0 	strb	w0, [x29, #136]
    96028108:	aa1503e2 	mov	x2, x21
    9602810c:	d2800021 	mov	x1, #0x1                   	// #1
    96028110:	910223a0 	add	x0, x29, #0x88
    96028114:	d63f0280 	blr	x20
    96028118:	2a0003e3 	mov	w3, w0
    9602811c:	37f824a0 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    96028120:	8b20c37b 	add	x27, x27, w0, sxtw
			for (; format_num > written; format_num--)
    96028124:	510006f7 	sub	w23, w23, #0x1
    96028128:	17fffff4 	b	960280f8 <_printf_engine+0x2e4>
				s = va_arg(ap, const char *);
    9602812c:	1100235c 	add	w28, w26, #0x8
    96028130:	7100039f 	cmp	w28, #0x0
    96028134:	5400008d 	b.le	96028144 <_printf_engine+0x330>
    96028138:	91003ec4 	add	x4, x22, #0xf
    9602813c:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028140:	17ffffe0 	b	960280c0 <_printf_engine+0x2ac>
    96028144:	aa1603f9 	mov	x25, x22
    96028148:	8b3ac276 	add	x22, x19, w26, sxtw
    9602814c:	17ffffdd 	b	960280c0 <_printf_engine+0x2ac>
				flags |= LEFTFORMATFLAG;
    96028150:	32150318 	orr	w24, w24, #0x800
				goto next_format;
    96028154:	17ffff50 	b	96027e94 <_printf_engine+0x80>
				flags |= BLANKPOSFLAG;
    96028158:	32130318 	orr	w24, w24, #0x2000
				goto next_format;
    9602815c:	17ffff4e 	b	96027e94 <_printf_engine+0x80>
				flags |= ALTFLAG;
    96028160:	32190318 	orr	w24, w24, #0x80
				goto next_format;
    96028164:	17ffff4c 	b	96027e94 <_printf_engine+0x80>
				if (flags & LONGFLAG)
    96028168:	36000058 	tbz	w24, #0, 96028170 <_printf_engine+0x35c>
					flags |= LONGLONGFLAG;
    9602816c:	321f0318 	orr	w24, w24, #0x2
				flags |= LONGFLAG;
    96028170:	32000318 	orr	w24, w24, #0x1
				goto next_format;
    96028174:	17ffff48 	b	96027e94 <_printf_engine+0x80>
				if (flags & HALFFLAG)
    96028178:	36100058 	tbz	w24, #2, 96028180 <_printf_engine+0x36c>
					flags |= HALFHALFFLAG;
    9602817c:	321d0318 	orr	w24, w24, #0x8
				flags |= HALFFLAG;
    96028180:	321e0318 	orr	w24, w24, #0x4
				goto next_format;
    96028184:	17ffff44 	b	96027e94 <_printf_engine+0x80>
				flags |= INTMAXFLAG;
    96028188:	321b0318 	orr	w24, w24, #0x20
				goto next_format;
    9602818c:	17ffff42 	b	96027e94 <_printf_engine+0x80>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    96028190:	3707f1b8 	tbnz	w24, #0, 96027fc4 <_printf_engine+0x1b0>
    96028194:	361802d8 	tbz	w24, #3, 960281ec <_printf_engine+0x3d8>
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    96028198:	37f8019a 	tbnz	w26, #31, 960281c8 <_printf_engine+0x3b4>
    9602819c:	91002ec4 	add	x4, x22, #0xb
    960281a0:	2a1a03fc 	mov	w28, w26
    960281a4:	927df099 	and	x25, x4, #0xfffffffffffffff8
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    960281a8:	398002c1 	ldrsb	x1, [x22]
				flags |= SIGNEDFLAG;
    960281ac:	32160318 	orr	w24, w24, #0x400
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    960281b0:	91023fa3 	add	x3, x29, #0x8f
    960281b4:	2a1803e2 	mov	w2, w24
    960281b8:	910243a0 	add	x0, x29, #0x90
    960281bc:	97fffef8 	bl	96027d9c <longlong_to_string.constprop.1>
    960281c0:	aa0003f6 	mov	x22, x0
				goto _output_string;
    960281c4:	17ffffc4 	b	960280d4 <_printf_engine+0x2c0>
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    960281c8:	1100235c 	add	w28, w26, #0x8
    960281cc:	7100039f 	cmp	w28, #0x0
    960281d0:	5400008d 	b.le	960281e0 <_printf_engine+0x3cc>
    960281d4:	91002ec4 	add	x4, x22, #0xb
    960281d8:	927df099 	and	x25, x4, #0xfffffffffffffff8
    960281dc:	17fffff3 	b	960281a8 <_printf_engine+0x394>
    960281e0:	aa1603f9 	mov	x25, x22
    960281e4:	8b3ac276 	add	x22, x19, w26, sxtw
    960281e8:	17fffff0 	b	960281a8 <_printf_engine+0x394>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    960281ec:	36100218 	tbz	w24, #2, 9602822c <_printf_engine+0x418>
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    960281f0:	37f800da 	tbnz	w26, #31, 96028208 <_printf_engine+0x3f4>
    960281f4:	91002ec4 	add	x4, x22, #0xb
    960281f8:	2a1a03fc 	mov	w28, w26
    960281fc:	927df099 	and	x25, x4, #0xfffffffffffffff8
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    96028200:	798002c1 	ldrsh	x1, [x22]
    96028204:	17ffffea 	b	960281ac <_printf_engine+0x398>
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    96028208:	1100235c 	add	w28, w26, #0x8
    9602820c:	7100039f 	cmp	w28, #0x0
    96028210:	5400008d 	b.le	96028220 <_printf_engine+0x40c>
    96028214:	91002ec4 	add	x4, x22, #0xb
    96028218:	927df099 	and	x25, x4, #0xfffffffffffffff8
    9602821c:	17fffff9 	b	96028200 <_printf_engine+0x3ec>
    96028220:	aa1603f9 	mov	x25, x22
    96028224:	8b3ac276 	add	x22, x19, w26, sxtw
    96028228:	17fffff6 	b	96028200 <_printf_engine+0x3ec>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    9602822c:	3727ecd8 	tbnz	w24, #4, 96027fc4 <_printf_engine+0x1b0>
    96028230:	372fecb8 	tbnz	w24, #5, 96027fc4 <_printf_engine+0x1b0>
    96028234:	3737ec98 	tbnz	w24, #6, 96027fc4 <_printf_engine+0x1b0>
				    va_arg(ap, int);
    96028238:	37f801fa 	tbnz	w26, #31, 96028274 <_printf_engine+0x460>
    9602823c:	91002ec4 	add	x4, x22, #0xb
    96028240:	2a1a03fc 	mov	w28, w26
    96028244:	927df099 	and	x25, x4, #0xfffffffffffffff8
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    96028248:	b98002c1 	ldrsw	x1, [x22]
    9602824c:	17ffffd8 	b	960281ac <_printf_engine+0x398>
				    (flags & PTRDIFFFLAG) ? va_arg(ap, ptrdiff_t) :
    96028250:	1100235c 	add	w28, w26, #0x8
    96028254:	7100039f 	cmp	w28, #0x0
    96028258:	5400008d 	b.le	96028268 <_printf_engine+0x454>
    9602825c:	91003ec4 	add	x4, x22, #0xf
    96028260:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028264:	17ffff5c 	b	96027fd4 <_printf_engine+0x1c0>
    96028268:	aa1603f9 	mov	x25, x22
    9602826c:	8b3ac276 	add	x22, x19, w26, sxtw
    96028270:	17ffff59 	b	96027fd4 <_printf_engine+0x1c0>
				    va_arg(ap, int);
    96028274:	1100235c 	add	w28, w26, #0x8
    96028278:	7100039f 	cmp	w28, #0x0
    9602827c:	5400008d 	b.le	9602828c <_printf_engine+0x478>
    96028280:	91002ec4 	add	x4, x22, #0xb
    96028284:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028288:	17fffff0 	b	96028248 <_printf_engine+0x434>
    9602828c:	aa1603f9 	mov	x25, x22
    96028290:	8b3ac276 	add	x22, x19, w26, sxtw
    96028294:	17ffffed 	b	96028248 <_printf_engine+0x434>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    96028298:	360800f8 	tbz	w24, #1, 960282b4 <_printf_engine+0x4a0>
				    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
    9602829c:	37f8061a 	tbnz	w26, #31, 9602835c <_printf_engine+0x548>
    960282a0:	91003ec4 	add	x4, x22, #0xf
    960282a4:	2a1a03fc 	mov	w28, w26
    960282a8:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960282ac:	f94002c1 	ldr	x1, [x22]
    960282b0:	17ffffc0 	b	960281b0 <_printf_engine+0x39c>
    960282b4:	3707ff58 	tbnz	w24, #0, 9602829c <_printf_engine+0x488>
    960282b8:	36180218 	tbz	w24, #3, 960282f8 <_printf_engine+0x4e4>
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    960282bc:	37f800da 	tbnz	w26, #31, 960282d4 <_printf_engine+0x4c0>
    960282c0:	91002ec4 	add	x4, x22, #0xb
    960282c4:	2a1a03fc 	mov	w28, w26
    960282c8:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960282cc:	394002c1 	ldrb	w1, [x22]
    960282d0:	17ffffb8 	b	960281b0 <_printf_engine+0x39c>
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    960282d4:	1100235c 	add	w28, w26, #0x8
    960282d8:	7100039f 	cmp	w28, #0x0
    960282dc:	5400008d 	b.le	960282ec <_printf_engine+0x4d8>
    960282e0:	91002ec4 	add	x4, x22, #0xb
    960282e4:	927df099 	and	x25, x4, #0xfffffffffffffff8
    960282e8:	17fffff9 	b	960282cc <_printf_engine+0x4b8>
    960282ec:	aa1603f9 	mov	x25, x22
    960282f0:	8b3ac276 	add	x22, x19, w26, sxtw
    960282f4:	17fffff6 	b	960282cc <_printf_engine+0x4b8>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960282f8:	36100218 	tbz	w24, #2, 96028338 <_printf_engine+0x524>
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    960282fc:	37f800da 	tbnz	w26, #31, 96028314 <_printf_engine+0x500>
    96028300:	91002ec4 	add	x4, x22, #0xb
    96028304:	2a1a03fc 	mov	w28, w26
    96028308:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    9602830c:	794002c1 	ldrh	w1, [x22]
    96028310:	17ffffa8 	b	960281b0 <_printf_engine+0x39c>
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    96028314:	1100235c 	add	w28, w26, #0x8
    96028318:	7100039f 	cmp	w28, #0x0
    9602831c:	5400008d 	b.le	9602832c <_printf_engine+0x518>
    96028320:	91002ec4 	add	x4, x22, #0xb
    96028324:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028328:	17fffff9 	b	9602830c <_printf_engine+0x4f8>
    9602832c:	aa1603f9 	mov	x25, x22
    96028330:	8b3ac276 	add	x22, x19, w26, sxtw
    96028334:	17fffff6 	b	9602830c <_printf_engine+0x4f8>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    96028338:	3727fb38 	tbnz	w24, #4, 9602829c <_printf_engine+0x488>
    9602833c:	372ffb18 	tbnz	w24, #5, 9602829c <_printf_engine+0x488>
    96028340:	3737faf8 	tbnz	w24, #6, 9602829c <_printf_engine+0x488>
				    va_arg(ap, unsigned int);
    96028344:	37f801fa 	tbnz	w26, #31, 96028380 <_printf_engine+0x56c>
    96028348:	91002ec4 	add	x4, x22, #0xb
    9602834c:	2a1a03fc 	mov	w28, w26
    96028350:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    96028354:	b94002c1 	ldr	w1, [x22]
    96028358:	17ffff96 	b	960281b0 <_printf_engine+0x39c>
				    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
    9602835c:	1100235c 	add	w28, w26, #0x8
    96028360:	7100039f 	cmp	w28, #0x0
    96028364:	5400008d 	b.le	96028374 <_printf_engine+0x560>
    96028368:	91003ec4 	add	x4, x22, #0xf
    9602836c:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028370:	17ffffcf 	b	960282ac <_printf_engine+0x498>
    96028374:	aa1603f9 	mov	x25, x22
    96028378:	8b3ac276 	add	x22, x19, w26, sxtw
    9602837c:	17ffffcc 	b	960282ac <_printf_engine+0x498>
				    va_arg(ap, unsigned int);
    96028380:	1100235c 	add	w28, w26, #0x8
    96028384:	7100039f 	cmp	w28, #0x0
    96028388:	5400008d 	b.le	96028398 <_printf_engine+0x584>
    9602838c:	91002ec4 	add	x4, x22, #0xb
    96028390:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028394:	17fffff0 	b	96028354 <_printf_engine+0x540>
    96028398:	aa1603f9 	mov	x25, x22
    9602839c:	8b3ac276 	add	x22, x19, w26, sxtw
    960283a0:	17ffffed 	b	96028354 <_printf_engine+0x540>
				flags |= LONGFLAG | ALTFLAG;
    960283a4:	52801020 	mov	w0, #0x81                  	// #129
    960283a8:	2a000318 	orr	w24, w24, w0
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    960283ac:	36080138 	tbz	w24, #1, 960283d0 <_printf_engine+0x5bc>
				    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
    960283b0:	37f80afa 	tbnz	w26, #31, 9602850c <_printf_engine+0x6f8>
    960283b4:	91003ec4 	add	x4, x22, #0xf
    960283b8:	2a1a03fc 	mov	w28, w26
    960283bc:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960283c0:	f94002c0 	ldr	x0, [x22]
    960283c4:	1400000a 	b	960283ec <_printf_engine+0x5d8>
				flags |= CAPSFLAG;
    960283c8:	32180318 	orr	w24, w24, #0x100
    960283cc:	17fffff8 	b	960283ac <_printf_engine+0x598>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960283d0:	3707ff18 	tbnz	w24, #0, 960283b0 <_printf_engine+0x59c>
    960283d4:	361806b8 	tbz	w24, #3, 960284a8 <_printf_engine+0x694>
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    960283d8:	37f8057a 	tbnz	w26, #31, 96028484 <_printf_engine+0x670>
    960283dc:	91002ec4 	add	x4, x22, #0xb
    960283e0:	2a1a03fc 	mov	w28, w26
    960283e4:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960283e8:	394002c0 	ldrb	w0, [x22]
		table = hextable;
    960283ec:	900000e2 	adrp	x2, 96044000 <__func__.6231+0x4f3>
    960283f0:	900000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    960283f4:	7218031a 	ands	w26, w24, #0x100
    960283f8:	91361c42 	add	x2, x2, #0xd87
    960283fc:	91365c21 	add	x1, x1, #0xd97
    96028400:	9102bba3 	add	x3, x29, #0xae
    96028404:	9a821021 	csel	x1, x1, x2, ne  // ne = any
	buf[--pos] = 0;
    96028408:	3902bfbf 	strb	wzr, [x29, #175]
		unsigned int digit = u % 16;
    9602840c:	12000c02 	and	w2, w0, #0xf
		buf[--pos] = table[digit];
    96028410:	aa0303f6 	mov	x22, x3
		u /= 16;
    96028414:	d344fc00 	lsr	x0, x0, #4
    96028418:	d1000463 	sub	x3, x3, #0x1
		buf[--pos] = table[digit];
    9602841c:	38626822 	ldrb	w2, [x1, x2]
    96028420:	39000462 	strb	w2, [x3, #1]
	} while (u != 0);
    96028424:	b5ffff40 	cbnz	x0, 9602840c <_printf_engine+0x5f8>
				if (flags & ALTFLAG) {
    96028428:	363fe578 	tbz	w24, #7, 960280d4 <_printf_engine+0x2c0>
					OUTPUT_CHAR('0');
    9602842c:	52800600 	mov	w0, #0x30                  	// #48
    96028430:	390223a0 	strb	w0, [x29, #136]
    96028434:	aa1503e2 	mov	x2, x21
    96028438:	d2800021 	mov	x1, #0x1                   	// #1
    9602843c:	910223a0 	add	x0, x29, #0x88
    96028440:	d63f0280 	blr	x20
    96028444:	2a0003e3 	mov	w3, w0
    96028448:	37f80b40 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    9602844c:	7100035f 	cmp	w26, #0x0
    96028450:	52800f01 	mov	w1, #0x78                  	// #120
					OUTPUT_CHAR('0');
    96028454:	8b20c37b 	add	x27, x27, w0, sxtw
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    96028458:	52800b00 	mov	w0, #0x58                  	// #88
    9602845c:	1a811000 	csel	w0, w0, w1, ne  // ne = any
    96028460:	390223a0 	strb	w0, [x29, #136]
    96028464:	aa1503e2 	mov	x2, x21
    96028468:	d2800021 	mov	x1, #0x1                   	// #1
    9602846c:	910223a0 	add	x0, x29, #0x88
    96028470:	d63f0280 	blr	x20
    96028474:	2a0003e3 	mov	w3, w0
    96028478:	37f809c0 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    9602847c:	8b20c37b 	add	x27, x27, w0, sxtw
    96028480:	17ffff15 	b	960280d4 <_printf_engine+0x2c0>
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    96028484:	1100235c 	add	w28, w26, #0x8
    96028488:	7100039f 	cmp	w28, #0x0
    9602848c:	5400008d 	b.le	9602849c <_printf_engine+0x688>
    96028490:	91002ec4 	add	x4, x22, #0xb
    96028494:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028498:	17ffffd4 	b	960283e8 <_printf_engine+0x5d4>
    9602849c:	aa1603f9 	mov	x25, x22
    960284a0:	8b3ac276 	add	x22, x19, w26, sxtw
    960284a4:	17ffffd1 	b	960283e8 <_printf_engine+0x5d4>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960284a8:	36100218 	tbz	w24, #2, 960284e8 <_printf_engine+0x6d4>
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    960284ac:	37f800da 	tbnz	w26, #31, 960284c4 <_printf_engine+0x6b0>
    960284b0:	91002ec4 	add	x4, x22, #0xb
    960284b4:	2a1a03fc 	mov	w28, w26
    960284b8:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960284bc:	794002c0 	ldrh	w0, [x22]
    960284c0:	17ffffcb 	b	960283ec <_printf_engine+0x5d8>
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    960284c4:	1100235c 	add	w28, w26, #0x8
    960284c8:	7100039f 	cmp	w28, #0x0
    960284cc:	5400008d 	b.le	960284dc <_printf_engine+0x6c8>
    960284d0:	91002ec4 	add	x4, x22, #0xb
    960284d4:	927df099 	and	x25, x4, #0xfffffffffffffff8
    960284d8:	17fffff9 	b	960284bc <_printf_engine+0x6a8>
    960284dc:	aa1603f9 	mov	x25, x22
    960284e0:	8b3ac276 	add	x22, x19, w26, sxtw
    960284e4:	17fffff6 	b	960284bc <_printf_engine+0x6a8>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    960284e8:	3727f658 	tbnz	w24, #4, 960283b0 <_printf_engine+0x59c>
    960284ec:	372ff638 	tbnz	w24, #5, 960283b0 <_printf_engine+0x59c>
    960284f0:	3737f618 	tbnz	w24, #6, 960283b0 <_printf_engine+0x59c>
				    va_arg(ap, unsigned int);
    960284f4:	37f801fa 	tbnz	w26, #31, 96028530 <_printf_engine+0x71c>
    960284f8:	91002ec4 	add	x4, x22, #0xb
    960284fc:	2a1a03fc 	mov	w28, w26
    96028500:	927df099 	and	x25, x4, #0xfffffffffffffff8
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    96028504:	b94002c0 	ldr	w0, [x22]
    96028508:	17ffffb9 	b	960283ec <_printf_engine+0x5d8>
				    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
    9602850c:	1100235c 	add	w28, w26, #0x8
    96028510:	7100039f 	cmp	w28, #0x0
    96028514:	5400008d 	b.le	96028524 <_printf_engine+0x710>
    96028518:	91003ec4 	add	x4, x22, #0xf
    9602851c:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028520:	17ffffa8 	b	960283c0 <_printf_engine+0x5ac>
    96028524:	aa1603f9 	mov	x25, x22
    96028528:	8b3ac276 	add	x22, x19, w26, sxtw
    9602852c:	17ffffa5 	b	960283c0 <_printf_engine+0x5ac>
				    va_arg(ap, unsigned int);
    96028530:	1100235c 	add	w28, w26, #0x8
    96028534:	7100039f 	cmp	w28, #0x0
    96028538:	5400008d 	b.le	96028548 <_printf_engine+0x734>
    9602853c:	91002ec4 	add	x4, x22, #0xb
    96028540:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028544:	17fffff0 	b	96028504 <_printf_engine+0x6f0>
    96028548:	aa1603f9 	mov	x25, x22
    9602854c:	8b3ac276 	add	x22, x19, w26, sxtw
    96028550:	17ffffed 	b	96028504 <_printf_engine+0x6f0>
				ptr = va_arg(ap, void *);
    96028554:	1100235c 	add	w28, w26, #0x8
    96028558:	7100039f 	cmp	w28, #0x0
    9602855c:	5400008d 	b.le	9602856c <_printf_engine+0x758>
    96028560:	91003ec4 	add	x4, x22, #0xf
    96028564:	927df099 	and	x25, x4, #0xfffffffffffffff8
    96028568:	17fffea5 	b	96027ffc <_printf_engine+0x1e8>
    9602856c:	aa1603f9 	mov	x25, x22
    96028570:	8b3ac276 	add	x22, x19, w26, sxtw
    96028574:	17fffea2 	b	96027ffc <_printf_engine+0x1e8>
				else if (flags & LONGFLAG)
    96028578:	3707d478 	tbnz	w24, #0, 96028004 <_printf_engine+0x1f0>
				else if (flags & HALFHALFFLAG)
    9602857c:	361800d8 	tbz	w24, #3, 96028594 <_printf_engine+0x780>
					*(signed char *)ptr = chars_written;
    96028580:	3900001b 	strb	w27, [x0]
				break;
    96028584:	2a1c03fa 	mov	w26, w28
    96028588:	aa1903f6 	mov	x22, x25
    9602858c:	f9403fa0 	ldr	x0, [x29, #120]
    96028590:	17fffe2e 	b	96027e48 <_printf_engine+0x34>
				else if (flags & HALFFLAG)
    96028594:	36100078 	tbz	w24, #2, 960285a0 <_printf_engine+0x78c>
					*(short *)ptr = chars_written;
    96028598:	7900001b 	strh	w27, [x0]
    9602859c:	17fffffa 	b	96028584 <_printf_engine+0x770>
				else if (flags & SIZETFLAG)
    960285a0:	3727d338 	tbnz	w24, #4, 96028004 <_printf_engine+0x1f0>
					*(int *)ptr = chars_written;
    960285a4:	b900001b 	str	w27, [x0]
    960285a8:	17fffff7 	b	96028584 <_printf_engine+0x770>
				OUTPUT_CHAR(c);
    960285ac:	2a0003e3 	mov	w3, w0
#undef OUTPUT_STRING
#undef OUTPUT_CHAR

exit:
	return (err < 0) ? err : (int)chars_written;
}
    960285b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960285b4:	2a0303e0 	mov	w0, w3
    960285b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960285bc:	a94363f7 	ldp	x23, x24, [sp, #48]
    960285c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960285c4:	a94573fb 	ldp	x27, x28, [sp, #80]
    960285c8:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    960285cc:	d65f03c0 	ret
			string_len = strlen(s);
    960285d0:	aa1603e0 	mov	x0, x22
    960285d4:	9400074e 	bl	9602a30c <strlen>
    960285d8:	f9003ba0 	str	x0, [x29, #112]
			if (signchar != '\0' && format_num > 0)
    960285dc:	39423fa0 	ldrb	w0, [x29, #143]
    960285e0:	34000080 	cbz	w0, 960285f0 <_printf_engine+0x7dc>
				format_num--;
    960285e4:	710002ff 	cmp	w23, #0x0
    960285e8:	1a9f07e1 	cset	w1, ne  // ne = any
    960285ec:	4b0102f7 	sub	w23, w23, w1
			if (flags & LEADZEROFLAG && signchar != '\0')
    960285f0:	1214031a 	and	w26, w24, #0x1000
    960285f4:	36600158 	tbz	w24, #12, 9602861c <_printf_engine+0x808>
    960285f8:	34000120 	cbz	w0, 9602861c <_printf_engine+0x808>
				OUTPUT_CHAR(signchar);
    960285fc:	390223a0 	strb	w0, [x29, #136]
    96028600:	aa1503e2 	mov	x2, x21
    96028604:	d2800021 	mov	x1, #0x1                   	// #1
    96028608:	910223a0 	add	x0, x29, #0x88
    9602860c:	d63f0280 	blr	x20
    96028610:	2a0003e3 	mov	w3, w0
    96028614:	37fffce0 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    96028618:	8b20c37b 	add	x27, x27, w0, sxtw
    9602861c:	7100035f 	cmp	w26, #0x0
    96028620:	52800606 	mov	w6, #0x30                  	// #48
    96028624:	52800400 	mov	w0, #0x20                  	// #32
    96028628:	1a8010c6 	csel	w6, w6, w0, ne  // ne = any
			for (; format_num > string_len; format_num--)
    9602862c:	f9403ba0 	ldr	x0, [x29, #112]
    96028630:	eb37401f 	cmp	x0, w23, uxtw
    96028634:	54000203 	b.cc	96028674 <_printf_engine+0x860>  // b.lo, b.ul, b.last
			if (!(flags & LEADZEROFLAG) && signchar != '\0')
    96028638:	3500017a 	cbnz	w26, 96028664 <_printf_engine+0x850>
    9602863c:	39423fa0 	ldrb	w0, [x29, #143]
    96028640:	34000120 	cbz	w0, 96028664 <_printf_engine+0x850>
				OUTPUT_CHAR(signchar);
    96028644:	390223a0 	strb	w0, [x29, #136]
    96028648:	aa1503e2 	mov	x2, x21
    9602864c:	d2800021 	mov	x1, #0x1                   	// #1
    96028650:	910223a0 	add	x0, x29, #0x88
    96028654:	d63f0280 	blr	x20
    96028658:	2a0003e3 	mov	w3, w0
    9602865c:	37fffaa0 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    96028660:	8b20c37b 	add	x27, x27, w0, sxtw
			OUTPUT_STRING(s, SIZE_MAX);
    96028664:	aa1503e2 	mov	x2, x21
    96028668:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
    9602866c:	aa1603e0 	mov	x0, x22
    96028670:	17fffe45 	b	96027f84 <_printf_engine+0x170>
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    96028674:	b9006fa6 	str	w6, [x29, #108]
    96028678:	aa1503e2 	mov	x2, x21
    9602867c:	390223a6 	strb	w6, [x29, #136]
    96028680:	d2800021 	mov	x1, #0x1                   	// #1
    96028684:	910223a0 	add	x0, x29, #0x88
    96028688:	d63f0280 	blr	x20
    9602868c:	2a0003e3 	mov	w3, w0
    96028690:	37fff900 	tbnz	w0, #31, 960285b0 <_printf_engine+0x79c>
    96028694:	8b20c37b 	add	x27, x27, w0, sxtw
			for (; format_num > string_len; format_num--)
    96028698:	510006f7 	sub	w23, w23, #0x1
    9602869c:	b9406fa6 	ldr	w6, [x29, #108]
    960286a0:	17ffffe3 	b	9602862c <_printf_engine+0x818>
	return (err < 0) ? err : (int)chars_written;
    960286a4:	2a1b03e3 	mov	w3, w27
    960286a8:	17ffffc2 	b	960285b0 <_printf_engine+0x79c>

00000000960286ac <vsnprintf>:
{
    960286ac:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    960286b0:	910003fd 	mov	x29, sp
    960286b4:	a90153f3 	stp	x19, x20, [sp, #16]
    960286b8:	aa0103f4 	mov	x20, x1
    960286bc:	aa0003f3 	mov	x19, x0
	args.len = len;
    960286c0:	a90487a0 	stp	x0, x1, [x29, #72]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    960286c4:	a9400460 	ldp	x0, x1, [x3]
    960286c8:	a90207a0 	stp	x0, x1, [x29, #32]
	args.pos = 0;
    960286cc:	f9002fbf 	str	xzr, [x29, #88]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    960286d0:	a9410460 	ldp	x0, x1, [x3, #16]
    960286d4:	a90307a0 	stp	x0, x1, [x29, #48]
    960286d8:	910083a3 	add	x3, x29, #0x20
    960286dc:	910123a1 	add	x1, x29, #0x48
    960286e0:	f0ffffe0 	adrp	x0, 96027000 <tegrabl_blob_get_entry+0x3c>
    960286e4:	91356000 	add	x0, x0, #0xd58
    960286e8:	97fffdcb 	bl	96027e14 <_printf_engine>
	if (args.pos >= len)
    960286ec:	f9402fa1 	ldr	x1, [x29, #88]
    960286f0:	eb14003f 	cmp	x1, x20
    960286f4:	540000c3 	b.cc	9602870c <vsnprintf+0x60>  // b.lo, b.ul, b.last
		str[len-1] = '\0';
    960286f8:	8b140273 	add	x19, x19, x20
    960286fc:	381ff27f 	sturb	wzr, [x19, #-1]
}
    96028700:	a94153f3 	ldp	x19, x20, [sp, #16]
    96028704:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96028708:	d65f03c0 	ret
		str[wlen] = '\0';
    9602870c:	3820ca7f 	strb	wzr, [x19, w0, sxtw]
	return wlen;
    96028710:	17fffffc 	b	96028700 <vsnprintf+0x54>

0000000096028714 <vsprintf>:
{
    96028714:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96028718:	910003fd 	mov	x29, sp
	return vsnprintf(str, INT_MAX, fmt, ap);
    9602871c:	a9401444 	ldp	x4, x5, [x2]
    96028720:	a90117a4 	stp	x4, x5, [x29, #16]
    96028724:	a9410c42 	ldp	x2, x3, [x2, #16]
    96028728:	a9020fa2 	stp	x2, x3, [x29, #32]
    9602872c:	910043a3 	add	x3, x29, #0x10
    96028730:	aa0103e2 	mov	x2, x1
    96028734:	b2407be1 	mov	x1, #0x7fffffff            	// #2147483647
    96028738:	97ffffdd 	bl	960286ac <vsnprintf>
}
    9602873c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96028740:	d65f03c0 	ret

0000000096028744 <sprintf>:
{
    96028744:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    96028748:	910003fd 	mov	x29, sp
    9602874c:	a90d0fa2 	stp	x2, x3, [x29, #208]
	va_start(ap, fmt);
    96028750:	910403a2 	add	x2, x29, #0x100
    96028754:	a9030ba2 	stp	x2, x2, [x29, #48]
    96028758:	910343a2 	add	x2, x29, #0xd0
    9602875c:	f90023a2 	str	x2, [x29, #64]
    96028760:	128005e2 	mov	w2, #0xffffffd0            	// #-48
    96028764:	b9004ba2 	str	w2, [x29, #72]
    96028768:	12800fe2 	mov	w2, #0xffffff80            	// #-128
    9602876c:	b9004fa2 	str	w2, [x29, #76]
	err = vsprintf(str, fmt, ap);
    96028770:	a9430fa2 	ldp	x2, x3, [x29, #48]
    96028774:	a9010fa2 	stp	x2, x3, [x29, #16]
    96028778:	a9440fa2 	ldp	x2, x3, [x29, #64]
    9602877c:	a9020fa2 	stp	x2, x3, [x29, #32]
{
    96028780:	3d8017a0 	str	q0, [x29, #80]
	err = vsprintf(str, fmt, ap);
    96028784:	910043a2 	add	x2, x29, #0x10
{
    96028788:	3d801ba1 	str	q1, [x29, #96]
    9602878c:	3d801fa2 	str	q2, [x29, #112]
    96028790:	3d8023a3 	str	q3, [x29, #128]
    96028794:	3d8027a4 	str	q4, [x29, #144]
    96028798:	3d802ba5 	str	q5, [x29, #160]
    9602879c:	3d802fa6 	str	q6, [x29, #176]
    960287a0:	3d8033a7 	str	q7, [x29, #192]
    960287a4:	a90e17a4 	stp	x4, x5, [x29, #224]
    960287a8:	a90f1fa6 	stp	x6, x7, [x29, #240]
	err = vsprintf(str, fmt, ap);
    960287ac:	97ffffda 	bl	96028714 <vsprintf>
}
    960287b0:	a8d07bfd 	ldp	x29, x30, [sp], #256
    960287b4:	d65f03c0 	ret

00000000960287b8 <malloc>:

#define LOCAL_TRACE   0

void *malloc(size_t size)
{
	return (void *)tegrabl_malloc(size);
    960287b8:	17fff8b0 	b	96026a78 <tegrabl_malloc>

00000000960287bc <free>:
	return tegrabl_realloc(ptr, size);
}

void free(void *ptr)
{
	return tegrabl_free(ptr);
    960287bc:	17fff8bf 	b	96026ab8 <tegrabl_free>

00000000960287c0 <vfprintf>:
{
	return getc(stdin);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
    960287c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960287c4:	910003fd 	mov	x29, sp
	return fp->vfprintf(fp->ctx, fmt, ap);
    960287c8:	a9401444 	ldp	x4, x5, [x2]
    960287cc:	a90117a4 	stp	x4, x5, [x29, #16]
    960287d0:	a9410c42 	ldp	x2, x3, [x2, #16]
    960287d4:	a9020fa2 	stp	x2, x3, [x29, #32]
    960287d8:	910043a2 	add	x2, x29, #0x10
    960287dc:	f9401003 	ldr	x3, [x0, #32]
    960287e0:	f9400000 	ldr	x0, [x0]
    960287e4:	d63f0060 	blr	x3
}
    960287e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960287ec:	d65f03c0 	ret

00000000960287f0 <_printf>:
	va_end(ap);
	return err;
}

int _printf(const char *fmt, ...)
{
    960287f0:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
    960287f4:	910003fd 	mov	x29, sp
    960287f8:	a90d8ba1 	stp	x1, x2, [x29, #216]
	va_list ap;
	int err;

	va_start(ap, fmt);
    960287fc:	910443a1 	add	x1, x29, #0x110
    96028800:	a90307a1 	stp	x1, x1, [x29, #48]
    96028804:	910343a1 	add	x1, x29, #0xd0
    96028808:	f90023a1 	str	x1, [x29, #64]
    9602880c:	128006e1 	mov	w1, #0xffffffc8            	// #-56
    96028810:	b9004ba1 	str	w1, [x29, #72]
    96028814:	12800fe1 	mov	w1, #0xffffff80            	// #-128
    96028818:	b9004fa1 	str	w1, [x29, #76]
	err = vfprintf(stdout, fmt, ap);
    9602881c:	aa0003e1 	mov	x1, x0
{
    96028820:	a90e93a3 	stp	x3, x4, [x29, #232]
	err = vfprintf(stdout, fmt, ap);
    96028824:	d0000100 	adrp	x0, 9604a000 <s_qspi_info+0x20>
    96028828:	a9430fa2 	ldp	x2, x3, [x29, #48]
    9602882c:	a9010fa2 	stp	x2, x3, [x29, #16]
    96028830:	a9440fa2 	ldp	x2, x3, [x29, #64]
    96028834:	a9020fa2 	stp	x2, x3, [x29, #32]
{
    96028838:	3d8017a0 	str	q0, [x29, #80]
	err = vfprintf(stdout, fmt, ap);
    9602883c:	910043a2 	add	x2, x29, #0x10
{
    96028840:	3d801ba1 	str	q1, [x29, #96]
	err = vfprintf(stdout, fmt, ap);
    96028844:	91384000 	add	x0, x0, #0xe10
{
    96028848:	3d801fa2 	str	q2, [x29, #112]
    9602884c:	3d8023a3 	str	q3, [x29, #128]
    96028850:	3d8027a4 	str	q4, [x29, #144]
    96028854:	3d802ba5 	str	q5, [x29, #160]
    96028858:	3d802fa6 	str	q6, [x29, #176]
    9602885c:	3d8033a7 	str	q7, [x29, #192]
    96028860:	a90f9ba5 	stp	x5, x6, [x29, #248]
    96028864:	f90087a7 	str	x7, [x29, #264]
	err = vfprintf(stdout, fmt, ap);
    96028868:	97ffffd6 	bl	960287c0 <vfprintf>
	va_end(ap);

	return err;
}
    9602886c:	a8d17bfd 	ldp	x29, x30, [sp], #272
    96028870:	d65f03c0 	ret

0000000096028874 <surface_compute_pitch>:
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t pitch;

	/* Calculate pitch & align (by adding pad bytes) */
	if (surf->layout == SURFACE_LAYOUT_PITCH) {
    96028874:	b9402801 	ldr	w1, [x0, #40]
    96028878:	35000121 	cbnz	w1, 9602889c <surface_compute_pitch+0x28>
		pitch = surf->width * BITS_PER_PIXEL;
    9602887c:	b9400001 	ldr	w1, [x0]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96028880:	52800002 	mov	w2, #0x0                   	// #0
		pitch = (pitch + 7) >> 3;
    96028884:	531e6821 	ubfiz	w1, w1, #2, #27
	return (value + (alignment-1)) & ~(alignment-1);
    96028888:	1103fc21 	add	w1, w1, #0xff
    9602888c:	12185c21 	and	w1, w1, #0xffffff00
		pitch = align_value(pitch, SURFACE_LINEAR_PITCH_ALIGN);
	} else {
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
		pitch = 0;
	}
	surf->pitch = pitch;
    96028890:	b9000801 	str	w1, [x0, #8]
	return err;
}
    96028894:	2a0203e0 	mov	w0, w2
    96028898:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
    9602889c:	52802022 	mov	w2, #0x101                 	// #257
		pitch = 0;
    960288a0:	52800001 	mov	w1, #0x0                   	// #0
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
    960288a4:	72a8e8e2 	movk	w2, #0x4747, lsl #16
    960288a8:	17fffffa 	b	96028890 <surface_compute_pitch+0x1c>

00000000960288ac <surface_compute_size>:
{
	uint32_t num_bytes;
	uint32_t aligned_height = surf->height;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if (surf->width == 0 ||	surf->height == 0) {
    960288ac:	b9400001 	ldr	w1, [x0]
    960288b0:	34000381 	cbz	w1, 96028920 <surface_compute_size+0x74>
	uint32_t aligned_height = surf->height;
    960288b4:	b9400404 	ldr	w4, [x0, #4]
    960288b8:	aa0003e3 	mov	x3, x0
	if (surf->width == 0 ||	surf->height == 0) {
    960288bc:	34000324 	cbz	w4, 96028920 <surface_compute_size+0x74>
{
    960288c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960288c4:	910003fd 	mov	x29, sp
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
		return err;
	}

	err = surface_compute_pitch(surf);
    960288c8:	97ffffeb 	bl	96028874 <surface_compute_pitch>

	if (surf->pitch == 0) {
    960288cc:	b9400861 	ldr	w1, [x3, #8]
    960288d0:	340002e1 	cbz	w1, 9602892c <surface_compute_size+0x80>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
		return err;
	}

	switch (surf->layout) {
    960288d4:	b9402862 	ldr	w2, [x3, #40]
    960288d8:	35000302 	cbnz	w2, 96028938 <surface_compute_size+0x8c>
	case SURFACE_LAYOUT_PITCH:
		if (is_npot(surf->width) || is_npot(surf->height)) {
    960288dc:	b9400062 	ldr	w2, [x3]
	return !IS_POWER_OF_2(val);
    960288e0:	4b0203e5 	neg	w5, w2
		if (is_npot(surf->width) || is_npot(surf->height)) {
    960288e4:	6a25005f 	bics	wzr, w2, w5
    960288e8:	540000a1 	b.ne	960288fc <surface_compute_size+0x50>  // b.any
    960288ec:	b9400462 	ldr	w2, [x3, #4]
	return !IS_POWER_OF_2(val);
    960288f0:	4b0203e5 	neg	w5, w2
		if (is_npot(surf->width) || is_npot(surf->height)) {
    960288f4:	6a25005f 	bics	wzr, w2, w5
    960288f8:	54000060 	b.eq	96028904 <surface_compute_size+0x58>  // b.none
	return (value + (alignment-1)) & ~(alignment-1);
    960288fc:	11003c84 	add	w4, w4, #0xf
    96028900:	121c6c84 	and	w4, w4, #0xfffffff0
    96028904:	11408022 	add	w2, w1, #0x20, lsl #12
    96028908:	11000c42 	add	w2, w2, #0x3
    9602890c:	1b040821 	madd	w1, w1, w4, w2
    96028910:	120f3821 	and	w1, w1, #0xfffe0000
	/* Adding extra row and a pixel fixes */
	num_bytes += surf->pitch + ((BITS_PER_PIXEL + 7) >> 3);

	num_bytes = align_value(num_bytes, SURFACE_LINEAR_SIZE_ALIGN);

	surf->size = num_bytes;
    96028914:	b9001861 	str	w1, [x3, #24]
	return err;
}
    96028918:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602891c:	d65f03c0 	ret
		return err;
    96028920:	52802040 	mov	w0, #0x102                 	// #258
    96028924:	72a8e8e0 	movk	w0, #0x4747, lsl #16
}
    96028928:	d65f03c0 	ret
		return err;
    9602892c:	52804040 	mov	w0, #0x202                 	// #514
		return err;
    96028930:	72a8e8e0 	movk	w0, #0x4747, lsl #16
    96028934:	17fffff9 	b	96028918 <surface_compute_size+0x6c>
    96028938:	52804020 	mov	w0, #0x201                 	// #513
    9602893c:	17fffffd 	b	96028930 <surface_compute_size+0x84>

0000000096028940 <tegrabl_surface_clear>:
	return err;
}

void tegrabl_surface_clear(struct tegrabl_surface *surf)
{
	memset((void *)surf->base, 0, surf->size);
    96028940:	b9401802 	ldr	w2, [x0, #24]
    96028944:	52800001 	mov	w1, #0x0                   	// #0
    96028948:	f9400800 	ldr	x0, [x0, #16]
    9602894c:	14000537 	b	96029e28 <memset>

0000000096028950 <tegrabl_surface_setup>:
}

tegrabl_error_t tegrabl_surface_setup(struct tegrabl_surface *surf)
{
    96028950:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96028954:	910003fd 	mov	x29, sp
    96028958:	a90153f3 	stp	x19, x20, [sp, #16]
    9602895c:	f90013f5 	str	x21, [sp, #32]
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uintptr_t base;

	if (!surf) {
    96028960:	b4000440 	cbz	x0, 960289e8 <tegrabl_surface_setup+0x98>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
		return err;
	}

	surf->layout = SURFACE_LAYOUT_PITCH;
	surf->pixel_format = PIXEL_FORMAT_A8B8G8R8;
    96028964:	52800075 	mov	w21, #0x3                   	// #3
    96028968:	b9002015 	str	w21, [x0, #32]
	surf->layout = SURFACE_LAYOUT_PITCH;
    9602896c:	b900281f 	str	wzr, [x0, #40]
    96028970:	aa0003f3 	mov	x19, x0
	err = surface_compute_pitch(surf);
    96028974:	97ffffc0 	bl	96028874 <surface_compute_pitch>
    96028978:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    9602897c:	350002c0 	cbnz	w0, 960289d4 <tegrabl_surface_setup+0x84>
	if (surf->layout == SURFACE_LAYOUT_PITCH)
    96028980:	b9402a60 	ldr	w0, [x19, #40]
    96028984:	35000380 	cbnz	w0, 960289f4 <tegrabl_surface_setup+0xa4>
		surf->alignment = SURFACE_LINEAR_BASE_ALIGN;
    96028988:	52820000 	mov	w0, #0x1000                	// #4096
    9602898c:	b9001e60 	str	w0, [x19, #28]
	if (err != TEGRABL_NO_ERROR) {
		pr_debug("compute alignment failed\n");
		goto fail;
	}

	err = surface_compute_size(surf);
    96028990:	aa1303e0 	mov	x0, x19
    96028994:	97ffffc6 	bl	960288ac <surface_compute_size>
    96028998:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    9602899c:	350001c0 	cbnz	w0, 960289d4 <tegrabl_surface_setup+0x84>
		pr_debug("compute size failed\n");
		goto fail;
	}

	/* This buffer is not freed */
	base = (uintptr_t)tegrabl_malloc(surf->size + surf->alignment - 1);
    960289a0:	29430660 	ldp	w0, w1, [x19, #24]
    960289a4:	0b010000 	add	w0, w0, w1
    960289a8:	51000400 	sub	w0, w0, #0x1
    960289ac:	97fff833 	bl	96026a78 <tegrabl_malloc>
	if ((void *)base == NULL) {
    960289b0:	b4000260 	cbz	x0, 960289fc <tegrabl_surface_setup+0xac>
		pr_debug("allocation for framebuffer failed\n");
		err = TEGRABL_ERR_NO_MEMORY;
		goto fail;
	}
	base += surf->alignment;
    960289b4:	b9401e61 	ldr	w1, [x19, #28]
    960289b8:	8b214002 	add	x2, x0, w1, uxtw
	base &= ~(surf->alignment - 1);
    960289bc:	4b0103e0 	neg	w0, w1
    960289c0:	8a020000 	and	x0, x0, x2
	pr_debug("base = %p, width = %d, height = %d\n", (void *)base, surf->width,
			 surf->height);
	pr_debug("pitch  = %d, alignment = %d, size = %d\n", surf->pitch,
			 surf->alignment, surf->size);
	surf->base = base;
	memset((void *)surf->base, 0, surf->size);
    960289c4:	b9401a62 	ldr	w2, [x19, #24]
	surf->base = base;
    960289c8:	f9000a60 	str	x0, [x19, #16]
	memset((void *)surf->base, 0, surf->size);
    960289cc:	52800001 	mov	w1, #0x0                   	// #0
    960289d0:	94000516 	bl	96029e28 <memset>

fail:
	return err;
}
    960289d4:	2a1403e0 	mov	w0, w20
    960289d8:	f94013f5 	ldr	x21, [sp, #32]
    960289dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960289e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960289e4:	d65f03c0 	ret
		return err;
    960289e8:	52802054 	mov	w20, #0x102                 	// #258
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 3);
    960289ec:	72a8e8f4 	movk	w20, #0x4747, lsl #16
    960289f0:	17fffff9 	b	960289d4 <tegrabl_surface_setup+0x84>
    960289f4:	52806034 	mov	w20, #0x301                 	// #769
    960289f8:	17fffffd 	b	960289ec <tegrabl_surface_setup+0x9c>
		err = TEGRABL_ERR_NO_MEMORY;
    960289fc:	2a1503f4 	mov	w20, w21
    96028a00:	17fffff5 	b	960289d4 <tegrabl_surface_setup+0x84>

0000000096028a04 <tegrabl_surface_write>:

tegrabl_error_t tegrabl_surface_write(struct tegrabl_surface *surf,	uint32_t x,
	uint32_t y, uint32_t width, uint32_t height, const void *src_pixels)
{
    96028a04:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96028a08:	910003fd 	mov	x29, sp
    96028a0c:	a90153f3 	stp	x19, x20, [sp, #16]
    96028a10:	a9025bf5 	stp	x21, x22, [sp, #32]
    96028a14:	aa0003f5 	mov	x21, x0
    96028a18:	a90363f7 	stp	x23, x24, [sp, #48]
    96028a1c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96028a20:	2a0203f9 	mov	w25, w2
	uint8_t *dest_current;

	pr_debug("x = %d, y = %d, width = %d, height = %d\n",
			 x, y, width, height);
	/* Make sure we don't fall off the end of the surface */
	if (x + width > surf->width) {
    96028a24:	b9400000 	ldr	w0, [x0]
    96028a28:	0b030022 	add	w2, w1, w3
    96028a2c:	6b00005f 	cmp	w2, w0
    96028a30:	54000748 	b.hi	96028b18 <tegrabl_surface_write+0x114>  // b.pmore
    96028a34:	2a0403f6 	mov	w22, w4
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
		goto fail;
	}
	if (y + height > surf->height) {
    96028a38:	b94006a2 	ldr	w2, [x21, #4]
    96028a3c:	0b160320 	add	w0, w25, w22
    96028a40:	6b02001f 	cmp	w0, w2
    96028a44:	54000708 	b.hi	96028b24 <tegrabl_surface_write+0x120>  // b.pmore
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
		goto fail;
	}
	width >>= 3;
	is_interlace = (surf->scan_format == SCAN_FORMAT_INTERLACIVE);
	if (surf->layout == SURFACE_LAYOUT_PITCH) {
    96028a48:	b9402aa0 	ldr	w0, [x21, #40]
    96028a4c:	35000700 	cbnz	w0, 96028b2c <tegrabl_surface_write+0x128>
		uint32_t second_field_offset = surf->second_field_offset;
		dest = (uint8_t *)surf->base + y * surf->pitch + x;
    96028a50:	b9400ab3 	ldr	w19, [x21, #8]
    96028a54:	d37e6821 	ubfiz	x1, x1, #2, #27
    96028a58:	f9400aa0 	ldr	x0, [x21, #16]
    96028a5c:	aa0503f7 	mov	x23, x5
	width >>= 3;
    96028a60:	531e6874 	ubfiz	w20, w3, #2, #27
		dest = (uint8_t *)surf->base + y * surf->pitch + x;
    96028a64:	1b137f33 	mul	w19, w25, w19
    96028a68:	8b000273 	add	x19, x19, x0
		if (is_interlace) {
    96028a6c:	b94026a0 	ldr	w0, [x21, #36]
		dest = (uint8_t *)surf->base + y * surf->pitch + x;
    96028a70:	8b010273 	add	x19, x19, x1
		if (is_interlace) {
    96028a74:	7100041f 	cmp	w0, #0x1
    96028a78:	540001a0 	b.eq	96028aac <tegrabl_surface_write+0xa8>  // b.none
				 memcpy(dest_current, src, width);
				 src += width;
			}
		} else {
			while (height--) {
				memcpy(dest, src, width);
    96028a7c:	2a1403f4 	mov	w20, w20
			while (height--) {
    96028a80:	510006d6 	sub	w22, w22, #0x1
    96028a84:	310006df 	cmn	w22, #0x1
    96028a88:	540001c0 	b.eq	96028ac0 <tegrabl_surface_write+0xbc>  // b.none
				memcpy(dest, src, width);
    96028a8c:	aa1703e1 	mov	x1, x23
    96028a90:	aa1303e0 	mov	x0, x19
    96028a94:	aa1403e2 	mov	x2, x20
    96028a98:	94000523 	bl	96029f24 <memcpy>
				src += width;
				dest += surf->pitch;
    96028a9c:	b9400aa0 	ldr	w0, [x21, #8]
				src += width;
    96028aa0:	8b1402f7 	add	x23, x23, x20
				dest += surf->pitch;
    96028aa4:	8b000273 	add	x19, x19, x0
    96028aa8:	17fffff6 	b	96028a80 <tegrabl_surface_write+0x7c>
					dest_current = dest + (cury >> 1) * (surf->pitch) +
    96028aac:	b9402eba 	ldr	w26, [x21, #44]
				 memcpy(dest_current, src, width);
    96028ab0:	2a1403f4 	mov	w20, w20
		uint32_t second_field_offset = surf->second_field_offset;
    96028ab4:	d2800018 	mov	x24, #0x0                   	// #0
			for (; cury < height; cury++) {
    96028ab8:	eb16031f 	cmp	x24, x22
    96028abc:	54000101 	b.ne	96028adc <tegrabl_surface_write+0xd8>  // b.any
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96028ac0:	52800000 	mov	w0, #0x0                   	// #0
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 4);
	}

fail:
	return err;
}
    96028ac4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96028ac8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96028acc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96028ad0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96028ad4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96028ad8:	d65f03c0 	ret
    96028adc:	b9400aa0 	ldr	w0, [x21, #8]
    96028ae0:	53017f01 	lsr	w1, w24, #1
				if ((cury + y) & 1)
    96028ae4:	0b180322 	add	w2, w25, w24
    96028ae8:	91000718 	add	x24, x24, #0x1
					dest_current = dest + (cury >> 1) * (surf->pitch) +
    96028aec:	f240005f 	tst	x2, #0x1
				 memcpy(dest_current, src, width);
    96028af0:	aa1403e2 	mov	x2, x20
    96028af4:	1b007c21 	mul	w1, w1, w0
					dest_current = dest + (cury >> 1) * (surf->pitch) +
    96028af8:	8b010343 	add	x3, x26, x1
    96028afc:	8b010260 	add	x0, x19, x1
    96028b00:	8b030263 	add	x3, x19, x3
				 memcpy(dest_current, src, width);
    96028b04:	aa1703e1 	mov	x1, x23
    96028b08:	9a830000 	csel	x0, x0, x3, eq  // eq = none
				 src += width;
    96028b0c:	8b1402f7 	add	x23, x23, x20
				 memcpy(dest_current, src, width);
    96028b10:	94000505 	bl	96029f24 <memcpy>
    96028b14:	17ffffe9 	b	96028ab8 <tegrabl_surface_write+0xb4>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    96028b18:	52804040 	mov	w0, #0x202                 	// #514
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 4);
    96028b1c:	72a8e8e0 	movk	w0, #0x4747, lsl #16
	return err;
    96028b20:	17ffffe9 	b	96028ac4 <tegrabl_surface_write+0xc0>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    96028b24:	52806040 	mov	w0, #0x302                 	// #770
    96028b28:	17fffffd 	b	96028b1c <tegrabl_surface_write+0x118>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 4);
    96028b2c:	52808020 	mov	w0, #0x401                 	// #1025
    96028b30:	17fffffb 	b	96028b1c <tegrabl_surface_write+0x118>

0000000096028b34 <tegrabl_render_text_set_rotation_angle>:

tegrabl_error_t tegrabl_render_text_set_rotation_angle(uint32_t angle)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((angle != 90) && (angle != 180) && (angle != 270) && (angle != 0)) {
    96028b34:	7101681f 	cmp	w0, #0x5a
    96028b38:	52801681 	mov	w1, #0xb4                  	// #180
    96028b3c:	7a411004 	ccmp	w0, w1, #0x4, ne  // ne = any
    96028b40:	540001e0 	b.eq	96028b7c <tegrabl_render_text_set_rotation_angle+0x48>  // b.none
    96028b44:	7104381f 	cmp	w0, #0x10e
    96028b48:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    96028b4c:	54000180 	b.eq	96028b7c <tegrabl_render_text_set_rotation_angle+0x48>  // b.none
{
    96028b50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
		pr_error("(%s) only 0/90/180/270 rotation is supported\n", __func__);
    96028b54:	900000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96028b58:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96028b5c:	91369c21 	add	x1, x1, #0xda7
{
    96028b60:	910003fd 	mov	x29, sp
		pr_error("(%s) only 0/90/180/270 rotation is supported\n", __func__);
    96028b64:	91373800 	add	x0, x0, #0xdce
    96028b68:	97ffe6c2 	bl	96022670 <tegrabl_printf>
		return err;
    96028b6c:	52802020 	mov	w0, #0x101                 	// #257
    96028b70:	72a8e8e0 	movk	w0, #0x4747, lsl #16

	rotation_angle = angle;
	pr_debug("text rotation angle = %d\n", rotation_angle);

	return err;
}
    96028b74:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96028b78:	d65f03c0 	ret
	rotation_angle = angle;
    96028b7c:	d0000261 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96028b80:	b90a6820 	str	w0, [x1, #2664]
	return err;
    96028b84:	52800000 	mov	w0, #0x0                   	// #0
}
    96028b88:	d65f03c0 	ret

0000000096028b8c <tegrabl_render_text_get_font>:
}

struct text_font *tegrabl_render_text_get_font(void)
{
	return &current_font;
}
    96028b8c:	d0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96028b90:	91338000 	add	x0, x0, #0xce0
    96028b94:	d65f03c0 	ret

0000000096028b98 <tegrabl_render_text_set_position>:
void tegrabl_render_text_set_position(uint32_t x, uint32_t y)
{
	struct text_position *position;
	position = tegrabl_render_text_get_position();

	position->x = x;
    96028b98:	d0000262 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96028b9c:	9133e043 	add	x3, x2, #0xcf8
    96028ba0:	b90cf840 	str	w0, [x2, #3320]
	position->y = y;
    96028ba4:	b9000461 	str	w1, [x3, #4]
}
    96028ba8:	d65f03c0 	ret

0000000096028bac <tegrabl_render_text_set_font>:

void tegrabl_render_text_set_font(tegrabl_font_type_t type, uint32_t size)
{
	struct text_font *font;
	font = tegrabl_render_text_get_font();
	font->type = type;
    96028bac:	d0000263 	adrp	x3, 96076000 <free_dram_block+0x38e8>
    96028bb0:	91338062 	add	x2, x3, #0xce0
    96028bb4:	b90ce060 	str	w0, [x3, #3296]
	font->size = size;
	font->width = DISP_FONT_WIDTH;
    96028bb8:	b21d03e0 	mov	x0, #0x800000008           	// #34359738376
	font->size = size;
    96028bbc:	b9000441 	str	w1, [x2, #4]
	font->height = DISP_FONT_HEIGHT;
	font->width_scaled = font->width * size;
    96028bc0:	531d7021 	lsl	w1, w1, #3
	font->width = DISP_FONT_WIDTH;
    96028bc4:	f9000440 	str	x0, [x2, #8]
	font->height_scaled = font->height * size;
    96028bc8:	29020441 	stp	w1, w1, [x2, #16]
}
    96028bcc:	d65f03c0 	ret

0000000096028bd0 <tegrabl_render_image_set_rotation_angle>:

tegrabl_error_t tegrabl_render_image_set_rotation_angle(uint32_t angle)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((angle != 90) && (angle != 180) && (angle != 270) && (angle != 0)) {
    96028bd0:	7101681f 	cmp	w0, #0x5a
    96028bd4:	52801681 	mov	w1, #0xb4                  	// #180
    96028bd8:	7a411004 	ccmp	w0, w1, #0x4, ne  // ne = any
    96028bdc:	540001e0 	b.eq	96028c18 <tegrabl_render_image_set_rotation_angle+0x48>  // b.none
    96028be0:	7104381f 	cmp	w0, #0x10e
    96028be4:	7a401804 	ccmp	w0, #0x0, #0x4, ne  // ne = any
    96028be8:	54000180 	b.eq	96028c18 <tegrabl_render_image_set_rotation_angle+0x48>  // b.none
{
    96028bec:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
		pr_error("(%s) only 0/90/180/270 rotation is supported\n", __func__);
    96028bf0:	900000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96028bf4:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96028bf8:	9137fc21 	add	x1, x1, #0xdff
{
    96028bfc:	910003fd 	mov	x29, sp
		pr_error("(%s) only 0/90/180/270 rotation is supported\n", __func__);
    96028c00:	91373800 	add	x0, x0, #0xdce
    96028c04:	97ffe69b 	bl	96022670 <tegrabl_printf>
		return err;
    96028c08:	52802020 	mov	w0, #0x101                 	// #257
    96028c0c:	72a8e8e0 	movk	w0, #0x4747, lsl #16

	rotation_angle = angle;
	pr_debug("image rotation angle = %d\n", rotation_angle);

	return err;
}
    96028c10:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96028c14:	d65f03c0 	ret
	rotation_angle = angle;
    96028c18:	d0000261 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    96028c1c:	b90a6c20 	str	w0, [x1, #2668]
	return err;
    96028c20:	52800000 	mov	w0, #0x0                   	// #0
}
    96028c24:	d65f03c0 	ret

0000000096028c28 <tegrabl_render_bmp>:
	return err;
}

tegrabl_error_t tegrabl_render_bmp(struct tegrabl_surface *surf,
								   uint8_t *buf, uint32_t length)
{
    96028c28:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	uint32_t bytes_per_pixel = 0;
	uint32_t pixel_offset = 0;
	uint32_t rotate_angle;
	uint32_t x_off = 0, y_off = 0;

	if (!buf || !surf || !length) {
    96028c2c:	f100003f 	cmp	x1, #0x0
    96028c30:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
{
    96028c34:	910003fd 	mov	x29, sp
    96028c38:	a90153f3 	stp	x19, x20, [sp, #16]
    96028c3c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96028c40:	a90363f7 	stp	x23, x24, [sp, #48]
    96028c44:	a9046bf9 	stp	x25, x26, [sp, #64]
    96028c48:	a90573fb 	stp	x27, x28, [sp, #80]
	if (!buf || !surf || !length) {
    96028c4c:	540020e0 	b.eq	96029068 <tegrabl_render_bmp+0x440>  // b.none
    96028c50:	2a0203f7 	mov	w23, w2
    96028c54:	340020a2 	cbz	w2, 96029068 <tegrabl_render_bmp+0x440>
    96028c58:	aa0003f6 	mov	x22, x0
    96028c5c:	aa0103f4 	mov	x20, x1
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
		goto fail;
	}

	/* Allocate bmp file structure */
	bmf = tegrabl_malloc(sizeof(struct bitmap_file));
    96028c60:	d2800800 	mov	x0, #0x40                  	// #64
    96028c64:	97fff785 	bl	96026a78 <tegrabl_malloc>
    96028c68:	aa0003f3 	mov	x19, x0
	if (!bmf) {
    96028c6c:	b4002060 	cbz	x0, 96029078 <tegrabl_render_bmp+0x450>
	if ((!buf) || (!bmf) || (len < BMP_HEADER_LENGTH)) {
    96028c70:	7100d6ff 	cmp	w23, #0x35
    96028c74:	54000c89 	b.ls	96028e04 <tegrabl_render_bmp+0x1dc>  // b.plast
	bmf->bfh.magic = hdr[0];
    96028c78:	79400280 	ldrh	w0, [x20]
	if (memcmp((void *)&(bmf->bfh.magic), "BM", strlen("BM"))) {
    96028c7c:	900000f5 	adrp	x21, 96044000 <__func__.6231+0x4f3>
	bmf->bfh.magic = hdr[0];
    96028c80:	79000260 	strh	w0, [x19]
	if (memcmp((void *)&(bmf->bfh.magic), "BM", strlen("BM"))) {
    96028c84:	913912b5 	add	x21, x21, #0xe44
	bmf->bfh.file_size = hdr[1] | hdr[2] << 16;
    96028c88:	b8402280 	ldur	w0, [x20, #2]
    96028c8c:	b9000660 	str	w0, [x19, #4]
	bmf->bfh.reserved1 = hdr[3];
    96028c90:	79400e80 	ldrh	w0, [x20, #6]
    96028c94:	79001260 	strh	w0, [x19, #8]
	bmf->bfh.reserved2 = hdr[4];
    96028c98:	79401280 	ldrh	w0, [x20, #8]
    96028c9c:	79001660 	strh	w0, [x19, #10]
	bmf->bfh.start_offset = hdr[5] | hdr[6] << 16;
    96028ca0:	b840a280 	ldur	w0, [x20, #10]
    96028ca4:	b9000e60 	str	w0, [x19, #12]
	bmf->bih.header_size = hdr[7] | hdr[8] << 16;
    96028ca8:	b840e280 	ldur	w0, [x20, #14]
    96028cac:	b9001260 	str	w0, [x19, #16]
	bmf->bih.width = hdr[9] | hdr[10] << 16;
    96028cb0:	b8412280 	ldur	w0, [x20, #18]
    96028cb4:	b9001660 	str	w0, [x19, #20]
	bmf->bih.height = hdr[11] | hdr[12] << 16;
    96028cb8:	b8416280 	ldur	w0, [x20, #22]
    96028cbc:	b9001a60 	str	w0, [x19, #24]
	bmf->bih.planes = hdr[13];
    96028cc0:	79403680 	ldrh	w0, [x20, #26]
    96028cc4:	79003a60 	strh	w0, [x19, #28]
	bmf->bih.depth = hdr[14] | hdr[15] << 16;
    96028cc8:	79403a80 	ldrh	w0, [x20, #28]
    96028ccc:	79003e60 	strh	w0, [x19, #30]
	bmf->bih.compression_type = hdr[15] | hdr[16] << 16;
    96028cd0:	b841e280 	ldur	w0, [x20, #30]
    96028cd4:	b9002260 	str	w0, [x19, #32]
	bmf->bih.image_size = hdr[17] | hdr[18] << 16;
    96028cd8:	b8422280 	ldur	w0, [x20, #34]
    96028cdc:	b9002660 	str	w0, [x19, #36]
	bmf->bih.horizontal_resolution = hdr[19] | hdr[20] << 16;
    96028ce0:	b8426280 	ldur	w0, [x20, #38]
    96028ce4:	b9002a60 	str	w0, [x19, #40]
	bmf->bih.vertical_resolution = hdr[21] | hdr[22] << 16;
    96028ce8:	b842a280 	ldur	w0, [x20, #42]
    96028cec:	b9002e60 	str	w0, [x19, #44]
	bmf->bih.num_colors = hdr[23] | hdr[24] << 16;
    96028cf0:	b842e280 	ldur	w0, [x20, #46]
    96028cf4:	b9003260 	str	w0, [x19, #48]
	bmf->bih.num_imp_colors = hdr[25] | hdr[26] << 16;
    96028cf8:	b8432280 	ldur	w0, [x20, #50]
    96028cfc:	b9003660 	str	w0, [x19, #52]
	if (memcmp((void *)&(bmf->bfh.magic), "BM", strlen("BM"))) {
    96028d00:	aa1503e0 	mov	x0, x21
    96028d04:	94000582 	bl	9602a30c <strlen>
    96028d08:	aa0003e2 	mov	x2, x0
    96028d0c:	aa1503e1 	mov	x1, x21
    96028d10:	aa1303e0 	mov	x0, x19
    96028d14:	940004d7 	bl	9602a070 <memcmp>
    96028d18:	340003e0 	cbz	w0, 96028d94 <tegrabl_render_bmp+0x16c>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 2);
    96028d1c:	52804034 	mov	w20, #0x201                 	// #513
		pr_error("(%s) Only BMP image is supported\n", __func__);
    96028d20:	900000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96028d24:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96028d28:	91389c21 	add	x1, x1, #0xe27
    96028d2c:	91391c00 	add	x0, x0, #0xe47
    96028d30:	97ffe650 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    96028d34:	72a8e8f4 	movk	w20, #0x4747, lsl #16
	uint32_t *temp1 = NULL;
    96028d38:	d2800015 	mov	x21, #0x0                   	// #0
		pr_error("(%s) Unsuccesful attempt to read BMP image\n", __func__);
    96028d3c:	900000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96028d40:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96028d44:	91389c21 	add	x1, x1, #0xe27
    96028d48:	9139b000 	add	x0, x0, #0xe6c
    96028d4c:	97ffe649 	bl	96022670 <tegrabl_printf>
	err = tegrabl_surface_write(surf, x_off, y_off,	draw_width, draw_height,
								temp1);

fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("Unsuccesful attempt to draw BMP image\n");
    96028d50:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96028d54:	913dd000 	add	x0, x0, #0xf74
    96028d58:	97ffe646 	bl	96022670 <tegrabl_printf>
	}
	if (temp1 != NULL) {
    96028d5c:	b4000075 	cbz	x21, 96028d68 <tegrabl_render_bmp+0x140>
		tegrabl_free(temp1);
    96028d60:	aa1503e0 	mov	x0, x21
    96028d64:	97fff755 	bl	96026ab8 <tegrabl_free>
	}
	if (bmf != NULL) {
    96028d68:	b4000073 	cbz	x19, 96028d74 <tegrabl_render_bmp+0x14c>
		tegrabl_free(bmf);
    96028d6c:	aa1303e0 	mov	x0, x19
    96028d70:	97fff752 	bl	96026ab8 <tegrabl_free>
	}
	return err;
}
    96028d74:	2a1403e0 	mov	w0, w20
    96028d78:	a94153f3 	ldp	x19, x20, [sp, #16]
    96028d7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96028d80:	a94363f7 	ldp	x23, x24, [sp, #48]
    96028d84:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96028d88:	a94573fb 	ldp	x27, x28, [sp, #80]
    96028d8c:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96028d90:	d65f03c0 	ret
	if (bmf->bih.image_size == 0)
    96028d94:	b9402660 	ldr	w0, [x19, #36]
    96028d98:	b9400661 	ldr	w1, [x19, #4]
    96028d9c:	35000080 	cbnz	w0, 96028dac <tegrabl_render_bmp+0x184>
		bmf->bih.image_size = bmf->bfh.file_size - bmf->bfh.start_offset;
    96028da0:	b9400e60 	ldr	w0, [x19, #12]
    96028da4:	4b000020 	sub	w0, w1, w0
    96028da8:	b9002660 	str	w0, [x19, #36]
	if ((bmf->bfh.file_size < 0) || (bmf->bih.image_size < 0) ||
    96028dac:	37f80301 	tbnz	w1, #31, 96028e0c <tegrabl_render_bmp+0x1e4>
    96028db0:	b9402662 	ldr	w2, [x19, #36]
    96028db4:	37f802c2 	tbnz	w2, #31, 96028e0c <tegrabl_render_bmp+0x1e4>
		((bmf->bfh.start_offset + bmf->bih.image_size) >
    96028db8:	b9400e60 	ldr	w0, [x19, #12]
    96028dbc:	0b000042 	add	w2, w2, w0
	if ((bmf->bfh.file_size < 0) || (bmf->bih.image_size < 0) ||
    96028dc0:	6b01005f 	cmp	w2, w1
    96028dc4:	54000248 	b.hi	96028e0c <tegrabl_render_bmp+0x1e4>  // b.pmore
		 (uint32_t)bmf->bfh.file_size) || ((uint32_t)bmf->bfh.file_size > len)) {
    96028dc8:	6b0102ff 	cmp	w23, w1
    96028dcc:	54000203 	b.cc	96028e0c <tegrabl_render_bmp+0x1e4>  // b.lo, b.ul, b.last
	bmf->bitmap_data = buf + bmf->bfh.start_offset;
    96028dd0:	8b204294 	add	x20, x20, w0, uxtw
	if (bmf->bih.compression_type) {
    96028dd4:	b9402260 	ldr	w0, [x19, #32]
	bmf->bitmap_data = buf + bmf->bfh.start_offset;
    96028dd8:	f9001e74 	str	x20, [x19, #56]
	if (bmf->bih.compression_type) {
    96028ddc:	340001c0 	cbz	w0, 96028e14 <tegrabl_render_bmp+0x1ec>
	uint32_t *temp1 = NULL;
    96028de0:	d2800015 	mov	x21, #0x0                   	// #0
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 4);
    96028de4:	52808034 	mov	w20, #0x401                 	// #1025
		pr_error("(%s) Only uncompressed BMP image is supported\n",	__func__);
    96028de8:	900000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96028dec:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96028df0:	9138c421 	add	x1, x1, #0xe31
    96028df4:	913a6c00 	add	x0, x0, #0xe9b
    96028df8:	97ffe61e 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    96028dfc:	72a8e8f4 	movk	w20, #0x4747, lsl #16
    96028e00:	17ffffd4 	b	96028d50 <tegrabl_render_bmp+0x128>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96028e04:	52802054 	mov	w20, #0x102                 	// #258
    96028e08:	17ffffcb 	b	96028d34 <tegrabl_render_bmp+0x10c>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    96028e0c:	52804054 	mov	w20, #0x202                 	// #514
    96028e10:	17ffffc9 	b	96028d34 <tegrabl_render_bmp+0x10c>
	if ((bmf->bih.height < 0) || (bmf->bih.width < 0)) {
    96028e14:	b9401a63 	ldr	w3, [x19, #24]
    96028e18:	37f80063 	tbnz	w3, #31, 96028e24 <tegrabl_render_bmp+0x1fc>
    96028e1c:	b9401674 	ldr	w20, [x19, #20]
    96028e20:	36f80134 	tbz	w20, #31, 96028e44 <tegrabl_render_bmp+0x21c>
		pr_error("(%s) Invalid height or width in BMP image\n",	__func__);
    96028e24:	900000e1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96028e28:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    96028e2c:	9138c421 	add	x1, x1, #0xe31
    96028e30:	913b3400 	add	x0, x0, #0xecd
	uint32_t *temp1 = NULL;
    96028e34:	d2800015 	mov	x21, #0x0                   	// #0
		pr_error("(%s) Invalid height or width in BMP image\n",	__func__);
    96028e38:	97ffe60e 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    96028e3c:	52808054 	mov	w20, #0x402                 	// #1026
    96028e40:	17ffffef 	b	96028dfc <tegrabl_render_bmp+0x1d4>
	return rotation_angle;
    96028e44:	d0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96028e48:	b94a6c17 	ldr	w23, [x0, #2668]
	if ((rotate_angle == 90) || (rotate_angle == 270)) {
    96028e4c:	71016aff 	cmp	w23, #0x5a
    96028e50:	1a9f17fc 	cset	w28, eq  // eq = none
    96028e54:	71043aff 	cmp	w23, #0x10e
    96028e58:	1a9f179c 	csinc	w28, w28, wzr, ne  // ne = any
    96028e5c:	3400019c 	cbz	w28, 96028e8c <tegrabl_render_bmp+0x264>
		draw_height = bmf->bih.width;
    96028e60:	2a1403f8 	mov	w24, w20
		draw_width = bmf->bih.height;
    96028e64:	2a0303f4 	mov	w20, w3
	if (draw_width > surf->width) {
    96028e68:	b94002da 	ldr	w26, [x22]
    96028e6c:	6b14035f 	cmp	w26, w20
    96028e70:	54000242 	b.cs	96028eb8 <tegrabl_render_bmp+0x290>  // b.hs, b.nlast
		pr_error("Image dimensions not supported\n");
    96028e74:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
	uint32_t *temp1 = NULL;
    96028e78:	d2800015 	mov	x21, #0x0                   	// #0
		pr_error("Image dimensions not supported\n");
    96028e7c:	913c6800 	add	x0, x0, #0xf1a
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 6);
    96028e80:	5280c034 	mov	w20, #0x601                 	// #1537
		pr_error("Image dimensions not supported\n");
    96028e84:	97ffe5fb 	bl	96022670 <tegrabl_printf>
    96028e88:	17ffffdd 	b	96028dfc <tegrabl_render_bmp+0x1d4>
	} else if ((rotate_angle == 0) || (rotate_angle == 180)) {
    96028e8c:	7102d2ff 	cmp	w23, #0xb4
    96028e90:	7a401ae4 	ccmp	w23, #0x0, #0x4, ne  // ne = any
    96028e94:	54000061 	b.ne	96028ea0 <tegrabl_render_bmp+0x278>  // b.any
		draw_height = bmf->bih.height;
    96028e98:	2a0303f8 	mov	w24, w3
    96028e9c:	17fffff3 	b	96028e68 <tegrabl_render_bmp+0x240>
		pr_error("Not a valid rotation angle\n");
    96028ea0:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
	uint32_t *temp1 = NULL;
    96028ea4:	d2800015 	mov	x21, #0x0                   	// #0
		pr_error("Not a valid rotation angle\n");
    96028ea8:	913bec00 	add	x0, x0, #0xefb
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 5);
    96028eac:	5280a034 	mov	w20, #0x501                 	// #1281
		pr_error("Not a valid rotation angle\n");
    96028eb0:	97ffe5f0 	bl	96022670 <tegrabl_printf>
    96028eb4:	17ffffd2 	b	96028dfc <tegrabl_render_bmp+0x1d4>
	if (draw_height > surf->height) {
    96028eb8:	b94006db 	ldr	w27, [x22, #4]
    96028ebc:	6b18037f 	cmp	w27, w24
    96028ec0:	540000e2 	b.cs	96028edc <tegrabl_render_bmp+0x2b4>  // b.hs, b.nlast
		pr_error("Image dimensions not supported\n");
    96028ec4:	900000e0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
	uint32_t *temp1 = NULL;
    96028ec8:	d2800015 	mov	x21, #0x0                   	// #0
		pr_error("Image dimensions not supported\n");
    96028ecc:	913c6800 	add	x0, x0, #0xf1a
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 7);
    96028ed0:	5280e034 	mov	w20, #0x701                 	// #1793
		pr_error("Image dimensions not supported\n");
    96028ed4:	97ffe5e7 	bl	96022670 <tegrabl_printf>
    96028ed8:	17ffffc9 	b	96028dfc <tegrabl_render_bmp+0x1d4>
	temp1 = tegrabl_malloc(draw_width * draw_height * sizeof(uint32_t));
    96028edc:	1b147f04 	mul	w4, w24, w20
	bytes_per_pixel = bmf->bih.depth / 8;
    96028ee0:	79403e79 	ldrh	w25, [x19, #30]
	temp1 = tegrabl_malloc(draw_width * draw_height * sizeof(uint32_t));
    96028ee4:	b90067a4 	str	w4, [x29, #100]
    96028ee8:	d37e7c82 	ubfiz	x2, x4, #2, #32
    96028eec:	f90037a2 	str	x2, [x29, #104]
    96028ef0:	aa0203e0 	mov	x0, x2
	bytes_per_pixel = bmf->bih.depth / 8;
    96028ef4:	53037f39 	lsr	w25, w25, #3
	temp1 = tegrabl_malloc(draw_width * draw_height * sizeof(uint32_t));
    96028ef8:	97fff6e0 	bl	96026a78 <tegrabl_malloc>
    96028efc:	aa0003f5 	mov	x21, x0
	memset(temp1, 0, draw_width * draw_height * sizeof(uint32_t));
    96028f00:	f94037a2 	ldr	x2, [x29, #104]
    96028f04:	52800001 	mov	w1, #0x0                   	// #0
    96028f08:	940003c8 	bl	96029e28 <memset>
    96028f0c:	b94067a4 	ldr	w4, [x29, #100]
	for (y = 0; y < bmf->bih.height; y++) {
    96028f10:	2a1403e1 	mov	w1, w20
			} else if (bytes_per_pixel == 3 || bytes_per_pixel == 4) {
    96028f14:	51000f2c 	sub	w12, w25, #0x3
	for (y = 0; y < bmf->bih.height; y++) {
    96028f18:	52800007 	mov	w7, #0x0                   	// #0
    96028f1c:	4b140082 	sub	w2, w4, w20
    96028f20:	51000484 	sub	w4, w4, #0x1
		image_offset =  y * ALIGN(bmf->bih.width *
    96028f24:	d280006b 	mov	x11, #0x3                   	// #3
	for (y = 0; y < bmf->bih.height; y++) {
    96028f28:	b9401a60 	ldr	w0, [x19, #24]
    96028f2c:	6b07001f 	cmp	w0, w7
    96028f30:	540001cc 	b.gt	96028f68 <tegrabl_render_bmp+0x340>
	x_off = (surf->width - draw_width) / 2;
    96028f34:	4b140341 	sub	w1, w26, w20
	y_off = (surf->height - draw_height) / 2;
    96028f38:	4b180362 	sub	w2, w27, w24
	err = tegrabl_surface_write(surf, x_off, y_off,	draw_width, draw_height,
    96028f3c:	2a1403e3 	mov	w3, w20
    96028f40:	aa1503e5 	mov	x5, x21
    96028f44:	2a1803e4 	mov	w4, w24
    96028f48:	53017c42 	lsr	w2, w2, #1
    96028f4c:	53017c21 	lsr	w1, w1, #1
    96028f50:	aa1603e0 	mov	x0, x22
    96028f54:	97fffeac 	bl	96028a04 <tegrabl_surface_write>
    96028f58:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    96028f5c:	35ffefa0 	cbnz	w0, 96028d50 <tegrabl_render_bmp+0x128>
	if (temp1 != NULL) {
    96028f60:	b5fff015 	cbnz	x21, 96028d60 <tegrabl_render_bmp+0x138>
    96028f64:	17ffff82 	b	96028d6c <tegrabl_render_bmp+0x144>
		image_offset =  y * ALIGN(bmf->bih.width *
    96028f68:	79403e60 	ldrh	w0, [x19, #30]
    96028f6c:	2a0703e9 	mov	w9, w7
    96028f70:	4b07008a 	sub	w10, w4, w7
				temp1[surface_offset + (draw_width - x - 1)] = color;
    96028f74:	5100042d 	sub	w13, w1, #0x1
		for (x = 0; x < bmf->bih.width; x++) {
    96028f78:	52800008 	mov	w8, #0x0                   	// #0
		image_offset =  y * ALIGN(bmf->bih.width *
    96028f7c:	53037c03 	lsr	w3, w0, #3
    96028f80:	b9401660 	ldr	w0, [x19, #20]
    96028f84:	9b232c00 	smaddl	x0, w0, w3, x11
    96028f88:	121e7400 	and	w0, w0, #0xfffffffc
    96028f8c:	1b077c00 	mul	w0, w0, w7
    96028f90:	11000400 	add	w0, w0, #0x1
		for (x = 0; x < bmf->bih.width; x++) {
    96028f94:	b9401663 	ldr	w3, [x19, #20]
    96028f98:	6b08007f 	cmp	w3, w8
    96028f9c:	540000ac 	b.gt	96028fb0 <tegrabl_render_bmp+0x388>
	for (y = 0; y < bmf->bih.height; y++) {
    96028fa0:	110004e7 	add	w7, w7, #0x1
    96028fa4:	0b140021 	add	w1, w1, w20
    96028fa8:	4b140042 	sub	w2, w2, w20
    96028fac:	17ffffdf 	b	96028f28 <tegrabl_render_bmp+0x300>
    96028fb0:	51000403 	sub	w3, w0, #0x1
			if (bytes_per_pixel == 2) {
    96028fb4:	71000b3f 	cmp	w25, #0x2
    96028fb8:	54000261 	b.ne	96029004 <tegrabl_render_bmp+0x3dc>  // b.any
				color = bmf->bitmap_data[pixel_offset] |
    96028fbc:	f9401e65 	ldr	x5, [x19, #56]
    96028fc0:	386348a3 	ldrb	w3, [x5, w3, uxtw]
					(bmf->bitmap_data[pixel_offset + 1] << 8);
    96028fc4:	386048a6 	ldrb	w6, [x5, w0, uxtw]
				color = bmf->bitmap_data[pixel_offset] |
    96028fc8:	2a062066 	orr	w6, w3, w6, lsl #8
				r = color & 0x1f;
    96028fcc:	120010c3 	and	w3, w6, #0x1f
				g = (color >> 5) & 0x1f;
    96028fd0:	d34524c5 	ubfx	x5, x6, #5, #5
				b = (color >> 10) & 0x1f;
    96028fd4:	d34a38c6 	ubfx	x6, x6, #10, #5
			color = b | (g << 8) | (r << 16);
    96028fd8:	53103c63 	lsl	w3, w3, #16
			if (rotate_angle == 90) {
    96028fdc:	71016aff 	cmp	w23, #0x5a
			color = b | (g << 8) | (r << 16);
    96028fe0:	2a052063 	orr	w3, w3, w5, lsl #8
    96028fe4:	2a060063 	orr	w3, w3, w6
			if (rotate_angle == 90) {
    96028fe8:	540002c1 	b.ne	96029040 <tegrabl_render_bmp+0x418>  // b.any
				temp1[surface_offset + y] = color;
    96028fec:	b8295aa3 	str	w3, [x21, w9, uxtw #2]
		for (x = 0; x < bmf->bih.width; x++) {
    96028ff0:	11000508 	add	w8, w8, #0x1
    96028ff4:	0b140129 	add	w9, w9, w20
    96028ff8:	4b14014a 	sub	w10, w10, w20
    96028ffc:	0b190000 	add	w0, w0, w25
    96029000:	17ffffe5 	b	96028f94 <tegrabl_render_bmp+0x36c>
			} else if (bytes_per_pixel == 3 || bytes_per_pixel == 4) {
    96029004:	7100059f 	cmp	w12, #0x1
    96029008:	540000e8 	b.hi	96029024 <tegrabl_render_bmp+0x3fc>  // b.pmore
				r = bmf->bitmap_data[pixel_offset];
    9602900c:	f9401e66 	ldr	x6, [x19, #56]
				b = bmf->bitmap_data[pixel_offset + 2];
    96029010:	1100040e 	add	w14, w0, #0x1
				r = bmf->bitmap_data[pixel_offset];
    96029014:	386348c3 	ldrb	w3, [x6, w3, uxtw]
				g = bmf->bitmap_data[pixel_offset + 1];
    96029018:	386048c5 	ldrb	w5, [x6, w0, uxtw]
				b = bmf->bitmap_data[pixel_offset + 2];
    9602901c:	386e68c6 	ldrb	w6, [x6, x14]
    96029020:	17ffffee 	b	96028fd8 <tegrabl_render_bmp+0x3b0>
				pr_error("(%s) Only 16,24 and 32 bits per pixel is supported\n",
    96029024:	f00000c1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96029028:	f00000c0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602902c:	9138c421 	add	x1, x1, #0xe31
    96029030:	913cf400 	add	x0, x0, #0xf3d
				err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 8);
    96029034:	52810034 	mov	w20, #0x801                 	// #2049
				pr_error("(%s) Only 16,24 and 32 bits per pixel is supported\n",
    96029038:	97ffe58e 	bl	96022670 <tegrabl_printf>
    9602903c:	17ffff70 	b	96028dfc <tegrabl_render_bmp+0x1d4>
			} else if (rotate_angle == 180) {
    96029040:	7102d2ff 	cmp	w23, #0xb4
    96029044:	54000081 	b.ne	96029054 <tegrabl_render_bmp+0x42c>  // b.any
				temp1[surface_offset + (draw_width - x - 1)] = color;
    96029048:	4b0801a5 	sub	w5, w13, w8
				temp1[surface_offset + x] = color;
    9602904c:	b8257aa3 	str	w3, [x21, x5, lsl #2]
    96029050:	17ffffe8 	b	96028ff0 <tegrabl_render_bmp+0x3c8>
			} else if (rotate_angle == 270) {
    96029054:	3400007c 	cbz	w28, 96029060 <tegrabl_render_bmp+0x438>
				temp1[surface_offset + (draw_width - y - 1)] = color;
    96029058:	b82a5aa3 	str	w3, [x21, w10, uxtw #2]
    9602905c:	17ffffe5 	b	96028ff0 <tegrabl_render_bmp+0x3c8>
				temp1[surface_offset + x] = color;
    96029060:	0b020105 	add	w5, w8, w2
    96029064:	17fffffa 	b	9602904c <tegrabl_render_bmp+0x424>
	uint32_t *temp1 = NULL;
    96029068:	d2800015 	mov	x21, #0x0                   	// #0
	struct bitmap_file *bmf = NULL;
    9602906c:	d2800013 	mov	x19, #0x0                   	// #0
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    96029070:	52806054 	mov	w20, #0x302                 	// #770
    96029074:	17ffff62 	b	96028dfc <tegrabl_render_bmp+0x1d4>
	uint32_t *temp1 = NULL;
    96029078:	d2800015 	mov	x21, #0x0                   	// #0
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 1);
    9602907c:	52802074 	mov	w20, #0x103                 	// #259
    96029080:	17ffff5f 	b	96028dfc <tegrabl_render_bmp+0x1d4>

0000000096029084 <tegrabl_render_image>:
}

tegrabl_error_t tegrabl_render_image(struct tegrabl_surface *surf, uint8_t *buf,
									 uint32_t length, uint32_t image_format)
{
	if (image_format == TEGRABL_IMAGE_FORMAT_BMP)
    96029084:	35000043 	cbnz	w3, 9602908c <tegrabl_render_image+0x8>
		return tegrabl_render_bmp(surf, buf, length);
    96029088:	17fffee8 	b	96028c28 <tegrabl_render_bmp>
	else
		return tegrabl_render_jpeg(surf, buf, length);
}
    9602908c:	52800020 	mov	w0, #0x1                   	// #1
    96029090:	d65f03c0 	ret

0000000096029094 <dpaux_init>:
typedef uint32_t dpaux_sig_volt_t;
#define DPAUX_SIG_VOLT_3V3 0
#define DPAUX_SIG_VOLT_1V8 1

static tegrabl_error_t dpaux_init(dpaux_instance_t instance, struct tegrabl_dpaux **phdpaux)
{
    96029094:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!

	pr_debug("%s: entry\n", __func__);

	*phdpaux = NULL;

	if (instance >= DPAUX_MAX) {
    96029098:	7100041f 	cmp	w0, #0x1
{
    9602909c:	910003fd 	mov	x29, sp
    960290a0:	a90153f3 	stp	x19, x20, [sp, #16]
    960290a4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960290a8:	f9001bf7 	str	x23, [sp, #48]
	struct dpaux_soc_info *hdpaux_info = NULL;
    960290ac:	f90027bf 	str	xzr, [x29, #72]
	*phdpaux = NULL;
    960290b0:	f900003f 	str	xzr, [x1]
	if (instance >= DPAUX_MAX) {
    960290b4:	540008a8 	b.hi	960291c8 <dpaux_init+0x134>  // b.pmore
    960290b8:	aa0103f7 	mov	x23, x1
    960290bc:	2a0003f3 	mov	w19, w0
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto fail;
	}

	hdpaux = tegrabl_malloc(sizeof(struct tegrabl_dpaux));
    960290c0:	d2800300 	mov	x0, #0x18                  	// #24
    960290c4:	97fff66d 	bl	96026a78 <tegrabl_malloc>
    960290c8:	aa0003f4 	mov	x20, x0
	if (hdpaux == NULL) {
    960290cc:	b4000840 	cbz	x0, 960291d4 <dpaux_init+0x140>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
		goto fail;
	}
	hdpaux->instance = instance;
    960290d0:	b9000293 	str	w19, [x20]

	dpaux_get_soc_info(&hdpaux_info);
    960290d4:	910123a0 	add	x0, x29, #0x48
    960290d8:	94000350 	bl	96029e18 <dpaux_get_soc_info>

	hdpaux->base = (void *)(uintptr_t)(hdpaux_info[instance].base_addr);
    960290dc:	f94027a1 	ldr	x1, [x29, #72]
    960290e0:	d37df260 	lsl	x0, x19, #3
    960290e4:	8b000022 	add	x2, x1, x0
    960290e8:	b8606820 	ldr	w0, [x1, x0]
    960290ec:	f9000680 	str	x0, [x20, #8]
	hdpaux->module = hdpaux_info[instance].module;
    960290f0:	b9400440 	ldr	w0, [x2, #4]
    960290f4:	b9001680 	str	w0, [x20, #20]

	if (is_initialized != true) {
    960290f8:	b0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    960290fc:	aa0003f6 	mov	x22, x0
    96029100:	3969d001 	ldrb	w1, [x0, #2676]
    96029104:	34000341 	cbz	w1, 9602916c <dpaux_init+0xd8>
		if (err != TEGRABL_NO_ERROR)
			goto fail;
	}

	pr_debug("%s: set clock for DPAUX instance = %d\n", __func__, instance);
	if (is_dpaux_initialized[instance] != true) {
    96029108:	b0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602910c:	9129c001 	add	x1, x0, #0xa70
    96029110:	aa0003f5 	mov	x21, x0
    96029114:	38736821 	ldrb	w1, [x1, x19]
    96029118:	350001c1 	cbnz	w1, 96029150 <dpaux_init+0xbc>
		/* Reset and Enable clock based on Instance */
		err = tegrabl_car_rst_set(hdpaux->module, 0);
    9602911c:	b9401680 	ldr	w0, [x20, #20]
    96029120:	52800001 	mov	w1, #0x0                   	// #0
    96029124:	97ffda57 	bl	9601fa80 <tegrabl_car_rst_set>
		if (err != TEGRABL_NO_ERROR) {
    96029128:	35000460 	cbnz	w0, 960291b4 <dpaux_init+0x120>
			goto fail;
		}

		err = tegrabl_car_clk_enable(hdpaux->module, 0, NULL);
    9602912c:	b9401680 	ldr	w0, [x20, #20]
    96029130:	d2800002 	mov	x2, #0x0                   	// #0
    96029134:	52800001 	mov	w1, #0x0                   	// #0
    96029138:	97ffd9e5 	bl	9601f8cc <tegrabl_car_clk_enable>
		if (err != TEGRABL_NO_ERROR) {
    9602913c:	350003c0 	cbnz	w0, 960291b4 <dpaux_init+0x120>
			goto fail;
		}

		err = tegrabl_car_rst_clear(hdpaux->module, 0);
    96029140:	b9401680 	ldr	w0, [x20, #20]
    96029144:	52800001 	mov	w1, #0x0                   	// #0
    96029148:	97ffda55 	bl	9601fa9c <tegrabl_car_rst_clear>
		if (err != TEGRABL_NO_ERROR) {
    9602914c:	35000340 	cbnz	w0, 960291b4 <dpaux_init+0x120>
		}
	}

	*phdpaux = hdpaux;
	is_initialized = true;
	is_dpaux_initialized[instance] = true;
    96029150:	9129c2a0 	add	x0, x21, #0xa70
	*phdpaux = hdpaux;
    96029154:	f90002f4 	str	x20, [x23]
	is_initialized = true;
    96029158:	52800021 	mov	w1, #0x1                   	// #1
    9602915c:	3929d2c1 	strb	w1, [x22, #2676]
	is_dpaux_initialized[instance] = true;
    96029160:	38336801 	strb	w1, [x0, x19]
    96029164:	52800000 	mov	w0, #0x0                   	// #0
    96029168:	14000013 	b	960291b4 <dpaux_init+0x120>
		err = tegrabl_car_rst_set(TEGRABL_MODULE_HOST1X, 0);
    9602916c:	52800001 	mov	w1, #0x0                   	// #0
    96029170:	52800160 	mov	w0, #0xb                   	// #11
    96029174:	97ffda43 	bl	9601fa80 <tegrabl_car_rst_set>
		if (err != TEGRABL_NO_ERROR)
    96029178:	350001e0 	cbnz	w0, 960291b4 <dpaux_init+0x120>
		err = tegrabl_car_clk_enable(TEGRABL_MODULE_HOST1X, 0, NULL);
    9602917c:	d2800002 	mov	x2, #0x0                   	// #0
    96029180:	52800001 	mov	w1, #0x0                   	// #0
    96029184:	52800160 	mov	w0, #0xb                   	// #11
    96029188:	97ffd9d1 	bl	9601f8cc <tegrabl_car_clk_enable>
		if (err != TEGRABL_NO_ERROR)
    9602918c:	35000140 	cbnz	w0, 960291b4 <dpaux_init+0x120>
		err = tegrabl_car_rst_clear(TEGRABL_MODULE_HOST1X, 0);
    96029190:	52800001 	mov	w1, #0x0                   	// #0
    96029194:	52800160 	mov	w0, #0xb                   	// #11
    96029198:	97ffda41 	bl	9601fa9c <tegrabl_car_rst_clear>
		if (err != TEGRABL_NO_ERROR)
    9602919c:	350000c0 	cbnz	w0, 960291b4 <dpaux_init+0x120>
		err = tegrabl_car_clk_enable(TEGRABL_MODULE_SOR_SAFE, 0, NULL);
    960291a0:	d2800002 	mov	x2, #0x0                   	// #0
    960291a4:	52800001 	mov	w1, #0x0                   	// #0
    960291a8:	528001c0 	mov	w0, #0xe                   	// #14
    960291ac:	97ffd9c8 	bl	9601f8cc <tegrabl_car_clk_enable>
		if (err != TEGRABL_NO_ERROR)
    960291b0:	34fffac0 	cbz	w0, 96029108 <dpaux_init+0x74>
fail:
	return err;
}
    960291b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960291b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960291bc:	f9401bf7 	ldr	x23, [sp, #48]
    960291c0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960291c4:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    960291c8:	52800040 	mov	w0, #0x2                   	// #2
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960291cc:	72a96960 	movk	w0, #0x4b4b, lsl #16
	return err;
    960291d0:	17fffff9 	b	960291b4 <dpaux_init+0x120>
		err = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    960291d4:	52800060 	mov	w0, #0x3                   	// #3
    960291d8:	17fffffd 	b	960291cc <dpaux_init+0x138>

00000000960291dc <dpaux_prod_set>:

	return;
}

tegrabl_error_t dpaux_prod_set(struct tegrabl_dpaux *hdpaux, uint32_t mode)
{
    960291dc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960291e0:	910003fd 	mov	x29, sp
    960291e4:	a90153f3 	stp	x19, x20, [sp, #16]
    960291e8:	aa0003f4 	mov	x20, x0
    960291ec:	f90013f5 	str	x21, [sp, #32]
	int32_t propval;
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t dpaux_prod_tuple[4] = {0};
	uint32_t count;

	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    960291f0:	52800000 	mov	w0, #0x0                   	// #0
{
    960291f4:	2a0103f5 	mov	w21, w1
	void *fdt = NULL;
    960291f8:	f9001fbf 	str	xzr, [x29, #56]
	uint32_t dpaux_prod_tuple[4] = {0};
    960291fc:	a9047fbf 	stp	xzr, xzr, [x29, #64]
	err = tegrabl_dt_get_fdt_handle(TEGRABL_DT_BL, &fdt);
    96029200:	9100e3a1 	add	x1, x29, #0x38
    96029204:	94001f15 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    96029208:	340000c0 	cbz	w0, 96029220 <dpaux_prod_set+0x44>
    9602920c:	2a0003f3 	mov	w19, w0
		pr_error("Failed to get bl-dtb handle\n");
    96029210:	f0000080 	adrp	x0, 9603c000 <__func__.4414+0x9>
    96029214:	91286400 	add	x0, x0, #0xa19
	off = dpaux_prod_tuple[1];
	mask = dpaux_prod_tuple[2];
	val = dpaux_prod_tuple[3];
#endif
	if ((off < 0) || (off > (NV_ADDRESS_MAP_DPAUX_SIZE - *(int32_t *)hdpaux->base))) {
		pr_error("dpaux address offset is out of bounds\n");
    96029218:	97ffe516 	bl	96022670 <tegrabl_printf>
		goto fail;
    9602921c:	14000018 	b	9602927c <dpaux_prod_set+0xa0>
	propval = fdt32_to_cpu(hdpaux->instance);
    96029220:	b9400280 	ldr	w0, [x20]
    96029224:	910143a3 	add	x3, x29, #0x50
	dpaux_off = fdt_node_offset_by_prop_value(fdt, -1, "nvidia,dpaux-ctrlnum", (void *)&propval, 4);
    96029228:	52800084 	mov	w4, #0x4                   	// #4
    9602922c:	d3505c02 	ubfx	x2, x0, #16, #8
    96029230:	d3483c01 	ubfx	x1, x0, #8, #8
    96029234:	53185c42 	lsl	w2, w2, #8
    96029238:	2a014041 	orr	w1, w2, w1, lsl #16
    9602923c:	53187c02 	lsr	w2, w0, #24
    96029240:	2a006040 	orr	w0, w2, w0, lsl #24
    96029244:	f0000082 	adrp	x2, 9603c000 <__func__.4414+0x9>
    96029248:	2a000020 	orr	w0, w1, w0
	propval = fdt32_to_cpu(hdpaux->instance);
    9602924c:	b81e0c60 	str	w0, [x3, #-32]!
	dpaux_off = fdt_node_offset_by_prop_value(fdt, -1, "nvidia,dpaux-ctrlnum", (void *)&propval, 4);
    96029250:	f9401fa0 	ldr	x0, [x29, #56]
    96029254:	912e0c42 	add	x2, x2, #0xb83
    96029258:	12800001 	mov	w1, #0xffffffff            	// #-1
    9602925c:	9400249c 	bl	960324cc <fdt_node_offset_by_prop_value>
	if (dpaux_off < 0) {
    96029260:	36f80180 	tbz	w0, #31, 96029290 <dpaux_prod_set+0xb4>
		pr_error("dpaux node not found for instance = %d\n", hdpaux->instance);
    96029264:	b9400281 	ldr	w1, [x20]
    96029268:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9602926c:	528001b3 	mov	w19, #0xd                   	// #13
		pr_error("dpaux node not found for instance = %d\n", hdpaux->instance);
    96029270:	9100e400 	add	x0, x0, #0x39
    96029274:	97ffe4ff 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 1);
    96029278:	72a96973 	movk	w19, #0x4b4b, lsl #16
	temp_val = ((temp_val & ~mask) | (val & mask));
	NV_WRITE32(hdpaux->base + off, temp_val);

fail:
	return err;
}
    9602927c:	2a1303e0 	mov	w0, w19
    96029280:	f94013f5 	ldr	x21, [sp, #32]
    96029284:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029288:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602928c:	d65f03c0 	ret
	prod_offset = fdt_subnode_offset(fdt, dpaux_off, "prod-settings");
    96029290:	2a0003e1 	mov	w1, w0
    96029294:	f9401fa0 	ldr	x0, [x29, #56]
    96029298:	f0000082 	adrp	x2, 9603c000 <__func__.4414+0x9>
    9602929c:	9134e042 	add	x2, x2, #0xd38
    960292a0:	9400228e 	bl	96031cd8 <fdt_subnode_offset>
    960292a4:	2a0003e1 	mov	w1, w0
	if (prod_offset < 0) {
    960292a8:	36f800c0 	tbz	w0, #31, 960292c0 <dpaux_prod_set+0xe4>
		pr_error("prod-settings subnode not found\n");
    960292ac:	f0000080 	adrp	x0, 9603c000 <__func__.4414+0x9>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 1);
    960292b0:	528021b3 	mov	w19, #0x10d                 	// #269
		pr_error("prod-settings subnode not found\n");
    960292b4:	91351800 	add	x0, x0, #0xd46
    960292b8:	97ffe4ee 	bl	96022670 <tegrabl_printf>
    960292bc:	17ffffef 	b	96029278 <dpaux_prod_set+0x9c>
	if (mode == DPAUX_PAD_MODE_I2C) {
    960292c0:	35000175 	cbnz	w21, 960292ec <dpaux_prod_set+0x110>
		prod_offset = fdt_subnode_offset(fdt, prod_offset, "prod_c_dpaux_hdmi");
    960292c4:	f9401fa0 	ldr	x0, [x29, #56]
    960292c8:	900000e2 	adrp	x2, 96045000 <__func__.3796+0x7>
    960292cc:	91019042 	add	x2, x2, #0x64
    960292d0:	94002282 	bl	96031cd8 <fdt_subnode_offset>
		if (prod_offset < 0) {
    960292d4:	36f80320 	tbz	w0, #31, 96029338 <dpaux_prod_set+0x15c>
			pr_error("prod_c_dpaux_hdmi subnode not found\n");
    960292d8:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 2);
    960292dc:	528041b3 	mov	w19, #0x20d                 	// #525
			pr_error("prod_c_dpaux_hdmi subnode not found\n");
    960292e0:	9101d800 	add	x0, x0, #0x76
    960292e4:	97ffe4e3 	bl	96022670 <tegrabl_printf>
    960292e8:	17ffffe4 	b	96029278 <dpaux_prod_set+0x9c>
	} else if (mode == DPAUX_PAD_MODE_AUX) {
    960292ec:	710006bf 	cmp	w21, #0x1
    960292f0:	54000161 	b.ne	9602931c <dpaux_prod_set+0x140>  // b.any
		prod_offset = fdt_subnode_offset(fdt, prod_offset, "prod_c_dpaux_dp");
    960292f4:	f9401fa0 	ldr	x0, [x29, #56]
    960292f8:	900000e2 	adrp	x2, 96045000 <__func__.3796+0x7>
    960292fc:	91027842 	add	x2, x2, #0x9e
    96029300:	94002276 	bl	96031cd8 <fdt_subnode_offset>
		if (prod_offset < 0) {
    96029304:	36f801a0 	tbz	w0, #31, 96029338 <dpaux_prod_set+0x15c>
			pr_error("prod_c_dpaux_dp subnode not found\n");
    96029308:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
			err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 3);
    9602930c:	528061b3 	mov	w19, #0x30d                 	// #781
			pr_error("prod_c_dpaux_dp subnode not found\n");
    96029310:	9102b800 	add	x0, x0, #0xae
    96029314:	97ffe4d7 	bl	96022670 <tegrabl_printf>
    96029318:	17ffffd8 	b	96029278 <dpaux_prod_set+0x9c>
		pr_error("%s: invalid dpaux mode\n", __func__);
    9602931c:	f00000c1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96029320:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96029324:	913e7821 	add	x1, x1, #0xf9e
    96029328:	91035000 	add	x0, x0, #0xd4
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 13);
    9602932c:	5281a053 	mov	w19, #0xd02                 	// #3330
		pr_error("%s: invalid dpaux mode\n", __func__);
    96029330:	97ffe4d0 	bl	96022670 <tegrabl_printf>
    96029334:	17ffffd1 	b	96029278 <dpaux_prod_set+0x9c>
	return tegrabl_dt_get_prop_array(fdt, node, prop, U32_SZ, nmem, res, num);
    96029338:	2a0003e1 	mov	w1, w0
    9602933c:	f9401fa0 	ldr	x0, [x29, #56]
    96029340:	9100d3a6 	add	x6, x29, #0x34
    96029344:	910103a5 	add	x5, x29, #0x40
    96029348:	52800004 	mov	w4, #0x0                   	// #0
    9602934c:	d2800083 	mov	x3, #0x4                   	// #4
    96029350:	900000a2 	adrp	x2, 9603d000 <__func__.3609+0x209>
    96029354:	91142842 	add	x2, x2, #0x50a
    96029358:	94001f3a 	bl	96031040 <tegrabl_dt_get_prop_array>
    9602935c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96029360:	340000e0 	cbz	w0, 9602937c <dpaux_prod_set+0x1a0>
		pr_error("%s: error in reading dpaux \"prod\" property\n", __func__);
    96029364:	f00000c1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96029368:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602936c:	913e7821 	add	x1, x1, #0xf9e
    96029370:	9103bc00 	add	x0, x0, #0xef
    96029374:	97ffe4bf 	bl	96022670 <tegrabl_printf>
		goto fail;
    96029378:	17ffffc1 	b	9602927c <dpaux_prod_set+0xa0>
	off = dpaux_prod_tuple[0];
    9602937c:	b94043a0 	ldr	w0, [x29, #64]
	if ((off < 0) || (off > (NV_ADDRESS_MAP_DPAUX_SIZE - *(int32_t *)hdpaux->base))) {
    96029380:	37f800e0 	tbnz	w0, #31, 9602939c <dpaux_prod_set+0x1c0>
    96029384:	f9400682 	ldr	x2, [x20, #8]
    96029388:	52a00081 	mov	w1, #0x40000               	// #262144
    9602938c:	b9400043 	ldr	w3, [x2]
    96029390:	4b030021 	sub	w1, w1, w3
    96029394:	6b00003f 	cmp	w1, w0
    96029398:	5400008a 	b.ge	960293a8 <dpaux_prod_set+0x1cc>  // b.tcont
		pr_error("dpaux address offset is out of bounds\n");
    9602939c:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    960293a0:	91047800 	add	x0, x0, #0x11e
    960293a4:	17ffff9d 	b	96029218 <dpaux_prod_set+0x3c>
	temp_val = NV_READ32(hdpaux->base + off);
    960293a8:	93407c01 	sxtw	x1, w0
    960293ac:	294883a4 	ldp	w4, w0, [x29, #68]
    960293b0:	b8616843 	ldr	w3, [x2, x1]
    960293b4:	4a000060 	eor	w0, w3, w0
    960293b8:	0a040000 	and	w0, w0, w4
	temp_val = ((temp_val & ~mask) | (val & mask));
    960293bc:	4a030000 	eor	w0, w0, w3
	NV_WRITE32(hdpaux->base + off, temp_val);
    960293c0:	b8216840 	str	w0, [x2, x1]
	return err;
    960293c4:	17ffffae 	b	9602927c <dpaux_prod_set+0xa0>

00000000960293c8 <dpaux_pad_power>:
void dpaux_pad_power(struct tegrabl_dpaux *hdpaux, bool is_on)
{
	uint32_t val = 0;

	pr_debug("%s: entry\n", __func__);
	val = dpaux_readl(hdpaux, HYBRID_SPARE);
    960293c8:	f9400402 	ldr	x2, [x0, #8]
	if (is_on)
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_SPARE, PAD_PWR, POWERUP, val);
    960293cc:	72001c3f 	tst	w1, #0xff
	val = dpaux_readl(hdpaux, HYBRID_SPARE);
    960293d0:	b9413440 	ldr	w0, [x2, #308]
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_SPARE, PAD_PWR, POWERUP, val);
    960293d4:	121f7803 	and	w3, w0, #0xfffffffe
    960293d8:	32000000 	orr	w0, w0, #0x1
    960293dc:	1a830000 	csel	w0, w0, w3, eq  // eq = none
	else
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_SPARE, PAD_PWR, POWERDOWN, val);

	dpaux_writel(hdpaux, HYBRID_SPARE, val);
    960293e0:	b9013440 	str	w0, [x2, #308]
	return;
}
    960293e4:	d65f03c0 	ret

00000000960293e8 <tegrabl_dpaux_init_ddc_i2c>:
	return;
}


tegrabl_error_t tegrabl_dpaux_init_ddc_i2c(dpaux_instance_t instance)
{
    960293e8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960293ec:	910003fd 	mov	x29, sp
    960293f0:	f9000bf3 	str	x19, [sp, #16]
	struct tegrabl_dpaux *hdpaux;

	pr_debug("%s: entry\n", __func__);

	/* Enable DPAUX and get the dpaux handle */
	err = dpaux_init(instance, &hdpaux);
    960293f4:	9100a3a1 	add	x1, x29, #0x28
    960293f8:	97ffff27 	bl	96029094 <dpaux_init>
	if (err != TEGRABL_NO_ERROR) {
    960293fc:	350002e0 	cbnz	w0, 96029458 <tegrabl_dpaux_init_ddc_i2c+0x70>
		goto fail;
	}

	err = dpaux_prod_set(hdpaux, DPAUX_PAD_MODE_I2C);
    96029400:	f94017a0 	ldr	x0, [x29, #40]
    96029404:	52800001 	mov	w1, #0x0                   	// #0
    96029408:	97ffff75 	bl	960291dc <dpaux_prod_set>
    9602940c:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96029410:	35000260 	cbnz	w0, 9602945c <tegrabl_dpaux_init_ddc_i2c+0x74>
		goto fail;
	}

	/* set in I2C mode */
	dpaux_config_pad_mode(hdpaux, DPAUX_PAD_MODE_I2C);
    96029414:	f94017a0 	ldr	x0, [x29, #40]
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_PADCTL, I2C_SCL_INPUT_RCV,
    96029418:	52980023 	mov	w3, #0xc001                	// #49153
	dpaux_config_pad_mode(hdpaux, DPAUX_PAD_MODE_I2C);
    9602941c:	f9400402 	ldr	x2, [x0, #8]
	val = dpaux_readl(hdpaux, HYBRID_PADCTL);
    96029420:	b9412441 	ldr	w1, [x2, #292]
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_PADCTL, I2C_SCL_INPUT_RCV,
    96029424:	2a030021 	orr	w1, w1, w3
	dpaux_writel(hdpaux, HYBRID_PADCTL, val);
    96029428:	b9012441 	str	w1, [x2, #292]

	/* enable pad power */
	dpaux_pad_power(hdpaux, true);
    9602942c:	52800021 	mov	w1, #0x1                   	// #1
    96029430:	97ffffe6 	bl	960293c8 <dpaux_pad_power>

	/* set voltage level to 3.3 */
	dpaux_set_voltage(hdpaux, DPAUX_SIG_VOLT_3V3);
    96029434:	f94017a0 	ldr	x0, [x29, #40]
    96029438:	f9400401 	ldr	x1, [x0, #8]
	val = dpaux_readl(hdpaux, HYBRID_SPARE);
    9602943c:	b9413420 	ldr	w0, [x1, #308]
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_SPARE, RCV_33_18_SEL, SEL_3_3V,
    96029440:	321f0000 	orr	w0, w0, #0x2
	dpaux_writel(hdpaux, HYBRID_SPARE, val);
    96029444:	b9013420 	str	w0, [x1, #308]
fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s: error = 0x%08x\n", __func__, err);
	}
	return err;
}
    96029448:	2a1303e0 	mov	w0, w19
    9602944c:	f9400bf3 	ldr	x19, [sp, #16]
    96029450:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96029454:	d65f03c0 	ret
    96029458:	2a0003f3 	mov	w19, w0
		pr_error("%s: error = 0x%08x\n", __func__, err);
    9602945c:	2a1303e2 	mov	w2, w19
    96029460:	f00000c1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96029464:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96029468:	913eb421 	add	x1, x1, #0xfad
    9602946c:	91052000 	add	x0, x0, #0x148
    96029470:	97ffe480 	bl	96022670 <tegrabl_printf>
    96029474:	17fffff5 	b	96029448 <tegrabl_dpaux_init_ddc_i2c+0x60>

0000000096029478 <dpaux_int_disable>:
	val = NV_DRF_DEF(DPAUX, INTR_EN_AUX, PLUG_EVENT, DISABLED) |
			NV_DRF_DEF(DPAUX, INTR_EN_AUX, UNPLUG_EVENT, DISABLED) |
			NV_DRF_DEF(DPAUX, INTR_EN_AUX, IRQ_EVENT, DISABLED) |
			NV_DRF_DEF(DPAUX, INTR_EN_AUX, AUX_DONE, DISABLED);

	dpaux_writel(hdpaux, INTR_EN_AUX, val);
    96029478:	f9400400 	ldr	x0, [x0, #8]

	val = NV_DRF_DEF(DPAUX, INTR_AUX, PLUG_EVENT, PENDING) |
			NV_DRF_DEF(DPAUX, INTR_AUX, UNPLUG_EVENT, PENDING) |
			NV_DRF_DEF(DPAUX, INTR_AUX, IRQ_EVENT, PENDING) |
			NV_DRF_DEF(DPAUX, INTR_AUX, AUX_DONE, PENDING);
	dpaux_writel(hdpaux, INTR_AUX, val);
    9602947c:	528001e1 	mov	w1, #0xf                   	// #15
	dpaux_writel(hdpaux, INTR_EN_AUX, val);
    96029480:	b900041f 	str	wzr, [x0, #4]
	dpaux_writel(hdpaux, INTR_AUX, val);
    96029484:	b9001401 	str	w1, [x0, #20]

	return;
}
    96029488:	d65f03c0 	ret

000000009602948c <tegrabl_dpaux_init_aux>:
	return;
}

tegrabl_error_t tegrabl_dpaux_init_aux(dpaux_instance_t instance,
	struct tegrabl_dpaux **phdpaux)
{
    9602948c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96029490:	910003fd 	mov	x29, sp
    96029494:	a90153f3 	stp	x19, x20, [sp, #16]
    96029498:	aa0103f4 	mov	x20, x1
	struct tegrabl_dpaux *hdpaux;

	pr_debug("%s: entry\n", __func__);

	/* Enable DPAUX and get the dpaux handle */
	err = dpaux_init(instance, &hdpaux);
    9602949c:	9100a3a1 	add	x1, x29, #0x28
    960294a0:	97fffefd 	bl	96029094 <dpaux_init>
	if (err != TEGRABL_NO_ERROR) {
    960294a4:	350003a0 	cbnz	w0, 96029518 <tegrabl_dpaux_init_aux+0x8c>
		goto fail;
	}

	/* disable all interrupts */
	dpaux_int_disable(hdpaux);
    960294a8:	f94017a0 	ldr	x0, [x29, #40]
    960294ac:	97fffff3 	bl	96029478 <dpaux_int_disable>

	err = dpaux_prod_set(hdpaux, DPAUX_PAD_MODE_AUX);
    960294b0:	f94017a0 	ldr	x0, [x29, #40]
    960294b4:	52800021 	mov	w1, #0x1                   	// #1
    960294b8:	97ffff49 	bl	960291dc <dpaux_prod_set>
    960294bc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960294c0:	350002e0 	cbnz	w0, 9602951c <tegrabl_dpaux_init_aux+0x90>
		goto fail;
	}

	/* set in Aux mode */
	dpaux_config_pad_mode(hdpaux, DPAUX_PAD_MODE_AUX);
    960294c4:	f94017a0 	ldr	x0, [x29, #40]
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_PADCTL, I2C_SCL_INPUT_RCV,
    960294c8:	12980023 	mov	w3, #0xffff3ffe            	// #-49154
	dpaux_config_pad_mode(hdpaux, DPAUX_PAD_MODE_AUX);
    960294cc:	f9400402 	ldr	x2, [x0, #8]
	val = dpaux_readl(hdpaux, HYBRID_PADCTL);
    960294d0:	b9412441 	ldr	w1, [x2, #292]
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_PADCTL, I2C_SCL_INPUT_RCV,
    960294d4:	0a030021 	and	w1, w1, w3
	dpaux_writel(hdpaux, HYBRID_PADCTL, val);
    960294d8:	b9012441 	str	w1, [x2, #292]

	/* enable pad power */
	dpaux_pad_power(hdpaux, true);
    960294dc:	52800021 	mov	w1, #0x1                   	// #1
    960294e0:	97ffffba 	bl	960293c8 <dpaux_pad_power>

	/* set voltage level to 1.8 */
	dpaux_set_voltage(hdpaux, DPAUX_SIG_VOLT_1V8);
    960294e4:	f94017a2 	ldr	x2, [x29, #40]
    960294e8:	f9400440 	ldr	x0, [x2, #8]
	val = dpaux_readl(hdpaux, HYBRID_SPARE);
    960294ec:	b9413401 	ldr	w1, [x0, #308]
		val = NV_FLD_SET_DRF_DEF(DPAUX, HYBRID_SPARE, RCV_33_18_SEL, SEL_1_8V,
    960294f0:	121e7821 	and	w1, w1, #0xfffffffd
	dpaux_writel(hdpaux, HYBRID_SPARE, val);
    960294f4:	b9013401 	str	w1, [x0, #308]
	dpaux_writel(hdpaux, HPD_CONFIG, val);
    960294f8:	52801f41 	mov	w1, #0xfa                  	// #250
    960294fc:	72a0fa01 	movk	w1, #0x7d0, lsl #16
    96029500:	b900f401 	str	w1, [x0, #244]

	/* configure hpd with plug and unplug min times */
	dpaux_hpd_config(hdpaux);

	*phdpaux = hdpaux;
    96029504:	f9000282 	str	x2, [x20]
fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_error("%s: error = 0x%08x\n", __func__, err);
	}
	return err;
}
    96029508:	2a1303e0 	mov	w0, w19
    9602950c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029510:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96029514:	d65f03c0 	ret
    96029518:	2a0003f3 	mov	w19, w0
		pr_error("%s: error = 0x%08x\n", __func__, err);
    9602951c:	2a1303e2 	mov	w2, w19
    96029520:	f00000c1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96029524:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96029528:	913f2021 	add	x1, x1, #0xfc8
    9602952c:	91052000 	add	x0, x0, #0x148
    96029530:	97ffe450 	bl	96022670 <tegrabl_printf>
    96029534:	17fffff5 	b	96029508 <tegrabl_dpaux_init_aux+0x7c>

0000000096029538 <tegrabl_dpaux_hpd_status>:
	bool *hpd_status)
{
	uint32_t val;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((hdpaux == NULL) || (hpd_status == NULL)) {
    96029538:	f100001f 	cmp	x0, #0x0
    9602953c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96029540:	540000e0 	b.eq	9602955c <tegrabl_dpaux_hpd_status+0x24>  // b.none
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
		goto fail;
	}

	/* check hpd status */
	val = dpaux_readl(hdpaux, DP_AUXSTAT);
    96029544:	f9400400 	ldr	x0, [x0, #8]
    96029548:	b940c400 	ldr	w0, [x0, #196]
	*hpd_status = NV_DRF_VAL(DPAUX, DP_AUXSTAT, HPD_STATUS, val);
    9602954c:	d35c7000 	ubfx	x0, x0, #28, #1
    96029550:	39000020 	strb	w0, [x1]
    96029554:	52800000 	mov	w0, #0x0                   	// #0

	pr_debug("hpd status = %d\n", *hpd_status);

fail:
	return err;
}
    96029558:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 9);
    9602955c:	52812040 	mov	w0, #0x902                 	// #2306
    96029560:	72a96960 	movk	w0, #0x4b4b, lsl #16
	return err;
    96029564:	17fffffd 	b	96029558 <tegrabl_dpaux_hpd_status+0x20>

0000000096029568 <tegrabl_dpaux_write_chunk>:
{
    96029568:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    9602956c:	910003fd 	mov	x29, sp
    96029570:	a90153f3 	stp	x19, x20, [sp, #16]
    96029574:	2a0103f3 	mov	w19, w1
    96029578:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602957c:	aa0003f4 	mov	x20, x0
    96029580:	a90363f7 	stp	x23, x24, [sp, #48]
    96029584:	aa0303e1 	mov	x1, x3
	uint32_t temp[4] = {0, 0, 0, 0};
    96029588:	a9067fbf 	stp	xzr, xzr, [x29, #96]
{
    9602958c:	2a0203f7 	mov	w23, w2
    96029590:	f90023f9 	str	x25, [sp, #64]
    96029594:	aa0403f5 	mov	x21, x4
    96029598:	aa0503f6 	mov	x22, x5
	if ((cmd != AUX_CMD_I2CWR) && (cmd != AUX_CMD_MOTWR) &&
    9602959c:	721d7a7f 	tst	w19, #0xfffffffb
    960295a0:	54000060 	b.eq	960295ac <tegrabl_dpaux_write_chunk+0x44>  // b.none
    960295a4:	7100227f 	cmp	w19, #0x8
    960295a8:	54000d61 	b.ne	96029754 <tegrabl_dpaux_write_chunk+0x1ec>  // b.any
	if (*size > DPAUX_MAX_BYTES) {
    960295ac:	b94002a2 	ldr	w2, [x21]
    960295b0:	7100405f 	cmp	w2, #0x10
    960295b4:	54000d48 	b.hi	9602975c <tegrabl_dpaux_write_chunk+0x1f4>  // b.pmore
	memcpy(temp, data, *size);
    960295b8:	2a0203e2 	mov	w2, w2
    960295bc:	910183a0 	add	x0, x29, #0x60
    960295c0:	94000259 	bl	96029f24 <memcpy>
	val = NV_FLD_SET_DRF_NUM(DPAUX, DP_AUXCTL, CMD, cmd, val);
    960295c4:	53140e73 	ubfiz	w19, w19, #12, #4
	val = dpaux_readl(hdpaux, DP_AUXCTL);
    960295c8:	f9400681 	ldr	x1, [x20, #8]
	if (*size == 0) {
    960295cc:	b94002a2 	ldr	w2, [x21]
	val = dpaux_readl(hdpaux, DP_AUXCTL);
    960295d0:	b940b420 	ldr	w0, [x1, #180]
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, ADDRESS_ONLY, YES, val);
    960295d4:	7100005f 	cmp	w2, #0x0
	val = NV_FLD_SET_DRF_NUM(DPAUX, DP_AUXCTL, CMD, cmd, val);
    960295d8:	12106c00 	and	w0, w0, #0xffff0fff
    960295dc:	2a000273 	orr	w19, w19, w0
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, ADDRESS_ONLY, YES, val);
    960295e0:	51000440 	sub	w0, w2, #0x1
    960295e4:	12185e73 	and	w19, w19, #0xffffff00
    960295e8:	12001c00 	and	w0, w0, #0xff
    960295ec:	32180263 	orr	w3, w19, #0x100
    960295f0:	2a130013 	orr	w19, w0, w19
    960295f4:	12177a73 	and	w19, w19, #0xfffffeff
	dpaux_writel(hdpaux, DP_AUXDATA_WRITE_W0, temp[0]);
    960295f8:	b94063a0 	ldr	w0, [x29, #96]
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, ADDRESS_ONLY, YES, val);
    960295fc:	1a831273 	csel	w19, w19, w3, ne  // ne = any
	dpaux_writel(hdpaux, DP_AUXCTL, val);
    96029600:	b900b433 	str	w19, [x1, #180]
	dpaux_writel(hdpaux, DP_AUXADDR, addr);
    96029604:	b900a437 	str	w23, [x1, #164]
	dpaux_writel(hdpaux, DP_AUXDATA_WRITE_W0, temp[0]);
    96029608:	b9002420 	str	w0, [x1, #36]
	dpaux_writel(hdpaux, DP_AUXDATA_WRITE_W1, temp[1]);
    9602960c:	b94067a0 	ldr	w0, [x29, #100]
    96029610:	b9003420 	str	w0, [x1, #52]
	dpaux_writel(hdpaux, DP_AUXDATA_WRITE_W2, temp[2]);
    96029614:	b9406ba0 	ldr	w0, [x29, #104]
    96029618:	b9004420 	str	w0, [x1, #68]
	dpaux_writel(hdpaux, DP_AUXDATA_WRITE_W3, temp[3]);
    9602961c:	b9406fa0 	ldr	w0, [x29, #108]
    96029620:	b9005420 	str	w0, [x1, #84]
	err = tegrabl_dpaux_hpd_status(hdpaux, &hpd_status);
    96029624:	91017fa1 	add	x1, x29, #0x5f
    96029628:	aa1403e0 	mov	x0, x20
    9602962c:	97ffffc3 	bl	96029538 <tegrabl_dpaux_hpd_status>
    96029630:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96029634:	350000a0 	cbnz	w0, 96029648 <tegrabl_dpaux_write_chunk+0xe0>
	if (hpd_status != true) {
    96029638:	39417fa0 	ldrb	w0, [x29, #95]
    9602963c:	35000140 	cbnz	w0, 96029664 <tegrabl_dpaux_write_chunk+0xfc>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_CONNECTED, 0);
    96029640:	528004d3 	mov	w19, #0x26                  	// #38
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 3);
    96029644:	72a96973 	movk	w19, #0x4b4b, lsl #16
		pr_error("%s: error = 0x%08x\n", __func__, err);
    96029648:	2a1303e2 	mov	w2, w19
    9602964c:	f00000c1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96029650:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96029654:	913f7c21 	add	x1, x1, #0xfdf
    96029658:	91052000 	add	x0, x0, #0x148
    9602965c:	97ffe405 	bl	96022670 <tegrabl_printf>
	return err;
    96029660:	14000036 	b	96029738 <tegrabl_dpaux_write_chunk+0x1d0>
	uint32_t defer_retries   = DPAUX_DEFER_MAX_TRIES;
    96029664:	528000f7 	mov	w23, #0x7                   	// #7
	uint32_t timeout_retries = DPAUX_TIMEOUT_MAX_TRIES;
    96029668:	52800058 	mov	w24, #0x2                   	// #2
		if ((timeout_retries != DPAUX_TIMEOUT_MAX_TRIES) ||
    9602966c:	71000b1f 	cmp	w24, #0x2
    96029670:	7a470ae0 	ccmp	w23, #0x7, #0x0, eq  // eq = none
    96029674:	54000060 	b.eq	96029680 <tegrabl_dpaux_write_chunk+0x118>  // b.none
			tegrabl_udelay(DP_DPCP_RETRY_WAIT_TIME_US);
    96029678:	d2800020 	mov	x0, #0x1                   	// #1
    9602967c:	97ffd98a 	bl	9601fca4 <tegrabl_udelay>
		val = dpaux_readl(hdpaux, DP_AUXCTL);
    96029680:	f9400681 	ldr	x1, [x20, #8]
    96029684:	b940b420 	ldr	w0, [x1, #180]
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, TRANSACTREQ, PENDING, val);
    96029688:	32100000 	orr	w0, w0, #0x10000
		dpaux_writel(hdpaux, DP_AUXCTL, val);
    9602968c:	b900b420 	str	w0, [x1, #180]
		start_time = tegrabl_get_timestamp_ms();
    96029690:	97ffd97f 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    96029694:	aa0003f9 	mov	x25, x0
			val = dpaux_readl(hdpaux, DP_AUXCTL);
    96029698:	f9400680 	ldr	x0, [x20, #8]
    9602969c:	b940b400 	ldr	w0, [x0, #180]
			req = NV_DRF_VAL(DPAUX, DP_AUXCTL, TRANSACTREQ, val);
    960296a0:	d3504000 	ubfx	x0, x0, #16, #1
		while (req & DPAUX_DP_AUXCTL_TRANSACTREQ_PENDING) {
    960296a4:	35000240 	cbnz	w0, 960296ec <tegrabl_dpaux_write_chunk+0x184>
		val = dpaux_readl(hdpaux, DP_AUXSTAT);
    960296a8:	f9400682 	ldr	x2, [x20, #8]
    960296ac:	b940c440 	ldr	w0, [x2, #196]
			(NV_DRF_VAL(DPAUX, DP_AUXSTAT, NO_STOP_ERROR, val) ==
    960296b0:	530b7c01 	lsr	w1, w0, #11
			(NV_DRF_VAL(DPAUX, DP_AUXSTAT, RX_ERROR, val) ==
    960296b4:	53097c03 	lsr	w3, w0, #9
				 DPAUX_DP_AUXSTAT_0_SINKSTAT_ERROR_PENDING) ||
    960296b8:	2a402821 	orr	w1, w1, w0, lsr #10
    960296bc:	2a402063 	orr	w3, w3, w0, lsr #8
    960296c0:	2a030021 	orr	w1, w1, w3
    960296c4:	370000c1 	tbnz	w1, #0, 960296dc <tegrabl_dpaux_write_chunk+0x174>
    960296c8:	d3504c01 	ubfx	x1, x0, #16, #4
				DPAUX_DP_AUXSTAT_0_NO_STOP_ERROR_PENDING) ||
    960296cc:	7100043f 	cmp	w1, #0x1
    960296d0:	54000060 	b.eq	960296dc <tegrabl_dpaux_write_chunk+0x174>  // b.none
				DPAUX_DP_AUXSTAT_0_REPLYTYPE_NACK) ||
    960296d4:	7100103f 	cmp	w1, #0x4
    960296d8:	54000181 	b.ne	96029708 <tegrabl_dpaux_write_chunk+0x1a0>  // b.any
			if (timeout_retries-- > 0) {
    960296dc:	34000498 	cbz	w24, 9602976c <tegrabl_dpaux_write_chunk+0x204>
    960296e0:	51000718 	sub	w24, w24, #0x1
				dpaux_writel(hdpaux, DP_AUXSTAT, val);
    960296e4:	b900c440 	str	w0, [x2, #196]
				continue;
    960296e8:	17ffffe1 	b	9602966c <tegrabl_dpaux_write_chunk+0x104>
			curr_time = tegrabl_get_timestamp_ms();
    960296ec:	97ffd968 	bl	9601fc8c <tegrabl_get_timestamp_ms>
			if (curr_time - start_time > DPAUX_TIMEOUT_MS) {
    960296f0:	cb190000 	sub	x0, x0, x25
    960296f4:	f10fa01f 	cmp	x0, #0x3e8
    960296f8:	54000368 	b.hi	96029764 <tegrabl_dpaux_write_chunk+0x1fc>  // b.pmore
			tegrabl_udelay(DPAUX_RETRY_WAIT_TIME_US);
    960296fc:	d2800c80 	mov	x0, #0x64                  	// #100
    96029700:	97ffd969 	bl	9601fca4 <tegrabl_udelay>
    96029704:	17ffffe5 	b	96029698 <tegrabl_dpaux_write_chunk+0x130>
			(NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLYTYPE, val) ==
    96029708:	2a0103e3 	mov	w3, w1
				DPAUX_DP_AUXSTAT_0_REPLYTYPE_DEFER) ||
    9602970c:	f100087f 	cmp	x3, #0x2
		if ((NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLYTYPE, val) ==
    96029710:	fa481864 	ccmp	x3, #0x8, #0x4, ne  // ne = any
    96029714:	54000081 	b.ne	96029724 <tegrabl_dpaux_write_chunk+0x1bc>  // b.any
			if (defer_retries-- > 0) {
    96029718:	340002f7 	cbz	w23, 96029774 <tegrabl_dpaux_write_chunk+0x20c>
    9602971c:	510006f7 	sub	w23, w23, #0x1
    96029720:	17fffff1 	b	960296e4 <tegrabl_dpaux_write_chunk+0x17c>
		if (NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLYTYPE, val) ==
    96029724:	350002c1 	cbnz	w1, 9602977c <tegrabl_dpaux_write_chunk+0x214>
			(*size)++;
    96029728:	b94002a1 	ldr	w1, [x21]
    9602972c:	11000421 	add	w1, w1, #0x1
    96029730:	b90002a1 	str	w1, [x21]
	*aux_stat = val;
    96029734:	b90002c0 	str	w0, [x22]
}
    96029738:	2a1303e0 	mov	w0, w19
    9602973c:	f94023f9 	ldr	x25, [sp, #64]
    96029740:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029744:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029748:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602974c:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96029750:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96029754:	52802053 	mov	w19, #0x102                 	// #258
    96029758:	17ffffbb 	b	96029644 <tegrabl_dpaux_write_chunk+0xdc>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9602975c:	52804053 	mov	w19, #0x202                 	// #514
    96029760:	17ffffb9 	b	96029644 <tegrabl_dpaux_write_chunk+0xdc>
				err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 0);
    96029764:	528000d3 	mov	w19, #0x6                   	// #6
    96029768:	17ffffb7 	b	96029644 <tegrabl_dpaux_write_chunk+0xdc>
				err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 1);
    9602976c:	528020d3 	mov	w19, #0x106                 	// #262
    96029770:	17ffffb5 	b	96029644 <tegrabl_dpaux_write_chunk+0xdc>
				err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 2);
    96029774:	528040d3 	mov	w19, #0x206                 	// #518
    96029778:	17ffffb3 	b	96029644 <tegrabl_dpaux_write_chunk+0xdc>
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 3);
    9602977c:	528060d3 	mov	w19, #0x306                 	// #774
    96029780:	17ffffb1 	b	96029644 <tegrabl_dpaux_write_chunk+0xdc>

0000000096029784 <tegrabl_dpaux_write>:
{
    96029784:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    96029788:	f100001f 	cmp	x0, #0x0
    9602978c:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    96029790:	910003fd 	mov	x29, sp
    96029794:	a90153f3 	stp	x19, x20, [sp, #16]
    96029798:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602979c:	a90363f7 	stp	x23, x24, [sp, #48]
    960297a0:	a9046bf9 	stp	x25, x26, [sp, #64]
	uint32_t cur_size = 0;
    960297a4:	b9006fbf 	str	wzr, [x29, #108]
{
    960297a8:	f9002bfb 	str	x27, [sp, #80]
	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    960297ac:	540005a0 	b.eq	96029860 <tegrabl_dpaux_write+0xdc>  // b.none
    960297b0:	f100009f 	cmp	x4, #0x0
    960297b4:	aa0403f4 	mov	x20, x4
    960297b8:	aa0503f9 	mov	x25, x5
    960297bc:	fa4018a4 	ccmp	x5, #0x0, #0x4, ne  // ne = any
    960297c0:	54000500 	b.eq	96029860 <tegrabl_dpaux_write+0xdc>  // b.none
    960297c4:	aa0003f8 	mov	x24, x0
	if (*size == 0) {
    960297c8:	b9400080 	ldr	w0, [x4]
    960297cc:	340005c0 	cbz	w0, 96029884 <tegrabl_dpaux_write+0x100>
    960297d0:	2a0103fa 	mov	w26, w1
    960297d4:	2a0203f7 	mov	w23, w2
    960297d8:	aa0303f6 	mov	x22, x3
	uint32_t finished = 0;
    960297dc:	52800015 	mov	w21, #0x0                   	// #0
		cur_size = *size - finished;
    960297e0:	5280021b 	mov	w27, #0x10                  	// #16
    960297e4:	b9400280 	ldr	w0, [x20]
		err = tegrabl_dpaux_write_chunk(hdpaux, cmd, addr, data, &cur_size,
    960297e8:	aa1903e5 	mov	x5, x25
    960297ec:	9101b3a4 	add	x4, x29, #0x6c
    960297f0:	aa1603e3 	mov	x3, x22
		cur_size = *size - finished;
    960297f4:	4b150000 	sub	w0, w0, w21
		err = tegrabl_dpaux_write_chunk(hdpaux, cmd, addr, data, &cur_size,
    960297f8:	2a1703e2 	mov	w2, w23
		cur_size = *size - finished;
    960297fc:	7100441f 	cmp	w0, #0x11
		err = tegrabl_dpaux_write_chunk(hdpaux, cmd, addr, data, &cur_size,
    96029800:	2a1a03e1 	mov	w1, w26
		cur_size = *size - finished;
    96029804:	1a9b3000 	csel	w0, w0, w27, cc  // cc = lo, ul, last
    96029808:	b9006fa0 	str	w0, [x29, #108]
		err = tegrabl_dpaux_write_chunk(hdpaux, cmd, addr, data, &cur_size,
    9602980c:	aa1803e0 	mov	x0, x24
    96029810:	97ffff56 	bl	96029568 <tegrabl_dpaux_write_chunk>
    96029814:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96029818:	35000100 	cbnz	w0, 96029838 <tegrabl_dpaux_write+0xb4>
		finished += cur_size;
    9602981c:	b9406fa0 	ldr	w0, [x29, #108]
    96029820:	0b0002b5 	add	w21, w21, w0
		addr += cur_size;
    96029824:	0b0002f7 	add	w23, w23, w0
		data += cur_size;
    96029828:	8b2042d6 	add	x22, x22, w0, uxtw
	} while (*size > finished);
    9602982c:	b9400280 	ldr	w0, [x20]
    96029830:	6b15001f 	cmp	w0, w21
    96029834:	54fffd88 	b.hi	960297e4 <tegrabl_dpaux_write+0x60>  // b.pmore
	*size = finished;
    96029838:	b9000295 	str	w21, [x20]
	if (err != TEGRABL_NO_ERROR) {
    9602983c:	35000173 	cbnz	w19, 96029868 <tegrabl_dpaux_write+0xe4>
}
    96029840:	2a1303e0 	mov	w0, w19
    96029844:	f9402bfb 	ldr	x27, [sp, #80]
    96029848:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602984c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029850:	a94363f7 	ldp	x23, x24, [sp, #48]
    96029854:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96029858:	a8c77bfd 	ldp	x29, x30, [sp], #112
    9602985c:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 5);
    96029860:	5280a053 	mov	w19, #0x502                 	// #1282
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    96029864:	72a96973 	movk	w19, #0x4b4b, lsl #16
		pr_error("%s: error = 0x%08x\n", __func__, err);
    96029868:	2a1303e2 	mov	w2, w19
    9602986c:	900000e1 	adrp	x1, 96045000 <__func__.3796+0x7>
    96029870:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96029874:	91004821 	add	x1, x1, #0x12
    96029878:	91052000 	add	x0, x0, #0x148
    9602987c:	97ffe37d 	bl	96022670 <tegrabl_printf>
	return err;
    96029880:	17fffff0 	b	96029840 <tegrabl_dpaux_write+0xbc>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 6);
    96029884:	5280c053 	mov	w19, #0x602                 	// #1538
    96029888:	17fffff7 	b	96029864 <tegrabl_dpaux_write+0xe0>

000000009602988c <tegrabl_dpaux_read_chunk>:
{
    9602988c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96029890:	910003fd 	mov	x29, sp
    96029894:	a90153f3 	stp	x19, x20, [sp, #16]
    96029898:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602989c:	aa0403f5 	mov	x21, x4
    960298a0:	a90363f7 	stp	x23, x24, [sp, #48]
    960298a4:	aa0003f8 	mov	x24, x0
    960298a8:	a9046bf9 	stp	x25, x26, [sp, #64]
	if ((cmd != AUX_CMD_I2CRD) && (cmd != AUX_CMD_MOTRD) &&
    960298ac:	121d7820 	and	w0, w1, #0xfffffffb
{
    960298b0:	aa0303f7 	mov	x23, x3
    960298b4:	aa0503f6 	mov	x22, x5
	if ((cmd != AUX_CMD_I2CRD) && (cmd != AUX_CMD_MOTRD) &&
    960298b8:	7100041f 	cmp	w0, #0x1
    960298bc:	54000060 	b.eq	960298c8 <tegrabl_dpaux_read_chunk+0x3c>  // b.none
    960298c0:	7100243f 	cmp	w1, #0x9
    960298c4:	54000d01 	b.ne	96029a64 <tegrabl_dpaux_read_chunk+0x1d8>  // b.any
	if (*size > DPAUX_MAX_BYTES) {
    960298c8:	b94002a4 	ldr	w4, [x21]
    960298cc:	7100409f 	cmp	w4, #0x10
    960298d0:	54000ce8 	b.hi	96029a6c <tegrabl_dpaux_read_chunk+0x1e0>  // b.pmore
	val = dpaux_readl(hdpaux, DP_AUXCTL);
    960298d4:	f9400703 	ldr	x3, [x24, #8]
	val = NV_FLD_SET_DRF_NUM(DPAUX, DP_AUXCTL, CMD, cmd, val);
    960298d8:	53140c21 	ubfiz	w1, w1, #12, #4
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, ADDRESS_ONLY, YES, val);
    960298dc:	7100009f 	cmp	w4, #0x0
	val = dpaux_readl(hdpaux, DP_AUXCTL);
    960298e0:	b940b460 	ldr	w0, [x3, #180]
	val = NV_FLD_SET_DRF_NUM(DPAUX, DP_AUXCTL, CMD, cmd, val);
    960298e4:	12106c00 	and	w0, w0, #0xffff0fff
    960298e8:	2a000021 	orr	w1, w1, w0
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, ADDRESS_ONLY, YES, val);
    960298ec:	51000480 	sub	w0, w4, #0x1
    960298f0:	12185c21 	and	w1, w1, #0xffffff00
    960298f4:	32180025 	orr	w5, w1, #0x100
    960298f8:	2a010001 	orr	w1, w0, w1
    960298fc:	12177821 	and	w1, w1, #0xfffffeff
	err = tegrabl_dpaux_hpd_status(hdpaux, &hpd_status);
    96029900:	aa1803e0 	mov	x0, x24
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, ADDRESS_ONLY, YES, val);
    96029904:	1a851021 	csel	w1, w1, w5, ne  // ne = any
	dpaux_writel(hdpaux, DP_AUXCTL, val);
    96029908:	b900b461 	str	w1, [x3, #180]
	dpaux_writel(hdpaux, DP_AUXADDR, addr);
    9602990c:	b900a462 	str	w2, [x3, #164]
	err = tegrabl_dpaux_hpd_status(hdpaux, &hpd_status);
    96029910:	91017fa1 	add	x1, x29, #0x5f
    96029914:	97ffff09 	bl	96029538 <tegrabl_dpaux_hpd_status>
    96029918:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9602991c:	350000a0 	cbnz	w0, 96029930 <tegrabl_dpaux_read_chunk+0xa4>
	if (hpd_status != true) {
    96029920:	39417fa0 	ldrb	w0, [x29, #95]
    96029924:	35000140 	cbnz	w0, 9602994c <tegrabl_dpaux_read_chunk+0xc0>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_CONNECTED, 1);
    96029928:	528024d3 	mov	w19, #0x126                 	// #294
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 7);
    9602992c:	72a96973 	movk	w19, #0x4b4b, lsl #16
		pr_error("%s: error = 0x%08x\n", __func__, err);
    96029930:	2a1303e2 	mov	w2, w19
    96029934:	f00000c1 	adrp	x1, 96044000 <__func__.6231+0x4f3>
    96029938:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602993c:	913fe421 	add	x1, x1, #0xff9
    96029940:	91052000 	add	x0, x0, #0x148
    96029944:	97ffe34b 	bl	96022670 <tegrabl_printf>
	return err;
    96029948:	14000040 	b	96029a48 <tegrabl_dpaux_read_chunk+0x1bc>
	uint32_t defer_retries  = DPAUX_DEFER_MAX_TRIES;
    9602994c:	528000f9 	mov	w25, #0x7                   	// #7
	uint32_t timeout_retries = DPAUX_TIMEOUT_MAX_TRIES;
    96029950:	5280005a 	mov	w26, #0x2                   	// #2
		if ((timeout_retries != DPAUX_TIMEOUT_MAX_TRIES) ||
    96029954:	71000b5f 	cmp	w26, #0x2
    96029958:	7a470b20 	ccmp	w25, #0x7, #0x0, eq  // eq = none
    9602995c:	54000060 	b.eq	96029968 <tegrabl_dpaux_read_chunk+0xdc>  // b.none
			tegrabl_udelay(DP_DPCP_RETRY_WAIT_TIME_US);
    96029960:	d2800020 	mov	x0, #0x1                   	// #1
    96029964:	97ffd8d0 	bl	9601fca4 <tegrabl_udelay>
		val = dpaux_readl(hdpaux, DP_AUXCTL);
    96029968:	f9400701 	ldr	x1, [x24, #8]
    9602996c:	b940b420 	ldr	w0, [x1, #180]
		val = NV_FLD_SET_DRF_DEF(DPAUX, DP_AUXCTL, TRANSACTREQ, PENDING, val);
    96029970:	32100000 	orr	w0, w0, #0x10000
		dpaux_writel(hdpaux, DP_AUXCTL, val);
    96029974:	b900b420 	str	w0, [x1, #180]
		start_time = tegrabl_get_timestamp_ms();
    96029978:	97ffd8c5 	bl	9601fc8c <tegrabl_get_timestamp_ms>
    9602997c:	aa0003f4 	mov	x20, x0
			val = dpaux_readl(hdpaux, DP_AUXCTL);
    96029980:	f9400700 	ldr	x0, [x24, #8]
    96029984:	b940b400 	ldr	w0, [x0, #180]
			req = NV_DRF_VAL(DPAUX, DP_AUXCTL, TRANSACTREQ, val);
    96029988:	d3504000 	ubfx	x0, x0, #16, #1
		while (req & DPAUX_DP_AUXCTL_TRANSACTREQ_PENDING) {
    9602998c:	35000240 	cbnz	w0, 960299d4 <tegrabl_dpaux_read_chunk+0x148>
		val = dpaux_readl(hdpaux, DP_AUXSTAT);
    96029990:	f9400700 	ldr	x0, [x24, #8]
    96029994:	b940c414 	ldr	w20, [x0, #196]
			(NV_DRF_VAL(DPAUX, DP_AUXSTAT, NO_STOP_ERROR, val) ==
    96029998:	530b7e81 	lsr	w1, w20, #11
			(NV_DRF_VAL(DPAUX, DP_AUXSTAT, RX_ERROR, val) ==
    9602999c:	53097e82 	lsr	w2, w20, #9
				 DPAUX_DP_AUXSTAT_0_SINKSTAT_ERROR_PENDING) ||
    960299a0:	2a542821 	orr	w1, w1, w20, lsr #10
    960299a4:	2a542042 	orr	w2, w2, w20, lsr #8
    960299a8:	2a020021 	orr	w1, w1, w2
    960299ac:	370000c1 	tbnz	w1, #0, 960299c4 <tegrabl_dpaux_read_chunk+0x138>
    960299b0:	d3504e81 	ubfx	x1, x20, #16, #4
				DPAUX_DP_AUXSTAT_0_NO_STOP_ERROR_PENDING) ||
    960299b4:	7100043f 	cmp	w1, #0x1
    960299b8:	54000060 	b.eq	960299c4 <tegrabl_dpaux_read_chunk+0x138>  // b.none
				DPAUX_DP_AUXSTAT_0_REPLYTYPE_NACK) ||
    960299bc:	7100103f 	cmp	w1, #0x4
    960299c0:	54000181 	b.ne	960299f0 <tegrabl_dpaux_read_chunk+0x164>  // b.any
			if (timeout_retries-- > 0) {
    960299c4:	340005da 	cbz	w26, 96029a7c <tegrabl_dpaux_read_chunk+0x1f0>
    960299c8:	5100075a 	sub	w26, w26, #0x1
				dpaux_writel(hdpaux, DP_AUXSTAT, val);
    960299cc:	b900c414 	str	w20, [x0, #196]
				continue;
    960299d0:	17ffffe1 	b	96029954 <tegrabl_dpaux_read_chunk+0xc8>
			curr_time = tegrabl_get_timestamp_ms();
    960299d4:	97ffd8ae 	bl	9601fc8c <tegrabl_get_timestamp_ms>
			if (curr_time - start_time > DPAUX_TIMEOUT_MS) {
    960299d8:	cb140000 	sub	x0, x0, x20
    960299dc:	f10fa01f 	cmp	x0, #0x3e8
    960299e0:	540004a8 	b.hi	96029a74 <tegrabl_dpaux_read_chunk+0x1e8>  // b.pmore
			tegrabl_udelay(DPAUX_RETRY_WAIT_TIME_US);
    960299e4:	d2800c80 	mov	x0, #0x64                  	// #100
    960299e8:	97ffd8af 	bl	9601fca4 <tegrabl_udelay>
    960299ec:	17ffffe5 	b	96029980 <tegrabl_dpaux_read_chunk+0xf4>
			(NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLYTYPE, val) ==
    960299f0:	2a0103e2 	mov	w2, w1
				DPAUX_DP_AUXSTAT_0_REPLYTYPE_DEFER) ||
    960299f4:	f100085f 	cmp	x2, #0x2
		if ((NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLYTYPE, val) ==
    960299f8:	fa481844 	ccmp	x2, #0x8, #0x4, ne  // ne = any
    960299fc:	54000081 	b.ne	96029a0c <tegrabl_dpaux_read_chunk+0x180>  // b.any
			if (defer_retries-- > 0) {
    96029a00:	34000439 	cbz	w25, 96029a84 <tegrabl_dpaux_read_chunk+0x1f8>
    96029a04:	51000739 	sub	w25, w25, #0x1
    96029a08:	17fffff1 	b	960299cc <tegrabl_dpaux_read_chunk+0x140>
		if (NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLYTYPE, val) ==
    96029a0c:	35000401 	cbnz	w1, 96029a8c <tegrabl_dpaux_read_chunk+0x200>
			temp[0] = dpaux_readl(hdpaux, DP_AUXDATA_READ_W0);
    96029a10:	b9406401 	ldr	w1, [x0, #100]
			*size = NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLY_M, val);
    96029a14:	12001e82 	and	w2, w20, #0xff
			temp[0] = dpaux_readl(hdpaux, DP_AUXDATA_READ_W0);
    96029a18:	b90063a1 	str	w1, [x29, #96]
			temp[1] = dpaux_readl(hdpaux, DP_AUXDATA_READ_W1);
    96029a1c:	b9407401 	ldr	w1, [x0, #116]
    96029a20:	b90067a1 	str	w1, [x29, #100]
			temp[2] = dpaux_readl(hdpaux, DP_AUXDATA_READ_W2);
    96029a24:	b9408401 	ldr	w1, [x0, #132]
			temp[3] = dpaux_readl(hdpaux, DP_AUXDATA_READ_W3);
    96029a28:	b9409400 	ldr	w0, [x0, #148]
			*size = NV_DRF_VAL(DPAUX, DP_AUXSTAT, REPLY_M, val);
    96029a2c:	b90002a2 	str	w2, [x21]
			memcpy(data, temp, *size);
    96029a30:	92401c42 	and	x2, x2, #0xff
			temp[3] = dpaux_readl(hdpaux, DP_AUXDATA_READ_W3);
    96029a34:	290d03a1 	stp	w1, w0, [x29, #104]
			memcpy(data, temp, *size);
    96029a38:	910183a1 	add	x1, x29, #0x60
    96029a3c:	aa1703e0 	mov	x0, x23
    96029a40:	94000139 	bl	96029f24 <memcpy>
	*aux_stat = val;
    96029a44:	b90002d4 	str	w20, [x22]
}
    96029a48:	2a1303e0 	mov	w0, w19
    96029a4c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029a50:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029a54:	a94363f7 	ldp	x23, x24, [sp, #48]
    96029a58:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96029a5c:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96029a60:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 3);
    96029a64:	52806053 	mov	w19, #0x302                 	// #770
    96029a68:	17ffffb1 	b	9602992c <tegrabl_dpaux_read_chunk+0xa0>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 4);
    96029a6c:	52808053 	mov	w19, #0x402                 	// #1026
    96029a70:	17ffffaf 	b	9602992c <tegrabl_dpaux_read_chunk+0xa0>
				err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 4);
    96029a74:	528080d3 	mov	w19, #0x406                 	// #1030
    96029a78:	17ffffad 	b	9602992c <tegrabl_dpaux_read_chunk+0xa0>
				err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 5);
    96029a7c:	5280a0d3 	mov	w19, #0x506                 	// #1286
    96029a80:	17ffffab 	b	9602992c <tegrabl_dpaux_read_chunk+0xa0>
				err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 6);
    96029a84:	5280c0d3 	mov	w19, #0x606                 	// #1542
    96029a88:	17ffffa9 	b	9602992c <tegrabl_dpaux_read_chunk+0xa0>
			err = TEGRABL_ERROR(TEGRABL_ERR_TIMEOUT, 7);
    96029a8c:	5280e0d3 	mov	w19, #0x706                 	// #1798
    96029a90:	17ffffa7 	b	9602992c <tegrabl_dpaux_read_chunk+0xa0>

0000000096029a94 <tegrabl_dpaux_read>:
{
    96029a94:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    96029a98:	f100001f 	cmp	x0, #0x0
    96029a9c:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
{
    96029aa0:	910003fd 	mov	x29, sp
    96029aa4:	a90153f3 	stp	x19, x20, [sp, #16]
    96029aa8:	a9025bf5 	stp	x21, x22, [sp, #32]
    96029aac:	a90363f7 	stp	x23, x24, [sp, #48]
    96029ab0:	a9046bf9 	stp	x25, x26, [sp, #64]
	uint32_t cur_size = 0;
    96029ab4:	b9006fbf 	str	wzr, [x29, #108]
{
    96029ab8:	f9002bfb 	str	x27, [sp, #80]
	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    96029abc:	540005a0 	b.eq	96029b70 <tegrabl_dpaux_read+0xdc>  // b.none
    96029ac0:	f100009f 	cmp	x4, #0x0
    96029ac4:	aa0403f4 	mov	x20, x4
    96029ac8:	aa0503f9 	mov	x25, x5
    96029acc:	fa4018a4 	ccmp	x5, #0x0, #0x4, ne  // ne = any
    96029ad0:	54000500 	b.eq	96029b70 <tegrabl_dpaux_read+0xdc>  // b.none
    96029ad4:	aa0003f8 	mov	x24, x0
	if (*size == 0) {
    96029ad8:	b9400080 	ldr	w0, [x4]
    96029adc:	340005c0 	cbz	w0, 96029b94 <tegrabl_dpaux_read+0x100>
    96029ae0:	2a0103fa 	mov	w26, w1
    96029ae4:	2a0203f7 	mov	w23, w2
    96029ae8:	aa0303f6 	mov	x22, x3
	uint32_t finished = 0;
    96029aec:	52800015 	mov	w21, #0x0                   	// #0
		cur_size = *size - finished;
    96029af0:	5280021b 	mov	w27, #0x10                  	// #16
    96029af4:	b9400280 	ldr	w0, [x20]
		err = tegrabl_dpaux_read_chunk(hdpaux, cmd, addr, data, &cur_size,
    96029af8:	aa1903e5 	mov	x5, x25
    96029afc:	9101b3a4 	add	x4, x29, #0x6c
    96029b00:	aa1603e3 	mov	x3, x22
		cur_size = *size - finished;
    96029b04:	4b150000 	sub	w0, w0, w21
		err = tegrabl_dpaux_read_chunk(hdpaux, cmd, addr, data, &cur_size,
    96029b08:	2a1703e2 	mov	w2, w23
		cur_size = *size - finished;
    96029b0c:	7100441f 	cmp	w0, #0x11
		err = tegrabl_dpaux_read_chunk(hdpaux, cmd, addr, data, &cur_size,
    96029b10:	2a1a03e1 	mov	w1, w26
		cur_size = *size - finished;
    96029b14:	1a9b3000 	csel	w0, w0, w27, cc  // cc = lo, ul, last
    96029b18:	b9006fa0 	str	w0, [x29, #108]
		err = tegrabl_dpaux_read_chunk(hdpaux, cmd, addr, data, &cur_size,
    96029b1c:	aa1803e0 	mov	x0, x24
    96029b20:	97ffff5b 	bl	9602988c <tegrabl_dpaux_read_chunk>
    96029b24:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    96029b28:	35000100 	cbnz	w0, 96029b48 <tegrabl_dpaux_read+0xb4>
		finished += cur_size;
    96029b2c:	b9406fa0 	ldr	w0, [x29, #108]
    96029b30:	0b0002b5 	add	w21, w21, w0
		addr += cur_size;
    96029b34:	0b0002f7 	add	w23, w23, w0
		data += cur_size;
    96029b38:	8b2042d6 	add	x22, x22, w0, uxtw
	} while (*size > finished);
    96029b3c:	b9400280 	ldr	w0, [x20]
    96029b40:	6b15001f 	cmp	w0, w21
    96029b44:	54fffd88 	b.hi	96029af4 <tegrabl_dpaux_read+0x60>  // b.pmore
	*size = finished;
    96029b48:	b9000295 	str	w21, [x20]
	if (err != TEGRABL_NO_ERROR) {
    96029b4c:	35000173 	cbnz	w19, 96029b78 <tegrabl_dpaux_read+0xe4>
}
    96029b50:	2a1303e0 	mov	w0, w19
    96029b54:	f9402bfb 	ldr	x27, [sp, #80]
    96029b58:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029b5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029b60:	a94363f7 	ldp	x23, x24, [sp, #48]
    96029b64:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96029b68:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96029b6c:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 7);
    96029b70:	5280e053 	mov	w19, #0x702                 	// #1794
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 8);
    96029b74:	72a96973 	movk	w19, #0x4b4b, lsl #16
		pr_error("%s: error = 0x%08x\n", __func__, err);
    96029b78:	2a1303e2 	mov	w2, w19
    96029b7c:	900000e1 	adrp	x1, 96045000 <__func__.3796+0x7>
    96029b80:	900000e0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96029b84:	91009821 	add	x1, x1, #0x26
    96029b88:	91052000 	add	x0, x0, #0x148
    96029b8c:	97ffe2b9 	bl	96022670 <tegrabl_printf>
	return err;
    96029b90:	17fffff0 	b	96029b50 <tegrabl_dpaux_read+0xbc>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 8);
    96029b94:	52810053 	mov	w19, #0x802                 	// #2050
    96029b98:	17fffff7 	b	96029b74 <tegrabl_dpaux_read+0xe0>

0000000096029b9c <tegrabl_dpaux_i2c_write>:
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t cur_size = 0;
	uint32_t finished = 0;

	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    96029b9c:	f100001f 	cmp	x0, #0x0
    96029ba0:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96029ba4:	540005a0 	b.eq	96029c58 <tegrabl_dpaux_i2c_write+0xbc>  // b.none
{
    96029ba8:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96029bac:	910003fd 	mov	x29, sp
    96029bb0:	a90153f3 	stp	x19, x20, [sp, #16]
    96029bb4:	aa0303f3 	mov	x19, x3
    96029bb8:	a9025bf5 	stp	x21, x22, [sp, #32]
    96029bbc:	a90363f7 	stp	x23, x24, [sp, #48]
    96029bc0:	f90023f9 	str	x25, [sp, #64]
	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    96029bc4:	b4000503 	cbz	x3, 96029c64 <tegrabl_dpaux_i2c_write+0xc8>
    96029bc8:	aa0003f6 	mov	x22, x0
    96029bcc:	b9400060 	ldr	w0, [x3]
    96029bd0:	340004a0 	cbz	w0, 96029c64 <tegrabl_dpaux_i2c_write+0xc8>
    96029bd4:	aa0403f7 	mov	x23, x4
		(*size == 0) || (aux_stat == NULL)) {
    96029bd8:	b4000464 	cbz	x4, 96029c64 <tegrabl_dpaux_i2c_write+0xc8>
    96029bdc:	12003c38 	and	w24, w1, #0xffff
    96029be0:	aa0203f5 	mov	x21, x2
	uint32_t finished = 0;
    96029be4:	52800014 	mov	w20, #0x0                   	// #0
	}

	pr_debug("%s: MOTWR, slave_addr = %x, size = %d\n",
			 __func__, slave_addr, *size);
	do {
		cur_size = *size - finished;
    96029be8:	52800219 	mov	w25, #0x10                  	// #16
    96029bec:	b9400260 	ldr	w0, [x19]
		if (cur_size > DPAUX_MAX_BYTES) {
			cur_size = DPAUX_MAX_BYTES;
		}

		err = tegrabl_dpaux_write_chunk(hdpaux, AUX_CMD_MOTWR, slave_addr, data,
    96029bf0:	2a1803e2 	mov	w2, w24
    96029bf4:	52800081 	mov	w1, #0x4                   	// #4
    96029bf8:	aa1703e5 	mov	x5, x23
		cur_size = *size - finished;
    96029bfc:	4b140000 	sub	w0, w0, w20
		err = tegrabl_dpaux_write_chunk(hdpaux, AUX_CMD_MOTWR, slave_addr, data,
    96029c00:	910173a4 	add	x4, x29, #0x5c
		cur_size = *size - finished;
    96029c04:	7100441f 	cmp	w0, #0x11
		err = tegrabl_dpaux_write_chunk(hdpaux, AUX_CMD_MOTWR, slave_addr, data,
    96029c08:	aa1503e3 	mov	x3, x21
		cur_size = *size - finished;
    96029c0c:	1a993000 	csel	w0, w0, w25, cc  // cc = lo, ul, last
    96029c10:	b9005fa0 	str	w0, [x29, #92]
		err = tegrabl_dpaux_write_chunk(hdpaux, AUX_CMD_MOTWR, slave_addr, data,
    96029c14:	aa1603e0 	mov	x0, x22
    96029c18:	97fffe54 	bl	96029568 <tegrabl_dpaux_write_chunk>
    96029c1c:	b9400261 	ldr	w1, [x19]
    96029c20:	b9405fa2 	ldr	w2, [x29, #92]
										&cur_size, aux_stat);
		if (err != TEGRABL_NO_ERROR) {
    96029c24:	350000a0 	cbnz	w0, 96029c38 <tegrabl_dpaux_i2c_write+0x9c>
			break;
		}
		pr_debug("cur size = %d\n", cur_size);
		finished += cur_size;
    96029c28:	0b020294 	add	w20, w20, w2
		data += cur_size;
    96029c2c:	8b2242b5 	add	x21, x21, w2, uxtw

	} while (*size > finished);
    96029c30:	6b14003f 	cmp	w1, w20
    96029c34:	54fffdc8 	b.hi	96029bec <tegrabl_dpaux_i2c_write+0x50>  // b.pmore

	*size += cur_size;
    96029c38:	0b020021 	add	w1, w1, w2
    96029c3c:	b9000261 	str	w1, [x19]

fail:
	return err;
}
    96029c40:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029c44:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029c48:	a94363f7 	ldp	x23, x24, [sp, #48]
    96029c4c:	f94023f9 	ldr	x25, [sp, #64]
    96029c50:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96029c54:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 10);
    96029c58:	52814040 	mov	w0, #0xa02                 	// #2562
    96029c5c:	72a96960 	movk	w0, #0x4b4b, lsl #16
}
    96029c60:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 10);
    96029c64:	52814040 	mov	w0, #0xa02                 	// #2562
    96029c68:	72a96960 	movk	w0, #0x4b4b, lsl #16
	return err;
    96029c6c:	17fffff5 	b	96029c40 <tegrabl_dpaux_i2c_write+0xa4>

0000000096029c70 <tegrabl_dpaux_i2c_read>:
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	uint32_t cur_size;
	uint32_t finished = 0;

	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    96029c70:	f100001f 	cmp	x0, #0x0
    96029c74:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96029c78:	54000740 	b.eq	96029d60 <tegrabl_dpaux_i2c_read+0xf0>  // b.none
{
    96029c7c:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96029c80:	910003fd 	mov	x29, sp
    96029c84:	a90153f3 	stp	x19, x20, [sp, #16]
    96029c88:	aa0303f3 	mov	x19, x3
    96029c8c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96029c90:	a90363f7 	stp	x23, x24, [sp, #48]
    96029c94:	f90023f9 	str	x25, [sp, #64]
	if ((hdpaux == NULL) || (data == NULL) || (size == NULL) ||
    96029c98:	b40006a3 	cbz	x3, 96029d6c <tegrabl_dpaux_i2c_read+0xfc>
    96029c9c:	aa0003f6 	mov	x22, x0
    96029ca0:	b9400060 	ldr	w0, [x3]
    96029ca4:	34000640 	cbz	w0, 96029d6c <tegrabl_dpaux_i2c_read+0xfc>
    96029ca8:	aa0403f7 	mov	x23, x4
		(*size == 0) || (aux_stat == NULL)) {
    96029cac:	b4000604 	cbz	x4, 96029d6c <tegrabl_dpaux_i2c_read+0xfc>
    96029cb0:	12003c38 	and	w24, w1, #0xffff
    96029cb4:	aa0203f4 	mov	x20, x2
	uint32_t finished = 0;
    96029cb8:	52800015 	mov	w21, #0x0                   	// #0
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
		goto fail;
	}

	do {
		cur_size = *size - finished;
    96029cbc:	52800219 	mov	w25, #0x10                  	// #16
    96029cc0:	b9400260 	ldr	w0, [x19]
			cur_size = DPAUX_MAX_BYTES;
		}

		pr_debug("%s: MOTRD, slave_addr = %x, size = %d\n",
				 __func__, slave_addr, cur_size);
		err = tegrabl_dpaux_read_chunk(hdpaux, AUX_CMD_MOTRD, slave_addr, data,
    96029cc4:	2a1803e2 	mov	w2, w24
    96029cc8:	528000a1 	mov	w1, #0x5                   	// #5
    96029ccc:	aa1703e5 	mov	x5, x23
		cur_size = *size - finished;
    96029cd0:	4b150000 	sub	w0, w0, w21
		err = tegrabl_dpaux_read_chunk(hdpaux, AUX_CMD_MOTRD, slave_addr, data,
    96029cd4:	910173a4 	add	x4, x29, #0x5c
		cur_size = *size - finished;
    96029cd8:	7100441f 	cmp	w0, #0x11
		err = tegrabl_dpaux_read_chunk(hdpaux, AUX_CMD_MOTRD, slave_addr, data,
    96029cdc:	aa1403e3 	mov	x3, x20
		cur_size = *size - finished;
    96029ce0:	1a993000 	csel	w0, w0, w25, cc  // cc = lo, ul, last
    96029ce4:	b9005fa0 	str	w0, [x29, #92]
		err = tegrabl_dpaux_read_chunk(hdpaux, AUX_CMD_MOTRD, slave_addr, data,
    96029ce8:	aa1603e0 	mov	x0, x22
    96029cec:	97fffee8 	bl	9602988c <tegrabl_dpaux_read_chunk>
    96029cf0:	b9400261 	ldr	w1, [x19]
    96029cf4:	b9405fa2 	ldr	w2, [x29, #92]
									   &cur_size, aux_stat);
		if (err != TEGRABL_NO_ERROR) {
    96029cf8:	350000a0 	cbnz	w0, 96029d0c <tegrabl_dpaux_i2c_read+0x9c>
			break;
		}
		pr_debug("cur size = %d\n", cur_size);
		finished += cur_size;
    96029cfc:	0b0202b5 	add	w21, w21, w2
		data += cur_size;
    96029d00:	8b224294 	add	x20, x20, w2, uxtw

	} while (*size > finished);
    96029d04:	6b0102bf 	cmp	w21, w1
    96029d08:	54fffdc3 	b.cc	96029cc0 <tegrabl_dpaux_i2c_read+0x50>  // b.lo, b.ul, b.last

	*size += cur_size;
    96029d0c:	0b020021 	add	w1, w1, w2
    96029d10:	b9000261 	str	w1, [x19]

	cur_size = 0;
	pr_debug("%s: I2CRD, slave_addr = %x, size = %d\n",
			 __func__, slave_addr, cur_size);
	err = tegrabl_dpaux_read_chunk(hdpaux, AUX_CMD_I2CRD, slave_addr, data,
    96029d14:	aa1703e5 	mov	x5, x23
    96029d18:	910173a4 	add	x4, x29, #0x5c
    96029d1c:	aa1403e3 	mov	x3, x20
    96029d20:	2a1803e2 	mov	w2, w24
    96029d24:	aa1603e0 	mov	x0, x22
    96029d28:	52800021 	mov	w1, #0x1                   	// #1
	cur_size = 0;
    96029d2c:	b9005fbf 	str	wzr, [x29, #92]
	err = tegrabl_dpaux_read_chunk(hdpaux, AUX_CMD_I2CRD, slave_addr, data,
    96029d30:	97fffed7 	bl	9602988c <tegrabl_dpaux_read_chunk>
								   &cur_size, aux_stat);
	if (err != TEGRABL_NO_ERROR) {
    96029d34:	350000a0 	cbnz	w0, 96029d48 <tegrabl_dpaux_i2c_read+0xd8>
		goto fail;
	}
	*size += cur_size;
    96029d38:	b9400261 	ldr	w1, [x19]
    96029d3c:	b9405fa2 	ldr	w2, [x29, #92]
    96029d40:	0b020021 	add	w1, w1, w2
    96029d44:	b9000261 	str	w1, [x19]

fail:
	return err;
}
    96029d48:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029d4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029d50:	a94363f7 	ldp	x23, x24, [sp, #48]
    96029d54:	f94023f9 	ldr	x25, [sp, #64]
    96029d58:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96029d5c:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
    96029d60:	52816040 	mov	w0, #0xb02                 	// #2818
    96029d64:	72a96960 	movk	w0, #0x4b4b, lsl #16
}
    96029d68:	d65f03c0 	ret
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 11);
    96029d6c:	52816040 	mov	w0, #0xb02                 	// #2818
    96029d70:	72a96960 	movk	w0, #0x4b4b, lsl #16
	return err;
    96029d74:	17fffff5 	b	96029d48 <tegrabl_dpaux_i2c_read+0xd8>

0000000096029d78 <tegrabl_dpaux_i2c_transactions>:

tegrabl_error_t tegrabl_dpaux_i2c_transactions(struct tegrabl_dpaux *hdpaux,
	struct tegrabl_i2c_transaction *trans, uint32_t num)
{
    96029d78:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	struct tegrabl_i2c_transaction *pmsg;
	uint32_t i;
	uint32_t aux_stat;
	uint32_t len = 0;

	if ((hdpaux == NULL) || (trans == NULL) || (num == 0)) {
    96029d7c:	f100001f 	cmp	x0, #0x0
    96029d80:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    96029d84:	910003fd 	mov	x29, sp
    96029d88:	a90153f3 	stp	x19, x20, [sp, #16]
    96029d8c:	f90013f5 	str	x21, [sp, #32]
	uint32_t len = 0;
    96029d90:	b9003fbf 	str	wzr, [x29, #60]
	if ((hdpaux == NULL) || (trans == NULL) || (num == 0)) {
    96029d94:	540003c0 	b.eq	96029e0c <tegrabl_dpaux_i2c_transactions+0x94>  // b.none
    96029d98:	340003a2 	cbz	w2, 96029e0c <tegrabl_dpaux_i2c_transactions+0x94>
    96029d9c:	52800414 	mov	w20, #0x20                  	// #32
    96029da0:	aa0003f5 	mov	x21, x0
    96029da4:	aa0103f3 	mov	x19, x1
    96029da8:	9bb40454 	umaddl	x20, w2, w20, x1
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
		goto fail;
	}

	for (i = 0; i < num; i++) {
    96029dac:	eb14027f 	cmp	x19, x20
    96029db0:	540000c1 	b.ne	96029dc8 <tegrabl_dpaux_i2c_transactions+0x50>  // b.any
				goto fail;
			}
		}
	}

fail:
    96029db4:	52800000 	mov	w0, #0x0                   	// #0
	return err;
}
    96029db8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029dbc:	f94013f5 	ldr	x21, [sp, #32]
    96029dc0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96029dc4:	d65f03c0 	ret
		if (pmsg->is_write) {
    96029dc8:	39405263 	ldrb	w3, [x19, #20]
			err = tegrabl_dpaux_i2c_write(hdpaux, pmsg->slave_addr,
    96029dcc:	9100e3a4 	add	x4, x29, #0x38
    96029dd0:	b9401260 	ldr	w0, [x19, #16]
			len = pmsg->len;
    96029dd4:	b9003fa0 	str	w0, [x29, #60]
    96029dd8:	79400261 	ldrh	w1, [x19]
    96029ddc:	f9400662 	ldr	x2, [x19, #8]
		if (pmsg->is_write) {
    96029de0:	340000e3 	cbz	w3, 96029dfc <tegrabl_dpaux_i2c_transactions+0x84>
			err = tegrabl_dpaux_i2c_write(hdpaux, pmsg->slave_addr,
    96029de4:	9100f3a3 	add	x3, x29, #0x3c
    96029de8:	aa1503e0 	mov	x0, x21
    96029dec:	97ffff6c 	bl	96029b9c <tegrabl_dpaux_i2c_write>
			if (err != TEGRABL_NO_ERROR) {
    96029df0:	35fffe40 	cbnz	w0, 96029db8 <tegrabl_dpaux_i2c_transactions+0x40>
    96029df4:	91008273 	add	x19, x19, #0x20
    96029df8:	17ffffed 	b	96029dac <tegrabl_dpaux_i2c_transactions+0x34>
			err = tegrabl_dpaux_i2c_read(hdpaux, pmsg->slave_addr,
    96029dfc:	9100f3a3 	add	x3, x29, #0x3c
    96029e00:	aa1503e0 	mov	x0, x21
    96029e04:	97ffff9b 	bl	96029c70 <tegrabl_dpaux_i2c_read>
    96029e08:	17fffffa 	b	96029df0 <tegrabl_dpaux_i2c_transactions+0x78>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 12);
    96029e0c:	52818040 	mov	w0, #0xc02                 	// #3074
    96029e10:	72a96960 	movk	w0, #0x4b4b, lsl #16
	return err;
    96029e14:	17ffffe9 	b	96029db8 <tegrabl_dpaux_i2c_transactions+0x40>

0000000096029e18 <dpaux_get_soc_info>:
	},
};

void dpaux_get_soc_info(struct dpaux_soc_info **hdpaux_info)
{
	*hdpaux_info = &dpaux_info[0];
    96029e18:	b0000101 	adrp	x1, 9604a000 <s_qspi_info+0x20>
    96029e1c:	91398021 	add	x1, x1, #0xe60
    96029e20:	f9000001 	str	x1, [x0]
}
    96029e24:	d65f03c0 	ret

0000000096029e28 <memset>:
	}
}

#if !defined(__ARM_ARCH_7R__)
void *memset(void *s, int c, size_t n)
{
    96029e28:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96029e2c:	910003fd 	mov	x29, sp
    96029e30:	a90153f3 	stp	x19, x20, [sp, #16]
	char *xs = (char *)s;
	size_t len = (-(word)s) & lmask;
    96029e34:	cb0003f3 	neg	x19, x0
{
    96029e38:	a9025bf5 	stp	x21, x22, [sp, #32]
	size_t len = (-(word)s) & lmask;
    96029e3c:	92400a73 	and	x19, x19, #0x7
{
    96029e40:	f9001bf7 	str	x23, [sp, #48]
    96029e44:	aa0003f5 	mov	x21, x0
    96029e48:	2a0103f6 	mov	w22, w1
	int not_done = 1;
	word cc = c & 0xff;

	if (n > len) {
    96029e4c:	eb02027f 	cmp	x19, x2
    96029e50:	54000602 	b.cs	96029f10 <memset+0xe8>  // b.hs, b.nlast
		n -= len;
    96029e54:	cb130054 	sub	x20, x2, x19
#if (__SIZEOF_LONG__ == 8)
		cc |= cc << 32;
#endif

		/* write to non-aligned memory byte-wise */
		for (; len > 0; len--) {
    96029e58:	d2800000 	mov	x0, #0x0                   	// #0
    96029e5c:	eb00027f 	cmp	x19, x0
    96029e60:	54000301 	b.ne	96029ec0 <memset+0x98>  // b.any
			*xs++ = c;
		}

		len = (n / lsize);

		if (clib_dma_memset_callback &&
    96029e64:	b0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96029e68:	8b1302b3 	add	x19, x21, x19
    96029e6c:	f9454804 	ldr	x4, [x0, #2704]
    96029e70:	b50002e4 	cbnz	x4, 96029ecc <memset+0xa4>
	word cc = c & 0xff;
    96029e74:	92401ec0 	and	x0, x22, #0xff
		len = (n / lsize);
    96029e78:	d343fe82 	lsr	x2, x20, #3
		cc |= cc << 32;
    96029e7c:	d2800001 	mov	x1, #0x0                   	// #0
		cc |= cc << 8;
    96029e80:	aa002000 	orr	x0, x0, x0, lsl #8
		cc |= cc << 16;
    96029e84:	aa004000 	orr	x0, x0, x0, lsl #16
		cc |= cc << 32;
    96029e88:	aa008000 	orr	x0, x0, x0, lsl #32
												c, len * lsize);
		}

		if (not_done) {
			/* write to aligned memory word-wise */
			while (len--) {
    96029e8c:	eb01005f 	cmp	x2, x1
    96029e90:	540003a1 	b.ne	96029f04 <memset+0xdc>  // b.any
    96029e94:	8b020e73 	add	x19, x19, x2, lsl #3
			}
		} else {
			xs += (len * lsize);
		}

		n &= lmask;
    96029e98:	92400a82 	and	x2, x20, #0x7
	char *xs = (char *)s;
    96029e9c:	d2800000 	mov	x0, #0x0                   	// #0
	}

	/* write remaining bytes */
	for (; n > 0; n--) {
    96029ea0:	eb02001f 	cmp	x0, x2
    96029ea4:	540003a1 	b.ne	96029f18 <memset+0xf0>  // b.any
		*xs++ = c;
	}

	return s;
}
    96029ea8:	aa1503e0 	mov	x0, x21
    96029eac:	f9401bf7 	ldr	x23, [sp, #48]
    96029eb0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029eb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029eb8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96029ebc:	d65f03c0 	ret
			*xs++ = c;
    96029ec0:	38206ab6 	strb	w22, [x21, x0]
    96029ec4:	91000400 	add	x0, x0, #0x1
    96029ec8:	17ffffe5 	b	96029e5c <memset+0x34>
			((len * lsize) >= clib_dma_memset_threshold)) {
    96029ecc:	b0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96029ed0:	927df297 	and	x23, x20, #0xfffffffffffffff8
		if (clib_dma_memset_callback &&
    96029ed4:	f9455000 	ldr	x0, [x0, #2720]
    96029ed8:	eb0002ff 	cmp	x23, x0
    96029edc:	54fffcc3 	b.cc	96029e74 <memset+0x4c>  // b.lo, b.ul, b.last
			not_done = clib_dma_memset_callback(clib_dma_memset_priv, xs,
    96029ee0:	b0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96029ee4:	aa1703e3 	mov	x3, x23
    96029ee8:	2a1603e2 	mov	w2, w22
    96029eec:	aa1303e1 	mov	x1, x19
    96029ef0:	f9454c00 	ldr	x0, [x0, #2712]
    96029ef4:	d63f0080 	blr	x4
		if (not_done) {
    96029ef8:	35fffbe0 	cbnz	w0, 96029e74 <memset+0x4c>
			xs += (len * lsize);
    96029efc:	8b170273 	add	x19, x19, x23
    96029f00:	17ffffe6 	b	96029e98 <memset+0x70>
				*((word *)xs) = cc;
    96029f04:	f8217a60 	str	x0, [x19, x1, lsl #3]
    96029f08:	91000421 	add	x1, x1, #0x1
    96029f0c:	17ffffe0 	b	96029e8c <memset+0x64>
	char *xs = (char *)s;
    96029f10:	aa0003f3 	mov	x19, x0
    96029f14:	17ffffe2 	b	96029e9c <memset+0x74>
		*xs++ = c;
    96029f18:	38206a76 	strb	w22, [x19, x0]
    96029f1c:	91000400 	add	x0, x0, #0x1
    96029f20:	17ffffe0 	b	96029ea0 <memset+0x78>

0000000096029f24 <memcpy>:

void *memcpy(void *dest, const void *src, size_t n)
{
    96029f24:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	char *d = (char *)dest;
	const char *s = (const char *)src;
	size_t len;
	int not_done = 1;

	if (n == 0 || dest == src) {
    96029f28:	f100005f 	cmp	x2, #0x0
    96029f2c:	fa411004 	ccmp	x0, x1, #0x4, ne  // ne = any
{
    96029f30:	910003fd 	mov	x29, sp
    96029f34:	a90153f3 	stp	x19, x20, [sp, #16]
    96029f38:	aa0003f4 	mov	x20, x0
    96029f3c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96029f40:	f9001bf7 	str	x23, [sp, #48]
	if (n == 0 || dest == src) {
    96029f44:	540000e1 	b.ne	96029f60 <memcpy+0x3c>  // b.any
	} else {
		d += (len * lsize);
		s += (len * lsize);
	}

	for (len = (n & lmask); len > 0; len--)
    96029f48:	aa1403e0 	mov	x0, x20
		*d++ = *s++;

	return dest;
}
    96029f4c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96029f50:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96029f54:	f9401bf7 	ldr	x23, [sp, #48]
    96029f58:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96029f5c:	d65f03c0 	ret
	if (!src || !dest) {
    96029f60:	f100003f 	cmp	x1, #0x0
    96029f64:	aa0103f3 	mov	x19, x1
    96029f68:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
    96029f6c:	540007e0 	b.eq	9602a068 <memcpy+0x144>  // b.none
	if (((uintptr_t)d | (uintptr_t)s) & lmask) {
    96029f70:	aa010000 	orr	x0, x0, x1
    96029f74:	aa0203f5 	mov	x21, x2
    96029f78:	f240081f 	tst	x0, #0x7
    96029f7c:	540004c0 	b.eq	9602a014 <memcpy+0xf0>  // b.none
		if ((((uintptr_t)d ^ (uintptr_t)s) & lmask) || (n < lsize))
    96029f80:	ca010280 	eor	x0, x20, x1
    96029f84:	f240081f 	tst	x0, #0x7
    96029f88:	54000421 	b.ne	9602a00c <memcpy+0xe8>  // b.any
			len = lsize - ((uintptr_t)d & lmask);
    96029f8c:	92400a80 	and	x0, x20, #0x7
    96029f90:	d2800101 	mov	x1, #0x8                   	// #8
    96029f94:	f1001c5f 	cmp	x2, #0x7
    96029f98:	cb000020 	sub	x0, x1, x0
    96029f9c:	9a828000 	csel	x0, x0, x2, hi  // hi = pmore
		n -= len;
    96029fa0:	cb0002b5 	sub	x21, x21, x0
    96029fa4:	d2800001 	mov	x1, #0x0                   	// #0
			*d++ = *s++;
    96029fa8:	38616a62 	ldrb	w2, [x19, x1]
    96029fac:	38216a82 	strb	w2, [x20, x1]
    96029fb0:	91000421 	add	x1, x1, #0x1
		for (; len > 0; len--)
    96029fb4:	eb01001f 	cmp	x0, x1
    96029fb8:	54ffff81 	b.ne	96029fa8 <memcpy+0x84>  // b.any
    96029fbc:	8b000296 	add	x22, x20, x0
    96029fc0:	8b000273 	add	x19, x19, x0
	if (clib_dma_memcpy_callback &&
    96029fc4:	b0000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    96029fc8:	f9453c04 	ldr	x4, [x0, #2680]
    96029fcc:	b5000284 	cbnz	x4, 9602a01c <memcpy+0xf8>
	len = (n / lsize);
    96029fd0:	d343fea1 	lsr	x1, x21, #3
    96029fd4:	d2800000 	mov	x0, #0x0                   	// #0
		while (len--) {
    96029fd8:	eb01001f 	cmp	x0, x1
    96029fdc:	540003e1 	b.ne	9602a058 <memcpy+0x134>  // b.any
    96029fe0:	d37df000 	lsl	x0, x0, #3
    96029fe4:	8b0002d6 	add	x22, x22, x0
    96029fe8:	8b000273 	add	x19, x19, x0
	for (len = (n & lmask); len > 0; len--)
    96029fec:	92400ab5 	and	x21, x21, #0x7
    96029ff0:	d2800000 	mov	x0, #0x0                   	// #0
    96029ff4:	eb0002bf 	cmp	x21, x0
    96029ff8:	54fffa80 	b.eq	96029f48 <memcpy+0x24>  // b.none
		*d++ = *s++;
    96029ffc:	38606a61 	ldrb	w1, [x19, x0]
    9602a000:	38206ac1 	strb	w1, [x22, x0]
    9602a004:	91000400 	add	x0, x0, #0x1
    9602a008:	17fffffb 	b	96029ff4 <memcpy+0xd0>
		if ((((uintptr_t)d ^ (uintptr_t)s) & lmask) || (n < lsize))
    9602a00c:	aa0203e0 	mov	x0, x2
    9602a010:	17ffffe4 	b	96029fa0 <memcpy+0x7c>
	if (((uintptr_t)d | (uintptr_t)s) & lmask) {
    9602a014:	aa1403f6 	mov	x22, x20
    9602a018:	17ffffeb 	b	96029fc4 <memcpy+0xa0>
		((len * lsize) >= clib_dma_memcpy_threshold))
    9602a01c:	90000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602a020:	927df2b7 	and	x23, x21, #0xfffffffffffffff8
	if (clib_dma_memcpy_callback &&
    9602a024:	f9454400 	ldr	x0, [x0, #2696]
    9602a028:	eb0002ff 	cmp	x23, x0
    9602a02c:	54fffd23 	b.cc	96029fd0 <memcpy+0xac>  // b.lo, b.ul, b.last
		not_done = clib_dma_memcpy_callback(clib_dma_memcpy_priv, d,
    9602a030:	90000260 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602a034:	aa1703e3 	mov	x3, x23
    9602a038:	aa1303e2 	mov	x2, x19
    9602a03c:	aa1603e1 	mov	x1, x22
    9602a040:	f9454000 	ldr	x0, [x0, #2688]
    9602a044:	d63f0080 	blr	x4
	if (not_done) {
    9602a048:	35fffc40 	cbnz	w0, 96029fd0 <memcpy+0xac>
		d += (len * lsize);
    9602a04c:	8b1702d6 	add	x22, x22, x23
		s += (len * lsize);
    9602a050:	8b170273 	add	x19, x19, x23
    9602a054:	17ffffe6 	b	96029fec <memcpy+0xc8>
			*(word *)d = *(word *)s;
    9602a058:	f8607a62 	ldr	x2, [x19, x0, lsl #3]
    9602a05c:	f8207ac2 	str	x2, [x22, x0, lsl #3]
    9602a060:	91000400 	add	x0, x0, #0x1
    9602a064:	17ffffdd 	b	96029fd8 <memcpy+0xb4>
		return NULL;
    9602a068:	d2800000 	mov	x0, #0x0                   	// #0
    9602a06c:	17ffffb8 	b	96029f4c <memcpy+0x28>

000000009602a070 <memcmp>:
	}

	return dest;
}
int memcmp(const void *s1, const void *s2, size_t n)
{
    9602a070:	aa0003e4 	mov	x4, x0
	const char* p1 = s1;
	const char* end1 = p1 + n;
    9602a074:	8b020002 	add	x2, x0, x2
	const char* p2 = s2;
	int d = 0;
    9602a078:	52800000 	mov	w0, #0x0                   	// #0

	for (;;) {
		if ((d != 0) || (p1 >= end1)) {
    9602a07c:	7100001f 	cmp	w0, #0x0
    9602a080:	fa420082 	ccmp	x4, x2, #0x2, eq  // eq = none
    9602a084:	54000322 	b.cs	9602a0e8 <memcmp+0x78>  // b.hs, b.nlast
			break;
		}
		d = (int)*p1++ - (int)*p2++;
    9602a088:	aa0403e5 	mov	x5, x4
    9602a08c:	39400020 	ldrb	w0, [x1]
    9602a090:	384014a3 	ldrb	w3, [x5], #1
		if ((d != 0) || (p1 >= end1)) {
    9602a094:	6b000060 	subs	w0, w3, w0
    9602a098:	fa450040 	ccmp	x2, x5, #0x0, eq  // eq = none
    9602a09c:	54000269 	b.ls	9602a0e8 <memcmp+0x78>  // b.plast
			break;
		}
		d = (int)*p1++ - (int)*p2++;
    9602a0a0:	39400483 	ldrb	w3, [x4, #1]
		if ((d != 0) || (p1 >= end1)) {
    9602a0a4:	91000885 	add	x5, x4, #0x2
		d = (int)*p1++ - (int)*p2++;
    9602a0a8:	39400420 	ldrb	w0, [x1, #1]
		if ((d != 0) || (p1 >= end1)) {
    9602a0ac:	6b000060 	subs	w0, w3, w0
    9602a0b0:	fa450040 	ccmp	x2, x5, #0x0, eq  // eq = none
    9602a0b4:	540001a9 	b.ls	9602a0e8 <memcmp+0x78>  // b.plast
			break;
		}
		d = (int)*p1++ - (int)*p2++;
    9602a0b8:	39400883 	ldrb	w3, [x4, #2]
		if ((d != 0) || (p1 >= end1)) {
    9602a0bc:	91000c85 	add	x5, x4, #0x3
		d = (int)*p1++ - (int)*p2++;
    9602a0c0:	39400820 	ldrb	w0, [x1, #2]
		if ((d != 0) || (p1 >= end1)) {
    9602a0c4:	6b000060 	subs	w0, w3, w0
    9602a0c8:	fa450040 	ccmp	x2, x5, #0x0, eq  // eq = none
    9602a0cc:	540000e9 	b.ls	9602a0e8 <memcmp+0x78>  // b.plast
    9602a0d0:	91001084 	add	x4, x4, #0x4
    9602a0d4:	91001021 	add	x1, x1, #0x4
			break;
		}
		d = (int)*p1++ - (int)*p2++;
    9602a0d8:	385ff083 	ldurb	w3, [x4, #-1]
    9602a0dc:	385ff020 	ldurb	w0, [x1, #-1]
    9602a0e0:	4b000060 	sub	w0, w3, w0
		if ((d != 0) || (p1 >= end1)) {
    9602a0e4:	17ffffe6 	b	9602a07c <memcmp+0xc>
	}
	return d;
}
    9602a0e8:	d65f03c0 	ret

000000009602a0ec <memchr>:

void* memchr(const void *s, int c, size_t n)
{
	const unsigned char *p = s;

	if (s == NULL) {
    9602a0ec:	b40000a0 	cbz	x0, 9602a100 <memchr+0x14>
    9602a0f0:	8b020002 	add	x2, x0, x2
		return NULL;
	}
	while (n != 0U) {
		n--;
		if ((unsigned char)c == *p++) {
    9602a0f4:	12001c21 	and	w1, w1, #0xff
	while (n != 0U) {
    9602a0f8:	eb02001f 	cmp	x0, x2
    9602a0fc:	54000061 	b.ne	9602a108 <memchr+0x1c>  // b.any
		return NULL;
    9602a100:	d2800000 	mov	x0, #0x0                   	// #0
			return (void *)(p - 1);
		}
	}
	return NULL;
}
    9602a104:	d65f03c0 	ret
		if ((unsigned char)c == *p++) {
    9602a108:	aa0003e3 	mov	x3, x0
    9602a10c:	38401464 	ldrb	w4, [x3], #1
    9602a110:	6b01009f 	cmp	w4, w1
    9602a114:	54ffff80 	b.eq	9602a104 <memchr+0x18>  // b.none
    9602a118:	aa0303e0 	mov	x0, x3
    9602a11c:	17fffff7 	b	9602a0f8 <memchr+0xc>

000000009602a120 <memmove>:

void* memmove(void *dest, const void *src, size_t n)
{
	if ((dest == NULL) || (src == NULL)) {
    9602a120:	f100001f 	cmp	x0, #0x0
    9602a124:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    9602a128:	54000760 	b.eq	9602a214 <memmove+0xf4>  // b.none
		return NULL;
	}
	if (dest == src) {
    9602a12c:	eb01001f 	cmp	x0, x1
    9602a130:	54000100 	b.eq	9602a150 <memmove+0x30>  // b.none
		return dest;
	}
	if ((dest < src) || (dest > (void *)((const char *)src + n))) {
    9602a134:	54000083 	b.cc	9602a144 <memmove+0x24>  // b.lo, b.ul, b.last
    9602a138:	8b020023 	add	x3, x1, x2
    9602a13c:	eb00007f 	cmp	x3, x0
    9602a140:	54000042 	b.cs	9602a148 <memmove+0x28>  // b.hs, b.nlast
		return memcpy(dest, src, n);
    9602a144:	17ffff78 	b	96029f24 <memcpy>
	if ((n == 0U) || (dest == src)) {
    9602a148:	b5000082 	cbnz	x2, 9602a158 <memmove+0x38>
		return NULL;
    9602a14c:	aa0003e1 	mov	x1, x0
	} else {
		return rmemcpy(dest, src, n);
	}
}
    9602a150:	aa0103e0 	mov	x0, x1
    9602a154:	d65f03c0 	ret
	char *d = (char *)dest + n;
    9602a158:	8b020001 	add	x1, x0, x2
	if ((((uintptr_t)d | (uintptr_t)s) & lmask) != 0U) {
    9602a15c:	aa030024 	orr	x4, x1, x3
    9602a160:	f240089f 	tst	x4, #0x7
    9602a164:	54000200 	b.eq	9602a1a4 <memmove+0x84>  // b.none
		if (((((uintptr_t)d ^ (uintptr_t)s) & lmask) != 0U) || (n < lsize)) {
    9602a168:	ca030024 	eor	x4, x1, x3
    9602a16c:	f240089f 	tst	x4, #0x7
    9602a170:	54000061 	b.ne	9602a17c <memmove+0x5c>  // b.any
    9602a174:	f1001c5f 	cmp	x2, #0x7
    9602a178:	540003e8 	b.hi	9602a1f4 <memmove+0xd4>  // b.pmore
			len = n; /* copy the rest of the buffer with the byte mover */
    9602a17c:	2a0203e4 	mov	w4, w2
		n -= len;
    9602a180:	cb040042 	sub	x2, x2, x4
    9602a184:	aa2403e6 	mvn	x6, x4
    9602a188:	d2800005 	mov	x5, #0x0                   	// #0
    9602a18c:	d10004a5 	sub	x5, x5, #0x1
		for (; len > 0UL; len--) {
    9602a190:	eb0600bf 	cmp	x5, x6
    9602a194:	54000341 	b.ne	9602a1fc <memmove+0xdc>  // b.any
    9602a198:	cb0403e4 	neg	x4, x4
    9602a19c:	8b040063 	add	x3, x3, x4
    9602a1a0:	8b040021 	add	x1, x1, x4
    9602a1a4:	d3438844 	ubfx	x4, x2, #3, #32
    9602a1a8:	928000e5 	mov	x5, #0xfffffffffffffff8    	// #-8
    9602a1ac:	9b051486 	madd	x6, x4, x5, x5
	for (len = (n / lsize); len > 0UL; len--) {
    9602a1b0:	d2800005 	mov	x5, #0x0                   	// #0
    9602a1b4:	d10020a5 	sub	x5, x5, #0x8
    9602a1b8:	eb0600bf 	cmp	x5, x6
    9602a1bc:	54000261 	b.ne	9602a208 <memmove+0xe8>  // b.any
    9602a1c0:	928000e5 	mov	x5, #0xfffffffffffffff8    	// #-8
    9602a1c4:	92400842 	and	x2, x2, #0x7
    9602a1c8:	aa2203e2 	mvn	x2, x2
    9602a1cc:	9b057c84 	mul	x4, x4, x5
    9602a1d0:	8b040021 	add	x1, x1, x4
    9602a1d4:	8b040063 	add	x3, x3, x4
	for (len = (n & lmask); len > 0UL; len--) {
    9602a1d8:	d2800004 	mov	x4, #0x0                   	// #0
    9602a1dc:	d1000484 	sub	x4, x4, #0x1
    9602a1e0:	eb04005f 	cmp	x2, x4
    9602a1e4:	54fffb40 	b.eq	9602a14c <memmove+0x2c>  // b.none
		*--d = *--s;
    9602a1e8:	38646865 	ldrb	w5, [x3, x4]
    9602a1ec:	38246825 	strb	w5, [x1, x4]
    9602a1f0:	17fffffb 	b	9602a1dc <memmove+0xbc>
			len = ((uintptr_t)d & lmask);
    9602a1f4:	12000824 	and	w4, w1, #0x7
    9602a1f8:	17ffffe2 	b	9602a180 <memmove+0x60>
			*--d = *--s;
    9602a1fc:	38656867 	ldrb	w7, [x3, x5]
    9602a200:	38256827 	strb	w7, [x1, x5]
    9602a204:	17ffffe2 	b	9602a18c <memmove+0x6c>
		*(word *)d = *(const word *)s;
    9602a208:	f8656867 	ldr	x7, [x3, x5]
    9602a20c:	f8256827 	str	x7, [x1, x5]
    9602a210:	17ffffe9 	b	9602a1b4 <memmove+0x94>
		return NULL;
    9602a214:	d2800001 	mov	x1, #0x0                   	// #0
    9602a218:	17ffffce 	b	9602a150 <memmove+0x30>

000000009602a21c <strcat>:
char* strcat(char* dest, const char* src)
{
	char* save = dest;
	char ch;

	while (*dest != '\0') {
    9602a21c:	aa0003e3 	mov	x3, x0
    9602a220:	39400062 	ldrb	w2, [x3]
    9602a224:	91000464 	add	x4, x3, #0x1
    9602a228:	350000e2 	cbnz	w2, 9602a244 <strcat+0x28>
    9602a22c:	d2800002 	mov	x2, #0x0                   	// #0
		++dest;
	}
	do {
		ch = *dest = *src;
    9602a230:	38626824 	ldrb	w4, [x1, x2]
    9602a234:	38226864 	strb	w4, [x3, x2]
    9602a238:	91000442 	add	x2, x2, #0x1
		dest++;
		src++;
	} while (ch != '\0');
    9602a23c:	35ffffa4 	cbnz	w4, 9602a230 <strcat+0x14>

	return save;
}
    9602a240:	d65f03c0 	ret
		++dest;
    9602a244:	aa0403e3 	mov	x3, x4
    9602a248:	17fffff6 	b	9602a220 <strcat+0x4>

000000009602a24c <strcmp>:

int strcmp(const char* s1, const char* s2)
{
	uint8_t arg;

	while (*s1 == *s2) {
    9602a24c:	d2800003 	mov	x3, #0x0                   	// #0
    9602a250:	38636802 	ldrb	w2, [x0, x3]
    9602a254:	38636824 	ldrb	w4, [x1, x3]
    9602a258:	6b04005f 	cmp	w2, w4
    9602a25c:	54000080 	b.eq	9602a26c <strcmp+0x20>  // b.none
			return 0;
		}
		s1++;
	}

	arg = *(unsigned const char *)s1 - *(unsigned const char *)s2;
    9602a260:	4b040040 	sub	w0, w2, w4
	return (int32_t)arg;
    9602a264:	12001c00 	and	w0, w0, #0xff
}
    9602a268:	d65f03c0 	ret
    9602a26c:	91000463 	add	x3, x3, #0x1
		if (*s1 == '\0') {
    9602a270:	35ffff02 	cbnz	w2, 9602a250 <strcmp+0x4>
			return 0;
    9602a274:	52800000 	mov	w0, #0x0                   	// #0
    9602a278:	17fffffc 	b	9602a268 <strcmp+0x1c>

000000009602a27c <strncmp>:

int strncmp(const char* s1, const char* s2, size_t n)
{
	uint8_t arg;

	if (n == 0U) {
    9602a27c:	b40001a2 	cbz	x2, 9602a2b0 <strncmp+0x34>
    9602a280:	d2800004 	mov	x4, #0x0                   	// #0
		return 0;
	}

	do {
		if (*s1 != *s2) {
    9602a284:	38646803 	ldrb	w3, [x0, x4]
    9602a288:	38646825 	ldrb	w5, [x1, x4]
    9602a28c:	6b05007f 	cmp	w3, w5
    9602a290:	54000080 	b.eq	9602a2a0 <strncmp+0x24>  // b.none
			arg = *(unsigned const char *)s1 - *(unsigned const char *)s2;
    9602a294:	4b050060 	sub	w0, w3, w5
			return (int32_t)arg;
    9602a298:	12001c00 	and	w0, w0, #0xff
		s1++;
		n--;
	} while (n != 0UL);

	return 0;
}
    9602a29c:	d65f03c0 	ret
		if (*s1 == '\0') {
    9602a2a0:	34000083 	cbz	w3, 9602a2b0 <strncmp+0x34>
    9602a2a4:	91000484 	add	x4, x4, #0x1
	} while (n != 0UL);
    9602a2a8:	eb04005f 	cmp	x2, x4
    9602a2ac:	54fffec1 	b.ne	9602a284 <strncmp+0x8>  // b.any
		return 0;
    9602a2b0:	52800000 	mov	w0, #0x0                   	// #0
    9602a2b4:	17fffffa 	b	9602a29c <strncmp+0x20>

000000009602a2b8 <strcpy>:
}

char* strcpy(char* dest, const char* src)
{
	char* save = dest;
	while ((*dest = *src) != '\0') {
    9602a2b8:	d2800002 	mov	x2, #0x0                   	// #0
    9602a2bc:	38626823 	ldrb	w3, [x1, x2]
    9602a2c0:	38226803 	strb	w3, [x0, x2]
    9602a2c4:	91000442 	add	x2, x2, #0x1
    9602a2c8:	35ffffa3 	cbnz	w3, 9602a2bc <strcpy+0x4>
		++src;
		++dest;
	}

	return save;
}
    9602a2cc:	d65f03c0 	ret

000000009602a2d0 <strncpy>:

char* strncpy(char* dest, const char* src, size_t n)
{
	if (n != 0U) {
    9602a2d0:	b4000102 	cbz	x2, 9602a2f0 <strncpy+0x20>
		size_t offset = 0UL;
    9602a2d4:	d2800003 	mov	x3, #0x0                   	// #0
		char ch;

		do {
			ch = (char)(src[offset]);
    9602a2d8:	38636824 	ldrb	w4, [x1, x3]
			dest[offset] = ch;
    9602a2dc:	38236804 	strb	w4, [x0, x3]
			offset++;
    9602a2e0:	91000463 	add	x3, x3, #0x1
			if (ch == '\0') {
    9602a2e4:	350000e4 	cbnz	w4, 9602a300 <strncpy+0x30>
				/* NUL pad remaining n-offset bytes */
				for (; offset < n; offset++) {
    9602a2e8:	eb02007f 	cmp	x3, x2
    9602a2ec:	54000043 	b.cc	9602a2f4 <strncpy+0x24>  // b.lo, b.ul, b.last
			}
		} while (offset < n);
	}

	return dest;
}
    9602a2f0:	d65f03c0 	ret
					dest[offset] = '\0';
    9602a2f4:	3823681f 	strb	wzr, [x0, x3]
				for (; offset < n; offset++) {
    9602a2f8:	91000463 	add	x3, x3, #0x1
    9602a2fc:	17fffffb 	b	9602a2e8 <strncpy+0x18>
		} while (offset < n);
    9602a300:	eb03005f 	cmp	x2, x3
    9602a304:	54fffea1 	b.ne	9602a2d8 <strncpy+0x8>  // b.any
    9602a308:	17fffffa 	b	9602a2f0 <strncpy+0x20>

000000009602a30c <strlen>:

size_t strlen(const char* str)
{
	const char* s = str;
    9602a30c:	aa0003e1 	mov	x1, x0
	int32_t strdiff;
	while (*s != '\0') {
    9602a310:	39400022 	ldrb	w2, [x1]
    9602a314:	35000082 	cbnz	w2, 9602a324 <strlen+0x18>
		s++;
	}

	strdiff = s - str;
    9602a318:	cb000020 	sub	x0, x1, x0
	return (size_t)(strdiff);
}
    9602a31c:	93407c00 	sxtw	x0, w0
    9602a320:	d65f03c0 	ret
		s++;
    9602a324:	91000421 	add	x1, x1, #0x1
    9602a328:	17fffffa 	b	9602a310 <strlen+0x4>

000000009602a32c <strlcpy>:

size_t strlcpy(char *dest, char const *src, size_t n)
{
	size_t i = 0;

	if (n == 0UL) {
    9602a32c:	b5000222 	cbnz	x2, 9602a370 <strlcpy+0x44>
		return strlen(src);
    9602a330:	aa0103e0 	mov	x0, x1
    9602a334:	17fffff6 	b	9602a30c <strlen>
	}

	for (i = 0; ((i < (n-1U)) && (*(src+i) != '\0')); i++) {
		*(dest+i) = *(src+i);
    9602a338:	38236804 	strb	w4, [x0, x3]
	for (i = 0; ((i < (n-1U)) && (*(src+i) != '\0')); i++) {
    9602a33c:	91000463 	add	x3, x3, #0x1
    9602a340:	8b030025 	add	x5, x1, x3
    9602a344:	8b030006 	add	x6, x0, x3
    9602a348:	eb03005f 	cmp	x2, x3
    9602a34c:	54000069 	b.ls	9602a358 <strlcpy+0x2c>  // b.plast
    9602a350:	38636824 	ldrb	w4, [x1, x3]
    9602a354:	35ffff24 	cbnz	w4, 9602a338 <strlcpy+0xc>
	}

	dest[i] = '\0';
    9602a358:	390000df 	strb	wzr, [x6]

	return i + strlen(src+i);
    9602a35c:	aa0503e0 	mov	x0, x5
    9602a360:	97ffffeb 	bl	9602a30c <strlen>
}
    9602a364:	8b030000 	add	x0, x0, x3
    9602a368:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602a36c:	d65f03c0 	ret
{
    9602a370:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	for (i = 0; ((i < (n-1U)) && (*(src+i) != '\0')); i++) {
    9602a374:	d2800003 	mov	x3, #0x0                   	// #0
    9602a378:	d1000442 	sub	x2, x2, #0x1
{
    9602a37c:	910003fd 	mov	x29, sp
    9602a380:	17fffff0 	b	9602a340 <strlcpy+0x14>

000000009602a384 <strchr>:

char *strchr(const char *s, int c)
{
	if (s == NULL) {
    9602a384:	b40000a0 	cbz	x0, 9602a398 <strchr+0x14>
		return NULL;
	}

	for (; *s != (char)c; ++s) {
    9602a388:	12001c21 	and	w1, w1, #0xff
    9602a38c:	39400002 	ldrb	w2, [x0]
    9602a390:	6b01005f 	cmp	w2, w1
    9602a394:	54000041 	b.ne	9602a39c <strchr+0x18>  // b.any
			return NULL;
		}
	}

	return (char *)s;
}
    9602a398:	d65f03c0 	ret
		if (*s == '\0') {
    9602a39c:	34000062 	cbz	w2, 9602a3a8 <strchr+0x24>
	for (; *s != (char)c; ++s) {
    9602a3a0:	91000400 	add	x0, x0, #0x1
    9602a3a4:	17fffffa 	b	9602a38c <strchr+0x8>
		return NULL;
    9602a3a8:	d2800000 	mov	x0, #0x0                   	// #0
    9602a3ac:	17fffffb 	b	9602a398 <strchr+0x14>

000000009602a3b0 <strstr>:
char *strstr(const char *str, const char *sub)
{
	const char *a, *b;

	b = (const char *)sub;
	if (*b == '\0') {
    9602a3b0:	39400023 	ldrb	w3, [x1]
    9602a3b4:	35000143 	cbnz	w3, 9602a3dc <strstr+0x2c>

		b = (const char *)sub;
	}

	return (char *) 0;
}
    9602a3b8:	d65f03c0 	ret
		if (*str != *b) {
    9602a3bc:	6b02007f 	cmp	w3, w2
    9602a3c0:	540000c1 	b.ne	9602a3d8 <strstr+0x28>  // b.any
    9602a3c4:	d2800002 	mov	x2, #0x0                   	// #0
		while (*a++ == *b++) {
    9602a3c8:	38626805 	ldrb	w5, [x0, x2]
    9602a3cc:	38626824 	ldrb	w4, [x1, x2]
    9602a3d0:	6b0400bf 	cmp	w5, w4
    9602a3d4:	540000c0 	b.eq	9602a3ec <strstr+0x3c>  // b.none
	for (; *str != '\0'; str++) {
    9602a3d8:	91000400 	add	x0, x0, #0x1
    9602a3dc:	39400002 	ldrb	w2, [x0]
    9602a3e0:	35fffee2 	cbnz	w2, 9602a3bc <strstr+0xc>
	return (char *) 0;
    9602a3e4:	d2800000 	mov	x0, #0x0                   	// #0
    9602a3e8:	17fffff4 	b	9602a3b8 <strstr+0x8>
    9602a3ec:	91000442 	add	x2, x2, #0x1
			if (*b == '\0') {
    9602a3f0:	38626824 	ldrb	w4, [x1, x2]
    9602a3f4:	35fffea4 	cbnz	w4, 9602a3c8 <strstr+0x18>
    9602a3f8:	17fffff0 	b	9602a3b8 <strstr+0x8>

000000009602a3fc <strspn>:

	return NULL;
}

size_t strspn(char const *s1, char const *s2)
{
    9602a3fc:	aa0003e5 	mov	x5, x0
	const char *p;
	const char *a;
	size_t count = 0;
    9602a400:	d2800000 	mov	x0, #0x0                   	// #0

	for (p = s1; *p != '\0'; ++p) {
    9602a404:	386068a3 	ldrb	w3, [x5, x0]
    9602a408:	34000103 	cbz	w3, 9602a428 <strspn+0x2c>
		for (a = s2; *a != '\0'; ++a) {
    9602a40c:	aa0103e2 	mov	x2, x1
    9602a410:	14000004 	b	9602a420 <strspn+0x24>
			if (*p == *a) {
    9602a414:	6b03009f 	cmp	w4, w3
    9602a418:	540000a0 	b.eq	9602a42c <strspn+0x30>  // b.none
		for (a = s2; *a != '\0'; ++a) {
    9602a41c:	91000442 	add	x2, x2, #0x1
    9602a420:	39400044 	ldrb	w4, [x2]
    9602a424:	35ffff84 	cbnz	w4, 9602a414 <strspn+0x18>
		}
		++count;
	}

	return count;
}
    9602a428:	d65f03c0 	ret
		++count;
    9602a42c:	91000400 	add	x0, x0, #0x1
    9602a430:	17fffff5 	b	9602a404 <strspn+0x8>

000000009602a434 <strdup>:
	___strtok = send;
	return sbegin;
}

char *strdup(const char *str)
{
    9602a434:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602a438:	910003fd 	mov	x29, sp
    9602a43c:	a90153f3 	stp	x19, x20, [sp, #16]
    9602a440:	f90013f5 	str	x21, [sp, #32]
    9602a444:	aa0003f5 	mov	x21, x0
	size_t len;
	char *copy = NULL;

	len = strlen(str) + 1;
    9602a448:	97ffffb1 	bl	9602a30c <strlen>
    9602a44c:	91000414 	add	x20, x0, #0x1
	copy = tegrabl_malloc(len);
    9602a450:	aa1403e0 	mov	x0, x20
    9602a454:	97fff189 	bl	96026a78 <tegrabl_malloc>
    9602a458:	aa0003f3 	mov	x19, x0
	if (copy == NULL) {
    9602a45c:	b4000080 	cbz	x0, 9602a46c <strdup+0x38>
		return NULL;
	}
	(void)memcpy(copy, str, len);
    9602a460:	aa1403e2 	mov	x2, x20
    9602a464:	aa1503e1 	mov	x1, x21
    9602a468:	97fffeaf 	bl	96029f24 <memcpy>

	return copy;
}
    9602a46c:	aa1303e0 	mov	x0, x19
    9602a470:	f94013f5 	ldr	x21, [sp, #32]
    9602a474:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602a478:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602a47c:	d65f03c0 	ret

000000009602a480 <tegrabl_vsnprintf>:

	return (int32_t)total;
}

int tegrabl_vsnprintf(char *buf, size_t size, const char *format, va_list ap)
{
    9602a480:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    9602a484:	910003fd 	mov	x29, sp
    9602a488:	a90153f3 	stp	x19, x20, [sp, #16]
    9602a48c:	aa0103f4 	mov	x20, x1
    9602a490:	a9046bf9 	stp	x25, x26, [sp, #64]
	const char *f = format;
	char *out = buf;
	size_t remaining = size - 1U;
    9602a494:	d1000439 	sub	x25, x1, #0x1
{
    9602a498:	a90573fb 	stp	x27, x28, [sp, #80]
    9602a49c:	aa0203fa 	mov	x26, x2
    9602a4a0:	a9406c61 	ldp	x1, x27, [x3]
    9602a4a4:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602a4a8:	b9401863 	ldr	w3, [x3, #24]
		str[len] = digits[x % radix];
    9602a4ac:	f00000d5 	adrp	x21, 96045000 <__func__.3796+0x7>
{
    9602a4b0:	a90363f7 	stp	x23, x24, [sp, #48]
		str[len] = digits[x % radix];
    9602a4b4:	91057eb5 	add	x21, x21, #0x15f
{
    9602a4b8:	aa0003f8 	mov	x24, x0
	char padchar = ' ';
    9602a4bc:	52800416 	mov	w22, #0x20                  	// #32
	char ch;
	int32_t temp_arg;
	const char *temp_ptr;
	char temp_char;

	while (remaining > 0U) {
    9602a4c0:	b4000799 	cbz	x25, 9602a5b0 <tegrabl_vsnprintf+0x130>
		wrote = 0;
		cur = *f;
    9602a4c4:	aa1a03fc 	mov	x28, x26
    9602a4c8:	38401780 	ldrb	w0, [x28], #1
		f++;

		/* end of format */
		if (cur == '\0') {
    9602a4cc:	34000720 	cbz	w0, 9602a5b0 <tegrabl_vsnprintf+0x130>
			break;
		}
		/* formatted argument */
		if (cur != '%') {
    9602a4d0:	7100941f 	cmp	w0, #0x25
    9602a4d4:	540000e0 	b.eq	9602a4f0 <tegrabl_vsnprintf+0x70>  // b.none
		f++;
    9602a4d8:	aa1c03fa 	mov	x26, x28
			/* print string literals */
			*out = cur;
    9602a4dc:	39000300 	strb	w0, [x24]
			break;
		}

		/* put this after the previous if statement (wrote == 0) */
		if (wrote == -2) {
			wrote = 0;
    9602a4e0:	aa0103f3 	mov	x19, x1
    9602a4e4:	2a0303f7 	mov	w23, w3
    9602a4e8:	52800021 	mov	w1, #0x1                   	// #1
    9602a4ec:	140000f4 	b	9602a8bc <tegrabl_vsnprintf+0x43c>
			if (*arg == '#') {
    9602a4f0:	39400740 	ldrb	w0, [x26, #1]
    9602a4f4:	71008c1f 	cmp	w0, #0x23
    9602a4f8:	54000161 	b.ne	9602a524 <tegrabl_vsnprintf+0xa4>  // b.any
				arg++;
    9602a4fc:	91000b45 	add	x5, x26, #0x2
				alternate_form = 1;
    9602a500:	52800027 	mov	w7, #0x1                   	// #1
			if (*arg == '0') {
    9602a504:	394000a0 	ldrb	w0, [x5]
    9602a508:	7100c01f 	cmp	w0, #0x30
    9602a50c:	54000061 	b.ne	9602a518 <tegrabl_vsnprintf+0x98>  // b.any
    9602a510:	910004a5 	add	x5, x5, #0x1
				padchar = '0';
    9602a514:	2a0003f6 	mov	w22, w0
    9602a518:	d2800004 	mov	x4, #0x0                   	// #0
				pad *= 10UL;
    9602a51c:	52800149 	mov	w9, #0xa                   	// #10
    9602a520:	14000006 	b	9602a538 <tegrabl_vsnprintf+0xb8>
			arg = f;
    9602a524:	aa1c03e5 	mov	x5, x28
			alternate_form = 0;
    9602a528:	52800007 	mov	w7, #0x0                   	// #0
    9602a52c:	17fffff6 	b	9602a504 <tegrabl_vsnprintf+0x84>
				pad += (uint32_t)temp_arg;
    9602a530:	1b091884 	madd	w4, w4, w9, w6
    9602a534:	aa0003e5 	mov	x5, x0
			while ((*arg >= '0') && (*arg <= '9')) {
    9602a538:	aa0503e0 	mov	x0, x5
    9602a53c:	38401402 	ldrb	w2, [x0], #1
    9602a540:	5100c046 	sub	w6, w2, #0x30
    9602a544:	12001cc8 	and	w8, w6, #0xff
    9602a548:	7100251f 	cmp	w8, #0x9
    9602a54c:	54ffff29 	b.ls	9602a530 <tegrabl_vsnprintf+0xb0>  // b.plast
			if (*arg == 'p') {
    9602a550:	7101c05f 	cmp	w2, #0x70
    9602a554:	54000420 	b.eq	9602a5d8 <tegrabl_vsnprintf+0x158>  // b.none
			longint = 0;
    9602a558:	7101e85f 	cmp	w2, #0x7a
    9602a55c:	52800046 	mov	w6, #0x2                   	// #2
    9602a560:	9a850005 	csel	x5, x0, x5, eq  // eq = none
    9602a564:	1a9f00c6 	csel	w6, w6, wzr, eq  // eq = none
			if (*arg == 'l') {
    9602a568:	394000a0 	ldrb	w0, [x5]
    9602a56c:	7101b01f 	cmp	w0, #0x6c
    9602a570:	540000c1 	b.ne	9602a588 <tegrabl_vsnprintf+0x108>  // b.any
				if (*(arg) == 'l') {
    9602a574:	394004a0 	ldrb	w0, [x5, #1]
    9602a578:	7101b01f 	cmp	w0, #0x6c
    9602a57c:	54000340 	b.eq	9602a5e4 <tegrabl_vsnprintf+0x164>  // b.none
    9602a580:	910004a5 	add	x5, x5, #0x1
				longint = 1;
    9602a584:	52800026 	mov	w6, #0x1                   	// #1
			switch (*(arg++)) {
    9602a588:	910004ba 	add	x26, x5, #0x1
    9602a58c:	394000a5 	ldrb	w5, [x5]
    9602a590:	7101a4bf 	cmp	w5, #0x69
    9602a594:	54000440 	b.eq	9602a61c <tegrabl_vsnprintf+0x19c>  // b.none
    9602a598:	54000368 	b.hi	9602a604 <tegrabl_vsnprintf+0x184>  // b.pmore
    9602a59c:	710160bf 	cmp	w5, #0x58
    9602a5a0:	540003e0 	b.eq	9602a61c <tegrabl_vsnprintf+0x19c>  // b.none
    9602a5a4:	54000268 	b.hi	9602a5f0 <tegrabl_vsnprintf+0x170>  // b.pmore
    9602a5a8:	710094bf 	cmp	w5, #0x25
    9602a5ac:	54001c80 	b.eq	9602a93c <tegrabl_vsnprintf+0x4bc>  // b.none
		}
		remaining -= (uint32_t)wrote;
		out += wrote;
	}

	*out = '\0';
    9602a5b0:	3900031f 	strb	wzr, [x24]
	return ((int32_t)size - 1) - (int32_t)remaining;
    9602a5b4:	51000680 	sub	w0, w20, #0x1
    9602a5b8:	4b190000 	sub	w0, w0, w25
}
    9602a5bc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602a5c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602a5c4:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602a5c8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9602a5cc:	a94573fb 	ldp	x27, x28, [sp, #80]
    9602a5d0:	a8c77bfd 	ldp	x29, x30, [sp], #112
    9602a5d4:	d65f03c0 	ret
				alternate_form = 1;
    9602a5d8:	52800027 	mov	w7, #0x1                   	// #1
				longint = 1;
    9602a5dc:	2a0703e6 	mov	w6, w7
    9602a5e0:	17ffffe2 	b	9602a568 <tegrabl_vsnprintf+0xe8>
					arg++;
    9602a5e4:	910008a5 	add	x5, x5, #0x2
					longint = 2;
    9602a5e8:	52800046 	mov	w6, #0x2                   	// #2
    9602a5ec:	17ffffe7 	b	9602a588 <tegrabl_vsnprintf+0x108>
			switch (*(arg++)) {
    9602a5f0:	71018cbf 	cmp	w5, #0x63
    9602a5f4:	54001800 	b.eq	9602a8f4 <tegrabl_vsnprintf+0x474>  // b.none
    9602a5f8:	710190bf 	cmp	w5, #0x64
    9602a5fc:	54fffda1 	b.ne	9602a5b0 <tegrabl_vsnprintf+0x130>  // b.any
    9602a600:	14000007 	b	9602a61c <tegrabl_vsnprintf+0x19c>
    9602a604:	7101ccbf 	cmp	w5, #0x73
    9602a608:	54001360 	b.eq	9602a874 <tegrabl_vsnprintf+0x3f4>  // b.none
    9602a60c:	54000248 	b.hi	9602a654 <tegrabl_vsnprintf+0x1d4>  // b.pmore
    9602a610:	5101bca0 	sub	w0, w5, #0x6f
    9602a614:	7100041f 	cmp	w0, #0x1
    9602a618:	54fffcc8 	b.hi	9602a5b0 <tegrabl_vsnprintf+0x130>  // b.pmore
				if ((temp_char == 'i') || (temp_char == 'd')) {
    9602a61c:	7101a4bf 	cmp	w5, #0x69
    9602a620:	52800c80 	mov	w0, #0x64                  	// #100
    9602a624:	7a4010a4 	ccmp	w5, w0, #0x4, ne  // ne = any
    9602a628:	540001e0 	b.eq	9602a664 <tegrabl_vsnprintf+0x1e4>  // b.none
				} else if (temp_char == 'u') {
    9602a62c:	7101d4bf 	cmp	w5, #0x75
    9602a630:	54001aa0 	b.eq	9602a984 <tegrabl_vsnprintf+0x504>  // b.none
					base = 8;
    9602a634:	7101bcbf 	cmp	w5, #0x6f
    9602a638:	52800202 	mov	w2, #0x10                  	// #16
    9602a63c:	52800100 	mov	w0, #0x8                   	// #8
    9602a640:	1a801040 	csel	w0, w2, w0, ne  // ne = any
				if (longint == 2) {
    9602a644:	710008df 	cmp	w6, #0x2
    9602a648:	540017e0 	b.eq	9602a944 <tegrabl_vsnprintf+0x4c4>  // b.none
    9602a64c:	52800002 	mov	w2, #0x0                   	// #0
    9602a650:	14000049 	b	9602a774 <tegrabl_vsnprintf+0x2f4>
			switch (*(arg++)) {
    9602a654:	7101d4bf 	cmp	w5, #0x75
    9602a658:	54fffe20 	b.eq	9602a61c <tegrabl_vsnprintf+0x19c>  // b.none
    9602a65c:	7101e0bf 	cmp	w5, #0x78
    9602a660:	17ffffe7 	b	9602a5fc <tegrabl_vsnprintf+0x17c>
				if (longint == 2) {
    9602a664:	710008df 	cmp	w6, #0x2
    9602a668:	54000821 	b.ne	9602a76c <tegrabl_vsnprintf+0x2ec>  // b.any
					long long int tmp = va_arg(ap, long long int);
    9602a66c:	37f80143 	tbnz	w3, #31, 9602a694 <tegrabl_vsnprintf+0x214>
    9602a670:	91003c33 	add	x19, x1, #0xf
    9602a674:	2a0303f7 	mov	w23, w3
    9602a678:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a67c:	f9400021 	ldr	x1, [x1]
					if ((sign != 0) && (tmp < 0)) {
    9602a680:	b6f801c1 	tbz	x1, #63, 9602a6b8 <tegrabl_vsnprintf+0x238>
						tmp = -tmp;
    9602a684:	cb0103e1 	neg	x1, x1
					base = 10;
    9602a688:	52800140 	mov	w0, #0xa                   	// #10
						sign = -1;
    9602a68c:	12800002 	mov	w2, #0xffffffff            	// #-1
    9602a690:	1400000c 	b	9602a6c0 <tegrabl_vsnprintf+0x240>
					long long int tmp = va_arg(ap, long long int);
    9602a694:	11002077 	add	w23, w3, #0x8
    9602a698:	710002ff 	cmp	w23, #0x0
    9602a69c:	5400008d 	b.le	9602a6ac <tegrabl_vsnprintf+0x22c>
    9602a6a0:	91003c33 	add	x19, x1, #0xf
    9602a6a4:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a6a8:	17fffff5 	b	9602a67c <tegrabl_vsnprintf+0x1fc>
    9602a6ac:	aa0103f3 	mov	x19, x1
    9602a6b0:	8b23c361 	add	x1, x27, w3, sxtw
    9602a6b4:	17fffff2 	b	9602a67c <tegrabl_vsnprintf+0x1fc>
					base = 10;
    9602a6b8:	52800140 	mov	w0, #0xa                   	// #10
					sign = 1;
    9602a6bc:	52800022 	mov	w2, #0x1                   	// #1
	unsigned long long x = n;
    9602a6c0:	aa0103e8 	mov	x8, x1
		x /= radix;
    9602a6c4:	2a0003e6 	mov	w6, w0
	size_t len = 0;
    9602a6c8:	d2800005 	mov	x5, #0x0                   	// #0
		x /= radix;
    9602a6cc:	9ac60908 	udiv	x8, x8, x6
		len++;
    9602a6d0:	910004a3 	add	x3, x5, #0x1
	} while (x > 0ULL);
    9602a6d4:	b5000a48 	cbnz	x8, 9602a81c <tegrabl_vsnprintf+0x39c>
	if (sign < 0) {
    9602a6d8:	3100045f 	cmn	w2, #0x1
    9602a6dc:	54000041 	b.ne	9602a6e4 <tegrabl_vsnprintf+0x264>  // b.any
		len++;
    9602a6e0:	910008a3 	add	x3, x5, #0x2
	if (alternate_form != 0) {
    9602a6e4:	34000087 	cbz	w7, 9602a6f4 <tegrabl_vsnprintf+0x274>
		if (radix == 8U) {
    9602a6e8:	7100201f 	cmp	w0, #0x8
    9602a6ec:	540009c1 	b.ne	9602a824 <tegrabl_vsnprintf+0x3a4>  // b.any
			len++;
    9602a6f0:	91000463 	add	x3, x3, #0x1
	if (len > pad) {
    9602a6f4:	eb03009f 	cmp	x4, x3
    9602a6f8:	540014a3 	b.cc	9602a98c <tegrabl_vsnprintf+0x50c>  // b.lo, b.ul, b.last
		pad -= len;
    9602a6fc:	cb030088 	sub	x8, x4, x3
	if (total > size) {
    9602a700:	eb19009f 	cmp	x4, x25
    9602a704:	54fff568 	b.hi	9602a5b0 <tegrabl_vsnprintf+0x130>  // b.pmore
    9602a708:	d2800005 	mov	x5, #0x0                   	// #0
	while (pad > 0U) {
    9602a70c:	eb0800bf 	cmp	x5, x8
    9602a710:	54000921 	b.ne	9602a834 <tegrabl_vsnprintf+0x3b4>  // b.any
    9602a714:	8b050305 	add	x5, x24, x5
	if (sign < 0) {
    9602a718:	3100045f 	cmn	w2, #0x1
    9602a71c:	54000081 	b.ne	9602a72c <tegrabl_vsnprintf+0x2ac>  // b.any
		len--;
    9602a720:	d1000463 	sub	x3, x3, #0x1
		*str = '-';
    9602a724:	528005a2 	mov	w2, #0x2d                  	// #45
    9602a728:	380014a2 	strb	w2, [x5], #1
	if (alternate_form != 0) {
    9602a72c:	340000c7 	cbz	w7, 9602a744 <tegrabl_vsnprintf+0x2c4>
		if (radix == 8U) {
    9602a730:	7100201f 	cmp	w0, #0x8
    9602a734:	54000861 	b.ne	9602a840 <tegrabl_vsnprintf+0x3c0>  // b.any
			len--;
    9602a738:	d1000463 	sub	x3, x3, #0x1
			*str = '0';
    9602a73c:	52800600 	mov	w0, #0x30                  	// #48
    9602a740:	380014a0 	strb	w0, [x5], #1
	while (len > 0ULL) {
    9602a744:	b50008a3 	cbnz	x3, 9602a858 <tegrabl_vsnprintf+0x3d8>
	return (int32_t)total;
    9602a748:	2a0403e1 	mov	w1, w4
			if (wrote >= 0) {
    9602a74c:	36f80b81 	tbz	w1, #31, 9602a8bc <tegrabl_vsnprintf+0x43c>
		if (wrote == -1) {
    9602a750:	3100043f 	cmn	w1, #0x1
    9602a754:	54fff2e0 	b.eq	9602a5b0 <tegrabl_vsnprintf+0x130>  // b.none
    9602a758:	aa1c03fa 	mov	x26, x28
		if (wrote == -2) {
    9602a75c:	3100083f 	cmn	w1, #0x2
    9602a760:	54000ae1 	b.ne	9602a8bc <tegrabl_vsnprintf+0x43c>  // b.any
			wrote = 0;
    9602a764:	52800001 	mov	w1, #0x0                   	// #0
    9602a768:	14000055 	b	9602a8bc <tegrabl_vsnprintf+0x43c>
					base = 10;
    9602a76c:	52800140 	mov	w0, #0xa                   	// #10
					sign = 1;
    9602a770:	52800022 	mov	w2, #0x1                   	// #1
				} else if (longint == 1) {
    9602a774:	710004df 	cmp	w6, #0x1
    9602a778:	12000045 	and	w5, w2, #0x1
    9602a77c:	54000281 	b.ne	9602a7cc <tegrabl_vsnprintf+0x34c>  // b.any
					long int tmp = va_arg(ap, long int);
    9602a780:	37f80143 	tbnz	w3, #31, 9602a7a8 <tegrabl_vsnprintf+0x328>
    9602a784:	91003c33 	add	x19, x1, #0xf
    9602a788:	2a0303f7 	mov	w23, w3
    9602a78c:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a790:	f9400021 	ldr	x1, [x1]
					if ((sign != 0) && (tmp < 0)) {
    9602a794:	d37ffc23 	lsr	x3, x1, #63
    9602a798:	6a0300bf 	tst	w5, w3
    9602a79c:	54fff920 	b.eq	9602a6c0 <tegrabl_vsnprintf+0x240>  // b.none
						tmp = -tmp;
    9602a7a0:	cb0103e1 	neg	x1, x1
    9602a7a4:	17ffffba 	b	9602a68c <tegrabl_vsnprintf+0x20c>
					long int tmp = va_arg(ap, long int);
    9602a7a8:	11002077 	add	w23, w3, #0x8
    9602a7ac:	710002ff 	cmp	w23, #0x0
    9602a7b0:	5400008d 	b.le	9602a7c0 <tegrabl_vsnprintf+0x340>
    9602a7b4:	91003c33 	add	x19, x1, #0xf
    9602a7b8:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a7bc:	17fffff5 	b	9602a790 <tegrabl_vsnprintf+0x310>
    9602a7c0:	aa0103f3 	mov	x19, x1
    9602a7c4:	8b23c361 	add	x1, x27, w3, sxtw
    9602a7c8:	17fffff2 	b	9602a790 <tegrabl_vsnprintf+0x310>
					int tmp = va_arg(ap, int);
    9602a7cc:	37f80163 	tbnz	w3, #31, 9602a7f8 <tegrabl_vsnprintf+0x378>
    9602a7d0:	91002c33 	add	x19, x1, #0xb
    9602a7d4:	2a0303f7 	mov	w23, w3
    9602a7d8:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a7dc:	b9400021 	ldr	w1, [x1]
					if ((sign != 0) && (tmp < 0)) {
    9602a7e0:	6a417cbf 	tst	w5, w1, lsr #31
    9602a7e4:	54000060 	b.eq	9602a7f0 <tegrabl_vsnprintf+0x370>  // b.none
						tmp = -tmp;
    9602a7e8:	4b0103e1 	neg	w1, w1
						sign = -1;
    9602a7ec:	12800002 	mov	w2, #0xffffffff            	// #-1
					val = (unsigned int)tmp;
    9602a7f0:	2a0103e1 	mov	w1, w1
    9602a7f4:	17ffffb3 	b	9602a6c0 <tegrabl_vsnprintf+0x240>
					int tmp = va_arg(ap, int);
    9602a7f8:	11002077 	add	w23, w3, #0x8
    9602a7fc:	710002ff 	cmp	w23, #0x0
    9602a800:	5400008d 	b.le	9602a810 <tegrabl_vsnprintf+0x390>
    9602a804:	91002c33 	add	x19, x1, #0xb
    9602a808:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a80c:	17fffff4 	b	9602a7dc <tegrabl_vsnprintf+0x35c>
    9602a810:	aa0103f3 	mov	x19, x1
    9602a814:	8b23c361 	add	x1, x27, w3, sxtw
    9602a818:	17fffff1 	b	9602a7dc <tegrabl_vsnprintf+0x35c>
		len++;
    9602a81c:	aa0303e5 	mov	x5, x3
    9602a820:	17ffffab 	b	9602a6cc <tegrabl_vsnprintf+0x24c>
		} else if (radix == 16U) {
    9602a824:	7100401f 	cmp	w0, #0x10
    9602a828:	54fff661 	b.ne	9602a6f4 <tegrabl_vsnprintf+0x274>  // b.any
			len += 2UL;
    9602a82c:	91000863 	add	x3, x3, #0x2
    9602a830:	17ffffb1 	b	9602a6f4 <tegrabl_vsnprintf+0x274>
		*str = padchar;
    9602a834:	38256b16 	strb	w22, [x24, x5]
    9602a838:	910004a5 	add	x5, x5, #0x1
    9602a83c:	17ffffb4 	b	9602a70c <tegrabl_vsnprintf+0x28c>
		} else if (radix == 16U) {
    9602a840:	7100401f 	cmp	w0, #0x10
    9602a844:	54fff801 	b.ne	9602a744 <tegrabl_vsnprintf+0x2c4>  // b.any
			*str = '0';
    9602a848:	528f0600 	mov	w0, #0x7830                	// #30768
			len -= 2U;
    9602a84c:	d1000863 	sub	x3, x3, #0x2
			*str = '0';
    9602a850:	780024a0 	strh	w0, [x5], #2
    9602a854:	17ffffbc 	b	9602a744 <tegrabl_vsnprintf+0x2c4>
		str[len] = digits[x % radix];
    9602a858:	9ac60820 	udiv	x0, x1, x6
		len--;
    9602a85c:	d1000463 	sub	x3, x3, #0x1
		str[len] = digits[x % radix];
    9602a860:	9b068401 	msub	x1, x0, x6, x1
    9602a864:	38616aa1 	ldrb	w1, [x21, x1]
    9602a868:	382368a1 	strb	w1, [x5, x3]
		x /= radix;
    9602a86c:	aa0003e1 	mov	x1, x0
    9602a870:	17ffffb5 	b	9602a744 <tegrabl_vsnprintf+0x2c4>
				ptr = va_arg(ap, char *);
    9602a874:	37f802e3 	tbnz	w3, #31, 9602a8d0 <tegrabl_vsnprintf+0x450>
    9602a878:	91003c33 	add	x19, x1, #0xf
    9602a87c:	2a0303f7 	mov	w23, w3
    9602a880:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a884:	f9400021 	ldr	x1, [x1]
				len = strlen(ptr);
    9602a888:	f90037a1 	str	x1, [x29, #104]
    9602a88c:	aa0103e0 	mov	x0, x1
    9602a890:	97fffe9f 	bl	9602a30c <strlen>
    9602a894:	aa0003e2 	mov	x2, x0
				if (len > remaining) {
    9602a898:	eb00033f 	cmp	x25, x0
    9602a89c:	f94037a1 	ldr	x1, [x29, #104]
    9602a8a0:	54ffe883 	b.cc	9602a5b0 <tegrabl_vsnprintf+0x130>  // b.lo, b.ul, b.last
    9602a8a4:	f90037a2 	str	x2, [x29, #104]
					strcpy(out, ptr);
    9602a8a8:	aa1803e0 	mov	x0, x24
    9602a8ac:	97fffe83 	bl	9602a2b8 <strcpy>
					wrote = (int32_t)len;
    9602a8b0:	f94037a2 	ldr	x2, [x29, #104]
    9602a8b4:	2a0203e1 	mov	w1, w2
					if (wrote == 0) {
    9602a8b8:	35fff4a2 	cbnz	w2, 9602a74c <tegrabl_vsnprintf+0x2cc>
		remaining -= (uint32_t)wrote;
    9602a8bc:	cb214339 	sub	x25, x25, w1, uxtw
		out += wrote;
    9602a8c0:	8b21c318 	add	x24, x24, w1, sxtw
    9602a8c4:	2a1703e3 	mov	w3, w23
    9602a8c8:	aa1303e1 	mov	x1, x19
    9602a8cc:	17fffefd 	b	9602a4c0 <tegrabl_vsnprintf+0x40>
				ptr = va_arg(ap, char *);
    9602a8d0:	11002077 	add	w23, w3, #0x8
    9602a8d4:	710002ff 	cmp	w23, #0x0
    9602a8d8:	5400008d 	b.le	9602a8e8 <tegrabl_vsnprintf+0x468>
    9602a8dc:	91003c33 	add	x19, x1, #0xf
    9602a8e0:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a8e4:	17ffffe8 	b	9602a884 <tegrabl_vsnprintf+0x404>
    9602a8e8:	aa0103f3 	mov	x19, x1
    9602a8ec:	8b23c361 	add	x1, x27, w3, sxtw
    9602a8f0:	17ffffe5 	b	9602a884 <tegrabl_vsnprintf+0x404>
				ch = (char)va_arg(ap, unsigned);
    9602a8f4:	37f80123 	tbnz	w3, #31, 9602a918 <tegrabl_vsnprintf+0x498>
    9602a8f8:	91002c20 	add	x0, x1, #0xb
    9602a8fc:	2a0303e2 	mov	w2, w3
    9602a900:	927df000 	and	x0, x0, #0xfffffffffffffff8
    9602a904:	b9400021 	ldr	w1, [x1]
				*out = ch;
    9602a908:	2a0203e3 	mov	w3, w2
				ch = (char)va_arg(ap, unsigned);
    9602a90c:	39000301 	strb	w1, [x24]
				*out = ch;
    9602a910:	aa0003e1 	mov	x1, x0
    9602a914:	17fffef3 	b	9602a4e0 <tegrabl_vsnprintf+0x60>
				ch = (char)va_arg(ap, unsigned);
    9602a918:	11002062 	add	w2, w3, #0x8
    9602a91c:	7100005f 	cmp	w2, #0x0
    9602a920:	5400008d 	b.le	9602a930 <tegrabl_vsnprintf+0x4b0>
    9602a924:	91002c20 	add	x0, x1, #0xb
    9602a928:	927df000 	and	x0, x0, #0xfffffffffffffff8
    9602a92c:	17fffff6 	b	9602a904 <tegrabl_vsnprintf+0x484>
    9602a930:	aa0103e0 	mov	x0, x1
    9602a934:	8b23c361 	add	x1, x27, w3, sxtw
    9602a938:	17fffff3 	b	9602a904 <tegrabl_vsnprintf+0x484>
				*out = '%';
    9602a93c:	39000305 	strb	w5, [x24]
    9602a940:	17fffee8 	b	9602a4e0 <tegrabl_vsnprintf+0x60>
					long long int tmp = va_arg(ap, long long int);
    9602a944:	37f800e3 	tbnz	w3, #31, 9602a960 <tegrabl_vsnprintf+0x4e0>
    9602a948:	91003c33 	add	x19, x1, #0xf
    9602a94c:	2a0303f7 	mov	w23, w3
    9602a950:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a954:	52800002 	mov	w2, #0x0                   	// #0
    9602a958:	f9400021 	ldr	x1, [x1]
    9602a95c:	17ffff59 	b	9602a6c0 <tegrabl_vsnprintf+0x240>
    9602a960:	11002077 	add	w23, w3, #0x8
    9602a964:	710002ff 	cmp	w23, #0x0
    9602a968:	5400008d 	b.le	9602a978 <tegrabl_vsnprintf+0x4f8>
    9602a96c:	91003c33 	add	x19, x1, #0xf
    9602a970:	927df273 	and	x19, x19, #0xfffffffffffffff8
    9602a974:	17fffff8 	b	9602a954 <tegrabl_vsnprintf+0x4d4>
    9602a978:	aa0103f3 	mov	x19, x1
    9602a97c:	8b23c361 	add	x1, x27, w3, sxtw
    9602a980:	17fffff5 	b	9602a954 <tegrabl_vsnprintf+0x4d4>
					base = 10;
    9602a984:	52800140 	mov	w0, #0xa                   	// #10
    9602a988:	17ffff2f 	b	9602a644 <tegrabl_vsnprintf+0x1c4>
	if (total > size) {
    9602a98c:	eb03033f 	cmp	x25, x3
    9602a990:	54ffe103 	b.cc	9602a5b0 <tegrabl_vsnprintf+0x130>  // b.lo, b.ul, b.last
    9602a994:	aa1803e5 	mov	x5, x24
    9602a998:	aa0303e4 	mov	x4, x3
    9602a99c:	17ffff5f 	b	9602a718 <tegrabl_vsnprintf+0x298>

000000009602a9a0 <tegrabl_get_se0_mutex>:
}

/* Reads SE0 register */
static uint32_t tegrabl_get_se0_reg(uint32_t reg)
{
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602a9a0:	d2800a01 	mov	x1, #0x50                  	// #80
    9602a9a4:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602a9a8:	b9400020 	ldr	w0, [x1]
static void tegrabl_get_se0_mutex(void)
{
	uint32_t se_config_reg;
	uint32_t status = SE0_MUTEX_REQUEST_RELEASE_0_RESET_VAL;

	while(status != SE0_MUTEX_REQUEST_RELEASE_0_LOCK_TRUE) {
    9602a9ac:	3607ffe0 	tbz	w0, #0, 9602a9a8 <tegrabl_get_se0_mutex+0x8>
		se_config_reg = tegrabl_get_se0_reg(SE0_MUTEX_REQUEST_RELEASE_0);
		status = NV_DRF_VAL(SE0_MUTEX, REQUEST_RELEASE, LOCK, se_config_reg);
	}
}
    9602a9b0:	d65f03c0 	ret

000000009602a9b4 <tegrabl_is_se0_engine_busy>:
}

/* Check if SE0 engine status is Busy or not */
static tegrabl_error_t tegrabl_is_se0_engine_busy(
	uint8_t se_engine_index, bool *engine_status)
{
    9602a9b4:	92401c03 	and	x3, x0, #0xff
	default:
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		flag = true;
		break;
	}
	if (flag) {
    9602a9b8:	f00000c2 	adrp	x2, 96045000 <__func__.3796+0x7>
    9602a9bc:	91067042 	add	x2, x2, #0x19c
    9602a9c0:	f00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602a9c4:	91068000 	add	x0, x0, #0x1a0
    9602a9c8:	38636842 	ldrb	w2, [x2, x3]
    9602a9cc:	b8637800 	ldr	w0, [x0, x3, lsl #2]
    9602a9d0:	35000162 	cbnz	w2, 9602a9fc <tegrabl_is_se0_engine_busy+0x48>
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602a9d4:	f00000c2 	adrp	x2, 96045000 <__func__.3796+0x7>
    9602a9d8:	91065042 	add	x2, x2, #0x194
    9602a9dc:	78637842 	ldrh	w2, [x2, x3, lsl #1]
    9602a9e0:	52a07583 	mov	w3, #0x3ac0000             	// #61603840
    9602a9e4:	0b030042 	add	w2, w2, w3
    9602a9e8:	b9400042 	ldr	w2, [x2]

	/* SE0_*_STATUS_0_STATE_* are the same for each STATUS register,
	 * using AES0 status' state.
	 */
	status = NV_DRF_VAL(SE0_AES0, STATUS, STATE, se_config_reg);
	if (status == SE0_OP_STATUS_BUSY) {
    9602a9ec:	12000842 	and	w2, w2, #0x7
		*engine_status = true;
    9602a9f0:	7100045f 	cmp	w2, #0x1
    9602a9f4:	1a9f0042 	csel	w2, w2, wzr, eq  // eq = none
    9602a9f8:	39000022 	strb	w2, [x1]
fail:
	if (err != TEGRABL_NO_ERROR) {
		pr_debug("Error = %d, in tegrabl_is_se0_engine_busy\n", err);
	}
	return err;
}
    9602a9fc:	d65f03c0 	ret

000000009602aa00 <_tegrabl_se_sha_process_block>:
}

static tegrabl_error_t _tegrabl_se_sha_process_block(
	struct se_sha_input_params *input_params,
	struct se_sha_context *context)
{
    9602aa00:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	uint32_t size_left_bits0 = 0;
	uint32_t size_left_bits1 = 0;
	uintptr_t block_addr = 0;
	dma_addr_t dma_block_addr = 0;
	dma_addr_t dma_hash_result = 0;
	bool engine_busy = true;
    9602aa04:	52800022 	mov	w2, #0x1                   	// #1
	bool flag = false;

	if ((input_params == NULL) || (context == NULL)) {
    9602aa08:	f100001f 	cmp	x0, #0x0
{
    9602aa0c:	910003fd 	mov	x29, sp
    9602aa10:	a90153f3 	stp	x19, x20, [sp, #16]
	if ((input_params == NULL) || (context == NULL)) {
    9602aa14:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
{
    9602aa18:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602aa1c:	a90363f7 	stp	x23, x24, [sp, #48]
	bool engine_busy = true;
    9602aa20:	39017fa2 	strb	w2, [x29, #95]
{
    9602aa24:	f90023f9 	str	x25, [sp, #64]
	if ((input_params == NULL) || (context == NULL)) {
    9602aa28:	54001000 	b.eq	9602ac28 <_tegrabl_se_sha_process_block+0x228>  // b.none
	size_left = input_params->size_left;
	phash_result = input_params->hash_addr;
	size_left_bits = size_left * 8ULL;
	size_left_bits0 = (uint32_t)size_left_bits;
	size_left_bits1 = (uint32_t)(size_left_bits >> 32);
	input_size_bits = (uint64_t)context->input_size * 8U;
    9602aa2c:	b9400022 	ldr	w2, [x1]
	phash_result = input_params->hash_addr;
    9602aa30:	f9400815 	ldr	x21, [x0, #16]
	input_size_bits = (uint64_t)context->input_size * 8U;
    9602aa34:	d37df042 	lsl	x2, x2, #3
	input_size_bits1 = (uint32_t)(input_size_bits >> 32);
	hash_algorithm = context->hash_algorithm;
	block_size = input_params->block_size;
	block_addr = input_params->block_addr;

	if ((input_size_bits == 0UL) || (phash_result == 0UL) ||
    9602aa38:	f100005f 	cmp	x2, #0x0
    9602aa3c:	fa401aa4 	ccmp	x21, #0x0, #0x4, ne  // ne = any
    9602aa40:	54000f40 	b.eq	9602ac28 <_tegrabl_se_sha_process_block+0x228>  // b.none
	block_size = input_params->block_size;
    9602aa44:	b9400813 	ldr	w19, [x0, #8]
		(block_size == 0UL) || (block_addr == 0UL) ||
    9602aa48:	321f5be3 	mov	w3, #0xfffffe              	// #16777214
	block_addr = input_params->block_addr;
    9602aa4c:	f9400016 	ldr	x22, [x0]
		(block_size == 0UL) || (block_addr == 0UL) ||
    9602aa50:	51000664 	sub	w4, w19, #0x1
    9602aa54:	f10002df 	cmp	x22, #0x0
    9602aa58:	7a431082 	ccmp	w4, w3, #0x2, ne  // ne = any
    9602aa5c:	54000e68 	b.hi	9602ac28 <_tegrabl_se_sha_process_block+0x228>  // b.pmore
	hash_algorithm = context->hash_algorithm;
    9602aa60:	39401023 	ldrb	w3, [x1, #4]
    9602aa64:	aa0103e6 	mov	x6, x1
    9602aa68:	2a1303f7 	mov	w23, w19
    9602aa6c:	71001c7f 	cmp	w3, #0x7
    9602aa70:	54000d48 	b.hi	9602ac18 <_tegrabl_se_sha_process_block+0x218>  // b.pmore
    9602aa74:	92401c64 	and	x4, x3, #0xff
    9602aa78:	f00000c5 	adrp	x5, 96045000 <__func__.3796+0x7>
    9602aa7c:	910740a5 	add	x5, x5, #0x1d0
    9602aa80:	386468b4 	ldrb	w20, [x5, x4]
	default:
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		flag = true;
		break;
	}
	if (flag) {
    9602aa84:	f00000c5 	adrp	x5, 96045000 <__func__.3796+0x7>
    9602aa88:	910760a5 	add	x5, x5, #0x1d8
    9602aa8c:	386468a1 	ldrb	w1, [x5, x4]
    9602aa90:	34000361 	cbz	w1, 9602aafc <_tegrabl_se_sha_process_block+0xfc>
    9602aa94:	f00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602aa98:	9106c000 	add	x0, x0, #0x1b0
    9602aa9c:	b8647813 	ldr	w19, [x0, x4, lsl #2]
		}
	}

fail:
	/* Unmap DMA buffers */
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602aaa0:	52800024 	mov	w4, #0x1                   	// #1
    9602aaa4:	aa1703e3 	mov	x3, x23
    9602aaa8:	aa1603e2 	mov	x2, x22
    9602aaac:	52800001 	mov	w1, #0x0                   	// #0
    9602aab0:	52800080 	mov	w0, #0x4                   	// #4
    9602aab4:	97ff63f6 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		0, (void *)block_addr, block_size, TEGRABL_DMA_TO_DEVICE);

	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602aab8:	52800001 	mov	w1, #0x0                   	// #0
    9602aabc:	52800080 	mov	w0, #0x4                   	// #4
    9602aac0:	52800044 	mov	w4, #0x2                   	// #2
    9602aac4:	92401e83 	and	x3, x20, #0xff
    9602aac8:	aa1503e2 	mov	x2, x21
    9602aacc:	97ff63f0 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602aad0:	d2800a00 	mov	x0, #0x50                  	// #80
    9602aad4:	52800021 	mov	w1, #0x1                   	// #1
    9602aad8:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602aadc:	b9000001 	str	w1, [x0]

	if (err != TEGRABL_NO_ERROR) {
		pr_debug("Error = %d in tegrabl_se_sha_process_block\n", err);
	}
	return err;
}
    9602aae0:	2a1303e0 	mov	w0, w19
    9602aae4:	f94023f9 	ldr	x25, [sp, #64]
    9602aae8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602aaec:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602aaf0:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602aaf4:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9602aaf8:	d65f03c0 	ret
	size_left = input_params->size_left;
    9602aafc:	b9400c18 	ldr	w24, [x0, #12]
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab00:	d2802099 	mov	x25, #0x104                 	// #260
    9602ab04:	f2a07599 	movk	x25, #0x3ac, lsl #16
	size_left_bits = size_left * 8ULL;
    9602ab08:	d37d7f04 	ubfiz	x4, x24, #3, #32
	tegrabl_get_se0_mutex();
    9602ab0c:	97ffffa5 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	se_config_reg = NV_FLD_SET_DRF_DEF(SE0, SHA_CONFIG, ENC_ALG, SHA,
    9602ab10:	52860080 	mov	w0, #0x3004                	// #12292
    9602ab14:	2a036003 	orr	w3, w0, w3, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab18:	d2802380 	mov	x0, #0x11c                 	// #284
    9602ab1c:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602ab20:	b9000323 	str	w3, [x25]
	dma_block_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602ab24:	aa1703e3 	mov	x3, x23
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab28:	b9000002 	str	w2, [x0]
	input_size_bits1 = (uint32_t)(input_size_bits >> 32);
    9602ab2c:	d360fc42 	lsr	x2, x2, #32
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab30:	b9000402 	str	w2, [x0, #4]
	dma_block_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602ab34:	aa1603e2 	mov	x2, x22
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab38:	b900081f 	str	wzr, [x0, #8]
    9602ab3c:	b9000c1f 	str	wzr, [x0, #12]
    9602ab40:	b9001004 	str	w4, [x0, #16]
	size_left_bits1 = (uint32_t)(size_left_bits >> 32);
    9602ab44:	d360fc84 	lsr	x4, x4, #32
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab48:	b9001404 	str	w4, [x0, #20]
	dma_block_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602ab4c:	52800024 	mov	w4, #0x1                   	// #1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab50:	b900181f 	str	wzr, [x0, #24]
    9602ab54:	b9001c1f 	str	wzr, [x0, #28]
	if (context->input_size == size_left) {
    9602ab58:	b94000c0 	ldr	w0, [x6]
    9602ab5c:	6b18001f 	cmp	w0, w24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab60:	d2802100 	mov	x0, #0x108                 	// #264
    9602ab64:	f2a07580 	movk	x0, #0x3ac, lsl #16
	if (context->input_size == size_left) {
    9602ab68:	1a9f17e1 	cset	w1, eq  // eq = none
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab6c:	b9000001 	str	w1, [x0]
	dma_block_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602ab70:	52800001 	mov	w1, #0x0                   	// #0
    9602ab74:	52800080 	mov	w0, #0x4                   	// #4
    9602ab78:	97ff63d3 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab7c:	d2802181 	mov	x1, #0x10c                 	// #268
	dma_hash_result = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602ab80:	52800044 	mov	w4, #0x2                   	// #2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab84:	f2a07581 	movk	x1, #0x3ac, lsl #16
	dma_hash_result = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602ab88:	92401e83 	and	x3, x20, #0xff
    9602ab8c:	aa1503e2 	mov	x2, x21
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab90:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(SE0_SHA, IN_ADDR_HI, MSB,
    9602ab94:	d360fc00 	lsr	x0, x0, #32
    9602ab98:	2a006260 	orr	w0, w19, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ab9c:	b9000420 	str	w0, [x1, #4]
	dma_hash_result = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602aba0:	52800001 	mov	w1, #0x0                   	// #0
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602aba4:	b9400320 	ldr	w0, [x25]
	se_config_reg = NV_FLD_SET_DRF_DEF(SE0, SHA_CONFIG, DST, MEMORY,
    9602aba8:	121b7000 	and	w0, w0, #0xffffffe3
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602abac:	b9000320 	str	w0, [x25]
	dma_hash_result = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602abb0:	52800080 	mov	w0, #0x4                   	// #4
    9602abb4:	97ff63c4 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602abb8:	d2802281 	mov	x1, #0x114                 	// #276
	if (size_left == block_size) {
    9602abbc:	6b13031f 	cmp	w24, w19
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602abc0:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602abc4:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(SE0_SHA, OUT_ADDR_HI, MSB,
    9602abc8:	d360fc00 	lsr	x0, x0, #32
    9602abcc:	2a006280 	orr	w0, w20, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602abd0:	b9000420 	str	w0, [x1, #4]
    9602abd4:	d2802f80 	mov	x0, #0x17c                 	// #380
    9602abd8:	f2a07580 	movk	x0, #0x3ac, lsl #16
	if (size_left == block_size) {
    9602abdc:	540000e1 	b.ne	9602abf8 <_tegrabl_se_sha_process_block+0x1f8>  // b.any
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602abe0:	320083e1 	mov	w1, #0x10001               	// #65537
    9602abe4:	b9000001 	str	w1, [x0]
	while (engine_busy) {
    9602abe8:	39417fa0 	ldrb	w0, [x29, #95]
    9602abec:	350000a0 	cbnz	w0, 9602ac00 <_tegrabl_se_sha_process_block+0x200>
fail:
    9602abf0:	52800013 	mov	w19, #0x0                   	// #0
    9602abf4:	17ffffab 	b	9602aaa0 <_tegrabl_se_sha_process_block+0xa0>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602abf8:	52800021 	mov	w1, #0x1                   	// #1
    9602abfc:	17fffffa 	b	9602abe4 <_tegrabl_se_sha_process_block+0x1e4>
		err = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_SHA, &engine_busy);
    9602ac00:	91017fa1 	add	x1, x29, #0x5f
    9602ac04:	52800060 	mov	w0, #0x3                   	// #3
    9602ac08:	97ffff6b 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
    9602ac0c:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9602ac10:	34fffec0 	cbz	w0, 9602abe8 <_tegrabl_se_sha_process_block+0x1e8>
    9602ac14:	17ffffa3 	b	9602aaa0 <_tegrabl_se_sha_process_block+0xa0>
	hash_algorithm = context->hash_algorithm;
    9602ac18:	52800053 	mov	w19, #0x2                   	// #2
    9602ac1c:	52800014 	mov	w20, #0x0                   	// #0
    9602ac20:	72a2a2b3 	movk	w19, #0x1515, lsl #16
    9602ac24:	17ffff9f 	b	9602aaa0 <_tegrabl_se_sha_process_block+0xa0>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602ac28:	52800053 	mov	w19, #0x2                   	// #2
    9602ac2c:	72a2a2b3 	movk	w19, #0x1515, lsl #16
    9602ac30:	17ffffac 	b	9602aae0 <_tegrabl_se_sha_process_block+0xe0>

000000009602ac34 <se_create_keyiv_pkt>:
 * @return TEGRABL_NO_ERROR if success, error if fails
 */
static tegrabl_error_t se_create_keyiv_pkt(
	uint8_t keyslot, uint8_t keyiv_sel, uint8_t keyword,
	uint8_t iv_sel, uint8_t iv_word, uint32_t *se_keyiv_pkt)
{
    9602ac34:	12001c84 	and	w4, w4, #0xff
	*se_keyiv_pkt = 0;
	if (keyiv_sel == SE_CRYPTO_KEYIV_PKT_KEYIV_SEL_KEY) {
		/* IV_SEL and IV_WORD aren't use in the key case, and overlap with
		 * KEY_WORD in SE_CRYPTO_KEYIV_PKT.
		 */
		*se_keyiv_pkt = (
    9602ac38:	531e1c63 	ubfiz	w3, w3, #2, #8
    9602ac3c:	321d0084 	orr	w4, w4, #0x8
    9602ac40:	531c1c00 	ubfiz	w0, w0, #4, #8
    9602ac44:	2a030084 	orr	w4, w4, w3
{
    9602ac48:	12001c42 	and	w2, w2, #0xff
		*se_keyiv_pkt = (
    9602ac4c:	2a000084 	orr	w4, w4, w0
    9602ac50:	2a000042 	orr	w2, w2, w0
    9602ac54:	72001c3f 	tst	w1, #0xff
		* fuzzed input for keyiv_sel.
		*/
	}

	return TEGRABL_NO_ERROR;
}
    9602ac58:	52800000 	mov	w0, #0x0                   	// #0
		*se_keyiv_pkt = (
    9602ac5c:	1a840042 	csel	w2, w2, w4, eq  // eq = none
    9602ac60:	b90000a2 	str	w2, [x5]
}
    9602ac64:	d65f03c0 	ret

000000009602ac68 <tegrabl_se_aes_write_key_iv>:
 *
 */
static tegrabl_error_t tegrabl_se_aes_write_key_iv(
	uint8_t keyslot, uint8_t keysize,
	uint8_t keytype, uint32_t *keydata)
{
    9602ac68:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602ac6c:	12001c42 	and	w2, w2, #0xff
    9602ac70:	12001c09 	and	w9, w0, #0xff
    9602ac74:	aa0303e6 	mov	x6, x3
    9602ac78:	910003fd 	mov	x29, sp
	uint8_t keyiv_sel = 0;
	uint8_t iv_sel = 0;
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	bool flag = false;

	switch (keytype_32) {
    9602ac7c:	7100085f 	cmp	w2, #0x2
	uint32_t   se_keytable_addr = 0;
    9602ac80:	b9001fbf 	str	wzr, [x29, #28]
	switch (keytype_32) {
    9602ac84:	54001600 	b.eq	9602af44 <tegrabl_se_aes_write_key_iv+0x2dc>  // b.none
    9602ac88:	71000c5f 	cmp	w2, #0x3
    9602ac8c:	540000a1 	b.ne	9602aca0 <tegrabl_se_aes_write_key_iv+0x38>  // b.any
		iv_sel = (uint8_t)SE_CRYPTO_KEYIV_PKT_IV_SEL_ORIGINAL;
		keysize = (uint8_t)SE_MODE_PKT_AESMODE_KEY128; /* Force 128-bit key size */
		break;
	case SE_CRYPTO_KEYIV_PKT_WORD_QUAD_UPDATED_IVS:
		keyiv_sel = (uint8_t)SE_CRYPTO_KEYIV_PKT_KEYIV_SEL_IV;
		iv_sel = (uint8_t)SE_CRYPTO_KEYIV_PKT_IV_SEL_UPDATED;
    9602ac90:	52800027 	mov	w7, #0x1                   	// #1
	switch (keytype_32) {
    9602ac94:	52800028 	mov	w8, #0x1                   	// #1
    9602ac98:	5280000a 	mov	w10, #0x0                   	// #0
    9602ac9c:	14000004 	b	9602acac <tegrabl_se_aes_write_key_iv+0x44>
    9602aca0:	12001c2a 	and	w10, w1, #0xff
		iv_sel = 0; /* Don't care in this case. */
    9602aca4:	52800007 	mov	w7, #0x0                   	// #0
		keyiv_sel = (uint8_t)SE_CRYPTO_KEYIV_PKT_KEYIV_SEL_KEY;
    9602aca8:	52800008 	mov	w8, #0x0                   	// #0
	}
	if (flag) {
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	tegrabl_get_se0_mutex();
    9602acac:	97ffff3d 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	 * first, SE_CRYPTO_KEYTABLE_ADDR has to be written with the keyslot
	 * configuration for the particular KEY_WORD/IV_WORD you are writing to.
	 * The data to be written to the keyslot KEY_WORD/IV_WORD is then
	 * written to SE_CRYPTOI_KEYTABLE_DATA.
	 */
	err = se_create_keyiv_pkt(
    9602acb0:	2a0703e3 	mov	w3, w7
    9602acb4:	910073a5 	add	x5, x29, #0x1c
    9602acb8:	52800004 	mov	w4, #0x0                   	// #0
    9602acbc:	52800002 	mov	w2, #0x0                   	// #0
    9602acc0:	2a0803e1 	mov	w1, w8
    9602acc4:	2a0903e0 	mov	w0, w9
    9602acc8:	97ffffdb 	bl	9602ac34 <se_create_keyiv_pkt>
		keyslot, keyiv_sel, 0, iv_sel, 0, &se_keytable_addr);

	if (err != TEGRABL_NO_ERROR) {
    9602accc:	350007c0 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602acd0:	d2805780 	mov	x0, #0x2bc                 	// #700
    9602acd4:	b9401fa1 	ldr	w1, [x29, #28]
    9602acd8:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602acdc:	b9000001 	str	w1, [x0]
		goto fail;
	}

	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_ADDR_0, se_keytable_addr);
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ace0:	b40007c6 	cbz	x6, 9602add8 <tegrabl_se_aes_write_key_iv+0x170>
    9602ace4:	b94000c0 	ldr	w0, [x6]
						(keydata == NULL) ? 0UL : *keydata++);
    9602ace8:	910010c6 	add	x6, x6, #0x4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602acec:	d280580b 	mov	x11, #0x2c0                 	// #704

	err = se_create_keyiv_pkt(
    9602acf0:	52800024 	mov	w4, #0x1                   	// #1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602acf4:	f2a0758b 	movk	x11, #0x3ac, lsl #16
	err = se_create_keyiv_pkt(
    9602acf8:	910073a5 	add	x5, x29, #0x1c
    9602acfc:	2a0703e3 	mov	w3, w7
    9602ad00:	2a0403e2 	mov	w2, w4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ad04:	b9000160 	str	w0, [x11]
	err = se_create_keyiv_pkt(
    9602ad08:	2a0803e1 	mov	w1, w8
    9602ad0c:	2a0903e0 	mov	w0, w9
    9602ad10:	97ffffc9 	bl	9602ac34 <se_create_keyiv_pkt>
		keyslot, keyiv_sel, 1, iv_sel, 1, &se_keytable_addr);

	if (err != TEGRABL_NO_ERROR) {
    9602ad14:	35000580 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ad18:	d2805780 	mov	x0, #0x2bc                 	// #700
    9602ad1c:	b9401fa1 	ldr	w1, [x29, #28]
    9602ad20:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602ad24:	b9000001 	str	w1, [x0]
		goto fail;
	}
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_ADDR_0, se_keytable_addr);
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ad28:	b40005c6 	cbz	x6, 9602ade0 <tegrabl_se_aes_write_key_iv+0x178>
    9602ad2c:	b94000c0 	ldr	w0, [x6]
						(keydata == 0UL) ? 0UL : *keydata++);
    9602ad30:	910010c6 	add	x6, x6, #0x4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ad34:	b9000160 	str	w0, [x11]

	err = se_create_keyiv_pkt(
    9602ad38:	52800044 	mov	w4, #0x2                   	// #2
    9602ad3c:	910073a5 	add	x5, x29, #0x1c
    9602ad40:	2a0703e3 	mov	w3, w7
    9602ad44:	2a0403e2 	mov	w2, w4
    9602ad48:	2a0803e1 	mov	w1, w8
    9602ad4c:	2a0903e0 	mov	w0, w9
    9602ad50:	97ffffb9 	bl	9602ac34 <se_create_keyiv_pkt>
		keyslot, keyiv_sel, 2, iv_sel, 2, &se_keytable_addr);
	if (err != TEGRABL_NO_ERROR) {
    9602ad54:	35000380 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ad58:	d2805780 	mov	x0, #0x2bc                 	// #700
    9602ad5c:	b9401fa1 	ldr	w1, [x29, #28]
    9602ad60:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602ad64:	b9000001 	str	w1, [x0]
		goto fail;
	}
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_ADDR_0, se_keytable_addr);
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ad68:	b4000406 	cbz	x6, 9602ade8 <tegrabl_se_aes_write_key_iv+0x180>
    9602ad6c:	b94000c0 	ldr	w0, [x6]
						(keydata == 0UL) ? 0UL : *keydata++);
    9602ad70:	910010c6 	add	x6, x6, #0x4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ad74:	d280580b 	mov	x11, #0x2c0                 	// #704

	err = se_create_keyiv_pkt(
    9602ad78:	52800064 	mov	w4, #0x3                   	// #3
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ad7c:	f2a0758b 	movk	x11, #0x3ac, lsl #16
	err = se_create_keyiv_pkt(
    9602ad80:	910073a5 	add	x5, x29, #0x1c
    9602ad84:	2a0703e3 	mov	w3, w7
    9602ad88:	2a0403e2 	mov	w2, w4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ad8c:	b9000160 	str	w0, [x11]
	err = se_create_keyiv_pkt(
    9602ad90:	2a0803e1 	mov	w1, w8
    9602ad94:	2a0903e0 	mov	w0, w9
    9602ad98:	97ffffa7 	bl	9602ac34 <se_create_keyiv_pkt>
		keyslot, keyiv_sel, 3, iv_sel, 3, &se_keytable_addr);
	if (err != TEGRABL_NO_ERROR) {
    9602ad9c:	35000140 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ada0:	d2805781 	mov	x1, #0x2bc                 	// #700
    9602ada4:	b9401fa2 	ldr	w2, [x29, #28]
    9602ada8:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602adac:	b9000022 	str	w2, [x1]
		goto fail;
	}
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_ADDR_0, se_keytable_addr);
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602adb0:	b4000206 	cbz	x6, 9602adf0 <tegrabl_se_aes_write_key_iv+0x188>
    9602adb4:	b94000c1 	ldr	w1, [x6]
						(keydata == 0UL) ? 0UL : *keydata++);
    9602adb8:	910010c6 	add	x6, x6, #0x4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602adbc:	b9000161 	str	w1, [x11]

	/* if writing a 128-bit key or IV, return. Writes to IV must specify 128-bit
	 * key size.
	 */
	if (keysize == SE_MODE_PKT_AESMODE_KEY128) {
    9602adc0:	350001ca 	cbnz	w10, 9602adf8 <tegrabl_se_aes_write_key_iv+0x190>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602adc4:	d2800a01 	mov	x1, #0x50                  	// #80
    9602adc8:	52800022 	mov	w2, #0x1                   	// #1
    9602adcc:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602add0:	b9000022 	str	w2, [x1]
fail:
	tegrabl_release_se0_mutex();
	if (err != TEGRABL_NO_ERROR) {
		pr_debug("Error = %d, in tegrabl_se_aes_write_key_iv\n", err);
	}
	return err;
    9602add4:	14000030 	b	9602ae94 <tegrabl_se_aes_write_key_iv+0x22c>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602add8:	52800000 	mov	w0, #0x0                   	// #0
    9602addc:	17ffffc4 	b	9602acec <tegrabl_se_aes_write_key_iv+0x84>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ade0:	52800000 	mov	w0, #0x0                   	// #0
    9602ade4:	17ffffd4 	b	9602ad34 <tegrabl_se_aes_write_key_iv+0xcc>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ade8:	52800000 	mov	w0, #0x0                   	// #0
    9602adec:	17ffffe2 	b	9602ad74 <tegrabl_se_aes_write_key_iv+0x10c>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602adf0:	52800001 	mov	w1, #0x0                   	// #0
    9602adf4:	17fffff2 	b	9602adbc <tegrabl_se_aes_write_key_iv+0x154>
	err = se_create_keyiv_pkt(
    9602adf8:	910073a5 	add	x5, x29, #0x1c
    9602adfc:	52800004 	mov	w4, #0x0                   	// #0
    9602ae00:	2a0703e3 	mov	w3, w7
    9602ae04:	52800082 	mov	w2, #0x4                   	// #4
    9602ae08:	2a0803e1 	mov	w1, w8
    9602ae0c:	2a0903e0 	mov	w0, w9
    9602ae10:	97ffff89 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602ae14:	35fffd80 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ae18:	d2805780 	mov	x0, #0x2bc                 	// #700
    9602ae1c:	b9401fa1 	ldr	w1, [x29, #28]
    9602ae20:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602ae24:	b9000001 	str	w1, [x0]
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ae28:	b40003a6 	cbz	x6, 9602ae9c <tegrabl_se_aes_write_key_iv+0x234>
    9602ae2c:	b94000c0 	ldr	w0, [x6]
						(keydata == 0UL) ? 0UL : *keydata++);
    9602ae30:	910010c6 	add	x6, x6, #0x4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ae34:	d280580b 	mov	x11, #0x2c0                 	// #704
	err = se_create_keyiv_pkt(
    9602ae38:	910073a5 	add	x5, x29, #0x1c
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ae3c:	f2a0758b 	movk	x11, #0x3ac, lsl #16
	err = se_create_keyiv_pkt(
    9602ae40:	52800004 	mov	w4, #0x0                   	// #0
    9602ae44:	2a0703e3 	mov	w3, w7
    9602ae48:	528000a2 	mov	w2, #0x5                   	// #5
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ae4c:	b9000160 	str	w0, [x11]
	err = se_create_keyiv_pkt(
    9602ae50:	2a0803e1 	mov	w1, w8
    9602ae54:	2a0903e0 	mov	w0, w9
    9602ae58:	97ffff77 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602ae5c:	35fffb40 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ae60:	d2805781 	mov	x1, #0x2bc                 	// #700
    9602ae64:	b9401fa2 	ldr	w2, [x29, #28]
    9602ae68:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602ae6c:	b9000022 	str	w2, [x1]
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ae70:	b40001a6 	cbz	x6, 9602aea4 <tegrabl_se_aes_write_key_iv+0x23c>
    9602ae74:	b94000c1 	ldr	w1, [x6]
						(keydata == 0UL) ? 0UL : *keydata++);
    9602ae78:	910010c6 	add	x6, x6, #0x4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ae7c:	b9000161 	str	w1, [x11]
	if (keysize == SE_MODE_PKT_AESMODE_KEY192) {
    9602ae80:	7100055f 	cmp	w10, #0x1
    9602ae84:	54000141 	b.ne	9602aeac <tegrabl_se_aes_write_key_iv+0x244>  // b.any
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ae88:	d2800a01 	mov	x1, #0x50                  	// #80
    9602ae8c:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602ae90:	b900002a 	str	w10, [x1]
}
    9602ae94:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602ae98:	d65f03c0 	ret
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602ae9c:	52800000 	mov	w0, #0x0                   	// #0
    9602aea0:	17ffffe5 	b	9602ae34 <tegrabl_se_aes_write_key_iv+0x1cc>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602aea4:	52800001 	mov	w1, #0x0                   	// #0
    9602aea8:	17fffff5 	b	9602ae7c <tegrabl_se_aes_write_key_iv+0x214>
	err = se_create_keyiv_pkt(
    9602aeac:	910073a5 	add	x5, x29, #0x1c
    9602aeb0:	52800004 	mov	w4, #0x0                   	// #0
    9602aeb4:	2a0703e3 	mov	w3, w7
    9602aeb8:	528000c2 	mov	w2, #0x6                   	// #6
    9602aebc:	2a0803e1 	mov	w1, w8
    9602aec0:	2a0903e0 	mov	w0, w9
    9602aec4:	97ffff5c 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602aec8:	35fff7e0 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602aecc:	d2805780 	mov	x0, #0x2bc                 	// #700
    9602aed0:	b9401fa1 	ldr	w1, [x29, #28]
    9602aed4:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602aed8:	b9000001 	str	w1, [x0]
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602aedc:	b40002c6 	cbz	x6, 9602af34 <tegrabl_se_aes_write_key_iv+0x2cc>
    9602aee0:	b94000c0 	ldr	w0, [x6]
						(keydata == 0UL) ? 0UL : *keydata++);
    9602aee4:	910010c6 	add	x6, x6, #0x4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602aee8:	d280580a 	mov	x10, #0x2c0                 	// #704
	err = se_create_keyiv_pkt(
    9602aeec:	910073a5 	add	x5, x29, #0x1c
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602aef0:	f2a0758a 	movk	x10, #0x3ac, lsl #16
	err = se_create_keyiv_pkt(
    9602aef4:	52800004 	mov	w4, #0x0                   	// #0
    9602aef8:	2a0703e3 	mov	w3, w7
    9602aefc:	528000e2 	mov	w2, #0x7                   	// #7
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602af00:	b9000140 	str	w0, [x10]
	err = se_create_keyiv_pkt(
    9602af04:	2a0803e1 	mov	w1, w8
    9602af08:	2a0903e0 	mov	w0, w9
    9602af0c:	97ffff4a 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602af10:	35fff5a0 	cbnz	w0, 9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602af14:	d2805781 	mov	x1, #0x2bc                 	// #700
    9602af18:	b9401fa2 	ldr	w2, [x29, #28]
    9602af1c:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602af20:	b9000022 	str	w2, [x1]
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602af24:	b40000c6 	cbz	x6, 9602af3c <tegrabl_se_aes_write_key_iv+0x2d4>
    9602af28:	b94000c1 	ldr	w1, [x6]
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602af2c:	b9000141 	str	w1, [x10]
    9602af30:	17ffffa5 	b	9602adc4 <tegrabl_se_aes_write_key_iv+0x15c>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602af34:	52800000 	mov	w0, #0x0                   	// #0
    9602af38:	17ffffec 	b	9602aee8 <tegrabl_se_aes_write_key_iv+0x280>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0,
    9602af3c:	52800001 	mov	w1, #0x0                   	// #0
    9602af40:	17fffffb 	b	9602af2c <tegrabl_se_aes_write_key_iv+0x2c4>
		iv_sel = (uint8_t)SE_CRYPTO_KEYIV_PKT_IV_SEL_ORIGINAL;
    9602af44:	52800007 	mov	w7, #0x0                   	// #0
    9602af48:	17ffff53 	b	9602ac94 <tegrabl_se_aes_write_key_iv+0x2c>

000000009602af4c <tegrabl_se_aes_encrypt_decrypt>:
	bool first,
	uint32_t num_blocks,
	uint8_t *src,
	uint8_t *dst,
	bool is_encrypt)
{
    9602af4c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9602af50:	12001c08 	and	w8, w0, #0xff
    9602af54:	12001c27 	and	w7, w1, #0xff
	uint32_t se_config_reg = 0;
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
	dma_addr_t dma_src_addr = 0;
	dma_addr_t dma_dst_addr = 0;
	bool engine_busy = true;
    9602af58:	52800020 	mov	w0, #0x1                   	// #1
{
    9602af5c:	910003fd 	mov	x29, sp
    9602af60:	a90153f3 	stp	x19, x20, [sp, #16]
    9602af64:	aa0503f4 	mov	x20, x5
    9602af68:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602af6c:	aa0403f5 	mov	x21, x4
	bool engine_busy = true;
    9602af70:	39013fa0 	strb	w0, [x29, #79]
{
    9602af74:	f9001bf7 	str	x23, [sp, #48]

	tegrabl_get_se0_mutex();
    9602af78:	97fffe8a 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	if ((mode >= SE_OPR_MODE_MAX) ||
    9602af7c:	71003d1f 	cmp	w8, #0xf
    9602af80:	531c6c73 	lsl	w19, w3, #4
    9602af84:	54000ac8 	b.hi	9602b0dc <tegrabl_se_aes_encrypt_decrypt+0x190>  // b.pmore
	if (keysize > SE_MODE_PKT_AESMODE_KEY256) {
    9602af88:	710008ff 	cmp	w7, #0x2
    9602af8c:	54000a88 	b.hi	9602b0dc <tegrabl_se_aes_encrypt_decrypt+0x190>  // b.pmore
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602af90:	d2804080 	mov	x0, #0x204                 	// #516
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602af94:	53081ce1 	lsl	w1, w7, #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602af98:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602af9c:	12001cc6 	and	w6, w6, #0xff
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602afa0:	53103ce7 	lsl	w7, w7, #16
    9602afa4:	32140021 	orr	w1, w1, #0x1000
    9602afa8:	710000df 	cmp	w6, #0x0
    9602afac:	321800e7 	orr	w7, w7, #0x100
    9602afb0:	1a8100e7 	csel	w7, w7, w1, eq  // eq = none
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602afb4:	b9000007 	str	w7, [x0]
			se_config_reg = NV_FLD_SET_DRF_DEF(SE0_AES0, CRYPTO_CONFIG,
    9602afb8:	52800cc1 	mov	w1, #0x66                  	// #102
    9602afbc:	52804880 	mov	w0, #0x244                 	// #580
    9602afc0:	12001c42 	and	w2, w2, #0xff
    9602afc4:	2a0303f6 	mov	w22, w3
    9602afc8:	1a800021 	csel	w1, w1, w0, eq  // eq = none
		if (use_orig_iv) {
    9602afcc:	35000042 	cbnz	w2, 9602afd4 <tegrabl_se_aes_encrypt_decrypt+0x88>
			se_config_reg = NV_FLD_SET_DRF_DEF(SE0_AES0, CRYPTO_CONFIG,
    9602afd0:	32190021 	orr	w1, w1, #0x80
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602afd4:	d2804100 	mov	x0, #0x208                 	// #520
		se_config_reg |= ((uint32_t)keyslot << SE0_AES0_CRYPTO_CONFIG_0_KEY_INDEX_SHIFT);
    9602afd8:	2a086021 	orr	w1, w1, w8, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602afdc:	f2a07580 	movk	x0, #0x3ac, lsl #16
		(uint8_t)SE0_AES0_CONFIG_0_DST_MEMORY, keyslot, keysize);
	if (ret != TEGRABL_NO_ERROR) {
		goto fail;
	}

	dma_src_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602afe0:	2a1303f7 	mov	w23, w19
    9602afe4:	52800024 	mov	w4, #0x1                   	// #1
    9602afe8:	aa1703e3 	mov	x3, x23
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602afec:	b9000001 	str	w1, [x0]
	dma_src_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602aff0:	aa1503e2 	mov	x2, x21
    9602aff4:	52800001 	mov	w1, #0x0                   	// #0
    9602aff8:	52800080 	mov	w0, #0x4                   	// #4
    9602affc:	97ff62b2 	bl	96003ac4 <tegrabl_dma_map_buffer>
	 * given in the SE IAS section 3.2.3.1 AES Input Data Size.
	 * Input Bytes = 16 bytes * (1 + SE_CRYPTO_LAST_BLOCK)
	 * num_blocks*16 = 16 * (1 + SE_CRYPTO_LAST_BLOCK)
	 * num_blocks - 1 = SE_CRYPTO_LAST_BLOCK
	 */
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_LAST_BLOCK_0, num_blocks - 1UL);
    9602b000:	510006d6 	sub	w22, w22, #0x1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b004:	d2804181 	mov	x1, #0x20c                 	// #524
	dma_dst_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b008:	52800044 	mov	w4, #0x2                   	// #2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b00c:	f2a07581 	movk	x1, #0x3ac, lsl #16
	dma_dst_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b010:	aa1703e3 	mov	x3, x23
    9602b014:	aa1403e2 	mov	x2, x20
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b018:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(
    9602b01c:	d360fc00 	lsr	x0, x0, #32
    9602b020:	2a006260 	orr	w0, w19, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b024:	b9000420 	str	w0, [x1, #4]
	dma_dst_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b028:	52800001 	mov	w1, #0x0                   	// #0
    9602b02c:	52800080 	mov	w0, #0x4                   	// #4
    9602b030:	97ff62a5 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b034:	d2804281 	mov	x1, #0x214                 	// #532
    9602b038:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602b03c:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(
    9602b040:	d360fc00 	lsr	x0, x0, #32
    9602b044:	2a006260 	orr	w0, w19, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b048:	b9000420 	str	w0, [x1, #4]
    9602b04c:	d2804580 	mov	x0, #0x22c                 	// #556
    9602b050:	320083e1 	mov	w1, #0x10001               	// #65537
    9602b054:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b058:	b9000016 	str	w22, [x0]
    9602b05c:	b9000c01 	str	w1, [x0, #12]
	if (ret != TEGRABL_NO_ERROR) {
		goto fail;
	}

	/* Poll for OP_DONE. */
	while (engine_busy) {
    9602b060:	39413fa0 	ldrb	w0, [x29, #79]
    9602b064:	35000060 	cbnz	w0, 9602b070 <tegrabl_se_aes_encrypt_decrypt+0x124>
		if (ret != TEGRABL_NO_ERROR) {
			goto fail;
		}
	}

fail:
    9602b068:	52800016 	mov	w22, #0x0                   	// #0
    9602b06c:	14000006 	b	9602b084 <tegrabl_se_aes_encrypt_decrypt+0x138>
		ret = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_AES0, &engine_busy);
    9602b070:	91013fa1 	add	x1, x29, #0x4f
    9602b074:	52800000 	mov	w0, #0x0                   	// #0
    9602b078:	97fffe4f 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
    9602b07c:	2a0003f6 	mov	w22, w0
		if (ret != TEGRABL_NO_ERROR) {
    9602b080:	34ffff00 	cbz	w0, 9602b060 <tegrabl_se_aes_encrypt_decrypt+0x114>
	/* Unmap DMA buffers */
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602b084:	aa1303e3 	mov	x3, x19
    9602b088:	aa1503e2 	mov	x2, x21
    9602b08c:	52800024 	mov	w4, #0x1                   	// #1
    9602b090:	52800001 	mov	w1, #0x0                   	// #0
    9602b094:	52800080 	mov	w0, #0x4                   	// #4
    9602b098:	97ff627d 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		0, (void *)src, num_blocks * SE_AES_BLOCK_LENGTH,
		TEGRABL_DMA_TO_DEVICE);

	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602b09c:	aa1303e3 	mov	x3, x19
    9602b0a0:	aa1403e2 	mov	x2, x20
    9602b0a4:	52800044 	mov	w4, #0x2                   	// #2
    9602b0a8:	52800001 	mov	w1, #0x0                   	// #0
    9602b0ac:	52800080 	mov	w0, #0x4                   	// #4
    9602b0b0:	97ff6277 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b0b4:	d2800a00 	mov	x0, #0x50                  	// #80
	tegrabl_release_se0_mutex();
	if (ret != TEGRABL_NO_ERROR) {
		pr_debug("Error = %d in tegrabl_se_aes_encrypt_decrypt\n", ret);
	}
	return ret;
}
    9602b0b8:	f9401bf7 	ldr	x23, [sp, #48]
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b0bc:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b0c0:	52800021 	mov	w1, #0x1                   	// #1
}
    9602b0c4:	a94153f3 	ldp	x19, x20, [sp, #16]
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b0c8:	b9000001 	str	w1, [x0]
}
    9602b0cc:	2a1603e0 	mov	w0, w22
    9602b0d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602b0d4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602b0d8:	d65f03c0 	ret
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602b0dc:	52800056 	mov	w22, #0x2                   	// #2
    9602b0e0:	72a2a2b6 	movk	w22, #0x1515, lsl #16
    9602b0e4:	17ffffe8 	b	9602b084 <tegrabl_se_aes_encrypt_decrypt+0x138>

000000009602b0e8 <tegrabl_se_rsa_write_key>:
{
    9602b0e8:	12001c42 	and	w2, w2, #0xff
	if (rsa_keyslot >= SE_RSA_MAX_KEYSLOTS) {
    9602b0ec:	71000c5f 	cmp	w2, #0x3
    9602b0f0:	540004e8 	b.hi	9602b18c <tegrabl_se_rsa_write_key+0xa4>  // b.pmore
	if (rsa_key_size_bits > RSA_MAX_EXPONENT_SIZE_BITS) {
    9602b0f4:	7120003f 	cmp	w1, #0x800
    9602b0f8:	540004a8 	b.hi	9602b18c <tegrabl_se_rsa_write_key+0xa4>  // b.pmore
    9602b0fc:	2a0103e4 	mov	w4, w1
    9602b100:	12001c63 	and	w3, w3, #0xff
    9602b104:	aa0003e5 	mov	x5, x0
{
    9602b108:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9602b10c:	910003fd 	mov	x29, sp
	tegrabl_get_se0_mutex();
    9602b110:	97fffe24 	bl	9602a9a0 <tegrabl_get_se0_mutex>
			((uint32_t)exp_mod_sel << SE_RSA_KEY_PKT_EXPMOD_SEL_SHIFT) );
    9602b114:	531a6463 	lsl	w3, w3, #6
	rsa_keypkt = ( \
    9602b118:	2a021c62 	orr	w2, w3, w2, lsl #7
	for (i = 0; i < (rsa_key_size_bits / 32UL); i++) {
    9602b11c:	53057c81 	lsr	w1, w4, #5
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b120:	d280e986 	mov	x6, #0x74c                 	// #1868
    9602b124:	d280ea07 	mov	x7, #0x750                 	// #1872
	rsa_keytable_addr |= rsa_keypkt;
    9602b128:	2a0203e4 	mov	w4, w2
	for (i = 0; i < (rsa_key_size_bits / 32UL); i++) {
    9602b12c:	d2800003 	mov	x3, #0x0                   	// #0
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b130:	f2a07586 	movk	x6, #0x3ac, lsl #16
    9602b134:	f2a07587 	movk	x7, #0x3ac, lsl #16
	for (i = 0; i < (rsa_key_size_bits / 32UL); i++) {
    9602b138:	6b03003f 	cmp	w1, w3
    9602b13c:	54000108 	b.hi	9602b15c <tegrabl_se_rsa_write_key+0x74>  // b.pmore
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b140:	d2800a00 	mov	x0, #0x50                  	// #80
    9602b144:	52800021 	mov	w1, #0x1                   	// #1
    9602b148:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b14c:	b9000001 	str	w1, [x0]
	return TEGRABL_NO_ERROR;
    9602b150:	52800000 	mov	w0, #0x0                   	// #0
}
    9602b154:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602b158:	d65f03c0 	ret
		rsa_keypkt &= ~(keypkt);
    9602b15c:	121a6442 	and	w2, w2, #0xffffffc0
		rsa_keytable_addr &= ~(keytable);
    9602b160:	12165484 	and	w4, w4, #0xfffffc00
		rsa_keypkt |= (i << SE_RSA_KEY_PKT_WORD_ADDR_SHIFT);
    9602b164:	2a030042 	orr	w2, w2, w3
		rsa_keytable_addr |= rsa_keypkt;
    9602b168:	2a040044 	orr	w4, w2, w4
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b16c:	b90000c4 	str	w4, [x6]
		tegrabl_set_se0_reg(SE0_RSA_KEYTABLE_DATA_0, (pkey == NULL) ? 0UL : pkey[i]);
    9602b170:	b40000a5 	cbz	x5, 9602b184 <tegrabl_se_rsa_write_key+0x9c>
    9602b174:	b86378a0 	ldr	w0, [x5, x3, lsl #2]
    9602b178:	91000463 	add	x3, x3, #0x1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b17c:	b90000e0 	str	w0, [x7]
    9602b180:	17ffffee 	b	9602b138 <tegrabl_se_rsa_write_key+0x50>
		tegrabl_set_se0_reg(SE0_RSA_KEYTABLE_DATA_0, (pkey == NULL) ? 0UL : pkey[i]);
    9602b184:	52800000 	mov	w0, #0x0                   	// #0
    9602b188:	17fffffc 	b	9602b178 <tegrabl_se_rsa_write_key+0x90>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602b18c:	52800040 	mov	w0, #0x2                   	// #2
    9602b190:	72a2a2a0 	movk	w0, #0x1515, lsl #16
}
    9602b194:	d65f03c0 	ret

000000009602b198 <tegrabl_se_rsa_modular_exp>:
{
    9602b198:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	if ((pinput_message == NULL) || (poutput_destination == NULL)) {
    9602b19c:	f100007f 	cmp	x3, #0x0
    9602b1a0:	fa401884 	ccmp	x4, #0x0, #0x4, ne  // ne = any
{
    9602b1a4:	910003fd 	mov	x29, sp
    9602b1a8:	a90153f3 	stp	x19, x20, [sp, #16]
    9602b1ac:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602b1b0:	12001c16 	and	w22, w0, #0xff
    9602b1b4:	f9001bf7 	str	x23, [sp, #48]
	bool engine_busy = true;
    9602b1b8:	52800020 	mov	w0, #0x1                   	// #1
    9602b1bc:	39013fa0 	strb	w0, [x29, #79]
	if ((pinput_message == NULL) || (poutput_destination == NULL)) {
    9602b1c0:	54000be0 	b.eq	9602b33c <tegrabl_se_rsa_modular_exp+0x1a4>  // b.none
	if (rsa_keyslot >= SE_RSA_MAX_KEYSLOTS) {
    9602b1c4:	71000edf 	cmp	w22, #0x3
    9602b1c8:	54000ba8 	b.hi	9602b33c <tegrabl_se_rsa_modular_exp+0x1a4>  // b.pmore
	if ((rsa_key_size_bits > RSA_MAX_EXPONENT_SIZE_BITS) ||
    9602b1cc:	7120003f 	cmp	w1, #0x800
    9602b1d0:	52810000 	mov	w0, #0x800                 	// #2048
    9602b1d4:	7a409042 	ccmp	w2, w0, #0x2, ls  // ls = plast
    9602b1d8:	54000b28 	b.hi	9602b33c <tegrabl_se_rsa_modular_exp+0x1a4>  // b.pmore
    9602b1dc:	2a0103f3 	mov	w19, w1
    9602b1e0:	aa0403f4 	mov	x20, x4
    9602b1e4:	aa0303f5 	mov	x21, x3
	tegrabl_get_se0_mutex();
    9602b1e8:	97fffdee 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b1ec:	d280c200 	mov	x0, #0x610                 	// #1552
	tegrabl_set_se0_reg(SE0_RSA_EXP_SIZE_0, rsa_expsize_bits / 32UL);
    9602b1f0:	53057c42 	lsr	w2, w2, #5
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b1f4:	f2a07580 	movk	x0, #0x3ac, lsl #16
	if (rsa_keysize_bits == 2048UL) {
    9602b1f8:	7120027f 	cmp	w19, #0x800
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b1fc:	b9000002 	str	w2, [x0]
	if (rsa_keysize_bits == 2048UL) {
    9602b200:	54000600 	b.eq	9602b2c0 <tegrabl_se_rsa_modular_exp+0x128>  // b.none
	} else if (rsa_keysize_bits == 1536UL) {
    9602b204:	7118027f 	cmp	w19, #0x600
    9602b208:	54000600 	b.eq	9602b2c8 <tegrabl_se_rsa_modular_exp+0x130>  // b.none
	} else if (rsa_keysize_bits == 1024UL) {
    9602b20c:	7110027f 	cmp	w19, #0x400
    9602b210:	1a9f17e0 	cset	w0, eq  // eq = none
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b214:	d280c181 	mov	x1, #0x60c                 	// #1548
	dma_input_message_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b218:	53037e77 	lsr	w23, w19, #3
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b21c:	f2a07581 	movk	x1, #0x3ac, lsl #16
	dma_input_message_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b220:	52800024 	mov	w4, #0x1                   	// #1
    9602b224:	aa1703e3 	mov	x3, x23
    9602b228:	aa1503e2 	mov	x2, x21
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b22c:	b9000020 	str	w0, [x1]
	dma_input_message_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b230:	52800001 	mov	w1, #0x0                   	// #0
    9602b234:	52800080 	mov	w0, #0x4                   	// #4
	se_config_reg = NV_FLD_SET_DRF_NUM(SE0, RSA_TASK_CONFIG, KEY_SLOT,
    9602b238:	530922d6 	lsl	w22, w22, #23
	dma_input_message_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b23c:	97ff6222 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b240:	d280c281 	mov	x1, #0x614                 	// #1556
	dma_output_destination = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE, 0,
    9602b244:	52800044 	mov	w4, #0x2                   	// #2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b248:	f2a07581 	movk	x1, #0x3ac, lsl #16
	dma_output_destination = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE, 0,
    9602b24c:	aa1703e3 	mov	x3, x23
    9602b250:	aa1403e2 	mov	x2, x20
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b254:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(SE0_RSA, IN_ADDR_HI, MSB,
    9602b258:	d360fc00 	lsr	x0, x0, #32
    9602b25c:	2a0062e0 	orr	w0, w23, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b260:	b9000420 	str	w0, [x1, #4]
	dma_output_destination = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE, 0,
    9602b264:	52800001 	mov	w1, #0x0                   	// #0
    9602b268:	52800080 	mov	w0, #0x4                   	// #4
    9602b26c:	97ff6216 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b270:	d280c381 	mov	x1, #0x61c                 	// #1564
    9602b274:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602b278:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(SE0_RSA, OUT_ADDR_HI, MSB,
    9602b27c:	d360fc00 	lsr	x0, x0, #32
    9602b280:	2a0062e0 	orr	w0, w23, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b284:	b9000420 	str	w0, [x1, #4]
    9602b288:	d280c081 	mov	x1, #0x604                 	// #1540
    9602b28c:	12001c00 	and	w0, w0, #0xff
    9602b290:	f2a07581 	movk	x1, #0x3ac, lsl #16
	se_config_reg = NV_FLD_SET_DRF_DEF(SE0, RSA_CONFIG, ENC_MODE, DEFAULT, se_config_reg);
    9602b294:	32120000 	orr	w0, w0, #0x4000
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b298:	b9000020 	str	w0, [x1]
    9602b29c:	d280c100 	mov	x0, #0x608                 	// #1544
    9602b2a0:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b2a4:	320083e1 	mov	w1, #0x10001               	// #65537
    9602b2a8:	b9000016 	str	w22, [x0]
    9602b2ac:	b9001c01 	str	w1, [x0, #28]
	while (engine_busy) {
    9602b2b0:	39413fa0 	ldrb	w0, [x29, #79]
    9602b2b4:	350000e0 	cbnz	w0, 9602b2d0 <tegrabl_se_rsa_modular_exp+0x138>
fail:
    9602b2b8:	52800013 	mov	w19, #0x0                   	// #0
    9602b2bc:	1400000a 	b	9602b2e4 <tegrabl_se_rsa_modular_exp+0x14c>
		return  SE0_RSA_KEY_SIZE_0_VAL_WIDTH_2048;
    9602b2c0:	52800060 	mov	w0, #0x3                   	// #3
    9602b2c4:	17ffffd4 	b	9602b214 <tegrabl_se_rsa_modular_exp+0x7c>
		return  SE0_RSA_KEY_SIZE_0_VAL_WIDTH_1536;
    9602b2c8:	52800040 	mov	w0, #0x2                   	// #2
    9602b2cc:	17ffffd2 	b	9602b214 <tegrabl_se_rsa_modular_exp+0x7c>
		err = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_PKA0, &engine_busy);
    9602b2d0:	91013fa1 	add	x1, x29, #0x4f
    9602b2d4:	52800040 	mov	w0, #0x2                   	// #2
    9602b2d8:	97fffdb7 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
    9602b2dc:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    9602b2e0:	34fffe80 	cbz	w0, 9602b2b0 <tegrabl_se_rsa_modular_exp+0x118>
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602b2e4:	52800024 	mov	w4, #0x1                   	// #1
    9602b2e8:	aa1703e3 	mov	x3, x23
    9602b2ec:	aa1503e2 	mov	x2, x21
    9602b2f0:	52800001 	mov	w1, #0x0                   	// #0
    9602b2f4:	52800080 	mov	w0, #0x4                   	// #4
    9602b2f8:	97ff61e5 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602b2fc:	52800001 	mov	w1, #0x0                   	// #0
    9602b300:	52800080 	mov	w0, #0x4                   	// #4
    9602b304:	52800044 	mov	w4, #0x2                   	// #2
    9602b308:	aa1703e3 	mov	x3, x23
    9602b30c:	aa1403e2 	mov	x2, x20
    9602b310:	97ff61df 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b314:	d2800a00 	mov	x0, #0x50                  	// #80
    9602b318:	52800021 	mov	w1, #0x1                   	// #1
    9602b31c:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b320:	b9000001 	str	w1, [x0]
}
    9602b324:	2a1303e0 	mov	w0, w19
    9602b328:	f9401bf7 	ldr	x23, [sp, #48]
    9602b32c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602b330:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602b334:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602b338:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602b33c:	52800053 	mov	w19, #0x2                   	// #2
    9602b340:	72a2a2b3 	movk	w19, #0x1515, lsl #16
    9602b344:	17fffff8 	b	9602b324 <tegrabl_se_rsa_modular_exp+0x18c>

000000009602b348 <tegrabl_se_sha_process_block>:
	if ((input_params == NULL) || (context == NULL))
    9602b348:	f100001f 	cmp	x0, #0x0
    9602b34c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    9602b350:	54000440 	b.eq	9602b3d8 <tegrabl_se_sha_process_block+0x90>  // b.none
{
    9602b354:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602b358:	910003fd 	mov	x29, sp
    9602b35c:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602b360:	aa0103f6 	mov	x22, x1
    9602b364:	a90363f7 	stp	x23, x24, [sp, #48]
		size = (size_to_process > SE_SHA_MAX_INPUT_SIZE) ?
    9602b368:	321a47f8 	mov	w24, #0xffffc0              	// #16777152
	size_to_process = input_params->block_size;
    9602b36c:	b9400815 	ldr	w21, [x0, #8]
	buffer = input_params->block_addr;
    9602b370:	f9400017 	ldr	x23, [x0]
{
    9602b374:	a90153f3 	stp	x19, x20, [sp, #16]
    9602b378:	aa0003f3 	mov	x19, x0
		size = (size_to_process > SE_SHA_MAX_INPUT_SIZE) ?
    9602b37c:	6b1802bf 	cmp	w21, w24
		input_params->block_addr = buffer;
    9602b380:	f9000277 	str	x23, [x19]
		size = (size_to_process > SE_SHA_MAX_INPUT_SIZE) ?
    9602b384:	1a9892b4 	csel	w20, w21, w24, ls  // ls = plast
		input_params->block_size = size;
    9602b388:	b9000a74 	str	w20, [x19, #8]
		err = _tegrabl_se_sha_process_block(input_params, context);
    9602b38c:	aa1603e1 	mov	x1, x22
    9602b390:	aa1303e0 	mov	x0, x19
    9602b394:	97fffd9b 	bl	9602aa00 <_tegrabl_se_sha_process_block>
		if (err != TEGRABL_NO_ERROR) {
    9602b398:	34000120 	cbz	w0, 9602b3bc <tegrabl_se_sha_process_block+0x74>
    9602b39c:	12005c00 	and	w0, w0, #0xffffff
    9602b3a0:	52a2a001 	mov	w1, #0x15000000            	// #352321536
    9602b3a4:	2a010000 	orr	w0, w0, w1
}
    9602b3a8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602b3ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602b3b0:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602b3b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602b3b8:	d65f03c0 	ret
		input_params->size_left -= size;
    9602b3bc:	b9400e61 	ldr	w1, [x19, #12]
		buffer += size;
    9602b3c0:	8b3442f7 	add	x23, x23, w20, uxtw
	} while (size_to_process > 0);
    9602b3c4:	6b1402b5 	subs	w21, w21, w20
		input_params->size_left -= size;
    9602b3c8:	4b140021 	sub	w1, w1, w20
    9602b3cc:	b9000e61 	str	w1, [x19, #12]
	} while (size_to_process > 0);
    9602b3d0:	54fffd61 	b.ne	9602b37c <tegrabl_se_sha_process_block+0x34>  // b.any
    9602b3d4:	17fffff5 	b	9602b3a8 <tegrabl_se_sha_process_block+0x60>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602b3d8:	52800040 	mov	w0, #0x2                   	// #2
    9602b3dc:	72a2a2a0 	movk	w0, #0x1515, lsl #16
}
    9602b3e0:	d65f03c0 	ret

000000009602b3e4 <tegrabl_se_aes_process_block>:
{
	uint8_t *buffer;
	uint32_t size_to_process;
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((context == NULL) || (input_params == NULL))
    9602b3e4:	f100003f 	cmp	x1, #0x0
    9602b3e8:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
    9602b3ec:	54005aa0 	b.eq	9602bf40 <tegrabl_se_aes_process_block+0xb5c>  // b.none
{
    9602b3f0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
    9602b3f4:	910003fd 	mov	x29, sp
    9602b3f8:	a90153f3 	stp	x19, x20, [sp, #16]
    9602b3fc:	aa0003f4 	mov	x20, x0
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);

	buffer = input_params->src;
    9602b400:	f9400000 	ldr	x0, [x0]
    9602b404:	aa0103f3 	mov	x19, x1
    9602b408:	f90047a0 	str	x0, [x29, #136]
	size_to_process = input_params->input_size;
    9602b40c:	b9401280 	ldr	w0, [x20, #16]
    9602b410:	b90087a0 	str	w0, [x29, #132]
{
    9602b414:	a9025bf5 	stp	x21, x22, [sp, #32]
				memcpy(aes_subkeys[subkey_cache_index].pk1, context->pk1,
    9602b418:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
{
    9602b41c:	a90363f7 	stp	x23, x24, [sp, #48]
				memcpy(aes_subkeys[subkey_cache_index].pk1, context->pk1,
    9602b420:	912ac000 	add	x0, x0, #0xab0
{
    9602b424:	a9046bf9 	stp	x25, x26, [sp, #64]
    9602b428:	a90573fb 	stp	x27, x28, [sp, #80]
				memcpy(aes_subkeys[subkey_cache_index].pk1, context->pk1,
    9602b42c:	f9003ba0 	str	x0, [x29, #112]
	/* Process the input in multiples of 16 MB, limited by
	 * the SE0_AES0_CRYPTO_LAST_BLOCK_0_WRITE_MASK field. */
	do {
		uint32_t size;

		size = (size_to_process > SE_AES_MAX_INPUT_SIZE) ?
    9602b430:	b94087a0 	ldr	w0, [x29, #132]
    9602b434:	321c4ff5 	mov	w21, #0xfffff0              	// #16777200
    9602b438:	6b15001f 	cmp	w0, w21
    9602b43c:	1a959015 	csel	w21, w0, w21, ls  // ls = plast
			SE_AES_MAX_INPUT_SIZE : size_to_process;
		input_params->src = buffer;
    9602b440:	f94047a0 	ldr	x0, [x29, #136]
    9602b444:	f9000280 	str	x0, [x20]
	if (!((context->is_decrypt == true) || (context->is_encrypt == true)) &&
    9602b448:	39400260 	ldrb	w0, [x19]
		input_params->input_size = size;
    9602b44c:	b9001295 	str	w21, [x20, #16]
	if (!((context->is_decrypt == true) || (context->is_encrypt == true)) &&
    9602b450:	350000a0 	cbnz	w0, 9602b464 <tegrabl_se_aes_process_block+0x80>
    9602b454:	39400660 	ldrb	w0, [x19, #1]
    9602b458:	35000060 	cbnz	w0, 9602b464 <tegrabl_se_aes_process_block+0x80>
    9602b45c:	39400a60 	ldrb	w0, [x19, #2]
    9602b460:	34003f20 	cbz	w0, 9602bc44 <tegrabl_se_aes_process_block+0x860>
	if ((context->is_decrypt == true) && (context->is_encrypt == true)) {
    9602b464:	79400260 	ldrh	w0, [x19]
    9602b468:	7104041f 	cmp	w0, #0x101
    9602b46c:	54003ec0 	b.eq	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.none
	if ((context->total_size == 0UL) ||
    9602b470:	b9400676 	ldr	w22, [x19, #4]
    9602b474:	34003e96 	cbz	w22, 9602bc44 <tegrabl_se_aes_process_block+0x860>
    9602b478:	f2400edf 	tst	x22, #0xf
    9602b47c:	54003e41 	b.ne	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.any
	if (context->keyslot >= SE_AES_MAX_KEYSLOTS) {
    9602b480:	39402260 	ldrb	w0, [x19, #8]
    9602b484:	71003c1f 	cmp	w0, #0xf
    9602b488:	54003de8 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	if (context->keysize > SE_MODE_PKT_AESMODE_KEY256) {
    9602b48c:	39402661 	ldrb	w1, [x19, #9]
    9602b490:	7100083f 	cmp	w1, #0x2
    9602b494:	54003d88 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	if (context->is_hash) {
    9602b498:	39400a62 	ldrb	w2, [x19, #2]
    9602b49c:	340000e2 	cbz	w2, 9602b4b8 <tegrabl_se_aes_process_block+0xd4>
		if ((context->pk1 == NULL) ||
    9602b4a0:	f9401262 	ldr	x2, [x19, #32]
    9602b4a4:	b4003d02 	cbz	x2, 9602bc44 <tegrabl_se_aes_process_block+0x860>
    9602b4a8:	f9401662 	ldr	x2, [x19, #40]
    9602b4ac:	b4003cc2 	cbz	x2, 9602bc44 <tegrabl_se_aes_process_block+0x860>
		if (context->phash == NULL) {
    9602b4b0:	f9400e62 	ldr	x2, [x19, #24]
    9602b4b4:	b4003c82 	cbz	x2, 9602bc44 <tegrabl_se_aes_process_block+0x860>
	if (input_params->src == NULL) {
    9602b4b8:	f94047a2 	ldr	x2, [x29, #136]
    9602b4bc:	b4003c42 	cbz	x2, 9602bc44 <tegrabl_se_aes_process_block+0x860>
	if (((input_params->input_size % SE_AES_BLOCK_LENGTH) != 0UL) ||
    9602b4c0:	f9400a82 	ldr	x2, [x20, #16]
    9602b4c4:	f2000c5f 	tst	x2, #0xf0000000f
    9602b4c8:	54003be1 	b.ne	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.any
	if (input_params->dst == NULL) {
    9602b4cc:	f9400682 	ldr	x2, [x20, #8]
    9602b4d0:	b4003ba2 	cbz	x2, 9602bc44 <tegrabl_se_aes_process_block+0x860>
	is_first = (context->total_size == input_params->size_left);
    9602b4d4:	b9401699 	ldr	w25, [x20, #20]
	num_blocks = input_params->input_size / SE_AES_BLOCK_LENGTH;
    9602b4d8:	53047eb8 	lsr	w24, w21, #4
	if (is_first) {
    9602b4dc:	6b1902df 	cmp	w22, w25
    9602b4e0:	540006c1 	b.ne	9602b5b8 <tegrabl_se_aes_process_block+0x1d4>  // b.any
		if (context->pkey != NULL) {
    9602b4e4:	f9401a63 	ldr	x3, [x19, #48]
    9602b4e8:	b5000303 	cbnz	x3, 9602b548 <tegrabl_se_aes_process_block+0x164>
		if (context->is_hash) {
    9602b4ec:	39400a60 	ldrb	w0, [x19, #2]
    9602b4f0:	35000460 	cbnz	w0, 9602b57c <tegrabl_se_aes_process_block+0x198>
	if ((context->is_decrypt == true) || (context->is_encrypt == true)) {
    9602b4f4:	39400260 	ldrb	w0, [x19]
    9602b4f8:	35000060 	cbnz	w0, 9602b504 <tegrabl_se_aes_process_block+0x120>
    9602b4fc:	39400660 	ldrb	w0, [x19, #1]
    9602b500:	34004f60 	cbz	w0, 9602beec <tegrabl_se_aes_process_block+0xb08>
    9602b504:	39402260 	ldrb	w0, [x19, #8]
		if (is_first) {
    9602b508:	6b1902df 	cmp	w22, w25
    9602b50c:	39402661 	ldrb	w1, [x19, #9]
    9602b510:	f9400a63 	ldr	x3, [x19, #16]
    9602b514:	54004681 	b.ne	9602bde4 <tegrabl_se_aes_process_block+0xa00>  // b.any
			ret = tegrabl_se_aes_write_key_iv(
    9602b518:	52800042 	mov	w2, #0x2                   	// #2
    9602b51c:	97fffdd3 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
			if (ret != TEGRABL_NO_ERROR) {
    9602b520:	350001a0 	cbnz	w0, 9602b554 <tegrabl_se_aes_process_block+0x170>
		if (context->is_encrypt) {
    9602b524:	39400663 	ldrb	w3, [x19, #1]
	is_first = (context->total_size == input_params->size_left);
    9602b528:	6b1902df 	cmp	w22, w25
    9602b52c:	1a9f17e2 	cset	w2, eq  // eq = none
    9602b530:	39402260 	ldrb	w0, [x19, #8]
    9602b534:	39402661 	ldrb	w1, [x19, #9]
    9602b538:	a9401684 	ldp	x4, x5, [x20]
		if (context->is_encrypt) {
    9602b53c:	35004583 	cbnz	w3, 9602bdec <tegrabl_se_aes_process_block+0xa08>
			ret = tegrabl_se_aes_encrypt_decrypt(
    9602b540:	52800006 	mov	w6, #0x0                   	// #0
    9602b544:	1400022b 	b	9602bdf0 <tegrabl_se_aes_process_block+0xa0c>
			ret = tegrabl_se_aes_write_key_iv(
    9602b548:	52800002 	mov	w2, #0x0                   	// #0
    9602b54c:	97fffdc7 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
			if (ret != TEGRABL_NO_ERROR) {
    9602b550:	34fffce0 	cbz	w0, 9602b4ec <tegrabl_se_aes_process_block+0x108>
    9602b554:	12005c00 	and	w0, w0, #0xffffff
    9602b558:	52a2a001 	mov	w1, #0x15000000            	// #352321536
    9602b55c:	2a010000 	orr	w0, w0, w1
		input_params->dst += size;
	} while (size_to_process > 0);

fail:
	return err;
}
    9602b560:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602b564:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602b568:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602b56c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9602b570:	a94573fb 	ldp	x27, x28, [sp, #80]
    9602b574:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9602b578:	d65f03c0 	ret
			if (aes_subkeys[0].keyslot == context->keyslot) {
    9602b57c:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602b580:	3940227a 	ldrb	w26, [x19, #8]
    9602b584:	912ac01b 	add	x27, x0, #0xab0
    9602b588:	f9401277 	ldr	x23, [x19, #32]
    9602b58c:	b94ab000 	ldr	w0, [x0, #2736]
    9602b590:	6b1a001f 	cmp	w0, w26
    9602b594:	54000421 	b.ne	9602b618 <tegrabl_se_aes_process_block+0x234>  // b.any
				memcpy(context->pk1, aes_subkeys[0].pk1, SE_AES_BLOCK_LENGTH);
    9602b598:	d2800202 	mov	x2, #0x10                  	// #16
    9602b59c:	91001361 	add	x1, x27, #0x4
    9602b5a0:	aa1703e0 	mov	x0, x23
    9602b5a4:	97fffa60 	bl	96029f24 <memcpy>
				memcpy(context->pk2, aes_subkeys[0].pk2, SE_AES_BLOCK_LENGTH);
    9602b5a8:	91005361 	add	x1, x27, #0x14
    9602b5ac:	d2800202 	mov	x2, #0x10                  	// #16
				memcpy(context->pk2, aes_subkeys[1].pk2, SE_AES_BLOCK_LENGTH);
    9602b5b0:	f9401660 	ldr	x0, [x19, #40]
    9602b5b4:	97fffa5c 	bl	96029f24 <memcpy>
	if (context->is_hash) {
    9602b5b8:	39400a60 	ldrb	w0, [x19, #2]
    9602b5bc:	34fff9c0 	cbz	w0, 9602b4f4 <tegrabl_se_aes_process_block+0x110>
		if (!is_first){
    9602b5c0:	6b1902df 	cmp	w22, w25
    9602b5c4:	54001b61 	b.ne	9602b930 <tegrabl_se_aes_process_block+0x54c>  // b.any
		ret = se_aes_cmac_hash_blocks(
    9602b5c8:	a941827b 	ldp	x27, x0, [x19, #24]
	if ((zero == NULL) || (last_block == NULL)) {
    9602b5cc:	f0000243 	adrp	x3, 96076000 <free_dram_block+0x38e8>
		ret = se_aes_cmac_hash_blocks(
    9602b5d0:	f90033a0 	str	x0, [x29, #96]
	bool engine_busy = true;
    9602b5d4:	52800020 	mov	w0, #0x1                   	// #1
    9602b5d8:	390273a0 	strb	w0, [x29, #156]
	if ((zero == NULL) || (last_block == NULL)) {
    9602b5dc:	f945b860 	ldr	x0, [x3, #2928]
		ret = se_aes_cmac_hash_blocks(
    9602b5e0:	3940227a 	ldrb	w26, [x19, #8]
    9602b5e4:	39402677 	ldrb	w23, [x19, #9]
    9602b5e8:	f940029c 	ldr	x28, [x20]
	if ((zero == NULL) || (last_block == NULL)) {
    9602b5ec:	b5001b00 	cbnz	x0, 9602b94c <tegrabl_se_aes_process_block+0x568>
		zero = tegrabl_alloc(TEGRABL_HEAP_DMA, 2U * SE_AES_BLOCK_LENGTH);
    9602b5f0:	d2800401 	mov	x1, #0x20                  	// #32
    9602b5f4:	52800020 	mov	w0, #0x1                   	// #1
    9602b5f8:	97ffed23 	bl	96026a84 <tegrabl_alloc>
    9602b5fc:	f0000243 	adrp	x3, 96076000 <free_dram_block+0x38e8>
    9602b600:	f905b860 	str	x0, [x3, #2928]
		if (zero == NULL) {
    9602b604:	b4003ea0 	cbz	x0, 9602bdd8 <tegrabl_se_aes_process_block+0x9f4>
		last_block = zero + SE_AES_BLOCK_LENGTH;
    9602b608:	f0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602b60c:	91004000 	add	x0, x0, #0x10
    9602b610:	f905a420 	str	x0, [x1, #2888]
    9602b614:	140000d1 	b	9602b958 <tegrabl_se_aes_process_block+0x574>
			} else if (aes_subkeys[1].keyslot == context->keyslot) {
    9602b618:	b9402760 	ldr	w0, [x27, #36]
    9602b61c:	6b00035f 	cmp	w26, w0
    9602b620:	54000101 	b.ne	9602b640 <tegrabl_se_aes_process_block+0x25c>  // b.any
				memcpy(context->pk1, aes_subkeys[1].pk1, SE_AES_BLOCK_LENGTH);
    9602b624:	d2800202 	mov	x2, #0x10                  	// #16
    9602b628:	9100a361 	add	x1, x27, #0x28
    9602b62c:	aa1703e0 	mov	x0, x23
    9602b630:	97fffa3d 	bl	96029f24 <memcpy>
				memcpy(context->pk2, aes_subkeys[1].pk2, SE_AES_BLOCK_LENGTH);
    9602b634:	d2800202 	mov	x2, #0x10                  	// #16
    9602b638:	9100e361 	add	x1, x27, #0x38
    9602b63c:	17ffffdd 	b	9602b5b0 <tegrabl_se_aes_process_block+0x1cc>
	bool engine_busy = true;
    9602b640:	52800020 	mov	w0, #0x1                   	// #1
    9602b644:	390273a0 	strb	w0, [x29, #156]
	if ((zero == NULL) || (L == NULL)) {
    9602b648:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602b64c:	f9003fa0 	str	x0, [x29, #120]
				ret = se_aes_cmac_generate_subkey(context->keyslot,
    9602b650:	3940267c 	ldrb	w28, [x19, #9]
	if ((zero == NULL) || (L == NULL)) {
    9602b654:	f945b401 	ldr	x1, [x0, #2920]
				ret = se_aes_cmac_generate_subkey(context->keyslot,
    9602b658:	f940167b 	ldr	x27, [x19, #40]
	if ((zero == NULL) || (L == NULL)) {
    9602b65c:	b4000081 	cbz	x1, 9602b66c <tegrabl_se_aes_process_block+0x288>
    9602b660:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602b664:	f9455400 	ldr	x0, [x0, #2728]
    9602b668:	b5000140 	cbnz	x0, 9602b690 <tegrabl_se_aes_process_block+0x2ac>
		zero = tegrabl_alloc(TEGRABL_HEAP_DMA, 2U * SE_AES_BLOCK_LENGTH);
    9602b66c:	d2800401 	mov	x1, #0x20                  	// #32
    9602b670:	52800020 	mov	w0, #0x1                   	// #1
    9602b674:	97ffed04 	bl	96026a84 <tegrabl_alloc>
    9602b678:	f9403fa1 	ldr	x1, [x29, #120]
    9602b67c:	f905b420 	str	x0, [x1, #2920]
		if (zero == NULL) {
    9602b680:	b4003ac0 	cbz	x0, 9602bdd8 <tegrabl_se_aes_process_block+0x9f4>
		L = zero + SE_AES_BLOCK_LENGTH;
    9602b684:	f0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602b688:	91004000 	add	x0, x0, #0x10
    9602b68c:	f9055420 	str	x0, [x1, #2728]
	memset(zero, 0, SE_AES_BLOCK_LENGTH);
    9602b690:	f9403fa0 	ldr	x0, [x29, #120]
    9602b694:	d2800202 	mov	x2, #0x10                  	// #16
    9602b698:	52800001 	mov	w1, #0x0                   	// #0
    9602b69c:	f945b400 	ldr	x0, [x0, #2920]
    9602b6a0:	97fff9e2 	bl	96029e28 <memset>
	tegrabl_get_se0_mutex();
    9602b6a4:	97fffcbf 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	if ((mode >= SE_OPR_MODE_MAX) ||
    9602b6a8:	71003f5f 	cmp	w26, #0xf
    9602b6ac:	54002cc8 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	if (keysize > SE_MODE_PKT_AESMODE_KEY256) {
    9602b6b0:	71000b9f 	cmp	w28, #0x2
    9602b6b4:	54002c88 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b6b8:	d2804081 	mov	x1, #0x204                 	// #516
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602b6bc:	53081f80 	lsl	w0, w28, #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b6c0:	f2a07581 	movk	x1, #0x3ac, lsl #16
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602b6c4:	32140000 	orr	w0, w0, #0x1000
	dma_zero_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b6c8:	52800024 	mov	w4, #0x1                   	// #1
    9602b6cc:	d2800203 	mov	x3, #0x10                  	// #16
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b6d0:	b9000020 	str	w0, [x1]
    9602b6d4:	d2804100 	mov	x0, #0x208                 	// #520
    9602b6d8:	f2a07580 	movk	x0, #0x3ac, lsl #16
		se_config_reg |= ((uint32_t)keyslot << SE0_AES0_CRYPTO_CONFIG_0_KEY_INDEX_SHIFT);
    9602b6dc:	52804881 	mov	w1, #0x244                 	// #580
    9602b6e0:	2a1a6021 	orr	w1, w1, w26, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b6e4:	b9000001 	str	w1, [x0]
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602b6e8:	b9400001 	ldr	w1, [x0]
			se_config_reg = NV_FLD_SET_DRF_DEF(SE0_AES0, CRYPTO_CONFIG,
    9602b6ec:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b6f0:	b9000001 	str	w1, [x0]
	dma_zero_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b6f4:	f9403fa0 	ldr	x0, [x29, #120]
    9602b6f8:	52800001 	mov	w1, #0x0                   	// #0
    9602b6fc:	f945b402 	ldr	x2, [x0, #2920]
    9602b700:	52800080 	mov	w0, #0x4                   	// #4
    9602b704:	97ff60f0 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b708:	d2804181 	mov	x1, #0x20c                 	// #524
	dma_l_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b70c:	f0000245 	adrp	x5, 96076000 <free_dram_block+0x38e8>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b710:	f2a07581 	movk	x1, #0x3ac, lsl #16
	dma_l_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b714:	52800044 	mov	w4, #0x2                   	// #2
    9602b718:	f94554a2 	ldr	x2, [x5, #2728]
    9602b71c:	d2800203 	mov	x3, #0x10                  	// #16
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b720:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, MSB,
    9602b724:	d360fc00 	lsr	x0, x0, #32
    9602b728:	53081c00 	lsl	w0, w0, #24
    9602b72c:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b730:	b9000420 	str	w0, [x1, #4]
	dma_l_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b734:	52800001 	mov	w1, #0x0                   	// #0
    9602b738:	52800080 	mov	w0, #0x4                   	// #4
    9602b73c:	97ff60e2 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b740:	d2804281 	mov	x1, #0x214                 	// #532
	ret = tegrabl_se_aes_write_key_iv(
    9602b744:	52800042 	mov	w2, #0x2                   	// #2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b748:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602b74c:	b9000020 	str	w0, [x1]
	se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, OUT_ADDR_HI, MSB,
    9602b750:	d360fc00 	lsr	x0, x0, #32
    9602b754:	53081c00 	lsl	w0, w0, #24
    9602b758:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b75c:	b9000420 	str	w0, [x1, #4]
    9602b760:	d2804580 	mov	x0, #0x22c                 	// #556
    9602b764:	52800021 	mov	w1, #0x1                   	// #1
    9602b768:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b76c:	b900001f 	str	wzr, [x0]
    9602b770:	d2800a00 	mov	x0, #0x50                  	// #80
    9602b774:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b778:	b9000001 	str	w1, [x0]
	ret = tegrabl_se_aes_write_key_iv(
    9602b77c:	2a1c03e1 	mov	w1, w28
    9602b780:	f9403fa0 	ldr	x0, [x29, #120]
    9602b784:	f945b40c 	ldr	x12, [x0, #2920]
    9602b788:	2a1a03e0 	mov	w0, w26
    9602b78c:	aa0c03e3 	mov	x3, x12
    9602b790:	97fffd36 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
    9602b794:	f0000245 	adrp	x5, 96076000 <free_dram_block+0x38e8>
    9602b798:	f9003fa5 	str	x5, [x29, #120]
	if (ret != TEGRABL_NO_ERROR) {
    9602b79c:	35ffedc0 	cbnz	w0, 9602b554 <tegrabl_se_aes_process_block+0x170>
	ret = tegrabl_se_aes_write_key_iv(
    9602b7a0:	2a1c03e1 	mov	w1, w28
    9602b7a4:	aa0c03e3 	mov	x3, x12
    9602b7a8:	52800062 	mov	w2, #0x3                   	// #3
    9602b7ac:	2a1a03e0 	mov	w0, w26
    9602b7b0:	97fffd2e 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
	tegrabl_get_se0_mutex();
    9602b7b4:	97fffc7b 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b7b8:	d2804700 	mov	x0, #0x238                 	// #568
    9602b7bc:	320083e1 	mov	w1, #0x10001               	// #65537
    9602b7c0:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b7c4:	b9000001 	str	w1, [x0]
	while (engine_busy) {
    9602b7c8:	394273a0 	ldrb	w0, [x29, #156]
    9602b7cc:	35000a80 	cbnz	w0, 9602b91c <tegrabl_se_aes_process_block+0x538>
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602b7d0:	aa0c03e2 	mov	x2, x12
    9602b7d4:	52800024 	mov	w4, #0x1                   	// #1
    9602b7d8:	d2800203 	mov	x3, #0x10                  	// #16
    9602b7dc:	52800001 	mov	w1, #0x0                   	// #0
    9602b7e0:	52800080 	mov	w0, #0x4                   	// #4
    9602b7e4:	97ff60aa 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602b7e8:	f9403fa0 	ldr	x0, [x29, #120]
    9602b7ec:	52800044 	mov	w4, #0x2                   	// #2
    9602b7f0:	d2800203 	mov	x3, #0x10                  	// #16
    9602b7f4:	52800001 	mov	w1, #0x0                   	// #0
    9602b7f8:	f9455402 	ldr	x2, [x0, #2728]
    9602b7fc:	52800080 	mov	w0, #0x4                   	// #4
    9602b800:	97ff60a3 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b804:	d2800a00 	mov	x0, #0x50                  	// #80
    9602b808:	52800021 	mov	w1, #0x1                   	// #1
    9602b80c:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602b810:	b9000001 	str	w1, [x0]
	msbL = tegrabl_se_is_msb_set(L[0]);
    9602b814:	f9403fa0 	ldr	x0, [x29, #120]
    9602b818:	f9455400 	ldr	x0, [x0, #2728]
    9602b81c:	39400000 	ldrb	w0, [x0]
    9602b820:	94000328 	bl	9602c4c0 <tegrabl_se_is_msb_set>
    9602b824:	12001c1a 	and	w26, w0, #0xff
		pk1[i] = L[i];
    9602b828:	f9403fa0 	ldr	x0, [x29, #120]
    9602b82c:	d2800001 	mov	x1, #0x0                   	// #0
    9602b830:	f9455402 	ldr	x2, [x0, #2728]
    9602b834:	38616840 	ldrb	w0, [x2, x1]
    9602b838:	38216ae0 	strb	w0, [x23, x1]
    9602b83c:	91000421 	add	x1, x1, #0x1
	for (i = 0; i < SE_AES_BLOCK_LENGTH; i++) {
    9602b840:	f100403f 	cmp	x1, #0x10
    9602b844:	54ffff81 	b.ne	9602b834 <tegrabl_se_aes_process_block+0x450>  // b.any
	ret = tegrabl_se_left_shift_one_bit((uint8_t *)pk1, SE_AES_BLOCK_LENGTH);
    9602b848:	aa1703e0 	mov	x0, x23
    9602b84c:	9400031f 	bl	9602c4c8 <tegrabl_se_left_shift_one_bit>
	if (ret != TEGRABL_NO_ERROR) {
    9602b850:	35ffe820 	cbnz	w0, 9602b554 <tegrabl_se_aes_process_block+0x170>
	if (msbL) {
    9602b854:	3400009a 	cbz	w26, 9602b864 <tegrabl_se_aes_process_block+0x480>
		*(pk + SE_AES_BLOCK_LENGTH - 1) ^= AES_CMAC_CONST_RB;
    9602b858:	39403ee0 	ldrb	w0, [x23, #15]
    9602b85c:	52196c00 	eor	w0, w0, #0xffffff87
    9602b860:	39003ee0 	strb	w0, [x23, #15]
		pk1[i] = L[i];
    9602b864:	d280001a 	mov	x26, #0x0                   	// #0
		pk2[i] = pk1[i];
    9602b868:	387a6ae0 	ldrb	w0, [x23, x26]
    9602b86c:	383a6b60 	strb	w0, [x27, x26]
    9602b870:	9100075a 	add	x26, x26, #0x1
	for (i = 0; i < SE_AES_BLOCK_LENGTH; i++) {
    9602b874:	f100435f 	cmp	x26, #0x10
    9602b878:	54ffff81 	b.ne	9602b868 <tegrabl_se_aes_process_block+0x484>  // b.any
	msbL = tegrabl_se_is_msb_set((uint8_t) *pk2);
    9602b87c:	39400360 	ldrb	w0, [x27]
    9602b880:	94000310 	bl	9602c4c0 <tegrabl_se_is_msb_set>
    9602b884:	12001c17 	and	w23, w0, #0xff
	ret = tegrabl_se_left_shift_one_bit((uint8_t *)pk2, SE_AES_BLOCK_LENGTH);
    9602b888:	2a1a03e1 	mov	w1, w26
    9602b88c:	aa1b03e0 	mov	x0, x27
    9602b890:	9400030e 	bl	9602c4c8 <tegrabl_se_left_shift_one_bit>
	if (ret != TEGRABL_NO_ERROR) {
    9602b894:	35ffe600 	cbnz	w0, 9602b554 <tegrabl_se_aes_process_block+0x170>
	if (msbL != false) {
    9602b898:	34000097 	cbz	w23, 9602b8a8 <tegrabl_se_aes_process_block+0x4c4>
		*(pk + SE_AES_BLOCK_LENGTH - 1) ^= AES_CMAC_CONST_RB;
    9602b89c:	39403f60 	ldrb	w0, [x27, #15]
    9602b8a0:	52196c00 	eor	w0, w0, #0xffffff87
    9602b8a4:	39003f60 	strb	w0, [x27, #15]
				memcpy(aes_subkeys[subkey_cache_index].pk1, context->pk1,
    9602b8a8:	f0000257 	adrp	x23, 96076000 <free_dram_block+0x38e8>
    9602b8ac:	5280049a 	mov	w26, #0x24                  	// #36
    9602b8b0:	d2800081 	mov	x1, #0x4                   	// #4
    9602b8b4:	f9403ba3 	ldr	x3, [x29, #112]
    9602b8b8:	396d92e0 	ldrb	w0, [x23, #2916]
    9602b8bc:	d2800202 	mov	x2, #0x10                  	// #16
    9602b8c0:	9ba00740 	umaddl	x0, w26, w0, x1
    9602b8c4:	f9401261 	ldr	x1, [x19, #32]
    9602b8c8:	8b000060 	add	x0, x3, x0
    9602b8cc:	97fff996 	bl	96029f24 <memcpy>
				memcpy(aes_subkeys[subkey_cache_index].pk2, context->pk2,
    9602b8d0:	396d92e1 	ldrb	w1, [x23, #2916]
    9602b8d4:	d2800280 	mov	x0, #0x14                  	// #20
    9602b8d8:	f9403ba3 	ldr	x3, [x29, #112]
    9602b8dc:	d2800202 	mov	x2, #0x10                  	// #16
    9602b8e0:	9ba10340 	umaddl	x0, w26, w1, x0
    9602b8e4:	f9401661 	ldr	x1, [x19, #40]
    9602b8e8:	8b000060 	add	x0, x3, x0
    9602b8ec:	97fff98e 	bl	96029f24 <memcpy>
				aes_subkeys[subkey_cache_index].keyslot = context->keyslot;
    9602b8f0:	396d92e1 	ldrb	w1, [x23, #2916]
    9602b8f4:	d2800482 	mov	x2, #0x24                  	// #36
    9602b8f8:	f9403ba3 	ldr	x3, [x29, #112]
    9602b8fc:	aa0103e0 	mov	x0, x1
				subkey_cache_index = (uint8_t)((subkey_cache_index + 1U) %
    9602b900:	11000400 	add	w0, w0, #0x1
				aes_subkeys[subkey_cache_index].keyslot = context->keyslot;
    9602b904:	9b027c21 	mul	x1, x1, x2
    9602b908:	39402262 	ldrb	w2, [x19, #8]
				subkey_cache_index = (uint8_t)((subkey_cache_index + 1U) %
    9602b90c:	12000000 	and	w0, w0, #0x1
    9602b910:	392d92e0 	strb	w0, [x23, #2916]
				aes_subkeys[subkey_cache_index].keyslot = context->keyslot;
    9602b914:	b8216862 	str	w2, [x3, x1]
    9602b918:	17ffff28 	b	9602b5b8 <tegrabl_se_aes_process_block+0x1d4>
		ret = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_AES0, &engine_busy);
    9602b91c:	910273a1 	add	x1, x29, #0x9c
    9602b920:	52800000 	mov	w0, #0x0                   	// #0
    9602b924:	97fffc24 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
		if (ret != TEGRABL_NO_ERROR) {
    9602b928:	34fff500 	cbz	w0, 9602b7c8 <tegrabl_se_aes_process_block+0x3e4>
    9602b92c:	17ffff0a 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
			ret = tegrabl_se_aes_write_key_iv(
    9602b930:	39402661 	ldrb	w1, [x19, #9]
    9602b934:	52800062 	mov	w2, #0x3                   	// #3
    9602b938:	39402260 	ldrb	w0, [x19, #8]
    9602b93c:	f9400e63 	ldr	x3, [x19, #24]
    9602b940:	97fffcca 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
			if (ret != TEGRABL_NO_ERROR) {
    9602b944:	34ffe420 	cbz	w0, 9602b5c8 <tegrabl_se_aes_process_block+0x1e4>
    9602b948:	17ffff03 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
	if ((zero == NULL) || (last_block == NULL)) {
    9602b94c:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602b950:	f945a400 	ldr	x0, [x0, #2888]
    9602b954:	b4ffe4e0 	cbz	x0, 9602b5f0 <tegrabl_se_aes_process_block+0x20c>
	memset(zero, 0, SE_AES_BLOCK_LENGTH);
    9602b958:	f945b860 	ldr	x0, [x3, #2928]
    9602b95c:	d2800202 	mov	x2, #0x10                  	// #16
    9602b960:	52800001 	mov	w1, #0x0                   	// #0
    9602b964:	97fff931 	bl	96029e28 <memset>
	if (is_first) {
    9602b968:	6b1902df 	cmp	w22, w25
    9602b96c:	f0000243 	adrp	x3, 96076000 <free_dram_block+0x38e8>
    9602b970:	54000820 	b.eq	9602ba74 <tegrabl_se_aes_process_block+0x690>  // b.none
	if (is_last) {
    9602b974:	6b1902bf 	cmp	w21, w25
    9602b978:	540009a0 	b.eq	9602baac <tegrabl_se_aes_process_block+0x6c8>  // b.none
		engine_busy = true;
    9602b97c:	52800020 	mov	w0, #0x1                   	// #1
    9602b980:	390273a0 	strb	w0, [x29, #156]
		while (engine_busy) {
    9602b984:	394273a0 	ldrb	w0, [x29, #156]
    9602b988:	35002140 	cbnz	w0, 9602bdb0 <tegrabl_se_aes_process_block+0x9cc>
		tegrabl_get_se0_mutex();
    9602b98c:	97fffc05 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	if ((mode >= SE_OPR_MODE_MAX) ||
    9602b990:	71003f5f 	cmp	w26, #0xf
    9602b994:	54001588 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	if (keysize > SE_MODE_PKT_AESMODE_KEY256) {
    9602b998:	71000aff 	cmp	w23, #0x2
    9602b99c:	54001548 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9a0:	d2804080 	mov	x0, #0x204                 	// #516
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602b9a4:	53081ef7 	lsl	w23, w23, #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9a8:	f2a07580 	movk	x0, #0x3ac, lsl #16
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602b9ac:	321402f7 	orr	w23, w23, #0x1000
		dma_input_message = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b9b0:	52800024 	mov	w4, #0x1                   	// #1
    9602b9b4:	aa1c03e2 	mov	x2, x28
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9b8:	b9000017 	str	w23, [x0]
		se_config_reg |= ((uint32_t)keyslot << SE0_AES0_CRYPTO_CONFIG_0_KEY_INDEX_SHIFT);
    9602b9bc:	52805880 	mov	w0, #0x2c4                 	// #708
    9602b9c0:	2a1a601a 	orr	w26, w0, w26, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9c4:	d2804100 	mov	x0, #0x208                 	// #520
    9602b9c8:	f2a07580 	movk	x0, #0x3ac, lsl #16
		dma_input_message = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b9cc:	927c6eb7 	and	x23, x21, #0xfffffff0
    9602b9d0:	aa1703e3 	mov	x3, x23
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9d4:	b900001a 	str	w26, [x0]
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602b9d8:	b9400001 	ldr	w1, [x0]
			se_config_reg = NV_FLD_SET_DRF_DEF(SE0_AES0, CRYPTO_CONFIG,
    9602b9dc:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9e0:	b9000001 	str	w1, [x0]
		dma_input_message = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b9e4:	52800001 	mov	w1, #0x0                   	// #0
    9602b9e8:	52800080 	mov	w0, #0x4                   	// #4
    9602b9ec:	97ff6036 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9f0:	d2804181 	mov	x1, #0x20c                 	// #524
		dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b9f4:	52800044 	mov	w4, #0x2                   	// #2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602b9f8:	f2a07581 	movk	x1, #0x3ac, lsl #16
		dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602b9fc:	d2800203 	mov	x3, #0x10                  	// #16
    9602ba00:	aa1b03e2 	mov	x2, x27
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ba04:	b9000020 	str	w0, [x1]
		se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, MSB,
    9602ba08:	d360fc00 	lsr	x0, x0, #32
		se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, SZ,
    9602ba0c:	121c4ea1 	and	w1, w21, #0xfffff0
		se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, MSB,
    9602ba10:	2a006020 	orr	w0, w1, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ba14:	d2804201 	mov	x1, #0x210                 	// #528
    9602ba18:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602ba1c:	b9000020 	str	w0, [x1]
		dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602ba20:	52800001 	mov	w1, #0x0                   	// #0
    9602ba24:	52800080 	mov	w0, #0x4                   	// #4
    9602ba28:	97ff6027 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ba2c:	d2804281 	mov	x1, #0x214                 	// #532
    9602ba30:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602ba34:	b9000020 	str	w0, [x1]
		se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, OUT_ADDR_HI, MSB,
    9602ba38:	d360fc00 	lsr	x0, x0, #32
    9602ba3c:	53081c00 	lsl	w0, w0, #24
    9602ba40:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ba44:	b9000420 	str	w0, [x1, #4]
		tegrabl_set_se0_reg(SE0_AES0_CRYPTO_LAST_BLOCK_0, num_blocks - 1UL);
    9602ba48:	51000700 	sub	w0, w24, #0x1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602ba4c:	b9001820 	str	w0, [x1, #24]
    9602ba50:	52800020 	mov	w0, #0x1                   	// #1
    9602ba54:	b9002420 	str	w0, [x1, #36]
		engine_busy = true;
    9602ba58:	390273a0 	strb	w0, [x29, #156]
		while (engine_busy) {
    9602ba5c:	394273a0 	ldrb	w0, [x29, #156]
    9602ba60:	35001b20 	cbnz	w0, 9602bdc4 <tegrabl_se_aes_process_block+0x9e0>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602ba64:	52800024 	mov	w4, #0x1                   	// #1
    9602ba68:	aa1703e3 	mov	x3, x23
    9602ba6c:	aa1c03e2 	mov	x2, x28
    9602ba70:	14000060 	b	9602bbf0 <tegrabl_se_aes_process_block+0x80c>
		ret = tegrabl_se_aes_write_key_iv(
    9602ba74:	f945b86c 	ldr	x12, [x3, #2928]
    9602ba78:	52800042 	mov	w2, #0x2                   	// #2
    9602ba7c:	2a1703e1 	mov	w1, w23
    9602ba80:	2a1a03e0 	mov	w0, w26
    9602ba84:	aa0c03e3 	mov	x3, x12
    9602ba88:	97fffc78 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
		if (ret != TEGRABL_NO_ERROR) {
    9602ba8c:	35ffd640 	cbnz	w0, 9602b554 <tegrabl_se_aes_process_block+0x170>
		ret = tegrabl_se_aes_write_key_iv(
    9602ba90:	aa0c03e3 	mov	x3, x12
    9602ba94:	52800062 	mov	w2, #0x3                   	// #3
    9602ba98:	2a1703e1 	mov	w1, w23
    9602ba9c:	2a1a03e0 	mov	w0, w26
    9602baa0:	97fffc72 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
		if (ret != TEGRABL_NO_ERROR) {
    9602baa4:	34fff680 	cbz	w0, 9602b974 <tegrabl_se_aes_process_block+0x590>
    9602baa8:	17fffeab 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
	const uint32_t byte_offset_to_last_block = (num_blocks - 1UL) *
    9602baac:	531c6f00 	lsl	w0, w24, #4
		if (num_blocks > 1UL) {
    9602bab0:	7100071f 	cmp	w24, #0x1
	const uint32_t byte_offset_to_last_block = (num_blocks - 1UL) *
    9602bab4:	51004000 	sub	w0, w0, #0x10
    9602bab8:	b9006ba0 	str	w0, [x29, #104]
	pinput_message_last_block_r5 = (uint8_t *) (pinput_message +
    9602babc:	f9003fa0 	str	x0, [x29, #120]
		if (num_blocks > 1UL) {
    9602bac0:	54000b48 	b.hi	9602bc28 <tegrabl_se_aes_process_block+0x844>  // b.pmore
			last_block[i] = *(pk1 + i) ^
    9602bac4:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602bac8:	f90037a0 	str	x0, [x29, #104]
    9602bacc:	d2800005 	mov	x5, #0x0                   	// #0
    9602bad0:	f945a402 	ldr	x2, [x0, #2888]
				*(pinput_message_last_block_r5 + i);
    9602bad4:	f9403fa0 	ldr	x0, [x29, #120]
    9602bad8:	8b00039c 	add	x28, x28, x0
			last_block[i] = *(pk1 + i) ^
    9602badc:	f94033a1 	ldr	x1, [x29, #96]
    9602bae0:	38656b80 	ldrb	w0, [x28, x5]
    9602bae4:	38656821 	ldrb	w1, [x1, x5]
    9602bae8:	4a010000 	eor	w0, w0, w1
    9602baec:	38256840 	strb	w0, [x2, x5]
    9602baf0:	910004a5 	add	x5, x5, #0x1
		for (i = 0; i < SE_AES_BLOCK_LENGTH; i++) {
    9602baf4:	f10040bf 	cmp	x5, #0x10
    9602baf8:	54ffff21 	b.ne	9602badc <tegrabl_se_aes_process_block+0x6f8>  // b.any
    9602bafc:	f9003fa5 	str	x5, [x29, #120]
		tegrabl_get_se0_mutex();
    9602bb00:	97fffba8 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	if ((mode >= SE_OPR_MODE_MAX) ||
    9602bb04:	71003f5f 	cmp	w26, #0xf
    9602bb08:	540009e8 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	if (keysize > SE_MODE_PKT_AESMODE_KEY256) {
    9602bb0c:	71000aff 	cmp	w23, #0x2
    9602bb10:	540009a8 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb14:	d2804080 	mov	x0, #0x204                 	// #516
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602bb18:	53081ef7 	lsl	w23, w23, #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb1c:	f2a07580 	movk	x0, #0x3ac, lsl #16
		dma_last_block = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb20:	f9403fa5 	ldr	x5, [x29, #120]
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602bb24:	321402f7 	orr	w23, w23, #0x1000
		dma_last_block = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb28:	52800024 	mov	w4, #0x1                   	// #1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb2c:	b9000017 	str	w23, [x0]
		se_config_reg |= ((uint32_t)keyslot << SE0_AES0_CRYPTO_CONFIG_0_KEY_INDEX_SHIFT);
    9602bb30:	52805880 	mov	w0, #0x2c4                 	// #708
    9602bb34:	2a1a601a 	orr	w26, w0, w26, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb38:	d2804100 	mov	x0, #0x208                 	// #520
    9602bb3c:	f2a07580 	movk	x0, #0x3ac, lsl #16
		dma_last_block = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb40:	aa0503e3 	mov	x3, x5
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb44:	b900001a 	str	w26, [x0]
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602bb48:	b9400001 	ldr	w1, [x0]
			se_config_reg = NV_FLD_SET_DRF_DEF(SE0_AES0, CRYPTO_CONFIG,
    9602bb4c:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb50:	b9000001 	str	w1, [x0]
		dma_last_block = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb54:	52800001 	mov	w1, #0x0                   	// #0
    9602bb58:	52800080 	mov	w0, #0x4                   	// #4
    9602bb5c:	97ff5fda 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb60:	d2804181 	mov	x1, #0x20c                 	// #524
		dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb64:	f9403fa5 	ldr	x5, [x29, #120]
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb68:	f2a07581 	movk	x1, #0x3ac, lsl #16
		dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb6c:	52800044 	mov	w4, #0x2                   	// #2
    9602bb70:	aa1b03e2 	mov	x2, x27
    9602bb74:	aa0503e3 	mov	x3, x5
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb78:	b9000020 	str	w0, [x1]
		se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, MSB,
    9602bb7c:	d360fc00 	lsr	x0, x0, #32
    9602bb80:	53081c00 	lsl	w0, w0, #24
    9602bb84:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb88:	b9000420 	str	w0, [x1, #4]
    9602bb8c:	d2804580 	mov	x0, #0x22c                 	// #556
		dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb90:	52800001 	mov	w1, #0x0                   	// #0
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bb94:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602bb98:	b900001f 	str	wzr, [x0]
		dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bb9c:	52800080 	mov	w0, #0x4                   	// #4
    9602bba0:	97ff5fc9 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bba4:	d2804281 	mov	x1, #0x214                 	// #532
    9602bba8:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602bbac:	b9000020 	str	w0, [x1]
		se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, OUT_ADDR_HI, MSB,
    9602bbb0:	d360fc00 	lsr	x0, x0, #32
    9602bbb4:	53081c00 	lsl	w0, w0, #24
    9602bbb8:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bbbc:	b9000420 	str	w0, [x1, #4]
    9602bbc0:	d2804700 	mov	x0, #0x238                 	// #568
    9602bbc4:	320083e1 	mov	w1, #0x10001               	// #65537
    9602bbc8:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602bbcc:	b9000001 	str	w1, [x0]
		engine_busy = true;
    9602bbd0:	52800020 	mov	w0, #0x1                   	// #1
    9602bbd4:	390273a0 	strb	w0, [x29, #156]
		while (engine_busy) {
    9602bbd8:	394273a0 	ldrb	w0, [x29, #156]
    9602bbdc:	35000e00 	cbnz	w0, 9602bd9c <tegrabl_se_aes_process_block+0x9b8>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602bbe0:	f94037a0 	ldr	x0, [x29, #104]
    9602bbe4:	52800024 	mov	w4, #0x1                   	// #1
    9602bbe8:	d2800203 	mov	x3, #0x10                  	// #16
    9602bbec:	f945a402 	ldr	x2, [x0, #2888]
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602bbf0:	52800001 	mov	w1, #0x0                   	// #0
    9602bbf4:	52800080 	mov	w0, #0x4                   	// #4
    9602bbf8:	97ff5fa5 	bl	96003a8c <tegrabl_dma_unmap_buffer>
		tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602bbfc:	52800001 	mov	w1, #0x0                   	// #0
    9602bc00:	52800080 	mov	w0, #0x4                   	// #4
    9602bc04:	52800044 	mov	w4, #0x2                   	// #2
    9602bc08:	d2800203 	mov	x3, #0x10                  	// #16
    9602bc0c:	aa1b03e2 	mov	x2, x27
    9602bc10:	97ff5f9f 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bc14:	d2800a00 	mov	x0, #0x50                  	// #80
    9602bc18:	52800021 	mov	w1, #0x1                   	// #1
    9602bc1c:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602bc20:	b9000001 	str	w1, [x0]
    9602bc24:	17fffe34 	b	9602b4f4 <tegrabl_se_aes_process_block+0x110>
			engine_busy = true;
    9602bc28:	52800020 	mov	w0, #0x1                   	// #1
    9602bc2c:	390273a0 	strb	w0, [x29, #156]
			while (engine_busy) {
    9602bc30:	394273a0 	ldrb	w0, [x29, #156]
    9602bc34:	350000c0 	cbnz	w0, 9602bc4c <tegrabl_se_aes_process_block+0x868>
			tegrabl_get_se0_mutex();
    9602bc38:	97fffb5a 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	if ((mode >= SE_OPR_MODE_MAX) ||
    9602bc3c:	71003f5f 	cmp	w26, #0xf
    9602bc40:	54000109 	b.ls	9602bc60 <tegrabl_se_aes_process_block+0x87c>  // b.plast
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602bc44:	52800040 	mov	w0, #0x2                   	// #2
    9602bc48:	14000065 	b	9602bddc <tegrabl_se_aes_process_block+0x9f8>
				ret = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_AES0,
    9602bc4c:	910273a1 	add	x1, x29, #0x9c
    9602bc50:	52800000 	mov	w0, #0x0                   	// #0
    9602bc54:	97fffb58 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
				if (ret != TEGRABL_NO_ERROR)
    9602bc58:	34fffec0 	cbz	w0, 9602bc30 <tegrabl_se_aes_process_block+0x84c>
    9602bc5c:	17fffe3e 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
	if (keysize > SE_MODE_PKT_AESMODE_KEY256) {
    9602bc60:	71000aff 	cmp	w23, #0x2
    9602bc64:	54ffff08 	b.hi	9602bc44 <tegrabl_se_aes_process_block+0x860>  // b.pmore
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bc68:	d2804081 	mov	x1, #0x204                 	// #516
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602bc6c:	53081ee0 	lsl	w0, w23, #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bc70:	f2a07581 	movk	x1, #0x3ac, lsl #16
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, CONFIG, ENC_MODE,
    9602bc74:	32140000 	orr	w0, w0, #0x1000
			dma_input_message = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bc78:	f9403fa3 	ldr	x3, [x29, #120]
    9602bc7c:	52800024 	mov	w4, #0x1                   	// #1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bc80:	b9000020 	str	w0, [x1]
    9602bc84:	d2804100 	mov	x0, #0x208                 	// #520
    9602bc88:	f2a07580 	movk	x0, #0x3ac, lsl #16
		se_config_reg |= ((uint32_t)keyslot << SE0_AES0_CRYPTO_CONFIG_0_KEY_INDEX_SHIFT);
    9602bc8c:	52805881 	mov	w1, #0x2c4                 	// #708
    9602bc90:	2a1a6021 	orr	w1, w1, w26, lsl #24
			dma_input_message = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bc94:	aa1c03e2 	mov	x2, x28
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bc98:	b9000001 	str	w1, [x0]
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602bc9c:	b9400001 	ldr	w1, [x0]
			se_config_reg = NV_FLD_SET_DRF_DEF(SE0_AES0, CRYPTO_CONFIG,
    9602bca0:	32000021 	orr	w1, w1, #0x1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bca4:	b9000001 	str	w1, [x0]
			dma_input_message = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bca8:	52800001 	mov	w1, #0x0                   	// #0
    9602bcac:	52800080 	mov	w0, #0x4                   	// #4
    9602bcb0:	97ff5f85 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bcb4:	d2804181 	mov	x1, #0x20c                 	// #524
			dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bcb8:	52800044 	mov	w4, #0x2                   	// #2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bcbc:	f2a07581 	movk	x1, #0x3ac, lsl #16
			dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bcc0:	d2800203 	mov	x3, #0x10                  	// #16
    9602bcc4:	aa1b03e2 	mov	x2, x27
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bcc8:	b9000020 	str	w0, [x1]
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, MSB,
    9602bccc:	d360fc00 	lsr	x0, x0, #32
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, SZ,
    9602bcd0:	b9406ba1 	ldr	w1, [x29, #104]
    9602bcd4:	12005c21 	and	w1, w1, #0xffffff
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, IN_ADDR_HI, MSB,
    9602bcd8:	2a006020 	orr	w0, w1, w0, lsl #24
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bcdc:	d2804201 	mov	x1, #0x210                 	// #528
    9602bce0:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602bce4:	b9000020 	str	w0, [x1]
			dma_hash_addr = tegrabl_dma_map_buffer(TEGRABL_MODULE_SE,
    9602bce8:	52800001 	mov	w1, #0x0                   	// #0
    9602bcec:	52800080 	mov	w0, #0x4                   	// #4
    9602bcf0:	97ff5f75 	bl	96003ac4 <tegrabl_dma_map_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bcf4:	d2804281 	mov	x1, #0x214                 	// #532
    9602bcf8:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602bcfc:	b9000020 	str	w0, [x1]
			se_config_reg = NV_FLD_SET_DRF_NUM(SE0_AES0, OUT_ADDR_HI, MSB,
    9602bd00:	d360fc00 	lsr	x0, x0, #32
    9602bd04:	53081c00 	lsl	w0, w0, #24
    9602bd08:	321c0000 	orr	w0, w0, #0x10
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bd0c:	b9000420 	str	w0, [x1, #4]
			tegrabl_set_se0_reg(SE0_AES0_CRYPTO_LAST_BLOCK_0,
    9602bd10:	51000b00 	sub	w0, w24, #0x2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bd14:	b9001820 	str	w0, [x1, #24]
    9602bd18:	52800020 	mov	w0, #0x1                   	// #1
    9602bd1c:	b9002420 	str	w0, [x1, #36]
			engine_busy = true;
    9602bd20:	390273a0 	strb	w0, [x29, #156]
			while (engine_busy) {
    9602bd24:	394273a0 	ldrb	w0, [x29, #156]
    9602bd28:	35000300 	cbnz	w0, 9602bd88 <tegrabl_se_aes_process_block+0x9a4>
			tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602bd2c:	f9403fa3 	ldr	x3, [x29, #120]
    9602bd30:	52800024 	mov	w4, #0x1                   	// #1
    9602bd34:	aa1c03e2 	mov	x2, x28
    9602bd38:	52800001 	mov	w1, #0x0                   	// #0
    9602bd3c:	52800080 	mov	w0, #0x4                   	// #4
    9602bd40:	97ff5f53 	bl	96003a8c <tegrabl_dma_unmap_buffer>
			tegrabl_dma_unmap_buffer(TEGRABL_MODULE_SE,
    9602bd44:	d2800203 	mov	x3, #0x10                  	// #16
    9602bd48:	aa1b03e2 	mov	x2, x27
    9602bd4c:	52800001 	mov	w1, #0x0                   	// #0
    9602bd50:	52800080 	mov	w0, #0x4                   	// #4
    9602bd54:	52800044 	mov	w4, #0x2                   	// #2
    9602bd58:	97ff5f4d 	bl	96003a8c <tegrabl_dma_unmap_buffer>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bd5c:	d2800a00 	mov	x0, #0x50                  	// #80
    9602bd60:	52800021 	mov	w1, #0x1                   	// #1
    9602bd64:	f2a07580 	movk	x0, #0x3ac, lsl #16
			ret = tegrabl_se_aes_write_key_iv(
    9602bd68:	aa1b03e3 	mov	x3, x27
    9602bd6c:	52800062 	mov	w2, #0x3                   	// #3
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bd70:	b9000001 	str	w1, [x0]
			ret = tegrabl_se_aes_write_key_iv(
    9602bd74:	52800001 	mov	w1, #0x0                   	// #0
    9602bd78:	2a1a03e0 	mov	w0, w26
    9602bd7c:	97fffbbb 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
			if (ret != TEGRABL_NO_ERROR) {
    9602bd80:	34ffea20 	cbz	w0, 9602bac4 <tegrabl_se_aes_process_block+0x6e0>
    9602bd84:	17fffdf4 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
				ret = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_AES0,
    9602bd88:	910273a1 	add	x1, x29, #0x9c
    9602bd8c:	52800000 	mov	w0, #0x0                   	// #0
    9602bd90:	97fffb09 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
				if (ret != TEGRABL_NO_ERROR)
    9602bd94:	34fffc80 	cbz	w0, 9602bd24 <tegrabl_se_aes_process_block+0x940>
    9602bd98:	17fffdef 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
			ret = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_AES0,
    9602bd9c:	910273a1 	add	x1, x29, #0x9c
    9602bda0:	52800000 	mov	w0, #0x0                   	// #0
    9602bda4:	97fffb04 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
			if (ret != TEGRABL_NO_ERROR)
    9602bda8:	34fff180 	cbz	w0, 9602bbd8 <tegrabl_se_aes_process_block+0x7f4>
    9602bdac:	17fffdea 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
			ret = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_AES0,
    9602bdb0:	910273a1 	add	x1, x29, #0x9c
    9602bdb4:	52800000 	mov	w0, #0x0                   	// #0
    9602bdb8:	97fffaff 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
			if (ret != TEGRABL_NO_ERROR)
    9602bdbc:	34ffde40 	cbz	w0, 9602b984 <tegrabl_se_aes_process_block+0x5a0>
    9602bdc0:	17fffde5 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
			ret = tegrabl_is_se0_engine_busy(ARSE_ENG_IDX_AES0,
    9602bdc4:	910273a1 	add	x1, x29, #0x9c
    9602bdc8:	52800000 	mov	w0, #0x0                   	// #0
    9602bdcc:	97fffafa 	bl	9602a9b4 <tegrabl_is_se0_engine_busy>
			if (ret != TEGRABL_NO_ERROR) {
    9602bdd0:	34ffe460 	cbz	w0, 9602ba5c <tegrabl_se_aes_process_block+0x678>
    9602bdd4:	17fffde0 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
			ret = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9602bdd8:	52800060 	mov	w0, #0x3                   	// #3
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602bddc:	72a2a2a0 	movk	w0, #0x1515, lsl #16
    9602bde0:	17fffddd 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
			ret = tegrabl_se_aes_write_key_iv(
    9602bde4:	52800062 	mov	w2, #0x3                   	// #3
    9602bde8:	17fffdcd 	b	9602b51c <tegrabl_se_aes_process_block+0x138>
			ret = tegrabl_se_aes_encrypt_decrypt(
    9602bdec:	52800026 	mov	w6, #0x1                   	// #1
			ret = tegrabl_se_aes_encrypt_decrypt(
    9602bdf0:	2a1803e3 	mov	w3, w24
    9602bdf4:	97fffc56 	bl	9602af4c <tegrabl_se_aes_encrypt_decrypt>
		if (ret != TEGRABL_NO_ERROR) {
    9602bdf8:	35ffbae0 	cbnz	w0, 9602b554 <tegrabl_se_aes_process_block+0x170>
		ret = tegrabl_se_aes_read_key_iv(
    9602bdfc:	39402269 	ldrb	w9, [x19, #8]
			(uint32_t *)context->iv_encrypt);
    9602be00:	f9400a66 	ldr	x6, [x19, #16]
	uint32_t se_keytable_addr = 0;
    9602be04:	b9009fbf 	str	wzr, [x29, #156]
	tegrabl_get_se0_mutex();
    9602be08:	97fffae6 	bl	9602a9a0 <tegrabl_get_se0_mutex>
	err = se_create_keyiv_pkt(
    9602be0c:	2a0903e0 	mov	w0, w9
    9602be10:	52800023 	mov	w3, #0x1                   	// #1
    9602be14:	910273a5 	add	x5, x29, #0x9c
    9602be18:	52800004 	mov	w4, #0x0                   	// #0
    9602be1c:	52800002 	mov	w2, #0x0                   	// #0
    9602be20:	2a0303e1 	mov	w1, w3
    9602be24:	97fffb84 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602be28:	35000820 	cbnz	w0, 9602bf2c <tegrabl_se_aes_process_block+0xb48>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602be2c:	d2805788 	mov	x8, #0x2bc                 	// #700
    9602be30:	b9409fa0 	ldr	w0, [x29, #156]
    9602be34:	f2a07588 	movk	x8, #0x3ac, lsl #16
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602be38:	d2805807 	mov	x7, #0x2c0                 	// #704
    9602be3c:	f2a07587 	movk	x7, #0x3ac, lsl #16
	err = se_create_keyiv_pkt(
    9602be40:	52800024 	mov	w4, #0x1                   	// #1
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602be44:	b9000100 	str	w0, [x8]
	err = se_create_keyiv_pkt(
    9602be48:	910273a5 	add	x5, x29, #0x9c
    9602be4c:	2a0403e3 	mov	w3, w4
    9602be50:	2a0403e2 	mov	w2, w4
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602be54:	b94000e0 	ldr	w0, [x7]
	err = se_create_keyiv_pkt(
    9602be58:	2a0403e1 	mov	w1, w4
	*keydata++ = tegrabl_get_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0);
    9602be5c:	b90000c0 	str	w0, [x6]
	err = se_create_keyiv_pkt(
    9602be60:	2a0903e0 	mov	w0, w9
    9602be64:	97fffb74 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602be68:	35000620 	cbnz	w0, 9602bf2c <tegrabl_se_aes_process_block+0xb48>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_ADDR_0, se_keytable_addr);
    9602be6c:	b9409fa0 	ldr	w0, [x29, #156]
	err = se_create_keyiv_pkt(
    9602be70:	52800044 	mov	w4, #0x2                   	// #2
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602be74:	b9000100 	str	w0, [x8]
	err = se_create_keyiv_pkt(
    9602be78:	52800023 	mov	w3, #0x1                   	// #1
    9602be7c:	910273a5 	add	x5, x29, #0x9c
    9602be80:	2a0403e2 	mov	w2, w4
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602be84:	b94000e0 	ldr	w0, [x7]
	err = se_create_keyiv_pkt(
    9602be88:	2a0303e1 	mov	w1, w3
	*keydata++ = tegrabl_get_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0);
    9602be8c:	b90004c0 	str	w0, [x6, #4]
	err = se_create_keyiv_pkt(
    9602be90:	2a0903e0 	mov	w0, w9
    9602be94:	97fffb68 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602be98:	350004a0 	cbnz	w0, 9602bf2c <tegrabl_se_aes_process_block+0xb48>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_ADDR_0, se_keytable_addr);
    9602be9c:	b9409fa0 	ldr	w0, [x29, #156]
	err = se_create_keyiv_pkt(
    9602bea0:	52800064 	mov	w4, #0x3                   	// #3
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bea4:	b9000100 	str	w0, [x8]
	err = se_create_keyiv_pkt(
    9602bea8:	52800023 	mov	w3, #0x1                   	// #1
    9602beac:	910273a5 	add	x5, x29, #0x9c
    9602beb0:	2a0403e2 	mov	w2, w4
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602beb4:	b94000e0 	ldr	w0, [x7]
	err = se_create_keyiv_pkt(
    9602beb8:	2a0303e1 	mov	w1, w3
	*keydata++ = tegrabl_get_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0);
    9602bebc:	b90008c0 	str	w0, [x6, #8]
	err = se_create_keyiv_pkt(
    9602bec0:	2a0903e0 	mov	w0, w9
    9602bec4:	97fffb5c 	bl	9602ac34 <se_create_keyiv_pkt>
	if (err != TEGRABL_NO_ERROR) {
    9602bec8:	35000320 	cbnz	w0, 9602bf2c <tegrabl_se_aes_process_block+0xb48>
	tegrabl_set_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_ADDR_0, se_keytable_addr);
    9602becc:	b9409fa0 	ldr	w0, [x29, #156]
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bed0:	52800021 	mov	w1, #0x1                   	// #1
    9602bed4:	b9000100 	str	w0, [x8]
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602bed8:	b94000e0 	ldr	w0, [x7]
	*keydata++ = tegrabl_get_se0_reg(SE0_AES0_CRYPTO_KEYTABLE_DATA_0);
    9602bedc:	b9000cc0 	str	w0, [x6, #12]
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bee0:	d2800a00 	mov	x0, #0x50                  	// #80
    9602bee4:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602bee8:	b9000001 	str	w1, [x0]
		input_params->size_left -= size;
    9602beec:	b9401680 	ldr	w0, [x20, #20]
		buffer += size;
    9602bef0:	2a1503e1 	mov	w1, w21
		input_params->size_left -= size;
    9602bef4:	4b150000 	sub	w0, w0, w21
    9602bef8:	b9001680 	str	w0, [x20, #20]
		buffer += size;
    9602befc:	f94047a0 	ldr	x0, [x29, #136]
    9602bf00:	8b010000 	add	x0, x0, x1
    9602bf04:	f90047a0 	str	x0, [x29, #136]
		input_params->dst += size;
    9602bf08:	f9400680 	ldr	x0, [x20, #8]
    9602bf0c:	8b010000 	add	x0, x0, x1
    9602bf10:	f9000680 	str	x0, [x20, #8]
	} while (size_to_process > 0);
    9602bf14:	b94087a0 	ldr	w0, [x29, #132]
    9602bf18:	6b150000 	subs	w0, w0, w21
    9602bf1c:	b90087a0 	str	w0, [x29, #132]
    9602bf20:	54ffa881 	b.ne	9602b430 <tegrabl_se_aes_process_block+0x4c>  // b.any
		err = _tegrabl_se_aes_process_block(input_params, context);
    9602bf24:	52800000 	mov	w0, #0x0                   	// #0
fail:
    9602bf28:	17fffd8e 	b	9602b560 <tegrabl_se_aes_process_block+0x17c>
	NV_WRITE32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg, data);
    9602bf2c:	d2800a01 	mov	x1, #0x50                  	// #80
    9602bf30:	52800022 	mov	w2, #0x1                   	// #1
    9602bf34:	f2a07581 	movk	x1, #0x3ac, lsl #16
    9602bf38:	b9000022 	str	w2, [x1]
    9602bf3c:	17fffd86 	b	9602b554 <tegrabl_se_aes_process_block+0x170>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602bf40:	52800040 	mov	w0, #0x2                   	// #2
    9602bf44:	72a2a2a0 	movk	w0, #0x1515, lsl #16
}
    9602bf48:	d65f03c0 	ret

000000009602bf4c <tegrabl_se_aes_close>:
    9602bf4c:	d65f03c0 	ret

000000009602bf50 <tegrabl_se_rsa_pss_verify>:
}

tegrabl_error_t tegrabl_se_rsa_pss_verify(
	uint8_t rsa_keyslot, uint32_t rsa_keysize_bits, uint8_t *pmessage_hash,
	uint32_t *pinput_signature, uint8_t hash_algorithm, uint32_t slen)
{
    9602bf50:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
	static uint32_t m_prime_size;
	uint32_t em_minus_hlen_minus_1 = 0;
	uint32_t hash_algorithm_32 = (uint32_t)hash_algorithm;
	bool flag = false;

	if ((rsa_keyslot >= SE_RSA_MAX_KEYSLOTS) ||
    9602bf54:	7120003f 	cmp	w1, #0x800
{
    9602bf58:	910003fd 	mov	x29, sp
    9602bf5c:	a90153f3 	stp	x19, x20, [sp, #16]
    9602bf60:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602bf64:	12001c15 	and	w21, w0, #0xff
    9602bf68:	a90363f7 	stp	x23, x24, [sp, #48]
	if ((rsa_keyslot >= SE_RSA_MAX_KEYSLOTS) ||
    9602bf6c:	7a439aa2 	ccmp	w21, #0x3, #0x2, ls  // ls = plast
{
    9602bf70:	a9046bf9 	stp	x25, x26, [sp, #64]
    9602bf74:	a90573fb 	stp	x27, x28, [sp, #80]
	if ((rsa_keyslot >= SE_RSA_MAX_KEYSLOTS) ||
    9602bf78:	54002128 	b.hi	9602c39c <tegrabl_se_rsa_pss_verify+0x44c>  // b.pmore
		(rsa_keysize_bits > RSA_MAX_EXPONENT_SIZE_BITS) ||
		(pmessage_hash == NULL) ||
    9602bf7c:	f100005f 	cmp	x2, #0x0
    9602bf80:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
    9602bf84:	540020c0 	b.eq	9602c39c <tegrabl_se_rsa_pss_verify+0x44c>  // b.none
    9602bf88:	12001c9b 	and	w27, w4, #0xff
		(pinput_signature == NULL)) {
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	if (!((slen == ((uint32_t)(ARSE_SHA1_HASH_SIZE) / 8U)) ||
    9602bf8c:	510050a4 	sub	w4, w5, #0x14
    9602bf90:	7100b09f 	cmp	w4, #0x2c
    9602bf94:	54002088 	b.hi	9602c3a4 <tegrabl_se_rsa_pss_verify+0x454>  // b.pmore
    9602bf98:	d2822020 	mov	x0, #0x1101                	// #4353
    9602bf9c:	f2a20000 	movk	x0, #0x1000, lsl #16
    9602bfa0:	f2c20000 	movk	x0, #0x1000, lsl #32
    9602bfa4:	9ac42400 	lsr	x0, x0, x4
    9602bfa8:	36001fe0 	tbz	w0, #0, 9602c3a4 <tegrabl_se_rsa_pss_verify+0x454>
		(slen == ((uint32_t)(ARSE_SHA384_HASH_SIZE) / 8U)) ||
		(slen == ((uint32_t)(ARSE_SHA512_HASH_SIZE) / 8U)))) {
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
	}

	switch (hash_algorithm_32) {
    9602bfac:	71001f7f 	cmp	w27, #0x7
    9602bfb0:	54001fe8 	b.hi	9602c3ac <tegrabl_se_rsa_pss_verify+0x45c>  // b.pmore
    9602bfb4:	d00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602bfb8:	91061000 	add	x0, x0, #0x184
    9602bfbc:	787b5800 	ldrh	w0, [x0, w27, uxtw #1]
    9602bfc0:	10000064 	adr	x4, 9602bfcc <tegrabl_se_rsa_pss_verify+0x7c>
    9602bfc4:	8b20a880 	add	x0, x4, w0, sxth #2
    9602bfc8:	d61f0000 	br	x0
	case SE_MODE_PKT_SHAMODE_SHA1:
		hlen =  ARSE_SHA1_HASH_SIZE / 8;
    9602bfcc:	52800299 	mov	w25, #0x14                  	// #20
	}
	if (flag) {
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
	}

	if (buff_size == 0U) {
    9602bfd0:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602bfd4:	2a0103f6 	mov	w22, w1
    9602bfd8:	f9003fa2 	str	x2, [x29, #120]
    9602bfdc:	aa0303f3 	mov	x19, x3
    9602bfe0:	b94b0801 	ldr	w1, [x0, #2824]
    9602bfe4:	b9009fa5 	str	w5, [x29, #156]
    9602bfe8:	34000be1 	cbz	w1, 9602c164 <tegrabl_se_rsa_pss_verify+0x214>
			ret = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
			goto fail;
		}
	}

	if (message_representative == NULL) {
    9602bfec:	f0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602bff0:	f945ac01 	ldr	x1, [x0, #2904]
    9602bff4:	b5000081 	cbnz	x1, 9602c004 <tegrabl_se_rsa_pss_verify+0xb4>
		message_representative = (uint32_t *)buff;
    9602bff8:	f0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602bffc:	f9458021 	ldr	x1, [x1, #2816]
    9602c000:	f905ac01 	str	x1, [x0, #2904]
	}

	if (db_mask == NULL) {
    9602c004:	d0000254 	adrp	x20, 96076000 <free_dram_block+0x38e8>
    9602c008:	f9458e81 	ldr	x1, [x20, #2840]
    9602c00c:	b50000e1 	cbnz	x1, 9602c028 <tegrabl_se_rsa_pss_verify+0xd8>
		db_mask = (uint8_t *)((uintptr_t)buff +
    9602c010:	d0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602c014:	b94b6022 	ldr	w2, [x1, #2912]
    9602c018:	d0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602c01c:	f9458021 	ldr	x1, [x1, #2816]
    9602c020:	8b020021 	add	x1, x1, x2
    9602c024:	f9058e81 	str	x1, [x20, #2840]
				message_representative_size);
	}

	if (m_prime == NULL) {
    9602c028:	d0000258 	adrp	x24, 96076000 <free_dram_block+0x38e8>
    9602c02c:	f945ab01 	ldr	x1, [x24, #2896]
    9602c030:	b5000141 	cbnz	x1, 9602c058 <tegrabl_se_rsa_pss_verify+0x108>
		m_prime = buff + message_representative_size +
    9602c034:	d0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602c038:	d0000242 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    9602c03c:	b94b6021 	ldr	w1, [x1, #2912]
    9602c040:	b94b2042 	ldr	w2, [x2, #2848]
    9602c044:	8b020022 	add	x2, x1, x2
    9602c048:	d0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602c04c:	f9458021 	ldr	x1, [x1, #2816]
    9602c050:	8b020021 	add	x1, x1, x2
    9602c054:	f905ab01 	str	x1, [x24, #2896]
	}

	pmr_se = &message_representative[0];
	pmr_r5 = &message_representative[0];

	if (db == NULL) {
    9602c058:	d000025a 	adrp	x26, 96076000 <free_dram_block+0x38e8>
	pmr_se = &message_representative[0];
    9602c05c:	f945ac17 	ldr	x23, [x0, #2904]
	if (db == NULL) {
    9602c060:	f9458b40 	ldr	x0, [x26, #2832]
    9602c064:	b50000a0 	cbnz	x0, 9602c078 <tegrabl_se_rsa_pss_verify+0x128>
		db_size = (rsa_keysize_bits / 8UL) - hlen - 1UL;
    9602c068:	2a3903e1 	mvn	w1, w25
		db = tegrabl_alloc(TEGRABL_HEAP_DEFAULT, db_size);
    9602c06c:	0b560c21 	add	w1, w1, w22, lsr #3
    9602c070:	97ffea85 	bl	96026a84 <tegrabl_alloc>
    9602c074:	f9058b40 	str	x0, [x26, #2832]
	 *		"invalid signature" and stop.
	 *
	 */

	/* Calculate m = s^e mod n */
	ret = tegrabl_se_rsa_modular_exp(
    9602c078:	aa1703e4 	mov	x4, x23
    9602c07c:	aa1303e3 	mov	x3, x19
    9602c080:	52800402 	mov	w2, #0x20                  	// #32
    9602c084:	2a1603e1 	mov	w1, w22
    9602c088:	2a1503e0 	mov	w0, w21
    9602c08c:	97fffc43 	bl	9602b198 <tegrabl_se_rsa_modular_exp>
		rsa_keyslot, rsa_keysize_bits, 32,
		(uint8_t *)pinput_signature, (uint8_t *)pmr_se);

	if (ret != TEGRABL_NO_ERROR) {
    9602c090:	35001740 	cbnz	w0, 9602c378 <tegrabl_se_rsa_pss_verify+0x428>
	const uint32_t em_len = NV_ICEIL(rsa_keysize_bits - 1UL, 8UL);
    9602c094:	2a1603f3 	mov	w19, w22
	 * in ascending order in a byte array, i.e. the 0xbc trailer field is the
	 * first value of the array, when it is the "last" vlaue in the spec.
	 * Reversing the byte order in the array will match the endianness
	 * of the PKCS #1 spec and make for code that directly matches the spec.
	 */
	ret = tegrabl_se_reverse_list((uint8_t *)pmr_r5, em_len);
    9602c098:	aa1703e0 	mov	x0, x23
	const uint32_t em_len = NV_ICEIL(rsa_keysize_bits - 1UL, 8UL);
    9602c09c:	91001a73 	add	x19, x19, #0x6
    9602c0a0:	d343fe73 	lsr	x19, x19, #3
	ret = tegrabl_se_reverse_list((uint8_t *)pmr_r5, em_len);
    9602c0a4:	2a1303e1 	mov	w1, w19
    9602c0a8:	940000f0 	bl	9602c468 <tegrabl_se_reverse_list>
	if (ret != TEGRABL_NO_ERROR) {
    9602c0ac:	35001660 	cbnz	w0, 9602c378 <tegrabl_se_rsa_pss_verify+0x428>
	 * Ceiling(modBits-1/8) < hlen + slen + 2
	 * 256 octets < 32 octets + 32 octets + 2
	 * (assuming SHA256 as the hash function)
	 * Salt length is equal to hash length
	 */
	if (em_len < (hlen + slen + 2UL)) {
    9602c0b0:	b9409fa0 	ldr	w0, [x29, #156]
    9602c0b4:	0b190000 	add	w0, w0, w25
    9602c0b8:	b9009ba0 	str	w0, [x29, #152]
    9602c0bc:	91000800 	add	x0, x0, #0x2
    9602c0c0:	eb00027f 	cmp	x19, x0
    9602c0c4:	54001783 	b.cc	9602c3b4 <tegrabl_se_rsa_pss_verify+0x464>  // b.lo, b.ul, b.last
	}

	/* Step 4. If the rightmost octet of em does not have hexadecimal
	 * value 0xbc, output "inconsistent" and stop.
	 */
	if (em[em_len - 1UL] != 0xbcUL) {
    9602c0c8:	8b1302e0 	add	x0, x23, x19
    9602c0cc:	385ff000 	ldurb	w0, [x0, #-1]
    9602c0d0:	7102f01f 	cmp	w0, #0xbc
    9602c0d4:	54001741 	b.ne	9602c3bc <tegrabl_se_rsa_pss_verify+0x46c>  // b.any
	/* Step 6. If the leftmost 8em_len - emBits bits of the leftmost
	 * octet in masked_db are not all equal to zero, output "inconsistent"
	 * and stop.
	 * 8em_len - emBits = 8*256 - 2047 = 1 (assuming 2048 key size and sha256)
	 */
	lowest_bits = (uint8_t)((8UL * em_len) - (rsa_keysize_bits - 1UL));
    9602c0d8:	52800020 	mov	w0, #0x1                   	// #1
    9602c0dc:	4b160016 	sub	w22, w0, w22
    9602c0e0:	0b130ed6 	add	w22, w22, w19, lsl #3
	first_octet_masked_db = masked_db[0] & (0xFFU << (8U - lowest_bits));
    9602c0e4:	52800101 	mov	w1, #0x8                   	// #8
    9602c0e8:	4b360021 	sub	w1, w1, w22, uxtb
    9602c0ec:	52801ff6 	mov	w22, #0xff                  	// #255
    9602c0f0:	1ac122d6 	lsl	w22, w22, w1
    9602c0f4:	12001ec1 	and	w1, w22, #0xff
    9602c0f8:	b90097a1 	str	w1, [x29, #148]
    9602c0fc:	394002e1 	ldrb	w1, [x23]
	if (first_octet_masked_db > 0U) {
    9602c100:	b94097a2 	ldr	w2, [x29, #148]
    9602c104:	6a01005f 	tst	w2, w1
    9602c108:	540015e1 	b.ne	9602c3c4 <tegrabl_se_rsa_pss_verify+0x474>  // b.any
	if (buff == NULL) {
    9602c10c:	d0000248 	adrp	x8, 96076000 <free_dram_block+0x38e8>
		goto fail;
	}

	/* Step 7. Let dbMask = MGF(H, em_len - hlen - 1). */

	ret = tegrabl_se_mask_generation(
    9602c110:	f9458e81 	ldr	x1, [x20, #2840]
    9602c114:	f90047a1 	str	x1, [x29, #136]
    9602c118:	2a1903fc 	mov	w28, w25
	if (buff == NULL) {
    9602c11c:	f9457d01 	ldr	x1, [x8, #2808]
    9602c120:	aa0803f6 	mov	x22, x8
    9602c124:	b5000421 	cbnz	x1, 9602c1a8 <tegrabl_se_rsa_pss_verify+0x258>
		buff = tegrabl_alloc(TEGRABL_HEAP_DMA, hlen + 4UL);
    9602c128:	91001381 	add	x1, x28, #0x4
    9602c12c:	97ffea56 	bl	96026a84 <tegrabl_alloc>
    9602c130:	f9057ec0 	str	x0, [x22, #2808]
		if (buff == NULL) {
    9602c134:	b50003a0 	cbnz	x0, 9602c1a8 <tegrabl_se_rsa_pss_verify+0x258>
		H, em_minus_hlen_minus_1, db_mask, hash_algorithm, hlen);

	if (ret != TEGRABL_NO_ERROR) {
		ret = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 3);
    9602c138:	52806300 	mov	w0, #0x318                 	// #792
		ret = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 2);
    9602c13c:	72a2a2a0 	movk	w0, #0x1515, lsl #16
    9602c140:	1400008e 	b	9602c378 <tegrabl_se_rsa_pss_verify+0x428>
		hlen = ARSE_SHA384_HASH_SIZE / 8;
    9602c144:	52800619 	mov	w25, #0x30                  	// #48
    9602c148:	17ffffa2 	b	9602bfd0 <tegrabl_se_rsa_pss_verify+0x80>
		hlen = ARSE_SHA256_HASH_SIZE / 8;
    9602c14c:	52800419 	mov	w25, #0x20                  	// #32
    9602c150:	17ffffa0 	b	9602bfd0 <tegrabl_se_rsa_pss_verify+0x80>
		hlen = ARSE_SHA224_HASH_SIZE / 8;
    9602c154:	52800399 	mov	w25, #0x1c                  	// #28
    9602c158:	17ffff9e 	b	9602bfd0 <tegrabl_se_rsa_pss_verify+0x80>
		hlen = ARSE_SHA512_HASH_SIZE / 8;
    9602c15c:	52800819 	mov	w25, #0x40                  	// #64
    9602c160:	17ffff9c 	b	9602bfd0 <tegrabl_se_rsa_pss_verify+0x80>
		message_representative_size =
    9602c164:	d0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602c168:	52808002 	mov	w2, #0x400                 	// #1024
    9602c16c:	b90b6022 	str	w2, [x1, #2912]
		db_mask_size = (rsa_keysize_bits / 8UL) - hlen - 1UL;
    9602c170:	53037ec1 	lsr	w1, w22, #3
    9602c174:	4b190021 	sub	w1, w1, w25
    9602c178:	d0000242 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    9602c17c:	51000423 	sub	w3, w1, #0x1
		buff_size += m_prime_size;
    9602c180:	11121c21 	add	w1, w1, #0x487
		db_mask_size = (rsa_keysize_bits / 8UL) - hlen - 1UL;
    9602c184:	b90b2043 	str	w3, [x2, #2848]
		buff_size += m_prime_size;
    9602c188:	b90b0801 	str	w1, [x0, #2824]
		buff = tegrabl_alloc(TEGRABL_HEAP_DMA, buff_size);
    9602c18c:	52800020 	mov	w0, #0x1                   	// #1
    9602c190:	97ffea3d 	bl	96026a84 <tegrabl_alloc>
    9602c194:	d0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602c198:	f9058020 	str	x0, [x1, #2816]
		if (buff == NULL) {
    9602c19c:	b5fff280 	cbnz	x0, 9602bfec <tegrabl_se_rsa_pss_verify+0x9c>
			ret = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9602c1a0:	52800060 	mov	w0, #0x3                   	// #3
    9602c1a4:	17ffffe6 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>
	em_minus_hlen_minus_1 = em_len - hlen - 1UL;
    9602c1a8:	4b190273 	sub	w19, w19, w25
	memcpy(buff, mgf_seed, hlen);
    9602c1ac:	aa1c03e2 	mov	x2, x28
	em_minus_hlen_minus_1 = em_len - hlen - 1UL;
    9602c1b0:	51000675 	sub	w21, w19, #0x1
	H = em + masked_dblen;
    9602c1b4:	8b3542e0 	add	x0, x23, w21, uxtw
    9602c1b8:	f90043a0 	str	x0, [x29, #128]
	memcpy(buff, mgf_seed, hlen);
    9602c1bc:	aa0003e1 	mov	x1, x0
    9602c1c0:	f9457ec0 	ldr	x0, [x22, #2808]
    9602c1c4:	97fff758 	bl	96029f24 <memcpy>
	input.block_addr = (uintptr_t)buff;
    9602c1c8:	f9457ec0 	ldr	x0, [x22, #2808]
	input.block_size = hlen + 4UL;
    9602c1cc:	11001321 	add	w1, w25, #0x4
	input.block_addr = (uintptr_t)buff;
    9602c1d0:	f90057a0 	str	x0, [x29, #168]
	buff[hlen + 3UL] = 0;
    9602c1d4:	91000f89 	add	x9, x28, #0x3
	buff[hlen + 1UL] = 0;
    9602c1d8:	8b1c0002 	add	x2, x0, x28
	input.size_left = hlen + 4UL;
    9602c1dc:	291607a1 	stp	w1, w1, [x29, #176]
	buff[hlen + 0UL] = 0;
    9602c1e0:	383c681f 	strb	wzr, [x0, x28]
	for (counter = 0; counter <= (NV_ICEIL(mask_len, hlen) - 1UL); counter++) {
    9602c1e4:	52800007 	mov	w7, #0x0                   	// #0
    9602c1e8:	52800004 	mov	w4, #0x0                   	// #0
	buff[hlen + 1UL] = 0;
    9602c1ec:	3900045f 	strb	wzr, [x2, #1]
	buff[hlen + 2UL] = 0;
    9602c1f0:	3900085f 	strb	wzr, [x2, #2]
	for (counter = 0; counter <= (NV_ICEIL(mask_len, hlen) - 1UL); counter++) {
    9602c1f4:	51000722 	sub	w2, w25, #0x1
    9602c1f8:	0b150042 	add	w2, w2, w21
	buff[hlen + 3UL] = 0;
    9602c1fc:	3829681f 	strb	wzr, [x0, x9]
	context.input_size = hlen + 4UL;
    9602c200:	b900a3a1 	str	w1, [x29, #160]
	context.hash_algorithm = hash_algorithm;
    9602c204:	390293bb 	strb	w27, [x29, #164]
	for (counter = 0; counter <= (NV_ICEIL(mask_len, hlen) - 1UL); counter++) {
    9602c208:	1ad90842 	udiv	w2, w2, w25
    9602c20c:	d1000442 	sub	x2, x2, #0x1
    9602c210:	eb24405f 	cmp	x2, w4, uxtw
    9602c214:	540000a2 	b.cs	9602c228 <tegrabl_se_rsa_pss_verify+0x2d8>  // b.hs, b.nlast
		goto fail;
	}

	/* Step 8. Let DB = masked_db XOR dbMask */
	for (i = 0; i < masked_dblen; i++) {
		db[i] = masked_db[i] ^ db_mask[i];
    9602c218:	f9458e84 	ldr	x4, [x20, #2840]
    9602c21c:	d2800000 	mov	x0, #0x0                   	// #0
    9602c220:	f9458b41 	ldr	x1, [x26, #2832]
    9602c224:	1400001a 	b	9602c28c <tegrabl_se_rsa_pss_verify+0x33c>
		buff[hlen + 3UL] = (uint8_t)counter;
    9602c228:	f9457ec0 	ldr	x0, [x22, #2808]
		ret = _tegrabl_se_sha_process_block(&input, &context);
    9602c22c:	910283a1 	add	x1, x29, #0xa0
    9602c230:	f90033a2 	str	x2, [x29, #96]
		buff[hlen + 3UL] = (uint8_t)counter;
    9602c234:	b9006fa4 	str	w4, [x29, #108]
    9602c238:	38296804 	strb	w4, [x0, x9]
		input.hash_addr = (uintptr_t)&db_mask_buffer[counter * hlen];
    9602c23c:	f94047a0 	ldr	x0, [x29, #136]
		buff[hlen + 3UL] = (uint8_t)counter;
    9602c240:	f9003ba9 	str	x9, [x29, #112]
		input.hash_addr = (uintptr_t)&db_mask_buffer[counter * hlen];
    9602c244:	b90093a7 	str	w7, [x29, #144]
    9602c248:	8b274000 	add	x0, x0, w7, uxtw
    9602c24c:	f9005fa0 	str	x0, [x29, #184]
		ret = _tegrabl_se_sha_process_block(&input, &context);
    9602c250:	9102a3a0 	add	x0, x29, #0xa8
    9602c254:	97fff9eb 	bl	9602aa00 <_tegrabl_se_sha_process_block>
    9602c258:	b94093a7 	ldr	w7, [x29, #144]
    9602c25c:	0b1900e7 	add	w7, w7, w25
		if (ret != TEGRABL_NO_ERROR) {
    9602c260:	35fff6c0 	cbnz	w0, 9602c138 <tegrabl_se_rsa_pss_verify+0x1e8>
	for (counter = 0; counter <= (NV_ICEIL(mask_len, hlen) - 1UL); counter++) {
    9602c264:	b9406fa4 	ldr	w4, [x29, #108]
    9602c268:	f94033a2 	ldr	x2, [x29, #96]
    9602c26c:	11000484 	add	w4, w4, #0x1
    9602c270:	f9403ba9 	ldr	x9, [x29, #112]
    9602c274:	17ffffe7 	b	9602c210 <tegrabl_se_rsa_pss_verify+0x2c0>
		db[i] = masked_db[i] ^ db_mask[i];
    9602c278:	38606ae2 	ldrb	w2, [x23, x0]
    9602c27c:	38606887 	ldrb	w7, [x4, x0]
    9602c280:	4a070042 	eor	w2, w2, w7
    9602c284:	38206822 	strb	w2, [x1, x0]
    9602c288:	91000400 	add	x0, x0, #0x1
	for (i = 0; i < masked_dblen; i++) {
    9602c28c:	6b0002bf 	cmp	w21, w0
    9602c290:	54ffff48 	b.hi	9602c278 <tegrabl_se_rsa_pss_verify+0x328>  // b.pmore
	}

	/* Step 9. Set the leftmost 8em_len - emBits bits of the leftmost
	 * octet in DB to zero.
	 */
	db[0] &= ~(0xFFU << (8U - lowest_bits));
    9602c294:	39400020 	ldrb	w0, [x1]
    9602c298:	b94097a2 	ldr	w2, [x29, #148]
    9602c29c:	0a220016 	bic	w22, w0, w2
	 * zero or if the octet at position em_len - hlen - slen - 1 (the leftmost
	 * or lower position is "position 1") does not have hexadecimal value
	 * 0x01, output "inconsistent" and stop.
	 */

	for (i = 0; (db[i] == 0U) && (i < (em_len - hlen - slen - 2UL)); i++) {
    9602c2a0:	b9409fa2 	ldr	w2, [x29, #156]
	db[0] &= ~(0xFFU << (8U - lowest_bits));
    9602c2a4:	39000036 	strb	w22, [x1]
	for (i = 0; (db[i] == 0U) && (i < (em_len - hlen - slen - 2UL)); i++) {
    9602c2a8:	52800000 	mov	w0, #0x0                   	// #0
    9602c2ac:	4b020273 	sub	w19, w19, w2
    9602c2b0:	d1000a73 	sub	x19, x19, #0x2
    9602c2b4:	2a0003e2 	mov	w2, w0
    9602c2b8:	38626824 	ldrb	w4, [x1, x2]
    9602c2bc:	35000064 	cbnz	w4, 9602c2c8 <tegrabl_se_rsa_pss_verify+0x378>
    9602c2c0:	eb13005f 	cmp	x2, x19
    9602c2c4:	54000683 	b.cc	9602c394 <tegrabl_se_rsa_pss_verify+0x444>  // b.lo, b.ul, b.last
	}
	/* if octet at position em_len - hlen - slen - 1
	 * e.g. 256 - 32 - 32 - 1 = 191th position
	 * position 191 is 190th element of the array, so subtract by 1 more.
	 */
	if (db[em_minus_hlen_minus_1 - slen - 1UL] != 0x1UL) {
    9602c2c8:	b9409fa0 	ldr	w0, [x29, #156]
    9602c2cc:	4b0002a5 	sub	w5, w21, w0
    9602c2d0:	8b254020 	add	x0, x1, w5, uxtw
    9602c2d4:	385ff000 	ldurb	w0, [x0, #-1]
    9602c2d8:	7100041f 	cmp	w0, #0x1
    9602c2dc:	54000781 	b.ne	9602c3cc <tegrabl_se_rsa_pss_verify+0x47c>  // b.any

	/* Step 12. Let M' = 0x 00 00 00 00 00 00 00 00 || mHash || salt;
	 * Set eight initial octets to 0.
	 */
	for (i = 0; i < 8UL; i++) {
		m_prime[i] = 0;
    9602c2e0:	f945ab02 	ldr	x2, [x24, #2896]
    9602c2e4:	d2800000 	mov	x0, #0x0                   	// #0
    9602c2e8:	3820685f 	strb	wzr, [x2, x0]
    9602c2ec:	91000400 	add	x0, x0, #0x1
	for (i = 0; i < 8UL; i++) {
    9602c2f0:	f100201f 	cmp	x0, #0x8
    9602c2f4:	54ffffa1 	b.ne	9602c2e8 <tegrabl_se_rsa_pss_verify+0x398>  // b.any
    9602c2f8:	d2800000 	mov	x0, #0x0                   	// #0
	}
	/* Copy salt to M_Prime. Note: DB is an octet string of length
	 * em_len - hlen - 1. Subtract slen from DB length to get salt location.
	 */
	for (i = 0; i < hlen; i++) {
		m_prime[i + 8UL] = pmessage_hash[i];
    9602c2fc:	f9403fa3 	ldr	x3, [x29, #120]
    9602c300:	8b000044 	add	x4, x2, x0
    9602c304:	38606867 	ldrb	w7, [x3, x0]
    9602c308:	39002087 	strb	w7, [x4, #8]
		m_prime[i + 8UL + hlen] = db[em_minus_hlen_minus_1 - slen + i];
    9602c30c:	0b0000a4 	add	w4, w5, w0
    9602c310:	38646827 	ldrb	w7, [x1, x4]
    9602c314:	8b000384 	add	x4, x28, x0
    9602c318:	8b040044 	add	x4, x2, x4
    9602c31c:	91000400 	add	x0, x0, #0x1
	for (i = 0; i < hlen; i++) {
    9602c320:	6b00033f 	cmp	w25, w0
		m_prime[i + 8UL + hlen] = db[em_minus_hlen_minus_1 - slen + i];
    9602c324:	39002087 	strb	w7, [x4, #8]
	for (i = 0; i < hlen; i++) {
    9602c328:	54fffea8 	b.hi	9602c2fc <tegrabl_se_rsa_pss_verify+0x3ac>  // b.pmore
	}

	/* Step 13. Let H' = Hash(M') */
	context.input_size = 8UL + hlen + slen;
    9602c32c:	b9409ba0 	ldr	w0, [x29, #152]
	input.block_addr = (uintptr_t)m_prime;
	input.block_size = 8UL + hlen + slen;
	input.size_left = 8UL + hlen + slen;
	input.hash_addr = (uintptr_t)m_prime;

	ret = _tegrabl_se_sha_process_block(&input, &context);
    9602c330:	910283a1 	add	x1, x29, #0xa0
	context.hash_algorithm = hash_algorithm;
    9602c334:	390293bb 	strb	w27, [x29, #164]
	context.input_size = 8UL + hlen + slen;
    9602c338:	11002015 	add	w21, w0, #0x8
	ret = _tegrabl_se_sha_process_block(&input, &context);
    9602c33c:	9102a3a0 	add	x0, x29, #0xa8
	context.input_size = 8UL + hlen + slen;
    9602c340:	b900a3b5 	str	w21, [x29, #160]
	input.block_addr = (uintptr_t)m_prime;
    9602c344:	f90057a2 	str	x2, [x29, #168]
	input.size_left = 8UL + hlen + slen;
    9602c348:	291657b5 	stp	w21, w21, [x29, #176]
	input.hash_addr = (uintptr_t)m_prime;
    9602c34c:	f9005fa2 	str	x2, [x29, #184]
	ret = _tegrabl_se_sha_process_block(&input, &context);
    9602c350:	97fff9ac 	bl	9602aa00 <_tegrabl_se_sha_process_block>

	if (ret != TEGRABL_NO_ERROR) {
    9602c354:	35000120 	cbnz	w0, 9602c378 <tegrabl_se_rsa_pss_verify+0x428>
	}

	/* Step 14. If H = H' output "consistent".
	 * Otherwise, output "inconsistent".
	 */
	if (memcmp(H, (uint8_t *)m_prime, hlen) != 0) {
    9602c358:	f945ab01 	ldr	x1, [x24, #2896]
    9602c35c:	aa1c03e2 	mov	x2, x28
    9602c360:	f94043a0 	ldr	x0, [x29, #128]
    9602c364:	97fff743 	bl	9602a070 <memcmp>
		ret = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 6);
    9602c368:	7100001f 	cmp	w0, #0x0
    9602c36c:	5280c300 	mov	w0, #0x618                 	// #1560
    9602c370:	72a2a2a0 	movk	w0, #0x1515, lsl #16
    9602c374:	1a8003e0 	csel	w0, wzr, w0, eq  // eq = none
		goto fail;
	}

fail:
	return ret;
}
    9602c378:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602c37c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602c380:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602c384:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9602c388:	a94573fb 	ldp	x27, x28, [sp, #80]
    9602c38c:	a8cc7bfd 	ldp	x29, x30, [sp], #192
    9602c390:	d65f03c0 	ret
	for (i = 0; (db[i] == 0U) && (i < (em_len - hlen - slen - 2UL)); i++) {
    9602c394:	11000400 	add	w0, w0, #0x1
    9602c398:	17ffffc7 	b	9602c2b4 <tegrabl_se_rsa_pss_verify+0x364>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602c39c:	52800040 	mov	w0, #0x2                   	// #2
    9602c3a0:	17ffff67 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9602c3a4:	52802040 	mov	w0, #0x102                 	// #258
    9602c3a8:	17ffff65 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9602c3ac:	52804040 	mov	w0, #0x202                 	// #514
    9602c3b0:	17ffff63 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>
		ret = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 0);
    9602c3b4:	52800300 	mov	w0, #0x18                  	// #24
    9602c3b8:	17ffff61 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>
		ret = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 1);
    9602c3bc:	52802300 	mov	w0, #0x118                 	// #280
    9602c3c0:	17ffff5f 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>
		ret = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 2);
    9602c3c4:	52804300 	mov	w0, #0x218                 	// #536
    9602c3c8:	17ffff5d 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>
		ret = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 5);
    9602c3cc:	5280a300 	mov	w0, #0x518                 	// #1304
    9602c3d0:	17ffff5b 	b	9602c13c <tegrabl_se_rsa_pss_verify+0x1ec>

000000009602c3d4 <tegrabl_se_clear_aes_keyslot>:
fail:
	return ret;
}

tegrabl_error_t tegrabl_se_clear_aes_keyslot(uint8_t keyslot)
{
    9602c3d4:	12001c0d 	and	w13, w0, #0xff
	static uint32_t keydata[8];
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
	uint32_t reg;

	if (keyslot >= SE_AES_MAX_KEYSLOTS) {
    9602c3d8:	71003dbf 	cmp	w13, #0xf
    9602c3dc:	540000c9 	b.ls	9602c3f4 <tegrabl_se_clear_aes_keyslot+0x20>  // b.plast
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
    9602c3e0:	52800000 	mov	w0, #0x0                   	// #0
fail:
	if (ret != TEGRABL_NO_ERROR) {
		pr_debug("Error = %d, in tegrabl_se_clear_aes_keyslot\n", ret);
	}
	return ret;
}
    9602c3e4:	d65f03c0 	ret
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
    9602c3e8:	52800000 	mov	w0, #0x0                   	// #0
}
    9602c3ec:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602c3f0:	d65f03c0 	ret
	ret = tegrabl_se_aes_write_key_iv(keyslot,
    9602c3f4:	d000024c 	adrp	x12, 96076000 <free_dram_block+0x38e8>
    9602c3f8:	912c918c 	add	x12, x12, #0xb24
{
    9602c3fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	ret = tegrabl_se_aes_write_key_iv(keyslot,
    9602c400:	aa0c03e3 	mov	x3, x12
    9602c404:	52800002 	mov	w2, #0x0                   	// #0
    9602c408:	52800041 	mov	w1, #0x2                   	// #2
{
    9602c40c:	910003fd 	mov	x29, sp
	ret = tegrabl_se_aes_write_key_iv(keyslot,
    9602c410:	2a0d03e0 	mov	w0, w13
    9602c414:	97fffa15 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
	if (ret != TEGRABL_NO_ERROR) {
    9602c418:	35fffea0 	cbnz	w0, 9602c3ec <tegrabl_se_clear_aes_keyslot+0x18>
	ret = tegrabl_se_aes_write_key_iv(keyslot,
    9602c41c:	aa0c03e3 	mov	x3, x12
    9602c420:	52800042 	mov	w2, #0x2                   	// #2
    9602c424:	52800001 	mov	w1, #0x0                   	// #0
    9602c428:	2a0d03e0 	mov	w0, w13
    9602c42c:	97fffa0f 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
	if (ret != TEGRABL_NO_ERROR) {
    9602c430:	35fffde0 	cbnz	w0, 9602c3ec <tegrabl_se_clear_aes_keyslot+0x18>
	ret = tegrabl_se_aes_write_key_iv(keyslot,
    9602c434:	aa0c03e3 	mov	x3, x12
    9602c438:	52800062 	mov	w2, #0x3                   	// #3
    9602c43c:	52800001 	mov	w1, #0x0                   	// #0
    9602c440:	2a0d03e0 	mov	w0, w13
    9602c444:	97fffa09 	bl	9602ac68 <tegrabl_se_aes_write_key_iv>
	if (ret != TEGRABL_NO_ERROR) {
    9602c448:	35fffd20 	cbnz	w0, 9602c3ec <tegrabl_se_clear_aes_keyslot+0x18>
	return NV_READ32((uint32_t)NV_ADDRESS_MAP_SE0_BASE + reg);
    9602c44c:	d2805f00 	mov	x0, #0x2f8                 	// #760
    9602c450:	f2a07580 	movk	x0, #0x3ac, lsl #16
    9602c454:	b9400000 	ldr	w0, [x0]
	if (reg != 0UL) {
    9602c458:	34fffc80 	cbz	w0, 9602c3e8 <tegrabl_se_clear_aes_keyslot+0x14>
		ret = TEGRABL_ERROR(TEGRABL_ERR_WRITE_FAILED, 0);
    9602c45c:	52800340 	mov	w0, #0x1a                  	// #26
    9602c460:	72a2a2a0 	movk	w0, #0x1515, lsl #16
	return ret;
    9602c464:	17ffffe2 	b	9602c3ec <tegrabl_se_clear_aes_keyslot+0x18>

000000009602c468 <tegrabl_se_reverse_list>:
{
	uint32_t i, j;
	uint32_t *list_32p = (uint32_t *)original;
	uint32_t temp1, temp;

	if (original == NULL) {
    9602c468:	b4000260 	cbz	x0, 9602c4b4 <tegrabl_se_reverse_list+0x4c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
	}

	i = 0;
	for (j = ((list_size / 4U) - 1UL); i < j; j--) {
    9602c46c:	53027c21 	lsr	w1, w1, #2
    9602c470:	51000421 	sub	w1, w1, #0x1
    9602c474:	2a0103e2 	mov	w2, w1
    9602c478:	4b020023 	sub	w3, w1, w2
    9602c47c:	6b02007f 	cmp	w3, w2
    9602c480:	54000063 	b.cc	9602c48c <tegrabl_se_reverse_list+0x24>  // b.lo, b.ul, b.last
			((temp1 << 24) & 0xFF000000U) | ((temp1  << 8) & 0xFF0000U);
		list_32p[i] = temp1;
		list_32p[j] = temp;
		i++;
	}
	return TEGRABL_NO_ERROR;
    9602c484:	52800000 	mov	w0, #0x0                   	// #0
}
    9602c488:	d65f03c0 	ret
		temp1 = list_32p[j];
    9602c48c:	d37e7c46 	ubfiz	x6, x2, #2, #32
		temp = list_32p[i];
    9602c490:	d37e7c63 	ubfiz	x3, x3, #2, #32
	for (j = ((list_size / 4U) - 1UL); i < j; j--) {
    9602c494:	51000442 	sub	w2, w2, #0x1
    9602c498:	b8666805 	ldr	w5, [x0, x6]
    9602c49c:	b8636804 	ldr	w4, [x0, x3]
    9602c4a0:	5ac008a5 	rev	w5, w5
		list_32p[i] = temp1;
    9602c4a4:	b8236805 	str	w5, [x0, x3]
    9602c4a8:	5ac00884 	rev	w4, w4
		list_32p[j] = temp;
    9602c4ac:	b8266804 	str	w4, [x0, x6]
    9602c4b0:	17fffff2 	b	9602c478 <tegrabl_se_reverse_list+0x10>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602c4b4:	52800040 	mov	w0, #0x2                   	// #2
    9602c4b8:	72a2a2a0 	movk	w0, #0x1515, lsl #16
    9602c4bc:	17fffff3 	b	9602c488 <tegrabl_se_reverse_list+0x20>

000000009602c4c0 <tegrabl_se_is_msb_set>:
	flag = (val >> 7) & 0x01U;
	if (flag != 0U)
		return true;
	else
		return false;
}
    9602c4c0:	53071c00 	ubfx	w0, w0, #7, #1
    9602c4c4:	d65f03c0 	ret

000000009602c4c8 <tegrabl_se_left_shift_one_bit>:

tegrabl_error_t tegrabl_se_left_shift_one_bit(uint8_t *in_buf, uint32_t size)
{
	uint32_t i;

	if (in_buf == NULL) {
    9602c4c8:	b40002a0 	cbz	x0, 9602c51c <tegrabl_se_left_shift_one_bit+0x54>

	/* left shift one bit */
	for (i = 0; i < size; i++) {
		in_buf[i] <<= 1;

		if (i < (size - 1UL)) {
    9602c4cc:	2a0103e4 	mov	w4, w1
    9602c4d0:	d2800002 	mov	x2, #0x0                   	// #0
    9602c4d4:	d1000484 	sub	x4, x4, #0x1
	for (i = 0; i < size; i++) {
    9602c4d8:	6b02003f 	cmp	w1, w2
    9602c4dc:	54000068 	b.hi	9602c4e8 <tegrabl_se_left_shift_one_bit+0x20>  // b.pmore
			else
				in_buf[i] |= 0x0U;
		}
	}

	return TEGRABL_NO_ERROR;
    9602c4e0:	52800000 	mov	w0, #0x0                   	// #0
}
    9602c4e4:	d65f03c0 	ret
		in_buf[i] <<= 1;
    9602c4e8:	38626803 	ldrb	w3, [x0, x2]
		if (i < (size - 1UL)) {
    9602c4ec:	eb02009f 	cmp	x4, x2
		in_buf[i] <<= 1;
    9602c4f0:	531f1865 	ubfiz	w5, w3, #1, #7
    9602c4f4:	38226805 	strb	w5, [x0, x2]
		if (i < (size - 1UL)) {
    9602c4f8:	540000e9 	b.ls	9602c514 <tegrabl_se_left_shift_one_bit+0x4c>  // b.plast
			if (tegrabl_se_is_msb_set(in_buf[i + 1UL]))
    9602c4fc:	8b020003 	add	x3, x0, x2
	flag = (val >> 7) & 0x01U;
    9602c500:	39400463 	ldrb	w3, [x3, #1]
	if (flag != 0U)
    9602c504:	6b431fff 	negs	wzr, w3, lsr #7
    9602c508:	54000060 	b.eq	9602c514 <tegrabl_se_left_shift_one_bit+0x4c>  // b.none
				in_buf[i] |= 0x1U;
    9602c50c:	320000a3 	orr	w3, w5, #0x1
    9602c510:	38226803 	strb	w3, [x0, x2]
    9602c514:	91000442 	add	x2, x2, #0x1
    9602c518:	17fffff0 	b	9602c4d8 <tegrabl_se_left_shift_one_bit+0x10>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602c51c:	52800040 	mov	w0, #0x2                   	// #2
    9602c520:	72a2a2a0 	movk	w0, #0x1515, lsl #16
    9602c524:	17fffff0 	b	9602c4e4 <tegrabl_se_left_shift_one_bit+0x1c>

000000009602c528 <read_kernel_partition>:
}

static tegrabl_error_t read_kernel_partition(
	struct tegrabl_partition *partition, void *load_address,
	uint64_t *partition_size)
{
    9602c528:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602c52c:	910003fd 	mov	x29, sp
    9602c530:	a90153f3 	stp	x19, x20, [sp, #16]
    9602c534:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602c538:	aa0203f5 	mov	x21, x2
    9602c53c:	f9001bf7 	str	x23, [sp, #48]
    9602c540:	aa0103f6 	mov	x22, x1
	uint32_t device_type;

	pr_trace("%s(): %u\n", __func__, __LINE__);

	/* read head pages equal to android kernel header size */
	err = tegrabl_partition_read(partition, load_address, ANDROID_HEADER_SIZE);
    9602c544:	d2810002 	mov	x2, #0x800                 	// #2048
{
    9602c548:	aa0003f7 	mov	x23, x0
	err = tegrabl_partition_read(partition, load_address, ANDROID_HEADER_SIZE);
    9602c54c:	97ffec3b 	bl	96027638 <tegrabl_partition_read>
	if (err != TEGRABL_NO_ERROR) {
    9602c550:	34000120 	cbz	w0, 9602c574 <read_kernel_partition+0x4c>
    9602c554:	2a0003f4 	mov	w20, w0
		pr_error("Error reading kernel partition header pages\n");
    9602c558:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c55c:	9107a800 	add	x0, x0, #0x1ea
									(char *)load_address + ANDROID_HEADER_SIZE,
									remain_size);
	}

	if (err != TEGRABL_NO_ERROR) {
		pr_error("Error reading kernel partition remaining pages\n");
    9602c560:	97ffd844 	bl	96022670 <tegrabl_printf>
    9602c564:	12005e94 	and	w20, w20, #0xffffff
    9602c568:	52a3a000 	mov	w0, #0x1d000000            	// #486539264
    9602c56c:	2a000294 	orr	w20, w20, w0
    9602c570:	14000024 	b	9602c600 <read_kernel_partition+0xd8>
	if (!strncmp((char *)hdr->magic, ANDROID_MAGIC, ANDROID_MAGIC_SIZE)) {
    9602c574:	d2800102 	mov	x2, #0x8                   	// #8
    9602c578:	f00000a1 	adrp	x1, 96043000 <common_params>
    9602c57c:	aa1603e0 	mov	x0, x22
    9602c580:	913d6821 	add	x1, x1, #0xf5a
    9602c584:	97fff73e 	bl	9602a27c <strncmp>
    9602c588:	f94002a4 	ldr	x4, [x21]
    9602c58c:	35000460 	cbnz	w0, 9602c618 <read_kernel_partition+0xf0>
		remain_size = ALIGN(hdr->kernelsize, hdr->pagesize);
    9602c590:	b94026c1 	ldr	w1, [x22, #36]
    9602c594:	b9400ac0 	ldr	w0, [x22, #8]
		remain_size += ALIGN(hdr->ramdisksize, hdr->pagesize);
    9602c598:	b94012d3 	ldr	w19, [x22, #16]
		remain_size = ALIGN(hdr->kernelsize, hdr->pagesize);
    9602c59c:	4b0103e2 	neg	w2, w1
    9602c5a0:	0b000020 	add	w0, w1, w0
		remain_size += ALIGN(BOOT_IMG_SIG_SIZE, hdr->pagesize);
    9602c5a4:	113ffc23 	add	w3, w1, #0xfff
		remain_size += ALIGN(hdr->ramdisksize, hdr->pagesize);
    9602c5a8:	0b130033 	add	w19, w1, w19
		remain_size = ALIGN(hdr->kernelsize, hdr->pagesize);
    9602c5ac:	51000400 	sub	w0, w0, #0x1
		remain_size += ALIGN(hdr->ramdisksize, hdr->pagesize);
    9602c5b0:	51000673 	sub	w19, w19, #0x1
		remain_size = ALIGN(hdr->kernelsize, hdr->pagesize);
    9602c5b4:	0a020000 	and	w0, w0, w2
		remain_size += ALIGN(hdr->ramdisksize, hdr->pagesize);
    9602c5b8:	0a020273 	and	w19, w19, w2
    9602c5bc:	0b130000 	add	w0, w0, w19
		remain_size += ALIGN(hdr->secondsize, hdr->pagesize);
    9602c5c0:	b9401ad3 	ldr	w19, [x22, #24]
    9602c5c4:	0b130033 	add	w19, w1, w19
    9602c5c8:	51000673 	sub	w19, w19, #0x1
    9602c5cc:	0a020273 	and	w19, w19, w2
		remain_size += ALIGN(BOOT_IMG_SIG_SIZE, hdr->pagesize);
    9602c5d0:	0a020062 	and	w2, w3, w2
    9602c5d4:	0b020273 	add	w19, w19, w2
    9602c5d8:	0b000273 	add	w19, w19, w0
		if (remain_size + ANDROID_HEADER_SIZE > *partition_size) {
    9602c5dc:	11200260 	add	w0, w19, #0x800
    9602c5e0:	eb04001f 	cmp	x0, x4
    9602c5e4:	540001c9 	b.ls	9602c61c <read_kernel_partition+0xf4>  // b.plast
			return err;
    9602c5e8:	52800054 	mov	w20, #0x2                   	// #2
			pr_error("kernel partition size should be at least %dB larger than \
    9602c5ec:	531e7421 	lsl	w1, w1, #2
			return err;
    9602c5f0:	72a3a3b4 	movk	w20, #0x1d1d, lsl #16
			pr_error("kernel partition size should be at least %dB larger than \
    9602c5f4:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c5f8:	91086800 	add	x0, x0, #0x21a
    9602c5fc:	97ffd81d 	bl	96022670 <tegrabl_printf>
		return err;
	}

	*partition_size = remain_size + ANDROID_HEADER_SIZE;
	return err;
}
    9602c600:	2a1403e0 	mov	w0, w20
    9602c604:	f9401bf7 	ldr	x23, [sp, #48]
    9602c608:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602c60c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602c610:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602c614:	d65f03c0 	ret
		remain_size = *partition_size - ANDROID_HEADER_SIZE;
    9602c618:	51200093 	sub	w19, w4, #0x800
	device_type = BITFIELD_GET(partition->block_device->device_id, 16, 16);
    9602c61c:	f94006e0 	ldr	x0, [x23, #8]
    9602c620:	79402c00 	ldrh	w0, [x0, #22]
	if (device_type == TEGRABL_STORAGE_USB_MS) {
    9602c624:	7100141f 	cmp	w0, #0x5
    9602c628:	54000161 	b.ne	9602c654 <read_kernel_partition+0x12c>  // b.any
		err = tegrabl_partition_read(partition,
    9602c62c:	11200262 	add	w2, w19, #0x800
    9602c630:	aa1603e1 	mov	x1, x22
		partition->offset = 0;
    9602c634:	f9000aff 	str	xzr, [x23, #16]
		err = tegrabl_partition_read(partition,
    9602c638:	aa1703e0 	mov	x0, x23
    9602c63c:	97ffebff 	bl	96027638 <tegrabl_partition_read>
    9602c640:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    9602c644:	340000e0 	cbz	w0, 9602c660 <read_kernel_partition+0x138>
		pr_error("Error reading kernel partition remaining pages\n");
    9602c648:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c64c:	9109a400 	add	x0, x0, #0x269
    9602c650:	17ffffc4 	b	9602c560 <read_kernel_partition+0x38>
		err = tegrabl_partition_read(partition,
    9602c654:	2a1303e2 	mov	w2, w19
    9602c658:	912002c1 	add	x1, x22, #0x800
    9602c65c:	17fffff7 	b	9602c638 <read_kernel_partition+0x110>
	*partition_size = remain_size + ANDROID_HEADER_SIZE;
    9602c660:	11200273 	add	w19, w19, #0x800
    9602c664:	f90002b3 	str	x19, [x21]
    9602c668:	17ffffe6 	b	9602c600 <read_kernel_partition+0xd8>

000000009602c66c <tegrabl_get_partition_name>:
{
    9602c66c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602c670:	910003fd 	mov	x29, sp
    9602c674:	f90013f5 	str	x21, [sp, #32]
    9602c678:	2a0103f5 	mov	w21, w1
	if (strlen(partition_names[bin_type]) == 0) {
    9602c67c:	d00000e1 	adrp	x1, 9604a000 <s_qspi_info+0x20>
    9602c680:	9139c021 	add	x1, x1, #0xe70
{
    9602c684:	a90153f3 	stp	x19, x20, [sp, #16]
	if (strlen(partition_names[bin_type]) == 0) {
    9602c688:	528004b3 	mov	w19, #0x25                  	// #37
{
    9602c68c:	aa0203f4 	mov	x20, x2
	if (strlen(partition_names[bin_type]) == 0) {
    9602c690:	9bb30413 	umaddl	x19, w0, w19, x1
    9602c694:	aa1303e0 	mov	x0, x19
    9602c698:	97fff71d 	bl	9602a30c <strlen>
    9602c69c:	b40001a0 	cbz	x0, 9602c6d0 <tegrabl_get_partition_name+0x64>
	strcpy(partition_name, partition_names[bin_type]);
    9602c6a0:	aa1303e1 	mov	x1, x19
    9602c6a4:	aa1403e0 	mov	x0, x20
    9602c6a8:	97fff704 	bl	9602a2b8 <strcpy>
	tegrabl_a_b_set_bootslot_suffix(binary_copy, partition_name, false);
    9602c6ac:	52800002 	mov	w2, #0x0                   	// #0
    9602c6b0:	aa1403e1 	mov	x1, x20
    9602c6b4:	2a1503e0 	mov	w0, w21
    9602c6b8:	9400027d 	bl	9602d0ac <tegrabl_a_b_set_bootslot_suffix>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9602c6bc:	52800000 	mov	w0, #0x0                   	// #0
}
    9602c6c0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602c6c4:	f94013f5 	ldr	x21, [sp, #32]
    9602c6c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602c6cc:	d65f03c0 	ret
		err = TEGRABL_ERR_NOT_FOUND;
    9602c6d0:	528001a0 	mov	w0, #0xd                   	// #13
	return err;
    9602c6d4:	17fffffb 	b	9602c6c0 <tegrabl_get_partition_name+0x54>

000000009602c6d8 <tegrabl_get_binary_info>:
{
    9602c6d8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602c6dc:	910003fd 	mov	x29, sp
    9602c6e0:	a90153f3 	stp	x19, x20, [sp, #16]
    9602c6e4:	aa0103f4 	mov	x20, x1
    9602c6e8:	a9025bf5 	stp	x21, x22, [sp, #32]
	switch (bin_type) {
    9602c6ec:	51005401 	sub	w1, w0, #0x15
{
    9602c6f0:	2a0003f5 	mov	w21, w0
    9602c6f4:	2a0203f6 	mov	w22, w2
	switch (bin_type) {
    9602c6f8:	7100243f 	cmp	w1, #0x9
    9602c6fc:	540003a8 	b.hi	9602c770 <tegrabl_get_binary_info+0x98>  // b.pmore
    9602c700:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c704:	91078000 	add	x0, x0, #0x1e0
    9602c708:	38614800 	ldrb	w0, [x0, w1, uxtw]
    9602c70c:	10000061 	adr	x1, 9602c718 <tegrabl_get_binary_info+0x40>
    9602c710:	8b208820 	add	x0, x1, w0, sxtb #2
    9602c714:	d61f0000 	br	x0
		err = tegrabl_get_boot_img_load_addr(&binary->load_address);
    9602c718:	91002280 	add	x0, x20, #0x8
    9602c71c:	97ffe43f 	bl	96025818 <tegrabl_get_boot_img_load_addr>
		err = tegrabl_get_nct_load_addr(&binary->load_address);
    9602c720:	2a0003f3 	mov	w19, w0
		break;
    9602c724:	14000004 	b	9602c734 <tegrabl_get_binary_info+0x5c>
		binary->load_address = (void *)tegrabl_get_dtb_load_addr();
    9602c728:	97ffe4b3 	bl	960259f4 <tegrabl_get_dtb_load_addr>
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    9602c72c:	52800013 	mov	w19, #0x0                   	// #0
		binary->load_address = (void *)tegrabl_get_dtb_load_addr();
    9602c730:	f9000680 	str	x0, [x20, #8]
	tegrabl_get_partition_name(bin_type, binary_copy, binary->partition_name);
    9602c734:	f9400282 	ldr	x2, [x20]
    9602c738:	2a1603e1 	mov	w1, w22
    9602c73c:	2a1503e0 	mov	w0, w21
    9602c740:	97ffffcb 	bl	9602c66c <tegrabl_get_partition_name>
}
    9602c744:	2a1303e0 	mov	w0, w19
    9602c748:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602c74c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602c750:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602c754:	d65f03c0 	ret
		err = tegrabl_get_nct_load_addr(&binary->load_address);
    9602c758:	91002280 	add	x0, x20, #0x8
    9602c75c:	97ffe421 	bl	960257e0 <tegrabl_get_nct_load_addr>
    9602c760:	17fffff0 	b	9602c720 <tegrabl_get_binary_info+0x48>
		err = tegrabl_get_recovery_img_load_addr(&binary->load_address);
    9602c764:	91002280 	add	x0, x20, #0x8
    9602c768:	97ffe4b5 	bl	96025a3c <tegrabl_get_recovery_img_load_addr>
    9602c76c:	17ffffed 	b	9602c720 <tegrabl_get_binary_info+0x48>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9602c770:	528001b3 	mov	w19, #0xd                   	// #13
		pr_error("Invalid bin type\n");
    9602c774:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9602c778:	72a3a3b3 	movk	w19, #0x1d1d, lsl #16
		pr_error("Invalid bin type\n");
    9602c77c:	910a7000 	add	x0, x0, #0x29c
    9602c780:	97ffd7bc 	bl	96022670 <tegrabl_printf>
		break;
    9602c784:	17ffffec 	b	9602c734 <tegrabl_get_binary_info+0x5c>

000000009602c788 <tegrabl_load_binary_copy>:
}

tegrabl_error_t tegrabl_load_binary_copy(
	tegrabl_binary_type_t bin_type, void **load_address,
	uint32_t *binary_length, tegrabl_binary_copy_t binary_copy)
{
    9602c788:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
	char partition_name[TEGRABL_GPT_MAX_PARTITION_NAME + 1];
	bool load_addr_predefined = true;

	pr_trace("%s(): %u\n", __func__, __LINE__);

	if (bin_type >= TEGRABL_BINARY_MAX) {
    9602c78c:	71007c1f 	cmp	w0, #0x1f
{
    9602c790:	910003fd 	mov	x29, sp
    9602c794:	a90153f3 	stp	x19, x20, [sp, #16]
    9602c798:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint64_t partition_size = 0;
    9602c79c:	f90027bf 	str	xzr, [x29, #72]
	struct tegrabl_binary_info binary = {0};
    9602c7a0:	a9057fbf 	stp	xzr, xzr, [x29, #80]
{
    9602c7a4:	f9001bf7 	str	x23, [sp, #48]
	if (bin_type >= TEGRABL_BINARY_MAX) {
    9602c7a8:	54000c08 	b.hi	9602c928 <tegrabl_load_binary_copy+0x1a0>  // b.pmore
    9602c7ac:	aa0103f6 	mov	x22, x1
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		goto done;
	}

	binary.partition_name = partition_name;
    9602c7b0:	910283a1 	add	x1, x29, #0xa0
    9602c7b4:	aa0203f4 	mov	x20, x2
    9602c7b8:	9101e3a2 	add	x2, x29, #0x78
    9602c7bc:	2a0003f5 	mov	w21, w0
    9602c7c0:	f81b0c22 	str	x2, [x1, #-80]!
	err = tegrabl_get_binary_info(bin_type, &binary, binary_copy);
    9602c7c4:	2a0303e2 	mov	w2, w3
    9602c7c8:	97ffffc4 	bl	9602c6d8 <tegrabl_get_binary_info>
    9602c7cc:	2a0003f3 	mov	w19, w0
    9602c7d0:	12001c17 	and	w23, w0, #0xff
	if (err != TEGRABL_NO_ERROR &&
		TEGRABL_ERROR_REASON(err) != TEGRABL_ERR_NOT_FOUND) {
		pr_error("Cannot get binary info %s\n", binary.partition_name);
    9602c7d4:	f9402ba1 	ldr	x1, [x29, #80]
	if (err != TEGRABL_NO_ERROR &&
    9602c7d8:	34000140 	cbz	w0, 9602c800 <tegrabl_load_binary_copy+0x78>
    9602c7dc:	710036ff 	cmp	w23, #0xd
    9602c7e0:	54000100 	b.eq	9602c800 <tegrabl_load_binary_copy+0x78>  // b.none
		pr_error("Cannot get binary info %s\n", binary.partition_name);
    9602c7e4:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c7e8:	910c0400 	add	x0, x0, #0x301
	}

	/* Get partition info */
	err = tegrabl_partition_open(binary.partition_name, &partition);
	if (err != TEGRABL_NO_ERROR) {
		pr_error("Cannot open partition %s\n", binary.partition_name);
    9602c7ec:	97ffd7a1 	bl	96022670 <tegrabl_printf>
    9602c7f0:	12005e73 	and	w19, w19, #0xffffff
    9602c7f4:	52a3a000 	mov	w0, #0x1d000000            	// #486539264
    9602c7f8:	2a000273 	orr	w19, w19, w0
		TEGRABL_SET_HIGHEST_MODULE(err);
		goto done;
    9602c7fc:	14000016 	b	9602c854 <tegrabl_load_binary_copy+0xcc>
	pr_info("Loading %s from partition\n", binary.partition_name);
    9602c800:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c804:	910e3000 	add	x0, x0, #0x38c
    9602c808:	97ffd79a 	bl	96022670 <tegrabl_printf>
	if (TEGRABL_ERROR_REASON(err) == TEGRABL_ERR_NOT_FOUND) {
    9602c80c:	710036ff 	cmp	w23, #0xd
    9602c810:	540002e1 	b.ne	9602c86c <tegrabl_load_binary_copy+0xe4>  // b.any
		if (*load_address) {
    9602c814:	f94002c0 	ldr	x0, [x22]
    9602c818:	b4000180 	cbz	x0, 9602c848 <tegrabl_load_binary_copy+0xc0>
			load_addr_predefined = false;
    9602c81c:	52800017 	mov	w23, #0x0                   	// #0
			binary.load_address = *load_address;
    9602c820:	f9002fa0 	str	x0, [x29, #88]
	err = tegrabl_partition_open(binary.partition_name, &partition);
    9602c824:	f9402ba0 	ldr	x0, [x29, #80]
    9602c828:	910183a1 	add	x1, x29, #0x60
    9602c82c:	97ffeaf4 	bl	960273fc <tegrabl_partition_open>
    9602c830:	2a0003f3 	mov	w19, w0
		pr_error("Cannot open partition %s\n", binary.partition_name);
    9602c834:	f9402ba1 	ldr	x1, [x29, #80]
	if (err != TEGRABL_NO_ERROR) {
    9602c838:	340001e0 	cbz	w0, 9602c874 <tegrabl_load_binary_copy+0xec>
		pr_error("Cannot open partition %s\n", binary.partition_name);
    9602c83c:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c840:	910c7c00 	add	x0, x0, #0x31f
    9602c844:	17ffffea 	b	9602c7ec <tegrabl_load_binary_copy+0x64>
			pr_error("Address is not provided to load binary\n");
    9602c848:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c84c:	910ea800 	add	x0, x0, #0x3aa
    9602c850:	97ffd788 	bl	96022670 <tegrabl_printf>
		*binary_length = partition_size;
	}

done:
	return err;
}
    9602c854:	2a1303e0 	mov	w0, w19
    9602c858:	f9401bf7 	ldr	x23, [sp, #48]
    9602c85c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602c860:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602c864:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9602c868:	d65f03c0 	ret
	bool load_addr_predefined = true;
    9602c86c:	52800037 	mov	w23, #0x1                   	// #1
    9602c870:	17ffffed 	b	9602c824 <tegrabl_load_binary_copy+0x9c>
	pr_info("Loading partition %s at %p from device(0x%x)\n", binary.partition_name, binary.load_address,
    9602c874:	f94037a0 	ldr	x0, [x29, #104]
    9602c878:	f9402fa2 	ldr	x2, [x29, #88]
	if (bdev != NULL) {
    9602c87c:	b40003c0 	cbz	x0, 9602c8f4 <tegrabl_load_binary_copy+0x16c>
			MIN(((bdev->device_id >> 16) & 0xFFU), TEGRABL_STORAGE_INVALID);
    9602c880:	39405803 	ldrb	w3, [x0, #22]
		return (uint16_t)
    9602c884:	52800160 	mov	w0, #0xb                   	// #11
    9602c888:	71002c7f 	cmp	w3, #0xb
    9602c88c:	1a803063 	csel	w3, w3, w0, cc  // cc = lo, ul, last
    9602c890:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c894:	910cf000 	add	x0, x0, #0x33c
    9602c898:	97ffd776 	bl	96022670 <tegrabl_printf>
	partition_size = tegrabl_partition_size(&partition);
    9602c89c:	910183a0 	add	x0, x29, #0x60
    9602c8a0:	97ffeb1a 	bl	96027508 <tegrabl_partition_size>
    9602c8a4:	f90027a0 	str	x0, [x29, #72]
	if (!partition_size) {
    9602c8a8:	b4000460 	cbz	x0, 9602c934 <tegrabl_load_binary_copy+0x1ac>
	if (!load_addr_predefined) {
    9602c8ac:	350000b7 	cbnz	w23, 9602c8c0 <tegrabl_load_binary_copy+0x138>
		if ((binary_length != NULL) && (partition_size < *binary_length)) {
    9602c8b0:	b4000094 	cbz	x20, 9602c8c0 <tegrabl_load_binary_copy+0x138>
    9602c8b4:	b9400281 	ldr	w1, [x20]
    9602c8b8:	eb01001f 	cmp	x0, x1
    9602c8bc:	54000403 	b.cc	9602c93c <tegrabl_load_binary_copy+0x1b4>  // b.lo, b.ul, b.last
	if (bin_type == TEGRABL_BINARY_KERNEL
    9602c8c0:	121d7ab5 	and	w21, w21, #0xfffffffb
    9602c8c4:	f9402fa1 	ldr	x1, [x29, #88]
    9602c8c8:	710062bf 	cmp	w21, #0x18
    9602c8cc:	54000181 	b.ne	9602c8fc <tegrabl_load_binary_copy+0x174>  // b.any
		err = read_kernel_partition(&partition, binary.load_address,
    9602c8d0:	910123a2 	add	x2, x29, #0x48
    9602c8d4:	910183a0 	add	x0, x29, #0x60
    9602c8d8:	97ffff14 	bl	9602c528 <read_kernel_partition>
		err = tegrabl_partition_read(&partition, binary.load_address,
    9602c8dc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9602c8e0:	34000160 	cbz	w0, 9602c90c <tegrabl_load_binary_copy+0x184>
		pr_error("Error reading partition %s\n", binary.partition_name);
    9602c8e4:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c8e8:	f9402ba1 	ldr	x1, [x29, #80]
    9602c8ec:	910db400 	add	x0, x0, #0x36d
    9602c8f0:	17ffffbf 	b	9602c7ec <tegrabl_load_binary_copy+0x64>
	}

	return TEGRABL_STORAGE_INVALID;
    9602c8f4:	52800163 	mov	w3, #0xb                   	// #11
    9602c8f8:	17ffffe6 	b	9602c890 <tegrabl_load_binary_copy+0x108>
		err = tegrabl_partition_read(&partition, binary.load_address,
    9602c8fc:	aa0003e2 	mov	x2, x0
    9602c900:	910183a0 	add	x0, x29, #0x60
    9602c904:	97ffeb4d 	bl	96027638 <tegrabl_partition_read>
    9602c908:	17fffff5 	b	9602c8dc <tegrabl_load_binary_copy+0x154>
	if (load_address) {
    9602c90c:	b4000076 	cbz	x22, 9602c918 <tegrabl_load_binary_copy+0x190>
		*load_address = (void *)binary.load_address;
    9602c910:	f9402fa0 	ldr	x0, [x29, #88]
    9602c914:	f90002c0 	str	x0, [x22]
	if (binary_length) {
    9602c918:	b4fff9f4 	cbz	x20, 9602c854 <tegrabl_load_binary_copy+0xcc>
		*binary_length = partition_size;
    9602c91c:	f94027a0 	ldr	x0, [x29, #72]
    9602c920:	b9000280 	str	w0, [x20]
    9602c924:	17ffffcc 	b	9602c854 <tegrabl_load_binary_copy+0xcc>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602c928:	52800053 	mov	w19, #0x2                   	// #2
			err = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    9602c92c:	72a3a3b3 	movk	w19, #0x1d1d, lsl #16
	return err;
    9602c930:	17ffffc9 	b	9602c854 <tegrabl_load_binary_copy+0xcc>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 2);
    9602c934:	52804053 	mov	w19, #0x202                 	// #514
    9602c938:	17fffffd 	b	9602c92c <tegrabl_load_binary_copy+0x1a4>
			err = TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    9602c93c:	52800093 	mov	w19, #0x4                   	// #4
    9602c940:	17fffffb 	b	9602c92c <tegrabl_load_binary_copy+0x1a4>

000000009602c944 <tegrabl_load_binary>:

tegrabl_error_t tegrabl_load_binary(
		tegrabl_binary_type_t bin_type, void **load_address,
		uint32_t *binary_length)
{
    9602c944:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9602c948:	71006c1f 	cmp	w0, #0x1b
    9602c94c:	910003fd 	mov	x29, sp
    9602c950:	a90153f3 	stp	x19, x20, [sp, #16]
    9602c954:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602c958:	2a0003f5 	mov	w21, w0
    9602c95c:	f9001bf7 	str	x23, [sp, #48]
    9602c960:	aa0103f6 	mov	x22, x1
	struct slot_meta_data *smd = NULL;
    9602c964:	f90027bf 	str	xzr, [x29, #72]
{
    9602c968:	aa0203f7 	mov	x23, x2
    9602c96c:	540000c8 	b.hi	9602c984 <tegrabl_load_binary+0x40>  // b.pmore
    9602c970:	d2800020 	mov	x0, #0x1                   	// #1
    9602c974:	d2a12401 	mov	x1, #0x9200000             	// #153092096
    9602c978:	9ad52000 	lsl	x0, x0, x21
    9602c97c:	ea01001f 	tst	x0, x1
    9602c980:	540000a1 	b.ne	9602c994 <tegrabl_load_binary+0x50>  // b.any
		*binary_copy = TEGRABL_BINARY_COPY_PRIMARY;
    9602c984:	52800014 	mov	w20, #0x0                   	// #0
		slot = BOOT_SLOT_A;
    9602c988:	b90047bf 	str	wzr, [x29, #68]
	if (slot == BOOT_SLOT_A) {
    9602c98c:	52800013 	mov	w19, #0x0                   	// #0
    9602c990:	1400000e 	b	9602c9c8 <tegrabl_load_binary+0x84>
	err = tegrabl_a_b_get_active_slot(NULL, &slot);
    9602c994:	910113a1 	add	x1, x29, #0x44
    9602c998:	d2800000 	mov	x0, #0x0                   	// #0
    9602c99c:	9400014d 	bl	9602ced0 <tegrabl_a_b_get_active_slot>
	if (err != TEGRABL_NO_ERROR) {
    9602c9a0:	34000320 	cbz	w0, 9602ca04 <tegrabl_load_binary+0xc0>
		if (TEGRABL_ERROR_REASON(err) == TEGRABL_ERR_NOT_FOUND) {
    9602c9a4:	12001c00 	and	w0, w0, #0xff
    9602c9a8:	7100341f 	cmp	w0, #0xd
    9602c9ac:	540002c0 	b.eq	9602ca04 <tegrabl_load_binary+0xc0>  // b.none
			err = tegrabl_err_set_highest_module(TEGRABL_ERR_LOADER, 1);
    9602c9b0:	528003b3 	mov	w19, #0x1d                  	// #29
#if defined(CONFIG_ENABLE_A_B_SLOT)
	tegrabl_error_t err;
	tegrabl_binary_copy_t bin_copy = TEGRABL_BINARY_COPY_PRIMARY;
    9602c9b4:	52800014 	mov	w20, #0x0                   	// #0
			err = tegrabl_err_set_highest_module(TEGRABL_ERR_LOADER, 1);
    9602c9b8:	72a02013 	movk	w19, #0x100, lsl #16
			pr_error("Select a/b slot failed\n");
    9602c9bc:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c9c0:	910ac400 	add	x0, x0, #0x2b1
    9602c9c4:	97ffd72b 	bl	96022670 <tegrabl_printf>
	pr_info("A/B: bin_type (%d) slot %d\n", (int)bin_type, (int)slot);
    9602c9c8:	b94047a2 	ldr	w2, [x29, #68]
    9602c9cc:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c9d0:	2a1503e1 	mov	w1, w21
    9602c9d4:	910b3000 	add	x0, x0, #0x2cc
    9602c9d8:	97ffd726 	bl	96022670 <tegrabl_printf>

	/* Do A/B selection and set bin_copy accordingly */
	err = a_b_get_bin_copy(bin_type, &bin_copy);
	if (err != TEGRABL_NO_ERROR) {
    9602c9dc:	34000533 	cbz	w19, 9602ca80 <tegrabl_load_binary+0x13c>
		pr_error("A/B select failed\n");
    9602c9e0:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602c9e4:	910bac00 	add	x0, x0, #0x2eb
    9602c9e8:	97ffd722 	bl	96022670 <tegrabl_printf>
		TEGRABL_BINARY_COPY_RECOVERY);
#endif	/* CONFIG_ENABLE_A_B_SLOT */

done:
	return err;
}
    9602c9ec:	2a1303e0 	mov	w0, w19
    9602c9f0:	f9401bf7 	ldr	x23, [sp, #48]
    9602c9f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602c9f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602c9fc:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602ca00:	d65f03c0 	ret
	err = tegrabl_a_b_get_current_rootfs_id(NULL, &rootfs_id);
    9602ca04:	91010fa1 	add	x1, x29, #0x43
    9602ca08:	d2800000 	mov	x0, #0x0                   	// #0
    9602ca0c:	9400023a 	bl	9602d2f4 <tegrabl_a_b_get_current_rootfs_id>
	if (err == TEGRABL_NO_ERROR) {
    9602ca10:	350000a0 	cbnz	w0, 9602ca24 <tegrabl_load_binary+0xe0>
		if ((rootfs_id == ROOTFS_A) || (rootfs_id == ROOTFS_B)) {
    9602ca14:	39410fa0 	ldrb	w0, [x29, #67]
    9602ca18:	7100041f 	cmp	w0, #0x1
    9602ca1c:	540002a8 	b.hi	9602ca70 <tegrabl_load_binary+0x12c>  // b.pmore
			slot = (uint32_t)rootfs_id;
    9602ca20:	b90047a0 	str	w0, [x29, #68]
	*binary_copy = (tegrabl_binary_copy_t)slot;
    9602ca24:	b94047b4 	ldr	w20, [x29, #68]
	if (slot == BOOT_SLOT_A) {
    9602ca28:	34fffb34 	cbz	w20, 9602c98c <tegrabl_load_binary+0x48>
	err = tegrabl_a_b_get_smd((void *)&smd);
    9602ca2c:	910123a0 	add	x0, x29, #0x48
    9602ca30:	940001d0 	bl	9602d170 <tegrabl_a_b_get_smd>
    9602ca34:	2a0003f3 	mov	w19, w0
	if ((err != TEGRABL_NO_ERROR) || (smd == NULL)) {
    9602ca38:	35000060 	cbnz	w0, 9602ca44 <tegrabl_load_binary+0x100>
    9602ca3c:	f94027a0 	ldr	x0, [x29, #72]
    9602ca40:	b50000a0 	cbnz	x0, 9602ca54 <tegrabl_load_binary+0x110>
    9602ca44:	12005e73 	and	w19, w19, #0xffffff
    9602ca48:	52a3a000 	mov	w0, #0x1d000000            	// #486539264
    9602ca4c:	2a000273 	orr	w19, w19, w0
    9602ca50:	17ffffde 	b	9602c9c8 <tegrabl_load_binary+0x84>
	version = tegrabl_a_b_get_version(smd);
    9602ca54:	94000104 	bl	9602ce64 <tegrabl_a_b_get_version>
	if ((BOOTCTRL_SUPPORT_REDUNDANCY(version) != 0U) &&
    9602ca58:	12180800 	and	w0, w0, #0x700
    9602ca5c:	7104001f 	cmp	w0, #0x100
    9602ca60:	54fffb41 	b.ne	9602c9c8 <tegrabl_load_binary+0x84>  // b.any
		*binary_copy = TEGRABL_BINARY_COPY_PRIMARY;
    9602ca64:	52800014 	mov	w20, #0x0                   	// #0
		slot = BOOT_SLOT_A;
    9602ca68:	b90047bf 	str	wzr, [x29, #68]
    9602ca6c:	17ffffd7 	b	9602c9c8 <tegrabl_load_binary+0x84>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602ca70:	52800053 	mov	w19, #0x2                   	// #2
	tegrabl_binary_copy_t bin_copy = TEGRABL_BINARY_COPY_PRIMARY;
    9602ca74:	52800014 	mov	w20, #0x0                   	// #0
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602ca78:	72a3a3b3 	movk	w19, #0x1d1d, lsl #16
    9602ca7c:	17ffffd3 	b	9602c9c8 <tegrabl_load_binary+0x84>
	err = tegrabl_load_binary_copy(bin_type, load_address, binary_length,
    9602ca80:	2a1403e3 	mov	w3, w20
    9602ca84:	aa1703e2 	mov	x2, x23
    9602ca88:	aa1603e1 	mov	x1, x22
    9602ca8c:	2a1503e0 	mov	w0, w21
    9602ca90:	97ffff3e 	bl	9602c788 <tegrabl_load_binary_copy>
    9602ca94:	2a0003f3 	mov	w19, w0
	if (err == TEGRABL_NO_ERROR) {
    9602ca98:	34fffaa0 	cbz	w0, 9602c9ec <tegrabl_load_binary+0xa8>
	pr_error("A/B loader failure\n");
    9602ca9c:	900000c0 	adrp	x0, 96044000 <__func__.6231+0x4f3>
    9602caa0:	91042800 	add	x0, x0, #0x10a
    9602caa4:	97ffd6f3 	bl	96022670 <tegrabl_printf>
	TEGRABL_ERROR_PRINT(err);
    9602caa8:	2a1303e0 	mov	w0, w19
    9602caac:	97ffc6c4 	bl	9601e5bc <tegrabl_error_print_error>
	tegrabl_reset();
    9602cab0:	97ffc22e 	bl	9601d368 <tegrabl_reset>
	return err;
    9602cab4:	17ffffce 	b	9602c9ec <tegrabl_load_binary+0xa8>

000000009602cab8 <tegrabl_get_max_retry_count>:

	version = tegrabl_a_b_get_version(smd);
	/* Set the maximum slot retry count to default if smd
	 * extension is not support
	 */
	if (BOOT_CHAIN_VERSION_GET(version) < BOOT_CHAIN_VERSION_ROOTFS_AB) {
    9602cab8:	39401001 	ldrb	w1, [x0, #4]
    9602cabc:	71000c3f 	cmp	w1, #0x3
    9602cac0:	540001e9 	b.ls	9602cafc <tegrabl_get_max_retry_count+0x44>  // b.plast
		max_bl_retry_count = SLOT_RETRY_COUNT_DEFAULT;
	} else {
		smd_v2 = (struct slot_meta_data_v2 *)smd;
		max_bl_retry_count = smd_v2->smd_ext.max_bl_retry_count;
    9602cac4:	3940b800 	ldrb	w0, [x0, #46]
	}

	if (max_bl_retry_count == 0 || max_bl_retry_count > SLOT_RETRY_COUNT_DEFAULT) {
    9602cac8:	51000401 	sub	w1, w0, #0x1
    9602cacc:	12001c21 	and	w1, w1, #0xff
    9602cad0:	7100183f 	cmp	w1, #0x6
    9602cad4:	54000189 	b.ls	9602cb04 <tegrabl_get_max_retry_count+0x4c>  // b.plast
{
    9602cad8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		max_bl_retry_count = SLOT_RETRY_COUNT_DEFAULT;
		pr_error("Invalid max retry count, set to the default value(%d)\n",
    9602cadc:	528000e1 	mov	w1, #0x7                   	// #7
    9602cae0:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602cae4:	9114cc00 	add	x0, x0, #0x533
{
    9602cae8:	910003fd 	mov	x29, sp
		pr_error("Invalid max retry count, set to the default value(%d)\n",
    9602caec:	97ffd6e1 	bl	96022670 <tegrabl_printf>
		max_bl_retry_count = SLOT_RETRY_COUNT_DEFAULT;
    9602caf0:	528000e0 	mov	w0, #0x7                   	// #7
			max_bl_retry_count);
	}

	return max_bl_retry_count;
}
    9602caf4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602caf8:	d65f03c0 	ret
		max_bl_retry_count = SLOT_RETRY_COUNT_DEFAULT;
    9602cafc:	528000e0 	mov	w0, #0x7                   	// #7
    9602cb00:	17fffff2 	b	9602cac8 <tegrabl_get_max_retry_count+0x10>
}
    9602cb04:	d65f03c0 	ret

000000009602cb08 <tegrabl_get_rootfs_max_retry_count>:

	version = tegrabl_a_b_get_version(smd);
	/* Set the maximum rootfs slot retry count to default if
	 * rootfs max retry count is not support in smd
	 */
	if (BOOT_CHAIN_VERSION_GET(version) < BOOT_CHAIN_VERSION_UNIFY_RF_BL_AB) {
    9602cb08:	39401001 	ldrb	w1, [x0, #4]
    9602cb0c:	7100103f 	cmp	w1, #0x4
    9602cb10:	54000209 	b.ls	9602cb50 <tegrabl_get_rootfs_max_retry_count+0x48>  // b.plast
		max_rf_retry_count = ROOTFS_RETRY_COUNT_DEFAULT;
	} else {
		smd_v2 = (struct slot_meta_data_v2 *)smd;
		rf_misc_info = smd_v2->smd_ext.features.rootfs_misc_info;
		max_rf_retry_count = GET_MAX_ROOTFS_RETRY_COUNT(rf_misc_info);
    9602cb14:	3940ac00 	ldrb	w0, [x0, #43]
    9602cb18:	12000400 	and	w0, w0, #0x3
	}

	if ((max_rf_retry_count > ROOTFS_RETRY_COUNT_DEFAULT) ||
    9602cb1c:	51000401 	sub	w1, w0, #0x1
    9602cb20:	12001c21 	and	w1, w1, #0xff
    9602cb24:	7100083f 	cmp	w1, #0x2
    9602cb28:	54000189 	b.ls	9602cb58 <tegrabl_get_rootfs_max_retry_count+0x50>  // b.plast
{
    9602cb2c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		(max_rf_retry_count == 0)) {
		max_rf_retry_count = ROOTFS_RETRY_COUNT_DEFAULT;
		pr_error("Invalid max rootfs retry count, set to the default value(%d)\n",
    9602cb30:	52800061 	mov	w1, #0x3                   	// #3
    9602cb34:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602cb38:	9115b400 	add	x0, x0, #0x56d
{
    9602cb3c:	910003fd 	mov	x29, sp
		pr_error("Invalid max rootfs retry count, set to the default value(%d)\n",
    9602cb40:	97ffd6cc 	bl	96022670 <tegrabl_printf>
		max_rf_retry_count = ROOTFS_RETRY_COUNT_DEFAULT;
    9602cb44:	52800060 	mov	w0, #0x3                   	// #3
				 max_rf_retry_count);
	}

	return max_rf_retry_count;
}
    9602cb48:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602cb4c:	d65f03c0 	ret
		max_rf_retry_count = ROOTFS_RETRY_COUNT_DEFAULT;
    9602cb50:	52800060 	mov	w0, #0x3                   	// #3
    9602cb54:	17fffff2 	b	9602cb1c <tegrabl_get_rootfs_max_retry_count+0x14>
}
    9602cb58:	d65f03c0 	ret

000000009602cb5c <load_smd_bin_copy>:
	pr_info("Active rootfs suffix: %s\n", suffix);
	return err;
}

static tegrabl_error_t load_smd_bin_copy(smd_bin_copy_t bin_copy)
{
    9602cb5c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    9602cb60:	910003fd 	mov	x29, sp
    9602cb64:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint32_t smd_v2_len = sizeof(struct slot_meta_data_v2);
	uint32_t smd_len = sizeof(struct slot_meta_data);
	uint32_t smd_ext_len = sizeof(struct slot_meta_data_ext);
	uint16_t version;

	current_smd = SMD_INVALID;
    9602cb68:	d0000255 	adrp	x21, 96076000 <free_dram_block+0x38e8>
{
    9602cb6c:	a90363f7 	stp	x23, x24, [sp, #48]
    9602cb70:	2a0003f8 	mov	w24, w0

	smd_part = (bin_copy == SMD_COPY_PRIMARY) ? "SMD" : "SMD_b";
    9602cb74:	7100031f 	cmp	w24, #0x0
	current_smd = SMD_INVALID;
    9602cb78:	52800040 	mov	w0, #0x2                   	// #2
{
    9602cb7c:	a90153f3 	stp	x19, x20, [sp, #16]
	smd_part = (bin_copy == SMD_COPY_PRIMARY) ? "SMD" : "SMD_b";
    9602cb80:	b00000d4 	adrp	x20, 96045000 <__func__.3796+0x7>
	current_smd = SMD_INVALID;
    9602cb84:	b90b7aa0 	str	w0, [x21, #2936]
	smd_part = (bin_copy == SMD_COPY_PRIMARY) ? "SMD" : "SMD_b";
    9602cb88:	9110aa94 	add	x20, x20, #0x42a
    9602cb8c:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602cb90:	9110b800 	add	x0, x0, #0x42e
    9602cb94:	9a800294 	csel	x20, x20, x0, eq  // eq = none
{
    9602cb98:	f90023f9 	str	x25, [sp, #64]
	error = tegrabl_partition_open(smd_part, &part);
    9602cb9c:	910163a1 	add	x1, x29, #0x58
    9602cba0:	aa1403e0 	mov	x0, x20
    9602cba4:	97ffea16 	bl	960273fc <tegrabl_partition_open>
	if (error != TEGRABL_NO_ERROR) {
    9602cba8:	34000160 	cbz	w0, 9602cbd4 <load_smd_bin_copy+0x78>
    9602cbac:	12005c00 	and	w0, w0, #0xffffff
    9602cbb0:	52aa8013 	mov	w19, #0x54000000            	// #1409286144
    9602cbb4:	2a000273 	orr	w19, w19, w0

	current_smd = bin_copy;

done:
	return error;
}
    9602cbb8:	2a1303e0 	mov	w0, w19
    9602cbbc:	f94023f9 	ldr	x25, [sp, #64]
    9602cbc0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602cbc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602cbc8:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602cbcc:	a8c77bfd 	ldp	x29, x30, [sp], #112
    9602cbd0:	d65f03c0 	ret
	error = tegrabl_partition_seek(&part, 0, TEGRABL_PARTITION_SEEK_SET);
    9602cbd4:	52800002 	mov	w2, #0x0                   	// #0
    9602cbd8:	d2800001 	mov	x1, #0x0                   	// #0
    9602cbdc:	910163a0 	add	x0, x29, #0x58
    9602cbe0:	97ffeac8 	bl	96027700 <tegrabl_partition_seek>
	if (error != TEGRABL_NO_ERROR) {
    9602cbe4:	35fffe40 	cbnz	w0, 9602cbac <load_smd_bin_copy+0x50>
	error = tegrabl_partition_read(&part, smd_loadaddress, smd_v2_len);
    9602cbe8:	d0000257 	adrp	x23, 96076000 <free_dram_block+0x38e8>
    9602cbec:	d28017e2 	mov	x2, #0xbf                  	// #191
    9602cbf0:	910163a0 	add	x0, x29, #0x58
    9602cbf4:	f945c6e1 	ldr	x1, [x23, #2952]
    9602cbf8:	97ffea90 	bl	96027638 <tegrabl_partition_read>
    9602cbfc:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9602cc00:	34000080 	cbz	w0, 9602cc10 <load_smd_bin_copy+0xb4>
    9602cc04:	12005c13 	and	w19, w0, #0xffffff
    9602cc08:	52aa8000 	mov	w0, #0x54000000            	// #1409286144
    9602cc0c:	17ffffea 	b	9602cbb4 <load_smd_bin_copy+0x58>
	tegrabl_partition_close(&part);
    9602cc10:	910163a0 	add	x0, x29, #0x58
    9602cc14:	97ffea44 	bl	96027524 <tegrabl_partition_close>
	smd = (struct slot_meta_data *)smd_loadaddress;
    9602cc18:	f945c6f6 	ldr	x22, [x23, #2952]
    9602cc1c:	394012d9 	ldrb	w25, [x22, #4]
	if (BOOT_CHAIN_VERSION_GET(version) == BOOT_CHAIN_VERSION_ONE) {
    9602cc20:	7100073f 	cmp	w25, #0x1
    9602cc24:	540001a1 	b.ne	9602cc58 <load_smd_bin_copy+0xfc>  // b.any
		if (smd->magic != BOOT_CHAIN_MAGIC) {
    9602cc28:	b94002c1 	ldr	w1, [x22]
    9602cc2c:	5289c000 	mov	w0, #0x4e00                	// #19968
    9602cc30:	72a86840 	movk	w0, #0x4342, lsl #16
    9602cc34:	6b00003f 	cmp	w1, w0
    9602cc38:	54000420 	b.eq	9602ccbc <load_smd_bin_copy+0x160>  // b.none
			pr_error("%s corrupt with incorrect magic id\n",
    9602cc3c:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602cc40:	aa1403e1 	mov	x1, x20
    9602cc44:	9110d000 	add	x0, x0, #0x434
			error = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 0);
    9602cc48:	52800313 	mov	w19, #0x18                  	// #24
			pr_error("%s corrupt with incorrect crc in extension\n",
    9602cc4c:	97ffd689 	bl	96022670 <tegrabl_printf>
			error = TEGRABL_ERROR(TEGRABL_ERR_VERIFY_FAILED, 0);
    9602cc50:	72aa8a93 	movk	w19, #0x5454, lsl #16
    9602cc54:	17ffffd9 	b	9602cbb8 <load_smd_bin_copy+0x5c>
		crc32 = tegrabl_utils_crc32(0, smd_loadaddress,
    9602cc58:	aa1603e1 	mov	x1, x22
    9602cc5c:	d2800242 	mov	x2, #0x12                  	// #18
    9602cc60:	52800000 	mov	w0, #0x0                   	// #0
    9602cc64:	97ffeb2a 	bl	9602790c <tegrabl_utils_crc32>
		if (crc32 != smd->crc32) {
    9602cc68:	b84122c1 	ldur	w1, [x22, #18]
    9602cc6c:	6b00003f 	cmp	w1, w0
    9602cc70:	540000a0 	b.eq	9602cc84 <load_smd_bin_copy+0x128>  // b.none
			pr_error("%s corrupt with incorrect crc\n", smd_part);
    9602cc74:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602cc78:	aa1403e1 	mov	x1, x20
    9602cc7c:	91116c00 	add	x0, x0, #0x45b
    9602cc80:	17fffff2 	b	9602cc48 <load_smd_bin_copy+0xec>
	if (BOOT_CHAIN_VERSION_GET(version) >= BOOT_CHAIN_VERSION_ROOTFS_AB) {
    9602cc84:	71000f3f 	cmp	w25, #0x3
    9602cc88:	540001a9 	b.ls	9602ccbc <load_smd_bin_copy+0x160>  // b.plast
		smd_v2 = (struct slot_meta_data_v2 *)smd_loadaddress;
    9602cc8c:	f945c6f6 	ldr	x22, [x23, #2952]
		crc32 = tegrabl_utils_crc32(0, &smd_v2->smd_ext.crc32_len,
    9602cc90:	d28014a2 	mov	x2, #0xa5                  	// #165
    9602cc94:	52800000 	mov	w0, #0x0                   	// #0
    9602cc98:	91006ac1 	add	x1, x22, #0x1a
    9602cc9c:	97ffeb1c 	bl	9602790c <tegrabl_utils_crc32>
		if (crc32 != smd_v2->smd_ext.crc32) {
    9602cca0:	b84162c1 	ldur	w1, [x22, #22]
    9602cca4:	6b00003f 	cmp	w1, w0
    9602cca8:	540000a0 	b.eq	9602ccbc <load_smd_bin_copy+0x160>  // b.none
			pr_error("%s corrupt with incorrect crc in extension\n",
    9602ccac:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602ccb0:	aa1403e1 	mov	x1, x20
    9602ccb4:	9111f400 	add	x0, x0, #0x47d
    9602ccb8:	17ffffe4 	b	9602cc48 <load_smd_bin_copy+0xec>
	current_smd = bin_copy;
    9602ccbc:	b90b7ab8 	str	w24, [x21, #2936]
	return error;
    9602ccc0:	17ffffbe 	b	9602cbb8 <load_smd_bin_copy+0x5c>

000000009602ccc4 <flush_smd_bin_copy>:
done:
	return error;
}

static tegrabl_error_t flush_smd_bin_copy(void *smd, smd_bin_copy_t bin_copy)
{
    9602ccc4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct tegrabl_partition part;
	char *smd_part;

	smd_part = (bin_copy == SMD_COPY_PRIMARY) ? "SMD" : "SMD_b";
    9602ccc8:	7100003f 	cmp	w1, #0x0
    9602cccc:	b00000c2 	adrp	x2, 96045000 <__func__.3796+0x7>

	/* Write SMD back to storage */
	error = tegrabl_partition_open(smd_part, &part);
    9602ccd0:	9110b842 	add	x2, x2, #0x42e
{
    9602ccd4:	910003fd 	mov	x29, sp
    9602ccd8:	f9000bf3 	str	x19, [sp, #16]
    9602ccdc:	aa0003f3 	mov	x19, x0
	smd_part = (bin_copy == SMD_COPY_PRIMARY) ? "SMD" : "SMD_b";
    9602cce0:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
	error = tegrabl_partition_open(smd_part, &part);
    9602cce4:	9110a800 	add	x0, x0, #0x42a
    9602cce8:	9100a3a1 	add	x1, x29, #0x28
    9602ccec:	9a820000 	csel	x0, x0, x2, eq  // eq = none
    9602ccf0:	97ffe9c3 	bl	960273fc <tegrabl_partition_open>
	if (error != TEGRABL_NO_ERROR) {
    9602ccf4:	34000100 	cbz	w0, 9602cd14 <flush_smd_bin_copy+0x50>
    9602ccf8:	12005c00 	and	w0, w0, #0xffffff
    9602ccfc:	52aa8013 	mov	w19, #0x54000000            	// #1409286144
    9602cd00:	2a000273 	orr	w19, w19, w0
	}

	tegrabl_partition_close(&part);
done:
	return error;
}
    9602cd04:	2a1303e0 	mov	w0, w19
    9602cd08:	f9400bf3 	ldr	x19, [sp, #16]
    9602cd0c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602cd10:	d65f03c0 	ret
	storage_type = tegrabl_blockdev_get_storage_type(part.block_device);
    9602cd14:	f9401ba0 	ldr	x0, [x29, #48]
	if (bdev != NULL) {
    9602cd18:	b4000140 	cbz	x0, 9602cd40 <flush_smd_bin_copy+0x7c>
			MIN(((bdev->device_id >> 16) & 0xFFU), TEGRABL_STORAGE_INVALID);
    9602cd1c:	39405800 	ldrb	w0, [x0, #22]
		return (uint16_t)
    9602cd20:	7100281f 	cmp	w0, #0xa
    9602cd24:	540000e8 	b.hi	9602cd40 <flush_smd_bin_copy+0x7c>  // b.pmore
	if (storage_type == TEGRABL_STORAGE_QSPI_FLASH) {
    9602cd28:	71000c1f 	cmp	w0, #0x3
    9602cd2c:	540000a1 	b.ne	9602cd40 <flush_smd_bin_copy+0x7c>  // b.any
		error = tegrabl_partition_erase(&part, false);
    9602cd30:	52800001 	mov	w1, #0x0                   	// #0
    9602cd34:	9100a3a0 	add	x0, x29, #0x28
    9602cd38:	97ffea00 	bl	96027538 <tegrabl_partition_erase>
		if (error != TEGRABL_NO_ERROR) {
    9602cd3c:	35fffde0 	cbnz	w0, 9602ccf8 <flush_smd_bin_copy+0x34>
	error = tegrabl_partition_seek(&part, 0, TEGRABL_PARTITION_SEEK_SET);
    9602cd40:	52800002 	mov	w2, #0x0                   	// #0
    9602cd44:	d2800001 	mov	x1, #0x0                   	// #0
    9602cd48:	9100a3a0 	add	x0, x29, #0x28
    9602cd4c:	97ffea6d 	bl	96027700 <tegrabl_partition_seek>
	if (error != TEGRABL_NO_ERROR) {
    9602cd50:	35fffd40 	cbnz	w0, 9602ccf8 <flush_smd_bin_copy+0x34>
	error = tegrabl_partition_write(&part, smd,
    9602cd54:	aa1303e1 	mov	x1, x19
    9602cd58:	d28017e2 	mov	x2, #0xbf                  	// #191
    9602cd5c:	9100a3a0 	add	x0, x29, #0x28
    9602cd60:	97ffea0c 	bl	96027590 <tegrabl_partition_write>
    9602cd64:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9602cd68:	34000080 	cbz	w0, 9602cd78 <flush_smd_bin_copy+0xb4>
    9602cd6c:	12005c13 	and	w19, w0, #0xffffff
    9602cd70:	52aa8000 	mov	w0, #0x54000000            	// #1409286144
    9602cd74:	17ffffe3 	b	9602cd00 <flush_smd_bin_copy+0x3c>
	tegrabl_partition_close(&part);
    9602cd78:	9100a3a0 	add	x0, x29, #0x28
    9602cd7c:	97ffe9ea 	bl	96027524 <tegrabl_partition_close>
	return error;
    9602cd80:	17ffffe1 	b	9602cd04 <flush_smd_bin_copy+0x40>

000000009602cd84 <tegrabl_a_b_set_active_rootfs>:
	if (smd == NULL) {
    9602cd84:	b40002c0 	cbz	x0, 9602cddc <tegrabl_a_b_set_active_rootfs+0x58>
    9602cd88:	12001c21 	and	w1, w1, #0xff
	if ((rootfs_id != ROOTFS_A) && (rootfs_id != ROOTFS_B) &&
    9602cd8c:	7100043f 	cmp	w1, #0x1
    9602cd90:	7a438824 	ccmp	w1, #0x3, #0x4, hi  // hi = pmore
    9602cd94:	54000241 	b.ne	9602cddc <tegrabl_a_b_set_active_rootfs+0x58>  // b.any
{
    9602cd98:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602cd9c:	910003fd 	mov	x29, sp
    9602cda0:	a90153f3 	stp	x19, x20, [sp, #16]
    9602cda4:	aa0003f4 	mov	x20, x0
	val = SET_ROOTFS_ACTIVE(rootfs_id, *rootfs_select);
    9602cda8:	39409813 	ldrb	w19, [x0, #38]
    9602cdac:	121c7673 	and	w19, w19, #0xfffffff3
    9602cdb0:	2a010a61 	orr	w1, w19, w1, lsl #2
    9602cdb4:	13001c33 	sxtb	w19, w1
	*rootfs_select = val;
    9602cdb8:	39009813 	strb	w19, [x0, #38]
	val = SET_ROOTFS_RETRY_COUNT(tegrabl_get_rootfs_max_retry_count(smd),
    9602cdbc:	121e7673 	and	w19, w19, #0xfffffffc
    9602cdc0:	97ffff52 	bl	9602cb08 <tegrabl_get_rootfs_max_retry_count>
    9602cdc4:	2a000273 	orr	w19, w19, w0
	*rootfs_select = val;
    9602cdc8:	39009a93 	strb	w19, [x20, #38]
    9602cdcc:	52800000 	mov	w0, #0x0                   	// #0
}
    9602cdd0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602cdd4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602cdd8:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602cddc:	52800040 	mov	w0, #0x2                   	// #2
    9602cde0:	72aa8a80 	movk	w0, #0x5454, lsl #16
}
    9602cde4:	d65f03c0 	ret

000000009602cde8 <boot_chain_get_bootslot_from_reg>:
{
    9602cde8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602cdec:	910003fd 	mov	x29, sp
    9602cdf0:	a90153f3 	stp	x19, x20, [sp, #16]
    9602cdf4:	aa0003f4 	mov	x20, x0
	reg = tegrabl_get_boot_slot_reg();
    9602cdf8:	97ffd260 	bl	96021778 <tegrabl_get_boot_slot_reg>
    9602cdfc:	2a0003f3 	mov	w19, w0
		reg = tegrabl_get_boot_slot_reg();
    9602ce00:	97ffd25e 	bl	96021778 <tegrabl_get_boot_slot_reg>
				((BOOT_CHAIN_REG_MAGIC_GET(reg) == BOOT_CHAIN_REG_MAGIC) &&
    9602ce04:	52995fc1 	mov	w1, #0xcafe                	// #51966
    9602ce08:	6b20203f 	cmp	w1, w0, uxth
    9602ce0c:	54000141 	b.ne	9602ce34 <boot_chain_get_bootslot_from_reg+0x4c>  // b.any
				 (BOOT_CHAIN_REG_MAX_SLOTS_GET(reg) > 1U));
    9602ce10:	d3535400 	ubfx	x0, x0, #19, #3
				((BOOT_CHAIN_REG_MAGIC_GET(reg) == BOOT_CHAIN_REG_MAGIC) &&
    9602ce14:	7100041f 	cmp	w0, #0x1
    9602ce18:	540000e9 	b.ls	9602ce34 <boot_chain_get_bootslot_from_reg+0x4c>  // b.plast
	*active_slot = BOOT_CHAIN_REG_SLOT_NUM_GET(reg);
    9602ce1c:	d3504a73 	ubfx	x19, x19, #16, #3
	err = TEGRABL_NO_ERROR;
    9602ce20:	52800000 	mov	w0, #0x0                   	// #0
	*active_slot = BOOT_CHAIN_REG_SLOT_NUM_GET(reg);
    9602ce24:	b9000293 	str	w19, [x20]
}
    9602ce28:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602ce2c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602ce30:	d65f03c0 	ret
		pr_warn("No valid slot number is found in scratch register\n");
    9602ce34:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602ce38:	910f5400 	add	x0, x0, #0x3d5
    9602ce3c:	97ffd60d 	bl	96022670 <tegrabl_printf>
		pr_warn("Return default slot: %s\n", BOOT_CHAIN_SUFFIX_A);
    9602ce40:	b00000c1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602ce44:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602ce48:	91102c21 	add	x1, x1, #0x40b
    9602ce4c:	91103800 	add	x0, x0, #0x40e
    9602ce50:	97ffd608 	bl	96022670 <tegrabl_printf>
		*active_slot = BOOT_SLOT_A;
    9602ce54:	b900029f 	str	wzr, [x20]
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    9602ce58:	528001a0 	mov	w0, #0xd                   	// #13
    9602ce5c:	72aa8a80 	movk	w0, #0x5454, lsl #16
	return err;
    9602ce60:	17fffff2 	b	9602ce28 <boot_chain_get_bootslot_from_reg+0x40>

000000009602ce64 <tegrabl_a_b_get_version>:
}
    9602ce64:	79400800 	ldrh	w0, [x0, #4]
    9602ce68:	d65f03c0 	ret

000000009602ce6c <tegrabl_a_b_init_rootfs_slot_reg>:
{
    9602ce6c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602ce70:	910003fd 	mov	x29, sp
    9602ce74:	a90153f3 	stp	x19, x20, [sp, #16]
	return smd_info->version;
    9602ce78:	79400814 	ldrh	w20, [x0, #4]
	if (BOOTCTRL_SUPPORT_REDUNDANCY_USER(version) == 0U &&
    9602ce7c:	7217069f 	tst	w20, #0x600
    9602ce80:	540001c0 	b.eq	9602ceb8 <tegrabl_a_b_init_rootfs_slot_reg+0x4c>  // b.none
    9602ce84:	aa0003f3 	mov	x19, x0
	rf_reg = tegrabl_get_rootfs_slot_reg();
    9602ce88:	97ffd244 	bl	96021798 <tegrabl_get_rootfs_slot_reg>
	if (ROOTFS_AB_REG_MAGIC_GET(rf_reg) == ROOTFS_AB_REG_MAGIC) {
    9602ce8c:	529f59c1 	mov	w1, #0xface                	// #64206
    9602ce90:	6b20203f 	cmp	w1, w0, uxth
    9602ce94:	54000120 	b.eq	9602ceb8 <tegrabl_a_b_init_rootfs_slot_reg+0x4c>  // b.none
	if (BOOTCTRL_SUPPORT_ROOTFS_AB(version) &&
    9602ce98:	52848000 	mov	w0, #0x2400                	// #9216
    9602ce9c:	0a000294 	and	w20, w20, w0
    9602cea0:	7110029f 	cmp	w20, #0x400
    9602cea4:	54000121 	b.ne	9602cec8 <tegrabl_a_b_init_rootfs_slot_reg+0x5c>  // b.any
	*rootfs_retry_count = GET_ROOTFS_RETRY_COUNT(rootfs_select);
    9602cea8:	39409a60 	ldrb	w0, [x19, #38]
		rf_reg = ROOTFS_AB_REG_RETRY_COUNT_SET(retry_count, rf_reg);
    9602ceac:	530c0400 	ubfiz	w0, w0, #20, #2
    9602ceb0:	2a010000 	orr	w0, w0, w1
	tegrabl_set_rootfs_slot_reg(rf_reg);
    9602ceb4:	97ffd235 	bl	96021788 <tegrabl_set_rootfs_slot_reg>
}
    9602ceb8:	52800000 	mov	w0, #0x0                   	// #0
    9602cebc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602cec0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602cec4:	d65f03c0 	ret
	rf_reg = ROOTFS_AB_REG_MAGIC_SET(rf_reg);
    9602cec8:	2a0103e0 	mov	w0, w1
    9602cecc:	17fffffa 	b	9602ceb4 <tegrabl_a_b_init_rootfs_slot_reg+0x48>

000000009602ced0 <tegrabl_a_b_get_active_slot>:
	if (smd == NULL) {
    9602ced0:	b5000060 	cbnz	x0, 9602cedc <tegrabl_a_b_get_active_slot+0xc>
		err = boot_chain_get_bootslot_from_reg(active_slot);
    9602ced4:	aa0103e0 	mov	x0, x1
    9602ced8:	17ffffc4 	b	9602cde8 <boot_chain_get_bootslot_from_reg>
{
    9602cedc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	if (bootctrl->magic != BOOT_CHAIN_MAGIC) {
    9602cee0:	5289c002 	mov	w2, #0x4e00                	// #19968
    9602cee4:	72a86842 	movk	w2, #0x4342, lsl #16
{
    9602cee8:	910003fd 	mov	x29, sp
	if (bootctrl->magic != BOOT_CHAIN_MAGIC) {
    9602ceec:	b9400003 	ldr	w3, [x0]
    9602cef0:	6b02007f 	cmp	w3, w2
    9602cef4:	54000181 	b.ne	9602cf24 <tegrabl_a_b_get_active_slot+0x54>  // b.any
	for (i = 0; i < bootctrl->num_slots; i++) {
    9602cef8:	79400c06 	ldrh	w6, [x0, #6]
    9602cefc:	d2800002 	mov	x2, #0x0                   	// #0
	max_priority = 0;
    9602cf00:	52800004 	mov	w4, #0x0                   	// #0
	for (i = 0; i < bootctrl->num_slots; i++) {
    9602cf04:	6b06005f 	cmp	w2, w6
    9602cf08:	540001c3 	b.cc	9602cf40 <tegrabl_a_b_get_active_slot+0x70>  // b.lo, b.ul, b.last
	if (max_priority == 0U) {
    9602cf0c:	35000324 	cbnz	w4, 9602cf70 <tegrabl_a_b_get_active_slot+0xa0>
		pr_error("No bootable slot found\n");
    9602cf10:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602cf14:	91130800 	add	x0, x0, #0x4c2
    9602cf18:	97ffd5d6 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9602cf1c:	52802040 	mov	w0, #0x102                 	// #258
    9602cf20:	14000005 	b	9602cf34 <tegrabl_a_b_get_active_slot+0x64>
		pr_error("SMD is corrupted!\n");
    9602cf24:	b00000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602cf28:	9112b000 	add	x0, x0, #0x4ac
    9602cf2c:	97ffd5d1 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602cf30:	52800040 	mov	w0, #0x2                   	// #2
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    9602cf34:	72aa8a80 	movk	w0, #0x5454, lsl #16
}
    9602cf38:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602cf3c:	d65f03c0 	ret
    9602cf40:	8b020843 	add	x3, x2, x2, lsl #2
    9602cf44:	8b030003 	add	x3, x0, x3
		if ((bootctrl->slot_info[i].retry_count != 0U) &&
    9602cf48:	39402c67 	ldrb	w7, [x3, #11]
    9602cf4c:	340000e7 	cbz	w7, 9602cf68 <tegrabl_a_b_get_active_slot+0x98>
			(bootctrl->slot_info[i].priority != 0U)) {
    9602cf50:	39402063 	ldrb	w3, [x3, #8]
		if ((bootctrl->slot_info[i].retry_count != 0U) &&
    9602cf54:	340000a3 	cbz	w3, 9602cf68 <tegrabl_a_b_get_active_slot+0x98>
			if (max_priority < bootctrl->slot_info[i].priority) {
    9602cf58:	6b04007f 	cmp	w3, w4
    9602cf5c:	54000069 	b.ls	9602cf68 <tegrabl_a_b_get_active_slot+0x98>  // b.plast
    9602cf60:	2a0203e5 	mov	w5, w2
    9602cf64:	2a0303e4 	mov	w4, w3
    9602cf68:	91000442 	add	x2, x2, #0x1
    9602cf6c:	17ffffe6 	b	9602cf04 <tegrabl_a_b_get_active_slot+0x34>
	err = TEGRABL_NO_ERROR;
    9602cf70:	52800000 	mov	w0, #0x0                   	// #0
	*active_slot = (uint32_t)slot;
    9602cf74:	b9000025 	str	w5, [x1]
	return err;
    9602cf78:	17fffff0 	b	9602cf38 <tegrabl_a_b_get_active_slot+0x68>

000000009602cf7c <tegrabl_a_b_set_retry_count_reg>:
{
    9602cf7c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602cf80:	910003fd 	mov	x29, sp
    9602cf84:	a90153f3 	stp	x19, x20, [sp, #16]
    9602cf88:	2a0003f4 	mov	w20, w0
    9602cf8c:	12001c33 	and	w19, w1, #0xff
	reg = tegrabl_get_boot_slot_reg();
    9602cf90:	97ffd1fa 	bl	96021778 <tegrabl_get_boot_slot_reg>
	switch (slot) {
    9602cf94:	340000d4 	cbz	w20, 9602cfac <tegrabl_a_b_set_retry_count_reg+0x30>
    9602cf98:	7100069f 	cmp	w20, #0x1
    9602cf9c:	540000c0 	b.eq	9602cfb4 <tegrabl_a_b_set_retry_count_reg+0x38>  // b.none
}
    9602cfa0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602cfa4:	a8c27bfd 	ldp	x29, x30, [sp], #32
	tegrabl_set_boot_slot_reg(reg);
    9602cfa8:	17ffd1f0 	b	96021768 <tegrabl_set_boot_slot_reg>
		reg = BOOT_CHAIN_REG_A_RETRY_COUNT_SET(retry_count, reg);
    9602cfac:	33060e60 	bfi	w0, w19, #26, #4
		break;
    9602cfb0:	17fffffc 	b	9602cfa0 <tegrabl_a_b_set_retry_count_reg+0x24>
		reg = BOOT_CHAIN_REG_B_RETRY_COUNT_SET(retry_count, reg);
    9602cfb4:	330a0e60 	bfi	w0, w19, #22, #4
		break;
    9602cfb8:	17fffffa 	b	9602cfa0 <tegrabl_a_b_set_retry_count_reg+0x24>

000000009602cfbc <tegrabl_a_b_copy_retry_count>:
	switch (direct) {
    9602cfbc:	34000142 	cbz	w2, 9602cfe4 <tegrabl_a_b_copy_retry_count+0x28>
    9602cfc0:	7100045f 	cmp	w2, #0x1
    9602cfc4:	540000e1 	b.ne	9602cfe0 <tegrabl_a_b_copy_retry_count+0x24>  // b.any
		retry_count = (uint8_t)BOOT_CHAIN_REG_A_RETRY_COUNT_GET(*reg);
    9602cfc8:	b9400022 	ldr	w2, [x1]
    9602cfcc:	d35a7442 	ubfx	x2, x2, #26, #4
		bootctrl->slot_info[BOOT_SLOT_A].retry_count = retry_count;
    9602cfd0:	39002c02 	strb	w2, [x0, #11]
		retry_count = (uint8_t)BOOT_CHAIN_REG_B_RETRY_COUNT_GET(*reg);
    9602cfd4:	b9400021 	ldr	w1, [x1]
    9602cfd8:	d3566421 	ubfx	x1, x1, #22, #4
		bootctrl->slot_info[BOOT_SLOT_B].retry_count = retry_count;
    9602cfdc:	39004001 	strb	w1, [x0, #16]
}
    9602cfe0:	d65f03c0 	ret
		*reg = BOOT_CHAIN_REG_A_RETRY_COUNT_SET(retry_count, *reg);
    9602cfe4:	39402c02 	ldrb	w2, [x0, #11]
    9602cfe8:	b9400023 	ldr	w3, [x1]
    9602cfec:	53060c42 	ubfiz	w2, w2, #26, #4
    9602cff0:	12026c63 	and	w3, w3, #0xc3ffffff
    9602cff4:	2a030042 	orr	w2, w2, w3
    9602cff8:	b9000022 	str	w2, [x1]
		*reg = BOOT_CHAIN_REG_B_RETRY_COUNT_SET(retry_count, *reg);
    9602cffc:	12066c42 	and	w2, w2, #0xfc3fffff
    9602d000:	39404000 	ldrb	w0, [x0, #16]
    9602d004:	530a0c00 	ubfiz	w0, w0, #22, #4
    9602d008:	2a020002 	orr	w2, w0, w2
    9602d00c:	b9000022 	str	w2, [x1]
}
    9602d010:	17fffff4 	b	9602cfe0 <tegrabl_a_b_copy_retry_count+0x24>

000000009602d014 <tegrabl_a_b_get_bootslot_suffix>:
{
    9602d014:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602d018:	910003fd 	mov	x29, sp
    9602d01c:	a90153f3 	stp	x19, x20, [sp, #16]
    9602d020:	aa0003f3 	mov	x19, x0
    9602d024:	12001c34 	and	w20, w1, #0xff
		err = boot_chain_get_bootslot_from_reg(active_slot);
    9602d028:	9100b3a0 	add	x0, x29, #0x2c
    9602d02c:	97ffff6f 	bl	9602cde8 <boot_chain_get_bootslot_from_reg>
	if (err != TEGRABL_NO_ERROR) {
    9602d030:	34000080 	cbz	w0, 9602d040 <tegrabl_a_b_get_bootslot_suffix+0x2c>
		if (TEGRABL_ERROR_REASON(err) == TEGRABL_ERR_NOT_FOUND) {
    9602d034:	12001c00 	and	w0, w0, #0xff
    9602d038:	7100341f 	cmp	w0, #0xd
    9602d03c:	54000321 	b.ne	9602d0a0 <tegrabl_a_b_get_bootslot_suffix+0x8c>  // b.any
    9602d040:	b9402fa0 	ldr	w0, [x29, #44]
	if ((full_suffix == false) &&  (slot == BOOT_SLOT_A)) {
    9602d044:	35000174 	cbnz	w20, 9602d070 <tegrabl_a_b_get_bootslot_suffix+0x5c>
    9602d048:	35000240 	cbnz	w0, 9602d090 <tegrabl_a_b_get_bootslot_suffix+0x7c>
		*suffix = '\0';
    9602d04c:	3900027f 	strb	wzr, [x19]
	pr_info("Active slot suffix: %s\n", suffix);
    9602d050:	aa1303e1 	mov	x1, x19
    9602d054:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602d058:	91137400 	add	x0, x0, #0x4dd
    9602d05c:	97ffd585 	bl	96022670 <tegrabl_printf>
    9602d060:	52800000 	mov	w0, #0x0                   	// #0
}
    9602d064:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d068:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602d06c:	d65f03c0 	ret
	if (slot == BOOT_SLOT_A) {
    9602d070:	35000100 	cbnz	w0, 9602d090 <tegrabl_a_b_get_bootslot_suffix+0x7c>
		strncpy(suffix, BOOT_CHAIN_SUFFIX_A, BOOT_CHAIN_SUFFIX_LEN);
    9602d074:	900000c1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602d078:	91102c21 	add	x1, x1, #0x40b
    9602d07c:	d2800042 	mov	x2, #0x2                   	// #2
		strncpy(suffix, BOOT_CHAIN_SUFFIX_B, BOOT_CHAIN_SUFFIX_LEN);
    9602d080:	aa1303e0 	mov	x0, x19
    9602d084:	97fff493 	bl	9602a2d0 <strncpy>
	*(suffix + BOOT_CHAIN_SUFFIX_LEN) = '\0';
    9602d088:	39000a7f 	strb	wzr, [x19, #2]
    9602d08c:	17fffff1 	b	9602d050 <tegrabl_a_b_get_bootslot_suffix+0x3c>
		strncpy(suffix, BOOT_CHAIN_SUFFIX_B, BOOT_CHAIN_SUFFIX_LEN);
    9602d090:	b0000061 	adrp	x1, 9603a000 <__exidx_end+0x548>
    9602d094:	d2800042 	mov	x2, #0x2                   	// #2
    9602d098:	91132c21 	add	x1, x1, #0x4cb
    9602d09c:	17fffff9 	b	9602d080 <tegrabl_a_b_get_bootslot_suffix+0x6c>
			err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d0a0:	52800040 	mov	w0, #0x2                   	// #2
    9602d0a4:	72aa8a80 	movk	w0, #0x5454, lsl #16
	return err;
    9602d0a8:	17ffffef 	b	9602d064 <tegrabl_a_b_get_bootslot_suffix+0x50>

000000009602d0ac <tegrabl_a_b_set_bootslot_suffix>:
	if ((full_suffix == false) && (slot == BOOT_SLOT_A)) {
    9602d0ac:	7100001f 	cmp	w0, #0x0
{
    9602d0b0:	12001c42 	and	w2, w2, #0xff
    9602d0b4:	2a0003e3 	mov	w3, w0
	if ((full_suffix == false) && (slot == BOOT_SLOT_A)) {
    9602d0b8:	52000042 	eor	w2, w2, #0x1
    9602d0bc:	1a9f17e0 	cset	w0, eq  // eq = none
    9602d0c0:	6a02001f 	tst	w0, w2
    9602d0c4:	540001c1 	b.ne	9602d0fc <tegrabl_a_b_set_bootslot_suffix+0x50>  // b.any
		suffix = BOOT_CHAIN_SUFFIX_B;
    9602d0c8:	7100007f 	cmp	w3, #0x0
    9602d0cc:	b0000062 	adrp	x2, 9603a000 <__exidx_end+0x548>
	strcat(partition, suffix);
    9602d0d0:	91132c42 	add	x2, x2, #0x4cb
{
    9602d0d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9602d0d8:	aa0103e0 	mov	x0, x1
		suffix = BOOT_CHAIN_SUFFIX_B;
    9602d0dc:	900000c1 	adrp	x1, 96045000 <__func__.3796+0x7>
	strcat(partition, suffix);
    9602d0e0:	91102c21 	add	x1, x1, #0x40b
{
    9602d0e4:	910003fd 	mov	x29, sp
	strcat(partition, suffix);
    9602d0e8:	9a820021 	csel	x1, x1, x2, eq  // eq = none
    9602d0ec:	97fff44c 	bl	9602a21c <strcat>
}
    9602d0f0:	52800000 	mov	w0, #0x0                   	// #0
    9602d0f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602d0f8:	d65f03c0 	ret
    9602d0fc:	52800000 	mov	w0, #0x0                   	// #0
    9602d100:	d65f03c0 	ret

000000009602d104 <tegrabl_a_b_get_priority>:
	if ((smd_addr == NULL) || (slot >= MAX_SLOTS) || (priority == NULL)) {
    9602d104:	f100001f 	cmp	x0, #0x0
    9602d108:	7a411822 	ccmp	w1, #0x1, #0x2, ne  // ne = any
    9602d10c:	54000128 	b.hi	9602d130 <tegrabl_a_b_get_priority+0x2c>  // b.pmore
    9602d110:	b4000102 	cbz	x2, 9602d130 <tegrabl_a_b_get_priority+0x2c>
	*priority = smd->slot_info[slot].priority;
    9602d114:	2a0103e1 	mov	w1, w1
    9602d118:	8b010821 	add	x1, x1, x1, lsl #2
    9602d11c:	8b010001 	add	x1, x0, x1
    9602d120:	39402020 	ldrb	w0, [x1, #8]
    9602d124:	39000040 	strb	w0, [x2]
	return TEGRABL_NO_ERROR;
    9602d128:	52800000 	mov	w0, #0x0                   	// #0
}
    9602d12c:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d130:	52800040 	mov	w0, #0x2                   	// #2
    9602d134:	72aa8a80 	movk	w0, #0x5454, lsl #16
    9602d138:	17fffffd 	b	9602d12c <tegrabl_a_b_get_priority+0x28>

000000009602d13c <tegrabl_a_b_set_priority>:
	if ((smd_addr == NULL) || (slot >= (uint32_t)MAX_SLOTS)) {
    9602d13c:	f100001f 	cmp	x0, #0x0
{
    9602d140:	12001c42 	and	w2, w2, #0xff
	if ((smd_addr == NULL) || (slot >= (uint32_t)MAX_SLOTS)) {
    9602d144:	7a411822 	ccmp	w1, #0x1, #0x2, ne  // ne = any
    9602d148:	540000e8 	b.hi	9602d164 <tegrabl_a_b_set_priority+0x28>  // b.pmore
	smd->slot_info[slot].priority = priority;
    9602d14c:	2a0103e1 	mov	w1, w1
    9602d150:	8b010821 	add	x1, x1, x1, lsl #2
    9602d154:	8b010001 	add	x1, x0, x1
	return TEGRABL_NO_ERROR;
    9602d158:	52800000 	mov	w0, #0x0                   	// #0
	smd->slot_info[slot].priority = priority;
    9602d15c:	39002022 	strb	w2, [x1, #8]
}
    9602d160:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d164:	52800040 	mov	w0, #0x2                   	// #2
    9602d168:	72aa8a80 	movk	w0, #0x5454, lsl #16
    9602d16c:	17fffffd 	b	9602d160 <tegrabl_a_b_set_priority+0x24>

000000009602d170 <tegrabl_a_b_get_smd>:
{
    9602d170:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602d174:	910003fd 	mov	x29, sp
    9602d178:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (smd_loadaddress != NULL) {
    9602d17c:	b0000255 	adrp	x21, 96076000 <free_dram_block+0x38e8>
{
    9602d180:	a90153f3 	stp	x19, x20, [sp, #16]
	if (smd_loadaddress != NULL) {
    9602d184:	f945c6a1 	ldr	x1, [x21, #2952]
{
    9602d188:	a90363f7 	stp	x23, x24, [sp, #48]
	if (smd_loadaddress != NULL) {
    9602d18c:	b4000081 	cbz	x1, 9602d19c <tegrabl_a_b_get_smd+0x2c>
		*smd = smd_loadaddress;
    9602d190:	f9000001 	str	x1, [x0]
		BOOTCTRL_IS_UNIFIED_AB_ENABLED(version) != 0U) {
    9602d194:	52800013 	mov	w19, #0x0                   	// #0
	return error;
    9602d198:	1400004d 	b	9602d2cc <tegrabl_a_b_get_smd+0x15c>
    9602d19c:	aa0003f4 	mov	x20, x0
	smd_loadaddress = tegrabl_malloc(smd_len);
    9602d1a0:	d28017e0 	mov	x0, #0xbf                  	// #191
    9602d1a4:	97ffe635 	bl	96026a78 <tegrabl_malloc>
    9602d1a8:	f905c6a0 	str	x0, [x21, #2952]
	if (smd_loadaddress == NULL) {
    9602d1ac:	b4000140 	cbz	x0, 9602d1d4 <tegrabl_a_b_get_smd+0x64>
	smd_backup = tegrabl_malloc(smd_len);
    9602d1b0:	b0000256 	adrp	x22, 96076000 <free_dram_block+0x38e8>
    9602d1b4:	d28017e0 	mov	x0, #0xbf                  	// #191
    9602d1b8:	97ffe630 	bl	96026a78 <tegrabl_malloc>
    9602d1bc:	aa1603f8 	mov	x24, x22
    9602d1c0:	f905c2c0 	str	x0, [x22, #2944]
	if (smd_backup == NULL) {
    9602d1c4:	b50000e0 	cbnz	x0, 9602d1e0 <tegrabl_a_b_get_smd+0x70>
		tegrabl_free(smd_loadaddress);
    9602d1c8:	f945c6a0 	ldr	x0, [x21, #2952]
    9602d1cc:	97ffe63b 	bl	96026ab8 <tegrabl_free>
		smd_loadaddress = NULL;
    9602d1d0:	f905c6bf 	str	xzr, [x21, #2952]
		error = TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9602d1d4:	52800073 	mov	w19, #0x3                   	// #3
    9602d1d8:	72aa8a93 	movk	w19, #0x5454, lsl #16
    9602d1dc:	1400003c 	b	9602d2cc <tegrabl_a_b_get_smd+0x15c>
    9602d1e0:	aa1503f7 	mov	x23, x21
	error = load_smd_bin_copy(SMD_COPY_PRIMARY);
    9602d1e4:	52800000 	mov	w0, #0x0                   	// #0
    9602d1e8:	97fffe5d 	bl	9602cb5c <load_smd_bin_copy>
	if (error == TEGRABL_NO_ERROR) {
    9602d1ec:	350005c0 	cbnz	w0, 9602d2a4 <tegrabl_a_b_get_smd+0x134>
		*smd = smd_loadaddress;
    9602d1f0:	f945c6e0 	ldr	x0, [x23, #2952]
	memcpy(smd_backup, smd_loadaddress, smd_len);
    9602d1f4:	d28017e2 	mov	x2, #0xbf                  	// #191
		*smd = smd_loadaddress;
    9602d1f8:	f9000280 	str	x0, [x20]
	memcpy(smd_backup, smd_loadaddress, smd_len);
    9602d1fc:	f945c6e1 	ldr	x1, [x23, #2952]
    9602d200:	f945c300 	ldr	x0, [x24, #2944]
    9602d204:	97fff348 	bl	96029f24 <memcpy>
	tegrabl_a_b_init_rootfs_slot_reg(*smd);
    9602d208:	f9400280 	ldr	x0, [x20]
    9602d20c:	97ffff18 	bl	9602ce6c <tegrabl_a_b_init_rootfs_slot_reg>
	tegrabl_a_b_select_active_rootfs(*smd);
    9602d210:	f9400293 	ldr	x19, [x20]
	if (smd == NULL) {
    9602d214:	b4fffc13 	cbz	x19, 9602d194 <tegrabl_a_b_get_smd+0x24>
	return smd_info->version;
    9602d218:	79400a60 	ldrh	w0, [x19, #4]
	if (BOOTCTRL_SUPPORT_ROOTFS_AB(version) == 0U ||
    9602d21c:	3657fbc0 	tbz	w0, #10, 9602d194 <tegrabl_a_b_get_smd+0x24>
		BOOTCTRL_IS_UNIFIED_AB_ENABLED(version) != 0U) {
    9602d220:	52848001 	mov	w1, #0x2400                	// #9216
    9602d224:	6a20003f 	bics	wzr, w1, w0
    9602d228:	54000081 	b.ne	9602d238 <tegrabl_a_b_get_smd+0xc8>  // b.any
    9602d22c:	12001c00 	and	w0, w0, #0xff
    9602d230:	7100101f 	cmp	w0, #0x4
    9602d234:	54fffb08 	b.hi	9602d194 <tegrabl_a_b_get_smd+0x24>  // b.pmore
	rootfs_select = ROOTFS_SELECT(smd_v2);
    9602d238:	39409a74 	ldrb	w20, [x19, #38]
	rf_reg = tegrabl_get_rootfs_slot_reg();
    9602d23c:	97ffd157 	bl	96021798 <tegrabl_get_rootfs_slot_reg>
    9602d240:	2a0003f5 	mov	w21, w0
	retry_count = ROOTFS_AB_REG_RETRY_COUNT_GET(rf_reg);
    9602d244:	d35456a1 	ubfx	x1, x21, #20, #2
	if (retry_count == 0) {
    9602d248:	35000221 	cbnz	w1, 9602d28c <tegrabl_a_b_get_smd+0x11c>
	rfs_id = GET_ROOTFS_ACTIVE(rootfs_select);
    9602d24c:	d3420e81 	ubfx	x1, x20, #2, #2
	if ((smd == NULL) || (slot_id >= MAX_SLOTS)) {
    9602d250:	7100043f 	cmp	w1, #0x1
    9602d254:	540000a8 	b.hi	9602d268 <tegrabl_a_b_get_smd+0xf8>  // b.pmore
	ROOTFS_STATUS(smd_v2, slot_id) = rootfs_status;
    9602d258:	2a0103e0 	mov	w0, w1
    9602d25c:	52800062 	mov	w2, #0x3                   	// #3
    9602d260:	8b000260 	add	x0, x19, x0
    9602d264:	39009c02 	strb	w2, [x0, #39]
		tegrabl_a_b_get_rootfs_status(smd, !rfs_id, &rfs_status);
    9602d268:	7100003f 	cmp	w1, #0x0
	*rootfs_status = ROOTFS_STATUS(smd_v2, slot_id);
    9602d26c:	9a931660 	cinc	x0, x19, eq  // eq = none
    9602d270:	1a9f17e1 	cset	w1, eq  // eq = none
		if (rfs_status == ROOTFS_STATUS_NORMAL) {
    9602d274:	39409c00 	ldrb	w0, [x0, #39]
    9602d278:	35000360 	cbnz	w0, 9602d2e4 <tegrabl_a_b_get_smd+0x174>
			tegrabl_a_b_set_active_rootfs(smd, !rfs_id);
    9602d27c:	aa1303e0 	mov	x0, x19
    9602d280:	97fffec1 	bl	9602cd84 <tegrabl_a_b_set_active_rootfs>
	*rootfs_retry_count = GET_ROOTFS_RETRY_COUNT(rootfs_select);
    9602d284:	39409a61 	ldrb	w1, [x19, #38]
    9602d288:	12000421 	and	w1, w1, #0x3
	rf_reg = ROOTFS_AB_REG_RETRY_COUNT_SET(retry_count - 1, rf_reg);
    9602d28c:	51000421 	sub	w1, w1, #0x1
    9602d290:	120a76a0 	and	w0, w21, #0xffcfffff
    9602d294:	530c0421 	ubfiz	w1, w1, #20, #2
	tegrabl_set_rootfs_slot_reg(rf_reg);
    9602d298:	2a000020 	orr	w0, w1, w0
    9602d29c:	97ffd13b 	bl	96021788 <tegrabl_set_rootfs_slot_reg>
    9602d2a0:	17ffffbd 	b	9602d194 <tegrabl_a_b_get_smd+0x24>
	error = load_smd_bin_copy(SMD_COPY_SECONDARY);
    9602d2a4:	52800020 	mov	w0, #0x1                   	// #1
    9602d2a8:	97fffe2d 	bl	9602cb5c <load_smd_bin_copy>
    9602d2ac:	2a0003f3 	mov	w19, w0
	if (error == TEGRABL_NO_ERROR) {
    9602d2b0:	34fffa00 	cbz	w0, 9602d1f0 <tegrabl_a_b_get_smd+0x80>
	tegrabl_free(smd_loadaddress);
    9602d2b4:	f945c6a0 	ldr	x0, [x21, #2952]
    9602d2b8:	97ffe600 	bl	96026ab8 <tegrabl_free>
	smd_loadaddress = NULL;
    9602d2bc:	f905c6bf 	str	xzr, [x21, #2952]
	tegrabl_free(smd_backup);
    9602d2c0:	f945c2c0 	ldr	x0, [x22, #2944]
    9602d2c4:	97ffe5fd 	bl	96026ab8 <tegrabl_free>
	smd_backup = NULL;
    9602d2c8:	f905c2df 	str	xzr, [x22, #2944]
}
    9602d2cc:	2a1303e0 	mov	w0, w19
    9602d2d0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d2d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602d2d8:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602d2dc:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602d2e0:	d65f03c0 	ret
			tegrabl_a_b_set_active_rootfs(smd, ROOTFS_INVALID);
    9602d2e4:	52800061 	mov	w1, #0x3                   	// #3
    9602d2e8:	aa1303e0 	mov	x0, x19
    9602d2ec:	97fffea6 	bl	9602cd84 <tegrabl_a_b_set_active_rootfs>
    9602d2f0:	17ffffa9 	b	9602d194 <tegrabl_a_b_get_smd+0x24>

000000009602d2f4 <tegrabl_a_b_get_current_rootfs_id>:
{
    9602d2f4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602d2f8:	910003fd 	mov	x29, sp
    9602d2fc:	f9000bf3 	str	x19, [sp, #16]
    9602d300:	f90017a0 	str	x0, [x29, #40]
	if (rootfs_id == NULL) {
    9602d304:	b50000c1 	cbnz	x1, 9602d31c <tegrabl_a_b_get_current_rootfs_id+0x28>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d308:	52800040 	mov	w0, #0x2                   	// #2
    9602d30c:	72aa8a80 	movk	w0, #0x5454, lsl #16
}
    9602d310:	f9400bf3 	ldr	x19, [sp, #16]
    9602d314:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602d318:	d65f03c0 	ret
    9602d31c:	aa0103f3 	mov	x19, x1
	if (smd == NULL) {
    9602d320:	b5000100 	cbnz	x0, 9602d340 <tegrabl_a_b_get_current_rootfs_id+0x4c>
		error = tegrabl_a_b_get_smd((void **)&smd);
    9602d324:	9100a3a0 	add	x0, x29, #0x28
    9602d328:	97ffff92 	bl	9602d170 <tegrabl_a_b_get_smd>
		if (error != TEGRABL_NO_ERROR) {
    9602d32c:	340000a0 	cbz	w0, 9602d340 <tegrabl_a_b_get_current_rootfs_id+0x4c>
    9602d330:	12005c00 	and	w0, w0, #0xffffff
    9602d334:	52aa8001 	mov	w1, #0x54000000            	// #1409286144
    9602d338:	2a010000 	orr	w0, w0, w1
			return error;
    9602d33c:	17fffff5 	b	9602d310 <tegrabl_a_b_get_current_rootfs_id+0x1c>
	version = tegrabl_a_b_get_version(smd);
    9602d340:	f94017a0 	ldr	x0, [x29, #40]
	return smd_info->version;
    9602d344:	79400801 	ldrh	w1, [x0, #4]
	if (BOOTCTRL_SUPPORT_ROOTFS_AB(version) == 0U) {
    9602d348:	3657fe01 	tbz	w1, #10, 9602d308 <tegrabl_a_b_get_current_rootfs_id+0x14>
	if (BOOTCTRL_IS_UNIFIED_AB_ENABLED(version)) {
    9602d34c:	52848002 	mov	w2, #0x2400                	// #9216
    9602d350:	6a21005f 	bics	wzr, w2, w1
    9602d354:	54000141 	b.ne	9602d37c <tegrabl_a_b_get_current_rootfs_id+0x88>  // b.any
    9602d358:	12001c21 	and	w1, w1, #0xff
    9602d35c:	7100103f 	cmp	w1, #0x4
    9602d360:	540000e9 	b.ls	9602d37c <tegrabl_a_b_get_current_rootfs_id+0x88>  // b.plast
		error = tegrabl_a_b_get_active_slot(smd, &bl_slot);
    9602d364:	9100f3a1 	add	x1, x29, #0x3c
    9602d368:	97fffeda 	bl	9602ced0 <tegrabl_a_b_get_active_slot>
		if (error != TEGRABL_NO_ERROR) {
    9602d36c:	35fffd20 	cbnz	w0, 9602d310 <tegrabl_a_b_get_current_rootfs_id+0x1c>
		*rootfs_id = (uint8_t)bl_slot;
    9602d370:	b9403fa1 	ldr	w1, [x29, #60]
    9602d374:	39000261 	strb	w1, [x19]
		return error;
    9602d378:	17ffffe6 	b	9602d310 <tegrabl_a_b_get_current_rootfs_id+0x1c>
	*rootfs_id = GET_ROOTFS_ACTIVE(rootfs_select);
    9602d37c:	39409800 	ldrb	w0, [x0, #38]
    9602d380:	d3420c00 	ubfx	x0, x0, #2, #2
    9602d384:	39000260 	strb	w0, [x19]
	return TEGRABL_NO_ERROR;
    9602d388:	52800000 	mov	w0, #0x0                   	// #0
    9602d38c:	17ffffe1 	b	9602d310 <tegrabl_a_b_get_current_rootfs_id+0x1c>

000000009602d390 <tegrabl_a_b_get_rootfs_suffix>:
{
    9602d390:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602d394:	910003fd 	mov	x29, sp
    9602d398:	a90153f3 	stp	x19, x20, [sp, #16]
    9602d39c:	aa0003f3 	mov	x19, x0
    9602d3a0:	12001c34 	and	w20, w1, #0xff
	err = tegrabl_a_b_get_current_rootfs_id(NULL, &rootfs_id);
    9602d3a4:	d2800000 	mov	x0, #0x0                   	// #0
    9602d3a8:	9100bfa1 	add	x1, x29, #0x2f
    9602d3ac:	97ffffd2 	bl	9602d2f4 <tegrabl_a_b_get_current_rootfs_id>
	if (err != TEGRABL_NO_ERROR) {
    9602d3b0:	34000180 	cbz	w0, 9602d3e0 <tegrabl_a_b_get_rootfs_suffix+0x50>
		rootfs_id = ROOTFS_A;
    9602d3b4:	3900bfbf 	strb	wzr, [x29, #47]
	if ((full_suffix == false) && (rootfs_id == ROOTFS_A)) {
    9602d3b8:	350001b4 	cbnz	w20, 9602d3ec <tegrabl_a_b_get_rootfs_suffix+0x5c>
		*suffix = '\0';
    9602d3bc:	3900027f 	strb	wzr, [x19]
	pr_info("Active rootfs suffix: %s\n", suffix);
    9602d3c0:	aa1303e1 	mov	x1, x19
    9602d3c4:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602d3c8:	9113e000 	add	x0, x0, #0x4f8
    9602d3cc:	97ffd4a9 	bl	96022670 <tegrabl_printf>
	return err;
    9602d3d0:	52800000 	mov	w0, #0x0                   	// #0
}
    9602d3d4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d3d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602d3dc:	d65f03c0 	ret
	if ((full_suffix == false) && (rootfs_id == ROOTFS_A)) {
    9602d3e0:	35000074 	cbnz	w20, 9602d3ec <tegrabl_a_b_get_rootfs_suffix+0x5c>
    9602d3e4:	3940bfa0 	ldrb	w0, [x29, #47]
    9602d3e8:	34fffea0 	cbz	w0, 9602d3bc <tegrabl_a_b_get_rootfs_suffix+0x2c>
	if (rootfs_id == ROOTFS_A) {
    9602d3ec:	3940bfa0 	ldrb	w0, [x29, #47]
    9602d3f0:	35000100 	cbnz	w0, 9602d410 <tegrabl_a_b_get_rootfs_suffix+0x80>
		strncpy(suffix, BOOT_CHAIN_SUFFIX_A, BOOT_CHAIN_SUFFIX_LEN);
    9602d3f4:	900000c1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602d3f8:	91102c21 	add	x1, x1, #0x40b
    9602d3fc:	d2800042 	mov	x2, #0x2                   	// #2
		strncpy(suffix, BOOT_CHAIN_SUFFIX_B, BOOT_CHAIN_SUFFIX_LEN);
    9602d400:	aa1303e0 	mov	x0, x19
    9602d404:	97fff3b3 	bl	9602a2d0 <strncpy>
	*(suffix + BOOT_CHAIN_SUFFIX_LEN) = '\0';
    9602d408:	39000a7f 	strb	wzr, [x19, #2]
    9602d40c:	17ffffed 	b	9602d3c0 <tegrabl_a_b_get_rootfs_suffix+0x30>
	} else if (rootfs_id == ROOTFS_B) {
    9602d410:	7100041f 	cmp	w0, #0x1
    9602d414:	540000a1 	b.ne	9602d428 <tegrabl_a_b_get_rootfs_suffix+0x98>  // b.any
		strncpy(suffix, BOOT_CHAIN_SUFFIX_B, BOOT_CHAIN_SUFFIX_LEN);
    9602d418:	b0000061 	adrp	x1, 9603a000 <__exidx_end+0x548>
    9602d41c:	d2800042 	mov	x2, #0x2                   	// #2
    9602d420:	91132c21 	add	x1, x1, #0x4cb
    9602d424:	17fffff7 	b	9602d400 <tegrabl_a_b_get_rootfs_suffix+0x70>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d428:	52800040 	mov	w0, #0x2                   	// #2
    9602d42c:	72aa8a80 	movk	w0, #0x5454, lsl #16
    9602d430:	17ffffe9 	b	9602d3d4 <tegrabl_a_b_get_rootfs_suffix+0x44>

000000009602d434 <tegrabl_a_b_rootfs_is_all_unbootable>:
{
    9602d434:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602d438:	910003fd 	mov	x29, sp
    9602d43c:	a90153f3 	stp	x19, x20, [sp, #16]
    9602d440:	f90017a0 	str	x0, [x29, #40]
	if (smd == NULL) {
    9602d444:	b4000340 	cbz	x0, 9602d4ac <tegrabl_a_b_rootfs_is_all_unbootable+0x78>
	version = tegrabl_a_b_get_version(smd);
    9602d448:	f94017a0 	ldr	x0, [x29, #40]
	if (BOOTCTRL_IS_UNIFIED_AB_ENABLED(version) ||
    9602d44c:	52848002 	mov	w2, #0x2400                	// #9216
	return smd_info->version;
    9602d450:	79400801 	ldrh	w1, [x0, #4]
	if (BOOTCTRL_IS_UNIFIED_AB_ENABLED(version) ||
    9602d454:	6a21005f 	bics	wzr, w2, w1
    9602d458:	54000081 	b.ne	9602d468 <tegrabl_a_b_rootfs_is_all_unbootable+0x34>  // b.any
    9602d45c:	12001c22 	and	w2, w1, #0xff
    9602d460:	7100105f 	cmp	w2, #0x4
    9602d464:	54000048 	b.hi	9602d46c <tegrabl_a_b_rootfs_is_all_unbootable+0x38>  // b.pmore
    9602d468:	36480301 	tbz	w1, #9, 9602d4c8 <tegrabl_a_b_rootfs_is_all_unbootable+0x94>
		rf_reg = tegrabl_get_rootfs_slot_reg();
    9602d46c:	97ffd0cb 	bl	96021798 <tegrabl_get_rootfs_slot_reg>
    9602d470:	2a0003f3 	mov	w19, w0
	max_bl_retry_count = tegrabl_get_max_retry_count(smd);
    9602d474:	f94017a0 	ldr	x0, [x29, #40]
		rotate_count = ROOTFS_AB_REG_ROTATE_COUNT_GET(rf_reg);
    9602d478:	d3504e74 	ubfx	x20, x19, #16, #4
	max_bl_retry_count = tegrabl_get_max_retry_count(smd);
    9602d47c:	97fffd8f 	bl	9602cab8 <tegrabl_get_max_retry_count>
	if (max_bl_retry_count * 2 < ROOTFS_AB_ROTATE_COUNT) {
    9602d480:	531f1c01 	ubfiz	w1, w0, #1, #8
		max_rotate_count = max_bl_retry_count * 2;
    9602d484:	7100103f 	cmp	w1, #0x4
    9602d488:	531f1800 	ubfiz	w0, w0, #1, #7
    9602d48c:	52800081 	mov	w1, #0x4                   	// #4
    9602d490:	1a81b000 	csel	w0, w0, w1, lt  // lt = tstop
		if (rotate_count >= max_rotate_count) {
    9602d494:	6b00029f 	cmp	w20, w0
    9602d498:	54000103 	b.cc	9602d4b8 <tegrabl_a_b_rootfs_is_all_unbootable+0x84>  // b.lo, b.ul, b.last
			tegrabl_set_rootfs_slot_reg(rf_reg);
    9602d49c:	120c6e60 	and	w0, w19, #0xfff0ffff
    9602d4a0:	97ffd0ba 	bl	96021788 <tegrabl_set_rootfs_slot_reg>
			return true;
    9602d4a4:	52800020 	mov	w0, #0x1                   	// #1
    9602d4a8:	14000005 	b	9602d4bc <tegrabl_a_b_rootfs_is_all_unbootable+0x88>
		err = tegrabl_a_b_get_smd((void **)&smd);
    9602d4ac:	9100a3a0 	add	x0, x29, #0x28
    9602d4b0:	97ffff30 	bl	9602d170 <tegrabl_a_b_get_smd>
		if (err != TEGRABL_NO_ERROR) {
    9602d4b4:	34fffca0 	cbz	w0, 9602d448 <tegrabl_a_b_rootfs_is_all_unbootable+0x14>
			return false;
    9602d4b8:	52800000 	mov	w0, #0x0                   	// #0
}
    9602d4bc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d4c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602d4c4:	d65f03c0 	ret
	err = tegrabl_a_b_get_current_rootfs_id(smd, &rootfs_id);
    9602d4c8:	9100ffa1 	add	x1, x29, #0x3f
    9602d4cc:	97ffff8a 	bl	9602d2f4 <tegrabl_a_b_get_current_rootfs_id>
	if (err != TEGRABL_NO_ERROR) {
    9602d4d0:	35ffff40 	cbnz	w0, 9602d4b8 <tegrabl_a_b_rootfs_is_all_unbootable+0x84>
	if (rootfs_id == ROOTFS_INVALID)
    9602d4d4:	3940ffa0 	ldrb	w0, [x29, #63]
    9602d4d8:	71000c1f 	cmp	w0, #0x3
    9602d4dc:	1a9f17e0 	cset	w0, eq  // eq = none
    9602d4e0:	17fffff7 	b	9602d4bc <tegrabl_a_b_rootfs_is_all_unbootable+0x88>

000000009602d4e4 <tegrabl_a_b_flush_smd>:
	struct slot_meta_data *bootctrl = (struct slot_meta_data *)smd;
	struct slot_meta_data_v2 *smd_v2;
	uint32_t smd_payload_len;
	smd_bin_copy_t bin_copy;

	if (smd == NULL) {
    9602d4e4:	b4000400 	cbz	x0, 9602d564 <tegrabl_a_b_flush_smd+0x80>
{
    9602d4e8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		goto done;
	}

	/* Update crc field before writing */
	smd_payload_len = sizeof(struct slot_meta_data) - sizeof(uint32_t);
	bootctrl->crc32 = tegrabl_utils_crc32(0, smd, smd_payload_len);
    9602d4ec:	aa0003e1 	mov	x1, x0
    9602d4f0:	d2800242 	mov	x2, #0x12                  	// #18
{
    9602d4f4:	910003fd 	mov	x29, sp
    9602d4f8:	a90153f3 	stp	x19, x20, [sp, #16]
    9602d4fc:	aa0003f3 	mov	x19, x0
	bootctrl->crc32 = tegrabl_utils_crc32(0, smd, smd_payload_len);
    9602d500:	52800000 	mov	w0, #0x0                   	// #0
    9602d504:	97ffe902 	bl	9602790c <tegrabl_utils_crc32>
    9602d508:	b8012260 	stur	w0, [x19, #18]

	/* Update crc for SMD extension sanity */
	if (BOOT_CHAIN_VERSION_GET(tegrabl_a_b_get_version(smd)) >=
    9602d50c:	39401260 	ldrb	w0, [x19, #4]
    9602d510:	71000c1f 	cmp	w0, #0x3
    9602d514:	540000c9 	b.ls	9602d52c <tegrabl_a_b_flush_smd+0x48>  // b.plast
				BOOT_CHAIN_VERSION_ROOTFS_AB) {
		smd_v2 = (struct slot_meta_data_v2 *)smd;
		smd_payload_len = sizeof(struct slot_meta_data_ext)
				  - sizeof(uint32_t);
		smd_v2->smd_ext.crc32 = tegrabl_utils_crc32(0,
    9602d518:	d28014a2 	mov	x2, #0xa5                  	// #165
    9602d51c:	91006a61 	add	x1, x19, #0x1a
    9602d520:	52800000 	mov	w0, #0x0                   	// #0
    9602d524:	97ffe8fa 	bl	9602790c <tegrabl_utils_crc32>
    9602d528:	b8016260 	stur	w0, [x19, #22]
	/*
	 * Always flush both primary SMD and secondary SMD.
	 * However, must start with the non-current copy to prevent both
	 * copies from corrupted.
	 */
	bin_copy = (current_smd == SMD_COPY_PRIMARY) ? SMD_COPY_SECONDARY : SMD_COPY_PRIMARY;
    9602d52c:	b0000254 	adrp	x20, 96076000 <free_dram_block+0x38e8>
    9602d530:	b94b7a80 	ldr	w0, [x20, #2936]
    9602d534:	7100001f 	cmp	w0, #0x0
	error = flush_smd_bin_copy(smd, bin_copy);
    9602d538:	aa1303e0 	mov	x0, x19
    9602d53c:	1a9f17e1 	cset	w1, eq  // eq = none
    9602d540:	97fffde1 	bl	9602ccc4 <flush_smd_bin_copy>
	if (error != TEGRABL_NO_ERROR)
    9602d544:	35000160 	cbnz	w0, 9602d570 <tegrabl_a_b_flush_smd+0x8c>
		goto done;
	bin_copy = (current_smd == SMD_COPY_PRIMARY) ? SMD_COPY_PRIMARY : SMD_COPY_SECONDARY;
    9602d548:	b94b7a80 	ldr	w0, [x20, #2936]
    9602d54c:	7100001f 	cmp	w0, #0x0
	error = flush_smd_bin_copy(smd, bin_copy);
    9602d550:	aa1303e0 	mov	x0, x19

done:
	return error;
}
    9602d554:	a94153f3 	ldp	x19, x20, [sp, #16]
	error = flush_smd_bin_copy(smd, bin_copy);
    9602d558:	1a9f07e1 	cset	w1, ne  // ne = any
}
    9602d55c:	a8c27bfd 	ldp	x29, x30, [sp], #32
	error = flush_smd_bin_copy(smd, bin_copy);
    9602d560:	17fffdd9 	b	9602ccc4 <flush_smd_bin_copy>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d564:	52800040 	mov	w0, #0x2                   	// #2
    9602d568:	72aa8a80 	movk	w0, #0x5454, lsl #16
}
    9602d56c:	d65f03c0 	ret
    9602d570:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d574:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602d578:	d65f03c0 	ret

000000009602d57c <tegrabl_a_b_update_smd>:

	return error;
}

tegrabl_error_t tegrabl_a_b_update_smd(void)
{
    9602d57c:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    9602d580:	910003fd 	mov	x29, sp
    9602d584:	a90153f3 	stp	x19, x20, [sp, #16]
    9602d588:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602d58c:	a90363f7 	stp	x23, x24, [sp, #48]
	tegrabl_error_t error = TEGRABL_NO_ERROR;
	struct slot_meta_data *smd = NULL;
    9602d590:	f9002fbf 	str	xzr, [x29, #88]
{
    9602d594:	f90023f9 	str	x25, [sp, #64]
	uint32_t reg;
	uint8_t bc_flag;
	uint16_t version;

	reg = tegrabl_get_boot_slot_reg();
    9602d598:	97ffd078 	bl	96021778 <tegrabl_get_boot_slot_reg>
    9602d59c:	b90057a0 	str	w0, [x29, #84]
    9602d5a0:	2a0003f5 	mov	w21, w0
	bc_flag = (uint8_t)BOOT_CHAIN_REG_UPDATE_FLAG_GET(reg);
	error = tegrabl_a_b_get_smd((void **)&smd);
    9602d5a4:	910163a0 	add	x0, x29, #0x58
    9602d5a8:	97fffef2 	bl	9602d170 <tegrabl_a_b_get_smd>
    9602d5ac:	2a0003f3 	mov	w19, w0
	if (error != TEGRABL_NO_ERROR) {
    9602d5b0:	340002c0 	cbz	w0, 9602d608 <tegrabl_a_b_update_smd+0x8c>
    9602d5b4:	12005c13 	and	w19, w0, #0xffffff
    9602d5b8:	52aa8001 	mov	w1, #0x54000000            	// #1409286144
    9602d5bc:	2a010273 	orr	w19, w19, w1
		}
	}

done:
	/* Clear SR before handing over to kernel */
	if (BOOT_CHAIN_REG_MAGIC_GET(reg) == BOOT_CHAIN_REG_MAGIC) {
    9602d5c0:	7940aba1 	ldrh	w1, [x29, #84]
    9602d5c4:	52995fc0 	mov	w0, #0xcafe                	// #51966
    9602d5c8:	6b00003f 	cmp	w1, w0
    9602d5cc:	54000081 	b.ne	9602d5dc <tegrabl_a_b_update_smd+0x60>  // b.any
		reg = 0;
		tegrabl_set_boot_slot_reg(reg);
    9602d5d0:	52800000 	mov	w0, #0x0                   	// #0
		reg = 0;
    9602d5d4:	b90057bf 	str	wzr, [x29, #84]
		tegrabl_set_boot_slot_reg(reg);
    9602d5d8:	97ffd064 	bl	96021768 <tegrabl_set_boot_slot_reg>
	}

	if (error != TEGRABL_NO_ERROR) {
    9602d5dc:	34000093 	cbz	w19, 9602d5ec <tegrabl_a_b_update_smd+0x70>
    9602d5e0:	12005e73 	and	w19, w19, #0xffffff
    9602d5e4:	52aa8001 	mov	w1, #0x54000000            	// #1409286144
    9602d5e8:	2a010273 	orr	w19, w19, w1
		TEGRABL_SET_HIGHEST_MODULE(error);
	}
	return error;
}
    9602d5ec:	2a1303e0 	mov	w0, w19
    9602d5f0:	f94023f9 	ldr	x25, [sp, #64]
    9602d5f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d5f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602d5fc:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602d600:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9602d604:	d65f03c0 	ret
	if ((BOOT_CHAIN_REG_MAGIC_GET(reg) == BOOT_CHAIN_REG_MAGIC) &&
    9602d608:	b94057b4 	ldr	w20, [x29, #84]
    9602d60c:	52995fc0 	mov	w0, #0xcafe                	// #51966
    9602d610:	6b34201f 	cmp	w0, w20, uxth
    9602d614:	54fffd61 	b.ne	9602d5c0 <tegrabl_a_b_update_smd+0x44>  // b.any
	bc_flag = (uint8_t)BOOT_CHAIN_REG_UPDATE_FLAG_GET(reg);
    9602d618:	531e7eb5 	lsr	w21, w21, #30
	if ((BOOT_CHAIN_REG_MAGIC_GET(reg) == BOOT_CHAIN_REG_MAGIC) &&
    9602d61c:	3607fd35 	tbz	w21, #0, 9602d5c0 <tegrabl_a_b_update_smd+0x44>
		if ((bc_flag == BC_FLAG_REDUNDANCY_BOOT) &&
    9602d620:	710006bf 	cmp	w21, #0x1
    9602d624:	54000961 	b.ne	9602d750 <tegrabl_a_b_update_smd+0x1d4>  // b.any
	version = tegrabl_a_b_get_version(smd);
    9602d628:	f9402fb5 	ldr	x21, [x29, #88]
	return smd_info->version;
    9602d62c:	79400aa0 	ldrh	w0, [x21, #4]
		if ((bc_flag == BC_FLAG_REDUNDANCY_BOOT) &&
    9602d630:	36400900 	tbz	w0, #8, 9602d750 <tegrabl_a_b_update_smd+0x1d4>
	if ((BOOTCTRL_SUPPORT_REDUNDANCY_USER(version) == 0U) &&
    9602d634:	7217041f 	tst	w0, #0x600
    9602d638:	540000e1 	b.ne	9602d654 <tegrabl_a_b_update_smd+0xd8>  // b.any
	retry_count = tegrabl_get_max_retry_count(smd);
    9602d63c:	aa1503e0 	mov	x0, x21
    9602d640:	97fffd1e 	bl	9602cab8 <tegrabl_get_max_retry_count>
	tegrabl_a_b_set_retry_count_reg(current_slot, retry_count);
    9602d644:	2a0003e1 	mov	w1, w0
    9602d648:	d3504a80 	ubfx	x0, x20, #16, #3
    9602d64c:	97fffe4c 	bl	9602cf7c <tegrabl_a_b_set_retry_count_reg>
    9602d650:	14000040 	b	9602d750 <tegrabl_a_b_update_smd+0x1d4>
	} else if (BOOTCTRL_SUPPORT_REDUNDANCY_USER(version) ||
    9602d654:	374800e0 	tbnz	w0, #9, 9602d670 <tegrabl_a_b_update_smd+0xf4>
    9602d658:	52848001 	mov	w1, #0x2400                	// #9216
    9602d65c:	6a20003f 	bics	wzr, w1, w0
    9602d660:	54000a81 	b.ne	9602d7b0 <tegrabl_a_b_update_smd+0x234>  // b.any
	    BOOTCTRL_IS_UNIFIED_AB_ENABLED(version)) {
    9602d664:	12001c01 	and	w1, w0, #0xff
    9602d668:	7100103f 	cmp	w1, #0x4
    9602d66c:	54000a29 	b.ls	9602d7b0 <tegrabl_a_b_update_smd+0x234>  // b.plast
	current_slot = BOOT_CHAIN_REG_SLOT_NUM_GET(bl_reg);
    9602d670:	d3504a94 	ubfx	x20, x20, #16, #3
	retry_count = tegrabl_get_max_retry_count(smd);
    9602d674:	aa1503e0 	mov	x0, x21
    9602d678:	97fffd10 	bl	9602cab8 <tegrabl_get_max_retry_count>
	tegrabl_a_b_set_retry_count_reg(current_slot, retry_count);
    9602d67c:	2a0003e1 	mov	w1, w0
    9602d680:	2a1403e0 	mov	w0, w20
    9602d684:	97fffe3e 	bl	9602cf7c <tegrabl_a_b_set_retry_count_reg>
	bl_reg = tegrabl_get_boot_slot_reg();
    9602d688:	97ffd03c 	bl	96021778 <tegrabl_get_boot_slot_reg>
    9602d68c:	2a0003f7 	mov	w23, w0
	error = tegrabl_a_b_get_priority(smd, current_slot,
    9602d690:	91014ba2 	add	x2, x29, #0x52
    9602d694:	2a1403e1 	mov	w1, w20
    9602d698:	aa1503e0 	mov	x0, x21
    9602d69c:	97fffe9a 	bl	9602d104 <tegrabl_a_b_get_priority>
	if (error != TEGRABL_NO_ERROR) {
    9602d6a0:	35000840 	cbnz	w0, 9602d7a8 <tegrabl_a_b_update_smd+0x22c>
	error = tegrabl_a_b_get_priority(smd, !current_slot,
    9602d6a4:	7100029f 	cmp	w20, #0x0
    9602d6a8:	91014fa2 	add	x2, x29, #0x53
    9602d6ac:	1a9f17f9 	cset	w25, eq  // eq = none
    9602d6b0:	aa1503e0 	mov	x0, x21
    9602d6b4:	2a1903e1 	mov	w1, w25
    9602d6b8:	97fffe93 	bl	9602d104 <tegrabl_a_b_get_priority>
	if (error != TEGRABL_NO_ERROR) {
    9602d6bc:	35000760 	cbnz	w0, 9602d7a8 <tegrabl_a_b_update_smd+0x22c>
	rf_reg = tegrabl_get_rootfs_slot_reg();
    9602d6c0:	97ffd036 	bl	96021798 <tegrabl_get_rootfs_slot_reg>
    9602d6c4:	2a0003f8 	mov	w24, w0
	max_bl_retry_count = tegrabl_get_max_retry_count(smd);
    9602d6c8:	aa1503e0 	mov	x0, x21
    9602d6cc:	97fffcfb 	bl	9602cab8 <tegrabl_get_max_retry_count>
	if (max_bl_retry_count * 2 < ROOTFS_AB_ROTATE_COUNT) {
    9602d6d0:	531f1c01 	ubfiz	w1, w0, #1, #8
		max_rotate_count = max_bl_retry_count * 2;
    9602d6d4:	531f1800 	ubfiz	w0, w0, #1, #7
    9602d6d8:	7100103f 	cmp	w1, #0x4
	rotate_count = ROOTFS_AB_REG_ROTATE_COUNT_GET(rf_reg);
    9602d6dc:	d3504f16 	ubfx	x22, x24, #16, #4
		max_rotate_count = max_bl_retry_count * 2;
    9602d6e0:	52800081 	mov	w1, #0x4                   	// #4
    9602d6e4:	1a81b000 	csel	w0, w0, w1, lt  // lt = tstop
	rotate_count++;
    9602d6e8:	110006d6 	add	w22, w22, #0x1
	if ((rotate_count == max_rotate_count / 2) ||
    9602d6ec:	6b4006df 	cmp	w22, w0, lsr #1
    9602d6f0:	54000060 	b.eq	9602d6fc <tegrabl_a_b_update_smd+0x180>  // b.none
    9602d6f4:	6b0002df 	cmp	w22, w0
    9602d6f8:	54000241 	b.ne	9602d740 <tegrabl_a_b_update_smd+0x1c4>  // b.any
		retry_count = (uint8_t)BOOT_CHAIN_REG_A_RETRY_COUNT_GET(reg);
    9602d6fc:	d35a76e0 	ubfx	x0, x23, #26, #4
    9602d700:	7100073f 	cmp	w25, #0x1
    9602d704:	d35666f7 	ubfx	x23, x23, #22, #4
    9602d708:	1a8002f7 	csel	w23, w23, w0, eq  // eq = none
		if (tegrabl_a_b_get_retry_count_reg(!current_slot, bl_reg) &&
    9602d70c:	340001b7 	cbz	w23, 9602d740 <tegrabl_a_b_update_smd+0x1c4>
    9602d710:	39414ba0 	ldrb	w0, [x29, #82]
    9602d714:	34000160 	cbz	w0, 9602d740 <tegrabl_a_b_update_smd+0x1c4>
			slot1_priority && slot2_priority) {
    9602d718:	39414fa0 	ldrb	w0, [x29, #83]
    9602d71c:	34000120 	cbz	w0, 9602d740 <tegrabl_a_b_update_smd+0x1c4>
			tegrabl_a_b_set_priority(smd, current_slot, 14);
    9602d720:	528001c2 	mov	w2, #0xe                   	// #14
    9602d724:	2a1403e1 	mov	w1, w20
    9602d728:	aa1503e0 	mov	x0, x21
    9602d72c:	97fffe84 	bl	9602d13c <tegrabl_a_b_set_priority>
			tegrabl_a_b_set_priority(smd, !current_slot, 15);
    9602d730:	528001e2 	mov	w2, #0xf                   	// #15
    9602d734:	2a1903e1 	mov	w1, w25
    9602d738:	aa1503e0 	mov	x0, x21
    9602d73c:	97fffe80 	bl	9602d13c <tegrabl_a_b_set_priority>
	rf_reg = ROOTFS_AB_REG_ROTATE_COUNT_SET(rotate_count, rf_reg);
    9602d740:	120c6f00 	and	w0, w24, #0xfff0ffff
    9602d744:	53100ed6 	ubfiz	w22, w22, #16, #4
	tegrabl_set_rootfs_slot_reg(rf_reg);
    9602d748:	2a0002c0 	orr	w0, w22, w0
    9602d74c:	97ffd00f 	bl	96021788 <tegrabl_set_rootfs_slot_reg>
		reg = tegrabl_get_boot_slot_reg();
    9602d750:	97ffd00a 	bl	96021778 <tegrabl_get_boot_slot_reg>
    9602d754:	910183a1 	add	x1, x29, #0x60
		tegrabl_a_b_copy_retry_count(smd, &reg, FROM_REG_TO_SMD);
    9602d758:	52800022 	mov	w2, #0x1                   	// #1
		reg = tegrabl_get_boot_slot_reg();
    9602d75c:	b81f4c20 	str	w0, [x1, #-12]!
		tegrabl_a_b_copy_retry_count(smd, &reg, FROM_REG_TO_SMD);
    9602d760:	f9402fa0 	ldr	x0, [x29, #88]
    9602d764:	97fffe16 	bl	9602cfbc <tegrabl_a_b_copy_retry_count>
		if (memcmp(smd, smd_backup, sizeof(struct slot_meta_data_v2))) {
    9602d768:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602d76c:	d28017e2 	mov	x2, #0xbf                  	// #191
    9602d770:	f945c001 	ldr	x1, [x0, #2944]
    9602d774:	f9402fa0 	ldr	x0, [x29, #88]
    9602d778:	97fff23e 	bl	9602a070 <memcmp>
    9602d77c:	34fff220 	cbz	w0, 9602d5c0 <tegrabl_a_b_update_smd+0x44>
			pr_info("SMD partition is updated.\n");
    9602d780:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602d784:	91145400 	add	x0, x0, #0x515
    9602d788:	97ffd3ba 	bl	96022670 <tegrabl_printf>
			error = tegrabl_a_b_flush_smd(smd);
    9602d78c:	f9402fa0 	ldr	x0, [x29, #88]
    9602d790:	97ffff55 	bl	9602d4e4 <tegrabl_a_b_flush_smd>
			if (error != TEGRABL_NO_ERROR) {
    9602d794:	34fff160 	cbz	w0, 9602d5c0 <tegrabl_a_b_update_smd+0x44>
    9602d798:	12005c00 	and	w0, w0, #0xffffff
    9602d79c:	52aa8013 	mov	w19, #0x54000000            	// #1409286144
    9602d7a0:	2a130013 	orr	w19, w0, w19
				goto done;
    9602d7a4:	17ffff87 	b	9602d5c0 <tegrabl_a_b_update_smd+0x44>
done:
    9602d7a8:	2a0003f3 	mov	w19, w0
    9602d7ac:	17ffff85 	b	9602d5c0 <tegrabl_a_b_update_smd+0x44>
	} else if (BOOTCTRL_SUPPORT_ROOTFS_AB(version) != 0U) {
    9602d7b0:	3757f460 	tbnz	w0, #10, 9602d63c <tegrabl_a_b_update_smd+0xc0>
		error = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d7b4:	52800053 	mov	w19, #0x2                   	// #2
    9602d7b8:	72aa8a93 	movk	w19, #0x5454, lsl #16
    9602d7bc:	17ffff81 	b	9602d5c0 <tegrabl_a_b_update_smd+0x44>

000000009602d7c0 <tegrabl_a_b_match_part_name>:
#include <tegrabl_a_b_boot_control.h>
#include <tegrabl_a_b_partition_naming.h>

bool tegrabl_a_b_match_part_name(const char *part_name,
								 const char *full_part_name)
{
    9602d7c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602d7c4:	910003fd 	mov	x29, sp
    9602d7c8:	a90153f3 	stp	x19, x20, [sp, #16]
    9602d7cc:	aa0103f4 	mov	x20, x1
    9602d7d0:	f90013f5 	str	x21, [sp, #32]
    9602d7d4:	aa0003f5 	mov	x21, x0
	uint32_t len;
	bool ret = false;
	const char *suffix = NULL;

	len = strlen(part_name);
    9602d7d8:	97fff2cd 	bl	9602a30c <strlen>
    9602d7dc:	2a0003f3 	mov	w19, w0
	if (strncmp(part_name, full_part_name, len) != 0) {
    9602d7e0:	aa1303e2 	mov	x2, x19
    9602d7e4:	aa1403e1 	mov	x1, x20
    9602d7e8:	aa1503e0 	mov	x0, x21
    9602d7ec:	97fff2a4 	bl	9602a27c <strncmp>
    9602d7f0:	350001e0 	cbnz	w0, 9602d82c <tegrabl_a_b_match_part_name+0x6c>
		ret = false;
		goto done;
	}
	/* <partition>_a and <partition> is the same partition */
	suffix = &full_part_name[len];
	if ((len == strlen(full_part_name)) ||
    9602d7f4:	aa1403e0 	mov	x0, x20
    9602d7f8:	97fff2c5 	bl	9602a30c <strlen>
    9602d7fc:	eb13001f 	cmp	x0, x19
    9602d800:	540001a0 	b.eq	9602d834 <tegrabl_a_b_match_part_name+0x74>  // b.none
		(strcmp(suffix, BOOT_CHAIN_SUFFIX_A) == 0)) {
    9602d804:	900000c1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602d808:	8b130280 	add	x0, x20, x19
    9602d80c:	91102c21 	add	x1, x1, #0x40b
    9602d810:	97fff28f 	bl	9602a24c <strcmp>
	if ((len == strlen(full_part_name)) ||
    9602d814:	7100001f 	cmp	w0, #0x0
    9602d818:	1a9f17e0 	cset	w0, eq  // eq = none
		ret = true;
	}

done:
	return ret;
}
    9602d81c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d820:	f94013f5 	ldr	x21, [sp, #32]
    9602d824:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602d828:	d65f03c0 	ret
		ret = false;
    9602d82c:	52800000 	mov	w0, #0x0                   	// #0
    9602d830:	17fffffb 	b	9602d81c <tegrabl_a_b_match_part_name+0x5c>
		ret = true;
    9602d834:	52800020 	mov	w0, #0x1                   	// #1
    9602d838:	17fffff9 	b	9602d81c <tegrabl_a_b_match_part_name+0x5c>

000000009602d83c <tegrabl_board_info_init>:

static void tegrabl_board_info_init(void)
{
	bool eeprom;

	if (board_info_initialized)
    9602d83c:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602d840:	396e4001 	ldrb	w1, [x0, #2960]
    9602d844:	35000501 	cbnz	w1, 9602d8e4 <tegrabl_board_info_init+0xa8>
{
    9602d848:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602d84c:	910003fd 	mov	x29, sp
    9602d850:	f9000bf3 	str	x19, [sp, #16]
	err = tegrabl_dt_get_fdt_handle(dt_id, &fdt);
    9602d854:	9100a3a1 	add	x1, x29, #0x28
    9602d858:	aa0003f3 	mov	x19, x0
    9602d85c:	52800000 	mov	w0, #0x0                   	// #0
	int val, node = 0;
    9602d860:	b90027bf 	str	wzr, [x29, #36]
	err = tegrabl_dt_get_fdt_handle(dt_id, &fdt);
    9602d864:	94000d7d 	bl	96030e58 <tegrabl_dt_get_fdt_handle>
	if (err != TEGRABL_NO_ERROR) {
    9602d868:	34000180 	cbz	w0, 9602d898 <tegrabl_board_info_init+0x5c>
		pr_error("Failed to get dtb handle\n");
    9602d86c:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602d870:	91173000 	add	x0, x0, #0x5cc
    9602d874:	97ffd37f 	bl	96022670 <tegrabl_printf>

	eeprom = board_has_eeprom(TEGRABL_DT_BL);
	pr_debug("board has eeprom:%d\n", eeprom);
#if defined(CONFIG_ENABLE_EEPROM)
	if (!eeprom) {
		eeprom = eeprom_detect();
    9602d878:	94000259 	bl	9602e1dc <eeprom_detect>
	}

	if (eeprom) {
    9602d87c:	72001c1f 	tst	w0, #0xff
    9602d880:	540002a1 	b.ne	9602d8d4 <tegrabl_board_info_init+0x98>  // b.any
		ops = nct_get_ops();	/* Retrieve info from NCT */
	}
#endif

done:
	board_info_initialized = true;
    9602d884:	52800020 	mov	w0, #0x1                   	// #1
    9602d888:	392e4260 	strb	w0, [x19, #2960]
}
    9602d88c:	f9400bf3 	ldr	x19, [sp, #16]
    9602d890:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602d894:	d65f03c0 	ret
	err = tegrabl_dt_get_node_with_path(fdt, "/chosen", &node);
    9602d898:	f94017a0 	ldr	x0, [x29, #40]
    9602d89c:	900000c1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602d8a0:	910093a2 	add	x2, x29, #0x24
    9602d8a4:	9117a421 	add	x1, x1, #0x5e9
    9602d8a8:	94000eb5 	bl	9603137c <tegrabl_dt_get_node_with_path>
	if (err == TEGRABL_NO_ERROR) {
    9602d8ac:	35fffe60 	cbnz	w0, 9602d878 <tegrabl_board_info_init+0x3c>
	return tegrabl_dt_get_prop_by_idx(fdt, node, prop, sz, 0, res);
    9602d8b0:	b94027a1 	ldr	w1, [x29, #36]
    9602d8b4:	900000c2 	adrp	x2, 96045000 <__func__.3796+0x7>
    9602d8b8:	f94017a0 	ldr	x0, [x29, #40]
    9602d8bc:	910083a5 	add	x5, x29, #0x20
    9602d8c0:	52800004 	mov	w4, #0x0                   	// #0
    9602d8c4:	d2800083 	mov	x3, #0x4                   	// #4
    9602d8c8:	9117c442 	add	x2, x2, #0x5f1
    9602d8cc:	94000db8 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (err == TEGRABL_NO_ERROR) {
    9602d8d0:	35fffd40 	cbnz	w0, 9602d878 <tegrabl_board_info_init+0x3c>
		ops = eeprom_get_ops();	/* Retrieve info from EEPROM */
    9602d8d4:	9400023f 	bl	9602e1d0 <eeprom_get_ops>
    9602d8d8:	b0000241 	adrp	x1, 96076000 <free_dram_block+0x38e8>
    9602d8dc:	f905cc20 	str	x0, [x1, #2968]
    9602d8e0:	17ffffe9 	b	9602d884 <tegrabl_board_info_init+0x48>
    9602d8e4:	d65f03c0 	ret

000000009602d8e8 <create_mac_addr_string>:
{
    9602d8e8:	d100c3ff 	sub	sp, sp, #0x30
	if (big_endian != true) {
    9602d8ec:	72001c5f 	tst	w2, #0xff
{
    9602d8f0:	a9017bfd 	stp	x29, x30, [sp, #16]
    9602d8f4:	910043fd 	add	x29, sp, #0x10
	if (big_endian != true) {
    9602d8f8:	54000141 	b.ne	9602d920 <create_mac_addr_string+0x38>  // b.any
			bytes[i] = mac_addr_n[5-i];
    9602d8fc:	910063a3 	add	x3, x29, #0x18
    9602d900:	d2800002 	mov	x2, #0x0                   	// #0
    9602d904:	cb020024 	sub	x4, x1, x2
    9602d908:	39401484 	ldrb	w4, [x4, #5]
    9602d90c:	38236844 	strb	w4, [x2, x3]
    9602d910:	91000442 	add	x2, x2, #0x1
		for (i = 0; i < 6; ++i)
    9602d914:	f100185f 	cmp	x2, #0x6
    9602d918:	54ffff61 	b.ne	9602d904 <create_mac_addr_string+0x1c>  // b.any
		mac_n = &bytes[0];
    9602d91c:	aa0303e1 	mov	x1, x3
	tegrabl_snprintf(mac_addr_s, MAC_ADDR_STRING_LEN,
    9602d920:	39401027 	ldrb	w7, [x1, #4]
    9602d924:	900000c2 	adrp	x2, 96045000 <__func__.3796+0x7>
    9602d928:	39400c26 	ldrb	w6, [x1, #3]
    9602d92c:	9116b842 	add	x2, x2, #0x5ae
    9602d930:	39400825 	ldrb	w5, [x1, #2]
    9602d934:	39400424 	ldrb	w4, [x1, #1]
    9602d938:	39400023 	ldrb	w3, [x1]
    9602d93c:	39401421 	ldrb	w1, [x1, #5]
    9602d940:	b90003e1 	str	w1, [sp]
    9602d944:	d2800241 	mov	x1, #0x12                  	// #18
    9602d948:	97ffd31f 	bl	960225c4 <tegrabl_snprintf>
}
    9602d94c:	a9417bfd 	ldp	x29, x30, [sp, #16]
    9602d950:	9100c3ff 	add	sp, sp, #0x30
    9602d954:	d65f03c0 	ret

000000009602d958 <tegrabl_get_serial_no>:

tegrabl_error_t tegrabl_get_serial_no(uint8_t *buf)
{
    9602d958:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602d95c:	910003fd 	mov	x29, sp
    9602d960:	a90153f3 	stp	x19, x20, [sp, #16]
    9602d964:	aa0003f3 	mov	x19, x0
	tegrabl_error_t err;
	uint32_t i = 0;

	if (!board_info_initialized)
    9602d968:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
{
    9602d96c:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (!board_info_initialized)
    9602d970:	396e4000 	ldrb	w0, [x0, #2960]
    9602d974:	35000040 	cbnz	w0, 9602d97c <tegrabl_get_serial_no+0x24>
		tegrabl_board_info_init();
    9602d978:	97ffffb1 	bl	9602d83c <tegrabl_board_info_init>

	if (ops != NULL) {
    9602d97c:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602d980:	f945cc00 	ldr	x0, [x0, #2968]
    9602d984:	b40003a0 	cbz	x0, 9602d9f8 <tegrabl_get_serial_no+0xa0>
		err = (ops->get_serial_no)((void *)buf);
    9602d988:	f9400001 	ldr	x1, [x0]
    9602d98c:	aa1303e0 	mov	x0, x19
    9602d990:	d63f0020 	blr	x1
    9602d994:	2a0003f4 	mov	w20, w0
		if (err != TEGRABL_NO_ERROR) {
    9602d998:	350000a0 	cbnz	w0, 9602d9ac <tegrabl_get_serial_no+0x54>
	uint32_t i = 0;
    9602d99c:	52800015 	mov	w21, #0x0                   	// #0
			goto fail;
		}

		while (buf[i] != '\0') {
    9602d9a0:	2a1503f6 	mov	w22, w21
    9602d9a4:	38766a60 	ldrb	w0, [x19, x22]
    9602d9a8:	350000c0 	cbnz	w0, 9602d9c0 <tegrabl_get_serial_no+0x68>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
	}

fail:
	return err;
}
    9602d9ac:	2a1403e0 	mov	w0, w20
    9602d9b0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602d9b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602d9b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602d9bc:	d65f03c0 	ret
			if (!isdigit(buf[i]) && !isalpha(buf[i])) {
    9602d9c0:	97ffe8d3 	bl	96027d0c <isdigit>
    9602d9c4:	35000160 	cbnz	w0, 9602d9f0 <tegrabl_get_serial_no+0x98>
    9602d9c8:	38766a60 	ldrb	w0, [x19, x22]
    9602d9cc:	97ffe8d4 	bl	96027d1c <isalpha>
    9602d9d0:	35000100 	cbnz	w0, 9602d9f0 <tegrabl_get_serial_no+0x98>
				pr_warn("Serial number invalid!\n");
    9602d9d4:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
				err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602d9d8:	52800054 	mov	w20, #0x2                   	// #2
				pr_warn("Serial number invalid!\n");
    9602d9dc:	91190800 	add	x0, x0, #0x642
    9602d9e0:	97ffd324 	bl	96022670 <tegrabl_printf>
				buf[0] = '\0';
    9602d9e4:	3900027f 	strb	wzr, [x19]
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9602d9e8:	72a98994 	movk	w20, #0x4c4c, lsl #16
	return err;
    9602d9ec:	17fffff0 	b	9602d9ac <tegrabl_get_serial_no+0x54>
			i++;
    9602d9f0:	110006b5 	add	w21, w21, #0x1
    9602d9f4:	17ffffeb 	b	9602d9a0 <tegrabl_get_serial_no+0x48>
		pr_warn("No serial number available, using 0\n");
    9602d9f8:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602d9fc:	91197400 	add	x0, x0, #0x65d
    9602da00:	97ffd31c 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    9602da04:	52800034 	mov	w20, #0x1                   	// #1
		memset(buf, '0', SNO_SIZE);
    9602da08:	d28003c2 	mov	x2, #0x1e                  	// #30
    9602da0c:	52800601 	mov	w1, #0x30                  	// #48
    9602da10:	aa1303e0 	mov	x0, x19
    9602da14:	97fff105 	bl	96029e28 <memset>
		buf[SNO_SIZE] = '\0';
    9602da18:	39007a7f 	strb	wzr, [x19, #30]
    9602da1c:	17fffff3 	b	9602d9e8 <tegrabl_get_serial_no+0x90>

000000009602da20 <tegrabl_get_mac_address>:
										uint8_t *mac_string)
{
	tegrabl_error_t err;
	struct mac_addr mac_addr_info;

	if ((mac_bytes == NULL) && (mac_string == NULL)) {
    9602da20:	f100003f 	cmp	x1, #0x0
    9602da24:	fa400840 	ccmp	x2, #0x0, #0x0, eq  // eq = none
    9602da28:	54000360 	b.eq	9602da94 <tegrabl_get_mac_address+0x74>  // b.none
{
    9602da2c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9602da30:	910003fd 	mov	x29, sp
    9602da34:	f9000bf3 	str	x19, [sp, #16]
    9602da38:	2a0003f3 	mov	w19, w0

	mac_addr_info.type = type;
	mac_addr_info.mac_byte_array = mac_bytes;
	mac_addr_info.mac_string = mac_string;

	if (!board_info_initialized)
    9602da3c:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
	mac_addr_info.type = type;
    9602da40:	b9002bb3 	str	w19, [x29, #40]
	if (!board_info_initialized)
    9602da44:	396e4000 	ldrb	w0, [x0, #2960]
	mac_addr_info.mac_string = mac_string;
    9602da48:	a9030ba1 	stp	x1, x2, [x29, #48]
	if (!board_info_initialized)
    9602da4c:	35000040 	cbnz	w0, 9602da54 <tegrabl_get_mac_address+0x34>
		tegrabl_board_info_init();
    9602da50:	97ffff7b 	bl	9602d83c <tegrabl_board_info_init>

	if (ops != NULL) {
    9602da54:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602da58:	f945cc00 	ldr	x0, [x0, #2968]
    9602da5c:	b40000e0 	cbz	x0, 9602da78 <tegrabl_get_mac_address+0x58>
		err = (ops->get_mac_addr)((void *)&mac_addr_info);
    9602da60:	f9400401 	ldr	x1, [x0, #8]
    9602da64:	9100a3a0 	add	x0, x29, #0x28
    9602da68:	d63f0020 	blr	x1
		pr_warn("No MAC address type %d available\n", type);
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
	}

	return err;
}
    9602da6c:	f9400bf3 	ldr	x19, [sp, #16]
    9602da70:	a8c47bfd 	ldp	x29, x30, [sp], #64
    9602da74:	d65f03c0 	ret
		pr_warn("No MAC address type %d available\n", type);
    9602da78:	2a1303e1 	mov	w1, w19
    9602da7c:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602da80:	91187400 	add	x0, x0, #0x61d
    9602da84:	97ffd2fb 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 1);
    9602da88:	52802020 	mov	w0, #0x101                 	// #257
    9602da8c:	72a98980 	movk	w0, #0x4c4c, lsl #16
    9602da90:	17fffff7 	b	9602da6c <tegrabl_get_mac_address+0x4c>
		return TEGRABL_NO_ERROR;
    9602da94:	52800000 	mov	w0, #0x0                   	// #0
}
    9602da98:	d65f03c0 	ret

000000009602da9c <tegrabl_get_board_ids>:

tegrabl_error_t tegrabl_get_board_ids(void *id_info)
{
    9602da9c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602daa0:	910003fd 	mov	x29, sp
    9602daa4:	f9000bf3 	str	x19, [sp, #16]
    9602daa8:	aa0003f3 	mov	x19, x0
	tegrabl_error_t err;

	if (!board_info_initialized)
    9602daac:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602dab0:	396e4000 	ldrb	w0, [x0, #2960]
    9602dab4:	35000040 	cbnz	w0, 9602dabc <tegrabl_get_board_ids+0x20>
		tegrabl_board_info_init();
    9602dab8:	97ffff61 	bl	9602d83c <tegrabl_board_info_init>

	if (ops != NULL) {
    9602dabc:	b0000240 	adrp	x0, 96076000 <free_dram_block+0x38e8>
    9602dac0:	f945cc01 	ldr	x1, [x0, #2968]
    9602dac4:	b40000c1 	cbz	x1, 9602dadc <tegrabl_get_board_ids+0x40>
		err = (ops->get_board_ids)(id_info);
    9602dac8:	aa1303e0 	mov	x0, x19
    9602dacc:	f9400821 	ldr	x1, [x1, #16]
		pr_warn("No board IDs available\n");
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 2);
	}

	return err;
}
    9602dad0:	f9400bf3 	ldr	x19, [sp, #16]
    9602dad4:	a8c27bfd 	ldp	x29, x30, [sp], #32
		err = (ops->get_board_ids)(id_info);
    9602dad8:	d61f0020 	br	x1
		pr_warn("No board IDs available\n");
    9602dadc:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602dae0:	91180800 	add	x0, x0, #0x602
    9602dae4:	97ffd2e3 	bl	96022670 <tegrabl_printf>
}
    9602dae8:	f9400bf3 	ldr	x19, [sp, #16]
    9602daec:	52804020 	mov	w0, #0x201                 	// #513
    9602daf0:	72a98980 	movk	w0, #0x4c4c, lsl #16
    9602daf4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602daf8:	d65f03c0 	ret

000000009602dafc <is_valid_mac_addr>:
{
	uint8_t mac_addr_zero[MAC_ADDR_SIZE_BYTES];
	uint8_t mac_addr_ff[MAC_ADDR_SIZE_BYTES];
	bool ret = false;

	if (mac_addr == NULL) {
    9602dafc:	b50000e0 	cbnz	x0, 9602db18 <is_valid_mac_addr+0x1c>
	bool ret = false;
    9602db00:	52800000 	mov	w0, #0x0                   	// #0
		ret = true;
	}

fail:
	return ret;
}
    9602db04:	d65f03c0 	ret
	bool ret = false;
    9602db08:	52800000 	mov	w0, #0x0                   	// #0
}
    9602db0c:	f9400bf3 	ldr	x19, [sp, #16]
    9602db10:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602db14:	d65f03c0 	ret
{
    9602db18:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	memset(mac_addr_zero, 0x0, MAC_ADDR_SIZE_BYTES);
    9602db1c:	d28000c2 	mov	x2, #0x6                   	// #6
    9602db20:	52800001 	mov	w1, #0x0                   	// #0
{
    9602db24:	910003fd 	mov	x29, sp
    9602db28:	f9000bf3 	str	x19, [sp, #16]
    9602db2c:	aa0003f3 	mov	x19, x0
	memset(mac_addr_zero, 0x0, MAC_ADDR_SIZE_BYTES);
    9602db30:	910083a0 	add	x0, x29, #0x20
    9602db34:	97fff0bd 	bl	96029e28 <memset>
	memset(mac_addr_ff, 0xFF, MAC_ADDR_SIZE_BYTES);
    9602db38:	d28000c2 	mov	x2, #0x6                   	// #6
    9602db3c:	52801fe1 	mov	w1, #0xff                  	// #255
    9602db40:	9100a3a0 	add	x0, x29, #0x28
    9602db44:	97fff0b9 	bl	96029e28 <memset>
	if ((memcmp(mac_addr, mac_addr_zero, MAC_ADDR_SIZE_BYTES) != 0UL) &&
    9602db48:	d28000c2 	mov	x2, #0x6                   	// #6
    9602db4c:	910083a1 	add	x1, x29, #0x20
    9602db50:	aa1303e0 	mov	x0, x19
    9602db54:	97fff147 	bl	9602a070 <memcmp>
    9602db58:	34fffd80 	cbz	w0, 9602db08 <is_valid_mac_addr+0xc>
		(memcmp(mac_addr, mac_addr_ff, MAC_ADDR_SIZE_BYTES) != 0UL)) {
    9602db5c:	d28000c2 	mov	x2, #0x6                   	// #6
    9602db60:	9100a3a1 	add	x1, x29, #0x28
    9602db64:	aa1303e0 	mov	x0, x19
    9602db68:	97fff142 	bl	9602a070 <memcmp>
	if ((memcmp(mac_addr, mac_addr_zero, MAC_ADDR_SIZE_BYTES) != 0UL) &&
    9602db6c:	7100001f 	cmp	w0, #0x0
    9602db70:	1a9f07e0 	cset	w0, ne  // ne = any
fail:
    9602db74:	17ffffe6 	b	9602db0c <is_valid_mac_addr+0x10>

000000009602db78 <get_valid_char>:
					.index = offsetof(struct eeprom_layout, display_config)},
};

static char get_valid_char(int x)
{
	switch (x) {
    9602db78:	7101681f 	cmp	w0, #0x5a
    9602db7c:	5400016c 	b.gt	9602dba8 <get_valid_char+0x30>
    9602db80:	7101041f 	cmp	w0, #0x41
    9602db84:	5400018a 	b.ge	9602dbb4 <get_valid_char+0x3c>  // b.tcont
    9602db88:	7100001f 	cmp	w0, #0x0
    9602db8c:	54000180 	b.eq	9602dbbc <get_valid_char+0x44>  // b.none
    9602db90:	5400008b 	b.lt	9602dba0 <get_valid_char+0x28>  // b.tstop
    9602db94:	5100c001 	sub	w1, w0, #0x30
    9602db98:	7100243f 	cmp	w1, #0x9
    9602db9c:	540000c9 	b.ls	9602dbb4 <get_valid_char+0x3c>  // b.plast
	case 97 ... 122:
		return x;
	case 0:
		return '0';
	default:
		return 'X';
    9602dba0:	52800b00 	mov	w0, #0x58                  	// #88
	}
}
    9602dba4:	d65f03c0 	ret
	switch (x) {
    9602dba8:	51018401 	sub	w1, w0, #0x61
    9602dbac:	7100643f 	cmp	w1, #0x19
    9602dbb0:	17fffffb 	b	9602db9c <get_valid_char+0x24>
		return x;
    9602dbb4:	12001c00 	and	w0, w0, #0xff
    9602dbb8:	17fffffb 	b	9602dba4 <get_valid_char+0x2c>
		return '0';
    9602dbbc:	52800600 	mov	w0, #0x30                  	// #48
    9602dbc0:	17fffff9 	b	9602dba4 <get_valid_char+0x2c>

000000009602dbc4 <eeprom_get_board_ids>:
done:
	return err;
}

static tegrabl_error_t eeprom_get_board_ids(void *param)
{
    9602dbc4:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
    9602dbc8:	910003fd 	mov	x29, sp
    9602dbcc:	a90153f3 	stp	x19, x20, [sp, #16]
    9602dbd0:	aa0003f3 	mov	x19, x0
    9602dbd4:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602dbd8:	a90363f7 	stp	x23, x24, [sp, #48]
    9602dbdc:	a9046bf9 	stp	x25, x26, [sp, #64]
    9602dbe0:	a90573fb 	stp	x27, x28, [sp, #80]
	struct tegrabl_eeprom *bl_eeprom = NULL;
	tegrabl_error_t status = TEGRABL_NO_ERROR;
	uint8_t i, count;

	/* Init the number of id return */
	id_info->count = 0;
    9602dbe4:	7900041f 	strh	wzr, [x0, #2]

	status = tegrabl_eeprom_manager_max(&count);
    9602dbe8:	9101ffa0 	add	x0, x29, #0x7f
	struct tegrabl_eeprom *bl_eeprom = NULL;
    9602dbec:	f9004fbf 	str	xzr, [x29, #152]
	status = tegrabl_eeprom_manager_max(&count);
    9602dbf0:	97ffbd7f 	bl	9601d1ec <tegrabl_eeprom_manager_max>
    9602dbf4:	2a0003f5 	mov	w21, w0
	if (status != TEGRABL_NO_ERROR) {
    9602dbf8:	34001cc0 	cbz	w0, 9602df90 <eeprom_get_board_ids+0x3cc>
		pr_error("Cannot get eeprom max count\n");
    9602dbfc:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602dc00:	911c3800 	add	x0, x0, #0x70e
    9602dc04:	97ffd29b 	bl	96022670 <tegrabl_printf>
		if (status != TEGRABL_NO_ERROR)
			return status;
	}

	return status;
}
    9602dc08:	2a1503e0 	mov	w0, w21
    9602dc0c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602dc10:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602dc14:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602dc18:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9602dc1c:	a94573fb 	ldp	x27, x28, [sp, #80]
    9602dc20:	a8cf7bfd 	ldp	x29, x30, [sp], #240
    9602dc24:	d65f03c0 	ret
	if (id_info->count >= MAX_SUPPORTED_BOARDS) {
    9602dc28:	79400660 	ldrh	w0, [x19, #2]
    9602dc2c:	71001c1f 	cmp	w0, #0x7
    9602dc30:	54000109 	b.ls	9602dc50 <eeprom_get_board_ids+0x8c>  // b.plast
	return err;
    9602dc34:	52802055 	mov	w21, #0x102                 	// #258
		pr_error("Error: Reach maximum supported board count: %d\n",
    9602dc38:	52800101 	mov	w1, #0x8                   	// #8
    9602dc3c:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602dc40:	911d4c00 	add	x0, x0, #0x753
    9602dc44:	97ffd28b 	bl	96022670 <tegrabl_printf>
	return err;
    9602dc48:	72a98995 	movk	w21, #0x4c4c, lsl #16
    9602dc4c:	17ffffef 	b	9602dc08 <eeprom_get_board_ids+0x44>
		status = create_pm_ids(id_info, bl_eeprom,
    9602dc50:	f9404fb8 	ldr	x24, [x29, #152]
	if (data_max < (int)EEPROM_SZ) {
    9602dc54:	b9401b00 	ldr	w0, [x24, #24]
    9602dc58:	7103fc1f 	cmp	w0, #0xff
    9602dc5c:	540000cc 	b.gt	9602dc74 <eeprom_get_board_ids+0xb0>
		pr_error("Incomplete number of board ID eeprom data\n");
    9602dc60:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
	return err;
    9602dc64:	52804055 	mov	w21, #0x202                 	// #514
		pr_error("Incomplete number of board ID eeprom data\n");
    9602dc68:	911e1800 	add	x0, x0, #0x786
    9602dc6c:	97ffd281 	bl	96022670 <tegrabl_printf>
    9602dc70:	17fffff6 	b	9602dc48 <eeprom_get_board_ids+0x84>
							   (struct eeprom_layout *)bl_eeprom->data,
    9602dc74:	f9401314 	ldr	x20, [x24, #32]
	if (eeprom->part_no.leading[0] == 0xCC) {
    9602dc78:	39405280 	ldrb	w0, [x20, #20]
    9602dc7c:	7103301f 	cmp	w0, #0xcc
    9602dc80:	54000881 	b.ne	9602dd90 <eeprom_get_board_ids+0x1cc>  // b.any
		memset(cust_board_name, 0, MAX_BOARD_PART_NO_LEN);
    9602dc84:	d2800802 	mov	x2, #0x40                  	// #64
    9602dc88:	52800001 	mov	w1, #0x0                   	// #0
    9602dc8c:	9102c3a0 	add	x0, x29, #0xb0
    9602dc90:	97fff066 	bl	96029e28 <memset>
		strncpy(cust_board_name, data, MAX_BOARD_PART_NO_LEN);
    9602dc94:	91005681 	add	x1, x20, #0x15
    9602dc98:	d2800802 	mov	x2, #0x40                  	// #64
    9602dc9c:	9102c3a0 	add	x0, x29, #0xb0
    9602dca0:	97fff18c 	bl	9602a2d0 <strncpy>
		memset(id_info->part[id_info->count].part_no, 0,
    9602dca4:	79400660 	ldrh	w0, [x19, #2]
    9602dca8:	528026b7 	mov	w23, #0x135                 	// #309
    9602dcac:	d28002b9 	mov	x25, #0x15                  	// #21
    9602dcb0:	d2800802 	mov	x2, #0x40                  	// #64
    9602dcb4:	52800001 	mov	w1, #0x0                   	// #0
		cust_board_name[MAX_BOARD_PART_NO_LEN - 1] = '\0';
    9602dcb8:	3903bfbf 	strb	wzr, [x29, #239]
		memset(id_info->part[id_info->count].part_no, 0,
    9602dcbc:	d503201f 	nop
    9602dcc0:	9ba066e0 	umaddl	x0, w23, w0, x25
    9602dcc4:	8b000260 	add	x0, x19, x0
    9602dcc8:	97fff058 	bl	96029e28 <memset>
		memcpy(id_info->part[id_info->count].part_no, cust_board_name,
    9602dccc:	79400674 	ldrh	w20, [x19, #2]
			   strlen(cust_board_name) + 1);
    9602dcd0:	9102c3a0 	add	x0, x29, #0xb0
    9602dcd4:	97fff18e 	bl	9602a30c <strlen>
		memcpy(id_info->part[id_info->count].part_no, cust_board_name,
    9602dcd8:	91000402 	add	x2, x0, #0x1
    9602dcdc:	9102c3a1 	add	x1, x29, #0xb0
    9602dce0:	9bb466f4 	umaddl	x20, w23, w20, x25
    9602dce4:	8b140274 	add	x20, x19, x20
    9602dce8:	aa1403e0 	mov	x0, x20
    9602dcec:	97fff08e 	bl	96029f24 <memcpy>
		pr_info("Customer board %s found\n", cust_board_name);
    9602dcf0:	9102c3a1 	add	x1, x29, #0xb0
    9602dcf4:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602dcf8:	911ed000 	add	x0, x0, #0x7b4
    9602dcfc:	97ffd25d 	bl	96022670 <tegrabl_printf>
    9602dd00:	79400660 	ldrh	w0, [x19, #2]
		id_info->part[id_info->count].customer_part_id = true;
    9602dd04:	52800021 	mov	w1, #0x1                   	// #1
    9602dd08:	9bb74c00 	umaddl	x0, w0, w23, x19
    9602dd0c:	39001001 	strb	w1, [x0, #4]
		id_info->part[id_info->count].name[0] = '\0';
    9602dd10:	3900141f 	strb	wzr, [x0, #5]
	data = (char *)id_info->part[id_info->count].location;
    9602dd14:	79400662 	ldrh	w2, [x19, #2]
    9602dd18:	d2801aa1 	mov	x1, #0xd5                  	// #213
    9602dd1c:	528026a0 	mov	w0, #0x135                 	// #309
	tegrabl_snprintf(data, MAX_BOARD_LOCATION_LEN, "%s:module@0x%02x",
    9602dd20:	f9400703 	ldr	x3, [x24, #8]
    9602dd24:	39405304 	ldrb	w4, [x24, #20]
	for (i = 0; i < count; i++) {
    9602dd28:	110006d6 	add	w22, w22, #0x1
    9602dd2c:	12001ed6 	and	w22, w22, #0xff
	data = (char *)id_info->part[id_info->count].location;
    9602dd30:	9ba20400 	umaddl	x0, w0, w2, x1
	tegrabl_snprintf(data, MAX_BOARD_LOCATION_LEN, "%s:module@0x%02x",
    9602dd34:	900000c2 	adrp	x2, 96045000 <__func__.3796+0x7>
    9602dd38:	53017c84 	lsr	w4, w4, #1
    9602dd3c:	91202442 	add	x2, x2, #0x809
    9602dd40:	d2800c81 	mov	x1, #0x64                  	// #100
    9602dd44:	8b000260 	add	x0, x19, x0
    9602dd48:	97ffd21f 	bl	960225c4 <tegrabl_snprintf>
	++id_info->count;
    9602dd4c:	79400660 	ldrh	w0, [x19, #2]
    9602dd50:	11000400 	add	w0, w0, #0x1
    9602dd54:	79000660 	strh	w0, [x19, #2]
	for (i = 0; i < count; i++) {
    9602dd58:	3941ffa0 	ldrb	w0, [x29, #127]
    9602dd5c:	6b16001f 	cmp	w0, w22
    9602dd60:	54fff549 	b.ls	9602dc08 <eeprom_get_board_ids+0x44>  // b.plast
		status = tegrabl_eeprom_manager_get_eeprom_by_id(i, &bl_eeprom);
    9602dd64:	910263a1 	add	x1, x29, #0x98
    9602dd68:	2a1603e0 	mov	w0, w22
    9602dd6c:	97ffbd30 	bl	9601d22c <tegrabl_eeprom_manager_get_eeprom_by_id>
    9602dd70:	2a0003f4 	mov	w20, w0
		if (status != TEGRABL_NO_ERROR) {
    9602dd74:	34fff5a0 	cbz	w0, 9602dc28 <eeprom_get_board_ids+0x64>
			pr_error("Error: %u: Failed to read EEPROM\n", status);
    9602dd78:	2a0003e1 	mov	w1, w0
		status = tegrabl_eeprom_manager_get_eeprom_by_id(i, &bl_eeprom);
    9602dd7c:	2a1403f5 	mov	w21, w20
			pr_error("Error: %u: Failed to read EEPROM\n", status);
    9602dd80:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602dd84:	911cb800 	add	x0, x0, #0x72e
    9602dd88:	97ffd23a 	bl	96022670 <tegrabl_printf>
			return status;
    9602dd8c:	17ffff9f 	b	9602dc08 <eeprom_get_board_ids+0x44>
	if (eeprom->part_no.leading[0] == 0xCC) {
    9602dd90:	d2800002 	mov	x2, #0x0                   	// #0
		boardid[i] = get_valid_char(eeprom->part_no.id[i]);
    9602dd94:	8b020280 	add	x0, x20, x2
    9602dd98:	39406400 	ldrb	w0, [x0, #25]
    9602dd9c:	97ffff77 	bl	9602db78 <get_valid_char>
    9602dda0:	910223a1 	add	x1, x29, #0x88
    9602dda4:	38226820 	strb	w0, [x1, x2]
    9602dda8:	91000442 	add	x2, x2, #0x1
	for (i = 0; i < EEPROM_BDID_SZ; ++i) {
    9602ddac:	f100105f 	cmp	x2, #0x4
    9602ddb0:	54ffff21 	b.ne	9602dd94 <eeprom_get_board_ids+0x1d0>  // b.any
    9602ddb4:	d2800002 	mov	x2, #0x0                   	// #0
		sku[i] = get_valid_char(eeprom->part_no.sku[i]);
    9602ddb8:	8b020280 	add	x0, x20, x2
    9602ddbc:	39407800 	ldrb	w0, [x0, #30]
    9602ddc0:	97ffff6e 	bl	9602db78 <get_valid_char>
    9602ddc4:	910243a1 	add	x1, x29, #0x90
    9602ddc8:	38226820 	strb	w0, [x1, x2]
    9602ddcc:	91000442 	add	x2, x2, #0x1
	for (i = 0; i < EEPROM_SKU_SZ; ++i) {
    9602ddd0:	f100105f 	cmp	x2, #0x4
    9602ddd4:	54ffff21 	b.ne	9602ddb8 <eeprom_get_board_ids+0x1f4>  // b.any
		fab_str[i] = get_valid_char(eeprom->part_no.fab[i]);
    9602ddd8:	910203bc 	add	x28, x29, #0x80
	for (i = 0; i < EEPROM_SKU_SZ; ++i) {
    9602dddc:	d2800017 	mov	x23, #0x0                   	// #0
		fab_str[i] = get_valid_char(eeprom->part_no.fab[i]);
    9602dde0:	8b170280 	add	x0, x20, x23
    9602dde4:	39408c00 	ldrb	w0, [x0, #35]
    9602dde8:	97ffff64 	bl	9602db78 <get_valid_char>
    9602ddec:	38376b80 	strb	w0, [x28, x23]
    9602ddf0:	910006f7 	add	x23, x23, #0x1
	for (i = 0; i < EEPROM_FAB_SZ; i++) {
    9602ddf4:	f1000eff 	cmp	x23, #0x3
    9602ddf8:	54ffff41 	b.ne	9602dde0 <eeprom_get_board_ids+0x21c>  // b.any
	memcpy(name, boardid, EEPROM_BDID_SZ);
    9602ddfc:	d2800082 	mov	x2, #0x4                   	// #4
    9602de00:	910223a1 	add	x1, x29, #0x88
    9602de04:	910283a0 	add	x0, x29, #0xa0
    9602de08:	97fff047 	bl	96029f24 <memcpy>
	name[count++] = ID_SEPARATOR;
    9602de0c:	528005b9 	mov	w25, #0x2d                  	// #45
	memcpy(name + count, sku, EEPROM_SKU_SZ);
    9602de10:	d2800082 	mov	x2, #0x4                   	// #4
	name[count++] = ID_SEPARATOR;
    9602de14:	390293b9 	strb	w25, [x29, #164]
	memcpy(name + count, sku, EEPROM_SKU_SZ);
    9602de18:	910243a1 	add	x1, x29, #0x90
    9602de1c:	910297a0 	add	x0, x29, #0xa5
    9602de20:	97fff041 	bl	96029f24 <memcpy>
	memcpy(name + count, fab_str, EEPROM_FAB_SZ);
    9602de24:	aa1703e2 	mov	x2, x23
    9602de28:	aa1c03e1 	mov	x1, x28
	name[count++] = ID_SEPARATOR;
    9602de2c:	3902a7b9 	strb	w25, [x29, #169]
	memcpy(name + count, fab_str, EEPROM_FAB_SZ);
    9602de30:	9102aba0 	add	x0, x29, #0xaa
    9602de34:	97fff03c 	bl	96029f24 <memcpy>
	name[count++] = ID_SEPARATOR;
    9602de38:	3902b7b9 	strb	w25, [x29, #173]
	name[count++] = get_valid_char(eeprom->part_no.rev);
    9602de3c:	39409e80 	ldrb	w0, [x20, #39]
	memcpy(id_info->part[id_info->count].part_no, name, (count + 1));
    9602de40:	528026b7 	mov	w23, #0x135                 	// #309
	id_info->part[id_info->count].customer_part_id = false;
    9602de44:	d28026b9 	mov	x25, #0x135                 	// #309
	name[count++] = get_valid_char(eeprom->part_no.rev);
    9602de48:	97ffff4c 	bl	9602db78 <get_valid_char>
    9602de4c:	3902bba0 	strb	w0, [x29, #174]
	pr_info("%s: id: %s, len: %d\n", __func__, name, count);
    9602de50:	528001e3 	mov	w3, #0xf                   	// #15
    9602de54:	910283a2 	add	x2, x29, #0xa0
	name[count] = '\0';
    9602de58:	3902bfbf 	strb	wzr, [x29, #175]
	pr_info("%s: id: %s, len: %d\n", __func__, name, count);
    9602de5c:	900000c1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602de60:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602de64:	911a6421 	add	x1, x1, #0x699
    9602de68:	911f4000 	add	x0, x0, #0x7d0
    9602de6c:	97ffd201 	bl	96022670 <tegrabl_printf>
	memcpy(id_info->part[id_info->count].part_no, name, (count + 1));
    9602de70:	79400660 	ldrh	w0, [x19, #2]
    9602de74:	d28002a1 	mov	x1, #0x15                  	// #21
    9602de78:	d2800202 	mov	x2, #0x10                  	// #16
    9602de7c:	9ba006e0 	umaddl	x0, w23, w0, x1
    9602de80:	910283a1 	add	x1, x29, #0xa0
    9602de84:	8b000260 	add	x0, x19, x0
    9602de88:	97fff027 	bl	96029f24 <memcpy>
	id_info->part[id_info->count].customer_part_id = false;
    9602de8c:	79400661 	ldrh	w1, [x19, #2]
    9602de90:	aa0103e0 	mov	x0, x1
    9602de94:	9b194c21 	madd	x1, x1, x25, x19
    9602de98:	3900103f 	strb	wzr, [x1, #4]
	if (bl_eeprom->name != NULL) {
    9602de9c:	f9400301 	ldr	x1, [x24]
    9602dea0:	b4000121 	cbz	x1, 9602dec4 <eeprom_get_board_ids+0x300>
		strncpy(id_info->part[id_info->count].name, bl_eeprom->name, part_name_size);
    9602dea4:	d28000a2 	mov	x2, #0x5                   	// #5
    9602dea8:	9ba00ae0 	umaddl	x0, w23, w0, x2
    9602deac:	d2800202 	mov	x2, #0x10                  	// #16
    9602deb0:	8b000260 	add	x0, x19, x0
    9602deb4:	97fff107 	bl	9602a2d0 <strncpy>
		id_info->part[id_info->count].name[part_name_size - 1] = '\0';
    9602deb8:	79400660 	ldrh	w0, [x19, #2]
    9602debc:	9b194c00 	madd	x0, x0, x25, x19
    9602dec0:	3900501f 	strb	wzr, [x0, #20]
	data = (char *)id_info->part[id_info->count].config;
    9602dec4:	79400661 	ldrh	w1, [x19, #2]
    9602dec8:	528026a5 	mov	w5, #0x135                 	// #309
    9602decc:	d2800aa0 	mov	x0, #0x55                  	// #85
    9602ded0:	900000d7 	adrp	x23, 96045000 <__func__.3796+0x7>
    9602ded4:	911aa2f7 	add	x23, x23, #0x6a8
		tegrabl_snprintf(data, (MAX_BOARD_CONFIG_LEN - count), "%s:%02x,",
    9602ded8:	900000d9 	adrp	x25, 96045000 <__func__.3796+0x7>
    9602dedc:	910022fb 	add	x27, x23, #0x8
    9602dee0:	911fa339 	add	x25, x25, #0x7e8
	data = (char *)id_info->part[id_info->count].config;
    9602dee4:	9ba100a5 	umaddl	x5, w5, w1, x0
    9602dee8:	9101a2f7 	add	x23, x23, #0x68
	count = 0;
    9602deec:	5280001c 	mov	w28, #0x0                   	// #0
	data = (char *)id_info->part[id_info->count].config;
    9602def0:	8b05027a 	add	x26, x19, x5
		int len = strlen(board_sp_config[i].name);
    9602def4:	f85f8363 	ldur	x3, [x27, #-8]
    9602def8:	f90033a3 	str	x3, [x29, #96]
    9602defc:	aa0303e0 	mov	x0, x3
    9602df00:	97fff103 	bl	9602a30c <strlen>
    9602df04:	aa0003e6 	mov	x6, x0
		if ((count + len + 4) > (MAX_BOARD_CONFIG_LEN - 1)) {
    9602df08:	f90037a6 	str	x6, [x29, #104]
    9602df0c:	0b000380 	add	w0, w28, w0
    9602df10:	7101ec1f 	cmp	w0, #0x7b
    9602df14:	540003ac 	b.gt	9602df88 <eeprom_get_board_ids+0x3c4>
						 *((char *)eeprom + board_sp_config[i].index));
    9602df18:	b8810760 	ldrsw	x0, [x27], #16
		tegrabl_snprintf(data, (MAX_BOARD_CONFIG_LEN - count), "%s:%02x,",
    9602df1c:	52801001 	mov	w1, #0x80                  	// #128
    9602df20:	f94033a3 	ldr	x3, [x29, #96]
    9602df24:	4b1c0021 	sub	w1, w1, w28
    9602df28:	aa1903e2 	mov	x2, x25
    9602df2c:	93407c21 	sxtw	x1, w1
    9602df30:	38606a84 	ldrb	w4, [x20, x0]
    9602df34:	aa1a03e0 	mov	x0, x26
    9602df38:	97ffd1a3 	bl	960225c4 <tegrabl_snprintf>
		count += (len + 4);
    9602df3c:	f94037a6 	ldr	x6, [x29, #104]
	for (i = 0; i < ARRAY_SIZE(board_sp_config); ++i) {
    9602df40:	eb1b02ff 	cmp	x23, x27
		count += (len + 4);
    9602df44:	110010c0 	add	w0, w6, #0x4
		data += (len + 4);
    9602df48:	93407cc6 	sxtw	x6, w6
		count += (len + 4);
    9602df4c:	0b00039c 	add	w28, w28, w0
		data += (len + 4);
    9602df50:	910010c6 	add	x6, x6, #0x4
    9602df54:	8b06035a 	add	x26, x26, x6
	for (i = 0; i < ARRAY_SIZE(board_sp_config); ++i) {
    9602df58:	54fffce1 	b.ne	9602def4 <eeprom_get_board_ids+0x330>  // b.any
	*data = 0x0;
    9602df5c:	3900035f 	strb	wzr, [x26]
	pr_info("config: %s, len: %d\n",
    9602df60:	d2800aa0 	mov	x0, #0x55                  	// #85
    9602df64:	528026a1 	mov	w1, #0x135                 	// #309
    9602df68:	79400662 	ldrh	w2, [x19, #2]
    9602df6c:	9ba20021 	umaddl	x1, w1, w2, x0
    9602df70:	2a1c03e2 	mov	w2, w28
    9602df74:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602df78:	911fc400 	add	x0, x0, #0x7f1
    9602df7c:	8b010261 	add	x1, x19, x1
    9602df80:	97ffd1bc 	bl	96022670 <tegrabl_printf>
    9602df84:	17ffff64 	b	9602dd14 <eeprom_get_board_ids+0x150>
	return err;
    9602df88:	52808055 	mov	w21, #0x402                 	// #1026
    9602df8c:	17ffff2f 	b	9602dc48 <eeprom_get_board_ids+0x84>
	for (i = 0; i < count; i++) {
    9602df90:	52800016 	mov	w22, #0x0                   	// #0
    9602df94:	17ffff71 	b	9602dd58 <eeprom_get_board_ids+0x194>

000000009602df98 <eeprom_get_serial_no>:
{
    9602df98:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602df9c:	910003fd 	mov	x29, sp
	struct tegrabl_eeprom *cvm_eeprom = NULL;
    9602dfa0:	9100c3a1 	add	x1, x29, #0x30
{
    9602dfa4:	a90153f3 	stp	x19, x20, [sp, #16]
    9602dfa8:	aa0003f4 	mov	x20, x0
	err = tegrabl_eeprom_manager_get_eeprom_by_name("module", &cvm_eeprom);
    9602dfac:	90000080 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9602dfb0:	91212800 	add	x0, x0, #0x84a
	struct tegrabl_eeprom *cvm_eeprom = NULL;
    9602dfb4:	f81f8c3f 	str	xzr, [x1, #-8]!
	err = tegrabl_eeprom_manager_get_eeprom_by_name("module", &cvm_eeprom);
    9602dfb8:	97ffbcb7 	bl	9601d294 <tegrabl_eeprom_manager_get_eeprom_by_name>
    9602dfbc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9602dfc0:	34000120 	cbz	w0, 9602dfe4 <eeprom_get_serial_no+0x4c>
		pr_error("Error %u: Failed to read CVM EEPROM\n", err);
    9602dfc4:	2a0003e1 	mov	w1, w0
    9602dfc8:	900000c0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602dfcc:	9124e400 	add	x0, x0, #0x939
    9602dfd0:	97ffd1a8 	bl	96022670 <tegrabl_printf>
}
    9602dfd4:	2a1303e0 	mov	w0, w19
    9602dfd8:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602dfdc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602dfe0:	d65f03c0 	ret
	eeprom = (struct eeprom_layout *)cvm_eeprom->data;
    9602dfe4:	f94017a0 	ldr	x0, [x29, #40]
    9602dfe8:	d2800001 	mov	x1, #0x0                   	// #0
    9602dfec:	f9401003 	ldr	x3, [x0, #32]
	for (j = 0, i = 0; i < sizeof(eeprom->serial_no); i++) {
    9602dff0:	52800000 	mov	w0, #0x0                   	// #0
		if (eeprom->serial_no[i] != '-') {
    9602dff4:	8b010062 	add	x2, x3, x1
    9602dff8:	39412842 	ldrb	w2, [x2, #74]
    9602dffc:	7100b45f 	cmp	w2, #0x2d
    9602e000:	54000060 	b.eq	9602e00c <eeprom_get_serial_no+0x74>  // b.none
			buf[j] = eeprom->serial_no[i];
    9602e004:	38204a82 	strb	w2, [x20, w0, uxtw]
			j++;
    9602e008:	11000400 	add	w0, w0, #0x1
    9602e00c:	91000421 	add	x1, x1, #0x1
	for (j = 0, i = 0; i < sizeof(eeprom->serial_no); i++) {
    9602e010:	f1003c3f 	cmp	x1, #0xf
    9602e014:	54ffff01 	b.ne	9602dff4 <eeprom_get_serial_no+0x5c>  // b.any
	buf[j] = '\0';
    9602e018:	38204a9f 	strb	wzr, [x20, w0, uxtw]
	return err;
    9602e01c:	17ffffee 	b	9602dfd4 <eeprom_get_serial_no+0x3c>

000000009602e020 <eeprom_get_mac_addr>:
{
    9602e020:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9602e024:	910003fd 	mov	x29, sp
	struct tegrabl_eeprom *cvm_eeprom = NULL;
    9602e028:	910143a1 	add	x1, x29, #0x50
{
    9602e02c:	a90153f3 	stp	x19, x20, [sp, #16]
    9602e030:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602e034:	a90363f7 	stp	x23, x24, [sp, #48]
	struct tegrabl_eeprom *cvm_eeprom = NULL;
    9602e038:	f81f8c3f 	str	xzr, [x1, #-8]!
	mac_addr_type_t type = mac_addr_info->type;
    9602e03c:	b9400014 	ldr	w20, [x0]
	char *string = (char *)mac_addr_info->mac_string;
    9602e040:	a940d818 	ldp	x24, x22, [x0, #8]
	err = tegrabl_eeprom_manager_get_eeprom_by_name("module", &cvm_eeprom);
    9602e044:	f0000060 	adrp	x0, 9603d000 <__func__.3609+0x209>
    9602e048:	91212800 	add	x0, x0, #0x84a
    9602e04c:	97ffbc92 	bl	9601d294 <tegrabl_eeprom_manager_get_eeprom_by_name>
    9602e050:	2a0003f5 	mov	w21, w0
	if (err != TEGRABL_NO_ERROR) {
    9602e054:	340001c0 	cbz	w0, 9602e08c <eeprom_get_mac_addr+0x6c>
		pr_error("Error %u: Failed to get CVM EEPROM contents\n", err);
    9602e058:	2a0003e1 	mov	w1, w0
    9602e05c:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e060:	91206800 	add	x0, x0, #0x81a
    9602e064:	97ffd183 	bl	96022670 <tegrabl_printf>
		pr_error("Booting w/o MAC ddresses for WIFI, Bluetooth & Ethernet\n");
    9602e068:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e06c:	91212800 	add	x0, x0, #0x84a
    9602e070:	97ffd180 	bl	96022670 <tegrabl_printf>
}
    9602e074:	2a1503e0 	mov	w0, w21
    9602e078:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602e07c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602e080:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602e084:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602e088:	d65f03c0 	ret
	eeprom = (struct eeprom_layout *)cvm_eeprom->data;
    9602e08c:	f94027a0 	ldr	x0, [x29, #72]
	diff1 = memcmp(cust_sig, block_sig, EEPROM_CUST_SIG_SIZE);
    9602e090:	d2800082 	mov	x2, #0x4                   	// #4
	eeprom = (struct eeprom_layout *)cvm_eeprom->data;
    9602e094:	f9401013 	ldr	x19, [x0, #32]
	diff1 = memcmp(cust_sig, block_sig, EEPROM_CUST_SIG_SIZE);
    9602e098:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e09c:	911c2000 	add	x0, x0, #0x708
    9602e0a0:	91025a61 	add	x1, x19, #0x96
    9602e0a4:	97ffeff3 	bl	9602a070 <memcmp>
    9602e0a8:	2a0003f7 	mov	w23, w0
	diff2 = memcmp(cust_type_sig, block_type, EEPROM_CUST_TYPE_SIZE);
    9602e0ac:	d2800042 	mov	x2, #0x2                   	// #2
    9602e0b0:	91027261 	add	x1, x19, #0x9c
    9602e0b4:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e0b8:	911c3000 	add	x0, x0, #0x70c
    9602e0bc:	97ffefed 	bl	9602a070 <memcmp>
	if (diff1 || diff2) {
    9602e0c0:	2a0002e0 	orr	w0, w23, w0
    9602e0c4:	34000780 	cbz	w0, 9602e1b4 <eeprom_get_mac_addr+0x194>
		pr_warn("%s: EEPROM valid signature or type not found, ", __func__);
    9602e0c8:	f00000a1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602e0cc:	911a1421 	add	x1, x1, #0x685
    9602e0d0:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e0d4:	91221800 	add	x0, x0, #0x886
    9602e0d8:	97ffd166 	bl	96022670 <tegrabl_printf>
		pr_warn("using factory default MAC address\n");
    9602e0dc:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e0e0:	9122e000 	add	x0, x0, #0x8b8
    9602e0e4:	97ffd163 	bl	96022670 <tegrabl_printf>
	switch (type) {
    9602e0e8:	7100069f 	cmp	w20, #0x1
    9602e0ec:	54000320 	b.eq	9602e150 <eeprom_get_mac_addr+0x130>  // b.none
    9602e0f0:	34000154 	cbz	w20, 9602e118 <eeprom_get_mac_addr+0xf8>
    9602e0f4:	71000a9f 	cmp	w20, #0x2
    9602e0f8:	54000300 	b.eq	9602e158 <eeprom_get_mac_addr+0x138>  // b.none
		pr_error("Error: Undefined MAC address type: %u\n", type);
    9602e0fc:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e100:	2a1403e1 	mov	w1, w20
    9602e104:	91237800 	add	x0, x0, #0x8de
    9602e108:	97ffd15a 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602e10c:	52800055 	mov	w21, #0x2                   	// #2
    9602e110:	72a98995 	movk	w21, #0x4c4c, lsl #16
    9602e114:	17ffffd8 	b	9602e074 <eeprom_get_mac_addr+0x54>
			return &eeprom->wifi_mac_addr[0];
    9602e118:	9100ca73 	add	x19, x19, #0x32
	if (!data)
    9602e11c:	b4ffff93 	cbz	x19, 9602e10c <eeprom_get_mac_addr+0xec>
	if (is_valid_mac_addr(data) == false) {
    9602e120:	aa1303e0 	mov	x0, x19
    9602e124:	97fffe76 	bl	9602dafc <is_valid_mac_addr>
    9602e128:	72001c1f 	tst	w0, #0xff
    9602e12c:	540001a1 	b.ne	9602e160 <eeprom_get_mac_addr+0x140>  // b.any
		pr_warn("MAC addr invalid!\n");
    9602e130:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e134:	91242000 	add	x0, x0, #0x908
    9602e138:	97ffd14e 	bl	96022670 <tegrabl_printf>
    9602e13c:	17fffff4 	b	9602e10c <eeprom_get_mac_addr+0xec>
			return &eeprom->cust_wifi_mac_addr[0];
    9602e140:	91028273 	add	x19, x19, #0xa0
    9602e144:	17fffff6 	b	9602e11c <eeprom_get_mac_addr+0xfc>
			return &eeprom->cust_bt_mac_addr[0];
    9602e148:	91029a73 	add	x19, x19, #0xa6
    9602e14c:	17fffff4 	b	9602e11c <eeprom_get_mac_addr+0xfc>
			return &eeprom->bt_mac_addr[0];
    9602e150:	9100e273 	add	x19, x19, #0x38
    9602e154:	17fffff2 	b	9602e11c <eeprom_get_mac_addr+0xfc>
			return &eeprom->eth_mac_addr[0];
    9602e158:	91011273 	add	x19, x19, #0x44
    9602e15c:	17fffff0 	b	9602e11c <eeprom_get_mac_addr+0xfc>
	if (bytes != NULL) {
    9602e160:	b4000118 	cbz	x24, 9602e180 <eeprom_get_mac_addr+0x160>
    9602e164:	d2800000 	mov	x0, #0x0                   	// #0
			bytes[i] = data[MAC_ADDR_BYTES - i - 1];
    9602e168:	cb000261 	sub	x1, x19, x0
    9602e16c:	39401421 	ldrb	w1, [x1, #5]
    9602e170:	38206b01 	strb	w1, [x24, x0]
    9602e174:	91000400 	add	x0, x0, #0x1
		for (i = 0; i < MAC_ADDR_BYTES; i++) {
    9602e178:	f100181f 	cmp	x0, #0x6
    9602e17c:	54ffff61 	b.ne	9602e168 <eeprom_get_mac_addr+0x148>  // b.any
	if (string != NULL) {
    9602e180:	b4fff7b6 	cbz	x22, 9602e074 <eeprom_get_mac_addr+0x54>
		create_mac_addr_string(string, data, false);
    9602e184:	aa1303e1 	mov	x1, x19
    9602e188:	aa1603e0 	mov	x0, x22
    9602e18c:	52800002 	mov	w2, #0x0                   	// #0
    9602e190:	97fffdd6 	bl	9602d8e8 <create_mac_addr_string>
		pr_info("%s: MAC (type: %u): %s\n", __func__, type, string);
    9602e194:	aa1603e3 	mov	x3, x22
    9602e198:	2a1403e2 	mov	w2, w20
    9602e19c:	f00000a1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602e1a0:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e1a4:	911a1421 	add	x1, x1, #0x685
    9602e1a8:	91247800 	add	x0, x0, #0x91e
    9602e1ac:	97ffd131 	bl	96022670 <tegrabl_printf>
    9602e1b0:	17ffffb1 	b	9602e074 <eeprom_get_mac_addr+0x54>
	switch (type) {
    9602e1b4:	7100069f 	cmp	w20, #0x1
    9602e1b8:	54fffc80 	b.eq	9602e148 <eeprom_get_mac_addr+0x128>  // b.none
    9602e1bc:	34fffc34 	cbz	w20, 9602e140 <eeprom_get_mac_addr+0x120>
    9602e1c0:	71000a9f 	cmp	w20, #0x2
    9602e1c4:	54fff9c1 	b.ne	9602e0fc <eeprom_get_mac_addr+0xdc>  // b.any
			return &eeprom->cust_eth_mac_addr[0];
    9602e1c8:	9102b273 	add	x19, x19, #0xac
    9602e1cc:	17ffffd4 	b	9602e11c <eeprom_get_mac_addr+0xfc>

000000009602e1d0 <eeprom_get_ops>:
};

struct board_info_ops *eeprom_get_ops(void)
{
	return &eeprom_ops;
}
    9602e1d0:	b00000e0 	adrp	x0, 9604b000 <partition_names.3562+0x190>
    9602e1d4:	910c4000 	add	x0, x0, #0x310
    9602e1d8:	d65f03c0 	ret

000000009602e1dc <eeprom_detect>:

bool eeprom_detect(void)
{
    9602e1dc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9602e1e0:	910003fd 	mov	x29, sp
	return tegrabl_eeprom_manager_init() == TEGRABL_NO_ERROR;
    9602e1e4:	97ffb92e 	bl	9601c69c <tegrabl_eeprom_manager_init>
    9602e1e8:	7100001f 	cmp	w0, #0x0
}
    9602e1ec:	1a9f17e0 	cset	w0, eq  // eq = none
    9602e1f0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9602e1f4:	d65f03c0 	ret

000000009602e1f8 <is_compressed_content>:
	pr_debug("Decompressor handler NOT found\n");
	return NULL;
}

bool is_compressed_content(uint8_t *head_buf, decompressor **pdecomp)
{
    9602e1f8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9602e1fc:	b00000e3 	adrp	x3, 9604b000 <partition_names.3562+0x190>
    9602e200:	910ca062 	add	x2, x3, #0x328
    9602e204:	910003fd 	mov	x29, sp
    9602e208:	a90153f3 	stp	x19, x20, [sp, #16]
    9602e20c:	91000442 	add	x2, x2, #0x1
    9602e210:	aa0103f3 	mov	x19, x1
	for (id = 0; id < (int32_t)ARRAY_SIZE(decompressor_list); id++) {
    9602e214:	52800001 	mov	w1, #0x0                   	// #0
		if ((dc.magic[0] == c_magic[0]) && (dc.magic[1] == c_magic[1])) {
    9602e218:	39400004 	ldrb	w4, [x0]
    9602e21c:	385ff045 	ldurb	w5, [x2, #-1]
    9602e220:	d1000454 	sub	x20, x2, #0x1
    9602e224:	6b0400bf 	cmp	w5, w4
    9602e228:	540000a1 	b.ne	9602e23c <is_compressed_content+0x44>  // b.any
    9602e22c:	39400046 	ldrb	w6, [x2]
    9602e230:	39400405 	ldrb	w5, [x0, #1]
    9602e234:	6b0500df 	cmp	w6, w5
    9602e238:	540001c0 	b.eq	9602e270 <is_compressed_content+0x78>  // b.none
	for (id = 0; id < (int32_t)ARRAY_SIZE(decompressor_list); id++) {
    9602e23c:	11000421 	add	w1, w1, #0x1
    9602e240:	9100a042 	add	x2, x2, #0x28
    9602e244:	71000c3f 	cmp	w1, #0x3
    9602e248:	54fffea1 	b.ne	9602e21c <is_compressed_content+0x24>  // b.any
	pr_debug("magic id:%02x %02x\n", *head_buf, *(head_buf + 1));

	/* get decompression handler */
	decomp = decompress_method(head_buf, 2);
	if (!decomp) {
		pr_info("decompressor handler not found\n");
    9602e24c:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e250:	912aac00 	add	x0, x0, #0xaab
    9602e254:	97ffd107 	bl	96022670 <tegrabl_printf>
	return NULL;
    9602e258:	d2800014 	mov	x20, #0x0                   	// #0
	bool compressed = false;
    9602e25c:	52800000 	mov	w0, #0x0                   	// #0
	} else {
		pr_info("found decompressor handler: %s\n", decomp->name);
		compressed = true;
	}

	*pdecomp = decomp;
    9602e260:	f9000274 	str	x20, [x19]

	return compressed;
}
    9602e264:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602e268:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9602e26c:	d65f03c0 	ret
		pr_info("found decompressor handler: %s\n", decomp->name);
    9602e270:	910ca063 	add	x3, x3, #0x328
    9602e274:	93407c21 	sxtw	x1, w1
    9602e278:	d2800500 	mov	x0, #0x28                  	// #40
    9602e27c:	9b000c21 	madd	x1, x1, x0, x3
    9602e280:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e284:	912b3800 	add	x0, x0, #0xace
    9602e288:	f9400421 	ldr	x1, [x1, #8]
    9602e28c:	97ffd0f9 	bl	96022670 <tegrabl_printf>
		compressed = true;
    9602e290:	52800020 	mov	w0, #0x1                   	// #1
    9602e294:	17fffff3 	b	9602e260 <is_compressed_content+0x68>

000000009602e298 <do_decompress>:

tegrabl_error_t do_decompress(decompressor *decomp, uint8_t *read_buffer,
							  uint32_t read_size, uint8_t *out_buffer,
							  uint32_t *outbuf_size)
{
    9602e298:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9602e29c:	910003fd 	mov	x29, sp
    9602e2a0:	a90153f3 	stp	x19, x20, [sp, #16]
    9602e2a4:	aa0003f4 	mov	x20, x0
	void *context = NULL;
	uint8_t *write_buffer = out_buffer;
	uint32_t written_size = 0;

	/* initialize decompressor algo if needed */
	if (strcmp(decomp->name, "lz4") && strcmp(decomp->name, "lz4-legacy")) {
    9602e2a8:	f9400400 	ldr	x0, [x0, #8]
{
    9602e2ac:	2a0203f3 	mov	w19, w2
    9602e2b0:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602e2b4:	aa0403f6 	mov	x22, x4
    9602e2b8:	a90363f7 	stp	x23, x24, [sp, #48]
    9602e2bc:	aa0103f7 	mov	x23, x1
    9602e2c0:	aa0303f8 	mov	x24, x3
	if (strcmp(decomp->name, "lz4") && strcmp(decomp->name, "lz4-legacy")) {
    9602e2c4:	f00000a1 	adrp	x1, 96045000 <__func__.3796+0x7>
	uint32_t written_size = 0;
    9602e2c8:	b9004fbf 	str	wzr, [x29, #76]
	if (strcmp(decomp->name, "lz4") && strcmp(decomp->name, "lz4-legacy")) {
    9602e2cc:	9128c021 	add	x1, x1, #0xa30
    9602e2d0:	97ffefdf 	bl	9602a24c <strcmp>
    9602e2d4:	34000380 	cbz	w0, 9602e344 <do_decompress+0xac>
    9602e2d8:	f9400680 	ldr	x0, [x20, #8]
    9602e2dc:	f00000a1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602e2e0:	9128d021 	add	x1, x1, #0xa34
    9602e2e4:	97ffefda 	bl	9602a24c <strcmp>
    9602e2e8:	340002e0 	cbz	w0, 9602e344 <do_decompress+0xac>
		if (!decomp->init) {
    9602e2ec:	f9400a81 	ldr	x1, [x20, #16]
    9602e2f0:	b5000181 	cbnz	x1, 9602e320 <do_decompress+0x88>
			pr_critical("Decompressor init api not found\n");
			return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9602e2f4:	52800053 	mov	w19, #0x2                   	// #2
			pr_critical("Decompressor init api not found\n");
    9602e2f8:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e2fc:	9128fc00 	add	x0, x0, #0xa3f
    9602e300:	97ffd0dc 	bl	96022670 <tegrabl_printf>
		}
		context = decomp->init(read_size);
		if (!context) {
			pr_critical("Decompressor init failed\n");
			return TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
    9602e304:	72ad4d53 	movk	w19, #0x6a6a, lsl #16
			 written_size);

	*outbuf_size = written_size;

	return err;
}
    9602e308:	2a1303e0 	mov	w0, w19
    9602e30c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602e310:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602e314:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602e318:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9602e31c:	d65f03c0 	ret
		context = decomp->init(read_size);
    9602e320:	2a1303e0 	mov	w0, w19
    9602e324:	d63f0020 	blr	x1
    9602e328:	aa0003f5 	mov	x21, x0
		if (!context) {
    9602e32c:	b50000e0 	cbnz	x0, 9602e348 <do_decompress+0xb0>
			pr_critical("Decompressor init failed\n");
    9602e330:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
			return TEGRABL_ERROR(TEGRABL_ERR_INIT_FAILED, 0);
    9602e334:	52800253 	mov	w19, #0x12                  	// #18
			pr_critical("Decompressor init failed\n");
    9602e338:	91298c00 	add	x0, x0, #0xa63
    9602e33c:	97ffd0cd 	bl	96022670 <tegrabl_printf>
    9602e340:	17fffff1 	b	9602e304 <do_decompress+0x6c>
	void *context = NULL;
    9602e344:	d2800015 	mov	x21, #0x0                   	// #0
	err = decomp->decompress(context, read_buffer, read_size, write_buffer,
    9602e348:	b94002c4 	ldr	w4, [x22]
    9602e34c:	2a1303e2 	mov	w2, w19
    9602e350:	f9400e86 	ldr	x6, [x20, #24]
    9602e354:	910133a5 	add	x5, x29, #0x4c
    9602e358:	aa1803e3 	mov	x3, x24
    9602e35c:	aa1703e1 	mov	x1, x23
    9602e360:	aa1503e0 	mov	x0, x21
    9602e364:	d63f00c0 	blr	x6
    9602e368:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    9602e36c:	340000c0 	cbz	w0, 9602e384 <do_decompress+0xec>
		pr_critical("Failure during decompressing (err: %d)\n", err);
    9602e370:	2a0003e1 	mov	w1, w0
    9602e374:	f00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602e378:	912a0000 	add	x0, x0, #0xa80
    9602e37c:	97ffd0bd 	bl	96022670 <tegrabl_printf>
		return err;
    9602e380:	17ffffe2 	b	9602e308 <do_decompress+0x70>
	if (decomp->end) {
    9602e384:	f9401281 	ldr	x1, [x20, #32]
    9602e388:	b4000061 	cbz	x1, 9602e394 <do_decompress+0xfc>
		decomp->end(context);
    9602e38c:	aa1503e0 	mov	x0, x21
    9602e390:	d63f0020 	blr	x1
	*outbuf_size = written_size;
    9602e394:	b9404fa0 	ldr	w0, [x29, #76]
    9602e398:	b90002c0 	str	w0, [x22]
	return err;
    9602e39c:	17ffffdb 	b	9602e308 <do_decompress+0x70>

000000009602e3a0 <adler32>:
{
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    9602e3a0:	53107c07 	lsr	w7, w0, #16
    adler &= 0xffff;

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
    9602e3a4:	7100045f 	cmp	w2, #0x1
    adler &= 0xffff;
    9602e3a8:	92403c00 	and	x0, x0, #0xffff
    if (len == 1) {
    9602e3ac:	54000201 	b.ne	9602e3ec <adler32+0x4c>  // b.any
        adler += buf[0];
    9602e3b0:	39400021 	ldrb	w1, [x1]
    9602e3b4:	8b000021 	add	x1, x1, x0
        if (adler >= BASE)
    9602e3b8:	d29ffe00 	mov	x0, #0xfff0                	// #65520
    9602e3bc:	eb00003f 	cmp	x1, x0
    9602e3c0:	aa0003e2 	mov	x2, x0
    9602e3c4:	54000069 	b.ls	9602e3d0 <adler32+0x30>  // b.plast
            adler -= BASE;
    9602e3c8:	929ffe03 	mov	x3, #0xffffffffffff000f    	// #-65521
    9602e3cc:	8b030021 	add	x1, x1, x3
        sum2 += adler;
    9602e3d0:	8b070020 	add	x0, x1, x7
        if (sum2 >= BASE)
    9602e3d4:	eb02001f 	cmp	x0, x2
    9602e3d8:	54000069 	b.ls	9602e3e4 <adler32+0x44>  // b.plast
            sum2 -= BASE;
    9602e3dc:	929ffe02 	mov	x2, #0xffffffffffff000f    	// #-65521
    9602e3e0:	8b020000 	add	x0, x0, x2
        return adler | (sum2 << 16);
    9602e3e4:	aa004020 	orr	x0, x1, x0, lsl #16
    9602e3e8:	d65f03c0 	ret
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
    9602e3ec:	b40014e1 	cbz	x1, 9602e688 <adler32+0x2e8>
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
    9602e3f0:	71003c5f 	cmp	w2, #0xf
    9602e3f4:	54000229 	b.ls	9602e438 <adler32+0x98>  // b.plast
{
    9602e3f8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
    9602e3fc:	5282b5ef 	mov	w15, #0x15af                	// #5551
        len -= NMAX;
    9602e400:	1282b5f0 	mov	w16, #0xffffea50            	// #-5552
    9602e404:	d282b611 	mov	x17, #0x15b0                	// #5552
{
    9602e408:	910003fd 	mov	x29, sp
    9602e40c:	a90153f3 	stp	x19, x20, [sp, #16]
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
    9602e410:	d29ffe2e 	mov	x14, #0xfff1                	// #65521
{
    9602e414:	a9025bf5 	stp	x21, x22, [sp, #32]
    while (len >= NMAX) {
    9602e418:	6b0f005f 	cmp	w2, w15
    9602e41c:	54000308 	b.hi	9602e47c <adler32+0xdc>  // b.pmore
        MOD(sum2);
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
    9602e420:	35001262 	cbnz	w2, 9602e66c <adler32+0x2cc>
        MOD(adler);
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
    9602e424:	aa074000 	orr	x0, x0, x7, lsl #16
}
    9602e428:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602e42c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602e430:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602e434:	d65f03c0 	ret
    9602e438:	8b224022 	add	x2, x1, w2, uxtw
        while (len--) {
    9602e43c:	eb02003f 	cmp	x1, x2
    9602e440:	54000161 	b.ne	9602e46c <adler32+0xcc>  // b.any
        if (adler >= BASE)
    9602e444:	d29ffe01 	mov	x1, #0xfff0                	// #65520
    9602e448:	eb01001f 	cmp	x0, x1
    9602e44c:	54000069 	b.ls	9602e458 <adler32+0xb8>  // b.plast
            adler -= BASE;
    9602e450:	929ffe01 	mov	x1, #0xffffffffffff000f    	// #-65521
    9602e454:	8b010000 	add	x0, x0, x1
        MOD4(sum2);             /* only added so many BASE's */
    9602e458:	d29ffe24 	mov	x4, #0xfff1                	// #65521
    9602e45c:	9ac408e3 	udiv	x3, x7, x4
    9602e460:	9b049c63 	msub	x3, x3, x4, x7
        return adler | (sum2 << 16);
    9602e464:	aa034000 	orr	x0, x0, x3, lsl #16
    9602e468:	d65f03c0 	ret
            adler += *buf++;
    9602e46c:	38401423 	ldrb	w3, [x1], #1
    9602e470:	8b030000 	add	x0, x0, x3
            sum2 += adler;
    9602e474:	8b0000e7 	add	x7, x7, x0
    9602e478:	17fffff1 	b	9602e43c <adler32+0x9c>
        len -= NMAX;
    9602e47c:	0b100042 	add	w2, w2, w16
    9602e480:	8b110032 	add	x18, x1, x17
            DO16(buf);          /* 16 sums unrolled */
    9602e484:	39400023 	ldrb	w3, [x1]
            buf += 16;
    9602e488:	91004021 	add	x1, x1, #0x10
            DO16(buf);          /* 16 sums unrolled */
    9602e48c:	385f1036 	ldurb	w22, [x1, #-15]
    9602e490:	8b000063 	add	x3, x3, x0
    9602e494:	385f2029 	ldurb	w9, [x1, #-14]
    9602e498:	385f3026 	ldurb	w6, [x1, #-13]
    9602e49c:	8b0302d6 	add	x22, x22, x3
    9602e4a0:	385f4028 	ldurb	w8, [x1, #-12]
    9602e4a4:	8b160129 	add	x9, x9, x22
    9602e4a8:	385f5035 	ldurb	w21, [x1, #-11]
    9602e4ac:	8b0900c6 	add	x6, x6, x9
    9602e4b0:	8b060108 	add	x8, x8, x6
    9602e4b4:	385f6024 	ldurb	w4, [x1, #-10]
    9602e4b8:	385f7034 	ldurb	w20, [x1, #-9]
    9602e4bc:	8b0802b5 	add	x21, x21, x8
    9602e4c0:	385f802d 	ldurb	w13, [x1, #-8]
    9602e4c4:	8b150084 	add	x4, x4, x21
    9602e4c8:	385f9025 	ldurb	w5, [x1, #-7]
    9602e4cc:	8b040294 	add	x20, x20, x4
    9602e4d0:	385fa02c 	ldurb	w12, [x1, #-6]
    9602e4d4:	8b1401ad 	add	x13, x13, x20
    9602e4d8:	385fb033 	ldurb	w19, [x1, #-5]
    9602e4dc:	8b0d00a5 	add	x5, x5, x13
    9602e4e0:	8b05018c 	add	x12, x12, x5
    9602e4e4:	385fc02b 	ldurb	w11, [x1, #-4]
    9602e4e8:	8b160063 	add	x3, x3, x22
    9602e4ec:	8b060126 	add	x6, x9, x6
    9602e4f0:	385fd03e 	ldurb	w30, [x1, #-3]
    9602e4f4:	8b0c0273 	add	x19, x19, x12
    9602e4f8:	8b060066 	add	x6, x3, x6
    9602e4fc:	8b150108 	add	x8, x8, x21
    9602e500:	385fe02a 	ldurb	w10, [x1, #-2]
    9602e504:	8b13016b 	add	x11, x11, x19
    9602e508:	8b0800c6 	add	x6, x6, x8
    9602e50c:	8b140084 	add	x4, x4, x20
    9602e510:	385ff020 	ldurb	w0, [x1, #-1]
    9602e514:	8b0b03de 	add	x30, x30, x11
    9602e518:	8b0400c6 	add	x6, x6, x4
    9602e51c:	8b0501a5 	add	x5, x13, x5
    9602e520:	8b1e014a 	add	x10, x10, x30
    9602e524:	8b0500c5 	add	x5, x6, x5
    9602e528:	8b13018c 	add	x12, x12, x19
    9602e52c:	8b0a0000 	add	x0, x0, x10
    9602e530:	8b0c00a5 	add	x5, x5, x12
    9602e534:	8b1e016b 	add	x11, x11, x30
    9602e538:	8b0b00a5 	add	x5, x5, x11
    9602e53c:	8b00014a 	add	x10, x10, x0
    9602e540:	8b0a00a5 	add	x5, x5, x10
        } while (--n);
    9602e544:	eb12003f 	cmp	x1, x18
            DO16(buf);          /* 16 sums unrolled */
    9602e548:	8b0500e7 	add	x7, x7, x5
        } while (--n);
    9602e54c:	54fff9c1 	b.ne	9602e484 <adler32+0xe4>  // b.any
        MOD(adler);
    9602e550:	9ace0803 	udiv	x3, x0, x14
    9602e554:	9b0e8060 	msub	x0, x3, x14, x0
        MOD(sum2);
    9602e558:	9ace08e3 	udiv	x3, x7, x14
    9602e55c:	9b0e9c67 	msub	x7, x3, x14, x7
    9602e560:	17ffffae 	b	9602e418 <adler32+0x78>
            DO16(buf);
    9602e564:	394000a4 	ldrb	w4, [x5]
            len -= 16;
    9602e568:	510041ce 	sub	w14, w14, #0x10
            DO16(buf);
    9602e56c:	394004a3 	ldrb	w3, [x5, #1]
            buf += 16;
    9602e570:	910040a5 	add	x5, x5, #0x10
            DO16(buf);
    9602e574:	8b000080 	add	x0, x4, x0
    9602e578:	385f20a4 	ldurb	w4, [x5, #-14]
    9602e57c:	8b000063 	add	x3, x3, x0
    9602e580:	385f30ac 	ldurb	w12, [x5, #-13]
    9602e584:	8b030084 	add	x4, x4, x3
    9602e588:	385f40be 	ldurb	w30, [x5, #-12]
    9602e58c:	8b04018c 	add	x12, x12, x4
    9602e590:	385f50ab 	ldurb	w11, [x5, #-11]
    9602e594:	8b0c03de 	add	x30, x30, x12
    9602e598:	385f60b2 	ldurb	w18, [x5, #-10]
    9602e59c:	8b1e016b 	add	x11, x11, x30
    9602e5a0:	385f70aa 	ldurb	w10, [x5, #-9]
    9602e5a4:	8b0b0252 	add	x18, x18, x11
    9602e5a8:	385f80b1 	ldurb	w17, [x5, #-8]
    9602e5ac:	8b12014a 	add	x10, x10, x18
    9602e5b0:	385f90a9 	ldurb	w9, [x5, #-7]
    9602e5b4:	8b0a0231 	add	x17, x17, x10
    9602e5b8:	385fa0b0 	ldurb	w16, [x5, #-6]
    9602e5bc:	8b0000e0 	add	x0, x7, x0
    9602e5c0:	8b110129 	add	x9, x9, x17
    9602e5c4:	385fb0a8 	ldurb	w8, [x5, #-5]
    9602e5c8:	8b040064 	add	x4, x3, x4
    9602e5cc:	8b090210 	add	x16, x16, x9
    9602e5d0:	385fc0af 	ldurb	w15, [x5, #-4]
    9602e5d4:	8b000084 	add	x4, x4, x0
    9602e5d8:	8b1e018c 	add	x12, x12, x30
    9602e5dc:	8b100108 	add	x8, x8, x16
    9602e5e0:	385fd0a6 	ldurb	w6, [x5, #-3]
    9602e5e4:	8b0c0084 	add	x4, x4, x12
    9602e5e8:	8b12016b 	add	x11, x11, x18
    9602e5ec:	8b0801ef 	add	x15, x15, x8
    9602e5f0:	385fe0ad 	ldurb	w13, [x5, #-2]
    9602e5f4:	8b0b0084 	add	x4, x4, x11
    9602e5f8:	8b110143 	add	x3, x10, x17
    9602e5fc:	8b0f00c6 	add	x6, x6, x15
    9602e600:	8b030083 	add	x3, x4, x3
    9602e604:	8b100129 	add	x9, x9, x16
    9602e608:	8b0601ad 	add	x13, x13, x6
    9602e60c:	385ff0a0 	ldurb	w0, [x5, #-1]
    9602e610:	8b090063 	add	x3, x3, x9
    9602e614:	8b0f0108 	add	x8, x8, x15
    9602e618:	8b0d00c6 	add	x6, x6, x13
    9602e61c:	8b080063 	add	x3, x3, x8
    9602e620:	8b0d0000 	add	x0, x0, x13
    9602e624:	8b060063 	add	x3, x3, x6
    9602e628:	8b030007 	add	x7, x0, x3
        while (len >= 16) {
    9602e62c:	71003ddf 	cmp	w14, #0xf
    9602e630:	54fff9a8 	b.hi	9602e564 <adler32+0x1c4>  // b.pmore
    9602e634:	53047c43 	lsr	w3, w2, #4
    9602e638:	531c6c64 	lsl	w4, w3, #4
    9602e63c:	8b040021 	add	x1, x1, x4
    9602e640:	128001e4 	mov	w4, #0xfffffff0            	// #-16
    9602e644:	1b040862 	madd	w2, w3, w4, w2
    9602e648:	8b020022 	add	x2, x1, x2
        while (len--) {
    9602e64c:	eb02003f 	cmp	x1, x2
    9602e650:	54000141 	b.ne	9602e678 <adler32+0x2d8>  // b.any
        MOD(adler);
    9602e654:	d29ffe21 	mov	x1, #0xfff1                	// #65521
    9602e658:	9ac10802 	udiv	x2, x0, x1
    9602e65c:	9b018040 	msub	x0, x2, x1, x0
        MOD(sum2);
    9602e660:	9ac108e2 	udiv	x2, x7, x1
    9602e664:	9b019c47 	msub	x7, x2, x1, x7
    9602e668:	17ffff6f 	b	9602e424 <adler32+0x84>
    9602e66c:	2a0203ee 	mov	w14, w2
    9602e670:	aa0103e5 	mov	x5, x1
    9602e674:	17ffffee 	b	9602e62c <adler32+0x28c>
            adler += *buf++;
    9602e678:	38401423 	ldrb	w3, [x1], #1
    9602e67c:	8b030000 	add	x0, x0, x3
            sum2 += adler;
    9602e680:	8b0000e7 	add	x7, x7, x0
    9602e684:	17fffff2 	b	9602e64c <adler32+0x2ac>
        return 1L;
    9602e688:	d2800020 	mov	x0, #0x1                   	// #1
}
    9602e68c:	d65f03c0 	ret

000000009602e690 <inflate_fast>:
      output space.
 */
void ZLIB_INTERNAL inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
    9602e690:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    window = state->window;
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
    9602e694:	5280002d 	mov	w13, #0x1                   	// #1
{
    9602e698:	910003fd 	mov	x29, sp
    state = (struct inflate_state FAR *)strm->state;
    9602e69c:	f9401c09 	ldr	x9, [x0, #56]
{
    9602e6a0:	a9025bf5 	stp	x21, x22, [sp, #32]
    beg = out - (start - strm->avail_out);
    9602e6a4:	b940200a 	ldr	w10, [x0, #32]
    dmask = (1U << state->distbits) - 1;
    9602e6a8:	294e3d2e 	ldp	w14, w15, [x9, #112]
{
    9602e6ac:	a90153f3 	stp	x19, x20, [sp, #16]
    wnext = state->wnext;
    9602e6b0:	b9403d2c 	ldr	w12, [x9, #60]
    beg = out - (start - strm->avail_out);
    9602e6b4:	4b0a0021 	sub	w1, w1, w10
    whave = state->whave;
    9602e6b8:	2946d53e 	ldp	w30, w21, [x9, #52]
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
    9602e6bc:	12800014 	mov	w20, #0xffffffff            	// #-1
    last = in + (strm->avail_in - 5);
    9602e6c0:	b940080b 	ldr	w11, [x0, #8]
    end = out + (strm->avail_out - 257);
    9602e6c4:	5104054a 	sub	w10, w10, #0x101
    in = strm->next_in - OFF;
    9602e6c8:	f9400005 	ldr	x5, [x0]
    9602e6cc:	0b140192 	add	w18, w12, w20
    out = strm->next_out - OFF;
    9602e6d0:	f9400c02 	ldr	x2, [x0, #24]
    last = in + (strm->avail_in - 5);
    9602e6d4:	5100156b 	sub	w11, w11, #0x5
    in = strm->next_in - OFF;
    9602e6d8:	d10004a5 	sub	x5, x5, #0x1
    lmask = (1U << state->lenbits) - 1;
    9602e6dc:	1ace21ae 	lsl	w14, w13, w14
    out = strm->next_out - OFF;
    9602e6e0:	d1000442 	sub	x2, x2, #0x1
    dmask = (1U << state->distbits) - 1;
    9602e6e4:	1acf21af 	lsl	w15, w13, w15
    last = in + (strm->avail_in - 5);
    9602e6e8:	8b0b00ab 	add	x11, x5, x11
    beg = out - (start - strm->avail_out);
    9602e6ec:	cb010041 	sub	x1, x2, x1
    end = out + (strm->avail_out - 257);
    9602e6f0:	8b0a004a 	add	x10, x2, x10
        here = lcode[hold & lmask];
    9602e6f4:	510005ce 	sub	w14, w14, #0x1
            here = dcode[hold & dmask];
    9602e6f8:	510005ef 	sub	w15, w15, #0x1
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (wnext < op) {      /* wrap around window */
                        from += wsize + wnext - op;
    9602e6fc:	0b0c03d6 	add	w22, w30, w12
    9602e700:	91000652 	add	x18, x18, #0x1
    bits = state->bits;
    9602e704:	b9405124 	ldr	w4, [x9, #80]
    hold = state->hold;
    9602e708:	a9441d33 	ldp	x19, x7, [x9, #64]
{
    9602e70c:	a90363f7 	stp	x23, x24, [sp, #48]
    dcode = state->distcode;
    9602e710:	a9464530 	ldp	x16, x17, [x9, #96]
{
    9602e714:	a9046bf9 	stp	x25, x26, [sp, #64]
    9602e718:	f9002bfb 	str	x27, [sp, #80]
        if (bits < 15) {
    9602e71c:	7100389f 	cmp	w4, #0xe
    9602e720:	54000148 	b.hi	9602e748 <inflate_fast+0xb8>  // b.pmore
            hold += (unsigned long)(PUP(in)) << bits;
    9602e724:	394008a3 	ldrb	w3, [x5, #2]
            bits += 8;
    9602e728:	11002086 	add	w6, w4, #0x8
            hold += (unsigned long)(PUP(in)) << bits;
    9602e72c:	910008a5 	add	x5, x5, #0x2
    9602e730:	9ac62063 	lsl	x3, x3, x6
            hold += (unsigned long)(PUP(in)) << bits;
    9602e734:	385ff0a6 	ldurb	w6, [x5, #-1]
    9602e738:	9ac420c6 	lsl	x6, x6, x4
            hold += (unsigned long)(PUP(in)) << bits;
    9602e73c:	8b060063 	add	x3, x3, x6
    9602e740:	8b0300e7 	add	x7, x7, x3
            bits += 8;
    9602e744:	11004084 	add	w4, w4, #0x10
        here = lcode[hold & lmask];
    9602e748:	8a0701c3 	and	x3, x14, x7
    9602e74c:	d37ef463 	lsl	x3, x3, #2
    9602e750:	8b030208 	add	x8, x16, x3
    9602e754:	38636a03 	ldrb	w3, [x16, x3]
    9602e758:	39400506 	ldrb	w6, [x8, #1]
    9602e75c:	79400508 	ldrh	w8, [x8, #2]
        bits -= op;
    9602e760:	4b060084 	sub	w4, w4, w6
        hold >>= op;
    9602e764:	9ac624e7 	lsr	x7, x7, x6
        if (op == 0) {                          /* literal */
    9602e768:	350000e3 	cbnz	w3, 9602e784 <inflate_fast+0xf4>
            PUP(out) = (unsigned char)(here.val);
    9602e76c:	39000448 	strb	w8, [x2, #1]
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    }
                    if (len) {
                        PUP(out) = PUP(from);
    9602e770:	91000442 	add	x2, x2, #0x1
        else {
            strm->msg = (char *)"invalid literal/length code";
            state->mode = BAD;
            break;
        }
    } while (in < last && out < end);
    9602e774:	eb0b00bf 	cmp	x5, x11
    9602e778:	fa4a3042 	ccmp	x2, x10, #0x2, cc  // cc = lo, ul, last
    9602e77c:	54fffd03 	b.cc	9602e71c <inflate_fast+0x8c>  // b.lo, b.ul, b.last
    9602e780:	14000042 	b	9602e888 <inflate_fast+0x1f8>
        else if (op & 16) {                     /* length base */
    9602e784:	36201be3 	tbz	w3, #4, 9602eb00 <inflate_fast+0x470>
            len = (unsigned)(here.val);
    9602e788:	2a0803e6 	mov	w6, w8
            if (op) {
    9602e78c:	72000c63 	ands	w3, w3, #0xf
    9602e790:	540001a0 	b.eq	9602e7c4 <inflate_fast+0x134>  // b.none
                if (bits < op) {
    9602e794:	6b03009f 	cmp	w4, w3
    9602e798:	540000c2 	b.cs	9602e7b0 <inflate_fast+0x120>  // b.hs, b.nlast
                    hold += (unsigned long)(PUP(in)) << bits;
    9602e79c:	394004a6 	ldrb	w6, [x5, #1]
    9602e7a0:	910004a5 	add	x5, x5, #0x1
    9602e7a4:	9ac420c6 	lsl	x6, x6, x4
                    bits += 8;
    9602e7a8:	11002084 	add	w4, w4, #0x8
                    hold += (unsigned long)(PUP(in)) << bits;
    9602e7ac:	8b0600e7 	add	x7, x7, x6
                len += (unsigned)hold & ((1U << op) - 1);
    9602e7b0:	1ac32286 	lsl	w6, w20, w3
    9602e7b4:	0a2600e6 	bic	w6, w7, w6
    9602e7b8:	0b060106 	add	w6, w8, w6
                bits -= op;
    9602e7bc:	4b030084 	sub	w4, w4, w3
                hold >>= op;
    9602e7c0:	9ac324e7 	lsr	x7, x7, x3
            if (bits < 15) {
    9602e7c4:	7100389f 	cmp	w4, #0xe
    9602e7c8:	54000148 	b.hi	9602e7f0 <inflate_fast+0x160>  // b.pmore
                hold += (unsigned long)(PUP(in)) << bits;
    9602e7cc:	394008a3 	ldrb	w3, [x5, #2]
                bits += 8;
    9602e7d0:	11002088 	add	w8, w4, #0x8
                hold += (unsigned long)(PUP(in)) << bits;
    9602e7d4:	910008a5 	add	x5, x5, #0x2
    9602e7d8:	9ac82063 	lsl	x3, x3, x8
                hold += (unsigned long)(PUP(in)) << bits;
    9602e7dc:	385ff0a8 	ldurb	w8, [x5, #-1]
    9602e7e0:	9ac42108 	lsl	x8, x8, x4
                hold += (unsigned long)(PUP(in)) << bits;
    9602e7e4:	8b080063 	add	x3, x3, x8
    9602e7e8:	8b0300e7 	add	x7, x7, x3
                bits += 8;
    9602e7ec:	11004084 	add	w4, w4, #0x10
            here = dcode[hold & dmask];
    9602e7f0:	8a0701e3 	and	x3, x15, x7
    9602e7f4:	d37ef463 	lsl	x3, x3, #2
    9602e7f8:	8b030237 	add	x23, x17, x3
    9602e7fc:	38636a23 	ldrb	w3, [x17, x3]
    9602e800:	394006e8 	ldrb	w8, [x23, #1]
    9602e804:	794006f7 	ldrh	w23, [x23, #2]
            bits -= op;
    9602e808:	4b080084 	sub	w4, w4, w8
            hold >>= op;
    9602e80c:	9ac824e7 	lsr	x7, x7, x8
            if (op & 16) {                      /* distance base */
    9602e810:	36201603 	tbz	w3, #4, 9602ead0 <inflate_fast+0x440>
                op &= 15;                       /* number of extra bits */
    9602e814:	12000c63 	and	w3, w3, #0xf
                if (bits < op) {
    9602e818:	6b03009f 	cmp	w4, w3
    9602e81c:	54000122 	b.cs	9602e840 <inflate_fast+0x1b0>  // b.hs, b.nlast
                    hold += (unsigned long)(PUP(in)) << bits;
    9602e820:	394004a8 	ldrb	w8, [x5, #1]
                    bits += 8;
    9602e824:	11002098 	add	w24, w4, #0x8
                    if (bits < op) {
    9602e828:	6b18007f 	cmp	w3, w24
                    hold += (unsigned long)(PUP(in)) << bits;
    9602e82c:	9ac42108 	lsl	x8, x8, x4
    9602e830:	8b0800e7 	add	x7, x7, x8
                    if (bits < op) {
    9602e834:	540006e8 	b.hi	9602e910 <inflate_fast+0x280>  // b.pmore
                    hold += (unsigned long)(PUP(in)) << bits;
    9602e838:	910004a5 	add	x5, x5, #0x1
    9602e83c:	2a1803e4 	mov	w4, w24
                dist += (unsigned)hold & ((1U << op) - 1);
    9602e840:	1ac32288 	lsl	w8, w20, w3
    9602e844:	0a2800e8 	bic	w8, w7, w8
    9602e848:	0b170108 	add	w8, w8, w23
                hold >>= op;
    9602e84c:	9ac324e7 	lsr	x7, x7, x3
                bits -= op;
    9602e850:	4b030084 	sub	w4, w4, w3
                op = (unsigned)(out - beg);     /* max distance in output */
    9602e854:	cb010043 	sub	x3, x2, x1
                if (dist > op) {                /* see if copy from window */
    9602e858:	6b03011f 	cmp	w8, w3
    9602e85c:	540010a9 	b.ls	9602ea70 <inflate_fast+0x3e0>  // b.plast
                    op = dist - op;             /* distance back in window */
    9602e860:	4b030103 	sub	w3, w8, w3
                    if (op > whave) {
    9602e864:	6b0302bf 	cmp	w21, w3
    9602e868:	54000602 	b.cs	9602e928 <inflate_fast+0x298>  // b.hs, b.nlast
                        if (state->sane) {
    9602e86c:	b95be137 	ldr	w23, [x9, #7136]
    9602e870:	340005d7 	cbz	w23, 9602e928 <inflate_fast+0x298>
                            strm->msg =
    9602e874:	f00000a1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602e878:	912da821 	add	x1, x1, #0xb6a
                strm->msg = (char *)"invalid distance code";
    9602e87c:	f9001801 	str	x1, [x0, #48]
                state->mode = BAD;
    9602e880:	528003a1 	mov	w1, #0x1d                  	// #29
    9602e884:	b9000121 	str	w1, [x9]

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    in -= len;
    9602e888:	53037c81 	lsr	w1, w4, #3
    9602e88c:	12000884 	and	w4, w4, #0x7
    9602e890:	cb0100a5 	sub	x5, x5, x1
    bits -= len << 3;
    hold &= (1U << bits) - 1;
    9602e894:	52800021 	mov	w1, #0x1                   	// #1
    9602e898:	1ac42021 	lsl	w1, w1, w4
    9602e89c:	51000421 	sub	w1, w1, #0x1
    9602e8a0:	8a070027 	and	x7, x1, x7

    /* update state and return */
    strm->next_in = in + OFF;
    9602e8a4:	910004a1 	add	x1, x5, #0x1
    9602e8a8:	f9000001 	str	x1, [x0]
    strm->next_out = out + OFF;
    9602e8ac:	91000441 	add	x1, x2, #0x1
    9602e8b0:	f9000c01 	str	x1, [x0, #24]
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    9602e8b4:	cb050161 	sub	x1, x11, x5
    9602e8b8:	11001423 	add	w3, w1, #0x5
    9602e8bc:	4b050161 	sub	w1, w11, w5
    9602e8c0:	eb05017f 	cmp	x11, x5
    9602e8c4:	11001421 	add	w1, w1, #0x5
    9602e8c8:	1a839021 	csel	w1, w1, w3, ls  // ls = plast
    9602e8cc:	b9000801 	str	w1, [x0, #8]
    strm->avail_out = (unsigned)(out < end ?
    9602e8d0:	cb020141 	sub	x1, x10, x2
    9602e8d4:	eb0a005f 	cmp	x2, x10
    9602e8d8:	11040423 	add	w3, w1, #0x101
    9602e8dc:	4b020141 	sub	w1, w10, w2
    9602e8e0:	11040421 	add	w1, w1, #0x101
                                 257 + (end - out) : 257 - (out - end));
    state->hold = hold;
    state->bits = bits;
    return;
}
    9602e8e4:	f9402bfb 	ldr	x27, [sp, #80]
    strm->avail_out = (unsigned)(out < end ?
    9602e8e8:	1a832021 	csel	w1, w1, w3, cs  // cs = hs, nlast
    9602e8ec:	b9002001 	str	w1, [x0, #32]
}
    9602e8f0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602e8f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602e8f8:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602e8fc:	a9446bf9 	ldp	x25, x26, [sp, #64]
    state->hold = hold;
    9602e900:	f9002527 	str	x7, [x9, #72]
    state->bits = bits;
    9602e904:	b9005124 	str	w4, [x9, #80]
}
    9602e908:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9602e90c:	d65f03c0 	ret
                        hold += (unsigned long)(PUP(in)) << bits;
    9602e910:	394008a8 	ldrb	w8, [x5, #2]
                        bits += 8;
    9602e914:	11004084 	add	w4, w4, #0x10
                        hold += (unsigned long)(PUP(in)) << bits;
    9602e918:	910008a5 	add	x5, x5, #0x2
    9602e91c:	9ad82108 	lsl	x8, x8, x24
    9602e920:	8b0800e7 	add	x7, x7, x8
    9602e924:	17ffffc7 	b	9602e840 <inflate_fast+0x1b0>
                    from = window - OFF;
    9602e928:	d1000677 	sub	x23, x19, #0x1
                    if (wnext == 0) {           /* very common case */
    9602e92c:	3500022c 	cbnz	w12, 9602e970 <inflate_fast+0x2e0>
                        from += wsize - op;
    9602e930:	4b0303d8 	sub	w24, w30, w3
                        if (op < len) {         /* some from window */
    9602e934:	6b0300df 	cmp	w6, w3
                        from += wsize - op;
    9602e938:	8b1802f7 	add	x23, x23, x24
                        if (op < len) {         /* some from window */
    9602e93c:	54000569 	b.ls	9602e9e8 <inflate_fast+0x358>  // b.plast
                            len -= op;
    9602e940:	4b0300c6 	sub	w6, w6, w3
    9602e944:	51000463 	sub	w3, w3, #0x1
    9602e948:	91000879 	add	x25, x3, #0x2
    9602e94c:	d2800038 	mov	x24, #0x1                   	// #1
                                PUP(out) = PUP(from);
    9602e950:	38786afa 	ldrb	w26, [x23, x24]
    9602e954:	3838685a 	strb	w26, [x2, x24]
    9602e958:	91000718 	add	x24, x24, #0x1
                            } while (--op);
    9602e95c:	eb18033f 	cmp	x25, x24
    9602e960:	54ffff81 	b.ne	9602e950 <inflate_fast+0x2c0>  // b.any
    9602e964:	91000463 	add	x3, x3, #0x1
    9602e968:	8b030042 	add	x2, x2, x3
    9602e96c:	1400001e 	b	9602e9e4 <inflate_fast+0x354>
                    else if (wnext < op) {      /* wrap around window */
    9602e970:	6b03019f 	cmp	w12, w3
    9602e974:	54000522 	b.cs	9602ea18 <inflate_fast+0x388>  // b.hs, b.nlast
                        from += wsize + wnext - op;
    9602e978:	4b0302d9 	sub	w25, w22, w3
                        op -= wnext;
    9602e97c:	4b0c0063 	sub	w3, w3, w12
                        from += wsize + wnext - op;
    9602e980:	8b1902f9 	add	x25, x23, x25
                        if (op < len) {         /* some from end of window */
    9602e984:	6b0300df 	cmp	w6, w3
    9602e988:	54000449 	b.ls	9602ea10 <inflate_fast+0x380>  // b.plast
                            len -= op;
    9602e98c:	4b0300c6 	sub	w6, w6, w3
    9602e990:	51000463 	sub	w3, w3, #0x1
    9602e994:	9100087a 	add	x26, x3, #0x2
    9602e998:	d2800038 	mov	x24, #0x1                   	// #1
                                PUP(out) = PUP(from);
    9602e99c:	38786b3b 	ldrb	w27, [x25, x24]
    9602e9a0:	3838685b 	strb	w27, [x2, x24]
    9602e9a4:	91000718 	add	x24, x24, #0x1
                            } while (--op);
    9602e9a8:	eb18035f 	cmp	x26, x24
    9602e9ac:	54ffff81 	b.ne	9602e99c <inflate_fast+0x30c>  // b.any
    9602e9b0:	91000463 	add	x3, x3, #0x1
                            if (wnext < len) {  /* some from start of window */
    9602e9b4:	6b06019f 	cmp	w12, w6
    9602e9b8:	8b030042 	add	x2, x2, x3
    9602e9bc:	54000162 	b.cs	9602e9e8 <inflate_fast+0x358>  // b.hs, b.nlast
                                len -= op;
    9602e9c0:	4b0c00c6 	sub	w6, w6, w12
    9602e9c4:	d2800003 	mov	x3, #0x0                   	// #0
                                    PUP(out) = PUP(from);
    9602e9c8:	8b030057 	add	x23, x2, x3
    9602e9cc:	38636a78 	ldrb	w24, [x19, x3]
    9602e9d0:	91000463 	add	x3, x3, #0x1
                                } while (--op);
    9602e9d4:	eb03025f 	cmp	x18, x3
                                    PUP(out) = PUP(from);
    9602e9d8:	390006f8 	strb	w24, [x23, #1]
                                } while (--op);
    9602e9dc:	54ffff61 	b.ne	9602e9c8 <inflate_fast+0x338>  // b.any
    9602e9e0:	8b120042 	add	x2, x2, x18
                                from = out - dist;      /* rest from output */
    9602e9e4:	cb284057 	sub	x23, x2, w8, uxtw
                    while (len > 2) {
    9602e9e8:	710008df 	cmp	w6, #0x2
    9602e9ec:	54000328 	b.hi	9602ea50 <inflate_fast+0x3c0>  // b.pmore
                    if (len) {
    9602e9f0:	34ffec26 	cbz	w6, 9602e774 <inflate_fast+0xe4>
                        PUP(out) = PUP(from);
    9602e9f4:	394006e3 	ldrb	w3, [x23, #1]
    9602e9f8:	39000443 	strb	w3, [x2, #1]
                        if (len > 1)
    9602e9fc:	54ffeba1 	b.ne	9602e770 <inflate_fast+0xe0>  // b.any
                            PUP(out) = PUP(from);
    9602ea00:	39400ae3 	ldrb	w3, [x23, #2]
    9602ea04:	91000842 	add	x2, x2, #0x2
    9602ea08:	39000043 	strb	w3, [x2]
    9602ea0c:	17ffff5a 	b	9602e774 <inflate_fast+0xe4>
                        from += wsize + wnext - op;
    9602ea10:	aa1903f7 	mov	x23, x25
    9602ea14:	17fffff5 	b	9602e9e8 <inflate_fast+0x358>
                        from += wnext - op;
    9602ea18:	4b030198 	sub	w24, w12, w3
                        if (op < len) {         /* some from window */
    9602ea1c:	6b0300df 	cmp	w6, w3
                        from += wnext - op;
    9602ea20:	8b1802f7 	add	x23, x23, x24
                        if (op < len) {         /* some from window */
    9602ea24:	54fffe29 	b.ls	9602e9e8 <inflate_fast+0x358>  // b.plast
                            len -= op;
    9602ea28:	4b0300c6 	sub	w6, w6, w3
    9602ea2c:	51000463 	sub	w3, w3, #0x1
    9602ea30:	91000879 	add	x25, x3, #0x2
    9602ea34:	d2800038 	mov	x24, #0x1                   	// #1
                                PUP(out) = PUP(from);
    9602ea38:	38786afa 	ldrb	w26, [x23, x24]
    9602ea3c:	3838685a 	strb	w26, [x2, x24]
    9602ea40:	91000718 	add	x24, x24, #0x1
                            } while (--op);
    9602ea44:	eb18033f 	cmp	x25, x24
    9602ea48:	54ffff81 	b.ne	9602ea38 <inflate_fast+0x3a8>  // b.any
    9602ea4c:	17ffffc6 	b	9602e964 <inflate_fast+0x2d4>
                        PUP(out) = PUP(from);
    9602ea50:	394006e3 	ldrb	w3, [x23, #1]
                        len -= 3;
    9602ea54:	51000cc6 	sub	w6, w6, #0x3
                        PUP(out) = PUP(from);
    9602ea58:	39000443 	strb	w3, [x2, #1]
                        PUP(out) = PUP(from);
    9602ea5c:	39400ae3 	ldrb	w3, [x23, #2]
    9602ea60:	39000843 	strb	w3, [x2, #2]
                        PUP(out) = PUP(from);
    9602ea64:	38403ee3 	ldrb	w3, [x23, #3]!
    9602ea68:	38003c43 	strb	w3, [x2, #3]!
    9602ea6c:	17ffffdf 	b	9602e9e8 <inflate_fast+0x358>
                    from = out - dist;          /* copy direct from output */
    9602ea70:	cb284048 	sub	x8, x2, w8, uxtw
                        PUP(out) = PUP(from);
    9602ea74:	39400517 	ldrb	w23, [x8, #1]
    9602ea78:	aa0203e3 	mov	x3, x2
    9602ea7c:	39000457 	strb	w23, [x2, #1]
                        len -= 3;
    9602ea80:	51000cc6 	sub	w6, w6, #0x3
    9602ea84:	91000d18 	add	x24, x8, #0x3
                    } while (len > 2);
    9602ea88:	710008df 	cmp	w6, #0x2
                        PUP(out) = PUP(from);
    9602ea8c:	39400917 	ldrb	w23, [x8, #2]
    9602ea90:	39000857 	strb	w23, [x2, #2]
                        PUP(out) = PUP(from);
    9602ea94:	39400d17 	ldrb	w23, [x8, #3]
    9602ea98:	38003c57 	strb	w23, [x2, #3]!
                    } while (len > 2);
    9602ea9c:	540000e8 	b.hi	9602eab8 <inflate_fast+0x428>  // b.pmore
                    if (len) {
    9602eaa0:	34ffe6a6 	cbz	w6, 9602e774 <inflate_fast+0xe4>
                        PUP(out) = PUP(from);
    9602eaa4:	39401102 	ldrb	w2, [x8, #4]
    9602eaa8:	39001062 	strb	w2, [x3, #4]
                        if (len > 1)
    9602eaac:	540000a0 	b.eq	9602eac0 <inflate_fast+0x430>  // b.none
                        PUP(out) = PUP(from);
    9602eab0:	91001062 	add	x2, x3, #0x4
    9602eab4:	17ffff30 	b	9602e774 <inflate_fast+0xe4>
    9602eab8:	aa1803e8 	mov	x8, x24
    9602eabc:	17ffffee 	b	9602ea74 <inflate_fast+0x3e4>
                            PUP(out) = PUP(from);
    9602eac0:	39401506 	ldrb	w6, [x8, #5]
    9602eac4:	91001462 	add	x2, x3, #0x5
    9602eac8:	39001466 	strb	w6, [x3, #5]
    9602eacc:	17ffff2a 	b	9602e774 <inflate_fast+0xe4>
            else if ((op & 64) == 0) {          /* 2nd level distance code */
    9602ead0:	37300123 	tbnz	w3, #6, 9602eaf4 <inflate_fast+0x464>
                here = dcode[here.val + (hold & ((1U << op) - 1))];
    9602ead4:	1ac321a8 	lsl	w8, w13, w3
    9602ead8:	51000508 	sub	w8, w8, #0x1
    9602eadc:	8a070108 	and	x8, x8, x7
    9602eae0:	8b372108 	add	x8, x8, w23, uxth
    9602eae4:	d37ef508 	lsl	x8, x8, #2
    9602eae8:	8b080237 	add	x23, x17, x8
    9602eaec:	38686a23 	ldrb	w3, [x17, x8]
    9602eaf0:	17ffff44 	b	9602e800 <inflate_fast+0x170>
                strm->msg = (char *)"invalid distance code";
    9602eaf4:	f00000a1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602eaf8:	912e2021 	add	x1, x1, #0xb88
    9602eafc:	17ffff60 	b	9602e87c <inflate_fast+0x1ec>
        else if ((op & 64) == 0) {              /* 2nd level length code */
    9602eb00:	373000c3 	tbnz	w3, #6, 9602eb18 <inflate_fast+0x488>
            here = lcode[here.val + (hold & ((1U << op) - 1))];
    9602eb04:	1ac321a3 	lsl	w3, w13, w3
    9602eb08:	51000463 	sub	w3, w3, #0x1
    9602eb0c:	8a070063 	and	x3, x3, x7
    9602eb10:	8b282063 	add	x3, x3, w8, uxth
    9602eb14:	17ffff0e 	b	9602e74c <inflate_fast+0xbc>
        else if (op & 32) {                     /* end-of-block */
    9602eb18:	36280063 	tbz	w3, #5, 9602eb24 <inflate_fast+0x494>
            state->mode = TYPE;
    9602eb1c:	52800161 	mov	w1, #0xb                   	// #11
    9602eb20:	17ffff59 	b	9602e884 <inflate_fast+0x1f4>
            strm->msg = (char *)"invalid literal/length code";
    9602eb24:	f00000a1 	adrp	x1, 96045000 <__func__.3796+0x7>
    9602eb28:	912e7821 	add	x1, x1, #0xb9e
    9602eb2c:	17ffff54 	b	9602e87c <inflate_fast+0x1ec>

000000009602eb30 <inflate_table>:
unsigned short FAR *lens;
unsigned codes;
code FAR * FAR *table;
unsigned FAR *bits;
unsigned short FAR *work;
{
    9602eb30:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
    9602eb34:	d2800006 	mov	x6, #0x0                   	// #0
    9602eb38:	910003fd 	mov	x29, sp
    9602eb3c:	a90153f3 	stp	x19, x20, [sp, #16]
    9602eb40:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602eb44:	a90363f7 	stp	x23, x24, [sp, #48]
    9602eb48:	a9046bf9 	stp	x25, x26, [sp, #64]
    9602eb4c:	a90573fb 	stp	x27, x28, [sp, #80]
       decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    9602eb50:	9101c3a7 	add	x7, x29, #0x70
    9602eb54:	782678ff 	strh	wzr, [x7, x6, lsl #1]
    9602eb58:	910004c6 	add	x6, x6, #0x1
    for (len = 0; len <= MAXBITS; len++)
    9602eb5c:	f10040df 	cmp	x6, #0x10
    9602eb60:	54ffff81 	b.ne	9602eb50 <inflate_table+0x20>  // b.any
    9602eb64:	d2800006 	mov	x6, #0x0                   	// #0
    for (sym = 0; sym < codes; sym++)
    9602eb68:	6b06005f 	cmp	w2, w6
    9602eb6c:	54000248 	b.hi	9602ebb4 <inflate_table+0x84>  // b.pmore
    9602eb70:	91023ba7 	add	x7, x29, #0x8e
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
    9602eb74:	528001e6 	mov	w6, #0xf                   	// #15
        if (count[max] != 0) break;
    9602eb78:	794000e8 	ldrh	w8, [x7]
    9602eb7c:	350002e8 	cbnz	w8, 9602ebd8 <inflate_table+0xa8>
    9602eb80:	d10008e7 	sub	x7, x7, #0x2
    for (max = MAXBITS; max >= 1; max--)
    9602eb84:	710004c6 	subs	w6, w6, #0x1
    9602eb88:	54ffff81 	b.ne	9602eb78 <inflate_table+0x48>  // b.any
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        here.op = (unsigned char)64;    /* invalid code marker */
        here.bits = (unsigned char)1;
        here.val = (unsigned short)0;
        *(*table)++ = here;             /* make a table to force an error */
    9602eb8c:	f9400061 	ldr	x1, [x3]
    9602eb90:	52802802 	mov	w2, #0x140                 	// #320
    9602eb94:	aa0103e0 	mov	x0, x1
    9602eb98:	b8008402 	str	w2, [x0], #8
        *(*table)++ = here;
    9602eb9c:	f9000060 	str	x0, [x3]
        *bits = 1;
    9602eba0:	52800020 	mov	w0, #0x1                   	// #1
        *(*table)++ = here;
    9602eba4:	b9000422 	str	w2, [x1, #4]
        *bits = 1;
    9602eba8:	b9000080 	str	w0, [x4]
    }

    /* set return parameters */
    *table += used;
    *bits = root;
    return 0;
    9602ebac:	52800000 	mov	w0, #0x0                   	// #0
    9602ebb0:	14000047 	b	9602eccc <inflate_table+0x19c>
        count[lens[sym]]++;
    9602ebb4:	78667827 	ldrh	w7, [x1, x6, lsl #1]
    9602ebb8:	9101c3a8 	add	x8, x29, #0x70
    9602ebbc:	9101c3a9 	add	x9, x29, #0x70
    9602ebc0:	910004c6 	add	x6, x6, #0x1
    9602ebc4:	d37ff8e7 	lsl	x7, x7, #1
    9602ebc8:	78676908 	ldrh	w8, [x8, x7]
    9602ebcc:	11000508 	add	w8, w8, #0x1
    9602ebd0:	78276928 	strh	w8, [x9, x7]
    9602ebd4:	17ffffe5 	b	9602eb68 <inflate_table+0x38>
    9602ebd8:	d2800028 	mov	x8, #0x1                   	// #1
    9602ebdc:	2a0803e7 	mov	w7, w8
    for (min = 1; min < max; min++)
    9602ebe0:	6b06011f 	cmp	w8, w6
    9602ebe4:	540000c2 	b.cs	9602ebfc <inflate_table+0xcc>  // b.hs, b.nlast
    9602ebe8:	91000508 	add	x8, x8, #0x1
        if (count[min] != 0) break;
    9602ebec:	9101c3a9 	add	x9, x29, #0x70
    9602ebf0:	8b080529 	add	x9, x9, x8, lsl #1
    9602ebf4:	785fe129 	ldurh	w9, [x9, #-2]
    9602ebf8:	34ffff29 	cbz	w9, 9602ebdc <inflate_table+0xac>
    9602ebfc:	d2800029 	mov	x9, #0x1                   	// #1
    9602ec00:	2a0903e8 	mov	w8, w9
        left -= count[len];
    9602ec04:	9101c3aa 	add	x10, x29, #0x70
        left <<= 1;
    9602ec08:	531f7908 	lsl	w8, w8, #1
        left -= count[len];
    9602ec0c:	7869794a 	ldrh	w10, [x10, x9, lsl #1]
        if (left < 0) return -1;        /* over-subscribed */
    9602ec10:	6b0a0108 	subs	w8, w8, w10
    9602ec14:	54001aa4 	b.mi	9602ef68 <inflate_table+0x438>  // b.first
    9602ec18:	91000529 	add	x9, x9, #0x1
    for (len = 1; len <= MAXBITS; len++) {
    9602ec1c:	f100413f 	cmp	x9, #0x10
    9602ec20:	54ffff21 	b.ne	9602ec04 <inflate_table+0xd4>  // b.any
    if (left > 0 && (type == CODES || max != 1))
    9602ec24:	34000088 	cbz	w8, 9602ec34 <inflate_table+0x104>
    9602ec28:	7100001f 	cmp	w0, #0x0
    9602ec2c:	7a4118c0 	ccmp	w6, #0x1, #0x0, ne  // ne = any
    9602ec30:	540019c1 	b.ne	9602ef68 <inflate_table+0x438>  // b.any
    root = *bits;
    9602ec34:	b940008b 	ldr	w11, [x4]
        offs[len + 1] = offs[len] + count[len];
    9602ec38:	910243aa 	add	x10, x29, #0x90
    offs[1] = 0;
    9602ec3c:	790127bf 	strh	wzr, [x29, #146]
    9602ec40:	d2800048 	mov	x8, #0x2                   	// #2
        offs[len + 1] = offs[len] + count[len];
    9602ec44:	9101c3ad 	add	x13, x29, #0x70
    9602ec48:	8b08014c 	add	x12, x10, x8
    9602ec4c:	786a6909 	ldrh	w9, [x8, x10]
    9602ec50:	786869ad 	ldrh	w13, [x13, x8]
    9602ec54:	91000908 	add	x8, x8, #0x2
    for (len = 1; len < MAXBITS; len++)
    9602ec58:	f100791f 	cmp	x8, #0x1e
        offs[len + 1] = offs[len] + count[len];
    9602ec5c:	0b0d0129 	add	w9, w9, w13
    9602ec60:	79000589 	strh	w9, [x12, #2]
    for (len = 1; len < MAXBITS; len++)
    9602ec64:	54ffff01 	b.ne	9602ec44 <inflate_table+0x114>  // b.any
    9602ec68:	d2800008 	mov	x8, #0x0                   	// #0
    for (sym = 0; sym < codes; sym++)
    9602ec6c:	6b08005f 	cmp	w2, w8
    9602ec70:	540003c8 	b.hi	9602ece8 <inflate_table+0x1b8>  // b.pmore
    switch (type) {
    9602ec74:	340005a0 	cbz	w0, 9602ed28 <inflate_table+0x1f8>
    9602ec78:	7100041f 	cmp	w0, #0x1
    9602ec7c:	540004a1 	b.ne	9602ed10 <inflate_table+0x1e0>  // b.any
        extra -= 257;
    9602ec80:	f00000aa 	adrp	x10, 96045000 <__func__.3796+0x7>
        base -= 257;
    9602ec84:	f00000a9 	adrp	x9, 96045000 <__func__.3796+0x7>
        extra -= 257;
    9602ec88:	9131e14a 	add	x10, x10, #0xc78
        base -= 257;
    9602ec8c:	9130e929 	add	x9, x9, #0xc3a
        extra -= 257;
    9602ec90:	d108094a 	sub	x10, x10, #0x202
        base -= 257;
    9602ec94:	d1080929 	sub	x9, x9, #0x202
        end = 256;
    9602ec98:	52802016 	mov	w22, #0x100                 	// #256
    9602ec9c:	6b06017f 	cmp	w11, w6
    used = 1U << root;          /* use root table entries */
    9602eca0:	5280002c 	mov	w12, #0x1                   	// #1
    9602eca4:	1a869162 	csel	w2, w11, w6, ls  // ls = plast
    9602eca8:	6b0200ff 	cmp	w7, w2
    9602ecac:	1a8220e2 	csel	w2, w7, w2, cs  // cs = hs, nlast
    if ((type == LENS && used >= ENOUGH_LENS) ||
    9602ecb0:	6b0c001f 	cmp	w0, w12
    9602ecb4:	1a9f17f9 	cset	w25, eq  // eq = none
    used = 1U << root;          /* use root table entries */
    9602ecb8:	1ac22188 	lsl	w8, w12, w2
    if ((type == LENS && used >= ENOUGH_LENS) ||
    9602ecbc:	710d4d1f 	cmp	w8, #0x353
    9602ecc0:	7a408b24 	ccmp	w25, #0x0, #0x4, hi  // hi = pmore
    9602ecc4:	540003a0 	b.eq	9602ed38 <inflate_table+0x208>  // b.none
        return 1;
    9602ecc8:	52800020 	mov	w0, #0x1                   	// #1
}
    9602eccc:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602ecd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602ecd4:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602ecd8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9602ecdc:	a94573fb 	ldp	x27, x28, [sp, #80]
    9602ece0:	a8cb7bfd 	ldp	x29, x30, [sp], #176
    9602ece4:	d65f03c0 	ret
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
    9602ece8:	78687829 	ldrh	w9, [x1, x8, lsl #1]
    9602ecec:	340000e9 	cbz	w9, 9602ed08 <inflate_table+0x1d8>
    9602ecf0:	937f7d29 	sbfiz	x9, x9, #1, #32
    9602ecf4:	7869694c 	ldrh	w12, [x10, x9]
    9602ecf8:	1100058d 	add	w13, w12, #0x1
    9602ecfc:	7829694d 	strh	w13, [x10, x9]
    9602ed00:	d37f3d8c 	ubfiz	x12, x12, #1, #16
    9602ed04:	782c68a8 	strh	w8, [x5, x12]
    9602ed08:	91000508 	add	x8, x8, #0x1
    9602ed0c:	17ffffd8 	b	9602ec6c <inflate_table+0x13c>
        extra = dext;
    9602ed10:	f00000aa 	adrp	x10, 96045000 <__func__.3796+0x7>
        base = dbase;
    9602ed14:	f00000a9 	adrp	x9, 96045000 <__func__.3796+0x7>
        end = -1;
    9602ed18:	12800016 	mov	w22, #0xffffffff            	// #-1
        extra = dext;
    9602ed1c:	912fe94a 	add	x10, x10, #0xbfa
        base = dbase;
    9602ed20:	912ee929 	add	x9, x9, #0xbba
    9602ed24:	17ffffde 	b	9602ec9c <inflate_table+0x16c>
        base = extra = work;    /* dummy value--not used */
    9602ed28:	aa0503ea 	mov	x10, x5
    9602ed2c:	aa0503e9 	mov	x9, x5
        end = 19;
    9602ed30:	52800276 	mov	w22, #0x13                  	// #19
    9602ed34:	17ffffda 	b	9602ec9c <inflate_table+0x16c>
        (type == DISTS && used >= ENOUGH_DISTS))
    9602ed38:	7100081f 	cmp	w0, #0x2
    9602ed3c:	1a9f17fa 	cset	w26, eq  // eq = none
    9602ed40:	71093d1f 	cmp	w8, #0x24f
    if ((type == LENS && used >= ENOUGH_LENS) ||
    9602ed44:	7a408b44 	ccmp	w26, #0x0, #0x4, hi  // hi = pmore
    9602ed48:	54fffc01 	b.ne	9602ecc8 <inflate_table+0x198>  // b.any
    next = *table;              /* current table to fill in */
    9602ed4c:	f940006e 	ldr	x14, [x3]
    mask = used - 1;            /* mask for comparing low */
    9602ed50:	51000518 	sub	w24, w8, #0x1
    9602ed54:	2a0203ef 	mov	w15, w2
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    9602ed58:	12800014 	mov	w20, #0xffffffff            	// #-1
    next = *table;              /* current table to fill in */
    9602ed5c:	aa0e03eb 	mov	x11, x14
    huff = 0;                   /* starting code */
    9602ed60:	52800011 	mov	w17, #0x0                   	// #0
    drop = 0;                   /* current bits to drop from code for index */
    9602ed64:	52800000 	mov	w0, #0x0                   	// #0
    sym = 0;                    /* starting code symbol */
    9602ed68:	52800010 	mov	w16, #0x0                   	// #0
        if ((int)(work[sym]) < end) {
    9602ed6c:	787058ad 	ldrh	w13, [x5, w16, uxtw #1]
        here.bits = (unsigned char)(len - drop);
    9602ed70:	4b0000f3 	sub	w19, w7, w0
    9602ed74:	12001e75 	and	w21, w19, #0xff
        if ((int)(work[sym]) < end) {
    9602ed78:	6b1601bf 	cmp	w13, w22
    9602ed7c:	540005cb 	b.lt	9602ee34 <inflate_table+0x304>  // b.tstop
        else if ((int)(work[sym]) > end) {
    9602ed80:	540005ed 	b.le	9602ee3c <inflate_table+0x30c>
            here.op = (unsigned char)(extra[work[sym]]);
    9602ed84:	d37f3dad 	ubfiz	x13, x13, #1, #16
    9602ed88:	386d6957 	ldrb	w23, [x10, x13]
            here.val = base[work[sym]];
    9602ed8c:	786d692d 	ldrh	w13, [x9, x13]
            next[(huff >> drop) + fill] = here;
    9602ed90:	1ac02632 	lsr	w18, w17, w0
    9602ed94:	b9006fb2 	str	w18, [x29, #108]
        fill = 1U << curr;
    9602ed98:	1acf219b 	lsl	w27, w12, w15
    9602ed9c:	2a1b03f2 	mov	w18, w27
        incr = 1U << (len - drop);
    9602eda0:	1ad32193 	lsl	w19, w12, w19
            next[(huff >> drop) + fill] = here;
    9602eda4:	b9406fbc 	ldr	w28, [x29, #108]
            fill -= incr;
    9602eda8:	4b130252 	sub	w18, w18, w19
            next[(huff >> drop) + fill] = here;
    9602edac:	0b12039e 	add	w30, w28, w18
    9602edb0:	d37ef7de 	lsl	x30, x30, #2
    9602edb4:	8b1e017c 	add	x28, x11, x30
    9602edb8:	383e6977 	strb	w23, [x11, x30]
    9602edbc:	39000795 	strb	w21, [x28, #1]
    9602edc0:	7900078d 	strh	w13, [x28, #2]
        } while (fill != 0);
    9602edc4:	35ffff12 	cbnz	w18, 9602eda4 <inflate_table+0x274>
        incr = 1U << (len - 1);
    9602edc8:	510004ed 	sub	w13, w7, #0x1
    9602edcc:	1acd218d 	lsl	w13, w12, w13
        while (huff & incr)
    9602edd0:	6a0d023f 	tst	w17, w13
    9602edd4:	540003a1 	b.ne	9602ee48 <inflate_table+0x318>  // b.any
        if (incr != 0) {
    9602edd8:	3400008d 	cbz	w13, 9602ede8 <inflate_table+0x2b8>
            huff &= incr - 1;
    9602eddc:	510005b2 	sub	w18, w13, #0x1
    9602ede0:	0a110251 	and	w17, w18, w17
            huff += incr;
    9602ede4:	0b1101ad 	add	w13, w13, w17
        if (--(count[len]) == 0) {
    9602ede8:	d37f7cf2 	ubfiz	x18, x7, #1, #32
    9602edec:	9101c3b1 	add	x17, x29, #0x70
    9602edf0:	9101c3b3 	add	x19, x29, #0x70
        sym++;
    9602edf4:	11000610 	add	w16, w16, #0x1
        if (--(count[len]) == 0) {
    9602edf8:	78726a31 	ldrh	w17, [x17, x18]
    9602edfc:	51000631 	sub	w17, w17, #0x1
    9602ee00:	12003e31 	and	w17, w17, #0xffff
    9602ee04:	78326a71 	strh	w17, [x19, x18]
    9602ee08:	35000291 	cbnz	w17, 9602ee58 <inflate_table+0x328>
            if (len == max) break;
    9602ee0c:	6b0600ff 	cmp	w7, w6
    9602ee10:	54000201 	b.ne	9602ee50 <inflate_table+0x320>  // b.any
            here.bits = (unsigned char)len;
    9602ee14:	12001c47 	and	w7, w2, #0xff
        next[huff >> drop] = here;
    9602ee18:	52800809 	mov	w9, #0x40                  	// #64
        incr = 1U << (len - 1);
    9602ee1c:	5280002a 	mov	w10, #0x1                   	// #1
    while (huff != 0) {
    9602ee20:	3500070d 	cbnz	w13, 9602ef00 <inflate_table+0x3d0>
    *table += used;
    9602ee24:	8b2849c8 	add	x8, x14, w8, uxtw #2
    9602ee28:	f9000068 	str	x8, [x3]
    *bits = root;
    9602ee2c:	b9000082 	str	w2, [x4]
    9602ee30:	17ffff5f 	b	9602ebac <inflate_table+0x7c>
            here.op = (unsigned char)0;
    9602ee34:	52800017 	mov	w23, #0x0                   	// #0
    9602ee38:	17ffffd6 	b	9602ed90 <inflate_table+0x260>
            here.val = 0;
    9602ee3c:	5280000d 	mov	w13, #0x0                   	// #0
            here.op = (unsigned char)(32 + 64);         /* end of block */
    9602ee40:	52800c17 	mov	w23, #0x60                  	// #96
    9602ee44:	17ffffd3 	b	9602ed90 <inflate_table+0x260>
            incr >>= 1;
    9602ee48:	53017dad 	lsr	w13, w13, #1
    9602ee4c:	17ffffe1 	b	9602edd0 <inflate_table+0x2a0>
            len = lens[work[sym]];
    9602ee50:	787058a7 	ldrh	w7, [x5, w16, uxtw #1]
    9602ee54:	78677827 	ldrh	w7, [x1, x7, lsl #1]
        if (len > root && (huff & mask) != low) {
    9602ee58:	6b0200ff 	cmp	w7, w2
    9602ee5c:	540004a9 	b.ls	9602eef0 <inflate_table+0x3c0>  // b.plast
    9602ee60:	0a1801b3 	and	w19, w13, w24
    9602ee64:	6b14027f 	cmp	w19, w20
    9602ee68:	54000440 	b.eq	9602eef0 <inflate_table+0x3c0>  // b.none
            if (drop == 0)
    9602ee6c:	7100001f 	cmp	w0, #0x0
    9602ee70:	9101c3af 	add	x15, x29, #0x70
    9602ee74:	1a821000 	csel	w0, w0, w2, ne  // ne = any
            next += min;            /* here min is 1 << curr */
    9602ee78:	8b3b496b 	add	x11, x11, w27, uxtw #2
            curr = len - drop;
    9602ee7c:	4b0000f4 	sub	w20, w7, w0
    9602ee80:	8b2745f7 	add	x23, x15, w7, uxtw #1
            while (curr + drop < max) {
    9602ee84:	d2800011 	mov	x17, #0x0                   	// #0
            left = (int)(1 << curr);
    9602ee88:	1ad42192 	lsl	w18, w12, w20
            while (curr + drop < max) {
    9602ee8c:	0b1100f5 	add	w21, w7, w17
    9602ee90:	0b11028f 	add	w15, w20, w17
    9602ee94:	6b0602bf 	cmp	w21, w6
    9602ee98:	540000c2 	b.cs	9602eeb0 <inflate_table+0x380>  // b.hs, b.nlast
                left -= count[curr + drop];
    9602ee9c:	78717af5 	ldrh	w21, [x23, x17, lsl #1]
    9602eea0:	91000631 	add	x17, x17, #0x1
    9602eea4:	4b150252 	sub	w18, w18, w21
                if (left <= 0) break;
    9602eea8:	7100025f 	cmp	w18, #0x0
    9602eeac:	5400026c 	b.gt	9602eef8 <inflate_table+0x3c8>
            used += 1U << curr;
    9602eeb0:	1acf2191 	lsl	w17, w12, w15
    9602eeb4:	0b110108 	add	w8, w8, w17
            if ((type == LENS && used >= ENOUGH_LENS) ||
    9602eeb8:	710d4d1f 	cmp	w8, #0x353
    9602eebc:	7a408b24 	ccmp	w25, #0x0, #0x4, hi  // hi = pmore
    9602eec0:	54fff041 	b.ne	9602ecc8 <inflate_table+0x198>  // b.any
                (type == DISTS && used >= ENOUGH_DISTS))
    9602eec4:	71093d1f 	cmp	w8, #0x24f
            if ((type == LENS && used >= ENOUGH_LENS) ||
    9602eec8:	7a408b44 	ccmp	w26, #0x0, #0x4, hi  // hi = pmore
    9602eecc:	54ffefe1 	b.ne	9602ecc8 <inflate_table+0x198>  // b.any
            (*table)[low].op = (unsigned char)curr;
    9602eed0:	d37e7e71 	ubfiz	x17, x19, #2, #32
            (*table)[low].val = (unsigned short)(next - *table);
    9602eed4:	2a1303f4 	mov	w20, w19
            (*table)[low].op = (unsigned char)curr;
    9602eed8:	8b1101d2 	add	x18, x14, x17
    9602eedc:	383169cf 	strb	w15, [x14, x17]
            (*table)[low].val = (unsigned short)(next - *table);
    9602eee0:	cb0e0171 	sub	x17, x11, x14
            (*table)[low].bits = (unsigned char)root;
    9602eee4:	39000642 	strb	w2, [x18, #1]
            (*table)[low].val = (unsigned short)(next - *table);
    9602eee8:	9342fe31 	asr	x17, x17, #2
    9602eeec:	79000651 	strh	w17, [x18, #2]
    9602eef0:	2a0d03f1 	mov	w17, w13
    9602eef4:	17ffff9e 	b	9602ed6c <inflate_table+0x23c>
                left <<= 1;
    9602eef8:	531f7a52 	lsl	w18, w18, #1
    9602eefc:	17ffffe4 	b	9602ee8c <inflate_table+0x35c>
        if (drop != 0 && (huff & mask) != low) {
    9602ef00:	34000100 	cbz	w0, 9602ef20 <inflate_table+0x3f0>
    9602ef04:	0a1801a1 	and	w1, w13, w24
    9602ef08:	6b14003f 	cmp	w1, w20
    9602ef0c:	540000a0 	b.eq	9602ef20 <inflate_table+0x3f0>  // b.none
            here.bits = (unsigned char)len;
    9602ef10:	2a0703f5 	mov	w21, w7
            next = *table;
    9602ef14:	aa0e03eb 	mov	x11, x14
            here.bits = (unsigned char)len;
    9602ef18:	2a0203e6 	mov	w6, w2
            drop = 0;
    9602ef1c:	52800000 	mov	w0, #0x0                   	// #0
        next[huff >> drop] = here;
    9602ef20:	1ac025a1 	lsr	w1, w13, w0
    9602ef24:	d37ef421 	lsl	x1, x1, #2
    9602ef28:	8b010165 	add	x5, x11, x1
    9602ef2c:	38216969 	strb	w9, [x11, x1]
        incr = 1U << (len - 1);
    9602ef30:	510004c1 	sub	w1, w6, #0x1
        next[huff >> drop] = here;
    9602ef34:	390004b5 	strb	w21, [x5, #1]
    9602ef38:	790004bf 	strh	wzr, [x5, #2]
        incr = 1U << (len - 1);
    9602ef3c:	1ac12141 	lsl	w1, w10, w1
        while (huff & incr)
    9602ef40:	6a0101bf 	tst	w13, w1
    9602ef44:	540000e1 	b.ne	9602ef60 <inflate_table+0x430>  // b.any
        if (incr != 0) {
    9602ef48:	34000081 	cbz	w1, 9602ef58 <inflate_table+0x428>
            huff &= incr - 1;
    9602ef4c:	51000425 	sub	w5, w1, #0x1
    9602ef50:	0a0d00ad 	and	w13, w5, w13
            huff += incr;
    9602ef54:	0b0d0021 	add	w1, w1, w13
            here.bits = (unsigned char)len;
    9602ef58:	2a0103ed 	mov	w13, w1
    9602ef5c:	17ffffb1 	b	9602ee20 <inflate_table+0x2f0>
            incr >>= 1;
    9602ef60:	53017c21 	lsr	w1, w1, #1
    9602ef64:	17fffff7 	b	9602ef40 <inflate_table+0x410>
        if (left < 0) return -1;        /* over-subscribed */
    9602ef68:	12800000 	mov	w0, #0xffffffff            	// #-1
    9602ef6c:	17ffff58 	b	9602eccc <inflate_table+0x19c>

000000009602ef70 <updatewindow>:
   The advantage may be dependent on the size of the processor's data caches.
 */
local int updatewindow(strm, out)
z_streamp strm;
unsigned out;
{
    9602ef70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602ef74:	910003fd 	mov	x29, sp
    9602ef78:	a90153f3 	stp	x19, x20, [sp, #16]
    struct inflate_state FAR *state;
    unsigned copy, dist;

    state = (struct inflate_state FAR *)strm->state;
    9602ef7c:	f9401c13 	ldr	x19, [x0, #56]
{
    9602ef80:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602ef84:	aa0003f6 	mov	x22, x0
    9602ef88:	2a0103f5 	mov	w21, w1

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
    9602ef8c:	f9402260 	ldr	x0, [x19, #64]
    9602ef90:	b4000240 	cbz	x0, 9602efd8 <updatewindow+0x68>
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
    }

    /* if window not in use yet, initialize */
    if (state->wsize == 0) {
    9602ef94:	b9403660 	ldr	w0, [x19, #52]
    9602ef98:	340003c0 	cbz	w0, 9602f010 <updatewindow+0xa0>
        state->wnext = 0;
        state->whave = 0;
    }

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
    9602ef9c:	b94022c0 	ldr	w0, [x22, #32]
    if (copy >= state->wsize) {
    9602efa0:	b9403662 	ldr	w2, [x19, #52]
    copy = out - strm->avail_out;
    9602efa4:	4b0002b5 	sub	w21, w21, w0
    9602efa8:	f9400ec1 	ldr	x1, [x22, #24]
    if (copy >= state->wsize) {
    9602efac:	6b15005f 	cmp	w2, w21
    9602efb0:	f9402260 	ldr	x0, [x19, #64]
    9602efb4:	540003a8 	b.hi	9602f028 <updatewindow+0xb8>  // b.pmore
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
    9602efb8:	2a0203e2 	mov	w2, w2
    9602efbc:	cb020021 	sub	x1, x1, x2
    9602efc0:	97ffebd9 	bl	96029f24 <memcpy>
        state->wnext = 0;
    9602efc4:	b9003e7f 	str	wzr, [x19, #60]
        zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);
        copy -= dist;
        if (copy) {
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->wnext = copy;
            state->whave = state->wsize;
    9602efc8:	b9403660 	ldr	w0, [x19, #52]
    9602efcc:	b9003a60 	str	w0, [x19, #56]
            state->wnext += dist;
            if (state->wnext == state->wsize) state->wnext = 0;
            if (state->whave < state->wsize) state->whave += dist;
        }
    }
    return 0;
    9602efd0:	52800000 	mov	w0, #0x0                   	// #0
    9602efd4:	1400000b 	b	9602f000 <updatewindow+0x90>
                        ZALLOC(strm, 1U << state->wbits,
    9602efd8:	f94022c3 	ldr	x3, [x22, #64]
    9602efdc:	52800034 	mov	w20, #0x1                   	// #1
    9602efe0:	f9402ac0 	ldr	x0, [x22, #80]
    9602efe4:	2a1403e2 	mov	w2, w20
    9602efe8:	b9403261 	ldr	w1, [x19, #48]
    9602efec:	1ac12281 	lsl	w1, w20, w1
    9602eff0:	d63f0060 	blr	x3
        state->window = (unsigned char FAR *)
    9602eff4:	f9002260 	str	x0, [x19, #64]
        if (state->window == Z_NULL) return 1;
    9602eff8:	b5fffce0 	cbnz	x0, 9602ef94 <updatewindow+0x24>
    9602effc:	2a1403e0 	mov	w0, w20
}
    9602f000:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602f004:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602f008:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602f00c:	d65f03c0 	ret
        state->wsize = 1U << state->wbits;
    9602f010:	b9403261 	ldr	w1, [x19, #48]
    9602f014:	52800020 	mov	w0, #0x1                   	// #1
        state->whave = 0;
    9602f018:	f9001e7f 	str	xzr, [x19, #56]
        state->wsize = 1U << state->wbits;
    9602f01c:	1ac12000 	lsl	w0, w0, w1
    9602f020:	b9003660 	str	w0, [x19, #52]
    9602f024:	17ffffde 	b	9602ef9c <updatewindow+0x2c>
        dist = state->wsize - state->wnext;
    9602f028:	b9403e63 	ldr	w3, [x19, #60]
        zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);
    9602f02c:	cb354021 	sub	x1, x1, w21, uxtw
        dist = state->wsize - state->wnext;
    9602f030:	4b030042 	sub	w2, w2, w3
    9602f034:	6b0202bf 	cmp	w21, w2
        zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);
    9602f038:	8b234000 	add	x0, x0, w3, uxtw
    9602f03c:	1a8292b4 	csel	w20, w21, w2, ls  // ls = plast
    9602f040:	2a1403e2 	mov	w2, w20
    9602f044:	97ffebb8 	bl	96029f24 <memcpy>
        if (copy) {
    9602f048:	6b1402b5 	subs	w21, w21, w20
    9602f04c:	54000100 	b.eq	9602f06c <updatewindow+0xfc>  // b.none
            zmemcpy(state->window, strm->next_out - copy, copy);
    9602f050:	f9402260 	ldr	x0, [x19, #64]
    9602f054:	2a1503e2 	mov	w2, w21
    9602f058:	f9400ec1 	ldr	x1, [x22, #24]
    9602f05c:	cb020021 	sub	x1, x1, x2
    9602f060:	97ffebb1 	bl	96029f24 <memcpy>
            state->wnext = copy;
    9602f064:	b9003e75 	str	w21, [x19, #60]
    9602f068:	17ffffd8 	b	9602efc8 <updatewindow+0x58>
            state->wnext += dist;
    9602f06c:	b9403e60 	ldr	w0, [x19, #60]
            if (state->wnext == state->wsize) state->wnext = 0;
    9602f070:	b9403661 	ldr	w1, [x19, #52]
            state->wnext += dist;
    9602f074:	0b000280 	add	w0, w20, w0
    9602f078:	b9003e60 	str	w0, [x19, #60]
            if (state->wnext == state->wsize) state->wnext = 0;
    9602f07c:	6b01001f 	cmp	w0, w1
    9602f080:	54000041 	b.ne	9602f088 <updatewindow+0x118>  // b.any
    9602f084:	b9003e7f 	str	wzr, [x19, #60]
            if (state->whave < state->wsize) state->whave += dist;
    9602f088:	b9403a60 	ldr	w0, [x19, #56]
    9602f08c:	6b00003f 	cmp	w1, w0
    9602f090:	54fffa09 	b.ls	9602efd0 <updatewindow+0x60>  // b.plast
    9602f094:	0b140014 	add	w20, w0, w20
    9602f098:	b9003a74 	str	w20, [x19, #56]
    9602f09c:	17ffffcd 	b	9602efd0 <updatewindow+0x60>

000000009602f0a0 <inflateReset>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    9602f0a0:	b4000300 	cbz	x0, 9602f100 <inflateReset+0x60>
    9602f0a4:	f9401c01 	ldr	x1, [x0, #56]
    9602f0a8:	b40002c1 	cbz	x1, 9602f100 <inflateReset+0x60>
    strm->total_in = strm->total_out = state->total = 0;
    9602f0ac:	f900103f 	str	xzr, [x1, #32]
    strm->adler = 1;        /* to support ill-conceived Java test suite */
    9602f0b0:	d2800022 	mov	x2, #0x1                   	// #1
    strm->total_in = strm->total_out = state->total = 0;
    9602f0b4:	f900081f 	str	xzr, [x0, #16]
    strm->msg = Z_NULL;
    9602f0b8:	a902fc1f 	stp	xzr, xzr, [x0, #40]
    strm->adler = 1;        /* to support ill-conceived Java test suite */
    9602f0bc:	f9003002 	str	x2, [x0, #96]
    state->dmax = 32768U;
    9602f0c0:	52900000 	mov	w0, #0x8000                	// #32768
    9602f0c4:	b9001420 	str	w0, [x1, #20]
    state->lencode = state->distcode = state->next = state->codes;
    9602f0c8:	91154020 	add	x0, x1, #0x550
    9602f0cc:	a9060020 	stp	x0, x0, [x1, #96]
    9602f0d0:	f9004420 	str	x0, [x1, #136]
    state->sane = 1;
    9602f0d4:	b26083e0 	mov	x0, #0xffffffff00000001    	// #-4294967295
    state->last = 0;
    9602f0d8:	29007c3f 	stp	wzr, wzr, [x1]
    state->havedict = 0;
    9602f0dc:	b9000c3f 	str	wzr, [x1, #12]
    state->head = Z_NULL;
    9602f0e0:	f900143f 	str	xzr, [x1, #40]
    state->wsize = 0;
    9602f0e4:	f803403f 	stur	xzr, [x1, #52]
    state->whave = 0;
    9602f0e8:	b9003c3f 	str	wzr, [x1, #60]
    state->hold = 0;
    9602f0ec:	f900243f 	str	xzr, [x1, #72]
    state->bits = 0;
    9602f0f0:	b900503f 	str	wzr, [x1, #80]
    state->sane = 1;
    9602f0f4:	f90df020 	str	x0, [x1, #7136]
    return Z_OK;
    9602f0f8:	52800000 	mov	w0, #0x0                   	// #0
}
    9602f0fc:	d65f03c0 	ret
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    9602f100:	12800020 	mov	w0, #0xfffffffe            	// #-2
    9602f104:	17fffffe 	b	9602f0fc <inflateReset+0x5c>

000000009602f108 <inflateReset2>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    9602f108:	b4000540 	cbz	x0, 9602f1b0 <inflateReset2+0xa8>
{
    9602f10c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602f110:	910003fd 	mov	x29, sp
    9602f114:	a90153f3 	stp	x19, x20, [sp, #16]
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    9602f118:	f9401c14 	ldr	x20, [x0, #56]
{
    9602f11c:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602f120:	aa0003f5 	mov	x21, x0
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    9602f124:	b40003d4 	cbz	x20, 9602f19c <inflateReset2+0x94>
    9602f128:	2a0103f3 	mov	w19, w1
    if (windowBits < 0) {
    9602f12c:	36f802c1 	tbz	w1, #31, 9602f184 <inflateReset2+0x7c>
        windowBits = -windowBits;
    9602f130:	4b0103f3 	neg	w19, w1
        wrap = 0;
    9602f134:	52800016 	mov	w22, #0x0                   	// #0
    if (windowBits && (windowBits < 8 || windowBits > 15))
    9602f138:	51002260 	sub	w0, w19, #0x8
    9602f13c:	7100027f 	cmp	w19, #0x0
    9602f140:	7a471800 	ccmp	w0, #0x7, #0x0, ne  // ne = any
    9602f144:	540002c8 	b.hi	9602f19c <inflateReset2+0x94>  // b.pmore
    if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
    9602f148:	f9402281 	ldr	x1, [x20, #64]
    9602f14c:	b40000e1 	cbz	x1, 9602f168 <inflateReset2+0x60>
    9602f150:	b9403280 	ldr	w0, [x20, #48]
    9602f154:	6b00027f 	cmp	w19, w0
    9602f158:	54000080 	b.eq	9602f168 <inflateReset2+0x60>  // b.none
        ZFREE(strm, state->window);
    9602f15c:	a94482a2 	ldp	x2, x0, [x21, #72]
    9602f160:	d63f0040 	blr	x2
        state->window = Z_NULL;
    9602f164:	f900229f 	str	xzr, [x20, #64]
    state->wrap = wrap;
    9602f168:	b9000a96 	str	w22, [x20, #8]
    return inflateReset(strm);
    9602f16c:	aa1503e0 	mov	x0, x21
    state->wbits = (unsigned)windowBits;
    9602f170:	b9003293 	str	w19, [x20, #48]
}
    9602f174:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602f178:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602f17c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    return inflateReset(strm);
    9602f180:	17ffffc8 	b	9602f0a0 <inflateReset>
        wrap = (windowBits >> 4) + 1;
    9602f184:	13047c36 	asr	w22, w1, #4
        if (windowBits < 48)
    9602f188:	7100bc3f 	cmp	w1, #0x2f
        wrap = (windowBits >> 4) + 1;
    9602f18c:	110006d6 	add	w22, w22, #0x1
        if (windowBits < 48)
    9602f190:	54fffd4c 	b.gt	9602f138 <inflateReset2+0x30>
            windowBits &= 15;
    9602f194:	12000c33 	and	w19, w1, #0xf
    9602f198:	17ffffe8 	b	9602f138 <inflateReset2+0x30>
}
    9602f19c:	12800020 	mov	w0, #0xfffffffe            	// #-2
    9602f1a0:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602f1a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602f1a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602f1ac:	d65f03c0 	ret
    9602f1b0:	12800020 	mov	w0, #0xfffffffe            	// #-2
    9602f1b4:	d65f03c0 	ret

000000009602f1b8 <inflateInit2_>:
{
    9602f1b8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9602f1bc:	910003fd 	mov	x29, sp
    9602f1c0:	a90153f3 	stp	x19, x20, [sp, #16]
    9602f1c4:	f90013f5 	str	x21, [sp, #32]
    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
    9602f1c8:	b4000582 	cbz	x2, 9602f278 <inflateInit2_+0xc0>
    9602f1cc:	39400042 	ldrb	w2, [x2]
    9602f1d0:	7100c45f 	cmp	w2, #0x31
    9602f1d4:	54000521 	b.ne	9602f278 <inflateInit2_+0xc0>  // b.any
    9602f1d8:	7101c07f 	cmp	w3, #0x70
    9602f1dc:	540004e1 	b.ne	9602f278 <inflateInit2_+0xc0>  // b.any
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    9602f1e0:	b4000500 	cbz	x0, 9602f280 <inflateInit2_+0xc8>
    if (strm->zalloc == (alloc_func)0) {
    9602f1e4:	f9402002 	ldr	x2, [x0, #64]
    strm->msg = Z_NULL;                 /* in case we return an error */
    9602f1e8:	f900181f 	str	xzr, [x0, #48]
    if (strm->zalloc == (alloc_func)0) {
    9602f1ec:	b50000a2 	cbnz	x2, 9602f200 <inflateInit2_+0x48>
        strm->zalloc = zcalloc;
    9602f1f0:	b0000002 	adrp	x2, 96030000 <inflate+0xd70>
        strm->opaque = (voidpf)0;
    9602f1f4:	f900281f 	str	xzr, [x0, #80]
        strm->zalloc = zcalloc;
    9602f1f8:	911a4042 	add	x2, x2, #0x690
    9602f1fc:	f9002002 	str	x2, [x0, #64]
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
    9602f200:	f9402402 	ldr	x2, [x0, #72]
    9602f204:	b5000082 	cbnz	x2, 9602f214 <inflateInit2_+0x5c>
    9602f208:	b0000002 	adrp	x2, 96030000 <inflate+0xd70>
    9602f20c:	911a6042 	add	x2, x2, #0x698
    9602f210:	f9002402 	str	x2, [x0, #72]
    state = (struct inflate_state FAR *)
    9602f214:	f9402003 	ldr	x3, [x0, #64]
    9602f218:	aa0003f3 	mov	x19, x0
    9602f21c:	f9402800 	ldr	x0, [x0, #80]
    9602f220:	2a0103f4 	mov	w20, w1
    9602f224:	52837e02 	mov	w2, #0x1bf0                	// #7152
    9602f228:	52800021 	mov	w1, #0x1                   	// #1
    9602f22c:	d63f0060 	blr	x3
    9602f230:	aa0003f5 	mov	x21, x0
    if (state == Z_NULL) return Z_MEM_ERROR;
    9602f234:	b40002a0 	cbz	x0, 9602f288 <inflateInit2_+0xd0>
    strm->state = (struct internal_state FAR *)state;
    9602f238:	f9001e75 	str	x21, [x19, #56]
    ret = inflateReset2(strm, windowBits);
    9602f23c:	2a1403e1 	mov	w1, w20
    state->window = Z_NULL;
    9602f240:	f90022bf 	str	xzr, [x21, #64]
    ret = inflateReset2(strm, windowBits);
    9602f244:	aa1303e0 	mov	x0, x19
    9602f248:	97ffffb0 	bl	9602f108 <inflateReset2>
    9602f24c:	2a0003f4 	mov	w20, w0
    if (ret != Z_OK) {
    9602f250:	340000a0 	cbz	w0, 9602f264 <inflateInit2_+0xac>
        ZFREE(strm, state);
    9602f254:	a9448262 	ldp	x2, x0, [x19, #72]
    9602f258:	aa1503e1 	mov	x1, x21
    9602f25c:	d63f0040 	blr	x2
        strm->state = Z_NULL;
    9602f260:	f9001e7f 	str	xzr, [x19, #56]
}
    9602f264:	2a1403e0 	mov	w0, w20
    9602f268:	f94013f5 	ldr	x21, [sp, #32]
    9602f26c:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602f270:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9602f274:	d65f03c0 	ret
        return Z_VERSION_ERROR;
    9602f278:	128000b4 	mov	w20, #0xfffffffa            	// #-6
    9602f27c:	17fffffa 	b	9602f264 <inflateInit2_+0xac>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    9602f280:	12800034 	mov	w20, #0xfffffffe            	// #-2
    9602f284:	17fffff8 	b	9602f264 <inflateInit2_+0xac>
    if (state == Z_NULL) return Z_MEM_ERROR;
    9602f288:	12800074 	mov	w20, #0xfffffffc            	// #-4
    9602f28c:	17fffff6 	b	9602f264 <inflateInit2_+0xac>

000000009602f290 <inflate>:
 */

int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
    9602f290:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
    9602f294:	910003fd 	mov	x29, sp
    9602f298:	a90153f3 	stp	x19, x20, [sp, #16]
    9602f29c:	a9025bf5 	stp	x21, x22, [sp, #32]
    9602f2a0:	a90363f7 	stp	x23, x24, [sp, #48]
    9602f2a4:	a9046bf9 	stp	x25, x26, [sp, #64]
    9602f2a8:	a90573fb 	stp	x27, x28, [sp, #80]
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
    9602f2ac:	b4009b20 	cbz	x0, 96030610 <inflate+0x1380>
    9602f2b0:	f9401c13 	ldr	x19, [x0, #56]
    9602f2b4:	b4009af3 	cbz	x19, 96030610 <inflate+0x1380>
    9602f2b8:	f9400c17 	ldr	x23, [x0, #24]
    9602f2bc:	b4009ab7 	cbz	x23, 96030610 <inflate+0x1380>
        (strm->next_in == Z_NULL && strm->avail_in != 0))
    9602f2c0:	f940001c 	ldr	x28, [x0]
    9602f2c4:	b9400802 	ldr	w2, [x0, #8]
    9602f2c8:	b9008ba2 	str	w2, [x29, #136]
    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
    9602f2cc:	b500007c 	cbnz	x28, 9602f2d8 <inflate+0x48>
        (strm->next_in == Z_NULL && strm->avail_in != 0))
    9602f2d0:	2a0203e2 	mov	w2, w2
    9602f2d4:	350099e2 	cbnz	w2, 96030610 <inflate+0x1380>
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
    9602f2d8:	b9400262 	ldr	w2, [x19]
    9602f2dc:	71002c5f 	cmp	w2, #0xb
    9602f2e0:	54000061 	b.ne	9602f2ec <inflate+0x5c>  // b.any
    9602f2e4:	52800182 	mov	w2, #0xc                   	// #12
    9602f2e8:	b9000262 	str	w2, [x19]
    9602f2ec:	aa0003f9 	mov	x25, x0
    LOAD();
    9602f2f0:	b940527b 	ldr	w27, [x19, #80]
    9602f2f4:	b9408bba 	ldr	w26, [x29, #136]
    in = have;
    out = left;
    ret = Z_OK;
    for (;;)
        switch (state->mode) {
    9602f2f8:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    LOAD();
    9602f2fc:	f9402674 	ldr	x20, [x19, #72]
        switch (state->mode) {
    9602f300:	9132e000 	add	x0, x0, #0xcb8
    LOAD();
    9602f304:	b9402335 	ldr	w21, [x25, #32]
    ret = Z_OK;
    9602f308:	52800016 	mov	w22, #0x0                   	// #0
        switch (state->mode) {
    9602f30c:	f9003fa0 	str	x0, [x29, #120]
            state->mode = LENLENS;
            /* Fall through */
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
    9602f310:	f00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    out = left;
    9602f314:	2a1503f8 	mov	w24, w21
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
    9602f318:	911c4000 	add	x0, x0, #0x710
    9602f31c:	f90043a0 	str	x0, [x29, #128]
    9602f320:	b9008fa1 	str	w1, [x29, #140]
        switch (state->mode) {
    9602f324:	b9400260 	ldr	w0, [x19]
    9602f328:	7100781f 	cmp	w0, #0x1e
    9602f32c:	54009728 	b.hi	96030610 <inflate+0x1380>  // b.pmore
    9602f330:	f9403fa1 	ldr	x1, [x29, #120]
    9602f334:	78605820 	ldrh	w0, [x1, w0, uxtw #1]
    9602f338:	10000061 	adr	x1, 9602f344 <inflate+0xb4>
    9602f33c:	8b20a820 	add	x0, x1, w0, sxth #2
    9602f340:	d61f0000 	br	x0
            /* Fall through */
        case DONE:
            ret = Z_STREAM_END;
            goto inf_leave;
        case BAD:
            ret = Z_DATA_ERROR;
    9602f344:	12800056 	mov	w22, #0xfffffffd            	// #-3
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
    9602f348:	b9403660 	ldr	w0, [x19, #52]
    RESTORE();
    9602f34c:	f900033c 	str	x28, [x25]
    9602f350:	b9000b3a 	str	w26, [x25, #8]
    9602f354:	f9000f37 	str	x23, [x25, #24]
    9602f358:	b9002335 	str	w21, [x25, #32]
    9602f35c:	f9002674 	str	x20, [x19, #72]
    9602f360:	b900527b 	str	w27, [x19, #80]
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
    9602f364:	350000c0 	cbnz	w0, 9602f37c <inflate+0xec>
    9602f368:	b9400260 	ldr	w0, [x19]
    9602f36c:	7100641f 	cmp	w0, #0x19
    9602f370:	54008e88 	b.hi	96030540 <inflate+0x12b0>  // b.pmore
    9602f374:	6b1802bf 	cmp	w21, w24
    9602f378:	54008e40 	b.eq	96030540 <inflate+0x12b0>  // b.none
        if (updatewindow(strm, out)) {
    9602f37c:	2a1803e1 	mov	w1, w24
    9602f380:	aa1903e0 	mov	x0, x25
    9602f384:	97fffefb 	bl	9602ef70 <updatewindow>
    9602f388:	34008dc0 	cbz	w0, 96030540 <inflate+0x12b0>
            state->mode = MEM;
    9602f38c:	528003c0 	mov	w0, #0x1e                  	// #30
    9602f390:	b9000260 	str	w0, [x19]
            return Z_MEM_ERROR;
    9602f394:	12800076 	mov	w22, #0xfffffffc            	// #-4
    9602f398:	140001a9 	b	9602fa3c <inflate+0x7ac>
            if (state->wrap == 0) {
    9602f39c:	b9400a60 	ldr	w0, [x19, #8]
    9602f3a0:	35000140 	cbnz	w0, 9602f3c8 <inflate+0x138>
                state->mode = TYPEDO;
    9602f3a4:	52800180 	mov	w0, #0xc                   	// #12
                state->mode = BAD;
    9602f3a8:	b9000260 	str	w0, [x19]
                break;
    9602f3ac:	17ffffde 	b	9602f324 <inflate+0x94>
            NEEDBITS(16);
    9602f3b0:	34fffcda 	cbz	w26, 9602f348 <inflate+0xb8>
    9602f3b4:	38401781 	ldrb	w1, [x28], #1
    9602f3b8:	5100075a 	sub	w26, w26, #0x1
    9602f3bc:	9adb2021 	lsl	x1, x1, x27
    9602f3c0:	1100237b 	add	w27, w27, #0x8
    9602f3c4:	8b010294 	add	x20, x20, x1
    9602f3c8:	71003f7f 	cmp	w27, #0xf
    9602f3cc:	54ffff29 	b.ls	9602f3b0 <inflate+0x120>  // b.plast
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
    9602f3d0:	360802c0 	tbz	w0, #1, 9602f428 <inflate+0x198>
    9602f3d4:	d29163e1 	mov	x1, #0x8b1f                	// #35615
    9602f3d8:	eb01029f 	cmp	x20, x1
    9602f3dc:	54000261 	b.ne	9602f428 <inflate+0x198>  // b.any
                state->check = crc32(0L, Z_NULL, 0);
    9602f3e0:	d2800001 	mov	x1, #0x0                   	// #0
    9602f3e4:	d2800002 	mov	x2, #0x0                   	// #0
    9602f3e8:	52800000 	mov	w0, #0x0                   	// #0
    9602f3ec:	97ffe148 	bl	9602790c <tegrabl_utils_crc32>
    9602f3f0:	2a0003e1 	mov	w1, w0
    9602f3f4:	f9000e61 	str	x1, [x19, #24]
                CRC2(state->check, hold);
    9602f3f8:	910283a1 	add	x1, x29, #0xa0
    9602f3fc:	128e9c02 	mov	w2, #0xffff8b1f            	// #-29921
                INITBITS();
    9602f400:	5280001b 	mov	w27, #0x0                   	// #0
    9602f404:	d2800014 	mov	x20, #0x0                   	// #0
                CRC2(state->check, hold);
    9602f408:	781f8c22 	strh	w2, [x1, #-8]!
    9602f40c:	d2800042 	mov	x2, #0x2                   	// #2
    9602f410:	97ffe13f 	bl	9602790c <tegrabl_utils_crc32>
    9602f414:	2a0003e0 	mov	w0, w0
    9602f418:	f9000e60 	str	x0, [x19, #24]
                state->mode = FLAGS;
    9602f41c:	52800020 	mov	w0, #0x1                   	// #1
    9602f420:	b9000260 	str	w0, [x19]
                break;
    9602f424:	17ffffc0 	b	9602f324 <inflate+0x94>
            if (state->head != Z_NULL)
    9602f428:	f9401661 	ldr	x1, [x19, #40]
            state->flags = 0;           /* expect zlib header */
    9602f42c:	b900127f 	str	wzr, [x19, #16]
            if (state->head != Z_NULL)
    9602f430:	b4000061 	cbz	x1, 9602f43c <inflate+0x1ac>
                state->head->done = -1;
    9602f434:	12800002 	mov	w2, #0xffffffff            	// #-1
    9602f438:	b9004822 	str	w2, [x1, #72]
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
    9602f43c:	360000e0 	tbz	w0, #0, 9602f458 <inflate+0x1c8>
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
    9602f440:	d3781e80 	ubfiz	x0, x20, #8, #8
    9602f444:	d28003e2 	mov	x2, #0x1f                  	// #31
    9602f448:	8b542000 	add	x0, x0, x20, lsr #8
    9602f44c:	9ac20801 	udiv	x1, x0, x2
    9602f450:	9b028020 	msub	x0, x1, x2, x0
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
    9602f454:	b40000c0 	cbz	x0, 9602f46c <inflate+0x1dc>
                strm->msg = (char *)"incorrect header check";
    9602f458:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602f45c:	9135d800 	add	x0, x0, #0xd76
    9602f460:	f9001b20 	str	x0, [x25, #48]
                state->mode = BAD;
    9602f464:	528003a0 	mov	w0, #0x1d                  	// #29
    9602f468:	17ffffd0 	b	9602f3a8 <inflate+0x118>
            if (BITS(4) != Z_DEFLATED) {
    9602f46c:	12000e80 	and	w0, w20, #0xf
    9602f470:	7100201f 	cmp	w0, #0x8
    9602f474:	54000080 	b.eq	9602f484 <inflate+0x1f4>  // b.none
                strm->msg = (char *)"unknown compression method 1";
    9602f478:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602f47c:	91363400 	add	x0, x0, #0xd8d
    9602f480:	17fffff8 	b	9602f460 <inflate+0x1d0>
            if (state->wbits == 0)
    9602f484:	b9403261 	ldr	w1, [x19, #48]
            DROPBITS(4);
    9602f488:	d344fe94 	lsr	x20, x20, #4
            len = BITS(4) + 8;
    9602f48c:	12000e80 	and	w0, w20, #0xf
    9602f490:	11002000 	add	w0, w0, #0x8
            if (state->wbits == 0)
    9602f494:	35000261 	cbnz	w1, 9602f4e0 <inflate+0x250>
                state->wbits = len;
    9602f498:	b9003260 	str	w0, [x19, #48]
            state->dmax = 1U << len;
    9602f49c:	52800021 	mov	w1, #0x1                   	// #1
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
    9602f4a0:	52800002 	mov	w2, #0x0                   	// #0
            state->dmax = 1U << len;
    9602f4a4:	1ac02020 	lsl	w0, w1, w0
    9602f4a8:	b9001660 	str	w0, [x19, #20]
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
    9602f4ac:	d2800001 	mov	x1, #0x0                   	// #0
    9602f4b0:	d2800000 	mov	x0, #0x0                   	// #0
    9602f4b4:	97fffbbb 	bl	9602e3a0 <adler32>
    9602f4b8:	f9000e60 	str	x0, [x19, #24]
            state->mode = hold & 0x200 ? DICTID : TYPE;
    9602f4bc:	f277029f 	tst	x20, #0x200
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
    9602f4c0:	f9003320 	str	x0, [x25, #96]
            state->mode = hold & 0x200 ? DICTID : TYPE;
    9602f4c4:	52800121 	mov	w1, #0x9                   	// #9
    9602f4c8:	52800160 	mov	w0, #0xb                   	// #11
            INITBITS();
    9602f4cc:	5280001b 	mov	w27, #0x0                   	// #0
            state->mode = hold & 0x200 ? DICTID : TYPE;
    9602f4d0:	1a810000 	csel	w0, w0, w1, eq  // eq = none
            INITBITS();
    9602f4d4:	d2800014 	mov	x20, #0x0                   	// #0
            state->mode = hold & 0x200 ? DICTID : TYPE;
    9602f4d8:	b9000260 	str	w0, [x19]
            break;
    9602f4dc:	17ffff92 	b	9602f324 <inflate+0x94>
            else if (len > state->wbits) {
    9602f4e0:	6b00003f 	cmp	w1, w0
    9602f4e4:	54fffdc2 	b.cs	9602f49c <inflate+0x20c>  // b.hs, b.nlast
                strm->msg = (char *)"invalid window size";
    9602f4e8:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
            DROPBITS(4);
    9602f4ec:	5100137b 	sub	w27, w27, #0x4
                strm->msg = (char *)"invalid window size";
    9602f4f0:	9136a800 	add	x0, x0, #0xdaa
    9602f4f4:	17ffffdb 	b	9602f460 <inflate+0x1d0>
            NEEDBITS(16);
    9602f4f8:	34fff29a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602f4fc:	38401780 	ldrb	w0, [x28], #1
    9602f500:	5100075a 	sub	w26, w26, #0x1
    9602f504:	9adb2000 	lsl	x0, x0, x27
    9602f508:	1100237b 	add	w27, w27, #0x8
    9602f50c:	8b000294 	add	x20, x20, x0
    9602f510:	71003f7f 	cmp	w27, #0xf
    9602f514:	54ffff29 	b.ls	9602f4f8 <inflate+0x268>  // b.plast
            state->flags = (int)(hold);
    9602f518:	b9001274 	str	w20, [x19, #16]
            if ((state->flags & 0xff) != Z_DEFLATED) {
    9602f51c:	12001e80 	and	w0, w20, #0xff
            state->flags = (int)(hold);
    9602f520:	2a1403e1 	mov	w1, w20
            if ((state->flags & 0xff) != Z_DEFLATED) {
    9602f524:	7100201f 	cmp	w0, #0x8
    9602f528:	54000080 	b.eq	9602f538 <inflate+0x2a8>  // b.none
                strm->msg = (char *)"unknown compression method";
    9602f52c:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602f530:	9136f800 	add	x0, x0, #0xdbe
    9602f534:	17ffffcb 	b	9602f460 <inflate+0x1d0>
            if (state->flags & 0xe000) {
    9602f538:	f2730a9f 	tst	x20, #0xe000
    9602f53c:	54000080 	b.eq	9602f54c <inflate+0x2bc>  // b.none
                strm->msg = (char *)"unknown header flags set";
    9602f540:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602f544:	91376400 	add	x0, x0, #0xdd9
    9602f548:	17ffffc6 	b	9602f460 <inflate+0x1d0>
            if (state->head != Z_NULL)
    9602f54c:	f9401660 	ldr	x0, [x19, #40]
    9602f550:	b4000060 	cbz	x0, 9602f55c <inflate+0x2cc>
                state->head->text = (int)((hold >> 8) & 1);
    9602f554:	53082282 	ubfx	w2, w20, #8, #1
    9602f558:	b9000002 	str	w2, [x0]
            if (state->flags & 0x0200) CRC2(state->check, hold);
    9602f55c:	36480141 	tbz	w1, #9, 9602f584 <inflate+0x2f4>
    9602f560:	b9401a60 	ldr	w0, [x19, #24]
    9602f564:	d2800042 	mov	x2, #0x2                   	// #2
    9602f568:	390263b4 	strb	w20, [x29, #152]
    9602f56c:	910263a1 	add	x1, x29, #0x98
    9602f570:	d348fe94 	lsr	x20, x20, #8
    9602f574:	390267b4 	strb	w20, [x29, #153]
    9602f578:	97ffe0e5 	bl	9602790c <tegrabl_utils_crc32>
    9602f57c:	2a0003e0 	mov	w0, w0
    9602f580:	f9000e60 	str	x0, [x19, #24]
            state->mode = TIME;
    9602f584:	52800040 	mov	w0, #0x2                   	// #2
            INITBITS();
    9602f588:	5280001b 	mov	w27, #0x0                   	// #0
    9602f58c:	d2800014 	mov	x20, #0x0                   	// #0
            state->mode = TIME;
    9602f590:	b9000260 	str	w0, [x19]
            NEEDBITS(32);
    9602f594:	71007f7f 	cmp	w27, #0x1f
    9602f598:	54000869 	b.ls	9602f6a4 <inflate+0x414>  // b.plast
            if (state->head != Z_NULL)
    9602f59c:	f9401660 	ldr	x0, [x19, #40]
    9602f5a0:	b4000040 	cbz	x0, 9602f5a8 <inflate+0x318>
                state->head->time = hold;
    9602f5a4:	f9000414 	str	x20, [x0, #8]
            if (state->flags & 0x0200) CRC4(state->check, hold);
    9602f5a8:	b9401260 	ldr	w0, [x19, #16]
    9602f5ac:	364801c0 	tbz	w0, #9, 9602f5e4 <inflate+0x354>
    9602f5b0:	d348fe80 	lsr	x0, x20, #8
    9602f5b4:	390267a0 	strb	w0, [x29, #153]
    9602f5b8:	d350fe80 	lsr	x0, x20, #16
    9602f5bc:	39026ba0 	strb	w0, [x29, #154]
    9602f5c0:	b9401a60 	ldr	w0, [x19, #24]
    9602f5c4:	d2800082 	mov	x2, #0x4                   	// #4
    9602f5c8:	390263b4 	strb	w20, [x29, #152]
    9602f5cc:	910263a1 	add	x1, x29, #0x98
    9602f5d0:	d358fe94 	lsr	x20, x20, #24
    9602f5d4:	39026fb4 	strb	w20, [x29, #155]
    9602f5d8:	97ffe0cd 	bl	9602790c <tegrabl_utils_crc32>
    9602f5dc:	2a0003e0 	mov	w0, w0
    9602f5e0:	f9000e60 	str	x0, [x19, #24]
            state->mode = OS;
    9602f5e4:	52800060 	mov	w0, #0x3                   	// #3
            INITBITS();
    9602f5e8:	5280001b 	mov	w27, #0x0                   	// #0
    9602f5ec:	d2800014 	mov	x20, #0x0                   	// #0
            state->mode = OS;
    9602f5f0:	b9000260 	str	w0, [x19]
            NEEDBITS(16);
    9602f5f4:	71003f7f 	cmp	w27, #0xf
    9602f5f8:	54000649 	b.ls	9602f6c0 <inflate+0x430>  // b.plast
            if (state->head != Z_NULL) {
    9602f5fc:	f9401660 	ldr	x0, [x19, #40]
    9602f600:	b40000a0 	cbz	x0, 9602f614 <inflate+0x384>
                state->head->xflags = (int)(hold & 0xff);
    9602f604:	12001e81 	and	w1, w20, #0xff
    9602f608:	b9001001 	str	w1, [x0, #16]
                state->head->os = (int)(hold >> 8);
    9602f60c:	d348fe81 	lsr	x1, x20, #8
    9602f610:	b9001401 	str	w1, [x0, #20]
            if (state->flags & 0x0200) CRC2(state->check, hold);
    9602f614:	b9401260 	ldr	w0, [x19, #16]
    9602f618:	36480140 	tbz	w0, #9, 9602f640 <inflate+0x3b0>
    9602f61c:	b9401a60 	ldr	w0, [x19, #24]
    9602f620:	d2800042 	mov	x2, #0x2                   	// #2
    9602f624:	390263b4 	strb	w20, [x29, #152]
    9602f628:	910263a1 	add	x1, x29, #0x98
    9602f62c:	d348fe94 	lsr	x20, x20, #8
    9602f630:	390267b4 	strb	w20, [x29, #153]
    9602f634:	97ffe0b6 	bl	9602790c <tegrabl_utils_crc32>
    9602f638:	2a0003e0 	mov	w0, w0
    9602f63c:	f9000e60 	str	x0, [x19, #24]
            state->mode = EXLEN;
    9602f640:	52800080 	mov	w0, #0x4                   	// #4
            INITBITS();
    9602f644:	5280001b 	mov	w27, #0x0                   	// #0
    9602f648:	d2800014 	mov	x20, #0x0                   	// #0
            state->mode = EXLEN;
    9602f64c:	b9000260 	str	w0, [x19]
            if (state->flags & 0x0400) {
    9602f650:	b9401261 	ldr	w1, [x19, #16]
    9602f654:	36500521 	tbz	w1, #10, 9602f6f8 <inflate+0x468>
                NEEDBITS(16);
    9602f658:	71003f7f 	cmp	w27, #0xf
    9602f65c:	54000409 	b.ls	9602f6dc <inflate+0x44c>  // b.plast
                if (state->head != Z_NULL)
    9602f660:	f9401660 	ldr	x0, [x19, #40]
                state->length = (unsigned)(hold);
    9602f664:	b9005674 	str	w20, [x19, #84]
                if (state->head != Z_NULL)
    9602f668:	b4000040 	cbz	x0, 9602f670 <inflate+0x3e0>
                    state->head->extra_len = (unsigned)hold;
    9602f66c:	b9002014 	str	w20, [x0, #32]
                if (state->flags & 0x0200) CRC2(state->check, hold);
    9602f670:	36480141 	tbz	w1, #9, 9602f698 <inflate+0x408>
    9602f674:	b9401a60 	ldr	w0, [x19, #24]
    9602f678:	d2800042 	mov	x2, #0x2                   	// #2
    9602f67c:	390263b4 	strb	w20, [x29, #152]
    9602f680:	910263a1 	add	x1, x29, #0x98
    9602f684:	d348fe94 	lsr	x20, x20, #8
    9602f688:	390267b4 	strb	w20, [x29, #153]
    9602f68c:	97ffe0a0 	bl	9602790c <tegrabl_utils_crc32>
    9602f690:	2a0003e0 	mov	w0, w0
    9602f694:	f9000e60 	str	x0, [x19, #24]
                INITBITS();
    9602f698:	5280001b 	mov	w27, #0x0                   	// #0
    9602f69c:	d2800014 	mov	x20, #0x0                   	// #0
    9602f6a0:	14000019 	b	9602f704 <inflate+0x474>
            NEEDBITS(32);
    9602f6a4:	34ffe53a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602f6a8:	38401780 	ldrb	w0, [x28], #1
    9602f6ac:	5100075a 	sub	w26, w26, #0x1
    9602f6b0:	9adb2000 	lsl	x0, x0, x27
    9602f6b4:	1100237b 	add	w27, w27, #0x8
    9602f6b8:	8b000294 	add	x20, x20, x0
    9602f6bc:	17ffffb6 	b	9602f594 <inflate+0x304>
            NEEDBITS(16);
    9602f6c0:	34ffe45a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602f6c4:	38401780 	ldrb	w0, [x28], #1
    9602f6c8:	5100075a 	sub	w26, w26, #0x1
    9602f6cc:	9adb2000 	lsl	x0, x0, x27
    9602f6d0:	1100237b 	add	w27, w27, #0x8
    9602f6d4:	8b000294 	add	x20, x20, x0
    9602f6d8:	17ffffc7 	b	9602f5f4 <inflate+0x364>
                NEEDBITS(16);
    9602f6dc:	34ffe37a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602f6e0:	38401780 	ldrb	w0, [x28], #1
    9602f6e4:	5100075a 	sub	w26, w26, #0x1
    9602f6e8:	9adb2000 	lsl	x0, x0, x27
    9602f6ec:	1100237b 	add	w27, w27, #0x8
    9602f6f0:	8b000294 	add	x20, x20, x0
    9602f6f4:	17ffffd9 	b	9602f658 <inflate+0x3c8>
            else if (state->head != Z_NULL)
    9602f6f8:	f9401660 	ldr	x0, [x19, #40]
    9602f6fc:	b4000040 	cbz	x0, 9602f704 <inflate+0x474>
                state->head->extra = Z_NULL;
    9602f700:	f9000c1f 	str	xzr, [x0, #24]
            state->mode = EXTRA;
    9602f704:	528000a0 	mov	w0, #0x5                   	// #5
    9602f708:	b9000260 	str	w0, [x19]
            if (state->flags & 0x0400) {
    9602f70c:	b9401260 	ldr	w0, [x19, #16]
    9602f710:	36500560 	tbz	w0, #10, 9602f7bc <inflate+0x52c>
                copy = state->length;
    9602f714:	b9405660 	ldr	w0, [x19, #84]
    9602f718:	6b00035f 	cmp	w26, w0
    9602f71c:	1a809343 	csel	w3, w26, w0, ls  // ls = plast
                if (copy) {
    9602f720:	340004a3 	cbz	w3, 9602f7b4 <inflate+0x524>
                    if (state->head != Z_NULL &&
    9602f724:	f9401662 	ldr	x2, [x19, #40]
    9602f728:	2a0303e4 	mov	w4, w3
    9602f72c:	b4000222 	cbz	x2, 9602f770 <inflate+0x4e0>
                        state->head->extra != Z_NULL) {
    9602f730:	f9400c45 	ldr	x5, [x2, #24]
                    if (state->head != Z_NULL &&
    9602f734:	b40001e5 	cbz	x5, 9602f770 <inflate+0x4e0>
                        len = state->head->extra_len - state->length;
    9602f738:	b9402041 	ldr	w1, [x2, #32]
                                len + copy > state->head->extra_max ?
    9602f73c:	b9006ba3 	str	w3, [x29, #104]
                        len = state->head->extra_len - state->length;
    9602f740:	4b000020 	sub	w0, w1, w0
                                len + copy > state->head->extra_max ?
    9602f744:	b9402441 	ldr	w1, [x2, #36]
    9602f748:	0b00006a 	add	w10, w3, w0
                        zmemcpy(state->head->extra + len, next,
    9602f74c:	f9003ba4 	str	x4, [x29, #112]
    9602f750:	6b01015f 	cmp	w10, w1
    9602f754:	4b000022 	sub	w2, w1, w0
    9602f758:	9a848042 	csel	x2, x2, x4, hi  // hi = pmore
    9602f75c:	aa1c03e1 	mov	x1, x28
    9602f760:	8b2040a0 	add	x0, x5, w0, uxtw
    9602f764:	97ffe9f0 	bl	96029f24 <memcpy>
    9602f768:	b9406ba3 	ldr	w3, [x29, #104]
    9602f76c:	f9403ba4 	ldr	x4, [x29, #112]
                    if (state->flags & 0x0200)
    9602f770:	b9401260 	ldr	w0, [x19, #16]
    9602f774:	36480160 	tbz	w0, #9, 9602f7a0 <inflate+0x510>
                        state->check = crc32(state->check, next, copy);
    9602f778:	b9401a60 	ldr	w0, [x19, #24]
    9602f77c:	aa0403e2 	mov	x2, x4
    9602f780:	b9006ba3 	str	w3, [x29, #104]
    9602f784:	aa1c03e1 	mov	x1, x28
    9602f788:	f9003ba4 	str	x4, [x29, #112]
    9602f78c:	97ffe060 	bl	9602790c <tegrabl_utils_crc32>
    9602f790:	2a0003e0 	mov	w0, w0
    9602f794:	b9406ba3 	ldr	w3, [x29, #104]
    9602f798:	f9403ba4 	ldr	x4, [x29, #112]
    9602f79c:	f9000e60 	str	x0, [x19, #24]
                    state->length -= copy;
    9602f7a0:	b9405660 	ldr	w0, [x19, #84]
                    next += copy;
    9602f7a4:	8b04039c 	add	x28, x28, x4
                    have -= copy;
    9602f7a8:	4b03035a 	sub	w26, w26, w3
                    state->length -= copy;
    9602f7ac:	4b030003 	sub	w3, w0, w3
    9602f7b0:	b9005663 	str	w3, [x19, #84]
                if (state->length) goto inf_leave;
    9602f7b4:	b9405660 	ldr	w0, [x19, #84]
    9602f7b8:	35ffdc80 	cbnz	w0, 9602f348 <inflate+0xb8>
            state->mode = NAME;
    9602f7bc:	528000c0 	mov	w0, #0x6                   	// #6
    9602f7c0:	b9000260 	str	w0, [x19]
            state->length = 0;
    9602f7c4:	b900567f 	str	wzr, [x19, #84]
            if (state->flags & 0x0800) {
    9602f7c8:	b9401260 	ldr	w0, [x19, #16]
    9602f7cc:	36580b80 	tbz	w0, #11, 9602f93c <inflate+0x6ac>
                if (have == 0) goto inf_leave;
    9602f7d0:	34ffdbda 	cbz	w26, 9602f348 <inflate+0xb8>
                copy = 0;
    9602f7d4:	52800000 	mov	w0, #0x0                   	// #0
                    if (state->head != Z_NULL &&
    9602f7d8:	f9401661 	ldr	x1, [x19, #40]
                    len = (unsigned)(next[copy++]);
    9602f7dc:	11000403 	add	w3, w0, #0x1
    9602f7e0:	38604b84 	ldrb	w4, [x28, w0, uxtw]
                    if (state->head != Z_NULL &&
    9602f7e4:	b4000141 	cbz	x1, 9602f80c <inflate+0x57c>
                            state->head->name != Z_NULL &&
    9602f7e8:	f9401422 	ldr	x2, [x1, #40]
                    if (state->head != Z_NULL &&
    9602f7ec:	b4000102 	cbz	x2, 9602f80c <inflate+0x57c>
                            state->head->name != Z_NULL &&
    9602f7f0:	b9403021 	ldr	w1, [x1, #48]
                            state->length < state->head->name_max)
    9602f7f4:	b9405660 	ldr	w0, [x19, #84]
                            state->head->name != Z_NULL &&
    9602f7f8:	6b01001f 	cmp	w0, w1
    9602f7fc:	54000082 	b.cs	9602f80c <inflate+0x57c>  // b.hs, b.nlast
                        state->head->name[state->length++] = len;
    9602f800:	11000401 	add	w1, w0, #0x1
    9602f804:	b9005661 	str	w1, [x19, #84]
    9602f808:	38204844 	strb	w4, [x2, w0, uxtw]
                } while (len && copy < have);
    9602f80c:	7100009f 	cmp	w4, #0x0
    9602f810:	2a0303e0 	mov	w0, w3
    9602f814:	7a431340 	ccmp	w26, w3, #0x0, ne  // ne = any
    9602f818:	54fffe08 	b.hi	9602f7d8 <inflate+0x548>  // b.pmore
                if (state->flags & 0x0200)
    9602f81c:	b9401260 	ldr	w0, [x19, #16]
    9602f820:	2a0303e5 	mov	w5, w3
    9602f824:	364801a0 	tbz	w0, #9, 9602f858 <inflate+0x5c8>
                    state->check = crc32(state->check, next, copy);
    9602f828:	b9401a60 	ldr	w0, [x19, #24]
    9602f82c:	aa0503e2 	mov	x2, x5
    9602f830:	b90063a3 	str	w3, [x29, #96]
    9602f834:	aa1c03e1 	mov	x1, x28
    9602f838:	b9006ba4 	str	w4, [x29, #104]
    9602f83c:	f9003ba5 	str	x5, [x29, #112]
    9602f840:	97ffe033 	bl	9602790c <tegrabl_utils_crc32>
    9602f844:	2a0003e0 	mov	w0, w0
    9602f848:	b94063a3 	ldr	w3, [x29, #96]
    9602f84c:	b9406ba4 	ldr	w4, [x29, #104]
    9602f850:	f9403ba5 	ldr	x5, [x29, #112]
    9602f854:	f9000e60 	str	x0, [x19, #24]
                have -= copy;
    9602f858:	4b03035a 	sub	w26, w26, w3
                next += copy;
    9602f85c:	8b05039c 	add	x28, x28, x5
                if (len) goto inf_leave;
    9602f860:	35ffd744 	cbnz	w4, 9602f348 <inflate+0xb8>
            state->mode = COMMENT;
    9602f864:	528000e0 	mov	w0, #0x7                   	// #7
    9602f868:	b9000260 	str	w0, [x19]
            state->length = 0;
    9602f86c:	b900567f 	str	wzr, [x19, #84]
            if (state->flags & 0x1000) {
    9602f870:	b9401260 	ldr	w0, [x19, #16]
    9602f874:	366006c0 	tbz	w0, #12, 9602f94c <inflate+0x6bc>
                if (have == 0) goto inf_leave;
    9602f878:	34ffd69a 	cbz	w26, 9602f348 <inflate+0xb8>
                copy = 0;
    9602f87c:	52800000 	mov	w0, #0x0                   	// #0
                    if (state->head != Z_NULL &&
    9602f880:	f9401661 	ldr	x1, [x19, #40]
                    len = (unsigned)(next[copy++]);
    9602f884:	11000403 	add	w3, w0, #0x1
    9602f888:	38604b84 	ldrb	w4, [x28, w0, uxtw]
                    if (state->head != Z_NULL &&
    9602f88c:	b4000141 	cbz	x1, 9602f8b4 <inflate+0x624>
                            state->head->comment != Z_NULL &&
    9602f890:	f9401c22 	ldr	x2, [x1, #56]
                    if (state->head != Z_NULL &&
    9602f894:	b4000102 	cbz	x2, 9602f8b4 <inflate+0x624>
                            state->head->comment != Z_NULL &&
    9602f898:	b9404021 	ldr	w1, [x1, #64]
                            state->length < state->head->comm_max)
    9602f89c:	b9405660 	ldr	w0, [x19, #84]
                            state->head->comment != Z_NULL &&
    9602f8a0:	6b01001f 	cmp	w0, w1
    9602f8a4:	54000082 	b.cs	9602f8b4 <inflate+0x624>  // b.hs, b.nlast
                        state->head->comment[state->length++] = len;
    9602f8a8:	11000401 	add	w1, w0, #0x1
    9602f8ac:	b9005661 	str	w1, [x19, #84]
    9602f8b0:	38204844 	strb	w4, [x2, w0, uxtw]
                } while (len && copy < have);
    9602f8b4:	7100009f 	cmp	w4, #0x0
    9602f8b8:	2a0303e0 	mov	w0, w3
    9602f8bc:	7a431340 	ccmp	w26, w3, #0x0, ne  // ne = any
    9602f8c0:	54fffe08 	b.hi	9602f880 <inflate+0x5f0>  // b.pmore
                if (state->flags & 0x0200)
    9602f8c4:	b9401260 	ldr	w0, [x19, #16]
    9602f8c8:	2a0303e5 	mov	w5, w3
    9602f8cc:	364801a0 	tbz	w0, #9, 9602f900 <inflate+0x670>
                    state->check = crc32(state->check, next, copy);
    9602f8d0:	b9401a60 	ldr	w0, [x19, #24]
    9602f8d4:	aa0503e2 	mov	x2, x5
    9602f8d8:	b90063a3 	str	w3, [x29, #96]
    9602f8dc:	aa1c03e1 	mov	x1, x28
    9602f8e0:	b9006ba4 	str	w4, [x29, #104]
    9602f8e4:	f9003ba5 	str	x5, [x29, #112]
    9602f8e8:	97ffe009 	bl	9602790c <tegrabl_utils_crc32>
    9602f8ec:	2a0003e0 	mov	w0, w0
    9602f8f0:	b94063a3 	ldr	w3, [x29, #96]
    9602f8f4:	b9406ba4 	ldr	w4, [x29, #104]
    9602f8f8:	f9403ba5 	ldr	x5, [x29, #112]
    9602f8fc:	f9000e60 	str	x0, [x19, #24]
                have -= copy;
    9602f900:	4b03035a 	sub	w26, w26, w3
                next += copy;
    9602f904:	8b05039c 	add	x28, x28, x5
                if (len) goto inf_leave;
    9602f908:	35ffd204 	cbnz	w4, 9602f348 <inflate+0xb8>
            state->mode = HCRC;
    9602f90c:	52800100 	mov	w0, #0x8                   	// #8
    9602f910:	b9000260 	str	w0, [x19]
            if (state->flags & 0x0200) {
    9602f914:	b9401260 	ldr	w0, [x19, #16]
    9602f918:	36480340 	tbz	w0, #9, 9602f980 <inflate+0x6f0>
                NEEDBITS(16);
    9602f91c:	71003f7f 	cmp	w27, #0xf
    9602f920:	540001e9 	b.ls	9602f95c <inflate+0x6cc>  // b.plast
                if (hold != (state->check & 0xffff)) {
    9602f924:	79403261 	ldrh	w1, [x19, #24]
    9602f928:	eb14003f 	cmp	x1, x20
    9602f92c:	54000260 	b.eq	9602f978 <inflate+0x6e8>  // b.none
                    strm->msg = (char *)"header crc mismatch";
    9602f930:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602f934:	9137c800 	add	x0, x0, #0xdf2
    9602f938:	17fffeca 	b	9602f460 <inflate+0x1d0>
            else if (state->head != Z_NULL)
    9602f93c:	f9401660 	ldr	x0, [x19, #40]
    9602f940:	b4fff920 	cbz	x0, 9602f864 <inflate+0x5d4>
                state->head->name = Z_NULL;
    9602f944:	f900141f 	str	xzr, [x0, #40]
    9602f948:	17ffffc7 	b	9602f864 <inflate+0x5d4>
            else if (state->head != Z_NULL)
    9602f94c:	f9401660 	ldr	x0, [x19, #40]
    9602f950:	b4fffde0 	cbz	x0, 9602f90c <inflate+0x67c>
                state->head->comment = Z_NULL;
    9602f954:	f9001c1f 	str	xzr, [x0, #56]
    9602f958:	17ffffed 	b	9602f90c <inflate+0x67c>
                NEEDBITS(16);
    9602f95c:	34ffcf7a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602f960:	38401781 	ldrb	w1, [x28], #1
    9602f964:	5100075a 	sub	w26, w26, #0x1
    9602f968:	9adb2021 	lsl	x1, x1, x27
    9602f96c:	1100237b 	add	w27, w27, #0x8
    9602f970:	8b010294 	add	x20, x20, x1
    9602f974:	17ffffea 	b	9602f91c <inflate+0x68c>
                INITBITS();
    9602f978:	5280001b 	mov	w27, #0x0                   	// #0
    9602f97c:	d2800014 	mov	x20, #0x0                   	// #0
            if (state->head != Z_NULL) {
    9602f980:	f9401661 	ldr	x1, [x19, #40]
    9602f984:	b40000a1 	cbz	x1, 9602f998 <inflate+0x708>
                state->head->hcrc = (int)((state->flags >> 9) & 1);
    9602f988:	d3492400 	ubfx	x0, x0, #9, #1
    9602f98c:	b9004420 	str	w0, [x1, #68]
                state->head->done = 1;
    9602f990:	52800020 	mov	w0, #0x1                   	// #1
    9602f994:	b9004820 	str	w0, [x1, #72]
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
    9602f998:	d2800002 	mov	x2, #0x0                   	// #0
    9602f99c:	d2800001 	mov	x1, #0x0                   	// #0
    9602f9a0:	52800000 	mov	w0, #0x0                   	// #0
    9602f9a4:	97ffdfda 	bl	9602790c <tegrabl_utils_crc32>
    9602f9a8:	2a0003e0 	mov	w0, w0
    9602f9ac:	f9000e60 	str	x0, [x19, #24]
    9602f9b0:	f9003320 	str	x0, [x25, #96]
                state->mode = TYPE;
    9602f9b4:	52800160 	mov	w0, #0xb                   	// #11
    9602f9b8:	17fffe7c 	b	9602f3a8 <inflate+0x118>
            NEEDBITS(32);
    9602f9bc:	34ffcc7a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602f9c0:	38401780 	ldrb	w0, [x28], #1
    9602f9c4:	5100075a 	sub	w26, w26, #0x1
    9602f9c8:	9adb2000 	lsl	x0, x0, x27
    9602f9cc:	1100237b 	add	w27, w27, #0x8
    9602f9d0:	8b000294 	add	x20, x20, x0
    9602f9d4:	71007f7f 	cmp	w27, #0x1f
    9602f9d8:	54ffff29 	b.ls	9602f9bc <inflate+0x72c>  // b.plast
            strm->adler = state->check = REVERSE(hold);
    9602f9dc:	d348fe81 	lsr	x1, x20, #8
    9602f9e0:	53187e80 	lsr	w0, w20, #24
    9602f9e4:	92781c21 	and	x1, x1, #0xff00
            INITBITS();
    9602f9e8:	5280001b 	mov	w27, #0x0                   	// #0
            strm->adler = state->check = REVERSE(hold);
    9602f9ec:	aa010000 	orr	x0, x0, x1
    9602f9f0:	d378de81 	lsl	x1, x20, #8
    9602f9f4:	92701c21 	and	x1, x1, #0xff0000
    9602f9f8:	53081e94 	lsl	w20, w20, #24
    9602f9fc:	8b140034 	add	x20, x1, x20
    9602fa00:	8b140014 	add	x20, x0, x20
    9602fa04:	f9000e74 	str	x20, [x19, #24]
    9602fa08:	f9003334 	str	x20, [x25, #96]
            state->mode = DICT;
    9602fa0c:	52800140 	mov	w0, #0xa                   	// #10
            INITBITS();
    9602fa10:	d2800014 	mov	x20, #0x0                   	// #0
            state->mode = DICT;
    9602fa14:	b9000260 	str	w0, [x19]
            if (state->havedict == 0) {
    9602fa18:	b9400e60 	ldr	w0, [x19, #12]
    9602fa1c:	35000200 	cbnz	w0, 9602fa5c <inflate+0x7cc>
                RESTORE();
    9602fa20:	f900033c 	str	x28, [x25]
                return Z_NEED_DICT;
    9602fa24:	52800056 	mov	w22, #0x2                   	// #2
                RESTORE();
    9602fa28:	b9000b3a 	str	w26, [x25, #8]
    9602fa2c:	f9000f37 	str	x23, [x25, #24]
    9602fa30:	b9002335 	str	w21, [x25, #32]
    9602fa34:	f9002674 	str	x20, [x19, #72]
    9602fa38:	b900527b 	str	w27, [x19, #80]
                      (state->mode == TYPE ? 128 : 0) +
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
        ret = Z_BUF_ERROR;
    return ret;
}
    9602fa3c:	2a1603e0 	mov	w0, w22
    9602fa40:	a94153f3 	ldp	x19, x20, [sp, #16]
    9602fa44:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9602fa48:	a94363f7 	ldp	x23, x24, [sp, #48]
    9602fa4c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9602fa50:	a94573fb 	ldp	x27, x28, [sp, #80]
    9602fa54:	a8ca7bfd 	ldp	x29, x30, [sp], #160
    9602fa58:	d65f03c0 	ret
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
    9602fa5c:	52800002 	mov	w2, #0x0                   	// #0
    9602fa60:	d2800001 	mov	x1, #0x0                   	// #0
    9602fa64:	d2800000 	mov	x0, #0x0                   	// #0
    9602fa68:	97fffa4e 	bl	9602e3a0 <adler32>
    9602fa6c:	f9000e60 	str	x0, [x19, #24]
    9602fa70:	f9003320 	str	x0, [x25, #96]
            state->mode = TYPE;
    9602fa74:	52800160 	mov	w0, #0xb                   	// #11
    9602fa78:	b9000260 	str	w0, [x19]
            if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;
    9602fa7c:	b9408fa0 	ldr	w0, [x29, #140]
    9602fa80:	51001400 	sub	w0, w0, #0x5
    9602fa84:	7100041f 	cmp	w0, #0x1
    9602fa88:	54ffc609 	b.ls	9602f348 <inflate+0xb8>  // b.plast
            if (state->last) {
    9602fa8c:	b9400660 	ldr	w0, [x19, #4]
    9602fa90:	34000180 	cbz	w0, 9602fac0 <inflate+0x830>
                BYTEBITS();
    9602fa94:	12000b60 	and	w0, w27, #0x7
    9602fa98:	121d737b 	and	w27, w27, #0xfffffff8
    9602fa9c:	9ac02694 	lsr	x20, x20, x0
                state->mode = CHECK;
    9602faa0:	52800340 	mov	w0, #0x1a                  	// #26
    9602faa4:	17fffe41 	b	9602f3a8 <inflate+0x118>
            NEEDBITS(3);
    9602faa8:	34ffc51a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602faac:	38401780 	ldrb	w0, [x28], #1
    9602fab0:	5100075a 	sub	w26, w26, #0x1
    9602fab4:	9adb2000 	lsl	x0, x0, x27
    9602fab8:	1100237b 	add	w27, w27, #0x8
    9602fabc:	8b000294 	add	x20, x20, x0
    9602fac0:	71000b7f 	cmp	w27, #0x2
    9602fac4:	54ffff29 	b.ls	9602faa8 <inflate+0x818>  // b.plast
            state->last = BITS(1);
    9602fac8:	12000280 	and	w0, w20, #0x1
    9602facc:	b9000660 	str	w0, [x19, #4]
            switch (BITS(2)) {
    9602fad0:	53010a80 	ubfx	w0, w20, #1, #2
    9602fad4:	51000f66 	sub	w6, w27, #0x3
    9602fad8:	7100081f 	cmp	w0, #0x2
    9602fadc:	d343fe94 	lsr	x20, x20, #3
    9602fae0:	54000320 	b.eq	9602fb44 <inflate+0x8b4>  // b.none
    9602fae4:	71000c1f 	cmp	w0, #0x3
    9602fae8:	54000320 	b.eq	9602fb4c <inflate+0x8bc>  // b.none
    9602faec:	7100041f 	cmp	w0, #0x1
    9602faf0:	540000a0 	b.eq	9602fb04 <inflate+0x874>  // b.none
                state->mode = STORED;
    9602faf4:	528001a0 	mov	w0, #0xd                   	// #13
                state->mode = BAD;
    9602faf8:	b9000260 	str	w0, [x19]
            DROPBITS(2);
    9602fafc:	2a0603fb 	mov	w27, w6
            break;
    9602fb00:	17fffe09 	b	9602f324 <inflate+0x94>
    state->lencode = lenfix;
    9602fb04:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fb08:	913c4000 	add	x0, x0, #0xf10
    9602fb0c:	f9003260 	str	x0, [x19, #96]
    state->distcode = distfix;
    9602fb10:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fb14:	9133d800 	add	x0, x0, #0xcf6
    9602fb18:	f9003660 	str	x0, [x19, #104]
    state->lenbits = 9;
    9602fb1c:	d2800120 	mov	x0, #0x9                   	// #9
    9602fb20:	f2c000a0 	movk	x0, #0x5, lsl #32
    9602fb24:	f9003a60 	str	x0, [x19, #112]
                state->mode = LEN_;             /* decode codes */
    9602fb28:	52800260 	mov	w0, #0x13                  	// #19
    9602fb2c:	b9000260 	str	w0, [x19]
                if (flush == Z_TREES) {
    9602fb30:	b9408fa0 	ldr	w0, [x29, #140]
    9602fb34:	7100181f 	cmp	w0, #0x6
    9602fb38:	54fffe21 	b.ne	9602fafc <inflate+0x86c>  // b.any
                    DROPBITS(2);
    9602fb3c:	2a0603fb 	mov	w27, w6
                    goto inf_leave;
    9602fb40:	17fffe02 	b	9602f348 <inflate+0xb8>
                state->mode = TABLE;
    9602fb44:	52800200 	mov	w0, #0x10                  	// #16
    9602fb48:	17ffffec 	b	9602faf8 <inflate+0x868>
                strm->msg = (char *)"invalid block type";
    9602fb4c:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fb50:	91381800 	add	x0, x0, #0xe06
    9602fb54:	f9001b20 	str	x0, [x25, #48]
                state->mode = BAD;
    9602fb58:	528003a0 	mov	w0, #0x1d                  	// #29
    9602fb5c:	17ffffe7 	b	9602faf8 <inflate+0x868>
            BYTEBITS();                         /* go to byte boundary */
    9602fb60:	12000b60 	and	w0, w27, #0x7
    9602fb64:	121d737b 	and	w27, w27, #0xfffffff8
    9602fb68:	9ac02694 	lsr	x20, x20, x0
            NEEDBITS(32);
    9602fb6c:	71007f7f 	cmp	w27, #0x1f
    9602fb70:	54000129 	b.ls	9602fb94 <inflate+0x904>  // b.plast
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
    9602fb74:	d350fe80 	lsr	x0, x20, #16
    9602fb78:	92403e81 	and	x1, x20, #0xffff
    9602fb7c:	d2403c00 	eor	x0, x0, #0xffff
    9602fb80:	eb00003f 	cmp	x1, x0
    9602fb84:	54000160 	b.eq	9602fbb0 <inflate+0x920>  // b.none
                strm->msg = (char *)"invalid stored block lengths";
    9602fb88:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fb8c:	91386400 	add	x0, x0, #0xe19
    9602fb90:	17fffe34 	b	9602f460 <inflate+0x1d0>
            NEEDBITS(32);
    9602fb94:	34ffbdba 	cbz	w26, 9602f348 <inflate+0xb8>
    9602fb98:	38401780 	ldrb	w0, [x28], #1
    9602fb9c:	5100075a 	sub	w26, w26, #0x1
    9602fba0:	9adb2000 	lsl	x0, x0, x27
    9602fba4:	1100237b 	add	w27, w27, #0x8
    9602fba8:	8b000294 	add	x20, x20, x0
    9602fbac:	17fffff0 	b	9602fb6c <inflate+0x8dc>
            state->mode = COPY_;
    9602fbb0:	528001c0 	mov	w0, #0xe                   	// #14
    9602fbb4:	b9000260 	str	w0, [x19]
            state->length = (unsigned)hold & 0xffff;
    9602fbb8:	b9005661 	str	w1, [x19, #84]
            INITBITS();
    9602fbbc:	5280001b 	mov	w27, #0x0                   	// #0
            if (flush == Z_TREES) goto inf_leave;
    9602fbc0:	b9408fa0 	ldr	w0, [x29, #140]
            INITBITS();
    9602fbc4:	d2800014 	mov	x20, #0x0                   	// #0
            if (flush == Z_TREES) goto inf_leave;
    9602fbc8:	7100181f 	cmp	w0, #0x6
    9602fbcc:	54ffbbe0 	b.eq	9602f348 <inflate+0xb8>  // b.none
            state->mode = COPY;
    9602fbd0:	528001e0 	mov	w0, #0xf                   	// #15
    9602fbd4:	b9000260 	str	w0, [x19]
            copy = state->length;
    9602fbd8:	b9405663 	ldr	w3, [x19, #84]
            if (copy) {
    9602fbdc:	34ffeec3 	cbz	w3, 9602f9b4 <inflate+0x724>
    9602fbe0:	6b0302bf 	cmp	w21, w3
    9602fbe4:	1a8392a3 	csel	w3, w21, w3, ls  // ls = plast
    9602fbe8:	6b1a007f 	cmp	w3, w26
    9602fbec:	1a9a9063 	csel	w3, w3, w26, ls  // ls = plast
                if (copy == 0) goto inf_leave;
    9602fbf0:	34ffbac3 	cbz	w3, 9602f348 <inflate+0xb8>
                zmemcpy(put, next, copy);
    9602fbf4:	2a0303e4 	mov	w4, w3
    9602fbf8:	aa1c03e1 	mov	x1, x28
    9602fbfc:	aa0403e2 	mov	x2, x4
    9602fc00:	aa1703e0 	mov	x0, x23
    9602fc04:	b9006ba3 	str	w3, [x29, #104]
    9602fc08:	f9003ba4 	str	x4, [x29, #112]
    9602fc0c:	97ffe8c6 	bl	96029f24 <memcpy>
                have -= copy;
    9602fc10:	b9406ba3 	ldr	w3, [x29, #104]
                state->length -= copy;
    9602fc14:	b9405660 	ldr	w0, [x19, #84]
                next += copy;
    9602fc18:	f9403ba4 	ldr	x4, [x29, #112]
                have -= copy;
    9602fc1c:	4b03035a 	sub	w26, w26, w3
                left -= copy;
    9602fc20:	4b0302b5 	sub	w21, w21, w3
                state->length -= copy;
    9602fc24:	4b030003 	sub	w3, w0, w3
                next += copy;
    9602fc28:	8b04039c 	add	x28, x28, x4
                put += copy;
    9602fc2c:	8b0402f7 	add	x23, x23, x4
                state->length -= copy;
    9602fc30:	b9005663 	str	w3, [x19, #84]
                break;
    9602fc34:	17fffdbc 	b	9602f324 <inflate+0x94>
            NEEDBITS(14);
    9602fc38:	34ffb89a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602fc3c:	38401780 	ldrb	w0, [x28], #1
    9602fc40:	5100075a 	sub	w26, w26, #0x1
    9602fc44:	9adb2000 	lsl	x0, x0, x27
    9602fc48:	1100237b 	add	w27, w27, #0x8
    9602fc4c:	8b000294 	add	x20, x20, x0
    9602fc50:	7100377f 	cmp	w27, #0xd
    9602fc54:	54ffff29 	b.ls	9602fc38 <inflate+0x9a8>  // b.plast
            state->nlen = BITS(5) + 257;
    9602fc58:	12001281 	and	w1, w20, #0x1f
            state->ndist = BITS(5) + 1;
    9602fc5c:	53052680 	ubfx	w0, w20, #5, #5
            state->ncode = BITS(4) + 4;
    9602fc60:	530a3682 	ubfx	w2, w20, #10, #4
            state->nlen = BITS(5) + 257;
    9602fc64:	11040421 	add	w1, w1, #0x101
            state->ndist = BITS(5) + 1;
    9602fc68:	11000400 	add	w0, w0, #0x1
            state->ncode = BITS(4) + 4;
    9602fc6c:	11001042 	add	w2, w2, #0x4
            state->nlen = BITS(5) + 257;
    9602fc70:	290f0662 	stp	w2, w1, [x19, #120]
            DROPBITS(4);
    9602fc74:	d34efe94 	lsr	x20, x20, #14
            state->ndist = BITS(5) + 1;
    9602fc78:	b9008260 	str	w0, [x19, #128]
            DROPBITS(4);
    9602fc7c:	51003b7b 	sub	w27, w27, #0xe
            if (state->nlen > 286 || state->ndist > 30) {
    9602fc80:	7104783f 	cmp	w1, #0x11e
    9602fc84:	54000068 	b.hi	9602fc90 <inflate+0xa00>  // b.pmore
    9602fc88:	7100781f 	cmp	w0, #0x1e
    9602fc8c:	54000089 	b.ls	9602fc9c <inflate+0xa0c>  // b.plast
                strm->msg = (char *)"too many length or distance symbols";
    9602fc90:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fc94:	9138d800 	add	x0, x0, #0xe36
    9602fc98:	17fffdf2 	b	9602f460 <inflate+0x1d0>
            state->mode = LENLENS;
    9602fc9c:	52800220 	mov	w0, #0x11                  	// #17
    9602fca0:	b9000260 	str	w0, [x19]
            state->have = 0;
    9602fca4:	b900867f 	str	wzr, [x19, #132]
            while (state->have < state->ncode) {
    9602fca8:	b9407a62 	ldr	w2, [x19, #120]
    9602fcac:	14000012 	b	9602fcf4 <inflate+0xa64>
                NEEDBITS(3);
    9602fcb0:	34ffb4da 	cbz	w26, 9602f348 <inflate+0xb8>
    9602fcb4:	38401781 	ldrb	w1, [x28], #1
    9602fcb8:	5100075a 	sub	w26, w26, #0x1
    9602fcbc:	9adb2021 	lsl	x1, x1, x27
    9602fcc0:	1100237b 	add	w27, w27, #0x8
    9602fcc4:	8b010294 	add	x20, x20, x1
    9602fcc8:	71000b7f 	cmp	w27, #0x2
    9602fccc:	54ffff29 	b.ls	9602fcb0 <inflate+0xa20>  // b.plast
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
    9602fcd0:	11000401 	add	w1, w0, #0x1
    9602fcd4:	b9008661 	str	w1, [x19, #132]
    9602fcd8:	f94043a1 	ldr	x1, [x29, #128]
                DROPBITS(3);
    9602fcdc:	51000f7b 	sub	w27, w27, #0x3
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
    9602fce0:	78605820 	ldrh	w0, [x1, w0, uxtw #1]
    9602fce4:	12000a81 	and	w1, w20, #0x7
                DROPBITS(3);
    9602fce8:	d343fe94 	lsr	x20, x20, #3
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
    9602fcec:	91012000 	add	x0, x0, #0x48
    9602fcf0:	78207a61 	strh	w1, [x19, x0, lsl #1]
            while (state->have < state->ncode) {
    9602fcf4:	b9408660 	ldr	w0, [x19, #132]
    9602fcf8:	6b02001f 	cmp	w0, w2
    9602fcfc:	54fffe63 	b.cc	9602fcc8 <inflate+0xa38>  // b.lo, b.ul, b.last
            while (state->have < 19)
    9602fd00:	b9408660 	ldr	w0, [x19, #132]
    9602fd04:	7100481f 	cmp	w0, #0x12
    9602fd08:	54000249 	b.ls	9602fd50 <inflate+0xac0>  // b.plast
            state->next = state->codes;
    9602fd0c:	91154260 	add	x0, x19, #0x550
            state->lencode = (code const FAR *)(state->next);
    9602fd10:	f9003260 	str	x0, [x19, #96]
            state->next = state->codes;
    9602fd14:	f9004660 	str	x0, [x19, #136]
            state->lenbits = 7;
    9602fd18:	528000e0 	mov	w0, #0x7                   	// #7
    9602fd1c:	b9007260 	str	w0, [x19, #112]
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
    9602fd20:	910c4265 	add	x5, x19, #0x310
    9602fd24:	9101c264 	add	x4, x19, #0x70
    9602fd28:	91022263 	add	x3, x19, #0x88
    9602fd2c:	52800262 	mov	w2, #0x13                  	// #19
    9602fd30:	91024261 	add	x1, x19, #0x90
    9602fd34:	52800000 	mov	w0, #0x0                   	// #0
    9602fd38:	97fffb7e 	bl	9602eb30 <inflate_table>
    9602fd3c:	2a0003f6 	mov	w22, w0
            if (ret) {
    9602fd40:	34000160 	cbz	w0, 9602fd6c <inflate+0xadc>
                strm->msg = (char *)"invalid code lengths set";
    9602fd44:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fd48:	91396800 	add	x0, x0, #0xe5a
    9602fd4c:	17fffdc5 	b	9602f460 <inflate+0x1d0>
                state->lens[order[state->have++]] = 0;
    9602fd50:	11000401 	add	w1, w0, #0x1
    9602fd54:	b9008661 	str	w1, [x19, #132]
    9602fd58:	f94043a1 	ldr	x1, [x29, #128]
    9602fd5c:	78605820 	ldrh	w0, [x1, w0, uxtw #1]
    9602fd60:	91012000 	add	x0, x0, #0x48
    9602fd64:	78207a7f 	strh	wzr, [x19, x0, lsl #1]
    9602fd68:	17ffffe6 	b	9602fd00 <inflate+0xa70>
            state->mode = CODELENS;
    9602fd6c:	52800240 	mov	w0, #0x12                  	// #18
    9602fd70:	b9000260 	str	w0, [x19]
            state->have = 0;
    9602fd74:	b900867f 	str	wzr, [x19, #132]
            while (state->have < state->nlen + state->ndist) {
    9602fd78:	294f9262 	ldp	w2, w4, [x19, #124]
                    here = state->lencode[BITS(state->lenbits)];
    9602fd7c:	1280000a 	mov	w10, #0xffffffff            	// #-1
                        DROPBITS(7);
    9602fd80:	128000cb 	mov	w11, #0xfffffff9            	// #-7
                        DROPBITS(3);
    9602fd84:	1280004c 	mov	w12, #0xfffffffd            	// #-3
            while (state->have < state->nlen + state->ndist) {
    9602fd88:	0b040044 	add	w4, w2, w4
    9602fd8c:	1400002e 	b	9602fe44 <inflate+0xbb4>
                    here = state->lencode[BITS(state->lenbits)];
    9602fd90:	794004a1 	ldrh	w1, [x5, #2]
                if (here.val < 16) {
    9602fd94:	71003c3f 	cmp	w1, #0xf
    9602fd98:	54004409 	b.ls	96030618 <inflate+0x1388>  // b.plast
                    if (here.val == 16) {
    9602fd9c:	7100403f 	cmp	w1, #0x10
    9602fda0:	54000781 	b.ne	9602fe90 <inflate+0xc00>  // b.any
                        NEEDBITS(here.bits + 2);
    9602fda4:	11000805 	add	w5, w0, #0x2
    9602fda8:	6b1b00bf 	cmp	w5, w27
    9602fdac:	54000228 	b.hi	9602fdf0 <inflate+0xb60>  // b.pmore
                        DROPBITS(here.bits);
    9602fdb0:	9ac02694 	lsr	x20, x20, x0
    9602fdb4:	4b00037b 	sub	w27, w27, w0
                        if (state->have == 0) {
    9602fdb8:	350002a3 	cbnz	w3, 9602fe0c <inflate+0xb7c>
                        strm->msg = (char *)"invalid bit length repeat";
    9602fdbc:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fdc0:	9139cc00 	add	x0, x0, #0xe73
    9602fdc4:	f9001b20 	str	x0, [x25, #48]
                        state->mode = BAD;
    9602fdc8:	528003a0 	mov	w0, #0x1d                  	// #29
    9602fdcc:	b9000260 	str	w0, [x19]
            if (state->mode == BAD) break;
    9602fdd0:	b9400260 	ldr	w0, [x19]
    9602fdd4:	7100741f 	cmp	w0, #0x1d
    9602fdd8:	54ffaa60 	b.eq	9602f324 <inflate+0x94>  // b.none
            if (state->lens[256] == 0) {
    9602fddc:	79452260 	ldrh	w0, [x19, #656]
    9602fde0:	35000aa0 	cbnz	w0, 9602ff34 <inflate+0xca4>
                strm->msg = (char *)"invalid code -- missing end-of-block";
    9602fde4:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602fde8:	913a3400 	add	x0, x0, #0xe8d
    9602fdec:	17fffd9d 	b	9602f460 <inflate+0x1d0>
                        NEEDBITS(here.bits + 2);
    9602fdf0:	34ffaada 	cbz	w26, 9602f348 <inflate+0xb8>
    9602fdf4:	38401781 	ldrb	w1, [x28], #1
    9602fdf8:	5100075a 	sub	w26, w26, #0x1
    9602fdfc:	9adb2021 	lsl	x1, x1, x27
    9602fe00:	1100237b 	add	w27, w27, #0x8
    9602fe04:	8b010294 	add	x20, x20, x1
    9602fe08:	17ffffe8 	b	9602fda8 <inflate+0xb18>
                        len = state->lens[state->have - 1];
    9602fe0c:	51000460 	sub	w0, w3, #0x1
                        copy = 3 + BITS(2);
    9602fe10:	12000681 	and	w1, w20, #0x3
                        len = state->lens[state->have - 1];
    9602fe14:	91012000 	add	x0, x0, #0x48
                        copy = 3 + BITS(2);
    9602fe18:	11000c21 	add	w1, w1, #0x3
                        DROPBITS(2);
    9602fe1c:	d342fe94 	lsr	x20, x20, #2
    9602fe20:	51000b7b 	sub	w27, w27, #0x2
                        len = state->lens[state->have - 1];
    9602fe24:	78607a65 	ldrh	w5, [x19, x0, lsl #1]
                    if (state->have + copy > state->nlen + state->ndist) {
    9602fe28:	0b010063 	add	w3, w3, w1
    9602fe2c:	6b04007f 	cmp	w3, w4
    9602fe30:	54fffc68 	b.hi	9602fdbc <inflate+0xb2c>  // b.pmore
                    while (copy--)
    9602fe34:	51000421 	sub	w1, w1, #0x1
    9602fe38:	b9408660 	ldr	w0, [x19, #132]
    9602fe3c:	3100043f 	cmn	w1, #0x1
    9602fe40:	54000701 	b.ne	9602ff20 <inflate+0xc90>  // b.any
            while (state->have < state->nlen + state->ndist) {
    9602fe44:	b9408663 	ldr	w3, [x19, #132]
    9602fe48:	6b04007f 	cmp	w3, w4
    9602fe4c:	54fffc22 	b.cs	9602fdd0 <inflate+0xb40>  // b.hs, b.nlast
                    here = state->lencode[BITS(state->lenbits)];
    9602fe50:	b9407261 	ldr	w1, [x19, #112]
    9602fe54:	f940326d 	ldr	x13, [x19, #96]
    9602fe58:	1ac12141 	lsl	w1, w10, w1
    9602fe5c:	2a2103e1 	mvn	w1, w1
    9602fe60:	0a140025 	and	w5, w1, w20
    9602fe64:	8b0509a5 	add	x5, x13, x5, lsl #2
    9602fe68:	394004a0 	ldrb	w0, [x5, #1]
                    if ((unsigned)(here.bits) <= bits) break;
    9602fe6c:	6b1b001f 	cmp	w0, w27
    9602fe70:	54fff909 	b.ls	9602fd90 <inflate+0xb00>  // b.plast
                    PULLBYTE();
    9602fe74:	34ffa6ba 	cbz	w26, 9602f348 <inflate+0xb8>
    9602fe78:	38401780 	ldrb	w0, [x28], #1
    9602fe7c:	5100075a 	sub	w26, w26, #0x1
    9602fe80:	9adb2000 	lsl	x0, x0, x27
    9602fe84:	1100237b 	add	w27, w27, #0x8
    9602fe88:	8b000294 	add	x20, x20, x0
                    here = state->lencode[BITS(state->lenbits)];
    9602fe8c:	17fffff5 	b	9602fe60 <inflate+0xbd0>
                    else if (here.val == 17) {
    9602fe90:	7100443f 	cmp	w1, #0x11
    9602fe94:	54000181 	b.ne	9602fec4 <inflate+0xc34>  // b.any
                        NEEDBITS(here.bits + 3);
    9602fe98:	11000c05 	add	w5, w0, #0x3
    9602fe9c:	6b1b00bf 	cmp	w5, w27
    9602fea0:	54000248 	b.hi	9602fee8 <inflate+0xc58>  // b.pmore
                        DROPBITS(here.bits);
    9602fea4:	9ac02694 	lsr	x20, x20, x0
                        copy = 3 + BITS(3);
    9602fea8:	12000a81 	and	w1, w20, #0x7
    9602feac:	11000c21 	add	w1, w1, #0x3
                        DROPBITS(3);
    9602feb0:	d343fe94 	lsr	x20, x20, #3
    9602feb4:	4b000180 	sub	w0, w12, w0
                        DROPBITS(7);
    9602feb8:	0b00037b 	add	w27, w27, w0
                        len = 0;
    9602febc:	52800005 	mov	w5, #0x0                   	// #0
    9602fec0:	17ffffda 	b	9602fe28 <inflate+0xb98>
                        NEEDBITS(here.bits + 7);
    9602fec4:	11001c05 	add	w5, w0, #0x7
    9602fec8:	6b1b00bf 	cmp	w5, w27
    9602fecc:	540001c8 	b.hi	9602ff04 <inflate+0xc74>  // b.pmore
                        DROPBITS(here.bits);
    9602fed0:	9ac02694 	lsr	x20, x20, x0
                        copy = 11 + BITS(7);
    9602fed4:	12001a81 	and	w1, w20, #0x7f
    9602fed8:	11002c21 	add	w1, w1, #0xb
                        DROPBITS(7);
    9602fedc:	d347fe94 	lsr	x20, x20, #7
    9602fee0:	4b000160 	sub	w0, w11, w0
    9602fee4:	17fffff5 	b	9602feb8 <inflate+0xc28>
                        NEEDBITS(here.bits + 3);
    9602fee8:	34ffa31a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602feec:	38401781 	ldrb	w1, [x28], #1
    9602fef0:	5100075a 	sub	w26, w26, #0x1
    9602fef4:	9adb2021 	lsl	x1, x1, x27
    9602fef8:	1100237b 	add	w27, w27, #0x8
    9602fefc:	8b010294 	add	x20, x20, x1
    9602ff00:	17ffffe7 	b	9602fe9c <inflate+0xc0c>
                        NEEDBITS(here.bits + 7);
    9602ff04:	34ffa23a 	cbz	w26, 9602f348 <inflate+0xb8>
    9602ff08:	38401781 	ldrb	w1, [x28], #1
    9602ff0c:	5100075a 	sub	w26, w26, #0x1
    9602ff10:	9adb2021 	lsl	x1, x1, x27
    9602ff14:	1100237b 	add	w27, w27, #0x8
    9602ff18:	8b010294 	add	x20, x20, x1
    9602ff1c:	17ffffeb 	b	9602fec8 <inflate+0xc38>
                        state->lens[state->have++] = (unsigned short)len;
    9602ff20:	11000403 	add	w3, w0, #0x1
    9602ff24:	8b204660 	add	x0, x19, w0, uxtw #1
    9602ff28:	b9008663 	str	w3, [x19, #132]
    9602ff2c:	79012005 	strh	w5, [x0, #144]
    9602ff30:	17ffffc1 	b	9602fe34 <inflate+0xba4>
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
    9602ff34:	9102426a 	add	x10, x19, #0x90
    9602ff38:	9102226b 	add	x11, x19, #0x88
                                &(state->lenbits), state->work);
    9602ff3c:	910c426c 	add	x12, x19, #0x310
            state->next = state->codes;
    9602ff40:	91154260 	add	x0, x19, #0x550
            state->lencode = (code const FAR *)(state->next);
    9602ff44:	f9003260 	str	x0, [x19, #96]
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
    9602ff48:	aa0c03e5 	mov	x5, x12
            state->next = state->codes;
    9602ff4c:	f9004660 	str	x0, [x19, #136]
            state->lenbits = 9;
    9602ff50:	52800120 	mov	w0, #0x9                   	// #9
    9602ff54:	b9007260 	str	w0, [x19, #112]
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
    9602ff58:	aa0b03e3 	mov	x3, x11
    9602ff5c:	aa0a03e1 	mov	x1, x10
    9602ff60:	a9062fac 	stp	x12, x11, [x29, #96]
    9602ff64:	f9003baa 	str	x10, [x29, #112]
    9602ff68:	9101c264 	add	x4, x19, #0x70
    9602ff6c:	52800020 	mov	w0, #0x1                   	// #1
    9602ff70:	97fffaf0 	bl	9602eb30 <inflate_table>
            if (ret) {
    9602ff74:	a9462fac 	ldp	x12, x11, [x29, #96]
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
    9602ff78:	2a0003f6 	mov	w22, w0
            if (ret) {
    9602ff7c:	f9403baa 	ldr	x10, [x29, #112]
    9602ff80:	34000080 	cbz	w0, 9602ff90 <inflate+0xd00>
                strm->msg = (char *)"invalid literal/lengths set";
    9602ff84:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602ff88:	913ac800 	add	x0, x0, #0xeb2
    9602ff8c:	17fffd35 	b	9602f460 <inflate+0x1d0>
            state->distbits = 6;
    9602ff90:	aa1303e4 	mov	x4, x19
            state->distcode = (code const FAR *)(state->next);
    9602ff94:	f9404660 	ldr	x0, [x19, #136]
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
    9602ff98:	294f8a61 	ldp	w1, w2, [x19, #124]
            state->distcode = (code const FAR *)(state->next);
    9602ff9c:	f9003660 	str	x0, [x19, #104]
            state->distbits = 6;
    9602ffa0:	528000c0 	mov	w0, #0x6                   	// #6
    9602ffa4:	b8074c80 	str	w0, [x4, #116]!
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
    9602ffa8:	aa0c03e5 	mov	x5, x12
    9602ffac:	aa0b03e3 	mov	x3, x11
    9602ffb0:	8b010541 	add	x1, x10, x1, lsl #1
    9602ffb4:	52800040 	mov	w0, #0x2                   	// #2
    9602ffb8:	97fffade 	bl	9602eb30 <inflate_table>
    9602ffbc:	2a0003f6 	mov	w22, w0
            if (ret) {
    9602ffc0:	34000080 	cbz	w0, 9602ffd0 <inflate+0xd40>
                strm->msg = (char *)"invalid distances set";
    9602ffc4:	d00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9602ffc8:	913b3800 	add	x0, x0, #0xece
    9602ffcc:	17fffd25 	b	9602f460 <inflate+0x1d0>
            state->mode = LEN_;
    9602ffd0:	52800260 	mov	w0, #0x13                  	// #19
    9602ffd4:	b9000260 	str	w0, [x19]
            if (flush == Z_TREES) goto inf_leave;
    9602ffd8:	b9408fa0 	ldr	w0, [x29, #140]
    9602ffdc:	7100181f 	cmp	w0, #0x6
    9602ffe0:	54ff9b40 	b.eq	9602f348 <inflate+0xb8>  // b.none
            state->mode = LEN;
    9602ffe4:	52800280 	mov	w0, #0x14                  	// #20
    9602ffe8:	b9000260 	str	w0, [x19]
            if (have >= 6 && left >= 258) {
    9602ffec:	710406bf 	cmp	w21, #0x101
    9602fff0:	7a458b40 	ccmp	w26, #0x5, #0x0, hi  // hi = pmore
    9602fff4:	540002c9 	b.ls	9603004c <inflate+0xdbc>  // b.plast
                RESTORE();
    9602fff8:	f900033c 	str	x28, [x25]
                inflate_fast(strm, out);
    9602fffc:	aa1903e0 	mov	x0, x25
                RESTORE();
    96030000:	b9000b3a 	str	w26, [x25, #8]
                inflate_fast(strm, out);
    96030004:	2a1803e1 	mov	w1, w24
                RESTORE();
    96030008:	f9000f37 	str	x23, [x25, #24]
    9603000c:	b9002335 	str	w21, [x25, #32]
    96030010:	f9002674 	str	x20, [x19, #72]
    96030014:	b900527b 	str	w27, [x19, #80]
                inflate_fast(strm, out);
    96030018:	97fff99e 	bl	9602e690 <inflate_fast>
                LOAD();
    9603001c:	b940527b 	ldr	w27, [x19, #80]
                if (state->mode == TYPE)
    96030020:	b9400260 	ldr	w0, [x19]
                LOAD();
    96030024:	b9400b3a 	ldr	w26, [x25, #8]
                if (state->mode == TYPE)
    96030028:	71002c1f 	cmp	w0, #0xb
                LOAD();
    9603002c:	b9402335 	ldr	w21, [x25, #32]
    96030030:	f9402674 	ldr	x20, [x19, #72]
    96030034:	f940033c 	ldr	x28, [x25]
    96030038:	f9400f37 	ldr	x23, [x25, #24]
                if (state->mode == TYPE)
    9603003c:	54ff9741 	b.ne	9602f324 <inflate+0x94>  // b.any
                    state->back = -1;
    96030040:	12800000 	mov	w0, #0xffffffff            	// #-1
    96030044:	b91be660 	str	w0, [x19, #7140]
    96030048:	17fffcb7 	b	9602f324 <inflate+0x94>
                here = state->lencode[BITS(state->lenbits)];
    9603004c:	b9407261 	ldr	w1, [x19, #112]
    96030050:	12800000 	mov	w0, #0xffffffff            	// #-1
    96030054:	f9403264 	ldr	x4, [x19, #96]
            state->back = 0;
    96030058:	b91be67f 	str	wzr, [x19, #7140]
                here = state->lencode[BITS(state->lenbits)];
    9603005c:	1ac12000 	lsl	w0, w0, w1
    96030060:	2a2003e0 	mvn	w0, w0
    96030064:	0a140001 	and	w1, w0, w20
    96030068:	8b010881 	add	x1, x4, x1, lsl #2
    9603006c:	39400422 	ldrb	w2, [x1, #1]
                if ((unsigned)(here.bits) <= bits) break;
    96030070:	2a0203e3 	mov	w3, w2
    96030074:	6b1b005f 	cmp	w2, w27
    96030078:	54000109 	b.ls	96030098 <inflate+0xe08>  // b.plast
                PULLBYTE();
    9603007c:	34ff967a 	cbz	w26, 9602f348 <inflate+0xb8>
    96030080:	38401781 	ldrb	w1, [x28], #1
    96030084:	5100075a 	sub	w26, w26, #0x1
    96030088:	9adb2021 	lsl	x1, x1, x27
    9603008c:	1100237b 	add	w27, w27, #0x8
    96030090:	8b010294 	add	x20, x20, x1
                here = state->lencode[BITS(state->lenbits)];
    96030094:	17fffff4 	b	96030064 <inflate+0xdd4>
    96030098:	39400020 	ldrb	w0, [x1]
    9603009c:	79400425 	ldrh	w5, [x1, #2]
            if (here.op && (here.op & 0xf0) == 0) {
    960300a0:	34000360 	cbz	w0, 9603010c <inflate+0xe7c>
    960300a4:	721c0c1f 	tst	w0, #0xf0
    960300a8:	54000321 	b.ne	9603010c <inflate+0xe7c>  // b.any
                            (BITS(last.bits + last.op) >> last.bits)];
    960300ac:	0b020000 	add	w0, w0, w2
    960300b0:	12800001 	mov	w1, #0xffffffff            	// #-1
    960300b4:	1ac02020 	lsl	w0, w1, w0
    960300b8:	2a2003e0 	mvn	w0, w0
    960300bc:	0a140001 	and	w1, w0, w20
    960300c0:	1ac22421 	lsr	w1, w1, w2
                    here = state->lencode[last.val +
    960300c4:	0b050021 	add	w1, w1, w5
    960300c8:	8b010881 	add	x1, x4, x1, lsl #2
    960300cc:	39400423 	ldrb	w3, [x1, #1]
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
    960300d0:	0b02006a 	add	w10, w3, w2
    960300d4:	6b1b015f 	cmp	w10, w27
    960300d8:	54000109 	b.ls	960300f8 <inflate+0xe68>  // b.plast
                    PULLBYTE();
    960300dc:	34ff937a 	cbz	w26, 9602f348 <inflate+0xb8>
    960300e0:	38401781 	ldrb	w1, [x28], #1
    960300e4:	5100075a 	sub	w26, w26, #0x1
    960300e8:	9adb2021 	lsl	x1, x1, x27
    960300ec:	1100237b 	add	w27, w27, #0x8
    960300f0:	8b010294 	add	x20, x20, x1
                    here = state->lencode[last.val +
    960300f4:	17fffff2 	b	960300bc <inflate+0xe2c>
                DROPBITS(last.bits);
    960300f8:	4b02037b 	sub	w27, w27, w2
                    here = state->lencode[last.val +
    960300fc:	39400020 	ldrb	w0, [x1]
    96030100:	79400425 	ldrh	w5, [x1, #2]
                DROPBITS(last.bits);
    96030104:	9ac22694 	lsr	x20, x20, x2
                state->back += last.bits;
    96030108:	b91be662 	str	w2, [x19, #7140]
            state->back += here.bits;
    9603010c:	b95be661 	ldr	w1, [x19, #7140]
            DROPBITS(here.bits);
    96030110:	9ac32694 	lsr	x20, x20, x3
    96030114:	4b03037b 	sub	w27, w27, w3
            state->length = (unsigned)here.val;
    96030118:	b9005665 	str	w5, [x19, #84]
            state->back += here.bits;
    9603011c:	0b030023 	add	w3, w1, w3
    96030120:	b91be663 	str	w3, [x19, #7140]
            if ((int)(here.op) == 0) {
    96030124:	35000060 	cbnz	w0, 96030130 <inflate+0xea0>
                state->mode = LIT;
    96030128:	52800320 	mov	w0, #0x19                  	// #25
    9603012c:	17fffc9f 	b	9602f3a8 <inflate+0x118>
            if (here.op & 32) {
    96030130:	36280080 	tbz	w0, #5, 96030140 <inflate+0xeb0>
                state->back = -1;
    96030134:	12800000 	mov	w0, #0xffffffff            	// #-1
    96030138:	b91be660 	str	w0, [x19, #7140]
    9603013c:	17fffe1e 	b	9602f9b4 <inflate+0x724>
            if (here.op & 64) {
    96030140:	36300080 	tbz	w0, #6, 96030150 <inflate+0xec0>
                strm->msg = (char *)"invalid literal/length code";
    96030144:	b00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96030148:	912e7800 	add	x0, x0, #0xb9e
    9603014c:	17fffcc5 	b	9602f460 <inflate+0x1d0>
            state->extra = (unsigned)(here.op) & 15;
    96030150:	12000c00 	and	w0, w0, #0xf
    96030154:	b9005e60 	str	w0, [x19, #92]
            state->mode = LENEXT;
    96030158:	528002a0 	mov	w0, #0x15                  	// #21
    9603015c:	b9000260 	str	w0, [x19]
            if (state->extra) {
    96030160:	b9405e60 	ldr	w0, [x19, #92]
    96030164:	350003a0 	cbnz	w0, 960301d8 <inflate+0xf48>
            state->was = state->length;
    96030168:	b9405660 	ldr	w0, [x19, #84]
    9603016c:	b91bea60 	str	w0, [x19, #7144]
            state->mode = DIST;
    96030170:	528002c0 	mov	w0, #0x16                  	// #22
    96030174:	b9000260 	str	w0, [x19]
                here = state->distcode[BITS(state->distbits)];
    96030178:	b9407661 	ldr	w1, [x19, #116]
    9603017c:	12800000 	mov	w0, #0xffffffff            	// #-1
    96030180:	f9403664 	ldr	x4, [x19, #104]
    96030184:	1ac12000 	lsl	w0, w0, w1
    96030188:	2a2003e0 	mvn	w0, w0
    9603018c:	0a140001 	and	w1, w0, w20
    96030190:	8b010881 	add	x1, x4, x1, lsl #2
    96030194:	39400422 	ldrb	w2, [x1, #1]
                if ((unsigned)(here.bits) <= bits) break;
    96030198:	2a0203e3 	mov	w3, w2
    9603019c:	6b1b005f 	cmp	w2, w27
    960301a0:	54000389 	b.ls	96030210 <inflate+0xf80>  // b.plast
                PULLBYTE();
    960301a4:	34ff8d3a 	cbz	w26, 9602f348 <inflate+0xb8>
    960301a8:	38401781 	ldrb	w1, [x28], #1
    960301ac:	5100075a 	sub	w26, w26, #0x1
    960301b0:	9adb2021 	lsl	x1, x1, x27
    960301b4:	1100237b 	add	w27, w27, #0x8
    960301b8:	8b010294 	add	x20, x20, x1
                here = state->distcode[BITS(state->distbits)];
    960301bc:	17fffff4 	b	9603018c <inflate+0xefc>
                NEEDBITS(state->extra);
    960301c0:	34ff8c5a 	cbz	w26, 9602f348 <inflate+0xb8>
    960301c4:	38401781 	ldrb	w1, [x28], #1
    960301c8:	5100075a 	sub	w26, w26, #0x1
    960301cc:	9adb2021 	lsl	x1, x1, x27
    960301d0:	1100237b 	add	w27, w27, #0x8
    960301d4:	8b010294 	add	x20, x20, x1
    960301d8:	6b1b001f 	cmp	w0, w27
    960301dc:	54ffff28 	b.hi	960301c0 <inflate+0xf30>  // b.pmore
                state->length += BITS(state->extra);
    960301e0:	b9405662 	ldr	w2, [x19, #84]
    960301e4:	12800001 	mov	w1, #0xffffffff            	// #-1
    960301e8:	1ac02021 	lsl	w1, w1, w0
    960301ec:	0a210281 	bic	w1, w20, w1
    960301f0:	0b010041 	add	w1, w2, w1
    960301f4:	b9005661 	str	w1, [x19, #84]
                state->back += state->extra;
    960301f8:	b95be661 	ldr	w1, [x19, #7140]
                DROPBITS(state->extra);
    960301fc:	9ac02694 	lsr	x20, x20, x0
    96030200:	4b00037b 	sub	w27, w27, w0
                state->back += state->extra;
    96030204:	0b000020 	add	w0, w1, w0
    96030208:	b91be660 	str	w0, [x19, #7140]
    9603020c:	17ffffd7 	b	96030168 <inflate+0xed8>
                here = state->distcode[BITS(state->distbits)];
    96030210:	39400020 	ldrb	w0, [x1]
    96030214:	79400425 	ldrh	w5, [x1, #2]
            if ((here.op & 0xf0) == 0) {
    96030218:	721c0c1f 	tst	w0, #0xf0
    9603021c:	54000361 	b.ne	96030288 <inflate+0xff8>  // b.any
                            (BITS(last.bits + last.op) >> last.bits)];
    96030220:	0b020000 	add	w0, w0, w2
    96030224:	12800001 	mov	w1, #0xffffffff            	// #-1
    96030228:	1ac02020 	lsl	w0, w1, w0
    9603022c:	2a2003e0 	mvn	w0, w0
    96030230:	0a140001 	and	w1, w0, w20
    96030234:	1ac22421 	lsr	w1, w1, w2
                    here = state->distcode[last.val +
    96030238:	0b050021 	add	w1, w1, w5
    9603023c:	8b010881 	add	x1, x4, x1, lsl #2
    96030240:	39400423 	ldrb	w3, [x1, #1]
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
    96030244:	0b02006a 	add	w10, w3, w2
    96030248:	6b1b015f 	cmp	w10, w27
    9603024c:	54000109 	b.ls	9603026c <inflate+0xfdc>  // b.plast
                    PULLBYTE();
    96030250:	34ff87da 	cbz	w26, 9602f348 <inflate+0xb8>
    96030254:	38401781 	ldrb	w1, [x28], #1
    96030258:	5100075a 	sub	w26, w26, #0x1
    9603025c:	9adb2021 	lsl	x1, x1, x27
    96030260:	1100237b 	add	w27, w27, #0x8
    96030264:	8b010294 	add	x20, x20, x1
                    here = state->distcode[last.val +
    96030268:	17fffff2 	b	96030230 <inflate+0xfa0>
    9603026c:	39400020 	ldrb	w0, [x1]
                DROPBITS(last.bits);
    96030270:	9ac22694 	lsr	x20, x20, x2
                    here = state->distcode[last.val +
    96030274:	79400425 	ldrh	w5, [x1, #2]
                DROPBITS(last.bits);
    96030278:	4b02037b 	sub	w27, w27, w2
                state->back += last.bits;
    9603027c:	b95be661 	ldr	w1, [x19, #7140]
    96030280:	0b020022 	add	w2, w1, w2
    96030284:	b91be662 	str	w2, [x19, #7140]
            state->back += here.bits;
    96030288:	b95be661 	ldr	w1, [x19, #7140]
            DROPBITS(here.bits);
    9603028c:	9ac32694 	lsr	x20, x20, x3
    96030290:	4b03037b 	sub	w27, w27, w3
            state->back += here.bits;
    96030294:	0b030023 	add	w3, w1, w3
    96030298:	b91be663 	str	w3, [x19, #7140]
            if (here.op & 64) {
    9603029c:	36300080 	tbz	w0, #6, 960302ac <inflate+0x101c>
                strm->msg = (char *)"invalid distance code";
    960302a0:	b00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    960302a4:	912e2000 	add	x0, x0, #0xb88
    960302a8:	17fffc6e 	b	9602f460 <inflate+0x1d0>
            state->extra = (unsigned)(here.op) & 15;
    960302ac:	12000c00 	and	w0, w0, #0xf
    960302b0:	290b0265 	stp	w5, w0, [x19, #88]
            state->mode = DISTEXT;
    960302b4:	528002e0 	mov	w0, #0x17                  	// #23
    960302b8:	b9000260 	str	w0, [x19]
            if (state->extra) {
    960302bc:	b9405e60 	ldr	w0, [x19, #92]
    960302c0:	340001c0 	cbz	w0, 960302f8 <inflate+0x1068>
                NEEDBITS(state->extra);
    960302c4:	6b1b001f 	cmp	w0, w27
    960302c8:	54000388 	b.hi	96030338 <inflate+0x10a8>  // b.pmore
                state->offset += BITS(state->extra);
    960302cc:	b9405a62 	ldr	w2, [x19, #88]
    960302d0:	12800001 	mov	w1, #0xffffffff            	// #-1
    960302d4:	1ac02021 	lsl	w1, w1, w0
    960302d8:	0a210281 	bic	w1, w20, w1
    960302dc:	0b010041 	add	w1, w2, w1
    960302e0:	b9005a61 	str	w1, [x19, #88]
                state->back += state->extra;
    960302e4:	b95be661 	ldr	w1, [x19, #7140]
                DROPBITS(state->extra);
    960302e8:	9ac02694 	lsr	x20, x20, x0
    960302ec:	4b00037b 	sub	w27, w27, w0
                state->back += state->extra;
    960302f0:	0b000020 	add	w0, w1, w0
    960302f4:	b91be660 	str	w0, [x19, #7140]
            state->mode = MATCH;
    960302f8:	52800300 	mov	w0, #0x18                  	// #24
    960302fc:	b9000260 	str	w0, [x19]
            if (left == 0) goto inf_leave;
    96030300:	34ff8255 	cbz	w21, 9602f348 <inflate+0xb8>
            if (state->offset > copy) {         /* copy from window */
    96030304:	b9405a61 	ldr	w1, [x19, #88]
            copy = out - left;
    96030308:	4b150300 	sub	w0, w24, w21
            if (state->offset > copy) {         /* copy from window */
    9603030c:	6b00003f 	cmp	w1, w0
    96030310:	540005e9 	b.ls	960303cc <inflate+0x113c>  // b.plast
                copy = state->offset - copy;
    96030314:	4b000021 	sub	w1, w1, w0
                if (copy > state->whave) {
    96030318:	b9403a60 	ldr	w0, [x19, #56]
    9603031c:	6b01001f 	cmp	w0, w1
    96030320:	540001a2 	b.cs	96030354 <inflate+0x10c4>  // b.hs, b.nlast
                    if (state->sane) {
    96030324:	b95be260 	ldr	w0, [x19, #7136]
    96030328:	34000160 	cbz	w0, 96030354 <inflate+0x10c4>
                        strm->msg = (char *)"invalid distance too far back";
    9603032c:	b00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    96030330:	912da800 	add	x0, x0, #0xb6a
    96030334:	17fffc4b 	b	9602f460 <inflate+0x1d0>
                NEEDBITS(state->extra);
    96030338:	34ff809a 	cbz	w26, 9602f348 <inflate+0xb8>
    9603033c:	38401781 	ldrb	w1, [x28], #1
    96030340:	5100075a 	sub	w26, w26, #0x1
    96030344:	9adb2021 	lsl	x1, x1, x27
    96030348:	1100237b 	add	w27, w27, #0x8
    9603034c:	8b010294 	add	x20, x20, x1
    96030350:	17ffffdd 	b	960302c4 <inflate+0x1034>
                if (copy > state->wnext) {
    96030354:	b9403e60 	ldr	w0, [x19, #60]
    96030358:	f9402262 	ldr	x2, [x19, #64]
    9603035c:	6b01001f 	cmp	w0, w1
    96030360:	54000062 	b.cs	9603036c <inflate+0x10dc>  // b.hs, b.nlast
                    copy -= state->wnext;
    96030364:	4b000021 	sub	w1, w1, w0
                    from = state->window + (state->wsize - copy);
    96030368:	b9403660 	ldr	w0, [x19, #52]
                    from = state->window + (state->wnext - copy);
    9603036c:	4b010000 	sub	w0, w0, w1
    96030370:	8b000042 	add	x2, x2, x0
    96030374:	b9405660 	ldr	w0, [x19, #84]
    96030378:	6b01001f 	cmp	w0, w1
    9603037c:	1a819000 	csel	w0, w0, w1, ls  // ls = plast
    96030380:	6b0002bf 	cmp	w21, w0
            state->length -= copy;
    96030384:	b9405661 	ldr	w1, [x19, #84]
    96030388:	1a8092a0 	csel	w0, w21, w0, ls  // ls = plast
    9603038c:	4b000021 	sub	w1, w1, w0
            left -= copy;
    96030390:	4b0002b5 	sub	w21, w21, w0
    96030394:	51000400 	sub	w0, w0, #0x1
            state->length -= copy;
    96030398:	b9005661 	str	w1, [x19, #84]
    9603039c:	91000400 	add	x0, x0, #0x1
    960303a0:	d2800001 	mov	x1, #0x0                   	// #0
                *put++ = *from++;
    960303a4:	38616843 	ldrb	w3, [x2, x1]
    960303a8:	38216ae3 	strb	w3, [x23, x1]
    960303ac:	91000421 	add	x1, x1, #0x1
            } while (--copy);
    960303b0:	eb01001f 	cmp	x0, x1
    960303b4:	54ffff81 	b.ne	960303a4 <inflate+0x1114>  // b.any
    960303b8:	8b0002f7 	add	x23, x23, x0
            if (state->length == 0) state->mode = LEN;
    960303bc:	b9405660 	ldr	w0, [x19, #84]
    960303c0:	35ff7b20 	cbnz	w0, 9602f324 <inflate+0x94>
    960303c4:	52800280 	mov	w0, #0x14                  	// #20
    960303c8:	17fffbf8 	b	9602f3a8 <inflate+0x118>
                from = put - state->offset;
    960303cc:	cb2142e2 	sub	x2, x23, w1, uxtw
                copy = state->length;
    960303d0:	b9405660 	ldr	w0, [x19, #84]
    960303d4:	17ffffeb 	b	96030380 <inflate+0x10f0>
            if (left == 0) goto inf_leave;
    960303d8:	34ff7b95 	cbz	w21, 9602f348 <inflate+0xb8>
            *put++ = (unsigned char)(state->length);
    960303dc:	b9405660 	ldr	w0, [x19, #84]
            left--;
    960303e0:	510006b5 	sub	w21, w21, #0x1
            *put++ = (unsigned char)(state->length);
    960303e4:	390002e0 	strb	w0, [x23]
    960303e8:	910006f7 	add	x23, x23, #0x1
            state->mode = LEN;
    960303ec:	52800280 	mov	w0, #0x14                  	// #20
    960303f0:	b9000260 	str	w0, [x19]
            break;
    960303f4:	17fffbcc 	b	9602f324 <inflate+0x94>
            if (state->wrap) {
    960303f8:	b9400a60 	ldr	w0, [x19, #8]
    960303fc:	35000220 	cbnz	w0, 96030440 <inflate+0x11b0>
            state->mode = LENGTH;
    96030400:	52800360 	mov	w0, #0x1b                  	// #27
    96030404:	b9000260 	str	w0, [x19]
            if (state->wrap && state->flags) {
    96030408:	b9400a60 	ldr	w0, [x19, #8]
    9603040c:	34000060 	cbz	w0, 96030418 <inflate+0x1188>
    96030410:	b9401260 	ldr	w0, [x19, #16]
    96030414:	35000800 	cbnz	w0, 96030514 <inflate+0x1284>
            state->mode = DONE;
    96030418:	52800380 	mov	w0, #0x1c                  	// #28
    9603041c:	b9000260 	str	w0, [x19]
            ret = Z_STREAM_END;
    96030420:	52800036 	mov	w22, #0x1                   	// #1
    96030424:	17fffbc9 	b	9602f348 <inflate+0xb8>
                NEEDBITS(32);
    96030428:	34ff791a 	cbz	w26, 9602f348 <inflate+0xb8>
    9603042c:	38401780 	ldrb	w0, [x28], #1
    96030430:	5100075a 	sub	w26, w26, #0x1
    96030434:	9adb2000 	lsl	x0, x0, x27
    96030438:	1100237b 	add	w27, w27, #0x8
    9603043c:	8b000294 	add	x20, x20, x0
    96030440:	71007f7f 	cmp	w27, #0x1f
    96030444:	54ffff29 	b.ls	96030428 <inflate+0x1198>  // b.plast
                strm->total_out += out;
    96030448:	f9401720 	ldr	x0, [x25, #40]
                out -= left;
    9603044c:	4b150303 	sub	w3, w24, w21
    96030450:	aa0303e2 	mov	x2, x3
                strm->total_out += out;
    96030454:	8b030000 	add	x0, x0, x3
    96030458:	f9001720 	str	x0, [x25, #40]
                state->total += out;
    9603045c:	f9401260 	ldr	x0, [x19, #32]
    96030460:	8b030000 	add	x0, x0, x3
    96030464:	f9001260 	str	x0, [x19, #32]
                if (out)
    96030468:	34000123 	cbz	w3, 9603048c <inflate+0x11fc>
                        UPDATE(state->check, put - out, out);
    9603046c:	b9401264 	ldr	w4, [x19, #16]
    96030470:	cb0302e1 	sub	x1, x23, x3
    96030474:	f9400e60 	ldr	x0, [x19, #24]
    96030478:	34000364 	cbz	w4, 960304e4 <inflate+0x1254>
    9603047c:	97ffdd24 	bl	9602790c <tegrabl_utils_crc32>
    96030480:	2a0003e0 	mov	w0, w0
                    strm->adler = state->check =
    96030484:	f9000e60 	str	x0, [x19, #24]
    96030488:	f9003320 	str	x0, [x25, #96]
                     state->flags ? hold :
    9603048c:	d348fe81 	lsr	x1, x20, #8
    96030490:	53187e80 	lsr	w0, w20, #24
    96030494:	92781c21 	and	x1, x1, #0xff00
    96030498:	53081e83 	lsl	w3, w20, #24
    9603049c:	aa010000 	orr	x0, x0, x1
    960304a0:	d378de81 	lsl	x1, x20, #8
    960304a4:	92701c21 	and	x1, x1, #0xff0000
    960304a8:	b9401262 	ldr	w2, [x19, #16]
    960304ac:	8b030021 	add	x1, x1, x3
    960304b0:	8b010000 	add	x0, x0, x1
    960304b4:	7100005f 	cmp	w2, #0x0
                if ((
    960304b8:	f9400e61 	ldr	x1, [x19, #24]
                     state->flags ? hold :
    960304bc:	9a940000 	csel	x0, x0, x20, eq  // eq = none
                if ((
    960304c0:	eb00003f 	cmp	x1, x0
    960304c4:	54000140 	b.eq	960304ec <inflate+0x125c>  // b.none
                    strm->msg = (char *)"incorrect data check";
    960304c8:	b00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    960304cc:	913b9000 	add	x0, x0, #0xee4
    960304d0:	f9001b20 	str	x0, [x25, #48]
                    break;
    960304d4:	2a1503f8 	mov	w24, w21
                    state->mode = BAD;
    960304d8:	528003a0 	mov	w0, #0x1d                  	// #29
    960304dc:	b9000260 	str	w0, [x19]
                    break;
    960304e0:	17fffb91 	b	9602f324 <inflate+0x94>
                        UPDATE(state->check, put - out, out);
    960304e4:	97fff7af 	bl	9602e3a0 <adler32>
    960304e8:	17ffffe7 	b	96030484 <inflate+0x11f4>
    960304ec:	2a1503f8 	mov	w24, w21
                INITBITS();
    960304f0:	5280001b 	mov	w27, #0x0                   	// #0
    960304f4:	d2800014 	mov	x20, #0x0                   	// #0
    960304f8:	17ffffc2 	b	96030400 <inflate+0x1170>
                NEEDBITS(32);
    960304fc:	34ff727a 	cbz	w26, 9602f348 <inflate+0xb8>
    96030500:	38401780 	ldrb	w0, [x28], #1
    96030504:	5100075a 	sub	w26, w26, #0x1
    96030508:	9adb2000 	lsl	x0, x0, x27
    9603050c:	1100237b 	add	w27, w27, #0x8
    96030510:	8b000294 	add	x20, x20, x0
    96030514:	71007f7f 	cmp	w27, #0x1f
    96030518:	54ffff29 	b.ls	960304fc <inflate+0x126c>  // b.plast
                if (hold != (state->total & 0xffffffffUL)) {
    9603051c:	b9402260 	ldr	w0, [x19, #32]
    96030520:	eb14001f 	cmp	x0, x20
    96030524:	54000080 	b.eq	96030534 <inflate+0x12a4>  // b.none
                    strm->msg = (char *)"incorrect length check";
    96030528:	b00000a0 	adrp	x0, 96045000 <__func__.3796+0x7>
    9603052c:	913be400 	add	x0, x0, #0xef9
    96030530:	17fffbcc 	b	9602f460 <inflate+0x1d0>
                INITBITS();
    96030534:	5280001b 	mov	w27, #0x0                   	// #0
    96030538:	d2800014 	mov	x20, #0x0                   	// #0
    9603053c:	17ffffb7 	b	96030418 <inflate+0x1188>
    in -= strm->avail_in;
    96030540:	b9400b20 	ldr	w0, [x25, #8]
    96030544:	b9408ba1 	ldr	w1, [x29, #136]
    out -= strm->avail_out;
    96030548:	b9402322 	ldr	w2, [x25, #32]
    in -= strm->avail_in;
    9603054c:	4b00003b 	sub	w27, w1, w0
    strm->total_in += in;
    96030550:	f9400b20 	ldr	x0, [x25, #16]
    out -= strm->avail_out;
    96030554:	4b020302 	sub	w2, w24, w2
    96030558:	aa0203f8 	mov	x24, x2
    strm->total_in += in;
    9603055c:	8b3b4000 	add	x0, x0, w27, uxtw
    96030560:	f9000b20 	str	x0, [x25, #16]
    strm->total_out += out;
    96030564:	f9401720 	ldr	x0, [x25, #40]
    96030568:	8b020000 	add	x0, x0, x2
    9603056c:	f9001720 	str	x0, [x25, #40]
    state->total += out;
    96030570:	f9401260 	ldr	x0, [x19, #32]
    96030574:	8b020000 	add	x0, x0, x2
    96030578:	f9001260 	str	x0, [x19, #32]
    if (state->wrap && out)
    9603057c:	b9400a60 	ldr	w0, [x19, #8]
    96030580:	34000160 	cbz	w0, 960305ac <inflate+0x131c>
    96030584:	34000142 	cbz	w2, 960305ac <inflate+0x131c>
            UPDATE(state->check, strm->next_out - out, out);
    96030588:	b9401263 	ldr	w3, [x19, #16]
    9603058c:	f9400f21 	ldr	x1, [x25, #24]
    96030590:	f9400e60 	ldr	x0, [x19, #24]
    96030594:	cb020021 	sub	x1, x1, x2
    96030598:	34000383 	cbz	w3, 96030608 <inflate+0x1378>
    9603059c:	97ffdcdc 	bl	9602790c <tegrabl_utils_crc32>
    960305a0:	2a0003e0 	mov	w0, w0
        strm->adler = state->check =
    960305a4:	f9000e60 	str	x0, [x19, #24]
    960305a8:	f9003320 	str	x0, [x25, #96]
    strm->data_type = state->bits + (state->last ? 64 : 0) +
    960305ac:	29400262 	ldp	w2, w0, [x19]
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
    960305b0:	2a18037b 	orr	w27, w27, w24
    strm->data_type = state->bits + (state->last ? 64 : 0) +
    960305b4:	b9405261 	ldr	w1, [x19, #80]
    960305b8:	7100001f 	cmp	w0, #0x0
    960305bc:	1a9f07e0 	cset	w0, ne  // ne = any
                      (state->mode == TYPE ? 128 : 0) +
    960305c0:	71002c5f 	cmp	w2, #0xb
    960305c4:	0b001821 	add	w1, w1, w0, lsl #6
    960305c8:	1a9f17e0 	cset	w0, eq  // eq = none
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
    960305cc:	71004c5f 	cmp	w2, #0x13
    960305d0:	7a4e1844 	ccmp	w2, #0xe, #0x4, ne  // ne = any
    960305d4:	1a9f17e2 	cset	w2, eq  // eq = none
    960305d8:	53185c42 	lsl	w2, w2, #8
                      (state->mode == TYPE ? 128 : 0) +
    960305dc:	0b001c40 	add	w0, w2, w0, lsl #7
    960305e0:	0b010000 	add	w0, w0, w1
    strm->data_type = state->bits + (state->last ? 64 : 0) +
    960305e4:	b9005b20 	str	w0, [x25, #88]
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
    960305e8:	3400009b 	cbz	w27, 960305f8 <inflate+0x1368>
    960305ec:	b9408fa0 	ldr	w0, [x29, #140]
    960305f0:	7100101f 	cmp	w0, #0x4
    960305f4:	54ffa241 	b.ne	9602fa3c <inflate+0x7ac>  // b.any
        ret = Z_BUF_ERROR;
    960305f8:	710002df 	cmp	w22, #0x0
    960305fc:	12800080 	mov	w0, #0xfffffffb            	// #-5
    96030600:	1a8012d6 	csel	w22, w22, w0, ne  // ne = any
    96030604:	17fffd0e 	b	9602fa3c <inflate+0x7ac>
            UPDATE(state->check, strm->next_out - out, out);
    96030608:	97fff766 	bl	9602e3a0 <adler32>
    9603060c:	17ffffe6 	b	960305a4 <inflate+0x1314>
            return Z_STREAM_ERROR;
    96030610:	12800036 	mov	w22, #0xfffffffe            	// #-2
    96030614:	17fffd0a 	b	9602fa3c <inflate+0x7ac>
                    DROPBITS(here.bits);
    96030618:	9ac02694 	lsr	x20, x20, x0
    9603061c:	4b00037b 	sub	w27, w27, w0
                    state->lens[state->have++] = here.val;
    96030620:	11000460 	add	w0, w3, #0x1
    96030624:	8b234663 	add	x3, x19, w3, uxtw #1
    96030628:	b9008660 	str	w0, [x19, #132]
    9603062c:	79012061 	strh	w1, [x3, #144]
    96030630:	17fffe05 	b	9602fe44 <inflate+0xbb4>

0000000096030634 <inflateEnd>:

int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
    96030634:	b40002a0 	cbz	x0, 96030688 <inflateEnd+0x54>
    96030638:	f9401c01 	ldr	x1, [x0, #56]
    9603063c:	b4000261 	cbz	x1, 96030688 <inflateEnd+0x54>
    96030640:	f9402402 	ldr	x2, [x0, #72]
    96030644:	b4000222 	cbz	x2, 96030688 <inflateEnd+0x54>
{
    96030648:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9603064c:	910003fd 	mov	x29, sp
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (state->window != Z_NULL) ZFREE(strm, state->window);
    96030650:	f9402021 	ldr	x1, [x1, #64]
{
    96030654:	f9000bf3 	str	x19, [sp, #16]
    96030658:	aa0003f3 	mov	x19, x0
    9603065c:	f9402800 	ldr	x0, [x0, #80]
    if (state->window != Z_NULL) ZFREE(strm, state->window);
    96030660:	b4000041 	cbz	x1, 96030668 <inflateEnd+0x34>
    96030664:	d63f0040 	blr	x2
    ZFREE(strm, strm->state);
    96030668:	f9401e61 	ldr	x1, [x19, #56]
    9603066c:	a9448262 	ldp	x2, x0, [x19, #72]
    96030670:	d63f0040 	blr	x2
    strm->state = Z_NULL;
    96030674:	f9001e7f 	str	xzr, [x19, #56]
    Tracev((stderr, "inflate: end\n"));
    return Z_OK;
    96030678:	52800000 	mov	w0, #0x0                   	// #0
}
    9603067c:	f9400bf3 	ldr	x19, [sp, #16]
    96030680:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96030684:	d65f03c0 	ret
        return Z_STREAM_ERROR;
    96030688:	12800020 	mov	w0, #0xfffffffe            	// #-2
}
    9603068c:	d65f03c0 	ret

0000000096030690 <zcalloc>:
    voidpf opaque;
    unsigned items;
    unsigned size;
{
    if (opaque) items += size - size; /* make compiler happy */
	return sizeof(uInt) > 2 ? (voidpf)tegrabl_malloc(items * size) :
    96030690:	1b027c20 	mul	w0, w1, w2
    96030694:	17ffd8f9 	b	96026a78 <tegrabl_malloc>

0000000096030698 <zcfree>:

void ZLIB_INTERNAL zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
	tegrabl_free(ptr);
    96030698:	aa0103e0 	mov	x0, x1
    9603069c:	17ffd907 	b	96026ab8 <tegrabl_free>

00000000960306a0 <zlib_init>:
};

static struct zlib_context _context;

void *zlib_init(uint32_t compressed_size)
{
    960306a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	int ret;
	struct zlib_context *context = &_context;

	/* allocate inflate state */
	context->strm.zalloc = Z_NULL;
    960306a4:	d0000220 	adrp	x0, 96076000 <free_dram_block+0x38e8>
	context->strm.opaque = Z_NULL;
	context->strm.avail_in = 0;
	context->strm.next_in = Z_NULL;

	/* add 32 to detect header type automatically */
	ret = inflateInit2(&(context->strm), 32 + MAX_WBITS);
    960306a8:	52800e03 	mov	w3, #0x70                  	// #112
    960306ac:	528005e1 	mov	w1, #0x2f                  	// #47
{
    960306b0:	910003fd 	mov	x29, sp
    960306b4:	f9000bf3 	str	x19, [sp, #16]
	context->strm.zalloc = Z_NULL;
    960306b8:	912e8013 	add	x19, x0, #0xba0
	context->strm.next_in = Z_NULL;
    960306bc:	f905d01f 	str	xzr, [x0, #2976]
	ret = inflateInit2(&(context->strm), 32 + MAX_WBITS);
    960306c0:	d00000a2 	adrp	x2, 96046000 <lenfix.3236+0xf0>
    960306c4:	aa1303e0 	mov	x0, x19
    960306c8:	911e3842 	add	x2, x2, #0x78e
	context->strm.avail_in = 0;
    960306cc:	b9000a7f 	str	wzr, [x19, #8]
	context->strm.zfree = Z_NULL;
    960306d0:	a9047e7f 	stp	xzr, xzr, [x19, #64]
	context->strm.opaque = Z_NULL;
    960306d4:	f9002a7f 	str	xzr, [x19, #80]
	ret = inflateInit2(&(context->strm), 32 + MAX_WBITS);
    960306d8:	97fffab8 	bl	9602f1b8 <inflateInit2_>
	if (ret != Z_OK) {
		return NULL;
	}

	return context;
    960306dc:	7100001f 	cmp	w0, #0x0
}
    960306e0:	9a9f0260 	csel	x0, x19, xzr, eq  // eq = none
    960306e4:	f9400bf3 	ldr	x19, [sp, #16]
    960306e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960306ec:	d65f03c0 	ret

00000000960306f0 <zlib_decompress>:

tegrabl_error_t zlib_decompress(void *cntxt, void *in_buffer, uint32_t in_size,
								void *out_buffer, uint32_t outbuf_size,
								uint32_t *written_size)
{
    960306f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960306f4:	910003fd 	mov	x29, sp
    960306f8:	a90153f3 	stp	x19, x20, [sp, #16]
    960306fc:	aa0003f3 	mov	x19, x0
    96030700:	a9025bf5 	stp	x21, x22, [sp, #32]
	int32_t ret;
	uint32_t have;
	uint8_t *output = out_buffer;
    96030704:	aa0303f4 	mov	x20, x3
{
    96030708:	a90363f7 	stp	x23, x24, [sp, #48]
    9603070c:	aa0503f5 	mov	x21, x5
	struct zlib_context *context = (struct zlib_context *)cntxt;

	context->strm.avail_in = in_size;
	context->strm.next_in = in_buffer;
    96030710:	f9000001 	str	x1, [x0]

	pr_debug("inbuf=0x%p (size:0x%x), outbuf=0x%p\n",
			 in_buffer, in_size, out_buffer);

	do {
		if ((uint8_t *)out_buffer + outbuf_size - output < CHUNKSIZE) {
    96030714:	8b244077 	add	x23, x3, w4, uxtw
	context->strm.avail_in = in_size;
    96030718:	b9000802 	str	w2, [x0, #8]
		if ((uint8_t *)out_buffer + outbuf_size - output < CHUNKSIZE) {
    9603071c:	b2404ff8 	mov	x24, #0xfffff               	// #1048575
	context->done = false;
    96030720:	3901c01f 	strb	wzr, [x0, #112]
			pr_critical("%s: output buffer is too small!\n", __func__);
			return TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
		}
		context->strm.avail_out = CHUNKSIZE;
    96030724:	52a00216 	mov	w22, #0x100000              	// #1048576
	*written_size = 0;
    96030728:	b90000bf 	str	wzr, [x5]
		if ((uint8_t *)out_buffer + outbuf_size - output < CHUNKSIZE) {
    9603072c:	cb1402e0 	sub	x0, x23, x20
    96030730:	eb18001f 	cmp	x0, x24
    96030734:	540001ac 	b.gt	96030768 <zlib_decompress+0x78>
			pr_critical("%s: output buffer is too small!\n", __func__);
    96030738:	d00000a1 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    9603073c:	d00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96030740:	911cd821 	add	x1, x1, #0x736
    96030744:	911d1800 	add	x0, x0, #0x746
    96030748:	97ffc7ca 	bl	96022670 <tegrabl_printf>
			return TEGRABL_ERROR(TEGRABL_ERR_OVERFLOW, 0);
    9603074c:	52800080 	mov	w0, #0x4                   	// #4
		ret = inflate(&(context->strm), Z_NO_FLUSH);

		if (ret != Z_OK && ret != Z_STREAM_END) {
			pr_critical("zlib::inflate() returns %s (%d)\n",
						context->strm.msg, ret);
			return TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    96030750:	72ad4d40 	movk	w0, #0x6a6a, lsl #16
	if (ret == Z_STREAM_END) {
		context->done = true;
	}

	return TEGRABL_NO_ERROR;
}
    96030754:	a94153f3 	ldp	x19, x20, [sp, #16]
    96030758:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9603075c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96030760:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96030764:	d65f03c0 	ret
		context->strm.next_out = output;
    96030768:	f9000e74 	str	x20, [x19, #24]
		ret = inflate(&(context->strm), Z_NO_FLUSH);
    9603076c:	52800001 	mov	w1, #0x0                   	// #0
		context->strm.avail_out = CHUNKSIZE;
    96030770:	b9002276 	str	w22, [x19, #32]
		ret = inflate(&(context->strm), Z_NO_FLUSH);
    96030774:	aa1303e0 	mov	x0, x19
    96030778:	97fffac6 	bl	9602f290 <inflate>
		if (ret != Z_OK && ret != Z_STREAM_END) {
    9603077c:	7100041f 	cmp	w0, #0x1
    96030780:	54000109 	b.ls	960307a0 <zlib_decompress+0xb0>  // b.plast
			pr_critical("zlib::inflate() returns %s (%d)\n",
    96030784:	f9401a61 	ldr	x1, [x19, #48]
    96030788:	2a0003e2 	mov	w2, w0
    9603078c:	d00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96030790:	911da800 	add	x0, x0, #0x76a
    96030794:	97ffc7b7 	bl	96022670 <tegrabl_printf>
			return TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    96030798:	52800540 	mov	w0, #0x2a                  	// #42
    9603079c:	17ffffed 	b	96030750 <zlib_decompress+0x60>
		have = CHUNKSIZE - context->strm.avail_out;
    960307a0:	b9402261 	ldr	w1, [x19, #32]
		*written_size += have;
    960307a4:	b94002a2 	ldr	w2, [x21]
		have = CHUNKSIZE - context->strm.avail_out;
    960307a8:	4b0102c1 	sub	w1, w22, w1
		*written_size += have;
    960307ac:	0b010042 	add	w2, w2, w1
    960307b0:	b90002a2 	str	w2, [x21]
		output += have;
    960307b4:	8b214294 	add	x20, x20, w1, uxtw
	} while (context->strm.avail_out == 0);
    960307b8:	b9402261 	ldr	w1, [x19, #32]
    960307bc:	34fffb81 	cbz	w1, 9603072c <zlib_decompress+0x3c>
	if (ret == Z_STREAM_END) {
    960307c0:	54000041 	b.ne	960307c8 <zlib_decompress+0xd8>  // b.any
		context->done = true;
    960307c4:	3901c260 	strb	w0, [x19, #112]
	return TEGRABL_NO_ERROR;
    960307c8:	52800000 	mov	w0, #0x0                   	// #0
    960307cc:	17ffffe2 	b	96030754 <zlib_decompress+0x64>

00000000960307d0 <zlib_end>:

tegrabl_error_t zlib_end(void *cntxt)
{
    960307d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960307d4:	910003fd 	mov	x29, sp
	struct zlib_context *context = (struct zlib_context *)cntxt;

	inflateEnd(&(context->strm));
    960307d8:	97ffff97 	bl	96030634 <inflateEnd>

	return TEGRABL_NO_ERROR;
}
    960307dc:	52800000 	mov	w0, #0x0                   	// #0
    960307e0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960307e4:	d65f03c0 	ret

00000000960307e8 <LZ4_wildCopy>:
}


/* customized version of memcpy, which may overwrite up to 7 bytes beyond dstEnd */
static void LZ4_wildCopy(void* dstPtr, const void* srcPtr, void* dstEnd)
{
    960307e8:	d2800003 	mov	x3, #0x0                   	// #0
	*((uint64_t *)(dst_ptr)) = *((uint64_t *)(src_ptr));
    960307ec:	f8636824 	ldr	x4, [x1, x3]
    960307f0:	f8236804 	str	x4, [x0, x3]
    960307f4:	91002063 	add	x3, x3, #0x8
    BYTE* d = (BYTE*)dstPtr;
    const BYTE* s = (const BYTE*)srcPtr;
    BYTE* e = (BYTE*)dstEnd;
    do { LZ4_copy8(d,s); d+=8; s+=8; } while (d<e);
    960307f8:	8b030004 	add	x4, x0, x3
    960307fc:	eb04005f 	cmp	x2, x4
    96030800:	54ffff68 	b.hi	960307ec <LZ4_wildCopy+0x4>  // b.pmore
}
    96030804:	d65f03c0 	ret

0000000096030808 <LZ4_read16>:
{
    96030808:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    memcpy(&val16, memPtr, 2);
    9603080c:	aa0003e1 	mov	x1, x0
    96030810:	d2800042 	mov	x2, #0x2                   	// #2
{
    96030814:	910003fd 	mov	x29, sp
    memcpy(&val16, memPtr, 2);
    96030818:	91007ba0 	add	x0, x29, #0x1e
    9603081c:	97ffe5c2 	bl	96029f24 <memcpy>
}
    96030820:	79403fa0 	ldrh	w0, [x29, #30]
    96030824:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96030828:	d65f03c0 	ret

000000009603082c <LZ4_decompress_safe>:
    return (int) (-(((const char*)ip)-source))-1;
}


int LZ4_decompress_safe(const char* source, char* dest, int compressedSize, int maxDecompressedSize)
{
    9603082c:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
    const size_t dec32table[] = {4, 1, 2, 1, 4, 4, 4, 4};
    96030830:	b00000a4 	adrp	x4, 96045000 <__func__.3796+0x7>
    96030834:	9126c084 	add	x4, x4, #0x9b0
{
    96030838:	910003fd 	mov	x29, sp
    9603083c:	a90153f3 	stp	x19, x20, [sp, #16]
    const size_t dec32table[] = {4, 1, 2, 1, 4, 4, 4, 4};
    96030840:	a9401c86 	ldp	x6, x7, [x4]
    96030844:	a9071fa6 	stp	x6, x7, [x29, #112]
    96030848:	a9411c86 	ldp	x6, x7, [x4, #16]
    9603084c:	a9081fa6 	stp	x6, x7, [x29, #128]
    96030850:	a9421c86 	ldp	x6, x7, [x4, #32]
    96030854:	a9091fa6 	stp	x6, x7, [x29, #144]
    96030858:	a9431c86 	ldp	x6, x7, [x4, #48]
    9603085c:	a90a1fa6 	stp	x6, x7, [x29, #160]
    const size_t dec64table[] = {0, 0, 0, (size_t)-1, 0, 1, 2, 3};
    96030860:	91010086 	add	x6, x4, #0x40
{
    96030864:	a9025bf5 	stp	x21, x22, [sp, #32]
    const size_t dec64table[] = {0, 0, 0, (size_t)-1, 0, 1, 2, 3};
    96030868:	a9441484 	ldp	x4, x5, [x4, #64]
    9603086c:	a90b17a4 	stp	x4, x5, [x29, #176]
    96030870:	a94114c4 	ldp	x4, x5, [x6, #16]
    96030874:	a90c17a4 	stp	x4, x5, [x29, #192]
    96030878:	a94214c4 	ldp	x4, x5, [x6, #32]
    9603087c:	a90d17a4 	stp	x4, x5, [x29, #208]
    96030880:	a94314c4 	ldp	x4, x5, [x6, #48]
{
    96030884:	a90363f7 	stp	x23, x24, [sp, #48]
    96030888:	a9046bf9 	stp	x25, x26, [sp, #64]
    const BYTE* const iend = ip + inputSize;
    9603088c:	8b22c015 	add	x21, x0, w2, sxtw
{
    96030890:	a90573fb 	stp	x27, x28, [sp, #80]
    BYTE* const oend = op + outputSize;
    96030894:	8b23c036 	add	x22, x1, w3, sxtw
    const size_t dec64table[] = {0, 0, 0, (size_t)-1, 0, 1, 2, 3};
    96030898:	a90e17a4 	stp	x4, x5, [x29, #224]
    if ((endOnInput) && (unlikely(outputSize==0))) return ((inputSize==1) && (*ip==0)) ? 0 : -1;  /* Empty output buffer */
    9603089c:	350001a3 	cbnz	w3, 960308d0 <LZ4_decompress_safe+0xa4>
    960308a0:	7100045f 	cmp	w2, #0x1
    960308a4:	54001161 	b.ne	96030ad0 <LZ4_decompress_safe+0x2a4>  // b.any
    960308a8:	39400000 	ldrb	w0, [x0]
    960308ac:	7100001f 	cmp	w0, #0x0
    960308b0:	5a9f03e0 	csetm	w0, ne  // ne = any
    return LZ4_decompress_generic(source, dest, compressedSize, maxDecompressedSize, endOnInputSize, full, 0, noDict, (BYTE*)dest, NULL, 0);
}
    960308b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960308b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960308bc:	a94363f7 	ldp	x23, x24, [sp, #48]
    960308c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960308c4:	a94573fb 	ldp	x27, x28, [sp, #80]
    960308c8:	a8cf7bfd 	ldp	x29, x30, [sp], #240
    960308cc:	d65f03c0 	ret
    960308d0:	aa0103f4 	mov	x20, x1
    if ((endOnInput) && (unlikely(outputSize==0))) return ((inputSize==1) && (*ip==0)) ? 0 : -1;  /* Empty output buffer */
    960308d4:	aa0103e6 	mov	x6, x1
    960308d8:	aa0003f3 	mov	x19, x0
            while (likely((endOnInput)?ip<iend-RUN_MASK:1) && (s==255));
    960308dc:	d1003ea1 	sub	x1, x21, #0xf
        if (((endOnInput) && ((cpy>(partialDecoding?oexit:oend-MFLIMIT)) || (ip+length>iend-(2+1+LASTLITERALS))) )
    960308e0:	d10032d7 	sub	x23, x22, #0xc
    960308e4:	d10022b9 	sub	x25, x21, #0x8
                if ((endOnInput) && (ip > iend-LASTLITERALS)) goto _output_error;
    960308e8:	d10016ba 	sub	x26, x21, #0x5
            const size_t dec64 = dec64table[op-match];
    960308ec:	9102c3bb 	add	x27, x29, #0xb0
            while (likely((endOnInput)?ip<iend-RUN_MASK:1) && (s==255));
    960308f0:	f90037a1 	str	x1, [x29, #104]
    960308f4:	14000046 	b	96030a0c <LZ4_decompress_safe+0x1e0>
        LZ4_wildCopy(op, ip, cpy);
    960308f8:	aa1c03e2 	mov	x2, x28
    960308fc:	aa0503e1 	mov	x1, x5
    96030900:	aa0603e0 	mov	x0, x6
    96030904:	b90067a3 	str	w3, [x29, #100]
    96030908:	97ffffb8 	bl	960307e8 <LZ4_wildCopy>
        return LZ4_read16(memPtr);
    9603090c:	aa1803e0 	mov	x0, x24
    96030910:	97ffffbe 	bl	96030808 <LZ4_read16>
    96030914:	12003c02 	and	w2, w0, #0xffff
        match = cpy - LZ4_readLE16(ip); ip+=2;
    96030918:	92403c00 	and	x0, x0, #0xffff
    9603091c:	cb000387 	sub	x7, x28, x0
    96030920:	91000b05 	add	x5, x24, #0x2
        if ((checkOffset) && (unlikely(match < lowLimit))) goto _output_error;   /* Error : offset outside destination buffer */
    96030924:	eb07029f 	cmp	x20, x7
    96030928:	54000ce8 	b.hi	96030ac4 <LZ4_decompress_safe+0x298>  // b.pmore
    9603092c:	b94067a3 	ldr	w3, [x29, #100]
    96030930:	12000c63 	and	w3, w3, #0xf
        length = token & ML_MASK;
    96030934:	92401c66 	and	x6, x3, #0xff
        if (length == ML_MASK)
    96030938:	71003c7f 	cmp	w3, #0xf
    9603093c:	54000161 	b.ne	96030968 <LZ4_decompress_safe+0x13c>  // b.any
        length = token & ML_MASK;
    96030940:	d28001e6 	mov	x6, #0xf                   	// #15
                if ((endOnInput) && (ip > iend-LASTLITERALS)) goto _output_error;
    96030944:	eb1a00bf 	cmp	x5, x26
    96030948:	54000be8 	b.hi	96030ac4 <LZ4_decompress_safe+0x298>  // b.pmore
                s = *ip++;
    9603094c:	384014a1 	ldrb	w1, [x5], #1
            } while (s==255);
    96030950:	7103fc3f 	cmp	w1, #0xff
                length += s;
    96030954:	8b2100c6 	add	x6, x6, w1, uxtb
            } while (s==255);
    96030958:	54ffff60 	b.eq	96030944 <LZ4_decompress_safe+0x118>  // b.none
            if ((safeDecode) && unlikely((size_t)(op+length)<(size_t)op)) goto _output_error;   /* overflow detection */
    9603095c:	8b060381 	add	x1, x28, x6
    96030960:	eb01039f 	cmp	x28, x1
    96030964:	54000b08 	b.hi	96030ac4 <LZ4_decompress_safe+0x298>  // b.pmore
        length += MINMATCH;
    96030968:	910010c6 	add	x6, x6, #0x4
    9603096c:	91002388 	add	x8, x28, #0x8
        cpy = op + length;
    96030970:	8b060386 	add	x6, x28, x6
        if (unlikely((op-match)<8))
    96030974:	71001c5f 	cmp	w2, #0x7
    96030978:	540008e8 	b.hi	96030a94 <LZ4_decompress_safe+0x268>  // b.pmore
            op[0] = match[0];
    9603097c:	394000e2 	ldrb	w2, [x7]
            const size_t dec64 = dec64table[op-match];
    96030980:	d37df000 	lsl	x0, x0, #3
            op[0] = match[0];
    96030984:	39000382 	strb	w2, [x28]
            op[1] = match[1];
    96030988:	394004e2 	ldrb	w2, [x7, #1]
    9603098c:	39000782 	strb	w2, [x28, #1]
            const size_t dec64 = dec64table[op-match];
    96030990:	f8606b61 	ldr	x1, [x27, x0]
            op[2] = match[2];
    96030994:	394008e2 	ldrb	w2, [x7, #2]
    96030998:	39000b82 	strb	w2, [x28, #2]
            op[3] = match[3];
    9603099c:	39400ce2 	ldrb	w2, [x7, #3]
    960309a0:	39000f82 	strb	w2, [x28, #3]
            match += dec32table[op-match];
    960309a4:	9101c3a2 	add	x2, x29, #0x70
    960309a8:	f8606840 	ldr	x0, [x2, x0]
    960309ac:	8b0000e2 	add	x2, x7, x0
	*((uint32_t *)(dst_ptr)) = *((uint32_t *)(src_ptr));
    960309b0:	b86068e0 	ldr	w0, [x7, x0]
            op += 8; match -= dec64;
    960309b4:	cb010047 	sub	x7, x2, x1
	*((uint32_t *)(dst_ptr)) = *((uint32_t *)(src_ptr));
    960309b8:	b9000780 	str	w0, [x28, #4]
        if (unlikely(cpy>oend-12))
    960309bc:	eb0602ff 	cmp	x23, x6
    960309c0:	54000782 	b.cs	96030ab0 <LZ4_decompress_safe+0x284>  // b.hs, b.nlast
            if (cpy > oend-LASTLITERALS) goto _output_error;    /* Error : last LASTLITERALS bytes must be literals */
    960309c4:	d10016c0 	sub	x0, x22, #0x5
    960309c8:	eb0000df 	cmp	x6, x0
    960309cc:	540007c8 	b.hi	96030ac4 <LZ4_decompress_safe+0x298>  // b.pmore
            if (op < oend-8)
    960309d0:	d10022c9 	sub	x9, x22, #0x8
    960309d4:	eb09011f 	cmp	x8, x9
    960309d8:	54000102 	b.cs	960309f8 <LZ4_decompress_safe+0x1cc>  // b.hs, b.nlast
                LZ4_wildCopy(op, match, oend-8);
    960309dc:	aa0703e1 	mov	x1, x7
    960309e0:	aa0803e0 	mov	x0, x8
    960309e4:	aa0903e2 	mov	x2, x9
    960309e8:	97ffff80 	bl	960307e8 <LZ4_wildCopy>
                match += (oend-8) - op;
    960309ec:	cb080128 	sub	x8, x9, x8
    960309f0:	8b0800e7 	add	x7, x7, x8
    960309f4:	aa0903e8 	mov	x8, x9
    960309f8:	d2800000 	mov	x0, #0x0                   	// #0
    960309fc:	8b000101 	add	x1, x8, x0
            while (op<cpy) *op++ = *match++;
    96030a00:	eb0100df 	cmp	x6, x1
    96030a04:	540004e8 	b.hi	96030aa0 <LZ4_decompress_safe+0x274>  // b.pmore
        cpy = op + length;
    96030a08:	aa0503e0 	mov	x0, x5
        token = *ip++;
    96030a0c:	39400003 	ldrb	w3, [x0]
    96030a10:	91000405 	add	x5, x0, #0x1
        if ((length=(token>>ML_BITS)) == RUN_MASK)
    96030a14:	53047c62 	lsr	w2, w3, #4
    96030a18:	71003c5f 	cmp	w2, #0xf
    96030a1c:	540001e1 	b.ne	96030a58 <LZ4_decompress_safe+0x22c>  // b.any
    96030a20:	d28001e2 	mov	x2, #0xf                   	// #15
                s = *ip++;
    96030a24:	384014a0 	ldrb	w0, [x5], #1
            while (likely((endOnInput)?ip<iend-RUN_MASK:1) && (s==255));
    96030a28:	f94037a1 	ldr	x1, [x29, #104]
                length += s;
    96030a2c:	8b200042 	add	x2, x2, w0, uxtb
            while (likely((endOnInput)?ip<iend-RUN_MASK:1) && (s==255));
    96030a30:	eb0100bf 	cmp	x5, x1
    96030a34:	54000062 	b.cs	96030a40 <LZ4_decompress_safe+0x214>  // b.hs, b.nlast
    96030a38:	7103fc1f 	cmp	w0, #0xff
    96030a3c:	54ffff40 	b.eq	96030a24 <LZ4_decompress_safe+0x1f8>  // b.none
            if ((safeDecode) && unlikely((size_t)(op+length)<(size_t)(op))) goto _output_error;   /* overflow detection */
    96030a40:	8b0200c0 	add	x0, x6, x2
    96030a44:	eb0000df 	cmp	x6, x0
    96030a48:	540003e8 	b.hi	96030ac4 <LZ4_decompress_safe+0x298>  // b.pmore
            if ((safeDecode) && unlikely((size_t)(ip+length)<(size_t)(ip))) goto _output_error;   /* overflow detection */
    96030a4c:	8b0200a0 	add	x0, x5, x2
    96030a50:	eb0000bf 	cmp	x5, x0
    96030a54:	54000388 	b.hi	96030ac4 <LZ4_decompress_safe+0x298>  // b.pmore
        cpy = op+length;
    96030a58:	8b0200dc 	add	x28, x6, x2
    96030a5c:	8b0200b8 	add	x24, x5, x2
        if (((endOnInput) && ((cpy>(partialDecoding?oexit:oend-MFLIMIT)) || (ip+length>iend-(2+1+LASTLITERALS))) )
    96030a60:	eb17039f 	cmp	x28, x23
    96030a64:	54000068 	b.hi	96030a70 <LZ4_decompress_safe+0x244>  // b.pmore
    96030a68:	eb19031f 	cmp	x24, x25
    96030a6c:	54fff469 	b.ls	960308f8 <LZ4_decompress_safe+0xcc>  // b.plast
                if ((endOnInput) && ((ip+length != iend) || (cpy > oend))) goto _output_error;   /* Error : input must be consumed */
    96030a70:	eb1802bf 	cmp	x21, x24
    96030a74:	54000281 	b.ne	96030ac4 <LZ4_decompress_safe+0x298>  // b.any
    96030a78:	eb1c02df 	cmp	x22, x28
    96030a7c:	54000243 	b.cc	96030ac4 <LZ4_decompress_safe+0x298>  // b.lo, b.ul, b.last
            memcpy(op, ip, length);
    96030a80:	aa0503e1 	mov	x1, x5
    96030a84:	aa0603e0 	mov	x0, x6
    96030a88:	97ffe527 	bl	96029f24 <memcpy>
       return (int) (((char*)op)-dest);     /* Nb of output bytes decoded */
    96030a8c:	4b140380 	sub	w0, w28, w20
    96030a90:	17ffff89 	b	960308b4 <LZ4_decompress_safe+0x88>
	*((uint64_t *)(dst_ptr)) = *((uint64_t *)(src_ptr));
    96030a94:	f84084e0 	ldr	x0, [x7], #8
    96030a98:	f9000380 	str	x0, [x28]
    96030a9c:	17ffffc8 	b	960309bc <LZ4_decompress_safe+0x190>
            while (op<cpy) *op++ = *match++;
    96030aa0:	386068e1 	ldrb	w1, [x7, x0]
    96030aa4:	38206901 	strb	w1, [x8, x0]
    96030aa8:	91000400 	add	x0, x0, #0x1
    96030aac:	17ffffd4 	b	960309fc <LZ4_decompress_safe+0x1d0>
            LZ4_wildCopy(op, match, cpy);
    96030ab0:	aa0603e2 	mov	x2, x6
    96030ab4:	aa0703e1 	mov	x1, x7
    96030ab8:	aa0803e0 	mov	x0, x8
    96030abc:	97ffff4b 	bl	960307e8 <LZ4_wildCopy>
    96030ac0:	17ffffd2 	b	96030a08 <LZ4_decompress_safe+0x1dc>
    return (int) (-(((const char*)ip)-source))-1;
    96030ac4:	cb1300a0 	sub	x0, x5, x19
    96030ac8:	2a2003e0 	mvn	w0, w0
    96030acc:	17ffff7a 	b	960308b4 <LZ4_decompress_safe+0x88>
    if ((endOnInput) && (unlikely(outputSize==0))) return ((inputSize==1) && (*ip==0)) ? 0 : -1;  /* Empty output buffer */
    96030ad0:	12800000 	mov	w0, #0xffffffff            	// #-1
    return LZ4_decompress_generic(source, dest, compressedSize, maxDecompressedSize, endOnInputSize, full, 0, noDict, (BYTE*)dest, NULL, 0);
    96030ad4:	17ffff78 	b	960308b4 <LZ4_decompress_safe+0x88>

0000000096030ad8 <do_lz4_decompress>:
#define BLOCK_MAX_SIZE_SHIFT		(4)

tegrabl_error_t do_lz4_decompress(void *cntxt, void *in_buffer,
								  uint32_t in_size, void *out_buffer,
								  uint32_t outbuf_size, uint32_t *written_size)
{
    96030ad8:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96030adc:	910003fd 	mov	x29, sp
    96030ae0:	a90153f3 	stp	x19, x20, [sp, #16]
    96030ae4:	a9025bf5 	stp	x21, x22, [sp, #32]
    96030ae8:	aa0103f6 	mov	x22, x1
    96030aec:	a90363f7 	stp	x23, x24, [sp, #48]
    96030af0:	aa0303f7 	mov	x23, x3
	(void)cntxt;

	pr_debug("inbuf=0x%p (size:%d), outbuf=0x%p\n", cbuf, in_size, dbuf);

	/* MAGIC NUMBER: 4B */
	magic_number = *(uint32_t *)cbuf;
    96030af4:	b9400021 	ldr	w1, [x1]
	cbuf += MAGIC_NUMBER_SZ;

	switch (magic_number) {
    96030af8:	52842043 	mov	w3, #0x2102                	// #8450
{
    96030afc:	a9046bf9 	stp	x25, x26, [sp, #64]
	switch (magic_number) {
    96030b00:	72a30983 	movk	w3, #0x184c, lsl #16
{
    96030b04:	f9002bfb 	str	x27, [sp, #80]
	switch (magic_number) {
    96030b08:	6b03003f 	cmp	w1, w3
{
    96030b0c:	aa0503fb 	mov	x27, x5
	switch (magic_number) {
    96030b10:	540007e0 	b.eq	96030c0c <do_lz4_decompress+0x134>  // b.none
    96030b14:	52844083 	mov	w3, #0x2204                	// #8708
    96030b18:	72a309a3 	movk	w3, #0x184d, lsl #16
    96030b1c:	6b03003f 	cmp	w1, w3
    96030b20:	540001c1 	b.ne	96030b58 <do_lz4_decompress+0x80>  // b.any
	case LZ4_LEGACY_MAGIC_NUMBER:
		pr_debug("Content in legacy frame format\n");
		break;

	case LZ4_CURRENT_MAGIC_NUMBER:
		frame_flag = *cbuf++;
    96030b24:	394012c1 	ldrb	w1, [x22, #4]
		if (frame_flag & BLOCK_CHECKSUM_FLAG_MASK) {
    96030b28:	d344103a 	ubfx	x26, x1, #4, #1
			block_has_csum = true;
		}
		block_descriptor = *cbuf++;
		if (frame_flag & CONTENT_SIZE_FALG_MASK) {
    96030b2c:	37180101 	tbnz	w1, #3, 96030b4c <do_lz4_decompress+0x74>
		block_descriptor = *cbuf++;
    96030b30:	91001ac6 	add	x6, x22, #0x6
	uint64_t content_size = 0;
    96030b34:	d2800015 	mov	x21, #0x0                   	// #0
			content_size = *(uint64_t *)cbuf;
			cbuf += ORIGINAL_CONTENT_SZ;
		}
		header_csum = *cbuf++;
    96030b38:	910004c6 	add	x6, x6, #0x1
	uint8_t *cbuf_end = cbuf + in_size;
    96030b3c:	8b2242d6 	add	x22, x22, w2, uxtw
    96030b40:	aa1703f4 	mov	x20, x23
	uint8_t *dbuf_end = dbuf + outbuf_size;
    96030b44:	8b2442f8 	add	x24, x23, w4, uxtw
    96030b48:	14000025 	b	96030bdc <do_lz4_decompress+0x104>
			cbuf += ORIGINAL_CONTENT_SZ;
    96030b4c:	91003ac6 	add	x6, x22, #0xe
			content_size = *(uint64_t *)cbuf;
    96030b50:	f84062d5 	ldur	x21, [x22, #6]
    96030b54:	17fffff9 	b	96030b38 <do_lz4_decompress+0x60>
		pr_debug("Frame header: flag:0x%x b_d:0x%x h_csum:0x%x\n", frame_flag,
				 block_descriptor, header_csum);
		break;

	default:
		pr_error("Magic(0x%08x) not supported\n", magic_number);
    96030b58:	d00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96030b5c:	911e5000 	add	x0, x0, #0x794
    96030b60:	97ffc6c4 	bl	96022670 <tegrabl_printf>
		ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96030b64:	52800040 	mov	w0, #0x2                   	// #2
	}

	*written_size = (uint32_t)(dbuf - (uint8_t *)out_buffer);
	if (content_size && (content_size != *written_size)) {
		pr_error("Decompressed size doesn't match target\n");
		ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96030b68:	72ad4d40 	movk	w0, #0x6a6a, lsl #16
	pr_debug("total_processed_size:%d, total_written_size:%d\n",
			 (uint32_t)(cbuf - (uint8_t *)in_buffer),
			 (uint32_t)(dbuf - (uint8_t *)out_buffer));

	return ret;
}
    96030b6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96030b70:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96030b74:	a94363f7 	ldp	x23, x24, [sp, #48]
    96030b78:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96030b7c:	f9402bfb 	ldr	x27, [sp, #80]
    96030b80:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96030b84:	d65f03c0 	ret
		c_size = *((uint32_t *)cbuf);
    96030b88:	aa0603f3 	mov	x19, x6
    96030b8c:	b8404679 	ldr	w25, [x19], #4
		if (!c_size || cbuf >= cbuf_end) {
    96030b90:	7100033f 	cmp	w25, #0x0
    96030b94:	fa5312c0 	ccmp	x22, x19, #0x0, ne  // ne = any
    96030b98:	54000269 	b.ls	96030be4 <do_lz4_decompress+0x10c>  // b.plast
		err = LZ4_decompress_safe((char *)cbuf, (char *)dbuf, c_size, d_size);
    96030b9c:	4b140303 	sub	w3, w24, w20
    96030ba0:	2a1903e2 	mov	w2, w25
    96030ba4:	aa1403e1 	mov	x1, x20
    96030ba8:	aa1303e0 	mov	x0, x19
    96030bac:	97ffff20 	bl	9603082c <LZ4_decompress_safe>
		if (err < 0) {
    96030bb0:	36f800e0 	tbz	w0, #31, 96030bcc <do_lz4_decompress+0xf4>
			pr_critical("failed to decompress, err=%d\n", err);
    96030bb4:	2a0003e1 	mov	w1, w0
    96030bb8:	d00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96030bbc:	911ed000 	add	x0, x0, #0x7b4
    96030bc0:	97ffc6ac 	bl	96022670 <tegrabl_printf>
			ret = TEGRABL_ERROR(TEGRABL_ERR_BAD_PARAMETER, 0);
    96030bc4:	52800540 	mov	w0, #0x2a                  	// #42
    96030bc8:	17ffffe8 	b	96030b68 <do_lz4_decompress+0x90>
		cbuf += c_size;
    96030bcc:	8b394266 	add	x6, x19, w25, uxtw
		dbuf += err;
    96030bd0:	8b20c294 	add	x20, x20, w0, sxtw
		if (block_has_csum) {
    96030bd4:	3400005a 	cbz	w26, 96030bdc <do_lz4_decompress+0x104>
			cbuf += BLOCK_CHECKSUM_SZ;
    96030bd8:	910010c6 	add	x6, x6, #0x4
	while (cbuf < cbuf_end) {
    96030bdc:	eb1600df 	cmp	x6, x22
    96030be0:	54fffd43 	b.cc	96030b88 <do_lz4_decompress+0xb0>  // b.lo, b.ul, b.last
	*written_size = (uint32_t)(dbuf - (uint8_t *)out_buffer);
    96030be4:	cb170294 	sub	x20, x20, x23
    96030be8:	b9000374 	str	w20, [x27]
	if (content_size && (content_size != *written_size)) {
    96030bec:	b4000195 	cbz	x21, 96030c1c <do_lz4_decompress+0x144>
    96030bf0:	eb3442bf 	cmp	x21, w20, uxtw
    96030bf4:	54000140 	b.eq	96030c1c <do_lz4_decompress+0x144>  // b.none
		pr_error("Decompressed size doesn't match target\n");
    96030bf8:	d00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96030bfc:	911f5400 	add	x0, x0, #0x7d5
    96030c00:	97ffc69c 	bl	96022670 <tegrabl_printf>
		ret = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96030c04:	52802040 	mov	w0, #0x102                 	// #258
    96030c08:	17ffffd8 	b	96030b68 <do_lz4_decompress+0x90>
	cbuf += MAGIC_NUMBER_SZ;
    96030c0c:	910012c6 	add	x6, x22, #0x4
	bool block_has_csum = false;
    96030c10:	5280001a 	mov	w26, #0x0                   	// #0
	uint64_t content_size = 0;
    96030c14:	d2800015 	mov	x21, #0x0                   	// #0
    96030c18:	17ffffc9 	b	96030b3c <do_lz4_decompress+0x64>
	tegrabl_error_t ret = TEGRABL_NO_ERROR;
    96030c1c:	52800000 	mov	w0, #0x0                   	// #0
	return ret;
    96030c20:	17ffffd3 	b	96030b6c <do_lz4_decompress+0x94>

0000000096030c24 <fdt32_to_cpu>:
}
    96030c24:	5ac00800 	rev	w0, w0
    96030c28:	d65f03c0 	ret

0000000096030c2c <tegrabl_dt_read_reg_by_index>:
};

tegrabl_error_t tegrabl_dt_read_reg_by_index(const void *fdt, int nodeoffset,
											uint32_t index, uintptr_t *addr,
											uintptr_t *size)
{
    96030c2c:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96030c30:	910003fd 	mov	x29, sp
    96030c34:	a90153f3 	stp	x19, x20, [sp, #16]
    96030c38:	aa0003f4 	mov	x20, x0
    96030c3c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96030c40:	2a0103f3 	mov	w19, w1
    96030c44:	a90363f7 	stp	x23, x24, [sp, #48]
    96030c48:	aa0303f8 	mov	x24, x3
    96030c4c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96030c50:	aa0403f7 	mov	x23, x4
    96030c54:	2a0203f9 	mov	w25, w2
	int lenp, addr_cells, size_cells, offset;
	uint32_t count = 0U;
	const uint32_t *cells_p, *prop_p;

	/* Get the pointer to the data in "reg" property */
	prop_p = fdt_getprop(fdt, nodeoffset, "reg", &lenp);
    96030c58:	910173a3 	add	x3, x29, #0x5c
    96030c5c:	90000082 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    96030c60:	91183842 	add	x2, x2, #0x60e
    96030c64:	940004e9 	bl	96032008 <fdt_getprop>
	if (prop_p == NULL) {
    96030c68:	b5000100 	cbnz	x0, 96030c88 <tegrabl_dt_read_reg_by_index+0x5c>
			pr_error("unsupported #size-cells value\n");
		}
		pr_debug("size: 0x%lx\n", *size);
	}

	return TEGRABL_NO_ERROR;
    96030c6c:	52800000 	mov	w0, #0x0                   	// #0
}
    96030c70:	a94153f3 	ldp	x19, x20, [sp, #16]
    96030c74:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96030c78:	a94363f7 	ldp	x23, x24, [sp, #48]
    96030c7c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96030c80:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96030c84:	d65f03c0 	ret
		cells_p = fdt_getprop(fdt, offset, "#address-cells", NULL);
    96030c88:	d00000ba 	adrp	x26, 96046000 <lenfix.3236+0xf0>
    96030c8c:	aa0003f6 	mov	x22, x0
	offset = nodeoffset;
    96030c90:	2a1303f5 	mov	w21, w19
		cells_p = fdt_getprop(fdt, offset, "#address-cells", NULL);
    96030c94:	91222b5a 	add	x26, x26, #0x88a
		offset = fdt_parent_offset(fdt, offset);
    96030c98:	2a1503e1 	mov	w1, w21
    96030c9c:	aa1403e0 	mov	x0, x20
    96030ca0:	940005fa 	bl	96032488 <fdt_parent_offset>
    96030ca4:	2a0003f5 	mov	w21, w0
		cells_p = fdt_getprop(fdt, offset, "#address-cells", NULL);
    96030ca8:	2a0003e1 	mov	w1, w0
    96030cac:	d2800003 	mov	x3, #0x0                   	// #0
    96030cb0:	aa1a03e2 	mov	x2, x26
    96030cb4:	aa1403e0 	mov	x0, x20
    96030cb8:	940004d4 	bl	96032008 <fdt_getprop>
		if (cells_p != NULL) {
    96030cbc:	b4000620 	cbz	x0, 96030d80 <tegrabl_dt_read_reg_by_index+0x154>
			addr_cells = fdt32_to_cpu(*((uint32_t *)cells_p));
    96030cc0:	b9400000 	ldr	w0, [x0]
    96030cc4:	97ffffd8 	bl	96030c24 <fdt32_to_cpu>
    96030cc8:	2a0003f5 	mov	w21, w0
		cells_p = fdt_getprop(fdt, offset, "#size-cells", NULL);
    96030ccc:	d00000ba 	adrp	x26, 96046000 <lenfix.3236+0xf0>
    96030cd0:	9122675a 	add	x26, x26, #0x899
		offset = fdt_parent_offset(fdt, offset);
    96030cd4:	2a1303e1 	mov	w1, w19
    96030cd8:	aa1403e0 	mov	x0, x20
    96030cdc:	940005eb 	bl	96032488 <fdt_parent_offset>
    96030ce0:	2a0003f3 	mov	w19, w0
		cells_p = fdt_getprop(fdt, offset, "#size-cells", NULL);
    96030ce4:	2a0003e1 	mov	w1, w0
    96030ce8:	d2800003 	mov	x3, #0x0                   	// #0
    96030cec:	aa1a03e2 	mov	x2, x26
    96030cf0:	aa1403e0 	mov	x0, x20
    96030cf4:	940004c5 	bl	96032008 <fdt_getprop>
		if (cells_p != NULL) {
    96030cf8:	b40004c0 	cbz	x0, 96030d90 <tegrabl_dt_read_reg_by_index+0x164>
			size_cells = fdt32_to_cpu(*((uint32_t *)cells_p));
    96030cfc:	b9400000 	ldr	w0, [x0]
    96030d00:	97ffffc9 	bl	96030c24 <fdt32_to_cpu>
    96030d04:	2a0003f4 	mov	w20, w0
	if ((addr_cells + size_cells) != 0U) {
    96030d08:	2b150282 	adds	w2, w20, w21
    96030d0c:	540004a0 	b.eq	96030da0 <tegrabl_dt_read_reg_by_index+0x174>  // b.none
		count = lenp / ((addr_cells + size_cells) * sizeof(uint32_t));
    96030d10:	b9805fa0 	ldrsw	x0, [x29, #92]
    96030d14:	937e7c41 	sbfiz	x1, x2, #2, #32
    96030d18:	9ac10800 	udiv	x0, x0, x1
	if (index > count) {
    96030d1c:	6b19001f 	cmp	w0, w25
    96030d20:	54000843 	b.cc	96030e28 <tegrabl_dt_read_reg_by_index+0x1fc>  // b.lo, b.ul, b.last
	prop_p += (index * (addr_cells + size_cells));
    96030d24:	1b197c42 	mul	w2, w2, w25
	if (addr && addr_cells) {
    96030d28:	f100031f 	cmp	x24, #0x0
    96030d2c:	7a401aa4 	ccmp	w21, #0x0, #0x4, ne  // ne = any
	prop_p += (index * (addr_cells + size_cells));
    96030d30:	d37ef442 	lsl	x2, x2, #2
    96030d34:	8b0202d3 	add	x19, x22, x2
	if (addr && addr_cells) {
    96030d38:	54000100 	b.eq	96030d58 <tegrabl_dt_read_reg_by_index+0x12c>  // b.none
		if (addr_cells == 1) {
    96030d3c:	710006bf 	cmp	w21, #0x1
    96030d40:	54000341 	b.ne	96030da8 <tegrabl_dt_read_reg_by_index+0x17c>  // b.any
			*addr = fdt32_to_cpu(*(prop_p++));
    96030d44:	b8626ac0 	ldr	w0, [x22, x2]
    96030d48:	91001273 	add	x19, x19, #0x4
    96030d4c:	97ffffb6 	bl	96030c24 <fdt32_to_cpu>
    96030d50:	2a0003e0 	mov	w0, w0
    96030d54:	f9000300 	str	x0, [x24]
	if (size && size_cells) {
    96030d58:	f10002ff 	cmp	x23, #0x0
    96030d5c:	7a401a84 	ccmp	w20, #0x0, #0x4, ne  // ne = any
    96030d60:	54fff860 	b.eq	96030c6c <tegrabl_dt_read_reg_by_index+0x40>  // b.none
		if (size_cells == 1) {
    96030d64:	7100069f 	cmp	w20, #0x1
    96030d68:	54000421 	b.ne	96030dec <tegrabl_dt_read_reg_by_index+0x1c0>  // b.any
			*size = fdt32_to_cpu(*(prop_p++));
    96030d6c:	b9400260 	ldr	w0, [x19]
    96030d70:	97ffffad 	bl	96030c24 <fdt32_to_cpu>
    96030d74:	2a0003e0 	mov	w0, w0
    96030d78:	f90002e0 	str	x0, [x23]
    96030d7c:	17ffffbc 	b	96030c6c <tegrabl_dt_read_reg_by_index+0x40>
		} else if (offset <= 0) {
    96030d80:	710002bf 	cmp	w21, #0x0
    96030d84:	54fff8ac 	b.gt	96030c98 <tegrabl_dt_read_reg_by_index+0x6c>
	addr_cells = 0;
    96030d88:	52800015 	mov	w21, #0x0                   	// #0
    96030d8c:	17ffffd0 	b	96030ccc <tegrabl_dt_read_reg_by_index+0xa0>
		} else if (offset <= 0) {
    96030d90:	7100027f 	cmp	w19, #0x0
    96030d94:	54fffa0c 	b.gt	96030cd4 <tegrabl_dt_read_reg_by_index+0xa8>
	size_cells = 0;
    96030d98:	52800014 	mov	w20, #0x0                   	// #0
    96030d9c:	17ffffdb 	b	96030d08 <tegrabl_dt_read_reg_by_index+0xdc>
	uint32_t count = 0U;
    96030da0:	52800000 	mov	w0, #0x0                   	// #0
    96030da4:	17ffffde 	b	96030d1c <tegrabl_dt_read_reg_by_index+0xf0>
		} else if (addr_cells == 2) {
    96030da8:	71000abf 	cmp	w21, #0x2
    96030dac:	54000181 	b.ne	96030ddc <tegrabl_dt_read_reg_by_index+0x1b0>  // b.any
			*addr = (uint64_t)fdt32_to_cpu(*(prop_p++)) << 32;
    96030db0:	b8626ac0 	ldr	w0, [x22, x2]
    96030db4:	97ffff9c 	bl	96030c24 <fdt32_to_cpu>
    96030db8:	2a0003e1 	mov	w1, w0
			*addr |= (uint64_t)fdt32_to_cpu(*(prop_p++));
    96030dbc:	b9400660 	ldr	w0, [x19, #4]
    96030dc0:	91002262 	add	x2, x19, #0x8
    96030dc4:	97ffff98 	bl	96030c24 <fdt32_to_cpu>
    96030dc8:	2a0003e0 	mov	w0, w0
    96030dcc:	aa018001 	orr	x1, x0, x1, lsl #32
    96030dd0:	aa0203f3 	mov	x19, x2
    96030dd4:	f9000301 	str	x1, [x24]
    96030dd8:	17ffffe0 	b	96030d58 <tegrabl_dt_read_reg_by_index+0x12c>
			pr_error("unsupported #address-cells value\n");
    96030ddc:	d00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96030de0:	91229400 	add	x0, x0, #0x8a5
    96030de4:	97ffc623 	bl	96022670 <tegrabl_printf>
    96030de8:	17ffffdc 	b	96030d58 <tegrabl_dt_read_reg_by_index+0x12c>
		} else if (size_cells == 2) {
    96030dec:	71000a9f 	cmp	w20, #0x2
    96030df0:	54000141 	b.ne	96030e18 <tegrabl_dt_read_reg_by_index+0x1ec>  // b.any
			*size = (uint64_t)fdt32_to_cpu(*(prop_p++)) << 32;
    96030df4:	b9400260 	ldr	w0, [x19]
    96030df8:	97ffff8b 	bl	96030c24 <fdt32_to_cpu>
    96030dfc:	2a0003e1 	mov	w1, w0
			*size |= (uint64_t)fdt32_to_cpu(*(prop_p++));
    96030e00:	b9400660 	ldr	w0, [x19, #4]
    96030e04:	97ffff88 	bl	96030c24 <fdt32_to_cpu>
    96030e08:	2a0003e0 	mov	w0, w0
    96030e0c:	aa018001 	orr	x1, x0, x1, lsl #32
    96030e10:	f90002e1 	str	x1, [x23]
    96030e14:	17ffff96 	b	96030c6c <tegrabl_dt_read_reg_by_index+0x40>
			pr_error("unsupported #size-cells value\n");
    96030e18:	d00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96030e1c:	91232800 	add	x0, x0, #0x8ca
    96030e20:	97ffc614 	bl	96022670 <tegrabl_printf>
    96030e24:	17ffff92 	b	96030c6c <tegrabl_dt_read_reg_by_index+0x40>
		return TEGRABL_ERR_NOT_FOUND;
    96030e28:	528001a0 	mov	w0, #0xd                   	// #13
    96030e2c:	17ffff91 	b	96030c70 <tegrabl_dt_read_reg_by_index+0x44>

0000000096030e30 <tegrabl_dt_set_fdt_handle>:
}

tegrabl_error_t tegrabl_dt_set_fdt_handle(tegrabl_dt_type_t type,
										  void *fdt)
{
	if (type >= TEGRABL_DT_COUNT) {
    96030e30:	7100081f 	cmp	w0, #0x2
    96030e34:	540000c8 	b.hi	96030e4c <tegrabl_dt_set_fdt_handle+0x1c>  // b.pmore
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
	}

	fdt_handle_table[type] = fdt;
    96030e38:	d0000222 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96030e3c:	91306042 	add	x2, x2, #0xc18
    96030e40:	f8205841 	str	x1, [x2, w0, uxtw #3]
	return TEGRABL_NO_ERROR;
    96030e44:	52800000 	mov	w0, #0x0                   	// #0
}
    96030e48:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96030e4c:	52800020 	mov	w0, #0x1                   	// #1
    96030e50:	72ab8b80 	movk	w0, #0x5c5c, lsl #16
    96030e54:	17fffffd 	b	96030e48 <tegrabl_dt_set_fdt_handle+0x18>

0000000096030e58 <tegrabl_dt_get_fdt_handle>:

tegrabl_error_t tegrabl_dt_get_fdt_handle(tegrabl_dt_type_t type, void **fdt)
{
	if (type >= TEGRABL_DT_COUNT) {
    96030e58:	7100081f 	cmp	w0, #0x2
    96030e5c:	54000108 	b.hi	96030e7c <tegrabl_dt_get_fdt_handle+0x24>  // b.pmore
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
	}
	if (fdt_handle_table[type] == NULL) {
    96030e60:	d0000222 	adrp	x2, 96076000 <free_dram_block+0x38e8>
    96030e64:	91306042 	add	x2, x2, #0xc18
    96030e68:	f8605840 	ldr	x0, [x2, w0, uxtw #3]
    96030e6c:	b40000e0 	cbz	x0, 96030e88 <tegrabl_dt_get_fdt_handle+0x30>
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 0);
	}

	*fdt = fdt_handle_table[type];
    96030e70:	f9000020 	str	x0, [x1]
	return TEGRABL_NO_ERROR;
    96030e74:	52800000 	mov	w0, #0x0                   	// #0
}
    96030e78:	d65f03c0 	ret
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_SUPPORTED, 0);
    96030e7c:	52800020 	mov	w0, #0x1                   	// #1
		return TEGRABL_ERROR(TEGRABL_ERR_NOT_INITIALIZED, 0);
    96030e80:	72ab8b80 	movk	w0, #0x5c5c, lsl #16
    96030e84:	17fffffd 	b	96030e78 <tegrabl_dt_get_fdt_handle+0x20>
    96030e88:	52800400 	mov	w0, #0x20                  	// #32
    96030e8c:	17fffffd 	b	96030e80 <tegrabl_dt_get_fdt_handle+0x28>

0000000096030e90 <tegrabl_dt_get_child_count>:

uint32_t tegrabl_dt_get_child_count(const void *fdt, int node_offset)
{
	int sub_offset, children = 0;

	if (!fdt) {
    96030e90:	b50000e0 	cbnz	x0, 96030eac <tegrabl_dt_get_child_count+0x1c>
		return 0;
    96030e94:	52800000 	mov	w0, #0x0                   	// #0
	while (sub_offset != -FDT_ERR_NOTFOUND) {
		children++;
		sub_offset = fdt_next_subnode(fdt, sub_offset);
	}
	return children;
}
    96030e98:	d65f03c0 	ret
		return 0;
    96030e9c:	52800000 	mov	w0, #0x0                   	// #0
}
    96030ea0:	a94153f3 	ldp	x19, x20, [sp, #16]
    96030ea4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96030ea8:	d65f03c0 	ret
{
    96030eac:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96030eb0:	910003fd 	mov	x29, sp
    96030eb4:	a90153f3 	stp	x19, x20, [sp, #16]
    96030eb8:	aa0003f4 	mov	x20, x0
	sub_offset = fdt_first_subnode(fdt, node_offset);
    96030ebc:	940002bd 	bl	960319b0 <fdt_first_subnode>
	if (sub_offset == -FDT_ERR_NOTFOUND) {
    96030ec0:	3100041f 	cmn	w0, #0x1
    96030ec4:	54fffec0 	b.eq	96030e9c <tegrabl_dt_get_child_count+0xc>  // b.none
	int sub_offset, children = 0;
    96030ec8:	52800013 	mov	w19, #0x0                   	// #0
		sub_offset = fdt_next_subnode(fdt, sub_offset);
    96030ecc:	2a0003e1 	mov	w1, w0
		children++;
    96030ed0:	11000673 	add	w19, w19, #0x1
		sub_offset = fdt_next_subnode(fdt, sub_offset);
    96030ed4:	aa1403e0 	mov	x0, x20
    96030ed8:	940002c3 	bl	960319e4 <fdt_next_subnode>
	while (sub_offset != -FDT_ERR_NOTFOUND) {
    96030edc:	3100041f 	cmn	w0, #0x1
    96030ee0:	54ffff61 	b.ne	96030ecc <tegrabl_dt_get_child_count+0x3c>  // b.any
	return children;
    96030ee4:	2a1303e0 	mov	w0, w19
    96030ee8:	17ffffee 	b	96030ea0 <tegrabl_dt_get_child_count+0x10>

0000000096030eec <tegrabl_dt_get_child_with_name>:
											int *res)
{
	int sub_offset, len;
	const char *sub_name;

	if (!fdt || !name || !res) {
    96030eec:	f100001f 	cmp	x0, #0x0
    96030ef0:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96030ef4:	54000580 	b.eq	96030fa4 <tegrabl_dt_get_child_with_name+0xb8>  // b.none
    96030ef8:	b4000563 	cbz	x3, 96030fa4 <tegrabl_dt_get_child_with_name+0xb8>
{
    96030efc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96030f00:	910003fd 	mov	x29, sp
    96030f04:	a90153f3 	stp	x19, x20, [sp, #16]
    96030f08:	aa0003f4 	mov	x20, x0
    96030f0c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96030f10:	aa0303f6 	mov	x22, x3
    96030f14:	aa0203f5 	mov	x21, x2
    96030f18:	f9001bf7 	str	x23, [sp, #48]
		return TEGRABL_ERR_INVALID;
	}

	tegrabl_dt_for_each_child(fdt, start_offset, sub_offset) {
    96030f1c:	940002a5 	bl	960319b0 <fdt_first_subnode>
    96030f20:	2a0003f3 	mov	w19, w0
    96030f24:	3100041f 	cmn	w0, #0x1
    96030f28:	54000061 	b.ne	96030f34 <tegrabl_dt_get_child_with_name+0x48>  // b.any
			*res = sub_offset;
			return TEGRABL_NO_ERROR;
		}
	}

	return TEGRABL_ERR_NOT_FOUND;
    96030f2c:	528001a0 	mov	w0, #0xd                   	// #13
    96030f30:	14000014 	b	96030f80 <tegrabl_dt_get_child_with_name+0x94>
		sub_name = fdt_get_name(fdt, sub_offset, &len);
    96030f34:	910133a2 	add	x2, x29, #0x4c
    96030f38:	2a1303e1 	mov	w1, w19
    96030f3c:	aa1403e0 	mov	x0, x20
    96030f40:	94000377 	bl	96031d1c <fdt_get_name>
    96030f44:	aa0003f7 	mov	x23, x0
		if (!sub_name || !len || strlen(name) != (unsigned int)len) {
    96030f48:	b4000260 	cbz	x0, 96030f94 <tegrabl_dt_get_child_with_name+0xa8>
    96030f4c:	b9404fa0 	ldr	w0, [x29, #76]
    96030f50:	34000220 	cbz	w0, 96030f94 <tegrabl_dt_get_child_with_name+0xa8>
    96030f54:	aa1503e0 	mov	x0, x21
    96030f58:	97ffe4ed 	bl	9602a30c <strlen>
    96030f5c:	b9404fa2 	ldr	w2, [x29, #76]
    96030f60:	eb22401f 	cmp	x0, w2, uxtw
    96030f64:	54000181 	b.ne	96030f94 <tegrabl_dt_get_child_with_name+0xa8>  // b.any
		if (!strncmp(name, sub_name, len)) {
    96030f68:	93407c42 	sxtw	x2, w2
    96030f6c:	aa1703e1 	mov	x1, x23
    96030f70:	aa1503e0 	mov	x0, x21
    96030f74:	97ffe4c2 	bl	9602a27c <strncmp>
    96030f78:	350000e0 	cbnz	w0, 96030f94 <tegrabl_dt_get_child_with_name+0xa8>
			*res = sub_offset;
    96030f7c:	b90002d3 	str	w19, [x22]
}
    96030f80:	a94153f3 	ldp	x19, x20, [sp, #16]
    96030f84:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96030f88:	f9401bf7 	ldr	x23, [sp, #48]
    96030f8c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96030f90:	d65f03c0 	ret
	tegrabl_dt_for_each_child(fdt, start_offset, sub_offset) {
    96030f94:	2a1303e1 	mov	w1, w19
    96030f98:	aa1403e0 	mov	x0, x20
    96030f9c:	94000292 	bl	960319e4 <fdt_next_subnode>
    96030fa0:	17ffffe0 	b	96030f20 <tegrabl_dt_get_child_with_name+0x34>
		return TEGRABL_ERR_INVALID;
    96030fa4:	52800040 	mov	w0, #0x2                   	// #2
}
    96030fa8:	d65f03c0 	ret

0000000096030fac <tegrabl_dt_get_prop_by_idx>:
										char *prop_name, size_t sz,
										uint32_t idx, void *res)
{
	const void *prop;

	if (!fdt || !prop_name || !res) {
    96030fac:	f100001f 	cmp	x0, #0x0
    96030fb0:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96030fb4:	54000380 	b.eq	96031024 <tegrabl_dt_get_prop_by_idx+0x78>  // b.none
    96030fb8:	b4000365 	cbz	x5, 96031024 <tegrabl_dt_get_prop_by_idx+0x78>
		return TEGRABL_ERR_INVALID;
	}

	if (sz != 1 && sz != 4) {
    96030fbc:	f100047f 	cmp	x3, #0x1
    96030fc0:	fa441864 	ccmp	x3, #0x4, #0x4, ne  // ne = any
    96030fc4:	54000301 	b.ne	96031024 <tegrabl_dt_get_prop_by_idx+0x78>  // b.any
{
    96030fc8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96030fcc:	910003fd 	mov	x29, sp
    96030fd0:	a90153f3 	stp	x19, x20, [sp, #16]
    96030fd4:	aa0303f3 	mov	x19, x3
    96030fd8:	f90013f5 	str	x21, [sp, #32]
    96030fdc:	aa0503f4 	mov	x20, x5
		return TEGRABL_ERR_INVALID;
	}

	prop = fdt_getprop(fdt, node_offset, prop_name, NULL);
    96030fe0:	d2800003 	mov	x3, #0x0                   	// #0
    96030fe4:	2a0403f5 	mov	w21, w4
    96030fe8:	94000408 	bl	96032008 <fdt_getprop>

	if (!prop) {
    96030fec:	b4000200 	cbz	x0, 9603102c <tegrabl_dt_get_prop_by_idx+0x80>
		return TEGRABL_ERR_NOT_FOUND;
	}

	switch (sz) {
    96030ff0:	f100067f 	cmp	x19, #0x1
    96030ff4:	540000a0 	b.eq	96031008 <tegrabl_dt_get_prop_by_idx+0x5c>  // b.none
    96030ff8:	f100127f 	cmp	x19, #0x4
    96030ffc:	540000c0 	b.eq	96031014 <tegrabl_dt_get_prop_by_idx+0x68>  // b.none
	case 4:
		*(uint32_t *)res = fdt32_to_cpu(*((uint32_t *)prop + idx));
		break;
	}

	return TEGRABL_NO_ERROR;
    96031000:	52800000 	mov	w0, #0x0                   	// #0
    96031004:	1400000b 	b	96031030 <tegrabl_dt_get_prop_by_idx+0x84>
		*(uint8_t *)res = *((uint8_t *)prop + idx);
    96031008:	38754800 	ldrb	w0, [x0, w21, uxtw]
    9603100c:	39000280 	strb	w0, [x20]
    96031010:	17fffffc 	b	96031000 <tegrabl_dt_get_prop_by_idx+0x54>
		*(uint32_t *)res = fdt32_to_cpu(*((uint32_t *)prop + idx));
    96031014:	b8755800 	ldr	w0, [x0, w21, uxtw #2]
    96031018:	97ffff03 	bl	96030c24 <fdt32_to_cpu>
    9603101c:	b9000280 	str	w0, [x20]
    96031020:	17fffff8 	b	96031000 <tegrabl_dt_get_prop_by_idx+0x54>
		return TEGRABL_ERR_INVALID;
    96031024:	52800040 	mov	w0, #0x2                   	// #2
}
    96031028:	d65f03c0 	ret
		return TEGRABL_ERR_NOT_FOUND;
    9603102c:	528001a0 	mov	w0, #0xd                   	// #13
}
    96031030:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031034:	f94013f5 	ldr	x21, [sp, #32]
    96031038:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9603103c:	d65f03c0 	ret

0000000096031040 <tegrabl_dt_get_prop_array>:
{
	int lenp;
	const void *prop;
	uint32_t target_num, found_num, i;

	if (!fdt || !prop_name || !res || (!nmemb && !num)) {
    96031040:	f100001f 	cmp	x0, #0x0
    96031044:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96031048:	54000740 	b.eq	96031130 <tegrabl_dt_get_prop_array+0xf0>  // b.none
    9603104c:	b4000725 	cbz	x5, 96031130 <tegrabl_dt_get_prop_array+0xf0>
    96031050:	7100009f 	cmp	w4, #0x0
    96031054:	fa4008c0 	ccmp	x6, #0x0, #0x0, eq  // eq = none
    96031058:	540006c0 	b.eq	96031130 <tegrabl_dt_get_prop_array+0xf0>  // b.none
		return TEGRABL_ERR_INVALID;
	}

	if (sz != 1 && sz != 4) {
    9603105c:	f100047f 	cmp	x3, #0x1
    96031060:	fa441864 	ccmp	x3, #0x4, #0x4, ne  // ne = any
    96031064:	54000661 	b.ne	96031130 <tegrabl_dt_get_prop_array+0xf0>  // b.any
{
    96031068:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9603106c:	910003fd 	mov	x29, sp
    96031070:	a90153f3 	stp	x19, x20, [sp, #16]
    96031074:	aa0303f4 	mov	x20, x3
		return TEGRABL_ERR_INVALID;
	}

	prop = fdt_getprop(fdt, node_offset, prop_name, &lenp);
    96031078:	9100f3a3 	add	x3, x29, #0x3c
{
    9603107c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96031080:	aa0603f3 	mov	x19, x6
    96031084:	aa0503f6 	mov	x22, x5
    96031088:	2a0403f5 	mov	w21, w4
	prop = fdt_getprop(fdt, node_offset, prop_name, &lenp);
    9603108c:	940003df 	bl	96032008 <fdt_getprop>
    96031090:	aa0003e3 	mov	x3, x0
	if (!prop) {
    96031094:	b5000100 	cbnz	x0, 960310b4 <tegrabl_dt_get_prop_array+0x74>
		if (num) {
    96031098:	b4000053 	cbz	x19, 960310a0 <tegrabl_dt_get_prop_array+0x60>
			*num = 0;
    9603109c:	b900027f 	str	wzr, [x19]
		}
		return TEGRABL_ERR_NOT_FOUND;
    960310a0:	528001a0 	mov	w0, #0xd                   	// #13
		}
		break;
	}

	return TEGRABL_NO_ERROR;
}
    960310a4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960310a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960310ac:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960310b0:	d65f03c0 	ret
	found_num = lenp / sz;
    960310b4:	b9803fa0 	ldrsw	x0, [x29, #60]
    960310b8:	9ad40800 	udiv	x0, x0, x20
    960310bc:	2a0003e1 	mov	w1, w0
	target_num = (nmemb == 0) ? found_num : MIN(nmemb, found_num);
    960310c0:	34000075 	cbz	w21, 960310cc <tegrabl_dt_get_prop_array+0x8c>
    960310c4:	6b15001f 	cmp	w0, w21
    960310c8:	1a959001 	csel	w1, w0, w21, ls  // ls = plast
	switch (sz) {
    960310cc:	f100069f 	cmp	x20, #0x1
    960310d0:	540001a0 	b.eq	96031104 <tegrabl_dt_get_prop_array+0xc4>  // b.none
    960310d4:	f100129f 	cmp	x20, #0x4
    960310d8:	54000280 	b.eq	96031128 <tegrabl_dt_get_prop_array+0xe8>  // b.none
	return TEGRABL_NO_ERROR;
    960310dc:	52800000 	mov	w0, #0x0                   	// #0
    960310e0:	17fffff1 	b	960310a4 <tegrabl_dt_get_prop_array+0x64>
			*((uint8_t *)res + i) = *((uint8_t *)prop + i);
    960310e4:	38606862 	ldrb	w2, [x3, x0]
    960310e8:	38206ac2 	strb	w2, [x22, x0]
    960310ec:	91000400 	add	x0, x0, #0x1
		for (i = 0; i < target_num; i++) {
    960310f0:	6b00003f 	cmp	w1, w0
    960310f4:	54ffff88 	b.hi	960310e4 <tegrabl_dt_get_prop_array+0xa4>  // b.pmore
		if (num) {
    960310f8:	b4ffff33 	cbz	x19, 960310dc <tegrabl_dt_get_prop_array+0x9c>
			*num = i;
    960310fc:	b9000261 	str	w1, [x19]
    96031100:	17fffff7 	b	960310dc <tegrabl_dt_get_prop_array+0x9c>
	switch (sz) {
    96031104:	d2800000 	mov	x0, #0x0                   	// #0
    96031108:	17fffffa 	b	960310f0 <tegrabl_dt_get_prop_array+0xb0>
			*((uint32_t *)res + i) = fdt32_to_cpu(*((uint32_t *)prop + i));
    9603110c:	b8627860 	ldr	w0, [x3, x2, lsl #2]
    96031110:	97fffec5 	bl	96030c24 <fdt32_to_cpu>
    96031114:	b8227ac0 	str	w0, [x22, x2, lsl #2]
    96031118:	91000442 	add	x2, x2, #0x1
		for (i = 0; i < target_num; i++) {
    9603111c:	6b02003f 	cmp	w1, w2
    96031120:	54ffff68 	b.hi	9603110c <tegrabl_dt_get_prop_array+0xcc>  // b.pmore
    96031124:	17fffff5 	b	960310f8 <tegrabl_dt_get_prop_array+0xb8>
	switch (sz) {
    96031128:	d2800002 	mov	x2, #0x0                   	// #0
    9603112c:	17fffffc 	b	9603111c <tegrabl_dt_get_prop_array+0xdc>
		return TEGRABL_ERR_INVALID;
    96031130:	52800040 	mov	w0, #0x2                   	// #2
}
    96031134:	d65f03c0 	ret

0000000096031138 <tegrabl_dt_get_prop_string>:

tegrabl_error_t tegrabl_dt_get_prop_string(const void *fdt, int node_offset,
										char *prop_name, const char **res)
{
	if (!fdt || !prop_name || !res) {
    96031138:	f100001f 	cmp	x0, #0x0
    9603113c:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96031140:	540001e0 	b.eq	9603117c <tegrabl_dt_get_prop_string+0x44>  // b.none
    96031144:	b40001c3 	cbz	x3, 9603117c <tegrabl_dt_get_prop_string+0x44>
{
    96031148:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9603114c:	910003fd 	mov	x29, sp
    96031150:	f9000bf3 	str	x19, [sp, #16]
    96031154:	aa0303f3 	mov	x19, x3
		return TEGRABL_ERR_INVALID;
	}

	*res = fdt_getprop(fdt, node_offset, prop_name, NULL);
    96031158:	d2800003 	mov	x3, #0x0                   	// #0
    9603115c:	940003ab 	bl	96032008 <fdt_getprop>

	if (!*res) {
		return TEGRABL_ERR_NOT_FOUND;
	}

	return TEGRABL_NO_ERROR;
    96031160:	f100001f 	cmp	x0, #0x0
	*res = fdt_getprop(fdt, node_offset, prop_name, NULL);
    96031164:	f9000260 	str	x0, [x19]
	return TEGRABL_NO_ERROR;
    96031168:	528001a0 	mov	w0, #0xd                   	// #13
}
    9603116c:	f9400bf3 	ldr	x19, [sp, #16]
	return TEGRABL_NO_ERROR;
    96031170:	1a9f0000 	csel	w0, w0, wzr, eq  // eq = none
}
    96031174:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031178:	d65f03c0 	ret
		return TEGRABL_ERR_INVALID;
    9603117c:	52800040 	mov	w0, #0x2                   	// #2
}
    96031180:	d65f03c0 	ret

0000000096031184 <tegrabl_dt_get_prop_string_array>:
{
	const char *prop, *iter;
	int len;
	uint32_t i = 0;

	if (!fdt || !prop_name) {
    96031184:	f100001f 	cmp	x0, #0x0
    96031188:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    9603118c:	54000480 	b.eq	9603121c <tegrabl_dt_get_prop_string_array+0x98>  // b.none
{
    96031190:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031194:	910003fd 	mov	x29, sp
    96031198:	a90153f3 	stp	x19, x20, [sp, #16]
    9603119c:	aa0303f3 	mov	x19, x3
    960311a0:	aa0403f4 	mov	x20, x4
		return TEGRABL_ERR_INVALID;
	}

	prop = fdt_getprop(fdt, node_offset, prop_name, &len);
    960311a4:	9100b3a3 	add	x3, x29, #0x2c
    960311a8:	94000398 	bl	96032008 <fdt_getprop>
	if (!prop) {
    960311ac:	b4000340 	cbz	x0, 96031214 <tegrabl_dt_get_prop_string_array+0x90>
		return TEGRABL_ERR_NOT_FOUND;
	}

	if (res) {
    960311b0:	b4000053 	cbz	x19, 960311b8 <tegrabl_dt_get_prop_string_array+0x34>
		res[i] = prop;
    960311b4:	f9000260 	str	x0, [x19]
	}

	for (iter = prop; iter < prop + len; iter++) {
    960311b8:	b9802fa1 	ldrsw	x1, [x29, #44]
		if (*iter == '\0') {
			i++;
			if (num) {
				*num = i;
			}
			if (res && (iter != prop + len - 1)) {
    960311bc:	52800002 	mov	w2, #0x0                   	// #0
	for (iter = prop; iter < prop + len; iter++) {
    960311c0:	8b010004 	add	x4, x0, x1
			if (res && (iter != prop + len - 1)) {
    960311c4:	d1000421 	sub	x1, x1, #0x1
    960311c8:	8b010001 	add	x1, x0, x1
	for (iter = prop; iter < prop + len; iter++) {
    960311cc:	eb04001f 	cmp	x0, x4
    960311d0:	540000a3 	b.cc	960311e4 <tegrabl_dt_get_prop_string_array+0x60>  // b.lo, b.ul, b.last
				res[i] = iter + 1;
			}
		}
	}

	return TEGRABL_NO_ERROR;
    960311d4:	52800000 	mov	w0, #0x0                   	// #0
}
    960311d8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960311dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960311e0:	d65f03c0 	ret
		if (*iter == '\0') {
    960311e4:	aa0003e3 	mov	x3, x0
    960311e8:	38401465 	ldrb	w5, [x3], #1
    960311ec:	35000105 	cbnz	w5, 9603120c <tegrabl_dt_get_prop_string_array+0x88>
			i++;
    960311f0:	11000442 	add	w2, w2, #0x1
			if (num) {
    960311f4:	b4000054 	cbz	x20, 960311fc <tegrabl_dt_get_prop_string_array+0x78>
				*num = i;
    960311f8:	b9000282 	str	w2, [x20]
			if (res && (iter != prop + len - 1)) {
    960311fc:	b4000093 	cbz	x19, 9603120c <tegrabl_dt_get_prop_string_array+0x88>
    96031200:	eb01001f 	cmp	x0, x1
    96031204:	54000040 	b.eq	9603120c <tegrabl_dt_get_prop_string_array+0x88>  // b.none
				res[i] = iter + 1;
    96031208:	f8225a63 	str	x3, [x19, w2, uxtw #3]
	for (iter = prop; iter < prop + len; iter++) {
    9603120c:	aa0303e0 	mov	x0, x3
    96031210:	17ffffef 	b	960311cc <tegrabl_dt_get_prop_string_array+0x48>
		return TEGRABL_ERR_NOT_FOUND;
    96031214:	528001a0 	mov	w0, #0xd                   	// #13
    96031218:	17fffff0 	b	960311d8 <tegrabl_dt_get_prop_string_array+0x54>
		return TEGRABL_ERR_INVALID;
    9603121c:	52800040 	mov	w0, #0x2                   	// #2
}
    96031220:	d65f03c0 	ret

0000000096031224 <tegrabl_dt_count_elems_of_size>:
						char *prop_name, uint32_t sz, uint32_t *num)
{
	int len;
	const void *prop;

	if (!fdt || !prop_name || !num) {
    96031224:	f100001f 	cmp	x0, #0x0
    96031228:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    9603122c:	54000220 	b.eq	96031270 <tegrabl_dt_count_elems_of_size+0x4c>  // b.none
    96031230:	b4000204 	cbz	x4, 96031270 <tegrabl_dt_count_elems_of_size+0x4c>
{
    96031234:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031238:	910003fd 	mov	x29, sp
    9603123c:	a90153f3 	stp	x19, x20, [sp, #16]
    96031240:	2a0303f4 	mov	w20, w3
    96031244:	aa0403f3 	mov	x19, x4
		return TEGRABL_ERR_INVALID;
	}

	prop = fdt_getprop(fdt, node_offset, prop_name, &len);
    96031248:	9100b3a3 	add	x3, x29, #0x2c
    9603124c:	9400036f 	bl	96032008 <fdt_getprop>
	if (!prop) {
    96031250:	b4000140 	cbz	x0, 96031278 <tegrabl_dt_count_elems_of_size+0x54>
		return TEGRABL_ERR_NOT_FOUND;
	}

	*num = len / sz;
    96031254:	b9402fa0 	ldr	w0, [x29, #44]
    96031258:	1ad40803 	udiv	w3, w0, w20
	return TEGRABL_NO_ERROR;
    9603125c:	52800000 	mov	w0, #0x0                   	// #0
	*num = len / sz;
    96031260:	b9000263 	str	w3, [x19]
}
    96031264:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031268:	a8c37bfd 	ldp	x29, x30, [sp], #48
    9603126c:	d65f03c0 	ret
		return TEGRABL_ERR_INVALID;
    96031270:	52800040 	mov	w0, #0x2                   	// #2
}
    96031274:	d65f03c0 	ret
		return TEGRABL_ERR_NOT_FOUND;
    96031278:	528001a0 	mov	w0, #0xd                   	// #13
    9603127c:	17fffffa 	b	96031264 <tegrabl_dt_count_elems_of_size+0x40>

0000000096031280 <tegrabl_dt_get_node_with_name>:
											char *name, int *res)
{
	int iter, len;
	const char *iter_name;

	if (!fdt || !name || !res) {
    96031280:	f100001f 	cmp	x0, #0x0
    96031284:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96031288:	540004a0 	b.eq	9603131c <tegrabl_dt_get_node_with_name+0x9c>  // b.none
{
    9603128c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96031290:	910003fd 	mov	x29, sp
    96031294:	a90153f3 	stp	x19, x20, [sp, #16]
    96031298:	aa0303f4 	mov	x20, x3
    9603129c:	a9025bf5 	stp	x21, x22, [sp, #32]
	if (!fdt || !name || !res) {
    960312a0:	b4000423 	cbz	x3, 96031324 <tegrabl_dt_get_node_with_name+0xa4>
    960312a4:	aa0003f5 	mov	x21, x0
    960312a8:	2a0103f3 	mov	w19, w1
    960312ac:	aa0203f6 	mov	x22, x2
		return TEGRABL_ERR_INVALID;
	}

	tegrabl_dt_for_each_node_from(fdt, iter, start_offset) {
    960312b0:	36f80093 	tbz	w19, #31, 960312c0 <tegrabl_dt_get_node_with_name+0x40>
			return TEGRABL_NO_ERROR;
		}
	}

	*res = 0;
	return TEGRABL_ERR_NOT_FOUND;
    960312b4:	528001a0 	mov	w0, #0xd                   	// #13
	*res = 0;
    960312b8:	b900029f 	str	wzr, [x20]
	return TEGRABL_ERR_NOT_FOUND;
    960312bc:	1400000e 	b	960312f4 <tegrabl_dt_get_node_with_name+0x74>
		iter_name = fdt_get_name(fdt, iter, &len);
    960312c0:	9100f3a2 	add	x2, x29, #0x3c
    960312c4:	2a1303e1 	mov	w1, w19
    960312c8:	aa1503e0 	mov	x0, x21
    960312cc:	94000294 	bl	96031d1c <fdt_get_name>
		if (!iter_name || !len) {
    960312d0:	b40001a0 	cbz	x0, 96031304 <tegrabl_dt_get_node_with_name+0x84>
    960312d4:	b9403fa2 	ldr	w2, [x29, #60]
    960312d8:	34000162 	cbz	w2, 96031304 <tegrabl_dt_get_node_with_name+0x84>
		if (!strncmp(name, iter_name, len)) {
    960312dc:	aa0003e1 	mov	x1, x0
    960312e0:	93407c42 	sxtw	x2, w2
    960312e4:	aa1603e0 	mov	x0, x22
    960312e8:	97ffe3e5 	bl	9602a27c <strncmp>
    960312ec:	350000c0 	cbnz	w0, 96031304 <tegrabl_dt_get_node_with_name+0x84>
			*res = iter;
    960312f0:	b9000293 	str	w19, [x20]
}
    960312f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960312f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960312fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96031300:	d65f03c0 	ret
	return fdt_next_node(fdt, node, NULL);
    96031304:	2a1303e1 	mov	w1, w19
    96031308:	d2800002 	mov	x2, #0x0                   	// #0
    9603130c:	aa1503e0 	mov	x0, x21
    96031310:	9400017c 	bl	96031900 <fdt_next_node>
    96031314:	2a0003f3 	mov	w19, w0
    96031318:	17ffffe6 	b	960312b0 <tegrabl_dt_get_node_with_name+0x30>
		return TEGRABL_ERR_INVALID;
    9603131c:	52800040 	mov	w0, #0x2                   	// #2
}
    96031320:	d65f03c0 	ret
		return TEGRABL_ERR_INVALID;
    96031324:	52800040 	mov	w0, #0x2                   	// #2
    96031328:	17fffff3 	b	960312f4 <tegrabl_dt_get_node_with_name+0x74>

000000009603132c <tegrabl_dt_get_node_with_compatible>:
												int start_offset, char *comp,
												int *res)
{
	int offset;

	if (!fdt || !comp || !res) {
    9603132c:	f100001f 	cmp	x0, #0x0
    96031330:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96031334:	54000200 	b.eq	96031374 <tegrabl_dt_get_node_with_compatible+0x48>  // b.none
    96031338:	b40001e3 	cbz	x3, 96031374 <tegrabl_dt_get_node_with_compatible+0x48>
{
    9603133c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031340:	910003fd 	mov	x29, sp
    96031344:	f9000bf3 	str	x19, [sp, #16]
    96031348:	aa0303f3 	mov	x19, x3
		return TEGRABL_ERR_INVALID;
	}

	offset = fdt_node_offset_by_compatible(fdt, start_offset, comp);
    9603134c:	940004d9 	bl	960326b0 <fdt_node_offset_by_compatible>
	if (offset < 0) {
    96031350:	36f800c0 	tbz	w0, #31, 96031368 <tegrabl_dt_get_node_with_compatible+0x3c>
		*res = 0;
		return TEGRABL_ERR_NOT_FOUND;
    96031354:	528001a0 	mov	w0, #0xd                   	// #13
		*res = 0;
    96031358:	b900027f 	str	wzr, [x19]
	}

	*res = offset;
	return TEGRABL_NO_ERROR;
}
    9603135c:	f9400bf3 	ldr	x19, [sp, #16]
    96031360:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031364:	d65f03c0 	ret
	*res = offset;
    96031368:	b9000260 	str	w0, [x19]
	return TEGRABL_NO_ERROR;
    9603136c:	52800000 	mov	w0, #0x0                   	// #0
    96031370:	17fffffb 	b	9603135c <tegrabl_dt_get_node_with_compatible+0x30>
		return TEGRABL_ERR_INVALID;
    96031374:	52800040 	mov	w0, #0x2                   	// #2
}
    96031378:	d65f03c0 	ret

000000009603137c <tegrabl_dt_get_node_with_path>:
tegrabl_error_t tegrabl_dt_get_node_with_path(const void *fdt, const char *path,
											int *res)
{
	int node_offset;

	if (!fdt || !path || !res) {
    9603137c:	f100001f 	cmp	x0, #0x0
    96031380:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    96031384:	540002c0 	b.eq	960313dc <tegrabl_dt_get_node_with_path+0x60>  // b.none
    96031388:	b40002a2 	cbz	x2, 960313dc <tegrabl_dt_get_node_with_path+0x60>
{
    9603138c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031390:	910003fd 	mov	x29, sp
    96031394:	a90153f3 	stp	x19, x20, [sp, #16]
    96031398:	aa0103f4 	mov	x20, x1
    9603139c:	aa0203f3 	mov	x19, x2
		return TEGRABL_ERR_INVALID;
	}

	node_offset = fdt_path_offset(fdt, path);
    960313a0:	94000365 	bl	96032134 <fdt_path_offset>
	if (node_offset < 0) {
    960313a4:	36f80160 	tbz	w0, #31, 960313d0 <tegrabl_dt_get_node_with_path+0x54>
		pr_error("Error %d when finding node with path %s\n", node_offset,
    960313a8:	2a0003e1 	mov	w1, w0
    960313ac:	aa1403e2 	mov	x2, x20
    960313b0:	b00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960313b4:	91216c00 	add	x0, x0, #0x85b
    960313b8:	97ffc4ae 	bl	96022670 <tegrabl_printf>
					path);
		*res = 0;
    960313bc:	b900027f 	str	wzr, [x19]
		return TEGRABL_ERR_NOT_FOUND;
    960313c0:	528001a0 	mov	w0, #0xd                   	// #13
	}

	*res = node_offset;
	return TEGRABL_NO_ERROR;
}
    960313c4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960313c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960313cc:	d65f03c0 	ret
	*res = node_offset;
    960313d0:	b9000260 	str	w0, [x19]
	return TEGRABL_NO_ERROR;
    960313d4:	52800000 	mov	w0, #0x0                   	// #0
    960313d8:	17fffffb 	b	960313c4 <tegrabl_dt_get_node_with_path+0x48>
		return TEGRABL_ERR_INVALID;
    960313dc:	52800040 	mov	w0, #0x2                   	// #2
}
    960313e0:	d65f03c0 	ret

00000000960313e4 <tegrabl_dt_is_device_available>:
tegrabl_error_t tegrabl_dt_is_device_available(const void *fdt, int node_offset,
											bool *res)
{
	const char *prop;

	if (!fdt || !res) {
    960313e4:	f100001f 	cmp	x0, #0x0
    960313e8:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    960313ec:	540003c0 	b.eq	96031464 <tegrabl_dt_is_device_available+0x80>  // b.none
{
    960313f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
		return TEGRABL_ERR_INVALID;
	}

	prop = fdt_getprop(fdt, node_offset, "status", NULL);
    960313f4:	d2800003 	mov	x3, #0x0                   	// #0
{
    960313f8:	910003fd 	mov	x29, sp
    960313fc:	a90153f3 	stp	x19, x20, [sp, #16]
    96031400:	aa0203f3 	mov	x19, x2
	prop = fdt_getprop(fdt, node_offset, "status", NULL);
    96031404:	f0000042 	adrp	x2, 9603c000 <__func__.4414+0x9>
    96031408:	9123a842 	add	x2, x2, #0x8ea
    9603140c:	940002ff 	bl	96032008 <fdt_getprop>
    96031410:	aa0003f4 	mov	x20, x0

	if (!prop || !strncmp(prop, "okay", 4) || !strncmp(prop, "ok", 2))
    96031414:	b50000e0 	cbnz	x0, 96031430 <tegrabl_dt_is_device_available+0x4c>
		*res = true;
    96031418:	52800020 	mov	w0, #0x1                   	// #1
    9603141c:	39000260 	strb	w0, [x19]
	else
		*res = false;
    96031420:	52800000 	mov	w0, #0x0                   	// #0

	return TEGRABL_NO_ERROR;
}
    96031424:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031428:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9603142c:	d65f03c0 	ret
	if (!prop || !strncmp(prop, "okay", 4) || !strncmp(prop, "ok", 2))
    96031430:	f0000041 	adrp	x1, 9603c000 <__func__.4414+0x9>
    96031434:	d2800082 	mov	x2, #0x4                   	// #4
    96031438:	9123c421 	add	x1, x1, #0x8f1
    9603143c:	97ffe390 	bl	9602a27c <strncmp>
    96031440:	34fffec0 	cbz	w0, 96031418 <tegrabl_dt_is_device_available+0x34>
    96031444:	b00000a1 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    96031448:	d2800042 	mov	x2, #0x2                   	// #2
    9603144c:	91221c21 	add	x1, x1, #0x887
    96031450:	aa1403e0 	mov	x0, x20
    96031454:	97ffe38a 	bl	9602a27c <strncmp>
    96031458:	34fffe00 	cbz	w0, 96031418 <tegrabl_dt_is_device_available+0x34>
		*res = false;
    9603145c:	3900027f 	strb	wzr, [x19]
    96031460:	17fffff0 	b	96031420 <tegrabl_dt_is_device_available+0x3c>
		return TEGRABL_ERR_INVALID;
    96031464:	52800040 	mov	w0, #0x2                   	// #2
}
    96031468:	d65f03c0 	ret

000000009603146c <tegrabl_add_subnode_if_absent>:
	tegrabl_free(compatibles);
	return TEGRABL_NO_ERROR;
}

int tegrabl_add_subnode_if_absent(void *fdt, int parentnode, char *nodename)
{
    9603146c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031470:	910003fd 	mov	x29, sp
    96031474:	a90153f3 	stp	x19, x20, [sp, #16]
    96031478:	aa0203f4 	mov	x20, x2
    9603147c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96031480:	aa0003f5 	mov	x21, x0
    96031484:	2a0103f6 	mov	w22, w1
	int node = -1;

	TEGRABL_ASSERT(fdt);

	node = fdt_subnode_offset(fdt, parentnode, nodename);
    96031488:	94000214 	bl	96031cd8 <fdt_subnode_offset>
    9603148c:	2a0003f3 	mov	w19, w0
	if (node < 0) {
    96031490:	36f801e0 	tbz	w0, #31, 960314cc <tegrabl_add_subnode_if_absent+0x60>
		pr_warn("\"%s\" doesn't exist, creating\n", nodename);
    96031494:	aa1403e1 	mov	x1, x20
    96031498:	b00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    9603149c:	91200000 	add	x0, x0, #0x800
    960314a0:	97ffc474 	bl	96022670 <tegrabl_printf>
		node = fdt_add_subnode(fdt, parentnode, nodename);
    960314a4:	aa1403e2 	mov	x2, x20
    960314a8:	2a1603e1 	mov	w1, w22
    960314ac:	aa1503e0 	mov	x0, x21
    960314b0:	94000681 	bl	96032eb4 <fdt_add_subnode>
    960314b4:	2a0003f3 	mov	w19, w0
		if (node < 0) {
    960314b8:	36f800a0 	tbz	w0, #31, 960314cc <tegrabl_add_subnode_if_absent+0x60>
			pr_error("Creating node \"%s\" failed\n", nodename);
    960314bc:	b00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960314c0:	aa1403e1 	mov	x1, x20
    960314c4:	91208400 	add	x0, x0, #0x821
    960314c8:	97ffc46a 	bl	96022670 <tegrabl_printf>
		}
	}

	return node;
}
    960314cc:	2a1303e0 	mov	w0, w19
    960314d0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960314d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960314d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960314dc:	d65f03c0 	ret

00000000960314e0 <tegrabl_get_alias_by_name>:
{
	int aliasoffset, offset;
	const char *node_value;
	const char *temp;

	if (!fdt_ptr || !namep || !name || !lenp) {
    960314e0:	f100001f 	cmp	x0, #0x0
    960314e4:	fa401844 	ccmp	x2, #0x0, #0x4, ne  // ne = any
    960314e8:	540006c0 	b.eq	960315c0 <tegrabl_get_alias_by_name+0xe0>  // b.none
    960314ec:	f100003f 	cmp	x1, #0x0
    960314f0:	fa401864 	ccmp	x3, #0x0, #0x4, ne  // ne = any
    960314f4:	54000660 	b.eq	960315c0 <tegrabl_get_alias_by_name+0xe0>  // b.none
{
    960314f8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960314fc:	910003fd 	mov	x29, sp
    96031500:	a90153f3 	stp	x19, x20, [sp, #16]
    96031504:	aa0003f3 	mov	x19, x0
    96031508:	a9025bf5 	stp	x21, x22, [sp, #32]
    9603150c:	aa0103f4 	mov	x20, x1
    96031510:	a90363f7 	stp	x23, x24, [sp, #48]
    96031514:	aa0203f5 	mov	x21, x2
    96031518:	aa0303f7 	mov	x23, x3
		return TEGRABL_ERR_INVALID;
	}

	aliasoffset = fdt_path_offset(fdt_ptr, "/aliases");
    9603151c:	b00000a1 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    96031520:	9123b021 	add	x1, x1, #0x8ec
    96031524:	94000304 	bl	96032134 <fdt_path_offset>
	tegrabl_dt_for_each_prop_of(fdt_ptr, offset, aliasoffset) {
    96031528:	2a0003e1 	mov	w1, w0
    9603152c:	aa1303e0 	mov	x0, x19
    96031530:	9400021c 	bl	96031da0 <fdt_first_property_offset>
    96031534:	2a0003f6 	mov	w22, w0
    96031538:	36f80060 	tbz	w0, #31, 96031544 <tegrabl_get_alias_by_name+0x64>
				pr_info("Find %s's alias %s\n", name, namep);
				return TEGRABL_NO_ERROR;
			}
		}
	}
	return TEGRABL_ERR_NOT_FOUND;
    9603153c:	528001a0 	mov	w0, #0xd                   	// #13
    96031540:	14000017 	b	9603159c <tegrabl_get_alias_by_name+0xbc>
		 node_value = fdt_getprop_by_offset(fdt_ptr, offset, &temp, lenp);
    96031544:	aa1703e3 	mov	x3, x23
    96031548:	910123a2 	add	x2, x29, #0x48
    9603154c:	2a1603e1 	mov	w1, w22
    96031550:	aa1303e0 	mov	x0, x19
    96031554:	94000297 	bl	96031fb0 <fdt_getprop_by_offset>
    96031558:	aa0003f8 	mov	x24, x0
		 if (node_value != NULL) {
    9603155c:	b40002a0 	cbz	x0, 960315b0 <tegrabl_get_alias_by_name+0xd0>
			if (!strncmp(node_value, name, strlen(node_value))) {
    96031560:	97ffe36b 	bl	9602a30c <strlen>
    96031564:	aa0003e2 	mov	x2, x0
    96031568:	aa1403e1 	mov	x1, x20
    9603156c:	aa1803e0 	mov	x0, x24
    96031570:	97ffe343 	bl	9602a27c <strncmp>
    96031574:	350001e0 	cbnz	w0, 960315b0 <tegrabl_get_alias_by_name+0xd0>
				strcpy(namep, temp);
    96031578:	f94027a1 	ldr	x1, [x29, #72]
    9603157c:	aa1503e0 	mov	x0, x21
    96031580:	97ffe34e 	bl	9602a2b8 <strcpy>
				pr_info("Find %s's alias %s\n", name, namep);
    96031584:	aa1503e2 	mov	x2, x21
    96031588:	aa1403e1 	mov	x1, x20
    9603158c:	b00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96031590:	9123d400 	add	x0, x0, #0x8f5
    96031594:	97ffc437 	bl	96022670 <tegrabl_printf>
				return TEGRABL_NO_ERROR;
    96031598:	52800000 	mov	w0, #0x0                   	// #0
}
    9603159c:	a94153f3 	ldp	x19, x20, [sp, #16]
    960315a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960315a4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960315a8:	a8c57bfd 	ldp	x29, x30, [sp], #80
    960315ac:	d65f03c0 	ret
	tegrabl_dt_for_each_prop_of(fdt_ptr, offset, aliasoffset) {
    960315b0:	2a1603e1 	mov	w1, w22
    960315b4:	aa1303e0 	mov	x0, x19
    960315b8:	94000208 	bl	96031dd8 <fdt_next_property_offset>
    960315bc:	17ffffde 	b	96031534 <tegrabl_get_alias_by_name+0x54>
		return TEGRABL_ERR_INVALID;
    960315c0:	52800040 	mov	w0, #0x2                   	// #2
}
    960315c4:	d65f03c0 	ret

00000000960315c8 <tegrabl_get_alias_id>:
{
	char *index;
	int id;
	char *id_char;

	if (!prefix || !alias_name || !alias_id) {
    960315c8:	f100001f 	cmp	x0, #0x0
    960315cc:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
    960315d0:	540002e0 	b.eq	9603162c <tegrabl_get_alias_id+0x64>  // b.none
    960315d4:	b40002c2 	cbz	x2, 9603162c <tegrabl_get_alias_id+0x64>
{
    960315d8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960315dc:	910003fd 	mov	x29, sp
    960315e0:	a90153f3 	stp	x19, x20, [sp, #16]
    960315e4:	aa0103f3 	mov	x19, x1
    960315e8:	f90013f5 	str	x21, [sp, #32]
    960315ec:	aa0003f4 	mov	x20, x0
		return TEGRABL_ERR_INVALID;
	}

	index = strstr(alias_name, prefix);
    960315f0:	aa0003e1 	mov	x1, x0
    960315f4:	aa0203f5 	mov	x21, x2
    960315f8:	aa1303e0 	mov	x0, x19
    960315fc:	97ffe36d 	bl	9602a3b0 <strstr>
	if (index) {
    96031600:	b40001a0 	cbz	x0, 96031634 <tegrabl_get_alias_id+0x6c>
		id_char = alias_name + strlen(prefix);
    96031604:	aa1403e0 	mov	x0, x20
    96031608:	97ffe341 	bl	9602a30c <strlen>
		id = id_char[0] - '0';
    9603160c:	38606a60 	ldrb	w0, [x19, x0]
    96031610:	5100c000 	sub	w0, w0, #0x30
		*alias_id = id;
    96031614:	b90002a0 	str	w0, [x21]
		return TEGRABL_NO_ERROR;
    96031618:	52800000 	mov	w0, #0x0                   	// #0
	}
	return TEGRABL_ERR_NOT_FOUND;
}
    9603161c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031620:	f94013f5 	ldr	x21, [sp, #32]
    96031624:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96031628:	d65f03c0 	ret
		return TEGRABL_ERR_INVALID;
    9603162c:	52800040 	mov	w0, #0x2                   	// #2
}
    96031630:	d65f03c0 	ret
	return TEGRABL_ERR_NOT_FOUND;
    96031634:	528001a0 	mov	w0, #0xd                   	// #13
    96031638:	17fffff9 	b	9603161c <tegrabl_get_alias_id+0x54>

000000009603163c <tegrabl_dt_create_space>:

tegrabl_error_t tegrabl_dt_create_space(void *fdt, uint32_t inc_size, uint32_t max_size)
{
    9603163c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96031640:	aa0003e3 	mov	x3, x0
    96031644:	910003fd 	mov	x29, sp
	tegrabl_error_t err = TEGRABL_NO_ERROR;
	int retval;

	pr_trace("%s(): %u\n", __func__, __LINE__);

	newlen = fdt_totalsize(fdt) + inc_size;
    96031648:	b9400400 	ldr	w0, [x0, #4]
    9603164c:	97fffd76 	bl	96030c24 <fdt32_to_cpu>
    96031650:	0b010000 	add	w0, w0, w1
	if (newlen > max_size) {
		newlen = max_size;
	}
	pr_trace("dtb new size: 0x%08x\n", newlen);

	retval = fdt_open_into(fdt, fdt, newlen);
    96031654:	6b02001f 	cmp	w0, w2
    96031658:	aa0303e1 	mov	x1, x3
    9603165c:	1a829002 	csel	w2, w0, w2, ls  // ls = plast
    96031660:	aa0303e0 	mov	x0, x3
    96031664:	94000625 	bl	96032ef8 <fdt_open_into>
	if (retval < 0) {
    96031668:	36f80140 	tbz	w0, #31, 96031690 <tegrabl_dt_create_space+0x54>
		pr_error("fdt_open_into fail (%s)\n", fdt_strerror(retval));
    9603166c:	94000691 	bl	960330b0 <fdt_strerror>
    96031670:	aa0003e1 	mov	x1, x0
    96031674:	b00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96031678:	9120fc00 	add	x0, x0, #0x83f
    9603167c:	97ffc3fd 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_EXPAND_FAILED, 0);
    96031680:	528004a0 	mov	w0, #0x25                  	// #37
    96031684:	72ab8b80 	movk	w0, #0x5c5c, lsl #16
	}

	return err;
}
    96031688:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9603168c:	d65f03c0 	ret
	tegrabl_error_t err = TEGRABL_NO_ERROR;
    96031690:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    96031694:	17fffffd 	b	96031688 <tegrabl_dt_create_space+0x4c>

0000000096031698 <fdt32_to_cpu>:
    96031698:	5ac00800 	rev	w0, w0
    9603169c:	d65f03c0 	ret

00000000960316a0 <fdt32_to_cpu>:
    960316a0:	5ac00800 	rev	w0, w0
    960316a4:	d65f03c0 	ret

00000000960316a8 <fdt32_to_cpu>:
    960316a8:	5ac00800 	rev	w0, w0
    960316ac:	d65f03c0 	ret

00000000960316b0 <fdt32_to_cpu>:
    960316b0:	5ac00800 	rev	w0, w0
    960316b4:	d65f03c0 	ret

00000000960316b8 <fdt_check_header>:
#include <string.h>

#include "libfdt_internal.h"

int fdt_check_header(const void *fdt)
{
    960316b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960316bc:	aa0003e1 	mov	x1, x0
    960316c0:	910003fd 	mov	x29, sp
	if (fdt_magic(fdt) == FDT_MAGIC) {
    960316c4:	b9400000 	ldr	w0, [x0]
    960316c8:	97fffff4 	bl	96031698 <fdt32_to_cpu>
    960316cc:	529fdda2 	mov	w2, #0xfeed                	// #65261
    960316d0:	72ba01a2 	movk	w2, #0xd00d, lsl #16
    960316d4:	6b02001f 	cmp	w0, w2
    960316d8:	54000181 	b.ne	96031708 <fdt_check_header+0x50>  // b.any
		/* Complete tree */
		if (fdt_version(fdt) < FDT_FIRST_SUPPORTED_VERSION)
    960316dc:	b9401420 	ldr	w0, [x1, #20]
    960316e0:	97ffffee 	bl	96031698 <fdt32_to_cpu>
    960316e4:	71003c1f 	cmp	w0, #0xf
    960316e8:	54000249 	b.ls	96031730 <fdt_check_header+0x78>  // b.plast
			return -FDT_ERR_BADVERSION;
		if (fdt_last_comp_version(fdt) > FDT_LAST_SUPPORTED_VERSION)
    960316ec:	b9401820 	ldr	w0, [x1, #24]
    960316f0:	97ffffea 	bl	96031698 <fdt32_to_cpu>
			return -FDT_ERR_BADVERSION;
    960316f4:	7100441f 	cmp	w0, #0x11
    960316f8:	12800120 	mov	w0, #0xfffffff6            	// #-10
    960316fc:	1a8093e0 	csel	w0, wzr, w0, ls  // ls = plast
	} else {
		return -FDT_ERR_BADMAGIC;
	}

	return 0;
}
    96031700:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96031704:	d65f03c0 	ret
	} else if (fdt_magic(fdt) == FDT_SW_MAGIC) {
    96031708:	52802242 	mov	w2, #0x112                 	// #274
    9603170c:	72a5fe42 	movk	w2, #0x2ff2, lsl #16
    96031710:	6b02001f 	cmp	w0, w2
    96031714:	54000121 	b.ne	96031738 <fdt_check_header+0x80>  // b.any
		if (fdt_size_dt_struct(fdt) == 0)
    96031718:	b9402420 	ldr	w0, [x1, #36]
    9603171c:	97ffffdf 	bl	96031698 <fdt32_to_cpu>
			return -FDT_ERR_BADSTATE;
    96031720:	7100001f 	cmp	w0, #0x0
    96031724:	128000c0 	mov	w0, #0xfffffff9            	// #-7
    96031728:	1a8013e0 	csel	w0, wzr, w0, ne  // ne = any
    9603172c:	17fffff5 	b	96031700 <fdt_check_header+0x48>
			return -FDT_ERR_BADVERSION;
    96031730:	12800120 	mov	w0, #0xfffffff6            	// #-10
    96031734:	17fffff3 	b	96031700 <fdt_check_header+0x48>
		return -FDT_ERR_BADMAGIC;
    96031738:	12800100 	mov	w0, #0xfffffff7            	// #-9
    9603173c:	17fffff1 	b	96031700 <fdt_check_header+0x48>

0000000096031740 <fdt_offset_ptr>:

const void *fdt_offset_ptr(const void *fdt, int offset, unsigned int len)
{
    96031740:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96031744:	aa0003e3 	mov	x3, x0
    96031748:	910003fd 	mov	x29, sp
	const char *p;

	if (fdt_version(fdt) >= 0x11)
    9603174c:	b9401400 	ldr	w0, [x0, #20]
    96031750:	97ffffd2 	bl	96031698 <fdt32_to_cpu>
    96031754:	7100401f 	cmp	w0, #0x10
    96031758:	54000109 	b.ls	96031778 <fdt_offset_ptr+0x38>  // b.plast
		if (((int)(offset + len) < offset)
    9603175c:	0b020022 	add	w2, w1, w2
    96031760:	6b01005f 	cmp	w2, w1
    96031764:	5400018b 	b.lt	96031794 <fdt_offset_ptr+0x54>  // b.tstop
		    || ((offset + len) > fdt_size_dt_struct(fdt)))
    96031768:	b9402460 	ldr	w0, [x3, #36]
    9603176c:	97ffffcb 	bl	96031698 <fdt32_to_cpu>
    96031770:	6b00005f 	cmp	w2, w0
    96031774:	54000108 	b.hi	96031794 <fdt_offset_ptr+0x54>  // b.pmore
const char *_fdt_find_string(const char *strtab, int tabsize, const char *s);
int _fdt_node_end_offset(void *fdt, int nodeoffset);

static inline const void *_fdt_offset_ptr(const void *fdt, int offset)
{
	return (const char *)fdt + fdt_off_dt_struct(fdt) + offset;
    96031778:	b9400860 	ldr	w0, [x3, #8]
    9603177c:	97ffffc7 	bl	96031698 <fdt32_to_cpu>
    96031780:	93407c21 	sxtw	x1, w1
    96031784:	8b204020 	add	x0, x1, w0, uxtw
    96031788:	8b000060 	add	x0, x3, x0
	p = _fdt_offset_ptr(fdt, offset);

	if (p + len < p)
		return NULL;
	return p;
}
    9603178c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96031790:	d65f03c0 	ret
			return NULL;
    96031794:	d2800000 	mov	x0, #0x0                   	// #0
    96031798:	17fffffd 	b	9603178c <fdt_offset_ptr+0x4c>

000000009603179c <fdt_next_tag>:

uint32_t fdt_next_tag(const void *fdt, int startoffset, int *nextoffset)
{
    9603179c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960317a0:	aa0203e7 	mov	x7, x2
    960317a4:	aa0003e8 	mov	x8, x0
    960317a8:	2a0103e6 	mov	w6, w1
    960317ac:	910003fd 	mov	x29, sp
	const uint32_t *tagp, *lenp;
	uint32_t tag;
	int offset = startoffset;
	const char *p;

	*nextoffset = -FDT_ERR_TRUNCATED;
    960317b0:	128000e2 	mov	w2, #0xfffffff8            	// #-8
    960317b4:	b90000e2 	str	w2, [x7]
	tagp = fdt_offset_ptr(fdt, offset, FDT_TAGSIZE);
    960317b8:	52800082 	mov	w2, #0x4                   	// #4
    960317bc:	97ffffe1 	bl	96031740 <fdt_offset_ptr>
	if (!tagp)
    960317c0:	b5000060 	cbnz	x0, 960317cc <fdt_next_tag+0x30>
	case FDT_END_NODE:
	case FDT_NOP:
		break;

	default:
		return FDT_END;
    960317c4:	52800125 	mov	w5, #0x9                   	// #9
    960317c8:	14000021 	b	9603184c <fdt_next_tag+0xb0>
	tag = fdt32_to_cpu(*tagp);
    960317cc:	b9400000 	ldr	w0, [x0]
    960317d0:	97ffffb2 	bl	96031698 <fdt32_to_cpu>
    960317d4:	2a0003e5 	mov	w5, w0
	*nextoffset = -FDT_ERR_BADSTRUCTURE;
    960317d8:	12800140 	mov	w0, #0xfffffff5            	// #-11
    960317dc:	b90000e0 	str	w0, [x7]
	switch (tag) {
    960317e0:	510004a1 	sub	w1, w5, #0x1
	offset += FDT_TAGSIZE;
    960317e4:	110010c4 	add	w4, w6, #0x4
	switch (tag) {
    960317e8:	7100203f 	cmp	w1, #0x8
    960317ec:	54fffec8 	b.hi	960317c4 <fdt_next_tag+0x28>  // b.pmore
    960317f0:	b00000a0 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960317f4:	91243000 	add	x0, x0, #0x90c
    960317f8:	38614800 	ldrb	w0, [x0, w1, uxtw]
    960317fc:	10000061 	adr	x1, 96031808 <fdt_next_tag+0x6c>
    96031800:	8b208820 	add	x0, x1, w0, sxtb #2
    96031804:	d61f0000 	br	x0
			p = fdt_offset_ptr(fdt, offset++, 1);
    96031808:	11000489 	add	w9, w4, #0x1
    9603180c:	52800022 	mov	w2, #0x1                   	// #1
    96031810:	2a0403e1 	mov	w1, w4
    96031814:	aa0803e0 	mov	x0, x8
    96031818:	97ffffca 	bl	96031740 <fdt_offset_ptr>
		} while (p && (*p != '\0'));
    9603181c:	b4fffd40 	cbz	x0, 960317c4 <fdt_next_tag+0x28>
    96031820:	39400000 	ldrb	w0, [x0]
			p = fdt_offset_ptr(fdt, offset++, 1);
    96031824:	2a0903e4 	mov	w4, w9
		} while (p && (*p != '\0'));
    96031828:	35ffff00 	cbnz	w0, 96031808 <fdt_next_tag+0x6c>
	}

	if (!fdt_offset_ptr(fdt, startoffset, offset - startoffset))
    9603182c:	4b060082 	sub	w2, w4, w6
    96031830:	2a0603e1 	mov	w1, w6
    96031834:	aa0803e0 	mov	x0, x8
    96031838:	97ffffc2 	bl	96031740 <fdt_offset_ptr>
    9603183c:	b4fffc40 	cbz	x0, 960317c4 <fdt_next_tag+0x28>
		return FDT_END; /* premature end */

	*nextoffset = FDT_TAGALIGN(offset);
    96031840:	11000c84 	add	w4, w4, #0x3
    96031844:	121e7484 	and	w4, w4, #0xfffffffc
    96031848:	b90000e4 	str	w4, [x7]
	return tag;
}
    9603184c:	2a0503e0 	mov	w0, w5
    96031850:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96031854:	d65f03c0 	ret
		lenp = fdt_offset_ptr(fdt, offset, sizeof(*lenp));
    96031858:	52800082 	mov	w2, #0x4                   	// #4
    9603185c:	2a0403e1 	mov	w1, w4
    96031860:	aa0803e0 	mov	x0, x8
    96031864:	97ffffb7 	bl	96031740 <fdt_offset_ptr>
		if (!lenp)
    96031868:	b4fffae0 	cbz	x0, 960317c4 <fdt_next_tag+0x28>
			+ fdt32_to_cpu(*lenp);
    9603186c:	b9400000 	ldr	w0, [x0]
    96031870:	97ffff8a 	bl	96031698 <fdt32_to_cpu>
		offset += sizeof(struct fdt_property) - FDT_TAGSIZE
    96031874:	110030c4 	add	w4, w6, #0xc
    96031878:	0b000084 	add	w4, w4, w0
		break;
    9603187c:	17ffffec 	b	9603182c <fdt_next_tag+0x90>

0000000096031880 <_fdt_check_node_offset>:

int _fdt_check_node_offset(const void *fdt, int offset)
{
    96031880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031884:	910003fd 	mov	x29, sp
    96031888:	b9001fa1 	str	w1, [x29, #28]
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    9603188c:	36f80081 	tbz	w1, #31, 9603189c <_fdt_check_node_offset+0x1c>
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_BEGIN_NODE))
		return -FDT_ERR_BADOFFSET;
    96031890:	12800060 	mov	w0, #0xfffffffc            	// #-4

	return offset;
}
    96031894:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031898:	d65f03c0 	ret
    9603189c:	2a0103e2 	mov	w2, w1
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    960318a0:	f240045f 	tst	x2, #0x3
    960318a4:	54ffff61 	b.ne	96031890 <_fdt_check_node_offset+0x10>  // b.any
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_BEGIN_NODE))
    960318a8:	910073a2 	add	x2, x29, #0x1c
    960318ac:	97ffffbc 	bl	9603179c <fdt_next_tag>
    960318b0:	7100041f 	cmp	w0, #0x1
    960318b4:	54fffee1 	b.ne	96031890 <_fdt_check_node_offset+0x10>  // b.any
	return offset;
    960318b8:	b9401fa0 	ldr	w0, [x29, #28]
    960318bc:	17fffff6 	b	96031894 <_fdt_check_node_offset+0x14>

00000000960318c0 <_fdt_check_prop_offset>:

int _fdt_check_prop_offset(const void *fdt, int offset)
{
    960318c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960318c4:	910003fd 	mov	x29, sp
    960318c8:	b9001fa1 	str	w1, [x29, #28]
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    960318cc:	36f80081 	tbz	w1, #31, 960318dc <_fdt_check_prop_offset+0x1c>
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_PROP))
		return -FDT_ERR_BADOFFSET;
    960318d0:	12800060 	mov	w0, #0xfffffffc            	// #-4

	return offset;
}
    960318d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960318d8:	d65f03c0 	ret
    960318dc:	2a0103e2 	mov	w2, w1
	if ((offset < 0) || (offset % FDT_TAGSIZE)
    960318e0:	f240045f 	tst	x2, #0x3
    960318e4:	54ffff61 	b.ne	960318d0 <_fdt_check_prop_offset+0x10>  // b.any
	    || (fdt_next_tag(fdt, offset, &offset) != FDT_PROP))
    960318e8:	910073a2 	add	x2, x29, #0x1c
    960318ec:	97ffffac 	bl	9603179c <fdt_next_tag>
    960318f0:	71000c1f 	cmp	w0, #0x3
    960318f4:	54fffee1 	b.ne	960318d0 <_fdt_check_prop_offset+0x10>  // b.any
	return offset;
    960318f8:	b9401fa0 	ldr	w0, [x29, #28]
    960318fc:	17fffff6 	b	960318d4 <_fdt_check_prop_offset+0x14>

0000000096031900 <fdt_next_node>:

int fdt_next_node(const void *fdt, int offset, int *depth)
{
    96031900:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031904:	aa0003ec 	mov	x12, x0
    96031908:	aa0203eb 	mov	x11, x2
    9603190c:	910003fd 	mov	x29, sp
	int nextoffset = 0;
    96031910:	b9001fbf 	str	wzr, [x29, #28]
	uint32_t tag;

	if (offset >= 0)
    96031914:	37f800a1 	tbnz	w1, #31, 96031928 <fdt_next_node+0x28>
		if ((nextoffset = _fdt_check_node_offset(fdt, offset)) < 0)
    96031918:	97ffffda 	bl	96031880 <_fdt_check_node_offset>
    9603191c:	b9001fa0 	str	w0, [x29, #28]
    96031920:	2a0003ea 	mov	w10, w0
    96031924:	37f80200 	tbnz	w0, #31, 96031964 <fdt_next_node+0x64>
			return nextoffset;

	do {
		offset = nextoffset;
    96031928:	b9401faa 	ldr	w10, [x29, #28]
		tag = fdt_next_tag(fdt, offset, &nextoffset);
    9603192c:	910073a2 	add	x2, x29, #0x1c
    96031930:	aa0c03e0 	mov	x0, x12
    96031934:	2a0a03e1 	mov	w1, w10
    96031938:	97ffff99 	bl	9603179c <fdt_next_tag>

		switch (tag) {
    9603193c:	7100081f 	cmp	w0, #0x2
    96031940:	54000180 	b.eq	96031970 <fdt_next_node+0x70>  // b.none
    96031944:	7100241f 	cmp	w0, #0x9
    96031948:	54000220 	b.eq	9603198c <fdt_next_node+0x8c>  // b.none
    9603194c:	7100041f 	cmp	w0, #0x1
    96031950:	54fffec1 	b.ne	96031928 <fdt_next_node+0x28>  // b.any
		case FDT_PROP:
		case FDT_NOP:
			break;

		case FDT_BEGIN_NODE:
			if (depth)
    96031954:	b400008b 	cbz	x11, 96031964 <fdt_next_node+0x64>
				(*depth)++;
    96031958:	b9400160 	ldr	w0, [x11]
    9603195c:	11000400 	add	w0, w0, #0x1
    96031960:	b9000160 	str	w0, [x11]
				return nextoffset;
		}
	} while (tag != FDT_BEGIN_NODE);

	return offset;
}
    96031964:	2a0a03e0 	mov	w0, w10
    96031968:	a8c27bfd 	ldp	x29, x30, [sp], #32
    9603196c:	d65f03c0 	ret
			if (depth && ((--(*depth)) < 0))
    96031970:	b4fffdcb 	cbz	x11, 96031928 <fdt_next_node+0x28>
    96031974:	b9400160 	ldr	w0, [x11]
    96031978:	51000400 	sub	w0, w0, #0x1
    9603197c:	b9000160 	str	w0, [x11]
    96031980:	36fffd40 	tbz	w0, #31, 96031928 <fdt_next_node+0x28>
				return nextoffset;
    96031984:	b9401faa 	ldr	w10, [x29, #28]
    96031988:	17fffff7 	b	96031964 <fdt_next_node+0x64>
			if ((nextoffset >= 0)
    9603198c:	b9401faa 	ldr	w10, [x29, #28]
    96031990:	36f800ca 	tbz	w10, #31, 960319a8 <fdt_next_node+0xa8>
			    || ((nextoffset == -FDT_ERR_TRUNCATED) && !depth))
    96031994:	3100215f 	cmn	w10, #0x8
    96031998:	54fffe61 	b.ne	96031964 <fdt_next_node+0x64>  // b.any
				return -FDT_ERR_NOTFOUND;
    9603199c:	f100017f 	cmp	x11, #0x0
    960319a0:	5a9f114a 	csinv	w10, w10, wzr, ne  // ne = any
    960319a4:	17fffff0 	b	96031964 <fdt_next_node+0x64>
    960319a8:	1280000a 	mov	w10, #0xffffffff            	// #-1
    960319ac:	17ffffee 	b	96031964 <fdt_next_node+0x64>

00000000960319b0 <fdt_first_subnode>:

int fdt_first_subnode(const void *fdt, int offset)
{
    960319b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960319b4:	910003fd 	mov	x29, sp
	int depth = 0;
    960319b8:	910083a2 	add	x2, x29, #0x20
    960319bc:	b81fcc5f 	str	wzr, [x2, #-4]!

	offset = fdt_next_node(fdt, offset, &depth);
    960319c0:	97ffffd0 	bl	96031900 <fdt_next_node>
	if (offset < 0 || depth != 1)
    960319c4:	37f800c0 	tbnz	w0, #31, 960319dc <fdt_first_subnode+0x2c>
		return -FDT_ERR_NOTFOUND;
    960319c8:	b9401fa1 	ldr	w1, [x29, #28]
    960319cc:	7100043f 	cmp	w1, #0x1
    960319d0:	5a9f0000 	csinv	w0, w0, wzr, eq  // eq = none

	return offset;
}
    960319d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960319d8:	d65f03c0 	ret
		return -FDT_ERR_NOTFOUND;
    960319dc:	12800000 	mov	w0, #0xffffffff            	// #-1
    960319e0:	17fffffd 	b	960319d4 <fdt_first_subnode+0x24>

00000000960319e4 <fdt_next_subnode>:

int fdt_next_subnode(const void *fdt, int offset)
{
    960319e4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960319e8:	aa0003ee 	mov	x14, x0
	int depth = 1;
    960319ec:	52800020 	mov	w0, #0x1                   	// #1
{
    960319f0:	910003fd 	mov	x29, sp
	int depth = 1;
    960319f4:	910083ad 	add	x13, x29, #0x20
    960319f8:	b81fcda0 	str	w0, [x13, #-4]!
    960319fc:	2a0103e0 	mov	w0, w1
	/*
	 * With respect to the parent, the depth of the next subnode will be
	 * the same as the last.
	 */
	do {
		offset = fdt_next_node(fdt, offset, &depth);
    96031a00:	2a0003e1 	mov	w1, w0
    96031a04:	aa0d03e2 	mov	x2, x13
    96031a08:	aa0e03e0 	mov	x0, x14
    96031a0c:	97ffffbd 	bl	96031900 <fdt_next_node>
		if (offset < 0 || depth < 1)
    96031a10:	37f80100 	tbnz	w0, #31, 96031a30 <fdt_next_subnode+0x4c>
    96031a14:	b9401fa1 	ldr	w1, [x29, #28]
    96031a18:	7100003f 	cmp	w1, #0x0
    96031a1c:	540000ad 	b.le	96031a30 <fdt_next_subnode+0x4c>
			return -FDT_ERR_NOTFOUND;
	} while (depth > 1);
    96031a20:	7100043f 	cmp	w1, #0x1
    96031a24:	54fffee1 	b.ne	96031a00 <fdt_next_subnode+0x1c>  // b.any

	return offset;
}
    96031a28:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031a2c:	d65f03c0 	ret
			return -FDT_ERR_NOTFOUND;
    96031a30:	12800000 	mov	w0, #0xffffffff            	// #-1
    96031a34:	17fffffd 	b	96031a28 <fdt_next_subnode+0x44>

0000000096031a38 <_fdt_find_string>:

const char *_fdt_find_string(const char *strtab, int tabsize, const char *s)
{
    96031a38:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031a3c:	910003fd 	mov	x29, sp
    96031a40:	a90153f3 	stp	x19, x20, [sp, #16]
    96031a44:	aa0003f3 	mov	x19, x0
    96031a48:	a9025bf5 	stp	x21, x22, [sp, #32]
    96031a4c:	93407c34 	sxtw	x20, w1
    96031a50:	aa0203f6 	mov	x22, x2
	int len = strlen(s) + 1;
    96031a54:	aa0203e0 	mov	x0, x2
    96031a58:	97ffe22d 	bl	9602a30c <strlen>
    96031a5c:	11000400 	add	w0, w0, #0x1
	const char *last = strtab + tabsize - len;
    96031a60:	93407c15 	sxtw	x21, w0
    96031a64:	cb150294 	sub	x20, x20, x21
    96031a68:	8b140274 	add	x20, x19, x20
	const char *p;

	for (p = strtab; p <= last; p++)
    96031a6c:	eb14027f 	cmp	x19, x20
    96031a70:	540000e9 	b.ls	96031a8c <_fdt_find_string+0x54>  // b.plast
		if (memcmp(p, s, len) == 0)
			return p;
	return NULL;
    96031a74:	d2800013 	mov	x19, #0x0                   	// #0
}
    96031a78:	aa1303e0 	mov	x0, x19
    96031a7c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031a80:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96031a84:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96031a88:	d65f03c0 	ret
		if (memcmp(p, s, len) == 0)
    96031a8c:	aa1503e2 	mov	x2, x21
    96031a90:	aa1603e1 	mov	x1, x22
    96031a94:	aa1303e0 	mov	x0, x19
    96031a98:	97ffe176 	bl	9602a070 <memcmp>
    96031a9c:	34fffee0 	cbz	w0, 96031a78 <_fdt_find_string+0x40>
	for (p = strtab; p <= last; p++)
    96031aa0:	91000673 	add	x19, x19, #0x1
    96031aa4:	17fffff2 	b	96031a6c <_fdt_find_string+0x34>

0000000096031aa8 <fdt_move>:

int fdt_move(const void *fdt, void *buf, int bufsize)
{
    96031aa8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031aac:	aa0003e3 	mov	x3, x0
    96031ab0:	aa0103e4 	mov	x4, x1
    96031ab4:	2a0203e5 	mov	w5, w2
    96031ab8:	910003fd 	mov	x29, sp
    96031abc:	f9000bf3 	str	x19, [sp, #16]
	FDT_CHECK_HEADER(fdt);
    96031ac0:	97fffefe 	bl	960316b8 <fdt_check_header>
    96031ac4:	2a0003f3 	mov	w19, w0
    96031ac8:	35000120 	cbnz	w0, 96031aec <fdt_move+0x44>

	if ((int)fdt_totalsize(fdt) > bufsize)
    96031acc:	b9400460 	ldr	w0, [x3, #4]
    96031ad0:	97fffef2 	bl	96031698 <fdt32_to_cpu>
    96031ad4:	6b05001f 	cmp	w0, w5
    96031ad8:	5400012c 	b.gt	96031afc <fdt_move+0x54>
		return -FDT_ERR_NOSPACE;

	memmove(buf, fdt, fdt_totalsize(fdt));
    96031adc:	2a0003e2 	mov	w2, w0
    96031ae0:	aa0303e1 	mov	x1, x3
    96031ae4:	aa0403e0 	mov	x0, x4
    96031ae8:	97ffe18e 	bl	9602a120 <memmove>
	return 0;
}
    96031aec:	2a1303e0 	mov	w0, w19
    96031af0:	f9400bf3 	ldr	x19, [sp, #16]
    96031af4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031af8:	d65f03c0 	ret
		return -FDT_ERR_NOSPACE;
    96031afc:	12800053 	mov	w19, #0xfffffffd            	// #-3
    96031b00:	17fffffb 	b	96031aec <fdt_move+0x44>

0000000096031b04 <fdt64_to_cpu>:
}
    96031b04:	dac00c00 	rev	x0, x0
    96031b08:	d65f03c0 	ret

0000000096031b0c <fdt64_to_cpu>:
    96031b0c:	dac00c00 	rev	x0, x0
    96031b10:	d65f03c0 	ret

0000000096031b14 <fdt64_to_cpu>:
    96031b14:	dac00c00 	rev	x0, x0
    96031b18:	d65f03c0 	ret

0000000096031b1c <_nextprop>:
		i++;
	return i;
}

static int _nextprop(const void *fdt, int offset)
{
    96031b1c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031b20:	910003fd 	mov	x29, sp
    96031b24:	a90153f3 	stp	x19, x20, [sp, #16]
    96031b28:	aa0003f4 	mov	x20, x0
    96031b2c:	2a0103f3 	mov	w19, w1
	uint32_t tag;
	int nextoffset;

	do {
		tag = fdt_next_tag(fdt, offset, &nextoffset);
    96031b30:	9100b3a2 	add	x2, x29, #0x2c
    96031b34:	2a1303e1 	mov	w1, w19
    96031b38:	aa1403e0 	mov	x0, x20
    96031b3c:	97ffff18 	bl	9603179c <fdt_next_tag>

		switch (tag) {
    96031b40:	71000c1f 	cmp	w0, #0x3
    96031b44:	540000e0 	b.eq	96031b60 <_nextprop+0x44>  // b.none
    96031b48:	7100241f 	cmp	w0, #0x9
    96031b4c:	b9402fb3 	ldr	w19, [x29, #44]
    96031b50:	54000101 	b.ne	96031b70 <_nextprop+0x54>  // b.any
		case FDT_END:
			if (nextoffset >= 0)
				return -FDT_ERR_BADSTRUCTURE;
    96031b54:	7100027f 	cmp	w19, #0x0
    96031b58:	12800140 	mov	w0, #0xfffffff5            	// #-11
    96031b5c:	1a80b273 	csel	w19, w19, w0, lt  // lt = tstop
		}
		offset = nextoffset;
	} while (tag == FDT_NOP);

	return -FDT_ERR_NOTFOUND;
}
    96031b60:	2a1303e0 	mov	w0, w19
    96031b64:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031b68:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96031b6c:	d65f03c0 	ret
	} while (tag == FDT_NOP);
    96031b70:	7100101f 	cmp	w0, #0x4
    96031b74:	54fffde0 	b.eq	96031b30 <_nextprop+0x14>  // b.none
	return -FDT_ERR_NOTFOUND;
    96031b78:	12800013 	mov	w19, #0xffffffff            	// #-1
    96031b7c:	17fffff9 	b	96031b60 <_nextprop+0x44>

0000000096031b80 <fdt_string>:
{
    96031b80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96031b84:	aa0003e2 	mov	x2, x0
    96031b88:	910003fd 	mov	x29, sp
	return (const char *)fdt + fdt_off_dt_strings(fdt) + stroffset;
    96031b8c:	b9400c00 	ldr	w0, [x0, #12]
    96031b90:	97fffec4 	bl	960316a0 <fdt32_to_cpu>
    96031b94:	93407c21 	sxtw	x1, w1
    96031b98:	8b204020 	add	x0, x1, w0, uxtw
}
    96031b9c:	8b000040 	add	x0, x2, x0
    96031ba0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96031ba4:	d65f03c0 	ret

0000000096031ba8 <fdt_num_mem_rsv>:
{
    96031ba8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96031bac:	aa0003e2 	mov	x2, x0
    96031bb0:	910003fd 	mov	x29, sp

static inline const struct fdt_reserve_entry *_fdt_mem_rsv(const void *fdt, int n)
{
	const struct fdt_reserve_entry *rsv_table =
		(const struct fdt_reserve_entry *)
		((const char *)fdt + fdt_off_mem_rsvmap(fdt));
    96031bb4:	b9401000 	ldr	w0, [x0, #16]
    96031bb8:	97fffeba 	bl	960316a0 <fdt32_to_cpu>
    96031bbc:	2a0003e4 	mov	w4, w0
	while (fdt64_to_cpu(_fdt_mem_rsv(fdt, i)->size) != 0)
    96031bc0:	d2800001 	mov	x1, #0x0                   	// #0
    96031bc4:	8b011080 	add	x0, x4, x1, lsl #4
    96031bc8:	2a0103e3 	mov	w3, w1
    96031bcc:	8b000040 	add	x0, x2, x0
    96031bd0:	f9400400 	ldr	x0, [x0, #8]
    96031bd4:	97ffffcc 	bl	96031b04 <fdt64_to_cpu>
    96031bd8:	91000421 	add	x1, x1, #0x1
    96031bdc:	b5ffff40 	cbnz	x0, 96031bc4 <fdt_num_mem_rsv+0x1c>
}
    96031be0:	2a0303e0 	mov	w0, w3
    96031be4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96031be8:	d65f03c0 	ret

0000000096031bec <fdt_subnode_offset_namelen>:

int fdt_subnode_offset_namelen(const void *fdt, int offset,
			       const char *name, int namelen)
{
    96031bec:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96031bf0:	910003fd 	mov	x29, sp
    96031bf4:	a90153f3 	stp	x19, x20, [sp, #16]
    96031bf8:	93407c74 	sxtw	x20, w3
    96031bfc:	a9025bf5 	stp	x21, x22, [sp, #32]
    96031c00:	2a0103f6 	mov	w22, w1
    96031c04:	a90363f7 	stp	x23, x24, [sp, #48]
    96031c08:	aa0003f7 	mov	x23, x0
    96031c0c:	aa0203f8 	mov	x24, x2
    96031c10:	f90023f9 	str	x25, [sp, #64]
	int depth;

	FDT_CHECK_HEADER(fdt);
    96031c14:	97fffea9 	bl	960316b8 <fdt_check_header>
    96031c18:	2a0003f3 	mov	w19, w0
    96031c1c:	35000500 	cbnz	w0, 96031cbc <fdt_subnode_offset_namelen+0xd0>

	for (depth = 0;
    96031c20:	910183b5 	add	x21, x29, #0x60
    96031c24:	2a1603f3 	mov	w19, w22
	const char *p = fdt_offset_ptr(fdt, offset + FDT_TAGSIZE, len+1);
    96031c28:	11000699 	add	w25, w20, #0x1
	for (depth = 0;
    96031c2c:	b81fcebf 	str	wzr, [x21, #-4]!
	     (offset >= 0) && (depth >= 0);
    96031c30:	b9405fa0 	ldr	w0, [x29, #92]
    96031c34:	7100027f 	cmp	w19, #0x0
	for (depth = 0;
    96031c38:	7a40a801 	ccmp	w0, #0x0, #0x1, ge  // ge = tcont
    96031c3c:	5400008a 	b.ge	96031c4c <fdt_subnode_offset_namelen+0x60>  // b.tcont
		if ((depth == 1)
		    && _fdt_nodename_eq(fdt, offset, name, namelen))
			return offset;

	if (depth < 0)
		return -FDT_ERR_NOTFOUND;
    96031c40:	7100001f 	cmp	w0, #0x0
    96031c44:	5a9fa273 	csinv	w19, w19, wzr, ge  // ge = tcont
    96031c48:	1400001d 	b	96031cbc <fdt_subnode_offset_namelen+0xd0>
		if ((depth == 1)
    96031c4c:	7100041f 	cmp	w0, #0x1
    96031c50:	540000e0 	b.eq	96031c6c <fdt_subnode_offset_namelen+0x80>  // b.none
	     offset = fdt_next_node(fdt, offset, &depth))
    96031c54:	2a1303e1 	mov	w1, w19
    96031c58:	aa1503e2 	mov	x2, x21
    96031c5c:	aa1703e0 	mov	x0, x23
    96031c60:	97ffff28 	bl	96031900 <fdt_next_node>
    96031c64:	2a0003f3 	mov	w19, w0
    96031c68:	17fffff2 	b	96031c30 <fdt_subnode_offset_namelen+0x44>
	const char *p = fdt_offset_ptr(fdt, offset + FDT_TAGSIZE, len+1);
    96031c6c:	2a1903e2 	mov	w2, w25
    96031c70:	11001261 	add	w1, w19, #0x4
    96031c74:	aa1703e0 	mov	x0, x23
    96031c78:	97fffeb2 	bl	96031740 <fdt_offset_ptr>
    96031c7c:	aa0003f6 	mov	x22, x0
	if (! p)
    96031c80:	b4fffea0 	cbz	x0, 96031c54 <fdt_subnode_offset_namelen+0x68>
	if (memcmp(p, s, len) != 0)
    96031c84:	aa1403e2 	mov	x2, x20
    96031c88:	aa1803e1 	mov	x1, x24
    96031c8c:	97ffe0f9 	bl	9602a070 <memcmp>
    96031c90:	35fffe20 	cbnz	w0, 96031c54 <fdt_subnode_offset_namelen+0x68>
	if (p[len] == '\0')
    96031c94:	38746ac0 	ldrb	w0, [x22, x20]
    96031c98:	34000120 	cbz	w0, 96031cbc <fdt_subnode_offset_namelen+0xd0>
	else if (!memchr(s, '@', len) && (p[len] == '@'))
    96031c9c:	aa1403e2 	mov	x2, x20
    96031ca0:	52800801 	mov	w1, #0x40                  	// #64
    96031ca4:	aa1803e0 	mov	x0, x24
    96031ca8:	97ffe111 	bl	9602a0ec <memchr>
    96031cac:	b5fffd40 	cbnz	x0, 96031c54 <fdt_subnode_offset_namelen+0x68>
    96031cb0:	38746ac0 	ldrb	w0, [x22, x20]
    96031cb4:	7101001f 	cmp	w0, #0x40
    96031cb8:	54fffce1 	b.ne	96031c54 <fdt_subnode_offset_namelen+0x68>  // b.any
	return offset; /* error */
}
    96031cbc:	2a1303e0 	mov	w0, w19
    96031cc0:	f94023f9 	ldr	x25, [sp, #64]
    96031cc4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031cc8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96031ccc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96031cd0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96031cd4:	d65f03c0 	ret

0000000096031cd8 <fdt_subnode_offset>:

int fdt_subnode_offset(const void *fdt, int parentoffset,
		       const char *name)
{
    96031cd8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031cdc:	910003fd 	mov	x29, sp
    96031ce0:	a90153f3 	stp	x19, x20, [sp, #16]
    96031ce4:	aa0003f4 	mov	x20, x0
    96031ce8:	f90013f5 	str	x21, [sp, #32]
    96031cec:	aa0203f3 	mov	x19, x2
    96031cf0:	2a0103f5 	mov	w21, w1
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    96031cf4:	aa0203e0 	mov	x0, x2
    96031cf8:	97ffe185 	bl	9602a30c <strlen>
    96031cfc:	2a0003e3 	mov	w3, w0
    96031d00:	aa1303e2 	mov	x2, x19
    96031d04:	2a1503e1 	mov	w1, w21
    96031d08:	aa1403e0 	mov	x0, x20
}
    96031d0c:	f94013f5 	ldr	x21, [sp, #32]
    96031d10:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031d14:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return fdt_subnode_offset_namelen(fdt, parentoffset, name, strlen(name));
    96031d18:	17ffffb5 	b	96031bec <fdt_subnode_offset_namelen>

0000000096031d1c <fdt_get_name>:

	return offset;
}

const char *fdt_get_name(const void *fdt, int nodeoffset, int *len)
{
    96031d1c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031d20:	910003fd 	mov	x29, sp
    96031d24:	a90153f3 	stp	x19, x20, [sp, #16]
    96031d28:	aa0003f3 	mov	x19, x0
	return (const char *)fdt + fdt_off_dt_struct(fdt) + offset;
    96031d2c:	b9400800 	ldr	w0, [x0, #8]
    96031d30:	aa0203f4 	mov	x20, x2
    96031d34:	a9025bf5 	stp	x21, x22, [sp, #32]
    96031d38:	93407c35 	sxtw	x21, w1
    96031d3c:	97fffe59 	bl	960316a0 <fdt32_to_cpu>
    96031d40:	2a0003f6 	mov	w22, w0
	const struct fdt_node_header *nh = _fdt_offset_ptr(fdt, nodeoffset);
	int err;

	if (((err = fdt_check_header(fdt)) != 0)
    96031d44:	aa1303e0 	mov	x0, x19
    96031d48:	97fffe5c 	bl	960316b8 <fdt_check_header>
    96031d4c:	35000220 	cbnz	w0, 96031d90 <fdt_get_name+0x74>
	    || ((err = _fdt_check_node_offset(fdt, nodeoffset)) < 0))
    96031d50:	2a1503e1 	mov	w1, w21
    96031d54:	aa1303e0 	mov	x0, x19
    96031d58:	97fffeca 	bl	96031880 <_fdt_check_node_offset>
    96031d5c:	37f801a0 	tbnz	w0, #31, 96031d90 <fdt_get_name+0x74>
    96031d60:	8b3642b5 	add	x21, x21, w22, uxtw
    96031d64:	8b150273 	add	x19, x19, x21
    96031d68:	91001273 	add	x19, x19, #0x4
			goto fail;

	if (len)
    96031d6c:	b4000094 	cbz	x20, 96031d7c <fdt_get_name+0x60>
		*len = strlen(nh->name);
    96031d70:	aa1303e0 	mov	x0, x19
    96031d74:	97ffe166 	bl	9602a30c <strlen>
    96031d78:	b9000280 	str	w0, [x20]

 fail:
	if (len)
		*len = err;
	return NULL;
}
    96031d7c:	aa1303e0 	mov	x0, x19
    96031d80:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031d84:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96031d88:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96031d8c:	d65f03c0 	ret
	if (len)
    96031d90:	b4000054 	cbz	x20, 96031d98 <fdt_get_name+0x7c>
		*len = err;
    96031d94:	b9000280 	str	w0, [x20]
	return NULL;
    96031d98:	d2800013 	mov	x19, #0x0                   	// #0
    96031d9c:	17fffff8 	b	96031d7c <fdt_get_name+0x60>

0000000096031da0 <fdt_first_property_offset>:

int fdt_first_property_offset(const void *fdt, int nodeoffset)
{
    96031da0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031da4:	910003fd 	mov	x29, sp
    96031da8:	f9000bf3 	str	x19, [sp, #16]
    96031dac:	aa0003f3 	mov	x19, x0
	int offset;

	if ((offset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
    96031db0:	97fffeb4 	bl	96031880 <_fdt_check_node_offset>
    96031db4:	37f800c0 	tbnz	w0, #31, 96031dcc <fdt_first_property_offset+0x2c>
    96031db8:	2a0003e1 	mov	w1, w0
		return offset;

	return _nextprop(fdt, offset);
    96031dbc:	aa1303e0 	mov	x0, x19
}
    96031dc0:	f9400bf3 	ldr	x19, [sp, #16]
    96031dc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
	return _nextprop(fdt, offset);
    96031dc8:	17ffff55 	b	96031b1c <_nextprop>
}
    96031dcc:	f9400bf3 	ldr	x19, [sp, #16]
    96031dd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031dd4:	d65f03c0 	ret

0000000096031dd8 <fdt_next_property_offset>:

int fdt_next_property_offset(const void *fdt, int offset)
{
    96031dd8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031ddc:	910003fd 	mov	x29, sp
    96031de0:	f9000bf3 	str	x19, [sp, #16]
    96031de4:	aa0003f3 	mov	x19, x0
	if ((offset = _fdt_check_prop_offset(fdt, offset)) < 0)
    96031de8:	97fffeb6 	bl	960318c0 <_fdt_check_prop_offset>
    96031dec:	37f800c0 	tbnz	w0, #31, 96031e04 <fdt_next_property_offset+0x2c>
    96031df0:	2a0003e1 	mov	w1, w0
		return offset;

	return _nextprop(fdt, offset);
    96031df4:	aa1303e0 	mov	x0, x19
}
    96031df8:	f9400bf3 	ldr	x19, [sp, #16]
    96031dfc:	a8c27bfd 	ldp	x29, x30, [sp], #32
	return _nextprop(fdt, offset);
    96031e00:	17ffff47 	b	96031b1c <_nextprop>
}
    96031e04:	f9400bf3 	ldr	x19, [sp, #16]
    96031e08:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031e0c:	d65f03c0 	ret

0000000096031e10 <fdt_get_property_by_offset>:

const struct fdt_property *fdt_get_property_by_offset(const void *fdt,
						      int offset,
						      int *lenp)
{
    96031e10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031e14:	910003fd 	mov	x29, sp
    96031e18:	a90153f3 	stp	x19, x20, [sp, #16]
    96031e1c:	aa0003f3 	mov	x19, x0
    96031e20:	f90013f5 	str	x21, [sp, #32]
    96031e24:	93407c34 	sxtw	x20, w1
    96031e28:	aa0203f5 	mov	x21, x2
	int err;
	const struct fdt_property *prop;

	if ((err = _fdt_check_prop_offset(fdt, offset)) < 0) {
    96031e2c:	97fffea5 	bl	960318c0 <_fdt_check_prop_offset>
    96031e30:	36f800a0 	tbz	w0, #31, 96031e44 <fdt_get_property_by_offset+0x34>
		if (lenp)
    96031e34:	b4000055 	cbz	x21, 96031e3c <fdt_get_property_by_offset+0x2c>
			*lenp = err;
    96031e38:	b90002a0 	str	w0, [x21]
		return NULL;
    96031e3c:	d2800013 	mov	x19, #0x0                   	// #0
    96031e40:	14000009 	b	96031e64 <fdt_get_property_by_offset+0x54>
    96031e44:	b9400a60 	ldr	w0, [x19, #8]
    96031e48:	97fffe16 	bl	960316a0 <fdt32_to_cpu>
    96031e4c:	8b204294 	add	x20, x20, w0, uxtw
    96031e50:	8b140273 	add	x19, x19, x20
	}

	prop = _fdt_offset_ptr(fdt, offset);

	if (lenp)
    96031e54:	b4000095 	cbz	x21, 96031e64 <fdt_get_property_by_offset+0x54>
		*lenp = fdt32_to_cpu(prop->len);
    96031e58:	b9400660 	ldr	w0, [x19, #4]
    96031e5c:	97fffe11 	bl	960316a0 <fdt32_to_cpu>
    96031e60:	b90002a0 	str	w0, [x21]

	return prop;
}
    96031e64:	aa1303e0 	mov	x0, x19
    96031e68:	f94013f5 	ldr	x21, [sp, #32]
    96031e6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031e70:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96031e74:	d65f03c0 	ret

0000000096031e78 <fdt_get_property_namelen>:

const struct fdt_property *fdt_get_property_namelen(const void *fdt,
						    int offset,
						    const char *name,
						    int namelen, int *lenp)
{
    96031e78:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96031e7c:	910003fd 	mov	x29, sp
    96031e80:	a9046bf9 	stp	x25, x26, [sp, #64]
    96031e84:	93407c79 	sxtw	x25, w3
    96031e88:	a90153f3 	stp	x19, x20, [sp, #16]
    96031e8c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96031e90:	aa0003f6 	mov	x22, x0
    96031e94:	a90363f7 	stp	x23, x24, [sp, #48]
    96031e98:	aa0403f5 	mov	x21, x4
    96031e9c:	aa0203f8 	mov	x24, x2
    96031ea0:	aa1903f7 	mov	x23, x25
	for (offset = fdt_first_property_offset(fdt, offset);
    96031ea4:	97ffffbf 	bl	96031da0 <fdt_first_property_offset>
	     (offset >= 0);
	     (offset = fdt_next_property_offset(fdt, offset))) {
    96031ea8:	2a0003f3 	mov	w19, w0
	for (offset = fdt_first_property_offset(fdt, offset);
    96031eac:	36f800a0 	tbz	w0, #31, 96031ec0 <fdt_get_property_namelen+0x48>
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
				   name, namelen))
			return prop;
	}

	if (lenp)
    96031eb0:	b4000055 	cbz	x21, 96031eb8 <fdt_get_property_namelen+0x40>
		*lenp = offset;
    96031eb4:	b90002b3 	str	w19, [x21]
	return NULL;
    96031eb8:	d2800014 	mov	x20, #0x0                   	// #0
    96031ebc:	14000019 	b	96031f20 <fdt_get_property_namelen+0xa8>
		if (!(prop = fdt_get_property_by_offset(fdt, offset, lenp))) {
    96031ec0:	aa1503e2 	mov	x2, x21
    96031ec4:	2a1303e1 	mov	w1, w19
    96031ec8:	aa1603e0 	mov	x0, x22
    96031ecc:	97ffffd1 	bl	96031e10 <fdt_get_property_by_offset>
    96031ed0:	aa0003f4 	mov	x20, x0
    96031ed4:	b4000340 	cbz	x0, 96031f3c <fdt_get_property_namelen+0xc4>
		if (_fdt_string_eq(fdt, fdt32_to_cpu(prop->nameoff),
    96031ed8:	b9400800 	ldr	w0, [x0, #8]
    96031edc:	97fffdf1 	bl	960316a0 <fdt32_to_cpu>
	const char *p = fdt_string(fdt, stroffset);
    96031ee0:	2a0003e1 	mov	w1, w0
    96031ee4:	aa1603e0 	mov	x0, x22
    96031ee8:	97ffff26 	bl	96031b80 <fdt_string>
    96031eec:	aa0003fa 	mov	x26, x0
	return ((int)strlen(p) == len) && (memcmp(p, s, len) == 0);
    96031ef0:	97ffe107 	bl	9602a30c <strlen>
    96031ef4:	6b0002ff 	cmp	w23, w0
    96031ef8:	540000a0 	b.eq	96031f0c <fdt_get_property_namelen+0x94>  // b.none
	     (offset = fdt_next_property_offset(fdt, offset))) {
    96031efc:	2a1303e1 	mov	w1, w19
    96031f00:	aa1603e0 	mov	x0, x22
    96031f04:	97ffffb5 	bl	96031dd8 <fdt_next_property_offset>
    96031f08:	17ffffe8 	b	96031ea8 <fdt_get_property_namelen+0x30>
	return ((int)strlen(p) == len) && (memcmp(p, s, len) == 0);
    96031f0c:	aa1903e2 	mov	x2, x25
    96031f10:	aa1803e1 	mov	x1, x24
    96031f14:	aa1a03e0 	mov	x0, x26
    96031f18:	97ffe056 	bl	9602a070 <memcmp>
    96031f1c:	35ffff00 	cbnz	w0, 96031efc <fdt_get_property_namelen+0x84>
}
    96031f20:	aa1403e0 	mov	x0, x20
    96031f24:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031f28:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96031f2c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96031f30:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96031f34:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96031f38:	d65f03c0 	ret
			offset = -FDT_ERR_INTERNAL;
    96031f3c:	12800193 	mov	w19, #0xfffffff3            	// #-13
    96031f40:	17ffffdc 	b	96031eb0 <fdt_get_property_namelen+0x38>

0000000096031f44 <fdt_get_property>:

const struct fdt_property *fdt_get_property(const void *fdt,
					    int nodeoffset,
					    const char *name, int *lenp)
{
    96031f44:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96031f48:	910003fd 	mov	x29, sp
    96031f4c:	a90153f3 	stp	x19, x20, [sp, #16]
    96031f50:	aa0003f4 	mov	x20, x0
    96031f54:	a9025bf5 	stp	x21, x22, [sp, #32]
    96031f58:	aa0203f3 	mov	x19, x2
    96031f5c:	aa0303f6 	mov	x22, x3
    96031f60:	2a0103f5 	mov	w21, w1
	return fdt_get_property_namelen(fdt, nodeoffset, name,
					strlen(name), lenp);
    96031f64:	aa0203e0 	mov	x0, x2
    96031f68:	97ffe0e9 	bl	9602a30c <strlen>
	return fdt_get_property_namelen(fdt, nodeoffset, name,
    96031f6c:	aa1603e4 	mov	x4, x22
    96031f70:	2a0003e3 	mov	w3, w0
    96031f74:	aa1303e2 	mov	x2, x19
    96031f78:	2a1503e1 	mov	w1, w21
    96031f7c:	aa1403e0 	mov	x0, x20
}
    96031f80:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031f84:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96031f88:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return fdt_get_property_namelen(fdt, nodeoffset, name,
    96031f8c:	17ffffbb 	b	96031e78 <fdt_get_property_namelen>

0000000096031f90 <fdt_getprop_namelen>:

const void *fdt_getprop_namelen(const void *fdt, int nodeoffset,
				const char *name, int namelen, int *lenp)
{
    96031f90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96031f94:	910003fd 	mov	x29, sp
	const struct fdt_property *prop;

	prop = fdt_get_property_namelen(fdt, nodeoffset, name, namelen, lenp);
    96031f98:	97ffffb8 	bl	96031e78 <fdt_get_property_namelen>
	if (! prop)
		return NULL;

	return prop->data;
    96031f9c:	91003001 	add	x1, x0, #0xc
    96031fa0:	f100001f 	cmp	x0, #0x0
}
    96031fa4:	9a9f1020 	csel	x0, x1, xzr, ne  // ne = any
    96031fa8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96031fac:	d65f03c0 	ret

0000000096031fb0 <fdt_getprop_by_offset>:

const void *fdt_getprop_by_offset(const void *fdt, int offset,
				  const char **namep, int *lenp)
{
    96031fb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96031fb4:	910003fd 	mov	x29, sp
    96031fb8:	a90153f3 	stp	x19, x20, [sp, #16]
    96031fbc:	aa0203f3 	mov	x19, x2
    96031fc0:	aa0003f4 	mov	x20, x0
	const struct fdt_property *prop;

	prop = fdt_get_property_by_offset(fdt, offset, lenp);
    96031fc4:	aa0303e2 	mov	x2, x3
    96031fc8:	97ffff92 	bl	96031e10 <fdt_get_property_by_offset>
	if (!prop)
    96031fcc:	b40001a0 	cbz	x0, 96032000 <fdt_getprop_by_offset+0x50>
    96031fd0:	aa0003e3 	mov	x3, x0
		return NULL;
	if (namep)
    96031fd4:	b40000f3 	cbz	x19, 96031ff0 <fdt_getprop_by_offset+0x40>
		*namep = fdt_string(fdt, fdt32_to_cpu(prop->nameoff));
    96031fd8:	b9400800 	ldr	w0, [x0, #8]
    96031fdc:	97fffdb1 	bl	960316a0 <fdt32_to_cpu>
    96031fe0:	2a0003e1 	mov	w1, w0
    96031fe4:	aa1403e0 	mov	x0, x20
    96031fe8:	97fffee6 	bl	96031b80 <fdt_string>
    96031fec:	f9000260 	str	x0, [x19]
	return prop->data;
    96031ff0:	91003060 	add	x0, x3, #0xc
}
    96031ff4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96031ff8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96031ffc:	d65f03c0 	ret
		return NULL;
    96032000:	d2800000 	mov	x0, #0x0                   	// #0
    96032004:	17fffffc 	b	96031ff4 <fdt_getprop_by_offset+0x44>

0000000096032008 <fdt_getprop>:

const void *fdt_getprop(const void *fdt, int nodeoffset,
			const char *name, int *lenp)
{
    96032008:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9603200c:	910003fd 	mov	x29, sp
    96032010:	a90153f3 	stp	x19, x20, [sp, #16]
    96032014:	aa0003f4 	mov	x20, x0
    96032018:	a9025bf5 	stp	x21, x22, [sp, #32]
    9603201c:	aa0203f3 	mov	x19, x2
    96032020:	aa0303f6 	mov	x22, x3
    96032024:	2a0103f5 	mov	w21, w1
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    96032028:	aa0203e0 	mov	x0, x2
    9603202c:	97ffe0b8 	bl	9602a30c <strlen>
    96032030:	aa1603e4 	mov	x4, x22
    96032034:	2a0003e3 	mov	w3, w0
    96032038:	aa1303e2 	mov	x2, x19
    9603203c:	2a1503e1 	mov	w1, w21
    96032040:	aa1403e0 	mov	x0, x20
}
    96032044:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032048:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9603204c:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return fdt_getprop_namelen(fdt, nodeoffset, name, strlen(name), lenp);
    96032050:	17ffffd0 	b	96031f90 <fdt_getprop_namelen>

0000000096032054 <fdt_get_phandle>:

uint32_t fdt_get_phandle(const void *fdt, int nodeoffset)
{
    96032054:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	const uint32_t *php;
	int len;

	/* FIXME: This is a bit sub-optimal, since we potentially scan
	 * over all the properties twice. */
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    96032058:	900000a2 	adrp	x2, 96046000 <lenfix.3236+0xf0>
    9603205c:	91246c42 	add	x2, x2, #0x91b
{
    96032060:	910003fd 	mov	x29, sp
    96032064:	a90153f3 	stp	x19, x20, [sp, #16]
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    96032068:	9100b3a3 	add	x3, x29, #0x2c
{
    9603206c:	aa0003f3 	mov	x19, x0
    96032070:	2a0103f4 	mov	w20, w1
	php = fdt_getprop(fdt, nodeoffset, "phandle", &len);
    96032074:	97ffffe5 	bl	96032008 <fdt_getprop>
	if (!php || (len != sizeof(*php))) {
    96032078:	b4000080 	cbz	x0, 96032088 <fdt_get_phandle+0x34>
    9603207c:	b9402fa1 	ldr	w1, [x29, #44]
    96032080:	7100103f 	cmp	w1, #0x4
    96032084:	54000160 	b.eq	960320b0 <fdt_get_phandle+0x5c>  // b.none
		php = fdt_getprop(fdt, nodeoffset, "linux,phandle", &len);
    96032088:	900000a2 	adrp	x2, 96046000 <lenfix.3236+0xf0>
    9603208c:	9100b3a3 	add	x3, x29, #0x2c
    96032090:	91245442 	add	x2, x2, #0x915
    96032094:	2a1403e1 	mov	w1, w20
    96032098:	aa1303e0 	mov	x0, x19
    9603209c:	97ffffdb 	bl	96032008 <fdt_getprop>
		if (!php || (len != sizeof(*php)))
    960320a0:	b4000100 	cbz	x0, 960320c0 <fdt_get_phandle+0x6c>
    960320a4:	b9402fa1 	ldr	w1, [x29, #44]
    960320a8:	7100103f 	cmp	w1, #0x4
    960320ac:	540000a1 	b.ne	960320c0 <fdt_get_phandle+0x6c>  // b.any
			return 0;
	}

	return fdt32_to_cpu(*php);
}
    960320b0:	a94153f3 	ldp	x19, x20, [sp, #16]
	return fdt32_to_cpu(*php);
    960320b4:	b9400000 	ldr	w0, [x0]
}
    960320b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return fdt32_to_cpu(*php);
    960320bc:	17fffd79 	b	960316a0 <fdt32_to_cpu>
}
    960320c0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960320c4:	52800000 	mov	w0, #0x0                   	// #0
    960320c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960320cc:	d65f03c0 	ret

00000000960320d0 <fdt_get_alias_namelen>:

const char *fdt_get_alias_namelen(const void *fdt,
				  const char *name, int namelen)
{
    960320d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960320d4:	910003fd 	mov	x29, sp
    960320d8:	a90153f3 	stp	x19, x20, [sp, #16]
    960320dc:	aa0103f4 	mov	x20, x1
    960320e0:	f90013f5 	str	x21, [sp, #32]
	int aliasoffset;

	aliasoffset = fdt_path_offset(fdt, "/aliases");
    960320e4:	900000a1 	adrp	x1, 96046000 <lenfix.3236+0xf0>
{
    960320e8:	aa0003f3 	mov	x19, x0
	aliasoffset = fdt_path_offset(fdt, "/aliases");
    960320ec:	9123b021 	add	x1, x1, #0x8ec
{
    960320f0:	2a0203f5 	mov	w21, w2
	aliasoffset = fdt_path_offset(fdt, "/aliases");
    960320f4:	94000010 	bl	96032134 <fdt_path_offset>
	if (aliasoffset < 0)
    960320f8:	37f80140 	tbnz	w0, #31, 96032120 <fdt_get_alias_namelen+0x50>
		return NULL;

	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
    960320fc:	2a1503e3 	mov	w3, w21
    96032100:	aa1403e2 	mov	x2, x20
    96032104:	2a0003e1 	mov	w1, w0
}
    96032108:	f94013f5 	ldr	x21, [sp, #32]
	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
    9603210c:	aa1303e0 	mov	x0, x19
    96032110:	d2800004 	mov	x4, #0x0                   	// #0
}
    96032114:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032118:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return fdt_getprop_namelen(fdt, aliasoffset, name, namelen, NULL);
    9603211c:	17ffff9d 	b	96031f90 <fdt_getprop_namelen>
}
    96032120:	d2800000 	mov	x0, #0x0                   	// #0
    96032124:	f94013f5 	ldr	x21, [sp, #32]
    96032128:	a94153f3 	ldp	x19, x20, [sp, #16]
    9603212c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96032130:	d65f03c0 	ret

0000000096032134 <fdt_path_offset>:
{
    96032134:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96032138:	910003fd 	mov	x29, sp
    9603213c:	a90153f3 	stp	x19, x20, [sp, #16]
    96032140:	aa0103f3 	mov	x19, x1
    96032144:	a9025bf5 	stp	x21, x22, [sp, #32]
    96032148:	f9001bf7 	str	x23, [sp, #48]
    9603214c:	aa0003f7 	mov	x23, x0
	const char *end = path + strlen(path);
    96032150:	aa0103e0 	mov	x0, x1
    96032154:	97ffe06e 	bl	9602a30c <strlen>
    96032158:	aa0003f6 	mov	x22, x0
	FDT_CHECK_HEADER(fdt);
    9603215c:	aa1703e0 	mov	x0, x23
    96032160:	97fffd56 	bl	960316b8 <fdt_check_header>
    96032164:	2a0003f4 	mov	w20, w0
    96032168:	35000520 	cbnz	w0, 9603220c <fdt_path_offset+0xd8>
	if (*path != '/') {
    9603216c:	39400260 	ldrb	w0, [x19]
	const char *end = path + strlen(path);
    96032170:	8b160276 	add	x22, x19, x22
	if (*path != '/') {
    96032174:	7100bc1f 	cmp	w0, #0x2f
    96032178:	54000200 	b.eq	960321b8 <fdt_path_offset+0x84>  // b.none
		const char *q = strchr(path, '/');
    9603217c:	528005e1 	mov	w1, #0x2f                  	// #47
    96032180:	aa1303e0 	mov	x0, x19
    96032184:	97ffe080 	bl	9602a384 <strchr>
			q = end;
    96032188:	f100001f 	cmp	x0, #0x0
    9603218c:	9a961015 	csel	x21, x0, x22, ne  // ne = any
		p = fdt_get_alias_namelen(fdt, p, q - p);
    96032190:	aa1303e1 	mov	x1, x19
    96032194:	4b1302a2 	sub	w2, w21, w19
    96032198:	aa1703e0 	mov	x0, x23
    9603219c:	97ffffcd 	bl	960320d0 <fdt_get_alias_namelen>
		if (!p)
    960321a0:	b4000420 	cbz	x0, 96032224 <fdt_path_offset+0xf0>
		offset = fdt_path_offset(fdt, p);
    960321a4:	aa0003e1 	mov	x1, x0
		p = q;
    960321a8:	aa1503f3 	mov	x19, x21
		offset = fdt_path_offset(fdt, p);
    960321ac:	aa1703e0 	mov	x0, x23
    960321b0:	97ffffe1 	bl	96032134 <fdt_path_offset>
    960321b4:	2a0003f4 	mov	w20, w0
	while (*p) {
    960321b8:	39400260 	ldrb	w0, [x19]
    960321bc:	35000060 	cbnz	w0, 960321c8 <fdt_path_offset+0x94>
    960321c0:	14000013 	b	9603220c <fdt_path_offset+0xd8>
			p++;
    960321c4:	91000673 	add	x19, x19, #0x1
		while (*p == '/')
    960321c8:	39400260 	ldrb	w0, [x19]
    960321cc:	7100bc1f 	cmp	w0, #0x2f
    960321d0:	54ffffa0 	b.eq	960321c4 <fdt_path_offset+0x90>  // b.none
		if (! *p)
    960321d4:	340001c0 	cbz	w0, 9603220c <fdt_path_offset+0xd8>
		q = strchr(p, '/');
    960321d8:	528005e1 	mov	w1, #0x2f                  	// #47
    960321dc:	aa1303e0 	mov	x0, x19
    960321e0:	97ffe069 	bl	9602a384 <strchr>
			q = end;
    960321e4:	f100001f 	cmp	x0, #0x0
    960321e8:	9a961015 	csel	x21, x0, x22, ne  // ne = any
		offset = fdt_subnode_offset_namelen(fdt, offset, p, q-p);
    960321ec:	aa1303e2 	mov	x2, x19
    960321f0:	4b1302a3 	sub	w3, w21, w19
    960321f4:	2a1403e1 	mov	w1, w20
    960321f8:	aa1703e0 	mov	x0, x23
		p = q;
    960321fc:	aa1503f3 	mov	x19, x21
		offset = fdt_subnode_offset_namelen(fdt, offset, p, q-p);
    96032200:	97fffe7b 	bl	96031bec <fdt_subnode_offset_namelen>
    96032204:	2a0003f4 	mov	w20, w0
		if (offset < 0)
    96032208:	36fffd80 	tbz	w0, #31, 960321b8 <fdt_path_offset+0x84>
}
    9603220c:	2a1403e0 	mov	w0, w20
    96032210:	f9401bf7 	ldr	x23, [sp, #48]
    96032214:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032218:	a9425bf5 	ldp	x21, x22, [sp, #32]
    9603221c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96032220:	d65f03c0 	ret
			return -FDT_ERR_BADPATH;
    96032224:	12800094 	mov	w20, #0xfffffffb            	// #-5
    96032228:	17fffff9 	b	9603220c <fdt_path_offset+0xd8>

000000009603222c <fdt_get_path>:
{
	return fdt_get_alias_namelen(fdt, name, strlen(name));
}

int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen)
{
    9603222c:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96032230:	910003fd 	mov	x29, sp
    96032234:	a90153f3 	stp	x19, x20, [sp, #16]
    96032238:	a9025bf5 	stp	x21, x22, [sp, #32]
    9603223c:	a90363f7 	stp	x23, x24, [sp, #48]
    96032240:	aa0003f8 	mov	x24, x0
    96032244:	a9046bf9 	stp	x25, x26, [sp, #64]
    96032248:	aa0203f7 	mov	x23, x2
    9603224c:	2a0103f9 	mov	w25, w1
    96032250:	2a0303fa 	mov	w26, w3
    96032254:	f9002bfb 	str	x27, [sp, #80]
	int pdepth = 0, p = 0;
	int offset, depth, namelen;
	const char *name;

	FDT_CHECK_HEADER(fdt);
    96032258:	97fffd18 	bl	960316b8 <fdt_check_header>
    9603225c:	2a0003f5 	mov	w21, w0
    96032260:	35000080 	cbnz	w0, 96032270 <fdt_get_path+0x44>

	if (buflen < 2)
    96032264:	7100075f 	cmp	w26, #0x1
    96032268:	5400014c 	b.gt	96032290 <fdt_get_path+0x64>
		return -FDT_ERR_NOSPACE;
    9603226c:	12800055 	mov	w21, #0xfffffffd            	// #-3
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
		return -FDT_ERR_BADSTRUCTURE;

	return offset; /* error from fdt_next_node() */
}
    96032270:	2a1503e0 	mov	w0, w21
    96032274:	f9402bfb 	ldr	x27, [sp, #80]
    96032278:	a94153f3 	ldp	x19, x20, [sp, #16]
    9603227c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032280:	a94363f7 	ldp	x23, x24, [sp, #48]
    96032284:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96032288:	a8c77bfd 	ldp	x29, x30, [sp], #112
    9603228c:	d65f03c0 	ret
	for (offset = 0, depth = 0;
    96032290:	52800014 	mov	w20, #0x0                   	// #0
	int pdepth = 0, p = 0;
    96032294:	52800013 	mov	w19, #0x0                   	// #0
    96032298:	52800016 	mov	w22, #0x0                   	// #0
				buf[p++] = '/';
    9603229c:	528005fb 	mov	w27, #0x2f                  	// #47
	for (offset = 0, depth = 0;
    960322a0:	b9006bbf 	str	wzr, [x29, #104]
	     (offset >= 0) && (offset <= nodeoffset);
    960322a4:	7100029f 	cmp	w20, #0x0
	for (offset = 0, depth = 0;
    960322a8:	7a59a280 	ccmp	w20, w25, #0x0, ge  // ge = tcont
    960322ac:	5400066c 	b.gt	96032378 <fdt_get_path+0x14c>
		while (pdepth > depth) {
    960322b0:	b9406ba1 	ldr	w1, [x29, #104]
    960322b4:	1400000a 	b	960322dc <fdt_get_path+0xb0>
    960322b8:	51000673 	sub	w19, w19, #0x1
    960322bc:	93407e60 	sxtw	x0, w19
			} while (buf[p-1] != '/');
    960322c0:	8b0002e2 	add	x2, x23, x0
				p--;
    960322c4:	2a0003f3 	mov	w19, w0
    960322c8:	d1000400 	sub	x0, x0, #0x1
			} while (buf[p-1] != '/');
    960322cc:	385ff042 	ldurb	w2, [x2, #-1]
    960322d0:	7100bc5f 	cmp	w2, #0x2f
    960322d4:	54ffff61 	b.ne	960322c0 <fdt_get_path+0x94>  // b.any
			pdepth--;
    960322d8:	510006d6 	sub	w22, w22, #0x1
		while (pdepth > depth) {
    960322dc:	6b16003f 	cmp	w1, w22
    960322e0:	54fffecb 	b.lt	960322b8 <fdt_get_path+0x8c>  // b.tstop
		if (pdepth >= depth) {
    960322e4:	540002ac 	b.gt	96032338 <fdt_get_path+0x10c>
			name = fdt_get_name(fdt, offset, &namelen);
    960322e8:	9101b3a2 	add	x2, x29, #0x6c
    960322ec:	2a1403e1 	mov	w1, w20
    960322f0:	aa1803e0 	mov	x0, x24
    960322f4:	97fffe8a 	bl	96031d1c <fdt_get_name>
    960322f8:	b9406fa2 	ldr	w2, [x29, #108]
			if (!name)
    960322fc:	b5000060 	cbnz	x0, 96032308 <fdt_get_path+0xdc>
				return namelen;
    96032300:	2a0203f5 	mov	w21, w2
    96032304:	17ffffdb 	b	96032270 <fdt_get_path+0x44>
			if ((p + namelen + 1) <= buflen) {
    96032308:	0b130041 	add	w1, w2, w19
    9603230c:	6b1a003f 	cmp	w1, w26
    96032310:	5400014a 	b.ge	96032338 <fdt_get_path+0x10c>  // b.tcont
				memcpy(buf + p, name, namelen);
    96032314:	aa0003e1 	mov	x1, x0
    96032318:	93407c42 	sxtw	x2, w2
    9603231c:	8b33c2e0 	add	x0, x23, w19, sxtw
    96032320:	97ffdf01 	bl	96029f24 <memcpy>
				p += namelen;
    96032324:	b9406fa0 	ldr	w0, [x29, #108]
				pdepth++;
    96032328:	110006d6 	add	w22, w22, #0x1
				p += namelen;
    9603232c:	0b000260 	add	w0, w19, w0
				buf[p++] = '/';
    96032330:	11000413 	add	w19, w0, #0x1
    96032334:	3820cafb 	strb	w27, [x23, w0, sxtw]
		if (offset == nodeoffset) {
    96032338:	6b19029f 	cmp	w20, w25
    9603233c:	54000121 	b.ne	96032360 <fdt_get_path+0x134>  // b.any
			if (pdepth < (depth + 1))
    96032340:	b9406ba0 	ldr	w0, [x29, #104]
    96032344:	6b16001f 	cmp	w0, w22
    96032348:	54fff92a 	b.ge	9603226c <fdt_get_path+0x40>  // b.tcont
				p--;
    9603234c:	7100067f 	cmp	w19, #0x1
    96032350:	1a9fd7e0 	cset	w0, gt
    96032354:	4b000273 	sub	w19, w19, w0
			buf[p] = '\0';
    96032358:	3833caff 	strb	wzr, [x23, w19, sxtw]
			return 0;
    9603235c:	17ffffc5 	b	96032270 <fdt_get_path+0x44>
	     offset = fdt_next_node(fdt, offset, &depth)) {
    96032360:	2a1403e1 	mov	w1, w20
    96032364:	9101a3a2 	add	x2, x29, #0x68
    96032368:	aa1803e0 	mov	x0, x24
    9603236c:	97fffd65 	bl	96031900 <fdt_next_node>
    96032370:	2a0003f4 	mov	w20, w0
    96032374:	17ffffcc 	b	960322a4 <fdt_get_path+0x78>
	if ((offset == -FDT_ERR_NOTFOUND) || (offset >= 0))
    96032378:	3100069f 	cmn	w20, #0x1
    9603237c:	540000aa 	b.ge	96032390 <fdt_get_path+0x164>  // b.tcont
	else if (offset == -FDT_ERR_BADOFFSET)
    96032380:	3100129f 	cmn	w20, #0x4
    96032384:	12800155 	mov	w21, #0xfffffff5            	// #-11
    96032388:	1a951295 	csel	w21, w20, w21, ne  // ne = any
    9603238c:	17ffffb9 	b	96032270 <fdt_get_path+0x44>
		return -FDT_ERR_BADOFFSET;
    96032390:	12800075 	mov	w21, #0xfffffffc            	// #-4
    96032394:	17ffffb7 	b	96032270 <fdt_get_path+0x44>

0000000096032398 <fdt_supernode_atdepth_offset>:

int fdt_supernode_atdepth_offset(const void *fdt, int nodeoffset,
				 int supernodedepth, int *nodedepth)
{
    96032398:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    9603239c:	910003fd 	mov	x29, sp
    960323a0:	a90153f3 	stp	x19, x20, [sp, #16]
    960323a4:	2a0203f4 	mov	w20, w2
    960323a8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960323ac:	2a0103f6 	mov	w22, w1
    960323b0:	a90363f7 	stp	x23, x24, [sp, #48]
    960323b4:	aa0003f8 	mov	x24, x0
    960323b8:	aa0303f7 	mov	x23, x3
	int offset, depth;
	int supernodeoffset = -FDT_ERR_INTERNAL;

	FDT_CHECK_HEADER(fdt);
    960323bc:	97fffcbf 	bl	960316b8 <fdt_check_header>
    960323c0:	35000300 	cbnz	w0, 96032420 <fdt_supernode_atdepth_offset+0x88>

	if (supernodedepth < 0)
    960323c4:	37f80474 	tbnz	w20, #31, 96032450 <fdt_supernode_atdepth_offset+0xb8>
		return -FDT_ERR_NOTFOUND;

	for (offset = 0, depth = 0;
    960323c8:	910143b5 	add	x21, x29, #0x50
	int supernodeoffset = -FDT_ERR_INTERNAL;
    960323cc:	12800193 	mov	w19, #0xfffffff3            	// #-13
	for (offset = 0, depth = 0;
    960323d0:	b81fcebf 	str	wzr, [x21, #-4]!
	     (offset >= 0) && (offset <= nodeoffset);
    960323d4:	7100001f 	cmp	w0, #0x0
	for (offset = 0, depth = 0;
    960323d8:	7a40a2c1 	ccmp	w22, w0, #0x1, ge  // ge = tcont
    960323dc:	540000ea 	b.ge	960323f8 <fdt_supernode_atdepth_offset+0x60>  // b.tcont
			else
				return supernodeoffset;
		}
	}

	if ((offset == -FDT_ERR_NOTFOUND) || (offset >= 0))
    960323e0:	3100041f 	cmn	w0, #0x1
    960323e4:	5400032a 	b.ge	96032448 <fdt_supernode_atdepth_offset+0xb0>  // b.tcont
		return -FDT_ERR_BADOFFSET;
	else if (offset == -FDT_ERR_BADOFFSET)
    960323e8:	3100101f 	cmn	w0, #0x4
    960323ec:	12800153 	mov	w19, #0xfffffff5            	// #-11
    960323f0:	1a931013 	csel	w19, w0, w19, ne  // ne = any
    960323f4:	1400000a 	b	9603241c <fdt_supernode_atdepth_offset+0x84>
		if (depth == supernodedepth)
    960323f8:	b9404fa1 	ldr	w1, [x29, #76]
    960323fc:	6b01029f 	cmp	w20, w1
    96032400:	1a801273 	csel	w19, w19, w0, ne  // ne = any
		if (offset == nodeoffset) {
    96032404:	6b0002df 	cmp	w22, w0
    96032408:	54000161 	b.ne	96032434 <fdt_supernode_atdepth_offset+0x9c>  // b.any
			if (nodedepth)
    9603240c:	b4000057 	cbz	x23, 96032414 <fdt_supernode_atdepth_offset+0x7c>
				*nodedepth = depth;
    96032410:	b90002e1 	str	w1, [x23]
				return -FDT_ERR_NOTFOUND;
    96032414:	6b01029f 	cmp	w20, w1
    96032418:	5a9fd273 	csinv	w19, w19, wzr, le
    9603241c:	2a1303e0 	mov	w0, w19
		return -FDT_ERR_BADSTRUCTURE;

	return offset; /* error from fdt_next_node() */
}
    96032420:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032424:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032428:	a94363f7 	ldp	x23, x24, [sp, #48]
    9603242c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96032430:	d65f03c0 	ret
	     offset = fdt_next_node(fdt, offset, &depth)) {
    96032434:	2a0003e1 	mov	w1, w0
    96032438:	aa1503e2 	mov	x2, x21
    9603243c:	aa1803e0 	mov	x0, x24
    96032440:	97fffd30 	bl	96031900 <fdt_next_node>
    96032444:	17ffffe4 	b	960323d4 <fdt_supernode_atdepth_offset+0x3c>
		return -FDT_ERR_BADOFFSET;
    96032448:	12800073 	mov	w19, #0xfffffffc            	// #-4
    9603244c:	17fffff4 	b	9603241c <fdt_supernode_atdepth_offset+0x84>
		return -FDT_ERR_NOTFOUND;
    96032450:	12800000 	mov	w0, #0xffffffff            	// #-1
    96032454:	17fffff3 	b	96032420 <fdt_supernode_atdepth_offset+0x88>

0000000096032458 <fdt_node_depth>:

int fdt_node_depth(const void *fdt, int nodeoffset)
{
    96032458:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	int nodedepth;
	int err;

	err = fdt_supernode_atdepth_offset(fdt, nodeoffset, 0, &nodedepth);
    9603245c:	52800002 	mov	w2, #0x0                   	// #0
{
    96032460:	910003fd 	mov	x29, sp
	err = fdt_supernode_atdepth_offset(fdt, nodeoffset, 0, &nodedepth);
    96032464:	910073a3 	add	x3, x29, #0x1c
    96032468:	97ffffcc 	bl	96032398 <fdt_supernode_atdepth_offset>
	if (err)
    9603246c:	7100001f 	cmp	w0, #0x0
		return (err < 0) ? err : -FDT_ERR_INTERNAL;
    96032470:	12800181 	mov	w1, #0xfffffff3            	// #-13
    96032474:	1a81b001 	csel	w1, w0, w1, lt  // lt = tstop
    96032478:	b9401fa0 	ldr	w0, [x29, #28]
	return nodedepth;
}
    9603247c:	a8c27bfd 	ldp	x29, x30, [sp], #32
		return (err < 0) ? err : -FDT_ERR_INTERNAL;
    96032480:	1a801020 	csel	w0, w1, w0, ne  // ne = any
}
    96032484:	d65f03c0 	ret

0000000096032488 <fdt_parent_offset>:

int fdt_parent_offset(const void *fdt, int nodeoffset)
{
    96032488:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    9603248c:	910003fd 	mov	x29, sp
    96032490:	a90153f3 	stp	x19, x20, [sp, #16]
    96032494:	aa0003f3 	mov	x19, x0
    96032498:	2a0103f4 	mov	w20, w1
	int nodedepth = fdt_node_depth(fdt, nodeoffset);
    9603249c:	97ffffef 	bl	96032458 <fdt_node_depth>

	if (nodedepth < 0)
    960324a0:	37f80100 	tbnz	w0, #31, 960324c0 <fdt_parent_offset+0x38>
		return nodedepth;
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
    960324a4:	51000402 	sub	w2, w0, #0x1
    960324a8:	2a1403e1 	mov	w1, w20
    960324ac:	aa1303e0 	mov	x0, x19
    960324b0:	d2800003 	mov	x3, #0x0                   	// #0
					    nodedepth - 1, NULL);
}
    960324b4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960324b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
	return fdt_supernode_atdepth_offset(fdt, nodeoffset,
    960324bc:	17ffffb7 	b	96032398 <fdt_supernode_atdepth_offset>
}
    960324c0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960324c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960324c8:	d65f03c0 	ret

00000000960324cc <fdt_node_offset_by_prop_value>:

int fdt_node_offset_by_prop_value(const void *fdt, int startoffset,
				  const char *propname,
				  const void *propval, int proplen)
{
    960324cc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    960324d0:	910003fd 	mov	x29, sp
    960324d4:	a90153f3 	stp	x19, x20, [sp, #16]
    960324d8:	aa0003f4 	mov	x20, x0
    960324dc:	a9025bf5 	stp	x21, x22, [sp, #32]
    960324e0:	aa0203f6 	mov	x22, x2
    960324e4:	a90363f7 	stp	x23, x24, [sp, #48]
    960324e8:	2a0403f5 	mov	w21, w4
    960324ec:	2a0103f8 	mov	w24, w1
    960324f0:	aa0303f7 	mov	x23, x3
	int offset;
	const void *val;
	int len;

	FDT_CHECK_HEADER(fdt);
    960324f4:	97fffc71 	bl	960316b8 <fdt_check_header>
    960324f8:	2a0003f3 	mov	w19, w0
    960324fc:	35000360 	cbnz	w0, 96032568 <fdt_node_offset_by_prop_value+0x9c>
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_getprop(), then if that didn't
	 * find what we want, we scan over them again making our way
	 * to the next node.  Still it's the easiest to implement
	 * approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    96032500:	2a1803e1 	mov	w1, w24
    96032504:	d2800002 	mov	x2, #0x0                   	// #0
    96032508:	aa1403e0 	mov	x0, x20
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
		val = fdt_getprop(fdt, offset, propname, &len);
		if (val && (len == proplen)
		    && (memcmp(val, propval, len) == 0))
    9603250c:	93407eb8 	sxtw	x24, w21
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    96032510:	97fffcfc 	bl	96031900 <fdt_next_node>
    96032514:	2a0003f3 	mov	w19, w0
    96032518:	37f80293 	tbnz	w19, #31, 96032568 <fdt_node_offset_by_prop_value+0x9c>
		val = fdt_getprop(fdt, offset, propname, &len);
    9603251c:	910133a3 	add	x3, x29, #0x4c
    96032520:	aa1603e2 	mov	x2, x22
    96032524:	2a1303e1 	mov	w1, w19
    96032528:	aa1403e0 	mov	x0, x20
    9603252c:	97fffeb7 	bl	96032008 <fdt_getprop>
		if (val && (len == proplen)
    96032530:	b50000e0 	cbnz	x0, 9603254c <fdt_node_offset_by_prop_value+0x80>
	     offset = fdt_next_node(fdt, offset, NULL)) {
    96032534:	2a1303e1 	mov	w1, w19
    96032538:	d2800002 	mov	x2, #0x0                   	// #0
    9603253c:	aa1403e0 	mov	x0, x20
    96032540:	97fffcf0 	bl	96031900 <fdt_next_node>
    96032544:	2a0003f3 	mov	w19, w0
    96032548:	17fffff4 	b	96032518 <fdt_node_offset_by_prop_value+0x4c>
		if (val && (len == proplen)
    9603254c:	b9404fa1 	ldr	w1, [x29, #76]
    96032550:	6b15003f 	cmp	w1, w21
    96032554:	54ffff01 	b.ne	96032534 <fdt_node_offset_by_prop_value+0x68>  // b.any
		    && (memcmp(val, propval, len) == 0))
    96032558:	aa1803e2 	mov	x2, x24
    9603255c:	aa1703e1 	mov	x1, x23
    96032560:	97ffdec4 	bl	9602a070 <memcmp>
    96032564:	35fffe80 	cbnz	w0, 96032534 <fdt_node_offset_by_prop_value+0x68>
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    96032568:	2a1303e0 	mov	w0, w19
    9603256c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032570:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032574:	a94363f7 	ldp	x23, x24, [sp, #48]
    96032578:	a8c57bfd 	ldp	x29, x30, [sp], #80
    9603257c:	d65f03c0 	ret

0000000096032580 <fdt_node_offset_by_phandle>:

int fdt_node_offset_by_phandle(const void *fdt, uint32_t phandle)
{
    96032580:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	int offset;

	if ((phandle == 0) || (phandle == (uint32_t)-1))
    96032584:	51000422 	sub	w2, w1, #0x1
    96032588:	31000c5f 	cmn	w2, #0x3
{
    9603258c:	910003fd 	mov	x29, sp
    96032590:	a90153f3 	stp	x19, x20, [sp, #16]
    96032594:	f90013f5 	str	x21, [sp, #32]
	if ((phandle == 0) || (phandle == (uint32_t)-1))
    96032598:	54000328 	b.hi	960325fc <fdt_node_offset_by_phandle+0x7c>  // b.pmore
    9603259c:	aa0003f4 	mov	x20, x0
    960325a0:	2a0103f5 	mov	w21, w1
		return -FDT_ERR_BADPHANDLE;

	FDT_CHECK_HEADER(fdt);
    960325a4:	97fffc45 	bl	960316b8 <fdt_check_header>
    960325a8:	2a0003f3 	mov	w19, w0
    960325ac:	350000e0 	cbnz	w0, 960325c8 <fdt_node_offset_by_phandle+0x48>
	 * potentially scan each property of a node in
	 * fdt_get_phandle(), then if that didn't find what
	 * we want, we scan over them again making our way to the next
	 * node.  Still it's the easiest to implement approach;
	 * performance can come later. */
	for (offset = fdt_next_node(fdt, -1, NULL);
    960325b0:	d2800002 	mov	x2, #0x0                   	// #0
    960325b4:	12800001 	mov	w1, #0xffffffff            	// #-1
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    960325b8:	aa1403e0 	mov	x0, x20
    960325bc:	97fffcd1 	bl	96031900 <fdt_next_node>
    960325c0:	2a0003f3 	mov	w19, w0
	for (offset = fdt_next_node(fdt, -1, NULL);
    960325c4:	36f800c0 	tbz	w0, #31, 960325dc <fdt_node_offset_by_phandle+0x5c>
		if (fdt_get_phandle(fdt, offset) == phandle)
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    960325c8:	2a1303e0 	mov	w0, w19
    960325cc:	f94013f5 	ldr	x21, [sp, #32]
    960325d0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960325d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960325d8:	d65f03c0 	ret
		if (fdt_get_phandle(fdt, offset) == phandle)
    960325dc:	2a1303e1 	mov	w1, w19
    960325e0:	aa1403e0 	mov	x0, x20
    960325e4:	97fffe9c 	bl	96032054 <fdt_get_phandle>
    960325e8:	6b15001f 	cmp	w0, w21
    960325ec:	54fffee0 	b.eq	960325c8 <fdt_node_offset_by_phandle+0x48>  // b.none
	     offset = fdt_next_node(fdt, offset, NULL)) {
    960325f0:	d2800002 	mov	x2, #0x0                   	// #0
    960325f4:	2a1303e1 	mov	w1, w19
    960325f8:	17fffff0 	b	960325b8 <fdt_node_offset_by_phandle+0x38>
		return -FDT_ERR_BADPHANDLE;
    960325fc:	128000b3 	mov	w19, #0xfffffffa            	// #-6
    96032600:	17fffff2 	b	960325c8 <fdt_node_offset_by_phandle+0x48>

0000000096032604 <fdt_node_check_compatible>:
	return 0;
}

int fdt_node_check_compatible(const void *fdt, int nodeoffset,
			      const char *compatible)
{
    96032604:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96032608:	910003fd 	mov	x29, sp
    9603260c:	a90153f3 	stp	x19, x20, [sp, #16]
	const void *prop;
	int len;

	prop = fdt_getprop(fdt, nodeoffset, "compatible", &len);
    96032610:	910133a3 	add	x3, x29, #0x4c
{
    96032614:	a9025bf5 	stp	x21, x22, [sp, #32]
    96032618:	aa0203f6 	mov	x22, x2
    9603261c:	f9001bf7 	str	x23, [sp, #48]
	prop = fdt_getprop(fdt, nodeoffset, "compatible", &len);
    96032620:	b0000082 	adrp	x2, 96043000 <common_params>
    96032624:	913c5042 	add	x2, x2, #0xf14
    96032628:	97fffe78 	bl	96032008 <fdt_getprop>
    9603262c:	b9404fb3 	ldr	w19, [x29, #76]
	if (!prop)
    96032630:	b50000e0 	cbnz	x0, 9603264c <fdt_node_check_compatible+0x48>
		return len;
    96032634:	2a1303e0 	mov	w0, w19
	if (_fdt_stringlist_contains(prop, len, compatible))
		return 0;
	else
		return 1;
}
    96032638:	a94153f3 	ldp	x19, x20, [sp, #16]
    9603263c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032640:	f9401bf7 	ldr	x23, [sp, #48]
    96032644:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96032648:	d65f03c0 	ret
    9603264c:	aa0003f4 	mov	x20, x0
	int len = strlen(str);
    96032650:	aa1603e0 	mov	x0, x22
    96032654:	97ffdf2e 	bl	9602a30c <strlen>
		if (memcmp(str, strlist, len+1) == 0)
    96032658:	11000415 	add	w21, w0, #0x1
	int len = strlen(str);
    9603265c:	2a0003f7 	mov	w23, w0
		if (memcmp(str, strlist, len+1) == 0)
    96032660:	93407eb5 	sxtw	x21, w21
	while (listlen >= len) {
    96032664:	6b1302ff 	cmp	w23, w19
    96032668:	5400016c 	b.gt	96032694 <fdt_node_check_compatible+0x90>
		if (memcmp(str, strlist, len+1) == 0)
    9603266c:	aa1503e2 	mov	x2, x21
    96032670:	aa1403e1 	mov	x1, x20
    96032674:	aa1603e0 	mov	x0, x22
    96032678:	97ffde7e 	bl	9602a070 <memcmp>
    9603267c:	34fffde0 	cbz	w0, 96032638 <fdt_node_check_compatible+0x34>
		p = memchr(strlist, '\0', listlen);
    96032680:	93407e62 	sxtw	x2, w19
    96032684:	52800001 	mov	w1, #0x0                   	// #0
    96032688:	aa1403e0 	mov	x0, x20
    9603268c:	97ffde98 	bl	9602a0ec <memchr>
		if (!p)
    96032690:	b5000060 	cbnz	x0, 9603269c <fdt_node_check_compatible+0x98>
		return 1;
    96032694:	52800020 	mov	w0, #0x1                   	// #1
    96032698:	17ffffe8 	b	96032638 <fdt_node_check_compatible+0x34>
		listlen -= (p-strlist) + 1;
    9603269c:	cb140014 	sub	x20, x0, x20
    960326a0:	51000673 	sub	w19, w19, #0x1
    960326a4:	4b140273 	sub	w19, w19, w20
		strlist = p + 1;
    960326a8:	91000414 	add	x20, x0, #0x1
    960326ac:	17ffffee 	b	96032664 <fdt_node_check_compatible+0x60>

00000000960326b0 <fdt_node_offset_by_compatible>:

int fdt_node_offset_by_compatible(const void *fdt, int startoffset,
				  const char *compatible)
{
    960326b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960326b4:	910003fd 	mov	x29, sp
    960326b8:	a90153f3 	stp	x19, x20, [sp, #16]
    960326bc:	aa0003f4 	mov	x20, x0
    960326c0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960326c4:	2a0103f6 	mov	w22, w1
    960326c8:	aa0203f5 	mov	x21, x2
	int offset, err;

	FDT_CHECK_HEADER(fdt);
    960326cc:	97fffbfb 	bl	960316b8 <fdt_check_header>
    960326d0:	2a0003f3 	mov	w19, w0
    960326d4:	350000e0 	cbnz	w0, 960326f0 <fdt_node_offset_by_compatible+0x40>
	/* FIXME: The algorithm here is pretty horrible: we scan each
	 * property of a node in fdt_node_check_compatible(), then if
	 * that didn't find what we want, we scan over them again
	 * making our way to the next node.  Still it's the easiest to
	 * implement approach; performance can come later. */
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    960326d8:	2a1603e1 	mov	w1, w22
    960326dc:	d2800002 	mov	x2, #0x0                   	// #0
	     offset >= 0;
	     offset = fdt_next_node(fdt, offset, NULL)) {
    960326e0:	aa1403e0 	mov	x0, x20
    960326e4:	97fffc87 	bl	96031900 <fdt_next_node>
    960326e8:	2a0003f3 	mov	w19, w0
	for (offset = fdt_next_node(fdt, startoffset, NULL);
    960326ec:	36f800c0 	tbz	w0, #31, 96032704 <fdt_node_offset_by_compatible+0x54>
		else if (err == 0)
			return offset;
	}

	return offset; /* error from fdt_next_node() */
}
    960326f0:	2a1303e0 	mov	w0, w19
    960326f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960326f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960326fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96032700:	d65f03c0 	ret
		err = fdt_node_check_compatible(fdt, offset, compatible);
    96032704:	aa1503e2 	mov	x2, x21
    96032708:	2a1303e1 	mov	w1, w19
    9603270c:	aa1403e0 	mov	x0, x20
    96032710:	97ffffbd 	bl	96032604 <fdt_node_check_compatible>
		if ((err < 0) && (err != -FDT_ERR_NOTFOUND))
    96032714:	3100041f 	cmn	w0, #0x1
    96032718:	540000ab 	b.lt	9603272c <fdt_node_offset_by_compatible+0x7c>  // b.tstop
		else if (err == 0)
    9603271c:	34fffea0 	cbz	w0, 960326f0 <fdt_node_offset_by_compatible+0x40>
	     offset = fdt_next_node(fdt, offset, NULL)) {
    96032720:	d2800002 	mov	x2, #0x0                   	// #0
    96032724:	2a1303e1 	mov	w1, w19
    96032728:	17ffffee 	b	960326e0 <fdt_node_offset_by_compatible+0x30>
		err = fdt_node_check_compatible(fdt, offset, compatible);
    9603272c:	2a0003f3 	mov	w19, w0
    96032730:	17fffff0 	b	960326f0 <fdt_node_offset_by_compatible+0x40>

0000000096032734 <_fdt_blocks_misordered>:

#include "libfdt_internal.h"

static int _fdt_blocks_misordered(const void *fdt,
			      int mem_rsv_size, int struct_size)
{
    96032734:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96032738:	aa0003e3 	mov	x3, x0
    9603273c:	910003fd 	mov	x29, sp
	return (fdt_off_mem_rsvmap(fdt) < FDT_ALIGN(sizeof(struct fdt_header), 8))
    96032740:	b9401000 	ldr	w0, [x0, #16]
    96032744:	97fffbd9 	bl	960316a8 <fdt32_to_cpu>
		|| (fdt_off_dt_struct(fdt) <
		    (fdt_off_mem_rsvmap(fdt) + mem_rsv_size))
		|| (fdt_off_dt_strings(fdt) <
		    (fdt_off_dt_struct(fdt) + struct_size))
		|| (fdt_totalsize(fdt) <
    96032748:	71009c1f 	cmp	w0, #0x27
    9603274c:	54000309 	b.ls	960327ac <_fdt_blocks_misordered+0x78>  // b.plast
    96032750:	2a0003e5 	mov	w5, w0
		|| (fdt_off_dt_struct(fdt) <
    96032754:	b9400860 	ldr	w0, [x3, #8]
    96032758:	97fffbd4 	bl	960316a8 <fdt32_to_cpu>
		    (fdt_off_mem_rsvmap(fdt) + mem_rsv_size))
    9603275c:	0b050021 	add	w1, w1, w5
		|| (fdt_off_dt_struct(fdt) <
    96032760:	2a0003e4 	mov	w4, w0
    96032764:	6b01001f 	cmp	w0, w1
    96032768:	54000223 	b.cc	960327ac <_fdt_blocks_misordered+0x78>  // b.lo, b.ul, b.last
		|| (fdt_off_dt_strings(fdt) <
    9603276c:	b9400c60 	ldr	w0, [x3, #12]
    96032770:	97fffbce 	bl	960316a8 <fdt32_to_cpu>
		    (fdt_off_dt_struct(fdt) + struct_size))
    96032774:	0b040042 	add	w2, w2, w4
		|| (fdt_off_dt_strings(fdt) <
    96032778:	2a0003e1 	mov	w1, w0
    9603277c:	6b02001f 	cmp	w0, w2
    96032780:	54000163 	b.cc	960327ac <_fdt_blocks_misordered+0x78>  // b.lo, b.ul, b.last
		|| (fdt_totalsize(fdt) <
    96032784:	b9400460 	ldr	w0, [x3, #4]
    96032788:	97fffbc8 	bl	960316a8 <fdt32_to_cpu>
    9603278c:	2a0003e2 	mov	w2, w0
		    (fdt_off_dt_strings(fdt) + fdt_size_dt_strings(fdt)));
    96032790:	b9402060 	ldr	w0, [x3, #32]
    96032794:	97fffbc5 	bl	960316a8 <fdt32_to_cpu>
    96032798:	0b000020 	add	w0, w1, w0
		|| (fdt_totalsize(fdt) <
    9603279c:	6b00005f 	cmp	w2, w0
    960327a0:	1a9f27e0 	cset	w0, cc  // cc = lo, ul, last
}
    960327a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960327a8:	d65f03c0 	ret
		|| (fdt_totalsize(fdt) <
    960327ac:	52800020 	mov	w0, #0x1                   	// #1
    960327b0:	17fffffd 	b	960327a4 <_fdt_blocks_misordered+0x70>

00000000960327b4 <_fdt_rw_check_header>:

static int _fdt_rw_check_header(void *fdt)
{
    960327b4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960327b8:	910003fd 	mov	x29, sp
    960327bc:	f9000bf3 	str	x19, [sp, #16]
    960327c0:	aa0003f3 	mov	x19, x0
	FDT_CHECK_HEADER(fdt);
    960327c4:	97fffbbd 	bl	960316b8 <fdt_check_header>
    960327c8:	35000220 	cbnz	w0, 9603280c <_fdt_rw_check_header+0x58>

	if (fdt_version(fdt) < 17)
    960327cc:	b9401660 	ldr	w0, [x19, #20]
    960327d0:	97fffbb6 	bl	960316a8 <fdt32_to_cpu>
    960327d4:	2a0003e6 	mov	w6, w0
    960327d8:	7100401f 	cmp	w0, #0x10
    960327dc:	540001e9 	b.ls	96032818 <_fdt_rw_check_header+0x64>  // b.plast
		return -FDT_ERR_BADVERSION;
	if (_fdt_blocks_misordered(fdt, sizeof(struct fdt_reserve_entry),
				   fdt_size_dt_struct(fdt)))
    960327e0:	b9402660 	ldr	w0, [x19, #36]
    960327e4:	97fffbb1 	bl	960316a8 <fdt32_to_cpu>
	if (_fdt_blocks_misordered(fdt, sizeof(struct fdt_reserve_entry),
    960327e8:	2a0003e2 	mov	w2, w0
    960327ec:	52800201 	mov	w1, #0x10                  	// #16
    960327f0:	aa1303e0 	mov	x0, x19
    960327f4:	97ffffd0 	bl	96032734 <_fdt_blocks_misordered>
    960327f8:	35000140 	cbnz	w0, 96032820 <_fdt_rw_check_header+0x6c>
		return -FDT_ERR_BADLAYOUT;
	if (fdt_version(fdt) > 17)
    960327fc:	710044df 	cmp	w6, #0x11
    96032800:	54000060 	b.eq	9603280c <_fdt_rw_check_header+0x58>  // b.none
__fdt_set_hdr(version);
    96032804:	52a22001 	mov	w1, #0x11000000            	// #285212672
    96032808:	b9001661 	str	w1, [x19, #20]
		fdt_set_version(fdt, 17);

	return 0;
}
    9603280c:	f9400bf3 	ldr	x19, [sp, #16]
    96032810:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96032814:	d65f03c0 	ret
		return -FDT_ERR_BADVERSION;
    96032818:	12800120 	mov	w0, #0xfffffff6            	// #-10
    9603281c:	17fffffc 	b	9603280c <_fdt_rw_check_header+0x58>
		return -FDT_ERR_BADLAYOUT;
    96032820:	12800160 	mov	w0, #0xfffffff4            	// #-12
    96032824:	17fffffa 	b	9603280c <_fdt_rw_check_header+0x58>

0000000096032828 <_fdt_packblocks>:
				  endoffset - nodeoffset, 0);
}

static void _fdt_packblocks(const char *old, char *new,
			    int mem_rsv_size, int struct_size)
{
    96032828:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9603282c:	910003fd 	mov	x29, sp
    96032830:	a90153f3 	stp	x19, x20, [sp, #16]
    96032834:	aa0003f4 	mov	x20, x0

	mem_rsv_off = FDT_ALIGN(sizeof(struct fdt_header), 8);
	struct_off = mem_rsv_off + mem_rsv_size;
	strings_off = struct_off + struct_size;

	memmove(new + mem_rsv_off, old + fdt_off_mem_rsvmap(old), mem_rsv_size);
    96032838:	b9401000 	ldr	w0, [x0, #16]
{
    9603283c:	aa0103f3 	mov	x19, x1
    96032840:	a9025bf5 	stp	x21, x22, [sp, #32]
	struct_off = mem_rsv_off + mem_rsv_size;
    96032844:	1100a056 	add	w22, w2, #0x28
{
    96032848:	f9001bf7 	str	x23, [sp, #48]
    9603284c:	2a0303f5 	mov	w21, w3
	strings_off = struct_off + struct_size;
    96032850:	0b0302d7 	add	w23, w22, w3
	memmove(new + mem_rsv_off, old + fdt_off_mem_rsvmap(old), mem_rsv_size);
    96032854:	97fffb95 	bl	960316a8 <fdt32_to_cpu>
    96032858:	8b204281 	add	x1, x20, w0, uxtw
    9603285c:	93407c42 	sxtw	x2, w2
    96032860:	9100a260 	add	x0, x19, #0x28
    96032864:	97ffde2f 	bl	9602a120 <memmove>
__fdt_set_hdr(off_mem_rsvmap);
    96032868:	52a50000 	mov	w0, #0x28000000            	// #671088640
    9603286c:	b9001260 	str	w0, [x19, #16]
	fdt_set_off_mem_rsvmap(new, mem_rsv_off);

	memmove(new + struct_off, old + fdt_off_dt_struct(old), struct_size);
    96032870:	b9400a80 	ldr	w0, [x20, #8]
    96032874:	8b36c263 	add	x3, x19, w22, sxtw
    96032878:	97fffb8c 	bl	960316a8 <fdt32_to_cpu>
    9603287c:	8b204281 	add	x1, x20, w0, uxtw
    96032880:	93407ea2 	sxtw	x2, w21
    96032884:	aa0303e0 	mov	x0, x3
    96032888:	97ffde26 	bl	9602a120 <memmove>
__fdt_set_hdr(off_dt_struct);
    9603288c:	2a1603e0 	mov	w0, w22
    96032890:	97fffb86 	bl	960316a8 <fdt32_to_cpu>
    96032894:	b9000a60 	str	w0, [x19, #8]
__fdt_set_hdr(size_dt_struct);
    96032898:	2a1503e0 	mov	w0, w21
    9603289c:	97fffb83 	bl	960316a8 <fdt32_to_cpu>
    960328a0:	b9002660 	str	w0, [x19, #36]
	fdt_set_off_dt_struct(new, struct_off);
	fdt_set_size_dt_struct(new, struct_size);

	memmove(new + strings_off, old + fdt_off_dt_strings(old),
    960328a4:	b9400e80 	ldr	w0, [x20, #12]
    960328a8:	8b37c263 	add	x3, x19, w23, sxtw
    960328ac:	97fffb7f 	bl	960316a8 <fdt32_to_cpu>
    960328b0:	8b204281 	add	x1, x20, w0, uxtw
		fdt_size_dt_strings(old));
    960328b4:	b9402280 	ldr	w0, [x20, #32]
    960328b8:	97fffb7c 	bl	960316a8 <fdt32_to_cpu>
	memmove(new + strings_off, old + fdt_off_dt_strings(old),
    960328bc:	2a0003e2 	mov	w2, w0
    960328c0:	aa0303e0 	mov	x0, x3
    960328c4:	97ffde17 	bl	9602a120 <memmove>
__fdt_set_hdr(off_dt_strings);
    960328c8:	2a1703e0 	mov	w0, w23
    960328cc:	97fffb77 	bl	960316a8 <fdt32_to_cpu>
    960328d0:	b9000e60 	str	w0, [x19, #12]
	fdt_set_off_dt_strings(new, strings_off);
	fdt_set_size_dt_strings(new, fdt_size_dt_strings(old));
    960328d4:	b9402280 	ldr	w0, [x20, #32]
    960328d8:	97fffb74 	bl	960316a8 <fdt32_to_cpu>
__fdt_set_hdr(size_dt_strings);
    960328dc:	97fffb73 	bl	960316a8 <fdt32_to_cpu>
}
    960328e0:	f9401bf7 	ldr	x23, [sp, #48]
    960328e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960328e8:	b9002260 	str	w0, [x19, #32]
    960328ec:	a94153f3 	ldp	x19, x20, [sp, #16]
    960328f0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960328f4:	d65f03c0 	ret

00000000960328f8 <_fdt_splice>:
{
    960328f8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    960328fc:	aa0003e5 	mov	x5, x0
    96032900:	910003fd 	mov	x29, sp
	return fdt_off_dt_strings(fdt) + fdt_size_dt_strings(fdt);
    96032904:	b9400c00 	ldr	w0, [x0, #12]
    96032908:	97fffb68 	bl	960316a8 <fdt32_to_cpu>
    9603290c:	2a0003e4 	mov	w4, w0
    96032910:	b94020a0 	ldr	w0, [x5, #32]
    96032914:	97fffb65 	bl	960316a8 <fdt32_to_cpu>
    96032918:	0b000084 	add	w4, w4, w0
	char *end = (char *)fdt + _fdt_data_size(fdt);
    9603291c:	8b24c0a4 	add	x4, x5, w4, sxtw
	if (((p + oldlen) < p) || ((p + oldlen) > end))
    96032920:	37f802a2 	tbnz	w2, #31, 96032974 <_fdt_splice+0x7c>
    96032924:	93407c42 	sxtw	x2, w2
    96032928:	aa0103e6 	mov	x6, x1
    9603292c:	8b020021 	add	x1, x1, x2
    96032930:	eb04003f 	cmp	x1, x4
    96032934:	54000208 	b.hi	96032974 <_fdt_splice+0x7c>  // b.pmore
	if ((end - oldlen + newlen) > ((char *)fdt + fdt_totalsize(fdt)))
    96032938:	93407c63 	sxtw	x3, w3
    9603293c:	b94004a0 	ldr	w0, [x5, #4]
    96032940:	cb020067 	sub	x7, x3, x2
    96032944:	8b070087 	add	x7, x4, x7
    96032948:	97fffb58 	bl	960316a8 <fdt32_to_cpu>
    9603294c:	8b2040a0 	add	x0, x5, w0, uxtw
    96032950:	eb0000ff 	cmp	x7, x0
    96032954:	54000148 	b.hi	9603297c <_fdt_splice+0x84>  // b.pmore
	memmove(p + newlen, p + oldlen, end - p - oldlen);
    96032958:	cb060084 	sub	x4, x4, x6
    9603295c:	8b0300c0 	add	x0, x6, x3
    96032960:	cb020082 	sub	x2, x4, x2
    96032964:	97ffddef 	bl	9602a120 <memmove>
	return 0;
    96032968:	52800000 	mov	w0, #0x0                   	// #0
}
    9603296c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96032970:	d65f03c0 	ret
		return -FDT_ERR_BADOFFSET;
    96032974:	12800060 	mov	w0, #0xfffffffc            	// #-4
    96032978:	17fffffd 	b	9603296c <_fdt_splice+0x74>
		return -FDT_ERR_NOSPACE;
    9603297c:	12800040 	mov	w0, #0xfffffffd            	// #-3
    96032980:	17fffffb 	b	9603296c <_fdt_splice+0x74>

0000000096032984 <_fdt_splice_struct>:
{
    96032984:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96032988:	910003fd 	mov	x29, sp
    9603298c:	a90153f3 	stp	x19, x20, [sp, #16]
    96032990:	aa0003f3 	mov	x19, x0
    96032994:	f90013f5 	str	x21, [sp, #32]
    96032998:	2a0303f4 	mov	w20, w3
    9603299c:	2a0203f5 	mov	w21, w2
	if ((err = _fdt_splice(fdt, p, oldlen, newlen)))
    960329a0:	97ffffd6 	bl	960328f8 <_fdt_splice>
    960329a4:	2a0003e1 	mov	w1, w0
    960329a8:	35000180 	cbnz	w0, 960329d8 <_fdt_splice_struct+0x54>
	fdt_set_size_dt_struct(fdt, fdt_size_dt_struct(fdt) + delta);
    960329ac:	b9402660 	ldr	w0, [x19, #36]
	int delta = newlen - oldlen;
    960329b0:	4b150294 	sub	w20, w20, w21
	fdt_set_size_dt_struct(fdt, fdt_size_dt_struct(fdt) + delta);
    960329b4:	97fffb3d 	bl	960316a8 <fdt32_to_cpu>
__fdt_set_hdr(size_dt_struct);
    960329b8:	0b140000 	add	w0, w0, w20
    960329bc:	97fffb3b 	bl	960316a8 <fdt32_to_cpu>
    960329c0:	b9002660 	str	w0, [x19, #36]
	fdt_set_off_dt_strings(fdt, fdt_off_dt_strings(fdt) + delta);
    960329c4:	b9400e60 	ldr	w0, [x19, #12]
    960329c8:	97fffb38 	bl	960316a8 <fdt32_to_cpu>
__fdt_set_hdr(off_dt_strings);
    960329cc:	0b000280 	add	w0, w20, w0
    960329d0:	97fffb36 	bl	960316a8 <fdt32_to_cpu>
    960329d4:	b9000e60 	str	w0, [x19, #12]
}
    960329d8:	2a0103e0 	mov	w0, w1
    960329dc:	f94013f5 	ldr	x21, [sp, #32]
    960329e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960329e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960329e8:	d65f03c0 	ret

00000000960329ec <_fdt_add_property>:
{
    960329ec:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    960329f0:	910003fd 	mov	x29, sp
    960329f4:	a90153f3 	stp	x19, x20, [sp, #16]
    960329f8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960329fc:	aa0003f5 	mov	x21, x0
    96032a00:	a90363f7 	stp	x23, x24, [sp, #48]
    96032a04:	2a0303f7 	mov	w23, w3
    96032a08:	a9046bf9 	stp	x25, x26, [sp, #64]
    96032a0c:	aa0403f8 	mov	x24, x4
    96032a10:	a90573fb 	stp	x27, x28, [sp, #80]
    96032a14:	aa0203fa 	mov	x26, x2
	if ((nextoffset = _fdt_check_node_offset(fdt, nodeoffset)) < 0)
    96032a18:	97fffb9a 	bl	96031880 <_fdt_check_node_offset>
    96032a1c:	93407c13 	sxtw	x19, w0
    96032a20:	37f804d3 	tbnz	w19, #31, 96032ab8 <_fdt_add_property+0xcc>
	char *strtab = (char *)fdt + fdt_off_dt_strings(fdt);
    96032a24:	b9400ea0 	ldr	w0, [x21, #12]
    96032a28:	97fffb20 	bl	960316a8 <fdt32_to_cpu>
    96032a2c:	8b2042b9 	add	x25, x21, w0, uxtw
	int len = strlen(s) + 1;
    96032a30:	aa1a03e0 	mov	x0, x26
    96032a34:	97ffde36 	bl	9602a30c <strlen>
    96032a38:	aa0003f6 	mov	x22, x0
	p = _fdt_find_string(strtab, fdt_size_dt_strings(fdt), s);
    96032a3c:	b94022a0 	ldr	w0, [x21, #32]
    96032a40:	97fffb1a 	bl	960316a8 <fdt32_to_cpu>
    96032a44:	2a0003e1 	mov	w1, w0
    96032a48:	aa1a03e2 	mov	x2, x26
    96032a4c:	aa1903e0 	mov	x0, x25
    96032a50:	97fffbfa 	bl	96031a38 <_fdt_find_string>
	if (p)
    96032a54:	b4000420 	cbz	x0, 96032ad8 <_fdt_add_property+0xec>
		return (p - strtab);
    96032a58:	4b190014 	sub	w20, w0, w25
	if (namestroff < 0)
    96032a5c:	37f80714 	tbnz	w20, #31, 96032b3c <_fdt_add_property+0x150>
    96032a60:	b9400aa0 	ldr	w0, [x21, #8]
    96032a64:	97fffb11 	bl	960316a8 <fdt32_to_cpu>
    96032a68:	8b204273 	add	x19, x19, w0, uxtw
    96032a6c:	8b1302a1 	add	x1, x21, x19
	proplen = sizeof(**prop) + FDT_TAGALIGN(len);
    96032a70:	11000ee3 	add	w3, w23, #0x3
	*prop = _fdt_offset_ptr_w(fdt, nextoffset);
    96032a74:	f9000301 	str	x1, [x24]
	proplen = sizeof(**prop) + FDT_TAGALIGN(len);
    96032a78:	121e7463 	and	w3, w3, #0xfffffffc
	err = _fdt_splice_struct(fdt, *prop, 0, proplen);
    96032a7c:	11003063 	add	w3, w3, #0xc
    96032a80:	52800002 	mov	w2, #0x0                   	// #0
    96032a84:	aa1503e0 	mov	x0, x21
    96032a88:	97ffffbf 	bl	96032984 <_fdt_splice_struct>
    96032a8c:	2a0003f3 	mov	w19, w0
	if (err)
    96032a90:	35000140 	cbnz	w0, 96032ab8 <_fdt_add_property+0xcc>
	(*prop)->tag = cpu_to_fdt32(FDT_PROP);
    96032a94:	f9400301 	ldr	x1, [x24]
    96032a98:	52a06000 	mov	w0, #0x3000000             	// #50331648
    96032a9c:	b9000020 	str	w0, [x1]
	(*prop)->nameoff = cpu_to_fdt32(namestroff);
    96032aa0:	2a1403e0 	mov	w0, w20
    96032aa4:	97fffb01 	bl	960316a8 <fdt32_to_cpu>
    96032aa8:	b9000820 	str	w0, [x1, #8]
	(*prop)->len = cpu_to_fdt32(len);
    96032aac:	2a1703e0 	mov	w0, w23
    96032ab0:	97fffafe 	bl	960316a8 <fdt32_to_cpu>
    96032ab4:	b9000420 	str	w0, [x1, #4]
}
    96032ab8:	2a1303e0 	mov	w0, w19
    96032abc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032ac0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032ac4:	a94363f7 	ldp	x23, x24, [sp, #48]
    96032ac8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96032acc:	a94573fb 	ldp	x27, x28, [sp, #80]
    96032ad0:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96032ad4:	d65f03c0 	ret
	new = strtab + fdt_size_dt_strings(fdt);
    96032ad8:	b94022a0 	ldr	w0, [x21, #32]
	int len = strlen(s) + 1;
    96032adc:	110006d6 	add	w22, w22, #0x1
	new = strtab + fdt_size_dt_strings(fdt);
    96032ae0:	97fffaf2 	bl	960316a8 <fdt32_to_cpu>
    96032ae4:	2a0003fc 	mov	w28, w0
		+ fdt_off_dt_strings(fdt) + fdt_size_dt_strings(fdt);
    96032ae8:	b9400ea0 	ldr	w0, [x21, #12]
    96032aec:	97fffaef 	bl	960316a8 <fdt32_to_cpu>
    96032af0:	8b204380 	add	x0, x28, w0, uxtw
	if ((err = _fdt_splice(fdt, p, 0, newlen)))
    96032af4:	8b0002a1 	add	x1, x21, x0
    96032af8:	2a1603e3 	mov	w3, w22
    96032afc:	52800002 	mov	w2, #0x0                   	// #0
    96032b00:	aa1503e0 	mov	x0, x21
    96032b04:	97ffff7d 	bl	960328f8 <_fdt_splice>
    96032b08:	2a0003f4 	mov	w20, w0
    96032b0c:	35fffa80 	cbnz	w0, 96032a5c <_fdt_add_property+0x70>
	fdt_set_size_dt_strings(fdt, fdt_size_dt_strings(fdt) + newlen);
    96032b10:	b94022a0 	ldr	w0, [x21, #32]
	return (new - strtab);
    96032b14:	2a1c03f4 	mov	w20, w28
	fdt_set_size_dt_strings(fdt, fdt_size_dt_strings(fdt) + newlen);
    96032b18:	97fffae4 	bl	960316a8 <fdt32_to_cpu>
__fdt_set_hdr(size_dt_strings);
    96032b1c:	0b0002c0 	add	w0, w22, w0
    96032b20:	97fffae2 	bl	960316a8 <fdt32_to_cpu>
    96032b24:	b90022a0 	str	w0, [x21, #32]
	memcpy(new, s, len);
    96032b28:	93407ec2 	sxtw	x2, w22
    96032b2c:	aa1a03e1 	mov	x1, x26
    96032b30:	8b1c0320 	add	x0, x25, x28
    96032b34:	97ffdcfc 	bl	96029f24 <memcpy>
    96032b38:	17ffffc9 	b	96032a5c <_fdt_add_property+0x70>
    96032b3c:	2a1403f3 	mov	w19, w20
    96032b40:	17ffffde 	b	96032ab8 <_fdt_add_property+0xcc>

0000000096032b44 <fdt_setprop>:
{
    96032b44:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96032b48:	910003fd 	mov	x29, sp
    96032b4c:	a90153f3 	stp	x19, x20, [sp, #16]
    96032b50:	2a0403f4 	mov	w20, w4
    96032b54:	a9025bf5 	stp	x21, x22, [sp, #32]
    96032b58:	aa0003f5 	mov	x21, x0
    96032b5c:	a90363f7 	stp	x23, x24, [sp, #48]
    96032b60:	2a0103f6 	mov	w22, w1
    96032b64:	aa0203f7 	mov	x23, x2
    96032b68:	aa0303f8 	mov	x24, x3
	FDT_RW_CHECK_HEADER(fdt);
    96032b6c:	97ffff12 	bl	960327b4 <_fdt_rw_check_header>
    96032b70:	2a0003f3 	mov	w19, w0
    96032b74:	350004c0 	cbnz	w0, 96032c0c <fdt_setprop+0xc8>
	return (struct fdt_property *)(uintptr_t)
    96032b78:	aa1703e2 	mov	x2, x23
    96032b7c:	910113a3 	add	x3, x29, #0x44
    96032b80:	2a1603e1 	mov	w1, w22
    96032b84:	aa1503e0 	mov	x0, x21
    96032b88:	97fffcef 	bl	96031f44 <fdt_get_property>
	*prop = fdt_get_property_w(fdt, nodeoffset, name, &oldlen);
    96032b8c:	f90027a0 	str	x0, [x29, #72]
    96032b90:	b94047a2 	ldr	w2, [x29, #68]
	if (! (*prop))
    96032b94:	b50001a0 	cbnz	x0, 96032bc8 <fdt_setprop+0x84>
		return oldlen;
    96032b98:	2a0203e0 	mov	w0, w2
	if (err == -FDT_ERR_NOTFOUND)
    96032b9c:	3100045f 	cmn	w2, #0x1
    96032ba0:	540000e1 	b.ne	96032bbc <fdt_setprop+0x78>  // b.any
		err = _fdt_add_property(fdt, nodeoffset, name, len, &prop);
    96032ba4:	910123a4 	add	x4, x29, #0x48
    96032ba8:	2a1403e3 	mov	w3, w20
    96032bac:	aa1703e2 	mov	x2, x23
    96032bb0:	2a1603e1 	mov	w1, w22
    96032bb4:	aa1503e0 	mov	x0, x21
    96032bb8:	97ffff8d 	bl	960329ec <_fdt_add_property>
	if (err)
    96032bbc:	340001e0 	cbz	w0, 96032bf8 <fdt_setprop+0xb4>
	if (err == -FDT_ERR_NOTFOUND)
    96032bc0:	2a0003f3 	mov	w19, w0
    96032bc4:	14000012 	b	96032c0c <fdt_setprop+0xc8>
				      FDT_TAGALIGN(len))))
    96032bc8:	11000e83 	add	w3, w20, #0x3
	if ((err = _fdt_splice_struct(fdt, (*prop)->data, FDT_TAGALIGN(oldlen),
    96032bcc:	11000c42 	add	w2, w2, #0x3
    96032bd0:	91003001 	add	x1, x0, #0xc
    96032bd4:	121e7463 	and	w3, w3, #0xfffffffc
    96032bd8:	121e7442 	and	w2, w2, #0xfffffffc
    96032bdc:	aa1503e0 	mov	x0, x21
    96032be0:	97ffff69 	bl	96032984 <_fdt_splice_struct>
    96032be4:	35000200 	cbnz	w0, 96032c24 <fdt_setprop+0xe0>
	(*prop)->len = cpu_to_fdt32(len);
    96032be8:	2a1403e0 	mov	w0, w20
    96032bec:	97fffaaf 	bl	960316a8 <fdt32_to_cpu>
    96032bf0:	f94027a1 	ldr	x1, [x29, #72]
    96032bf4:	b9000420 	str	w0, [x1, #4]
	memcpy(prop->data, val, len);
    96032bf8:	f94027a0 	ldr	x0, [x29, #72]
    96032bfc:	93407e82 	sxtw	x2, w20
    96032c00:	aa1803e1 	mov	x1, x24
    96032c04:	91003000 	add	x0, x0, #0xc
    96032c08:	97ffdcc7 	bl	96029f24 <memcpy>
}
    96032c0c:	2a1303e0 	mov	w0, w19
    96032c10:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032c14:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032c18:	a94363f7 	ldp	x23, x24, [sp, #48]
    96032c1c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96032c20:	d65f03c0 	ret
	if (err == -FDT_ERR_NOTFOUND)
    96032c24:	3100041f 	cmn	w0, #0x1
    96032c28:	54fffcc1 	b.ne	96032bc0 <fdt_setprop+0x7c>  // b.any
    96032c2c:	17ffffde 	b	96032ba4 <fdt_setprop+0x60>

0000000096032c30 <fdt_appendprop>:
{
    96032c30:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96032c34:	910003fd 	mov	x29, sp
    96032c38:	a90153f3 	stp	x19, x20, [sp, #16]
    96032c3c:	2a0403f4 	mov	w20, w4
    96032c40:	a9025bf5 	stp	x21, x22, [sp, #32]
    96032c44:	aa0003f5 	mov	x21, x0
    96032c48:	a90363f7 	stp	x23, x24, [sp, #48]
    96032c4c:	aa0303f6 	mov	x22, x3
    96032c50:	2a0103f7 	mov	w23, w1
    96032c54:	aa0203f8 	mov	x24, x2
	FDT_RW_CHECK_HEADER(fdt);
    96032c58:	97fffed7 	bl	960327b4 <_fdt_rw_check_header>
    96032c5c:	2a0003f3 	mov	w19, w0
    96032c60:	350003a0 	cbnz	w0, 96032cd4 <fdt_appendprop+0xa4>
    96032c64:	910113a3 	add	x3, x29, #0x44
    96032c68:	aa1803e2 	mov	x2, x24
    96032c6c:	2a1703e1 	mov	w1, w23
    96032c70:	aa1503e0 	mov	x0, x21
    96032c74:	97fffcb4 	bl	96031f44 <fdt_get_property>
	prop = fdt_get_property_w(fdt, nodeoffset, name, &oldlen);
    96032c78:	f90027a0 	str	x0, [x29, #72]
	if (prop) {
    96032c7c:	b4000380 	cbz	x0, 96032cec <fdt_appendprop+0xbc>
		newlen = len + oldlen;
    96032c80:	b94047a2 	ldr	w2, [x29, #68]
		err = _fdt_splice_struct(fdt, prop->data,
    96032c84:	91003001 	add	x1, x0, #0xc
    96032c88:	aa1503e0 	mov	x0, x21
		newlen = len + oldlen;
    96032c8c:	0b140057 	add	w23, w2, w20
					 FDT_TAGALIGN(oldlen),
    96032c90:	11000c42 	add	w2, w2, #0x3
					 FDT_TAGALIGN(newlen));
    96032c94:	11000ee3 	add	w3, w23, #0x3
		err = _fdt_splice_struct(fdt, prop->data,
    96032c98:	121e7442 	and	w2, w2, #0xfffffffc
    96032c9c:	121e7463 	and	w3, w3, #0xfffffffc
    96032ca0:	97ffff39 	bl	96032984 <_fdt_splice_struct>
    96032ca4:	2a0003f3 	mov	w19, w0
		if (err)
    96032ca8:	35000160 	cbnz	w0, 96032cd4 <fdt_appendprop+0xa4>
		prop->len = cpu_to_fdt32(newlen);
    96032cac:	f94027a1 	ldr	x1, [x29, #72]
    96032cb0:	2a1703e0 	mov	w0, w23
    96032cb4:	97fffa7d 	bl	960316a8 <fdt32_to_cpu>
    96032cb8:	b9000420 	str	w0, [x1, #4]
		memcpy(prop->data + oldlen, val, len);
    96032cbc:	b98047a3 	ldrsw	x3, [x29, #68]
    96032cc0:	91003020 	add	x0, x1, #0xc
    96032cc4:	93407e82 	sxtw	x2, w20
    96032cc8:	aa1603e1 	mov	x1, x22
    96032ccc:	8b030000 	add	x0, x0, x3
		memcpy(prop->data, val, len);
    96032cd0:	97ffdc95 	bl	96029f24 <memcpy>
}
    96032cd4:	2a1303e0 	mov	w0, w19
    96032cd8:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032cdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032ce0:	a94363f7 	ldp	x23, x24, [sp, #48]
    96032ce4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96032ce8:	d65f03c0 	ret
		err = _fdt_add_property(fdt, nodeoffset, name, len, &prop);
    96032cec:	910123a4 	add	x4, x29, #0x48
    96032cf0:	2a1403e3 	mov	w3, w20
    96032cf4:	aa1803e2 	mov	x2, x24
    96032cf8:	2a1703e1 	mov	w1, w23
    96032cfc:	aa1503e0 	mov	x0, x21
    96032d00:	97ffff3b 	bl	960329ec <_fdt_add_property>
    96032d04:	2a0003f3 	mov	w19, w0
		if (err)
    96032d08:	35fffe60 	cbnz	w0, 96032cd4 <fdt_appendprop+0xa4>
		memcpy(prop->data, val, len);
    96032d0c:	f94027a0 	ldr	x0, [x29, #72]
    96032d10:	93407e82 	sxtw	x2, w20
    96032d14:	aa1603e1 	mov	x1, x22
    96032d18:	91003000 	add	x0, x0, #0xc
    96032d1c:	17ffffed 	b	96032cd0 <fdt_appendprop+0xa0>

0000000096032d20 <fdt_delprop>:
{
    96032d20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96032d24:	910003fd 	mov	x29, sp
    96032d28:	a90153f3 	stp	x19, x20, [sp, #16]
    96032d2c:	aa0003f3 	mov	x19, x0
    96032d30:	f90013f5 	str	x21, [sp, #32]
    96032d34:	2a0103f4 	mov	w20, w1
    96032d38:	aa0203f5 	mov	x21, x2
	FDT_RW_CHECK_HEADER(fdt);
    96032d3c:	97fffe9e 	bl	960327b4 <_fdt_rw_check_header>
    96032d40:	35000120 	cbnz	w0, 96032d64 <fdt_delprop+0x44>
    96032d44:	aa1503e2 	mov	x2, x21
    96032d48:	9100f3a3 	add	x3, x29, #0x3c
    96032d4c:	2a1403e1 	mov	w1, w20
    96032d50:	aa1303e0 	mov	x0, x19
    96032d54:	97fffc7c 	bl	96031f44 <fdt_get_property>
    96032d58:	b9403fa2 	ldr	w2, [x29, #60]
	if (! prop)
    96032d5c:	b50000c0 	cbnz	x0, 96032d74 <fdt_delprop+0x54>
		return len;
    96032d60:	2a0203e0 	mov	w0, w2
}
    96032d64:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032d68:	f94013f5 	ldr	x21, [sp, #32]
    96032d6c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96032d70:	d65f03c0 	ret
	proplen = sizeof(*prop) + FDT_TAGALIGN(len);
    96032d74:	11000c42 	add	w2, w2, #0x3
	return _fdt_splice_struct(fdt, prop, proplen, 0);
    96032d78:	aa0003e1 	mov	x1, x0
	proplen = sizeof(*prop) + FDT_TAGALIGN(len);
    96032d7c:	121e7442 	and	w2, w2, #0xfffffffc
	return _fdt_splice_struct(fdt, prop, proplen, 0);
    96032d80:	52800003 	mov	w3, #0x0                   	// #0
    96032d84:	11003042 	add	w2, w2, #0xc
    96032d88:	aa1303e0 	mov	x0, x19
    96032d8c:	97fffefe 	bl	96032984 <_fdt_splice_struct>
    96032d90:	17fffff5 	b	96032d64 <fdt_delprop+0x44>

0000000096032d94 <fdt_add_subnode_namelen>:
{
    96032d94:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96032d98:	910003fd 	mov	x29, sp
    96032d9c:	a90153f3 	stp	x19, x20, [sp, #16]
    96032da0:	aa0003f4 	mov	x20, x0
    96032da4:	a9025bf5 	stp	x21, x22, [sp, #32]
    96032da8:	2a0103f3 	mov	w19, w1
    96032dac:	a90363f7 	stp	x23, x24, [sp, #48]
    96032db0:	2a0303f5 	mov	w21, w3
    96032db4:	f90023f9 	str	x25, [sp, #64]
    96032db8:	aa0203f8 	mov	x24, x2
	FDT_RW_CHECK_HEADER(fdt);
    96032dbc:	97fffe7e 	bl	960327b4 <_fdt_rw_check_header>
    96032dc0:	350006a0 	cbnz	w0, 96032e94 <fdt_add_subnode_namelen+0x100>
	offset = fdt_subnode_offset_namelen(fdt, parentoffset, name, namelen);
    96032dc4:	2a1503e3 	mov	w3, w21
    96032dc8:	aa1803e2 	mov	x2, x24
    96032dcc:	2a1303e1 	mov	w1, w19
    96032dd0:	aa1403e0 	mov	x0, x20
    96032dd4:	97fffb86 	bl	96031bec <fdt_subnode_offset_namelen>
	if (offset >= 0)
    96032dd8:	36f806a0 	tbz	w0, #31, 96032eac <fdt_add_subnode_namelen+0x118>
	else if (offset != -FDT_ERR_NOTFOUND)
    96032ddc:	3100041f 	cmn	w0, #0x1
    96032de0:	540005a1 	b.ne	96032e94 <fdt_add_subnode_namelen+0x100>  // b.any
	fdt_next_tag(fdt, parentoffset, &nextoffset); /* skip the BEGIN_NODE */
    96032de4:	910173a2 	add	x2, x29, #0x5c
    96032de8:	2a1303e1 	mov	w1, w19
    96032dec:	aa1403e0 	mov	x0, x20
    96032df0:	97fffa6b 	bl	9603179c <fdt_next_tag>
		offset = nextoffset;
    96032df4:	b9405fb7 	ldr	w23, [x29, #92]
		tag = fdt_next_tag(fdt, offset, &nextoffset);
    96032df8:	910173a2 	add	x2, x29, #0x5c
    96032dfc:	aa1403e0 	mov	x0, x20
    96032e00:	2a1703e1 	mov	w1, w23
    96032e04:	97fffa66 	bl	9603179c <fdt_next_tag>
	} while ((tag == FDT_PROP) || (tag == FDT_NOP));
    96032e08:	51000c00 	sub	w0, w0, #0x3
    96032e0c:	7100041f 	cmp	w0, #0x1
    96032e10:	54ffff29 	b.ls	96032df4 <fdt_add_subnode_namelen+0x60>  // b.plast
    96032e14:	b9400a80 	ldr	w0, [x20, #8]
    96032e18:	93407ef6 	sxtw	x22, w23
	nodelen = sizeof(*nh) + FDT_TAGALIGN(namelen+1) + FDT_TAGSIZE;
    96032e1c:	110012b3 	add	w19, w21, #0x4
    96032e20:	121e7673 	and	w19, w19, #0xfffffffc
    96032e24:	11002273 	add	w19, w19, #0x8
    96032e28:	97fffa20 	bl	960316a8 <fdt32_to_cpu>
    96032e2c:	8b2042d6 	add	x22, x22, w0, uxtw
    96032e30:	8b160299 	add	x25, x20, x22
	err = _fdt_splice_struct(fdt, nh, 0, nodelen);
    96032e34:	2a1303e3 	mov	w3, w19
    96032e38:	52800002 	mov	w2, #0x0                   	// #0
    96032e3c:	aa1903e1 	mov	x1, x25
    96032e40:	aa1403e0 	mov	x0, x20
    96032e44:	97fffed0 	bl	96032984 <_fdt_splice_struct>
	if (err)
    96032e48:	35000260 	cbnz	w0, 96032e94 <fdt_add_subnode_namelen+0x100>
	memset(nh->name, 0, FDT_TAGALIGN(namelen+1));
    96032e4c:	110006a2 	add	w2, w21, #0x1
	nh->tag = cpu_to_fdt32(FDT_BEGIN_NODE);
    96032e50:	52a02000 	mov	w0, #0x1000000             	// #16777216
    96032e54:	b8366a80 	str	w0, [x20, x22]
	memset(nh->name, 0, FDT_TAGALIGN(namelen+1));
    96032e58:	91001334 	add	x20, x25, #0x4
    96032e5c:	93407c42 	sxtw	x2, w2
    96032e60:	52800001 	mov	w1, #0x0                   	// #0
    96032e64:	91000c42 	add	x2, x2, #0x3
    96032e68:	aa1403e0 	mov	x0, x20
    96032e6c:	927ef442 	and	x2, x2, #0xfffffffffffffffc
	*endtag = cpu_to_fdt32(FDT_END_NODE);
    96032e70:	8b33c333 	add	x19, x25, w19, sxtw
	memset(nh->name, 0, FDT_TAGALIGN(namelen+1));
    96032e74:	97ffdbed 	bl	96029e28 <memset>
	memcpy(nh->name, name, namelen);
    96032e78:	93407ea2 	sxtw	x2, w21
    96032e7c:	aa1803e1 	mov	x1, x24
    96032e80:	aa1403e0 	mov	x0, x20
    96032e84:	97ffdc28 	bl	96029f24 <memcpy>
	*endtag = cpu_to_fdt32(FDT_END_NODE);
    96032e88:	52a04000 	mov	w0, #0x2000000             	// #33554432
    96032e8c:	b81fc260 	stur	w0, [x19, #-4]
		offset = nextoffset;
    96032e90:	2a1703e0 	mov	w0, w23
}
    96032e94:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032e98:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032e9c:	a94363f7 	ldp	x23, x24, [sp, #48]
    96032ea0:	f94023f9 	ldr	x25, [sp, #64]
    96032ea4:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96032ea8:	d65f03c0 	ret
		return -FDT_ERR_EXISTS;
    96032eac:	12800020 	mov	w0, #0xfffffffe            	// #-2
    96032eb0:	17fffff9 	b	96032e94 <fdt_add_subnode_namelen+0x100>

0000000096032eb4 <fdt_add_subnode>:
{
    96032eb4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96032eb8:	910003fd 	mov	x29, sp
    96032ebc:	a90153f3 	stp	x19, x20, [sp, #16]
    96032ec0:	aa0003f4 	mov	x20, x0
    96032ec4:	f90013f5 	str	x21, [sp, #32]
    96032ec8:	aa0203f3 	mov	x19, x2
    96032ecc:	2a0103f5 	mov	w21, w1
	return fdt_add_subnode_namelen(fdt, parentoffset, name, strlen(name));
    96032ed0:	aa0203e0 	mov	x0, x2
    96032ed4:	97ffdd0e 	bl	9602a30c <strlen>
    96032ed8:	2a0003e3 	mov	w3, w0
    96032edc:	aa1303e2 	mov	x2, x19
    96032ee0:	2a1503e1 	mov	w1, w21
    96032ee4:	aa1403e0 	mov	x0, x20
}
    96032ee8:	f94013f5 	ldr	x21, [sp, #32]
    96032eec:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032ef0:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return fdt_add_subnode_namelen(fdt, parentoffset, name, strlen(name));
    96032ef4:	17ffffa8 	b	96032d94 <fdt_add_subnode_namelen>

0000000096032ef8 <fdt_open_into>:

int fdt_open_into(const void *fdt, void *buf, int bufsize)
{
    96032ef8:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96032efc:	910003fd 	mov	x29, sp
    96032f00:	a90153f3 	stp	x19, x20, [sp, #16]
    96032f04:	aa0003f4 	mov	x20, x0
	int err;
	int mem_rsv_size, struct_size;
	int newsize;
	const char *fdtstart = fdt;
	const char *fdtend = fdtstart + fdt_totalsize(fdt);
    96032f08:	b9400400 	ldr	w0, [x0, #4]
{
    96032f0c:	aa0103f3 	mov	x19, x1
    96032f10:	a9025bf5 	stp	x21, x22, [sp, #32]
    96032f14:	a90363f7 	stp	x23, x24, [sp, #48]
    96032f18:	2a0203f8 	mov	w24, w2
    96032f1c:	f90023f9 	str	x25, [sp, #64]
	const char *fdtend = fdtstart + fdt_totalsize(fdt);
    96032f20:	97fff9e2 	bl	960316a8 <fdt32_to_cpu>
    96032f24:	2a0003f6 	mov	w22, w0
	char *tmp;

	FDT_CHECK_HEADER(fdt);
    96032f28:	aa1403e0 	mov	x0, x20
    96032f2c:	97fff9e3 	bl	960316b8 <fdt_check_header>
    96032f30:	2a0003f7 	mov	w23, w0
    96032f34:	35000400 	cbnz	w0, 96032fb4 <fdt_open_into+0xbc>

	mem_rsv_size = (fdt_num_mem_rsv(fdt)+1)
    96032f38:	aa1403e0 	mov	x0, x20
    96032f3c:	97fffb1b 	bl	96031ba8 <fdt_num_mem_rsv>
    96032f40:	11000400 	add	w0, w0, #0x1
    96032f44:	531c6c19 	lsl	w25, w0, #4
		* sizeof(struct fdt_reserve_entry);

	if (fdt_version(fdt) >= 17) {
    96032f48:	b9401680 	ldr	w0, [x20, #20]
    96032f4c:	97fff9d7 	bl	960316a8 <fdt32_to_cpu>
    96032f50:	7100401f 	cmp	w0, #0x10
    96032f54:	540003e9 	b.ls	96032fd0 <fdt_open_into+0xd8>  // b.plast
		struct_size = fdt_size_dt_struct(fdt);
    96032f58:	b9402680 	ldr	w0, [x20, #36]
    96032f5c:	97fff9d3 	bl	960316a8 <fdt32_to_cpu>
    96032f60:	b9005fa0 	str	w0, [x29, #92]
			;
		if (struct_size < 0)
			return struct_size;
	}

	if (!_fdt_blocks_misordered(fdt, mem_rsv_size, struct_size)) {
    96032f64:	b9405fa6 	ldr	w6, [x29, #92]
    96032f68:	2a1903e1 	mov	w1, w25
    96032f6c:	aa1403e0 	mov	x0, x20
    96032f70:	2a0603e2 	mov	w2, w6
    96032f74:	97fffdf0 	bl	96032734 <_fdt_blocks_misordered>
    96032f78:	35000440 	cbnz	w0, 96033000 <fdt_open_into+0x108>
		/* no further work necessary */
		err = fdt_move(fdt, buf, bufsize);
    96032f7c:	2a1803e2 	mov	w2, w24
    96032f80:	aa1303e1 	mov	x1, x19
    96032f84:	aa1403e0 	mov	x0, x20
    96032f88:	97fffac8 	bl	96031aa8 <fdt_move>
    96032f8c:	2a0003f7 	mov	w23, w0
		if (err)
    96032f90:	35000120 	cbnz	w0, 96032fb4 <fdt_open_into+0xbc>
__fdt_set_hdr(version);
    96032f94:	52a22000 	mov	w0, #0x11000000            	// #285212672
    96032f98:	b9001660 	str	w0, [x19, #20]
__fdt_set_hdr(size_dt_struct);
    96032f9c:	b9405fa0 	ldr	w0, [x29, #92]
    96032fa0:	97fff9c2 	bl	960316a8 <fdt32_to_cpu>
    96032fa4:	b9002660 	str	w0, [x19, #36]
__fdt_set_hdr(totalsize);
    96032fa8:	2a1803e0 	mov	w0, w24
    96032fac:	97fff9bf 	bl	960316a8 <fdt32_to_cpu>
    96032fb0:	b9000660 	str	w0, [x19, #4]
	fdt_set_version(buf, 17);
	fdt_set_last_comp_version(buf, 16);
	fdt_set_boot_cpuid_phys(buf, fdt_boot_cpuid_phys(fdt));

	return 0;
}
    96032fb4:	2a1703e0 	mov	w0, w23
    96032fb8:	f94023f9 	ldr	x25, [sp, #64]
    96032fbc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96032fc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96032fc4:	a94363f7 	ldp	x23, x24, [sp, #48]
    96032fc8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96032fcc:	d65f03c0 	ret
		struct_size = 0;
    96032fd0:	910183b5 	add	x21, x29, #0x60
    96032fd4:	b81fcebf 	str	wzr, [x21, #-4]!
		while (fdt_next_tag(fdt, struct_size, &struct_size) != FDT_END)
    96032fd8:	b9405fa1 	ldr	w1, [x29, #92]
    96032fdc:	aa1503e2 	mov	x2, x21
    96032fe0:	aa1403e0 	mov	x0, x20
    96032fe4:	97fff9ee 	bl	9603179c <fdt_next_tag>
    96032fe8:	7100241f 	cmp	w0, #0x9
    96032fec:	54ffff61 	b.ne	96032fd8 <fdt_open_into+0xe0>  // b.any
		if (struct_size < 0)
    96032ff0:	b9405fa0 	ldr	w0, [x29, #92]
    96032ff4:	36fffb80 	tbz	w0, #31, 96032f64 <fdt_open_into+0x6c>
    96032ff8:	2a0003f7 	mov	w23, w0
    96032ffc:	17ffffee 	b	96032fb4 <fdt_open_into+0xbc>
		+ struct_size + fdt_size_dt_strings(fdt);
    96033000:	b9402280 	ldr	w0, [x20, #32]
    96033004:	97fff9a9 	bl	960316a8 <fdt32_to_cpu>
    96033008:	1100a0d5 	add	w21, w6, #0x28
    9603300c:	0b000320 	add	w0, w25, w0
    96033010:	0b0002b5 	add	w21, w21, w0
	if (bufsize < newsize)
    96033014:	6b1802bf 	cmp	w21, w24
    96033018:	5400018c 	b.gt	96033048 <fdt_open_into+0x150>
	if (((tmp + newsize) > fdtstart) && (tmp < fdtend)) {
    9603301c:	93407eb5 	sxtw	x21, w21
    96033020:	8b150260 	add	x0, x19, x21
    96033024:	eb00029f 	cmp	x20, x0
    96033028:	54000142 	b.cs	96033050 <fdt_open_into+0x158>  // b.hs, b.nlast
	const char *fdtend = fdtstart + fdt_totalsize(fdt);
    9603302c:	8b364296 	add	x22, x20, w22, uxtw
	if (((tmp + newsize) > fdtstart) && (tmp < fdtend)) {
    96033030:	eb1302df 	cmp	x22, x19
    96033034:	540000e9 	b.ls	96033050 <fdt_open_into+0x158>  // b.plast
		if ((tmp + newsize) > ((char *)buf + bufsize))
    96033038:	8b1502c0 	add	x0, x22, x21
    9603303c:	8b38c261 	add	x1, x19, w24, sxtw
    96033040:	eb01001f 	cmp	x0, x1
    96033044:	54000089 	b.ls	96033054 <fdt_open_into+0x15c>  // b.plast
		return -FDT_ERR_NOSPACE;
    96033048:	12800057 	mov	w23, #0xfffffffd            	// #-3
    9603304c:	17ffffda 	b	96032fb4 <fdt_open_into+0xbc>
    96033050:	aa1303f6 	mov	x22, x19
	_fdt_packblocks(fdt, tmp, mem_rsv_size, struct_size);
    96033054:	2a0603e3 	mov	w3, w6
    96033058:	2a1903e2 	mov	w2, w25
    9603305c:	aa1603e1 	mov	x1, x22
    96033060:	aa1403e0 	mov	x0, x20
    96033064:	97fffdf1 	bl	96032828 <_fdt_packblocks>
	memmove(buf, tmp, newsize);
    96033068:	aa1503e2 	mov	x2, x21
    9603306c:	aa1603e1 	mov	x1, x22
    96033070:	aa1303e0 	mov	x0, x19
    96033074:	97ffdc2b 	bl	9602a120 <memmove>
__fdt_set_hdr(magic);
    96033078:	5281ba00 	mov	w0, #0xdd0                 	// #3536
    9603307c:	72bdbfc0 	movk	w0, #0xedfe, lsl #16
    96033080:	b9000260 	str	w0, [x19]
__fdt_set_hdr(totalsize);
    96033084:	2a1803e0 	mov	w0, w24
    96033088:	97fff988 	bl	960316a8 <fdt32_to_cpu>
    9603308c:	b9000660 	str	w0, [x19, #4]
__fdt_set_hdr(version);
    96033090:	d2a22000 	mov	x0, #0x11000000            	// #285212672
    96033094:	f2e20000 	movk	x0, #0x1000, lsl #48
    96033098:	f8014260 	stur	x0, [x19, #20]
	fdt_set_boot_cpuid_phys(buf, fdt_boot_cpuid_phys(fdt));
    9603309c:	b9401e80 	ldr	w0, [x20, #28]
    960330a0:	97fff982 	bl	960316a8 <fdt32_to_cpu>
__fdt_set_hdr(boot_cpuid_phys);
    960330a4:	97fff981 	bl	960316a8 <fdt32_to_cpu>
    960330a8:	b9001e60 	str	w0, [x19, #28]
    960330ac:	17ffffc2 	b	96032fb4 <fdt_open_into+0xbc>

00000000960330b0 <fdt_strerror>:
};
#define FDT_ERRTABSIZE	(sizeof(fdt_errtable) / sizeof(fdt_errtable[0]))

const char *fdt_strerror(int errval)
{
	if (errval > 0)
    960330b0:	7100001f 	cmp	w0, #0x0
    960330b4:	5400018c 	b.gt	960330e4 <fdt_strerror+0x34>
		return "<valid offset/length>";
	else if (errval == 0)
    960330b8:	540001c0 	b.eq	960330f0 <fdt_strerror+0x40>  // b.none
		return "<no error>";
	else if (errval > (int)(-FDT_ERRTABSIZE)) {
    960330bc:	3100301f 	cmn	w0, #0xc
    960330c0:	540000cb 	b.lt	960330d8 <fdt_strerror+0x28>  // b.tstop
		const char *s = fdt_errtable[-errval].str;
    960330c4:	4b0003e0 	neg	w0, w0
    960330c8:	f0000081 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    960330cc:	9124a021 	add	x1, x1, #0x928
    960330d0:	f860d820 	ldr	x0, [x1, w0, sxtw #3]

		if (s)
    960330d4:	b50000c0 	cbnz	x0, 960330ec <fdt_strerror+0x3c>
			return s;
	}

	return "<unknown error>";
    960330d8:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960330dc:	9126c400 	add	x0, x0, #0x9b1
    960330e0:	14000003 	b	960330ec <fdt_strerror+0x3c>
		return "<valid offset/length>";
    960330e4:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960330e8:	91264000 	add	x0, x0, #0x990
}
    960330ec:	d65f03c0 	ret
		return "<no error>";
    960330f0:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960330f4:	91269800 	add	x0, x0, #0x9a6
    960330f8:	17fffffd 	b	960330ec <fdt_strerror+0x3c>

00000000960330fc <tegrabl_odmdata_get>:
	return (uint32_t)temp1 - sizeof(NvBctAuxInternalData) +
					 offsetof(NvBctAuxInternalData, CustomerOption);
}

uint32_t tegrabl_odmdata_get(void)
{
    960330fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96033100:	910003fd 	mov	x29, sp
	NvBootConfigTable *pbct;

	pbct = (NvBootConfigTable *)tegrabl_brbct_get();
    96033104:	97ffb788 	bl	96020f24 <tegrabl_brbct_get>
    96033108:	f0000201 	adrp	x1, 96076000 <free_dram_block+0x38e8>
	if (pbct == NULL) {
    9603310c:	b4000060 	cbz	x0, 96033118 <tegrabl_odmdata_get+0x1c>
		pr_trace("brbct is not initialised!!, odmdata will be 0\n");
	} else {
		odmdata = NV_READ32((uintptr_t)&(pbct->CustomerData) + odmdata_get_offset());
    96033110:	b9467800 	ldr	w0, [x0, #1656]
    96033114:	b90c3020 	str	w0, [x1, #3120]
	}
	return odmdata;
}
    96033118:	b94c3020 	ldr	w0, [x1, #3120]
    9603311c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96033120:	d65f03c0 	ret

0000000096033124 <tegrabl_odmdata_params_get>:
	struct odmdata_params **podmdata_list,
	uint32_t *odmdata_array_size)
{
	tegrabl_error_t err = TEGRABL_NO_ERROR;

	if ((odmdata_array_size == NULL) || (podmdata_list == NULL)) {
    96033124:	f100003f 	cmp	x1, #0x0
    96033128:	fa401804 	ccmp	x0, #0x0, #0x4, ne  // ne = any
    9603312c:	54000181 	b.ne	9603315c <tegrabl_odmdata_params_get+0x38>  // b.any
{
    96033130:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
		pr_error("Error: %d, Invalid args in 'tegrabl_odmdata_list_get'\n", err);
    96033134:	52800041 	mov	w1, #0x2                   	// #2
    96033138:	72ae6e61 	movk	w1, #0x7373, lsl #16
    9603313c:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
{
    96033140:	910003fd 	mov	x29, sp
		pr_error("Error: %d, Invalid args in 'tegrabl_odmdata_list_get'\n", err);
    96033144:	912a0400 	add	x0, x0, #0xa81
    96033148:	97ffbd4a 	bl	96022670 <tegrabl_printf>
		return err;
    9603314c:	52800040 	mov	w0, #0x2                   	// #2
    96033150:	72ae6e60 	movk	w0, #0x7373, lsl #16

	*podmdata_list = odmdata_array;
	*odmdata_array_size = ARRAY_SIZE(odmdata_array);

	return err;
}
    96033154:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96033158:	d65f03c0 	ret
	*podmdata_list = odmdata_array;
    9603315c:	900000c2 	adrp	x2, 9604b000 <partition_names.3562+0x190>
    96033160:	910e8042 	add	x2, x2, #0x3a0
    96033164:	f9000002 	str	x2, [x0]
	*odmdata_array_size = ARRAY_SIZE(odmdata_array);
    96033168:	52800380 	mov	w0, #0x1c                  	// #28
    9603316c:	b9000020 	str	w0, [x1]
	return err;
    96033170:	52800000 	mov	w0, #0x0                   	// #0
}
    96033174:	d65f03c0 	ret

0000000096033178 <tegrabl_odmdata_get_config_by_name>:
	locked = tegrabl_odmdata_get_config_by_name("bootloader_locked");
	return !locked;
}

bool tegrabl_odmdata_get_config_by_name(const char *name)
{
    96033178:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    9603317c:	910003fd 	mov	x29, sp
    96033180:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t result;
	uint32_t odm_data, i;

	for (i = 0; i < ARRAY_SIZE(odmdata_array); i++) {
		if (strcmp(name, odmdata_array[i].name) == 0) {
    96033184:	900000d4 	adrp	x20, 9604b000 <partition_names.3562+0x190>
{
    96033188:	a9025bf5 	stp	x21, x22, [sp, #32]
		if (strcmp(name, odmdata_array[i].name) == 0) {
    9603318c:	910e8294 	add	x20, x20, #0x3a0
{
    96033190:	aa0003f6 	mov	x22, x0
    96033194:	d2800013 	mov	x19, #0x0                   	// #0
		if (strcmp(name, odmdata_array[i].name) == 0) {
    96033198:	8b131280 	add	x0, x20, x19, lsl #4
    9603319c:	2a1303f5 	mov	w21, w19
    960331a0:	f9400401 	ldr	x1, [x0, #8]
    960331a4:	aa1603e0 	mov	x0, x22
    960331a8:	97ffdc29 	bl	9602a24c <strcmp>
    960331ac:	350001a0 	cbnz	w0, 960331e0 <tegrabl_odmdata_get_config_by_name+0x68>
			odm_data = tegrabl_odmdata_get();
    960331b0:	97ffffd3 	bl	960330fc <tegrabl_odmdata_get>
			result = odm_data & odmdata_array[i].mask;
    960331b4:	d37c7ea1 	ubfiz	x1, x21, #4, #32
    960331b8:	8b010282 	add	x2, x20, x1
    960331bc:	b8616a81 	ldr	w1, [x20, x1]
    960331c0:	0a010000 	and	w0, w0, w1
			result ^= odmdata_array[i].val;
			return (result != 0U) ? false : true;
    960331c4:	b9400441 	ldr	w1, [x2, #4]
    960331c8:	6b01001f 	cmp	w0, w1
    960331cc:	1a9f17e0 	cset	w0, eq  // eq = none
		}
	}

	return false;
}
    960331d0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960331d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960331d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    960331dc:	d65f03c0 	ret
    960331e0:	91000673 	add	x19, x19, #0x1
	for (i = 0; i < ARRAY_SIZE(odmdata_array); i++) {
    960331e4:	f100727f 	cmp	x19, #0x1c
    960331e8:	54fffd81 	b.ne	96033198 <tegrabl_odmdata_get_config_by_name+0x20>  // b.any
	return false;
    960331ec:	52800000 	mov	w0, #0x0                   	// #0
    960331f0:	17fffff8 	b	960331d0 <tegrabl_odmdata_get_config_by_name+0x58>

00000000960331f4 <tegrabl_add_plugin_manager_ids>:
done:
	return status;
}

tegrabl_error_t tegrabl_add_plugin_manager_ids(void *fdt, int nodeoffset)
{
    960331f4:	d12dc3ff 	sub	sp, sp, #0xb70
	struct board_id_info id_info;
	tegrabl_error_t err;

	TEGRABL_ASSERT(fdt);

	pm_node = tegrabl_add_subnode_if_absent(fdt, nodeoffset, "plugin-manager");
    960331f8:	900000a2 	adrp	x2, 96047000 <__func__.3913+0x316>
    960331fc:	9107a842 	add	x2, x2, #0x1ea
{
    96033200:	a9007bfd 	stp	x29, x30, [sp]
    96033204:	910003fd 	mov	x29, sp
    96033208:	a90153f3 	stp	x19, x20, [sp, #16]
    9603320c:	aa0003f3 	mov	x19, x0
    96033210:	a9025bf5 	stp	x21, x22, [sp, #32]
    96033214:	a90363f7 	stp	x23, x24, [sp, #48]
    96033218:	a9046bf9 	stp	x25, x26, [sp, #64]
    9603321c:	a90573fb 	stp	x27, x28, [sp, #80]
	pm_node = tegrabl_add_subnode_if_absent(fdt, nodeoffset, "plugin-manager");
    96033220:	97fff893 	bl	9603146c <tegrabl_add_subnode_if_absent>
	if (pm_node < 0) {
    96033224:	36f800e0 	tbz	w0, #31, 96033240 <tegrabl_add_plugin_manager_ids+0x4c>
		pr_error("Could not add /chosen/plugin-manager node\n");
		return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96033228:	52800454 	mov	w20, #0x22                  	// #34
		pr_error("Could not add /chosen/plugin-manager node\n");
    9603322c:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033230:	91340400 	add	x0, x0, #0xd01
    96033234:	97ffbd0f 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 5);
    96033238:	72acacb4 	movk	w20, #0x6565, lsl #16
    9603323c:	14000033 	b	96033308 <tegrabl_add_plugin_manager_ids+0x114>
	}

	id_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "ids");
    96033240:	900000b4 	adrp	x20, 96047000 <__func__.3913+0x316>
    96033244:	910d9a95 	add	x21, x20, #0x366
    96033248:	2a0003e1 	mov	w1, w0
    9603324c:	2a0003f6 	mov	w22, w0
    96033250:	aa1503e2 	mov	x2, x21
    96033254:	aa1303e0 	mov	x0, x19
    96033258:	97fff885 	bl	9603146c <tegrabl_add_subnode_if_absent>
    9603325c:	f9003fb4 	str	x20, [x29, #120]
	if (id_node < 0) {
    96033260:	36f800c0 	tbz	w0, #31, 96033278 <tegrabl_add_plugin_manager_ids+0x84>
		pr_error("Could not add /chosen/plugin-manager/ids subnode\n");
    96033264:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033268:	9134bc00 	add	x0, x0, #0xd2f
		pr_error("Error: Failed to add id to PM\n");
    9603326c:	97ffbd01 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 1);
    96033270:	52802454 	mov	w20, #0x122                 	// #290
    96033274:	17fffff1 	b	96033238 <tegrabl_add_plugin_manager_ids+0x44>
		return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 1);
	}

	con_node = tegrabl_add_subnode_if_absent(fdt, id_node, "connection");
    96033278:	f0000094 	adrp	x20, 96046000 <lenfix.3236+0xf0>
    9603327c:	2a0003e1 	mov	w1, w0
    96033280:	91359282 	add	x2, x20, #0xd64
    96033284:	aa1303e0 	mov	x0, x19
    96033288:	97fff879 	bl	9603146c <tegrabl_add_subnode_if_absent>
    9603328c:	f9003bb4 	str	x20, [x29, #112]
	if (con_node < 0) {
    96033290:	36f800c0 	tbz	w0, #31, 960332a8 <tegrabl_add_plugin_manager_ids+0xb4>
		pr_error("Could not add /chosen/plugin-manager/ids/conneection\n");
    96033294:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033298:	9135bc00 	add	x0, x0, #0xd6f
		pr_error("Error: Failed to add id with rev to PM\n");
    9603329c:	97ffbcf5 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 2);
    960332a0:	52804454 	mov	w20, #0x222                 	// #546
    960332a4:	17ffffe5 	b	96033238 <tegrabl_add_plugin_manager_ids+0x44>
		return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 2);
	}

	config_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "configs");
    960332a8:	900000ba 	adrp	x26, 96047000 <__func__.3913+0x316>
    960332ac:	2a1603e1 	mov	w1, w22
    960332b0:	910bbb42 	add	x2, x26, #0x2ee
    960332b4:	aa1303e0 	mov	x0, x19
    960332b8:	97fff86d 	bl	9603146c <tegrabl_add_subnode_if_absent>
	if (config_node < 0) {
    960332bc:	36f800c0 	tbz	w0, #31, 960332d4 <tegrabl_add_plugin_manager_ids+0xe0>
		pr_error("Could not add /chosen/plugin-manager/config subnode\n");
    960332c0:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960332c4:	9136a000 	add	x0, x0, #0xda8
		pr_error("Error: Failed to add id with configs to PM\n");
    960332c8:	97ffbcea 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 3);
    960332cc:	52806454 	mov	w20, #0x322                 	// #802
    960332d0:	17ffffda 	b	96033238 <tegrabl_add_plugin_manager_ids+0x44>
		return TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 3);
	}

	/* Init buffer before retrieving ids */
	id_info.version = BOARD_ID_INFO_VERSION_1;
    960332d4:	52802000 	mov	w0, #0x100                 	// #256
    960332d8:	b901c3a0 	str	w0, [x29, #448]
	id_info.count = 0;

	err = tegrabl_get_board_ids((void *)&id_info);
    960332dc:	910703a0 	add	x0, x29, #0x1c0
    960332e0:	97ffe9ef 	bl	9602da9c <tegrabl_get_board_ids>
    960332e4:	2a0003f4 	mov	w20, w0
	if (err != TEGRABL_NO_ERROR) {
    960332e8:	340002c0 	cbz	w0, 96033340 <tegrabl_add_plugin_manager_ids+0x14c>
		if (TEGRABL_ERROR_REASON(err) == TEGRABL_ERR_NOT_SUPPORTED) {
    960332ec:	12001c00 	and	w0, w0, #0xff
    960332f0:	7100041f 	cmp	w0, #0x1
    960332f4:	540001c1 	b.ne	9603332c <tegrabl_add_plugin_manager_ids+0x138>  // b.any
			pr_warn("Board id is not supported, booting without board id\n");
			return TEGRABL_NO_ERROR;
    960332f8:	52800014 	mov	w20, #0x0                   	// #0
			pr_warn("Board id is not supported, booting without board id\n");
    960332fc:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033300:	91378000 	add	x0, x0, #0xde0
    96033304:	97ffbcdb 	bl	96022670 <tegrabl_printf>
		pr_error("Error: Failed to get board ids (err: %d)\n", err);
		return err;
	}

	return add_id_info_to_dt(fdt, pm_node, &id_info);
}
    96033308:	2a1403e0 	mov	w0, w20
    9603330c:	a9407bfd 	ldp	x29, x30, [sp]
    96033310:	a94153f3 	ldp	x19, x20, [sp, #16]
    96033314:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96033318:	a94363f7 	ldp	x23, x24, [sp, #48]
    9603331c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96033320:	a94573fb 	ldp	x27, x28, [sp, #80]
    96033324:	912dc3ff 	add	sp, sp, #0xb70
    96033328:	d65f03c0 	ret
		pr_error("Error: Failed to get board ids (err: %d)\n", err);
    9603332c:	2a1403e1 	mov	w1, w20
    96033330:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033334:	91386000 	add	x0, x0, #0xe18
    96033338:	97ffbcce 	bl	96022670 <tegrabl_printf>
		return err;
    9603333c:	17fffff3 	b	96033308 <tegrabl_add_plugin_manager_ids+0x114>
	id_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "ids");
    96033340:	aa1503e2 	mov	x2, x21
    96033344:	2a1603e1 	mov	w1, w22
    96033348:	aa1303e0 	mov	x0, x19
    9603334c:	97fff848 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96033350:	2a0003fb 	mov	w27, w0
	if (id_node < 0) {
    96033354:	37f802c0 	tbnz	w0, #31, 960333ac <tegrabl_add_plugin_manager_ids+0x1b8>
    96033358:	910a57b7 	add	x23, x29, #0x295
    9603335c:	910363b5 	add	x21, x29, #0xd8
			node_name[name_len] = loc_name[j];
    96033360:	910503b8 	add	x24, x29, #0x140
	for (i = 0; i < id_info->count; ++i) {
    96033364:	5280001c 	mov	w28, #0x0                   	// #0
    96033368:	794387a0 	ldrh	w0, [x29, #450]
    9603336c:	6b00039f 	cmp	w28, w0
    96033370:	540002a3 	b.cc	960333c4 <tegrabl_add_plugin_manager_ids+0x1d0>  // b.lo, b.ul, b.last
	id_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "ids");
    96033374:	f9403fa0 	ldr	x0, [x29, #120]
    96033378:	2a1603e1 	mov	w1, w22
	int eeprom_node = 0;
    9603337c:	b90097bf 	str	wzr, [x29, #148]
	id_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "ids");
    96033380:	910d9802 	add	x2, x0, #0x366
    96033384:	aa1303e0 	mov	x0, x19
    96033388:	97fff839 	bl	9603146c <tegrabl_add_subnode_if_absent>
    9603338c:	2a0003f8 	mov	w24, w0
	if (id_node < 0) {
    96033390:	36f80dc0 	tbz	w0, #31, 96033548 <tegrabl_add_plugin_manager_ids+0x354>
		pr_error("Could not found id and config node\n");
    96033394:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033398:	91391400 	add	x0, x0, #0xe45
    9603339c:	97ffbcb5 	bl	96022670 <tegrabl_printf>
		pr_error("Error: Failed to add id with rev to PM\n");
    960333a0:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960333a4:	913f0800 	add	x0, x0, #0xfc2
    960333a8:	17ffffbd 	b	9603329c <tegrabl_add_plugin_manager_ids+0xa8>
		pr_error("Could not found id and config node\n");
    960333ac:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960333b0:	91391400 	add	x0, x0, #0xe45
			pr_error("Can't add /chosen/plugin-manager/ids/conneection\n");
    960333b4:	97ffbcaf 	bl	96022670 <tegrabl_printf>
		pr_error("Error: Failed to add id to PM\n");
    960333b8:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960333bc:	913c4400 	add	x0, x0, #0xf11
    960333c0:	17ffffab 	b	9603326c <tegrabl_add_plugin_manager_ids+0x78>
		memset(prop_name, 0, MAX_BOARD_PART_NO_LEN);
    960333c4:	d2800802 	mov	x2, #0x40                  	// #64
    960333c8:	52800001 	mov	w1, #0x0                   	// #0
    960333cc:	910263a0 	add	x0, x29, #0x98
    960333d0:	97ffda96 	bl	96029e28 <memset>
		if (id_info->part[i].customer_part_id) {
    960333d4:	3852f2e0 	ldurb	w0, [x23, #-209]
    960333d8:	d10302f9 	sub	x25, x23, #0xc0
    960333dc:	340004c0 	cbz	w0, 96033474 <tegrabl_add_plugin_manager_ids+0x280>
			memcpy(prop_name, id_info->part[i].part_no,
    960333e0:	aa1903e0 	mov	x0, x25
    960333e4:	97ffdbca 	bl	9602a30c <strlen>
    960333e8:	aa1903e1 	mov	x1, x25
    960333ec:	aa0003e2 	mov	x2, x0
    960333f0:	910263a0 	add	x0, x29, #0x98
    960333f4:	97ffdacc 	bl	96029f24 <memcpy>
		loc_len = strlen((char *)id_info->part[i].location);
    960333f8:	aa1703e0 	mov	x0, x23
    960333fc:	97ffdbc4 	bl	9602a30c <strlen>
    96033400:	2a0003f9 	mov	w25, w0
		if (loc_len > 0) {
    96033404:	7100001f 	cmp	w0, #0x0
    96033408:	5400042d 	b.le	9603348c <tegrabl_add_plugin_manager_ids+0x298>
			memcpy(loc_name, id_info->part[i].location, loc_len);
    9603340c:	93407c02 	sxtw	x2, w0
    96033410:	aa1703e1 	mov	x1, x23
    96033414:	aa1503e0 	mov	x0, x21
    96033418:	97ffdac3 	bl	96029f24 <memcpy>
		pr_info("Adding plugin-manager/ids/%s=%s\n", prop_name, loc_name);
    9603341c:	aa1503e2 	mov	x2, x21
    96033420:	910263a1 	add	x1, x29, #0x98
		loc_name[loc_len] = '\0';
    96033424:	3839cabf 	strb	wzr, [x21, w25, sxtw]
		pr_info("Adding plugin-manager/ids/%s=%s\n", prop_name, loc_name);
    96033428:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    9603342c:	9139b000 	add	x0, x0, #0xe6c
    96033430:	97ffbc90 	bl	96022670 <tegrabl_printf>
		err = fdt_setprop_string(fdt, id_node, prop_name, loc_name);
    96033434:	aa1503e0 	mov	x0, x21
    96033438:	97ffdbb5 	bl	9602a30c <strlen>
    9603343c:	aa1503e3 	mov	x3, x21
    96033440:	11000404 	add	w4, w0, #0x1
    96033444:	910263a2 	add	x2, x29, #0x98
    96033448:	2a1b03e1 	mov	w1, w27
    9603344c:	aa1303e0 	mov	x0, x19
    96033450:	97fffdbd 	bl	96032b44 <fdt_setprop>
		if (err < 0) {
    96033454:	36f802a0 	tbz	w0, #31, 960334a8 <tegrabl_add_plugin_manager_ids+0x2b4>
			pr_error("Can't set /chosen/plugin-manager/ids/%s (%s)\n",
    96033458:	97ffff16 	bl	960330b0 <fdt_strerror>
    9603345c:	aa0003e2 	mov	x2, x0
    96033460:	910263a1 	add	x1, x29, #0x98
    96033464:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033468:	913a4000 	add	x0, x0, #0xe90
    9603346c:	97ffbc81 	bl	96022670 <tegrabl_printf>
    96033470:	17ffffd2 	b	960333b8 <tegrabl_add_plugin_manager_ids+0x1c4>
			memcpy(prop_name, id_info->part[i].part_no, len - 1);
    96033474:	d28001a2 	mov	x2, #0xd                   	// #13
    96033478:	aa1903e1 	mov	x1, x25
    9603347c:	910263a0 	add	x0, x29, #0x98
    96033480:	97ffdaa9 	bl	96029f24 <memcpy>
			prop_name[len - 1] = '\0';
    96033484:	390297bf 	strb	wzr, [x29, #165]
    96033488:	17ffffdc 	b	960333f8 <tegrabl_add_plugin_manager_ids+0x204>
			tegrabl_snprintf(loc_name, MAX_BOARD_LOCATION_LEN, "1");
    9603348c:	d0000082 	adrp	x2, 96045000 <__func__.3796+0x7>
    96033490:	d2800c81 	mov	x1, #0x64                  	// #100
    96033494:	9136a042 	add	x2, x2, #0xda8
    96033498:	aa1503e0 	mov	x0, x21
			loc_len = 1;
    9603349c:	52800039 	mov	w25, #0x1                   	// #1
			tegrabl_snprintf(loc_name, MAX_BOARD_LOCATION_LEN, "1");
    960334a0:	97ffbc49 	bl	960225c4 <tegrabl_snprintf>
    960334a4:	17ffffde 	b	9603341c <tegrabl_add_plugin_manager_ids+0x228>
		con_node = tegrabl_add_subnode_if_absent(fdt, id_node, "connection");
    960334a8:	f9403ba0 	ldr	x0, [x29, #112]
    960334ac:	2a1b03e1 	mov	w1, w27
    960334b0:	91359002 	add	x2, x0, #0xd64
    960334b4:	aa1303e0 	mov	x0, x19
    960334b8:	97fff7ed 	bl	9603146c <tegrabl_add_subnode_if_absent>
    960334bc:	2a0003e1 	mov	w1, w0
		if (con_node < 0) {
    960334c0:	36f803c0 	tbz	w0, #31, 96033538 <tegrabl_add_plugin_manager_ids+0x344>
			pr_error("Can't add /chosen/plugin-manager/ids/conneection\n");
    960334c4:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960334c8:	913b0400 	add	x0, x0, #0xec1
    960334cc:	17ffffba 	b	960333b4 <tegrabl_add_plugin_manager_ids+0x1c0>
			node_name[name_len] = loc_name[j];
    960334d0:	2a0003e2 	mov	w2, w0
    960334d4:	38636aa4 	ldrb	w4, [x21, x3]
			if ((j != (loc_len - 1)) && (node_name[name_len] != ':')) {
    960334d8:	6b0300bf 	cmp	w5, w3
			node_name[name_len] = loc_name[j];
    960334dc:	38226b04 	strb	w4, [x24, x2]
			if ((j != (loc_len - 1)) && (node_name[name_len] != ':')) {
    960334e0:	54002fe0 	b.eq	96033adc <tegrabl_add_plugin_manager_ids+0x8e8>  // b.none
    960334e4:	7100e89f 	cmp	w4, #0x3a
    960334e8:	54002da0 	b.eq	96033a9c <tegrabl_add_plugin_manager_ids+0x8a8>  // b.none
				name_len++;
    960334ec:	11000400 	add	w0, w0, #0x1
    960334f0:	91000463 	add	x3, x3, #0x1
		for (j = 1; j < loc_len; ++j) {
    960334f4:	6b03033f 	cmp	w25, w3
    960334f8:	54fffecc 	b.gt	960334d0 <tegrabl_add_plugin_manager_ids+0x2dc>
    960334fc:	b9006ba1 	str	w1, [x29, #104]
		err = fdt_setprop_string(fdt, next_node, prop_name, loc_name);
    96033500:	aa1503e0 	mov	x0, x21
    96033504:	97ffdb82 	bl	9602a30c <strlen>
    96033508:	9104d6f7 	add	x23, x23, #0x135
    9603350c:	b9406ba1 	ldr	w1, [x29, #104]
    96033510:	11000404 	add	w4, w0, #0x1
    96033514:	aa1503e3 	mov	x3, x21
    96033518:	910263a2 	add	x2, x29, #0x98
    9603351c:	aa1303e0 	mov	x0, x19
    96033520:	97fffd89 	bl	96032b44 <fdt_setprop>
		if (err < 0) {
    96033524:	37fff9a0 	tbnz	w0, #31, 96033458 <tegrabl_add_plugin_manager_ids+0x264>
	for (i = 0; i < id_info->count; ++i) {
    96033528:	1100079c 	add	w28, w28, #0x1
    9603352c:	17ffff8f 	b	96033368 <tegrabl_add_plugin_manager_ids+0x174>
			name_len = 0;
    96033530:	52800000 	mov	w0, #0x0                   	// #0
    96033534:	17ffffef 	b	960334f0 <tegrabl_add_plugin_manager_ids+0x2fc>
		if (con_node < 0) {
    96033538:	d2800023 	mov	x3, #0x1                   	// #1
		name_len = 0;
    9603353c:	52800000 	mov	w0, #0x0                   	// #0
			if ((j != (loc_len - 1)) && (node_name[name_len] != ':')) {
    96033540:	51000725 	sub	w5, w25, #0x1
    96033544:	17ffffec 	b	960334f4 <tegrabl_add_plugin_manager_ids+0x300>
	status = tegrabl_dt_get_node_with_path(fdt, "/eeprom-manager",
    96033548:	b0000075 	adrp	x21, 96040000 <sdmmc_base_addr+0x9f4>
    9603354c:	910253a2 	add	x2, x29, #0x94
    96033550:	911db6a1 	add	x1, x21, #0x76d
    96033554:	aa1303e0 	mov	x0, x19
    96033558:	97fff789 	bl	9603137c <tegrabl_dt_get_node_with_path>
	if (status != TEGRABL_NO_ERROR) {
    9603355c:	34000220 	cbz	w0, 960335a0 <tegrabl_add_plugin_manager_ids+0x3ac>
		pr_error("Cannot find eeprom-manager node\n");
    96033560:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033564:	913ccc00 	add	x0, x0, #0xf33
    96033568:	97ffbc42 	bl	96022670 <tegrabl_printf>
	config_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "configs");
    9603356c:	910bbb42 	add	x2, x26, #0x2ee
    96033570:	2a1603e1 	mov	w1, w22
    96033574:	aa1303e0 	mov	x0, x19
	int eeprom_node = 0;
    96033578:	b90093bf 	str	wzr, [x29, #144]
	config_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "configs");
    9603357c:	97fff7bc 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96033580:	2a0003f9 	mov	w25, w0
	if (config_node < 0) {
    96033584:	36f80a60 	tbz	w0, #31, 960336d0 <tegrabl_add_plugin_manager_ids+0x4dc>
		pr_error("Could not found id and config node\n");
    96033588:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    9603358c:	91391400 	add	x0, x0, #0xe45
    96033590:	97ffbc38 	bl	96022670 <tegrabl_printf>
		pr_error("Error: Failed to add id with configs to PM\n");
    96033594:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033598:	91022400 	add	x0, x0, #0x89
    9603359c:	17ffff4b 	b	960332c8 <tegrabl_add_plugin_manager_ids+0xd4>
	status = tegrabl_dt_count_elems_of_size(fdt, eeprom_node,
    960335a0:	b94097a1 	ldr	w1, [x29, #148]
    960335a4:	f0000097 	adrp	x23, 96046000 <lenfix.3236+0xf0>
    960335a8:	910263a4 	add	x4, x29, #0x98
    960335ac:	52800083 	mov	w3, #0x4                   	// #4
    960335b0:	913d5ee2 	add	x2, x23, #0xf57
    960335b4:	aa1303e0 	mov	x0, x19
    960335b8:	97fff71b 	bl	96031224 <tegrabl_dt_count_elems_of_size>
	if (status != TEGRABL_NO_ERROR) {
    960335bc:	35fffd80 	cbnz	w0, 9603356c <tegrabl_add_plugin_manager_ids+0x378>
	for (j = 0; j < n_boardid_rev_list; ++j) {
    960335c0:	5280001b 	mov	w27, #0x0                   	// #0
		board_id_no = board_id_no * 10 + board_id[i] - '0';
    960335c4:	52800159 	mov	w25, #0xa                   	// #10
    960335c8:	14000012 	b	96033610 <tegrabl_add_plugin_manager_ids+0x41c>
		status = tegrabl_dt_get_prop_by_idx(fdt,  eeprom_node,
    960335cc:	b94097a1 	ldr	w1, [x29, #148]
    960335d0:	910363a5 	add	x5, x29, #0xd8
    960335d4:	2a1b03e4 	mov	w4, w27
    960335d8:	d2800083 	mov	x3, #0x4                   	// #4
    960335dc:	913d5ee2 	add	x2, x23, #0xf57
    960335e0:	aa1303e0 	mov	x0, x19
    960335e4:	97fff672 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (status != TEGRABL_NO_ERROR) {
    960335e8:	350001c0 	cbnz	w0, 96033620 <tegrabl_add_plugin_manager_ids+0x42c>
    960335ec:	794387a0 	ldrh	w0, [x29, #450]
    960335f0:	910757a2 	add	x2, x29, #0x1d5
    960335f4:	528026a3 	mov	w3, #0x135                 	// #309
			if (board_id_no == boardid_rev)
    960335f8:	b940dba4 	ldr	w4, [x29, #216]
    960335fc:	d503201f 	nop
    96033600:	9ba00863 	umaddl	x3, w3, w0, x2
		for (i = 0; i < id_info->count; ++i) {
    96033604:	eb02007f 	cmp	x3, x2
    96033608:	540001a1 	b.ne	9603363c <tegrabl_add_plugin_manager_ids+0x448>  // b.any
	for (j = 0; j < n_boardid_rev_list; ++j) {
    9603360c:	1100077b 	add	w27, w27, #0x1
    96033610:	b9409ba0 	ldr	w0, [x29, #152]
    96033614:	6b00037f 	cmp	w27, w0
    96033618:	54fffda3 	b.cc	960335cc <tegrabl_add_plugin_manager_ids+0x3d8>  // b.lo, b.ul, b.last
    9603361c:	17ffffd4 	b	9603356c <tegrabl_add_plugin_manager_ids+0x378>
			pr_error("%s: Not able to read board-id revision index %d\n",
    96033620:	2a1b03e2 	mov	w2, w27
    96033624:	f0000081 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    96033628:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    9603362c:	9133a821 	add	x1, x1, #0xcea
    96033630:	913db400 	add	x0, x0, #0xf6d
    96033634:	97ffbc0f 	bl	96022670 <tegrabl_printf>
    96033638:	17ffff5a 	b	960333a0 <tegrabl_add_plugin_manager_ids+0x1ac>
			board_id_no = get_board_id_no(id_info->part[i].part_no);
    9603363c:	aa0203e1 	mov	x1, x2
    96033640:	d280001c 	mov	x28, #0x0                   	// #0
	board_id_no = 0;
    96033644:	52800000 	mov	w0, #0x0                   	// #0
		board_id_no = board_id_no * 10 + board_id[i] - '0';
    96033648:	1b197c00 	mul	w0, w0, w25
    9603364c:	387c6845 	ldrb	w5, [x2, x28]
    96033650:	9100079c 	add	x28, x28, #0x1
    96033654:	5100c000 	sub	w0, w0, #0x30
	for (i = 0; i < BOARD_ID_SZ; ++i) {
    96033658:	f100139f 	cmp	x28, #0x4
		board_id_no = board_id_no * 10 + board_id[i] - '0';
    9603365c:	0b0000a0 	add	w0, w5, w0
	for (i = 0; i < BOARD_ID_SZ; ++i) {
    96033660:	54ffff41 	b.ne	96033648 <tegrabl_add_plugin_manager_ids+0x454>  // b.any
    96033664:	9104d442 	add	x2, x2, #0x135
			if (board_id_no == boardid_rev)
    96033668:	6b00009f 	cmp	w4, w0
    9603366c:	54fffcc1 	b.ne	96033604 <tegrabl_add_plugin_manager_ids+0x410>  // b.any
			memcpy(prop_name, id_info->part[i].part_no, BOARD_FULL_REV_SZ - 1);
    96033670:	d28001e2 	mov	x2, #0xf                   	// #15
    96033674:	910503a0 	add	x0, x29, #0x140
    96033678:	97ffda2b 	bl	96029f24 <memcpy>
			prop_name[BOARD_FULL_REV_SZ - 1] = '\0';
    9603367c:	39053fbf 	strb	wzr, [x29, #335]
			pr_info("Adding plugin-manager/ids/%s\n", prop_name);
    96033680:	910503a1 	add	x1, x29, #0x140
    96033684:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033688:	913e8400 	add	x0, x0, #0xfa1
    9603368c:	97ffbbf9 	bl	96022670 <tegrabl_printf>
	val = cpu_to_fdt32(val);
    96033690:	52a02000 	mov	w0, #0x1000000             	// #16777216
	return fdt_setprop(fdt, nodeoffset, name, &val, sizeof(val));
    96033694:	2a1c03e4 	mov	w4, w28
	val = cpu_to_fdt32(val);
    96033698:	b9008fa0 	str	w0, [x29, #140]
	return fdt_setprop(fdt, nodeoffset, name, &val, sizeof(val));
    9603369c:	910233a3 	add	x3, x29, #0x8c
    960336a0:	910503a2 	add	x2, x29, #0x140
    960336a4:	2a1803e1 	mov	w1, w24
    960336a8:	aa1303e0 	mov	x0, x19
    960336ac:	97fffd26 	bl	96032b44 <fdt_setprop>
			if (err < 0) {
    960336b0:	36fffae0 	tbz	w0, #31, 9603360c <tegrabl_add_plugin_manager_ids+0x418>
				pr_error("Can't set /chosen/plugin-manager/ids/%s (%s)\n",
    960336b4:	97fffe7f 	bl	960330b0 <fdt_strerror>
    960336b8:	aa0003e2 	mov	x2, x0
    960336bc:	910503a1 	add	x1, x29, #0x140
    960336c0:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960336c4:	913a4000 	add	x0, x0, #0xe90
    960336c8:	97ffbbea 	bl	96022670 <tegrabl_printf>
    960336cc:	17ffff35 	b	960333a0 <tegrabl_add_plugin_manager_ids+0x1ac>
	status = tegrabl_dt_get_node_with_path(fdt, "/eeprom-manager",
    960336d0:	910243a2 	add	x2, x29, #0x90
    960336d4:	911db6a1 	add	x1, x21, #0x76d
    960336d8:	aa1303e0 	mov	x0, x19
    960336dc:	97fff728 	bl	9603137c <tegrabl_dt_get_node_with_path>
	if (status != TEGRABL_NO_ERROR) {
    960336e0:	34000120 	cbz	w0, 96033704 <tegrabl_add_plugin_manager_ids+0x510>
		pr_error("Cannot find eeprom-manager node\n");
    960336e4:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    960336e8:	913ccc00 	add	x0, x0, #0xf33
    960336ec:	97ffbbe1 	bl	96022670 <tegrabl_printf>
		if (0 != strcmp(id_info->part[i].name, "module")) {
    960336f0:	d0000058 	adrp	x24, 9603d000 <__func__.3609+0x209>
	for (j = 0; j < n_boardid_config_list; ++j) {
    960336f4:	52800015 	mov	w21, #0x0                   	// #0
    960336f8:	528026b9 	mov	w25, #0x135                 	// #309
		if (0 != strcmp(id_info->part[i].name, "module")) {
    960336fc:	91212b18 	add	x24, x24, #0x84a
    96033700:	14000096 	b	96033958 <tegrabl_add_plugin_manager_ids+0x764>
	status = tegrabl_dt_count_elems_of_size(fdt, eeprom_node,
    96033704:	b94093a1 	ldr	w1, [x29, #144]
    96033708:	f0000097 	adrp	x23, 96046000 <lenfix.3236+0xf0>
    9603370c:	910263a4 	add	x4, x29, #0x98
    96033710:	52800083 	mov	w3, #0x4                   	// #4
    96033714:	913fb6e2 	add	x2, x23, #0xfed
    96033718:	aa1303e0 	mov	x0, x19
    9603371c:	97fff6c2 	bl	96031224 <tegrabl_dt_count_elems_of_size>
	if (status != TEGRABL_NO_ERROR) {
    96033720:	35fffe80 	cbnz	w0, 960336f0 <tegrabl_add_plugin_manager_ids+0x4fc>
				pr_info("Adding plugin-manager/configs/%s %02x\n", prop_name,
    96033724:	900000b8 	adrp	x24, 96047000 <__func__.3913+0x316>
	for (j = 0; j < n_boardid_config_list; ++j) {
    96033728:	5280001a 	mov	w26, #0x0                   	// #0
				pr_info("Adding plugin-manager/configs/%s %02x\n", prop_name,
    9603372c:	9100cf18 	add	x24, x24, #0x33
    96033730:	14000013 	b	9603377c <tegrabl_add_plugin_manager_ids+0x588>
		status = tegrabl_dt_get_prop_by_idx(fdt,  eeprom_node,
    96033734:	b94093a1 	ldr	w1, [x29, #144]
    96033738:	910363a5 	add	x5, x29, #0xd8
    9603373c:	2a1a03e4 	mov	w4, w26
    96033740:	d2800083 	mov	x3, #0x4                   	// #4
    96033744:	913fb6e2 	add	x2, x23, #0xfed
    96033748:	aa1303e0 	mov	x0, x19
    9603374c:	97fff618 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
		if (status != TEGRABL_NO_ERROR) {
    96033750:	350001e0 	cbnz	w0, 9603378c <tegrabl_add_plugin_manager_ids+0x598>
    96033754:	794387a4 	ldrh	w4, [x29, #450]
    96033758:	528026a0 	mov	w0, #0x135                 	// #309
			if (board_id_no == boardid_config)
    9603375c:	b940dba5 	ldr	w5, [x29, #216]
    96033760:	910757a6 	add	x6, x29, #0x1d5
		board_id_no = board_id_no * 10 + board_id[i] - '0';
    96033764:	52800147 	mov	w7, #0xa                   	// #10
    96033768:	9ba07c84 	umull	x4, w4, w0
			if (board_id_no == boardid_config)
    9603376c:	d2800000 	mov	x0, #0x0                   	// #0
		for (i = 0; i < id_info->count; ++i) {
    96033770:	eb00009f 	cmp	x4, x0
    96033774:	540001a1 	b.ne	960337a8 <tegrabl_add_plugin_manager_ids+0x5b4>  // b.any
	for (j = 0; j < n_boardid_config_list; ++j) {
    96033778:	1100075a 	add	w26, w26, #0x1
    9603377c:	b9409ba0 	ldr	w0, [x29, #152]
    96033780:	6b00035f 	cmp	w26, w0
    96033784:	54fffd83 	b.cc	96033734 <tegrabl_add_plugin_manager_ids+0x540>  // b.lo, b.ul, b.last
    96033788:	17ffffda 	b	960336f0 <tegrabl_add_plugin_manager_ids+0x4fc>
			pr_error("%s: Not able to read board-id config index %d\n",
    9603378c:	2a1a03e2 	mov	w2, w26
    96033790:	f0000081 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    96033794:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033798:	91334021 	add	x1, x1, #0xcd0
    9603379c:	91000400 	add	x0, x0, #0x1
    960337a0:	97ffbbb4 	bl	96022670 <tegrabl_printf>
    960337a4:	17ffff7c 	b	96033594 <tegrabl_add_plugin_manager_ids+0x3a0>
    960337a8:	8b0000c1 	add	x1, x6, x0
		for (i = 0; i < id_info->count; ++i) {
    960337ac:	d2800002 	mov	x2, #0x0                   	// #0
	board_id_no = 0;
    960337b0:	52800003 	mov	w3, #0x0                   	// #0
		board_id_no = board_id_no * 10 + board_id[i] - '0';
    960337b4:	1b077c63 	mul	w3, w3, w7
    960337b8:	38626828 	ldrb	w8, [x1, x2]
    960337bc:	91000442 	add	x2, x2, #0x1
    960337c0:	5100c063 	sub	w3, w3, #0x30
	for (i = 0; i < BOARD_ID_SZ; ++i) {
    960337c4:	f100105f 	cmp	x2, #0x4
		board_id_no = board_id_no * 10 + board_id[i] - '0';
    960337c8:	0b030103 	add	w3, w8, w3
	for (i = 0; i < BOARD_ID_SZ; ++i) {
    960337cc:	54ffff41 	b.ne	960337b4 <tegrabl_add_plugin_manager_ids+0x5c0>  // b.any
    960337d0:	9104d408 	add	x8, x0, #0x135
			if (board_id_no == boardid_config)
    960337d4:	6b0300bf 	cmp	w5, w3
    960337d8:	54000060 	b.eq	960337e4 <tegrabl_add_plugin_manager_ids+0x5f0>  // b.none
    960337dc:	aa0803e0 	mov	x0, x8
    960337e0:	17ffffe4 	b	96033770 <tegrabl_add_plugin_manager_ids+0x57c>
			uint8_t *data = id_info->part[i].config;
    960337e4:	910703a3 	add	x3, x29, #0x1c0
    960337e8:	91015400 	add	x0, x0, #0x55
    960337ec:	8b000075 	add	x21, x3, x0
			memcpy(prop_name, id_info->part[i].part_no, BOARD_ID_SZ);
    960337f0:	910503a0 	add	x0, x29, #0x140
    960337f4:	97ffd9cc 	bl	96029f24 <memcpy>
			prop_name[BOARD_ID_SZ] = '-';
    960337f8:	528005a0 	mov	w0, #0x2d                  	// #45
    960337fc:	390513a0 	strb	w0, [x29, #324]
			if (board_id_no == boardid_config)
    96033800:	910517a1 	add	x1, x29, #0x145
    96033804:	d2800000 	mov	x0, #0x0                   	// #0
	while ((*str != '\0') && (*str != ':') && (max_len > 0)) {
    96033808:	38606aa2 	ldrb	w2, [x21, x0]
    9603380c:	2a0003e3 	mov	w3, w0
    96033810:	8b0002bb 	add	x27, x21, x0
    96033814:	7100e85f 	cmp	w2, #0x3a
    96033818:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
    9603381c:	54000080 	b.eq	9603382c <tegrabl_add_plugin_manager_ids+0x638>  // b.none
    96033820:	91000400 	add	x0, x0, #0x1
    96033824:	f101ec1f 	cmp	x0, #0x7b
    96033828:	54000581 	b.ne	960338d8 <tegrabl_add_plugin_manager_ids+0x6e4>  // b.any
	*config = '\0';
    9603382c:	3900003f 	strb	wzr, [x1]
				if (config_len == 0) {
    96033830:	34fffa43 	cbz	w3, 96033778 <tegrabl_add_plugin_manager_ids+0x584>
		c_to_i(config[i], v);
    96033834:	39400760 	ldrb	w0, [x27, #1]
    96033838:	51018401 	sub	w1, w0, #0x61
    9603383c:	12001c21 	and	w1, w1, #0xff
    96033840:	7100143f 	cmp	w1, #0x5
    96033844:	540004e9 	b.ls	960338e0 <tegrabl_add_plugin_manager_ids+0x6ec>  // b.plast
    96033848:	51010401 	sub	w1, w0, #0x41
    9603384c:	5100c015 	sub	w21, w0, #0x30
    96033850:	12001c21 	and	w1, w1, #0xff
    96033854:	5100dc00 	sub	w0, w0, #0x37
    96033858:	12001eb5 	and	w21, w21, #0xff
    9603385c:	12001c00 	and	w0, w0, #0xff
    96033860:	7100183f 	cmp	w1, #0x6
    96033864:	1a953000 	csel	w0, w0, w21, cc  // cc = lo, ul, last
    96033868:	39400b61 	ldrb	w1, [x27, #2]
    9603386c:	51018422 	sub	w2, w1, #0x61
    96033870:	12001c42 	and	w2, w2, #0xff
    96033874:	7100145f 	cmp	w2, #0x5
    96033878:	540003a8 	b.hi	960338ec <tegrabl_add_plugin_manager_ids+0x6f8>  // b.pmore
    9603387c:	51015c35 	sub	w21, w1, #0x57
    96033880:	12001eb5 	and	w21, w21, #0xff
		value = value << 4 | v;
    96033884:	2a0012b5 	orr	w21, w21, w0, lsl #4
				pr_info("Adding plugin-manager/configs/%s %02x\n", prop_name,
    96033888:	910503a1 	add	x1, x29, #0x140
    9603388c:	12001ea2 	and	w2, w21, #0xff
    96033890:	aa1803e0 	mov	x0, x24
    96033894:	97ffbb77 	bl	96022670 <tegrabl_printf>
    96033898:	5ac00ab5 	rev	w21, w21
    9603389c:	52800084 	mov	w4, #0x4                   	// #4
    960338a0:	910253a3 	add	x3, x29, #0x94
    960338a4:	910503a2 	add	x2, x29, #0x140
    960338a8:	2a1903e1 	mov	w1, w25
    960338ac:	aa1303e0 	mov	x0, x19
	val = cpu_to_fdt32(val);
    960338b0:	b90097b5 	str	w21, [x29, #148]
	return fdt_setprop(fdt, nodeoffset, name, &val, sizeof(val));
    960338b4:	97fffca4 	bl	96032b44 <fdt_setprop>
				if (err < 0) {
    960338b8:	36f802c0 	tbz	w0, #31, 96033910 <tegrabl_add_plugin_manager_ids+0x71c>
					pr_error("Can't set plugin-manager/config/%s (%s)\n",
    960338bc:	97fffdfd 	bl	960330b0 <fdt_strerror>
    960338c0:	aa0003e2 	mov	x2, x0
    960338c4:	910503a1 	add	x1, x29, #0x140
    960338c8:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    960338cc:	91017400 	add	x0, x0, #0x5d
    960338d0:	97ffbb68 	bl	96022670 <tegrabl_printf>
    960338d4:	17ffff30 	b	96033594 <tegrabl_add_plugin_manager_ids+0x3a0>
		*config++ = *str++;
    960338d8:	38001422 	strb	w2, [x1], #1
    960338dc:	17ffffcb 	b	96033808 <tegrabl_add_plugin_manager_ids+0x614>
		c_to_i(config[i], v);
    960338e0:	51015c00 	sub	w0, w0, #0x57
    960338e4:	12001c00 	and	w0, w0, #0xff
    960338e8:	17ffffe0 	b	96033868 <tegrabl_add_plugin_manager_ids+0x674>
    960338ec:	5100dc35 	sub	w21, w1, #0x37
    960338f0:	51010423 	sub	w3, w1, #0x41
    960338f4:	12001ea2 	and	w2, w21, #0xff
    960338f8:	12001c63 	and	w3, w3, #0xff
    960338fc:	5100c035 	sub	w21, w1, #0x30
    96033900:	7100147f 	cmp	w3, #0x5
    96033904:	12001eb5 	and	w21, w21, #0xff
    96033908:	1a8282b5 	csel	w21, w21, w2, hi  // hi = pmore
    9603390c:	17ffffde 	b	96033884 <tegrabl_add_plugin_manager_ids+0x690>
				if (*data == ',')
    96033910:	39400f60 	ldrb	w0, [x27, #3]
    96033914:	7100b01f 	cmp	w0, #0x2c
    96033918:	54000080 	b.eq	96033928 <tegrabl_add_plugin_manager_ids+0x734>  // b.none
				data += 2;
    9603391c:	91000f75 	add	x21, x27, #0x3
			} while (*data);
    96033920:	35fff700 	cbnz	w0, 96033800 <tegrabl_add_plugin_manager_ids+0x60c>
    96033924:	17ffff95 	b	96033778 <tegrabl_add_plugin_manager_ids+0x584>
					++data;
    96033928:	91001375 	add	x21, x27, #0x4
    9603392c:	39401360 	ldrb	w0, [x27, #4]
    96033930:	17fffffc 	b	96033920 <tegrabl_add_plugin_manager_ids+0x72c>
    96033934:	9bb97eb7 	umull	x23, w21, w25
		if (0 != strcmp(id_info->part[i].name, "module")) {
    96033938:	910703a2 	add	x2, x29, #0x1c0
    9603393c:	aa1803e1 	mov	x1, x24
    96033940:	910016e0 	add	x0, x23, #0x5
    96033944:	8b000040 	add	x0, x2, x0
    96033948:	97ffda41 	bl	9602a24c <strcmp>
    9603394c:	340002a0 	cbz	w0, 960339a0 <tegrabl_add_plugin_manager_ids+0x7ac>
	for (i = 0; i < id_info->count; ++i) {
    96033950:	110006b5 	add	w21, w21, #0x1
    96033954:	12003eb5 	and	w21, w21, #0xffff
    96033958:	794387a0 	ldrh	w0, [x29, #450]
    9603395c:	6b15001f 	cmp	w0, w21
    96033960:	54fffea8 	b.hi	96033934 <tegrabl_add_plugin_manager_ids+0x740>  // b.pmore
	chip_node = tegrabl_add_subnode_if_absent(fdt, pm_node, "chip-id");
    96033964:	900000a2 	adrp	x2, 96047000 <__func__.3913+0x316>
    96033968:	2a1603e1 	mov	w1, w22
    9603396c:	9104b842 	add	x2, x2, #0x12e
    96033970:	aa1303e0 	mov	x0, x19
    96033974:	97fff6be 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96033978:	2a0003f5 	mov	w21, w0
	if (chip_node < 0) {
    9603397c:	36f804e0 	tbz	w0, #31, 96033a18 <tegrabl_add_plugin_manager_ids+0x824>
		pr_error("Could not create chip-id node\n");
    96033980:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033984:	9104d800 	add	x0, x0, #0x136
    96033988:	97ffbb3a 	bl	96022670 <tegrabl_printf>
		pr_error("Error: Failed to add chip id to PM\n");
    9603398c:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 5);
    96033990:	5280a454 	mov	w20, #0x522                 	// #1314
		pr_error("Error: Failed to add chip id to PM\n");
    96033994:	9106ec00 	add	x0, x0, #0x1bb
    96033998:	97ffbb36 	bl	96022670 <tegrabl_printf>
    9603399c:	17fffe27 	b	96033238 <tegrabl_add_plugin_manager_ids+0x44>
		memcpy(prop_name, id_info->part[i].part_no, MAX_BOARD_PART_NO_LEN - 1);
    960339a0:	910703a0 	add	x0, x29, #0x1c0
    960339a4:	910056e1 	add	x1, x23, #0x15
    960339a8:	8b010001 	add	x1, x0, x1
    960339ac:	d28007e2 	mov	x2, #0x3f                  	// #63
    960339b0:	910503a0 	add	x0, x29, #0x140
    960339b4:	97ffd95c 	bl	96029f24 <memcpy>
		pr_info("Adding plugin-manager/cvm\n");
    960339b8:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
		prop_name[BOARD_ID_SZ + BOARD_SKU_SZ + BOARD_FAB_SZ + 2] = '\0';
    960339bc:	390537bf 	strb	wzr, [x29, #333]
		pr_info("Adding plugin-manager/cvm\n");
    960339c0:	9102e000 	add	x0, x0, #0xb8
    960339c4:	97ffbb2b 	bl	96022670 <tegrabl_printf>
		err = fdt_setprop_string(fdt, pm_node, "cvm", prop_name);
    960339c8:	910503a0 	add	x0, x29, #0x140
    960339cc:	97ffda50 	bl	9602a30c <strlen>
    960339d0:	b0000062 	adrp	x2, 96040000 <sdmmc_base_addr+0x9f4>
    960339d4:	11000404 	add	w4, w0, #0x1
    960339d8:	910503a3 	add	x3, x29, #0x140
    960339dc:	91258442 	add	x2, x2, #0x961
    960339e0:	2a1603e1 	mov	w1, w22
    960339e4:	aa1303e0 	mov	x0, x19
    960339e8:	97fffc57 	bl	96032b44 <fdt_setprop>
		if (err < 0) {
    960339ec:	36fffbc0 	tbz	w0, #31, 96033964 <tegrabl_add_plugin_manager_ids+0x770>
			pr_error("Can't set /chosen/plugin-manager/cvm (%s)\n", fdt_strerror(err));
    960339f0:	97fffdb0 	bl	960330b0 <fdt_strerror>
    960339f4:	aa0003e1 	mov	x1, x0
    960339f8:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    960339fc:	91035800 	add	x0, x0, #0xd6
    96033a00:	97ffbb1c 	bl	96022670 <tegrabl_printf>
		status = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 4);
    96033a04:	52808454 	mov	w20, #0x422                 	// #1058
		pr_error("Error: Failed to add id for cvm to PM\n");
    96033a08:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033a0c:	91041000 	add	x0, x0, #0x104
    96033a10:	97ffbb18 	bl	96022670 <tegrabl_printf>
    96033a14:	17fffe09 	b	96033238 <tegrabl_add_plugin_manager_ids+0x44>
	tegrabl_get_chip_info(&info);
    96033a18:	910503a0 	add	x0, x29, #0x140
    96033a1c:	97ffb6a6 	bl	960214b4 <tegrabl_get_chip_info>
					(info.revision == 0) ? 0 : info.revision + 'O');
    96033a20:	b9414fa5 	ldr	w5, [x29, #332]
	tegrabl_snprintf(prop_name, CHIP_ID_MAX, "%c%02u%c",
    96033a24:	b94147a3 	ldr	w3, [x29, #324]
    96033a28:	b9414ba4 	ldr	w4, [x29, #328]
    96033a2c:	11010063 	add	w3, w3, #0x40
    96033a30:	34000045 	cbz	w5, 96033a38 <tegrabl_add_plugin_manager_ids+0x844>
    96033a34:	11013ca5 	add	w5, w5, #0x4f
    96033a38:	900000a2 	adrp	x2, 96047000 <__func__.3913+0x316>
    96033a3c:	91056042 	add	x2, x2, #0x158
    96033a40:	d28000a1 	mov	x1, #0x5                   	// #5
    96033a44:	910363a0 	add	x0, x29, #0xd8
    96033a48:	97ffbadf 	bl	960225c4 <tegrabl_snprintf>
	pr_info("Adding plugin-manager/chip-id/%s\n", prop_name);
    96033a4c:	910363a1 	add	x1, x29, #0xd8
    96033a50:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033a54:	91058400 	add	x0, x0, #0x161
    96033a58:	97ffbb06 	bl	96022670 <tegrabl_printf>
	val = cpu_to_fdt32(val);
    96033a5c:	52a02000 	mov	w0, #0x1000000             	// #16777216
	return fdt_setprop(fdt, nodeoffset, name, &val, sizeof(val));
    96033a60:	52800084 	mov	w4, #0x4                   	// #4
	val = cpu_to_fdt32(val);
    96033a64:	b9009ba0 	str	w0, [x29, #152]
	return fdt_setprop(fdt, nodeoffset, name, &val, sizeof(val));
    96033a68:	910263a3 	add	x3, x29, #0x98
    96033a6c:	910363a2 	add	x2, x29, #0xd8
    96033a70:	2a1503e1 	mov	w1, w21
    96033a74:	aa1303e0 	mov	x0, x19
    96033a78:	97fffc33 	bl	96032b44 <fdt_setprop>
	if (err < 0) {
    96033a7c:	36ffc460 	tbz	w0, #31, 96033308 <tegrabl_add_plugin_manager_ids+0x114>
		pr_error("Can't set /chosen/plugin-manager/chip-id/%s (%s)\n",
    96033a80:	97fffd8c 	bl	960330b0 <fdt_strerror>
    96033a84:	aa0003e2 	mov	x2, x0
    96033a88:	910363a1 	add	x1, x29, #0xd8
    96033a8c:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033a90:	91061800 	add	x0, x0, #0x186
    96033a94:	97ffbaf7 	bl	96022670 <tegrabl_printf>
    96033a98:	17ffffbd 	b	9603398c <tegrabl_add_plugin_manager_ids+0x798>
			if (name_len == 0) {
    96033a9c:	34ffd2a0 	cbz	w0, 960334f0 <tegrabl_add_plugin_manager_ids+0x2fc>
				node_name[name_len] = '\0';
    96033aa0:	38226b1f 	strb	wzr, [x24, x2]
    96033aa4:	b90067a5 	str	w5, [x29, #100]
			next_node = tegrabl_add_subnode_if_absent(fdt, prev_node,
    96033aa8:	aa1803e2 	mov	x2, x24
    96033aac:	f90037a3 	str	x3, [x29, #104]
    96033ab0:	aa1303e0 	mov	x0, x19
    96033ab4:	97fff66e 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96033ab8:	2a0003e1 	mov	w1, w0
			if (next_node < 0) {
    96033abc:	b94067a5 	ldr	w5, [x29, #100]
    96033ac0:	f94037a3 	ldr	x3, [x29, #104]
    96033ac4:	36ffd360 	tbz	w0, #31, 96033530 <tegrabl_add_plugin_manager_ids+0x33c>
				pr_error("Can not create node %s\n", node_name);
    96033ac8:	aa1803e1 	mov	x1, x24
    96033acc:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033ad0:	913bd800 	add	x0, x0, #0xef6
    96033ad4:	97ffbae7 	bl	96022670 <tegrabl_printf>
    96033ad8:	17fffe38 	b	960333b8 <tegrabl_add_plugin_manager_ids+0x1c4>
			if (name_len == 0) {
    96033adc:	34ffd0a0 	cbz	w0, 960334f0 <tegrabl_add_plugin_manager_ids+0x2fc>
				node_name[name_len + 1] = '\0';
    96033ae0:	11000400 	add	w0, w0, #0x1
    96033ae4:	38206b1f 	strb	wzr, [x24, x0]
    96033ae8:	17ffffef 	b	96033aa4 <tegrabl_add_plugin_manager_ids+0x8b0>

0000000096033aec <tegrabl_copy_plugin_manager_ids>:
	pr_error("Failed to find %s in DT\n", path);
	return TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
}

tegrabl_error_t tegrabl_copy_plugin_manager_ids(void *fdt_dst, void *fdt_src, int nodeoffset)
{
    96033aec:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96033af0:	910003fd 	mov	x29, sp
    96033af4:	a90153f3 	stp	x19, x20, [sp, #16]
    96033af8:	aa0103f3 	mov	x19, x1
    96033afc:	a9025bf5 	stp	x21, x22, [sp, #32]
	int prop_sz;

	TEGRABL_ASSERT(fdt_dst);
	TEGRABL_ASSERT(fdt_src);

	src_pm_node = fdt_path_offset(fdt_src, "/chosen/plugin-manager");
    96033b00:	900000a1 	adrp	x1, 96047000 <__func__.3913+0x316>
{
    96033b04:	a90363f7 	stp	x23, x24, [sp, #48]
    96033b08:	aa0003f5 	mov	x21, x0
    96033b0c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96033b10:	2a0203f4 	mov	w20, w2
    96033b14:	f9002bfb 	str	x27, [sp, #80]
	src_pm_node = fdt_path_offset(fdt_src, "/chosen/plugin-manager");
    96033b18:	91078821 	add	x1, x1, #0x1e2
    96033b1c:	aa1303e0 	mov	x0, x19
    96033b20:	97fff985 	bl	96032134 <fdt_path_offset>
	if (src_pm_node < 0) {
    96033b24:	36f801a0 	tbz	w0, #31, 96033b58 <tegrabl_copy_plugin_manager_ids+0x6c>
		pr_error("Found no plugin manager ids in source DT\n");
    96033b28:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033b2c:	9107e400 	add	x0, x0, #0x1f9
    96033b30:	97ffbad0 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 1);
    96033b34:	528021a0 	mov	w0, #0x10d                 	// #269
		child_name = (char *)fdt_get_name(fdt_src, child_node, NULL);

		dst_node = tegrabl_add_subnode_if_absent(fdt_dst, pm_node, child_name);
		if (dst_node < 0) {
			pr_error("Could not add /chosen/plugin-manager/%s node\n", child_name);
			err = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96033b38:	72acaca0 	movk	w0, #0x6565, lsl #16
		}
	}

fail:
	return err;
}
    96033b3c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96033b40:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96033b44:	a94363f7 	ldp	x23, x24, [sp, #48]
    96033b48:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96033b4c:	f9402bfb 	ldr	x27, [sp, #80]
    96033b50:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96033b54:	d65f03c0 	ret
    96033b58:	2a0003f6 	mov	w22, w0
	pm_node = tegrabl_add_subnode_if_absent(fdt_dst, nodeoffset, "plugin-manager");
    96033b5c:	900000a2 	adrp	x2, 96047000 <__func__.3913+0x316>
    96033b60:	2a1403e1 	mov	w1, w20
    96033b64:	9107a842 	add	x2, x2, #0x1ea
    96033b68:	aa1503e0 	mov	x0, x21
    96033b6c:	97fff640 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96033b70:	2a0003f8 	mov	w24, w0
	if (pm_node < 0) {
    96033b74:	36f800c0 	tbz	w0, #31, 96033b8c <tegrabl_copy_plugin_manager_ids+0xa0>
		pr_error("Could not add /chosen/plugin-manager node\n");
    96033b78:	f0000080 	adrp	x0, 96046000 <lenfix.3236+0xf0>
    96033b7c:	91340400 	add	x0, x0, #0xd01
    96033b80:	97ffbabc 	bl	96022670 <tegrabl_printf>
			err = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96033b84:	52800440 	mov	w0, #0x22                  	// #34
    96033b88:	17ffffec 	b	96033b38 <tegrabl_copy_plugin_manager_ids+0x4c>
	tegrabl_dt_for_each_prop_of(fdt_src, prop_node, src_pm_node) {
    96033b8c:	2a1603e1 	mov	w1, w22
    96033b90:	aa1303e0 	mov	x0, x19
			pr_info("Adding /chosen/plugin-manager/%s\n", prop_name);
    96033b94:	900000b7 	adrp	x23, 96047000 <__func__.3913+0x316>
	tegrabl_dt_for_each_prop_of(fdt_src, prop_node, src_pm_node) {
    96033b98:	97fff882 	bl	96031da0 <fdt_first_property_offset>
			pr_info("Adding /chosen/plugin-manager/%s\n", prop_name);
    96033b9c:	91094af7 	add	x23, x23, #0x252
	tegrabl_dt_for_each_prop_of(fdt_src, prop_node, src_pm_node) {
    96033ba0:	2a0003f4 	mov	w20, w0
			pr_warn("Failed to add /chosen/plugin-manager/%s\n", prop_name);
    96033ba4:	900000b9 	adrp	x25, 96047000 <__func__.3913+0x316>
	tegrabl_dt_for_each_prop_of(fdt_src, prop_node, src_pm_node) {
    96033ba8:	36f80154 	tbz	w20, #31, 96033bd0 <tegrabl_copy_plugin_manager_ids+0xe4>
	tegrabl_dt_for_each_child(fdt_src, src_pm_node, child_node) {
    96033bac:	2a1603e1 	mov	w1, w22
    96033bb0:	aa1303e0 	mov	x0, x19
    96033bb4:	97fff77f 	bl	960319b0 <fdt_first_subnode>
    96033bb8:	2a0003f4 	mov	w20, w0
		pr_info("Adding /chosen/plugin-manager/%s\n", child_name);
    96033bbc:	900000bb 	adrp	x27, 96047000 <__func__.3913+0x316>
	tegrabl_dt_for_each_child(fdt_src, src_pm_node, child_node) {
    96033bc0:	3100069f 	cmn	w20, #0x1
    96033bc4:	54000321 	b.ne	96033c28 <tegrabl_copy_plugin_manager_ids+0x13c>  // b.any
	tegrabl_error_t err  = TEGRABL_NO_ERROR;
    96033bc8:	52800000 	mov	w0, #0x0                   	// #0
	return err;
    96033bcc:	17ffffdc 	b	96033b3c <tegrabl_copy_plugin_manager_ids+0x50>
		prop_data = (char *)fdt_getprop_by_offset(fdt_src, prop_node,
    96033bd0:	910193a3 	add	x3, x29, #0x64
    96033bd4:	9101a3a2 	add	x2, x29, #0x68
    96033bd8:	2a1403e1 	mov	w1, w20
    96033bdc:	aa1303e0 	mov	x0, x19
    96033be0:	97fff8f4 	bl	96031fb0 <fdt_getprop_by_offset>
		if (0 > fdt_setprop(fdt_dst, pm_node, prop_name, prop_data, prop_sz)) {
    96033be4:	aa0003e3 	mov	x3, x0
    96033be8:	b94067a4 	ldr	w4, [x29, #100]
    96033bec:	2a1803e1 	mov	w1, w24
    96033bf0:	f94037a2 	ldr	x2, [x29, #104]
    96033bf4:	aa1503e0 	mov	x0, x21
    96033bf8:	97fffbd3 	bl	96032b44 <fdt_setprop>
			pr_warn("Failed to add /chosen/plugin-manager/%s\n", prop_name);
    96033bfc:	f94037a1 	ldr	x1, [x29, #104]
		if (0 > fdt_setprop(fdt_dst, pm_node, prop_name, prop_data, prop_sz)) {
    96033c00:	36f80100 	tbz	w0, #31, 96033c20 <tegrabl_copy_plugin_manager_ids+0x134>
			pr_warn("Failed to add /chosen/plugin-manager/%s\n", prop_name);
    96033c04:	91089b20 	add	x0, x25, #0x226
			pr_info("Adding /chosen/plugin-manager/%s\n", prop_name);
    96033c08:	97ffba9a 	bl	96022670 <tegrabl_printf>
	tegrabl_dt_for_each_prop_of(fdt_src, prop_node, src_pm_node) {
    96033c0c:	2a1403e1 	mov	w1, w20
    96033c10:	aa1303e0 	mov	x0, x19
    96033c14:	97fff871 	bl	96031dd8 <fdt_next_property_offset>
    96033c18:	2a0003f4 	mov	w20, w0
    96033c1c:	17ffffe3 	b	96033ba8 <tegrabl_copy_plugin_manager_ids+0xbc>
			pr_info("Adding /chosen/plugin-manager/%s\n", prop_name);
    96033c20:	aa1703e0 	mov	x0, x23
    96033c24:	17fffff9 	b	96033c08 <tegrabl_copy_plugin_manager_ids+0x11c>
		child_name = (char *)fdt_get_name(fdt_src, child_node, NULL);
    96033c28:	d2800002 	mov	x2, #0x0                   	// #0
    96033c2c:	2a1403e1 	mov	w1, w20
    96033c30:	aa1303e0 	mov	x0, x19
    96033c34:	97fff83a 	bl	96031d1c <fdt_get_name>
		dst_node = tegrabl_add_subnode_if_absent(fdt_dst, pm_node, child_name);
    96033c38:	2a1803e1 	mov	w1, w24
		child_name = (char *)fdt_get_name(fdt_src, child_node, NULL);
    96033c3c:	aa0003f7 	mov	x23, x0
		dst_node = tegrabl_add_subnode_if_absent(fdt_dst, pm_node, child_name);
    96033c40:	aa0003e2 	mov	x2, x0
    96033c44:	aa1503e0 	mov	x0, x21
    96033c48:	97fff609 	bl	9603146c <tegrabl_add_subnode_if_absent>
    96033c4c:	2a0003fa 	mov	w26, w0
			pr_error("Could not add /chosen/plugin-manager/%s node\n", child_name);
    96033c50:	aa1703e1 	mov	x1, x23
		if (dst_node < 0) {
    96033c54:	36f800a0 	tbz	w0, #31, 96033c68 <tegrabl_copy_plugin_manager_ids+0x17c>
			pr_error("Could not add /chosen/plugin-manager/%s node\n", child_name);
    96033c58:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033c5c:	9109dc00 	add	x0, x0, #0x277
    96033c60:	97ffba84 	bl	96022670 <tegrabl_printf>
    96033c64:	17ffffc8 	b	96033b84 <tegrabl_copy_plugin_manager_ids+0x98>
		pr_info("Adding /chosen/plugin-manager/%s\n", child_name);
    96033c68:	91094b60 	add	x0, x27, #0x252
    96033c6c:	97ffba81 	bl	96022670 <tegrabl_printf>
		tegrabl_dt_for_each_prop_of(fdt_src, prop_node, child_node) {
    96033c70:	2a1403e1 	mov	w1, w20
    96033c74:	aa1303e0 	mov	x0, x19
				pr_warn("Failed to add /chosen/plugin-manager/%s/%s\n", child_name, prop_name);
    96033c78:	900000b9 	adrp	x25, 96047000 <__func__.3913+0x316>
		tegrabl_dt_for_each_prop_of(fdt_src, prop_node, child_node) {
    96033c7c:	97fff849 	bl	96031da0 <fdt_first_property_offset>
				pr_warn("Failed to add /chosen/plugin-manager/%s/%s\n", child_name, prop_name);
    96033c80:	910aa339 	add	x25, x25, #0x2a8
		tegrabl_dt_for_each_prop_of(fdt_src, prop_node, child_node) {
    96033c84:	2a0003f6 	mov	w22, w0
    96033c88:	36f800d6 	tbz	w22, #31, 96033ca0 <tegrabl_copy_plugin_manager_ids+0x1b4>
	tegrabl_dt_for_each_child(fdt_src, src_pm_node, child_node) {
    96033c8c:	2a1403e1 	mov	w1, w20
    96033c90:	aa1303e0 	mov	x0, x19
    96033c94:	97fff754 	bl	960319e4 <fdt_next_subnode>
    96033c98:	2a0003f4 	mov	w20, w0
    96033c9c:	17ffffc9 	b	96033bc0 <tegrabl_copy_plugin_manager_ids+0xd4>
			prop_data = (char *)fdt_getprop_by_offset(fdt_src, prop_node,
    96033ca0:	910193a3 	add	x3, x29, #0x64
    96033ca4:	9101a3a2 	add	x2, x29, #0x68
    96033ca8:	2a1603e1 	mov	w1, w22
    96033cac:	aa1303e0 	mov	x0, x19
    96033cb0:	97fff8c0 	bl	96031fb0 <fdt_getprop_by_offset>
			if (0 > fdt_setprop(fdt_dst, dst_node, prop_name, prop_data, prop_sz)) {
    96033cb4:	aa0003e3 	mov	x3, x0
    96033cb8:	b94067a4 	ldr	w4, [x29, #100]
    96033cbc:	2a1a03e1 	mov	w1, w26
    96033cc0:	f94037a2 	ldr	x2, [x29, #104]
    96033cc4:	aa1503e0 	mov	x0, x21
    96033cc8:	97fffb9f 	bl	96032b44 <fdt_setprop>
    96033ccc:	36f800a0 	tbz	w0, #31, 96033ce0 <tegrabl_copy_plugin_manager_ids+0x1f4>
				pr_warn("Failed to add /chosen/plugin-manager/%s/%s\n", child_name, prop_name);
    96033cd0:	f94037a2 	ldr	x2, [x29, #104]
    96033cd4:	aa1703e1 	mov	x1, x23
    96033cd8:	aa1903e0 	mov	x0, x25
    96033cdc:	97ffba65 	bl	96022670 <tegrabl_printf>
		tegrabl_dt_for_each_prop_of(fdt_src, prop_node, child_node) {
    96033ce0:	2a1603e1 	mov	w1, w22
    96033ce4:	aa1303e0 	mov	x0, x19
    96033ce8:	97fff83c 	bl	96031dd8 <fdt_next_property_offset>
    96033cec:	2a0003f6 	mov	w22, w0
    96033cf0:	17ffffe6 	b	96033c88 <tegrabl_copy_plugin_manager_ids+0x19c>

0000000096033cf4 <match_nct_data>:

	/* add nct info match check if needed */

	pr_debug("%s: result: %d\n", __func__, (int)matched);
	return matched;
}
    96033cf4:	52800000 	mov	w0, #0x0                   	// #0
    96033cf8:	d65f03c0 	ret

0000000096033cfc <match_chip_id>:
{
    96033cfc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96033d00:	910003fd 	mov	x29, sp
    96033d04:	a90153f3 	stp	x19, x20, [sp, #16]
	if (!strlen(chip_id)) {
    96033d08:	f0000213 	adrp	x19, 96076000 <free_dram_block+0x38e8>
{
    96033d0c:	aa0103f4 	mov	x20, x1
	if (!strlen(chip_id)) {
    96033d10:	9130d260 	add	x0, x19, #0xc34
    96033d14:	97ffd97e 	bl	9602a30c <strlen>
    96033d18:	b50001a0 	cbnz	x0, 96033d4c <match_chip_id+0x50>
		tegrabl_get_chip_info(&info);
    96033d1c:	910083a0 	add	x0, x29, #0x20
    96033d20:	97ffb5e5 	bl	960214b4 <tegrabl_get_chip_info>
						 (info.revision == 0) ? 0 : (info.revision + 'O'));
    96033d24:	b9402fa5 	ldr	w5, [x29, #44]
		tegrabl_snprintf(chip_id, CHIP_ID_MAX, "%c%02u%c",
    96033d28:	294493a3 	ldp	w3, w4, [x29, #36]
    96033d2c:	11010063 	add	w3, w3, #0x40
    96033d30:	34000045 	cbz	w5, 96033d38 <match_chip_id+0x3c>
    96033d34:	11013ca5 	add	w5, w5, #0x4f
    96033d38:	900000a2 	adrp	x2, 96047000 <__func__.3913+0x316>
    96033d3c:	d28000a1 	mov	x1, #0x5                   	// #5
    96033d40:	91056042 	add	x2, x2, #0x158
    96033d44:	9130d260 	add	x0, x19, #0xc34
    96033d48:	97ffba1f 	bl	960225c4 <tegrabl_snprintf>
	if (!strncmp(chip_id, id, strlen(chip_id))) {
    96033d4c:	9130d273 	add	x19, x19, #0xc34
    96033d50:	aa1303e0 	mov	x0, x19
    96033d54:	97ffd96e 	bl	9602a30c <strlen>
    96033d58:	aa1403e1 	mov	x1, x20
    96033d5c:	aa0003e2 	mov	x2, x0
    96033d60:	aa1303e0 	mov	x0, x19
    96033d64:	97ffd946 	bl	9602a27c <strncmp>
    96033d68:	7100001f 	cmp	w0, #0x0
}
    96033d6c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96033d70:	1a9f17e0 	cset	w0, eq  // eq = none
    96033d74:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96033d78:	d65f03c0 	ret

0000000096033d7c <match_odm_data>:
{
    96033d7c:	aa0103e0 	mov	x0, x1
	if (odm_data) {
    96033d80:	b4000041 	cbz	x1, 96033d88 <match_odm_data+0xc>
		matched = tegrabl_odmdata_get_config_by_name((char *)odm_data);
    96033d84:	17fffcfd 	b	96033178 <tegrabl_odmdata_get_config_by_name>
}
    96033d88:	52800000 	mov	w0, #0x0                   	// #0
    96033d8c:	d65f03c0 	ret

0000000096033d90 <pm_overlay_handle>:
	return err;
}

static tegrabl_error_t pm_overlay_handle(void *fdt, int32_t target_nd,
										 void *fdt_buf, int32_t overlay_nd)
{
    96033d90:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
    96033d94:	910003fd 	mov	x29, sp
    96033d98:	a9025bf5 	stp	x21, x22, [sp, #32]
    96033d9c:	aa0203f5 	mov	x21, x2
	char target_path[128] = {'\0'};
    96033da0:	d2801002 	mov	x2, #0x80                  	// #128
{
    96033da4:	a90153f3 	stp	x19, x20, [sp, #16]
    96033da8:	a90363f7 	stp	x23, x24, [sp, #48]
    96033dac:	aa0003f3 	mov	x19, x0
    96033db0:	a9046bf9 	stp	x25, x26, [sp, #64]
    96033db4:	2a0103f4 	mov	w20, w1
    96033db8:	2a0303f9 	mov	w25, w3
	char target_path[128] = {'\0'};
    96033dbc:	52800001 	mov	w1, #0x0                   	// #0
    96033dc0:	910183a0 	add	x0, x29, #0x60
    96033dc4:	97ffd819 	bl	96029e28 <memset>
	tegrabl_dt_for_each_prop_of(fdt_buf, prop_nd, overlay_nd) {
    96033dc8:	2a1903e1 	mov	w1, w25
    96033dcc:	aa1503e0 	mov	x0, x21
		if (!strcmp(prop_name, "name") || !strcmp(prop_name, "phandle")
    96033dd0:	f0000058 	adrp	x24, 9603e000 <tca9539_chips+0x378>
	tegrabl_dt_for_each_prop_of(fdt_buf, prop_nd, overlay_nd) {
    96033dd4:	97fff7f3 	bl	96031da0 <fdt_first_property_offset>
		if (!strcmp(prop_name, "name") || !strcmp(prop_name, "phandle")
    96033dd8:	9111f718 	add	x24, x24, #0x47d
	tegrabl_dt_for_each_prop_of(fdt_buf, prop_nd, overlay_nd) {
    96033ddc:	2a0003f7 	mov	w23, w0
		if (!strcmp(prop_name, "name") || !strcmp(prop_name, "phandle")
    96033de0:	f000009a 	adrp	x26, 96046000 <lenfix.3236+0xf0>
	tegrabl_dt_for_each_prop_of(fdt_buf, prop_nd, overlay_nd) {
    96033de4:	36f80177 	tbz	w23, #31, 96033e10 <pm_overlay_handle+0x80>
	if (err != TEGRABL_NO_ERROR) {
		pr_error("Failed to overlay property\n");
		return err;
	}

	tegrabl_dt_for_each_child(fdt_buf, overlay_nd, child_nd) {
    96033de8:	2a1903e1 	mov	w1, w25
    96033dec:	aa1503e0 	mov	x0, x21
		child_name = (char *)fdt_get_name(fdt_buf, child_nd, NULL);
		err = tegrabl_dt_get_child_with_name(fdt, target_nd, child_name,
											 &tchild_nd);
		if (err != TEGRABL_NO_ERROR) {
			pr_error("Failed to find %s in target node %s\n", child_name,
    96033df0:	900000b8 	adrp	x24, 96047000 <__func__.3913+0x316>
	tegrabl_dt_for_each_child(fdt_buf, overlay_nd, child_nd) {
    96033df4:	97fff6ef 	bl	960319b0 <fdt_first_subnode>
			pr_error("Failed to find %s in target node %s\n", child_name,
    96033df8:	91128318 	add	x24, x24, #0x4a0
	tegrabl_dt_for_each_child(fdt_buf, overlay_nd, child_nd) {
    96033dfc:	2a0003f7 	mov	w23, w0
    96033e00:	310006ff 	cmn	w23, #0x1
    96033e04:	54000f01 	b.ne	96033fe4 <pm_overlay_handle+0x254>  // b.any
			pr_error("Failed to overlay child node\n");
			return err;
		}
	}

	return TEGRABL_NO_ERROR;
    96033e08:	52800016 	mov	w22, #0x0                   	// #0
    96033e0c:	14000039 	b	96033ef0 <pm_overlay_handle+0x160>
		prop_data = (char *)fdt_getprop_by_offset(fdt_buf, prop_nd,
    96033e10:	2a1703e1 	mov	w1, w23
    96033e14:	910153a3 	add	x3, x29, #0x54
    96033e18:	910163a2 	add	x2, x29, #0x58
    96033e1c:	aa1503e0 	mov	x0, x21
    96033e20:	97fff864 	bl	96031fb0 <fdt_getprop_by_offset>
    96033e24:	aa0003f6 	mov	x22, x0
		if (!strcmp(prop_name, "name") || !strcmp(prop_name, "phandle")
    96033e28:	f9402fa0 	ldr	x0, [x29, #88]
    96033e2c:	aa1803e1 	mov	x1, x24
    96033e30:	97ffd907 	bl	9602a24c <strcmp>
    96033e34:	34000ce0 	cbz	w0, 96033fd0 <pm_overlay_handle+0x240>
    96033e38:	f9402fa0 	ldr	x0, [x29, #88]
    96033e3c:	91246f41 	add	x1, x26, #0x91b
    96033e40:	97ffd903 	bl	9602a24c <strcmp>
    96033e44:	34000c60 	cbz	w0, 96033fd0 <pm_overlay_handle+0x240>
			|| !strcmp(prop_name, "linux,phandle")) {
    96033e48:	f9402fa0 	ldr	x0, [x29, #88]
    96033e4c:	f0000081 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    96033e50:	91245421 	add	x1, x1, #0x915
    96033e54:	97ffd8fe 	bl	9602a24c <strcmp>
    96033e58:	34000bc0 	cbz	w0, 96033fd0 <pm_overlay_handle+0x240>
		if (!strcmp(prop_name, "delete-target-property")) {
    96033e5c:	f9402fa0 	ldr	x0, [x29, #88]
    96033e60:	900000a1 	adrp	x1, 96047000 <__func__.3913+0x316>
    96033e64:	910f2c21 	add	x1, x1, #0x3cb
    96033e68:	97ffd8f9 	bl	9602a24c <strcmp>
    96033e6c:	35000500 	cbnz	w0, 96033f0c <pm_overlay_handle+0x17c>
			pr_info("Removing prop %s from %s\n", (char *)prop_data,
    96033e70:	d2800002 	mov	x2, #0x0                   	// #0
    96033e74:	2a1403e1 	mov	w1, w20
    96033e78:	aa1303e0 	mov	x0, x19
    96033e7c:	97fff7a8 	bl	96031d1c <fdt_get_name>
    96033e80:	aa1603e1 	mov	x1, x22
    96033e84:	aa0003e2 	mov	x2, x0
    96033e88:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033e8c:	910f8800 	add	x0, x0, #0x3e2
    96033e90:	97ffb9f8 	bl	96022670 <tegrabl_printf>
			fdt_err = fdt_delprop(fdt, target_nd, prop_data);
    96033e94:	aa1603e2 	mov	x2, x22
    96033e98:	2a1403e1 	mov	w1, w20
    96033e9c:	aa1303e0 	mov	x0, x19
    96033ea0:	97fffba0 	bl	96032d20 <fdt_delprop>
			if (fdt_err < 0) {
    96033ea4:	36f80960 	tbz	w0, #31, 96033fd0 <pm_overlay_handle+0x240>
				if (!strlen(target_path)) {
    96033ea8:	910183a0 	add	x0, x29, #0x60
    96033eac:	97ffd918 	bl	9602a30c <strlen>
    96033eb0:	b50000c0 	cbnz	x0, 96033ec8 <pm_overlay_handle+0x138>
					fdt_get_path(fdt, target_nd, target_path, 128);
    96033eb4:	52801003 	mov	w3, #0x80                  	// #128
    96033eb8:	910183a2 	add	x2, x29, #0x60
    96033ebc:	2a1403e1 	mov	w1, w20
    96033ec0:	aa1303e0 	mov	x0, x19
    96033ec4:	97fff8da 	bl	9603222c <fdt_get_path>
				pr_error("Failed to delete prop %s from %s\n",
    96033ec8:	aa1603e1 	mov	x1, x22
				err = TEGRABL_ERROR(TEGRABL_ERR_DEL_FAILED, 0);
    96033ecc:	52800476 	mov	w22, #0x23                  	// #35
				pr_error("Failed to delete prop %s from %s\n",
    96033ed0:	910183a2 	add	x2, x29, #0x60
    96033ed4:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033ed8:	910ffc00 	add	x0, x0, #0x3ff
    96033edc:	97ffb9e5 	bl	96022670 <tegrabl_printf>
		pr_error("Failed to overlay property\n");
    96033ee0:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
    96033ee4:	91120400 	add	x0, x0, #0x481
				err = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96033ee8:	72acacb6 	movk	w22, #0x6565, lsl #16
			pr_error("Failed to overlay child node\n");
    96033eec:	97ffb9e1 	bl	96022670 <tegrabl_printf>
}
    96033ef0:	2a1603e0 	mov	w0, w22
    96033ef4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96033ef8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96033efc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96033f00:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96033f04:	a8ce7bfd 	ldp	x29, x30, [sp], #224
    96033f08:	d65f03c0 	ret
		if (!strcmp(prop_name, "append-string-property")) {
    96033f0c:	f9402fa0 	ldr	x0, [x29, #88]
    96033f10:	900000a1 	adrp	x1, 96047000 <__func__.3913+0x316>
    96033f14:	91109021 	add	x1, x1, #0x424
    96033f18:	97ffd8cd 	bl	9602a24c <strcmp>
    96033f1c:	350002e0 	cbnz	w0, 96033f78 <pm_overlay_handle+0x1e8>
			fdt_err = fdt_appendprop(fdt, target_nd, prop_data, NULL, 0);
    96033f20:	52800004 	mov	w4, #0x0                   	// #0
    96033f24:	d2800003 	mov	x3, #0x0                   	// #0
    96033f28:	aa1603e2 	mov	x2, x22
    96033f2c:	2a1403e1 	mov	w1, w20
    96033f30:	aa1303e0 	mov	x0, x19
    96033f34:	97fffb3f 	bl	96032c30 <fdt_appendprop>
			if (fdt_err < 0) {
    96033f38:	36f804c0 	tbz	w0, #31, 96033fd0 <pm_overlay_handle+0x240>
				if (!strlen(target_path)) {
    96033f3c:	910183a0 	add	x0, x29, #0x60
    96033f40:	97ffd8f3 	bl	9602a30c <strlen>
    96033f44:	b50000c0 	cbnz	x0, 96033f5c <pm_overlay_handle+0x1cc>
					fdt_get_path(fdt, target_nd, target_path, 128);
    96033f48:	52801003 	mov	w3, #0x80                  	// #128
    96033f4c:	910183a2 	add	x2, x29, #0x60
    96033f50:	2a1403e1 	mov	w1, w20
    96033f54:	aa1303e0 	mov	x0, x19
    96033f58:	97fff8b5 	bl	9603222c <fdt_get_path>
				pr_error("Failed to append prop %s on %s\n",
    96033f5c:	aa1603e1 	mov	x1, x22
    96033f60:	910183a2 	add	x2, x29, #0x60
    96033f64:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
				err = TEGRABL_ERROR(TEGRABL_ERR_ADD_FAILED, 0);
    96033f68:	52800456 	mov	w22, #0x22                  	// #34
				pr_error("Failed to append prop %s on %s\n",
    96033f6c:	9110ec00 	add	x0, x0, #0x43b
    96033f70:	97ffb9c0 	bl	96022670 <tegrabl_printf>
    96033f74:	17ffffdb 	b	96033ee0 <pm_overlay_handle+0x150>
		fdt_err = fdt_setprop(fdt, target_nd, prop_name, prop_data,
    96033f78:	b94057a4 	ldr	w4, [x29, #84]
    96033f7c:	aa1603e3 	mov	x3, x22
    96033f80:	f9402fa2 	ldr	x2, [x29, #88]
    96033f84:	2a1403e1 	mov	w1, w20
    96033f88:	aa1303e0 	mov	x0, x19
    96033f8c:	97fffaee 	bl	96032b44 <fdt_setprop>
		if (fdt_err) {
    96033f90:	34000200 	cbz	w0, 96033fd0 <pm_overlay_handle+0x240>
			if (!strlen(target_path)) {
    96033f94:	910183a0 	add	x0, x29, #0x60
    96033f98:	97ffd8dd 	bl	9602a30c <strlen>
    96033f9c:	b50000c0 	cbnz	x0, 96033fb4 <pm_overlay_handle+0x224>
				fdt_get_path(fdt, target_nd, target_path, 128);
    96033fa0:	52801003 	mov	w3, #0x80                  	// #128
    96033fa4:	910183a2 	add	x2, x29, #0x60
    96033fa8:	2a1403e1 	mov	w1, w20
    96033fac:	aa1303e0 	mov	x0, x19
    96033fb0:	97fff89f 	bl	9603222c <fdt_get_path>
			pr_error("Failed to update prop %s on %s\n", prop_name,
    96033fb4:	f9402fa1 	ldr	x1, [x29, #88]
    96033fb8:	910183a2 	add	x2, x29, #0x60
    96033fbc:	900000a0 	adrp	x0, 96047000 <__func__.3913+0x316>
			err = TEGRABL_ERROR(TEGRABL_ERR_SET_FAILED, 0);
    96033fc0:	52800496 	mov	w22, #0x24                  	// #36
			pr_error("Failed to update prop %s on %s\n", prop_name,
    96033fc4:	91117800 	add	x0, x0, #0x45e
    96033fc8:	97ffb9aa 	bl	96022670 <tegrabl_printf>
    96033fcc:	17ffffc5 	b	96033ee0 <pm_overlay_handle+0x150>
	tegrabl_dt_for_each_prop_of(fdt_buf, prop_nd, overlay_nd) {
    96033fd0:	2a1703e1 	mov	w1, w23
    96033fd4:	aa1503e0 	mov	x0, x21
    96033fd8:	97fff780 	bl	96031dd8 <fdt_next_property_offset>
    96033fdc:	2a0003f7 	mov	w23, w0
    96033fe0:	17ffff81 	b	96033de4 <pm_overlay_handle+0x54>
		child_name = (char *)fdt_get_name(fdt_buf, child_nd, NULL);
    96033fe4:	d2800002 	mov	x2, #0x0                   	// #0
    96033fe8:	2a1703e1 	mov	w1, w23
    96033fec:	aa1503e0 	mov	x0, x21
    96033ff0:	97fff74b 	bl	96031d1c <fdt_get_name>
		err = tegrabl_dt_get_child_with_name(fdt, target_nd, child_name,
    96033ff4:	910183a3 	add	x3, x29, #0x60
		child_name = (char *)fdt_get_name(fdt_buf, child_nd, NULL);
    96033ff8:	aa0003f6 	mov	x22, x0
		err = tegrabl_dt_get_child_with_name(fdt, target_nd, child_name,
    96033ffc:	aa0003e2 	mov	x2, x0
    96034000:	2a1403e1 	mov	w1, w20
    96034004:	aa1303e0 	mov	x0, x19
    96034008:	97fff3b9 	bl	96030eec <tegrabl_dt_get_child_with_name>
		if (err != TEGRABL_NO_ERROR) {
    9603400c:	340001c0 	cbz	w0, 96034044 <pm_overlay_handle+0x2b4>
			pr_error("Failed to find %s in target node %s\n", child_name,
    96034010:	d2800002 	mov	x2, #0x0                   	// #0
    96034014:	2a1403e1 	mov	w1, w20
    96034018:	aa1303e0 	mov	x0, x19
    9603401c:	97fff740 	bl	96031d1c <fdt_get_name>
    96034020:	aa1603e1 	mov	x1, x22
    96034024:	aa0003e2 	mov	x2, x0
    96034028:	aa1803e0 	mov	x0, x24
    9603402c:	97ffb991 	bl	96022670 <tegrabl_printf>
	tegrabl_dt_for_each_child(fdt_buf, overlay_nd, child_nd) {
    96034030:	2a1703e1 	mov	w1, w23
    96034034:	aa1503e0 	mov	x0, x21
    96034038:	97fff66b 	bl	960319e4 <fdt_next_subnode>
    9603403c:	2a0003f7 	mov	w23, w0
    96034040:	17ffff70 	b	96033e00 <pm_overlay_handle+0x70>
		err = pm_overlay_handle(fdt, tchild_nd, fdt_buf, child_nd);
    96034044:	b94063a1 	ldr	w1, [x29, #96]
    96034048:	2a1703e3 	mov	w3, w23
    9603404c:	aa1503e2 	mov	x2, x21
    96034050:	aa1303e0 	mov	x0, x19
    96034054:	97ffff4f 	bl	96033d90 <pm_overlay_handle>
    96034058:	2a0003f6 	mov	w22, w0
		if (err != TEGRABL_NO_ERROR) {
    9603405c:	34fffea0 	cbz	w0, 96034030 <pm_overlay_handle+0x2a0>
			pr_error("Failed to overlay child node\n");
    96034060:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034064:	91132000 	add	x0, x0, #0x4c8
    96034068:	17ffffa1 	b	96033eec <pm_overlay_handle+0x15c>

000000009603406c <pm_get_fabid>:
{
    9603406c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96034070:	910003fd 	mov	x29, sp
    96034074:	f9000bf3 	str	x19, [sp, #16]
    96034078:	aa0003f3 	mov	x19, x0
	if (strlen(board_id) < 13) {
    9603407c:	97ffd8a4 	bl	9602a30c <strlen>
    96034080:	f100301f 	cmp	x0, #0xc
    96034084:	54000329 	b.ls	960340e8 <pm_get_fabid+0x7c>  // b.plast
    96034088:	d2800003 	mov	x3, #0x0                   	// #0
	int fabid = 0;
    9603408c:	52800000 	mov	w0, #0x0                   	// #0
		fabid = fabid * 100 + id;
    96034090:	52800c84 	mov	w4, #0x64                  	// #100
		id = board_id[i + 10];
    96034094:	8b030261 	add	x1, x19, x3
    96034098:	39402822 	ldrb	w2, [x1, #10]
		if (id >= '0' && id <= '9') {
    9603409c:	5100c041 	sub	w1, w2, #0x30
    960340a0:	7100243f 	cmp	w1, #0x9
    960340a4:	540000a9 	b.ls	960340b8 <pm_get_fabid+0x4c>  // b.plast
		} else if (id >= 'a' && id <= 'z') {
    960340a8:	51018441 	sub	w1, w2, #0x61
    960340ac:	7100643f 	cmp	w1, #0x19
    960340b0:	54000128 	b.hi	960340d4 <pm_get_fabid+0x68>  // b.pmore
			id = id - 'a' + 10;
    960340b4:	51015c41 	sub	w1, w2, #0x57
    960340b8:	91000463 	add	x3, x3, #0x1
		fabid = fabid * 100 + id;
    960340bc:	1b040400 	madd	w0, w0, w4, w1
	for (i = 0; i < 3; i++) {
    960340c0:	f1000c7f 	cmp	x3, #0x3
    960340c4:	54fffe81 	b.ne	96034094 <pm_get_fabid+0x28>  // b.any
}
    960340c8:	f9400bf3 	ldr	x19, [sp, #16]
    960340cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960340d0:	d65f03c0 	ret
		} else if (id >= 'A' && id <= 'Z') {
    960340d4:	51010441 	sub	w1, w2, #0x41
    960340d8:	7100643f 	cmp	w1, #0x19
    960340dc:	54000068 	b.hi	960340e8 <pm_get_fabid+0x7c>  // b.pmore
			id = id - 'A' + 10;
    960340e0:	5100dc41 	sub	w1, w2, #0x37
    960340e4:	17fffff5 	b	960340b8 <pm_get_fabid+0x4c>
		return -1;
    960340e8:	12800000 	mov	w0, #0xffffffff            	// #-1
    960340ec:	17fffff7 	b	960340c8 <pm_get_fabid+0x5c>

00000000960340f0 <match_id>:
{
    960340f0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    960340f4:	910003fd 	mov	x29, sp
    960340f8:	a90153f3 	stp	x19, x20, [sp, #16]
    960340fc:	aa0103f3 	mov	x19, x1
    96034100:	a9025bf5 	stp	x21, x22, [sp, #32]
    96034104:	a90363f7 	stp	x23, x24, [sp, #48]
    96034108:	a9046bf9 	stp	x25, x26, [sp, #64]
    9603410c:	aa0003fa 	mov	x26, x0
    96034110:	a90573fb 	stp	x27, x28, [sp, #80]
	int id_len = strlen(id);
    96034114:	aa0103e0 	mov	x0, x1
    96034118:	97ffd87d 	bl	9602a30c <strlen>
    9603411c:	2a0003e2 	mov	w2, w0
	if ((id_len > 2) && (id_str[0] == '>') && (id_str[1] == '=')) {
    96034120:	7100081f 	cmp	w0, #0x2
    96034124:	540002ad 	b.le	96034178 <match_id+0x88>
    96034128:	39400261 	ldrb	w1, [x19]
    9603412c:	7100f83f 	cmp	w1, #0x3e
    96034130:	54000261 	b.ne	9603417c <match_id+0x8c>  // b.any
    96034134:	39400661 	ldrb	w1, [x19, #1]
    96034138:	7100f43f 	cmp	w1, #0x3d
    9603413c:	54000201 	b.ne	9603417c <match_id+0x8c>  // b.any
		id_str += 2;
    96034140:	91000a73 	add	x19, x19, #0x2
		id_len -= 2;
    96034144:	51000815 	sub	w21, w0, #0x2
		match_type = PLUGIN_MANAGER_MATCH_GE;
    96034148:	52800074 	mov	w20, #0x3                   	// #3
		|| (match_type == PLUGIN_MANAGER_MATCH_LE) || (match_type == PLUGIN_MANAGER_MATCH_LT)) {
    9603414c:	7100169f 	cmp	w20, #0x5
	if ((match_type == PLUGIN_MANAGER_MATCH_GE) || (match_type == PLUGIN_MANAGER_MATCH_GT)
    96034150:	51000a80 	sub	w0, w20, #0x2
		|| (match_type == PLUGIN_MANAGER_MATCH_LE) || (match_type == PLUGIN_MANAGER_MATCH_LT)) {
    96034154:	1a9f17fc 	cset	w28, eq  // eq = none
	if ((match_type == PLUGIN_MANAGER_MATCH_GE) || (match_type == PLUGIN_MANAGER_MATCH_GT)
    96034158:	71000c1f 	cmp	w0, #0x3
    9603415c:	54000688 	b.hi	9603422c <match_id+0x13c>  // b.pmore
		fabid = pm_get_fabid(id_str);
    96034160:	aa1303e0 	mov	x0, x19
    96034164:	97ffffc2 	bl	9603406c <pm_get_fabid>
    96034168:	2a0003f6 	mov	w22, w0
		if (fabid < 0) {
    9603416c:	36f80620 	tbz	w0, #31, 96034230 <match_id+0x140>
	bool matched = false;
    96034170:	52800018 	mov	w24, #0x0                   	// #0
    96034174:	1400004a 	b	9603429c <match_id+0x1ac>
	if ((id_len > 1) && (id_str[0] == '>')) {
    96034178:	54000561 	b.ne	96034224 <match_id+0x134>  // b.any
    9603417c:	39400261 	ldrb	w1, [x19]
    96034180:	7100f83f 	cmp	w1, #0x3e
    96034184:	540000a1 	b.ne	96034198 <match_id+0xa8>  // b.any
		id_str += 1;
    96034188:	91000673 	add	x19, x19, #0x1
		id_len -= 1;
    9603418c:	51000415 	sub	w21, w0, #0x1
		match_type = PLUGIN_MANAGER_MATCH_GT;
    96034190:	52800054 	mov	w20, #0x2                   	// #2
		goto match_type_done;
    96034194:	17ffffee 	b	9603414c <match_id+0x5c>
	if ((id_len > 2) && (id_str[0] == '<') && (id_str[1] == '=')) {
    96034198:	7100081f 	cmp	w0, #0x2
    9603419c:	5400014d 	b.le	960341c4 <match_id+0xd4>
    960341a0:	7100f03f 	cmp	w1, #0x3c
    960341a4:	540001e1 	b.ne	960341e0 <match_id+0xf0>  // b.any
    960341a8:	39400661 	ldrb	w1, [x19, #1]
    960341ac:	7100f43f 	cmp	w1, #0x3d
    960341b0:	54000101 	b.ne	960341d0 <match_id+0xe0>  // b.any
		id_str += 2;
    960341b4:	91000a73 	add	x19, x19, #0x2
		id_len -= 2;
    960341b8:	51000815 	sub	w21, w0, #0x2
		match_type = PLUGIN_MANAGER_MATCH_LE;
    960341bc:	528000b4 	mov	w20, #0x5                   	// #5
		goto match_type_done;
    960341c0:	17ffffe3 	b	9603414c <match_id+0x5c>
	if ((id_len > 1) && (id_str[0] == '<')) {
    960341c4:	54000301 	b.ne	96034224 <match_id+0x134>  // b.any
    960341c8:	7100f03f 	cmp	w1, #0x3c
    960341cc:	540000a1 	b.ne	960341e0 <match_id+0xf0>  // b.any
		id_str += 1;
    960341d0:	91000673 	add	x19, x19, #0x1
		id_len -= 1;
    960341d4:	51000415 	sub	w21, w0, #0x1
		match_type = PLUGIN_MANAGER_MATCH_LT;
    960341d8:	52800094 	mov	w20, #0x4                   	// #4
		goto match_type_done;
    960341dc:	17ffffdc 	b	9603414c <match_id+0x5c>
	if ((id_len > 1) && (id_str[0] == '^')) {
    960341e0:	7101783f 	cmp	w1, #0x5e
    960341e4:	54000201 	b.ne	96034224 <match_id+0x134>  // b.any
		id_str += 1;
    960341e8:	91000673 	add	x19, x19, #0x1
		id_len -= 1;
    960341ec:	51000415 	sub	w21, w0, #0x1
			match_type = PLUGIN_MANAGER_MATCH_PARTIAL;
    960341f0:	52800034 	mov	w20, #0x1                   	// #1
    960341f4:	17ffffd6 	b	9603414c <match_id+0x5c>
    960341f8:	91000421 	add	x1, x1, #0x1
		if (id_str[i] == '*') {
    960341fc:	8b010263 	add	x3, x19, x1
    96034200:	385ff063 	ldurb	w3, [x3, #-1]
    96034204:	7100a87f 	cmp	w3, #0x2a
    96034208:	54ffff40 	b.eq	960341f0 <match_id+0x100>  // b.none
    9603420c:	2a0103f5 	mov	w21, w1
	for (i = 0; i < id_len; i++) {
    96034210:	6b02003f 	cmp	w1, w2
    96034214:	54ffff2b 	b.lt	960341f8 <match_id+0x108>  // b.tstop
match_type_done:
    96034218:	2a0003f5 	mov	w21, w0
	pm_match_type_t match_type = PLUGIN_MANAGER_MATCH_EXACT;
    9603421c:	52800014 	mov	w20, #0x0                   	// #0
match_type_done:
    96034220:	17ffffcb 	b	9603414c <match_id+0x5c>
    96034224:	d2800001 	mov	x1, #0x0                   	// #0
    96034228:	17fffff9 	b	9603420c <match_id+0x11c>
	fabid = 0;
    9603422c:	52800016 	mov	w22, #0x0                   	// #0
	err = tegrabl_dt_get_node_with_path(fdt, "/chosen/plugin-manager/ids", &boardid_node);
    96034230:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034234:	9101d3a2 	add	x2, x29, #0x74
    96034238:	910d3c21 	add	x1, x1, #0x34f
    9603423c:	aa1a03e0 	mov	x0, x26
    96034240:	97fff44f 	bl	9603137c <tegrabl_dt_get_node_with_path>
	if (err != TEGRABL_NO_ERROR) {
    96034244:	340000a0 	cbz	w0, 96034258 <match_id+0x168>
		pr_error("Failed to find node plugin-manager/ids\n");
    96034248:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603424c:	910da800 	add	x0, x0, #0x36a
    96034250:	97ffb908 	bl	96022670 <tegrabl_printf>
    96034254:	17ffffc7 	b	96034170 <match_id+0x80>
	tegrabl_dt_for_each_prop_of(fdt, prop_node, boardid_node) {
    96034258:	b94077a1 	ldr	w1, [x29, #116]
    9603425c:	aa1a03e0 	mov	x0, x26
			if (!memcmp(id_str, board_id, id_len)) {
    96034260:	93407ebb 	sxtw	x27, w21
	bool matched = false;
    96034264:	52800018 	mov	w24, #0x0                   	// #0
	tegrabl_dt_for_each_prop_of(fdt, prop_node, boardid_node) {
    96034268:	97fff6ce 	bl	96031da0 <fdt_first_property_offset>
    9603426c:	2a0003f9 	mov	w25, w0
    96034270:	37f80179 	tbnz	w25, #31, 9603429c <match_id+0x1ac>
		fdt_getprop_by_offset(fdt, prop_node, (const char **)&board_id, NULL);
    96034274:	d2800003 	mov	x3, #0x0                   	// #0
    96034278:	9101e3a2 	add	x2, x29, #0x78
    9603427c:	2a1903e1 	mov	w1, w25
    96034280:	aa1a03e0 	mov	x0, x26
    96034284:	97fff74b 	bl	96031fb0 <fdt_getprop_by_offset>
		if (!board_id) {
    96034288:	f9403fa0 	ldr	x0, [x29, #120]
    9603428c:	b5000180 	cbnz	x0, 960342bc <match_id+0x1cc>
			pr_error("Failed to read prop on /chosen/plugin-manager/ids\n");
    96034290:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034294:	910e5400 	add	x0, x0, #0x395
    96034298:	97ffb8f6 	bl	96022670 <tegrabl_printf>
}
    9603429c:	2a1803e0 	mov	w0, w24
    960342a0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960342a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960342a8:	a94363f7 	ldp	x23, x24, [sp, #48]
    960342ac:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960342b0:	a94573fb 	ldp	x27, x28, [sp, #80]
    960342b4:	a8c87bfd 	ldp	x29, x30, [sp], #128
    960342b8:	d65f03c0 	ret
		boardid_len = strlen(board_id);
    960342bc:	97ffd814 	bl	9602a30c <strlen>
    960342c0:	aa0003e1 	mov	x1, x0
		board_fabid = pm_get_fabid(board_id);
    960342c4:	f9403fa0 	ldr	x0, [x29, #120]
		boardid_len = strlen(board_id);
    960342c8:	f90037a1 	str	x1, [x29, #104]
		board_fabid = pm_get_fabid(board_id);
    960342cc:	97ffff68 	bl	9603406c <pm_get_fabid>
    960342d0:	2a0003f7 	mov	w23, w0
		switch (match_type) {
    960342d4:	7100069f 	cmp	w20, #0x1
    960342d8:	f94037a1 	ldr	x1, [x29, #104]
    960342dc:	54000220 	b.eq	96034320 <match_id+0x230>  // b.none
    960342e0:	34000074 	cbz	w20, 960342ec <match_id+0x1fc>
    960342e4:	7100169f 	cmp	w20, #0x5
    960342e8:	54000229 	b.ls	9603432c <match_id+0x23c>  // b.plast
			if (boardid_len != id_len) {
    960342ec:	6b0102bf 	cmp	w21, w1
    960342f0:	540000e1 	b.ne	9603430c <match_id+0x21c>  // b.any
			if (!memcmp(id_str, board_id, id_len)) {
    960342f4:	f9403fa1 	ldr	x1, [x29, #120]
    960342f8:	aa1b03e2 	mov	x2, x27
    960342fc:	aa1303e0 	mov	x0, x19
    96034300:	97ffd75c 	bl	9602a070 <memcmp>
    96034304:	35000040 	cbnz	w0, 9603430c <match_id+0x21c>
				matched = true;
    96034308:	52800038 	mov	w24, #0x1                   	// #1
	tegrabl_dt_for_each_prop_of(fdt, prop_node, boardid_node) {
    9603430c:	2a1903e1 	mov	w1, w25
    96034310:	aa1a03e0 	mov	x0, x26
    96034314:	97fff6b1 	bl	96031dd8 <fdt_next_property_offset>
    96034318:	2a0003f9 	mov	w25, w0
    9603431c:	17ffffd5 	b	96034270 <match_id+0x180>
			if (boardid_len < id_len) {
    96034320:	6b0102bf 	cmp	w21, w1
    96034324:	54ffff4c 	b.gt	9603430c <match_id+0x21c>
    96034328:	17fffff3 	b	960342f4 <match_id+0x204>
			if (boardid_len < 13) {
    9603432c:	7100303f 	cmp	w1, #0xc
    96034330:	54fffeed 	b.le	9603430c <match_id+0x21c>
			if (memcmp(id_str, board_id, 10)) {
    96034334:	f9403fa1 	ldr	x1, [x29, #120]
    96034338:	d2800142 	mov	x2, #0xa                   	// #10
    9603433c:	aa1303e0 	mov	x0, x19
    96034340:	97ffd74c 	bl	9602a070 <memcmp>
    96034344:	35fffe40 	cbnz	w0, 9603430c <match_id+0x21c>
			if (board_fabid < 0) {
    96034348:	37fffe37 	tbnz	w23, #31, 9603430c <match_id+0x21c>
			if ((board_fabid > fabid) &&
    9603434c:	6b1702df 	cmp	w22, w23
    96034350:	7a42ba80 	ccmp	w20, #0x2, #0x0, lt  // lt = tstop
    96034354:	54fffda0 	b.eq	96034308 <match_id+0x218>  // b.none
			} else if ((board_fabid >= fabid) &&
    96034358:	6b1702df 	cmp	w22, w23
    9603435c:	7a43da80 	ccmp	w20, #0x3, #0x0, le
    96034360:	54fffd40 	b.eq	96034308 <match_id+0x218>  // b.none
			} else if ((board_fabid < fabid) &&
    96034364:	6b1702df 	cmp	w22, w23
    96034368:	7a44ca80 	ccmp	w20, #0x4, #0x0, gt
    9603436c:	54fffce0 	b.eq	96034308 <match_id+0x218>  // b.none
			} else if ((board_fabid <= fabid) &&
    96034370:	7100039f 	cmp	w28, #0x0
    96034374:	7a5712c1 	ccmp	w22, w23, #0x1, ne  // ne = any
    96034378:	54fffc8a 	b.ge	96034308 <match_id+0x218>  // b.tcont
    9603437c:	17ffffe4 	b	9603430c <match_id+0x21c>

0000000096034380 <match_fuse_info>:
    96034380:	52800000 	mov	w0, #0x0                   	// #0
    96034384:	d65f03c0 	ret

0000000096034388 <match_configs>:
{
    96034388:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9603438c:	910003fd 	mov	x29, sp
    96034390:	a90153f3 	stp	x19, x20, [sp, #16]
    96034394:	aa0103f4 	mov	x20, x1
	uint32_t pm_val = *(uint32_t *)param;
    96034398:	b9400053 	ldr	w19, [x2]
	err = tegrabl_dt_get_node_with_path(fdt, "/chosen/plugin-manager/configs",
    9603439c:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
{
    960343a0:	f90013f5 	str	x21, [sp, #32]
	err = tegrabl_dt_get_node_with_path(fdt, "/chosen/plugin-manager/configs",
    960343a4:	910b5c21 	add	x1, x1, #0x2d7
    960343a8:	9100f3a2 	add	x2, x29, #0x3c
{
    960343ac:	aa0003f5 	mov	x21, x0
	err = tegrabl_dt_get_node_with_path(fdt, "/chosen/plugin-manager/configs",
    960343b0:	97fff3f3 	bl	9603137c <tegrabl_dt_get_node_with_path>
	if (err != TEGRABL_NO_ERROR) {
    960343b4:	34000120 	cbz	w0, 960343d8 <match_configs+0x50>
		pr_warn("Failed to access plugin-manager/configs\n");
    960343b8:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960343bc:	910bd800 	add	x0, x0, #0x2f6
    960343c0:	97ffb8ac 	bl	96022670 <tegrabl_printf>
		return false;
    960343c4:	52800000 	mov	w0, #0x0                   	// #0
}
    960343c8:	a94153f3 	ldp	x19, x20, [sp, #16]
    960343cc:	f94013f5 	ldr	x21, [sp, #32]
    960343d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960343d4:	d65f03c0 	ret
	return tegrabl_dt_get_prop_by_idx(fdt, node, prop, U32_SZ, 0, res);
    960343d8:	b9403fa1 	ldr	w1, [x29, #60]
    960343dc:	9100e3a5 	add	x5, x29, #0x38
    960343e0:	52800004 	mov	w4, #0x0                   	// #0
    960343e4:	d2800083 	mov	x3, #0x4                   	// #4
    960343e8:	aa1403e2 	mov	x2, x20
    960343ec:	aa1503e0 	mov	x0, x21
    960343f0:	97fff2ef 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
	if (err != TEGRABL_NO_ERROR) {
    960343f4:	340000c0 	cbz	w0, 9603440c <match_configs+0x84>
		pr_warn("Failed to read plugin-manager/configs/%s\n", config_name);
    960343f8:	aa1403e1 	mov	x1, x20
    960343fc:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034400:	910c8800 	add	x0, x0, #0x322
    96034404:	97ffb89b 	bl	96022670 <tegrabl_printf>
    96034408:	17ffffef 	b	960343c4 <match_configs+0x3c>
	board_val = (board_val & 0xFF) & mask;
    9603440c:	3940e3a0 	ldrb	w0, [x29, #56]
    96034410:	0a532000 	and	w0, w0, w19, lsr #8
	if (board_val == value) {
    96034414:	6b33001f 	cmp	w0, w19, uxtb
    96034418:	1a9f17e0 	cset	w0, eq  // eq = none
    9603441c:	17ffffeb 	b	960343c8 <match_configs+0x40>

0000000096034420 <tegrabl_plugin_manager_overlay>:

	return err;
}

tegrabl_error_t tegrabl_plugin_manager_overlay(void *fdt)
{
    96034420:	a9ac7bfd 	stp	x29, x30, [sp, #-320]!
    96034424:	910003fd 	mov	x29, sp
    96034428:	a90153f3 	stp	x19, x20, [sp, #16]

	pr_info("Plugin-manager override starting\n");

	/* TODO: add connection manager function here */

	pm_node = fdt_path_offset(fdt, "/plugin-manager");
    9603442c:	f0000093 	adrp	x19, 96047000 <__func__.3913+0x316>
{
    96034430:	a9025bf5 	stp	x21, x22, [sp, #32]
    96034434:	aa0003f6 	mov	x22, x0
    96034438:	a90363f7 	stp	x23, x24, [sp, #48]
	pr_info("Plugin-manager override starting\n");
    9603443c:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
{
    96034440:	a9046bf9 	stp	x25, x26, [sp, #64]
	pr_info("Plugin-manager override starting\n");
    96034444:	91140400 	add	x0, x0, #0x501
{
    96034448:	a90573fb 	stp	x27, x28, [sp, #80]
	pr_info("Plugin-manager override starting\n");
    9603444c:	97ffb889 	bl	96022670 <tegrabl_printf>
	pm_node = fdt_path_offset(fdt, "/plugin-manager");
    96034450:	9107a661 	add	x1, x19, #0x1e9
    96034454:	aa1603e0 	mov	x0, x22
    96034458:	97fff737 	bl	96032134 <fdt_path_offset>
    9603445c:	f9003fb3 	str	x19, [x29, #120]
	if (pm_node <= 0) {
    96034460:	7100001f 	cmp	w0, #0x0
    96034464:	540001cc 	b.gt	9603449c <tegrabl_plugin_manager_overlay+0x7c>
		pr_warn("Failed to find /plugin-manager in DT\n");
    96034468:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603446c:	91149800 	add	x0, x0, #0x526

	err = tegrabl_dt_get_prop_string(fdt, pm_node, "status",
									 (const char **)&status);
	if (err != TEGRABL_NO_ERROR && err != TEGRABL_ERR_NOT_FOUND)  {
		pr_error("Failed to get status on /plugin-manager\n");
		return TEGRABL_NO_ERROR;
    96034470:	52800013 	mov	w19, #0x0                   	// #0
		pr_error("Failed to get status on /plugin-manager\n");
    96034474:	97ffb87f 	bl	96022670 <tegrabl_printf>
	if (fdt_buf) {
		tegrabl_free(fdt_buf);
	}

	return err;
}
    96034478:	910003bf 	mov	sp, x29
    9603447c:	2a1303e0 	mov	w0, w19
    96034480:	a94153f3 	ldp	x19, x20, [sp, #16]
    96034484:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96034488:	a94363f7 	ldp	x23, x24, [sp, #48]
    9603448c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96034490:	a94573fb 	ldp	x27, x28, [sp, #80]
    96034494:	a8d47bfd 	ldp	x29, x30, [sp], #320
    96034498:	d65f03c0 	ret
	err = tegrabl_dt_get_prop_string(fdt, pm_node, "status",
    9603449c:	90000054 	adrp	x20, 9603c000 <__func__.4414+0x9>
    960344a0:	2a0003e1 	mov	w1, w0
    960344a4:	2a0003f7 	mov	w23, w0
    960344a8:	9102e3a3 	add	x3, x29, #0xb8
    960344ac:	9123aa82 	add	x2, x20, #0x8ea
    960344b0:	aa1603e0 	mov	x0, x22
    960344b4:	97fff321 	bl	96031138 <tegrabl_dt_get_prop_string>
    960344b8:	f9003bb4 	str	x20, [x29, #112]
    960344bc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR && err != TEGRABL_ERR_NOT_FOUND)  {
    960344c0:	7100001f 	cmp	w0, #0x0
    960344c4:	1a9f07e0 	cset	w0, ne  // ne = any
    960344c8:	7100367f 	cmp	w19, #0xd
    960344cc:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
    960344d0:	34000080 	cbz	w0, 960344e0 <tegrabl_plugin_manager_overlay+0xc0>
		pr_error("Failed to get status on /plugin-manager\n");
    960344d4:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960344d8:	91153c00 	add	x0, x0, #0x54f
    960344dc:	17ffffe5 	b	96034470 <tegrabl_plugin_manager_overlay+0x50>
	if (err == TEGRABL_NO_ERROR) {
    960344e0:	350001f3 	cbnz	w19, 9603451c <tegrabl_plugin_manager_overlay+0xfc>
		if (strcmp(status, "okay") && strcmp(status, "ok")) {
    960344e4:	f9405fa0 	ldr	x0, [x29, #184]
    960344e8:	90000041 	adrp	x1, 9603c000 <__func__.4414+0x9>
    960344ec:	9123c421 	add	x1, x1, #0x8f1
    960344f0:	97ffd757 	bl	9602a24c <strcmp>
    960344f4:	34000140 	cbz	w0, 9603451c <tegrabl_plugin_manager_overlay+0xfc>
    960344f8:	f9405fa0 	ldr	x0, [x29, #184]
    960344fc:	d0000081 	adrp	x1, 96046000 <lenfix.3236+0xf0>
    96034500:	91221c21 	add	x1, x1, #0x887
    96034504:	97ffd752 	bl	9602a24c <strcmp>
    96034508:	340000a0 	cbz	w0, 9603451c <tegrabl_plugin_manager_overlay+0xfc>
			pr_warn("/plugin-manager is disabled\n");
    9603450c:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034510:	9115ec00 	add	x0, x0, #0x57b
    96034514:	97ffb857 	bl	96022670 <tegrabl_printf>
			return TEGRABL_NO_ERROR;
    96034518:	17ffffd8 	b	96034478 <tegrabl_plugin_manager_overlay+0x58>
	fdt_size = fdt_totalsize(fdt);
    9603451c:	b94006c0 	ldr	w0, [x22, #4]
	return (_B(0) << 24) | (_B(1) << 16) | (_B(2) << 8) | _B(3);
    96034520:	d3505c02 	ubfx	x2, x0, #16, #8
    96034524:	d3483c15 	ubfx	x21, x0, #8, #8
    96034528:	53185c42 	lsl	w2, w2, #8
    9603452c:	2a154055 	orr	w21, w2, w21, lsl #16
    96034530:	53187c02 	lsr	w2, w0, #24
    96034534:	2a006040 	orr	w0, w2, w0, lsl #24
    96034538:	2a0002b5 	orr	w21, w21, w0
	fdt_buf = (void *)tegrabl_malloc(fdt_size);
    9603453c:	93407ea0 	sxtw	x0, w21
    96034540:	97ffc94e 	bl	96026a78 <tegrabl_malloc>
    96034544:	aa0003f4 	mov	x20, x0
	if (!fdt_buf) {
    96034548:	b50000e0 	cbnz	x0, 96034564 <tegrabl_plugin_manager_overlay+0x144>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    9603454c:	52800073 	mov	w19, #0x3                   	// #3
		pr_error("Not enough memory\n");
    96034550:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96034554:	72acacb3 	movk	w19, #0x6565, lsl #16
		pr_error("Not enough memory\n");
    96034558:	91166c00 	add	x0, x0, #0x59b
    9603455c:	97ffb845 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_NO_MEMORY, 0);
    96034560:	17ffffc6 	b	96034478 <tegrabl_plugin_manager_overlay+0x58>
	fdt_err = fdt_open_into(fdt, fdt_buf, fdt_size);
    96034564:	aa0003e1 	mov	x1, x0
    96034568:	2a1503e2 	mov	w2, w21
    9603456c:	aa1603e0 	mov	x0, x22
    96034570:	97fffa62 	bl	96032ef8 <fdt_open_into>
	if (fdt_err) {
    96034574:	34000120 	cbz	w0, 96034598 <tegrabl_plugin_manager_overlay+0x178>
		err = TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96034578:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("Failed to duplicate DTB\n");
    9603457c:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034580:	9116c400 	add	x0, x0, #0x5b1
    96034584:	97ffb83b 	bl	96022670 <tegrabl_printf>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96034588:	72acacb3 	movk	w19, #0x6565, lsl #16
		tegrabl_free(fdt_buf);
    9603458c:	aa1403e0 	mov	x0, x20
    96034590:	97ffc94a 	bl	96026ab8 <tegrabl_free>
	return err;
    96034594:	17ffffb9 	b	96034478 <tegrabl_plugin_manager_overlay+0x58>
	tegrabl_dt_for_each_child(fdt_buf, pm_node, fr_nd) {
    96034598:	2a1703e1 	mov	w1, w23
    9603459c:	aa1403e0 	mov	x0, x20
    960345a0:	97fff504 	bl	960319b0 <fdt_first_subnode>
    960345a4:	2a0003f5 	mov	w21, w0
				if (!strcmp(match_iter->name, "config-names")) {
    960345a8:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960345ac:	911bf400 	add	x0, x0, #0x6fd
    960345b0:	f90033a0 	str	x0, [x29, #96]
	tegrabl_dt_for_each_child(fdt_buf, pm_node, fr_nd) {
    960345b4:	310006bf 	cmn	w21, #0x1
    960345b8:	54000140 	b.eq	960345e0 <tegrabl_plugin_manager_overlay+0x1c0>  // b.none
		err = tegrabl_dt_is_device_available(fdt_buf, fr_nd, &available);
    960345bc:	9102bfa2 	add	x2, x29, #0xaf
    960345c0:	2a1503e1 	mov	w1, w21
    960345c4:	aa1403e0 	mov	x0, x20
    960345c8:	97fff387 	bl	960313e4 <tegrabl_dt_is_device_available>
    960345cc:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    960345d0:	34000200 	cbz	w0, 96034610 <tegrabl_plugin_manager_overlay+0x1f0>
			pr_error("Failed to get fragment status\n");
    960345d4:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960345d8:	91173400 	add	x0, x0, #0x5cd
    960345dc:	97ffb825 	bl	96022670 <tegrabl_printf>
	pm_node = fdt_path_offset(fdt, "/plugin-manager");
    960345e0:	f9403fa0 	ldr	x0, [x29, #120]
    960345e4:	9107a401 	add	x1, x0, #0x1e9
    960345e8:	aa1603e0 	mov	x0, x22
    960345ec:	97fff6d2 	bl	96032134 <fdt_path_offset>
    960345f0:	2a0003f7 	mov	w23, w0
	if (pm_node <= 0) {
    960345f4:	7100001f 	cmp	w0, #0x0
    960345f8:	5400250c 	b.gt	96034a98 <tegrabl_plugin_manager_overlay+0x678>
		pr_warn("Failed to find /plugin-manager in DT\n");
    960345fc:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
		err = TEGRABL_ERROR(TEGRABL_ERR_NOT_FOUND, 0);
    96034600:	528001b3 	mov	w19, #0xd                   	// #13
		pr_warn("Failed to find /plugin-manager in DT\n");
    96034604:	91149800 	add	x0, x0, #0x526
    96034608:	97ffb81a 	bl	96022670 <tegrabl_printf>
    9603460c:	17ffffdf 	b	96034588 <tegrabl_plugin_manager_overlay+0x168>
		if (!available) {
    96034610:	3942bfa0 	ldrb	w0, [x29, #175]
    96034614:	34001460 	cbz	w0, 960348a0 <tegrabl_plugin_manager_overlay+0x480>
	fr_name = fdt_get_name(fdt_buf, fr_nd, NULL);
    96034618:	d2800002 	mov	x2, #0x0                   	// #0
    9603461c:	2a1503e1 	mov	w1, w21
    96034620:	aa1403e0 	mov	x0, x20
    96034624:	97fff5be 	bl	96031d1c <fdt_get_name>
    96034628:	aa0003f9 	mov	x25, x0
	if (!fr_name) {
    9603462c:	b5000100 	cbnz	x0, 9603464c <tegrabl_plugin_manager_overlay+0x22c>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96034630:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("Failed to get fragment name at node(%d)\n", fr_nd);
    96034634:	2a1503e1 	mov	w1, w21
    96034638:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603463c:	9117bc00 	add	x0, x0, #0x5ef
    96034640:	97ffb80c 	bl	96022670 <tegrabl_printf>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    96034644:	72acacb3 	movk	w19, #0x6565, lsl #16
    96034648:	14000055 	b	9603479c <tegrabl_plugin_manager_overlay+0x37c>
	if (fdt_get_property(fdt_buf, fr_nd, "enable-override-on-all-matches",
    9603464c:	d2800003 	mov	x3, #0x0                   	// #0
    96034650:	2a1503e1 	mov	w1, w21
    96034654:	f0000082 	adrp	x2, 96047000 <__func__.3913+0x316>
    96034658:	aa1403e0 	mov	x0, x20
    9603465c:	91186c42 	add	x2, x2, #0x61b
    96034660:	97fff639 	bl	96031f44 <fdt_get_property>
	if (fdt_get_property(fdt_buf, fr_nd, "odm-anded-override",
    96034664:	d2800003 	mov	x3, #0x0                   	// #0
	if (fdt_get_property(fdt_buf, fr_nd, "enable-override-on-all-matches",
    96034668:	f9004ba0 	str	x0, [x29, #144]
	if (fdt_get_property(fdt_buf, fr_nd, "odm-anded-override",
    9603466c:	f0000082 	adrp	x2, 96047000 <__func__.3913+0x316>
    96034670:	2a1503e1 	mov	w1, w21
    96034674:	9118e842 	add	x2, x2, #0x63a
    96034678:	aa1403e0 	mov	x0, x20
    9603467c:	97fff632 	bl	96031f44 <fdt_get_property>
    96034680:	f90043a0 	str	x0, [x29, #128]
    96034684:	f00000a0 	adrp	x0, 9604b000 <partition_names.3562+0x190>
    96034688:	91158000 	add	x0, x0, #0x560
    9603468c:	91004017 	add	x23, x0, #0x10
    96034690:	9103c01a 	add	x26, x0, #0xf0
    96034694:	aa1703f8 	mov	x24, x23
	uint32_t all_count = 0;
    96034698:	5280001b 	mov	w27, #0x0                   	// #0
		match_iter->count = 0;
    9603469c:	aa1803e2 	mov	x2, x24
	return tegrabl_dt_get_prop_string_array(fdt, node, prop, NULL, num);
    960346a0:	aa1803e4 	mov	x4, x24
    960346a4:	d2800003 	mov	x3, #0x0                   	// #0
    960346a8:	2a1503e1 	mov	w1, w21
    960346ac:	aa1403e0 	mov	x0, x20
    960346b0:	b81f045f 	str	wzr, [x2], #-16
    960346b4:	97fff2b4 	bl	96031184 <tegrabl_dt_get_prop_string_array>
    960346b8:	2a0003f3 	mov	w19, w0
		if (err != TEGRABL_NO_ERROR) {
    960346bc:	34000580 	cbz	w0, 9603476c <tegrabl_plugin_manager_overlay+0x34c>
			if (err == TEGRABL_ERR_NOT_FOUND) {
    960346c0:	7100341f 	cmp	w0, #0xd
    960346c4:	54000641 	b.ne	9603478c <tegrabl_plugin_manager_overlay+0x36c>  // b.any
    960346c8:	91008318 	add	x24, x24, #0x20
	for (i = 0; i < ARRAY_SIZE(match_info_array); match_iter++, i++) {
    960346cc:	eb18035f 	cmp	x26, x24
    960346d0:	54fffe61 	b.ne	9603469c <tegrabl_plugin_manager_overlay+0x27c>  // b.any
	if (!all_count) {
    960346d4:	3400053b 	cbz	w27, 96034778 <tegrabl_plugin_manager_overlay+0x358>
	if (!tegrabl_dt_get_child_count(fdt_buf, fr_nd)) {
    960346d8:	2a1503e1 	mov	w1, w21
    960346dc:	aa1403e0 	mov	x0, x20
    960346e0:	97fff1ec 	bl	96030e90 <tegrabl_dt_get_child_count>
    960346e4:	34000700 	cbz	w0, 960347c4 <tegrabl_plugin_manager_overlay+0x3a4>
	bool found = false;
    960346e8:	5280001c 	mov	w28, #0x0                   	// #0
	err = pm_get_prop_count(fdt_buf, fr_nd);
    960346ec:	52800002 	mov	w2, #0x0                   	// #0
		if (match_iter->count > 0 && match_iter->is_match) {
    960346f0:	b94002e0 	ldr	w0, [x23]
    960346f4:	34000ce0 	cbz	w0, 96034890 <tegrabl_plugin_manager_overlay+0x470>
    960346f8:	f94006e1 	ldr	x1, [x23, #8]
    960346fc:	b4000ca1 	cbz	x1, 96034890 <tegrabl_plugin_manager_overlay+0x470>
			const char *prop_string[match_iter->count];
    96034700:	d37d7c00 	ubfiz	x0, x0, #3, #32
		if (match_iter->count > 0 && match_iter->is_match) {
    96034704:	910003e1 	mov	x1, sp
			const char *prop_string[match_iter->count];
    96034708:	91005800 	add	x0, x0, #0x16
    9603470c:	d10042fb 	sub	x27, x23, #0x10
    96034710:	927c7c00 	and	x0, x0, #0xffffffff0
		if (match_iter->count > 0 && match_iter->is_match) {
    96034714:	f9004fa1 	str	x1, [x29, #152]
			const char *prop_string[match_iter->count];
    96034718:	cb2063ff 	sub	sp, sp, x0
			err = tegrabl_dt_get_prop_string_array(fdt_buf, fr_nd,
    9603471c:	d2800004 	mov	x4, #0x0                   	// #0
			const char *prop_string[match_iter->count];
    96034720:	910003e0 	mov	x0, sp
			err = tegrabl_dt_get_prop_string_array(fdt_buf, fr_nd,
    96034724:	aa1b03e2 	mov	x2, x27
    96034728:	aa0003e3 	mov	x3, x0
			const char *prop_string[match_iter->count];
    9603472c:	f90047a0 	str	x0, [x29, #136]
			uint32_t data = 0;
    96034730:	b900c3bf 	str	wzr, [x29, #192]
			err = tegrabl_dt_get_prop_string_array(fdt_buf, fr_nd,
    96034734:	2a1503e1 	mov	w1, w21
    96034738:	aa1403e0 	mov	x0, x20
    9603473c:	97fff292 	bl	96031184 <tegrabl_dt_get_prop_string_array>
    96034740:	2a0003f3 	mov	w19, w0
			if (err != TEGRABL_NO_ERROR) {
    96034744:	34000c00 	cbz	w0, 960348c4 <tegrabl_plugin_manager_overlay+0x4a4>
				pr_error("Failed to get prop on /plugin-manager/%s/%s\n",
    96034748:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603474c:	aa1b03e2 	mov	x2, x27
    96034750:	aa1903e1 	mov	x1, x25
    96034754:	911b3400 	add	x0, x0, #0x6cd
    96034758:	97ffb7c6 	bl	96022670 <tegrabl_printf>
    9603475c:	f9404fa0 	ldr	x0, [x29, #152]
    96034760:	9100001f 	mov	sp, x0
		if (err != TEGRABL_NO_ERROR) {
    96034764:	340009f3 	cbz	w19, 960348a0 <tegrabl_plugin_manager_overlay+0x480>
    96034768:	1400000d 	b	9603479c <tegrabl_plugin_manager_overlay+0x37c>
		all_count += match_iter->count;
    9603476c:	b9400300 	ldr	w0, [x24]
    96034770:	0b00037b 	add	w27, w27, w0
    96034774:	17ffffd5 	b	960346c8 <tegrabl_plugin_manager_overlay+0x2a8>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96034778:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("Find no ids, nct, odm data\n");
    9603477c:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96034780:	72acacb3 	movk	w19, #0x6565, lsl #16
		pr_error("Find no ids, nct, odm data\n");
    96034784:	91193400 	add	x0, x0, #0x64d
    96034788:	97ffb7ba 	bl	96022670 <tegrabl_printf>
		pr_error("Failed to count prop on /plugin-manager/%s\n", fr_name);
    9603478c:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034790:	aa1903e1 	mov	x1, x25
    96034794:	9119b000 	add	x0, x0, #0x66c
    96034798:	97ffb7b6 	bl	96022670 <tegrabl_printf>
			pr_error("Failed to handle /plugin-manager/%s Error(%d)\n",
    9603479c:	2a1503e1 	mov	w1, w21
    960347a0:	d2800002 	mov	x2, #0x0                   	// #0
    960347a4:	aa1403e0 	mov	x0, x20
    960347a8:	97fff55d 	bl	96031d1c <fdt_get_name>
    960347ac:	2a1303e2 	mov	w2, w19
    960347b0:	aa0003e1 	mov	x1, x0
    960347b4:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960347b8:	91206000 	add	x0, x0, #0x818
    960347bc:	97ffb7ad 	bl	96022670 <tegrabl_printf>
			break;
    960347c0:	17ffff88 	b	960345e0 <tegrabl_plugin_manager_overlay+0x1c0>
		pr_error("Failed to count overlay on /plugin-manager/%s\n", fr_name);
    960347c4:	aa1903e1 	mov	x1, x25
    960347c8:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 1);
    960347cc:	52802053 	mov	w19, #0x102                 	// #258
		pr_error("Failed to count overlay on /plugin-manager/%s\n", fr_name);
    960347d0:	911a6c00 	add	x0, x0, #0x69b
    960347d4:	97ffb7a7 	bl	96022670 <tegrabl_printf>
    960347d8:	17ffff9b 	b	96034644 <tegrabl_plugin_manager_overlay+0x224>
				if (!strcmp(match_iter->name, "config-names")) {
    960347dc:	f94033a1 	ldr	x1, [x29, #96]
    960347e0:	aa1b03e0 	mov	x0, x27
    960347e4:	97ffd69a 	bl	9602a24c <strcmp>
    960347e8:	340002a0 	cbz	w0, 9603483c <tegrabl_plugin_manager_overlay+0x41c>
				found = match_iter->is_match(fdt_buf, prop_string[j], &data);
    960347ec:	f94047a0 	ldr	x0, [x29, #136]
    960347f0:	910303a2 	add	x2, x29, #0xc0
    960347f4:	f94006e3 	ldr	x3, [x23, #8]
    960347f8:	f87a5801 	ldr	x1, [x0, w26, uxtw #3]
    960347fc:	aa1403e0 	mov	x0, x20
    96034800:	d63f0060 	blr	x3
    96034804:	12001c1c 	and	w28, w0, #0xff
				if (odm_anded_override && (0 == strcmp(match_iter->name, "odm-data"))) {
    96034808:	f94043a0 	ldr	x0, [x29, #128]
    9603480c:	b4000560 	cbz	x0, 960348b8 <tegrabl_plugin_manager_overlay+0x498>
    96034810:	f0000061 	adrp	x1, 96043000 <common_params>
    96034814:	aa1b03e0 	mov	x0, x27
    96034818:	9122c021 	add	x1, x1, #0x8b0
    9603481c:	97ffd68c 	bl	9602a24c <strcmp>
    96034820:	350004c0 	cbnz	w0, 960348b8 <tegrabl_plugin_manager_overlay+0x498>
					if (!found) {
    96034824:	340004dc 	cbz	w28, 960348bc <tegrabl_plugin_manager_overlay+0x49c>
			for (j = 0, found = false; j < match_iter->count; j++) {
    96034828:	1100075a 	add	w26, w26, #0x1
    9603482c:	b94002e0 	ldr	w0, [x23]
    96034830:	6b00035f 	cmp	w26, w0
    96034834:	54fffd43 	b.cc	960347dc <tegrabl_plugin_manager_overlay+0x3bc>  // b.lo, b.ul, b.last
    96034838:	14000021 	b	960348bc <tegrabl_plugin_manager_overlay+0x49c>
	return tegrabl_dt_get_prop_by_idx(fdt, node, prop, U32_SZ, idx, res);
    9603483c:	f94037a2 	ldr	x2, [x29, #104]
    96034840:	910303a5 	add	x5, x29, #0xc0
    96034844:	2a1a03e4 	mov	w4, w26
    96034848:	d2800083 	mov	x3, #0x4                   	// #4
    9603484c:	2a1503e1 	mov	w1, w21
    96034850:	aa1403e0 	mov	x0, x20
    96034854:	97fff1d6 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
    96034858:	2a0003e2 	mov	w2, w0
					if (err != TEGRABL_NO_ERROR) {
    9603485c:	34fffc80 	cbz	w0, 960347ec <tegrabl_plugin_manager_overlay+0x3cc>
	if (fdt_get_property(fdt_buf, fr_nd, "enable-override-on-all-matches",
    96034860:	f9404ba1 	ldr	x1, [x29, #144]
			if (override_on_all_match && !found) {
    96034864:	52000380 	eor	w0, w28, #0x1
	if (fdt_get_property(fdt_buf, fr_nd, "enable-override-on-all-matches",
    96034868:	f100003f 	cmp	x1, #0x0
    9603486c:	1a9f07e1 	cset	w1, ne  // ne = any
			if (override_on_all_match && !found) {
    96034870:	6a00003f 	tst	w1, w0
    96034874:	54fff741 	b.ne	9603475c <tegrabl_plugin_manager_overlay+0x33c>  // b.any
			} else if (!override_on_all_match && found) {
    96034878:	f9404ba0 	ldr	x0, [x29, #144]
    9603487c:	f100001f 	cmp	x0, #0x0
    96034880:	f9404fa0 	ldr	x0, [x29, #152]
    96034884:	7a400b84 	ccmp	w28, #0x0, #0x4, eq  // eq = none
    96034888:	540002a1 	b.ne	960348dc <tegrabl_plugin_manager_overlay+0x4bc>  // b.any
    9603488c:	9100001f 	mov	sp, x0
    96034890:	910082f7 	add	x23, x23, #0x20
	for (i = 0; i < ARRAY_SIZE(match_info_array); i++, match_iter++) {
    96034894:	eb17031f 	cmp	x24, x23
    96034898:	54fff2c1 	b.ne	960346f0 <tegrabl_plugin_manager_overlay+0x2d0>  // b.any
	if (!found) {
    9603489c:	3500023c 	cbnz	w28, 960348e0 <tegrabl_plugin_manager_overlay+0x4c0>
	tegrabl_dt_for_each_child(fdt_buf, pm_node, fr_nd) {
    960348a0:	2a1503e1 	mov	w1, w21
    960348a4:	aa1403e0 	mov	x0, x20
    960348a8:	52800013 	mov	w19, #0x0                   	// #0
    960348ac:	97fff44e 	bl	960319e4 <fdt_next_subnode>
    960348b0:	2a0003f5 	mov	w21, w0
    960348b4:	17ffff40 	b	960345b4 <tegrabl_plugin_manager_overlay+0x194>
					if (found) {
    960348b8:	34fffb9c 	cbz	w28, 96034828 <tegrabl_plugin_manager_overlay+0x408>
    960348bc:	52800002 	mov	w2, #0x0                   	// #0
    960348c0:	17ffffe8 	b	96034860 <tegrabl_plugin_manager_overlay+0x440>
    960348c4:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
			for (j = 0, found = false; j < match_iter->count; j++) {
    960348c8:	5280001c 	mov	w28, #0x0                   	// #0
    960348cc:	910bb800 	add	x0, x0, #0x2ee
    960348d0:	5280001a 	mov	w26, #0x0                   	// #0
    960348d4:	f90037a0 	str	x0, [x29, #104]
    960348d8:	17ffffd5 	b	9603482c <tegrabl_plugin_manager_overlay+0x40c>
    960348dc:	9100001f 	mov	sp, x0
	pr_info("node /plugin-manager/%s matches\n", fr_name);
    960348e0:	aa1903e1 	mov	x1, x25
    960348e4:	b9009ba2 	str	w2, [x29, #152]
    960348e8:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960348ec:	911c2800 	add	x0, x0, #0x70a
    960348f0:	97ffb760 	bl	96022670 <tegrabl_printf>
	return tegrabl_dt_get_prop_by_idx(fdt, node, prop, U32_SZ, 0, res);
    960348f4:	f0000098 	adrp	x24, 96047000 <__func__.3913+0x316>
	tegrabl_dt_for_each_child(fdt_buf, fr_nd, override_nd) {
    960348f8:	2a1503e1 	mov	w1, w21
    960348fc:	aa1403e0 	mov	x0, x20
    96034900:	97fff42c 	bl	960319b0 <fdt_first_subnode>
			pr_error("failed to override fragment: %x\n", fr_nd);
    96034904:	f0000099 	adrp	x25, 96047000 <__func__.3913+0x316>
	tegrabl_dt_for_each_child(fdt_buf, fr_nd, override_nd) {
    96034908:	b9409ba2 	ldr	w2, [x29, #152]
    9603490c:	911cbb18 	add	x24, x24, #0x72e
			pr_error("failed to override fragment: %x\n", fr_nd);
    96034910:	911fd339 	add	x25, x25, #0x7f4
	tegrabl_dt_for_each_child(fdt_buf, fr_nd, override_nd) {
    96034914:	2a0003f7 	mov	w23, w0
    96034918:	2a0203f3 	mov	w19, w2
    9603491c:	310006ff 	cmn	w23, #0x1
    96034920:	54fff220 	b.eq	96034764 <tegrabl_plugin_manager_overlay+0x344>  // b.none
    96034924:	9102d3a5 	add	x5, x29, #0xb4
    96034928:	52800004 	mov	w4, #0x0                   	// #0
    9603492c:	d2800083 	mov	x3, #0x4                   	// #4
    96034930:	aa1803e2 	mov	x2, x24
    96034934:	2a1703e1 	mov	w1, w23
    96034938:	aa1403e0 	mov	x0, x20
    9603493c:	97fff19c 	bl	96030fac <tegrabl_dt_get_prop_by_idx>
    96034940:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96034944:	34000180 	cbz	w0, 96034974 <tegrabl_plugin_manager_overlay+0x554>
		pr_error("Failed to get target handle\n");
    96034948:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603494c:	911cd400 	add	x0, x0, #0x735
    96034950:	97ffb748 	bl	96022670 <tegrabl_printf>
			pr_error("failed to override fragment: %x\n", fr_nd);
    96034954:	2a1503e1 	mov	w1, w21
    96034958:	aa1903e0 	mov	x0, x25
    9603495c:	97ffb745 	bl	96022670 <tegrabl_printf>
	tegrabl_dt_for_each_child(fdt_buf, fr_nd, override_nd) {
    96034960:	2a1703e1 	mov	w1, w23
    96034964:	aa1403e0 	mov	x0, x20
    96034968:	97fff41f 	bl	960319e4 <fdt_next_subnode>
    9603496c:	2a0003f7 	mov	w23, w0
    96034970:	17ffffeb 	b	9603491c <tegrabl_plugin_manager_overlay+0x4fc>
	target_nd = fdt_node_offset_by_phandle(fdt, target_phd);
    96034974:	b940b7a1 	ldr	w1, [x29, #180]
    96034978:	aa1603e0 	mov	x0, x22
    9603497c:	97fff701 	bl	96032580 <fdt_node_offset_by_phandle>
    96034980:	2a0003fa 	mov	w26, w0
	if (target_nd < 0) {
    96034984:	36f80180 	tbz	w0, #31, 960349b4 <tegrabl_plugin_manager_overlay+0x594>
		pr_error("Failed to find phandle for %s\n",
    96034988:	d2800002 	mov	x2, #0x0                   	// #0
    9603498c:	2a1703e1 	mov	w1, w23
    96034990:	aa1403e0 	mov	x0, x20
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    96034994:	52800053 	mov	w19, #0x2                   	// #2
		pr_error("Failed to find phandle for %s\n",
    96034998:	97fff4e1 	bl	96031d1c <fdt_get_name>
		return TEGRABL_ERROR(TEGRABL_ERR_INVALID, 0);
    9603499c:	72acacb3 	movk	w19, #0x6565, lsl #16
		pr_error("Failed to find phandle for %s\n",
    960349a0:	aa0003e1 	mov	x1, x0
    960349a4:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960349a8:	911d5400 	add	x0, x0, #0x755
    960349ac:	97ffb731 	bl	96022670 <tegrabl_printf>
    960349b0:	17ffffe9 	b	96034954 <tegrabl_plugin_manager_overlay+0x534>
	err = tegrabl_dt_get_node_with_name(fdt_buf, override_nd, "_overlay_",
    960349b4:	9102c3a3 	add	x3, x29, #0xb0
    960349b8:	f0000082 	adrp	x2, 96047000 <__func__.3913+0x316>
    960349bc:	2a1703e1 	mov	w1, w23
    960349c0:	911ddc42 	add	x2, x2, #0x777
    960349c4:	aa1403e0 	mov	x0, x20
    960349c8:	97fff22e 	bl	96031280 <tegrabl_dt_get_node_with_name>
    960349cc:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    960349d0:	34000260 	cbz	w0, 96034a1c <tegrabl_plugin_manager_overlay+0x5fc>
		fr_name = fdt_get_name(fdt_buf, fdt_parent_offset(fdt_buf, override_nd),
    960349d4:	2a1703e1 	mov	w1, w23
    960349d8:	aa1403e0 	mov	x0, x20
    960349dc:	97fff6ab 	bl	96032488 <fdt_parent_offset>
    960349e0:	2a0003e1 	mov	w1, w0
    960349e4:	d2800002 	mov	x2, #0x0                   	// #0
    960349e8:	aa1403e0 	mov	x0, x20
    960349ec:	97fff4cc 	bl	96031d1c <fdt_get_name>
    960349f0:	aa0003fa 	mov	x26, x0
		pr_error("Failed to access /plugin-manager/%s/%s/_overlay_\n",
    960349f4:	2a1703e1 	mov	w1, w23
    960349f8:	d2800002 	mov	x2, #0x0                   	// #0
    960349fc:	aa1403e0 	mov	x0, x20
    96034a00:	97fff4c7 	bl	96031d1c <fdt_get_name>
    96034a04:	aa1a03e1 	mov	x1, x26
    96034a08:	aa0003e2 	mov	x2, x0
    96034a0c:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034a10:	911e0400 	add	x0, x0, #0x781
    96034a14:	97ffb717 	bl	96022670 <tegrabl_printf>
    96034a18:	17ffffcf 	b	96034954 <tegrabl_plugin_manager_overlay+0x534>
	err = pm_overlay_handle(fdt, target_nd, fdt_buf, overlay_nd);
    96034a1c:	b940b3a3 	ldr	w3, [x29, #176]
    96034a20:	aa1403e2 	mov	x2, x20
    96034a24:	2a1a03e1 	mov	w1, w26
    96034a28:	aa1603e0 	mov	x0, x22
    96034a2c:	97fffcd9 	bl	96033d90 <pm_overlay_handle>
    96034a30:	2a0003f3 	mov	w19, w0
	if (err != TEGRABL_NO_ERROR) {
    96034a34:	34fff960 	cbz	w0, 96034960 <tegrabl_plugin_manager_overlay+0x540>
		fdt_get_path(fdt, target_nd, target_path, 128);
    96034a38:	910303a2 	add	x2, x29, #0xc0
    96034a3c:	52801003 	mov	w3, #0x80                  	// #128
    96034a40:	2a1a03e1 	mov	w1, w26
    96034a44:	aa1603e0 	mov	x0, x22
    96034a48:	97fff5f9 	bl	9603222c <fdt_get_path>
		fr_name = fdt_get_name(fdt_buf, fdt_parent_offset(fdt_buf, override_nd),
    96034a4c:	2a1703e1 	mov	w1, w23
    96034a50:	aa1403e0 	mov	x0, x20
    96034a54:	97fff68d 	bl	96032488 <fdt_parent_offset>
    96034a58:	2a0003e1 	mov	w1, w0
    96034a5c:	d2800002 	mov	x2, #0x0                   	// #0
    96034a60:	aa1403e0 	mov	x0, x20
    96034a64:	97fff4ae 	bl	96031d1c <fdt_get_name>
    96034a68:	aa0003fa 	mov	x26, x0
		pr_error("Failed to update %s from /plugin-manager/%s/%s/_overlay_/\n",
    96034a6c:	2a1703e1 	mov	w1, w23
    96034a70:	d2800002 	mov	x2, #0x0                   	// #0
    96034a74:	aa1403e0 	mov	x0, x20
    96034a78:	97fff4a9 	bl	96031d1c <fdt_get_name>
    96034a7c:	aa1a03e2 	mov	x2, x26
    96034a80:	aa0003e3 	mov	x3, x0
    96034a84:	910303a1 	add	x1, x29, #0xc0
    96034a88:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034a8c:	911ed800 	add	x0, x0, #0x7b6
    96034a90:	97ffb6f8 	bl	96022670 <tegrabl_printf>
    96034a94:	17ffffb0 	b	96034954 <tegrabl_plugin_manager_overlay+0x534>
	fdt_err = fdt_setprop_string(fdt, pm_node, "status", "disabled");
    96034a98:	b0000055 	adrp	x21, 9603d000 <__func__.3609+0x209>
    96034a9c:	910686b5 	add	x21, x21, #0x1a1
    96034aa0:	aa1503e0 	mov	x0, x21
    96034aa4:	97ffd61a 	bl	9602a30c <strlen>
    96034aa8:	11000404 	add	w4, w0, #0x1
    96034aac:	f9403ba0 	ldr	x0, [x29, #112]
    96034ab0:	aa1503e3 	mov	x3, x21
    96034ab4:	2a1703e1 	mov	w1, w23
    96034ab8:	9123a802 	add	x2, x0, #0x8ea
    96034abc:	aa1603e0 	mov	x0, x22
    96034ac0:	97fff821 	bl	96032b44 <fdt_setprop>
	if (fdt_err < 0) {
    96034ac4:	36f800c0 	tbz	w0, #31, 96034adc <tegrabl_plugin_manager_overlay+0x6bc>
		pr_error("Failed to disable plugin-manager status.\n");
    96034ac8:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
		err = TEGRABL_ERROR(TEGRABL_ERR_SET_FAILED, 0);
    96034acc:	52800493 	mov	w19, #0x24                  	// #36
		pr_error("Failed to disable plugin-manager status.\n");
    96034ad0:	91212800 	add	x0, x0, #0x84a
    96034ad4:	97ffb6e7 	bl	96022670 <tegrabl_printf>
    96034ad8:	17fffeac 	b	96034588 <tegrabl_plugin_manager_overlay+0x168>
	pr_info("Disable plugin-manager status in FDT\n");
    96034adc:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034ae0:	9121dc00 	add	x0, x0, #0x877
    96034ae4:	97ffb6e3 	bl	96022670 <tegrabl_printf>
	pr_info("Plugin-manager override finished %s\n",
    96034ae8:	7100027f 	cmp	w19, #0x0
    96034aec:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034af0:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034af4:	9113d800 	add	x0, x0, #0x4f6
    96034af8:	9113a421 	add	x1, x1, #0x4e9
    96034afc:	9a800021 	csel	x1, x1, x0, eq  // eq = none
    96034b00:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034b04:	91228000 	add	x0, x0, #0x8a0
    96034b08:	97ffb6da 	bl	96022670 <tegrabl_printf>
    96034b0c:	17fffea0 	b	9603458c <tegrabl_plugin_manager_overlay+0x16c>

0000000096034b10 <ext2_unmount>:
    free(ext2);
    return err;
}

status_t ext2_unmount(fscookie *cookie)
{
    96034b10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96034b14:	910003fd 	mov	x29, sp
    96034b18:	f9000bf3 	str	x19, [sp, #16]
    96034b1c:	aa0003f3 	mov	x19, x0
    // free it up
    ext2_t *ext2 = (ext2_t *)cookie;

    bcache_destroy(ext2->cache);
    96034b20:	f9400400 	ldr	x0, [x0, #8]
    96034b24:	94000725 	bl	960367b8 <bcache_destroy>
    free(ext2->grp_desc);
    96034b28:	f9420e60 	ldr	x0, [x19, #1048]
    96034b2c:	97ffcf24 	bl	960287bc <free>
    free(ext2);
    96034b30:	aa1303e0 	mov	x0, x19
    96034b34:	97ffcf22 	bl	960287bc <free>

    return 0;
}
    96034b38:	52800000 	mov	w0, #0x0                   	// #0
    96034b3c:	f9400bf3 	ldr	x19, [sp, #16]
    96034b40:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96034b44:	d65f03c0 	ret

0000000096034b48 <ext2_endian_swap_superblock>:
}
    96034b48:	d65f03c0 	ret

0000000096034b4c <ext2_endian_swap_group_desc>:
    96034b4c:	d65f03c0 	ret

0000000096034b50 <ext2_load_inode>:
    *block_offset = offset % E2FS_BLOCK_SIZE(ext2->super_blk);
    *block += offset / E2FS_BLOCK_SIZE(ext2->super_blk);
}

int ext2_load_inode(ext2_t *ext2, inodenum_t num, struct ext2fs_dinode *inode)
{
    96034b50:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    num--;
    96034b54:	51000421 	sub	w1, w1, #0x1
{
    96034b58:	910003fd 	mov	x29, sp
    96034b5c:	a9025bf5 	stp	x21, x22, [sp, #32]
    uint32_t group = num / ext2->super_blk.e2fs_ipg;
    96034b60:	b9403815 	ldr	w21, [x0, #56]
{
    96034b64:	a90153f3 	stp	x19, x20, [sp, #16]
    96034b68:	aa0003f3 	mov	x19, x0
    96034b6c:	a90363f7 	stp	x23, x24, [sp, #48]
    96034b70:	aa0203f8 	mov	x24, x2
    struct ext2_block_group_desc *grp_desc = ext2->grp_desc;
    96034b74:	f9420c02 	ldr	x2, [x0, #1048]
    uint32_t group = num / ext2->super_blk.e2fs_ipg;
    96034b78:	1ad50834 	udiv	w20, w1, w21
    if (ext2->super_blk.e3fs_desc_size > 32) {
    96034b7c:	79421c00 	ldrh	w0, [x0, #270]
    96034b80:	7100801f 	cmp	w0, #0x20
    96034b84:	54000489 	b.ls	96034c14 <ext2_load_inode+0xc4>  // b.plast
        grp_desc = (struct ext2_block_group_desc *)((uintptr_t)grp_desc + (group * E2FS_64BIT_GD_SIZE));
    96034b88:	52800800 	mov	w0, #0x40                  	// #64
    96034b8c:	9ba00a80 	umaddl	x0, w20, w0, x2
        *block = (((uint64_t)grp_desc->ext4bgd_i_tables_hi) << 32) | grp_desc->ext2bgd_i_tables;
    96034b90:	b9402816 	ldr	w22, [x0, #40]
    96034b94:	b9400800 	ldr	w0, [x0, #8]
    96034b98:	aa168000 	orr	x0, x0, x22, lsl #32
    size_t offset = (num % EXT2_INODES_PER_GROUP(ext2->super_blk)) * E2FS_INODE_SIZE(ext2->super_blk);
    96034b9c:	1b158694 	msub	w20, w20, w21, w1
    96034ba0:	b9405e61 	ldr	w1, [x19, #92]
    96034ba4:	34000401 	cbz	w1, 96034c24 <ext2_load_inode+0xd4>
    96034ba8:	7940d275 	ldrh	w21, [x19, #104]
    *block_offset = offset % E2FS_BLOCK_SIZE(ext2->super_blk);
    96034bac:	b9402a61 	ldr	w1, [x19, #40]
    size_t offset = (num % EXT2_INODES_PER_GROUP(ext2->super_blk)) * E2FS_INODE_SIZE(ext2->super_blk);
    96034bb0:	1b157e96 	mul	w22, w20, w21
    *block_offset = offset % E2FS_BLOCK_SIZE(ext2->super_blk);
    96034bb4:	52808014 	mov	w20, #0x400                 	// #1024
    size_t offset = (num % EXT2_INODES_PER_GROUP(ext2->super_blk)) * E2FS_INODE_SIZE(ext2->super_blk);
    96034bb8:	aa1603f5 	mov	x21, x22
    *block_offset = offset % E2FS_BLOCK_SIZE(ext2->super_blk);
    96034bbc:	1ac12281 	lsl	w1, w20, w1
    96034bc0:	aa0103f4 	mov	x20, x1
    *block += offset / E2FS_BLOCK_SIZE(ext2->super_blk);
    96034bc4:	9ac10ad6 	udiv	x22, x22, x1

    LTRACEF("bnum %lu, offset %zd\n", bnum, block_offset);

    /* get a pointer to the cache block */
    void *cache_ptr;
    err = bcache_get_block(ext2->cache, &cache_ptr, bnum);
    96034bc8:	910123a1 	add	x1, x29, #0x48
    *block += offset / E2FS_BLOCK_SIZE(ext2->super_blk);
    96034bcc:	8b0002d6 	add	x22, x22, x0
    err = bcache_get_block(ext2->cache, &cache_ptr, bnum);
    96034bd0:	f9400660 	ldr	x0, [x19, #8]
    96034bd4:	2a1603e2 	mov	w2, w22
    96034bd8:	94000737 	bl	960368b4 <bcache_get_block>
    96034bdc:	2a0003f7 	mov	w23, w0
    if (err < 0) {
    96034be0:	36f80260 	tbz	w0, #31, 96034c2c <ext2_load_inode+0xdc>
        TRACEF("Failed to get block\n");
    96034be4:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034be8:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034bec:	528024a2 	mov	w2, #0x125                 	// #293
    96034bf0:	91234c21 	add	x1, x1, #0x8d3
    96034bf4:	9125c000 	add	x0, x0, #0x970
    96034bf8:	97ffb69e 	bl	96022670 <tegrabl_printf>
    ext2_endian_swap_inode(inode);

    LTRACEF("read inode: mode 0x%x, size %d\n", inode->e2di_mode, inode->e2di_size);

    return 0;
}
    96034bfc:	2a1703e0 	mov	w0, w23
    96034c00:	a94153f3 	ldp	x19, x20, [sp, #16]
    96034c04:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96034c08:	a94363f7 	ldp	x23, x24, [sp, #48]
    96034c0c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96034c10:	d65f03c0 	ret
        grp_desc = (struct ext2_block_group_desc *)((uintptr_t)grp_desc + (group * E2FS_GD_SIZE));
    96034c14:	52800400 	mov	w0, #0x20                  	// #32
    96034c18:	9ba00a80 	umaddl	x0, w20, w0, x2
        *block = grp_desc->ext2bgd_i_tables;
    96034c1c:	b9400800 	ldr	w0, [x0, #8]
    96034c20:	17ffffdf 	b	96034b9c <ext2_load_inode+0x4c>
    size_t offset = (num % EXT2_INODES_PER_GROUP(ext2->super_blk)) * E2FS_INODE_SIZE(ext2->super_blk);
    96034c24:	52801015 	mov	w21, #0x80                  	// #128
    96034c28:	17ffffe1 	b	96034bac <ext2_load_inode+0x5c>
    memcpy(inode, (uint8_t *)cache_ptr + block_offset, sizeof(struct ext2fs_dinode));
    96034c2c:	f94027a1 	ldr	x1, [x29, #72]
    *block_offset = offset % E2FS_BLOCK_SIZE(ext2->super_blk);
    96034c30:	51000694 	sub	w20, w20, #0x1
    96034c34:	0a150294 	and	w20, w20, w21
    memcpy(inode, (uint8_t *)cache_ptr + block_offset, sizeof(struct ext2fs_dinode));
    96034c38:	d2801402 	mov	x2, #0xa0                  	// #160
    96034c3c:	8b140021 	add	x1, x1, x20
    96034c40:	aa1803e0 	mov	x0, x24
    96034c44:	97ffd4b8 	bl	96029f24 <memcpy>
    return 0;
    96034c48:	52800017 	mov	w23, #0x0                   	// #0
    bcache_put_block(ext2->cache, bnum);
    96034c4c:	f9400660 	ldr	x0, [x19, #8]
    96034c50:	2a1603e1 	mov	w1, w22
    96034c54:	94000734 	bl	96036924 <bcache_put_block>
    return 0;
    96034c58:	17ffffe9 	b	96034bfc <ext2_load_inode+0xac>

0000000096034c5c <ext2_mount>:
{
    96034c5c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    96034c60:	910003fd 	mov	x29, sp
    96034c64:	a90153f3 	stp	x19, x20, [sp, #16]
    96034c68:	a9025bf5 	stp	x21, x22, [sp, #32]
    if (!dev)
    96034c6c:	b40006c0 	cbz	x0, 96034d44 <ext2_mount+0xe8>
    96034c70:	aa0203f6 	mov	x22, x2
    96034c74:	aa0103f5 	mov	x21, x1
    96034c78:	aa0003f4 	mov	x20, x0
    ext2_t *ext2 = malloc(sizeof(ext2_t));
    96034c7c:	d2809900 	mov	x0, #0x4c8                 	// #1224
    96034c80:	97ffcece 	bl	960287b8 <malloc>
    96034c84:	aa0003f3 	mov	x19, x0
    if (ext2 == NULL) {
    96034c88:	b5000160 	cbnz	x0, 96034cb4 <ext2_mount+0x58>
        TRACEF("Failed to allocate memory for ext2 priv data\n");
    96034c8c:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034c90:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034c94:	91232021 	add	x1, x1, #0x8c8
    96034c98:	91263c00 	add	x0, x0, #0x98f
    96034c9c:	52801062 	mov	w2, #0x83                  	// #131
        err = ERR_NO_MEMORY;
    96034ca0:	12800094 	mov	w20, #0xfffffffb            	// #-5
        TRACEF("Failed to allocate memory for group descriptor\n");
    96034ca4:	97ffb673 	bl	96022670 <tegrabl_printf>
    free(ext2);
    96034ca8:	aa1303e0 	mov	x0, x19
    96034cac:	97ffcec4 	bl	960287bc <free>
    return err;
    96034cb0:	14000031 	b	96034d74 <ext2_mount+0x118>
    ext2->dev = dev;
    96034cb4:	aa0003e1 	mov	x1, x0
    fs_offset = (start_sector * TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96034cb8:	b9402280 	ldr	w0, [x20, #32]
    error = tegrabl_blockdev_read(dev, &ext2->super_blk, fs_offset + 1024, sizeof(struct ext2fs_super_block));
    96034cbc:	d2808003 	mov	x3, #0x400                 	// #1024
    ext2->dev = dev;
    96034cc0:	f8010434 	str	x20, [x1], #16
    fs_offset = (start_sector * TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96034cc4:	9ac022b5 	lsl	x21, x21, x0
    error = tegrabl_blockdev_read(dev, &ext2->super_blk, fs_offset + 1024, sizeof(struct ext2fs_super_block));
    96034cc8:	aa1403e0 	mov	x0, x20
    96034ccc:	8b0302a2 	add	x2, x21, x3
    96034cd0:	97ff9b60 	bl	9601ba50 <tegrabl_blockdev_read>
    if (error != TEGRABL_NO_ERROR) {
    96034cd4:	34000120 	cbz	w0, 96034cf8 <ext2_mount+0x9c>
        TRACEF("Failed to read superblock\n");
    96034cd8:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034cdc:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034ce0:	91232021 	add	x1, x1, #0x8c8
    96034ce4:	91271c00 	add	x0, x0, #0x9c7
    96034ce8:	52801182 	mov	w2, #0x8c                  	// #140
        TRACEF("Failed to read group descriptors\n");
    96034cec:	97ffb661 	bl	96022670 <tegrabl_printf>
		err = ERR_GENERIC;
    96034cf0:	12800014 	mov	w20, #0xffffffff            	// #-1
    96034cf4:	17ffffed 	b	96034ca8 <ext2_mount+0x4c>
    if (ext2->super_blk.e2fs_magic != E2FS_MAGIC) {
    96034cf8:	79409261 	ldrh	w1, [x19, #72]
    96034cfc:	529dea60 	mov	w0, #0xef53                	// #61267
    96034d00:	6b00003f 	cmp	w1, w0
    96034d04:	54000aa1 	b.ne	96034e58 <ext2_mount+0x1fc>  // b.any
    ext2->group_count = (ext2->super_blk.e2fs_bcount + ext2->super_blk.e2fs_bpg - 1) / ext2->super_blk.e2fs_bpg;
    96034d08:	b9403261 	ldr	w1, [x19, #48]
    96034d0c:	b9401660 	ldr	w0, [x19, #20]
    96034d10:	0b000020 	add	w0, w1, w0
    96034d14:	51000400 	sub	w0, w0, #0x1
    96034d18:	1ac10800 	udiv	w0, w0, w1
    if (ext2->super_blk.e2fs_rev > E2FS_REV1) {
    96034d1c:	b9405e61 	ldr	w1, [x19, #92]
    96034d20:	7100043f 	cmp	w1, #0x1
    ext2->group_count = (ext2->super_blk.e2fs_bcount + ext2->super_blk.e2fs_bpg - 1) / ext2->super_blk.e2fs_bpg;
    96034d24:	b9041260 	str	w0, [x19, #1040]
    if (ext2->super_blk.e2fs_rev > E2FS_REV1) {
    96034d28:	54000129 	b.ls	96034d4c <ext2_mount+0xf0>  // b.plast
        TRACEF("Unsupported revision level\n");
    96034d2c:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034d30:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034d34:	52801542 	mov	w2, #0xaa                  	// #170
    96034d38:	91232021 	add	x1, x1, #0x8c8
    96034d3c:	9127b000 	add	x0, x0, #0x9ec
    96034d40:	97ffb64c 	bl	96022670 <tegrabl_printf>
        return ERR_NOT_FOUND;
    96034d44:	12800034 	mov	w20, #0xfffffffe            	// #-2
    96034d48:	1400000b 	b	96034d74 <ext2_mount+0x118>
    if (ext2->super_blk.e2fs_features_rocompat & ~(EXT2F_ROCOMPAT_SPARSESUPER | EXT2F_ROCOMPAT_LARGEFILE)) {
    96034d4c:	b9407661 	ldr	w1, [x19, #116]
    96034d50:	721e743f 	tst	w1, #0xfffffffc
    96034d54:	540001a0 	b.eq	96034d88 <ext2_mount+0x12c>  // b.none
        return err;
    96034d58:	12800054 	mov	w20, #0xfffffffd            	// #-3
        TRACEF("Unsupported ro features\n");
    96034d5c:	52801622 	mov	w2, #0xb1                  	// #177
    96034d60:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034d64:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034d68:	91232021 	add	x1, x1, #0x8c8
    96034d6c:	91284800 	add	x0, x0, #0xa12
    96034d70:	97ffb640 	bl	96022670 <tegrabl_printf>
}
    96034d74:	2a1403e0 	mov	w0, w20
    96034d78:	a94153f3 	ldp	x19, x20, [sp, #16]
    96034d7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96034d80:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96034d84:	d65f03c0 	ret
    if (ext2->super_blk.e3fs_desc_size > 32) {
    96034d88:	79421e61 	ldrh	w1, [x19, #270]
        gd_size = E2FS_GD_SIZE;
    96034d8c:	52800403 	mov	w3, #0x20                  	// #32
    96034d90:	52800814 	mov	w20, #0x40                  	// #64
    96034d94:	7100803f 	cmp	w1, #0x20
    96034d98:	1a838294 	csel	w20, w20, w3, hi  // hi = pmore
    ext2->grp_desc = malloc(gd_size * ext2->group_count);
    96034d9c:	1b147c00 	mul	w0, w0, w20
    96034da0:	97ffce86 	bl	960287b8 <malloc>
    96034da4:	f9020e60 	str	x0, [x19, #1048]
    if (ext2->grp_desc == NULL) {
    96034da8:	b50000e0 	cbnz	x0, 96034dc4 <ext2_mount+0x168>
        TRACEF("Failed to allocate memory for group descriptor\n");
    96034dac:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034db0:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034db4:	528017c2 	mov	w2, #0xbe                  	// #190
    96034db8:	91232021 	add	x1, x1, #0x8c8
    96034dbc:	9128d400 	add	x0, x0, #0xa35
    96034dc0:	17ffffb8 	b	96034ca0 <ext2_mount+0x44>
                                  gd_size * ext2->group_count);
    96034dc4:	b9441263 	ldr	w3, [x19, #1040]
                                  fs_offset + ((E2FS_BLOCK_SIZE(ext2->super_blk) == 4096) ? 4096 : 2048),
    96034dc8:	d2820002 	mov	x2, #0x1000                	// #4096
    96034dcc:	b9402a61 	ldr	w1, [x19, #40]
    96034dd0:	7100083f 	cmp	w1, #0x2
    96034dd4:	d2810001 	mov	x1, #0x800                 	// #2048
                                  gd_size * ext2->group_count);
    96034dd8:	1b037e83 	mul	w3, w20, w3
                                  fs_offset + ((E2FS_BLOCK_SIZE(ext2->super_blk) == 4096) ? 4096 : 2048),
    96034ddc:	9a810042 	csel	x2, x2, x1, eq  // eq = none
    error = tegrabl_blockdev_read(ext2->dev,
    96034de0:	aa0003e1 	mov	x1, x0
    96034de4:	f9400260 	ldr	x0, [x19]
    96034de8:	8b0202a2 	add	x2, x21, x2
    96034dec:	97ff9b19 	bl	9601ba50 <tegrabl_blockdev_read>
    if (error != TEGRABL_NO_ERROR) {
    96034df0:	340000e0 	cbz	w0, 96034e0c <ext2_mount+0x1b0>
        TRACEF("Failed to read group descriptors\n");
    96034df4:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034df8:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034dfc:	52801902 	mov	w2, #0xc8                  	// #200
    96034e00:	91232021 	add	x1, x1, #0x8c8
    96034e04:	9129bc00 	add	x0, x0, #0xa6f
    96034e08:	17ffffb9 	b	96034cec <ext2_mount+0x90>
    ext2->cache = bcache_create(ext2->dev, E2FS_BLOCK_SIZE(ext2->super_blk), 4, fs_offset);
    96034e0c:	b9402a60 	ldr	w0, [x19, #40]
    96034e10:	52808001 	mov	w1, #0x400                 	// #1024
    96034e14:	aa1503e3 	mov	x3, x21
    96034e18:	52800082 	mov	w2, #0x4                   	// #4
    96034e1c:	1ac02021 	lsl	w1, w1, w0
    96034e20:	f9400260 	ldr	x0, [x19]
    96034e24:	940005fe 	bl	9603661c <bcache_create>
    96034e28:	f9000660 	str	x0, [x19, #8]
	if (ext2->cache == NULL) {
    96034e2c:	b4fff620 	cbz	x0, 96034cf0 <ext2_mount+0x94>
    err = ext2_load_inode(ext2, EXT2_ROOTINO, &ext2->root_inode);
    96034e30:	91108262 	add	x2, x19, #0x420
    96034e34:	52800041 	mov	w1, #0x2                   	// #2
    96034e38:	aa1303e0 	mov	x0, x19
    96034e3c:	97ffff45 	bl	96034b50 <ext2_load_inode>
    96034e40:	2a0003f4 	mov	w20, w0
    if (err < 0)
    96034e44:	37fff320 	tbnz	w0, #31, 96034ca8 <ext2_mount+0x4c>
    return 0;
    96034e48:	52800014 	mov	w20, #0x0                   	// #0
    ext2->fs_offset = fs_offset;
    96034e4c:	f9026275 	str	x21, [x19, #1216]
    *cookie = (fscookie *)ext2;
    96034e50:	f90002d3 	str	x19, [x22]
    return 0;
    96034e54:	17ffffc8 	b	96034d74 <ext2_mount+0x118>
        return err;
    96034e58:	12800014 	mov	w20, #0xffffffff            	// #-1
    96034e5c:	17ffffc6 	b	96034d74 <ext2_mount+0x118>

0000000096034e60 <ext2_walk>:
    }
}

/* note, trashes path */
static int ext2_walk(ext2_t *ext2, char *path, struct ext2fs_dinode *start_inode, inodenum_t *inum, int recurse)
{
    96034e60:	d10ec3ff 	sub	sp, sp, #0x3b0
    96034e64:	a9007bfd 	stp	x29, x30, [sp]
    96034e68:	910003fd 	mov	x29, sp
    96034e6c:	a90153f3 	stp	x19, x20, [sp, #16]
    96034e70:	a9025bf5 	stp	x21, x22, [sp, #32]
    96034e74:	aa0003f5 	mov	x21, x0
    96034e78:	a90363f7 	stp	x23, x24, [sp, #48]
    int err;
    bool done;

    LTRACEF("path '%s', start_inode %p, inum %p, recurse %d\n", path, start_inode, inum, recurse);

    if (recurse > 4)
    96034e7c:	2a0403e0 	mov	w0, w4
{
    96034e80:	a9046bf9 	stp	x25, x26, [sp, #64]
    if (recurse > 4)
    96034e84:	7100141f 	cmp	w0, #0x5
{
    96034e88:	a90573fb 	stp	x27, x28, [sp, #80]
    96034e8c:	b9006fa4 	str	w4, [x29, #108]
    if (recurse > 4)
    96034e90:	54000561 	b.ne	96034f3c <ext2_walk+0xdc>  // b.any
        return ERR_RECURSE_TOO_DEEP;
    96034e94:	128002d3 	mov	w19, #0xffffffe9            	// #-23
    96034e98:	14000020 	b	96034f18 <ext2_walk+0xb8>

    /* chew up leading slashes */
    ptr = &path[0];
    while (*ptr == '/')
        ptr++;
    96034e9c:	91000694 	add	x20, x20, #0x1
    while (*ptr == '/')
    96034ea0:	39400280 	ldrb	w0, [x20]
    96034ea4:	7100bc1f 	cmp	w0, #0x2f
    96034ea8:	54ffffa0 	b.eq	96034e9c <ext2_walk+0x3c>  // b.none
    buf = malloc(E2FS_BLOCK_SIZE(ext2->super_blk));
    96034eac:	52808019 	mov	w25, #0x400                 	// #1024

    done = false;
    memcpy(&dir_inode, start_inode, sizeof(struct ext2fs_dinode));
    96034eb0:	d2801402 	mov	x2, #0xa0                  	// #160
    96034eb4:	910443a0 	add	x0, x29, #0x110
    96034eb8:	97ffd41b 	bl	96029f24 <memcpy>
    while (!done) {
        /* process the first component */
        char *next_sep = strchr(ptr, '/');
    96034ebc:	528005e1 	mov	w1, #0x2f                  	// #47
    96034ec0:	aa1403e0 	mov	x0, x20
    96034ec4:	97ffd530 	bl	9602a384 <strchr>
    96034ec8:	aa0003f6 	mov	x22, x0
        if (next_sep) {
    96034ecc:	b4000400 	cbz	x0, 96034f4c <ext2_walk+0xec>
            /* terminate the next component, giving us a substring */
            *next_sep = 0;
    96034ed0:	3900001f 	strb	wzr, [x0]
    96034ed4:	5280001a 	mov	w26, #0x0                   	// #0

        LTRACEF("component '%s', done %d\n", ptr, done);
        LTRACEF("inode flags: 0x%08x\n", dir_inode.e2di_flags);

        /* do the lookup on this component */
        if (IS_EXTENTS(dir_inode.e2di_flags)) {
    96034ed8:	b94133a0 	ldr	w0, [x29, #304]
    96034edc:	369803c0 	tbz	w0, #19, 96034f54 <ext2_walk+0xf4>
            err = ext4_dir_lookup(ext2, &dir_inode, ptr, inum);
    96034ee0:	aa1703e3 	mov	x3, x23
    96034ee4:	aa1403e2 	mov	x2, x20
    96034ee8:	910443a1 	add	x1, x29, #0x110
    96034eec:	aa1503e0 	mov	x0, x21
    96034ef0:	94000474 	bl	960360c0 <ext4_dir_lookup>
    96034ef4:	2a0003f3 	mov	w19, w0
        } else {
            err = ext2_dir_lookup(ext2, &dir_inode, ptr, inum);
        }
        if (err < 0) {
    96034ef8:	36f80a40 	tbz	w0, #31, 96035040 <ext2_walk+0x1e0>
            TRACEF("'%s' lookup failed\n", ptr);
    96034efc:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034f00:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034f04:	aa1403e3 	mov	x3, x20
    96034f08:	528011c2 	mov	w2, #0x8e                  	// #142
    96034f0c:	912ac021 	add	x1, x1, #0xab0
    96034f10:	912cb000 	add	x0, x0, #0xb2c
    96034f14:	97ffb5d7 	bl	96022670 <tegrabl_printf>
                ptr++;
        }
    }

    return 0;
}
    96034f18:	2a1303e0 	mov	w0, w19
    96034f1c:	a9407bfd 	ldp	x29, x30, [sp]
    96034f20:	a94153f3 	ldp	x19, x20, [sp, #16]
    96034f24:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96034f28:	a94363f7 	ldp	x23, x24, [sp, #48]
    96034f2c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96034f30:	a94573fb 	ldp	x27, x28, [sp, #80]
    96034f34:	910ec3ff 	add	sp, sp, #0x3b0
    96034f38:	d65f03c0 	ret
    96034f3c:	aa0103f4 	mov	x20, x1
    96034f40:	aa0303f7 	mov	x23, x3
    96034f44:	aa0203e1 	mov	x1, x2
    96034f48:	17ffffd6 	b	96034ea0 <ext2_walk+0x40>
            done = true;
    96034f4c:	5280003a 	mov	w26, #0x1                   	// #1
    96034f50:	17ffffe2 	b	96034ed8 <ext2_walk+0x78>
    size_t namelen = strlen(name);
    96034f54:	aa1403e0 	mov	x0, x20
    96034f58:	97ffd4ed 	bl	9602a30c <strlen>
    96034f5c:	aa0003fb 	mov	x27, x0
    if (!S_ISDIR(dir_inode->e2di_mode)) {
    96034f60:	794223a0 	ldrh	w0, [x29, #272]
    96034f64:	12140c00 	and	w0, w0, #0xf000
    96034f68:	7140101f 	cmp	w0, #0x4, lsl #12
    96034f6c:	54000120 	b.eq	96034f90 <ext2_walk+0x130>  // b.none
        TRACEF("Not a directory\n");
    96034f70:	52800562 	mov	w2, #0x2b                  	// #43
    96034f74:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034f78:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034f7c:	912a8021 	add	x1, x1, #0xaa0
    96034f80:	912ae800 	add	x0, x0, #0xaba
        return ERR_NOT_DIR;
    96034f84:	12800293 	mov	w19, #0xffffffeb            	// #-21
        TRACEF("Not a directory\n");
    96034f88:	97ffb5ba 	bl	96022670 <tegrabl_printf>
    96034f8c:	17ffffdc 	b	96034efc <ext2_walk+0x9c>
    buf = malloc(E2FS_BLOCK_SIZE(ext2->super_blk));
    96034f90:	b9402aa0 	ldr	w0, [x21, #40]
    96034f94:	1ac02320 	lsl	w0, w25, w0
    96034f98:	97ffce08 	bl	960287b8 <malloc>
    96034f9c:	aa0003f3 	mov	x19, x0
    if (buf == NULL) {
    96034fa0:	b5000120 	cbnz	x0, 96034fc4 <ext2_walk+0x164>
        TRACEF("Failed to allocate mmeory for super block\n");
    96034fa4:	52800622 	mov	w2, #0x31                  	// #49
    96034fa8:	f0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96034fac:	f0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96034fb0:	912a8021 	add	x1, x1, #0xaa0
    96034fb4:	912b5400 	add	x0, x0, #0xad5
        return ERR_NO_MEMORY;
    96034fb8:	12800093 	mov	w19, #0xfffffffb            	// #-5
        TRACEF("Failed to allocate mmeory for super block\n");
    96034fbc:	97ffb5ad 	bl	96022670 <tegrabl_printf>
    96034fc0:	17ffffcf 	b	96034efc <ext2_walk+0x9c>
    file_blocknum = 0;
    96034fc4:	52800018 	mov	w24, #0x0                   	// #0
        err = ext2_read_inode(ext2, dir_inode, buf, file_blocknum * E2FS_BLOCK_SIZE(ext2->super_blk),
    96034fc8:	b9402aa3 	ldr	w3, [x21, #40]
    96034fcc:	aa1303e2 	mov	x2, x19
    96034fd0:	910443a1 	add	x1, x29, #0x110
    96034fd4:	aa1503e0 	mov	x0, x21
    96034fd8:	1ac32324 	lsl	w4, w25, w3
    96034fdc:	1b187c83 	mul	w3, w4, w24
    96034fe0:	940000f6 	bl	960353b8 <ext2_read_inode>
        if (err <= 0) {
    96034fe4:	7100001f 	cmp	w0, #0x0
    96034fe8:	5400092c 	b.gt	9603510c <ext2_walk+0x2ac>
            free(buf);
    96034fec:	aa1303e0 	mov	x0, x19
            return -1;
    96034ff0:	12800013 	mov	w19, #0xffffffff            	// #-1
            free(buf);
    96034ff4:	97ffcdf2 	bl	960287bc <free>
    96034ff8:	17ffffc1 	b	96034efc <ext2_walk+0x9c>
            ent = (struct ext2fs_dir_entry_2 *)&buf[pos];
    96034ffc:	8b23427c 	add	x28, x19, w3, uxtw
            if (LE16(ent->e2d_rec_len) == 0) {
    96035000:	79400b80 	ldrh	w0, [x28, #4]
    96035004:	34000700 	cbz	w0, 960350e4 <ext2_walk+0x284>
            if (ent->e2d_name_len == namelen && memcmp(name, ent->e2d_name, ent->e2d_name_len) == 0) {
    96035008:	39401b80 	ldrb	w0, [x28, #6]
    9603500c:	eb00037f 	cmp	x27, x0
    96035010:	540005a1 	b.ne	960350c4 <ext2_walk+0x264>  // b.any
    96035014:	b9006ba3 	str	w3, [x29, #104]
    96035018:	aa1b03e2 	mov	x2, x27
    9603501c:	91002381 	add	x1, x28, #0x8
    96035020:	aa1403e0 	mov	x0, x20
    96035024:	97ffd413 	bl	9602a070 <memcmp>
    96035028:	b9406ba3 	ldr	w3, [x29, #104]
    9603502c:	350004c0 	cbnz	w0, 960350c4 <ext2_walk+0x264>
                *inum = LE32(ent->e2d_inode);
    96035030:	b9400380 	ldr	w0, [x28]
    96035034:	b90002e0 	str	w0, [x23]
                free(buf);
    96035038:	aa1303e0 	mov	x0, x19
    9603503c:	97ffcde0 	bl	960287bc <free>
        err = ext2_load_inode(ext2, *inum, &inode);
    96035040:	b94002e1 	ldr	w1, [x23]
    96035044:	9101c3a2 	add	x2, x29, #0x70
    96035048:	aa1503e0 	mov	x0, x21
    9603504c:	97fffec1 	bl	96034b50 <ext2_load_inode>
    96035050:	2a0003f3 	mov	w19, w0
        if (err < 0)
    96035054:	37fff620 	tbnz	w0, #31, 96034f18 <ext2_walk+0xb8>
    96035058:	7940e3a0 	ldrh	w0, [x29, #112]
    9603505c:	12140c00 	and	w0, w0, #0xf000
        if (S_ISLNK(inode.e2di_mode)) {
    96035060:	7140281f 	cmp	w0, #0xa, lsl #12
    96035064:	54000601 	b.ne	96035124 <ext2_walk+0x2c4>  // b.any
            err = ext2_read_link(ext2, &inode, link, sizeof(link));
    96035068:	d2804003 	mov	x3, #0x200                 	// #512
    9603506c:	9106c3a2 	add	x2, x29, #0x1b0
    96035070:	9101c3a1 	add	x1, x29, #0x70
    96035074:	aa1503e0 	mov	x0, x21
    96035078:	940001cc 	bl	960357a8 <ext2_read_link>
    9603507c:	2a0003f3 	mov	w19, w0
            if (err < 0)
    96035080:	37fff4c0 	tbnz	w0, #31, 96034f18 <ext2_walk+0xb8>
                ptr = next_sep + 1;
    96035084:	910006c1 	add	x1, x22, #0x1
                while (*ptr == '/')
    96035088:	39400020 	ldrb	w0, [x1]
    9603508c:	7100bc1f 	cmp	w0, #0x2f
    96035090:	54000420 	b.eq	96035114 <ext2_walk+0x2b4>  // b.none
    96035094:	b9406fa0 	ldr	w0, [x29, #108]
                err = ext2_walk(ext2, ptr, &ext2->root_inode, inum, recurse + 1);
    96035098:	aa1703e3 	mov	x3, x23
    9603509c:	11000404 	add	w4, w0, #0x1
            if (link[0] == '/') {
    960350a0:	3946c3a0 	ldrb	w0, [x29, #432]
    960350a4:	7100bc1f 	cmp	w0, #0x2f
    960350a8:	540003a1 	b.ne	9603511c <ext2_walk+0x2bc>  // b.any
                err = ext2_walk(ext2, ptr, &ext2->root_inode, inum, recurse + 1);
    960350ac:	911082a2 	add	x2, x21, #0x420
                err = ext2_walk(ext2, ptr, &dir_inode, inum, recurse + 1);
    960350b0:	aa1503e0 	mov	x0, x21
    960350b4:	97ffff6b 	bl	96034e60 <ext2_walk>
    return 0;
    960350b8:	7100001f 	cmp	w0, #0x0
    960350bc:	1a9fb013 	csel	w19, w0, wzr, lt  // lt = tstop
    960350c0:	17ffff96 	b	96034f18 <ext2_walk+0xb8>
            pos += ROUNDUP(LE16(ent->e2d_rec_len), 4);
    960350c4:	79400b80 	ldrh	w0, [x28, #4]
    960350c8:	11000c00 	add	w0, w0, #0x3
    960350cc:	121e7400 	and	w0, w0, #0xfffffffc
    960350d0:	0b000063 	add	w3, w3, w0
        while (pos < E2FS_BLOCK_SIZE(ext2->super_blk)) {
    960350d4:	b9402aa0 	ldr	w0, [x21, #40]
    960350d8:	1ac02320 	lsl	w0, w25, w0
    960350dc:	6b00007f 	cmp	w3, w0
    960350e0:	54fff8e3 	b.cc	96034ffc <ext2_walk+0x19c>  // b.lo, b.ul, b.last
        file_blocknum++;
    960350e4:	11000718 	add	w24, w24, #0x1
        if (file_blocknum > 1024) {
    960350e8:	7110071f 	cmp	w24, #0x401
    960350ec:	54fff6e1 	b.ne	96034fc8 <ext2_walk+0x168>  // b.any
            TRACEF("Invalid file block num\n");
    960350f0:	52800ba2 	mov	w2, #0x5d                  	// #93
    960350f4:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    960350f8:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960350fc:	912a8021 	add	x1, x1, #0xaa0
    96035100:	912c2800 	add	x0, x0, #0xb0a
    96035104:	97ffb55b 	bl	96022670 <tegrabl_printf>
    96035108:	17ffffb9 	b	96034fec <ext2_walk+0x18c>
        uint pos = 0;
    9603510c:	52800003 	mov	w3, #0x0                   	// #0
    96035110:	17fffff1 	b	960350d4 <ext2_walk+0x274>
                    ptr++;
    96035114:	91000421 	add	x1, x1, #0x1
    96035118:	17ffffdc 	b	96035088 <ext2_walk+0x228>
                err = ext2_walk(ext2, ptr, &dir_inode, inum, recurse + 1);
    9603511c:	910443a2 	add	x2, x29, #0x110
    96035120:	17ffffe4 	b	960350b0 <ext2_walk+0x250>
        } else if (S_ISDIR(inode.e2di_mode)) {
    96035124:	7140101f 	cmp	w0, #0x4, lsl #12
    96035128:	54000101 	b.ne	96035148 <ext2_walk+0x2e8>  // b.any
            memcpy(&dir_inode, &inode, sizeof(struct ext2fs_dinode));
    9603512c:	d2801402 	mov	x2, #0xa0                  	// #160
    96035130:	9101c3a1 	add	x1, x29, #0x70
    96035134:	910443a0 	add	x0, x29, #0x110
    96035138:	97ffd37b 	bl	96029f24 <memcpy>
        if (!done) {
    9603513c:	340000da 	cbz	w26, 96035154 <ext2_walk+0x2f4>
    return 0;
    96035140:	52800013 	mov	w19, #0x0                   	// #0
    96035144:	17ffff75 	b	96034f18 <ext2_walk+0xb8>
            if (!done) {
    96035148:	35ffffda 	cbnz	w26, 96035140 <ext2_walk+0x2e0>
                return ERR_NOT_FOUND;
    9603514c:	12800033 	mov	w19, #0xfffffffe            	// #-2
    96035150:	17ffff72 	b	96034f18 <ext2_walk+0xb8>
            ptr = next_sep + 1;
    96035154:	910006d4 	add	x20, x22, #0x1
            while (*ptr == '/')
    96035158:	39400280 	ldrb	w0, [x20]
    9603515c:	7100bc1f 	cmp	w0, #0x2f
    96035160:	54ffeae1 	b.ne	96034ebc <ext2_walk+0x5c>  // b.any
                ptr++;
    96035164:	91000694 	add	x20, x20, #0x1
    96035168:	17fffffc 	b	96035158 <ext2_walk+0x2f8>

000000009603516c <ext2_lookup>:

/* do a path parse, looking up each component */
int ext2_lookup(ext2_t *ext2, const char *_path, inodenum_t *inum)
{
    9603516c:	d10883ff 	sub	sp, sp, #0x220
    96035170:	a9007bfd 	stp	x29, x30, [sp]
    96035174:	910003fd 	mov	x29, sp
    96035178:	a90153f3 	stp	x19, x20, [sp, #16]
    9603517c:	aa0003f3 	mov	x19, x0
    96035180:	aa0203f4 	mov	x20, x2
    LTRACEF("path '%s', inum %p\n", _path, inum);

    char path[512];
    strlcpy(path, _path, sizeof(path));
    96035184:	910083a0 	add	x0, x29, #0x20
    96035188:	d2804002 	mov	x2, #0x200                 	// #512
    9603518c:	97ffd468 	bl	9602a32c <strlcpy>

    return ext2_walk(ext2, path, &ext2->root_inode, inum, 1);
    96035190:	aa1403e3 	mov	x3, x20
    96035194:	91108262 	add	x2, x19, #0x420
    96035198:	910083a1 	add	x1, x29, #0x20
    9603519c:	52800024 	mov	w4, #0x1                   	// #1
    960351a0:	aa1303e0 	mov	x0, x19
    960351a4:	97ffff2f 	bl	96034e60 <ext2_walk>
}
    960351a8:	a9407bfd 	ldp	x29, x30, [sp]
    960351ac:	a94153f3 	ldp	x19, x20, [sp, #16]
    960351b0:	910883ff 	add	sp, sp, #0x220
    960351b4:	d65f03c0 	ret

00000000960351b8 <ext2_read_block>:

#define LOCAL_TRACE 0

int ext2_read_block(ext2_t *ext2, void *buf, blocknum_t bnum)
{
    return bcache_read_block(ext2->cache, buf, bnum);
    960351b8:	f9400400 	ldr	x0, [x0, #8]
    960351bc:	140005ac 	b	9603686c <bcache_read_block>

00000000960351c0 <ext2_get_block>:
}

int ext2_get_block(ext2_t *ext2, void **ptr, blocknum_t bnum)
{
    return bcache_get_block(ext2->cache, ptr, bnum);
    960351c0:	f9400400 	ldr	x0, [x0, #8]
    960351c4:	140005bc 	b	960368b4 <bcache_get_block>

00000000960351c8 <ext2_put_block>:
}

int ext2_put_block(ext2_t *ext2, blocknum_t bnum)
{
    return bcache_put_block(ext2->cache, bnum);
    960351c8:	f9400400 	ldr	x0, [x0, #8]
    960351cc:	140005d6 	b	96036924 <bcache_put_block>

00000000960351d0 <ext2_get_indirect_block_pointer_cache_block>:
    return -1;
}

// This function returns a pointer to the cache block that corresponds to the indirect block pointer.
int ext2_get_indirect_block_pointer_cache_block(ext2_t *ext2, struct ext2fs_dinode *inode, uint32_t **cache_block, uint32_t level, uint32_t pos[], blocknum_t *block_loaded)
{
    960351d0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    uint32_t current_level = 0;
    uint current_block = 0, last_block;
    blocknum_t *block = NULL;
    int err;

    if ((level > 3) || (level == 0)) {
    960351d4:	51000463 	sub	w3, w3, #0x1
    960351d8:	7100087f 	cmp	w3, #0x2
{
    960351dc:	910003fd 	mov	x29, sp
    960351e0:	a90153f3 	stp	x19, x20, [sp, #16]
    960351e4:	a9025bf5 	stp	x21, x22, [sp, #32]
    960351e8:	aa0203f5 	mov	x21, x2
    960351ec:	a90363f7 	stp	x23, x24, [sp, #48]
    960351f0:	aa0503f6 	mov	x22, x5
    960351f4:	a9046bf9 	stp	x25, x26, [sp, #64]
    blocknum_t *block = NULL;
    960351f8:	f90037bf 	str	xzr, [x29, #104]
{
    960351fc:	f9002bfb 	str	x27, [sp, #80]
    if ((level > 3) || (level == 0)) {
    96035200:	540003a8 	b.hi	96035274 <ext2_get_indirect_block_pointer_cache_block+0xa4>  // b.pmore
    96035204:	aa0003f7 	mov	x23, x0
    96035208:	aa0103f9 	mov	x25, x1
    9603520c:	aa0403f8 	mov	x24, x4
    96035210:	9100047a 	add	x26, x3, #0x1
    96035214:	d2800014 	mov	x20, #0x0                   	// #0
    uint current_block = 0, last_block;
    96035218:	52800013 	mov	w19, #0x0                   	// #0
        goto error;
    }

    // Dig down into the indirect blocks. When done, current_block should point to the target.
    while (current_level < level) {
        if (current_level == 0) {
    9603521c:	b5000094 	cbnz	x20, 9603522c <ext2_get_indirect_block_pointer_cache_block+0x5c>
            // read the direct block, simulates a prior loop
            current_block = LE32(inode->e2di_blocks[pos[0]]);
    96035220:	b9400300 	ldr	w0, [x24]
    96035224:	8b000b20 	add	x0, x25, x0, lsl #2
    96035228:	b9402813 	ldr	w19, [x0, #40]
        }

        if (current_block == 0) {
    9603522c:	34000253 	cbz	w19, 96035274 <ext2_get_indirect_block_pointer_cache_block+0xa4>
            goto error;
        }

        last_block = current_block;
        current_level++;
        *block_loaded = current_block;
    96035230:	2a1303fb 	mov	w27, w19
    96035234:	f90002db 	str	x27, [x22]

        err = ext2_get_block(ext2, (void **)(void *)&block, current_block);
    96035238:	aa1b03e2 	mov	x2, x27
    9603523c:	9101a3a1 	add	x1, x29, #0x68
    96035240:	aa1703e0 	mov	x0, x23
    96035244:	97ffffdf 	bl	960351c0 <ext2_get_block>
        if (err < 0) {
    96035248:	37f80180 	tbnz	w0, #31, 96035278 <ext2_get_indirect_block_pointer_cache_block+0xa8>
    9603524c:	91000694 	add	x20, x20, #0x1
    96035250:	f94037a0 	ldr	x0, [x29, #104]
            goto error;
        }

        if (current_level < level) {
    96035254:	eb1a029f 	cmp	x20, x26
    96035258:	54000220 	b.eq	9603529c <ext2_get_indirect_block_pointer_cache_block+0xcc>  // b.none
            current_block = LE32(block[pos[current_level]]);
    9603525c:	b8747b01 	ldr	w1, [x24, x20, lsl #2]
    96035260:	f8617813 	ldr	x19, [x0, x1, lsl #3]
            ext2_put_block(ext2, last_block);
    96035264:	aa1b03e1 	mov	x1, x27
    96035268:	aa1703e0 	mov	x0, x23
    9603526c:	97ffffd7 	bl	960351c8 <ext2_put_block>
    96035270:	17ffffeb 	b	9603521c <ext2_get_indirect_block_pointer_cache_block+0x4c>
        err = -1;
    96035274:	12800000 	mov	w0, #0xffffffff            	// #-1

    *cache_block = (uint32_t *)block;
    return 0;

error:
    *cache_block = NULL;
    96035278:	f90002bf 	str	xzr, [x21]
    *block_loaded = 0;
    9603527c:	f90002df 	str	xzr, [x22]
    return err;
}
    96035280:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035284:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035288:	a94363f7 	ldp	x23, x24, [sp, #48]
    9603528c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96035290:	f9402bfb 	ldr	x27, [sp, #80]
    96035294:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96035298:	d65f03c0 	ret
    *cache_block = (uint32_t *)block;
    9603529c:	f90002a0 	str	x0, [x21]
    return 0;
    960352a0:	52800000 	mov	w0, #0x0                   	// #0
    960352a4:	17fffff7 	b	96035280 <ext2_get_indirect_block_pointer_cache_block+0xb0>

00000000960352a8 <file_block_to_fs_block>:

/* translate a file block to a physical block */
static blocknum_t file_block_to_fs_block(ext2_t *ext2, struct ext2fs_dinode *inode, uint fileblock)
{
    960352a8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!

    LTRACEF("inode %p, fileblock %u\n", inode, fileblock);

    uint32_t pos[4];
    uint32_t level = 0;
    ext2_calculate_block_pointer_pos(ext2, fileblock, &level, pos);
    960352ac:	2a0203e6 	mov	w6, w2
    if (block_to_find < EXT2_NDIR_BLOCKS) {
    960352b0:	f1002cdf 	cmp	x6, #0xb
{
    960352b4:	910003fd 	mov	x29, sp
    960352b8:	a90153f3 	stp	x19, x20, [sp, #16]
    960352bc:	f90013f5 	str	x21, [sp, #32]
    if (block_to_find < EXT2_NDIR_BLOCKS) {
    960352c0:	540005e9 	b.ls	9603537c <file_block_to_fs_block+0xd4>  // b.plast
    block_ptr_per_block = E2FS_ADDR_PER_BLOCK(ext2->super_blk);
    960352c4:	b9402803 	ldr	w3, [x0, #40]
    960352c8:	52808004 	mov	w4, #0x400                 	// #1024
    960352cc:	1ac32084 	lsl	w4, w4, w3
    block_to_find -= EXT2_NDIR_BLOCKS;
    960352d0:	d10030c3 	sub	x3, x6, #0xc
    block_ptr_per_block = E2FS_ADDR_PER_BLOCK(ext2->super_blk);
    960352d4:	53027c85 	lsr	w5, w4, #2
    if (block_to_find < block_ptr_per_block) {
    960352d8:	eb05007f 	cmp	x3, x5
    960352dc:	540001e2 	b.cs	96035318 <file_block_to_fs_block+0x70>  // b.hs, b.nlast
        pos[0] = EXT2_IND_BLOCK;
    960352e0:	52800183 	mov	w3, #0xc                   	// #12
        pos[1] = block_to_find;
    960352e4:	51003042 	sub	w2, w2, #0xc
        *level = 1;
    960352e8:	52800033 	mov	w19, #0x1                   	// #1
        pos[1] = block_to_find;
    960352ec:	29080ba3 	stp	w3, w2, [x29, #64]
        block = LE32(inode->e2di_blocks[fileblock]);
    } else {
        /* at least one level of indirection, get a pointer to the final indirect block table and dereference it */
        uint32_t *ind_table;
        blocknum_t phys_block;
        err = ext2_get_indirect_block_pointer_cache_block(ext2, inode, &ind_table, level, pos, &phys_block);
    960352f0:	910103b5 	add	x21, x29, #0x40
    960352f4:	aa0003f4 	mov	x20, x0
    960352f8:	9100e3a5 	add	x5, x29, #0x38
    960352fc:	aa1503e4 	mov	x4, x21
    96035300:	2a1303e3 	mov	w3, w19
    96035304:	9100c3a2 	add	x2, x29, #0x30
    96035308:	97ffffb2 	bl	960351d0 <ext2_get_indirect_block_pointer_cache_block>
        if (err < 0)
    9603530c:	36f80460 	tbz	w0, #31, 96035398 <file_block_to_fs_block+0xf0>
            return 0;
    96035310:	d2800013 	mov	x19, #0x0                   	// #0
    96035314:	1400001c 	b	96035384 <file_block_to_fs_block+0xdc>
    block_ptr_per_2nd_block = block_ptr_per_block * block_ptr_per_block;
    96035318:	1b057ca7 	mul	w7, w5, w5
    block_to_find -= block_ptr_per_block;
    9603531c:	cb050062 	sub	x2, x3, x5
    if (block_to_find < (block_ptr_per_2nd_block)) {
    96035320:	eb07005f 	cmp	x2, x7
    96035324:	54000102 	b.cs	96035344 <file_block_to_fs_block+0x9c>  // b.hs, b.nlast
        pos[0] = EXT2_DIND_BLOCK;
    96035328:	528001a3 	mov	w3, #0xd                   	// #13
    9603532c:	b90043a3 	str	w3, [x29, #64]
        pos[1] = block_to_find / block_ptr_per_block;
    96035330:	9ac50843 	udiv	x3, x2, x5
        *level = 2;
    96035334:	52800053 	mov	w19, #0x2                   	// #2
        pos[2] = block_to_find % block_ptr_per_block;
    96035338:	9b058862 	msub	x2, x3, x5, x2
    9603533c:	29088ba3 	stp	w3, w2, [x29, #68]
    96035340:	17ffffec 	b	960352f0 <file_block_to_fs_block+0x48>
    if (block_to_find < (blocknum_t)(block_ptr_per_2nd_block * block_ptr_per_block)) {
    96035344:	1b077ca4 	mul	w4, w5, w7
    block_to_find -= block_ptr_per_2nd_block;
    96035348:	cb070042 	sub	x2, x2, x7
    if (block_to_find < (blocknum_t)(block_ptr_per_2nd_block * block_ptr_per_block)) {
    9603534c:	eb04005f 	cmp	x2, x4
    96035350:	54000162 	b.cs	9603537c <file_block_to_fs_block+0xd4>  // b.hs, b.nlast
        pos[0] = EXT2_TIND_BLOCK;
    96035354:	528001c3 	mov	w3, #0xe                   	// #14
    96035358:	b90043a3 	str	w3, [x29, #64]
        pos[1] = block_to_find / block_ptr_per_2nd_block;
    9603535c:	9ac70843 	udiv	x3, x2, x7
        *level = 3;
    96035360:	52800073 	mov	w19, #0x3                   	// #3
        pos[2] = (block_to_find % block_ptr_per_2nd_block) / block_ptr_per_block;
    96035364:	9b078862 	msub	x2, x3, x7, x2
        pos[1] = block_to_find / block_ptr_per_2nd_block;
    96035368:	b90047a3 	str	w3, [x29, #68]
        pos[2] = (block_to_find % block_ptr_per_2nd_block) / block_ptr_per_block;
    9603536c:	9ac50843 	udiv	x3, x2, x5
        pos[3] = (block_to_find % block_ptr_per_2nd_block) % block_ptr_per_block;
    96035370:	9b058862 	msub	x2, x3, x5, x2
    96035374:	29090ba3 	stp	w3, w2, [x29, #72]
    96035378:	17ffffde 	b	960352f0 <file_block_to_fs_block+0x48>
        block = LE32(inode->e2di_blocks[fileblock]);
    9603537c:	8b060821 	add	x1, x1, x6, lsl #2
    96035380:	b9402833 	ldr	w19, [x1, #40]
    }

    LTRACEF("returning %lu\n", block);

    return block;
}
    96035384:	aa1303e0 	mov	x0, x19
    96035388:	f94013f5 	ldr	x21, [sp, #32]
    9603538c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035390:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96035394:	d65f03c0 	ret
        block = LE32(ind_table[pos[level]]);
    96035398:	d37e0673 	ubfiz	x19, x19, #2, #2
    9603539c:	f9401ba0 	ldr	x0, [x29, #48]
    960353a0:	b8736aa1 	ldr	w1, [x21, x19]
    960353a4:	b8617813 	ldr	w19, [x0, x1, lsl #2]
        ext2_put_block(ext2, phys_block);
    960353a8:	aa1403e0 	mov	x0, x20
    960353ac:	f9401fa1 	ldr	x1, [x29, #56]
    960353b0:	97ffff86 	bl	960351c8 <ext2_put_block>
    960353b4:	17fffff4 	b	96035384 <file_block_to_fs_block+0xdc>

00000000960353b8 <ext2_read_inode>:

ssize_t ext2_read_inode(ext2_t *ext2, struct ext2fs_dinode *inode, void *_buf, off_t offset, size_t len)
{
    960353b8:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    960353bc:	910003fd 	mov	x29, sp
    960353c0:	a90153f3 	stp	x19, x20, [sp, #16]
    960353c4:	aa0003f4 	mov	x20, x0
    960353c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960353cc:	aa0203f6 	mov	x22, x2
    960353d0:	a90363f7 	stp	x23, x24, [sp, #48]
    960353d4:	aa0403f5 	mov	x21, x4
    960353d8:	a9046bf9 	stp	x25, x26, [sp, #64]
    960353dc:	aa0103f7 	mov	x23, x1
    960353e0:	f9002bfb 	str	x27, [sp, #80]
    960353e4:	aa0303fb 	mov	x27, x3
    size_t bytes_read = 0;
    uint8_t *buf = _buf;

    /* calculate the file size */
    off_t file_size = ext2_file_len(ext2, inode);
    960353e8:	940000d3 	bl	96035734 <ext2_file_len>

    LTRACEF("inode %p, offset %"PRId64", len %zd, file_size %"PRId64"\n", inode, offset, len, file_size);

    /* trim the read */
    if (offset > file_size)
    960353ec:	eb1b001f 	cmp	x0, x27
    960353f0:	54000e63 	b.cc	960355bc <ext2_read_inode+0x204>  // b.lo, b.ul, b.last
        return 0;
    if ((off_t)(offset + len) >= file_size)
    960353f4:	8b150361 	add	x1, x27, x21
    960353f8:	eb00003f 	cmp	x1, x0
    960353fc:	54000043 	b.cc	96035404 <ext2_read_inode+0x4c>  // b.lo, b.ul, b.last
        len = file_size - offset;
    96035400:	cb1b0015 	sub	x21, x0, x27
    if (len == 0)
    96035404:	b4000dd5 	cbz	x21, 960355bc <ext2_read_inode+0x204>
        return 0;

    /* calculate the starting file block */
    uint file_block = offset / E2FS_BLOCK_SIZE(ext2->super_blk);
    96035408:	b9402a81 	ldr	w1, [x20, #40]
    9603540c:	52808013 	mov	w19, #0x400                 	// #1024
    96035410:	1ac12260 	lsl	w0, w19, w1

    /* handle partial first block */
    if ((offset % E2FS_BLOCK_SIZE(ext2->super_blk)) != 0) {
    96035414:	51000401 	sub	w1, w0, #0x1
    96035418:	ea1b003f 	tst	x1, x27
    uint file_block = offset / E2FS_BLOCK_SIZE(ext2->super_blk);
    9603541c:	9ac00b78 	udiv	x24, x27, x0
    96035420:	2a1803fa 	mov	w26, w24
    if ((offset % E2FS_BLOCK_SIZE(ext2->super_blk)) != 0) {
    96035424:	54000920 	b.eq	96035548 <ext2_read_inode+0x190>  // b.none
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    96035428:	91003c00 	add	x0, x0, #0xf
    if ((offset % E2FS_BLOCK_SIZE(ext2->super_blk)) != 0) {
    9603542c:	910003f9 	mov	x25, sp
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    96035430:	927c7000 	and	x0, x0, #0x1fffffff0

        /* calculate the block and read it */
        blocknum_t phys_block = file_block_to_fs_block(ext2, inode, file_block);
    96035434:	2a1803e2 	mov	w2, w24
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    96035438:	cb2063ff 	sub	sp, sp, x0
        blocknum_t phys_block = file_block_to_fs_block(ext2, inode, file_block);
    9603543c:	aa1703e1 	mov	x1, x23
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    96035440:	910003fa 	mov	x26, sp
        blocknum_t phys_block = file_block_to_fs_block(ext2, inode, file_block);
    96035444:	aa1403e0 	mov	x0, x20
    96035448:	97ffff98 	bl	960352a8 <file_block_to_fs_block>
        if (phys_block == 0) {
    9603544c:	b5000740 	cbnz	x0, 96035534 <ext2_read_inode+0x17c>
            memset(temp, 0, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035450:	b9402a82 	ldr	w2, [x20, #40]
    96035454:	52800001 	mov	w1, #0x0                   	// #0
    96035458:	910003e0 	mov	x0, sp
    9603545c:	1ac22262 	lsl	w2, w19, w2
    96035460:	97ffd272 	bl	96029e28 <memset>
        } else {
            ext2_read_block(ext2, temp, phys_block);
        }

        /* copy out what we need */
        size_t block_offset = offset % E2FS_BLOCK_SIZE(ext2->super_blk);
    96035464:	b9402a80 	ldr	w0, [x20, #40]
    96035468:	52808013 	mov	w19, #0x400                 	// #1024
    9603546c:	1ac02273 	lsl	w19, w19, w0
    96035470:	51000661 	sub	w1, w19, #0x1
    96035474:	8a1b0021 	and	x1, x1, x27
        size_t tocopy = MIN(len, E2FS_BLOCK_SIZE(ext2->super_blk) - block_offset);
        memcpy(buf, temp + block_offset, tocopy);
    96035478:	aa1603e0 	mov	x0, x22
        size_t tocopy = MIN(len, E2FS_BLOCK_SIZE(ext2->super_blk) - block_offset);
    9603547c:	cb010273 	sub	x19, x19, x1
        memcpy(buf, temp + block_offset, tocopy);
    96035480:	8b010341 	add	x1, x26, x1
        size_t tocopy = MIN(len, E2FS_BLOCK_SIZE(ext2->super_blk) - block_offset);
    96035484:	eb15027f 	cmp	x19, x21

        /* increment our stuff */
        file_block++;
    96035488:	1100071a 	add	w26, w24, #0x1
        size_t tocopy = MIN(len, E2FS_BLOCK_SIZE(ext2->super_blk) - block_offset);
    9603548c:	9a959273 	csel	x19, x19, x21, ls  // ls = plast
        memcpy(buf, temp + block_offset, tocopy);
    96035490:	aa1303e2 	mov	x2, x19
        len -= tocopy;
    96035494:	cb1302b5 	sub	x21, x21, x19
        memcpy(buf, temp + block_offset, tocopy);
    96035498:	97ffd2a3 	bl	96029f24 <memcpy>
        bytes_read += tocopy;
        buf += tocopy;
    9603549c:	8b1302d6 	add	x22, x22, x19
    960354a0:	9100033f 	mov	sp, x25
    }

    /* handle middle blocks */
    while (len >= E2FS_BLOCK_SIZE(ext2->super_blk)) {
    960354a4:	52808018 	mov	w24, #0x400                 	// #1024
    960354a8:	b9402a80 	ldr	w0, [x20, #40]
    960354ac:	1ac02300 	lsl	w0, w24, w0
    960354b0:	eb15001f 	cmp	x0, x21
    960354b4:	540004e9 	b.ls	96035550 <ext2_read_inode+0x198>  // b.plast
        bytes_read += E2FS_BLOCK_SIZE(ext2->super_blk);
        buf += E2FS_BLOCK_SIZE(ext2->super_blk);
    }

    /* handle partial last block */
    if (len > 0) {
    960354b8:	b40002d5 	cbz	x21, 96035510 <ext2_read_inode+0x158>
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    960354bc:	91003c00 	add	x0, x0, #0xf
    if (len > 0) {
    960354c0:	910003f9 	mov	x25, sp
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    960354c4:	927c7000 	and	x0, x0, #0x1fffffff0

        /* calculate the block and read it */
        blocknum_t phys_block = file_block_to_fs_block(ext2, inode, file_block);
    960354c8:	2a1a03e2 	mov	w2, w26
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    960354cc:	cb2063ff 	sub	sp, sp, x0
        blocknum_t phys_block = file_block_to_fs_block(ext2, inode, file_block);
    960354d0:	aa1703e1 	mov	x1, x23
        uint8_t temp[E2FS_BLOCK_SIZE(ext2->super_blk)];
    960354d4:	910003fb 	mov	x27, sp
        blocknum_t phys_block = file_block_to_fs_block(ext2, inode, file_block);
    960354d8:	aa1403e0 	mov	x0, x20
    960354dc:	97ffff73 	bl	960352a8 <file_block_to_fs_block>
        if (phys_block == 0) {
    960354e0:	b5000640 	cbnz	x0, 960355a8 <ext2_read_inode+0x1f0>
            memset(temp, 0, E2FS_BLOCK_SIZE(ext2->super_blk));
    960354e4:	b9402a82 	ldr	w2, [x20, #40]
    960354e8:	52800001 	mov	w1, #0x0                   	// #0
    960354ec:	910003e0 	mov	x0, sp
    960354f0:	1ac22302 	lsl	w2, w24, w2
    960354f4:	97ffd24d 	bl	96029e28 <memset>
        } else {
            ext2_read_block(ext2, temp, phys_block);
        }

        /* copy out what we need */
        memcpy(buf, temp, len);
    960354f8:	aa1503e2 	mov	x2, x21
    960354fc:	aa1b03e1 	mov	x1, x27
    96035500:	aa1603e0 	mov	x0, x22

        /* increment our stuff */
        bytes_read += len;
    96035504:	8b150273 	add	x19, x19, x21
        memcpy(buf, temp, len);
    96035508:	97ffd287 	bl	96029f24 <memcpy>
    9603550c:	9100033f 	mov	sp, x25
    }

    LTRACEF("bytes_read %zu\n", bytes_read);

    return (ssize_t)bytes_read;
    96035510:	aa1303e0 	mov	x0, x19
}
    96035514:	910003bf 	mov	sp, x29
    96035518:	f9402bfb 	ldr	x27, [sp, #80]
    9603551c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035520:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035524:	a94363f7 	ldp	x23, x24, [sp, #48]
    96035528:	a9446bf9 	ldp	x25, x26, [sp, #64]
    9603552c:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96035530:	d65f03c0 	ret
            ext2_read_block(ext2, temp, phys_block);
    96035534:	aa0003e2 	mov	x2, x0
    96035538:	910003e1 	mov	x1, sp
    9603553c:	aa1403e0 	mov	x0, x20
    96035540:	97ffff1e 	bl	960351b8 <ext2_read_block>
    96035544:	17ffffc8 	b	96035464 <ext2_read_inode+0xac>
    size_t bytes_read = 0;
    96035548:	d2800013 	mov	x19, #0x0                   	// #0
    9603554c:	17ffffd6 	b	960354a4 <ext2_read_inode+0xec>
        blocknum_t phys_block = file_block_to_fs_block(ext2, inode, file_block);
    96035550:	2a1a03e2 	mov	w2, w26
    96035554:	aa1703e1 	mov	x1, x23
    96035558:	aa1403e0 	mov	x0, x20
    9603555c:	97ffff53 	bl	960352a8 <file_block_to_fs_block>
        if (phys_block == 0) {
    96035560:	b50001a0 	cbnz	x0, 96035594 <ext2_read_inode+0x1dc>
            memset(buf, 0, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035564:	b9402a82 	ldr	w2, [x20, #40]
    96035568:	52800001 	mov	w1, #0x0                   	// #0
    9603556c:	aa1603e0 	mov	x0, x22
    96035570:	1ac22302 	lsl	w2, w24, w2
    96035574:	97ffd22d 	bl	96029e28 <memset>
        len -= E2FS_BLOCK_SIZE(ext2->super_blk);
    96035578:	b9402a80 	ldr	w0, [x20, #40]
        file_block++;
    9603557c:	1100075a 	add	w26, w26, #0x1
        len -= E2FS_BLOCK_SIZE(ext2->super_blk);
    96035580:	1ac02300 	lsl	w0, w24, w0
    96035584:	cb0002b5 	sub	x21, x21, x0
        bytes_read += E2FS_BLOCK_SIZE(ext2->super_blk);
    96035588:	8b000273 	add	x19, x19, x0
        buf += E2FS_BLOCK_SIZE(ext2->super_blk);
    9603558c:	8b0002d6 	add	x22, x22, x0
    96035590:	17ffffc6 	b	960354a8 <ext2_read_inode+0xf0>
            ext2_read_block(ext2, buf, phys_block);
    96035594:	aa0003e2 	mov	x2, x0
    96035598:	aa1603e1 	mov	x1, x22
    9603559c:	aa1403e0 	mov	x0, x20
    960355a0:	97ffff06 	bl	960351b8 <ext2_read_block>
    960355a4:	17fffff5 	b	96035578 <ext2_read_inode+0x1c0>
            ext2_read_block(ext2, temp, phys_block);
    960355a8:	aa0003e2 	mov	x2, x0
    960355ac:	910003e1 	mov	x1, sp
    960355b0:	aa1403e0 	mov	x0, x20
    960355b4:	97ffff01 	bl	960351b8 <ext2_read_block>
    960355b8:	17ffffd0 	b	960354f8 <ext2_read_inode+0x140>
        return 0;
    960355bc:	d2800000 	mov	x0, #0x0                   	// #0
    960355c0:	17ffffd5 	b	96035514 <ext2_read_inode+0x15c>

00000000960355c4 <ext2_open_file>:
#include <ext2_dinode.h>

#define LOCAL_TRACE 0

int ext2_open_file(fscookie *cookie, const char *path, filecookie **fcookie)
{
    960355c4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960355c8:	910003fd 	mov	x29, sp
    960355cc:	a90153f3 	stp	x19, x20, [sp, #16]
    960355d0:	a9025bf5 	stp	x21, x22, [sp, #32]
    960355d4:	aa0003f5 	mov	x21, x0
    960355d8:	aa0203f6 	mov	x22, x2
    ext2_t *ext2 = (ext2_t *)cookie;
    int err;

    /* do a path lookup */
    inodenum_t inum;
    err = ext2_lookup(ext2, path, &inum);
    960355dc:	9100f3a2 	add	x2, x29, #0x3c
    960355e0:	97fffee3 	bl	9603516c <ext2_lookup>
    960355e4:	2a0003f3 	mov	w19, w0
    if (err < 0)
    960355e8:	37f80180 	tbnz	w0, #31, 96035618 <ext2_open_file+0x54>
        return err;

    /* create the file object */
    ext2_file_t *file = malloc(sizeof(ext2_file_t));
    960355ec:	d2801b00 	mov	x0, #0xd8                  	// #216
    960355f0:	97ffcc72 	bl	960287b8 <malloc>
    960355f4:	aa0003f4 	mov	x20, x0
    if (file == NULL) {
    960355f8:	b50001a0 	cbnz	x0, 9603562c <ext2_open_file+0x68>
        TRACEF("Failed to allocate memory for ext2 file object\n");
        return ERR_NO_MEMORY;
    960355fc:	12800093 	mov	w19, #0xfffffffb            	// #-5
        TRACEF("Failed to allocate memory for ext2 file object\n");
    96035600:	52800622 	mov	w2, #0x31                  	// #49
    96035604:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035608:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603560c:	912d2821 	add	x1, x1, #0xb4a
    96035610:	912da000 	add	x0, x0, #0xb68
    96035614:	97ffb417 	bl	96022670 <tegrabl_printf>

    file->ext2 = ext2;
    *fcookie = (filecookie *)file;

    return 0;
}
    96035618:	2a1303e0 	mov	w0, w19
    9603561c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035620:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035624:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96035628:	d65f03c0 	ret
    memset(file, 0, sizeof(ext2_file_t));
    9603562c:	d2801b02 	mov	x2, #0xd8                  	// #216
    96035630:	52800001 	mov	w1, #0x0                   	// #0
    96035634:	97ffd1fd 	bl	96029e28 <memset>
    err = ext2_load_inode(ext2, inum, &file->inode);
    96035638:	b9403fa1 	ldr	w1, [x29, #60]
    9603563c:	9100e282 	add	x2, x20, #0x38
    96035640:	aa1503e0 	mov	x0, x21
    96035644:	97fffd43 	bl	96034b50 <ext2_load_inode>
    96035648:	2a0003f3 	mov	w19, w0
    if (err < 0) {
    9603564c:	36f80080 	tbz	w0, #31, 9603565c <ext2_open_file+0x98>
        free(file);
    96035650:	aa1403e0 	mov	x0, x20
    96035654:	97ffcc5a 	bl	960287bc <free>
        return err;
    96035658:	17fffff0 	b	96035618 <ext2_open_file+0x54>
    return 0;
    9603565c:	52800013 	mov	w19, #0x0                   	// #0
    file->ext2 = ext2;
    96035660:	f9000295 	str	x21, [x20]
    *fcookie = (filecookie *)file;
    96035664:	f90002d4 	str	x20, [x22]
    return 0;
    96035668:	17ffffec 	b	96035618 <ext2_open_file+0x54>

000000009603566c <ext2_read_file>:

ssize_t ext2_read_file(filecookie *fcookie, void *buf, off_t offset, size_t len)
{
    9603566c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96035670:	910003fd 	mov	x29, sp
    ext2_file_t *file = (ext2_file_t *)fcookie;
    int err;

    if (len == 0) {
    96035674:	b5000143 	cbnz	x3, 9603569c <ext2_read_file+0x30>
        TRACEF("File length cannot be 0\n");
    96035678:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    9603567c:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035680:	52800922 	mov	w2, #0x49                  	// #73
    96035684:	912d6421 	add	x1, x1, #0xb59
    96035688:	912e8800 	add	x0, x0, #0xba2
    9603568c:	97ffb3f9 	bl	96022670 <tegrabl_printf>
    }

    // test that it's a file
    if (!S_ISREG(file->inode.e2di_mode)) {
        dprintf(INFO, "ext2_read_file: not a file, mode: 0x%04x\n", file->inode.e2di_mode);
        return -1;
    96035690:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1

    // read from the inode
    err = ext2_read_inode(file->ext2, &file->inode, buf, offset, len);

    return err;
}
    96035694:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96035698:	d65f03c0 	ret
    9603569c:	aa0103e5 	mov	x5, x1
    if (!S_ISREG(file->inode.e2di_mode)) {
    960356a0:	79407001 	ldrh	w1, [x0, #56]
    960356a4:	12140c24 	and	w4, w1, #0xf000
    960356a8:	7140209f 	cmp	w4, #0x8, lsl #12
    960356ac:	540000a0 	b.eq	960356c0 <ext2_read_file+0x54>  // b.none
        dprintf(INFO, "ext2_read_file: not a file, mode: 0x%04x\n", file->inode.e2di_mode);
    960356b0:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960356b4:	912f1400 	add	x0, x0, #0xbc5
    960356b8:	97ffc8f3 	bl	96027a84 <_dprintf>
    960356bc:	17fffff5 	b	96035690 <ext2_read_file+0x24>
    err = ext2_read_inode(file->ext2, &file->inode, buf, offset, len);
    960356c0:	9100e001 	add	x1, x0, #0x38
    960356c4:	f9400000 	ldr	x0, [x0]
    960356c8:	aa0303e4 	mov	x4, x3
    960356cc:	aa0203e3 	mov	x3, x2
    960356d0:	aa0503e2 	mov	x2, x5
    960356d4:	97ffff39 	bl	960353b8 <ext2_read_inode>
    return err;
    960356d8:	93407c00 	sxtw	x0, w0
    960356dc:	17ffffee 	b	96035694 <ext2_read_file+0x28>

00000000960356e0 <ext2_close_file>:

int ext2_close_file(filecookie *fcookie)
{
    960356e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    960356e4:	910003fd 	mov	x29, sp
    960356e8:	a90153f3 	stp	x19, x20, [sp, #16]
    960356ec:	aa0003f4 	mov	x20, x0
    960356f0:	f90013f5 	str	x21, [sp, #32]
    960356f4:	91002013 	add	x19, x0, #0x8
    960356f8:	9100e015 	add	x21, x0, #0x38
    ext2_file_t *file = (ext2_file_t *)fcookie;

    // see if we need to free any of the cache blocks
    int i;
    for (i=0; i < 3; i++) {
        if (file->ind_cache[i].num != 0) {
    960356fc:	f9400260 	ldr	x0, [x19]
    96035700:	b4000060 	cbz	x0, 9603570c <ext2_close_file+0x2c>
            free(file->ind_cache[i].ptr);
    96035704:	f9400660 	ldr	x0, [x19, #8]
    96035708:	97ffcc2d 	bl	960287bc <free>
    9603570c:	91004273 	add	x19, x19, #0x10
    for (i=0; i < 3; i++) {
    96035710:	eb15027f 	cmp	x19, x21
    96035714:	54ffff41 	b.ne	960356fc <ext2_close_file+0x1c>  // b.any
        }
    }

    free(file);
    96035718:	aa1403e0 	mov	x0, x20
    9603571c:	97ffcc28 	bl	960287bc <free>

    return 0;
}
    96035720:	52800000 	mov	w0, #0x0                   	// #0
    96035724:	f94013f5 	ldr	x21, [sp, #32]
    96035728:	a94153f3 	ldp	x19, x20, [sp, #16]
    9603572c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96035730:	d65f03c0 	ret

0000000096035734 <ext2_file_len>:

off_t ext2_file_len(ext2_t *ext2, struct ext2fs_dinode *inode)
{
    /* calculate the file size */
    off_t len = inode->e2di_size;
    if ((ext2->super_blk.e2fs_features_rocompat & EXT2F_ROCOMPAT_LARGEFILE) && (S_ISREG(inode->e2di_mode))) {
    96035734:	b9407400 	ldr	w0, [x0, #116]
    off_t len = inode->e2di_size;
    96035738:	b9400422 	ldr	w2, [x1, #4]
    if ((ext2->super_blk.e2fs_features_rocompat & EXT2F_ROCOMPAT_LARGEFILE) && (S_ISREG(inode->e2di_mode))) {
    9603573c:	360800e0 	tbz	w0, #1, 96035758 <ext2_file_len+0x24>
    96035740:	79400020 	ldrh	w0, [x1]
    96035744:	12140c00 	and	w0, w0, #0xf000
    96035748:	7140201f 	cmp	w0, #0x8, lsl #12
    9603574c:	54000061 	b.ne	96035758 <ext2_file_len+0x24>  // b.any
        /* can potentially be a large file */
        len |= (off_t)inode->e2di_size_high << 32;
    96035750:	b9406c20 	ldr	w0, [x1, #108]
    96035754:	aa008042 	orr	x2, x2, x0, lsl #32
    }

    return len;
}
    96035758:	aa0203e0 	mov	x0, x2
    9603575c:	d65f03c0 	ret

0000000096035760 <ext2_stat_file>:

int ext2_stat_file(filecookie *fcookie, struct file_stat *stat)
{
    96035760:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96035764:	aa0103e3 	mov	x3, x1
    96035768:	aa0003e4 	mov	x4, x0
    ext2_file_t *file = (ext2_file_t *)fcookie;

    stat->size = ext2_file_len(file->ext2, &file->inode);
    9603576c:	9100e001 	add	x1, x0, #0x38
{
    96035770:	910003fd 	mov	x29, sp
    stat->size = ext2_file_len(file->ext2, &file->inode);
    96035774:	f9400000 	ldr	x0, [x0]
    96035778:	97ffffef 	bl	96035734 <ext2_file_len>
    9603577c:	f9000460 	str	x0, [x3, #8]

    /* is it a dir? */
    stat->is_dir = false;
    if (S_ISDIR(file->inode.e2di_mode))
    96035780:	79407080 	ldrh	w0, [x4, #56]
    stat->is_dir = false;
    96035784:	3900007f 	strb	wzr, [x3]
    if (S_ISDIR(file->inode.e2di_mode))
    96035788:	12140c00 	and	w0, w0, #0xf000
    9603578c:	7140101f 	cmp	w0, #0x4, lsl #12
    96035790:	54000061 	b.ne	9603579c <ext2_stat_file+0x3c>  // b.any
        stat->is_dir = true;
    96035794:	52800020 	mov	w0, #0x1                   	// #1
    96035798:	39000060 	strb	w0, [x3]

    return 0;
}
    9603579c:	52800000 	mov	w0, #0x0                   	// #0
    960357a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960357a4:	d65f03c0 	ret

00000000960357a8 <ext2_read_link>:

int ext2_read_link(ext2_t *ext2, struct ext2fs_dinode *inode, char *str, size_t len)
{
    960357a8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960357ac:	aa0003e6 	mov	x6, x0
    960357b0:	910003fd 	mov	x29, sp
    960357b4:	a90153f3 	stp	x19, x20, [sp, #16]
    960357b8:	aa0203f4 	mov	x20, x2
    LTRACEF("inode %p, str %p, len %zu\n", inode, str, len);

    off_t linklen = ext2_file_len(ext2, inode);
    960357bc:	97ffffde 	bl	96035734 <ext2_file_len>

    if ((linklen == 0) || (linklen + 1 > (off_t)len))
    960357c0:	b40002e0 	cbz	x0, 9603581c <ext2_read_link+0x74>
    960357c4:	aa0003f3 	mov	x19, x0
    960357c8:	91000400 	add	x0, x0, #0x1
    960357cc:	eb03001f 	cmp	x0, x3
    960357d0:	54000268 	b.hi	9603581c <ext2_read_link+0x74>  // b.pmore
        return ERR_NO_MEMORY;

    if (linklen > 60) {
    960357d4:	f100f27f 	cmp	x19, #0x3c
    960357d8:	54000189 	b.ls	96035808 <ext2_read_link+0x60>  // b.plast
        int err = ext2_read_inode(ext2, inode, str, 0, linklen);
    960357dc:	aa1303e4 	mov	x4, x19
    960357e0:	d2800003 	mov	x3, #0x0                   	// #0
    960357e4:	aa1403e2 	mov	x2, x20
    960357e8:	aa0603e0 	mov	x0, x6
    960357ec:	97fffef3 	bl	960353b8 <ext2_read_inode>
        if (err < 0)
    960357f0:	37f80060 	tbnz	w0, #31, 960357fc <ext2_read_link+0x54>
        str[linklen] = 0;
    }

    LTRACEF("read link '%s'\n", str);

    return linklen;
    960357f4:	2a1303e0 	mov	w0, w19
        str[linklen] = 0;
    960357f8:	38336a9f 	strb	wzr, [x20, x19]
}
    960357fc:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035800:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96035804:	d65f03c0 	ret
        memcpy(str, &inode->e2di_blocks[0], linklen);
    96035808:	aa1303e2 	mov	x2, x19
    9603580c:	9100a021 	add	x1, x1, #0x28
    96035810:	aa1403e0 	mov	x0, x20
    96035814:	97ffd1c4 	bl	96029f24 <memcpy>
    96035818:	17fffff7 	b	960357f4 <ext2_read_link+0x4c>
        return ERR_NO_MEMORY;
    9603581c:	12800080 	mov	w0, #0xfffffffb            	// #-5
    96035820:	17fffff7 	b	960357fc <ext2_read_link+0x54>

0000000096035824 <extents_blk_lookup>:
{
    return (extent_header->magic == E4FS_EXTENTS_MAGIC) ? true: false;
}

static int extents_blk_lookup(ext2_t *ext2, struct ext4_extent_header *extent_header, uint32_t num, void *buf)
{
    96035824:	aa0103e4 	mov	x4, x1
    96035828:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9603582c:	d2800185 	mov	x5, #0xc                   	// #12
    96035830:	aa0303e1 	mov	x1, x3
    96035834:	910003fd 	mov	x29, sp
    96035838:	79400486 	ldrh	w6, [x4, #2]
    uint16_t i;
    uint32_t n;
    int err = 0;

    LTRACEF("Extent: depth: %u, entries: %u\n", extent_header->depth, extent_header->entries);
    extent = (struct ext4_extent *)((uintptr_t)extent_header + sizeof(struct ext4_extent_header));
    9603583c:	91003083 	add	x3, x4, #0xc
    96035840:	9b0514c5 	madd	x5, x6, x5, x5
    96035844:	8b050084 	add	x4, x4, x5

    for (i = 0; i < extent_header->entries; i++) {
    96035848:	eb04007f 	cmp	x3, x4
    9603584c:	54000061 	b.ne	96035858 <extents_blk_lookup+0x34>  // b.any
    off_t blk_num = 0;
    96035850:	d2800002 	mov	x2, #0x0                   	// #0
    96035854:	1400000b 	b	96035880 <extents_blk_lookup+0x5c>
        n = extent->block_no + extent->len;
    96035858:	79400865 	ldrh	w5, [x3, #4]
    9603585c:	b9400066 	ldr	w6, [x3]
    96035860:	0b0600a5 	add	w5, w5, w6
        if (n > num) {
    96035864:	6b0200bf 	cmp	w5, w2
    96035868:	54000329 	b.ls	960358cc <extents_blk_lookup+0xa8>  // b.plast
            blk_num = extent->start_hi;
    9603586c:	79400c64 	ldrh	w4, [x3, #6]
            blk_num = ((blk_num << 32U) | extent->start_lo) + (num - extent->block_no);
    96035870:	4b060042 	sub	w2, w2, w6
    96035874:	b9400863 	ldr	w3, [x3, #8]
    96035878:	aa048063 	orr	x3, x3, x4, lsl #32
    9603587c:	8b030042 	add	x2, x2, x3
            break;
        }
        extent++;
    }

    blk_addr = blk_num * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035880:	b9402804 	ldr	w4, [x0, #40]
    96035884:	52808003 	mov	w3, #0x400                 	// #1024
    96035888:	1ac42063 	lsl	w3, w3, w4
    blk_addr += ext2->fs_offset;
    9603588c:	f9426004 	ldr	x4, [x0, #1216]
    err = tegrabl_blockdev_read(ext2->dev, buf, blk_addr, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035890:	f9400000 	ldr	x0, [x0]
    96035894:	d503201f 	nop
    96035898:	9b031042 	madd	x2, x2, x3, x4
    9603589c:	97ff986d 	bl	9601ba50 <tegrabl_blockdev_read>
    if (err != TEGRABL_NO_ERROR) {
    960358a0:	34000120 	cbz	w0, 960358c4 <extents_blk_lookup+0xa0>
        TRACEF("blockdev read failed, err 0x%08x\n", err);
    960358a4:	2a0003e3 	mov	w3, w0
    960358a8:	52800fc2 	mov	w2, #0x7e                  	// #126
    960358ac:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    960358b0:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960358b4:	912fbc21 	add	x1, x1, #0xbef
    960358b8:	913b9400 	add	x0, x0, #0xee5
    960358bc:	97ffb36d 	bl	96022670 <tegrabl_printf>
        err = ERR_GENERIC;
    960358c0:	12800000 	mov	w0, #0xffffffff            	// #-1
        goto fail;
    }

fail:
    return err;
}
    960358c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    960358c8:	d65f03c0 	ret
        extent++;
    960358cc:	91003063 	add	x3, x3, #0xc
    960358d0:	17ffffde 	b	96035848 <extents_blk_lookup+0x24>

00000000960358d4 <get_extents_blk>:
    void *buf2 = NULL;

    LTRACE_ENTRY;

    /* Extract extents info */
    extent_header = (struct ext4_extent_header *)inode->e2di_blocks;
    960358d4:	9100a024 	add	x4, x1, #0x28
{
    960358d8:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    960358dc:	910003fd 	mov	x29, sp
    if (extent_header->depth > 0) {
    960358e0:	79400c85 	ldrh	w5, [x4, #6]
{
    960358e4:	a90153f3 	stp	x19, x20, [sp, #16]
    960358e8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960358ec:	a90363f7 	stp	x23, x24, [sp, #48]
    960358f0:	a9046bf9 	stp	x25, x26, [sp, #64]
    960358f4:	f9002bfb 	str	x27, [sp, #80]
    if (extent_header->depth > 0) {
    960358f8:	34000725 	cbz	w5, 960359dc <get_extents_blk+0x108>
    960358fc:	aa0003f3 	mov	x19, x0
        /* Read index node */
        extent_idx =
            (struct ext4_extent_idx *)((uintptr_t)extent_header + sizeof(struct ext4_extent_header));
        blk_addr = extent_idx->leaf_hi;
        blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035900:	5280801a 	mov	w26, #0x400                 	// #1024
        blk_addr = extent_idx->leaf_hi;
    96035904:	79407836 	ldrh	w22, [x1, #60]
    96035908:	2a0203f7 	mov	w23, w2
        blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    9603590c:	b9403839 	ldr	w25, [x1, #56]
    96035910:	aa0303f8 	mov	x24, x3
    96035914:	b9402a75 	ldr	w21, [x19, #40]
        blk_addr += ext2->fs_offset;

        buf2 = tegrabl_memalign(SZ_64K, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035918:	d2a00020 	mov	x0, #0x10000               	// #65536
        blk_addr += ext2->fs_offset;
    9603591c:	f942627b 	ldr	x27, [x19, #1216]
        blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035920:	1ad52355 	lsl	w21, w26, w21
        buf2 = tegrabl_memalign(SZ_64K, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035924:	aa1503e1 	mov	x1, x21
    96035928:	97ffc497 	bl	96026b84 <tegrabl_memalign>
    9603592c:	aa0003f4 	mov	x20, x0
        if (buf2 == NULL) {
    96035930:	b5000200 	cbnz	x0, 96035970 <get_extents_blk+0x9c>
            err = ERR_NO_MEMORY;
    96035934:	12800093 	mov	w19, #0xfffffffb            	// #-5
            TRACEF("Failed to allocate memory for super block\n");
    96035938:	528013c2 	mov	w2, #0x9e                  	// #158
    9603593c:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035940:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035944:	91300821 	add	x1, x1, #0xc02
    96035948:	913c4400 	add	x0, x0, #0xf11
    9603594c:	97ffb349 	bl	96022670 <tegrabl_printf>
    if (buf2) {
        free(buf2);
    }

    return err;
}
    96035950:	2a1303e0 	mov	w0, w19
    96035954:	f9402bfb 	ldr	x27, [sp, #80]
    96035958:	a94153f3 	ldp	x19, x20, [sp, #16]
    9603595c:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035960:	a94363f7 	ldp	x23, x24, [sp, #48]
    96035964:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96035968:	a8c67bfd 	ldp	x29, x30, [sp], #96
    9603596c:	d65f03c0 	ret
        blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035970:	2a1903f9 	mov	w25, w25
        err = tegrabl_blockdev_read(ext2->dev, buf2, blk_addr, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035974:	aa0003e1 	mov	x1, x0
        blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035978:	aa168336 	orr	x22, x25, x22, lsl #32
        err = tegrabl_blockdev_read(ext2->dev, buf2, blk_addr, E2FS_BLOCK_SIZE(ext2->super_blk));
    9603597c:	f9400260 	ldr	x0, [x19]
    96035980:	b9402a63 	ldr	w3, [x19, #40]
    96035984:	d503201f 	nop
    96035988:	9b156ec2 	madd	x2, x22, x21, x27
    9603598c:	1ac32343 	lsl	w3, w26, w3
    96035990:	97ff9830 	bl	9601ba50 <tegrabl_blockdev_read>
        if (err != TEGRABL_NO_ERROR) {
    96035994:	34000160 	cbz	w0, 960359c0 <get_extents_blk+0xec>
            err = ERR_GENERIC;
    96035998:	12800013 	mov	w19, #0xffffffff            	// #-1
            TRACEF("blockdev read failed\n");
    9603599c:	52801462 	mov	w2, #0xa3                  	// #163
    960359a0:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    960359a4:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960359a8:	91300821 	add	x1, x1, #0xc02
    960359ac:	913d1800 	add	x0, x0, #0xf46
    960359b0:	97ffb330 	bl	96022670 <tegrabl_printf>
        free(buf2);
    960359b4:	aa1403e0 	mov	x0, x20
    960359b8:	97ffcb81 	bl	960287bc <free>
    960359bc:	17ffffe5 	b	96035950 <get_extents_blk+0x7c>
        extents_blk_lookup(ext2, (struct ext4_extent_header *)buf2, num, buf);
    960359c0:	aa1303e0 	mov	x0, x19
    960359c4:	aa1803e3 	mov	x3, x24
    960359c8:	2a1703e2 	mov	w2, w23
    960359cc:	aa1403e1 	mov	x1, x20
        err = tegrabl_blockdev_read(ext2->dev, buf2, blk_addr, E2FS_BLOCK_SIZE(ext2->super_blk));
    960359d0:	52800013 	mov	w19, #0x0                   	// #0
        extents_blk_lookup(ext2, (struct ext4_extent_header *)buf2, num, buf);
    960359d4:	97ffff94 	bl	96035824 <extents_blk_lookup>
    960359d8:	17fffff7 	b	960359b4 <get_extents_blk+0xe0>
        extents_blk_lookup(ext2, extent_header, num, buf);
    960359dc:	aa0403e1 	mov	x1, x4
    int err = 0;
    960359e0:	52800013 	mov	w19, #0x0                   	// #0
        extents_blk_lookup(ext2, extent_header, num, buf);
    960359e4:	97ffff90 	bl	96035824 <extents_blk_lookup>
    return err;
    960359e8:	17ffffda 	b	96035950 <get_extents_blk+0x7c>

00000000960359ec <ext4_read_extent>:

static int ext4_read_extent(ext2_t *ext2, struct ext4_extent_header *extent_header, void *buf,
                            off_t *total_bytes_read)
{
    960359ec:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    960359f0:	910003fd 	mov	x29, sp
    960359f4:	a90153f3 	stp	x19, x20, [sp, #16]

    LTRACEF("Extent: depth: %u, entries: %u\n", extent_header->depth, extent_header->entries);
    buf_ptr = (uint8_t *)buf;
    extent = (struct ext4_extent *)((uintptr_t)extent_header + sizeof(struct ext4_extent_header));

    for (i = 0; i < extent_header->entries; i++) {
    960359f8:	aa0203f3 	mov	x19, x2
{
    960359fc:	a9025bf5 	stp	x21, x22, [sp, #32]
    extent = (struct ext4_extent *)((uintptr_t)extent_header + sizeof(struct ext4_extent_header));
    96035a00:	91003035 	add	x21, x1, #0xc
{
    96035a04:	a90363f7 	stp	x23, x24, [sp, #48]
    96035a08:	aa0203f7 	mov	x23, x2
    96035a0c:	a9046bf9 	stp	x25, x26, [sp, #64]
    96035a10:	aa0003f9 	mov	x25, x0
    96035a14:	a90573fb 	stp	x27, x28, [sp, #80]
    96035a18:	aa0303fa 	mov	x26, x3
    96035a1c:	aa0103fb 	mov	x27, x1
    for (i = 0; i < extent_header->entries; i++) {
    96035a20:	52800016 	mov	w22, #0x0                   	// #0
    off_t bytes_read = 0;
    96035a24:	d2800018 	mov	x24, #0x0                   	// #0
    off_t extent_len_bytes = 0;
    96035a28:	d2800014 	mov	x20, #0x0                   	// #0
        /* Calculate destination address */
        buf_ptr = (uint8_t *)(buf + (extent->block_no * E2FS_BLOCK_SIZE(ext2->super_blk)));
    96035a2c:	5280801c 	mov	w28, #0x400                 	// #1024
    for (i = 0; i < extent_header->entries; i++) {
    96035a30:	79400760 	ldrh	w0, [x27, #2]
    96035a34:	6b16001f 	cmp	w0, w22
    96035a38:	540000c8 	b.hi	96035a50 <ext4_read_extent+0x64>  // b.pmore
        bytes_read += extent_len_bytes;
        extent++;
    }

    if (total_bytes_read) {
        if (buf_ptr == buf) {
    96035a3c:	eb17027f 	cmp	x19, x23
    96035a40:	54000521 	b.ne	96035ae4 <ext4_read_extent+0xf8>  // b.any
            *total_bytes_read = bytes_read;
    96035a44:	f9000358 	str	x24, [x26]
        } else {
            *total_bytes_read = ((uintptr_t)buf_ptr + extent_len_bytes) - (uintptr_t)buf;
    96035a48:	52800000 	mov	w0, #0x0                   	// #0
        }
    }
    LTRACEF("bytes_read %lu\n", *total_bytes_read);

fail:
    return err;
    96035a4c:	1400001a 	b	96035ab4 <ext4_read_extent+0xc8>
        buf_ptr = (uint8_t *)(buf + (extent->block_no * E2FS_BLOCK_SIZE(ext2->super_blk)));
    96035a50:	b9402b20 	ldr	w0, [x25, #40]
        extent_len_bytes = extent->len * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035a54:	79400ab4 	ldrh	w20, [x21, #4]
        buf_ptr = (uint8_t *)(buf + (extent->block_no * E2FS_BLOCK_SIZE(ext2->super_blk)));
    96035a58:	b94002b3 	ldr	w19, [x21]
        data_blk = (data_blk << 32U) | extent->start_lo;
    96035a5c:	b9400aa2 	ldr	w2, [x21, #8]
        buf_ptr = (uint8_t *)(buf + (extent->block_no * E2FS_BLOCK_SIZE(ext2->super_blk)));
    96035a60:	1ac02380 	lsl	w0, w28, w0
        data_blk = extent->start_hi;
    96035a64:	79400ea1 	ldrh	w1, [x21, #6]
        extent_len_bytes = extent->len * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035a68:	1b007e94 	mul	w20, w20, w0
        buf_ptr = (uint8_t *)(buf + (extent->block_no * E2FS_BLOCK_SIZE(ext2->super_blk)));
    96035a6c:	1b137c13 	mul	w19, w0, w19
        data_blk = (data_blk << 32U) | extent->start_lo;
    96035a70:	aa018041 	orr	x1, x2, x1, lsl #32
        blk_addr = data_blk * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035a74:	2a0003e2 	mov	w2, w0
        blk_addr += ext2->fs_offset;
    96035a78:	f9426320 	ldr	x0, [x25, #1216]
        buf_ptr = (uint8_t *)(buf + (extent->block_no * E2FS_BLOCK_SIZE(ext2->super_blk)));
    96035a7c:	8b1302f3 	add	x19, x23, x19
        err = tegrabl_blockdev_read(ext2->dev, buf_ptr, blk_addr, extent_len_bytes);
    96035a80:	aa1403e3 	mov	x3, x20
    96035a84:	9b020022 	madd	x2, x1, x2, x0
    96035a88:	f9400320 	ldr	x0, [x25]
    96035a8c:	aa1303e1 	mov	x1, x19
    96035a90:	97ff97f0 	bl	9601ba50 <tegrabl_blockdev_read>
        if (err != TEGRABL_NO_ERROR) {
    96035a94:	340001e0 	cbz	w0, 96035ad0 <ext4_read_extent+0xe4>
            TRACEF("blockdev read failed\n");
    96035a98:	52801ae2 	mov	w2, #0xd7                  	// #215
    96035a9c:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035aa0:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035aa4:	91304821 	add	x1, x1, #0xc12
    96035aa8:	913d1800 	add	x0, x0, #0xf46
    96035aac:	97ffb2f1 	bl	96022670 <tegrabl_printf>
            err = ERR_GENERIC;
    96035ab0:	12800000 	mov	w0, #0xffffffff            	// #-1
}
    96035ab4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035ab8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035abc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96035ac0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96035ac4:	a94573fb 	ldp	x27, x28, [sp, #80]
    96035ac8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    96035acc:	d65f03c0 	ret
    for (i = 0; i < extent_header->entries; i++) {
    96035ad0:	110006d6 	add	w22, w22, #0x1
        bytes_read += extent_len_bytes;
    96035ad4:	8b140318 	add	x24, x24, x20
        extent++;
    96035ad8:	910032b5 	add	x21, x21, #0xc
    for (i = 0; i < extent_header->entries; i++) {
    96035adc:	12003ed6 	and	w22, w22, #0xffff
    96035ae0:	17ffffd4 	b	96035a30 <ext4_read_extent+0x44>
            *total_bytes_read = ((uintptr_t)buf_ptr + extent_len_bytes) - (uintptr_t)buf;
    96035ae4:	cb170294 	sub	x20, x20, x23
    96035ae8:	8b140273 	add	x19, x19, x20
    96035aec:	f9000353 	str	x19, [x26]
    96035af0:	17ffffd6 	b	96035a48 <ext4_read_extent+0x5c>

0000000096035af4 <ext4_read_data_from_extent>:

static ssize_t ext4_read_data_from_extent(ext2_t *ext2, struct ext2fs_dinode *inode, void *buf, size_t len)
{
    96035af4:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    96035af8:	910003fd 	mov	x29, sp
    96035afc:	a90153f3 	stp	x19, x20, [sp, #16]
    96035b00:	a9025bf5 	stp	x21, x22, [sp, #32]
    96035b04:	a90363f7 	stp	x23, x24, [sp, #48]
    96035b08:	aa0303f8 	mov	x24, x3
    off_t total_bytes_read = 0;
    int err = 0;

    LTRACE_ENTRY;

    if (!validate_extents_magic((struct ext4_extent_header *)inode->e2di_blocks)) {
    96035b0c:	79405024 	ldrh	w4, [x1, #40]
    96035b10:	529e6143 	mov	w3, #0xf30a                	// #62218
{
    96035b14:	a9046bf9 	stp	x25, x26, [sp, #64]
    96035b18:	a90573fb 	stp	x27, x28, [sp, #80]
    if (!validate_extents_magic((struct ext4_extent_header *)inode->e2di_blocks)) {
    96035b1c:	6b03009f 	cmp	w4, w3
    off_t bytes_read = 0;
    96035b20:	f90037bf 	str	xzr, [x29, #104]
    if (!validate_extents_magic((struct ext4_extent_header *)inode->e2di_blocks)) {
    96035b24:	54000120 	b.eq	96035b48 <ext4_read_data_from_extent+0x54>  // b.none
        TRACEF("Invalid extents magic\n");
    96035b28:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035b2c:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035b30:	91308c21 	add	x1, x1, #0xc23
    96035b34:	91390000 	add	x0, x0, #0xe40
    96035b38:	52801f62 	mov	w2, #0xfb                  	// #251
            }
            err = ext4_read_extent(ext2, (struct ext4_extent_header *)buf2, buf_ptr, &bytes_read);
            total_bytes_read += bytes_read;
            buf_ptr += bytes_read;
			if ((len != 0) && (total_bytes_read > len)) {
				TRACEF("Total file read should not be larger than file stat size\n");
    96035b3c:	97ffb2cd 	bl	96022670 <tegrabl_printf>
				err = ERR_NOT_VALID;
    96035b40:	128000c0 	mov	w0, #0xfffffff9            	// #-7
    96035b44:	1400001f 	b	96035bc0 <ext4_read_data_from_extent+0xcc>
    extent_header = (struct ext4_extent_header *)inode->e2di_blocks;
    96035b48:	9100a039 	add	x25, x1, #0x28
    if (extent_header->depth > 0) {
    96035b4c:	79400f23 	ldrh	w3, [x25, #6]
    96035b50:	35000983 	cbnz	w3, 96035c80 <ext4_read_data_from_extent+0x18c>
				goto fail;
			}
        }
    } else {
        /* Read leaf node */
        err = ext4_read_extent(ext2, extent_header, buf_ptr, &bytes_read);
    96035b54:	9101a3a3 	add	x3, x29, #0x68
    96035b58:	aa1903e1 	mov	x1, x25
    96035b5c:	97ffffa4 	bl	960359ec <ext4_read_extent>
        total_bytes_read += bytes_read;
    96035b60:	f94037b3 	ldr	x19, [x29, #104]
		if ((len != 0) && (total_bytes_read > len)) {
    96035b64:	f100031f 	cmp	x24, #0x0
    96035b68:	fa581260 	ccmp	x19, x24, #0x0, ne  // ne = any
    96035b6c:	54000849 	b.ls	96035c74 <ext4_read_data_from_extent+0x180>  // b.plast
			TRACEF("Total file read should not be larger than file stat size\n");
    96035b70:	52802542 	mov	w2, #0x12a                 	// #298
    96035b74:	14000036 	b	96035c4c <ext4_read_data_from_extent+0x158>
            blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035b78:	b9400682 	ldr	w2, [x20, #4]
            buf2 = tegrabl_memalign(SZ_64K, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035b7c:	d2a00020 	mov	x0, #0x10000               	// #65536
            blk_addr = extent_idx->leaf_hi;
    96035b80:	79401297 	ldrh	w23, [x20, #8]
            blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035b84:	b9402ac1 	ldr	w1, [x22, #40]
    96035b88:	aa178057 	orr	x23, x2, x23, lsl #32
            blk_addr += ext2->fs_offset;
    96035b8c:	f94262c2 	ldr	x2, [x22, #1216]
            blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035b90:	1ac12361 	lsl	w1, w27, w1
            blk_addr += ext2->fs_offset;
    96035b94:	9b010af7 	madd	x23, x23, x1, x2
            buf2 = tegrabl_memalign(SZ_64K, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035b98:	97ffc3fb 	bl	96026b84 <tegrabl_memalign>
    96035b9c:	aa0003fc 	mov	x28, x0
            if (buf2 == NULL) {
    96035ba0:	b5000200 	cbnz	x0, 96035be0 <ext4_read_data_from_extent+0xec>
                TRACEF("Failed to allocate memory for super block\n");
    96035ba4:	52802242 	mov	w2, #0x112                 	// #274
    96035ba8:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035bac:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035bb0:	91308c21 	add	x1, x1, #0xc23
    96035bb4:	913c4400 	add	x0, x0, #0xf11
    96035bb8:	97ffb2ae 	bl	96022670 <tegrabl_printf>
                err = ERR_NO_MEMORY;
    96035bbc:	12800080 	mov	w0, #0xfffffffb            	// #-5
    }

    LTRACEF("err %d, bytes_read %lu\n", err, total_bytes_read);

fail:
    return err < 0 ? err : (ssize_t)total_bytes_read;
    96035bc0:	93407c00 	sxtw	x0, w0
}
    96035bc4:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035bc8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035bcc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96035bd0:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96035bd4:	a94573fb 	ldp	x27, x28, [sp, #80]
    96035bd8:	a8c77bfd 	ldp	x29, x30, [sp], #112
    96035bdc:	d65f03c0 	ret
            err = tegrabl_blockdev_read(ext2->dev, buf2, blk_addr, E2FS_BLOCK_SIZE(ext2->super_blk));
    96035be0:	aa0003e1 	mov	x1, x0
    96035be4:	f94002c0 	ldr	x0, [x22]
    96035be8:	b9402ac3 	ldr	w3, [x22, #40]
    96035bec:	aa1703e2 	mov	x2, x23
    96035bf0:	1ac32363 	lsl	w3, w27, w3
    96035bf4:	97ff9797 	bl	9601ba50 <tegrabl_blockdev_read>
            if (err != TEGRABL_NO_ERROR) {
    96035bf8:	34000120 	cbz	w0, 96035c1c <ext4_read_data_from_extent+0x128>
                TRACEF("blockdev read failed\n");
    96035bfc:	52802302 	mov	w2, #0x118                 	// #280
    96035c00:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035c04:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035c08:	91308c21 	add	x1, x1, #0xc23
    96035c0c:	913d1800 	add	x0, x0, #0xf46
    96035c10:	97ffb298 	bl	96022670 <tegrabl_printf>
                err = ERR_GENERIC;
    96035c14:	12800000 	mov	w0, #0xffffffff            	// #-1
    96035c18:	17ffffea 	b	96035bc0 <ext4_read_data_from_extent+0xcc>
            err = ext4_read_extent(ext2, (struct ext4_extent_header *)buf2, buf_ptr, &bytes_read);
    96035c1c:	aa1a03e2 	mov	x2, x26
    96035c20:	aa1c03e1 	mov	x1, x28
    96035c24:	9101a3a3 	add	x3, x29, #0x68
    96035c28:	aa1603e0 	mov	x0, x22
    96035c2c:	97ffff70 	bl	960359ec <ext4_read_extent>
            total_bytes_read += bytes_read;
    96035c30:	f94037a1 	ldr	x1, [x29, #104]
			if ((len != 0) && (total_bytes_read > len)) {
    96035c34:	f100031f 	cmp	x24, #0x0
            total_bytes_read += bytes_read;
    96035c38:	8b010273 	add	x19, x19, x1
            buf_ptr += bytes_read;
    96035c3c:	8b01035a 	add	x26, x26, x1
			if ((len != 0) && (total_bytes_read > len)) {
    96035c40:	fa531302 	ccmp	x24, x19, #0x2, ne  // ne = any
    96035c44:	540000e2 	b.cs	96035c60 <ext4_read_data_from_extent+0x16c>  // b.hs, b.nlast
				TRACEF("Total file read should not be larger than file stat size\n");
    96035c48:	52802402 	mov	w2, #0x120                 	// #288
    96035c4c:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035c50:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035c54:	91308c21 	add	x1, x1, #0xc23
    96035c58:	91398400 	add	x0, x0, #0xe61
    96035c5c:	17ffffb8 	b	96035b3c <ext4_read_data_from_extent+0x48>
        for (i = 0; i < extent_header->entries; i++) {
    96035c60:	110006b5 	add	w21, w21, #0x1
    96035c64:	12003eb5 	and	w21, w21, #0xffff
    96035c68:	79400721 	ldrh	w1, [x25, #2]
    96035c6c:	6b15003f 	cmp	w1, w21
    96035c70:	54fff848 	b.hi	96035b78 <ext4_read_data_from_extent+0x84>  // b.pmore
    return err < 0 ? err : (ssize_t)total_bytes_read;
    96035c74:	37fffa60 	tbnz	w0, #31, 96035bc0 <ext4_read_data_from_extent+0xcc>
    96035c78:	aa1303e0 	mov	x0, x19
    96035c7c:	17ffffd2 	b	96035bc4 <ext4_read_data_from_extent+0xd0>
    96035c80:	aa0003f6 	mov	x22, x0
    96035c84:	aa0203fa 	mov	x26, x2
    int err = 0;
    96035c88:	52800000 	mov	w0, #0x0                   	// #0
    off_t total_bytes_read = 0;
    96035c8c:	d2800013 	mov	x19, #0x0                   	// #0
        for (i = 0; i < extent_header->entries; i++) {
    96035c90:	52800015 	mov	w21, #0x0                   	// #0
                (struct ext4_extent_idx *)((uintptr_t)extent_header + sizeof(struct ext4_extent_header));
    96035c94:	9100d034 	add	x20, x1, #0x34
            blk_addr = ((blk_addr << 32U) | extent_idx->leaf_lo) * E2FS_BLOCK_SIZE(ext2->super_blk);
    96035c98:	5280801b 	mov	w27, #0x400                 	// #1024
    96035c9c:	17fffff3 	b	96035c68 <ext4_read_data_from_extent+0x174>

0000000096035ca0 <ext4_mount>:
fail:
    return err;
}

status_t ext4_mount(struct tegrabl_bdev *dev, uint64_t start_sector, fscookie **cookie)
{
    96035ca0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    96035ca4:	910003fd 	mov	x29, sp
    96035ca8:	a90153f3 	stp	x19, x20, [sp, #16]
    96035cac:	a9025bf5 	stp	x21, x22, [sp, #32]
    96035cb0:	a90363f7 	stp	x23, x24, [sp, #48]
    96035cb4:	f90023f9 	str	x25, [sp, #64]
    void *buf = NULL;
    tegrabl_error_t error;

    LTRACEF("dev %p\n", dev);

    if (!dev) {
    96035cb8:	b4001460 	cbz	x0, 96035f44 <ext4_mount+0x2a4>
    96035cbc:	aa0203f7 	mov	x23, x2
    96035cc0:	aa0103f5 	mov	x21, x1
    96035cc4:	aa0003f4 	mov	x20, x0
        return ERR_NOT_FOUND;
    }

    ext2_t *ext2 = malloc(sizeof(ext2_t));
    96035cc8:	d2809900 	mov	x0, #0x4c8                 	// #1224
    96035ccc:	97ffcabb 	bl	960287b8 <malloc>
    96035cd0:	aa0003f3 	mov	x19, x0
    if (ext2 == NULL) {
    96035cd4:	b5000140 	cbnz	x0, 96035cfc <ext4_mount+0x5c>
    void *buf = NULL;
    96035cd8:	d2800016 	mov	x22, #0x0                   	// #0
        TRACEF("Failed to allocate memory for ext2 priv data object\n");
    96035cdc:	52804122 	mov	w2, #0x209                 	// #521
    96035ce0:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035ce4:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035ce8:	9131c821 	add	x1, x1, #0xc72
    96035cec:	91357000 	add	x0, x0, #0xd5c
    96035cf0:	97ffb260 	bl	96022670 <tegrabl_printf>
    }
    total_gd_size = (uint64_t)gd_size *  (uint64_t)ext2->group_count;
    ext2->grp_desc = tegrabl_memalign(SZ_64K, total_gd_size);
    if (ext2->grp_desc == NULL) {
        TRACEF("Failed to allocate memory for group descriptor\n");
        err = ERR_NO_MEMORY;
    96035cf4:	12800094 	mov	w20, #0xfffffffb            	// #-5
        goto err;
    96035cf8:	1400003c 	b	96035de8 <ext4_mount+0x148>
    buf = tegrabl_memalign(SZ_64K, sizeof(struct ext2fs_super_block));
    96035cfc:	d2808001 	mov	x1, #0x400                 	// #1024
    96035d00:	d2a00020 	mov	x0, #0x10000               	// #65536
    ext2->dev = dev;
    96035d04:	f9000274 	str	x20, [x19]
    buf = tegrabl_memalign(SZ_64K, sizeof(struct ext2fs_super_block));
    96035d08:	97ffc39f 	bl	96026b84 <tegrabl_memalign>
    96035d0c:	aa0003f6 	mov	x22, x0
    if (buf == NULL) {
    96035d10:	b5000100 	cbnz	x0, 96035d30 <ext4_mount+0x90>
        TRACEF("Failed to allocate memory\n");
    96035d14:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035d18:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035d1c:	9131c821 	add	x1, x1, #0xc72
    96035d20:	91366c00 	add	x0, x0, #0xd9b
    96035d24:	52804222 	mov	w2, #0x211                 	// #529
        TRACEF("Failed to allocate memory for group descriptor\n");
    96035d28:	97ffb252 	bl	96022670 <tegrabl_printf>
    96035d2c:	17fffff2 	b	96035cf4 <ext4_mount+0x54>
    memset(buf, 0, sizeof(struct ext2fs_super_block));
    96035d30:	d2808002 	mov	x2, #0x400                 	// #1024
    96035d34:	52800001 	mov	w1, #0x0                   	// #0
    96035d38:	97ffd03c 	bl	96029e28 <memset>
    fs_offset = (start_sector * TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96035d3c:	b9402281 	ldr	w1, [x20, #32]
    error = tegrabl_blockdev_read(dev, buf, fs_offset + 1024, sizeof(struct ext2fs_super_block));
    96035d40:	d2808003 	mov	x3, #0x400                 	// #1024
    96035d44:	aa1403e0 	mov	x0, x20
    fs_offset = (start_sector * TEGRABL_BLOCKDEV_BLOCK_SIZE(dev));
    96035d48:	9ac122b5 	lsl	x21, x21, x1
    error = tegrabl_blockdev_read(dev, buf, fs_offset + 1024, sizeof(struct ext2fs_super_block));
    96035d4c:	aa1603e1 	mov	x1, x22
    96035d50:	8b0302a2 	add	x2, x21, x3
    96035d54:	97ff973f 	bl	9601ba50 <tegrabl_blockdev_read>
    if (error != TEGRABL_NO_ERROR) {
    96035d58:	34000120 	cbz	w0, 96035d7c <ext4_mount+0xdc>
        TRACEF("Failed to read superblock\n");
    96035d5c:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035d60:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035d64:	9131c821 	add	x1, x1, #0xc72
    96035d68:	91271c00 	add	x0, x0, #0x9c7
    96035d6c:	52804342 	mov	w2, #0x21a                 	// #538
    error = tegrabl_blockdev_read(ext2->dev,
                                  ext2->grp_desc,
                                  fs_offset + ((E2FS_BLOCK_SIZE(ext2->super_blk) == 4096) ? 4096 : 2048),
                                  total_gd_size);
    if (error != TEGRABL_NO_ERROR) {
        TRACEF("Failed to read group descriptors\n");
    96035d70:	97ffb240 	bl	96022670 <tegrabl_printf>
    }

    /* initialize the block cache */
    ext2->cache = bcache_create(ext2->dev, E2FS_BLOCK_SIZE(ext2->super_blk), 4, fs_offset);
    if (ext2->cache == NULL) {
        err = ERR_GENERIC;
    96035d74:	12800014 	mov	w20, #0xffffffff            	// #-1
    96035d78:	1400001c 	b	96035de8 <ext4_mount+0x148>
    memcpy(&ext2->super_blk, buf, sizeof(struct ext2fs_super_block));
    96035d7c:	aa1603e1 	mov	x1, x22
    96035d80:	91004274 	add	x20, x19, #0x10
    96035d84:	d2808002 	mov	x2, #0x400                 	// #1024
    96035d88:	aa1403e0 	mov	x0, x20
    96035d8c:	97ffd066 	bl	96029f24 <memcpy>
    ext2_endian_swap_superblock(&ext2->super_blk);
    96035d90:	aa1403e0 	mov	x0, x20
    96035d94:	97fffb6d 	bl	96034b48 <ext2_endian_swap_superblock>
    if (ext2->super_blk.e2fs_magic != E4FS_MAGIC) {
    96035d98:	79409261 	ldrh	w1, [x19, #72]
    96035d9c:	529dea60 	mov	w0, #0xef53                	// #61267
    96035da0:	6b00003f 	cmp	w1, w0
    96035da4:	54fffe81 	b.ne	96035d74 <ext4_mount+0xd4>  // b.any
        (ext2->super_blk.e2fs_bcount + ext2->super_blk.e2fs_bpg - 1) / ext2->super_blk.e2fs_bpg;
    96035da8:	b9403263 	ldr	w3, [x19, #48]
    96035dac:	b9401674 	ldr	w20, [x19, #20]
    if (ext2->super_blk.e2fs_rev > E2FS_REV1) {
    96035db0:	b9405e60 	ldr	w0, [x19, #92]
        (ext2->super_blk.e2fs_bcount + ext2->super_blk.e2fs_bpg - 1) / ext2->super_blk.e2fs_bpg;
    96035db4:	0b140074 	add	w20, w3, w20
    96035db8:	51000694 	sub	w20, w20, #0x1
    if (ext2->super_blk.e2fs_rev > E2FS_REV1) {
    96035dbc:	7100041f 	cmp	w0, #0x1
        (ext2->super_blk.e2fs_bcount + ext2->super_blk.e2fs_bpg - 1) / ext2->super_blk.e2fs_bpg;
    96035dc0:	1ac30a94 	udiv	w20, w20, w3
    ext2->group_count =
    96035dc4:	b9041274 	str	w20, [x19, #1040]
    if (ext2->super_blk.e2fs_rev > E2FS_REV1) {
    96035dc8:	540001a9 	b.ls	96035dfc <ext4_mount+0x15c>  // b.plast
        err = -2;
    96035dcc:	12800034 	mov	w20, #0xfffffffe            	// #-2
        TRACEF("Unsupported revision level\n");
    96035dd0:	52804742 	mov	w2, #0x23a                 	// #570
    96035dd4:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035dd8:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035ddc:	9131c821 	add	x1, x1, #0xc72
    96035de0:	9127b000 	add	x0, x0, #0x9ec
    96035de4:	97ffb223 	bl	96022670 <tegrabl_printf>

    return 0;

err:
    LTRACEF("exiting with err code %d\n", err);
    free(buf);
    96035de8:	aa1603e0 	mov	x0, x22
    96035dec:	97ffca74 	bl	960287bc <free>
    free(ext2);
    96035df0:	aa1303e0 	mov	x0, x19
    96035df4:	97ffca72 	bl	960287bc <free>

    return err;
    96035df8:	14000047 	b	96035f14 <ext4_mount+0x274>
    if (ext2->super_blk.e2fs_features_rocompat &
    96035dfc:	b9407663 	ldr	w3, [x19, #116]
    96035e00:	12808f60 	mov	w0, #0xfffffb84            	// #-1148
    96035e04:	6a00007f 	tst	w3, w0
    96035e08:	54000120 	b.eq	96035e2c <ext4_mount+0x18c>  // b.none
        TRACEF("Unsupported ro features, 0x%08x\n", ext2->super_blk.e2fs_features_rocompat);
    96035e0c:	52804902 	mov	w2, #0x248                 	// #584
    96035e10:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035e14:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035e18:	9131c821 	add	x1, x1, #0xc72
    96035e1c:	91370000 	add	x0, x0, #0xdc0
        err = -3;
    96035e20:	12800054 	mov	w20, #0xfffffffd            	// #-3
        TRACEF("Unsupported ro features, 0x%08x\n", ext2->super_blk.e2fs_features_rocompat);
    96035e24:	97ffb213 	bl	96022670 <tegrabl_printf>
        goto err;
    96035e28:	17fffff0 	b	96035de8 <ext4_mount+0x148>
    if (ext2->super_blk.e3fs_desc_size > 32) {
    96035e2c:	79421e60 	ldrh	w0, [x19, #270]
        gd_size = E2FS_GD_SIZE;
    96035e30:	d2800818 	mov	x24, #0x40                  	// #64
    total_gd_size = (uint64_t)gd_size *  (uint64_t)ext2->group_count;
    96035e34:	93407e94 	sxtw	x20, w20
        gd_size = E2FS_GD_SIZE;
    96035e38:	7100801f 	cmp	w0, #0x20
    96035e3c:	d2800400 	mov	x0, #0x20                  	// #32
    96035e40:	9a808318 	csel	x24, x24, x0, hi  // hi = pmore
    ext2->grp_desc = tegrabl_memalign(SZ_64K, total_gd_size);
    96035e44:	d2a00020 	mov	x0, #0x10000               	// #65536
    total_gd_size = (uint64_t)gd_size *  (uint64_t)ext2->group_count;
    96035e48:	9b187e94 	mul	x20, x20, x24
    ext2->grp_desc = tegrabl_memalign(SZ_64K, total_gd_size);
    96035e4c:	aa1403e1 	mov	x1, x20
    96035e50:	97ffc34d 	bl	96026b84 <tegrabl_memalign>
    96035e54:	f9020e60 	str	x0, [x19, #1048]
    if (ext2->grp_desc == NULL) {
    96035e58:	b50000e0 	cbnz	x0, 96035e74 <ext4_mount+0x1d4>
        TRACEF("Failed to allocate memory for group descriptor\n");
    96035e5c:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035e60:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035e64:	52804ac2 	mov	w2, #0x256                 	// #598
    96035e68:	9131c821 	add	x1, x1, #0xc72
    96035e6c:	9128d400 	add	x0, x0, #0xa35
    96035e70:	17ffffae 	b	96035d28 <ext4_mount+0x88>
                                  fs_offset + ((E2FS_BLOCK_SIZE(ext2->super_blk) == 4096) ? 4096 : 2048),
    96035e74:	b9402a61 	ldr	w1, [x19, #40]
    96035e78:	d2820002 	mov	x2, #0x1000                	// #4096
    error = tegrabl_blockdev_read(ext2->dev,
    96035e7c:	aa1403e3 	mov	x3, x20
                                  fs_offset + ((E2FS_BLOCK_SIZE(ext2->super_blk) == 4096) ? 4096 : 2048),
    96035e80:	7100083f 	cmp	w1, #0x2
    96035e84:	d2810001 	mov	x1, #0x800                 	// #2048
    96035e88:	9a810042 	csel	x2, x2, x1, eq  // eq = none
    error = tegrabl_blockdev_read(ext2->dev,
    96035e8c:	aa0003e1 	mov	x1, x0
    96035e90:	f9400260 	ldr	x0, [x19]
    96035e94:	8b0202a2 	add	x2, x21, x2
    96035e98:	97ff96ee 	bl	9601ba50 <tegrabl_blockdev_read>
    if (error != TEGRABL_NO_ERROR) {
    96035e9c:	340000e0 	cbz	w0, 96035eb8 <ext4_mount+0x218>
        TRACEF("Failed to read group descriptors\n");
    96035ea0:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035ea4:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035ea8:	52804c02 	mov	w2, #0x260                 	// #608
    96035eac:	9131c821 	add	x1, x1, #0xc72
    96035eb0:	9129bc00 	add	x0, x0, #0xa6f
    96035eb4:	17ffffaf 	b	96035d70 <ext4_mount+0xd0>
    grp_desc = ext2->grp_desc;
    96035eb8:	f9420e79 	ldr	x25, [x19, #1048]
    for (i = 0; i < ext2->group_count; i++) {
    96035ebc:	52800014 	mov	w20, #0x0                   	// #0
    96035ec0:	b9441260 	ldr	w0, [x19, #1040]
    96035ec4:	6b00029f 	cmp	w20, w0
    96035ec8:	5400034b 	b.lt	96035f30 <ext4_mount+0x290>  // b.tstop
    ext2->cache = bcache_create(ext2->dev, E2FS_BLOCK_SIZE(ext2->super_blk), 4, fs_offset);
    96035ecc:	b9402a60 	ldr	w0, [x19, #40]
    96035ed0:	52808001 	mov	w1, #0x400                 	// #1024
    96035ed4:	aa1503e3 	mov	x3, x21
    96035ed8:	52800082 	mov	w2, #0x4                   	// #4
    96035edc:	1ac02021 	lsl	w1, w1, w0
    96035ee0:	f9400260 	ldr	x0, [x19]
    96035ee4:	940001ce 	bl	9603661c <bcache_create>
    96035ee8:	f9000660 	str	x0, [x19, #8]
    if (ext2->cache == NULL) {
    96035eec:	b4fff440 	cbz	x0, 96035d74 <ext4_mount+0xd4>
    err = ext2_load_inode(ext2, EXT2_ROOTINO, &ext2->root_inode);
    96035ef0:	91108262 	add	x2, x19, #0x420
    96035ef4:	52800041 	mov	w1, #0x2                   	// #2
    96035ef8:	aa1303e0 	mov	x0, x19
    96035efc:	97fffb15 	bl	96034b50 <ext2_load_inode>
    96035f00:	2a0003f4 	mov	w20, w0
    if (err < 0) {
    96035f04:	37fff720 	tbnz	w0, #31, 96035de8 <ext4_mount+0x148>
    return 0;
    96035f08:	52800014 	mov	w20, #0x0                   	// #0
    ext2->fs_offset = fs_offset;
    96035f0c:	f9026275 	str	x21, [x19, #1216]
    *cookie = (fscookie *)ext2;
    96035f10:	f90002f3 	str	x19, [x23]
}
    96035f14:	2a1403e0 	mov	w0, w20
    96035f18:	f94023f9 	ldr	x25, [sp, #64]
    96035f1c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035f20:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035f24:	a94363f7 	ldp	x23, x24, [sp, #48]
    96035f28:	a8c57bfd 	ldp	x29, x30, [sp], #80
    96035f2c:	d65f03c0 	ret
        ext2_endian_swap_group_desc((struct ext2_block_group_desc *)grp_desc);
    96035f30:	aa1903e0 	mov	x0, x25
    for (i = 0; i < ext2->group_count; i++) {
    96035f34:	11000694 	add	w20, w20, #0x1
        ext2_endian_swap_group_desc((struct ext2_block_group_desc *)grp_desc);
    96035f38:	97fffb05 	bl	96034b4c <ext2_endian_swap_group_desc>
    96035f3c:	8b180339 	add	x25, x25, x24
    96035f40:	17ffffe0 	b	96035ec0 <ext4_mount+0x220>
        return ERR_NOT_FOUND;
    96035f44:	12800034 	mov	w20, #0xfffffffe            	// #-2
    96035f48:	17fffff3 	b	96035f14 <ext4_mount+0x274>

0000000096035f4c <ext4_open_file>:

int ext4_open_file(fscookie *cookie, const char *path, filecookie **fcookie)
{
    96035f4c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    96035f50:	910003fd 	mov	x29, sp
    96035f54:	a9025bf5 	stp	x21, x22, [sp, #32]
    96035f58:	aa0203f6 	mov	x22, x2
    ext2_t *ext2 = (ext2_t *)cookie;
    ext2_file_t *file;
    inodenum_t inum = 0;
    96035f5c:	910103a2 	add	x2, x29, #0x40
{
    96035f60:	a90153f3 	stp	x19, x20, [sp, #16]
    96035f64:	aa0003f5 	mov	x21, x0
    96035f68:	aa0103f4 	mov	x20, x1
    inodenum_t inum = 0;
    96035f6c:	b81fcc5f 	str	wzr, [x2, #-4]!
    int err = 0;

   err = ext2_lookup(ext2, path, &inum);
    96035f70:	97fffc7f 	bl	9603516c <ext2_lookup>
    if (err < 0) {
    96035f74:	36f801c0 	tbz	w0, #31, 96035fac <ext4_open_file+0x60>
    96035f78:	2a0003f3 	mov	w19, w0
        TRACEF("'%s' lookup failed\n", path);
    96035f7c:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035f80:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035f84:	aa1403e3 	mov	x3, x20
    96035f88:	52805482 	mov	w2, #0x2a4                 	// #676
    96035f8c:	9131f421 	add	x1, x1, #0xc7d
    96035f90:	912cb000 	add	x0, x0, #0xb2c
    96035f94:	97ffb1b7 	bl	96022670 <tegrabl_printf>
    file->ext2 = ext2;
    *fcookie = (filecookie *)file;

fail:
    return err;
}
    96035f98:	2a1303e0 	mov	w0, w19
    96035f9c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96035fa0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96035fa4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    96035fa8:	d65f03c0 	ret
    file = malloc(sizeof(ext2_file_t));
    96035fac:	d2801b00 	mov	x0, #0xd8                  	// #216
    96035fb0:	97ffca02 	bl	960287b8 <malloc>
    96035fb4:	aa0003f4 	mov	x20, x0
    if (file == NULL) {
    96035fb8:	b5000120 	cbnz	x0, 96035fdc <ext4_open_file+0x90>
        TRACEF("Failed to allocate memory for file object\n");
    96035fbc:	52805562 	mov	w2, #0x2ab                 	// #683
    96035fc0:	d0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96035fc4:	d0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96035fc8:	9131f421 	add	x1, x1, #0xc7d
    96035fcc:	9137ac00 	add	x0, x0, #0xdeb
        err = ERR_NO_MEMORY;
    96035fd0:	12800093 	mov	w19, #0xfffffffb            	// #-5
        TRACEF("Failed to allocate memory for file object\n");
    96035fd4:	97ffb1a7 	bl	96022670 <tegrabl_printf>
        goto fail;
    96035fd8:	17fffff0 	b	96035f98 <ext4_open_file+0x4c>
    memset(file, 0, sizeof(ext2_file_t));
    96035fdc:	d2801b02 	mov	x2, #0xd8                  	// #216
    96035fe0:	52800001 	mov	w1, #0x0                   	// #0
    96035fe4:	97ffcf91 	bl	96029e28 <memset>
    err = ext2_load_inode(ext2, inum, &file->inode);
    96035fe8:	b9403fa1 	ldr	w1, [x29, #60]
    96035fec:	9100e282 	add	x2, x20, #0x38
    96035ff0:	aa1503e0 	mov	x0, x21
    96035ff4:	97fffad7 	bl	96034b50 <ext2_load_inode>
    96035ff8:	2a0003f3 	mov	w19, w0
    if (err < 0) {
    96035ffc:	36f80140 	tbz	w0, #31, 96036024 <ext4_open_file+0xd8>
        TRACEF("Failed to load inode\n");
    96036000:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96036004:	9131f421 	add	x1, x1, #0xc7d
    96036008:	52805682 	mov	w2, #0x2b4                 	// #692
    9603600c:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96036010:	91388000 	add	x0, x0, #0xe20
    96036014:	97ffb197 	bl	96022670 <tegrabl_printf>
        free(file);
    96036018:	aa1403e0 	mov	x0, x20
    9603601c:	97ffc9e8 	bl	960287bc <free>
        goto fail;
    96036020:	17ffffde 	b	96035f98 <ext4_open_file+0x4c>
    file->ext2 = ext2;
    96036024:	f9000295 	str	x21, [x20]
    *fcookie = (filecookie *)file;
    96036028:	f90002d4 	str	x20, [x22]
    return err;
    9603602c:	17ffffdb 	b	96035f98 <ext4_open_file+0x4c>

0000000096036030 <ext4_read_file>:

ssize_t ext4_read_file(filecookie *fcookie, void *buf, off_t offset, size_t len)
{
    96036030:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    96036034:	910003fd 	mov	x29, sp
    ext2_file_t *file = NULL;

    LTRACEF("\n");

    if (len == 0) {
    96036038:	b5000143 	cbnz	x3, 96036060 <ext4_read_file+0x30>
        TRACEF("File length cannot be 0\n");
    9603603c:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96036040:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96036044:	91323021 	add	x1, x1, #0xc8c
    96036048:	912e8800 	add	x0, x0, #0xba2
    9603604c:	528058e2 	mov	w2, #0x2c7                 	// #711
        return -1;
    }

    /* Offset is not used in this function so it must be 0 */
    if (offset != 0) {
        TRACEF("Offset must be 0\n");
    96036050:	97ffb188 	bl	96022670 <tegrabl_printf>
        TRACEF("not a file, mode: 0x%04x\n", file->inode.e2di_mode);
        return -1;
    }

    return ext4_read_data_from_extent(file->ext2, &file->inode, buf, len);
}
    96036054:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
    96036058:	a8c17bfd 	ldp	x29, x30, [sp], #16
    9603605c:	d65f03c0 	ret
    if (offset != 0) {
    96036060:	b40000e2 	cbz	x2, 9603607c <ext4_read_file+0x4c>
        TRACEF("Offset must be 0\n");
    96036064:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96036068:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603606c:	528059a2 	mov	w2, #0x2cd                 	// #717
    96036070:	91323021 	add	x1, x1, #0xc8c
    96036074:	913a9400 	add	x0, x0, #0xea5
    96036078:	17fffff6 	b	96036050 <ext4_read_file+0x20>
    if (!S_ISREG(file->inode.e2di_mode)) {
    9603607c:	79407002 	ldrh	w2, [x0, #56]
    96036080:	12140c44 	and	w4, w2, #0xf000
    96036084:	7140209f 	cmp	w4, #0x8, lsl #12
    96036088:	54000120 	b.eq	960360ac <ext4_read_file+0x7c>  // b.none
        TRACEF("not a file, mode: 0x%04x\n", file->inode.e2di_mode);
    9603608c:	2a0203e3 	mov	w3, w2
    96036090:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96036094:	52805aa2 	mov	w2, #0x2d5                 	// #725
    96036098:	91323021 	add	x1, x1, #0xc8c
    9603609c:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960360a0:	913b0400 	add	x0, x0, #0xec1
    960360a4:	97ffb173 	bl	96022670 <tegrabl_printf>
        return -1;
    960360a8:	17ffffeb 	b	96036054 <ext4_read_file+0x24>
    return ext4_read_data_from_extent(file->ext2, &file->inode, buf, len);
    960360ac:	aa0103e2 	mov	x2, x1
    960360b0:	9100e001 	add	x1, x0, #0x38
}
    960360b4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    return ext4_read_data_from_extent(file->ext2, &file->inode, buf, len);
    960360b8:	f9400000 	ldr	x0, [x0]
    960360bc:	17fffe8e 	b	96035af4 <ext4_read_data_from_extent>

00000000960360c0 <ext4_dir_lookup>:
{
    960360c0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
    960360c4:	910003fd 	mov	x29, sp
    960360c8:	a9025bf5 	stp	x21, x22, [sp, #32]
    960360cc:	aa0003f6 	mov	x22, x0
    if (!S_ISDIR(dir_inode->e2di_mode)) {
    960360d0:	79400020 	ldrh	w0, [x1]
{
    960360d4:	a90153f3 	stp	x19, x20, [sp, #16]
    960360d8:	a90363f7 	stp	x23, x24, [sp, #48]
    if (!S_ISDIR(dir_inode->e2di_mode)) {
    960360dc:	12140c00 	and	w0, w0, #0xf000
{
    960360e0:	a9046bf9 	stp	x25, x26, [sp, #64]
    if (!S_ISDIR(dir_inode->e2di_mode)) {
    960360e4:	7140101f 	cmp	w0, #0x4, lsl #12
{
    960360e8:	a90573fb 	stp	x27, x28, [sp, #80]
    if (!S_ISDIR(dir_inode->e2di_mode)) {
    960360ec:	54000200 	b.eq	9603612c <ext4_dir_lookup+0x6c>  // b.none
        err = ERR_NOT_DIR;
    960360f0:	12800293 	mov	w19, #0xffffffeb            	// #-21
        TRACEF("Not a directory\n");
    960360f4:	52803ae2 	mov	w2, #0x1d7                 	// #471
    960360f8:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    960360fc:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96036100:	91318821 	add	x1, x1, #0xc62
    96036104:	912ae800 	add	x0, x0, #0xaba
    96036108:	97ffb15a 	bl	96022670 <tegrabl_printf>
}
    9603610c:	2a1303e0 	mov	w0, w19
    96036110:	a94153f3 	ldp	x19, x20, [sp, #16]
    96036114:	a9425bf5 	ldp	x21, x22, [sp, #32]
    96036118:	a94363f7 	ldp	x23, x24, [sp, #48]
    9603611c:	a9446bf9 	ldp	x25, x26, [sp, #64]
    96036120:	a94573fb 	ldp	x27, x28, [sp, #80]
    96036124:	a8c87bfd 	ldp	x29, x30, [sp], #128
    96036128:	d65f03c0 	ret
    9603612c:	aa0103f7 	mov	x23, x1
    if (!validate_extents_magic((struct ext4_extent_header *)dir_inode->e2di_blocks)) {
    96036130:	79405021 	ldrh	w1, [x1, #40]
    96036134:	529e6140 	mov	w0, #0xf30a                	// #62218
    96036138:	6b00003f 	cmp	w1, w0
    9603613c:	54000120 	b.eq	96036160 <ext4_dir_lookup+0xa0>  // b.none
        TRACEF("Invalid extents magic\n");
    96036140:	52803ba2 	mov	w2, #0x1dd                 	// #477
    96036144:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96036148:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    9603614c:	91318821 	add	x1, x1, #0xc62
    96036150:	91390000 	add	x0, x0, #0xe40
        err = ERR_NOT_VALID;
    96036154:	128000d3 	mov	w19, #0xfffffff9            	// #-7
        TRACEF("Invalid extents magic\n");
    96036158:	97ffb146 	bl	96022670 <tegrabl_printf>
        goto fail;
    9603615c:	17ffffec 	b	9603610c <ext4_dir_lookup+0x4c>
    buf = tegrabl_memalign(SZ_64K, E2FS_BLOCK_SIZE(ext2->super_blk));
    96036160:	b9402ac1 	ldr	w1, [x22, #40]
    96036164:	52808015 	mov	w21, #0x400                 	// #1024
    96036168:	aa0203f9 	mov	x25, x2
    9603616c:	aa0303fb 	mov	x27, x3
    96036170:	d2a00020 	mov	x0, #0x10000               	// #65536
    96036174:	1ac122a1 	lsl	w1, w21, w1
    96036178:	97ffc283 	bl	96026b84 <tegrabl_memalign>
    9603617c:	aa0003f4 	mov	x20, x0
    if (buf == NULL) {
    96036180:	b5000120 	cbnz	x0, 960361a4 <ext4_dir_lookup+0xe4>
        TRACEF("Failed to allocate memory for super block\n");
    96036184:	52803c82 	mov	w2, #0x1e4                 	// #484
    96036188:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    9603618c:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96036190:	91318821 	add	x1, x1, #0xc62
    96036194:	913c4400 	add	x0, x0, #0xf11
        err = ERR_NO_MEMORY;
    96036198:	12800093 	mov	w19, #0xfffffffb            	// #-5
        TRACEF("Failed to allocate memory for super block\n");
    9603619c:	97ffb135 	bl	96022670 <tegrabl_printf>
        goto fail;
    960361a0:	17ffffdb 	b	9603610c <ext4_dir_lookup+0x4c>
    if (IS_HASHED_INDEX(dir_inode->e2di_flags)) {
    960361a4:	b94022e0 	ldr	w0, [x23, #32]
    960361a8:	36600ae0 	tbz	w0, #12, 96036304 <ext4_dir_lookup+0x244>
    uint32_t namelen = strlen(name);
    960361ac:	aa1903e0 	mov	x0, x25
    960361b0:	97ffd057 	bl	9602a30c <strlen>
    err = get_extents_blk(ext2, dir_inode, 0, (void *)buf);
    960361b4:	aa1403e3 	mov	x3, x20
    uint32_t namelen = strlen(name);
    960361b8:	f9003fa0 	str	x0, [x29, #120]
    err = get_extents_blk(ext2, dir_inode, 0, (void *)buf);
    960361bc:	52800002 	mov	w2, #0x0                   	// #0
    960361c0:	aa1703e1 	mov	x1, x23
    960361c4:	aa1603e0 	mov	x0, x22
    960361c8:	97fffdc3 	bl	960358d4 <get_extents_blk>
    960361cc:	2a0003f3 	mov	w19, w0
    if (err != NO_ERROR) {
    960361d0:	350001c0 	cbnz	w0, 96036208 <ext4_dir_lookup+0x148>
    hash_entries_count = root->count;
    960361d4:	79404693 	ldrh	w19, [x20, #34]
    entry = malloc(hash_entries_count * sizeof(struct dx_entry));
    960361d8:	d37d3e78 	ubfiz	x24, x19, #3, #16
    960361dc:	aa1803e0 	mov	x0, x24
    960361e0:	97ffc976 	bl	960287b8 <malloc>
    960361e4:	aa0003fc 	mov	x28, x0
    if (entry == NULL) {
    960361e8:	b5000160 	cbnz	x0, 96036214 <ext4_dir_lookup+0x154>
        err = ERR_NO_MEMORY;
    960361ec:	12800093 	mov	w19, #0xfffffffb            	// #-5
        TRACEF("Failed to allocate memory for hash entry\n");
    960361f0:	52802a82 	mov	w2, #0x154                 	// #340
    960361f4:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    960361f8:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960361fc:	9130f821 	add	x1, x1, #0xc3e
    96036200:	9134a000 	add	x0, x0, #0xd28
    96036204:	97ffb11b 	bl	96022670 <tegrabl_printf>
    free(buf);
    96036208:	aa1403e0 	mov	x0, x20
    9603620c:	97ffc96c 	bl	960287bc <free>
    return err;
    96036210:	17ffffbf 	b	9603610c <ext4_dir_lookup+0x4c>
    96036214:	91001318 	add	x24, x24, #0x4
    96036218:	9100101a 	add	x26, x0, #0x4
    9603621c:	8b180018 	add	x24, x0, x24
    entry[0].block = root->block;
    96036220:	b9402680 	ldr	w0, [x20, #36]
    memcpy(&entry[1], (void *)entries_start_addr, (hash_entries_count - 1) * sizeof(struct dx_entry));
    96036224:	51000662 	sub	w2, w19, #0x1
    entry[0].block = root->block;
    96036228:	2900039f 	stp	wzr, w0, [x28]
    memcpy(&entry[1], (void *)entries_start_addr, (hash_entries_count - 1) * sizeof(struct dx_entry));
    9603622c:	9100a281 	add	x1, x20, #0x28
    96036230:	91002380 	add	x0, x28, #0x8
    96036234:	d37df042 	lsl	x2, x2, #3
    96036238:	97ffcf3b 	bl	96029f24 <memcpy>
    for (i = 0; i < hash_entries_count; i++) {
    9603623c:	eb18035f 	cmp	x26, x24
    96036240:	54000061 	b.ne	9603624c <ext4_dir_lookup+0x18c>  // b.any
        err = ERR_NOT_FOUND;
    96036244:	12800033 	mov	w19, #0xfffffffe            	// #-2
    96036248:	14000027 	b	960362e4 <ext4_dir_lookup+0x224>
        memset(buf, 0, E2FS_BLOCK_SIZE(ext2->super_blk));
    9603624c:	b9402ac2 	ldr	w2, [x22, #40]
    96036250:	52800001 	mov	w1, #0x0                   	// #0
    96036254:	aa1403e0 	mov	x0, x20
    96036258:	1ac222a2 	lsl	w2, w21, w2
    9603625c:	97ffcef3 	bl	96029e28 <memset>
        err = get_extents_blk(ext2, dir_inode, entry[i].block, (void *)buf);
    96036260:	b9400342 	ldr	w2, [x26]
    96036264:	aa1403e3 	mov	x3, x20
    96036268:	aa1703e1 	mov	x1, x23
    9603626c:	aa1603e0 	mov	x0, x22
    96036270:	97fffd99 	bl	960358d4 <get_extents_blk>
    96036274:	2a0003f3 	mov	w19, w0
        if (err != NO_ERROR) {
    96036278:	35000360 	cbnz	w0, 960362e4 <ext4_dir_lookup+0x224>
        pos = 0;
    9603627c:	52800005 	mov	w5, #0x0                   	// #0
        while (pos < E2FS_BLOCK_SIZE(ext2->super_blk)) {
    96036280:	b9402ac0 	ldr	w0, [x22, #40]
    96036284:	1ac022a0 	lsl	w0, w21, w0
    96036288:	6b0000bf 	cmp	w5, w0
    9603628c:	54000063 	b.cc	96036298 <ext4_dir_lookup+0x1d8>  // b.lo, b.ul, b.last
    96036290:	9100235a 	add	x26, x26, #0x8
    96036294:	17ffffea 	b	9603623c <ext4_dir_lookup+0x17c>
            ent = (struct ext2fs_dir_entry_2 *)&buf[pos];
    96036298:	8b254283 	add	x3, x20, w5, uxtw
            if (LE16(ent->e2d_rec_len) == 0) {
    9603629c:	79400860 	ldrh	w0, [x3, #4]
    960362a0:	34ffff80 	cbz	w0, 96036290 <ext4_dir_lookup+0x1d0>
            if (ent->e2d_name_len == namelen && memcmp(name, ent->e2d_name, ent->e2d_name_len) == 0) {
    960362a4:	39401862 	ldrb	w2, [x3, #6]
    960362a8:	b9407ba0 	ldr	w0, [x29, #120]
    960362ac:	6b00005f 	cmp	w2, w0
    960362b0:	54000201 	b.ne	960362f0 <ext4_dir_lookup+0x230>  // b.any
    960362b4:	91002061 	add	x1, x3, #0x8
    960362b8:	b9006fa5 	str	w5, [x29, #108]
    960362bc:	f9003ba3 	str	x3, [x29, #112]
    960362c0:	92401c42 	and	x2, x2, #0xff
    960362c4:	aa1903e0 	mov	x0, x25
    960362c8:	97ffcf6a 	bl	9602a070 <memcmp>
    960362cc:	b9406fa5 	ldr	w5, [x29, #108]
    960362d0:	2a0003f3 	mov	w19, w0
    960362d4:	f9403ba3 	ldr	x3, [x29, #112]
    960362d8:	350000c0 	cbnz	w0, 960362f0 <ext4_dir_lookup+0x230>
                *inum = LE32(ent->e2d_inode);
    960362dc:	b9400060 	ldr	w0, [x3]
    960362e0:	b9000360 	str	w0, [x27]
        free(entry);
    960362e4:	aa1c03e0 	mov	x0, x28
    960362e8:	97ffc935 	bl	960287bc <free>
    960362ec:	17ffffc7 	b	96036208 <ext4_dir_lookup+0x148>
            pos += ROUNDUP(LE16(ent->e2d_rec_len), 4);
    960362f0:	79400860 	ldrh	w0, [x3, #4]
    960362f4:	11000c00 	add	w0, w0, #0x3
    960362f8:	121e7400 	and	w0, w0, #0xfffffffc
    960362fc:	0b0000a5 	add	w5, w5, w0
    96036300:	17ffffe0 	b	96036280 <ext4_dir_lookup+0x1c0>
    size_t namelen = strlen(name);
    96036304:	aa1903e0 	mov	x0, x25
    96036308:	97ffd001 	bl	9602a30c <strlen>
    9603630c:	aa0003fa 	mov	x26, x0
    96036310:	52808038 	mov	w24, #0x401                 	// #1025
        err = ext4_read_data_from_extent(ext2, dir_inode, buf, 0);
    96036314:	d2800003 	mov	x3, #0x0                   	// #0
    96036318:	aa1403e2 	mov	x2, x20
    9603631c:	aa1703e1 	mov	x1, x23
    96036320:	aa1603e0 	mov	x0, x22
    96036324:	97fffdf4 	bl	96035af4 <ext4_read_data_from_extent>
    96036328:	2a0003f3 	mov	w19, w0
        if (err <= 0) {
    9603632c:	7100001f 	cmp	w0, #0x0
    96036330:	540001cd 	b.le	96036368 <ext4_dir_lookup+0x2a8>
        pos = 0;
    96036334:	52800003 	mov	w3, #0x0                   	// #0
        while (pos < E2FS_BLOCK_SIZE(ext2->super_blk)) {
    96036338:	b9402ac0 	ldr	w0, [x22, #40]
    9603633c:	1ac022a0 	lsl	w0, w21, w0
    96036340:	6b00007f 	cmp	w3, w0
    96036344:	54000163 	b.cc	96036370 <ext4_dir_lookup+0x2b0>  // b.lo, b.ul, b.last
        if (file_blocknum > 1024) {
    96036348:	71000718 	subs	w24, w24, #0x1
    9603634c:	54fffe41 	b.ne	96036314 <ext4_dir_lookup+0x254>  // b.any
            TRACEF("Invalid file block num\n");
    96036350:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96036354:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96036358:	52803922 	mov	w2, #0x1c9                 	// #457
    9603635c:	91314021 	add	x1, x1, #0xc50
    96036360:	912c2800 	add	x0, x0, #0xb0a
    96036364:	97ffb0c3 	bl	96022670 <tegrabl_printf>
            return -1;
    96036368:	12800013 	mov	w19, #0xffffffff            	// #-1
    9603636c:	17ffffa7 	b	96036208 <ext4_dir_lookup+0x148>
            ent = (struct ext2fs_dir_entry_2 *)&buf[pos];
    96036370:	8b23429c 	add	x28, x20, w3, uxtw
            if (LE16(ent->e2d_rec_len) == 0) {
    96036374:	79400b80 	ldrh	w0, [x28, #4]
    96036378:	34fffe80 	cbz	w0, 96036348 <ext4_dir_lookup+0x288>
            if (ent->e2d_name_len == namelen && memcmp(name, ent->e2d_name, ent->e2d_name_len) == 0) {
    9603637c:	39401b80 	ldrb	w0, [x28, #6]
    96036380:	eb00035f 	cmp	x26, x0
    96036384:	54000161 	b.ne	960363b0 <ext4_dir_lookup+0x2f0>  // b.any
    96036388:	b9007ba3 	str	w3, [x29, #120]
    9603638c:	aa1a03e2 	mov	x2, x26
    96036390:	91002381 	add	x1, x28, #0x8
    96036394:	aa1903e0 	mov	x0, x25
    96036398:	97ffcf36 	bl	9602a070 <memcmp>
    9603639c:	b9407ba3 	ldr	w3, [x29, #120]
    960363a0:	35000080 	cbnz	w0, 960363b0 <ext4_dir_lookup+0x2f0>
                *inum = LE32(ent->e2d_inode);
    960363a4:	b9400380 	ldr	w0, [x28]
    960363a8:	b9000360 	str	w0, [x27]
    960363ac:	17ffff97 	b	96036208 <ext4_dir_lookup+0x148>
            pos += ROUNDUP(LE16(ent->e2d_rec_len), 4);
    960363b0:	79400b80 	ldrh	w0, [x28, #4]
    960363b4:	11000c00 	add	w0, w0, #0x3
    960363b8:	121e7400 	and	w0, w0, #0xfffffffc
    960363bc:	0b000063 	add	w3, w3, w0
    960363c0:	17ffffde 	b	96036338 <ext4_dir_lookup+0x278>

00000000960363c4 <alloc_block>:
    return NULL;
}

/* allocate a new block */
static struct bcache_block *alloc_block(struct bcache *cache)
{
    960363c4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    int err;
    struct bcache_block *block;

    /* pop one off the free list if it's present */
    block = list_remove_head_type(&cache->free_list, struct bcache_block, node);
    960363c8:	9100e001 	add	x1, x0, #0x38
{
    960363cc:	910003fd 	mov	x29, sp
    960363d0:	a90153f3 	stp	x19, x20, [sp, #16]
	if (list->next != list) {
    960363d4:	f9402013 	ldr	x19, [x0, #64]
    960363d8:	f90013f5 	str	x21, [sp, #32]
    960363dc:	91012015 	add	x21, x0, #0x48
    960363e0:	eb01027f 	cmp	x19, x1
    960363e4:	54000221 	b.ne	96036428 <alloc_block+0x64>  // b.any
        LTRACEF("found block %p on free list\n", block);
        return block;
    }

    /* walk the lru, looking for a free block */
    list_for_every_entry(&cache->lru_list, block, struct bcache_block, node) {
    960363e8:	f9402813 	ldr	x19, [x0, #80]
    960363ec:	eb15027f 	cmp	x19, x21
    960363f0:	54000180 	b.eq	96036420 <alloc_block+0x5c>  // b.none
        LTRACEF("looking at %p, num %u\n", block, block->blocknum);
        if (block->ref_count == 0) {
    960363f4:	b9401661 	ldr	w1, [x19, #20]
    960363f8:	35000561 	cbnz	w1, 960364a4 <alloc_block+0xe0>
    960363fc:	aa0003f4 	mov	x20, x0
            if (block->is_dirty) {
    96036400:	39406260 	ldrb	w0, [x19, #24]
    96036404:	340003a0 	cbz	w0, 96036478 <alloc_block+0xb4>
                                 (off_t)block->blocknum * cache->block_size,
    96036408:	b9401262 	ldr	w2, [x19, #16]
    err = tegrabl_blockdev_write(cache->dev,
    9603640c:	a9400e80 	ldp	x0, x3, [x20]
    96036410:	f9401261 	ldr	x1, [x19, #32]
    96036414:	9b037c42 	mul	x2, x2, x3
    96036418:	97ff9676 	bl	9601bdf0 <tegrabl_blockdev_write>
    if (err != TEGRABL_NO_ERROR) {
    9603641c:	34000260 	cbz	w0, 96036468 <alloc_block+0xa4>
                err = flush_block(cache, block);
                if (err)
                    return NULL;
    96036420:	d2800013 	mov	x19, #0x0                   	// #0
    96036424:	1400000c 	b	96036454 <alloc_block+0x90>
	item->next->prev = item->prev;
    96036428:	a9400662 	ldp	x2, x1, [x19]
    9603642c:	f9000022 	str	x2, [x1]
	item->prev->next = item->next;
    96036430:	f9400262 	ldr	x2, [x19]
    96036434:	f9000441 	str	x1, [x2, #8]
	item->prev = item->next = 0;
    96036438:	f900027f 	str	xzr, [x19]
        block->ref_count = 0;
    9603643c:	b900167f 	str	wzr, [x19, #20]
	item->prev = list->prev;
    96036440:	f9402401 	ldr	x1, [x0, #72]
	item->next = list;
    96036444:	a9005661 	stp	x1, x21, [x19]
	list->prev->next = item;
    96036448:	f9402401 	ldr	x1, [x0, #72]
    9603644c:	f9000433 	str	x19, [x1, #8]
	list->prev = item;
    96036450:	f9002413 	str	x19, [x0, #72]
            return block;
        }
    }

    return NULL;
}
    96036454:	aa1303e0 	mov	x0, x19
    96036458:	f94013f5 	ldr	x21, [sp, #32]
    9603645c:	a94153f3 	ldp	x19, x20, [sp, #16]
    96036460:	a8c37bfd 	ldp	x29, x30, [sp], #48
    96036464:	d65f03c0 	ret
    cache->stats.writes++;
    96036468:	b9403280 	ldr	w0, [x20, #48]
    block->is_dirty = false;
    9603646c:	3900627f 	strb	wzr, [x19, #24]
    cache->stats.writes++;
    96036470:	11000400 	add	w0, w0, #0x1
    96036474:	b9003280 	str	w0, [x20, #48]
	item->next->prev = item->prev;
    96036478:	a9400261 	ldp	x1, x0, [x19]
    9603647c:	f9000001 	str	x1, [x0]
	item->prev->next = item->next;
    96036480:	f9400261 	ldr	x1, [x19]
    96036484:	f9000420 	str	x0, [x1, #8]
	item->prev = item->next = 0;
    96036488:	f900027f 	str	xzr, [x19]
	item->prev = list->prev;
    9603648c:	f9402680 	ldr	x0, [x20, #72]
	item->next = list;
    96036490:	a9005660 	stp	x0, x21, [x19]
	list->prev->next = item;
    96036494:	f9402680 	ldr	x0, [x20, #72]
    96036498:	f9000413 	str	x19, [x0, #8]
	list->prev = item;
    9603649c:	f9002693 	str	x19, [x20, #72]
    960364a0:	17ffffed 	b	96036454 <alloc_block+0x90>
    list_for_every_entry(&cache->lru_list, block, struct bcache_block, node) {
    960364a4:	f9400673 	ldr	x19, [x19, #8]
    960364a8:	17ffffd1 	b	960363ec <alloc_block+0x28>

00000000960364ac <find_block>:
{
    960364ac:	aa0003e2 	mov	x2, x0
    list_for_every_entry(&cache->lru_list, block, struct bcache_block, node) {
    960364b0:	91012005 	add	x5, x0, #0x48
    960364b4:	f9402800 	ldr	x0, [x0, #80]
    uint32_t depth = 0;
    960364b8:	52800003 	mov	w3, #0x0                   	// #0
    list_for_every_entry(&cache->lru_list, block, struct bcache_block, node) {
    960364bc:	eb05001f 	cmp	x0, x5
    960364c0:	540000c1 	b.ne	960364d8 <find_block+0x2c>  // b.any
    cache->stats.misses++;
    960364c4:	b9402840 	ldr	w0, [x2, #40]
    960364c8:	11000400 	add	w0, w0, #0x1
    960364cc:	b9002840 	str	w0, [x2, #40]
    return NULL;
    960364d0:	d2800000 	mov	x0, #0x0                   	// #0
    960364d4:	14000016 	b	9603652c <find_block+0x80>
        if (block->blocknum == blocknum) {
    960364d8:	b9401006 	ldr	w6, [x0, #16]
        depth++;
    960364dc:	11000463 	add	w3, w3, #0x1
    960364e0:	f9400404 	ldr	x4, [x0, #8]
        if (block->blocknum == blocknum) {
    960364e4:	6b0100df 	cmp	w6, w1
    960364e8:	54000241 	b.ne	96036530 <find_block+0x84>  // b.any
	item->next->prev = item->prev;
    960364ec:	f9400001 	ldr	x1, [x0]
    960364f0:	f9000081 	str	x1, [x4]
	item->prev->next = item->next;
    960364f4:	f9400001 	ldr	x1, [x0]
    960364f8:	f9000424 	str	x4, [x1, #8]
	item->prev = item->next = 0;
    960364fc:	f900001f 	str	xzr, [x0]
	item->prev = list->prev;
    96036500:	f9402441 	ldr	x1, [x2, #72]
	item->next = list;
    96036504:	a9001401 	stp	x1, x5, [x0]
	list->prev->next = item;
    96036508:	f9402441 	ldr	x1, [x2, #72]
    9603650c:	f9000420 	str	x0, [x1, #8]
            cache->stats.hits++;
    96036510:	b9402041 	ldr	w1, [x2, #32]
	list->prev = item;
    96036514:	f9002440 	str	x0, [x2, #72]
    96036518:	11000421 	add	w1, w1, #0x1
    9603651c:	b9002041 	str	w1, [x2, #32]
            cache->stats.depth += depth;
    96036520:	b9402441 	ldr	w1, [x2, #36]
    96036524:	0b030023 	add	w3, w1, w3
    96036528:	b9002443 	str	w3, [x2, #36]
}
    9603652c:	d65f03c0 	ret
    96036530:	aa0403e0 	mov	x0, x4
    96036534:	17ffffe2 	b	960364bc <find_block+0x10>

0000000096036538 <find_or_fill_block>:

static struct bcache_block *find_or_fill_block(struct bcache *cache, uint blocknum)
{
    96036538:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    9603653c:	910003fd 	mov	x29, sp
    96036540:	a90153f3 	stp	x19, x20, [sp, #16]
    96036544:	aa0003f3 	mov	x19, x0
    96036548:	a9025bf5 	stp	x21, x22, [sp, #32]
    9603654c:	2a0103f6 	mov	w22, w1
    96036550:	f9001bf7 	str	x23, [sp, #48]
    96036554:	aa1e03f7 	mov	x23, x30
    tegrabl_error_t err;

    LTRACEF("block %u\n", blocknum);

    /* see if it's already in the cache */
    struct bcache_block *block = find_block(cache, blocknum);
    96036558:	97ffffd5 	bl	960364ac <find_block>
    9603655c:	aa0003f5 	mov	x21, x0
    if (block == NULL) {
    96036560:	b5000500 	cbnz	x0, 96036600 <find_or_fill_block+0xc8>
        LTRACEF("wasn't allocated\n");

        /* allocate a new block and fill it */
        block = alloc_block(cache);
    96036564:	aa1303e0 	mov	x0, x19
    96036568:	97ffff97 	bl	960363c4 <alloc_block>
    9603656c:	aa0003f4 	mov	x20, x0
        DEBUG_ASSERT(block);
    96036570:	b5000140 	cbnz	x0, 96036598 <find_or_fill_block+0x60>
    96036574:	f0000064 	adrp	x4, 96045000 <__func__.3796+0x7>
    96036578:	913ab084 	add	x4, x4, #0xeac
    9603657c:	52801ca3 	mov	w3, #0xe5                  	// #229
        }

        cache->stats.reads++;
    }

    DEBUG_ASSERT(block->blocknum == blocknum);
    96036580:	d0000082 	adrp	x2, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96036584:	90000021 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96036588:	9101fc42 	add	x2, x2, #0x7f
    9603658c:	91323c21 	add	x1, x1, #0xc8f
    96036590:	aa1703e0 	mov	x0, x23
    96036594:	97ffc56c 	bl	96027b44 <_panic>
        err = tegrabl_blockdev_read(cache->dev,
    96036598:	f9400663 	ldr	x3, [x19, #8]
                                    cache->fs_offset + ((off_t)blocknum * cache->block_size),
    9603659c:	2a1603e2 	mov	w2, w22
        err = tegrabl_blockdev_read(cache->dev,
    960365a0:	f9400e60 	ldr	x0, [x19, #24]
    960365a4:	f9401281 	ldr	x1, [x20, #32]
    960365a8:	d503201f 	nop
    960365ac:	9b030042 	madd	x2, x2, x3, x0
    960365b0:	f9400260 	ldr	x0, [x19]
        block->blocknum = blocknum;
    960365b4:	b9001296 	str	w22, [x20, #16]
        err = tegrabl_blockdev_read(cache->dev,
    960365b8:	97ff9526 	bl	9601ba50 <tegrabl_blockdev_read>
        if (err != TEGRABL_NO_ERROR) {
    960365bc:	340001a0 	cbz	w0, 960365f0 <find_or_fill_block+0xb8>
	item->prev = list->prev;
    960365c0:	aa1303e0 	mov	x0, x19
    960365c4:	f8438c01 	ldr	x1, [x0, #56]!
	item->next = list;
    960365c8:	a9000281 	stp	x1, x0, [x20]
	list->prev->next = item;
    960365cc:	f9401e60 	ldr	x0, [x19, #56]
    960365d0:	f9000414 	str	x20, [x0, #8]
	list->prev = item;
    960365d4:	f9001e74 	str	x20, [x19, #56]

    return block;
}
    960365d8:	aa1503e0 	mov	x0, x21
    960365dc:	f9401bf7 	ldr	x23, [sp, #48]
    960365e0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960365e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960365e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    960365ec:	d65f03c0 	ret
        cache->stats.reads++;
    960365f0:	b9402e60 	ldr	w0, [x19, #44]
    960365f4:	aa1403f5 	mov	x21, x20
    960365f8:	11000400 	add	w0, w0, #0x1
    960365fc:	b9002e60 	str	w0, [x19, #44]
    DEBUG_ASSERT(block->blocknum == blocknum);
    96036600:	b94012a0 	ldr	w0, [x21, #16]
    96036604:	6b16001f 	cmp	w0, w22
    96036608:	54fffe80 	b.eq	960365d8 <find_or_fill_block+0xa0>  // b.none
    9603660c:	d0000084 	adrp	x4, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96036610:	52801f03 	mov	w3, #0xf8                  	// #248
    96036614:	91033484 	add	x4, x4, #0xcd
    96036618:	17ffffda 	b	96036580 <find_or_fill_block+0x48>

000000009603661c <bcache_create>:
{
    9603661c:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    96036620:	910003fd 	mov	x29, sp
    96036624:	a90153f3 	stp	x19, x20, [sp, #16]
    96036628:	aa0303f4 	mov	x20, x3
    9603662c:	a9025bf5 	stp	x21, x22, [sp, #32]
    96036630:	aa0003f5 	mov	x21, x0
    96036634:	a90363f7 	stp	x23, x24, [sp, #48]
    96036638:	2a0203f6 	mov	w22, w2
    9603663c:	a9046bf9 	stp	x25, x26, [sp, #64]
    cache = malloc(sizeof(struct bcache));
    96036640:	d2800c00 	mov	x0, #0x60                  	// #96
{
    96036644:	aa0103f9 	mov	x25, x1
    96036648:	f9002bfb 	str	x27, [sp, #80]
    cache = malloc(sizeof(struct bcache));
    9603664c:	97ffc85b 	bl	960287b8 <malloc>
    96036650:	aa0003f3 	mov	x19, x0
    if (cache == NULL) {
    96036654:	b5000160 	cbnz	x0, 96036680 <bcache_create+0x64>
        TRACEF("Failed to allocate memory for cache object\n");
    96036658:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    9603665c:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96036660:	528008c2 	mov	w2, #0x46                  	// #70
    96036664:	913dac21 	add	x1, x1, #0xf6b
    96036668:	913de400 	add	x0, x0, #0xf79
    9603666c:	97ffb001 	bl	96022670 <tegrabl_printf>
    free(cache);
    96036670:	aa1303e0 	mov	x0, x19
    return NULL;
    96036674:	d2800013 	mov	x19, #0x0                   	// #0
    free(cache);
    96036678:	97ffc851 	bl	960287bc <free>
    return NULL;
    9603667c:	14000016 	b	960366d4 <bcache_create+0xb8>
    cache->block_size = block_size;
    96036680:	a9006675 	stp	x21, x25, [x19]
    memset(&cache->stats, 0, sizeof(cache->stats));
    96036684:	d2800282 	mov	x2, #0x14                  	// #20
    cache->count = block_count;
    96036688:	b9001276 	str	w22, [x19, #16]
    memset(&cache->stats, 0, sizeof(cache->stats));
    9603668c:	52800001 	mov	w1, #0x0                   	// #0
    cache->fs_offset = fs_offset;
    96036690:	f9000e74 	str	x20, [x19, #24]
    memset(&cache->stats, 0, sizeof(cache->stats));
    96036694:	91008000 	add	x0, x0, #0x20
    list_initialize(&cache->free_list);
    96036698:	9100e277 	add	x23, x19, #0x38
    9603669c:	d2800014 	mov	x20, #0x0                   	// #0
    memset(&cache->stats, 0, sizeof(cache->stats));
    960366a0:	97ffcde2 	bl	96029e28 <memset>
	list->prev = list->next = list;
    960366a4:	a903de77 	stp	x23, x23, [x19, #56]
    list_initialize(&cache->lru_list);
    960366a8:	91012260 	add	x0, x19, #0x48
    960366ac:	a9048260 	stp	x0, x0, [x19, #72]
    cache->blocks = malloc(sizeof(struct bcache_block) * block_count);
    960366b0:	52800500 	mov	w0, #0x28                  	// #40
    960366b4:	9b207ec0 	smull	x0, w22, w0
    960366b8:	97ffc840 	bl	960287b8 <malloc>
    960366bc:	f9002e60 	str	x0, [x19, #88]
    if (cache->blocks == NULL) {
    960366c0:	b40001a0 	cbz	x0, 960366f4 <bcache_create+0xd8>
    960366c4:	d280051b 	mov	x27, #0x28                  	// #40
    960366c8:	2a1403fa 	mov	w26, w20
    for (i=0; i < block_count; i++) {
    960366cc:	6b16029f 	cmp	w20, w22
    960366d0:	5400028b 	b.lt	96036720 <bcache_create+0x104>  // b.tstop
}
    960366d4:	aa1303e0 	mov	x0, x19
    960366d8:	f9402bfb 	ldr	x27, [sp, #80]
    960366dc:	a94153f3 	ldp	x19, x20, [sp, #16]
    960366e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960366e4:	a94363f7 	ldp	x23, x24, [sp, #48]
    960366e8:	a9446bf9 	ldp	x25, x26, [sp, #64]
    960366ec:	a8c67bfd 	ldp	x29, x30, [sp], #96
    960366f0:	d65f03c0 	ret
        TRACEF("Failed to allocate memory for cache->blocks\n");
    960366f4:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    960366f8:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    960366fc:	52800aa2 	mov	w2, #0x55                  	// #85
    96036700:	913dac21 	add	x1, x1, #0xf6b
    96036704:	913ebc00 	add	x0, x0, #0xfaf
    96036708:	97ffafda 	bl	96022670 <tegrabl_printf>
    if ((cache != NULL) && (cache->blocks != NULL)) {
    9603670c:	f9402e60 	ldr	x0, [x19, #88]
    96036710:	b40004e0 	cbz	x0, 960367ac <bcache_create+0x190>
    96036714:	d2800014 	mov	x20, #0x0                   	// #0
            free(cache->blocks[i].ptr);
    96036718:	d2800515 	mov	x21, #0x28                  	// #40
    9603671c:	14000021 	b	960367a0 <bcache_create+0x184>
        cache->blocks[i].ref_count = 0;
    96036720:	f9402e75 	ldr	x21, [x19, #88]
    96036724:	9b1b7e98 	mul	x24, x20, x27
        cache->blocks[i].ptr = malloc(block_size);
    96036728:	aa1903e0 	mov	x0, x25
    9603672c:	91000694 	add	x20, x20, #0x1
        cache->blocks[i].ref_count = 0;
    96036730:	8b1802b5 	add	x21, x21, x24
    96036734:	b90016bf 	str	wzr, [x21, #20]
        cache->blocks[i].is_dirty = false;
    96036738:	390062bf 	strb	wzr, [x21, #24]
        cache->blocks[i].ptr = malloc(block_size);
    9603673c:	97ffc81f 	bl	960287b8 <malloc>
        if (cache->blocks[i].ptr == NULL) {
    96036740:	f9402e61 	ldr	x1, [x19, #88]
        cache->blocks[i].ptr = malloc(block_size);
    96036744:	f90012a0 	str	x0, [x21, #32]
        if (cache->blocks[i].ptr == NULL) {
    96036748:	8b180020 	add	x0, x1, x24
    9603674c:	f9401002 	ldr	x2, [x0, #32]
    96036750:	b5000122 	cbnz	x2, 96036774 <bcache_create+0x158>
            TRACEF("Failed to allocate memory for cache->blocks[%u]->ptr\n", i);
    96036754:	2a1a03e3 	mov	w3, w26
    96036758:	52800bc2 	mov	w2, #0x5e                  	// #94
    9603675c:	b0000081 	adrp	x1, 96047000 <__func__.3913+0x316>
    96036760:	b0000080 	adrp	x0, 96047000 <__func__.3913+0x316>
    96036764:	913dac21 	add	x1, x1, #0xf6b
    96036768:	913f9800 	add	x0, x0, #0xfe6
    9603676c:	97ffafc1 	bl	96022670 <tegrabl_printf>
            goto exit;
    96036770:	17ffffe7 	b	9603670c <bcache_create+0xf0>
	item->next = list->next;
    96036774:	f9402262 	ldr	x2, [x19, #64]
    96036778:	f9000402 	str	x2, [x0, #8]
	item->prev = list;
    9603677c:	f8386837 	str	x23, [x1, x24]
	list->next->prev = item;
    96036780:	f9402261 	ldr	x1, [x19, #64]
    96036784:	f9000020 	str	x0, [x1]
	list->next = item;
    96036788:	f9002260 	str	x0, [x19, #64]
    9603678c:	17ffffcf 	b	960366c8 <bcache_create+0xac>
            free(cache->blocks[i].ptr);
    96036790:	9b150280 	madd	x0, x20, x21, x0
    96036794:	91000694 	add	x20, x20, #0x1
    96036798:	f9401000 	ldr	x0, [x0, #32]
    9603679c:	97ffc808 	bl	960287bc <free>
        for (i = 0; i < block_count; i++) {
    960367a0:	6b1402df 	cmp	w22, w20
    960367a4:	f9402e60 	ldr	x0, [x19, #88]
    960367a8:	54ffff4c 	b.gt	96036790 <bcache_create+0x174>
        free(cache->blocks);
    960367ac:	f9402e60 	ldr	x0, [x19, #88]
    960367b0:	97ffc803 	bl	960287bc <free>
    960367b4:	17ffffaf 	b	96036670 <bcache_create+0x54>

00000000960367b8 <bcache_destroy>:
{
    960367b8:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    960367bc:	910003fd 	mov	x29, sp
    960367c0:	a90153f3 	stp	x19, x20, [sp, #16]
    960367c4:	aa0003f3 	mov	x19, x0
    960367c8:	a9025bf5 	stp	x21, x22, [sp, #32]
            printf("warning: freeing dirty block %u\n",
    960367cc:	d0000095 	adrp	x21, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
{
    960367d0:	a90363f7 	stp	x23, x24, [sp, #48]
            printf("warning: freeing dirty block %u\n",
    960367d4:	91011ab5 	add	x21, x21, #0x46
    960367d8:	aa1e03f7 	mov	x23, x30
    for (i=0; i < cache->count; i++) {
    960367dc:	d2800014 	mov	x20, #0x0                   	// #0
    960367e0:	d2800518 	mov	x24, #0x28                  	// #40
    960367e4:	b9401260 	ldr	w0, [x19, #16]
    960367e8:	6b14001f 	cmp	w0, w20
    960367ec:	540000ec 	b.gt	96036808 <bcache_destroy+0x50>
    free(cache);
    960367f0:	aa1303e0 	mov	x0, x19
}
    960367f4:	a94153f3 	ldp	x19, x20, [sp, #16]
    960367f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
    960367fc:	a94363f7 	ldp	x23, x24, [sp, #48]
    96036800:	a8c47bfd 	ldp	x29, x30, [sp], #64
    free(cache);
    96036804:	17ffc7ee 	b	960287bc <free>
    96036808:	9b187e96 	mul	x22, x20, x24
        DEBUG_ASSERT(cache->blocks[i].ref_count == 0);
    9603680c:	f9402e60 	ldr	x0, [x19, #88]
    96036810:	8b160000 	add	x0, x0, x22
    96036814:	b9401401 	ldr	w1, [x0, #20]
    96036818:	34000141 	cbz	w1, 96036840 <bcache_destroy+0x88>
    9603681c:	d0000084 	adrp	x4, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96036820:	d0000082 	adrp	x2, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96036824:	90000021 	adrp	x1, 9603a000 <__exidx_end+0x548>
    96036828:	91009884 	add	x4, x4, #0x26
    9603682c:	528011e3 	mov	w3, #0x8f                  	// #143
    96036830:	9101fc42 	add	x2, x2, #0x7f
    96036834:	91323c21 	add	x1, x1, #0xc8f
    96036838:	aa1703e0 	mov	x0, x23
    9603683c:	97ffc4c2 	bl	96027b44 <_panic>
        if (cache->blocks[i].is_dirty)
    96036840:	39406001 	ldrb	w1, [x0, #24]
    96036844:	34000081 	cbz	w1, 96036854 <bcache_destroy+0x9c>
            printf("warning: freeing dirty block %u\n",
    96036848:	b9401001 	ldr	w1, [x0, #16]
    9603684c:	aa1503e0 	mov	x0, x21
    96036850:	97ffaf88 	bl	96022670 <tegrabl_printf>
        free(cache->blocks[i].ptr);
    96036854:	f9402e60 	ldr	x0, [x19, #88]
    96036858:	91000694 	add	x20, x20, #0x1
    9603685c:	8b160000 	add	x0, x0, x22
    96036860:	f9401000 	ldr	x0, [x0, #32]
    96036864:	97ffc7d6 	bl	960287bc <free>
    96036868:	17ffffdf 	b	960367e4 <bcache_destroy+0x2c>

000000009603686c <bcache_read_block>:

int bcache_read_block(bcache_t _cache, void *buf, uint blocknum)
{
    9603686c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    96036870:	910003fd 	mov	x29, sp
    96036874:	a90153f3 	stp	x19, x20, [sp, #16]
    96036878:	aa0103f3 	mov	x19, x1
    9603687c:	aa0003f4 	mov	x20, x0
    struct bcache *cache = _cache;

    LTRACEF("buf %p, blocknum %u\n", buf, blocknum);

    struct bcache_block *block = find_or_fill_block(cache, blocknum);
    96036880:	2a0203e1 	mov	w1, w2
    96036884:	97ffff2d 	bl	96036538 <find_or_fill_block>
    if (block == NULL) {
    96036888:	b4000120 	cbz	x0, 960368ac <bcache_read_block+0x40>
        /* error */
        return -1;
    }

    memcpy(buf, block->ptr, cache->block_size);
    9603688c:	f9401001 	ldr	x1, [x0, #32]
    96036890:	aa1303e0 	mov	x0, x19
    96036894:	f9400682 	ldr	x2, [x20, #8]
    96036898:	97ffcda3 	bl	96029f24 <memcpy>
    return 0;
    9603689c:	52800000 	mov	w0, #0x0                   	// #0
}
    960368a0:	a94153f3 	ldp	x19, x20, [sp, #16]
    960368a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    960368a8:	d65f03c0 	ret
        return -1;
    960368ac:	12800000 	mov	w0, #0xffffffff            	// #-1
    960368b0:	17fffffc 	b	960368a0 <bcache_read_block+0x34>

00000000960368b4 <bcache_get_block>:

int bcache_get_block(bcache_t _cache, void **ptr, uint blocknum)
{
    960368b4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    960368b8:	910003fd 	mov	x29, sp
    960368bc:	f9000bf3 	str	x19, [sp, #16]
    960368c0:	aa0103f3 	mov	x19, x1
    struct bcache *cache = _cache;

    LTRACEF("ptr %p, blocknum %u\n", ptr, blocknum);

    DEBUG_ASSERT(ptr);
    960368c4:	b5000141 	cbnz	x1, 960368ec <bcache_get_block+0x38>
    960368c8:	b0000064 	adrp	x4, 96043000 <common_params>
    960368cc:	d0000082 	adrp	x2, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    960368d0:	90000021 	adrp	x1, 9603a000 <__exidx_end+0x548>
    960368d4:	910c0884 	add	x4, x4, #0x302
    960368d8:	52802263 	mov	w3, #0x113                 	// #275
    960368dc:	9101fc42 	add	x2, x2, #0x7f
    960368e0:	91323c21 	add	x1, x1, #0xc8f
    960368e4:	aa1e03e0 	mov	x0, x30
    960368e8:	97ffc497 	bl	96027b44 <_panic>
    960368ec:	2a0203e1 	mov	w1, w2

    struct bcache_block *block = find_or_fill_block(cache, blocknum);
    960368f0:	97ffff12 	bl	96036538 <find_or_fill_block>
    if (block == NULL) {
    960368f4:	b4000140 	cbz	x0, 9603691c <bcache_get_block+0x68>
        /* error */
        return -1;
    }

    /* increment the ref count to keep it from being freed */
    block->ref_count++;
    960368f8:	b9401401 	ldr	w1, [x0, #20]
    960368fc:	11000421 	add	w1, w1, #0x1
    96036900:	b9001401 	str	w1, [x0, #20]
    *ptr = block->ptr;
    96036904:	f9401000 	ldr	x0, [x0, #32]
    96036908:	f9000260 	str	x0, [x19]

    return 0;
    9603690c:	52800000 	mov	w0, #0x0                   	// #0
}
    96036910:	f9400bf3 	ldr	x19, [sp, #16]
    96036914:	a8c27bfd 	ldp	x29, x30, [sp], #32
    96036918:	d65f03c0 	ret
        return -1;
    9603691c:	12800000 	mov	w0, #0xffffffff            	// #-1
    96036920:	17fffffc 	b	96036910 <bcache_get_block+0x5c>

0000000096036924 <bcache_put_block>:

int bcache_put_block(bcache_t _cache, uint blocknum)
{
    96036924:	aa1e03e7 	mov	x7, x30
    96036928:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    9603692c:	910003fd 	mov	x29, sp
    struct bcache *cache = _cache;

    LTRACEF("blocknum %u\n", blocknum);

    struct bcache_block *block = find_block(cache, blocknum);
    96036930:	97fffedf 	bl	960364ac <find_block>

    /* be pretty hard on the caller for now */
    DEBUG_ASSERT(block);
    96036934:	b5000140 	cbnz	x0, 9603695c <bcache_put_block+0x38>
    96036938:	f0000064 	adrp	x4, 96045000 <__func__.3796+0x7>
    9603693c:	913ab084 	add	x4, x4, #0xeac
    96036940:	52802563 	mov	w3, #0x12b                 	// #299
    DEBUG_ASSERT(block->ref_count > 0);
    96036944:	d0000082 	adrp	x2, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    96036948:	90000021 	adrp	x1, 9603a000 <__exidx_end+0x548>
    9603694c:	9101fc42 	add	x2, x2, #0x7f
    96036950:	91323c21 	add	x1, x1, #0xc8f
    96036954:	aa0703e0 	mov	x0, x7
    96036958:	97ffc47b 	bl	96027b44 <_panic>
    9603695c:	b9401401 	ldr	w1, [x0, #20]
    96036960:	7100003f 	cmp	w1, #0x0
    96036964:	540000ac 	b.gt	96036978 <bcache_put_block+0x54>
    96036968:	d0000084 	adrp	x4, 96048000 <__PRETTY_FUNCTION__.3274+0x95>
    9603696c:	52802583 	mov	w3, #0x12c                 	// #300
    96036970:	9101a884 	add	x4, x4, #0x6a
    96036974:	17fffff4 	b	96036944 <bcache_put_block+0x20>

    block->ref_count--;
    96036978:	51000421 	sub	w1, w1, #0x1
    9603697c:	b9001401 	str	w1, [x0, #20]

    return 0;
}
    96036980:	52800000 	mov	w0, #0x0                   	// #0
    96036984:	a8c17bfd 	ldp	x29, x30, [sp], #16
    96036988:	d65f03c0 	ret
