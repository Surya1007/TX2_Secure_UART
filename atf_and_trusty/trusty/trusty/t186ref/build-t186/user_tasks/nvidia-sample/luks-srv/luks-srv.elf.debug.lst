
t186ref/build-t186/user_tasks/nvidia-sample/luks-srv/luks-srv.syms.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <exit>:
/* HACK: needed temporarily until the syscalls file gets the
 * __NO_RETURN annotation */
__NO_RETURN long exit_group (void);

__NO_RETURN void exit(int status)
{
    8000:	e92d4010 	push	{r4, lr}
	__cxa_finalize();
    8004:	eb00038b 	bl	8e38 <__cxa_finalize>
	exit_group();
    8008:	eb000c92 	bl	b258 <exit_group>

0000800c <main>:
int main(void)
{
	int rc = NO_ERROR;
	uevent_t event;

	TLOGI("luks-srv is running!!\n");
    800c:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8010:	e30014ec 	movw	r1, #1260	; 0x4ec
{
    8014:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	TLOGI("luks-srv is running!!\n");
    8018:	e3a03029 	mov	r3, #41	; 0x29
{
    801c:	e24dd01c 	sub	sp, sp, #28
	TLOGI("luks-srv is running!!\n");
    8020:	e3402000 	movt	r2, #0
    8024:	e3401001 	movt	r1, #1
    8028:	e59f010c 	ldr	r0, [pc, #268]	; 813c <main+0x130>
    802c:	eb001e03 	bl	f840 <fprintf>

	//secure_platform_dputc('z');
	const char* dep = "hello";
	send_to_uart( 2, (char*) dep, 5);
    8030:	e300150c 	movw	r1, #1292	; 0x50c
    8034:	e3a02005 	mov	r2, #5
    8038:	e3401001 	movt	r1, #1
    803c:	e3a00002 	mov	r0, #2
    8040:	eb000ca8 	bl	b2e8 <send_to_uart>
	
	rc = luks_srv_key_mgnt_processing();
    8044:	eb0002da 	bl	8bb4 <luks_srv_key_mgnt_processing>
	if (rc != NO_ERROR) {
    8048:	e2504000 	subs	r4, r0, #0
    804c:	1a000021 	bne	80d8 <main+0xcc>
		TLOGE("%s: Failed to set up LUKS keys (%d).\n", __func__, rc);
		return rc;
	}

	/* Initialize IPC service */
	rc = init_luks_srv_ipc();
    8050:	eb0001e2 	bl	87e0 <init_luks_srv_ipc>
	if (rc != NO_ERROR ) {
    8054:	e3500000 	cmp	r0, #0
    8058:	1a00002c 	bne	8110 <main+0x104>
		event.event  = 0;
		event.cookie = NULL;

		rc = wait_any(&event, -1);
		const char* temp = "SURYA";
		send_to_uart( 2, (char*) temp, 5);
    805c:	e300556c 	movw	r5, #1388	; 0x56c
		if (rc < 0) {
			TLOGI("wait_any failed (%d)", rc);
    8060:	e30f7fa0 	movw	r7, #65440	; 0xffa0
    8064:	e3006574 	movw	r6, #1396	; 0x574
		send_to_uart( 2, (char*) temp, 5);
    8068:	e3405001 	movt	r5, #1
			TLOGI("wait_any failed (%d)", rc);
    806c:	e3407000 	movt	r7, #0
    8070:	e3406001 	movt	r6, #1
		event.handle = INVALID_IPC_HANDLE;
    8074:	e3e02000 	mvn	r2, #0
		event.event  = 0;
    8078:	e3a03000 	mov	r3, #0
		rc = wait_any(&event, -1);
    807c:	e1a01002 	mov	r1, r2
    8080:	e28d000c 	add	r0, sp, #12
		event.event  = 0;
    8084:	e1cd20fc 	strd	r2, [sp, #12]
		event.cookie = NULL;
    8088:	e58d3014 	str	r3, [sp, #20]
		rc = wait_any(&event, -1);
    808c:	eb000c86 	bl	b2ac <wait_any>
		send_to_uart( 2, (char*) temp, 5);
    8090:	e3a02005 	mov	r2, #5
		rc = wait_any(&event, -1);
    8094:	e1a04000 	mov	r4, r0
		send_to_uart( 2, (char*) temp, 5);
    8098:	e1a01005 	mov	r1, r5
    809c:	e3a00002 	mov	r0, #2
    80a0:	eb000c90 	bl	b2e8 <send_to_uart>
		if (rc < 0) {
    80a4:	e3540000 	cmp	r4, #0
    80a8:	ba000003 	blt	80bc <main+0xb0>
			continue;
		}

		if (rc == NO_ERROR) { /* Got an event */
    80ac:	1afffff0 	bne	8074 <main+0x68>
			dispatch_luks_srv_ipc_event(&event);
    80b0:	e28d000c 	add	r0, sp, #12
    80b4:	eb0001f6 	bl	8894 <dispatch_luks_srv_ipc_event>
    80b8:	eaffffed 	b	8074 <main+0x68>
			TLOGI("wait_any failed (%d)", rc);
    80bc:	e58d4000 	str	r4, [sp]
    80c0:	e3a03047 	mov	r3, #71	; 0x47
    80c4:	e1a02007 	mov	r2, r7
    80c8:	e1a01006 	mov	r1, r6
    80cc:	e59f0068 	ldr	r0, [pc, #104]	; 813c <main+0x130>
    80d0:	eb001dda 	bl	f840 <fprintf>
			continue;
    80d4:	eaffffe6 	b	8074 <main+0x68>
		TLOGE("%s: Failed to set up LUKS keys (%d).\n", __func__, rc);
    80d8:	e30034e4 	movw	r3, #1252	; 0x4e4
    80dc:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    80e0:	e3403001 	movt	r3, #1
    80e4:	e3001514 	movw	r1, #1300	; 0x514
    80e8:	e58d3000 	str	r3, [sp]
    80ec:	e3402000 	movt	r2, #0
    80f0:	e58d4004 	str	r4, [sp, #4]
    80f4:	e3401001 	movt	r1, #1
    80f8:	e3a03031 	mov	r3, #49	; 0x31
    80fc:	e59f0038 	ldr	r0, [pc, #56]	; 813c <main+0x130>
    8100:	eb001dce 	bl	f840 <fprintf>
		}
	} while(1);

	return rc;
}
    8104:	e1a00004 	mov	r0, r4
    8108:	e28dd01c 	add	sp, sp, #28
    810c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		TLOGI("Failed (%d) to init IPC service", rc);
    8110:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8114:	e3001544 	movw	r1, #1348	; 0x544
    8118:	e58d0000 	str	r0, [sp]
    811c:	e3402000 	movt	r2, #0
    8120:	e3401001 	movt	r1, #1
    8124:	e3a03038 	mov	r3, #56	; 0x38
    8128:	e59f000c 	ldr	r0, [pc, #12]	; 813c <main+0x130>
		return -1;
    812c:	e3e04000 	mvn	r4, #0
		TLOGI("Failed (%d) to init IPC service", rc);
    8130:	eb001dc2 	bl	f840 <fprintf>
		kill_luks_srv_ipc();
    8134:	eb0001c9 	bl	8860 <kill_luks_srv_ipc>
		return -1;
    8138:	eafffff1 	b	8104 <main+0xf8>
    813c:	0001305c 	.word	0x0001305c

00008140 <__guard_setup>:

#include <rand.h>

unsigned int __stack_chk_guard = 0xaff;

static void __attribute__((constructor)) __guard_setup (void){
    8140:	e92d4010 	push	{r4, lr}
        /* 
         * included for future use. rand.h must be seeded and -fstack_protector must be disabled in
         * stack contexts preceeding this call.
         */
  	if ( __stack_chk_guard == 0U )
    8144:	e30340a0 	movw	r4, #12448	; 0x30a0
    8148:	e3404001 	movt	r4, #1
    814c:	e5943000 	ldr	r3, [r4]
    8150:	e3530000 	cmp	r3, #0
    8154:	18bd8010 	popne	{r4, pc}
  		__stack_chk_guard = rand();
    8158:	eb001dab 	bl	f80c <rand>
    815c:	e5840000 	str	r0, [r4]
}
    8160:	e8bd8010 	pop	{r4, pc}

00008164 <get_key_srv_open>:
	return rc;
}

handle_t get_key_srv_open(void)
{
	return connect(GET_KEY_SRV_PORT, IPC_CONNECT_WAIT_FOR_PORT);
    8164:	e30f0f84 	movw	r0, #65412	; 0xff84
    8168:	e3a01001 	mov	r1, #1
    816c:	e3400000 	movt	r0, #0
    8170:	ea000c3e 	b	b270 <connect>

00008174 <get_key_srv_query_ekb_key>:
}

int get_key_srv_query_ekb_key(handle_t session, get_key_srv_cmd_msg_t *msg)
{
    8174:	e92d4070 	push	{r4, r5, r6, lr}
    8178:	e1a02001 	mov	r2, r1
    817c:	e24dd038 	sub	sp, sp, #56	; 0x38
	msg->cmd = GET_KEY_SRV_QUERY_EKB_KEY;
    8180:	e3a03001 	mov	r3, #1
	iovec_t iov = {
    8184:	e3a0c024 	mov	ip, #36	; 0x24
{
    8188:	e1a05000 	mov	r5, r0
	msg->cmd = GET_KEY_SRV_QUERY_EKB_KEY;
    818c:	e5813000 	str	r3, [r1]
	rc = send_msg(session, &ipc_msg);
    8190:	e28d1028 	add	r1, sp, #40	; 0x28
	iovec_t iov = {
    8194:	e58d200c 	str	r2, [sp, #12]
	ipc_msg_t ipc_msg = {
    8198:	e28d200c 	add	r2, sp, #12
    819c:	e58d3028 	str	r3, [sp, #40]	; 0x28
    81a0:	e3a03000 	mov	r3, #0
	iovec_t iov = {
    81a4:	e58dc010 	str	ip, [sp, #16]
	ipc_msg_t ipc_msg = {
    81a8:	e58d3034 	str	r3, [sp, #52]	; 0x34
    81ac:	e1cd22fc 	strd	r2, [sp, #44]	; 0x2c
	rc = send_msg(session, &ipc_msg);
    81b0:	eb000c49 	bl	b2dc <send_msg>
	if (rc < 0)
    81b4:	e2504000 	subs	r4, r0, #0
    81b8:	ba000002 	blt	81c8 <get_key_srv_query_ekb_key+0x54>
	if ((size_t)rc != sizeof(*msg)) {
    81bc:	e3540024 	cmp	r4, #36	; 0x24
    81c0:	0a00000e 	beq	8200 <get_key_srv_query_ekb_key+0x8c>
		rc = ERR_IO;
    81c4:	e3e04013 	mvn	r4, #19
	TLOGE("%s: failed (%d)\n", __func__, rc);
    81c8:	e30f3f64 	movw	r3, #65380	; 0xff64
    81cc:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    81d0:	e3403000 	movt	r3, #0
    81d4:	e30f1fac 	movw	r1, #65452	; 0xffac
    81d8:	e58d3000 	str	r3, [sp]
    81dc:	e3402000 	movt	r2, #0
    81e0:	e58d4004 	str	r4, [sp, #4]
    81e4:	e3401000 	movt	r1, #0
    81e8:	e3a0304c 	mov	r3, #76	; 0x4c
    81ec:	e59f0078 	ldr	r0, [pc, #120]	; 826c <get_key_srv_query_ekb_key+0xf8>
    81f0:	eb001d92 	bl	f840 <fprintf>
	return transceive_get_key_srv_cmd_msg(session, msg);
}
    81f4:	e1a00004 	mov	r0, r4
    81f8:	e28dd038 	add	sp, sp, #56	; 0x38
    81fc:	e8bd8070 	pop	{r4, r5, r6, pc}
	rc = wait(session, &uevt, INFINITE_TIME);
    8200:	e3e02000 	mvn	r2, #0
    8204:	e28d101c 	add	r1, sp, #28
    8208:	e1a00005 	mov	r0, r5
    820c:	eb000c23 	bl	b2a0 <wait>
	if (rc != NO_ERROR)
    8210:	e2504000 	subs	r4, r0, #0
    8214:	1affffeb 	bne	81c8 <get_key_srv_query_ekb_key+0x54>
	rc = get_msg(session, &ipc_info);
    8218:	e28d1014 	add	r1, sp, #20
    821c:	e1a00005 	mov	r0, r5
    8220:	eb000c24 	bl	b2b8 <get_msg>
	if (rc != NO_ERROR)
    8224:	e2504000 	subs	r4, r0, #0
    8228:	1affffe6 	bne	81c8 <get_key_srv_query_ekb_key+0x54>
	rc = read_msg(session, ipc_info.id, 0, &ipc_msg);
    822c:	e28d3028 	add	r3, sp, #40	; 0x28
    8230:	e1a02004 	mov	r2, r4
    8234:	e59d1018 	ldr	r1, [sp, #24]
    8238:	e1a00005 	mov	r0, r5
    823c:	eb000c20 	bl	b2c4 <read_msg>
	put_msg(session, ipc_info.id);
    8240:	e59d1018 	ldr	r1, [sp, #24]
	rc = read_msg(session, ipc_info.id, 0, &ipc_msg);
    8244:	e1a06000 	mov	r6, r0
	put_msg(session, ipc_info.id);
    8248:	e1a00005 	mov	r0, r5
    824c:	eb000c1f 	bl	b2d0 <put_msg>
	if (rc < 0)
    8250:	e3560000 	cmp	r6, #0
    8254:	ba000002 	blt	8264 <get_key_srv_query_ekb_key+0xf0>
	if ((size_t)rc != sizeof(*msg)) {
    8258:	e3560024 	cmp	r6, #36	; 0x24
    825c:	1affffd8 	bne	81c4 <get_key_srv_query_ekb_key+0x50>
    8260:	eaffffe3 	b	81f4 <get_key_srv_query_ekb_key+0x80>
	if (rc < 0)
    8264:	e1a04006 	mov	r4, r6
    8268:	eaffffd6 	b	81c8 <get_key_srv_query_ekb_key+0x54>
    826c:	0001305c 	.word	0x0001305c

00008270 <get_key_srv_close>:

void get_key_srv_close(handle_t session)
{
	close(session);
    8270:	ea000c04 	b	b288 <close>

00008274 <_destroy_service>:
{
	return containerof(ev->cookie, struct tipc_srv_state, handler);
}

static void _destroy_service(struct tipc_srv_state *state)
{
    8274:	e92d4010 	push	{r4, lr}
	if (!state) {
    8278:	e2504000 	subs	r4, r0, #0
{
    827c:	e24dd008 	sub	sp, sp, #8
	if (!state) {
    8280:	0a00000f 	beq	82c4 <_destroy_service+0x50>
		TLOGI("non-null state expected\n");
		return;
	}

	/* Close port */
	if (state->port != INVALID_IPC_HANDLE) {
    8284:	e5940004 	ldr	r0, [r4, #4]
    8288:	e3700001 	cmn	r0, #1
    828c:	1a000006 	bne	82ac <_destroy_service+0x38>
		}
		state->port = INVALID_IPC_HANDLE;
	}

	/* Reset handler */
	state->service = NULL;
    8290:	e3a03000 	mov	r3, #0
    8294:	e5843000 	str	r3, [r4]
	state->handler.proc = NULL;
    8298:	e584300c 	str	r3, [r4, #12]
	state->handler.priv = NULL;
    829c:	e5843010 	str	r3, [r4, #16]
	state->priv = NULL;
    82a0:	e5843008 	str	r3, [r4, #8]
}
    82a4:	e28dd008 	add	sp, sp, #8
    82a8:	e8bd8010 	pop	{r4, pc}
		int rc = close(state->port);
    82ac:	eb000bf5 	bl	b288 <close>
		if (rc != NO_ERROR) {
    82b0:	e3500000 	cmp	r0, #0
    82b4:	1a00000b 	bne	82e8 <_destroy_service+0x74>
		state->port = INVALID_IPC_HANDLE;
    82b8:	e3e03000 	mvn	r3, #0
    82bc:	e5843004 	str	r3, [r4, #4]
    82c0:	eafffff2 	b	8290 <_destroy_service+0x1c>
		TLOGI("non-null state expected\n");
    82c4:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    82c8:	e300105c 	movw	r1, #92	; 0x5c
    82cc:	e3402000 	movt	r2, #0
    82d0:	e3401001 	movt	r1, #1
    82d4:	e3a0305d 	mov	r3, #93	; 0x5d
    82d8:	e59f0034 	ldr	r0, [pc, #52]	; 8314 <_destroy_service+0xa0>
}
    82dc:	e28dd008 	add	sp, sp, #8
    82e0:	e8bd4010 	pop	{r4, lr}
		TLOGI("non-null state expected\n");
    82e4:	ea001d55 	b	f840 <fprintf>
			TLOGI("Failed (%d) to close port %d\n",
    82e8:	e5943004 	ldr	r3, [r4, #4]
    82ec:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    82f0:	e3001080 	movw	r1, #128	; 0x80
    82f4:	e58d0000 	str	r0, [sp]
    82f8:	e3402000 	movt	r2, #0
    82fc:	e3401001 	movt	r1, #1
    8300:	e58d3004 	str	r3, [sp, #4]
    8304:	e3a03066 	mov	r3, #102	; 0x66
    8308:	e59f0004 	ldr	r0, [pc, #4]	; 8314 <_destroy_service+0xa0>
    830c:	eb001d4b 	bl	f840 <fprintf>
    8310:	eaffffe8 	b	82b8 <_destroy_service+0x44>
    8314:	0001305c 	.word	0x0001305c

00008318 <_create_service>:
 *  Create service
 */
static int _create_service(const struct tipc_srv *srv,
                           struct tipc_srv_state *state)
{
	if (!srv || !state) {
    8318:	e16f3f11 	clz	r3, r1
    831c:	e3500000 	cmp	r0, #0
    8320:	e1a032a3 	lsr	r3, r3, #5
{
    8324:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	if (!srv || !state) {
    8328:	03a05001 	moveq	r5, #1
    832c:	11a05003 	movne	r5, r3
{
    8330:	e24dd00c 	sub	sp, sp, #12
	if (!srv || !state) {
    8334:	e3550000 	cmp	r5, #0
    8338:	1a00002e 	bne	83f8 <_create_service+0xe0>
		TLOGI("null services specified\n");
		return ERR_INVALID_ARGS;
	}

	/* Create port */
	int rc = port_create(srv->name, srv->msg_num, srv->msg_size,
    833c:	e1c020d8 	ldrd	r2, [r0, #8]
    8340:	e1a04000 	mov	r4, r0
    8344:	e1a06001 	mov	r6, r1
    8348:	e1c000d0 	ldrd	r0, [r0]
    834c:	eb000bc4 	bl	b264 <port_create>
			     srv->port_flags);
	if (rc < 0) {
    8350:	e2507000 	subs	r7, r0, #0
    8354:	ba00000d 	blt	8390 <_create_service+0x78>
		return rc;
	}

	/* Setup port state  */
	state->port = (handle_t)rc;
	state->handler.proc = srv->port_handler;
    8358:	e5943010 	ldr	r3, [r4, #16]
	state->handler.priv = state;
	state->service = srv;
	state->priv = NULL;

	/* Attach handler to port handle */
	rc = set_cookie(state->port, &state->handler);
    835c:	e286100c 	add	r1, r6, #12
	state->port = (handle_t)rc;
    8360:	e5867004 	str	r7, [r6, #4]
	state->handler.priv = state;
    8364:	e5866010 	str	r6, [r6, #16]
	state->handler.proc = srv->port_handler;
    8368:	e586300c 	str	r3, [r6, #12]
	state->service = srv;
    836c:	e5864000 	str	r4, [r6]
	state->priv = NULL;
    8370:	e5865008 	str	r5, [r6, #8]
	rc = set_cookie(state->port, &state->handler);
    8374:	eb000bc6 	bl	b294 <set_cookie>
	if (rc < 0) {
    8378:	e2507000 	subs	r7, r0, #0
		TLOGI("Failed (%d) to set cookie on port %d\n",
		      rc, state->port);
		goto err_set_cookie;
	}

	return NO_ERROR;
    837c:	a1a07005 	movge	r7, r5
	if (rc < 0) {
    8380:	ba00000d 	blt	83bc <_create_service+0xa4>

err_set_cookie:
	_destroy_service(state);
	return rc;
}
    8384:	e1a00007 	mov	r0, r7
    8388:	e28dd00c 	add	sp, sp, #12
    838c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		TLOGI("Failed (%d) to create port\n", rc);
    8390:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8394:	e3001008 	movw	r1, #8
    8398:	e58d7000 	str	r7, [sp]
    839c:	e3402000 	movt	r2, #0
    83a0:	e3401001 	movt	r1, #1
    83a4:	e3a03081 	mov	r3, #129	; 0x81
    83a8:	e59f006c 	ldr	r0, [pc, #108]	; 841c <_create_service+0x104>
    83ac:	eb001d23 	bl	f840 <fprintf>
}
    83b0:	e1a00007 	mov	r0, r7
    83b4:	e28dd00c 	add	sp, sp, #12
    83b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		TLOGI("Failed (%d) to set cookie on port %d\n",
    83bc:	e5963004 	ldr	r3, [r6, #4]
    83c0:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    83c4:	e300102c 	movw	r1, #44	; 0x2c
    83c8:	e3402000 	movt	r2, #0
    83cc:	e3401001 	movt	r1, #1
    83d0:	e58d7000 	str	r7, [sp]
    83d4:	e58d3004 	str	r3, [sp, #4]
    83d8:	e3a03090 	mov	r3, #144	; 0x90
    83dc:	e59f0038 	ldr	r0, [pc, #56]	; 841c <_create_service+0x104>
    83e0:	eb001d16 	bl	f840 <fprintf>
	_destroy_service(state);
    83e4:	e1a00006 	mov	r0, r6
    83e8:	ebffffa1 	bl	8274 <_destroy_service>
}
    83ec:	e1a00007 	mov	r0, r7
    83f0:	e28dd00c 	add	sp, sp, #12
    83f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		TLOGI("null services specified\n");
    83f8:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    83fc:	e30f1fe4 	movw	r1, #65508	; 0xffe4
    8400:	e3402000 	movt	r2, #0
    8404:	e3401000 	movt	r1, #0
    8408:	e3a03079 	mov	r3, #121	; 0x79
    840c:	e59f0008 	ldr	r0, [pc, #8]	; 841c <_create_service+0x104>
    8410:	eb001d0a 	bl	f840 <fprintf>
		return ERR_INVALID_ARGS;
    8414:	e3e07007 	mvn	r7, #7
    8418:	eaffffd9 	b	8384 <_create_service+0x6c>
    841c:	0001305c 	.word	0x0001305c

00008420 <common_port_handler>:
 */
static bool handle_port_errors(const uevent_t *evt)
{
	if ((evt->event & IPC_HANDLE_POLL_ERROR) ||
	    (evt->event & IPC_HANDLE_POLL_HUP) ||
	    (evt->event & IPC_HANDLE_POLL_MSG) ||
    8420:	e5903004 	ldr	r3, [r0, #4]

/*
 *   Service port event handler
 */
static void common_port_handler(const uevent_t *evt)
{
    8424:	e92d4070 	push	{r4, r5, r6, lr}
    8428:	e1a04000 	mov	r4, r0
    842c:	e24dd018 	sub	sp, sp, #24
	if ((evt->event & IPC_HANDLE_POLL_ERROR) ||
    8430:	e313001e 	tst	r3, #30
    8434:	1a000003 	bne	8448 <common_port_handler+0x28>
	const struct tipc_srv *srv = get_srv_state(evt)->service;

	if (handle_port_errors(evt))
		return;

	if (evt->event & IPC_HANDLE_POLL_READY) {
    8438:	e3130001 	tst	r3, #1
    843c:	1a000017 	bne	84a0 <common_port_handler+0x80>
			free(chan_st);
			close(chan);
			return;
		}
	}
}
    8440:	e28dd018 	add	sp, sp, #24
    8444:	e8bd8070 	pop	{r4, r5, r6, pc}
		TLOGI("error event (0x%x) for port (%d)\n",
    8448:	e5900000 	ldr	r0, [r0]
    844c:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8450:	e30010c0 	movw	r1, #192	; 0xc0
    8454:	e58d3000 	str	r3, [sp]
    8458:	e3402000 	movt	r2, #0
    845c:	e300313d 	movw	r3, #317	; 0x13d
    8460:	e58d0004 	str	r0, [sp, #4]
    8464:	e3401001 	movt	r1, #1
    8468:	e59f0130 	ldr	r0, [pc, #304]	; 85a0 <common_port_handler+0x180>
    846c:	eb001cf3 	bl	f840 <fprintf>
		restart_service(get_srv_state(evt));
    8470:	e5943008 	ldr	r3, [r4, #8]
	if (!state) {
    8474:	e353000c 	cmp	r3, #12
	return containerof(ev->cookie, struct tipc_srv_state, handler);
    8478:	e243400c 	sub	r4, r3, #12
	if (!state) {
    847c:	0a00003f 	beq	8580 <common_port_handler+0x160>
	const struct tipc_srv *srv = state->service;
    8480:	e513500c 	ldr	r5, [r3, #-12]
	_destroy_service(state);
    8484:	e1a00004 	mov	r0, r4
    8488:	ebffff79 	bl	8274 <_destroy_service>
	return _create_service(srv, state);
    848c:	e1a01004 	mov	r1, r4
    8490:	e1a00005 	mov	r0, r5
    8494:	ebffff9f 	bl	8318 <_create_service>
}
    8498:	e28dd018 	add	sp, sp, #24
    849c:	e8bd8070 	pop	{r4, r5, r6, pc}
	const struct tipc_srv *srv = get_srv_state(evt)->service;
    84a0:	e5903008 	ldr	r3, [r0, #8]
		int rc = accept(evt->handle, &peer_uuid);
    84a4:	e28d1008 	add	r1, sp, #8
    84a8:	e5900000 	ldr	r0, [r0]
	const struct tipc_srv *srv = get_srv_state(evt)->service;
    84ac:	e513600c 	ldr	r6, [r3, #-12]
		int rc = accept(evt->handle, &peer_uuid);
    84b0:	eb000b71 	bl	b27c <accept>
		if (rc < 0) {
    84b4:	e2505000 	subs	r5, r0, #0
    84b8:	ba000019 	blt	8524 <common_port_handler+0x104>
		chan_st = malloc(sizeof(struct chan_state));
    84bc:	e3a00008 	mov	r0, #8
    84c0:	eb00031c 	bl	9138 <malloc>
		if (!chan_st) {
    84c4:	e2504000 	subs	r4, r0, #0
    84c8:	0a000020 	beq	8550 <common_port_handler+0x130>
		chan_st->handler.proc = srv->chan_handler;
    84cc:	e5963014 	ldr	r3, [r6, #20]
		rc = set_cookie(chan, &chan_st->handler);
    84d0:	e1a01004 	mov	r1, r4
		chan_st->handler.priv = chan_st;
    84d4:	e5844004 	str	r4, [r4, #4]
		rc = set_cookie(chan, &chan_st->handler);
    84d8:	e1a00005 	mov	r0, r5
		chan_st->handler.proc = srv->chan_handler;
    84dc:	e5843000 	str	r3, [r4]
		rc = set_cookie(chan, &chan_st->handler);
    84e0:	eb000b6b 	bl	b294 <set_cookie>
		if (rc) {
    84e4:	e3500000 	cmp	r0, #0
    84e8:	0affffd4 	beq	8440 <common_port_handler+0x20>
			TLOGI("failed (%d) to set_cookie on chan %d\n",
    84ec:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    84f0:	e300114c 	movw	r1, #332	; 0x14c
    84f4:	e3402000 	movt	r2, #0
    84f8:	e58d0000 	str	r0, [sp]
    84fc:	e3401001 	movt	r1, #1
    8500:	e300316f 	movw	r3, #367	; 0x16f
    8504:	e58d5004 	str	r5, [sp, #4]
    8508:	e59f0090 	ldr	r0, [pc, #144]	; 85a0 <common_port_handler+0x180>
    850c:	eb001ccb 	bl	f840 <fprintf>
			free(chan_st);
    8510:	e1a00004 	mov	r0, r4
    8514:	eb0008dd 	bl	a890 <free>
			close(chan);
    8518:	e1a00005 	mov	r0, r5
    851c:	eb000b59 	bl	b288 <close>
			return;
    8520:	eaffffc6 	b	8440 <common_port_handler+0x20>
			TLOGI("failed (%d) to accept on port %d\n",
    8524:	e5943000 	ldr	r3, [r4]
    8528:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    852c:	e30010ec 	movw	r1, #236	; 0xec
    8530:	e58d5000 	str	r5, [sp]
    8534:	e3402000 	movt	r2, #0
    8538:	e3401001 	movt	r1, #1
    853c:	e58d3004 	str	r3, [sp, #4]
    8540:	e300315a 	movw	r3, #346	; 0x15a
    8544:	e59f0054 	ldr	r0, [pc, #84]	; 85a0 <common_port_handler+0x180>
    8548:	eb001cbc 	bl	f840 <fprintf>
			return;
    854c:	eaffffbb 	b	8440 <common_port_handler+0x20>
			TLOGI("failed (%d) to callocate state for chan %d\n",
    8550:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8554:	e3001118 	movw	r1, #280	; 0x118
    8558:	e58d5004 	str	r5, [sp, #4]
    855c:	e3402000 	movt	r2, #0
    8560:	e58d5000 	str	r5, [sp]
    8564:	e3401001 	movt	r1, #1
    8568:	e3003162 	movw	r3, #354	; 0x162
    856c:	e59f002c 	ldr	r0, [pc, #44]	; 85a0 <common_port_handler+0x180>
    8570:	eb001cb2 	bl	f840 <fprintf>
			close(chan);
    8574:	e1a00005 	mov	r0, r5
    8578:	eb000b42 	bl	b288 <close>
			return;
    857c:	eaffffaf 	b	8440 <common_port_handler+0x20>
		TLOGI("non-null state expected\n");
    8580:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8584:	e300105c 	movw	r1, #92	; 0x5c
    8588:	e3402000 	movt	r2, #0
    858c:	e3401001 	movt	r1, #1
    8590:	e3a03f4a 	mov	r3, #296	; 0x128
    8594:	e59f0004 	ldr	r0, [pc, #4]	; 85a0 <common_port_handler+0x180>
    8598:	eb001ca8 	bl	f840 <fprintf>
    859c:	eaffffa7 	b	8440 <common_port_handler+0x20>
    85a0:	0001305c 	.word	0x0001305c

000085a4 <luks_srv_chan_handler>:
	    || (evt->event & IPC_HANDLE_POLL_HUP))
    85a4:	e5903004 	ldr	r3, [r0, #4]
{
    85a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    85ac:	e1a04000 	mov	r4, r0
    85b0:	e24dd074 	sub	sp, sp, #116	; 0x74
	if ((evt->event & IPC_HANDLE_POLL_ERROR)
    85b4:	e3130006 	tst	r3, #6
    85b8:	1a000040 	bne	86c0 <luks_srv_chan_handler+0x11c>
	if (evt->event & (IPC_HANDLE_POLL_MSG)) {
    85bc:	e3130008 	tst	r3, #8
    85c0:	1a000001 	bne	85cc <luks_srv_chan_handler+0x28>
}
    85c4:	e28dd074 	add	sp, sp, #116	; 0x74
    85c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	rc = get_msg(evt->handle, &msg_info);
    85cc:	e28d1008 	add	r1, sp, #8
    85d0:	e5900000 	ldr	r0, [r0]
    85d4:	eb000b37 	bl	b2b8 <get_msg>
	if (rc == ERR_NO_MSG)
    85d8:	e3700004 	cmn	r0, #4
	rc = get_msg(evt->handle, &msg_info);
    85dc:	e1a05000 	mov	r5, r0
	if (rc == ERR_NO_MSG)
    85e0:	0a00002b 	beq	8694 <luks_srv_chan_handler+0xf0>
	if (rc != NO_ERROR) {
    85e4:	e3500000 	cmp	r0, #0
    85e8:	e5940000 	ldr	r0, [r4]
    85ec:	1a000039 	bne	86d8 <luks_srv_chan_handler+0x134>
	iovec_t iov = {
    85f0:	e28d2034 	add	r2, sp, #52	; 0x34
	msg.num_iov = 1;
    85f4:	e3a01001 	mov	r1, #1
	iovec_t iov = {
    85f8:	e3a0e03c 	mov	lr, #60	; 0x3c
	msg.iov = &iov;
    85fc:	e28dc010 	add	ip, sp, #16
	iovec_t iov = {
    8600:	e58d2010 	str	r2, [sp, #16]
	rc = read_msg(evt->handle, msg_info.id, 0, &msg);
    8604:	e28d3024 	add	r3, sp, #36	; 0x24
	msg.num_iov = 1;
    8608:	e58d1024 	str	r1, [sp, #36]	; 0x24
	rc = read_msg(evt->handle, msg_info.id, 0, &msg);
    860c:	e1a02005 	mov	r2, r5
    8610:	e59d100c 	ldr	r1, [sp, #12]
	msg.num_handles = 0;
    8614:	e58d502c 	str	r5, [sp, #44]	; 0x2c
	msg.handles  = NULL;
    8618:	e58d5030 	str	r5, [sp, #48]	; 0x30
	iovec_t iov = {
    861c:	e58de014 	str	lr, [sp, #20]
	msg.iov = &iov;
    8620:	e58dc028 	str	ip, [sp, #40]	; 0x28
	rc = read_msg(evt->handle, msg_info.id, 0, &msg);
    8624:	eb000b26 	bl	b2c4 <read_msg>
	if (rc < 0) {
    8628:	e3500000 	cmp	r0, #0
    862c:	ba000052 	blt	877c <luks_srv_chan_handler+0x1d8>
	luks_srv_process_req(msg.iov);
    8630:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    8634:	eb000196 	bl	8c94 <luks_srv_process_req>
	rc = send_msg(evt->handle, &msg);
    8638:	e28d1024 	add	r1, sp, #36	; 0x24
    863c:	e5940000 	ldr	r0, [r4]
    8640:	eb000b25 	bl	b2dc <send_msg>
	if (rc == ERR_NOT_ENOUGH_BUFFER)
    8644:	e3700009 	cmn	r0, #9
	rc = send_msg(evt->handle, &msg);
    8648:	e1a06000 	mov	r6, r0
	if (rc == ERR_NOT_ENOUGH_BUFFER)
    864c:	0a00002b 	beq	8700 <luks_srv_chan_handler+0x15c>
	if (rc < 0) {
    8650:	e3560000 	cmp	r6, #0
    8654:	e5940000 	ldr	r0, [r4]
    8658:	ba00003d 	blt	8754 <luks_srv_chan_handler+0x1b0>
	rc = put_msg(evt->handle, msg_info.id);
    865c:	e59d100c 	ldr	r1, [sp, #12]
    8660:	eb000b1a 	bl	b2d0 <put_msg>
	if (rc != NO_ERROR) {
    8664:	e3500000 	cmp	r0, #0
    8668:	0affffd5 	beq	85c4 <luks_srv_chan_handler+0x20>
		TLOGI("failed (%d) to put_msg for chan (%d)\n",
    866c:	e5943000 	ldr	r3, [r4]
    8670:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8674:	e3001390 	movw	r1, #912	; 0x390
    8678:	e58d0000 	str	r0, [sp]
    867c:	e3402000 	movt	r2, #0
    8680:	e3401001 	movt	r1, #1
    8684:	e58d3004 	str	r3, [sp, #4]
    8688:	e3003103 	movw	r3, #259	; 0x103
    868c:	e59f0148 	ldr	r0, [pc, #328]	; 87dc <luks_srv_chan_handler+0x238>
    8690:	eb001c6a 	bl	f840 <fprintf>
			TLOGI("error event (0x%x) for chan (%d)\n",
    8694:	e5943000 	ldr	r3, [r4]
    8698:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    869c:	e5940004 	ldr	r0, [r4, #4]
    86a0:	e30013c0 	movw	r1, #960	; 0x3c0
    86a4:	e3402000 	movt	r2, #0
    86a8:	e3401001 	movt	r1, #1
    86ac:	e58d3004 	str	r3, [sp, #4]
    86b0:	e3a03f46 	mov	r3, #280	; 0x118
    86b4:	e58d0000 	str	r0, [sp]
    86b8:	e59f011c 	ldr	r0, [pc, #284]	; 87dc <luks_srv_chan_handler+0x238>
    86bc:	eb001c5f 	bl	f840 <fprintf>
	free(chan_st);
    86c0:	e5940008 	ldr	r0, [r4, #8]
    86c4:	eb000871 	bl	a890 <free>
	close(evt->handle);
    86c8:	e5940000 	ldr	r0, [r4]
    86cc:	eb000aed 	bl	b288 <close>
}
    86d0:	e28dd074 	add	sp, sp, #116	; 0x74
    86d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		TLOGI("failed (%d) to get_msg for chan (%d)\n",
    86d8:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    86dc:	e30012c8 	movw	r1, #712	; 0x2c8
    86e0:	e58d0004 	str	r0, [sp, #4]
    86e4:	e3402000 	movt	r2, #0
    86e8:	e58d5000 	str	r5, [sp]
    86ec:	e3401001 	movt	r1, #1
    86f0:	e3a030d8 	mov	r3, #216	; 0xd8
    86f4:	e59f00e0 	ldr	r0, [pc, #224]	; 87dc <luks_srv_chan_handler+0x238>
    86f8:	eb001c50 	bl	f840 <fprintf>
    86fc:	eaffffe4 	b	8694 <luks_srv_chan_handler+0xf0>
		rc = wait_to_send(evt->handle, &msg);
    8700:	e5947000 	ldr	r7, [r4]
	rc = wait(session, &evt, INFINITE_TIME);
    8704:	e3e02000 	mvn	r2, #0
    8708:	e28d1018 	add	r1, sp, #24
	struct uevent evt = UEVENT_INITIAL_VALUE(evt);
    870c:	e58d5018 	str	r5, [sp, #24]
    8710:	e58d501c 	str	r5, [sp, #28]
	rc = wait(session, &evt, INFINITE_TIME);
    8714:	e1a00007 	mov	r0, r7
	struct uevent evt = UEVENT_INITIAL_VALUE(evt);
    8718:	e58d5020 	str	r5, [sp, #32]
	rc = wait(session, &evt, INFINITE_TIME);
    871c:	eb000adf 	bl	b2a0 <wait>
	if (rc < 0) {
    8720:	e2506000 	subs	r6, r0, #0
    8724:	ba000024 	blt	87bc <luks_srv_chan_handler+0x218>
	if (evt.event & IPC_HANDLE_POLL_SEND_UNBLOCKED)
    8728:	e59d301c 	ldr	r3, [sp, #28]
    872c:	e3130010 	tst	r3, #16
    8730:	1a00001c 	bne	87a8 <luks_srv_chan_handler+0x204>
	if (evt.event & IPC_HANDLE_POLL_MSG)
    8734:	e3130008 	tst	r3, #8
    8738:	15940000 	ldrne	r0, [r4]
		return ERR_BUSY;
    873c:	13e06020 	mvnne	r6, #32
	if (evt.event & IPC_HANDLE_POLL_MSG)
    8740:	1a000003 	bne	8754 <luks_srv_chan_handler+0x1b0>
	if (evt.event & IPC_HANDLE_POLL_HUP)
    8744:	e3130004 	tst	r3, #4
    8748:	15940000 	ldrne	r0, [r4]
		return ERR_CHANNEL_CLOSED;
    874c:	13e0600e 	mvnne	r6, #14
	if (evt.event & IPC_HANDLE_POLL_HUP)
    8750:	0affffbe 	beq	8650 <luks_srv_chan_handler+0xac>
		TLOGI("failed (%d) to send_msg for chan (%d)\n",
    8754:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8758:	e3001360 	movw	r1, #864	; 0x360
    875c:	e58d0004 	str	r0, [sp, #4]
    8760:	e3402000 	movt	r2, #0
    8764:	e58d6000 	str	r6, [sp]
    8768:	e3401001 	movt	r1, #1
    876c:	e3a030fb 	mov	r3, #251	; 0xfb
    8770:	e59f0064 	ldr	r0, [pc, #100]	; 87dc <luks_srv_chan_handler+0x238>
    8774:	eb001c31 	bl	f840 <fprintf>
    8778:	eaffffc5 	b	8694 <luks_srv_chan_handler+0xf0>
		TLOGI("failed (%d) to read_msg for chan (%d)\n",
    877c:	e5943000 	ldr	r3, [r4]
    8780:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8784:	e30012f8 	movw	r1, #760	; 0x2f8
    8788:	e58d0000 	str	r0, [sp]
    878c:	e3402000 	movt	r2, #0
    8790:	e3401001 	movt	r1, #1
    8794:	e58d3004 	str	r3, [sp, #4]
    8798:	e3a030ee 	mov	r3, #238	; 0xee
    879c:	e59f0038 	ldr	r0, [pc, #56]	; 87dc <luks_srv_chan_handler+0x238>
    87a0:	eb001c26 	bl	f840 <fprintf>
    87a4:	eaffffba 	b	8694 <luks_srv_chan_handler+0xf0>
		return send_msg(session, msg);
    87a8:	e28d1024 	add	r1, sp, #36	; 0x24
    87ac:	e1a00007 	mov	r0, r7
    87b0:	eb000ac9 	bl	b2dc <send_msg>
    87b4:	e1a06000 	mov	r6, r0
    87b8:	eaffffa4 	b	8650 <luks_srv_chan_handler+0xac>
		TLOGE("failed to wait for outgoing queue to free up\n");
    87bc:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    87c0:	e3001328 	movw	r1, #808	; 0x328
    87c4:	e3402000 	movt	r2, #0
    87c8:	e3401001 	movt	r1, #1
    87cc:	e3a030bb 	mov	r3, #187	; 0xbb
    87d0:	e59f0004 	ldr	r0, [pc, #4]	; 87dc <luks_srv_chan_handler+0x238>
    87d4:	eb001c19 	bl	f840 <fprintf>
    87d8:	eaffff9c 	b	8650 <luks_srv_chan_handler+0xac>
    87dc:	0001305c 	.word	0x0001305c

000087e0 <init_luks_srv_ipc>:
	TLOGI ("Init luks-srv IPC services!!\n");
    87e0:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    87e4:	e300122c 	movw	r1, #556	; 0x22c
{
    87e8:	e92d4010 	push	{r4, lr}
	TLOGI ("Init luks-srv IPC services!!\n");
    87ec:	e3402000 	movt	r2, #0
{
    87f0:	e24dd008 	sub	sp, sp, #8
	TLOGI ("Init luks-srv IPC services!!\n");
    87f4:	e3401001 	movt	r1, #1
    87f8:	e3a0309d 	mov	r3, #157	; 0x9d
    87fc:	e59f0058 	ldr	r0, [pc, #88]	; 885c <init_luks_srv_ipc+0x7c>
    8800:	eb001c0e 	bl	f840 <fprintf>
		int rc = _create_service(&_services[i], &_srv_states[i]);
    8804:	e303101c 	movw	r1, #12316	; 0x301c
    8808:	e30000a8 	movw	r0, #168	; 0xa8
    880c:	e3401001 	movt	r1, #1
    8810:	e3400001 	movt	r0, #1
    8814:	ebfffebf 	bl	8318 <_create_service>
		if (rc < 0) {
    8818:	e2504000 	subs	r4, r0, #0
	return 0;
    881c:	a3a04000 	movge	r4, #0
		if (rc < 0) {
    8820:	aa00000a 	bge	8850 <init_luks_srv_ipc+0x70>
			TLOGI("Failed (%d) to create service %s\n",
    8824:	e3003280 	movw	r3, #640	; 0x280
    8828:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    882c:	e3403001 	movt	r3, #1
    8830:	e3001254 	movw	r1, #596	; 0x254
    8834:	e58d3004 	str	r3, [sp, #4]
    8838:	e3402000 	movt	r2, #0
    883c:	e58d4000 	str	r4, [sp]
    8840:	e3401001 	movt	r1, #1
    8844:	e3a030a3 	mov	r3, #163	; 0xa3
    8848:	e59f000c 	ldr	r0, [pc, #12]	; 885c <init_luks_srv_ipc+0x7c>
    884c:	eb001bfb 	bl	f840 <fprintf>
}
    8850:	e1a00004 	mov	r0, r4
    8854:	e28dd008 	add	sp, sp, #8
    8858:	e8bd8010 	pop	{r4, pc}
    885c:	0001305c 	.word	0x0001305c

00008860 <kill_luks_srv_ipc>:
	TLOGI ("Terminating luks-srv IPC services.\n");
    8860:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8864:	e300129c 	movw	r1, #668	; 0x29c
{
    8868:	e92d4010 	push	{r4, lr}
	TLOGI ("Terminating luks-srv IPC services.\n");
    886c:	e3402000 	movt	r2, #0
    8870:	e3401001 	movt	r1, #1
    8874:	e3a030ad 	mov	r3, #173	; 0xad
    8878:	e59f0010 	ldr	r0, [pc, #16]	; 8890 <kill_luks_srv_ipc+0x30>
    887c:	eb001bef 	bl	f840 <fprintf>
		_destroy_service(&_srv_states[i]);
    8880:	e303001c 	movw	r0, #12316	; 0x301c
}
    8884:	e8bd4010 	pop	{r4, lr}
		_destroy_service(&_srv_states[i]);
    8888:	e3400001 	movt	r0, #1
    888c:	eafffe78 	b	8274 <_destroy_service>
    8890:	0001305c 	.word	0x0001305c

00008894 <dispatch_luks_srv_ipc_event>:

void dispatch_luks_srv_ipc_event(const uevent_t *evt)
{
    8894:	e92d4010 	push	{r4, lr}
	assert(evt);
    8898:	e2504000 	subs	r4, r0, #0
{
    889c:	e24dd008 	sub	sp, sp, #8
	assert(evt);
    88a0:	0a00002f 	beq	8964 <dispatch_luks_srv_ipc_event+0xd0>

	if (evt->event == IPC_HANDLE_POLL_NONE) {
    88a4:	e5943004 	ldr	r3, [r4, #4]
    88a8:	e3530000 	cmp	r3, #0
    88ac:	0a00000b 	beq	88e0 <dispatch_luks_srv_ipc_event+0x4c>
		/* Not really an event, do nothing */
		TLOGI("got an empty event\n");
		return;
	}

	if (evt->handle == INVALID_IPC_HANDLE) {
    88b0:	e594c000 	ldr	ip, [r4]
    88b4:	e37c0001 	cmn	ip, #1
    88b8:	0a00001e 	beq	8938 <dispatch_luks_srv_ipc_event+0xa4>
		      evt->event, evt->handle);
		return;
	}

	/* Check if we have handler */
	struct tipc_event_handler *handler = evt->cookie;
    88bc:	e5942008 	ldr	r2, [r4, #8]
	if (handler && handler->proc) {
    88c0:	e3520000 	cmp	r2, #0
    88c4:	0a00000e 	beq	8904 <dispatch_luks_srv_ipc_event+0x70>
    88c8:	e5922000 	ldr	r2, [r2]
    88cc:	e3520000 	cmp	r2, #0
    88d0:	0a00000b 	beq	8904 <dispatch_luks_srv_ipc_event+0x70>
	TLOGI("no handler for event (0x%x) with handle %d\n",
	      evt->event, evt->handle);
	close(evt->handle);

	return;
}
    88d4:	e28dd008 	add	sp, sp, #8
    88d8:	e8bd4010 	pop	{r4, lr}
		handler->proc(evt);
    88dc:	e12fff12 	bx	r2
		TLOGI("got an empty event\n");
    88e0:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    88e4:	e30011a4 	movw	r1, #420	; 0x1a4
    88e8:	e3402000 	movt	r2, #0
    88ec:	e3401001 	movt	r1, #1
    88f0:	e300317d 	movw	r3, #381	; 0x17d
    88f4:	e59f0088 	ldr	r0, [pc, #136]	; 8984 <dispatch_luks_srv_ipc_event+0xf0>
}
    88f8:	e28dd008 	add	sp, sp, #8
    88fc:	e8bd4010 	pop	{r4, lr}
		TLOGI("got an empty event\n");
    8900:	ea001bce 	b	f840 <fprintf>
	TLOGI("no handler for event (0x%x) with handle %d\n",
    8904:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8908:	e30011f8 	movw	r1, #504	; 0x1f8
    890c:	e58d3000 	str	r3, [sp]
    8910:	e3402000 	movt	r2, #0
    8914:	e58dc004 	str	ip, [sp, #4]
    8918:	e3401001 	movt	r1, #1
    891c:	e3003192 	movw	r3, #402	; 0x192
    8920:	e59f005c 	ldr	r0, [pc, #92]	; 8984 <dispatch_luks_srv_ipc_event+0xf0>
    8924:	eb001bc5 	bl	f840 <fprintf>
	close(evt->handle);
    8928:	e5940000 	ldr	r0, [r4]
}
    892c:	e28dd008 	add	sp, sp, #8
    8930:	e8bd4010 	pop	{r4, lr}
	close(evt->handle);
    8934:	ea000a53 	b	b288 <close>
		TLOGI("got an event (0x%x) with invalid handle (%d)",
    8938:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    893c:	e30011c0 	movw	r1, #448	; 0x1c0
    8940:	e58d3000 	str	r3, [sp]
    8944:	e3402000 	movt	r2, #0
    8948:	e58dc004 	str	ip, [sp, #4]
    894c:	e3401001 	movt	r1, #1
    8950:	e3a03f61 	mov	r3, #388	; 0x184
    8954:	e59f0028 	ldr	r0, [pc, #40]	; 8984 <dispatch_luks_srv_ipc_event+0xf0>
    8958:	eb001bb8 	bl	f840 <fprintf>
}
    895c:	e28dd008 	add	sp, sp, #8
    8960:	e8bd8010 	pop	{r4, pc}
	assert(evt);
    8964:	e300317c 	movw	r3, #380	; 0x17c
    8968:	e30f2fc8 	movw	r2, #65480	; 0xffc8
    896c:	e3000180 	movw	r0, #384	; 0x180
    8970:	e3403001 	movt	r3, #1
    8974:	e3402000 	movt	r2, #0
    8978:	e3400001 	movt	r0, #1
    897c:	e3001179 	movw	r1, #377	; 0x179
    8980:	eb0000f2 	bl	8d50 <__assert2>
    8984:	0001305c 	.word	0x0001305c

00008988 <nist_sp_800_108_with_cmac>:
 * @return NO_ERROR if successful.
 */
static int nist_sp_800_108_with_cmac(uint8_t *key, char const *context,
				     char const *label,
				     uint8_t *out_dk)
{
    8988:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 *  Regarding to NIST-SP-800-108
	 *  message = counter || label || 0 || context
	 *
	 *  A || B = The concatenation of binary strings A and B.
	 */
	msg_len = (context != NULL ? strnlen(context, LUKS_SRV_CONTEXT_STR_LEN) : 0) +
    898c:	e2518000 	subs	r8, r1, #0
{
    8990:	e24dd01c 	sub	sp, sp, #28
	uint8_t counter[] = { 1 }, zero_byte[] = { 0 };
    8994:	e3a06001 	mov	r6, #1
    8998:	e3a01000 	mov	r1, #0
{
    899c:	e1a09000 	mov	r9, r0
    89a0:	e1a05002 	mov	r5, r2
    89a4:	e1a0a003 	mov	sl, r3
	uint8_t counter[] = { 1 }, zero_byte[] = { 0 };
    89a8:	e5cd600c 	strb	r6, [sp, #12]
    89ac:	e5cd1010 	strb	r1, [sp, #16]
	msg_len = (context != NULL ? strnlen(context, LUKS_SRV_CONTEXT_STR_LEN) : 0) +
    89b0:	0a000048 	beq	8ad8 <nist_sp_800_108_with_cmac+0x150>
    89b4:	e3a01028 	mov	r1, #40	; 0x28
    89b8:	e1a00008 	mov	r0, r8
    89bc:	eb001c1e 	bl	fa3c <strnlen>
    89c0:	e1a04000 	mov	r4, r0
		  (label != NULL ? strlen(label) : 0) + 2;
    89c4:	e1a00005 	mov	r0, r5
    89c8:	eb001c0f 	bl	fa0c <strlen>
	msg_len = (context != NULL ? strnlen(context, LUKS_SRV_CONTEXT_STR_LEN) : 0) +
    89cc:	e0804004 	add	r4, r0, r4
		  (label != NULL ? strlen(label) : 0) + 2;
    89d0:	e2844002 	add	r4, r4, #2
	message = malloc(msg_len);
    89d4:	e1a00004 	mov	r0, r4
    89d8:	eb0001d6 	bl	9138 <malloc>
	if (message == NULL) {
    89dc:	e2507000 	subs	r7, r0, #0
    89e0:	1a00000b 	bne	8a14 <nist_sp_800_108_with_cmac+0x8c>
		TLOGE("%s: malloc failed.\n", __func__);
    89e4:	e30033ec 	movw	r3, #1004	; 0x3ec
    89e8:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    89ec:	e3403001 	movt	r3, #1
    89f0:	e30014a4 	movw	r1, #1188	; 0x4a4
    89f4:	e58d3000 	str	r3, [sp]
    89f8:	e3402000 	movt	r2, #0
    89fc:	e3401001 	movt	r1, #1
    8a00:	e3a03046 	mov	r3, #70	; 0x46
    8a04:	e59f0164 	ldr	r0, [pc, #356]	; 8b70 <nist_sp_800_108_with_cmac+0x1e8>
		return ERR_NO_MEMORY;
    8a08:	e3e05004 	mvn	r5, #4
		TLOGE("%s: malloc failed.\n", __func__);
    8a0c:	eb001b8b 	bl	f840 <fprintf>
		return ERR_NO_MEMORY;
    8a10:	ea00002d 	b	8acc <nist_sp_800_108_with_cmac+0x144>
	}

	/* Concatenate the messages */
	mptr = message;
	memcpy(mptr , counter, sizeof(counter));
    8a14:	e1a02006 	mov	r2, r6
    8a18:	e28d100c 	add	r1, sp, #12
    8a1c:	eb001b96 	bl	f87c <memcpy>
	mptr++;
    8a20:	e287b001 	add	fp, r7, #1
	if (label != NULL) {
		memcpy(mptr, label, strlen(label));
    8a24:	e1a00005 	mov	r0, r5
    8a28:	eb001bf7 	bl	fa0c <strlen>
    8a2c:	e1a01005 	mov	r1, r5
    8a30:	e1a02000 	mov	r2, r0
    8a34:	e1a0000b 	mov	r0, fp
    8a38:	eb001b8f 	bl	f87c <memcpy>
		mptr += strlen(label);
    8a3c:	e1a00005 	mov	r0, r5
    8a40:	eb001bf1 	bl	fa0c <strlen>
    8a44:	e08bb000 	add	fp, fp, r0
	}
	memcpy(mptr, zero_byte, sizeof(zero_byte));
    8a48:	e1a02006 	mov	r2, r6
    8a4c:	e28d1010 	add	r1, sp, #16
    8a50:	e1a0000b 	mov	r0, fp
    8a54:	eb001b88 	bl	f87c <memcpy>
	mptr++;
	if (context != NULL)
		memcpy(mptr, context, strlen(context));
    8a58:	e1a00008 	mov	r0, r8
    8a5c:	eb001bea 	bl	fa0c <strlen>
    8a60:	e1a01008 	mov	r1, r8
    8a64:	e1a02000 	mov	r2, r0
    8a68:	e28b0001 	add	r0, fp, #1
    8a6c:	eb001b82 	bl	f87c <memcpy>

	/* AES-CMAC */
	cmac = CMAC_CTX_new();
    8a70:	eb000ea6 	bl	c510 <CMAC_CTX_new>
	if (cmac == NULL) {
    8a74:	e2506000 	subs	r6, r0, #0
    8a78:	0a000030 	beq	8b40 <nist_sp_800_108_with_cmac+0x1b8>
		TLOGE("%s: CMAC_CTX_new failed.\n", __func__);
		rc = ERR_NO_MEMORY;
		goto kdf_error;
	}

	CMAC_Init(cmac, key, AES_KEY_128_SIZE, EVP_aes_128_cbc(), NULL);
    8a7c:	e3a05000 	mov	r5, #0
    8a80:	eb001139 	bl	cf6c <EVP_aes_128_cbc>
    8a84:	e1a01009 	mov	r1, r9
    8a88:	e1a03000 	mov	r3, r0
    8a8c:	e3a02010 	mov	r2, #16
    8a90:	e58d5000 	str	r5, [sp]
    8a94:	e1a00006 	mov	r0, r6
    8a98:	eb000edd 	bl	c614 <CMAC_Init>
	CMAC_Update(cmac, message, msg_len);
    8a9c:	e1a02004 	mov	r2, r4
    8aa0:	e1a01007 	mov	r1, r7
    8aa4:	e1a00006 	mov	r0, r6
    8aa8:	eb000f4d 	bl	c7e4 <CMAC_Update>
	CMAC_Final(cmac, out_dk, &cmact_len);
    8aac:	e1a0100a 	mov	r1, sl
    8ab0:	e28d2014 	add	r2, sp, #20
    8ab4:	e1a00006 	mov	r0, r6
    8ab8:	eb000f90 	bl	c900 <CMAC_Final>

	CMAC_CTX_free(cmac);
    8abc:	e1a00006 	mov	r0, r6
    8ac0:	eb000ec7 	bl	c5e4 <CMAC_CTX_free>

kdf_error:
	free(message);
    8ac4:	e1a00007 	mov	r0, r7
    8ac8:	eb000770 	bl	a890 <free>
	return rc;
}
    8acc:	e1a00005 	mov	r0, r5
    8ad0:	e28dd01c 	add	sp, sp, #28
    8ad4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		  (label != NULL ? strlen(label) : 0) + 2;
    8ad8:	e1a00002 	mov	r0, r2
    8adc:	eb001bca 	bl	fa0c <strlen>
    8ae0:	e2804002 	add	r4, r0, #2
	message = malloc(msg_len);
    8ae4:	e1a00004 	mov	r0, r4
    8ae8:	eb000192 	bl	9138 <malloc>
	if (message == NULL) {
    8aec:	e2507000 	subs	r7, r0, #0
    8af0:	0affffbb 	beq	89e4 <nist_sp_800_108_with_cmac+0x5c>
	memcpy(mptr , counter, sizeof(counter));
    8af4:	e1a02006 	mov	r2, r6
    8af8:	e28d100c 	add	r1, sp, #12
    8afc:	eb001b5e 	bl	f87c <memcpy>
	mptr++;
    8b00:	e2878001 	add	r8, r7, #1
		memcpy(mptr, label, strlen(label));
    8b04:	e1a00005 	mov	r0, r5
    8b08:	eb001bbf 	bl	fa0c <strlen>
    8b0c:	e1a01005 	mov	r1, r5
    8b10:	e1a02000 	mov	r2, r0
    8b14:	e1a00008 	mov	r0, r8
    8b18:	eb001b57 	bl	f87c <memcpy>
		mptr += strlen(label);
    8b1c:	e1a00005 	mov	r0, r5
    8b20:	eb001bb9 	bl	fa0c <strlen>
	memcpy(mptr, zero_byte, sizeof(zero_byte));
    8b24:	e1a02006 	mov	r2, r6
    8b28:	e28d1010 	add	r1, sp, #16
    8b2c:	e0880000 	add	r0, r8, r0
    8b30:	eb001b51 	bl	f87c <memcpy>
	cmac = CMAC_CTX_new();
    8b34:	eb000e75 	bl	c510 <CMAC_CTX_new>
	if (cmac == NULL) {
    8b38:	e2506000 	subs	r6, r0, #0
    8b3c:	1affffce 	bne	8a7c <nist_sp_800_108_with_cmac+0xf4>
		TLOGE("%s: CMAC_CTX_new failed.\n", __func__);
    8b40:	e30033ec 	movw	r3, #1004	; 0x3ec
    8b44:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8b48:	e3403001 	movt	r3, #1
    8b4c:	e30014c0 	movw	r1, #1216	; 0x4c0
    8b50:	e58d3000 	str	r3, [sp]
    8b54:	e3402000 	movt	r2, #0
    8b58:	e3401001 	movt	r1, #1
    8b5c:	e3a0305a 	mov	r3, #90	; 0x5a
    8b60:	e59f0008 	ldr	r0, [pc, #8]	; 8b70 <nist_sp_800_108_with_cmac+0x1e8>
		rc = ERR_NO_MEMORY;
    8b64:	e3e05004 	mvn	r5, #4
		TLOGE("%s: CMAC_CTX_new failed.\n", __func__);
    8b68:	eb001b34 	bl	f840 <fprintf>
		goto kdf_error;
    8b6c:	eaffffd4 	b	8ac4 <nist_sp_800_108_with_cmac+0x13c>
    8b70:	0001305c 	.word	0x0001305c

00008b74 <luks_srv_get_generic_pass>:

void luks_srv_get_generic_pass(luks_srv_cmd_msg_t *msg)
{
    8b74:	e1a01000 	mov	r1, r0
	nist_sp_800_108_with_cmac(luks_key_generic, msg->context_str,
    8b78:	e3002428 	movw	r2, #1064	; 0x428
    8b7c:	e30300c4 	movw	r0, #12484	; 0x30c4
    8b80:	e281302c 	add	r3, r1, #44	; 0x2c
    8b84:	e3402001 	movt	r2, #1
    8b88:	e2811004 	add	r1, r1, #4
    8b8c:	e3400001 	movt	r0, #1
    8b90:	eaffff7c 	b	8988 <nist_sp_800_108_with_cmac>

00008b94 <luks_srv_get_unique_pass>:
				  "luks-srv-passphrase-generic",
				  (uint8_t*)msg->output_passphrase);
}

void luks_srv_get_unique_pass(luks_srv_cmd_msg_t *msg)
{
    8b94:	e1a01000 	mov	r1, r0
	nist_sp_800_108_with_cmac(luks_key_unique, msg->context_str,
    8b98:	e3002444 	movw	r2, #1092	; 0x444
    8b9c:	e30300d4 	movw	r0, #12500	; 0x30d4
    8ba0:	e281302c 	add	r3, r1, #44	; 0x2c
    8ba4:	e3402001 	movt	r2, #1
    8ba8:	e2811004 	add	r1, r1, #4
    8bac:	e3400001 	movt	r0, #1
    8bb0:	eaffff74 	b	8988 <nist_sp_800_108_with_cmac>

00008bb4 <luks_srv_key_mgnt_processing>:
				  "luks-srv-passphrase-unique",
				  (uint8_t*)msg->output_passphrase);
}

int luks_srv_key_mgnt_processing(void)
{
    8bb4:	e92d4030 	push	{r4, r5, lr}
    8bb8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	int rc = NO_ERROR;
	handle_t session;
	get_key_srv_cmd_msg_t msg;
	char ecid[40];

	rc = get_key_srv_open();
    8bbc:	ebfffd68 	bl	8164 <get_key_srv_open>
	if (rc < 0)
    8bc0:	e2504000 	subs	r4, r0, #0
    8bc4:	aa00000d 	bge	8c00 <luks_srv_key_mgnt_processing+0x4c>
	rc = nist_sp_800_108_with_cmac(msg.key, "generic-key", "luks-srv-generic",
				       luks_key_generic);

err_key_mgnt:
	if (rc != NO_ERROR)
		TLOGE("%s: failed (%d)\n", __func__, rc);
    8bc8:	e3003408 	movw	r3, #1032	; 0x408
    8bcc:	e30f2fa0 	movw	r2, #65440	; 0xffa0
    8bd0:	e3403001 	movt	r3, #1
    8bd4:	e30f1fac 	movw	r1, #65452	; 0xffac
    8bd8:	e58d3000 	str	r3, [sp]
    8bdc:	e3402000 	movt	r2, #0
    8be0:	e58d4004 	str	r4, [sp, #4]
    8be4:	e3401000 	movt	r1, #0
    8be8:	e3a03097 	mov	r3, #151	; 0x97
    8bec:	e59f009c 	ldr	r0, [pc, #156]	; 8c90 <luks_srv_key_mgnt_processing+0xdc>
    8bf0:	eb001b12 	bl	f840 <fprintf>
	return rc;
}
    8bf4:	e1a00004 	mov	r0, r4
    8bf8:	e28dd05c 	add	sp, sp, #92	; 0x5c
    8bfc:	e8bd8030 	pop	{r4, r5, pc}
	rc = get_key_srv_query_ekb_key(session, &msg);
    8c00:	e28d100c 	add	r1, sp, #12
    8c04:	e1a05000 	mov	r5, r0
    8c08:	ebfffd59 	bl	8174 <get_key_srv_query_ekb_key>
	if (rc != 0)
    8c0c:	e2504000 	subs	r4, r0, #0
    8c10:	1affffec 	bne	8bc8 <luks_srv_key_mgnt_processing+0x14>
	get_key_srv_close(session);
    8c14:	e1a00005 	mov	r0, r5
    8c18:	ebfffd94 	bl	8270 <get_key_srv_close>
	sprintf(ecid, "%08x%08x%08x%08x", msg.ecid[3], msg.ecid[2],
    8c1c:	e59de020 	ldr	lr, [sp, #32]
    8c20:	e3001460 	movw	r1, #1120	; 0x460
    8c24:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
    8c28:	e3401001 	movt	r1, #1
    8c2c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    8c30:	e28d0030 	add	r0, sp, #48	; 0x30
    8c34:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    8c38:	e88d5000 	stm	sp, {ip, lr}
    8c3c:	eb001ae5 	bl	f7d8 <sprintf>
	rc = nist_sp_800_108_with_cmac(msg.key, ecid, "luks-srv-ecid",
    8c40:	e30330d4 	movw	r3, #12500	; 0x30d4
    8c44:	e3002474 	movw	r2, #1140	; 0x474
    8c48:	e28d1030 	add	r1, sp, #48	; 0x30
    8c4c:	e3403001 	movt	r3, #1
    8c50:	e3402001 	movt	r2, #1
    8c54:	e28d0010 	add	r0, sp, #16
    8c58:	ebffff4a 	bl	8988 <nist_sp_800_108_with_cmac>
	rc = nist_sp_800_108_with_cmac(msg.key, "generic-key", "luks-srv-generic",
    8c5c:	e30330c4 	movw	r3, #12484	; 0x30c4
    8c60:	e3002484 	movw	r2, #1156	; 0x484
    8c64:	e3001498 	movw	r1, #1176	; 0x498
    8c68:	e28d0010 	add	r0, sp, #16
    8c6c:	e3403001 	movt	r3, #1
    8c70:	e3402001 	movt	r2, #1
    8c74:	e3401001 	movt	r1, #1
    8c78:	ebffff42 	bl	8988 <nist_sp_800_108_with_cmac>
	if (rc != NO_ERROR)
    8c7c:	e2504000 	subs	r4, r0, #0
    8c80:	1affffd0 	bne	8bc8 <luks_srv_key_mgnt_processing+0x14>
}
    8c84:	e1a00004 	mov	r0, r4
    8c88:	e28dd05c 	add	sp, sp, #92	; 0x5c
    8c8c:	e8bd8030 	pop	{r4, r5, pc}
    8c90:	0001305c 	.word	0x0001305c

00008c94 <luks_srv_process_req>:

void luks_srv_process_req(iovec_t *ipc_msg)
{
	luks_srv_cmd_msg_t *msg = ipc_msg->base;

	if (no_pass_response)
    8c94:	e30330e4 	movw	r3, #12516	; 0x30e4
    8c98:	e3403001 	movt	r3, #1
    8c9c:	e5d32000 	ldrb	r2, [r3]
    8ca0:	e3520000 	cmp	r2, #0
    8ca4:	112fff1e 	bxne	lr
	luks_srv_cmd_msg_t *msg = ipc_msg->base;
    8ca8:	e5900000 	ldr	r0, [r0]
		return;

	switch (msg->luks_srv_cmd) {
    8cac:	e5902000 	ldr	r2, [r0]
    8cb0:	e3520002 	cmp	r2, #2
    8cb4:	0a000004 	beq	8ccc <luks_srv_process_req+0x38>
    8cb8:	e352000a 	cmp	r2, #10
    8cbc:	0a000003 	beq	8cd0 <luks_srv_process_req+0x3c>
    8cc0:	e3520001 	cmp	r2, #1
    8cc4:	112fff1e 	bxne	lr
	case LUKS_GET_UNIQUE_PASS:
		luks_srv_get_unique_pass(msg);
    8cc8:	eaffffb1 	b	8b94 <luks_srv_get_unique_pass>
		break;
	case LUKS_GET_GENERIC_PASS:
		luks_srv_get_generic_pass(msg);
    8ccc:	eaffffa8 	b	8b74 <luks_srv_get_generic_pass>
		break;
	case LUKS_NO_PASS_RESPONSE:
		no_pass_response = true;
    8cd0:	e3a02001 	mov	r2, #1
    8cd4:	e5c32000 	strb	r2, [r3]
		break;
	default:
		return;
	}
}
    8cd8:	e12fff1e 	bx	lr

00008cdc <_start>:

__attribute__ ((section (".bss")))
void *__dso_handle = (void *) 0;

/* Arguments are supplied in memory pointed by r0 */
void _start(void *args) {
    8cdc:	e92d4800 	push	{fp, lr}
    8ce0:	e28db004 	add	fp, sp, #4
    8ce4:	e24dd018 	sub	sp, sp, #24
    8ce8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  structors_array_t array;
  array.preinit_array = &__PREINIT_ARRAY__;
    8cec:	e3033000 	movw	r3, #12288	; 0x3000
    8cf0:	e3403001 	movt	r3, #1
    8cf4:	e50b3010 	str	r3, [fp, #-16]
  array.init_array = &__INIT_ARRAY__;
    8cf8:	e3033008 	movw	r3, #12296	; 0x3008
    8cfc:	e3403001 	movt	r3, #1
    8d00:	e50b300c 	str	r3, [fp, #-12]
  array.fini_array = (&__FINI_ARRAY__)[0] ? &__FINI_ARRAY__ : 0;
    8d04:	e3033014 	movw	r3, #12308	; 0x3014
    8d08:	e3403001 	movt	r3, #1
    8d0c:	e5933000 	ldr	r3, [r3]
    8d10:	e3530000 	cmp	r3, #0
    8d14:	0a000002 	beq	8d24 <_start+0x48>
    8d18:	e3033014 	movw	r3, #12308	; 0x3014
    8d1c:	e3403001 	movt	r3, #1
    8d20:	ea000000 	b	8d28 <_start+0x4c>
    8d24:	e3a03000 	mov	r3, #0
    8d28:	e50b3008 	str	r3, [fp, #-8]

  __libc_init(args, &main, &array);
    8d2c:	e24b3010 	sub	r3, fp, #16
    8d30:	e1a02003 	mov	r2, r3
    8d34:	e308100c 	movw	r1, #32780	; 0x800c
    8d38:	e3401000 	movt	r1, #0
    8d3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    8d40:	eb00090e 	bl	b180 <__libc_init>

00008d44 <abort>:

#include <stdlib.h>
#include <trusty_std.h>

void abort(void)
{
    8d44:	e92d4010 	push	{r4, lr}
	exit(1);
    8d48:	e3a00001 	mov	r0, #1
    8d4c:	ebfffcab 	bl	8000 <exit>

00008d50 <__assert2>:
#include <assert.h>

#include "libc_fatal.h"

__NO_RETURN void __assert2(const char* file, int line, const char* function, const char* expr)
{
    8d50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8d54:	e24dd00c 	sub	sp, sp, #12
    __libc_fatal("%s:%d: %s: assert \"%s\" failed\n", file, line, function, expr);
    8d58:	e58d3000 	str	r3, [sp]
    8d5c:	e1a03002 	mov	r3, r2
    8d60:	e1a02001 	mov	r2, r1
    8d64:	e1a01000 	mov	r1, r0
    8d68:	e3000594 	movw	r0, #1428	; 0x594
    8d6c:	e3400001 	movt	r0, #1
    8d70:	eb000927 	bl	b214 <__libc_fatal>

00008d74 <__cxa_atexit>:
 *
 *	http://www.codesourcery.com/cxx-abi/abi.html#dso-dtor
 */
int
__cxa_atexit(void (*func)(void *), void *arg)
{
    8d74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct atexit *p = __atexit;
    8d78:	e30358b4 	movw	r5, #14516	; 0x38b4
    8d7c:	e3405001 	movt	r5, #1
{
    8d80:	e1a07000 	mov	r7, r0
    8d84:	e1a06001 	mov	r6, r1
	struct atexit *p = __atexit;
    8d88:	e5954000 	ldr	r4, [r5]
	struct atexit_fn *fnp;
	int size = 64;
	int ret = -1;

	if (p != NULL) {
    8d8c:	e3540000 	cmp	r4, #0
    8d90:	0a000004 	beq	8da8 <__cxa_atexit+0x34>
		if (p->ind + 1 >= p->max)
    8d94:	e5943004 	ldr	r3, [r4, #4]
    8d98:	e5941008 	ldr	r1, [r4, #8]
    8d9c:	e2832001 	add	r2, r3, #1
    8da0:	e1520001 	cmp	r2, r1
    8da4:	ba000014 	blt	8dfc <__cxa_atexit+0x88>
			p = NULL;
	}
	if (p == NULL) {
		p = malloc(size);
    8da8:	e3a00040 	mov	r0, #64	; 0x40
    8dac:	eb0000e1 	bl	9138 <malloc>
		if (!p)
    8db0:	e2504000 	subs	r4, r0, #0
    8db4:	0a00001d 	beq	8e30 <__cxa_atexit+0xbc>
			goto done;
		if (__atexit == NULL) {
    8db8:	e5951000 	ldr	r1, [r5]
    8dbc:	e3510000 	cmp	r1, #0
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
			p->ind = 1;
		} else
			p->ind = 0;
    8dc0:	13a03000 	movne	r3, #0
    8dc4:	15843004 	strne	r3, [r4, #4]
		if (__atexit == NULL) {
    8dc8:	0a000011 	beq	8e14 <__cxa_atexit+0xa0>
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
		    sizeof(p->fns[0]);
		p->next = __atexit;
		__atexit = p;
		if (__atexit_invalid)
    8dcc:	e3032030 	movw	r2, #12336	; 0x3030
		p->next = __atexit;
    8dd0:	e5841000 	str	r1, [r4]
		if (__atexit_invalid)
    8dd4:	e3402001 	movt	r2, #1
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
    8dd8:	e3a01006 	mov	r1, #6
		if (__atexit_invalid)
    8ddc:	e5923000 	ldr	r3, [r2]
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
    8de0:	e5841008 	str	r1, [r4, #8]
		__atexit = p;
    8de4:	e5854000 	str	r4, [r5]
		if (__atexit_invalid)
    8de8:	e3530000 	cmp	r3, #0
    8dec:	e5943004 	ldr	r3, [r4, #4]
			__atexit_invalid = 0;
    8df0:	13a01000 	movne	r1, #0
    8df4:	15821000 	strne	r1, [r2]
    8df8:	e2832001 	add	r2, r3, #1
    8dfc:	e0843183 	add	r3, r4, r3, lsl #3
	}
	fnp = &p->fns[p->ind++];
    8e00:	e5842004 	str	r2, [r4, #4]
	fnp->fn_ptr.cxa_func = func;
	fnp->fn_arg = arg;
	ret = 0;
    8e04:	e3a00000 	mov	r0, #0
	fnp->fn_ptr.cxa_func = func;
    8e08:	e583700c 	str	r7, [r3, #12]
	fnp->fn_arg = arg;
    8e0c:	e5836010 	str	r6, [r3, #16]
    8e10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
    8e14:	e3a02008 	mov	r2, #8
    8e18:	e284000c 	add	r0, r4, #12
    8e1c:	eb001ad1 	bl	f968 <memset>
			p->ind = 1;
    8e20:	e3a03001 	mov	r3, #1
    8e24:	e5951000 	ldr	r1, [r5]
    8e28:	e5843004 	str	r3, [r4, #4]
    8e2c:	eaffffe6 	b	8dcc <__cxa_atexit+0x58>
	int ret = -1;
    8e30:	e3e00000 	mvn	r0, #0
done:
	return (ret);
}
    8e34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008e38 <__cxa_finalize>:
	struct atexit *p, *q;
	struct atexit_fn fn;
	int n;
	static int call_depth;

	if (__atexit_invalid)
    8e38:	e3033030 	movw	r3, #12336	; 0x3030
{
    8e3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if (__atexit_invalid)
    8e40:	e3403001 	movt	r3, #1
    8e44:	e5936000 	ldr	r6, [r3]
    8e48:	e3560000 	cmp	r6, #0
    8e4c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		return;

	call_depth++;

	for (p = __atexit; p != NULL; p = p->next) {
    8e50:	e30398b4 	movw	r9, #14516	; 0x38b4
	call_depth++;
    8e54:	e30380e8 	movw	r8, #12520	; 0x30e8
	for (p = __atexit; p != NULL; p = p->next) {
    8e58:	e3409001 	movt	r9, #1
	call_depth++;
    8e5c:	e3408001 	movt	r8, #1
	for (p = __atexit; p != NULL; p = p->next) {
    8e60:	e5997000 	ldr	r7, [r9]
	call_depth++;
    8e64:	e5983000 	ldr	r3, [r8]
	for (p = __atexit; p != NULL; p = p->next) {
    8e68:	e3570000 	cmp	r7, #0
	call_depth++;
    8e6c:	e2833001 	add	r3, r3, #1
    8e70:	e5883000 	str	r3, [r8]
	for (p = __atexit; p != NULL; p = p->next) {
    8e74:	0a00000f 	beq	8eb8 <__cxa_finalize+0x80>
		for (n = p->ind; --n >= 0;) {
    8e78:	e5975004 	ldr	r5, [r7, #4]
    8e7c:	e0874185 	add	r4, r7, r5, lsl #3
    8e80:	ea000006 	b	8ea0 <__cxa_finalize+0x68>
			if (p->fns[n].fn_ptr.cxa_func == NULL)
    8e84:	e5943004 	ldr	r3, [r4, #4]
    8e88:	e3530000 	cmp	r3, #0
    8e8c:	0a000002 	beq	8e9c <__cxa_finalize+0x64>

			/*
			 * Mark handler as having been already called to avoid
			 * dupes and loops, then call the appropriate function.
			 */
			fn = p->fns[n];
    8e90:	e5940008 	ldr	r0, [r4, #8]
			p->fns[n].fn_ptr.cxa_func = NULL;
    8e94:	e5846004 	str	r6, [r4, #4]
                        (*fn.fn_ptr.cxa_func)(fn.fn_arg);
    8e98:	e12fff33 	blx	r3
    8e9c:	e2444008 	sub	r4, r4, #8
		for (n = p->ind; --n >= 0;) {
    8ea0:	e2555001 	subs	r5, r5, #1
    8ea4:	5afffff6 	bpl	8e84 <__cxa_finalize+0x4c>
	for (p = __atexit; p != NULL; p = p->next) {
    8ea8:	e5977000 	ldr	r7, [r7]
    8eac:	e3570000 	cmp	r7, #0
    8eb0:	1afffff0 	bne	8e78 <__cxa_finalize+0x40>
    8eb4:	e5983000 	ldr	r3, [r8]
	/*
	 * If called via exit(), unmap the pages since we have now run
	 * all the handlers.  We defer this until calldepth == 0 so that
	 * we don't unmap things prematurely if called recursively.
	 */
	if (--call_depth == 0) {
    8eb8:	e2433001 	sub	r3, r3, #1
    8ebc:	e3530000 	cmp	r3, #0
    8ec0:	e5883000 	str	r3, [r8]
    8ec4:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		for (p = __atexit; p != NULL; ) {
    8ec8:	e5990000 	ldr	r0, [r9]
    8ecc:	e3500000 	cmp	r0, #0
    8ed0:	0a000003 	beq	8ee4 <__cxa_finalize+0xac>
			q = p;
			p = p->next;
    8ed4:	e5904000 	ldr	r4, [r0]
			free(q);
    8ed8:	eb00066c 	bl	a890 <free>
		for (p = __atexit; p != NULL; ) {
    8edc:	e2540000 	subs	r0, r4, #0
    8ee0:	1afffffb 	bne	8ed4 <__cxa_finalize+0x9c>
		}
		__atexit = NULL;
    8ee4:	e3a03000 	mov	r3, #0
    8ee8:	e5893000 	str	r3, [r9]
	}
}
    8eec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00008ef0 <sbrk>:

static char *__libc_brk;

#define SBRK_ALIGN	32
static void *sbrk(ptrdiff_t increment)
{
    8ef0:	e92d4070 	push	{r4, r5, r6, lr}
	char *new_brk;
	char *start;
	char *end;

	if (!__libc_brk)
    8ef4:	e30360ec 	movw	r6, #12524	; 0x30ec
    8ef8:	e3406001 	movt	r6, #1
{
    8efc:	e1a04000 	mov	r4, r0
	if (!__libc_brk)
    8f00:	e5960000 	ldr	r0, [r6]
    8f04:	e3500000 	cmp	r0, #0
    8f08:	0a00000b 	beq	8f3c <sbrk+0x4c>
		__libc_brk = (char *)brk(0);

	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    8f0c:	e280001f 	add	r0, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    8f10:	e284401f 	add	r4, r4, #31
	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    8f14:	e3c0501f 	bic	r5, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    8f18:	e3c4401f 	bic	r4, r4, #31
    8f1c:	e0854004 	add	r4, r5, r4

	new_brk = (char *)brk((uint32_t)end);
    8f20:	e1a00004 	mov	r0, r4
    8f24:	eb0008c8 	bl	b24c <brk>
	if (new_brk < end)
    8f28:	e1540000 	cmp	r4, r0
		return (void *)-1;
    8f2c:	83e05000 	mvnhi	r5, #0

	__libc_brk = new_brk;
    8f30:	95860000 	strls	r0, [r6]
	return start;
}
    8f34:	e1a00005 	mov	r0, r5
    8f38:	e8bd8070 	pop	{r4, r5, r6, pc}
		__libc_brk = (char *)brk(0);
    8f3c:	eb0008c2 	bl	b24c <brk>
    8f40:	e5860000 	str	r0, [r6]
    8f44:	eafffff0 	b	8f0c <sbrk+0x1c>

00008f48 <init_mparams.part.2>:
static void post_fork_parent(void) { RELEASE_LOCK(&(gm)->mutex); }
static void post_fork_child(void)  { INITIAL_LOCK(&(gm)->mutex); }
#endif /* LOCK_AT_FORK */

/* Initialize mparams */
static int init_mparams(void) {
    8f48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
      magic = (size_t)&magic ^ (size_t)0x55555555U;
#else
      magic = (size_t)(time(0) ^ (size_t)0x55555555U);
#endif
      magic |= (size_t)8U;    /* ensure nonzero */
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    8f4c:	e3052550 	movw	r2, #21840	; 0x5550
static int init_mparams(void) {
    8f50:	e24dd00c 	sub	sp, sp, #12
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    8f54:	e3452555 	movt	r2, #21845	; 0x5555
      magic = (size_t)&magic ^ (size_t)0x55555555U;
    8f58:	e1a0100d 	mov	r1, sp
    mparams.granularity = gsize;
    8f5c:	e30332c8 	movw	r3, #13000	; 0x32c8
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    8f60:	e0222001 	eor	r2, r2, r1
    mparams.granularity = gsize;
    8f64:	e3403001 	movt	r3, #1
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    8f68:	e3822008 	orr	r2, r2, #8
    gm->mflags = mparams.default_mflags;
    8f6c:	e30310f0 	movw	r1, #12528	; 0x30f0
    mparams.granularity = gsize;
    8f70:	e3a00a01 	mov	r0, #4096	; 0x1000
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    8f74:	e3e0e000 	mvn	lr, #0
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    8f78:	e3a0c602 	mov	ip, #2097152	; 0x200000
    gm->mflags = mparams.default_mflags;
    8f7c:	e3401001 	movt	r1, #1
      /* Until memory modes commonly available, use volatile-write */
      (*(volatile size_t *)(&(mparams.magic))) = magic;
    8f80:	e5832000 	str	r2, [r3]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    8f84:	e3a02000 	mov	r2, #0
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    8f88:	e583e00c 	str	lr, [r3, #12]
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    8f8c:	e583c010 	str	ip, [r3, #16]
    mparams.granularity = gsize;
    8f90:	e5830008 	str	r0, [r3, #8]
    mparams.page_size = psize;
    8f94:	e5830004 	str	r0, [r3, #4]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    8f98:	e5832014 	str	r2, [r3, #20]
    gm->mflags = mparams.default_mflags;
    8f9c:	e58121bc 	str	r2, [r1, #444]	; 0x1bc
    }
  }

  RELEASE_MALLOC_GLOBAL_LOCK();
  return 1;
}
    8fa0:	e28dd00c 	add	sp, sp, #12
    8fa4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008fa8 <sys_trim.constprop.7>:
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
                       (size_t) nsegs : (size_t) MAX_RELEASE_CHECK_RATE);
  return released;
}

static int sys_trim(mstate m, size_t pad) {
    8fa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  size_t released = 0;
  ensure_initialization();
    8fac:	e30352c8 	movw	r5, #13000	; 0x32c8
    8fb0:	e3405001 	movt	r5, #1
static int sys_trim(mstate m, size_t pad) {
    8fb4:	e1a04000 	mov	r4, r0
  ensure_initialization();
    8fb8:	e5953000 	ldr	r3, [r5]
    8fbc:	e3530000 	cmp	r3, #0
    8fc0:	0a000030 	beq	9088 <sys_trim.constprop.7+0xe0>
  if (pad < MAX_REQUEST && is_initialized(m)) {
    8fc4:	e3740041 	cmn	r4, #65	; 0x41
    8fc8:	8a00002c 	bhi	9080 <sys_trim.constprop.7+0xd8>
    8fcc:	e30360f0 	movw	r6, #12528	; 0x30f0
    8fd0:	e3406001 	movt	r6, #1
    8fd4:	e5962018 	ldr	r2, [r6, #24]
    8fd8:	e3520000 	cmp	r2, #0
    8fdc:	0a000027 	beq	9080 <sys_trim.constprop.7+0xd8>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */

    if (m->topsize > pad) {
    8fe0:	e596100c 	ldr	r1, [r6, #12]
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
    8fe4:	e2840028 	add	r0, r4, #40	; 0x28
    if (m->topsize > pad) {
    8fe8:	e1500001 	cmp	r0, r1
    8fec:	2a000020 	bcs	9074 <sys_trim.constprop.7+0xcc>
  msegmentptr sp = &m->seg;
    8ff0:	e2864d07 	add	r4, r6, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
    8ff4:	e5943000 	ldr	r3, [r4]
    8ff8:	e1520003 	cmp	r2, r3
    8ffc:	3a000003 	bcc	9010 <sys_trim.constprop.7+0x68>
    9000:	e594c004 	ldr	ip, [r4, #4]
    9004:	e083300c 	add	r3, r3, ip
    9008:	e1520003 	cmp	r2, r3
    900c:	3a000004 	bcc	9024 <sys_trim.constprop.7+0x7c>
    if ((sp = sp->next) == 0)
    9010:	e5944008 	ldr	r4, [r4, #8]
    9014:	e3540000 	cmp	r4, #0
    9018:	1afffff5 	bne	8ff4 <sys_trim.constprop.7+0x4c>
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
    901c:	e594300c 	ldr	r3, [r4, #12]
    9020:	e7f000f0 	udf	#0
    9024:	e594300c 	ldr	r3, [r4, #12]
    9028:	e3130008 	tst	r3, #8
    902c:	1a000010 	bne	9074 <sys_trim.constprop.7+0xcc>
      size_t unit = mparams.granularity;
    9030:	e5953008 	ldr	r3, [r5, #8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    9034:	e0817003 	add	r7, r1, r3
    9038:	e2477001 	sub	r7, r7, #1
    903c:	e0477000 	sub	r7, r7, r0
    9040:	e737f317 	udiv	r7, r7, r3
    9044:	e2477001 	sub	r7, r7, #1
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
          ACQUIRE_MALLOC_GLOBAL_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
    9048:	e3a00000 	mov	r0, #0
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    904c:	e0070793 	mul	r7, r3, r7
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
    9050:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
    9054:	82637102 	rsbhi	r7, r3, #-2147483648	; 0x80000000
            char* old_br = (char*)(CALL_MORECORE(0));
    9058:	ebffffa4 	bl	8ef0 <sbrk>
            if (old_br == sp->base + sp->size) {
    905c:	e1c420d0 	ldrd	r2, [r4]
            char* old_br = (char*)(CALL_MORECORE(0));
    9060:	e1a08000 	mov	r8, r0
            if (old_br == sp->base + sp->size) {
    9064:	e0833002 	add	r3, r3, r2
    9068:	e1500003 	cmp	r0, r3
    906c:	0a00000b 	beq	90a0 <sys_trim.constprop.7+0xf8>
    9070:	e596100c 	ldr	r1, [r6, #12]
    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0 && m->topsize > m->trim_check)
    9074:	e596301c 	ldr	r3, [r6, #28]
    9078:	e1530001 	cmp	r3, r1
    907c:	3a000003 	bcc	9090 <sys_trim.constprop.7+0xe8>
  size_t offset = align_offset(chunk2mem(p));
    9080:	e3a00000 	mov	r0, #0
    9084:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9088:	ebffffae 	bl	8f48 <init_mparams.part.2>
    908c:	eaffffcc 	b	8fc4 <sys_trim.constprop.7+0x1c>
      m->trim_check = MAX_SIZE_T;
    9090:	e3e03000 	mvn	r3, #0
    9094:	e3a00000 	mov	r0, #0
    9098:	e586301c 	str	r3, [r6, #28]
  }

  return (released != 0)? 1 : 0;
}
    909c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              char* rel_br = (char*)(CALL_MORECORE(-extra));
    90a0:	e2670000 	rsb	r0, r7, #0
    90a4:	ebffff91 	bl	8ef0 <sbrk>
    90a8:	e1a07000 	mov	r7, r0
              char* new_br = (char*)(CALL_MORECORE(0));
    90ac:	e3a00000 	mov	r0, #0
    90b0:	ebffff8e 	bl	8ef0 <sbrk>
              if (rel_br != CMFAIL && new_br < old_br)
    90b4:	e3770001 	cmn	r7, #1
    90b8:	11580000 	cmpne	r8, r0
    90bc:	9affffeb 	bls	9070 <sys_trim.constprop.7+0xc8>
      if (released != 0) {
    90c0:	e0588000 	subs	r8, r8, r0
    90c4:	0affffe9 	beq	9070 <sys_trim.constprop.7+0xc8>
        init_top(m, m->top, m->topsize - released);
    90c8:	e5962018 	ldr	r2, [r6, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    90cc:	e3a0e028 	mov	lr, #40	; 0x28
        sp->size -= released;
    90d0:	e594c004 	ldr	ip, [r4, #4]
        init_top(m, m->top, m->topsize - released);
    90d4:	e596100c 	ldr	r1, [r6, #12]
  size_t offset = align_offset(chunk2mem(p));
    90d8:	e2823008 	add	r3, r2, #8
        m->footprint -= released;
    90dc:	e59601b0 	ldr	r0, [r6, #432]	; 0x1b0
  size_t offset = align_offset(chunk2mem(p));
    90e0:	e3130007 	tst	r3, #7
        sp->size -= released;
    90e4:	e04cc008 	sub	ip, ip, r8
  size_t offset = align_offset(chunk2mem(p));
    90e8:	12633000 	rsbne	r3, r3, #0
        sp->size -= released;
    90ec:	e584c004 	str	ip, [r4, #4]
  size_t offset = align_offset(chunk2mem(p));
    90f0:	12033007 	andne	r3, r3, #7
        m->footprint -= released;
    90f4:	e0400008 	sub	r0, r0, r8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    90f8:	e595c010 	ldr	ip, [r5, #16]
        init_top(m, m->top, m->topsize - released);
    90fc:	e0418008 	sub	r8, r1, r8
  size_t offset = align_offset(chunk2mem(p));
    9100:	01a03008 	moveq	r3, r8
    9104:	10821003 	addne	r1, r2, r3
    9108:	10483003 	subne	r3, r8, r3
    910c:	01a01002 	moveq	r1, r2
  p->head = psize | PINUSE_BIT;
    9110:	e3834001 	orr	r4, r3, #1
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9114:	e0822008 	add	r2, r2, r8
        m->footprint -= released;
    9118:	e58601b0 	str	r0, [r6, #432]	; 0x1b0
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    911c:	e3a00001 	mov	r0, #1
  m->top = p;
    9120:	e5861018 	str	r1, [r6, #24]
  m->topsize = psize;
    9124:	e586300c 	str	r3, [r6, #12]
  p->head = psize | PINUSE_BIT;
    9128:	e5814004 	str	r4, [r1, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    912c:	e582e004 	str	lr, [r2, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9130:	e586c01c 	str	ip, [r6, #28]
    9134:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009138 <malloc>:
#endif

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
    9138:	e35000f4 	cmp	r0, #244	; 0xf4
void* dlmalloc(size_t bytes) {
    913c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9140:	e24dd00c 	sub	sp, sp, #12
    if (bytes <= MAX_SMALL_REQUEST) {
    9144:	8a00002d 	bhi	9200 <malloc+0xc8>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
      idx = small_index(nb);
      smallbits = gm->smallmap >> idx;
    9148:	e30360f0 	movw	r6, #12528	; 0x30f0
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    914c:	e350000a 	cmp	r0, #10
      smallbits = gm->smallmap >> idx;
    9150:	e3406001 	movt	r6, #1
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    9154:	8280400b 	addhi	r4, r0, #11
      smallbits = gm->smallmap >> idx;
    9158:	e596c000 	ldr	ip, [r6]
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    915c:	83c44007 	bichi	r4, r4, #7
    9160:	81a021a4 	lsrhi	r2, r4, #3
    9164:	93a02002 	movls	r2, #2
    9168:	93a04010 	movls	r4, #16
      smallbits = gm->smallmap >> idx;
    916c:	e1a0323c 	lsr	r3, ip, r2

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
    9170:	e3130003 	tst	r3, #3
    9174:	0a00004a 	beq	92a4 <malloc+0x16c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
    9178:	e1e03003 	mvn	r3, r3
    917c:	e2033001 	and	r3, r3, #1
    9180:	e0833002 	add	r3, r3, r2
        b = smallbin_at(gm, idx);
    9184:	e0861183 	add	r1, r6, r3, lsl #3
    9188:	e2811028 	add	r1, r1, #40	; 0x28
        p = b->fd;
    918c:	e5910008 	ldr	r0, [r1, #8]
        assert(chunksize(p) == small_index2size(idx));
    9190:	e5902004 	ldr	r2, [r0, #4]
    9194:	e3c22007 	bic	r2, r2, #7
    9198:	e1520183 	cmp	r2, r3, lsl #3
    919c:	1a0001c0 	bne	98a4 <malloc+0x76c>
        unlink_first_small_chunk(gm, b, p, idx);
    91a0:	e1510000 	cmp	r1, r0
    91a4:	e590e008 	ldr	lr, [r0, #8]
    91a8:	0a0001bd 	beq	98a4 <malloc+0x76c>
    91ac:	e150000e 	cmp	r0, lr
    91b0:	0a0001bb 	beq	98a4 <malloc+0x76c>
    91b4:	e151000e 	cmp	r1, lr
    91b8:	0a00017d 	beq	97b4 <malloc+0x67c>
    91bc:	e5963010 	ldr	r3, [r6, #16]
    91c0:	e153000e 	cmp	r3, lr
    91c4:	8a0001b6 	bhi	98a4 <malloc+0x76c>
    91c8:	e59e300c 	ldr	r3, [lr, #12]
    91cc:	e1530000 	cmp	r3, r0
    91d0:	1a0001b3 	bne	98a4 <malloc+0x76c>
    91d4:	e58e100c 	str	r1, [lr, #12]
    91d8:	e581e008 	str	lr, [r1, #8]
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    91dc:	e3823003 	orr	r3, r2, #3
    91e0:	e0802002 	add	r2, r0, r2
    91e4:	e5803004 	str	r3, [r0, #4]
        mem = chunk2mem(p);
    91e8:	e2800008 	add	r0, r0, #8
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    91ec:	e5923004 	ldr	r3, [r2, #4]
    91f0:	e3833001 	orr	r3, r3, #1
    91f4:	e5823004 	str	r3, [r2, #4]
    POSTACTION(gm);
    return mem;
  }

  return 0;
}
    91f8:	e28dd00c 	add	sp, sp, #12
    91fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9200:	e30360f0 	movw	r6, #12528	; 0x30f0
    else if (bytes >= MAX_REQUEST)
    9204:	e3700041 	cmn	r0, #65	; 0x41
    9208:	e3406001 	movt	r6, #1
    920c:	e5961008 	ldr	r1, [r6, #8]
    9210:	9a00000d 	bls	924c <malloc+0x114>
    if (nb <= gm->dvsize) {
    9214:	e3710001 	cmn	r1, #1
    9218:	1a000086 	bne	9438 <malloc+0x300>
      mchunkptr p = gm->dv;
    921c:	e5960014 	ldr	r0, [r6, #20]
    9220:	e2402001 	sub	r2, r0, #1
        gm->dvsize = 0;
    9224:	e3a03000 	mov	r3, #0
    9228:	e5863008 	str	r3, [r6, #8]
        gm->dv = 0;
    922c:	e5863014 	str	r3, [r6, #20]
        set_inuse_and_pinuse(gm, p, dvs);
    9230:	e5801004 	str	r1, [r0, #4]
    9234:	e5923004 	ldr	r3, [r2, #4]
    9238:	e3833001 	orr	r3, r3, #1
    923c:	e5823004 	str	r3, [r2, #4]
      mem = chunk2mem(p);
    9240:	e2800008 	add	r0, r0, #8
}
    9244:	e28dd00c 	add	sp, sp, #12
    9248:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    924c:	e596c004 	ldr	ip, [r6, #4]
      nb = pad_request(bytes);
    9250:	e280400b 	add	r4, r0, #11
    9254:	e3c44007 	bic	r4, r4, #7
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    9258:	e35c0000 	cmp	ip, #0
    925c:	1a0000d3 	bne	95b0 <malloc+0x478>
    if (nb <= gm->dvsize) {
    9260:	e1540001 	cmp	r4, r1
    9264:	9a000065 	bls	9400 <malloc+0x2c8>
    else if (nb < gm->topsize) { /* Split top */
    9268:	e596300c 	ldr	r3, [r6, #12]
    926c:	e1530004 	cmp	r3, r4
    9270:	9a000580 	bls	a878 <malloc+0x1740>
      mchunkptr p = m->top;
    9274:	e5962018 	ldr	r2, [r6, #24]
      size_t rsize = m->topsize -= nb;
    9278:	e0433004 	sub	r3, r3, r4
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    927c:	e3841003 	orr	r1, r4, #3
      r->head = rsize | PINUSE_BIT;
    9280:	e383c001 	orr	ip, r3, #1
      size_t rsize = m->topsize -= nb;
    9284:	e586300c 	str	r3, [r6, #12]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    9288:	e0824004 	add	r4, r2, r4
      return chunk2mem(p);
    928c:	e2820008 	add	r0, r2, #8
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    9290:	e5864018 	str	r4, [r6, #24]
      r->head = rsize | PINUSE_BIT;
    9294:	e584c004 	str	ip, [r4, #4]
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    9298:	e5821004 	str	r1, [r2, #4]
}
    929c:	e28dd00c 	add	sp, sp, #12
    92a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (nb > gm->dvsize) {
    92a4:	e5961008 	ldr	r1, [r6, #8]
    92a8:	e1510004 	cmp	r1, r4
    92ac:	2a000053 	bcs	9400 <malloc+0x2c8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
    92b0:	e3530000 	cmp	r3, #0
    92b4:	0a00017c 	beq	98ac <malloc+0x774>
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
    92b8:	e3a0e001 	mov	lr, #1
    92bc:	e1a0021e 	lsl	r0, lr, r2
    92c0:	e1a05e10 	lsl	r5, r0, lr
    92c4:	e2650000 	rsb	r0, r5, #0
    92c8:	e1800005 	orr	r0, r0, r5
    92cc:	e0002213 	and	r2, r0, r3, lsl r2
          binmap_t leastbit = least_bit(leftbits);
    92d0:	e2623000 	rsb	r3, r2, #0
    92d4:	e0033002 	and	r3, r3, r2
          compute_bit2idx(leastbit, i);
    92d8:	e2433001 	sub	r3, r3, #1
    92dc:	e1a02623 	lsr	r2, r3, #12
    92e0:	e2022010 	and	r2, r2, #16
    92e4:	e1a03233 	lsr	r3, r3, r2
    92e8:	e1a002a3 	lsr	r0, r3, #5
    92ec:	e2000008 	and	r0, r0, #8
    92f0:	e1a03033 	lsr	r3, r3, r0
    92f4:	e1822000 	orr	r2, r2, r0
    92f8:	e1a00123 	lsr	r0, r3, #2
    92fc:	e2000004 	and	r0, r0, #4
    9300:	e1a03033 	lsr	r3, r3, r0
    9304:	e0822000 	add	r2, r2, r0
    9308:	e1a00e33 	lsr	r0, r3, lr
    930c:	e2000002 	and	r0, r0, #2
    9310:	e1a03033 	lsr	r3, r3, r0
    9314:	e0822000 	add	r2, r2, r0
    9318:	e7e000d3 	ubfx	r0, r3, #1, #1
    931c:	e0822000 	add	r2, r2, r0
    9320:	e0823033 	add	r3, r2, r3, lsr r0
          b = smallbin_at(gm, i);
    9324:	e0862183 	add	r2, r6, r3, lsl #3
    9328:	e2822028 	add	r2, r2, #40	; 0x28
          p = b->fd;
    932c:	e5920008 	ldr	r0, [r2, #8]
          assert(chunksize(p) == small_index2size(i));
    9330:	e5907004 	ldr	r7, [r0, #4]
    9334:	e3c77007 	bic	r7, r7, #7
    9338:	e1570183 	cmp	r7, r3, lsl #3
    933c:	1a000158 	bne	98a4 <malloc+0x76c>
          unlink_first_small_chunk(gm, b, p, i);
    9340:	e1520000 	cmp	r2, r0
    9344:	e5905008 	ldr	r5, [r0, #8]
    9348:	0a000155 	beq	98a4 <malloc+0x76c>
    934c:	e1500005 	cmp	r0, r5
    9350:	0a000153 	beq	98a4 <malloc+0x76c>
    9354:	e1520005 	cmp	r2, r5
    9358:	01cc331e 	biceq	r3, ip, lr, lsl r3
    935c:	05863000 	streq	r3, [r6]
    9360:	0a000007 	beq	9384 <malloc+0x24c>
    9364:	e5963010 	ldr	r3, [r6, #16]
    9368:	e1530005 	cmp	r3, r5
    936c:	8a00014c 	bhi	98a4 <malloc+0x76c>
    9370:	e595300c 	ldr	r3, [r5, #12]
    9374:	e1530000 	cmp	r3, r0
    9378:	1a000149 	bne	98a4 <malloc+0x76c>
    937c:	e585200c 	str	r2, [r5, #12]
    9380:	e5825008 	str	r5, [r2, #8]
          rsize = small_index2size(i) - nb;
    9384:	e047c004 	sub	ip, r7, r4
            replace_dv(gm, r, rsize);
    9388:	e3510000 	cmp	r1, #0
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    938c:	e3842003 	orr	r2, r4, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
    9390:	e38c3001 	orr	r3, ip, #1
            r = chunk_plus_offset(p, nb);
    9394:	e0804004 	add	r4, r0, r4
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9398:	e5802004 	str	r2, [r0, #4]
            replace_dv(gm, r, rsize);
    939c:	e1a0e1a1 	lsr	lr, r1, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
    93a0:	e5843004 	str	r3, [r4, #4]
    93a4:	e780c007 	str	ip, [r0, r7]
            replace_dv(gm, r, rsize);
    93a8:	0a000010 	beq	93f0 <malloc+0x2b8>
    93ac:	e086318e 	add	r3, r6, lr, lsl #3
    93b0:	e351000f 	cmp	r1, #15
    93b4:	e5962014 	ldr	r2, [r6, #20]
    93b8:	e2833028 	add	r3, r3, #40	; 0x28
    93bc:	9a000138 	bls	98a4 <malloc+0x76c>
    93c0:	e3a01001 	mov	r1, #1
    93c4:	e5965000 	ldr	r5, [r6]
    93c8:	e1a01e11 	lsl	r1, r1, lr
    93cc:	e1150001 	tst	r5, r1
    93d0:	1a000367 	bne	a174 <malloc+0x103c>
    93d4:	e1a0e003 	mov	lr, r3
    93d8:	e1851001 	orr	r1, r5, r1
    93dc:	e5861000 	str	r1, [r6]
    93e0:	e5832008 	str	r2, [r3, #8]
    93e4:	e58e200c 	str	r2, [lr, #12]
    93e8:	e582e008 	str	lr, [r2, #8]
    93ec:	e582300c 	str	r3, [r2, #12]
    93f0:	e586c008 	str	ip, [r6, #8]
          mem = chunk2mem(p);
    93f4:	e2800008 	add	r0, r0, #8
            replace_dv(gm, r, rsize);
    93f8:	e5864014 	str	r4, [r6, #20]
          goto postaction;
    93fc:	eaffff7d 	b	91f8 <malloc+0xc0>
      size_t rsize = gm->dvsize - nb;
    9400:	e0413004 	sub	r3, r1, r4
      mchunkptr p = gm->dv;
    9404:	e5960014 	ldr	r0, [r6, #20]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
    9408:	e353000f 	cmp	r3, #15
    940c:	e0802001 	add	r2, r0, r1
    9410:	9a00035c 	bls	a188 <malloc+0x1050>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    9414:	e0802004 	add	r2, r0, r4
        set_size_and_pinuse_of_free_chunk(r, rsize);
    9418:	e383c001 	orr	ip, r3, #1
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    941c:	e3844003 	orr	r4, r4, #3
        gm->dvsize = rsize;
    9420:	e5863008 	str	r3, [r6, #8]
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    9424:	e5862014 	str	r2, [r6, #20]
        set_size_and_pinuse_of_free_chunk(r, rsize);
    9428:	e582c004 	str	ip, [r2, #4]
    942c:	e7803001 	str	r3, [r0, r1]
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9430:	e5804004 	str	r4, [r0, #4]
    9434:	eaffff81 	b	9240 <malloc+0x108>
  ensure_initialization();
    9438:	e30382c8 	movw	r8, #13000	; 0x32c8
    943c:	e3408001 	movt	r8, #1
    9440:	e5983000 	ldr	r3, [r8]
    9444:	e3530000 	cmp	r3, #0
    9448:	1a00010d 	bne	9884 <malloc+0x74c>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    944c:	e3e04000 	mvn	r4, #0
    9450:	ebfffebc 	bl	8f48 <init_mparams.part.2>
  asize = granularity_align(nb + SYS_ALLOC_PADDING);
    9454:	e5987008 	ldr	r7, [r8, #8]
    9458:	e287c02f 	add	ip, r7, #47	; 0x2f
    945c:	e2670000 	rsb	r0, r7, #0
    9460:	e084a00c 	add	sl, r4, ip
    9464:	e00aa000 	and	sl, sl, r0
  if (asize <= nb)
    9468:	e15a0004 	cmp	sl, r4
    946c:	9a000104 	bls	9884 <malloc+0x74c>
  if (m->footprint_limit != 0) {
    9470:	e59621b8 	ldr	r2, [r6, #440]	; 0x1b8
    9474:	e3520000 	cmp	r2, #0
    9478:	0a000008 	beq	94a0 <malloc+0x368>
    size_t fp = m->footprint + asize;
    947c:	e59631b0 	ldr	r3, [r6, #432]	; 0x1b0
    9480:	e08a1003 	add	r1, sl, r3
    if (fp <= m->footprint || fp > m->footprint_limit)
    9484:	e1530001 	cmp	r3, r1
    9488:	33a03000 	movcc	r3, #0
    948c:	23a03001 	movcs	r3, #1
    9490:	e1520001 	cmp	r2, r1
    9494:	33833001 	orrcc	r3, r3, #1
    9498:	e3530000 	cmp	r3, #0
    949c:	1a0000f8 	bne	9884 <malloc+0x74c>
  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
    94a0:	e596e1bc 	ldr	lr, [r6, #444]	; 0x1bc
    94a4:	e31e0004 	tst	lr, #4
    94a8:	0a0000c5 	beq	97c4 <malloc+0x68c>
    if (asize < HALF_MAX_SIZE_T) {
    94ac:	e37a010a 	cmn	sl, #-2147483646	; 0x80000002
    94b0:	8a0000f3 	bhi	9884 <malloc+0x74c>
      br = (char*)(CALL_MORECORE(asize));
    94b4:	e1a0000a 	mov	r0, sl
    94b8:	ebfffe8c 	bl	8ef0 <sbrk>
    94bc:	e1a05000 	mov	r5, r0
      end = (char*)(CALL_MORECORE(0));
    94c0:	e3a00000 	mov	r0, #0
    94c4:	ebfffe89 	bl	8ef0 <sbrk>
      if (br != CMFAIL && end != CMFAIL && br < end) {
    94c8:	e3700001 	cmn	r0, #1
    94cc:	13750001 	cmnne	r5, #1
    94d0:	13a03001 	movne	r3, #1
    94d4:	03a03000 	moveq	r3, #0
    94d8:	e1550000 	cmp	r5, r0
    94dc:	23a03000 	movcs	r3, #0
    94e0:	32033001 	andcc	r3, r3, #1
    94e4:	e3530000 	cmp	r3, #0
    94e8:	0a0000e5 	beq	9884 <malloc+0x74c>
        size_t ssize = end - br;
    94ec:	e0407005 	sub	r7, r0, r5
        if (ssize > nb + TOP_FOOT_SIZE) {
    94f0:	e2843028 	add	r3, r4, #40	; 0x28
    94f4:	e1570003 	cmp	r7, r3
    94f8:	9a0000e1 	bls	9884 <malloc+0x74c>
  if (tbase != CMFAIL) {
    94fc:	e3750001 	cmn	r5, #1
    9500:	0a0000df 	beq	9884 <malloc+0x74c>
    if ((m->footprint += tsize) > m->max_footprint)
    9504:	e59631b0 	ldr	r3, [r6, #432]	; 0x1b0
    9508:	e59621b4 	ldr	r2, [r6, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
    950c:	e596e018 	ldr	lr, [r6, #24]
    if ((m->footprint += tsize) > m->max_footprint)
    9510:	e0873003 	add	r3, r7, r3
    9514:	e1530002 	cmp	r3, r2
    9518:	e58631b0 	str	r3, [r6, #432]	; 0x1b0
      m->max_footprint = m->footprint;
    951c:	858631b4 	strhi	r3, [r6, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
    9520:	e35e0000 	cmp	lr, #0
      msegmentptr sp = &m->seg;
    9524:	159f2fe0 	ldrne	r2, [pc, #4064]	; a50c <malloc+0x13d4>
    9528:	11a03002 	movne	r3, r2
    if (!is_initialized(m)) { /* first-time initialization */
    952c:	0a000264 	beq	9ec4 <malloc+0xd8c>
      while (sp != 0 && tbase != sp->base + sp->size)
    9530:	e5931000 	ldr	r1, [r3]
    9534:	e5930004 	ldr	r0, [r3, #4]
    9538:	e081c000 	add	ip, r1, r0
    953c:	e15c0005 	cmp	ip, r5
    9540:	0a0001a1 	beq	9bcc <malloc+0xa94>
        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    9544:	e5933008 	ldr	r3, [r3, #8]
      while (sp != 0 && tbase != sp->base + sp->size)
    9548:	e3530000 	cmp	r3, #0
    954c:	1afffff7 	bne	9530 <malloc+0x3f8>
        if (tbase < m->least_addr)
    9550:	e5963010 	ldr	r3, [r6, #16]
    9554:	e0850007 	add	r0, r5, r7
    9558:	e1530005 	cmp	r3, r5
  size_t offset = align_offset(chunk2mem(p));
    955c:	e59f3fa8 	ldr	r3, [pc, #4008]	; a50c <malloc+0x13d4>
          m->least_addr = tbase;
    9560:	85865010 	strhi	r5, [r6, #16]
        while (sp != 0 && sp->base != tbase + tsize)
    9564:	e5931000 	ldr	r1, [r3]
    9568:	e1510000 	cmp	r1, r0
    956c:	0a000159 	beq	9ad8 <malloc+0x9a0>
          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    9570:	e5933008 	ldr	r3, [r3, #8]
        while (sp != 0 && sp->base != tbase + tsize)
    9574:	e3530000 	cmp	r3, #0
    9578:	1afffff9 	bne	9564 <malloc+0x42c>
            !is_extern_segment(sp) &&
    957c:	e59f3f88 	ldr	r3, [pc, #3976]	; a50c <malloc+0x13d4>
    if (addr >= sp->base && addr < sp->base + sp->size)
    9580:	e5931000 	ldr	r1, [r3]
    9584:	e15e0001 	cmp	lr, r1
    9588:	3a000003 	bcc	959c <malloc+0x464>
    958c:	e5930004 	ldr	r0, [r3, #4]
    9590:	e0811000 	add	r1, r1, r0
    9594:	e15e0001 	cmp	lr, r1
    9598:	3a0001aa 	bcc	9c48 <malloc+0xb10>
    if ((sp = sp->next) == 0)
    959c:	e5933008 	ldr	r3, [r3, #8]
    95a0:	e3530000 	cmp	r3, #0
    95a4:	1afffff5 	bne	9580 <malloc+0x448>
  char* old_end = oldsp->base + oldsp->size;
    95a8:	e5933000 	ldr	r3, [r3]
    95ac:	e7f000f0 	udf	#0
  compute_tree_index(nb, idx);
    95b0:	e1b08424 	lsrs	r8, r4, #8
  size_t rsize = -nb; /* Unsigned negation */
    95b4:	e2647000 	rsb	r7, r4, #0
  compute_tree_index(nb, idx);
    95b8:	1a00013e 	bne	9ab8 <malloc+0x980>
  if ((t = *treebin_at(m, idx)) != 0) {
    95bc:	e5963130 	ldr	r3, [r6, #304]	; 0x130
    95c0:	e3530000 	cmp	r3, #0
    95c4:	01a09007 	moveq	r9, r7
    95c8:	03e08001 	mvneq	r8, #1
    95cc:	0a0001f6 	beq	9dac <malloc+0xc74>
    95d0:	e3a0e019 	mov	lr, #25
    95d4:	e1a0ee14 	lsl	lr, r4, lr
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    95d8:	e3a05000 	mov	r5, #0
  tchunkptr v = 0;
    95dc:	e1a00005 	mov	r0, r5
    95e0:	ea000000 	b	95e8 <malloc+0x4b0>
      sizebits <<= 1;
    95e4:	e1a0e08e 	lsl	lr, lr, #1
      size_t trem = chunksize(t) - nb;
    95e8:	e5939004 	ldr	r9, [r3, #4]
    95ec:	e3c99007 	bic	r9, r9, #7
    95f0:	e0499004 	sub	r9, r9, r4
      if (trem < rsize) {
    95f4:	e1590007 	cmp	r9, r7
    95f8:	2a000003 	bcs	960c <malloc+0x4d4>
        if ((rsize = trem) == 0)
    95fc:	e3590000 	cmp	r9, #0
    9600:	0a000270 	beq	9fc8 <malloc+0xe90>
    9604:	e1a07009 	mov	r7, r9
    9608:	e1a00003 	mov	r0, r3
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    960c:	e1a02fae 	lsr	r2, lr, #31
      rt = t->child[1];
    9610:	e5939014 	ldr	r9, [r3, #20]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    9614:	e2822004 	add	r2, r2, #4
    9618:	e7933102 	ldr	r3, [r3, r2, lsl #2]
      if (rt != 0 && rt != t)
    961c:	e3590000 	cmp	r9, #0
    9620:	11590003 	cmpne	r9, r3
    9624:	11a05009 	movne	r5, r9
      if (t == 0) {
    9628:	e3530000 	cmp	r3, #0
    962c:	1affffec 	bne	95e4 <malloc+0x4ac>
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    9630:	e3550000 	cmp	r5, #0
    9634:	03500000 	cmpeq	r0, #0
    9638:	0a0001d8 	beq	9da0 <malloc+0xc68>
  while (t != 0) { /* find smallest of tree or subtree */
    963c:	e3550000 	cmp	r5, #0
    9640:	e1a09007 	mov	r9, r7
    9644:	11a03005 	movne	r3, r5
    9648:	1a000001 	bne	9654 <malloc+0x51c>
    964c:	ea00000c 	b	9684 <malloc+0x54c>
    9650:	e1a0300e 	mov	r3, lr
    size_t trem = chunksize(t) - nb;
    9654:	e5932004 	ldr	r2, [r3, #4]
    t = leftmost_child(t);
    9658:	e593e010 	ldr	lr, [r3, #16]
    size_t trem = chunksize(t) - nb;
    965c:	e3c22007 	bic	r2, r2, #7
    9660:	e0422004 	sub	r2, r2, r4
    if (trem < rsize) {
    9664:	e1520009 	cmp	r2, r9
    9668:	31a09002 	movcc	r9, r2
    966c:	31a00003 	movcc	r0, r3
    t = leftmost_child(t);
    9670:	e35e0000 	cmp	lr, #0
    9674:	1afffff5 	bne	9650 <malloc+0x518>
    9678:	e593e014 	ldr	lr, [r3, #20]
  while (t != 0) { /* find smallest of tree or subtree */
    967c:	e35e0000 	cmp	lr, #0
    9680:	1afffff2 	bne	9650 <malloc+0x518>
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
    9684:	e3500000 	cmp	r0, #0
    9688:	0afffef4 	beq	9260 <malloc+0x128>
    968c:	e0413004 	sub	r3, r1, r4
    9690:	e1530009 	cmp	r3, r9
    9694:	9afffef1 	bls	9260 <malloc+0x128>
    if (RTCHECK(ok_address(m, v))) { /* split */
    9698:	e5965010 	ldr	r5, [r6, #16]
    969c:	e1550000 	cmp	r5, r0
    96a0:	8a00007f 	bhi	98a4 <malloc+0x76c>
      assert(chunksize(v) == rsize + nb);
    96a4:	e590e004 	ldr	lr, [r0, #4]
    96a8:	e0843009 	add	r3, r4, r9
      mchunkptr r = chunk_plus_offset(v, nb);
    96ac:	e0807004 	add	r7, r0, r4
      assert(chunksize(v) == rsize + nb);
    96b0:	e3cee007 	bic	lr, lr, #7
    96b4:	e15e0003 	cmp	lr, r3
    96b8:	1a000079 	bne	98a4 <malloc+0x76c>
      if (RTCHECK(ok_next(v, r))) {
    96bc:	e1570000 	cmp	r7, r0
    96c0:	9a000077 	bls	98a4 <malloc+0x76c>
        unlink_large_chunk(m, v);
    96c4:	e590200c 	ldr	r2, [r0, #12]
    96c8:	e5908018 	ldr	r8, [r0, #24]
    96cc:	e1520000 	cmp	r2, r0
    96d0:	0a000254 	beq	a028 <malloc+0xef0>
    96d4:	e5903008 	ldr	r3, [r0, #8]
    96d8:	e1550003 	cmp	r5, r3
    96dc:	8a000070 	bhi	98a4 <malloc+0x76c>
    96e0:	e593100c 	ldr	r1, [r3, #12]
    96e4:	e1510000 	cmp	r1, r0
    96e8:	1a00006d 	bne	98a4 <malloc+0x76c>
    96ec:	e5921008 	ldr	r1, [r2, #8]
    96f0:	e1510000 	cmp	r1, r0
    96f4:	1a00006a 	bne	98a4 <malloc+0x76c>
    96f8:	e583200c 	str	r2, [r3, #12]
    96fc:	e5823008 	str	r3, [r2, #8]
    9700:	e3580000 	cmp	r8, #0
    9704:	0a00001e 	beq	9784 <malloc+0x64c>
    9708:	e590301c 	ldr	r3, [r0, #28]
    970c:	e283304c 	add	r3, r3, #76	; 0x4c
    9710:	e7961103 	ldr	r1, [r6, r3, lsl #2]
    9714:	e1510000 	cmp	r1, r0
    9718:	07862103 	streq	r2, [r6, r3, lsl #2]
    971c:	0a000007 	beq	9740 <malloc+0x608>
    9720:	e1550008 	cmp	r5, r8
    9724:	8a00005e 	bhi	98a4 <malloc+0x76c>
    9728:	e5983010 	ldr	r3, [r8, #16]
    972c:	e1530000 	cmp	r3, r0
    9730:	05882010 	streq	r2, [r8, #16]
    9734:	15882014 	strne	r2, [r8, #20]
    9738:	e3520000 	cmp	r2, #0
    973c:	0a000010 	beq	9784 <malloc+0x64c>
    9740:	e1550002 	cmp	r5, r2
    9744:	8a000056 	bhi	98a4 <malloc+0x76c>
    9748:	e5903010 	ldr	r3, [r0, #16]
    974c:	e5828018 	str	r8, [r2, #24]
    9750:	e3530000 	cmp	r3, #0
    9754:	0a000003 	beq	9768 <malloc+0x630>
    9758:	e1550003 	cmp	r5, r3
    975c:	8a000050 	bhi	98a4 <malloc+0x76c>
    9760:	e5823010 	str	r3, [r2, #16]
    9764:	e5832018 	str	r2, [r3, #24]
    9768:	e5903014 	ldr	r3, [r0, #20]
    976c:	e3530000 	cmp	r3, #0
    9770:	0a000003 	beq	9784 <malloc+0x64c>
    9774:	e1550003 	cmp	r5, r3
    9778:	8a000049 	bhi	98a4 <malloc+0x76c>
    977c:	e5823014 	str	r3, [r2, #20]
    9780:	e5832018 	str	r2, [r3, #24]
        if (rsize < MIN_CHUNK_SIZE)
    9784:	e359000f 	cmp	r9, #15
    9788:	8a000210 	bhi	9fd0 <malloc+0xe98>
          set_inuse_and_pinuse(m, v, (rsize + nb));
    978c:	e080200e 	add	r2, r0, lr
    9790:	e38ee003 	orr	lr, lr, #3
    9794:	e5923004 	ldr	r3, [r2, #4]
    9798:	e580e004 	str	lr, [r0, #4]
    979c:	e3833001 	orr	r3, r3, #1
    97a0:	e5823004 	str	r3, [r2, #4]
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    97a4:	e2900008 	adds	r0, r0, #8
    97a8:	1afffe92 	bne	91f8 <malloc+0xc0>
    97ac:	e5961008 	ldr	r1, [r6, #8]
    97b0:	eafffeaa 	b	9260 <malloc+0x128>
        unlink_first_small_chunk(gm, b, p, idx);
    97b4:	e3a01001 	mov	r1, #1
    97b8:	e1cc3311 	bic	r3, ip, r1, lsl r3
    97bc:	e5863000 	str	r3, [r6]
    97c0:	eafffe85 	b	91dc <malloc+0xa4>
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
    97c4:	e5961018 	ldr	r1, [r6, #24]
    97c8:	e3510000 	cmp	r1, #0
    97cc:	0a00000a 	beq	97fc <malloc+0x6c4>
  msegmentptr sp = &m->seg;
    97d0:	e59f9d34 	ldr	r9, [pc, #3380]	; a50c <malloc+0x13d4>
    if (addr >= sp->base && addr < sp->base + sp->size)
    97d4:	e5993000 	ldr	r3, [r9]
    97d8:	e1510003 	cmp	r1, r3
    97dc:	3a000003 	bcc	97f0 <malloc+0x6b8>
    97e0:	e5992004 	ldr	r2, [r9, #4]
    97e4:	e0833002 	add	r3, r3, r2
    97e8:	e1510003 	cmp	r1, r3
    97ec:	3a00018b 	bcc	9e20 <malloc+0xce8>
    if ((sp = sp->next) == 0)
    97f0:	e5999008 	ldr	r9, [r9, #8]
    97f4:	e3590000 	cmp	r9, #0
    97f8:	1afffff5 	bne	97d4 <malloc+0x69c>
      char* base = (char*)CALL_MORECORE(0);
    97fc:	e3a00000 	mov	r0, #0
    9800:	ebfffdba 	bl	8ef0 <sbrk>
      if (base != CMFAIL) {
    9804:	e3700001 	cmn	r0, #1
      char* base = (char*)CALL_MORECORE(0);
    9808:	e1a09000 	mov	r9, r0
      if (base != CMFAIL) {
    980c:	0a000017 	beq	9870 <malloc+0x738>
        if (!is_page_aligned(base))
    9810:	e5982004 	ldr	r2, [r8, #4]
    9814:	e2423001 	sub	r3, r2, #1
    9818:	e1100003 	tst	r0, r3
          ssize += (page_align((size_t)base) - (size_t)base);
    981c:	10837000 	addne	r7, r3, r0
    9820:	12622000 	rsbne	r2, r2, #0
    9824:	104a3000 	subne	r3, sl, r0
    9828:	10077002 	andne	r7, r7, r2
    982c:	10877003 	addne	r7, r7, r3
        if (!is_page_aligned(base))
    9830:	01a0700a 	moveq	r7, sl
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    9834:	e1570004 	cmp	r7, r4
    9838:	83a03001 	movhi	r3, #1
    983c:	93a03000 	movls	r3, #0
    9840:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
    9844:	83a03000 	movhi	r3, #0
    9848:	e3530000 	cmp	r3, #0
    984c:	0a000007 	beq	9870 <malloc+0x738>
            (m->footprint_limit == 0 ||
    9850:	e59631b8 	ldr	r3, [r6, #440]	; 0x1b8
        fp = m->footprint + ssize; /* recheck limits */
    9854:	e59621b0 	ldr	r2, [r6, #432]	; 0x1b0
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    9858:	e3530000 	cmp	r3, #0
    985c:	0a000324 	beq	a4f4 <malloc+0x13bc>
        fp = m->footprint + ssize; /* recheck limits */
    9860:	e0821007 	add	r1, r2, r7
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    9864:	e1510003 	cmp	r1, r3
    9868:	91520001 	cmpls	r2, r1
    986c:	3a000320 	bcc	a4f4 <malloc+0x13bc>
    9870:	e596e1bc 	ldr	lr, [r6, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
    9874:	e37a010a 	cmn	sl, #-2147483646	; 0x80000002
        disable_contiguous(m); /* Don't try contiguous path in the future */
    9878:	e38ee004 	orr	lr, lr, #4
    987c:	e586e1bc 	str	lr, [r6, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
    9880:	9affff0b 	bls	94b4 <malloc+0x37c>
    return 0; /* wraparound */
    9884:	e3a00000 	mov	r0, #0
    9888:	eafffe5a 	b	91f8 <malloc+0xc0>
      unlink_chunk(m, oldfirst, nsize);
    988c:	e5968010 	ldr	r8, [r6, #16]
    9890:	e15c0008 	cmp	ip, r8
    9894:	3a000002 	bcc	98a4 <malloc+0x76c>
    9898:	e59c800c 	ldr	r8, [ip, #12]
    989c:	e1580001 	cmp	r8, r1
    98a0:	0a000331 	beq	a56c <malloc+0x1434>
        assert(chunksize(p) == small_index2size(idx));
    98a4:	e3e00000 	mvn	r0, #0
    98a8:	ebfff9d4 	bl	8000 <exit>
        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
    98ac:	e5965004 	ldr	r5, [r6, #4]
    98b0:	e3550000 	cmp	r5, #0
    98b4:	0afffe6b 	beq	9268 <malloc+0x130>
  binmap_t leastbit = least_bit(m->treemap);
    98b8:	e2653000 	rsb	r3, r5, #0
    98bc:	e0033005 	and	r3, r3, r5
  compute_bit2idx(leastbit, i);
    98c0:	e2433001 	sub	r3, r3, #1
    98c4:	e1a02623 	lsr	r2, r3, #12
    98c8:	e2022010 	and	r2, r2, #16
    98cc:	e1a03233 	lsr	r3, r3, r2
    98d0:	e1a002a3 	lsr	r0, r3, #5
    98d4:	e2000008 	and	r0, r0, #8
    98d8:	e1a03033 	lsr	r3, r3, r0
    98dc:	e1822000 	orr	r2, r2, r0
    98e0:	e1a00123 	lsr	r0, r3, #2
    98e4:	e2000004 	and	r0, r0, #4
    98e8:	e1a03033 	lsr	r3, r3, r0
    98ec:	e0822000 	add	r2, r2, r0
    98f0:	e1a000a3 	lsr	r0, r3, #1
    98f4:	e2000002 	and	r0, r0, #2
    98f8:	e1a03033 	lsr	r3, r3, r0
    98fc:	e0822000 	add	r2, r2, r0
    9900:	e7e000d3 	ubfx	r0, r3, #1, #1
  v = t = *treebin_at(m, i);
    9904:	e0822000 	add	r2, r2, r0
    9908:	e0823033 	add	r3, r2, r3, lsr r0
    990c:	e283304c 	add	r3, r3, #76	; 0x4c
    9910:	e7967103 	ldr	r7, [r6, r3, lsl #2]
  rsize = chunksize(t) - nb;
    9914:	e597e004 	ldr	lr, [r7, #4]
    9918:	e1a00007 	mov	r0, r7
    991c:	e3cee007 	bic	lr, lr, #7
    9920:	e04ee004 	sub	lr, lr, r4
    9924:	ea000006 	b	9944 <malloc+0x80c>
    size_t trem = chunksize(t) - nb;
    9928:	e5923004 	ldr	r3, [r2, #4]
    if (trem < rsize) {
    992c:	e1a07002 	mov	r7, r2
    size_t trem = chunksize(t) - nb;
    9930:	e3c33007 	bic	r3, r3, #7
    9934:	e0433004 	sub	r3, r3, r4
    if (trem < rsize) {
    9938:	e153000e 	cmp	r3, lr
    993c:	31a0e003 	movcc	lr, r3
    9940:	31a00002 	movcc	r0, r2
  while ((t = leftmost_child(t)) != 0) {
    9944:	e5972010 	ldr	r2, [r7, #16]
    9948:	e3520000 	cmp	r2, #0
    994c:	1afffff5 	bne	9928 <malloc+0x7f0>
    9950:	e5972014 	ldr	r2, [r7, #20]
    9954:	e3520000 	cmp	r2, #0
    9958:	1afffff2 	bne	9928 <malloc+0x7f0>
  if (RTCHECK(ok_address(m, v))) {
    995c:	e596a010 	ldr	sl, [r6, #16]
    9960:	e15a0000 	cmp	sl, r0
    9964:	8affffce 	bhi	98a4 <malloc+0x76c>
    assert(chunksize(v) == rsize + nb);
    9968:	e5908004 	ldr	r8, [r0, #4]
    996c:	e084300e 	add	r3, r4, lr
    mchunkptr r = chunk_plus_offset(v, nb);
    9970:	e0809004 	add	r9, r0, r4
    assert(chunksize(v) == rsize + nb);
    9974:	e3c88007 	bic	r8, r8, #7
    9978:	e1580003 	cmp	r8, r3
    997c:	1affffc8 	bne	98a4 <malloc+0x76c>
    if (RTCHECK(ok_next(v, r))) {
    9980:	e1590000 	cmp	r9, r0
    9984:	9affffc6 	bls	98a4 <malloc+0x76c>
      unlink_large_chunk(m, v);
    9988:	e590700c 	ldr	r7, [r0, #12]
    998c:	e590b018 	ldr	fp, [r0, #24]
    9990:	e1570000 	cmp	r7, r0
    9994:	0a000248 	beq	a2bc <malloc+0x1184>
    9998:	e5903008 	ldr	r3, [r0, #8]
    999c:	e15a0003 	cmp	sl, r3
    99a0:	8affffbf 	bhi	98a4 <malloc+0x76c>
    99a4:	e593200c 	ldr	r2, [r3, #12]
    99a8:	e1520000 	cmp	r2, r0
    99ac:	1affffbc 	bne	98a4 <malloc+0x76c>
    99b0:	e5972008 	ldr	r2, [r7, #8]
    99b4:	e1520000 	cmp	r2, r0
    99b8:	1affffb9 	bne	98a4 <malloc+0x76c>
    99bc:	e583700c 	str	r7, [r3, #12]
    99c0:	e5873008 	str	r3, [r7, #8]
    99c4:	e35b0000 	cmp	fp, #0
    99c8:	0a00001e 	beq	9a48 <malloc+0x910>
    99cc:	e590301c 	ldr	r3, [r0, #28]
    99d0:	e283304c 	add	r3, r3, #76	; 0x4c
    99d4:	e7962103 	ldr	r2, [r6, r3, lsl #2]
    99d8:	e1520000 	cmp	r2, r0
    99dc:	07867103 	streq	r7, [r6, r3, lsl #2]
    99e0:	0a000007 	beq	9a04 <malloc+0x8cc>
    99e4:	e15a000b 	cmp	sl, fp
    99e8:	8affffad 	bhi	98a4 <malloc+0x76c>
    99ec:	e59b3010 	ldr	r3, [fp, #16]
    99f0:	e1530000 	cmp	r3, r0
    99f4:	058b7010 	streq	r7, [fp, #16]
    99f8:	158b7014 	strne	r7, [fp, #20]
    99fc:	e3570000 	cmp	r7, #0
    9a00:	0a000010 	beq	9a48 <malloc+0x910>
    9a04:	e15a0007 	cmp	sl, r7
    9a08:	8affffa5 	bhi	98a4 <malloc+0x76c>
    9a0c:	e5903010 	ldr	r3, [r0, #16]
    9a10:	e587b018 	str	fp, [r7, #24]
    9a14:	e3530000 	cmp	r3, #0
    9a18:	0a000003 	beq	9a2c <malloc+0x8f4>
    9a1c:	e15a0003 	cmp	sl, r3
    9a20:	8affff9f 	bhi	98a4 <malloc+0x76c>
    9a24:	e5873010 	str	r3, [r7, #16]
    9a28:	e5837018 	str	r7, [r3, #24]
    9a2c:	e5903014 	ldr	r3, [r0, #20]
    9a30:	e3530000 	cmp	r3, #0
    9a34:	0a000003 	beq	9a48 <malloc+0x910>
    9a38:	e15a0003 	cmp	sl, r3
    9a3c:	8affff98 	bhi	98a4 <malloc+0x76c>
    9a40:	e5873014 	str	r3, [r7, #20]
    9a44:	e5837018 	str	r7, [r3, #24]
      if (rsize < MIN_CHUNK_SIZE)
    9a48:	e35e000f 	cmp	lr, #15
    9a4c:	9a000213 	bls	a2a0 <malloc+0x1168>
        replace_dv(m, r, rsize);
    9a50:	e3510000 	cmp	r1, #0
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    9a54:	e3842003 	orr	r2, r4, #3
        set_size_and_pinuse_of_free_chunk(r, rsize);
    9a58:	e38e3001 	orr	r3, lr, #1
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    9a5c:	e5802004 	str	r2, [r0, #4]
        set_size_and_pinuse_of_free_chunk(r, rsize);
    9a60:	e5893004 	str	r3, [r9, #4]
    9a64:	e789e00e 	str	lr, [r9, lr]
        replace_dv(m, r, rsize);
    9a68:	0a00000f 	beq	9aac <malloc+0x974>
    9a6c:	e1a051a1 	lsr	r5, r1, #3
    9a70:	e351000f 	cmp	r1, #15
    9a74:	e5961014 	ldr	r1, [r6, #20]
    9a78:	e0863185 	add	r3, r6, r5, lsl #3
    9a7c:	e2833028 	add	r3, r3, #40	; 0x28
    9a80:	9affff87 	bls	98a4 <malloc+0x76c>
    9a84:	e3a02001 	mov	r2, #1
    9a88:	e1a02512 	lsl	r2, r2, r5
    9a8c:	e11c0002 	tst	ip, r2
    9a90:	1a0002f3 	bne	a664 <malloc+0x152c>
    9a94:	e18cc002 	orr	ip, ip, r2
    9a98:	e1a02003 	mov	r2, r3
    9a9c:	e586c000 	str	ip, [r6]
    9aa0:	e5831008 	str	r1, [r3, #8]
    9aa4:	e582100c 	str	r1, [r2, #12]
    9aa8:	e1c120f8 	strd	r2, [r1, #8]
    9aac:	e586e008 	str	lr, [r6, #8]
    9ab0:	e5869014 	str	r9, [r6, #20]
    9ab4:	eaffff3a 	b	97a4 <malloc+0x66c>
  compute_tree_index(nb, idx);
    9ab8:	e3580801 	cmp	r8, #65536	; 0x10000
    9abc:	3a000123 	bcc	9f50 <malloc+0xe18>
  if ((t = *treebin_at(m, idx)) != 0) {
    9ac0:	e59631ac 	ldr	r3, [r6, #428]	; 0x1ac
    9ac4:	e3530000 	cmp	r3, #0
    9ac8:	11a0e004 	movne	lr, r4
  compute_tree_index(nb, idx);
    9acc:	13a0801f 	movne	r8, #31
  if ((t = *treebin_at(m, idx)) != 0) {
    9ad0:	1afffec0 	bne	95d8 <malloc+0x4a0>
    9ad4:	eafffde1 	b	9260 <malloc+0x128>
            !is_extern_segment(sp) &&
    9ad8:	e593000c 	ldr	r0, [r3, #12]
    9adc:	e3100008 	tst	r0, #8
    9ae0:	1afffea5 	bne	957c <malloc+0x444>
          sp->size += tsize;
    9ae4:	e5930004 	ldr	r0, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    9ae8:	e2852008 	add	r2, r5, #8
    9aec:	e3120007 	tst	r2, #7
          sp->base = tbase;
    9af0:	e5835000 	str	r5, [r3]
          sp->size += tsize;
    9af4:	e0807007 	add	r7, r0, r7
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    9af8:	e3840003 	orr	r0, r4, #3
          sp->size += tsize;
    9afc:	e5837004 	str	r7, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    9b00:	12623000 	rsbne	r3, r2, #0
    9b04:	12033007 	andne	r3, r3, #7
    9b08:	10855003 	addne	r5, r5, r3
  mchunkptr oldfirst = align_as_chunk(oldbase);
    9b0c:	e2813008 	add	r3, r1, #8
    9b10:	e3130007 	tst	r3, #7
  mchunkptr q = chunk_plus_offset(p, nb);
    9b14:	e0852004 	add	r2, r5, r4
  mchunkptr oldfirst = align_as_chunk(oldbase);
    9b18:	12633000 	rsbne	r3, r3, #0
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    9b1c:	e5850004 	str	r0, [r5, #4]
  mchunkptr oldfirst = align_as_chunk(oldbase);
    9b20:	12033007 	andne	r3, r3, #7
    9b24:	10811003 	addne	r1, r1, r3
  assert((char*)oldfirst > (char*)q);
    9b28:	e1520001 	cmp	r2, r1
  size_t psize = (char*)oldfirst - (char*)p;
    9b2c:	e0413005 	sub	r3, r1, r5
  size_t qsize = psize - nb;
    9b30:	e0434004 	sub	r4, r3, r4
  assert((char*)oldfirst > (char*)q);
    9b34:	2affff5a 	bcs	98a4 <malloc+0x76c>
  assert(pinuse(oldfirst));
    9b38:	e5913004 	ldr	r3, [r1, #4]
    9b3c:	e3130001 	tst	r3, #1
    9b40:	0affff57 	beq	98a4 <malloc+0x76c>
  assert(qsize >= MIN_CHUNK_SIZE);
    9b44:	e354000f 	cmp	r4, #15
    9b48:	9affff55 	bls	98a4 <malloc+0x76c>
  if (oldfirst == m->top) {
    9b4c:	e15e0001 	cmp	lr, r1
    9b50:	0a000221 	beq	a3dc <malloc+0x12a4>
  else if (oldfirst == m->dv) {
    9b54:	e5960014 	ldr	r0, [r6, #20]
    9b58:	e1500001 	cmp	r0, r1
    9b5c:	0a00026c 	beq	a514 <malloc+0x13dc>
    if (!is_inuse(oldfirst)) {
    9b60:	e2030003 	and	r0, r3, #3
    9b64:	e3500001 	cmp	r0, #1
    9b68:	0a000271 	beq	a534 <malloc+0x13fc>
    insert_chunk(m, q, qsize);
    9b6c:	e1a001a4 	lsr	r0, r4, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    9b70:	e3c33001 	bic	r3, r3, #1
    9b74:	e5813004 	str	r3, [r1, #4]
    9b78:	e3843001 	orr	r3, r4, #1
    insert_chunk(m, q, qsize);
    9b7c:	e350001f 	cmp	r0, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    9b80:	e5823004 	str	r3, [r2, #4]
    9b84:	e5814000 	str	r4, [r1]
    insert_chunk(m, q, qsize);
    9b88:	8a00021a 	bhi	a3f8 <malloc+0x12c0>
    9b8c:	e0863180 	add	r3, r6, r0, lsl #3
    9b90:	e2833028 	add	r3, r3, #40	; 0x28
    9b94:	e3a01001 	mov	r1, #1
    9b98:	e596c000 	ldr	ip, [r6]
    9b9c:	e1a00011 	lsl	r0, r1, r0
    9ba0:	e11c0000 	tst	ip, r0
    9ba4:	1a000293 	bne	a5f8 <malloc+0x14c0>
    9ba8:	e1a01003 	mov	r1, r3
    9bac:	e18c0000 	orr	r0, ip, r0
    9bb0:	e5860000 	str	r0, [r6]
    9bb4:	e5832008 	str	r2, [r3, #8]
    9bb8:	e581200c 	str	r2, [r1, #12]
    9bbc:	e5821008 	str	r1, [r2, #8]
    9bc0:	e582300c 	str	r3, [r2, #12]
  return chunk2mem(p);
    9bc4:	e2850008 	add	r0, r5, #8
    9bc8:	eafffd8a 	b	91f8 <malloc+0xc0>
          !is_extern_segment(sp) &&
    9bcc:	e593c00c 	ldr	ip, [r3, #12]
    9bd0:	e31c0008 	tst	ip, #8
    9bd4:	1afffe5d 	bne	9550 <malloc+0x418>
          (sp->sflags & USE_MMAP_BIT) == mmap_flag &&
    9bd8:	e15e0001 	cmp	lr, r1
    9bdc:	3afffe5b 	bcc	9550 <malloc+0x418>
          segment_holds(sp, m->top)) { /* append */
    9be0:	e15e0005 	cmp	lr, r5
    9be4:	2afffe59 	bcs	9550 <malloc+0x418>
  size_t offset = align_offset(chunk2mem(p));
    9be8:	e28e1008 	add	r1, lr, #8
        init_top(m, m->top, m->topsize + tsize);
    9bec:	e596200c 	ldr	r2, [r6, #12]
  size_t offset = align_offset(chunk2mem(p));
    9bf0:	e3110007 	tst	r1, #7
        sp->size += tsize;
    9bf4:	e0800007 	add	r0, r0, r7
    9bf8:	e5830004 	str	r0, [r3, #4]
  size_t offset = align_offset(chunk2mem(p));
    9bfc:	12613000 	rsbne	r3, r1, #0
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9c00:	e5980010 	ldr	r0, [r8, #16]
        init_top(m, m->top, m->topsize + tsize);
    9c04:	e0877002 	add	r7, r7, r2
  size_t offset = align_offset(chunk2mem(p));
    9c08:	12033007 	andne	r3, r3, #7
    9c0c:	01a03007 	moveq	r3, r7
    9c10:	108e1003 	addne	r1, lr, r3
    9c14:	01a0100e 	moveq	r1, lr
    9c18:	10473003 	subne	r3, r7, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9c1c:	e08e7007 	add	r7, lr, r7
  p->head = psize | PINUSE_BIT;
    9c20:	e3832001 	orr	r2, r3, #1
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9c24:	e3a0c028 	mov	ip, #40	; 0x28
  m->top = p;
    9c28:	e5861018 	str	r1, [r6, #24]
  m->topsize = psize;
    9c2c:	e586300c 	str	r3, [r6, #12]
  p->head = psize | PINUSE_BIT;
    9c30:	e5812004 	str	r2, [r1, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9c34:	e587c004 	str	ip, [r7, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9c38:	e586001c 	str	r0, [r6, #28]
    if (nb < m->topsize) { /* Allocate from new or extended top space */
    9c3c:	e1540003 	cmp	r4, r3
    9c40:	3afffd8b 	bcc	9274 <malloc+0x13c>
    9c44:	eaffff0e 	b	9884 <malloc+0x74c>
  size_t offset = align_offset(chunk2mem(rawsp));
    9c48:	e2413027 	sub	r3, r1, #39	; 0x27
    9c4c:	e1a0c001 	mov	ip, r1
    9c50:	e3130007 	tst	r3, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9c54:	e5988010 	ldr	r8, [r8, #16]
  size_t offset = align_offset(chunk2mem(rawsp));
    9c58:	12639000 	rsbne	r9, r3, #0
    9c5c:	03e0902e 	mvneq	r9, #46	; 0x2e
    9c60:	12099007 	andne	r9, r9, #7
  size_t offset = align_offset(chunk2mem(p));
    9c64:	e2853008 	add	r3, r5, #8
    9c68:	1249902f 	subne	r9, r9, #47	; 0x2f
  char* asp = rawsp + offset;
    9c6c:	e0819009 	add	r9, r1, r9
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
    9c70:	e28e1010 	add	r1, lr, #16
    9c74:	e1590001 	cmp	r9, r1
    9c78:	31a0900e 	movcc	r9, lr
  size_t offset = align_offset(chunk2mem(p));
    9c7c:	e3130007 	tst	r3, #7
    9c80:	12633000 	rsbne	r3, r3, #0
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    9c84:	e2891008 	add	r1, r9, #8
  size_t offset = align_offset(chunk2mem(p));
    9c88:	12033007 	andne	r3, r3, #7
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    9c8c:	e58d1000 	str	r1, [sp]
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    9c90:	e2471028 	sub	r1, r7, #40	; 0x28
    9c94:	10850003 	addne	r0, r5, r3
  size_t offset = align_offset(chunk2mem(p));
    9c98:	01a03001 	moveq	r3, r1
    9c9c:	10413003 	subne	r3, r1, r3
  assert(is_aligned(ss));
    9ca0:	e289a008 	add	sl, r9, #8
  size_t offset = align_offset(chunk2mem(p));
    9ca4:	01a00005 	moveq	r0, r5
  m->topsize = psize;
    9ca8:	e586300c 	str	r3, [r6, #12]
  assert(is_aligned(ss));
    9cac:	e21ab007 	ands	fp, sl, #7
  p->head = psize | PINUSE_BIT;
    9cb0:	e3833001 	orr	r3, r3, #1
  m->top = p;
    9cb4:	e5860018 	str	r0, [r6, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9cb8:	e0851001 	add	r1, r5, r1
  p->head = psize | PINUSE_BIT;
    9cbc:	e5803004 	str	r3, [r0, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9cc0:	e3a03028 	mov	r3, #40	; 0x28
  assert(is_aligned(ss));
    9cc4:	e1a0a00b 	mov	sl, fp
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9cc8:	e5813004 	str	r3, [r1, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9ccc:	e586801c 	str	r8, [r6, #28]
  assert(is_aligned(ss));
    9cd0:	1afffef3 	bne	98a4 <malloc+0x76c>
  *ss = m->seg; /* Push current record */
    9cd4:	e892000f 	ldm	r2, {r0, r1, r2, r3}
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    9cd8:	e3a0b01b 	mov	fp, #27
    9cdc:	e289801c 	add	r8, r9, #28
  int nfences = 0;
    9ce0:	e58da004 	str	sl, [sp, #4]
    9ce4:	e58da000 	str	sl, [sp]
  *ss = m->seg; /* Push current record */
    9ce8:	e289a008 	add	sl, r9, #8
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    9cec:	e589b004 	str	fp, [r9, #4]
    p->head = FENCEPOST_HEAD;
    9cf0:	e3a0b007 	mov	fp, #7
  *ss = m->seg; /* Push current record */
    9cf4:	e88a000f 	stm	sl, {r0, r1, r2, r3}
  m->seg.sflags = mmapped;
    9cf8:	e59d3004 	ldr	r3, [sp, #4]
  m->seg.next = ss;
    9cfc:	e586a1c8 	str	sl, [r6, #456]	; 0x1c8
    9d00:	e1a0a003 	mov	sl, r3
  m->seg.base = tbase;
    9d04:	e58651c0 	str	r5, [r6, #448]	; 0x1c0
  m->seg.size = tsize;
    9d08:	e58671c4 	str	r7, [r6, #452]	; 0x1c4
  m->seg.sflags = mmapped;
    9d0c:	e58631cc 	str	r3, [r6, #460]	; 0x1cc
    p->head = FENCEPOST_HEAD;
    9d10:	e488b004 	str	fp, [r8], #4
    if ((char*)(&(nextp->head)) < old_end)
    9d14:	e15c0008 	cmp	ip, r8
    ++nfences;
    9d18:	e28aa001 	add	sl, sl, #1
    if ((char*)(&(nextp->head)) < old_end)
    9d1c:	8afffffb 	bhi	9d10 <malloc+0xbd8>
  assert(nfences >= 2);
    9d20:	e35a0001 	cmp	sl, #1
    9d24:	0afffede 	beq	98a4 <malloc+0x76c>
  if (csp != old_top) {
    9d28:	e15e0009 	cmp	lr, r9
    9d2c:	0a000117 	beq	a190 <malloc+0x1058>
    size_t psize = csp - old_top;
    9d30:	e049100e 	sub	r1, r9, lr
    set_free_with_pinuse(q, psize, tn);
    9d34:	e5993004 	ldr	r3, [r9, #4]
    insert_chunk(m, q, psize);
    9d38:	e1a021a1 	lsr	r2, r1, #3
    set_free_with_pinuse(q, psize, tn);
    9d3c:	e3810001 	orr	r0, r1, #1
    insert_chunk(m, q, psize);
    9d40:	e352001f 	cmp	r2, #31
    set_free_with_pinuse(q, psize, tn);
    9d44:	e3c33001 	bic	r3, r3, #1
    9d48:	e5893004 	str	r3, [r9, #4]
    9d4c:	e58e0004 	str	r0, [lr, #4]
    9d50:	e5891000 	str	r1, [r9]
    insert_chunk(m, q, psize);
    9d54:	8a0000c5 	bhi	a070 <malloc+0xf38>
    9d58:	e0863182 	add	r3, r6, r2, lsl #3
    9d5c:	e351000f 	cmp	r1, #15
    9d60:	e2833028 	add	r3, r3, #40	; 0x28
    9d64:	9afffece 	bls	98a4 <malloc+0x76c>
    9d68:	e3a01001 	mov	r1, #1
    9d6c:	e5960000 	ldr	r0, [r6]
    9d70:	e1a02211 	lsl	r2, r1, r2
    9d74:	e1100002 	tst	r0, r2
    9d78:	1a000135 	bne	a254 <malloc+0x111c>
    9d7c:	e1a01003 	mov	r1, r3
    9d80:	e1802002 	orr	r2, r0, r2
    9d84:	e5862000 	str	r2, [r6]
    9d88:	e583e008 	str	lr, [r3, #8]
    9d8c:	e581e00c 	str	lr, [r1, #12]
    9d90:	e58e300c 	str	r3, [lr, #12]
    9d94:	e58e1008 	str	r1, [lr, #8]
    9d98:	e596300c 	ldr	r3, [r6, #12]
    9d9c:	eaffffa6 	b	9c3c <malloc+0xb04>
    9da0:	e3e03001 	mvn	r3, #1
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    9da4:	e1a09007 	mov	r9, r7
    9da8:	e1a08813 	lsl	r8, r3, r8
    if (leftbits != 0) {
    9dac:	e01c8008 	ands	r8, ip, r8
    9db0:	0afffd2a 	beq	9260 <malloc+0x128>
      binmap_t leastbit = least_bit(leftbits);
    9db4:	e2683000 	rsb	r3, r8, #0
    9db8:	e0033008 	and	r3, r3, r8
      compute_bit2idx(leastbit, i);
    9dbc:	e2433001 	sub	r3, r3, #1
    9dc0:	e1a02623 	lsr	r2, r3, #12
    9dc4:	e2022010 	and	r2, r2, #16
    9dc8:	e1a03233 	lsr	r3, r3, r2
    9dcc:	e1a002a3 	lsr	r0, r3, #5
    9dd0:	e2000008 	and	r0, r0, #8
    9dd4:	e1a03033 	lsr	r3, r3, r0
    9dd8:	e1822000 	orr	r2, r2, r0
    9ddc:	e1a00123 	lsr	r0, r3, #2
    9de0:	e2000004 	and	r0, r0, #4
    9de4:	e1a03033 	lsr	r3, r3, r0
    9de8:	e0822000 	add	r2, r2, r0
    9dec:	e1a000a3 	lsr	r0, r3, #1
    9df0:	e2000002 	and	r0, r0, #2
    9df4:	e1a03033 	lsr	r3, r3, r0
    9df8:	e0822000 	add	r2, r2, r0
    9dfc:	e7e000d3 	ubfx	r0, r3, #1, #1
      t = *treebin_at(m, i);
    9e00:	e0822000 	add	r2, r2, r0
    9e04:	e0823033 	add	r3, r2, r3, lsr r0
    9e08:	e283304c 	add	r3, r3, #76	; 0x4c
    9e0c:	e7963103 	ldr	r3, [r6, r3, lsl #2]
  while (t != 0) { /* find smallest of tree or subtree */
    9e10:	e3530000 	cmp	r3, #0
    9e14:	13a00000 	movne	r0, #0
    9e18:	1afffe0d 	bne	9654 <malloc+0x51c>
    9e1c:	eafffd0f 	b	9260 <malloc+0x128>
      ssize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
    9e20:	e596700c 	ldr	r7, [r6, #12]
    9e24:	e04c7007 	sub	r7, ip, r7
    9e28:	e0877004 	add	r7, r7, r4
    9e2c:	e0077000 	and	r7, r7, r0
      if (ssize < HALF_MAX_SIZE_T &&
    9e30:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
    9e34:	8afffe8e 	bhi	9874 <malloc+0x73c>
    9e38:	e1a00007 	mov	r0, r7
    9e3c:	ebfffc2b 	bl	8ef0 <sbrk>
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    9e40:	e5992000 	ldr	r2, [r9]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9e44:	e3700001 	cmn	r0, #1
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    9e48:	e5991004 	ldr	r1, [r9, #4]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9e4c:	13a03000 	movne	r3, #0
    9e50:	03a03001 	moveq	r3, #1
      if (ssize < HALF_MAX_SIZE_T &&
    9e54:	e1a05000 	mov	r5, r0
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    9e58:	e0822001 	add	r2, r2, r1
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9e5c:	e1500002 	cmp	r0, r2
    9e60:	13833001 	orrne	r3, r3, #1
    9e64:	e3530000 	cmp	r3, #0
    9e68:	0afffda5 	beq	9504 <malloc+0x3cc>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
    9e6c:	e3750001 	cmn	r5, #1
    9e70:	0afffe7e 	beq	9870 <malloc+0x738>
            ssize < nb + SYS_ALLOC_PADDING) {
    9e74:	e2843030 	add	r3, r4, #48	; 0x30
        if (ssize < HALF_MAX_SIZE_T &&
    9e78:	e1530007 	cmp	r3, r7
    9e7c:	9afffda0 	bls	9504 <malloc+0x3cc>
          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);
    9e80:	e5983008 	ldr	r3, [r8, #8]
    9e84:	e267b000 	rsb	fp, r7, #0
    9e88:	e283902f 	add	r9, r3, #47	; 0x2f
    9e8c:	e2633000 	rsb	r3, r3, #0
    9e90:	e0899004 	add	r9, r9, r4
    9e94:	e0499007 	sub	r9, r9, r7
    9e98:	e0099003 	and	r9, r9, r3
          if (esize < HALF_MAX_SIZE_T) {
    9e9c:	e379010a 	cmn	r9, #-2147483646	; 0x80000002
    9ea0:	8afffd97 	bhi	9504 <malloc+0x3cc>
            char* end = (char*)CALL_MORECORE(esize);
    9ea4:	e1a00009 	mov	r0, r9
    9ea8:	ebfffc10 	bl	8ef0 <sbrk>
            if (end != CMFAIL)
    9eac:	e3700001 	cmn	r0, #1
              ssize += esize;
    9eb0:	10877009 	addne	r7, r7, r9
            if (end != CMFAIL)
    9eb4:	1afffd92 	bne	9504 <malloc+0x3cc>
              (void) CALL_MORECORE(-ssize);
    9eb8:	e1a0000b 	mov	r0, fp
    9ebc:	ebfffc0b 	bl	8ef0 <sbrk>
    9ec0:	eafffe6a 	b	9870 <malloc+0x738>
      if (m->least_addr == 0 || tbase < m->least_addr)
    9ec4:	e5962010 	ldr	r2, [r6, #16]
      m->seg.sflags = mmap_flag;
    9ec8:	e3a00000 	mov	r0, #0
      m->magic = mparams.magic;
    9ecc:	e598c000 	ldr	ip, [r8]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    9ed0:	e3e01000 	mvn	r1, #0
      m->seg.base = tbase;
    9ed4:	e58651c0 	str	r5, [r6, #448]	; 0x1c0
      if (m->least_addr == 0 || tbase < m->least_addr)
    9ed8:	e1520005 	cmp	r2, r5
      m->seg.size = tsize;
    9edc:	e58671c4 	str	r7, [r6, #452]	; 0x1c4
      if (m->least_addr == 0 || tbase < m->least_addr)
    9ee0:	93a03000 	movls	r3, #0
    9ee4:	83a03001 	movhi	r3, #1
    9ee8:	e3520000 	cmp	r2, #0
      m->magic = mparams.magic;
    9eec:	e586c024 	str	ip, [r6, #36]	; 0x24
      if (m->least_addr == 0 || tbase < m->least_addr)
    9ef0:	03a03001 	moveq	r3, #1
      m->seg.sflags = mmap_flag;
    9ef4:	e58601cc 	str	r0, [r6, #460]	; 0x1cc
      if (m->least_addr == 0 || tbase < m->least_addr)
    9ef8:	e3530000 	cmp	r3, #0
    9efc:	e59f360c 	ldr	r3, [pc, #1548]	; a510 <malloc+0x13d8>
        m->least_addr = tbase;
    9f00:	15865010 	strne	r5, [r6, #16]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    9f04:	e5861020 	str	r1, [r6, #32]
    9f08:	e2832c01 	add	r2, r3, #256	; 0x100
    bin->fd = bin->bk = bin;
    9f0c:	e583300c 	str	r3, [r3, #12]
    9f10:	e5833008 	str	r3, [r3, #8]
    9f14:	e2833008 	add	r3, r3, #8
  for (i = 0; i < NSMALLBINS; ++i) {
    9f18:	e1520003 	cmp	r2, r3
    9f1c:	1afffffa 	bne	9f0c <malloc+0xdd4>
  size_t offset = align_offset(chunk2mem(p));
    9f20:	e2853008 	add	r3, r5, #8
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    9f24:	e2477028 	sub	r7, r7, #40	; 0x28
  size_t offset = align_offset(chunk2mem(p));
    9f28:	e3130007 	tst	r3, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9f2c:	e5980010 	ldr	r0, [r8, #16]
  size_t offset = align_offset(chunk2mem(p));
    9f30:	12633000 	rsbne	r3, r3, #0
    9f34:	01a03007 	moveq	r3, r7
    9f38:	12033007 	andne	r3, r3, #7
    9f3c:	01a01005 	moveq	r1, r5
    9f40:	10851003 	addne	r1, r5, r3
    9f44:	10473003 	subne	r3, r7, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9f48:	e0857007 	add	r7, r5, r7
    9f4c:	eaffff33 	b	9c20 <malloc+0xae8>
  compute_tree_index(nb, idx);
    9f50:	e2483c01 	sub	r3, r8, #256	; 0x100
    9f54:	e1a03823 	lsr	r3, r3, #16
    9f58:	e2033008 	and	r3, r3, #8
    9f5c:	e1a08318 	lsl	r8, r8, r3
    9f60:	e2482a01 	sub	r2, r8, #4096	; 0x1000
    9f64:	e1a02822 	lsr	r2, r2, #16
    9f68:	e2022004 	and	r2, r2, #4
    9f6c:	e1a08218 	lsl	r8, r8, r2
    9f70:	e1833002 	orr	r3, r3, r2
    9f74:	e2482901 	sub	r2, r8, #16384	; 0x4000
    9f78:	e1a02822 	lsr	r2, r2, #16
    9f7c:	e2022002 	and	r2, r2, #2
    9f80:	e1a08218 	lsl	r8, r8, r2
    9f84:	e0833002 	add	r3, r3, r2
    9f88:	e06387a8 	rsb	r8, r3, r8, lsr #15
    9f8c:	e2883015 	add	r3, r8, #21
    9f90:	e288800e 	add	r8, r8, #14
    9f94:	e1a03334 	lsr	r3, r4, r3
    9f98:	e2033001 	and	r3, r3, #1
    9f9c:	e0838088 	add	r8, r3, r8, lsl #1
  if ((t = *treebin_at(m, idx)) != 0) {
    9fa0:	e288304c 	add	r3, r8, #76	; 0x4c
    9fa4:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    9fa8:	e3530000 	cmp	r3, #0
    9fac:	0affff7b 	beq	9da0 <malloc+0xc68>
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    9fb0:	e358001f 	cmp	r8, #31
    9fb4:	01a0e004 	moveq	lr, r4
    9fb8:	0afffd86 	beq	95d8 <malloc+0x4a0>
    9fbc:	e1a0e0a8 	lsr	lr, r8, #1
    9fc0:	e26ee019 	rsb	lr, lr, #25
    9fc4:	eafffd82 	b	95d4 <malloc+0x49c>
        if ((rsize = trem) == 0)
    9fc8:	e1a00003 	mov	r0, r3
    9fcc:	eafffda0 	b	9654 <malloc+0x51c>
          insert_chunk(m, r, rsize);
    9fd0:	e1a031a9 	lsr	r3, r9, #3
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    9fd4:	e3842003 	orr	r2, r4, #3
    9fd8:	e5802004 	str	r2, [r0, #4]
          set_size_and_pinuse_of_free_chunk(r, rsize);
    9fdc:	e3892001 	orr	r2, r9, #1
          insert_chunk(m, r, rsize);
    9fe0:	e353001f 	cmp	r3, #31
          set_size_and_pinuse_of_free_chunk(r, rsize);
    9fe4:	e5872004 	str	r2, [r7, #4]
    9fe8:	e7879009 	str	r9, [r7, r9]
          insert_chunk(m, r, rsize);
    9fec:	8a000069 	bhi	a198 <malloc+0x1060>
    9ff0:	e3a02001 	mov	r2, #1
    9ff4:	e5961000 	ldr	r1, [r6]
    9ff8:	e1a02312 	lsl	r2, r2, r3
    9ffc:	e0863183 	add	r3, r6, r3, lsl #3
    a000:	e1110002 	tst	r1, r2
    a004:	e2833028 	add	r3, r3, #40	; 0x28
    a008:	1a0000e5 	bne	a3a4 <malloc+0x126c>
    a00c:	e1811002 	orr	r1, r1, r2
    a010:	e1a02003 	mov	r2, r3
    a014:	e5861000 	str	r1, [r6]
    a018:	e5837008 	str	r7, [r3, #8]
    a01c:	e582700c 	str	r7, [r2, #12]
    a020:	e1c720f8 	strd	r2, [r7, #8]
    a024:	eafffdde 	b	97a4 <malloc+0x66c>
        unlink_large_chunk(m, v);
    a028:	e5901014 	ldr	r1, [r0, #20]
    a02c:	e3510000 	cmp	r1, #0
    a030:	12803014 	addne	r3, r0, #20
    a034:	0a000094 	beq	a28c <malloc+0x1154>
    a038:	e1a0c003 	mov	ip, r3
    a03c:	e1a03001 	mov	r3, r1
    a040:	e1a02001 	mov	r2, r1
    a044:	e5b31014 	ldr	r1, [r3, #20]!
    a048:	e3510000 	cmp	r1, #0
    a04c:	1afffff9 	bne	a038 <malloc+0xf00>
    a050:	e1a03002 	mov	r3, r2
    a054:	e5b31010 	ldr	r1, [r3, #16]!
    a058:	e3510000 	cmp	r1, #0
    a05c:	1afffff5 	bne	a038 <malloc+0xf00>
    a060:	e155000c 	cmp	r5, ip
    a064:	8afffe0e 	bhi	98a4 <malloc+0x76c>
    a068:	e58c1000 	str	r1, [ip]
    a06c:	eafffda3 	b	9700 <malloc+0x5c8>
    insert_chunk(m, q, psize);
    a070:	e1a03421 	lsr	r3, r1, #8
    a074:	e3530801 	cmp	r3, #65536	; 0x10000
    a078:	2a000070 	bcs	a240 <malloc+0x1108>
    a07c:	e2430c01 	sub	r0, r3, #256	; 0x100
    a080:	e3a02001 	mov	r2, #1
    a084:	e1a00820 	lsr	r0, r0, #16
    a088:	e2000008 	and	r0, r0, #8
    a08c:	e1a03013 	lsl	r3, r3, r0
    a090:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    a094:	e1a0c82c 	lsr	ip, ip, #16
    a098:	e20cc004 	and	ip, ip, #4
    a09c:	e1a03c13 	lsl	r3, r3, ip
    a0a0:	e180000c 	orr	r0, r0, ip
    a0a4:	e243c901 	sub	ip, r3, #16384	; 0x4000
    a0a8:	e1a0c82c 	lsr	ip, ip, #16
    a0ac:	e20cc002 	and	ip, ip, #2
    a0b0:	e1a03c13 	lsl	r3, r3, ip
    a0b4:	e080000c 	add	r0, r0, ip
    a0b8:	e06007a3 	rsb	r0, r0, r3, lsr #15
    a0bc:	e2803015 	add	r3, r0, #21
    a0c0:	e280000e 	add	r0, r0, #14
    a0c4:	e1a03331 	lsr	r3, r1, r3
    a0c8:	e0033002 	and	r3, r3, r2
    a0cc:	e0833210 	add	r3, r3, r0, lsl r2
    a0d0:	e283704c 	add	r7, r3, #76	; 0x4c
    a0d4:	e1a02312 	lsl	r2, r2, r3
    a0d8:	e1a05107 	lsl	r5, r7, #2
    a0dc:	e596c004 	ldr	ip, [r6, #4]
    a0e0:	e3a00000 	mov	r0, #0
    a0e4:	e58e301c 	str	r3, [lr, #28]
    a0e8:	e58e0014 	str	r0, [lr, #20]
    a0ec:	e112000c 	tst	r2, ip
    a0f0:	e58e0010 	str	r0, [lr, #16]
    a0f4:	0a00005b 	beq	a268 <malloc+0x1130>
    a0f8:	e353001f 	cmp	r3, #31
    a0fc:	e7960107 	ldr	r0, [r6, r7, lsl #2]
    a100:	11a020a3 	lsrne	r2, r3, #1
    a104:	01a02001 	moveq	r2, r1
    a108:	12622019 	rsbne	r2, r2, #25
    a10c:	11a02211 	lslne	r2, r1, r2
    a110:	ea000006 	b	a130 <malloc+0xff8>
    a114:	e1a03fa2 	lsr	r3, r2, #31
    a118:	e1a02082 	lsl	r2, r2, #1
    a11c:	e2833004 	add	r3, r3, #4
    a120:	e790c103 	ldr	ip, [r0, r3, lsl #2]
    a124:	e35c0000 	cmp	ip, #0
    a128:	0a0000a1 	beq	a3b4 <malloc+0x127c>
    a12c:	e1a0000c 	mov	r0, ip
    a130:	e5903004 	ldr	r3, [r0, #4]
    a134:	e3c33007 	bic	r3, r3, #7
    a138:	e1510003 	cmp	r1, r3
    a13c:	1afffff4 	bne	a114 <malloc+0xfdc>
    a140:	e5903008 	ldr	r3, [r0, #8]
    a144:	e5962010 	ldr	r2, [r6, #16]
    a148:	e1530002 	cmp	r3, r2
    a14c:	21500002 	cmpcs	r0, r2
    a150:	3afffdd3 	bcc	98a4 <malloc+0x76c>
    a154:	e3a02000 	mov	r2, #0
    a158:	e583e00c 	str	lr, [r3, #12]
    a15c:	e580e008 	str	lr, [r0, #8]
    a160:	e58e3008 	str	r3, [lr, #8]
    a164:	e58e000c 	str	r0, [lr, #12]
    a168:	e58e2018 	str	r2, [lr, #24]
    a16c:	e596300c 	ldr	r3, [r6, #12]
    a170:	eafffeb1 	b	9c3c <malloc+0xb04>
            replace_dv(gm, r, rsize);
    a174:	e593e008 	ldr	lr, [r3, #8]
    a178:	e5961010 	ldr	r1, [r6, #16]
    a17c:	e15e0001 	cmp	lr, r1
    a180:	2afffc96 	bcs	93e0 <malloc+0x2a8>
    a184:	eafffdc6 	b	98a4 <malloc+0x76c>
    a188:	e3811003 	orr	r1, r1, #3
    a18c:	eafffc24 	b	9224 <malloc+0xec>
    a190:	e596300c 	ldr	r3, [r6, #12]
    a194:	eafffea8 	b	9c3c <malloc+0xb04>
          insert_chunk(m, r, rsize);
    a198:	e1a03429 	lsr	r3, r9, #8
    a19c:	e3530801 	cmp	r3, #65536	; 0x10000
    a1a0:	2a00007a 	bcs	a390 <malloc+0x1258>
    a1a4:	e2431c01 	sub	r1, r3, #256	; 0x100
    a1a8:	e3a02001 	mov	r2, #1
    a1ac:	e1a01821 	lsr	r1, r1, #16
    a1b0:	e2011008 	and	r1, r1, #8
    a1b4:	e1a03113 	lsl	r3, r3, r1
    a1b8:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    a1bc:	e1a0c82c 	lsr	ip, ip, #16
    a1c0:	e20cc004 	and	ip, ip, #4
    a1c4:	e1a03c13 	lsl	r3, r3, ip
    a1c8:	e181100c 	orr	r1, r1, ip
    a1cc:	e243c901 	sub	ip, r3, #16384	; 0x4000
    a1d0:	e1a0c82c 	lsr	ip, ip, #16
    a1d4:	e20cc002 	and	ip, ip, #2
    a1d8:	e1a03c13 	lsl	r3, r3, ip
    a1dc:	e081100c 	add	r1, r1, ip
    a1e0:	e06117a3 	rsb	r1, r1, r3, lsr #15
    a1e4:	e2813015 	add	r3, r1, #21
    a1e8:	e281100e 	add	r1, r1, #14
    a1ec:	e1a03339 	lsr	r3, r9, r3
    a1f0:	e0033002 	and	r3, r3, r2
    a1f4:	e0833211 	add	r3, r3, r1, lsl r2
    a1f8:	e283804c 	add	r8, r3, #76	; 0x4c
    a1fc:	e1a02312 	lsl	r2, r2, r3
    a200:	e1a0e108 	lsl	lr, r8, #2
    a204:	e5961004 	ldr	r1, [r6, #4]
    a208:	e3a0c000 	mov	ip, #0
    a20c:	e587301c 	str	r3, [r7, #28]
    a210:	e587c014 	str	ip, [r7, #20]
    a214:	e1110002 	tst	r1, r2
    a218:	e587c010 	str	ip, [r7, #16]
    a21c:	1a00003e 	bne	a31c <malloc+0x11e4>
    a220:	e1811002 	orr	r1, r1, r2
    a224:	e086e00e 	add	lr, r6, lr
    a228:	e7867108 	str	r7, [r6, r8, lsl #2]
    a22c:	e5861004 	str	r1, [r6, #4]
    a230:	e587e018 	str	lr, [r7, #24]
    a234:	e587700c 	str	r7, [r7, #12]
    a238:	e5877008 	str	r7, [r7, #8]
    a23c:	eafffd58 	b	97a4 <malloc+0x66c>
    insert_chunk(m, q, psize);
    a240:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    a244:	e3a05f6b 	mov	r5, #428	; 0x1ac
    a248:	e3a0301f 	mov	r3, #31
    a24c:	e3a0706b 	mov	r7, #107	; 0x6b
    a250:	eaffffa1 	b	a0dc <malloc+0xfa4>
    a254:	e5931008 	ldr	r1, [r3, #8]
    a258:	e5962010 	ldr	r2, [r6, #16]
    a25c:	e1510002 	cmp	r1, r2
    a260:	2afffec8 	bcs	9d88 <malloc+0xc50>
    a264:	eafffd8e 	b	98a4 <malloc+0x76c>
    a268:	e182200c 	orr	r2, r2, ip
    a26c:	e0865005 	add	r5, r6, r5
    a270:	e786e107 	str	lr, [r6, r7, lsl #2]
    a274:	e596300c 	ldr	r3, [r6, #12]
    a278:	e5862004 	str	r2, [r6, #4]
    a27c:	e58e5018 	str	r5, [lr, #24]
    a280:	e58ee00c 	str	lr, [lr, #12]
    a284:	e58ee008 	str	lr, [lr, #8]
    a288:	eafffe6b 	b	9c3c <malloc+0xb04>
        unlink_large_chunk(m, v);
    a28c:	e5901010 	ldr	r1, [r0, #16]
    a290:	e3510000 	cmp	r1, #0
    a294:	0a0000e4 	beq	a62c <malloc+0x14f4>
    a298:	e2803010 	add	r3, r0, #16
    a29c:	eaffff65 	b	a038 <malloc+0xf00>
        set_inuse_and_pinuse(m, v, (rsize + nb));
    a2a0:	e0802008 	add	r2, r0, r8
    a2a4:	e3888003 	orr	r8, r8, #3
    a2a8:	e5923004 	ldr	r3, [r2, #4]
    a2ac:	e5808004 	str	r8, [r0, #4]
    a2b0:	e3833001 	orr	r3, r3, #1
    a2b4:	e5823004 	str	r3, [r2, #4]
    a2b8:	eafffd39 	b	97a4 <malloc+0x66c>
      unlink_large_chunk(m, v);
    a2bc:	e5903014 	ldr	r3, [r0, #20]
    a2c0:	e3530000 	cmp	r3, #0
    a2c4:	12802014 	addne	r2, r0, #20
    a2c8:	0a0000e9 	beq	a674 <malloc+0x153c>
  rsize = chunksize(t) - nb;
    a2cc:	e1a07003 	mov	r7, r3
    a2d0:	e1a05002 	mov	r5, r2
      unlink_large_chunk(m, v);
    a2d4:	e1a03007 	mov	r3, r7
    a2d8:	e5b32014 	ldr	r2, [r3, #20]!
    a2dc:	e3520000 	cmp	r2, #0
    a2e0:	0a000005 	beq	a2fc <malloc+0x11c4>
    a2e4:	e1a07002 	mov	r7, r2
    a2e8:	e1a05003 	mov	r5, r3
    a2ec:	e1a03007 	mov	r3, r7
    a2f0:	e5b32014 	ldr	r2, [r3, #20]!
    a2f4:	e3520000 	cmp	r2, #0
    a2f8:	1afffff9 	bne	a2e4 <malloc+0x11ac>
    a2fc:	e1a02007 	mov	r2, r7
    a300:	e5b23010 	ldr	r3, [r2, #16]!
    a304:	e3530000 	cmp	r3, #0
    a308:	1affffef 	bne	a2cc <malloc+0x1194>
    a30c:	e15a0005 	cmp	sl, r5
    a310:	8afffd63 	bhi	98a4 <malloc+0x76c>
    a314:	e5853000 	str	r3, [r5]
    a318:	eafffda9 	b	99c4 <malloc+0x88c>
          insert_chunk(m, r, rsize);
    a31c:	e353001f 	cmp	r3, #31
    a320:	e7961108 	ldr	r1, [r6, r8, lsl #2]
    a324:	11a020a3 	lsrne	r2, r3, #1
    a328:	01a02009 	moveq	r2, r9
    a32c:	12622019 	rsbne	r2, r2, #25
    a330:	11a02219 	lslne	r2, r9, r2
    a334:	ea000006 	b	a354 <malloc+0x121c>
    a338:	e1a03fa2 	lsr	r3, r2, #31
    a33c:	e1a02082 	lsl	r2, r2, #1
    a340:	e2833004 	add	r3, r3, #4
    a344:	e791c103 	ldr	ip, [r1, r3, lsl #2]
    a348:	e35c0000 	cmp	ip, #0
    a34c:	0a00009c 	beq	a5c4 <malloc+0x148c>
    a350:	e1a0100c 	mov	r1, ip
    a354:	e5913004 	ldr	r3, [r1, #4]
    a358:	e3c33007 	bic	r3, r3, #7
    a35c:	e1530009 	cmp	r3, r9
    a360:	1afffff4 	bne	a338 <malloc+0x1200>
    a364:	e5913008 	ldr	r3, [r1, #8]
    a368:	e1550001 	cmp	r5, r1
    a36c:	91550003 	cmpls	r5, r3
    a370:	8afffd4b 	bhi	98a4 <malloc+0x76c>
    a374:	e3a02000 	mov	r2, #0
    a378:	e583700c 	str	r7, [r3, #12]
    a37c:	e5817008 	str	r7, [r1, #8]
    a380:	e5873008 	str	r3, [r7, #8]
    a384:	e587100c 	str	r1, [r7, #12]
    a388:	e5872018 	str	r2, [r7, #24]
    a38c:	eafffd04 	b	97a4 <malloc+0x66c>
    a390:	e3a0ef6b 	mov	lr, #428	; 0x1ac
    a394:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    a398:	e3a0301f 	mov	r3, #31
    a39c:	e3a0806b 	mov	r8, #107	; 0x6b
    a3a0:	eaffff97 	b	a204 <malloc+0x10cc>
    a3a4:	e5932008 	ldr	r2, [r3, #8]
    a3a8:	e1550002 	cmp	r5, r2
    a3ac:	9affff19 	bls	a018 <malloc+0xee0>
    a3b0:	eafffd3b 	b	98a4 <malloc+0x76c>
    insert_chunk(m, q, psize);
    a3b4:	e5961010 	ldr	r1, [r6, #16]
    a3b8:	e0802103 	add	r2, r0, r3, lsl #2
    a3bc:	e1510002 	cmp	r1, r2
    a3c0:	8afffd37 	bhi	98a4 <malloc+0x76c>
    a3c4:	e780e103 	str	lr, [r0, r3, lsl #2]
    a3c8:	e596300c 	ldr	r3, [r6, #12]
    a3cc:	e58e0018 	str	r0, [lr, #24]
    a3d0:	e58ee00c 	str	lr, [lr, #12]
    a3d4:	e58ee008 	str	lr, [lr, #8]
    a3d8:	eafffe17 	b	9c3c <malloc+0xb04>
    size_t tsize = m->topsize += qsize;
    a3dc:	e596300c 	ldr	r3, [r6, #12]
    m->top = q;
    a3e0:	e5862018 	str	r2, [r6, #24]
    size_t tsize = m->topsize += qsize;
    a3e4:	e0844003 	add	r4, r4, r3
    q->head = tsize | PINUSE_BIT;
    a3e8:	e3843001 	orr	r3, r4, #1
    size_t tsize = m->topsize += qsize;
    a3ec:	e586400c 	str	r4, [r6, #12]
    q->head = tsize | PINUSE_BIT;
    a3f0:	e5823004 	str	r3, [r2, #4]
    a3f4:	eafffdf2 	b	9bc4 <malloc+0xa8c>
    insert_chunk(m, q, qsize);
    a3f8:	e1a01424 	lsr	r1, r4, #8
    a3fc:	e3510801 	cmp	r1, #65536	; 0x10000
    a400:	2a000077 	bcs	a5e4 <malloc+0x14ac>
    a404:	e2413c01 	sub	r3, r1, #256	; 0x100
    a408:	e3a00001 	mov	r0, #1
    a40c:	e1a03823 	lsr	r3, r3, #16
    a410:	e2033008 	and	r3, r3, #8
    a414:	e1a01311 	lsl	r1, r1, r3
    a418:	e241ca01 	sub	ip, r1, #4096	; 0x1000
    a41c:	e1a0c82c 	lsr	ip, ip, #16
    a420:	e20cc004 	and	ip, ip, #4
    a424:	e1a01c11 	lsl	r1, r1, ip
    a428:	e183300c 	orr	r3, r3, ip
    a42c:	e241c901 	sub	ip, r1, #16384	; 0x4000
    a430:	e1a0c82c 	lsr	ip, ip, #16
    a434:	e20cc002 	and	ip, ip, #2
    a438:	e1a01c11 	lsl	r1, r1, ip
    a43c:	e083300c 	add	r3, r3, ip
    a440:	e06337a1 	rsb	r3, r3, r1, lsr #15
    a444:	e2831015 	add	r1, r3, #21
    a448:	e283300e 	add	r3, r3, #14
    a44c:	e1a01134 	lsr	r1, r4, r1
    a450:	e0011000 	and	r1, r1, r0
    a454:	e0811013 	add	r1, r1, r3, lsl r0
    a458:	e281e04c 	add	lr, r1, #76	; 0x4c
    a45c:	e1a00110 	lsl	r0, r0, r1
    a460:	e1a0710e 	lsl	r7, lr, #2
    a464:	e596c004 	ldr	ip, [r6, #4]
    a468:	e3a03000 	mov	r3, #0
    a46c:	e582101c 	str	r1, [r2, #28]
    a470:	e5823014 	str	r3, [r2, #20]
    a474:	e110000c 	tst	r0, ip
    a478:	e5823010 	str	r3, [r2, #16]
    a47c:	0a000062 	beq	a60c <malloc+0x14d4>
    a480:	e351001f 	cmp	r1, #31
    a484:	e796010e 	ldr	r0, [r6, lr, lsl #2]
    a488:	11a030a1 	lsrne	r3, r1, #1
    a48c:	12633019 	rsbne	r3, r3, #25
    a490:	e1a01314 	lsl	r1, r4, r3
    a494:	ea000006 	b	a4b4 <malloc+0x137c>
    a498:	e1a03fa1 	lsr	r3, r1, #31
    a49c:	e1a01081 	lsl	r1, r1, #1
    a4a0:	e2833004 	add	r3, r3, #4
    a4a4:	e790c103 	ldr	ip, [r0, r3, lsl #2]
    a4a8:	e35c0000 	cmp	ip, #0
    a4ac:	0a0000a8 	beq	a754 <malloc+0x161c>
    a4b0:	e1a0000c 	mov	r0, ip
    a4b4:	e5903004 	ldr	r3, [r0, #4]
    a4b8:	e3c33007 	bic	r3, r3, #7
    a4bc:	e1540003 	cmp	r4, r3
    a4c0:	1afffff4 	bne	a498 <malloc+0x1360>
    a4c4:	e5961010 	ldr	r1, [r6, #16]
    a4c8:	e5903008 	ldr	r3, [r0, #8]
    a4cc:	e1530001 	cmp	r3, r1
    a4d0:	21500001 	cmpcs	r0, r1
    a4d4:	3afffcf2 	bcc	98a4 <malloc+0x76c>
    a4d8:	e3a01000 	mov	r1, #0
    a4dc:	e583200c 	str	r2, [r3, #12]
    a4e0:	e5802008 	str	r2, [r0, #8]
    a4e4:	e5823008 	str	r3, [r2, #8]
    a4e8:	e582000c 	str	r0, [r2, #12]
    a4ec:	e5821018 	str	r1, [r2, #24]
    a4f0:	eafffdb3 	b	9bc4 <malloc+0xa8c>
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    a4f4:	e1a00007 	mov	r0, r7
    a4f8:	ebfffa7c 	bl	8ef0 <sbrk>
    a4fc:	e1590000 	cmp	r9, r0
    a500:	e1a05000 	mov	r5, r0
    a504:	1afffe58 	bne	9e6c <malloc+0xd34>
    a508:	eafffbfd 	b	9504 <malloc+0x3cc>
    a50c:	000132b0 	.word	0x000132b0
    a510:	00013118 	.word	0x00013118
    size_t dsize = m->dvsize += qsize;
    a514:	e5963008 	ldr	r3, [r6, #8]
    m->dv = q;
    a518:	e5862014 	str	r2, [r6, #20]
    size_t dsize = m->dvsize += qsize;
    a51c:	e0844003 	add	r4, r4, r3
    set_size_and_pinuse_of_free_chunk(q, dsize);
    a520:	e3843001 	orr	r3, r4, #1
    size_t dsize = m->dvsize += qsize;
    a524:	e5864008 	str	r4, [r6, #8]
    set_size_and_pinuse_of_free_chunk(q, dsize);
    a528:	e5823004 	str	r3, [r2, #4]
    a52c:	e7824004 	str	r4, [r2, r4]
    a530:	eafffda3 	b	9bc4 <malloc+0xa8c>
      size_t nsize = chunksize(oldfirst);
    a534:	e3c33007 	bic	r3, r3, #7
    a538:	e591000c 	ldr	r0, [r1, #12]
      unlink_chunk(m, oldfirst, nsize);
    a53c:	e1a0e1a3 	lsr	lr, r3, #3
    a540:	e35e001f 	cmp	lr, #31
    a544:	8a00004f 	bhi	a688 <malloc+0x1550>
    a548:	e1500001 	cmp	r0, r1
    a54c:	e591c008 	ldr	ip, [r1, #8]
    a550:	0afffcd3 	beq	98a4 <malloc+0x76c>
    a554:	e15c0001 	cmp	ip, r1
    a558:	0afffcd1 	beq	98a4 <malloc+0x76c>
    a55c:	e086718e 	add	r7, r6, lr, lsl #3
    a560:	e2877028 	add	r7, r7, #40	; 0x28
    a564:	e15c0007 	cmp	ip, r7
    a568:	1afffcc7 	bne	988c <malloc+0x754>
    a56c:	e15c0000 	cmp	ip, r0
    a570:	0a0000a2 	beq	a800 <malloc+0x16c8>
    a574:	e1570000 	cmp	r7, r0
    a578:	1a0000b7 	bne	a85c <malloc+0x1724>
    a57c:	e58c000c 	str	r0, [ip, #12]
    a580:	e580c008 	str	ip, [r0, #8]
      qsize += nsize;
    a584:	e0844003 	add	r4, r4, r3
      oldfirst = chunk_plus_offset(oldfirst, nsize);
    a588:	e0811003 	add	r1, r1, r3
    set_free_with_pinuse(q, qsize, oldfirst);
    a58c:	e5913004 	ldr	r3, [r1, #4]
    insert_chunk(m, q, qsize);
    a590:	e1a001a4 	lsr	r0, r4, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    a594:	e384c001 	orr	ip, r4, #1
    insert_chunk(m, q, qsize);
    a598:	e350001f 	cmp	r0, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    a59c:	e3c33001 	bic	r3, r3, #1
    a5a0:	e5813004 	str	r3, [r1, #4]
    a5a4:	e582c004 	str	ip, [r2, #4]
    a5a8:	e7824004 	str	r4, [r2, r4]
    insert_chunk(m, q, qsize);
    a5ac:	8affff91 	bhi	a3f8 <malloc+0x12c0>
    a5b0:	e0863180 	add	r3, r6, r0, lsl #3
    a5b4:	e354000f 	cmp	r4, #15
    a5b8:	e2833028 	add	r3, r3, #40	; 0x28
    a5bc:	8afffd74 	bhi	9b94 <malloc+0xa5c>
    a5c0:	eafffcb7 	b	98a4 <malloc+0x76c>
          insert_chunk(m, r, rsize);
    a5c4:	e0812103 	add	r2, r1, r3, lsl #2
    a5c8:	e1550002 	cmp	r5, r2
    a5cc:	8afffcb4 	bhi	98a4 <malloc+0x76c>
    a5d0:	e7817103 	str	r7, [r1, r3, lsl #2]
    a5d4:	e5871018 	str	r1, [r7, #24]
    a5d8:	e587700c 	str	r7, [r7, #12]
    a5dc:	e5877008 	str	r7, [r7, #8]
    a5e0:	eafffc6f 	b	97a4 <malloc+0x66c>
    insert_chunk(m, q, qsize);
    a5e4:	e3a07f6b 	mov	r7, #428	; 0x1ac
    a5e8:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
    a5ec:	e3a0101f 	mov	r1, #31
    a5f0:	e3a0e06b 	mov	lr, #107	; 0x6b
    a5f4:	eaffff9a 	b	a464 <malloc+0x132c>
    a5f8:	e5960010 	ldr	r0, [r6, #16]
    a5fc:	e5931008 	ldr	r1, [r3, #8]
    a600:	e1510000 	cmp	r1, r0
    a604:	2afffd6a 	bcs	9bb4 <malloc+0xa7c>
    a608:	eafffca5 	b	98a4 <malloc+0x76c>
    a60c:	e180000c 	orr	r0, r0, ip
    a610:	e0867007 	add	r7, r6, r7
    a614:	e786210e 	str	r2, [r6, lr, lsl #2]
    a618:	e5860004 	str	r0, [r6, #4]
    a61c:	e5827018 	str	r7, [r2, #24]
    a620:	e582200c 	str	r2, [r2, #12]
    a624:	e5822008 	str	r2, [r2, #8]
    a628:	eafffd65 	b	9bc4 <malloc+0xa8c>
        unlink_large_chunk(m, v);
    a62c:	e3580000 	cmp	r8, #0
    a630:	0afffc53 	beq	9784 <malloc+0x64c>
    a634:	e590101c 	ldr	r1, [r0, #28]
    a638:	e281304c 	add	r3, r1, #76	; 0x4c
    a63c:	e7962103 	ldr	r2, [r6, r3, lsl #2]
    a640:	e1520000 	cmp	r2, r0
    a644:	13a02000 	movne	r2, #0
    a648:	1afffc34 	bne	9720 <malloc+0x5e8>
    a64c:	e3a08001 	mov	r8, #1
    a650:	e3a02000 	mov	r2, #0
    a654:	e1ccc118 	bic	ip, ip, r8, lsl r1
    a658:	e7862103 	str	r2, [r6, r3, lsl #2]
    a65c:	e586c004 	str	ip, [r6, #4]
    a660:	eafffc47 	b	9784 <malloc+0x64c>
        replace_dv(m, r, rsize);
    a664:	e5932008 	ldr	r2, [r3, #8]
    a668:	e15a0002 	cmp	sl, r2
    a66c:	9afffd0b 	bls	9aa0 <malloc+0x968>
    a670:	eafffc8b 	b	98a4 <malloc+0x76c>
      unlink_large_chunk(m, v);
    a674:	e5903010 	ldr	r3, [r0, #16]
    a678:	e3530000 	cmp	r3, #0
    a67c:	0a00003d 	beq	a778 <malloc+0x1640>
    a680:	e2802010 	add	r2, r0, #16
    a684:	eaffff10 	b	a2cc <malloc+0x1194>
      unlink_chunk(m, oldfirst, nsize);
    a688:	e1500001 	cmp	r0, r1
    a68c:	e5918018 	ldr	r8, [r1, #24]
    a690:	0a000046 	beq	a7b0 <malloc+0x1678>
    a694:	e591c008 	ldr	ip, [r1, #8]
    a698:	e596e010 	ldr	lr, [r6, #16]
    a69c:	e15c000e 	cmp	ip, lr
    a6a0:	3afffc7f 	bcc	98a4 <malloc+0x76c>
    a6a4:	e59ce00c 	ldr	lr, [ip, #12]
    a6a8:	e15e0001 	cmp	lr, r1
    a6ac:	1afffc7c 	bne	98a4 <malloc+0x76c>
    a6b0:	e5907008 	ldr	r7, [r0, #8]
    a6b4:	e15e0007 	cmp	lr, r7
    a6b8:	1afffc79 	bne	98a4 <malloc+0x76c>
    a6bc:	e58c000c 	str	r0, [ip, #12]
    a6c0:	e580c008 	str	ip, [r0, #8]
    a6c4:	e3580000 	cmp	r8, #0
    a6c8:	0affffad 	beq	a584 <malloc+0x144c>
    a6cc:	e591c01c 	ldr	ip, [r1, #28]
    a6d0:	e28cc04c 	add	ip, ip, #76	; 0x4c
    a6d4:	e796e10c 	ldr	lr, [r6, ip, lsl #2]
    a6d8:	e15e0001 	cmp	lr, r1
    a6dc:	0786010c 	streq	r0, [r6, ip, lsl #2]
    a6e0:	0a000008 	beq	a708 <malloc+0x15d0>
    a6e4:	e596c010 	ldr	ip, [r6, #16]
    a6e8:	e158000c 	cmp	r8, ip
    a6ec:	3afffc6c 	bcc	98a4 <malloc+0x76c>
    a6f0:	e598c010 	ldr	ip, [r8, #16]
    a6f4:	e15c0001 	cmp	ip, r1
    a6f8:	05880010 	streq	r0, [r8, #16]
    a6fc:	15880014 	strne	r0, [r8, #20]
    a700:	e3500000 	cmp	r0, #0
    a704:	0affff9e 	beq	a584 <malloc+0x144c>
    a708:	e596e010 	ldr	lr, [r6, #16]
    a70c:	e150000e 	cmp	r0, lr
    a710:	3afffc63 	bcc	98a4 <malloc+0x76c>
    a714:	e591c010 	ldr	ip, [r1, #16]
    a718:	e5808018 	str	r8, [r0, #24]
    a71c:	e35c0000 	cmp	ip, #0
    a720:	0a000003 	beq	a734 <malloc+0x15fc>
    a724:	e15e000c 	cmp	lr, ip
    a728:	8afffc5d 	bhi	98a4 <malloc+0x76c>
    a72c:	e580c010 	str	ip, [r0, #16]
    a730:	e58c0018 	str	r0, [ip, #24]
    a734:	e591c014 	ldr	ip, [r1, #20]
    a738:	e35c0000 	cmp	ip, #0
    a73c:	0affff90 	beq	a584 <malloc+0x144c>
    a740:	e15e000c 	cmp	lr, ip
    a744:	8afffc56 	bhi	98a4 <malloc+0x76c>
    a748:	e580c014 	str	ip, [r0, #20]
    a74c:	e58c0018 	str	r0, [ip, #24]
    a750:	eaffff8b 	b	a584 <malloc+0x144c>
    insert_chunk(m, q, qsize);
    a754:	e596c010 	ldr	ip, [r6, #16]
    a758:	e0801103 	add	r1, r0, r3, lsl #2
    a75c:	e15c0001 	cmp	ip, r1
    a760:	8afffc4f 	bhi	98a4 <malloc+0x76c>
    a764:	e7802103 	str	r2, [r0, r3, lsl #2]
    a768:	e5820018 	str	r0, [r2, #24]
    a76c:	e582200c 	str	r2, [r2, #12]
    a770:	e5822008 	str	r2, [r2, #8]
    a774:	eafffd12 	b	9bc4 <malloc+0xa8c>
      unlink_large_chunk(m, v);
    a778:	e35b0000 	cmp	fp, #0
    a77c:	0afffcb1 	beq	9a48 <malloc+0x910>
    a780:	e590201c 	ldr	r2, [r0, #28]
    a784:	e282304c 	add	r3, r2, #76	; 0x4c
    a788:	e7967103 	ldr	r7, [r6, r3, lsl #2]
    a78c:	e1500007 	cmp	r0, r7
    a790:	13a07000 	movne	r7, #0
    a794:	1afffc92 	bne	99e4 <malloc+0x8ac>
    a798:	e3a0b001 	mov	fp, #1
    a79c:	e3a07000 	mov	r7, #0
    a7a0:	e1c5521b 	bic	r5, r5, fp, lsl r2
    a7a4:	e7867103 	str	r7, [r6, r3, lsl #2]
    a7a8:	e5865004 	str	r5, [r6, #4]
    a7ac:	eafffca5 	b	9a48 <malloc+0x910>
      unlink_chunk(m, oldfirst, nsize);
    a7b0:	e5910014 	ldr	r0, [r1, #20]
    a7b4:	e281c014 	add	ip, r1, #20
    a7b8:	e3500000 	cmp	r0, #0
    a7bc:	0a000014 	beq	a814 <malloc+0x16dc>
  size_t offset = align_offset(chunk2mem(p));
    a7c0:	e1a0e000 	mov	lr, r0
      unlink_chunk(m, oldfirst, nsize);
    a7c4:	e1a0700c 	mov	r7, ip
    a7c8:	e1a0c00e 	mov	ip, lr
    a7cc:	e1a0000e 	mov	r0, lr
    a7d0:	e5bce014 	ldr	lr, [ip, #20]!
    a7d4:	e35e0000 	cmp	lr, #0
    a7d8:	1afffff9 	bne	a7c4 <malloc+0x168c>
    a7dc:	e1a0c000 	mov	ip, r0
    a7e0:	e5bce010 	ldr	lr, [ip, #16]!
    a7e4:	e35e0000 	cmp	lr, #0
    a7e8:	1afffff5 	bne	a7c4 <malloc+0x168c>
    a7ec:	e596c010 	ldr	ip, [r6, #16]
    a7f0:	e15c0007 	cmp	ip, r7
    a7f4:	8afffc2a 	bhi	98a4 <malloc+0x76c>
    a7f8:	e587e000 	str	lr, [r7]
    a7fc:	eaffffb0 	b	a6c4 <malloc+0x158c>
    a800:	e5960000 	ldr	r0, [r6]
    a804:	e3a0c001 	mov	ip, #1
    a808:	e1c0ee1c 	bic	lr, r0, ip, lsl lr
    a80c:	e586e000 	str	lr, [r6]
    a810:	eaffff5b 	b	a584 <malloc+0x144c>
    a814:	e5910010 	ldr	r0, [r1, #16]
    a818:	e281c010 	add	ip, r1, #16
    a81c:	e3500000 	cmp	r0, #0
    a820:	1affffe6 	bne	a7c0 <malloc+0x1688>
    a824:	e3580000 	cmp	r8, #0
    a828:	0affff55 	beq	a584 <malloc+0x144c>
    a82c:	e591c01c 	ldr	ip, [r1, #28]
    a830:	e28ce04c 	add	lr, ip, #76	; 0x4c
    a834:	e796710e 	ldr	r7, [r6, lr, lsl #2]
    a838:	e1570001 	cmp	r7, r1
    a83c:	1affffa8 	bne	a6e4 <malloc+0x15ac>
    a840:	e5960004 	ldr	r0, [r6, #4]
    a844:	e3a07001 	mov	r7, #1
    a848:	e3a08000 	mov	r8, #0
    a84c:	e786810e 	str	r8, [r6, lr, lsl #2]
    a850:	e1c00c17 	bic	r0, r0, r7, lsl ip
    a854:	e5860004 	str	r0, [r6, #4]
    a858:	eaffff49 	b	a584 <malloc+0x144c>
    a85c:	e596e010 	ldr	lr, [r6, #16]
    a860:	e15e0000 	cmp	lr, r0
    a864:	8afffc0e 	bhi	98a4 <malloc+0x76c>
    a868:	e590e008 	ldr	lr, [r0, #8]
    a86c:	e15e0001 	cmp	lr, r1
    a870:	0affff41 	beq	a57c <malloc+0x1444>
    a874:	eafffc0a 	b	98a4 <malloc+0x76c>
  ensure_initialization();
    a878:	e30382c8 	movw	r8, #13000	; 0x32c8
    a87c:	e3408001 	movt	r8, #1
    a880:	e5983000 	ldr	r3, [r8]
    a884:	e3530000 	cmp	r3, #0
    a888:	1afffaf1 	bne	9454 <malloc+0x31c>
    a88c:	eafffaef 	b	9450 <malloc+0x318>

0000a890 <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
    a890:	e3500000 	cmp	r0, #0
    a894:	012fff1e 	bxeq	lr
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    a898:	e30310f0 	movw	r1, #12528	; 0x30f0
void dlfree(void* mem) {
    a89c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    a8a0:	e3401001 	movt	r1, #1
    mchunkptr p  = mem2chunk(mem);
    a8a4:	e2402008 	sub	r2, r0, #8
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    a8a8:	e591e010 	ldr	lr, [r1, #16]
    a8ac:	e15e0002 	cmp	lr, r2
    a8b0:	8a00004a 	bhi	a9e0 <free+0x150>
    a8b4:	e5103004 	ldr	r3, [r0, #-4]
    a8b8:	e2034003 	and	r4, r3, #3
    a8bc:	e3540001 	cmp	r4, #1
    a8c0:	0a000046 	beq	a9e0 <free+0x150>
        size_t psize = chunksize(p);
        mchunkptr next = chunk_plus_offset(p, psize);
        if (!pinuse(p)) {
    a8c4:	e3130001 	tst	r3, #1
        size_t psize = chunksize(p);
    a8c8:	e3c33007 	bic	r3, r3, #7
        mchunkptr next = chunk_plus_offset(p, psize);
    a8cc:	e082c003 	add	ip, r2, r3
        if (!pinuse(p)) {
    a8d0:	0a00001f 	beq	a954 <free+0xc4>
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
    a8d4:	e152000c 	cmp	r2, ip
    a8d8:	2a000040 	bcs	a9e0 <free+0x150>
    a8dc:	e59c0004 	ldr	r0, [ip, #4]
    a8e0:	e3100001 	tst	r0, #1
    a8e4:	0a00003d 	beq	a9e0 <free+0x150>
          if (!cinuse(next)) {  /* consolidate forward */
    a8e8:	e2104002 	ands	r4, r0, #2
    a8ec:	0a00003d 	beq	a9e8 <free+0x158>
                goto postaction;
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
    a8f0:	e3c00001 	bic	r0, r0, #1
    a8f4:	e383e001 	orr	lr, r3, #1
    a8f8:	e58c0004 	str	r0, [ip, #4]
    a8fc:	e582e004 	str	lr, [r2, #4]
    a900:	e7823003 	str	r3, [r2, r3]

          if (is_small(psize)) {
    a904:	e1a001a3 	lsr	r0, r3, #3
    a908:	e350001f 	cmp	r0, #31
    a90c:	8a00007e 	bhi	ab0c <free+0x27c>
            insert_small_chunk(fm, p, psize);
    a910:	e353000f 	cmp	r3, #15
    a914:	e0813180 	add	r3, r1, r0, lsl #3
    a918:	e2833028 	add	r3, r3, #40	; 0x28
    a91c:	9a000078 	bls	ab04 <free+0x274>
    a920:	e3a0c001 	mov	ip, #1
    a924:	e591e000 	ldr	lr, [r1]
    a928:	e1a0001c 	lsl	r0, ip, r0
    a92c:	e11e0000 	tst	lr, r0
    a930:	1a00006f 	bne	aaf4 <free+0x264>
    a934:	e1a0c003 	mov	ip, r3
    a938:	e18e0000 	orr	r0, lr, r0
    a93c:	e5810000 	str	r0, [r1]
    a940:	e5832008 	str	r2, [r3, #8]
    a944:	e58c200c 	str	r2, [ip, #12]
    a948:	e582c008 	str	ip, [r2, #8]
    a94c:	e582300c 	str	r3, [r2, #12]
    a950:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
          if (is_mmapped(p)) {
    a954:	e3540000 	cmp	r4, #0
    a958:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
          size_t prevsize = p->prev_foot;
    a95c:	e5104008 	ldr	r4, [r0, #-8]
            mchunkptr prev = chunk_minus_offset(p, prevsize);
    a960:	e0422004 	sub	r2, r2, r4
            psize += prevsize;
    a964:	e0833004 	add	r3, r3, r4
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
    a968:	e15e0002 	cmp	lr, r2
    a96c:	8a00001b 	bhi	a9e0 <free+0x150>
              if (p != fm->dv) {
    a970:	e5910014 	ldr	r0, [r1, #20]
    a974:	e1500002 	cmp	r0, r2
    a978:	0a00011b 	beq	adec <free+0x55c>
                unlink_chunk(fm, p, prevsize);
    a97c:	e1a061a4 	lsr	r6, r4, #3
    a980:	e592000c 	ldr	r0, [r2, #12]
    a984:	e356001f 	cmp	r6, #31
    a988:	8a000079 	bhi	ab74 <free+0x2e4>
    a98c:	e1500002 	cmp	r0, r2
    a990:	e5925008 	ldr	r5, [r2, #8]
    a994:	0a00005a 	beq	ab04 <free+0x274>
    a998:	e1520005 	cmp	r2, r5
    a99c:	0a000058 	beq	ab04 <free+0x274>
    a9a0:	e5927004 	ldr	r7, [r2, #4]
    a9a4:	e3c44007 	bic	r4, r4, #7
    a9a8:	e3c77007 	bic	r7, r7, #7
    a9ac:	e1570004 	cmp	r7, r4
    a9b0:	1a000053 	bne	ab04 <free+0x274>
    a9b4:	e0814186 	add	r4, r1, r6, lsl #3
    a9b8:	e2844028 	add	r4, r4, #40	; 0x28
    a9bc:	e1540005 	cmp	r4, r5
    a9c0:	1a0000d6 	bne	ad20 <free+0x490>
    a9c4:	e1500005 	cmp	r0, r5
    a9c8:	0a000125 	beq	ae64 <free+0x5d4>
    a9cc:	e1540000 	cmp	r4, r0
    a9d0:	1a000155 	bne	af2c <free+0x69c>
    a9d4:	e585000c 	str	r0, [r5, #12]
    a9d8:	e5805008 	str	r5, [r0, #8]
    a9dc:	eaffffbc 	b	a8d4 <free+0x44>
          }
          goto postaction;
        }
      }
    erroraction:
      USAGE_ERROR_ACTION(fm, p);
    a9e0:	e3e00000 	mvn	r0, #0
    a9e4:	ebfff585 	bl	8000 <exit>
            if (next == fm->top) {
    a9e8:	e5916018 	ldr	r6, [r1, #24]
    a9ec:	e5915014 	ldr	r5, [r1, #20]
    a9f0:	e156000c 	cmp	r6, ip
    a9f4:	0a0000ed 	beq	adb0 <free+0x520>
            else if (next == fm->dv) {
    a9f8:	e155000c 	cmp	r5, ip
    a9fc:	0a000105 	beq	ae18 <free+0x588>
              size_t nsize = chunksize(next);
    aa00:	e3c00007 	bic	r0, r0, #7
    aa04:	e59c400c 	ldr	r4, [ip, #12]
              unlink_chunk(fm, next, nsize);
    aa08:	e1a061a0 	lsr	r6, r0, #3
              psize += nsize;
    aa0c:	e0833000 	add	r3, r3, r0
              unlink_chunk(fm, next, nsize);
    aa10:	e356001f 	cmp	r6, #31
    aa14:	9a000086 	bls	ac34 <free+0x3a4>
    aa18:	e154000c 	cmp	r4, ip
    aa1c:	e59c8018 	ldr	r8, [ip, #24]
    aa20:	0a000114 	beq	ae78 <free+0x5e8>
    aa24:	e59c0008 	ldr	r0, [ip, #8]
    aa28:	e15e0000 	cmp	lr, r0
    aa2c:	8a000034 	bhi	ab04 <free+0x274>
    aa30:	e590500c 	ldr	r5, [r0, #12]
    aa34:	e155000c 	cmp	r5, ip
    aa38:	1a000031 	bne	ab04 <free+0x274>
    aa3c:	e5945008 	ldr	r5, [r4, #8]
    aa40:	e155000c 	cmp	r5, ip
    aa44:	1a00002e 	bne	ab04 <free+0x274>
    aa48:	e580400c 	str	r4, [r0, #12]
    aa4c:	e5840008 	str	r0, [r4, #8]
    aa50:	e3580000 	cmp	r8, #0
    aa54:	0a000100 	beq	ae5c <free+0x5cc>
    aa58:	e59c001c 	ldr	r0, [ip, #28]
    aa5c:	e280004c 	add	r0, r0, #76	; 0x4c
    aa60:	e7915100 	ldr	r5, [r1, r0, lsl #2]
    aa64:	e155000c 	cmp	r5, ip
    aa68:	07814100 	streq	r4, [r1, r0, lsl #2]
    aa6c:	0a000007 	beq	aa90 <free+0x200>
    aa70:	e15e0008 	cmp	lr, r8
    aa74:	8a000022 	bhi	ab04 <free+0x274>
    aa78:	e5980010 	ldr	r0, [r8, #16]
    aa7c:	e150000c 	cmp	r0, ip
    aa80:	05884010 	streq	r4, [r8, #16]
    aa84:	15884014 	strne	r4, [r8, #20]
    aa88:	e3540000 	cmp	r4, #0
    aa8c:	0a0000f2 	beq	ae5c <free+0x5cc>
    aa90:	e15e0004 	cmp	lr, r4
    aa94:	8a00001a 	bhi	ab04 <free+0x274>
    aa98:	e59c0010 	ldr	r0, [ip, #16]
    aa9c:	e5848018 	str	r8, [r4, #24]
    aaa0:	e3500000 	cmp	r0, #0
    aaa4:	0a000003 	beq	aab8 <free+0x228>
    aaa8:	e15e0000 	cmp	lr, r0
    aaac:	8a000014 	bhi	ab04 <free+0x274>
    aab0:	e5840010 	str	r0, [r4, #16]
    aab4:	e5804018 	str	r4, [r0, #24]
    aab8:	e59c0014 	ldr	r0, [ip, #20]
    aabc:	e3500000 	cmp	r0, #0
    aac0:	0a0000e5 	beq	ae5c <free+0x5cc>
    aac4:	e15e0000 	cmp	lr, r0
    aac8:	8a00000d 	bhi	ab04 <free+0x274>
    aacc:	e5915014 	ldr	r5, [r1, #20]
    aad0:	e5840014 	str	r0, [r4, #20]
    aad4:	e5804018 	str	r4, [r0, #24]
              if (p == fm->dv) {
    aad8:	e1520005 	cmp	r2, r5
              set_size_and_pinuse_of_free_chunk(p, psize);
    aadc:	e3830001 	orr	r0, r3, #1
    aae0:	e5820004 	str	r0, [r2, #4]
    aae4:	e7823003 	str	r3, [r2, r3]
              if (p == fm->dv) {
    aae8:	1affff85 	bne	a904 <free+0x74>
                fm->dvsize = psize;
    aaec:	e5813008 	str	r3, [r1, #8]
                goto postaction;
    aaf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_small_chunk(fm, p, psize);
    aaf4:	e5911010 	ldr	r1, [r1, #16]
    aaf8:	e593c008 	ldr	ip, [r3, #8]
    aafc:	e15c0001 	cmp	ip, r1
    ab00:	2affff8e 	bcs	a940 <free+0xb0>
                unlink_chunk(fm, p, prevsize);
    ab04:	e3e00000 	mvn	r0, #0
    ab08:	ebfff53c 	bl	8000 <exit>
            insert_large_chunk(fm, tp, psize);
    ab0c:	e1a0c423 	lsr	ip, r3, #8
    ab10:	e35c0801 	cmp	ip, #65536	; 0x10000
    ab14:	3a000056 	bcc	ac74 <free+0x3e4>
    ab18:	e3a0e102 	mov	lr, #-2147483648	; 0x80000000
    ab1c:	e3a05f6b 	mov	r5, #428	; 0x1ac
    ab20:	e3a0001f 	mov	r0, #31
    ab24:	e3a0606b 	mov	r6, #107	; 0x6b
    ab28:	e5914004 	ldr	r4, [r1, #4]
    ab2c:	e3a0c000 	mov	ip, #0
    ab30:	e582001c 	str	r0, [r2, #28]
    ab34:	e582c014 	str	ip, [r2, #20]
    ab38:	e11e0004 	tst	lr, r4
    ab3c:	e582c010 	str	ip, [r2, #16]
    ab40:	1a00007c 	bne	ad38 <free+0x4a8>
    ab44:	e18ee004 	orr	lr, lr, r4
    ab48:	e0813005 	add	r3, r1, r5
    ab4c:	e7812106 	str	r2, [r1, r6, lsl #2]
    ab50:	e581e004 	str	lr, [r1, #4]
    ab54:	e5823018 	str	r3, [r2, #24]
    ab58:	e582200c 	str	r2, [r2, #12]
    ab5c:	e5822008 	str	r2, [r2, #8]
            if (--fm->release_checks == 0)
    ab60:	e5913020 	ldr	r3, [r1, #32]
    ab64:	e2533001 	subs	r3, r3, #1
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
    ab68:	03e03000 	mvneq	r3, #0
    ab6c:	e5813020 	str	r3, [r1, #32]
    }
  }
#if !FOOTERS
#undef fm
#endif /* FOOTERS */
}
    ab70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                unlink_chunk(fm, p, prevsize);
    ab74:	e1500002 	cmp	r0, r2
    ab78:	e5927018 	ldr	r7, [r2, #24]
    ab7c:	0a000055 	beq	acd8 <free+0x448>
    ab80:	e5924008 	ldr	r4, [r2, #8]
    ab84:	e15e0004 	cmp	lr, r4
    ab88:	8affffdd 	bhi	ab04 <free+0x274>
    ab8c:	e594500c 	ldr	r5, [r4, #12]
    ab90:	e1550002 	cmp	r5, r2
    ab94:	1affffda 	bne	ab04 <free+0x274>
    ab98:	e5905008 	ldr	r5, [r0, #8]
    ab9c:	e1550002 	cmp	r5, r2
    aba0:	1affffd7 	bne	ab04 <free+0x274>
    aba4:	e584000c 	str	r0, [r4, #12]
    aba8:	e5804008 	str	r4, [r0, #8]
    abac:	e3570000 	cmp	r7, #0
    abb0:	0affff47 	beq	a8d4 <free+0x44>
    abb4:	e592401c 	ldr	r4, [r2, #28]
    abb8:	e284404c 	add	r4, r4, #76	; 0x4c
    abbc:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    abc0:	e1550002 	cmp	r5, r2
    abc4:	07810104 	streq	r0, [r1, r4, lsl #2]
    abc8:	0a000007 	beq	abec <free+0x35c>
    abcc:	e15e0007 	cmp	lr, r7
    abd0:	8affffcb 	bhi	ab04 <free+0x274>
    abd4:	e5974010 	ldr	r4, [r7, #16]
    abd8:	e1540002 	cmp	r4, r2
    abdc:	05870010 	streq	r0, [r7, #16]
    abe0:	15870014 	strne	r0, [r7, #20]
    abe4:	e3500000 	cmp	r0, #0
    abe8:	0affff39 	beq	a8d4 <free+0x44>
    abec:	e15e0000 	cmp	lr, r0
    abf0:	8affffc3 	bhi	ab04 <free+0x274>
    abf4:	e5924010 	ldr	r4, [r2, #16]
    abf8:	e5807018 	str	r7, [r0, #24]
    abfc:	e3540000 	cmp	r4, #0
    ac00:	0a000003 	beq	ac14 <free+0x384>
    ac04:	e15e0004 	cmp	lr, r4
    ac08:	8affffbd 	bhi	ab04 <free+0x274>
    ac0c:	e5804010 	str	r4, [r0, #16]
    ac10:	e5840018 	str	r0, [r4, #24]
    ac14:	e5924014 	ldr	r4, [r2, #20]
    ac18:	e3540000 	cmp	r4, #0
    ac1c:	0affff2c 	beq	a8d4 <free+0x44>
    ac20:	e15e0004 	cmp	lr, r4
    ac24:	8affffb6 	bhi	ab04 <free+0x274>
    ac28:	e5804014 	str	r4, [r0, #20]
    ac2c:	e5840018 	str	r0, [r4, #24]
    ac30:	eaffff27 	b	a8d4 <free+0x44>
              unlink_chunk(fm, next, nsize);
    ac34:	e154000c 	cmp	r4, ip
    ac38:	e59c0008 	ldr	r0, [ip, #8]
    ac3c:	0affffb0 	beq	ab04 <free+0x274>
    ac40:	e15c0000 	cmp	ip, r0
    ac44:	0affffae 	beq	ab04 <free+0x274>
    ac48:	e0817186 	add	r7, r1, r6, lsl #3
    ac4c:	e2877028 	add	r7, r7, #40	; 0x28
    ac50:	e1570000 	cmp	r7, r0
    ac54:	1a0000a9 	bne	af00 <free+0x670>
    ac58:	e1540000 	cmp	r4, r0
    ac5c:	0a00009d 	beq	aed8 <free+0x648>
    ac60:	e1540007 	cmp	r4, r7
    ac64:	1a0000b6 	bne	af44 <free+0x6b4>
    ac68:	e580400c 	str	r4, [r0, #12]
    ac6c:	e5840008 	str	r0, [r4, #8]
    ac70:	eaffff98 	b	aad8 <free+0x248>
            insert_large_chunk(fm, tp, psize);
    ac74:	e24c0c01 	sub	r0, ip, #256	; 0x100
    ac78:	e3a0e001 	mov	lr, #1
    ac7c:	e1a00820 	lsr	r0, r0, #16
    ac80:	e2000008 	and	r0, r0, #8
    ac84:	e1a0401c 	lsl	r4, ip, r0
    ac88:	e244ca01 	sub	ip, r4, #4096	; 0x1000
    ac8c:	e1a0c82c 	lsr	ip, ip, #16
    ac90:	e20cc004 	and	ip, ip, #4
    ac94:	e1a04c14 	lsl	r4, r4, ip
    ac98:	e180c00c 	orr	ip, r0, ip
    ac9c:	e2440901 	sub	r0, r4, #16384	; 0x4000
    aca0:	e1a00820 	lsr	r0, r0, #16
    aca4:	e2000002 	and	r0, r0, #2
    aca8:	e1a04014 	lsl	r4, r4, r0
    acac:	e08cc000 	add	ip, ip, r0
    acb0:	e06cc7a4 	rsb	ip, ip, r4, lsr #15
    acb4:	e28c0015 	add	r0, ip, #21
    acb8:	e28cc00e 	add	ip, ip, #14
    acbc:	e1a00033 	lsr	r0, r3, r0
    acc0:	e000000e 	and	r0, r0, lr
    acc4:	e0800e1c 	add	r0, r0, ip, lsl lr
    acc8:	e280604c 	add	r6, r0, #76	; 0x4c
    accc:	e1a0e01e 	lsl	lr, lr, r0
    acd0:	e1a05106 	lsl	r5, r6, #2
    acd4:	eaffff93 	b	ab28 <free+0x298>
                unlink_chunk(fm, p, prevsize);
    acd8:	e5925014 	ldr	r5, [r2, #20]
    acdc:	e3550000 	cmp	r5, #0
    ace0:	12824014 	addne	r4, r2, #20
    ace4:	0a000080 	beq	aeec <free+0x65c>
    ace8:	e1a06004 	mov	r6, r4
    acec:	e1a04005 	mov	r4, r5
    acf0:	e1a00005 	mov	r0, r5
    acf4:	e5b45014 	ldr	r5, [r4, #20]!
    acf8:	e3550000 	cmp	r5, #0
    acfc:	1afffff9 	bne	ace8 <free+0x458>
    ad00:	e1a04000 	mov	r4, r0
    ad04:	e5b45010 	ldr	r5, [r4, #16]!
    ad08:	e3550000 	cmp	r5, #0
    ad0c:	1afffff5 	bne	ace8 <free+0x458>
    ad10:	e15e0006 	cmp	lr, r6
    ad14:	8affff7a 	bhi	ab04 <free+0x274>
    ad18:	e5865000 	str	r5, [r6]
    ad1c:	eaffffa2 	b	abac <free+0x31c>
    ad20:	e15e0005 	cmp	lr, r5
    ad24:	8affff76 	bhi	ab04 <free+0x274>
    ad28:	e595700c 	ldr	r7, [r5, #12]
    ad2c:	e1570002 	cmp	r7, r2
    ad30:	0affff23 	beq	a9c4 <free+0x134>
    ad34:	eaffff72 	b	ab04 <free+0x274>
            insert_large_chunk(fm, tp, psize);
    ad38:	e350001f 	cmp	r0, #31
    ad3c:	e791e106 	ldr	lr, [r1, r6, lsl #2]
    ad40:	11a0c0a0 	lsrne	ip, r0, #1
    ad44:	01a0c003 	moveq	ip, r3
    ad48:	126cc019 	rsbne	ip, ip, #25
    ad4c:	11a0cc13 	lslne	ip, r3, ip
    ad50:	ea000006 	b	ad70 <free+0x4e0>
    ad54:	e1a00fac 	lsr	r0, ip, #31
    ad58:	e1a0c08c 	lsl	ip, ip, #1
    ad5c:	e2800004 	add	r0, r0, #4
    ad60:	e79e4100 	ldr	r4, [lr, r0, lsl #2]
    ad64:	e3540000 	cmp	r4, #0
    ad68:	0a000032 	beq	ae38 <free+0x5a8>
    ad6c:	e1a0e004 	mov	lr, r4
    ad70:	e59e0004 	ldr	r0, [lr, #4]
    ad74:	e3c00007 	bic	r0, r0, #7
    ad78:	e1500003 	cmp	r0, r3
    ad7c:	1afffff4 	bne	ad54 <free+0x4c4>
    ad80:	e59e3008 	ldr	r3, [lr, #8]
    ad84:	e5910010 	ldr	r0, [r1, #16]
    ad88:	e1500003 	cmp	r0, r3
    ad8c:	9150000e 	cmpls	r0, lr
    ad90:	8affff5b 	bhi	ab04 <free+0x274>
    ad94:	e3a00000 	mov	r0, #0
    ad98:	e583200c 	str	r2, [r3, #12]
    ad9c:	e58e2008 	str	r2, [lr, #8]
    ada0:	e5823008 	str	r3, [r2, #8]
    ada4:	e582e00c 	str	lr, [r2, #12]
    ada8:	e5820018 	str	r0, [r2, #24]
    adac:	eaffff6b 	b	ab60 <free+0x2d0>
              size_t tsize = fm->topsize += psize;
    adb0:	e591000c 	ldr	r0, [r1, #12]
              if (p == fm->dv) {
    adb4:	e1520005 	cmp	r2, r5
              fm->top = p;
    adb8:	e5812018 	str	r2, [r1, #24]
              size_t tsize = fm->topsize += psize;
    adbc:	e0833000 	add	r3, r3, r0
              p->head = tsize | PINUSE_BIT;
    adc0:	e3830001 	orr	r0, r3, #1
              size_t tsize = fm->topsize += psize;
    adc4:	e581300c 	str	r3, [r1, #12]
              p->head = tsize | PINUSE_BIT;
    adc8:	e5820004 	str	r0, [r2, #4]
              if (should_trim(fm, tsize))
    adcc:	e591201c 	ldr	r2, [r1, #28]
                fm->dv = 0;
    add0:	05814014 	streq	r4, [r1, #20]
                fm->dvsize = 0;
    add4:	05814008 	streq	r4, [r1, #8]
              if (should_trim(fm, tsize))
    add8:	e1530002 	cmp	r3, r2
    addc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
                sys_trim(fm, 0);
    ade0:	e3a00000 	mov	r0, #0
}
    ade4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
                sys_trim(fm, 0);
    ade8:	eafff86e 	b	8fa8 <sys_trim.constprop.7>
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
    adec:	e59c4004 	ldr	r4, [ip, #4]
    adf0:	e2045003 	and	r5, r4, #3
    adf4:	e3550003 	cmp	r5, #3
    adf8:	1afffeb5 	bne	a8d4 <free+0x44>
                set_free_with_pinuse(p, psize, next);
    adfc:	e3c44001 	bic	r4, r4, #1
    ae00:	e3832001 	orr	r2, r3, #1
                fm->dvsize = psize;
    ae04:	e5813008 	str	r3, [r1, #8]
                set_free_with_pinuse(p, psize, next);
    ae08:	e58c4004 	str	r4, [ip, #4]
    ae0c:	e5802004 	str	r2, [r0, #4]
    ae10:	e58c3000 	str	r3, [ip]
                goto postaction;
    ae14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              size_t dsize = fm->dvsize += psize;
    ae18:	e5910008 	ldr	r0, [r1, #8]
              fm->dv = p;
    ae1c:	e5812014 	str	r2, [r1, #20]
              size_t dsize = fm->dvsize += psize;
    ae20:	e0833000 	add	r3, r3, r0
              set_size_and_pinuse_of_free_chunk(p, dsize);
    ae24:	e3830001 	orr	r0, r3, #1
              size_t dsize = fm->dvsize += psize;
    ae28:	e5813008 	str	r3, [r1, #8]
              set_size_and_pinuse_of_free_chunk(p, dsize);
    ae2c:	e5820004 	str	r0, [r2, #4]
    ae30:	e7823003 	str	r3, [r2, r3]
              goto postaction;
    ae34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_large_chunk(fm, tp, psize);
    ae38:	e591c010 	ldr	ip, [r1, #16]
    ae3c:	e08e3100 	add	r3, lr, r0, lsl #2
    ae40:	e15c0003 	cmp	ip, r3
    ae44:	8affff2e 	bhi	ab04 <free+0x274>
    ae48:	e78e2100 	str	r2, [lr, r0, lsl #2]
    ae4c:	e582e018 	str	lr, [r2, #24]
    ae50:	e582200c 	str	r2, [r2, #12]
    ae54:	e5822008 	str	r2, [r2, #8]
    ae58:	eaffff40 	b	ab60 <free+0x2d0>
    ae5c:	e5915014 	ldr	r5, [r1, #20]
    ae60:	eaffff1c 	b	aad8 <free+0x248>
                unlink_chunk(fm, p, prevsize);
    ae64:	e5910000 	ldr	r0, [r1]
    ae68:	e3a04001 	mov	r4, #1
    ae6c:	e1c06614 	bic	r6, r0, r4, lsl r6
    ae70:	e5816000 	str	r6, [r1]
    ae74:	eafffe96 	b	a8d4 <free+0x44>
              unlink_chunk(fm, next, nsize);
    ae78:	e59c7014 	ldr	r7, [ip, #20]
    ae7c:	e3570000 	cmp	r7, #0
    ae80:	128c0014 	addne	r0, ip, #20
    ae84:	0a000023 	beq	af18 <free+0x688>
                unlink_chunk(fm, p, prevsize);
    ae88:	e1a04007 	mov	r4, r7
    ae8c:	e1a06000 	mov	r6, r0
              unlink_chunk(fm, next, nsize);
    ae90:	e1a00004 	mov	r0, r4
    ae94:	e5b05014 	ldr	r5, [r0, #20]!
    ae98:	e3550000 	cmp	r5, #0
    ae9c:	0a000005 	beq	aeb8 <free+0x628>
    aea0:	e1a04005 	mov	r4, r5
    aea4:	e1a06000 	mov	r6, r0
    aea8:	e1a00004 	mov	r0, r4
    aeac:	e5b05014 	ldr	r5, [r0, #20]!
    aeb0:	e3550000 	cmp	r5, #0
    aeb4:	1afffff9 	bne	aea0 <free+0x610>
    aeb8:	e1a00004 	mov	r0, r4
    aebc:	e5b07010 	ldr	r7, [r0, #16]!
    aec0:	e3570000 	cmp	r7, #0
    aec4:	1affffef 	bne	ae88 <free+0x5f8>
    aec8:	e15e0006 	cmp	lr, r6
    aecc:	8affff0c 	bhi	ab04 <free+0x274>
    aed0:	e5867000 	str	r7, [r6]
    aed4:	eafffedd 	b	aa50 <free+0x1c0>
    aed8:	e5910000 	ldr	r0, [r1]
    aedc:	e3a0c001 	mov	ip, #1
    aee0:	e1c0661c 	bic	r6, r0, ip, lsl r6
    aee4:	e5816000 	str	r6, [r1]
    aee8:	eafffefa 	b	aad8 <free+0x248>
                unlink_chunk(fm, p, prevsize);
    aeec:	e5925010 	ldr	r5, [r2, #16]
    aef0:	e3550000 	cmp	r5, #0
    aef4:	0a000018 	beq	af5c <free+0x6cc>
    aef8:	e2824010 	add	r4, r2, #16
    aefc:	eaffff79 	b	ace8 <free+0x458>
              unlink_chunk(fm, next, nsize);
    af00:	e15e0000 	cmp	lr, r0
    af04:	8afffefe 	bhi	ab04 <free+0x274>
    af08:	e590800c 	ldr	r8, [r0, #12]
    af0c:	e158000c 	cmp	r8, ip
    af10:	0affff50 	beq	ac58 <free+0x3c8>
    af14:	eafffefa 	b	ab04 <free+0x274>
    af18:	e59c7010 	ldr	r7, [ip, #16]
    af1c:	e3570000 	cmp	r7, #0
    af20:	0a00001b 	beq	af94 <free+0x704>
    af24:	e28c0010 	add	r0, ip, #16
    af28:	eaffffd6 	b	ae88 <free+0x5f8>
                unlink_chunk(fm, p, prevsize);
    af2c:	e15e0000 	cmp	lr, r0
    af30:	8afffef3 	bhi	ab04 <free+0x274>
    af34:	e5904008 	ldr	r4, [r0, #8]
    af38:	e1540002 	cmp	r4, r2
    af3c:	0afffea4 	beq	a9d4 <free+0x144>
    af40:	eafffeef 	b	ab04 <free+0x274>
              unlink_chunk(fm, next, nsize);
    af44:	e15e0004 	cmp	lr, r4
    af48:	8afffeed 	bhi	ab04 <free+0x274>
    af4c:	e594e008 	ldr	lr, [r4, #8]
    af50:	e15e000c 	cmp	lr, ip
    af54:	0affff43 	beq	ac68 <free+0x3d8>
    af58:	eafffee9 	b	ab04 <free+0x274>
                unlink_chunk(fm, p, prevsize);
    af5c:	e3570000 	cmp	r7, #0
    af60:	0afffe5b 	beq	a8d4 <free+0x44>
    af64:	e592401c 	ldr	r4, [r2, #28]
    af68:	e284804c 	add	r8, r4, #76	; 0x4c
    af6c:	e7910108 	ldr	r0, [r1, r8, lsl #2]
    af70:	e1500002 	cmp	r0, r2
    af74:	11a00005 	movne	r0, r5
    af78:	1affff13 	bne	abcc <free+0x33c>
    af7c:	e5910004 	ldr	r0, [r1, #4]
    af80:	e3a06001 	mov	r6, #1
    af84:	e7815108 	str	r5, [r1, r8, lsl #2]
    af88:	e1c00416 	bic	r0, r0, r6, lsl r4
    af8c:	e5810004 	str	r0, [r1, #4]
    af90:	eafffe4f 	b	a8d4 <free+0x44>
              unlink_chunk(fm, next, nsize);
    af94:	e3580000 	cmp	r8, #0
    af98:	0afffece 	beq	aad8 <free+0x248>
    af9c:	e59c401c 	ldr	r4, [ip, #28]
    afa0:	e284504c 	add	r5, r4, #76	; 0x4c
    afa4:	e7910105 	ldr	r0, [r1, r5, lsl #2]
    afa8:	e150000c 	cmp	r0, ip
    afac:	13a04000 	movne	r4, #0
    afb0:	1afffeae 	bne	aa70 <free+0x1e0>
    afb4:	e5910004 	ldr	r0, [r1, #4]
    afb8:	e3a0c001 	mov	ip, #1
    afbc:	e3a0e000 	mov	lr, #0
    afc0:	e781e105 	str	lr, [r1, r5, lsl #2]
    afc4:	e5915014 	ldr	r5, [r1, #20]
    afc8:	e1c0041c 	bic	r0, r0, ip, lsl r4
    afcc:	e5810004 	str	r0, [r1, #4]
    afd0:	eafffec0 	b	aad8 <free+0x248>

0000afd4 <_stdio_fgetc>:
}

static int _stdio_fgetc(void *ctx)
{
	return (unsigned char)0xff;
}
    afd4:	e3a000ff 	mov	r0, #255	; 0xff
    afd8:	e12fff1e 	bx	lr

0000afdc <_stdio_vfprintf>:
	return buffered_write(ctx, str, strnlen(str, len));
}

static int _stdio_vfprintf(void *ctx, const char *fmt, va_list ap)
{
	return _printf_engine(_output_func, ctx, fmt, ap);
    afdc:	e1a03002 	mov	r3, r2
    afe0:	e1a02001 	mov	r2, r1
    afe4:	e1a01000 	mov	r1, r0
    afe8:	e30b00b0 	movw	r0, #45232	; 0xb0b0
    afec:	e3400000 	movt	r0, #0
    aff0:	ea000fb4 	b	eec8 <_printf_engine>

0000aff4 <_stdio_fputc>:
{
    aff4:	e92d4010 	push	{r4, lr}
	buffered_put(fctx->buffer, fctx->fd, (char)c);
    aff8:	e6ef1071 	uxtb	r1, r1
    affc:	e8900011 	ldm	r0, {r0, r4}
	buffer->data[buffer->pos++] = c;
    b000:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    b004:	e2832001 	add	r2, r3, #1
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b008:	e351000a 	cmp	r1, #10
    b00c:	13520080 	cmpne	r2, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    b010:	e5842080 	str	r2, [r4, #128]	; 0x80
    b014:	e7c41003 	strb	r1, [r4, r3]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b018:	1a000003 	bne	b02c <_stdio_fputc+0x38>
		result = write(fd, buffer->data, buffer->pos);
    b01c:	e1a01004 	mov	r1, r4
    b020:	eb000086 	bl	b240 <write>
		buffer->pos = 0;
    b024:	e3a03000 	mov	r3, #0
    b028:	e5843080 	str	r3, [r4, #128]	; 0x80
}
    b02c:	e3e00102 	mvn	r0, #-2147483648	; 0x80000000
    b030:	e8bd8010 	pop	{r4, pc}

0000b034 <buffered_write.part.0>:
static int buffered_write(struct file_context *ctx, const char *str, size_t sz)
    b034:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < sz; i++) {
    b038:	e2528000 	subs	r8, r2, #0
    b03c:	0a000019 	beq	b0a8 <buffered_write.part.0+0x74>
    b040:	e2489001 	sub	r9, r8, #1
    b044:	e1a06000 	mov	r6, r0
    b048:	e2415001 	sub	r5, r1, #1
    b04c:	e0819009 	add	r9, r1, r9
		buffer->pos = 0;
    b050:	e3a07000 	mov	r7, #0
    b054:	ea000001 	b	b060 <buffered_write.part.0+0x2c>
	for (i = 0; i < sz; i++) {
    b058:	e1550009 	cmp	r5, r9
    b05c:	0a000011 	beq	b0a8 <buffered_write.part.0+0x74>
		int result = buffered_put(ctx->buffer, ctx->fd, str[i]);
    b060:	e5964004 	ldr	r4, [r6, #4]
    b064:	e5f5e001 	ldrb	lr, [r5, #1]!
    b068:	e5960000 	ldr	r0, [r6]
	buffer->data[buffer->pos++] = c;
    b06c:	e594c080 	ldr	ip, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
    b070:	e1a01004 	mov	r1, r4
	buffer->data[buffer->pos++] = c;
    b074:	e28c3001 	add	r3, ip, #1
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b078:	e35e000a 	cmp	lr, #10
    b07c:	13530080 	cmpne	r3, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    b080:	e5843080 	str	r3, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
    b084:	e1a02003 	mov	r2, r3
	buffer->data[buffer->pos++] = c;
    b088:	e7c4e00c 	strb	lr, [r4, ip]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b08c:	1afffff1 	bne	b058 <buffered_write.part.0+0x24>
		result = write(fd, buffer->data, buffer->pos);
    b090:	eb00006a 	bl	b240 <write>
		if (result < 0) {
    b094:	e3500000 	cmp	r0, #0
		buffer->pos = 0;
    b098:	e5847080 	str	r7, [r4, #128]	; 0x80
		if (result < 0) {
    b09c:	b8bd87f0 	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < sz; i++) {
    b0a0:	e1550009 	cmp	r5, r9
    b0a4:	1affffed 	bne	b060 <buffered_write.part.0+0x2c>
	return sz;
    b0a8:	e1a00008 	mov	r0, r8
}
    b0ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000b0b0 <_output_func>:
{
    b0b0:	e92d4070 	push	{r4, r5, r6, lr}
    b0b4:	e1a04002 	mov	r4, r2
    b0b8:	e1a05000 	mov	r5, r0
	return buffered_write(ctx, str, strnlen(str, len));
    b0bc:	eb00125e 	bl	fa3c <strnlen>
	if (!ctx->buffer) {
    b0c0:	e5943004 	ldr	r3, [r4, #4]
    b0c4:	e3530000 	cmp	r3, #0
    b0c8:	0a000004 	beq	b0e0 <_output_func+0x30>
    b0cc:	e1a02000 	mov	r2, r0
    b0d0:	e1a01005 	mov	r1, r5
    b0d4:	e1a00004 	mov	r0, r4
}
    b0d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b0dc:	eaffffd4 	b	b034 <buffered_write.part.0>
    b0e0:	e3e00007 	mvn	r0, #7
    b0e4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b0e8 <_stdio_fputs>:
{
    b0e8:	e92d4070 	push	{r4, r5, r6, lr}
    b0ec:	e1a04000 	mov	r4, r0
	return buffered_write(fctx, s, strlen(s));
    b0f0:	e1a00001 	mov	r0, r1
{
    b0f4:	e1a05001 	mov	r5, r1
	return buffered_write(fctx, s, strlen(s));
    b0f8:	eb001243 	bl	fa0c <strlen>
	if (!ctx->buffer) {
    b0fc:	e5943004 	ldr	r3, [r4, #4]
    b100:	e3530000 	cmp	r3, #0
    b104:	0a000004 	beq	b11c <_stdio_fputs+0x34>
    b108:	e1a02000 	mov	r2, r0
    b10c:	e1a01005 	mov	r1, r5
    b110:	e1a00004 	mov	r0, r4
}
    b114:	e8bd4070 	pop	{r4, r5, r6, lr}
    b118:	eaffffc5 	b	b034 <buffered_write.part.0>
    b11c:	e3e00007 	mvn	r0, #7
    b120:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b124 <__libc_fini>:
 * of the executable, if any.
 *
 * 'fini_array' points to a list of function addresses. The first
 * entry in the list has value -1, the last one has value 0.
 */
void __libc_fini(void* array) {
    b124:	e92d4070 	push	{r4, r5, r6, lr}
  void** fini_array = (void **)array;
  const size_t minus1 = ~(size_t)0; /* ensure proper sign extension */

  /* Sanity check - first entry must be -1 */
  if (array == NULL || (size_t)fini_array[0] != minus1) {
    b128:	e2505000 	subs	r5, r0, #0
    b12c:	08bd8070 	popeq	{r4, r5, r6, pc}
    b130:	e5953000 	ldr	r3, [r5]
    b134:	e3730001 	cmn	r3, #1
    b138:	18bd8070 	popne	{r4, r5, r6, pc}
  /* skip over it */
  fini_array += 1;

  /* Count the number of destructors. */
  int count = 0;
  while (fini_array[count] != NULL) {
    b13c:	e5952004 	ldr	r2, [r5, #4]
  fini_array += 1;
    b140:	e2853004 	add	r3, r5, #4
  while (fini_array[count] != NULL) {
    b144:	e3520000 	cmp	r2, #0
    b148:	08bd8070 	popeq	{r4, r5, r6, pc}
  int count = 0;
    b14c:	e3a04000 	mov	r4, #0
  while (fini_array[count] != NULL) {
    b150:	e5b32004 	ldr	r2, [r3, #4]!
    ++count;
    b154:	e2844001 	add	r4, r4, #1
  while (fini_array[count] != NULL) {
    b158:	e3520000 	cmp	r2, #0
    b15c:	1afffffb 	bne	b150 <__libc_fini+0x2c>
    b160:	e0854104 	add	r4, r5, r4, lsl #2
  }

  /* Now call each destructor in reverse order. */
  while (count > 0) {
    void (*func)(void) = (void (*)(void)) fini_array[--count];
    b164:	e4143004 	ldr	r3, [r4], #-4

    /* Sanity check, any -1 in the list is ignored */
    if ((size_t)func == minus1) {
    b168:	e3730001 	cmn	r3, #1
    b16c:	0a000000 	beq	b174 <__libc_fini+0x50>
      continue;
    }

    func();
    b170:	e12fff33 	blx	r3
  while (count > 0) {
    b174:	e1550004 	cmp	r5, r4
    b178:	1afffff9 	bne	b164 <__libc_fini+0x40>
    b17c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b180 <__libc_init>:
{
    b180:	e92d4010 	push	{r4, lr}
    b184:	e1a05002 	mov	r5, r2
	call_array(structors->preinit_array);
    b188:	e5924000 	ldr	r4, [r2]
{
    b18c:	e1a06001 	mov	r6, r1
  while (*++list) {
    b190:	e5943004 	ldr	r3, [r4, #4]
    b194:	e3530000 	cmp	r3, #0
    b198:	0a000004 	beq	b1b0 <__libc_init+0x30>
    b19c:	e2844004 	add	r4, r4, #4
    (*list)();
    b1a0:	e12fff33 	blx	r3
  while (*++list) {
    b1a4:	e5b43004 	ldr	r3, [r4, #4]!
    b1a8:	e3530000 	cmp	r3, #0
    b1ac:	1afffffb 	bne	b1a0 <__libc_init+0x20>
	call_array(structors->init_array);
    b1b0:	e5954004 	ldr	r4, [r5, #4]
  while (*++list) {
    b1b4:	e5943004 	ldr	r3, [r4, #4]
    b1b8:	e2844004 	add	r4, r4, #4
    b1bc:	e3530000 	cmp	r3, #0
    b1c0:	0a000003 	beq	b1d4 <__libc_init+0x54>
    (*list)();
    b1c4:	e12fff33 	blx	r3
  while (*++list) {
    b1c8:	e5b43004 	ldr	r3, [r4, #4]!
    b1cc:	e3530000 	cmp	r3, #0
    b1d0:	1afffffb 	bne	b1c4 <__libc_init+0x44>
	if (structors->fini_array != NULL) {
    b1d4:	e5951008 	ldr	r1, [r5, #8]
    b1d8:	e3510000 	cmp	r1, #0
    b1dc:	1a000004 	bne	b1f4 <__libc_init+0x74>
	exit(slingshot(0, NULL, NULL));
    b1e0:	e3a02000 	mov	r2, #0
    b1e4:	e1a01002 	mov	r1, r2
    b1e8:	e1a00002 	mov	r0, r2
    b1ec:	e12fff36 	blx	r6
    b1f0:	ebfff382 	bl	8000 <exit>
		ret = __cxa_atexit(__libc_fini, structors->fini_array);
    b1f4:	e30b0124 	movw	r0, #45348	; 0xb124
    b1f8:	e3400000 	movt	r0, #0
    b1fc:	ebfff6dc 	bl	8d74 <__cxa_atexit>
		if (ret)
    b200:	e3500000 	cmp	r0, #0
    b204:	0afffff5 	beq	b1e0 <__libc_init+0x60>
			__libc_fatal("__cxa_atexit failed\n");
    b208:	e30005b4 	movw	r0, #1460	; 0x5b4
    b20c:	e3400001 	movt	r0, #1
    b210:	ebffffff 	bl	b214 <__libc_fatal>

0000b214 <__libc_fatal>:
    __libc_log_fatal(format, args);
    va_end(args);
}

void __libc_fatal(const char* format, ...)
{
    b214:	e92d000f 	push	{r0, r1, r2, r3}
    b218:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b21c:	e24dd00c 	sub	sp, sp, #12
    va_list args;
    va_start(args, format);
    b220:	e28d3014 	add	r3, sp, #20
    vfprintf(stderr, format, args);
    b224:	e1a02003 	mov	r2, r3
    b228:	e59d1010 	ldr	r1, [sp, #16]
    b22c:	e59f0008 	ldr	r0, [pc, #8]	; b23c <__libc_fatal+0x28>
    va_start(args, format);
    b230:	e58d3004 	str	r3, [sp, #4]
    vfprintf(stderr, format, args);
    b234:	eb00117e 	bl	f834 <vfprintf>
    __libc_log_fatal(format, args);
    va_end(args);
    abort();
    b238:	ebfff6c1 	bl	8d44 <abort>
    b23c:	0001305c 	.word	0x0001305c

0000b240 <write>:
#include <asm.h>
#include <trusty_syscalls.h>

.section .text.write
FUNCTION(write)
    ldr     r12, =__NR_write
    b240:	e3a0c001 	mov	ip, #1
    swi     #0
    b244:	ef000000 	svc	0x00000000
    bx      lr
    b248:	e12fff1e 	bx	lr

0000b24c <brk>:

.section .text.brk
FUNCTION(brk)
    ldr     r12, =__NR_brk
    b24c:	e3a0c002 	mov	ip, #2
    swi     #0
    b250:	ef000000 	svc	0x00000000
    bx      lr
    b254:	e12fff1e 	bx	lr

0000b258 <exit_group>:

.section .text.exit_group
FUNCTION(exit_group)
    ldr     r12, =__NR_exit_group
    b258:	e3a0c003 	mov	ip, #3
    swi     #0
    b25c:	ef000000 	svc	0x00000000
    bx      lr
    b260:	e12fff1e 	bx	lr

0000b264 <port_create>:
    swi     #0
    bx      lr

.section .text.port_create
FUNCTION(port_create)
    ldr     r12, =__NR_port_create
    b264:	e3a0c010 	mov	ip, #16
    swi     #0
    b268:	ef000000 	svc	0x00000000
    bx      lr
    b26c:	e12fff1e 	bx	lr

0000b270 <connect>:

.section .text.connect
FUNCTION(connect)
    ldr     r12, =__NR_connect
    b270:	e3a0c011 	mov	ip, #17
    swi     #0
    b274:	ef000000 	svc	0x00000000
    bx      lr
    b278:	e12fff1e 	bx	lr

0000b27c <accept>:

.section .text.accept
FUNCTION(accept)
    ldr     r12, =__NR_accept
    b27c:	e3a0c012 	mov	ip, #18
    swi     #0
    b280:	ef000000 	svc	0x00000000
    bx      lr
    b284:	e12fff1e 	bx	lr

0000b288 <close>:

.section .text.close
FUNCTION(close)
    ldr     r12, =__NR_close
    b288:	e3a0c013 	mov	ip, #19
    swi     #0
    b28c:	ef000000 	svc	0x00000000
    bx      lr
    b290:	e12fff1e 	bx	lr

0000b294 <set_cookie>:

.section .text.set_cookie
FUNCTION(set_cookie)
    ldr     r12, =__NR_set_cookie
    b294:	e3a0c014 	mov	ip, #20
    swi     #0
    b298:	ef000000 	svc	0x00000000
    bx      lr
    b29c:	e12fff1e 	bx	lr

0000b2a0 <wait>:

.section .text.wait
FUNCTION(wait)
    ldr     r12, =__NR_wait
    b2a0:	e3a0c018 	mov	ip, #24
    swi     #0
    b2a4:	ef000000 	svc	0x00000000
    bx      lr
    b2a8:	e12fff1e 	bx	lr

0000b2ac <wait_any>:

.section .text.wait_any
FUNCTION(wait_any)
    ldr     r12, =__NR_wait_any
    b2ac:	e3a0c019 	mov	ip, #25
    swi     #0
    b2b0:	ef000000 	svc	0x00000000
    bx      lr
    b2b4:	e12fff1e 	bx	lr

0000b2b8 <get_msg>:

.section .text.get_msg
FUNCTION(get_msg)
    ldr     r12, =__NR_get_msg
    b2b8:	e3a0c020 	mov	ip, #32
    swi     #0
    b2bc:	ef000000 	svc	0x00000000
    bx      lr
    b2c0:	e12fff1e 	bx	lr

0000b2c4 <read_msg>:

.section .text.read_msg
FUNCTION(read_msg)
    ldr     r12, =__NR_read_msg
    b2c4:	e3a0c021 	mov	ip, #33	; 0x21
    swi     #0
    b2c8:	ef000000 	svc	0x00000000
    bx      lr
    b2cc:	e12fff1e 	bx	lr

0000b2d0 <put_msg>:

.section .text.put_msg
FUNCTION(put_msg)
    ldr     r12, =__NR_put_msg
    b2d0:	e3a0c022 	mov	ip, #34	; 0x22
    swi     #0
    b2d4:	ef000000 	svc	0x00000000
    bx      lr
    b2d8:	e12fff1e 	bx	lr

0000b2dc <send_msg>:

.section .text.send_msg
FUNCTION(send_msg)
    ldr     r12, =__NR_send_msg
    b2dc:	e3a0c023 	mov	ip, #35	; 0x23
    swi     #0
    b2e0:	ef000000 	svc	0x00000000
    bx      lr
    b2e4:	e12fff1e 	bx	lr

0000b2e8 <send_to_uart>:

.section .text.send_to_uart
FUNCTION(send_to_uart)
    ldr     r12, =__NR_send_to_uart
    b2e8:	e3a0c024 	mov	ip, #36	; 0x24
    swi     #0
    b2ec:	ef000000 	svc	0x00000000
    bx      lr
    b2f0:	e12fff1e 	bx	lr

0000b2f4 <AES_cbc_encrypt>:
#include <openssl/modes.h>

void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
                     size_t len, const AES_KEY *key,
                     unsigned char *ivec, const int enc)
{
    b2f4:	e59dc004 	ldr	ip, [sp, #4]

    if (enc)
    b2f8:	e35c0000 	cmp	ip, #0
    b2fc:	1a000003 	bne	b310 <AES_cbc_encrypt+0x1c>
        CRYPTO_cbc128_encrypt(in, out, len, key, ivec,
                              (block128_f) AES_encrypt);
    else
        CRYPTO_cbc128_decrypt(in, out, len, key, ivec,
    b300:	e30bceb4 	movw	ip, #48820	; 0xbeb4
    b304:	e340c000 	movt	ip, #0
    b308:	e58dc004 	str	ip, [sp, #4]
    b30c:	ea000b84 	b	e124 <CRYPTO_cbc128_decrypt>
        CRYPTO_cbc128_encrypt(in, out, len, key, ivec,
    b310:	e30bc9b4 	movw	ip, #47540	; 0xb9b4
    b314:	e340c000 	movt	ip, #0
    b318:	e58dc004 	str	ip, [sp, #4]
    b31c:	ea000b46 	b	e03c <CRYPTO_cbc128_encrypt>

0000b320 <AES_set_encrypt_key>:

    u32 *rk;
    int i = 0;
    u32 temp;

    if (!userKey || !key)
    b320:	e3520000 	cmp	r2, #0
    b324:	13500000 	cmpne	r0, #0
    b328:	0a000111 	beq	b774 <AES_set_encrypt_key+0x454>
        return -1;
    if (bits != 128 && bits != 192 && bits != 256)
    b32c:	e3c13040 	bic	r3, r1, #64	; 0x40
    b330:	e3530080 	cmp	r3, #128	; 0x80
    b334:	1a00005a 	bne	b4a4 <AES_set_encrypt_key+0x184>
        return -2;

    rk = key->rd_key;

    if (bits == 128)
    b338:	e3510080 	cmp	r1, #128	; 0x80
        key->rounds = 10;
    b33c:	03a0300a 	moveq	r3, #10
    b340:	058230f0 	streq	r3, [r2, #240]	; 0xf0
    if (bits == 128)
    b344:	0a000003 	beq	b358 <AES_set_encrypt_key+0x38>
    else if (bits == 192)
    b348:	e35100c0 	cmp	r1, #192	; 0xc0
    b34c:	1a000056 	bne	b4ac <AES_set_encrypt_key+0x18c>
        key->rounds = 12;
    b350:	e3a0300c 	mov	r3, #12
    b354:	e58230f0 	str	r3, [r2, #240]	; 0xf0
{
    b358:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}

    rk[0] = GETU32(userKey     );
    rk[1] = GETU32(userKey +  4);
    rk[2] = GETU32(userKey +  8);
    rk[3] = GETU32(userKey + 12);
    if (bits == 128) {
    b35c:	e3510080 	cmp	r1, #128	; 0x80
    rk[0] = GETU32(userKey     );
    b360:	e5d03001 	ldrb	r3, [r0, #1]
{
    b364:	e24dd014 	sub	sp, sp, #20
    rk[0] = GETU32(userKey     );
    b368:	e5d04000 	ldrb	r4, [r0]
    b36c:	e5d0e003 	ldrb	lr, [r0, #3]
    b370:	e1a03803 	lsl	r3, r3, #16
    b374:	e5d0c002 	ldrb	ip, [r0, #2]
    b378:	e1833c04 	orr	r3, r3, r4, lsl #24
    b37c:	e023300e 	eor	r3, r3, lr
    b380:	e183340c 	orr	r3, r3, ip, lsl #8
    b384:	e5823000 	str	r3, [r2]
    rk[1] = GETU32(userKey +  4);
    b388:	e5d05005 	ldrb	r5, [r0, #5]
    b38c:	e5d04004 	ldrb	r4, [r0, #4]
    b390:	e5d0e007 	ldrb	lr, [r0, #7]
    b394:	e5d0c006 	ldrb	ip, [r0, #6]
    b398:	e1a05805 	lsl	r5, r5, #16
    b39c:	e1855c04 	orr	r5, r5, r4, lsl #24
    b3a0:	e025500e 	eor	r5, r5, lr
    b3a4:	e185540c 	orr	r5, r5, ip, lsl #8
    b3a8:	e5825004 	str	r5, [r2, #4]
    rk[2] = GETU32(userKey +  8);
    b3ac:	e5d06009 	ldrb	r6, [r0, #9]
    b3b0:	e5d04008 	ldrb	r4, [r0, #8]
    b3b4:	e5d0e00b 	ldrb	lr, [r0, #11]
    b3b8:	e5d0c00a 	ldrb	ip, [r0, #10]
    b3bc:	e1a06806 	lsl	r6, r6, #16
    b3c0:	e1866c04 	orr	r6, r6, r4, lsl #24
    b3c4:	e026600e 	eor	r6, r6, lr
    b3c8:	e186640c 	orr	r6, r6, ip, lsl #8
    b3cc:	e5826008 	str	r6, [r2, #8]
    rk[3] = GETU32(userKey + 12);
    b3d0:	e5d0400d 	ldrb	r4, [r0, #13]
    b3d4:	e5d0700c 	ldrb	r7, [r0, #12]
    b3d8:	e5d0e00f 	ldrb	lr, [r0, #15]
    b3dc:	e5d0c00e 	ldrb	ip, [r0, #14]
    b3e0:	e1a04804 	lsl	r4, r4, #16
    b3e4:	e1844c07 	orr	r4, r4, r7, lsl #24
    b3e8:	e024400e 	eor	r4, r4, lr
    b3ec:	e184440c 	orr	r4, r4, ip, lsl #8
    b3f0:	e582400c 	str	r4, [r2, #12]
    if (bits == 128) {
    b3f4:	0a00002f 	beq	b4b8 <AES_set_encrypt_key+0x198>
                return 0;
            }
            rk += 4;
        }
    }
    rk[4] = GETU32(userKey + 16);
    b3f8:	e5d0c011 	ldrb	ip, [r0, #17]
    rk[5] = GETU32(userKey + 20);
    if (bits == 192) {
    b3fc:	e35100c0 	cmp	r1, #192	; 0xc0
    rk[4] = GETU32(userKey + 16);
    b400:	e5d08010 	ldrb	r8, [r0, #16]
    b404:	e5d07013 	ldrb	r7, [r0, #19]
    b408:	e5d0e012 	ldrb	lr, [r0, #18]
    b40c:	e1a0c80c 	lsl	ip, ip, #16
    b410:	e18ccc08 	orr	ip, ip, r8, lsl #24
    b414:	e02cc007 	eor	ip, ip, r7
    b418:	e18cc40e 	orr	ip, ip, lr, lsl #8
    b41c:	e582c010 	str	ip, [r2, #16]
    rk[5] = GETU32(userKey + 20);
    b420:	e5d07015 	ldrb	r7, [r0, #21]
    b424:	e5d08014 	ldrb	r8, [r0, #20]
    b428:	e5d0e017 	ldrb	lr, [r0, #23]
    b42c:	e5d0c016 	ldrb	ip, [r0, #22]
    b430:	e1a07807 	lsl	r7, r7, #16
    b434:	e1877c08 	orr	r7, r7, r8, lsl #24
    b438:	e027700e 	eor	r7, r7, lr
    b43c:	e187740c 	orr	r7, r7, ip, lsl #8
    b440:	e5827014 	str	r7, [r2, #20]
    if (bits == 192) {
    b444:	0a00004a 	beq	b574 <AES_set_encrypt_key+0x254>
            rk[10] = rk[ 4] ^ rk[ 9];
            rk[11] = rk[ 5] ^ rk[10];
            rk += 6;
        }
    }
    rk[6] = GETU32(userKey + 24);
    b448:	e5d0c019 	ldrb	ip, [r0, #25]
    rk[7] = GETU32(userKey + 28);
    if (bits == 256) {
    b44c:	e3510c01 	cmp	r1, #256	; 0x100
    rk[6] = GETU32(userKey + 24);
    b450:	e5d07018 	ldrb	r7, [r0, #24]
    b454:	e5d0e01b 	ldrb	lr, [r0, #27]
    b458:	e1a0180c 	lsl	r1, ip, #16
    b45c:	e5d0c01a 	ldrb	ip, [r0, #26]
    b460:	e1811c07 	orr	r1, r1, r7, lsl #24
    b464:	e021100e 	eor	r1, r1, lr
    b468:	e181140c 	orr	r1, r1, ip, lsl #8
    b46c:	e5821018 	str	r1, [r2, #24]
    rk[7] = GETU32(userKey + 28);
    b470:	e5d0701d 	ldrb	r7, [r0, #29]
    b474:	e5d0e01c 	ldrb	lr, [r0, #28]
    b478:	e5d0c01f 	ldrb	ip, [r0, #31]
    b47c:	e5d0101e 	ldrb	r1, [r0, #30]
    b480:	e1a07807 	lsl	r7, r7, #16
    b484:	e1877c0e 	orr	r7, r7, lr, lsl #24
    b488:	e027700c 	eor	r7, r7, ip
    b48c:	e1877401 	orr	r7, r7, r1, lsl #8
    b490:	e582701c 	str	r7, [r2, #28]
    if (bits == 256) {
    b494:	0a00006b 	beq	b648 <AES_set_encrypt_key+0x328>
                return 0;
    b498:	e3a00000 	mov	r0, #0

            rk += 8;
            }
    }
    return 0;
}
    b49c:	e28dd014 	add	sp, sp, #20
    b4a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bits != 128 && bits != 192 && bits != 256)
    b4a4:	e3510c01 	cmp	r1, #256	; 0x100
    b4a8:	1a0000b3 	bne	b77c <AES_set_encrypt_key+0x45c>
        key->rounds = 14;
    b4ac:	e3a0300e 	mov	r3, #14
    b4b0:	e58230f0 	str	r3, [r2, #240]	; 0xf0
    b4b4:	eaffffa7 	b	b358 <AES_set_encrypt_key+0x38>
    b4b8:	e3011ecc 	movw	r1, #7884	; 0x1ecc
    b4bc:	e30202cc 	movw	r0, #8908	; 0x22cc
    b4c0:	e30276cc 	movw	r7, #9932	; 0x26cc
    b4c4:	e30196cc 	movw	r9, #5836	; 0x16cc
    b4c8:	e3018acc 	movw	r8, #6860	; 0x1acc
    b4cc:	e3401001 	movt	r1, #1
    b4d0:	e3400001 	movt	r0, #1
    b4d4:	e3407001 	movt	r7, #1
    b4d8:	e3409001 	movt	r9, #1
    b4dc:	e3408001 	movt	r8, #1
    b4e0:	e58d1004 	str	r1, [sp, #4]
    if (bits == 128) {
    b4e4:	e3a0a401 	mov	sl, #16777216	; 0x1000000
    b4e8:	e58d0008 	str	r0, [sp, #8]
    b4ec:	ea000001 	b	b4f8 <AES_set_encrypt_key+0x1d8>
    b4f0:	e5b7a004 	ldr	sl, [r7, #4]!
    b4f4:	e2822010 	add	r2, r2, #16
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b4f8:	e1a0cc24 	lsr	ip, r4, #24
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b4fc:	e6ef1074 	uxtb	r1, r4
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b500:	e59db008 	ldr	fp, [sp, #8]
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b504:	e7d8e10c 	ldrb	lr, [r8, ip, lsl #2]
            if (++i == 10) {
    b508:	e59fc274 	ldr	ip, [pc, #628]	; b784 <AES_set_encrypt_key+0x464>
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b50c:	e7990101 	ldr	r0, [r9, r1, lsl #2]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b510:	e7e71854 	ubfx	r1, r4, #16, #8
            if (++i == 10) {
    b514:	e15c0007 	cmp	ip, r7
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b518:	e59dc004 	ldr	ip, [sp, #4]
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b51c:	e2000cff 	and	r0, r0, #65280	; 0xff00
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b520:	e180000e 	orr	r0, r0, lr
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b524:	e79c1101 	ldr	r1, [ip, r1, lsl #2]
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b528:	e7e7c454 	ubfx	ip, r4, #8, #8
    b52c:	e79bc10c 	ldr	ip, [fp, ip, lsl #2]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b530:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b534:	e0200001 	eor	r0, r0, r1
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b538:	e20cc8ff 	and	ip, ip, #16711680	; 0xff0000
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b53c:	e020000c 	eor	r0, r0, ip
    b540:	e0233000 	eor	r3, r3, r0
    b544:	e023300a 	eor	r3, r3, sl
            rk[5] = rk[1] ^ rk[4];
    b548:	e0255003 	eor	r5, r5, r3
            rk[4] = rk[0] ^
    b54c:	e5823010 	str	r3, [r2, #16]
            rk[6] = rk[2] ^ rk[5];
    b550:	e0266005 	eor	r6, r6, r5
            rk[5] = rk[1] ^ rk[4];
    b554:	e5825014 	str	r5, [r2, #20]
            rk[7] = rk[3] ^ rk[6];
    b558:	e0244006 	eor	r4, r4, r6
            rk[6] = rk[2] ^ rk[5];
    b55c:	e5826018 	str	r6, [r2, #24]
            rk[7] = rk[3] ^ rk[6];
    b560:	e582401c 	str	r4, [r2, #28]
            if (++i == 10) {
    b564:	1affffe1 	bne	b4f0 <AES_set_encrypt_key+0x1d0>
                return 0;
    b568:	e3a00000 	mov	r0, #0
}
    b56c:	e28dd014 	add	sp, sp, #20
    b570:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b574:	e3018acc 	movw	r8, #6860	; 0x1acc
    b578:	e3011ecc 	movw	r1, #7884	; 0x1ecc
    b57c:	e30202cc 	movw	r0, #8908	; 0x22cc
    b580:	e30196cc 	movw	r9, #5836	; 0x16cc
    b584:	e3408001 	movt	r8, #1
    b588:	e3401001 	movt	r1, #1
    b58c:	e3400001 	movt	r0, #1
    b590:	e59fa1f0 	ldr	sl, [pc, #496]	; b788 <AES_set_encrypt_key+0x468>
    b594:	e3409001 	movt	r9, #1
    b598:	e58d1004 	str	r1, [sp, #4]
    b59c:	e58d0008 	str	r0, [sp, #8]
    if (bits == 192) {
    b5a0:	e3a0b401 	mov	fp, #16777216	; 0x1000000
    b5a4:	e58d800c 	str	r8, [sp, #12]
    b5a8:	ea000006 	b	b5c8 <AES_set_encrypt_key+0x2a8>
            rk[10] = rk[ 4] ^ rk[ 9];
    b5ac:	e5921010 	ldr	r1, [r2, #16]
    b5b0:	e2822018 	add	r2, r2, #24
    b5b4:	e0211004 	eor	r1, r1, r4
            rk[11] = rk[ 5] ^ rk[10];
    b5b8:	e0277001 	eor	r7, r7, r1
            rk[10] = rk[ 4] ^ rk[ 9];
    b5bc:	e5821010 	str	r1, [r2, #16]
            rk[11] = rk[ 5] ^ rk[10];
    b5c0:	e5827014 	str	r7, [r2, #20]
    b5c4:	e49ab004 	ldr	fp, [sl], #4
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b5c8:	e59de00c 	ldr	lr, [sp, #12]
    b5cc:	e1a0cc27 	lsr	ip, r7, #24
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b5d0:	e6ef1077 	uxtb	r1, r7
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b5d4:	e59d8008 	ldr	r8, [sp, #8]
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b5d8:	e7dee10c 	ldrb	lr, [lr, ip, lsl #2]
            if (++i == 8) {
    b5dc:	e59fc1a8 	ldr	ip, [pc, #424]	; b78c <AES_set_encrypt_key+0x46c>
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b5e0:	e7990101 	ldr	r0, [r9, r1, lsl #2]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b5e4:	e7e71857 	ubfx	r1, r7, #16, #8
            if (++i == 8) {
    b5e8:	e15c000a 	cmp	ip, sl
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b5ec:	e59dc004 	ldr	ip, [sp, #4]
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b5f0:	e2000cff 	and	r0, r0, #65280	; 0xff00
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b5f4:	e180000e 	orr	r0, r0, lr
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b5f8:	e79c1101 	ldr	r1, [ip, r1, lsl #2]
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b5fc:	e7e7c457 	ubfx	ip, r7, #8, #8
    b600:	e798c10c 	ldr	ip, [r8, ip, lsl #2]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b604:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b608:	e0200001 	eor	r0, r0, r1
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b60c:	e20cc8ff 	and	ip, ip, #16711680	; 0xff0000
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b610:	e020000c 	eor	r0, r0, ip
    b614:	e0233000 	eor	r3, r3, r0
    b618:	e023300b 	eor	r3, r3, fp
            rk[ 7] = rk[ 1] ^ rk[ 6];
    b61c:	e0255003 	eor	r5, r5, r3
            rk[ 6] = rk[ 0] ^
    b620:	e5823018 	str	r3, [r2, #24]
            rk[ 8] = rk[ 2] ^ rk[ 7];
    b624:	e0266005 	eor	r6, r6, r5
            rk[ 7] = rk[ 1] ^ rk[ 6];
    b628:	e582501c 	str	r5, [r2, #28]
            rk[ 9] = rk[ 3] ^ rk[ 8];
    b62c:	e0244006 	eor	r4, r4, r6
            rk[ 8] = rk[ 2] ^ rk[ 7];
    b630:	e5826020 	str	r6, [r2, #32]
            rk[ 9] = rk[ 3] ^ rk[ 8];
    b634:	e5824024 	str	r4, [r2, #36]	; 0x24
            if (++i == 8) {
    b638:	1affffdb 	bne	b5ac <AES_set_encrypt_key+0x28c>
                return 0;
    b63c:	e3a00000 	mov	r0, #0
}
    b640:	e28dd014 	add	sp, sp, #20
    b644:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b648:	e3018acc 	movw	r8, #6860	; 0x1acc
    b64c:	e3011ecc 	movw	r1, #7884	; 0x1ecc
    b650:	e30202cc 	movw	r0, #8908	; 0x22cc
    b654:	e30196cc 	movw	r9, #5836	; 0x16cc
    b658:	e3408001 	movt	r8, #1
    b65c:	e3401001 	movt	r1, #1
    b660:	e3400001 	movt	r0, #1
    b664:	e59fb11c 	ldr	fp, [pc, #284]	; b788 <AES_set_encrypt_key+0x468>
    b668:	e3409001 	movt	r9, #1
    b66c:	e58d1004 	str	r1, [sp, #4]
    b670:	e58d0008 	str	r0, [sp, #8]
    if (bits == 256) {
    b674:	e3a0a401 	mov	sl, #16777216	; 0x1000000
    b678:	e58d800c 	str	r8, [sp, #12]
    b67c:	ea000018 	b	b6e4 <AES_set_encrypt_key+0x3c4>
                (Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
    b680:	e798c10c 	ldr	ip, [r8, ip, lsl #2]
    b684:	e2822020 	add	r2, r2, #32
                (Te2[(temp >> 24)       ] & 0xff000000) ^
    b688:	e59d8004 	ldr	r8, [sp, #4]
                (Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
    b68c:	e7991101 	ldr	r1, [r9, r1, lsl #2]
    b690:	e512a010 	ldr	sl, [r2, #-16]
                (Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
    b694:	e20cc8ff 	and	ip, ip, #16711680	; 0xff0000
                (Te2[(temp >> 24)       ] & 0xff000000) ^
    b698:	e7980100 	ldr	r0, [r8, r0, lsl #2]
                (Te1[(temp      ) & 0xff] & 0x000000ff);
    b69c:	e59d800c 	ldr	r8, [sp, #12]
                (Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
    b6a0:	e2011cff 	and	r1, r1, #65280	; 0xff00
    b6a4:	e18c1001 	orr	r1, ip, r1
                (Te2[(temp >> 24)       ] & 0xff000000) ^
    b6a8:	e20004ff 	and	r0, r0, #-16777216	; 0xff000000
                (Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
    b6ac:	e021100a 	eor	r1, r1, sl
                (Te1[(temp      ) & 0xff] & 0x000000ff);
    b6b0:	e7d8e10e 	ldrb	lr, [r8, lr, lsl #2]
                (Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
    b6b4:	e180000e 	orr	r0, r0, lr
    b6b8:	e0200001 	eor	r0, r0, r1
            rk[13] = rk[ 5] ^ rk[12];
    b6bc:	e512100c 	ldr	r1, [r2, #-12]
            rk[12] = rk[ 4] ^
    b6c0:	e5820010 	str	r0, [r2, #16]
            rk[13] = rk[ 5] ^ rk[12];
    b6c4:	e0201001 	eor	r1, r0, r1
            rk[14] = rk[ 6] ^ rk[13];
    b6c8:	e5120008 	ldr	r0, [r2, #-8]
            rk[13] = rk[ 5] ^ rk[12];
    b6cc:	e5821014 	str	r1, [r2, #20]
            rk[14] = rk[ 6] ^ rk[13];
    b6d0:	e0210000 	eor	r0, r1, r0
            rk[15] = rk[ 7] ^ rk[14];
    b6d4:	e0277000 	eor	r7, r7, r0
            rk[14] = rk[ 6] ^ rk[13];
    b6d8:	e5820018 	str	r0, [r2, #24]
            rk[15] = rk[ 7] ^ rk[14];
    b6dc:	e582701c 	str	r7, [r2, #28]
    b6e0:	e49ba004 	ldr	sl, [fp], #4
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b6e4:	e59d800c 	ldr	r8, [sp, #12]
    b6e8:	e1a0cc27 	lsr	ip, r7, #24
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b6ec:	e6ef1077 	uxtb	r1, r7
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b6f0:	e7d8e10c 	ldrb	lr, [r8, ip, lsl #2]
            if (++i == 7) {
    b6f4:	e59fc094 	ldr	ip, [pc, #148]	; b790 <AES_set_encrypt_key+0x470>
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b6f8:	e59d8008 	ldr	r8, [sp, #8]
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b6fc:	e7990101 	ldr	r0, [r9, r1, lsl #2]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b700:	e7e71857 	ubfx	r1, r7, #16, #8
            if (++i == 7) {
    b704:	e15c000b 	cmp	ip, fp
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b708:	e59dc004 	ldr	ip, [sp, #4]
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
    b70c:	e2000cff 	and	r0, r0, #65280	; 0xff00
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b710:	e79c1101 	ldr	r1, [ip, r1, lsl #2]
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b714:	e7e7c457 	ubfx	ip, r7, #8, #8
    b718:	e798c10c 	ldr	ip, [r8, ip, lsl #2]
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b71c:	e180000e 	orr	r0, r0, lr
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
    b720:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b724:	e0200001 	eor	r0, r0, r1
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
    b728:	e20cc8ff 	and	ip, ip, #16711680	; 0xff0000
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
    b72c:	e020000c 	eor	r0, r0, ip
    b730:	e0233000 	eor	r3, r3, r0
    b734:	e023300a 	eor	r3, r3, sl
            rk[ 9] = rk[ 1] ^ rk[ 8];
    b738:	e0255003 	eor	r5, r5, r3
            rk[ 8] = rk[ 0] ^
    b73c:	e5823020 	str	r3, [r2, #32]
            rk[10] = rk[ 2] ^ rk[ 9];
    b740:	e0266005 	eor	r6, r6, r5
            rk[ 9] = rk[ 1] ^ rk[ 8];
    b744:	e5825024 	str	r5, [r2, #36]	; 0x24
            rk[11] = rk[ 3] ^ rk[10];
    b748:	e0244006 	eor	r4, r4, r6
            rk[10] = rk[ 2] ^ rk[ 9];
    b74c:	e5826028 	str	r6, [r2, #40]	; 0x28
                (Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
    b750:	e7e7c854 	ubfx	ip, r4, #16, #8
                (Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
    b754:	e7e71454 	ubfx	r1, r4, #8, #8
                (Te2[(temp >> 24)       ] & 0xff000000) ^
    b758:	e1a00c24 	lsr	r0, r4, #24
                (Te1[(temp      ) & 0xff] & 0x000000ff);
    b75c:	e6efe074 	uxtb	lr, r4
            rk[11] = rk[ 3] ^ rk[10];
    b760:	e582402c 	str	r4, [r2, #44]	; 0x2c
            if (++i == 7) {
    b764:	1affffc5 	bne	b680 <AES_set_encrypt_key+0x360>
                return 0;
    b768:	e3a00000 	mov	r0, #0
}
    b76c:	e28dd014 	add	sp, sp, #20
    b770:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
    b774:	e3e00000 	mvn	r0, #0
    b778:	e12fff1e 	bx	lr
        return -2;
    b77c:	e3e00001 	mvn	r0, #1
}
    b780:	e12fff1e 	bx	lr
    b784:	000126f0 	.word	0x000126f0
    b788:	000126d0 	.word	0x000126d0
    b78c:	000126ec 	.word	0x000126ec
    b790:	000126e8 	.word	0x000126e8

0000b794 <AES_set_decrypt_key>:
/**
 * Expand the cipher key into the decryption key schedule.
 */
int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                        AES_KEY *key)
{
    b794:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b798:	e24dd014 	sub	sp, sp, #20
    b79c:	e1a04002 	mov	r4, r2
    b7a0:	e58d200c 	str	r2, [sp, #12]
    u32 *rk;
    int i, j, status;
    u32 temp;

    /* first, start with an encryption schedule */
    status = AES_set_encrypt_key(userKey, bits, key);
    b7a4:	ebfffedd 	bl	b320 <AES_set_encrypt_key>
    if (status < 0)
    b7a8:	e3500000 	cmp	r0, #0
    b7ac:	ba00007e 	blt	b9ac <AES_set_decrypt_key+0x218>
        return status;

    rk = key->rd_key;

    /* invert the order of the round keys: */
    for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
    b7b0:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    b7b4:	e1a02004 	mov	r2, r4
    b7b8:	e1a0e103 	lsl	lr, r3, #2
    b7bc:	e35e0000 	cmp	lr, #0
    b7c0:	da000019 	ble	b82c <AES_set_decrypt_key+0x98>
    b7c4:	e0843203 	add	r3, r4, r3, lsl #4
    b7c8:	e3a01000 	mov	r1, #0
        temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
    b7cc:	e5920000 	ldr	r0, [r2]
    for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
    b7d0:	e2811004 	add	r1, r1, #4
        temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
    b7d4:	e593c000 	ldr	ip, [r3]
    for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
    b7d8:	e04e4001 	sub	r4, lr, r1
    b7dc:	e1510004 	cmp	r1, r4
    b7e0:	e2822010 	add	r2, r2, #16
    b7e4:	e2433010 	sub	r3, r3, #16
        temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
    b7e8:	e502c010 	str	ip, [r2, #-16]
    b7ec:	e5830010 	str	r0, [r3, #16]
        temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
    b7f0:	e593c014 	ldr	ip, [r3, #20]
    b7f4:	e512000c 	ldr	r0, [r2, #-12]
    b7f8:	e502c00c 	str	ip, [r2, #-12]
    b7fc:	e5830014 	str	r0, [r3, #20]
        temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
    b800:	e593c018 	ldr	ip, [r3, #24]
    b804:	e5120008 	ldr	r0, [r2, #-8]
    b808:	e502c008 	str	ip, [r2, #-8]
    b80c:	e5830018 	str	r0, [r3, #24]
        temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
    b810:	e593c01c 	ldr	ip, [r3, #28]
    b814:	e5120004 	ldr	r0, [r2, #-4]
    b818:	e502c004 	str	ip, [r2, #-4]
    b81c:	e583001c 	str	r0, [r3, #28]
    for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
    b820:	baffffe9 	blt	b7cc <AES_set_decrypt_key+0x38>
    b824:	e59d300c 	ldr	r3, [sp, #12]
    b828:	e59330f0 	ldr	r3, [r3, #240]	; 0xf0
    }
    /* apply the inverse MixColumn transform to all round keys but the first and the last: */
    for (i = 1; i < (key->rounds); i++) {
    b82c:	e3530001 	cmp	r3, #1
    b830:	da00005c 	ble	b9a8 <AES_set_decrypt_key+0x214>
    b834:	e59d100c 	ldr	r1, [sp, #12]
    b838:	e30085cc 	movw	r8, #1484	; 0x5cc
    b83c:	e3013acc 	movw	r3, #6860	; 0x1acc
    b840:	e30171cc 	movw	r7, #4556	; 0x11cc
    b844:	e30069cc 	movw	r6, #2508	; 0x9cc
    b848:	e3002dcc 	movw	r2, #3532	; 0xdcc
    b84c:	e3402001 	movt	r2, #1
    b850:	e3408001 	movt	r8, #1
    b854:	e3403001 	movt	r3, #1
    b858:	e3407001 	movt	r7, #1
    b85c:	e3406001 	movt	r6, #1
    b860:	e58d2008 	str	r2, [sp, #8]
    b864:	e3a02001 	mov	r2, #1
    b868:	e58d2004 	str	r2, [sp, #4]
        rk += 4;
        rk[0] =
            Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
    b86c:	e591b010 	ldr	fp, [r1, #16]
    b870:	e2811010 	add	r1, r1, #16
    for (i = 1; i < (key->rounds); i++) {
    b874:	e59d2004 	ldr	r2, [sp, #4]
            Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
            Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
        rk[1] =
            Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
    b878:	e5919004 	ldr	r9, [r1, #4]
            Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
    b87c:	e1a04c2b 	lsr	r4, fp, #24
            Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
    b880:	e6efe07b 	uxtb	lr, fp
    for (i = 1; i < (key->rounds); i++) {
    b884:	e2822001 	add	r2, r2, #1
            Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
    b888:	e7d35104 	ldrb	r5, [r3, r4, lsl #2]
    for (i = 1; i < (key->rounds); i++) {
    b88c:	e58d2004 	str	r2, [sp, #4]
            Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
    b890:	e1a0cc29 	lsr	ip, r9, #24
            Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
            Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
        rk[2] =
            Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
    b894:	e5912008 	ldr	r2, [r1, #8]
            Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
    b898:	e6ef0079 	uxtb	r0, r9
            Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
    b89c:	e7d3e10e 	ldrb	lr, [r3, lr, lsl #2]
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b8a0:	e7985105 	ldr	r5, [r8, r5, lsl #2]
            Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
    b8a4:	e7d3410c 	ldrb	r4, [r3, ip, lsl #2]
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b8a8:	e797e10e 	ldr	lr, [r7, lr, lsl #2]
            Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
    b8ac:	e1a0cc22 	lsr	ip, r2, #24
            Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
    b8b0:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
            Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
    b8b4:	e7d3a10c 	ldrb	sl, [r3, ip, lsl #2]
            Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
            Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
    b8b8:	e6efc072 	uxtb	ip, r2
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b8bc:	e025500e 	eor	r5, r5, lr
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b8c0:	e7984104 	ldr	r4, [r8, r4, lsl #2]
            Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
    b8c4:	e7e7e85b 	ubfx	lr, fp, #16, #8
            Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
    b8c8:	e7d3c10c 	ldrb	ip, [r3, ip, lsl #2]
            Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
    b8cc:	e7d3e10e 	ldrb	lr, [r3, lr, lsl #2]
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b8d0:	e7e7b45b 	ubfx	fp, fp, #8, #8
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b8d4:	e7970100 	ldr	r0, [r7, r0, lsl #2]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b8d8:	e798a10a 	ldr	sl, [r8, sl, lsl #2]
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b8dc:	e796e10e 	ldr	lr, [r6, lr, lsl #2]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b8e0:	e797c10c 	ldr	ip, [r7, ip, lsl #2]
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b8e4:	e0244000 	eor	r4, r4, r0
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b8e8:	e7d3b10b 	ldrb	fp, [r3, fp, lsl #2]
            Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
    b8ec:	e7e70859 	ubfx	r0, r9, #16, #8
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b8f0:	e02ee005 	eor	lr, lr, r5
    b8f4:	e59d5008 	ldr	r5, [sp, #8]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b8f8:	e02cc00a 	eor	ip, ip, sl
            Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
    b8fc:	e7e7a852 	ubfx	sl, r2, #16, #8
            Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
    b900:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b904:	e7e72452 	ubfx	r2, r2, #8, #8
            Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
    b908:	e7d3a10a 	ldrb	sl, [r3, sl, lsl #2]
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b90c:	e7e79459 	ubfx	r9, r9, #8, #8
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b910:	e795510b 	ldr	r5, [r5, fp, lsl #2]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b914:	e7d32102 	ldrb	r2, [r3, r2, lsl #2]
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b918:	e59db008 	ldr	fp, [sp, #8]
    b91c:	e7d39109 	ldrb	r9, [r3, r9, lsl #2]
            Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
    b920:	e02ee005 	eor	lr, lr, r5
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b924:	e7960100 	ldr	r0, [r6, r0, lsl #2]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b928:	e796a10a 	ldr	sl, [r6, sl, lsl #2]
        rk[3] =
            Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
    b92c:	e591500c 	ldr	r5, [r1, #12]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b930:	e79b2102 	ldr	r2, [fp, r2, lsl #2]
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b934:	e0200004 	eor	r0, r0, r4
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b938:	e02cc00a 	eor	ip, ip, sl
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b93c:	e79b4109 	ldr	r4, [fp, r9, lsl #2]
        rk[0] =
    b940:	e581e000 	str	lr, [r1]
            Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
    b944:	e022200c 	eor	r2, r2, ip
            Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
            Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
            Td3[Te1[(rk[3]      ) & 0xff] & 0xff];
    b948:	e6efc075 	uxtb	ip, r5
        rk[2] =
    b94c:	e5812008 	str	r2, [r1, #8]
            Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
    b950:	e1a02c25 	lsr	r2, r5, #24
            Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
    b954:	e0200004 	eor	r0, r0, r4
            Td3[Te1[(rk[3]      ) & 0xff] & 0xff];
    b958:	e7d3e10c 	ldrb	lr, [r3, ip, lsl #2]
        rk[1] =
    b95c:	e5810004 	str	r0, [r1, #4]
            Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
    b960:	e7e70855 	ubfx	r0, r5, #16, #8
            Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
    b964:	e7d32102 	ldrb	r2, [r3, r2, lsl #2]
            Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
    b968:	e7e75455 	ubfx	r5, r5, #8, #8
            Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
    b96c:	e7d3c100 	ldrb	ip, [r3, r0, lsl #2]
            Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
    b970:	e797e10e 	ldr	lr, [r7, lr, lsl #2]
    b974:	e7d30105 	ldrb	r0, [r3, r5, lsl #2]
    b978:	e7982102 	ldr	r2, [r8, r2, lsl #2]
    b97c:	e796c10c 	ldr	ip, [r6, ip, lsl #2]
    b980:	e79b0100 	ldr	r0, [fp, r0, lsl #2]
    b984:	e022200e 	eor	r2, r2, lr
    b988:	e022200c 	eor	r2, r2, ip
    for (i = 1; i < (key->rounds); i++) {
    b98c:	e59dc00c 	ldr	ip, [sp, #12]
            Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
    b990:	e0222000 	eor	r2, r2, r0
    for (i = 1; i < (key->rounds); i++) {
    b994:	e59d0004 	ldr	r0, [sp, #4]
        rk[3] =
    b998:	e581200c 	str	r2, [r1, #12]
    for (i = 1; i < (key->rounds); i++) {
    b99c:	e59c20f0 	ldr	r2, [ip, #240]	; 0xf0
    b9a0:	e1520000 	cmp	r2, r0
    b9a4:	caffffb0 	bgt	b86c <AES_set_decrypt_key+0xd8>
    }
    return 0;
    b9a8:	e3a00000 	mov	r0, #0
}
    b9ac:	e28dd014 	add	sp, sp, #20
    b9b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b9b4 <AES_encrypt>:
/*
 * Encrypt a single block
 * in and out can overlap
 */
void AES_encrypt(const unsigned char *in, unsigned char *out,
                 const AES_KEY *key) {
    b9b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9b8:	e24dd044 	sub	sp, sp, #68	; 0x44
    b9bc:	e1a08002 	mov	r8, r2
    b9c0:	e58d2034 	str	r2, [sp, #52]	; 0x34
    b9c4:	e301aecc 	movw	sl, #7884	; 0x1ecc
    b9c8:	e30292cc 	movw	r9, #8908	; 0x22cc

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    s0 = GETU32(in     ) ^ rk[0];
    b9cc:	e5d02001 	ldrb	r2, [r0, #1]
    b9d0:	e340a001 	movt	sl, #1
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
    b9d4:	e5d04009 	ldrb	r4, [r0, #9]
    b9d8:	e301bacc 	movw	fp, #6860	; 0x1acc
    s3 = GETU32(in + 12) ^ rk[3];
    b9dc:	e5d0300d 	ldrb	r3, [r0, #13]
    b9e0:	e340b001 	movt	fp, #1
    s0 = GETU32(in     ) ^ rk[0];
    b9e4:	e5d07000 	ldrb	r7, [r0]
    b9e8:	e3409001 	movt	r9, #1
    s1 = GETU32(in +  4) ^ rk[1];
    b9ec:	e5d0c005 	ldrb	ip, [r0, #5]
    s0 = GETU32(in     ) ^ rk[0];
    b9f0:	e1a02802 	lsl	r2, r2, #16
    s2 = GETU32(in +  8) ^ rk[2];
    b9f4:	e5d0e008 	ldrb	lr, [r0, #8]
    b9f8:	e1a04804 	lsl	r4, r4, #16
    s3 = GETU32(in + 12) ^ rk[3];
    b9fc:	e5d0500c 	ldrb	r5, [r0, #12]
    ba00:	e1a03803 	lsl	r3, r3, #16
    s1 = GETU32(in +  4) ^ rk[1];
    ba04:	e5d06004 	ldrb	r6, [r0, #4]
    s0 = GETU32(in     ) ^ rk[0];
    ba08:	e1827c07 	orr	r7, r2, r7, lsl #24
    ba0c:	e5d02003 	ldrb	r2, [r0, #3]
    s1 = GETU32(in +  4) ^ rk[1];
    ba10:	e1a0c80c 	lsl	ip, ip, #16
    s2 = GETU32(in +  8) ^ rk[2];
    ba14:	e1844c0e 	orr	r4, r4, lr, lsl #24
                 const AES_KEY *key) {
    ba18:	e58d103c 	str	r1, [sp, #60]	; 0x3c
    s2 = GETU32(in +  8) ^ rk[2];
    ba1c:	e5d0e00b 	ldrb	lr, [r0, #11]
    s3 = GETU32(in + 12) ^ rk[3];
    ba20:	e1831c05 	orr	r1, r3, r5, lsl #24
    s1 = GETU32(in +  4) ^ rk[1];
    ba24:	e5d03007 	ldrb	r3, [r0, #7]
    s0 = GETU32(in     ) ^ rk[0];
    ba28:	e0222007 	eor	r2, r2, r7
    s1 = GETU32(in +  4) ^ rk[1];
    ba2c:	e18ccc06 	orr	ip, ip, r6, lsl #24
    ba30:	e30176cc 	movw	r7, #5836	; 0x16cc
    ba34:	e3407001 	movt	r7, #1
    ba38:	e5d05006 	ldrb	r5, [r0, #6]
    s2 = GETU32(in +  8) ^ rk[2];
    ba3c:	e02ee004 	eor	lr, lr, r4
    s0 = GETU32(in     ) ^ rk[0];
    ba40:	e5d06002 	ldrb	r6, [r0, #2]
    s1 = GETU32(in +  4) ^ rk[1];
    ba44:	e02cc003 	eor	ip, ip, r3
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    ba48:	e59840f0 	ldr	r4, [r8, #240]	; 0xf0
    s3 = GETU32(in + 12) ^ rk[3];
    ba4c:	e5d0300f 	ldrb	r3, [r0, #15]
    ba50:	e58d7008 	str	r7, [sp, #8]
    s1 = GETU32(in +  4) ^ rk[1];
    ba54:	e18cc405 	orr	ip, ip, r5, lsl #8
    s2 = GETU32(in +  8) ^ rk[2];
    ba58:	e5d0700a 	ldrb	r7, [r0, #10]
    s0 = GETU32(in     ) ^ rk[0];
    ba5c:	e1826406 	orr	r6, r2, r6, lsl #8
    s3 = GETU32(in + 12) ^ rk[3];
    ba60:	e5d0000e 	ldrb	r0, [r0, #14]
    ba64:	e0233001 	eor	r3, r3, r1
    s1 = GETU32(in +  4) ^ rk[1];
    ba68:	e5981004 	ldr	r1, [r8, #4]
    s0 = GETU32(in     ) ^ rk[0];
    ba6c:	e5985000 	ldr	r5, [r8]
    s2 = GETU32(in +  8) ^ rk[2];
    ba70:	e18e2407 	orr	r2, lr, r7, lsl #8
    r = key->rounds >> 1;
    ba74:	e1a070c4 	asr	r7, r4, #1
    s3 = GETU32(in + 12) ^ rk[3];
    ba78:	e1833400 	orr	r3, r3, r0, lsl #8
    ba7c:	e598400c 	ldr	r4, [r8, #12]
    s2 = GETU32(in +  8) ^ rk[2];
    ba80:	e5980008 	ldr	r0, [r8, #8]
    s1 = GETU32(in +  4) ^ rk[1];
    ba84:	e02ce001 	eor	lr, ip, r1
    ba88:	e1a0100a 	mov	r1, sl
    r = key->rounds >> 1;
    ba8c:	e58d7038 	str	r7, [sp, #56]	; 0x38
    ba90:	e1a0a00b 	mov	sl, fp
    s0 = GETU32(in     ) ^ rk[0];
    ba94:	e0255006 	eor	r5, r5, r6
    s2 = GETU32(in +  8) ^ rk[2];
    ba98:	e0222000 	eor	r2, r2, r0
    s3 = GETU32(in + 12) ^ rk[3];
    ba9c:	e0233004 	eor	r3, r3, r4
    r = key->rounds >> 1;
    baa0:	e58d7010 	str	r7, [sp, #16]
    baa4:	e1a0b001 	mov	fp, r1
    baa8:	e58d8004 	str	r8, [sp, #4]
    baac:	e58d900c 	str	r9, [sp, #12]
    bab0:	ea00002f 	b	bb74 <AES_encrypt+0x1c0>
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
    bab4:	e59dc008 	ldr	ip, [sp, #8]
    bab8:	e79c0104 	ldr	r0, [ip, r4, lsl #2]
    babc:	e59d400c 	ldr	r4, [sp, #12]
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
    bac0:	e79cc103 	ldr	ip, [ip, r3, lsl #2]
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
    bac4:	e59d3008 	ldr	r3, [sp, #8]
        s0 =
    bac8:	e7945105 	ldr	r5, [r4, r5, lsl #2]
        s1 =
    bacc:	e7944102 	ldr	r4, [r4, r2, lsl #2]
        s2 =
    bad0:	e7932107 	ldr	r2, [r3, r7, lsl #2]
        s0 =
    bad4:	e0255000 	eor	r5, r5, r0
        s2 =
    bad8:	e59d701c 	ldr	r7, [sp, #28]
        s0 =
    badc:	e025500e 	eor	r5, r5, lr
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
    bae0:	e59de020 	ldr	lr, [sp, #32]
        s2 =
    bae4:	e59d000c 	ldr	r0, [sp, #12]
        s3 =
    bae8:	e793310e 	ldr	r3, [r3, lr, lsl #2]
        s1 =
    baec:	e02ce004 	eor	lr, ip, r4
        s3 =
    baf0:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
        s2 =
    baf4:	e7907107 	ldr	r7, [r0, r7, lsl #2]
        s1 =
    baf8:	e59d4004 	ldr	r4, [sp, #4]
        s3 =
    bafc:	e790010c 	ldr	r0, [r0, ip, lsl #2]
        s2 =
    bb00:	e0222007 	eor	r2, r2, r7
        s1 =
    bb04:	e594c004 	ldr	ip, [r4, #4]
        s2 =
    bb08:	e1a07004 	mov	r7, r4
        s3 =
    bb0c:	e0233000 	eor	r3, r3, r0
        s0 =
    bb10:	e79a0106 	ldr	r0, [sl, r6, lsl #2]
        s2 =
    bb14:	e5944008 	ldr	r4, [r4, #8]
        s1 =
    bb18:	e02ee00c 	eor	lr, lr, ip
        s0 =
    bb1c:	e79b6101 	ldr	r6, [fp, r1, lsl #2]
        s1 =
    bb20:	e79ac109 	ldr	ip, [sl, r9, lsl #2]
        s0 =
    bb24:	e0255000 	eor	r5, r5, r0
        s2 =
    bb28:	e59d1018 	ldr	r1, [sp, #24]
    bb2c:	e0222004 	eor	r2, r2, r4
        s1 =
    bb30:	e59d0014 	ldr	r0, [sp, #20]
        s0 =
    bb34:	e0255006 	eor	r5, r5, r6
        s3 =
    bb38:	e597700c 	ldr	r7, [r7, #12]
        s1 =
    bb3c:	e02ee00c 	eor	lr, lr, ip
        s3 =
    bb40:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
        s1 =
    bb44:	e79bc100 	ldr	ip, [fp, r0, lsl #2]
        s2 =
    bb48:	e79b0101 	ldr	r0, [fp, r1, lsl #2]
        s3 =
    bb4c:	e0233007 	eor	r3, r3, r7
    bb50:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
        s2 =
    bb54:	e79a9108 	ldr	r9, [sl, r8, lsl #2]
        s1 =
    bb58:	e02ee00c 	eor	lr, lr, ip
        s3 =
    bb5c:	e79a7104 	ldr	r7, [sl, r4, lsl #2]
    bb60:	e79b1101 	ldr	r1, [fp, r1, lsl #2]
        s2 =
    bb64:	e0222009 	eor	r2, r2, r9
        s3 =
    bb68:	e0233007 	eor	r3, r3, r7
        s2 =
    bb6c:	e0222000 	eor	r2, r2, r0
        s3 =
    bb70:	e0233001 	eor	r3, r3, r1
        t0 =
    bb74:	e59d900c 	ldr	r9, [sp, #12]
            Te3[(s3      ) & 0xff] ^
    bb78:	e6ef4073 	uxtb	r4, r3
            Te0[(s3 >> 24)       ] ^
    bb7c:	e1a08c23 	lsr	r8, r3, #24
            Te3[(s0      ) & 0xff] ^
    bb80:	e6ef7075 	uxtb	r7, r5
            Te0[(s0 >> 24)       ] ^
    bb84:	e1a00c25 	lsr	r0, r5, #24
            Te0[(s1 >> 24)       ] ^
    bb88:	e1a01c2e 	lsr	r1, lr, #24
        t0 =
    bb8c:	e7999104 	ldr	r9, [r9, r4, lsl #2]
            Te0[(s2 >> 24)       ] ^
    bb90:	e1a06c22 	lsr	r6, r2, #24
            Te0[(s3 >> 24)       ] ^
    bb94:	e58d8024 	str	r8, [sp, #36]	; 0x24
            Te3[(s2      ) & 0xff] ^
    bb98:	e6efc072 	uxtb	ip, r2
        t0 =
    bb9c:	e59d8008 	ldr	r8, [sp, #8]
            Te1[(s1 >> 16) & 0xff] ^
    bba0:	e7e7485e 	ubfx	r4, lr, #16, #8
        t0 =
    bba4:	e58d9014 	str	r9, [sp, #20]
        t1 =
    bba8:	e59d900c 	ldr	r9, [sp, #12]
        t0 =
    bbac:	e7980100 	ldr	r0, [r8, r0, lsl #2]
        t1 =
    bbb0:	e7981101 	ldr	r1, [r8, r1, lsl #2]
            Te1[(s2 >> 16) & 0xff] ^
    bbb4:	e7e78852 	ubfx	r8, r2, #16, #8
        t1 =
    bbb8:	e7997107 	ldr	r7, [r9, r7, lsl #2]
            Te2[(s2 >>  8) & 0xff] ^
    bbbc:	e7e72452 	ubfx	r2, r2, #8, #8
        t2 =
    bbc0:	e59d9008 	ldr	r9, [sp, #8]
            Te1[(s2 >> 16) & 0xff] ^
    bbc4:	e58d8018 	str	r8, [sp, #24]
            Te1[(s3 >> 16) & 0xff] ^
    bbc8:	e7e78853 	ubfx	r8, r3, #16, #8
    bbcc:	e58d8020 	str	r8, [sp, #32]
        t2 =
    bbd0:	e6ef807e 	uxtb	r8, lr
    bbd4:	e7996106 	ldr	r6, [r9, r6, lsl #2]
            Te1[(s0 >> 16) & 0xff] ^
    bbd8:	e7e79855 	ubfx	r9, r5, #16, #8
    bbdc:	e58d9028 	str	r9, [sp, #40]	; 0x28
        t1 =
    bbe0:	e0211007 	eor	r1, r1, r7
        t3 =
    bbe4:	e59d900c 	ldr	r9, [sp, #12]
            Te2[(s0 >>  8) & 0xff] ^
    bbe8:	e7e75455 	ubfx	r5, r5, #8, #8
        t0 =
    bbec:	e79a4104 	ldr	r4, [sl, r4, lsl #2]
            Te2[(s3 >>  8) & 0xff] ^
    bbf0:	e7e73453 	ubfx	r3, r3, #8, #8
            Te2[(s1 >>  8) & 0xff] ^
    bbf4:	e7e7e45e 	ubfx	lr, lr, #8, #8
        t3 =
    bbf8:	e799c10c 	ldr	ip, [r9, ip, lsl #2]
        t2 =
    bbfc:	e7999108 	ldr	r9, [r9, r8, lsl #2]
        t3 =
    bc00:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
        t2 =
    bc04:	e58d901c 	str	r9, [sp, #28]
        t3 =
    bc08:	e59d9008 	ldr	r9, [sp, #8]
        t2 =
    bc0c:	e59d701c 	ldr	r7, [sp, #28]
        t3 =
    bc10:	e7998108 	ldr	r8, [r9, r8, lsl #2]
        t2 =
    bc14:	e0266007 	eor	r6, r6, r7
        t0 =
    bc18:	e59d9014 	ldr	r9, [sp, #20]
        t3 =
    bc1c:	e02cc008 	eor	ip, ip, r8
        t1 =
    bc20:	e59d8018 	ldr	r8, [sp, #24]
        t0 =
    bc24:	e0200009 	eor	r0, r0, r9
        t1 =
    bc28:	e79a7108 	ldr	r7, [sl, r8, lsl #2]
        t0 =
    bc2c:	e59d8004 	ldr	r8, [sp, #4]
        t1 =
    bc30:	e58d7014 	str	r7, [sp, #20]
        t0 =
    bc34:	e5987010 	ldr	r7, [r8, #16]
        t2 =
    bc38:	e59d8020 	ldr	r8, [sp, #32]
        t0 =
    bc3c:	e0200007 	eor	r0, r0, r7
        t2 =
    bc40:	e79a9108 	ldr	r9, [sl, r8, lsl #2]
        t0 =
    bc44:	e0200004 	eor	r0, r0, r4
        t1 =
    bc48:	e59d8004 	ldr	r8, [sp, #4]
    bc4c:	e5988014 	ldr	r8, [r8, #20]
        t3 =
    bc50:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
        t2 =
    bc54:	e79b5105 	ldr	r5, [fp, r5, lsl #2]
        t1 =
    bc58:	e0211008 	eor	r1, r1, r8
        t2 =
    bc5c:	e59d8004 	ldr	r8, [sp, #4]
        t3 =
    bc60:	e79a7107 	ldr	r7, [sl, r7, lsl #2]
        t1 =
    bc64:	e79b3103 	ldr	r3, [fp, r3, lsl #2]
        t2 =
    bc68:	e5988018 	ldr	r8, [r8, #24]
        t3 =
    bc6c:	e79be10e 	ldr	lr, [fp, lr, lsl #2]
        t0 =
    bc70:	e79b2102 	ldr	r2, [fp, r2, lsl #2]
        t2 =
    bc74:	e0266008 	eor	r6, r6, r8
        t3 =
    bc78:	e59d8004 	ldr	r8, [sp, #4]
        t2 =
    bc7c:	e0266009 	eor	r6, r6, r9
    bc80:	e0269005 	eor	r9, r6, r5
        t0 =
    bc84:	e0200002 	eor	r0, r0, r2
        t3 =
    bc88:	e598801c 	ldr	r8, [r8, #28]
    bc8c:	e6ef6079 	uxtb	r6, r9
    bc90:	e1a04c20 	lsr	r4, r0, #24
    bc94:	e6ef2070 	uxtb	r2, r0
    bc98:	e58d602c 	str	r6, [sp, #44]	; 0x2c
    bc9c:	e02cc008 	eor	ip, ip, r8
        if (--r == 0) {
    bca0:	e59d8010 	ldr	r8, [sp, #16]
        t3 =
    bca4:	e02cc007 	eor	ip, ip, r7
    bca8:	e1a07c29 	lsr	r7, r9, #24
    bcac:	e02cc00e 	eor	ip, ip, lr
        if (--r == 0) {
    bcb0:	e2588001 	subs	r8, r8, #1
    bcb4:	e1a06c2c 	lsr	r6, ip, #24
    bcb8:	e58d8010 	str	r8, [sp, #16]
    bcbc:	e6ef507c 	uxtb	r5, ip
        t1 =
    bcc0:	e59d8014 	ldr	r8, [sp, #20]
    bcc4:	e58d6020 	str	r6, [sp, #32]
    bcc8:	e7e76450 	ubfx	r6, r0, #8, #8
    bccc:	e7e70850 	ubfx	r0, r0, #16, #8
    bcd0:	e58d6018 	str	r6, [sp, #24]
    bcd4:	e0211008 	eor	r1, r1, r8
    bcd8:	e59d8004 	ldr	r8, [sp, #4]
    bcdc:	e0211003 	eor	r1, r1, r3
    bce0:	e58d0024 	str	r0, [sp, #36]	; 0x24
    bce4:	e6efe071 	uxtb	lr, r1
    bce8:	e7e7045c 	ubfx	r0, ip, #8, #8
    bcec:	e1a03c21 	lsr	r3, r1, #24
    bcf0:	e7e76851 	ubfx	r6, r1, #16, #8
    bcf4:	e58de01c 	str	lr, [sp, #28]
    bcf8:	e7e71451 	ubfx	r1, r1, #8, #8
    bcfc:	e5b8e020 	ldr	lr, [r8, #32]!
    bd00:	e58d0014 	str	r0, [sp, #20]
    bd04:	e7e7085c 	ubfx	r0, ip, #16, #8
    bd08:	e58d1028 	str	r1, [sp, #40]	; 0x28
    bd0c:	e7e71459 	ubfx	r1, r9, #8, #8
    bd10:	e58d8004 	str	r8, [sp, #4]
    bd14:	e7e79859 	ubfx	r9, r9, #16, #8
    bd18:	e1a08000 	mov	r8, r0
    bd1c:	e58d0030 	str	r0, [sp, #48]	; 0x30
        if (--r == 0) {
    bd20:	1affff63 	bne	bab4 <AES_encrypt+0x100>
     * map cipher state to byte array block:
     */
    s0 =
        (Te2[(t0 >> 24)       ] & 0xff000000) ^
        (Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
        (Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
    bd24:	e59d8008 	ldr	r8, [sp, #8]
    bd28:	e1a0c001 	mov	ip, r1
    bd2c:	e1a0000b 	mov	r0, fp
    bd30:	e1a01004 	mov	r1, r4
    bd34:	e1a0b00a 	mov	fp, sl
    bd38:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
    bd3c:	e1a0a000 	mov	sl, r0
    bd40:	e798010c 	ldr	r0, [r8, ip, lsl #2]
    bd44:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
    bd48:	e58d9004 	str	r9, [sp, #4]
    bd4c:	e59d900c 	ldr	r9, [sp, #12]
    bd50:	e2000cff 	and	r0, r0, #65280	; 0xff00
    bd54:	e58d7010 	str	r7, [sp, #16]
    bd58:	e08c7284 	add	r7, ip, r4, lsl #5
        (Te1[(t3      ) & 0xff] & 0x000000ff) ^
    bd5c:	e7dbc105 	ldrb	ip, [fp, r5, lsl #2]
        (Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
    bd60:	e7994106 	ldr	r4, [r9, r6, lsl #2]
        (Te2[(t0 >> 24)       ] & 0xff000000) ^
    bd64:	e79a1101 	ldr	r1, [sl, r1, lsl #2]
    s0 =
    bd68:	e180000c 	orr	r0, r0, ip
        rk[0];
    PUTU32(out     , s0);
    s1 =
        (Te2[(t1 >> 24)       ] & 0xff000000) ^
        (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
        (Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
    bd6c:	e59dc014 	ldr	ip, [sp, #20]
    s0 =
    bd70:	e020000e 	eor	r0, r0, lr
        (Te2[(t1 >> 24)       ] & 0xff000000) ^
    bd74:	e79ae103 	ldr	lr, [sl, r3, lsl #2]
        (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
    bd78:	e59d3004 	ldr	r3, [sp, #4]
        (Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
    bd7c:	e20448ff 	and	r4, r4, #16711680	; 0xff0000
        (Te2[(t0 >> 24)       ] & 0xff000000) ^
    bd80:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
    PUTU32(out     , s0);
    bd84:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
        (Te2[(t0 >> 24)       ] & 0xff000000) ^
    bd88:	e1811004 	orr	r1, r1, r4
        (Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
    bd8c:	e798510c 	ldr	r5, [r8, ip, lsl #2]
    s0 =
    bd90:	e0200001 	eor	r0, r0, r1
        (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
    bd94:	e7994103 	ldr	r4, [r9, r3, lsl #2]
        (Te1[(t0      ) & 0xff] & 0x000000ff) ^
    bd98:	e7dbc102 	ldrb	ip, [fp, r2, lsl #2]
    PUTU32(out     , s0);
    bd9c:	e1a01c20 	lsr	r1, r0, #24
    bda0:	e1a02820 	lsr	r2, r0, #16
    bda4:	e1a03420 	lsr	r3, r0, #8
    bda8:	e5c61000 	strb	r1, [r6]
    bdac:	e5c62001 	strb	r2, [r6, #1]
        (Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
    bdb0:	e2051cff 	and	r1, r5, #65280	; 0xff00
    PUTU32(out     , s0);
    bdb4:	e5c63002 	strb	r3, [r6, #2]
        (Te2[(t1 >> 24)       ] & 0xff000000) ^
    bdb8:	e20e24ff 	and	r2, lr, #-16777216	; 0xff000000
        (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
    bdbc:	e20438ff 	and	r3, r4, #16711680	; 0xff0000
    PUTU32(out     , s0);
    bdc0:	e5c60003 	strb	r0, [r6, #3]
    s1 =
    bdc4:	e181100c 	orr	r1, r1, ip
        (Te2[(t1 >> 24)       ] & 0xff000000) ^
    bdc8:	e1820003 	orr	r0, r2, r3
    s1 =
    bdcc:	e597c004 	ldr	ip, [r7, #4]
    PUTU32(out +  4, s1);
    s2 =
        (Te2[(t2 >> 24)       ] & 0xff000000) ^
        (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
        (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
        (Te1[(t1      ) & 0xff] & 0x000000ff) ^
    bdd0:	e59d201c 	ldr	r2, [sp, #28]
        (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
    bdd4:	e59d3018 	ldr	r3, [sp, #24]
        (Te1[(t1      ) & 0xff] & 0x000000ff) ^
    bdd8:	e7db5102 	ldrb	r5, [fp, r2, lsl #2]
    s1 =
    bddc:	e021200c 	eor	r2, r1, ip
        (Te2[(t2 >> 24)       ] & 0xff000000) ^
    bde0:	e59d1010 	ldr	r1, [sp, #16]
    s1 =
    bde4:	e0222000 	eor	r2, r2, r0
        (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
    bde8:	e7983103 	ldr	r3, [r8, r3, lsl #2]
    PUTU32(out +  4, s1);
    bdec:	e1a04c22 	lsr	r4, r2, #24
    bdf0:	e1a0e822 	lsr	lr, r2, #16
    bdf4:	e1a00422 	lsr	r0, r2, #8
        (Te2[(t2 >> 24)       ] & 0xff000000) ^
    bdf8:	e79ac101 	ldr	ip, [sl, r1, lsl #2]
        (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
    bdfc:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
        (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
    be00:	e2033cff 	and	r3, r3, #65280	; 0xff00
    PUTU32(out +  4, s1);
    be04:	e5c62007 	strb	r2, [r6, #7]
    s2 =
    be08:	e1835005 	orr	r5, r3, r5
    PUTU32(out +  4, s1);
    be0c:	e5c64004 	strb	r4, [r6, #4]
        (Te2[(t2 >> 24)       ] & 0xff000000) ^
    be10:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
        (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
    be14:	e7991101 	ldr	r1, [r9, r1, lsl #2]
    PUTU32(out +  4, s1);
    be18:	e5c6e005 	strb	lr, [r6, #5]
    be1c:	e5c60006 	strb	r0, [r6, #6]
    s2 =
    be20:	e5972008 	ldr	r2, [r7, #8]
        (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
    be24:	e20118ff 	and	r1, r1, #16711680	; 0xff0000
        rk[2];
    PUTU32(out +  8, s2);
    s3 =
        (Te2[(t3 >> 24)       ] & 0xff000000) ^
        (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
        (Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
    be28:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
        (Te2[(t2 >> 24)       ] & 0xff000000) ^
    be2c:	e18c1001 	orr	r1, ip, r1
        (Te1[(t2      ) & 0xff] & 0x000000ff) ^
    be30:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
    s2 =
    be34:	e0255002 	eor	r5, r5, r2
        (Te2[(t3 >> 24)       ] & 0xff000000) ^
    be38:	e59d2020 	ldr	r2, [sp, #32]
    s2 =
    be3c:	e0255001 	eor	r5, r5, r1
        (Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
    be40:	e7983103 	ldr	r3, [r8, r3, lsl #2]
        (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
    be44:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    PUTU32(out +  8, s2);
    be48:	e1a04c25 	lsr	r4, r5, #24
        (Te1[(t2      ) & 0xff] & 0x000000ff) ^
    be4c:	e7db0100 	ldrb	r0, [fp, r0, lsl #2]
    PUTU32(out +  8, s2);
    be50:	e1a0e825 	lsr	lr, r5, #16
    be54:	e1a0c425 	lsr	ip, r5, #8
        (Te2[(t3 >> 24)       ] & 0xff000000) ^
    be58:	e79a2102 	ldr	r2, [sl, r2, lsl #2]
        (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
    be5c:	e7991101 	ldr	r1, [r9, r1, lsl #2]
        (Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
    be60:	e2033cff 	and	r3, r3, #65280	; 0xff00
    PUTU32(out +  8, s2);
    be64:	e5c6500b 	strb	r5, [r6, #11]
    s3 =
    be68:	e1833000 	orr	r3, r3, r0
    PUTU32(out +  8, s2);
    be6c:	e5c64008 	strb	r4, [r6, #8]
        (Te2[(t3 >> 24)       ] & 0xff000000) ^
    be70:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
    PUTU32(out +  8, s2);
    be74:	e5c6e009 	strb	lr, [r6, #9]
        (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
    be78:	e20118ff 	and	r1, r1, #16711680	; 0xff0000
    PUTU32(out +  8, s2);
    be7c:	e5c6c00a 	strb	ip, [r6, #10]
        (Te2[(t3 >> 24)       ] & 0xff000000) ^
    be80:	e1822001 	orr	r2, r2, r1
    s3 =
    be84:	e597000c 	ldr	r0, [r7, #12]
    be88:	e0233000 	eor	r3, r3, r0
    be8c:	e0233002 	eor	r3, r3, r2
        rk[3];
    PUTU32(out + 12, s3);
    be90:	e1a00c23 	lsr	r0, r3, #24
    be94:	e1a01823 	lsr	r1, r3, #16
    be98:	e1a02423 	lsr	r2, r3, #8
    be9c:	e5c6300f 	strb	r3, [r6, #15]
    bea0:	e5c6000c 	strb	r0, [r6, #12]
    bea4:	e5c6100d 	strb	r1, [r6, #13]
    bea8:	e5c6200e 	strb	r2, [r6, #14]
}
    beac:	e28dd044 	add	sp, sp, #68	; 0x44
    beb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000beb4 <AES_decrypt>:
 * Decrypt a single block
 * in and out can overlap
 */
void AES_decrypt(const unsigned char *in, unsigned char *out,
                 const AES_KEY *key)
{
    beb4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    beb8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
     * and add initial round key:
     */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
    s3 = GETU32(in + 12) ^ rk[3];
    bebc:	e5d0300d 	ldrb	r3, [r0, #13]
    bec0:	e30085cc 	movw	r8, #1484	; 0x5cc
    bec4:	e3408001 	movt	r8, #1
    bec8:	e301b1cc 	movw	fp, #4556	; 0x11cc
    s1 = GETU32(in +  4) ^ rk[1];
    becc:	e5d0c005 	ldrb	ip, [r0, #5]
    bed0:	e300a9cc 	movw	sl, #2508	; 0x9cc
    s3 = GETU32(in + 12) ^ rk[3];
    bed4:	e5d0500c 	ldrb	r5, [r0, #12]
    bed8:	e3009dcc 	movw	r9, #3532	; 0xdcc
{
    bedc:	e58d202c 	str	r2, [sp, #44]	; 0x2c
    s3 = GETU32(in + 12) ^ rk[3];
    bee0:	e1a03803 	lsl	r3, r3, #16
    s1 = GETU32(in +  4) ^ rk[1];
    bee4:	e5d06004 	ldrb	r6, [r0, #4]
    bee8:	e340a001 	movt	sl, #1
    s0 = GETU32(in     ) ^ rk[0];
    beec:	e5d02001 	ldrb	r2, [r0, #1]
    s1 = GETU32(in +  4) ^ rk[1];
    bef0:	e1a0c80c 	lsl	ip, ip, #16
    s2 = GETU32(in +  8) ^ rk[2];
    bef4:	e5d04009 	ldrb	r4, [r0, #9]
    bef8:	e3409001 	movt	r9, #1
    s0 = GETU32(in     ) ^ rk[0];
    befc:	e5d07000 	ldrb	r7, [r0]
    bf00:	e340b001 	movt	fp, #1
    s2 = GETU32(in +  8) ^ rk[2];
    bf04:	e5d0e008 	ldrb	lr, [r0, #8]
    s1 = GETU32(in +  4) ^ rk[1];
    bf08:	e18ccc06 	orr	ip, ip, r6, lsl #24
{
    bf0c:	e58d1034 	str	r1, [sp, #52]	; 0x34
    s3 = GETU32(in + 12) ^ rk[3];
    bf10:	e1831c05 	orr	r1, r3, r5, lsl #24
    s1 = GETU32(in +  4) ^ rk[1];
    bf14:	e5d03007 	ldrb	r3, [r0, #7]
    s0 = GETU32(in     ) ^ rk[0];
    bf18:	e1a02802 	lsl	r2, r2, #16
    s2 = GETU32(in +  8) ^ rk[2];
    bf1c:	e1a04804 	lsl	r4, r4, #16
    s1 = GETU32(in +  4) ^ rk[1];
    bf20:	e5d05006 	ldrb	r5, [r0, #6]
    s0 = GETU32(in     ) ^ rk[0];
    bf24:	e1822c07 	orr	r2, r2, r7, lsl #24
    bf28:	e5d07003 	ldrb	r7, [r0, #3]
    s2 = GETU32(in +  8) ^ rk[2];
    bf2c:	e1844c0e 	orr	r4, r4, lr, lsl #24
    s1 = GETU32(in +  4) ^ rk[1];
    bf30:	e02cc003 	eor	ip, ip, r3
    s2 = GETU32(in +  8) ^ rk[2];
    bf34:	e5d0e00b 	ldrb	lr, [r0, #11]
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    bf38:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    s0 = GETU32(in     ) ^ rk[0];
    bf3c:	e0222007 	eor	r2, r2, r7
    bf40:	e58d8000 	str	r8, [sp]
    s1 = GETU32(in +  4) ^ rk[1];
    bf44:	e18cc405 	orr	ip, ip, r5, lsl #8
    s3 = GETU32(in + 12) ^ rk[3];
    bf48:	e5d0800f 	ldrb	r8, [r0, #15]
    s2 = GETU32(in +  8) ^ rk[2];
    bf4c:	e02ee004 	eor	lr, lr, r4
    bf50:	e5d0700a 	ldrb	r7, [r0, #10]
    r = key->rounds >> 1;
    bf54:	e59340f0 	ldr	r4, [r3, #240]	; 0xf0
    s0 = GETU32(in     ) ^ rk[0];
    bf58:	e5d06002 	ldrb	r6, [r0, #2]
    s3 = GETU32(in + 12) ^ rk[3];
    bf5c:	e5d0000e 	ldrb	r0, [r0, #14]
    s0 = GETU32(in     ) ^ rk[0];
    bf60:	e5935000 	ldr	r5, [r3]
    s3 = GETU32(in + 12) ^ rk[3];
    bf64:	e0213008 	eor	r3, r1, r8
    s1 = GETU32(in +  4) ^ rk[1];
    bf68:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
    s0 = GETU32(in     ) ^ rk[0];
    bf6c:	e1826406 	orr	r6, r2, r6, lsl #8
    s2 = GETU32(in +  8) ^ rk[2];
    bf70:	e18e2407 	orr	r2, lr, r7, lsl #8
    s3 = GETU32(in + 12) ^ rk[3];
    bf74:	e1833400 	orr	r3, r3, r0, lsl #8
    r = key->rounds >> 1;
    bf78:	e1a070c4 	asr	r7, r4, #1
    s1 = GETU32(in +  4) ^ rk[1];
    bf7c:	e5981004 	ldr	r1, [r8, #4]
    s2 = GETU32(in +  8) ^ rk[2];
    bf80:	e5980008 	ldr	r0, [r8, #8]
    s0 = GETU32(in     ) ^ rk[0];
    bf84:	e0255006 	eor	r5, r5, r6
    s3 = GETU32(in + 12) ^ rk[3];
    bf88:	e598400c 	ldr	r4, [r8, #12]
    bf8c:	e58d9004 	str	r9, [sp, #4]
    s1 = GETU32(in +  4) ^ rk[1];
    bf90:	e02ce001 	eor	lr, ip, r1
    bf94:	e1a0900a 	mov	r9, sl
    r = key->rounds >> 1;
    bf98:	e58d7030 	str	r7, [sp, #48]	; 0x30
    s2 = GETU32(in +  8) ^ rk[2];
    bf9c:	e0222000 	eor	r2, r2, r0
    s3 = GETU32(in + 12) ^ rk[3];
    bfa0:	e0233004 	eor	r3, r3, r4
    r = key->rounds >> 1;
    bfa4:	e58d7008 	str	r7, [sp, #8]
    bfa8:	e1a0a00b 	mov	sl, fp
    bfac:	ea00002f 	b	c070 <AES_decrypt+0x1bc>
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
    bfb0:	e59de000 	ldr	lr, [sp]
    bfb4:	e79a010c 	ldr	r0, [sl, ip, lsl #2]
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
    bfb8:	e79a1101 	ldr	r1, [sl, r1, lsl #2]
        s0 =
    bfbc:	e79e5105 	ldr	r5, [lr, r5, lsl #2]
        s1 =
    bfc0:	e1a0c00e 	mov	ip, lr
    bfc4:	e79ee102 	ldr	lr, [lr, r2, lsl #2]
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
    bfc8:	e79c210b 	ldr	r2, [ip, fp, lsl #2]
        s0 =
    bfcc:	e0255000 	eor	r5, r5, r0
        s2 =
    bfd0:	e79ac103 	ldr	ip, [sl, r3, lsl #2]
        s0 =
    bfd4:	e0255006 	eor	r5, r5, r6
        s1 =
    bfd8:	e02ee001 	eor	lr, lr, r1
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
    bfdc:	e59d6020 	ldr	r6, [sp, #32]
    bfe0:	e59d3000 	ldr	r3, [sp]
        s2 =
    bfe4:	e022200c 	eor	r2, r2, ip
        s3 =
    bfe8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
        s1 =
    bfec:	e5980004 	ldr	r0, [r8, #4]
        s3 =
    bff0:	e7933106 	ldr	r3, [r3, r6, lsl #2]
    bff4:	e79a1101 	ldr	r1, [sl, r1, lsl #2]
        s2 =
    bff8:	e598c008 	ldr	ip, [r8, #8]
        s1 =
    bffc:	e02ee000 	eor	lr, lr, r0
        s0 =
    c000:	e7996104 	ldr	r6, [r9, r4, lsl #2]
        s3 =
    c004:	e0233001 	eor	r3, r3, r1
        s1 =
    c008:	e59d1010 	ldr	r1, [sp, #16]
        s2 =
    c00c:	e59d0018 	ldr	r0, [sp, #24]
    c010:	e022200c 	eor	r2, r2, ip
        s0 =
    c014:	e59dc004 	ldr	ip, [sp, #4]
    c018:	e0255006 	eor	r5, r5, r6
        s1 =
    c01c:	e7991101 	ldr	r1, [r9, r1, lsl #2]
        s2 =
    c020:	e7990100 	ldr	r0, [r9, r0, lsl #2]
    c024:	e59d601c 	ldr	r6, [sp, #28]
        s0 =
    c028:	e59d400c 	ldr	r4, [sp, #12]
        s1 =
    c02c:	e02ee001 	eor	lr, lr, r1
    c030:	e1a0100c 	mov	r1, ip
        s2 =
    c034:	e0222000 	eor	r2, r2, r0
    c038:	e7910106 	ldr	r0, [r1, r6, lsl #2]
        s0 =
    c03c:	e79c4104 	ldr	r4, [ip, r4, lsl #2]
        s3 =
    c040:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
        s1 =
    c044:	e59dc014 	ldr	ip, [sp, #20]
        s2 =
    c048:	e0222000 	eor	r2, r2, r0
        s3 =
    c04c:	e598b00c 	ldr	fp, [r8, #12]
        s0 =
    c050:	e0255004 	eor	r5, r5, r4
        s3 =
    c054:	e7997107 	ldr	r7, [r9, r7, lsl #2]
        s1 =
    c058:	e791c10c 	ldr	ip, [r1, ip, lsl #2]
        s3 =
    c05c:	e7911106 	ldr	r1, [r1, r6, lsl #2]
    c060:	e023300b 	eor	r3, r3, fp
    c064:	e0233007 	eor	r3, r3, r7
        s1 =
    c068:	e02ee00c 	eor	lr, lr, ip
        s3 =
    c06c:	e0233001 	eor	r3, r3, r1
        t0 =
    c070:	e59db000 	ldr	fp, [sp]
            Td0[(s0 >> 24)       ] ^
    c074:	e1a0cc25 	lsr	ip, r5, #24
            Td0[(s1 >> 24)       ] ^
    c078:	e1a00c2e 	lsr	r0, lr, #24
            Td3[(s1      ) & 0xff] ^
    c07c:	e6ef407e 	uxtb	r4, lr
            Td0[(s2 >> 24)       ] ^
    c080:	e1a06c22 	lsr	r6, r2, #24
            Td3[(s2      ) & 0xff] ^
    c084:	e6ef7072 	uxtb	r7, r2
        t0 =
    c088:	e79bc10c 	ldr	ip, [fp, ip, lsl #2]
            Td3[(s3      ) & 0xff] ^
    c08c:	e6ef1073 	uxtb	r1, r3
        t1 =
    c090:	e79b0100 	ldr	r0, [fp, r0, lsl #2]
            Td1[(s0 >> 16) & 0xff] ^
    c094:	e7e7b855 	ubfx	fp, r5, #16, #8
    c098:	e58db014 	str	fp, [sp, #20]
            Td1[(s2 >> 16) & 0xff] ^
    c09c:	e7e7b852 	ubfx	fp, r2, #16, #8
    c0a0:	e58db020 	str	fp, [sp, #32]
            Td2[(s2 >>  8) & 0xff] ^
    c0a4:	e7e72452 	ubfx	r2, r2, #8, #8
        t2 =
    c0a8:	e59db000 	ldr	fp, [sp]
        t0 =
    c0ac:	e79a4104 	ldr	r4, [sl, r4, lsl #2]
            Td2[(s2 >>  8) & 0xff] ^
    c0b0:	e58d2010 	str	r2, [sp, #16]
        t2 =
    c0b4:	e79b6106 	ldr	r6, [fp, r6, lsl #2]
            Td1[(s1 >> 16) & 0xff] ^
    c0b8:	e7e7b85e 	ubfx	fp, lr, #16, #8
        t3 =
    c0bc:	e59d2000 	ldr	r2, [sp]
            Td2[(s1 >>  8) & 0xff] ^
    c0c0:	e7e7e45e 	ubfx	lr, lr, #8, #8
            Td1[(s1 >> 16) & 0xff] ^
    c0c4:	e58db018 	str	fp, [sp, #24]
        t3 =
    c0c8:	e1a0bc23 	lsr	fp, r3, #24
        t1 =
    c0cc:	e79a7107 	ldr	r7, [sl, r7, lsl #2]
        t0 =
    c0d0:	e58d400c 	str	r4, [sp, #12]
            Td1[(s3 >> 16) & 0xff] ^
    c0d4:	e7e74853 	ubfx	r4, r3, #16, #8
        t3 =
    c0d8:	e792210b 	ldr	r2, [r2, fp, lsl #2]
            Td2[(s3 >>  8) & 0xff] ^
    c0dc:	e7e7b453 	ubfx	fp, r3, #8, #8
        t3 =
    c0e0:	e6ef3075 	uxtb	r3, r5
            Td2[(s0 >>  8) & 0xff] ^
    c0e4:	e7e75455 	ubfx	r5, r5, #8, #8
    c0e8:	e58d501c 	str	r5, [sp, #28]
        t1 =
    c0ec:	e0200007 	eor	r0, r0, r7
        t0 =
    c0f0:	e59d500c 	ldr	r5, [sp, #12]
    c0f4:	e5987010 	ldr	r7, [r8, #16]
        t3 =
    c0f8:	e79a3103 	ldr	r3, [sl, r3, lsl #2]
        t0 =
    c0fc:	e02cc005 	eor	ip, ip, r5
        t2 =
    c100:	e79a1101 	ldr	r1, [sl, r1, lsl #2]
    c104:	e59d5018 	ldr	r5, [sp, #24]
        t0 =
    c108:	e02cc007 	eor	ip, ip, r7
        t3 =
    c10c:	e0222003 	eor	r2, r2, r3
        t1 =
    c110:	e5987014 	ldr	r7, [r8, #20]
    c114:	e59d3014 	ldr	r3, [sp, #20]
        t2 =
    c118:	e0211006 	eor	r1, r1, r6
        t0 =
    c11c:	e7994104 	ldr	r4, [r9, r4, lsl #2]
        t1 =
    c120:	e0200007 	eor	r0, r0, r7
        t2 =
    c124:	e7997105 	ldr	r7, [r9, r5, lsl #2]
        t1 =
    c128:	e7996103 	ldr	r6, [r9, r3, lsl #2]
        t2 =
    c12c:	e5985018 	ldr	r5, [r8, #24]
        t0 =
    c130:	e02cc004 	eor	ip, ip, r4
        t3 =
    c134:	e59d3020 	ldr	r3, [sp, #32]
        t1 =
    c138:	e58d600c 	str	r6, [sp, #12]
        t2 =
    c13c:	e0211005 	eor	r1, r1, r5
        t0 =
    c140:	e59d6004 	ldr	r6, [sp, #4]
    c144:	e59d5010 	ldr	r5, [sp, #16]
        t2 =
    c148:	e0211007 	eor	r1, r1, r7
        t3 =
    c14c:	e7993103 	ldr	r3, [r9, r3, lsl #2]
        t0 =
    c150:	e7966105 	ldr	r6, [r6, r5, lsl #2]
        t3 =
    c154:	e598501c 	ldr	r5, [r8, #28]
        t0 =
    c158:	e02cc006 	eor	ip, ip, r6
        t3 =
    c15c:	e0222005 	eor	r2, r2, r5
        t1 =
    c160:	e59d5004 	ldr	r5, [sp, #4]
        t3 =
    c164:	e0222003 	eor	r2, r2, r3
    c168:	e7e7385c 	ubfx	r3, ip, #16, #8
    c16c:	e7e7645c 	ubfx	r6, ip, #8, #8
    c170:	e58d3010 	str	r3, [sp, #16]
        t1 =
    c174:	e795b10b 	ldr	fp, [r5, fp, lsl #2]
    c178:	e6ef307c 	uxtb	r3, ip
        if (--r == 0) {
    c17c:	e59d5008 	ldr	r5, [sp, #8]
    c180:	e58d3028 	str	r3, [sp, #40]	; 0x28
    c184:	e2555001 	subs	r5, r5, #1
    c188:	e58d5008 	str	r5, [sp, #8]
        t3 =
    c18c:	e59d5004 	ldr	r5, [sp, #4]
        t2 =
    c190:	e1a04005 	mov	r4, r5
        t3 =
    c194:	e795e10e 	ldr	lr, [r5, lr, lsl #2]
        t2 =
    c198:	e59d501c 	ldr	r5, [sp, #28]
    c19c:	e58d601c 	str	r6, [sp, #28]
        t3 =
    c1a0:	e02ee002 	eor	lr, lr, r2
        t2 =
    c1a4:	e7945105 	ldr	r5, [r4, r5, lsl #2]
    c1a8:	e1a06c2e 	lsr	r6, lr, #24
        t1 =
    c1ac:	e59d400c 	ldr	r4, [sp, #12]
    c1b0:	e6ef307e 	uxtb	r3, lr
    c1b4:	e58d6020 	str	r6, [sp, #32]
        t2 =
    c1b8:	e0217005 	eor	r7, r1, r5
    c1bc:	e1a05c2c 	lsr	r5, ip, #24
        t1 =
    c1c0:	e0200004 	eor	r0, r0, r4
    c1c4:	e6ef1077 	uxtb	r1, r7
    c1c8:	e020000b 	eor	r0, r0, fp
    c1cc:	e5b86020 	ldr	r6, [r8, #32]!
    c1d0:	e7e74850 	ubfx	r4, r0, #16, #8
    c1d4:	e6efc070 	uxtb	ip, r0
    c1d8:	e1a02c20 	lsr	r2, r0, #24
    c1dc:	e7e70450 	ubfx	r0, r0, #8, #8
    c1e0:	e58d4018 	str	r4, [sp, #24]
    c1e4:	e7e7485e 	ubfx	r4, lr, #16, #8
    c1e8:	e58d0024 	str	r0, [sp, #36]	; 0x24
    c1ec:	e7e7e45e 	ubfx	lr, lr, #8, #8
    c1f0:	e7e70457 	ubfx	r0, r7, #8, #8
    c1f4:	e1a0bc27 	lsr	fp, r7, #24
    c1f8:	e58d000c 	str	r0, [sp, #12]
    c1fc:	e7e77857 	ubfx	r7, r7, #16, #8
    c200:	e58de014 	str	lr, [sp, #20]
        if (--r == 0) {
    c204:	1affff69 	bne	bfb0 <AES_decrypt+0xfc>
    /*
     * apply last round and
     * map cipher state to byte array block:
     */
    s0 =
        ((u32)Td4[(t0 >> 24)       ] << 24) ^
    c208:	e301e5cc 	movw	lr, #5580	; 0x15cc
    c20c:	e1cd82dc 	ldrd	r8, [sp, #44]	; 0x2c
    c210:	e340e001 	movt	lr, #1
    c214:	e1a00005 	mov	r0, r5
        ((u32)Td4[(t3 >> 16) & 0xff] << 16) ^
        ((u32)Td4[(t2 >>  8) & 0xff] <<  8) ^
        ((u32)Td4[(t1      ) & 0xff])       ^
    c218:	e7dec00c 	ldrb	ip, [lr, ip]
    c21c:	e1a0500b 	mov	r5, fp
        ((u32)Td4[(t0 >> 24)       ] << 24) ^
    c220:	e7de0000 	ldrb	r0, [lr, r0]
        ((u32)Td4[(t3 >> 16) & 0xff] << 16) ^
    c224:	e7de4004 	ldrb	r4, [lr, r4]
    c228:	e0888289 	add	r8, r8, r9, lsl #5
    s0 =
    c22c:	e026600c 	eor	r6, r6, ip
        ((u32)Td4[(t2 >>  8) & 0xff] <<  8) ^
    c230:	e59dc00c 	ldr	ip, [sp, #12]
    c234:	e58d8000 	str	r8, [sp]
    s0 =
    c238:	e0266c00 	eor	r6, r6, r0, lsl #24
        rk[0];
    PUTU32(out     , s0);
    s1 =
        ((u32)Td4[(t1 >> 24)       ] << 24) ^
        ((u32)Td4[(t0 >> 16) & 0xff] << 16) ^
    c23c:	e59d0010 	ldr	r0, [sp, #16]
        ((u32)Td4[(t2 >>  8) & 0xff] <<  8) ^
    c240:	e7de800c 	ldrb	r8, [lr, ip]
    s0 =
    c244:	e0266804 	eor	r6, r6, r4, lsl #16
    PUTU32(out     , s0);
    c248:	e59da034 	ldr	sl, [sp, #52]	; 0x34
        ((u32)Td4[(t0 >> 16) & 0xff] << 16) ^
    c24c:	e7deb000 	ldrb	fp, [lr, r0]
        ((u32)Td4[(t3 >>  8) & 0xff] <<  8) ^
        ((u32)Td4[(t2      ) & 0xff])       ^
    c250:	e7de1001 	ldrb	r1, [lr, r1]
        ((u32)Td4[(t3 >>  8) & 0xff] <<  8) ^
    c254:	e59d0014 	ldr	r0, [sp, #20]
    s0 =
    c258:	e0268408 	eor	r8, r6, r8, lsl #8
        ((u32)Td4[(t1 >> 24)       ] << 24) ^
    c25c:	e7de2002 	ldrb	r2, [lr, r2]
        ((u32)Td4[(t2      ) & 0xff])       ^
    c260:	e58d1004 	str	r1, [sp, #4]
    PUTU32(out     , s0);
    c264:	e1a0cc28 	lsr	ip, r8, #24
        ((u32)Td4[(t3 >>  8) & 0xff] <<  8) ^
    c268:	e7de9000 	ldrb	r9, [lr, r0]
    PUTU32(out     , s0);
    c26c:	e1a01428 	lsr	r1, r8, #8
    c270:	e5ca8003 	strb	r8, [sl, #3]
    c274:	e1a00828 	lsr	r0, r8, #16
    s1 =
    c278:	e59d8000 	ldr	r8, [sp]
    PUTU32(out     , s0);
    c27c:	e5ca0001 	strb	r0, [sl, #1]
    c280:	e5ca1002 	strb	r1, [sl, #2]
        rk[1];
    PUTU32(out +  4, s1);
    s2 =
        ((u32)Td4[(t2 >> 24)       ] << 24) ^
        ((u32)Td4[(t1 >> 16) & 0xff] << 16) ^
        ((u32)Td4[(t0 >>  8) & 0xff] <<  8) ^
    c284:	e59d001c 	ldr	r0, [sp, #28]
        ((u32)Td4[(t1 >> 24)       ] << 24) ^
    c288:	e58d2008 	str	r2, [sp, #8]
    PUTU32(out     , s0);
    c28c:	e5cac000 	strb	ip, [sl]
        ((u32)Td4[(t2 >> 24)       ] << 24) ^
    c290:	e7de2005 	ldrb	r2, [lr, r5]
    s1 =
    c294:	e598c004 	ldr	ip, [r8, #4]
    c298:	e59d5004 	ldr	r5, [sp, #4]
        ((u32)Td4[(t3      ) & 0xff])       ^
    c29c:	e7de4003 	ldrb	r4, [lr, r3]
        ((u32)Td4[(t0 >>  8) & 0xff] <<  8) ^
    c2a0:	e7de1000 	ldrb	r1, [lr, r0]
        ((u32)Td4[(t1 >> 16) & 0xff] << 16) ^
    c2a4:	e59d3018 	ldr	r3, [sp, #24]
    s1 =
    c2a8:	e02cc005 	eor	ip, ip, r5
    PUTU32(out +  8, s2);
    s3 =
        ((u32)Td4[(t3 >> 24)       ] << 24) ^
        ((u32)Td4[(t2 >> 16) & 0xff] << 16) ^
        ((u32)Td4[(t1 >>  8) & 0xff] <<  8) ^
        ((u32)Td4[(t0      ) & 0xff])       ^
    c2ac:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
        ((u32)Td4[(t3 >> 24)       ] << 24) ^
    c2b0:	e59d5020 	ldr	r5, [sp, #32]
        ((u32)Td4[(t1 >> 16) & 0xff] << 16) ^
    c2b4:	e7de3003 	ldrb	r3, [lr, r3]
        ((u32)Td4[(t0      ) & 0xff])       ^
    c2b8:	e7de0000 	ldrb	r0, [lr, r0]
        ((u32)Td4[(t3 >> 24)       ] << 24) ^
    c2bc:	e7de5005 	ldrb	r5, [lr, r5]
    s1 =
    c2c0:	e59d6008 	ldr	r6, [sp, #8]
    c2c4:	e02ccc06 	eor	ip, ip, r6, lsl #24
        ((u32)Td4[(t2 >> 16) & 0xff] << 16) ^
    c2c8:	e7de6007 	ldrb	r6, [lr, r7]
        ((u32)Td4[(t1 >>  8) & 0xff] <<  8) ^
    c2cc:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
    s1 =
    c2d0:	e02cc80b 	eor	ip, ip, fp, lsl #16
    c2d4:	e02c9409 	eor	r9, ip, r9, lsl #8
        ((u32)Td4[(t1 >>  8) & 0xff] <<  8) ^
    c2d8:	e7dee007 	ldrb	lr, [lr, r7]
    PUTU32(out +  4, s1);
    c2dc:	e1a07829 	lsr	r7, r9, #16
    c2e0:	e1a0c429 	lsr	ip, r9, #8
    c2e4:	e1a08c29 	lsr	r8, r9, #24
    c2e8:	e5ca9007 	strb	r9, [sl, #7]
    c2ec:	e5ca7005 	strb	r7, [sl, #5]
    s2 =
    c2f0:	e59d7000 	ldr	r7, [sp]
    PUTU32(out +  4, s1);
    c2f4:	e5ca8004 	strb	r8, [sl, #4]
    c2f8:	e5cac006 	strb	ip, [sl, #6]
    s2 =
    c2fc:	e597c008 	ldr	ip, [r7, #8]
    c300:	e024400c 	eor	r4, r4, ip
    c304:	e0242c02 	eor	r2, r4, r2, lsl #24
    c308:	e0223803 	eor	r3, r2, r3, lsl #16
    c30c:	e0231401 	eor	r1, r3, r1, lsl #8
    PUTU32(out +  8, s2);
    c310:	e1a0cc21 	lsr	ip, r1, #24
    c314:	e1a02821 	lsr	r2, r1, #16
    c318:	e1a03421 	lsr	r3, r1, #8
    c31c:	e5ca100b 	strb	r1, [sl, #11]
    c320:	e5ca2009 	strb	r2, [sl, #9]
    c324:	e5cac008 	strb	ip, [sl, #8]
    c328:	e5ca300a 	strb	r3, [sl, #10]
    s3 =
    c32c:	e597300c 	ldr	r3, [r7, #12]
    c330:	e0200003 	eor	r0, r0, r3
    c334:	e0205c05 	eor	r5, r0, r5, lsl #24
    c338:	e0255806 	eor	r5, r5, r6, lsl #16
    c33c:	e025540e 	eor	r5, r5, lr, lsl #8
        rk[3];
    PUTU32(out + 12, s3);
    c340:	e1a01c25 	lsr	r1, r5, #24
    c344:	e1a02825 	lsr	r2, r5, #16
    c348:	e1a03425 	lsr	r3, r5, #8
    c34c:	e5ca500f 	strb	r5, [sl, #15]
    c350:	e5ca100c 	strb	r1, [sl, #12]
    c354:	e5ca200d 	strb	r2, [sl, #13]
    c358:	e5ca300e 	strb	r3, [sl, #14]
}
    c35c:	e28dd03c 	add	sp, sp, #60	; 0x3c
    c360:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c364 <async_local_cleanup>:
    return 0;
}

void async_local_cleanup(void)
{
}
    c364:	e12fff1e 	bx	lr

0000c368 <async_job_free.part.0>:
    job->status = ASYNC_JOB_RUNNING;

    return job;
}

static void async_job_free(ASYNC_JOB *job)
    c368:	e92d4070 	push	{r4, r5, r6, lr}
{
    if (job != NULL) {
        OPENSSL_free(job->funcargs);
    c36c:	e30f4fc4 	movw	r4, #65476	; 0xffc4
    c370:	e3404000 	movt	r4, #0
static void async_job_free(ASYNC_JOB *job)
    c374:	e1a05000 	mov	r5, r0
        OPENSSL_free(job->funcargs);
    c378:	e1a01004 	mov	r1, r4
    c37c:	e3a02000 	mov	r2, #0
    c380:	e5900008 	ldr	r0, [r0, #8]
    c384:	eb0006db 	bl	def8 <CRYPTO_free>
        async_fibre_free(&job->fibrectx);
        OPENSSL_free(job);
    c388:	e1a01004 	mov	r1, r4
    c38c:	e1a00005 	mov	r0, r5
    c390:	e3a02000 	mov	r2, #0
    }
}
    c394:	e8bd4070 	pop	{r4, r5, r6, lr}
        OPENSSL_free(job);
    c398:	ea0006d6 	b	def8 <CRYPTO_free>

0000c39c <async_empty_pool.part.1>:
    async_wait_ctx_reset_counts(job->waitctx);

    return 1;
}

static void async_empty_pool(async_pool *pool)
    c39c:	e92d4010 	push	{r4, lr}
    c3a0:	e1a04000 	mov	r4, r0
    struct fd_lookup_st *fds;
    size_t numadd;
    size_t numdel;
};

DEFINE_STACK_OF(ASYNC_JOB)
    c3a4:	e5940000 	ldr	r0, [r4]
    c3a8:	eb0007ee 	bl	e368 <OPENSSL_sk_pop>
    if (job != NULL) {
    c3ac:	e3500000 	cmp	r0, #0
    c3b0:	08bd8010 	popeq	{r4, pc}
    c3b4:	ebffffeb 	bl	c368 <async_job_free.part.0>
    c3b8:	eafffff9 	b	c3a4 <async_empty_pool.part.1+0x8>

0000c3bc <async_init>:
    } while (job);
}

int async_init(void)
{
    if (!CRYPTO_THREAD_init_local(&ctxkey, NULL))
    c3bc:	e30303e8 	movw	r0, #13288	; 0x33e8
{
    c3c0:	e92d4010 	push	{r4, lr}
    if (!CRYPTO_THREAD_init_local(&ctxkey, NULL))
    c3c4:	e3a01000 	mov	r1, #0
    c3c8:	e3400001 	movt	r0, #1
    c3cc:	eb00082e 	bl	e48c <CRYPTO_THREAD_init_local>
    c3d0:	e2504000 	subs	r4, r0, #0
    c3d4:	1a000001 	bne	c3e0 <async_init+0x24>
        CRYPTO_THREAD_cleanup_local(&ctxkey);
        return 0;
    }

    return 1;
}
    c3d8:	e1a00004 	mov	r0, r4
    c3dc:	e8bd8010 	pop	{r4, pc}
    if (!CRYPTO_THREAD_init_local(&poolkey, NULL)) {
    c3e0:	e30303ec 	movw	r0, #13292	; 0x33ec
    c3e4:	e3a01000 	mov	r1, #0
    c3e8:	e3400001 	movt	r0, #1
    c3ec:	eb000826 	bl	e48c <CRYPTO_THREAD_init_local>
    c3f0:	e2504000 	subs	r4, r0, #0
    return 1;
    c3f4:	13a04001 	movne	r4, #1
    if (!CRYPTO_THREAD_init_local(&poolkey, NULL)) {
    c3f8:	1afffff6 	bne	c3d8 <async_init+0x1c>
        CRYPTO_THREAD_cleanup_local(&ctxkey);
    c3fc:	e30303e8 	movw	r0, #13288	; 0x33e8
    c400:	e3400001 	movt	r0, #1
    c404:	eb000840 	bl	e50c <CRYPTO_THREAD_cleanup_local>
}
    c408:	e1a00004 	mov	r0, r4
    c40c:	e8bd8010 	pop	{r4, pc}

0000c410 <async_delete_thread_state>:
    return 0;
}

void async_delete_thread_state(void)
{
    async_pool *pool = (async_pool *)CRYPTO_THREAD_get_local(&poolkey);
    c410:	e30303ec 	movw	r0, #13292	; 0x33ec
{
    c414:	e92d4010 	push	{r4, lr}
    async_pool *pool = (async_pool *)CRYPTO_THREAD_get_local(&poolkey);
    c418:	e3400001 	movt	r0, #1
    c41c:	eb00082b 	bl	e4d0 <CRYPTO_THREAD_get_local>

    if (pool != NULL) {
    c420:	e2504000 	subs	r4, r0, #0
    c424:	0a00000f 	beq	c468 <async_delete_thread_state+0x58>
    if (!pool || !pool->jobs)
    c428:	e5943000 	ldr	r3, [r4]
    c42c:	e3530000 	cmp	r3, #0
    c430:	0a000001 	beq	c43c <async_delete_thread_state+0x2c>
    c434:	ebffffd8 	bl	c39c <async_empty_pool.part.1>
    c438:	e5943000 	ldr	r3, [r4]
    c43c:	e1a00003 	mov	r0, r3
    c440:	eb0007d6 	bl	e3a0 <OPENSSL_sk_free>
        async_empty_pool(pool);
        sk_ASYNC_JOB_free(pool->jobs);
        OPENSSL_free(pool);
    c444:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    c448:	e1a00004 	mov	r0, r4
    c44c:	e3401000 	movt	r1, #0
    c450:	e3a02000 	mov	r2, #0
    c454:	eb0006a7 	bl	def8 <CRYPTO_free>
        CRYPTO_THREAD_set_local(&poolkey, NULL);
    c458:	e30303ec 	movw	r0, #13292	; 0x33ec
    c45c:	e3a01000 	mov	r1, #0
    c460:	e3400001 	movt	r0, #1
    c464:	eb000820 	bl	e4ec <CRYPTO_THREAD_set_local>
    }
    async_local_cleanup();
    c468:	ebffffbd 	bl	c364 <async_local_cleanup>
    return (async_ctx *)CRYPTO_THREAD_get_local(&ctxkey);
    c46c:	e30303e8 	movw	r0, #13288	; 0x33e8
    c470:	e3400001 	movt	r0, #1
    c474:	eb000815 	bl	e4d0 <CRYPTO_THREAD_get_local>
    c478:	e1a04000 	mov	r4, r0
    if (!CRYPTO_THREAD_set_local(&ctxkey, NULL))
    c47c:	e30303e8 	movw	r0, #13288	; 0x33e8
    c480:	e3400001 	movt	r0, #1
    c484:	e3a01000 	mov	r1, #0
    c488:	eb000817 	bl	e4ec <CRYPTO_THREAD_set_local>
    c48c:	e3500000 	cmp	r0, #0
    c490:	08bd8010 	popeq	{r4, pc}
    OPENSSL_free(ctx);
    c494:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    c498:	e1a00004 	mov	r0, r4
    c49c:	e3401000 	movt	r1, #0
    c4a0:	e3a02000 	mov	r2, #0
    async_ctx_free();
}
    c4a4:	e8bd4010 	pop	{r4, lr}
    OPENSSL_free(ctx);
    c4a8:	ea000692 	b	def8 <CRYPTO_free>

0000c4ac <make_kn>:
/* Make temporary keys K1 and K2 */

static void make_kn(unsigned char *k1, const unsigned char *l, int bl)
{
    int i;
    unsigned char c = l[0], carry = c >> 7, cnext;
    c4ac:	e5d1c000 	ldrb	ip, [r1]

    /* Shift block to left, including carry */
    for (i = 0; i < bl - 1; i++, c = cnext)
    c4b0:	e3520001 	cmp	r2, #1
{
    c4b4:	e92d4070 	push	{r4, r5, r6, lr}
    unsigned char c = l[0], carry = c >> 7, cnext;
    c4b8:	e1a043ac 	lsr	r4, ip, #7
    for (i = 0; i < bl - 1; i++, c = cnext)
    c4bc:	da00000a 	ble	c4ec <make_kn+0x40>
    c4c0:	e2426001 	sub	r6, r2, #1
    c4c4:	e240e001 	sub	lr, r0, #1
    c4c8:	e0815006 	add	r5, r1, r6
        k1[i] = (c << 1) | ((cnext = l[i + 1]) >> 7);
    c4cc:	e1a0308c 	lsl	r3, ip, #1
    c4d0:	e5f1c001 	ldrb	ip, [r1, #1]!
    c4d4:	e6af3073 	sxtb	r3, r3
    for (i = 0; i < bl - 1; i++, c = cnext)
    c4d8:	e1550001 	cmp	r5, r1
        k1[i] = (c << 1) | ((cnext = l[i + 1]) >> 7);
    c4dc:	e18333ac 	orr	r3, r3, ip, lsr #7
    c4e0:	e5ee3001 	strb	r3, [lr, #1]!
    for (i = 0; i < bl - 1; i++, c = cnext)
    c4e4:	1afffff8 	bne	c4cc <make_kn+0x20>
    c4e8:	e0800006 	add	r0, r0, r6

    /* If MSB set fixup with R */
    k1[i] = (c << 1) ^ ((0 - carry) & (bl == 16 ? 0x87 : 0x1b));
    c4ec:	e3520010 	cmp	r2, #16
    c4f0:	e2643000 	rsb	r3, r4, #0
    c4f4:	13a0201b 	movne	r2, #27
    c4f8:	03e02078 	mvneq	r2, #120	; 0x78
    c4fc:	e7a6c05c 	sbfx	ip, ip, #0, #7
    c500:	e0033002 	and	r3, r3, r2
    c504:	e023c08c 	eor	ip, r3, ip, lsl #1
    c508:	e5c0c000 	strb	ip, [r0]
}
    c50c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c510 <CMAC_CTX_new>:

CMAC_CTX *CMAC_CTX_new(void)
{
    CMAC_CTX *ctx;

    if ((ctx = OPENSSL_malloc(sizeof(*ctx))) == NULL) {
    c510:	e30f1fc4 	movw	r1, #65476	; 0xffc4
{
    c514:	e92d4030 	push	{r4, r5, lr}
    if ((ctx = OPENSSL_malloc(sizeof(*ctx))) == NULL) {
    c518:	e3a02000 	mov	r2, #0
{
    c51c:	e24dd00c 	sub	sp, sp, #12
    if ((ctx = OPENSSL_malloc(sizeof(*ctx))) == NULL) {
    c520:	e3401000 	movt	r1, #0
    c524:	e3a00088 	mov	r0, #136	; 0x88
    c528:	eb000680 	bl	df30 <CRYPTO_malloc>
    c52c:	e2504000 	subs	r4, r0, #0
    c530:	0a000009 	beq	c55c <CMAC_CTX_new+0x4c>
        CRYPTOerr(CRYPTO_F_CMAC_CTX_NEW, ERR_R_MALLOC_FAILURE);
        return NULL;
    }
    ctx->cctx = EVP_CIPHER_CTX_new();
    c534:	eb0002b1 	bl	d000 <EVP_CIPHER_CTX_new>
    if (ctx->cctx == NULL) {
    c538:	e3500000 	cmp	r0, #0
    ctx->cctx = EVP_CIPHER_CTX_new();
    c53c:	e1a05000 	mov	r5, r0
        OPENSSL_free(ctx);
        return NULL;
    }
    ctx->nlast_block = -1;
    c540:	13e03000 	mvnne	r3, #0
    ctx->cctx = EVP_CIPHER_CTX_new();
    c544:	e5840000 	str	r0, [r4]
    ctx->nlast_block = -1;
    c548:	15843084 	strne	r3, [r4, #132]	; 0x84
    if (ctx->cctx == NULL) {
    c54c:	0a000009 	beq	c578 <CMAC_CTX_new+0x68>
    return ctx;
}
    c550:	e1a00004 	mov	r0, r4
    c554:	e28dd00c 	add	sp, sp, #12
    c558:	e8bd8030 	pop	{r4, r5, pc}
        CRYPTOerr(CRYPTO_F_CMAC_CTX_NEW, ERR_R_MALLOC_FAILURE);
    c55c:	e58d4000 	str	r4, [sp]
    c560:	e1a03004 	mov	r3, r4
    c564:	e3a02041 	mov	r2, #65	; 0x41
    c568:	e3a01078 	mov	r1, #120	; 0x78
    c56c:	e3a0000f 	mov	r0, #15
    c570:	eb0001b9 	bl	cc5c <ERR_put_error>
        return NULL;
    c574:	eafffff5 	b	c550 <CMAC_CTX_new+0x40>
        OPENSSL_free(ctx);
    c578:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    c57c:	e1a00004 	mov	r0, r4
    c580:	e3401000 	movt	r1, #0
    c584:	e1a02005 	mov	r2, r5
    c588:	eb00065a 	bl	def8 <CRYPTO_free>
        return NULL;
    c58c:	e1a04005 	mov	r4, r5
    c590:	eaffffee 	b	c550 <CMAC_CTX_new+0x40>

0000c594 <CMAC_CTX_cleanup>:

void CMAC_CTX_cleanup(CMAC_CTX *ctx)
{
    c594:	e92d4070 	push	{r4, r5, r6, lr}
    EVP_CIPHER_CTX_reset(ctx->cctx);
    c598:	e1a05000 	mov	r5, r0
{
    c59c:	e1a04000 	mov	r4, r0
    EVP_CIPHER_CTX_reset(ctx->cctx);
    c5a0:	e4950044 	ldr	r0, [r5], #68	; 0x44
    c5a4:	eb000273 	bl	cf78 <EVP_CIPHER_CTX_reset>
    OPENSSL_cleanse(ctx->tbl, EVP_MAX_BLOCK_LENGTH);
    c5a8:	e3a01020 	mov	r1, #32
    c5ac:	e1a00005 	mov	r0, r5
    c5b0:	eb00068f 	bl	dff4 <OPENSSL_cleanse>
    OPENSSL_cleanse(ctx->k1, EVP_MAX_BLOCK_LENGTH);
    c5b4:	e2840004 	add	r0, r4, #4
    c5b8:	e3a01020 	mov	r1, #32
    c5bc:	eb00068c 	bl	dff4 <OPENSSL_cleanse>
    OPENSSL_cleanse(ctx->k2, EVP_MAX_BLOCK_LENGTH);
    c5c0:	e2840024 	add	r0, r4, #36	; 0x24
    c5c4:	e3a01020 	mov	r1, #32
    c5c8:	eb000689 	bl	dff4 <OPENSSL_cleanse>
    OPENSSL_cleanse(ctx->last_block, EVP_MAX_BLOCK_LENGTH);
    c5cc:	e2840064 	add	r0, r4, #100	; 0x64
    c5d0:	e3a01020 	mov	r1, #32
    c5d4:	eb000686 	bl	dff4 <OPENSSL_cleanse>
    ctx->nlast_block = -1;
    c5d8:	e3e03000 	mvn	r3, #0
    c5dc:	e5843084 	str	r3, [r4, #132]	; 0x84
}
    c5e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c5e4 <CMAC_CTX_free>:
{
    return ctx->cctx;
}

void CMAC_CTX_free(CMAC_CTX *ctx)
{
    c5e4:	e92d4010 	push	{r4, lr}
    if (!ctx)
    c5e8:	e2504000 	subs	r4, r0, #0
    c5ec:	08bd8010 	popeq	{r4, pc}
        return;
    CMAC_CTX_cleanup(ctx);
    c5f0:	ebffffe7 	bl	c594 <CMAC_CTX_cleanup>
    EVP_CIPHER_CTX_free(ctx->cctx);
    c5f4:	e5940000 	ldr	r0, [r4]
    c5f8:	eb000285 	bl	d014 <EVP_CIPHER_CTX_free>
    OPENSSL_free(ctx);
    c5fc:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    c600:	e1a00004 	mov	r0, r4
    c604:	e3401000 	movt	r1, #0
    c608:	e3a02000 	mov	r2, #0
}
    c60c:	e8bd4010 	pop	{r4, lr}
    OPENSSL_free(ctx);
    c610:	ea000638 	b	def8 <CRYPTO_free>

0000c614 <CMAC_Init>:
int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
              const EVP_CIPHER *cipher, ENGINE *impl)
{
    static const unsigned char zero_iv[EVP_MAX_BLOCK_LENGTH] = { 0 };
    /* All zeros means restart */
    if (!key && !cipher && !impl && keylen == 0) {
    c614:	e16fcf13 	clz	ip, r3
    c618:	e3510000 	cmp	r1, #0
    c61c:	e1a0c2ac 	lsr	ip, ip, #5
    c620:	13a0c000 	movne	ip, #0
{
    c624:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (!key && !cipher && !impl && keylen == 0) {
    c628:	e35c0000 	cmp	ip, #0
{
    c62c:	e24dd008 	sub	sp, sp, #8
    c630:	e1a04000 	mov	r4, r0
    c634:	e1a05002 	mov	r5, r2
    if (!key && !cipher && !impl && keylen == 0) {
    c638:	0a000006 	beq	c658 <CMAC_Init+0x44>
    c63c:	e59d3020 	ldr	r3, [sp, #32]
    c640:	e3530000 	cmp	r3, #0
    c644:	03520000 	cmpeq	r2, #0
    c648:	0a000026 	beq	c6e8 <CMAC_Init+0xd4>
            return 0;
        /* Zero tbl so resume works */
        memset(ctx->tbl, 0, bl);
        ctx->nlast_block = 0;
    }
    return 1;
    c64c:	e3a00001 	mov	r0, #1
}
    c650:	e28dd008 	add	sp, sp, #8
    c654:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (cipher && !EVP_EncryptInit_ex(ctx->cctx, cipher, impl, NULL, NULL))
    c658:	e3530000 	cmp	r3, #0
    c65c:	e1a02003 	mov	r2, r3
    c660:	e1a06001 	mov	r6, r1
    c664:	0a000007 	beq	c688 <CMAC_Init+0x74>
    c668:	e5900000 	ldr	r0, [r0]
    c66c:	e1a01002 	mov	r1, r2
    c670:	e1a0300c 	mov	r3, ip
    c674:	e58dc000 	str	ip, [sp]
    c678:	e59d2020 	ldr	r2, [sp, #32]
    c67c:	eb00035e 	bl	d3fc <EVP_EncryptInit_ex>
    c680:	e3500000 	cmp	r0, #0
    c684:	0a000014 	beq	c6dc <CMAC_Init+0xc8>
    if (key) {
    c688:	e3560000 	cmp	r6, #0
    c68c:	0affffee 	beq	c64c <CMAC_Init+0x38>
        if (!EVP_CIPHER_CTX_cipher(ctx->cctx))
    c690:	e5940000 	ldr	r0, [r4]
    c694:	eb000395 	bl	d4f0 <EVP_CIPHER_CTX_cipher>
    c698:	e3500000 	cmp	r0, #0
    c69c:	0a00000e 	beq	c6dc <CMAC_Init+0xc8>
        if (!EVP_CIPHER_CTX_set_key_length(ctx->cctx, keylen))
    c6a0:	e1a01005 	mov	r1, r5
    c6a4:	e5940000 	ldr	r0, [r4]
    c6a8:	eb00035b 	bl	d41c <EVP_CIPHER_CTX_set_key_length>
    c6ac:	e3500000 	cmp	r0, #0
    c6b0:	0a000009 	beq	c6dc <CMAC_Init+0xc8>
        if (!EVP_EncryptInit_ex(ctx->cctx, NULL, NULL, key, zero_iv))
    c6b4:	e30256f4 	movw	r5, #9972	; 0x26f4
    c6b8:	e3a02000 	mov	r2, #0
    c6bc:	e3405001 	movt	r5, #1
    c6c0:	e5940000 	ldr	r0, [r4]
    c6c4:	e1a03006 	mov	r3, r6
    c6c8:	e58d5000 	str	r5, [sp]
    c6cc:	e1a01002 	mov	r1, r2
    c6d0:	eb000349 	bl	d3fc <EVP_EncryptInit_ex>
    c6d4:	e3500000 	cmp	r0, #0
    c6d8:	1a00001a 	bne	c748 <CMAC_Init+0x134>
            return 0;
    c6dc:	e3a00000 	mov	r0, #0
}
    c6e0:	e28dd008 	add	sp, sp, #8
    c6e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (ctx->nlast_block == -1)
    c6e8:	e5903084 	ldr	r3, [r0, #132]	; 0x84
    c6ec:	e3730001 	cmn	r3, #1
    c6f0:	0afffff9 	beq	c6dc <CMAC_Init+0xc8>
        if (!EVP_EncryptInit_ex(ctx->cctx, NULL, NULL, NULL, zero_iv))
    c6f4:	e30226f4 	movw	r2, #9972	; 0x26f4
    c6f8:	e3a03000 	mov	r3, #0
    c6fc:	e3402001 	movt	r2, #1
    c700:	e5900000 	ldr	r0, [r0]
    c704:	e1a01003 	mov	r1, r3
    c708:	e58d2000 	str	r2, [sp]
    c70c:	e1a02003 	mov	r2, r3
    c710:	eb000339 	bl	d3fc <EVP_EncryptInit_ex>
    c714:	e3500000 	cmp	r0, #0
    c718:	0affffef 	beq	c6dc <CMAC_Init+0xc8>
        memset(ctx->tbl, 0, EVP_CIPHER_CTX_block_size(ctx->cctx));
    c71c:	e1a05004 	mov	r5, r4
    c720:	e4950044 	ldr	r0, [r5], #68	; 0x44
    c724:	eb000368 	bl	d4cc <EVP_CIPHER_CTX_block_size>
    c728:	e3a01000 	mov	r1, #0
    c72c:	e1a02000 	mov	r2, r0
    c730:	e1a00005 	mov	r0, r5
    c734:	eb000c8b 	bl	f968 <memset>
        ctx->nlast_block = 0;
    c738:	e3a03000 	mov	r3, #0
        return 1;
    c73c:	e3a00001 	mov	r0, #1
        ctx->nlast_block = 0;
    c740:	e5843084 	str	r3, [r4, #132]	; 0x84
        return 1;
    c744:	eaffffc1 	b	c650 <CMAC_Init+0x3c>
        bl = EVP_CIPHER_CTX_block_size(ctx->cctx);
    c748:	e1a06004 	mov	r6, r4
    c74c:	e4960044 	ldr	r0, [r6], #68	; 0x44
    c750:	eb00035d 	bl	d4cc <EVP_CIPHER_CTX_block_size>
        if (!EVP_Cipher(ctx->cctx, ctx->tbl, zero_iv, bl))
    c754:	e1a02005 	mov	r2, r5
    c758:	e1a03000 	mov	r3, r0
        bl = EVP_CIPHER_CTX_block_size(ctx->cctx);
    c75c:	e1a07000 	mov	r7, r0
        if (!EVP_Cipher(ctx->cctx, ctx->tbl, zero_iv, bl))
    c760:	e1a01006 	mov	r1, r6
    c764:	e5940000 	ldr	r0, [r4]
    c768:	eb00035a 	bl	d4d8 <EVP_Cipher>
    c76c:	e3500000 	cmp	r0, #0
    c770:	0affffd9 	beq	c6dc <CMAC_Init+0xc8>
        make_kn(ctx->k1, ctx->tbl, bl);
    c774:	e2848004 	add	r8, r4, #4
    c778:	e1a02007 	mov	r2, r7
    c77c:	e1a00008 	mov	r0, r8
    c780:	e1a01006 	mov	r1, r6
    c784:	ebffff48 	bl	c4ac <make_kn>
        make_kn(ctx->k2, ctx->k1, bl);
    c788:	e1a02007 	mov	r2, r7
    c78c:	e1a01008 	mov	r1, r8
    c790:	e2840024 	add	r0, r4, #36	; 0x24
    c794:	ebffff44 	bl	c4ac <make_kn>
        OPENSSL_cleanse(ctx->tbl, bl);
    c798:	e1a01007 	mov	r1, r7
    c79c:	e1a00006 	mov	r0, r6
    c7a0:	eb000613 	bl	dff4 <OPENSSL_cleanse>
        if (!EVP_EncryptInit_ex(ctx->cctx, NULL, NULL, NULL, zero_iv))
    c7a4:	e3a03000 	mov	r3, #0
    c7a8:	e5940000 	ldr	r0, [r4]
    c7ac:	e1a02003 	mov	r2, r3
    c7b0:	e58d5000 	str	r5, [sp]
    c7b4:	e1a01003 	mov	r1, r3
    c7b8:	eb00030f 	bl	d3fc <EVP_EncryptInit_ex>
    c7bc:	e3500000 	cmp	r0, #0
    c7c0:	0affffc5 	beq	c6dc <CMAC_Init+0xc8>
        memset(ctx->tbl, 0, bl);
    c7c4:	e1a02007 	mov	r2, r7
    c7c8:	e1a00006 	mov	r0, r6
    c7cc:	e3a01000 	mov	r1, #0
    c7d0:	eb000c64 	bl	f968 <memset>
        ctx->nlast_block = 0;
    c7d4:	e3a03000 	mov	r3, #0
    return 1;
    c7d8:	e3a00001 	mov	r0, #1
        ctx->nlast_block = 0;
    c7dc:	e5843084 	str	r3, [r4, #132]	; 0x84
    c7e0:	eaffff9a 	b	c650 <CMAC_Init+0x3c>

0000c7e4 <CMAC_Update>:

int CMAC_Update(CMAC_CTX *ctx, const void *in, size_t dlen)
{
    const unsigned char *data = in;
    size_t bl;
    if (ctx->nlast_block == -1)
    c7e4:	e5903084 	ldr	r3, [r0, #132]	; 0x84
    c7e8:	e3730001 	cmn	r3, #1
    c7ec:	0a000033 	beq	c8c0 <CMAC_Update+0xdc>
        return 0;
    if (dlen == 0)
    c7f0:	e3520000 	cmp	r2, #0
{
    c7f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c7f8:	e1a04002 	mov	r4, r2
    if (dlen == 0)
    c7fc:	1a000001 	bne	c808 <CMAC_Update+0x24>
        data += bl;
    }
    /* Copy any data left to last block buffer */
    memcpy(ctx->last_block, data, dlen);
    ctx->nlast_block = dlen;
    return 1;
    c800:	e3a00001 	mov	r0, #1
    c804:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c808:	e1a05000 	mov	r5, r0
    bl = EVP_CIPHER_CTX_block_size(ctx->cctx);
    c80c:	e5900000 	ldr	r0, [r0]
    c810:	e1a07001 	mov	r7, r1
    c814:	eb00032c 	bl	d4cc <EVP_CIPHER_CTX_block_size>
    c818:	e1a06000 	mov	r6, r0
    if (ctx->nlast_block > 0) {
    c81c:	e5950084 	ldr	r0, [r5, #132]	; 0x84
    c820:	e3500000 	cmp	r0, #0
    c824:	da000014 	ble	c87c <CMAC_Update+0x98>
        nleft = bl - ctx->nlast_block;
    c828:	e0468000 	sub	r8, r6, r0
    c82c:	e2859064 	add	r9, r5, #100	; 0x64
        if (dlen < nleft)
    c830:	e1540008 	cmp	r4, r8
    c834:	e0890000 	add	r0, r9, r0
    c838:	3a000022 	bcc	c8c8 <CMAC_Update+0xe4>
        memcpy(ctx->last_block + ctx->nlast_block, data, nleft);
    c83c:	e1a02008 	mov	r2, r8
    c840:	e1a01007 	mov	r1, r7
    c844:	eb000c0c 	bl	f87c <memcpy>
        ctx->nlast_block += nleft;
    c848:	e5953084 	ldr	r3, [r5, #132]	; 0x84
        if (dlen == 0)
    c84c:	e0544008 	subs	r4, r4, r8
        ctx->nlast_block += nleft;
    c850:	e0833008 	add	r3, r3, r8
    c854:	e5853084 	str	r3, [r5, #132]	; 0x84
        if (dlen == 0)
    c858:	0affffe8 	beq	c800 <CMAC_Update+0x1c>
        if (!EVP_Cipher(ctx->cctx, ctx->tbl, ctx->last_block, bl))
    c85c:	e1a02009 	mov	r2, r9
    c860:	e1a03006 	mov	r3, r6
    c864:	e2851044 	add	r1, r5, #68	; 0x44
    c868:	e5950000 	ldr	r0, [r5]
    c86c:	eb000319 	bl	d4d8 <EVP_Cipher>
    c870:	e3500000 	cmp	r0, #0
        data += nleft;
    c874:	10877008 	addne	r7, r7, r8
        if (!EVP_Cipher(ctx->cctx, ctx->tbl, ctx->last_block, bl))
    c878:	0a00000e 	beq	c8b8 <CMAC_Update+0xd4>
    while (dlen > bl) {
    c87c:	e1560004 	cmp	r6, r4
    c880:	32858044 	addcc	r8, r5, #68	; 0x44
    c884:	3a000002 	bcc	c894 <CMAC_Update+0xb0>
    c888:	ea000016 	b	c8e8 <CMAC_Update+0x104>
    c88c:	e1560004 	cmp	r6, r4
    c890:	2a000014 	bcs	c8e8 <CMAC_Update+0x104>
        if (!EVP_Cipher(ctx->cctx, ctx->tbl, data, bl))
    c894:	e1a02007 	mov	r2, r7
    c898:	e1a03006 	mov	r3, r6
    c89c:	e1a01008 	mov	r1, r8
    c8a0:	e5950000 	ldr	r0, [r5]
    c8a4:	eb00030b 	bl	d4d8 <EVP_Cipher>
    c8a8:	e3500000 	cmp	r0, #0
        dlen -= bl;
    c8ac:	e0444006 	sub	r4, r4, r6
        data += bl;
    c8b0:	e0877006 	add	r7, r7, r6
        if (!EVP_Cipher(ctx->cctx, ctx->tbl, data, bl))
    c8b4:	1afffff4 	bne	c88c <CMAC_Update+0xa8>
        return 0;
    c8b8:	e3a00000 	mov	r0, #0
    c8bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c8c0:	e3a00000 	mov	r0, #0

}
    c8c4:	e12fff1e 	bx	lr
        memcpy(ctx->last_block + ctx->nlast_block, data, nleft);
    c8c8:	e1a02004 	mov	r2, r4
    c8cc:	e1a01007 	mov	r1, r7
    c8d0:	eb000be9 	bl	f87c <memcpy>
        ctx->nlast_block += nleft;
    c8d4:	e5953084 	ldr	r3, [r5, #132]	; 0x84
            return 1;
    c8d8:	e3a00001 	mov	r0, #1
        ctx->nlast_block += nleft;
    c8dc:	e0834004 	add	r4, r3, r4
    c8e0:	e5854084 	str	r4, [r5, #132]	; 0x84
}
    c8e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(ctx->last_block, data, dlen);
    c8e8:	e1a01007 	mov	r1, r7
    c8ec:	e1a02004 	mov	r2, r4
    c8f0:	e2850064 	add	r0, r5, #100	; 0x64
    c8f4:	eb000be0 	bl	f87c <memcpy>
    ctx->nlast_block = dlen;
    c8f8:	e5854084 	str	r4, [r5, #132]	; 0x84
    c8fc:	eaffffbf 	b	c800 <CMAC_Update+0x1c>

0000c900 <CMAC_Final>:

int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)
{
    int i, bl, lb;
    if (ctx->nlast_block == -1)
    c900:	e5903084 	ldr	r3, [r0, #132]	; 0x84
{
    c904:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (ctx->nlast_block == -1)
    c908:	e3730001 	cmn	r3, #1
        return 0;
    c90c:	03a04000 	moveq	r4, #0
    if (ctx->nlast_block == -1)
    c910:	0a000025 	beq	c9ac <CMAC_Final+0xac>
    c914:	e1a05001 	mov	r5, r1
    c918:	e1a04000 	mov	r4, r0
    bl = EVP_CIPHER_CTX_block_size(ctx->cctx);
    c91c:	e5900000 	ldr	r0, [r0]
    c920:	e1a07002 	mov	r7, r2
    c924:	eb0002e8 	bl	d4cc <EVP_CIPHER_CTX_block_size>
    *poutlen = (size_t)bl;
    if (!out)
    c928:	e3550000 	cmp	r5, #0
    bl = EVP_CIPHER_CTX_block_size(ctx->cctx);
    c92c:	e1a06000 	mov	r6, r0
    *poutlen = (size_t)bl;
    c930:	e5870000 	str	r0, [r7]
    if (!out)
    c934:	0a00001b 	beq	c9a8 <CMAC_Final+0xa8>
        return 1;
    lb = ctx->nlast_block;
    c938:	e5940084 	ldr	r0, [r4, #132]	; 0x84
    /* Is last block complete? */
    if (lb == bl) {
    c93c:	e1560000 	cmp	r6, r0
    c940:	0a000025 	beq	c9dc <CMAC_Final+0xdc>
        for (i = 0; i < bl; i++)
            out[i] = ctx->last_block[i] ^ ctx->k1[i];
    } else {
        ctx->last_block[lb] = 0x80;
        if (bl - lb > 1)
    c944:	e0462000 	sub	r2, r6, r0
        ctx->last_block[lb] = 0x80;
    c948:	e0843000 	add	r3, r4, r0
        if (bl - lb > 1)
    c94c:	e3520001 	cmp	r2, #1
        ctx->last_block[lb] = 0x80;
    c950:	e3e0107f 	mvn	r1, #127	; 0x7f
    c954:	e5c31064 	strb	r1, [r3, #100]	; 0x64
        if (bl - lb > 1)
    c958:	ca00001a 	bgt	c9c8 <CMAC_Final+0xc8>
            memset(ctx->last_block + lb + 1, 0, bl - lb - 1);
        for (i = 0; i < bl; i++)
    c95c:	e3560000 	cmp	r6, #0
    c960:	da000009 	ble	c98c <CMAC_Final+0x8c>
    c964:	e2842023 	add	r2, r4, #35	; 0x23
    c968:	e2450001 	sub	r0, r5, #1
    c96c:	e082e006 	add	lr, r2, r6
    c970:	e2841063 	add	r1, r4, #99	; 0x63
            out[i] = ctx->last_block[i] ^ ctx->k2[i];
    c974:	e5f2c001 	ldrb	ip, [r2, #1]!
    c978:	e5f13001 	ldrb	r3, [r1, #1]!
        for (i = 0; i < bl; i++)
    c97c:	e152000e 	cmp	r2, lr
            out[i] = ctx->last_block[i] ^ ctx->k2[i];
    c980:	e023300c 	eor	r3, r3, ip
    c984:	e5e03001 	strb	r3, [r0, #1]!
        for (i = 0; i < bl; i++)
    c988:	1afffff9 	bne	c974 <CMAC_Final+0x74>
    }
    if (!EVP_Cipher(ctx->cctx, out, out, bl)) {
    c98c:	e5940000 	ldr	r0, [r4]
    c990:	e1a03006 	mov	r3, r6
    c994:	e1a02005 	mov	r2, r5
    c998:	e1a01005 	mov	r1, r5
    c99c:	eb0002cd 	bl	d4d8 <EVP_Cipher>
    c9a0:	e2504000 	subs	r4, r0, #0
    c9a4:	0a000002 	beq	c9b4 <CMAC_Final+0xb4>
        return 1;
    c9a8:	e3a04001 	mov	r4, #1
        OPENSSL_cleanse(out, bl);
        return 0;
    }
    return 1;
}
    c9ac:	e1a00004 	mov	r0, r4
    c9b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        OPENSSL_cleanse(out, bl);
    c9b4:	e1a00005 	mov	r0, r5
    c9b8:	e1a01006 	mov	r1, r6
    c9bc:	eb00058c 	bl	dff4 <OPENSSL_cleanse>
}
    c9c0:	e1a00004 	mov	r0, r4
    c9c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            memset(ctx->last_block + lb + 1, 0, bl - lb - 1);
    c9c8:	e2422001 	sub	r2, r2, #1
    c9cc:	e2830065 	add	r0, r3, #101	; 0x65
    c9d0:	e3a01000 	mov	r1, #0
    c9d4:	eb000be3 	bl	f968 <memset>
    c9d8:	eaffffdf 	b	c95c <CMAC_Final+0x5c>
        for (i = 0; i < bl; i++)
    c9dc:	e3560000 	cmp	r6, #0
    c9e0:	daffffe9 	ble	c98c <CMAC_Final+0x8c>
    c9e4:	e2842003 	add	r2, r4, #3
    c9e8:	e2450001 	sub	r0, r5, #1
    c9ec:	e082e006 	add	lr, r2, r6
    c9f0:	e2841063 	add	r1, r4, #99	; 0x63
            out[i] = ctx->last_block[i] ^ ctx->k1[i];
    c9f4:	e5f2c001 	ldrb	ip, [r2, #1]!
    c9f8:	e5f13001 	ldrb	r3, [r1, #1]!
        for (i = 0; i < bl; i++)
    c9fc:	e152000e 	cmp	r2, lr
            out[i] = ctx->last_block[i] ^ ctx->k1[i];
    ca00:	e023300c 	eor	r3, r3, ip
    ca04:	e5e03001 	strb	r3, [r0, #1]!
        for (i = 0; i < bl; i++)
    ca08:	1afffff9 	bne	c9f4 <CMAC_Final+0xf4>
    ca0c:	eaffffde 	b	c98c <CMAC_Final+0x8c>

0000ca10 <openssl_config_int>:
    OPENSSL_init_crypto(OPENSSL_INIT_LOAD_CONFIG, &settings);
}
#endif

int openssl_config_int(const OPENSSL_INIT_SETTINGS *settings)
{
    ca10:	e92d4070 	push	{r4, r5, r6, lr}
    int ret = 0;
    const char *filename;
    const char *appname;
    unsigned long flags;

    if (openssl_configured)
    ca14:	e30343f0 	movw	r4, #13296	; 0x33f0
    ca18:	e3404001 	movt	r4, #1
    ca1c:	e5945000 	ldr	r5, [r4]
    ca20:	e3550000 	cmp	r5, #0
        return 1;
    ca24:	13a05001 	movne	r5, #1
    if (openssl_configured)
    ca28:	1a000002 	bne	ca38 <openssl_config_int+0x28>
#endif
#ifndef OPENSSL_NO_ENGINE
    /* Need to load ENGINEs */
    ENGINE_load_builtin_engines();
#endif
    ERR_clear_error();
    ca2c:	eb0000c0 	bl	cd34 <ERR_clear_error>
#if !defined(OPENSSL_SYS_UEFI) && !defined(OPENSSL_SYS_TRUSTY)
    ret = CONF_modules_load_file(filename, appname, flags);
#endif
    openssl_configured = 1;
    ca30:	e3a03001 	mov	r3, #1
    ca34:	e5843000 	str	r3, [r4]
    return ret;
}
    ca38:	e1a00005 	mov	r0, r5
    ca3c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ca40 <openssl_no_config_int>:

void openssl_no_config_int(void)
{
    openssl_configured = 1;
    ca40:	e30333f0 	movw	r3, #13296	; 0x33f0
    ca44:	e3a02001 	mov	r2, #1
    ca48:	e3403001 	movt	r3, #1
    ca4c:	e5832000 	str	r2, [r3]
}
    ca50:	e12fff1e 	bx	lr

0000ca54 <OPENSSL_cpuid_setup>:
# endif
#endif
#if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)
void OPENSSL_cpuid_setup(void)
{
}
    ca54:	e12fff1e 	bx	lr

0000ca58 <OPENSSL_die>:
    return 0;
}
#endif

void OPENSSL_die(const char *message, const char *file, int line)
{
    ca58:	e92d4010 	push	{r4, lr}
    OPENSSL_showfatal("%s:%d: OpenSSL internal error: %s\n",
                      file, line, message);
#if !defined(_WIN32)
    abort();
    ca5c:	ebfff0b8 	bl	8d44 <abort>

0000ca60 <err_do_init_ossl_>:
}
#endif

DEFINE_RUN_ONCE_STATIC(err_do_init)
{
    set_err_thread_local = 1;
    ca60:	e3033400 	movw	r3, #13312	; 0x3400
    return CRYPTO_THREAD_init_local(&err_thread_local, NULL);
    ca64:	e30303fc 	movw	r0, #13308	; 0x33fc
    set_err_thread_local = 1;
    ca68:	e3403001 	movt	r3, #1
DEFINE_RUN_ONCE_STATIC(err_do_init)
    ca6c:	e92d4010 	push	{r4, lr}
    set_err_thread_local = 1;
    ca70:	e3a02001 	mov	r2, #1
    return CRYPTO_THREAD_init_local(&err_thread_local, NULL);
    ca74:	e3400001 	movt	r0, #1
    ca78:	e3a01000 	mov	r1, #0
    set_err_thread_local = 1;
    ca7c:	e5832000 	str	r2, [r3]
    return CRYPTO_THREAD_init_local(&err_thread_local, NULL);
    ca80:	eb000681 	bl	e48c <CRYPTO_THREAD_init_local>
DEFINE_RUN_ONCE_STATIC(err_do_init)
    ca84:	e30333f4 	movw	r3, #13300	; 0x33f4
    ca88:	e3403001 	movt	r3, #1
    ca8c:	e5830000 	str	r0, [r3]
    ca90:	e8bd8010 	pop	{r4, pc}

0000ca94 <ERR_STATE_free.part.0>:
static void ERR_STATE_free(ERR_STATE *s)
    ca94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
        err_clear_data(s, i);
    ca98:	e30f7fc4 	movw	r7, #65476	; 0xffc4
static void ERR_STATE_free(ERR_STATE *s)
    ca9c:	e1a08000 	mov	r8, r0
    caa0:	e28040bc 	add	r4, r0, #188	; 0xbc
    caa4:	e28060fc 	add	r6, r0, #252	; 0xfc
        err_clear_data(s, i);
    caa8:	e3407000 	movt	r7, #0
    caac:	e3a05000 	mov	r5, #0
    cab0:	ea000002 	b	cac0 <ERR_STATE_free.part.0+0x2c>
    for (i = 0; i < ERR_NUM_ERRORS; i++) {
    cab4:	e1540006 	cmp	r4, r6
        err_clear_data(s, i);
    cab8:	e5845000 	str	r5, [r4]
    for (i = 0; i < ERR_NUM_ERRORS; i++) {
    cabc:	0a00000a 	beq	caec <ERR_STATE_free.part.0+0x58>
        err_clear_data(s, i);
    cac0:	e5b43004 	ldr	r3, [r4, #4]!
    cac4:	e3130001 	tst	r3, #1
    cac8:	0afffff9 	beq	cab4 <ERR_STATE_free.part.0+0x20>
    cacc:	e3a02000 	mov	r2, #0
    cad0:	e1a01007 	mov	r1, r7
    cad4:	e5140040 	ldr	r0, [r4, #-64]	; 0xffffffc0
    cad8:	eb000506 	bl	def8 <CRYPTO_free>
    for (i = 0; i < ERR_NUM_ERRORS; i++) {
    cadc:	e1540006 	cmp	r4, r6
        err_clear_data(s, i);
    cae0:	e5045040 	str	r5, [r4, #-64]	; 0xffffffc0
    cae4:	e5845000 	str	r5, [r4]
    for (i = 0; i < ERR_NUM_ERRORS; i++) {
    cae8:	1afffff4 	bne	cac0 <ERR_STATE_free.part.0+0x2c>
    OPENSSL_free(s);
    caec:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    caf0:	e1a00008 	mov	r0, r8
    caf4:	e3401000 	movt	r1, #0
    caf8:	e3a02000 	mov	r2, #0
}
    cafc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    OPENSSL_free(s);
    cb00:	ea0004fc 	b	def8 <CRYPTO_free>

0000cb04 <err_delete_thread_state>:
    ERR_STATE *state = CRYPTO_THREAD_get_local(&err_thread_local);
    cb04:	e30303fc 	movw	r0, #13308	; 0x33fc
{
    cb08:	e92d4010 	push	{r4, lr}
    ERR_STATE *state = CRYPTO_THREAD_get_local(&err_thread_local);
    cb0c:	e3400001 	movt	r0, #1
    cb10:	eb00066e 	bl	e4d0 <CRYPTO_THREAD_get_local>
    if (state == NULL)
    cb14:	e2504000 	subs	r4, r0, #0
    cb18:	08bd8010 	popeq	{r4, pc}
    CRYPTO_THREAD_set_local(&err_thread_local, NULL);
    cb1c:	e30303fc 	movw	r0, #13308	; 0x33fc
    cb20:	e3a01000 	mov	r1, #0
    cb24:	e3400001 	movt	r0, #1
    cb28:	eb00066f 	bl	e4ec <CRYPTO_THREAD_set_local>
    cb2c:	e1a00004 	mov	r0, r4
}
    cb30:	e8bd4010 	pop	{r4, lr}
    cb34:	eaffffd6 	b	ca94 <ERR_STATE_free.part.0>

0000cb38 <ERR_get_state>:
}

ERR_STATE *ERR_get_state(void)
{
    cb38:	e92d4070 	push	{r4, r5, r6, lr}
    ERR_STATE *state;
    int saveerrno = get_last_sys_error();
    cb3c:	eb000678 	bl	e524 <__geterrno>

    if (!OPENSSL_init_crypto(OPENSSL_INIT_BASE_ONLY, NULL))
    cb40:	e3a02000 	mov	r2, #0
    cb44:	e3a01000 	mov	r1, #0
    int saveerrno = get_last_sys_error();
    cb48:	e5905000 	ldr	r5, [r0]
    if (!OPENSSL_init_crypto(OPENSSL_INIT_BASE_ONLY, NULL))
    cb4c:	e3a00701 	mov	r0, #262144	; 0x40000
    cb50:	eb0003b2 	bl	da20 <OPENSSL_init_crypto>
    cb54:	e3500000 	cmp	r0, #0
    cb58:	0a000017 	beq	cbbc <ERR_get_state+0x84>
        return NULL;

    if (!RUN_ONCE(&err_init, err_do_init))
    cb5c:	e30c1a60 	movw	r1, #51808	; 0xca60
    cb60:	e30303f8 	movw	r0, #13304	; 0x33f8
    cb64:	e3401000 	movt	r1, #0
    cb68:	e3400001 	movt	r0, #1
    cb6c:	eb00063a 	bl	e45c <CRYPTO_THREAD_run_once>
    cb70:	e3500000 	cmp	r0, #0
    cb74:	0a000010 	beq	cbbc <ERR_get_state+0x84>
    cb78:	e30333f4 	movw	r3, #13300	; 0x33f4
    cb7c:	e3403001 	movt	r3, #1
    cb80:	e5933000 	ldr	r3, [r3]
    cb84:	e3530000 	cmp	r3, #0
    cb88:	0a00000b 	beq	cbbc <ERR_get_state+0x84>
        return NULL;

    state = CRYPTO_THREAD_get_local(&err_thread_local);
    cb8c:	e30303fc 	movw	r0, #13308	; 0x33fc
    cb90:	e3400001 	movt	r0, #1
    cb94:	eb00064d 	bl	e4d0 <CRYPTO_THREAD_get_local>
    if (state == (ERR_STATE*)-1)
    cb98:	e3700001 	cmn	r0, #1
    state = CRYPTO_THREAD_get_local(&err_thread_local);
    cb9c:	e1a04000 	mov	r4, r0
    if (state == (ERR_STATE*)-1)
    cba0:	0a000005 	beq	cbbc <ERR_get_state+0x84>
        return NULL;

    if (state == NULL) {
    cba4:	e3500000 	cmp	r0, #0
    cba8:	0a000006 	beq	cbc8 <ERR_get_state+0x90>

        /* Ignore failures from these */
        OPENSSL_init_crypto(OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);
    }

    set_sys_error(saveerrno);
    cbac:	eb00065c 	bl	e524 <__geterrno>
    cbb0:	e5805000 	str	r5, [r0]
    return state;
}
    cbb4:	e1a00004 	mov	r0, r4
    cbb8:	e8bd8070 	pop	{r4, r5, r6, pc}
        return NULL;
    cbbc:	e3a04000 	mov	r4, #0
}
    cbc0:	e1a00004 	mov	r0, r4
    cbc4:	e8bd8070 	pop	{r4, r5, r6, pc}
        if (!CRYPTO_THREAD_set_local(&err_thread_local, (ERR_STATE*)-1))
    cbc8:	e30303fc 	movw	r0, #13308	; 0x33fc
    cbcc:	e3e01000 	mvn	r1, #0
    cbd0:	e3400001 	movt	r0, #1
    cbd4:	eb000644 	bl	e4ec <CRYPTO_THREAD_set_local>
    cbd8:	e3500000 	cmp	r0, #0
    cbdc:	0afffff6 	beq	cbbc <ERR_get_state+0x84>
        if ((state = OPENSSL_zalloc(sizeof(*state))) == NULL) {
    cbe0:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    cbe4:	e1a02004 	mov	r2, r4
    cbe8:	e3401000 	movt	r1, #0
    cbec:	e3a00f62 	mov	r0, #392	; 0x188
    cbf0:	eb0004e6 	bl	df90 <CRYPTO_zalloc>
    cbf4:	e2506000 	subs	r6, r0, #0
    cbf8:	0a000012 	beq	cc48 <ERR_get_state+0x110>
        if (!ossl_init_thread_start(OPENSSL_INIT_THREAD_ERR_STATE)
    cbfc:	e3a00002 	mov	r0, #2
    cc00:	e3a01000 	mov	r1, #0
    cc04:	eb000487 	bl	de28 <ossl_init_thread_start>
    cc08:	e3500000 	cmp	r0, #0
    cc0c:	0a00000b 	beq	cc40 <ERR_get_state+0x108>
                || !CRYPTO_THREAD_set_local(&err_thread_local, state)) {
    cc10:	e30303fc 	movw	r0, #13308	; 0x33fc
    cc14:	e1a01006 	mov	r1, r6
    cc18:	e3400001 	movt	r0, #1
    cc1c:	eb000632 	bl	e4ec <CRYPTO_THREAD_set_local>
    cc20:	e3500000 	cmp	r0, #0
    cc24:	0a000005 	beq	cc40 <ERR_get_state+0x108>
        OPENSSL_init_crypto(OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);
    cc28:	e1a02004 	mov	r2, r4
    cc2c:	e3a01000 	mov	r1, #0
    cc30:	e3a00002 	mov	r0, #2
    cc34:	e1a04006 	mov	r4, r6
    cc38:	eb000378 	bl	da20 <OPENSSL_init_crypto>
    cc3c:	eaffffda 	b	cbac <ERR_get_state+0x74>
    cc40:	e1a00006 	mov	r0, r6
    cc44:	ebffff92 	bl	ca94 <ERR_STATE_free.part.0>
            CRYPTO_THREAD_set_local(&err_thread_local, NULL);
    cc48:	e30303fc 	movw	r0, #13308	; 0x33fc
    cc4c:	e3a01000 	mov	r1, #0
    cc50:	e3400001 	movt	r0, #1
    cc54:	eb000624 	bl	e4ec <CRYPTO_THREAD_set_local>
            return NULL;
    cc58:	eaffffd5 	b	cbb4 <ERR_get_state+0x7c>

0000cc5c <ERR_put_error>:
{
    cc5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cc60:	e1a06000 	mov	r6, r0
    cc64:	e1a08001 	mov	r8, r1
    cc68:	e1a07002 	mov	r7, r2
    cc6c:	e1a05003 	mov	r5, r3
    es = ERR_get_state();
    cc70:	ebffffb0 	bl	cb38 <ERR_get_state>
    if (es == NULL)
    cc74:	e2504000 	subs	r4, r0, #0
    cc78:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    es->top = (es->top + 1) % ERR_NUM_ERRORS;
    cc7c:	e594c180 	ldr	ip, [r4, #384]	; 0x180
    if (es->top == es->bottom)
    cc80:	e5942184 	ldr	r2, [r4, #388]	; 0x184
    es->top = (es->top + 1) % ERR_NUM_ERRORS;
    cc84:	e28cc001 	add	ip, ip, #1
    cc88:	e27c3000 	rsbs	r3, ip, #0
    cc8c:	e20cc00f 	and	ip, ip, #15
    cc90:	e203300f 	and	r3, r3, #15
    cc94:	5263c000 	rsbpl	ip, r3, #0
    if (es->top == es->bottom)
    cc98:	e15c0002 	cmp	ip, r2
    es->top = (es->top + 1) % ERR_NUM_ERRORS;
    cc9c:	e584c180 	str	ip, [r4, #384]	; 0x180
    if (es->top == es->bottom)
    cca0:	0a000013 	beq	ccf4 <ERR_put_error+0x98>
    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
    cca4:	e3a00a0f 	mov	r0, #61440	; 0xf000
    cca8:	e084310c 	add	r3, r4, ip, lsl #2
    ccac:	e34000ff 	movt	r0, #255	; 0xff
    ccb0:	e0000608 	and	r0, r0, r8, lsl #12
    es->err_flags[es->top] = 0;
    ccb4:	e3a08000 	mov	r8, #0
    ccb8:	e784810c 	str	r8, [r4, ip, lsl #2]
    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
    ccbc:	e7eb2057 	ubfx	r2, r7, #0, #12
    ccc0:	e1800c06 	orr	r0, r0, r6, lsl #24
    err_clear_data(es, es->top);
    ccc4:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
    es->err_file[es->top] = file;
    ccc8:	e5835100 	str	r5, [r3, #256]	; 0x100
    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
    cccc:	e1802002 	orr	r2, r0, r2
    es->err_line[es->top] = line;
    ccd0:	e59d0018 	ldr	r0, [sp, #24]
    err_clear_data(es, es->top);
    ccd4:	e3110001 	tst	r1, #1
    es->err_buffer[es->top] = ERR_PACK(lib, func, reason);
    ccd8:	e5832040 	str	r2, [r3, #64]	; 0x40
    es->err_line[es->top] = line;
    ccdc:	e5830140 	str	r0, [r3, #320]	; 0x140
    err_clear_data(es, es->top);
    cce0:	1a00000a 	bne	cd10 <ERR_put_error+0xb4>
    cce4:	e28cc030 	add	ip, ip, #48	; 0x30
    cce8:	e3a03000 	mov	r3, #0
    ccec:	e784310c 	str	r3, [r4, ip, lsl #2]
}
    ccf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        es->bottom = (es->bottom + 1) % ERR_NUM_ERRORS;
    ccf4:	e28c3001 	add	r3, ip, #1
    ccf8:	e2732000 	rsbs	r2, r3, #0
    ccfc:	e203300f 	and	r3, r3, #15
    cd00:	e202200f 	and	r2, r2, #15
    cd04:	52623000 	rsbpl	r3, r2, #0
    cd08:	e5843184 	str	r3, [r4, #388]	; 0x184
    cd0c:	eaffffe4 	b	cca4 <ERR_put_error+0x48>
    err_clear_data(es, es->top);
    cd10:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    cd14:	e5930080 	ldr	r0, [r3, #128]	; 0x80
    cd18:	e3401000 	movt	r1, #0
    cd1c:	e1a02008 	mov	r2, r8
    cd20:	eb000474 	bl	def8 <CRYPTO_free>
    cd24:	e594c180 	ldr	ip, [r4, #384]	; 0x180
    cd28:	e28c3020 	add	r3, ip, #32
    cd2c:	e7848103 	str	r8, [r4, r3, lsl #2]
    cd30:	eaffffeb 	b	cce4 <ERR_put_error+0x88>

0000cd34 <ERR_clear_error>:
{
    cd34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    es = ERR_get_state();
    cd38:	ebffff7e 	bl	cb38 <ERR_get_state>
    if (es == NULL)
    cd3c:	e2509000 	subs	r9, r0, #0
    cd40:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
        err_clear(es, i);
    cd44:	e30f8fc4 	movw	r8, #65476	; 0xffc4
    cd48:	e2494004 	sub	r4, r9, #4
    cd4c:	e3408000 	movt	r8, #0
    cd50:	e289703c 	add	r7, r9, #60	; 0x3c
    cd54:	e3a05000 	mov	r5, #0
    cd58:	e3e06000 	mvn	r6, #0
    cd5c:	ea000006 	b	cd7c <ERR_clear_error+0x48>
    cd60:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    cd64:	e5a45004 	str	r5, [r4, #4]!
    for (i = 0; i < ERR_NUM_ERRORS; i++) {
    cd68:	e1540007 	cmp	r4, r7
        err_clear(es, i);
    cd6c:	e5845040 	str	r5, [r4, #64]	; 0x40
    cd70:	e5845100 	str	r5, [r4, #256]	; 0x100
    cd74:	e5846140 	str	r6, [r4, #320]	; 0x140
    for (i = 0; i < ERR_NUM_ERRORS; i++) {
    cd78:	0a000008 	beq	cda0 <ERR_clear_error+0x6c>
        err_clear(es, i);
    cd7c:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    cd80:	e3130001 	tst	r3, #1
    cd84:	0afffff5 	beq	cd60 <ERR_clear_error+0x2c>
    cd88:	e3a02000 	mov	r2, #0
    cd8c:	e1a01008 	mov	r1, r8
    cd90:	e5940084 	ldr	r0, [r4, #132]	; 0x84
    cd94:	eb000457 	bl	def8 <CRYPTO_free>
    cd98:	e5845084 	str	r5, [r4, #132]	; 0x84
    cd9c:	eaffffef 	b	cd60 <ERR_clear_error+0x2c>
    es->top = es->bottom = 0;
    cda0:	e5895184 	str	r5, [r9, #388]	; 0x184
    cda4:	e5895180 	str	r5, [r9, #384]	; 0x180
}
    cda8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000cdac <aes_cbc_cipher>:
    return 1;
}

static int aes_cbc_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                          const unsigned char *in, size_t len)
{
    cdac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cdb0:	e24dd008 	sub	sp, sp, #8
    cdb4:	e1a05000 	mov	r5, r0
    cdb8:	e1a08001 	mov	r8, r1
    cdbc:	e1a07002 	mov	r7, r2
    cdc0:	e1a09003 	mov	r9, r3
    EVP_AES_KEY *dat = EVP_C_DATA(EVP_AES_KEY,ctx);
    cdc4:	eb0001cf 	bl	d508 <EVP_CIPHER_CTX_get_cipher_data>

    if (dat->stream.cbc)
    cdc8:	e59060fc 	ldr	r6, [r0, #252]	; 0xfc
    EVP_AES_KEY *dat = EVP_C_DATA(EVP_AES_KEY,ctx);
    cdcc:	e1a04000 	mov	r4, r0
        (*dat->stream.cbc) (in, out, len, &dat->ks,
    cdd0:	e1a00005 	mov	r0, r5
    if (dat->stream.cbc)
    cdd4:	e3560000 	cmp	r6, #0
    cdd8:	0a00000d 	beq	ce14 <aes_cbc_cipher+0x68>
        (*dat->stream.cbc) (in, out, len, &dat->ks,
    cddc:	eb0001d2 	bl	d52c <EVP_CIPHER_CTX_iv_noconst>
    cde0:	e1a0a000 	mov	sl, r0
    cde4:	e1a00005 	mov	r0, r5
    cde8:	eb0001c2 	bl	d4f8 <EVP_CIPHER_CTX_encrypting>
    cdec:	e58da000 	str	sl, [sp]
    cdf0:	e1a03004 	mov	r3, r4
    cdf4:	e58d0004 	str	r0, [sp, #4]
    cdf8:	e1a02009 	mov	r2, r9
    cdfc:	e1a00007 	mov	r0, r7
    ce00:	e1a01008 	mov	r1, r8
    ce04:	e12fff36 	blx	r6
    else
        CRYPTO_cbc128_decrypt(in, out, len, &dat->ks,
                              EVP_CIPHER_CTX_iv_noconst(ctx), dat->block);

    return 1;
}
    ce08:	e3a00001 	mov	r0, #1
    ce0c:	e28dd008 	add	sp, sp, #8
    ce10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    else if (EVP_CIPHER_CTX_encrypting(ctx))
    ce14:	eb0001b7 	bl	d4f8 <EVP_CIPHER_CTX_encrypting>
    ce18:	e3500000 	cmp	r0, #0
        CRYPTO_cbc128_encrypt(in, out, len, &dat->ks,
    ce1c:	e1a00005 	mov	r0, r5
    else if (EVP_CIPHER_CTX_encrypting(ctx))
    ce20:	1a00000b 	bne	ce54 <aes_cbc_cipher+0xa8>
        CRYPTO_cbc128_decrypt(in, out, len, &dat->ks,
    ce24:	eb0001c0 	bl	d52c <EVP_CIPHER_CTX_iv_noconst>
    ce28:	e594c0f8 	ldr	ip, [r4, #248]	; 0xf8
    ce2c:	e1a02009 	mov	r2, r9
    ce30:	e58d0000 	str	r0, [sp]
    ce34:	e1a01008 	mov	r1, r8
    ce38:	e1a00007 	mov	r0, r7
    ce3c:	e1a03004 	mov	r3, r4
    ce40:	e58dc004 	str	ip, [sp, #4]
    ce44:	eb0004b6 	bl	e124 <CRYPTO_cbc128_decrypt>
}
    ce48:	e3a00001 	mov	r0, #1
    ce4c:	e28dd008 	add	sp, sp, #8
    ce50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        CRYPTO_cbc128_encrypt(in, out, len, &dat->ks,
    ce54:	eb0001b4 	bl	d52c <EVP_CIPHER_CTX_iv_noconst>
    ce58:	e594c0f8 	ldr	ip, [r4, #248]	; 0xf8
    ce5c:	e1a02009 	mov	r2, r9
    ce60:	e58d0000 	str	r0, [sp]
    ce64:	e1a01008 	mov	r1, r8
    ce68:	e1a00007 	mov	r0, r7
    ce6c:	e1a03004 	mov	r3, r4
    ce70:	e58dc004 	str	ip, [sp, #4]
    ce74:	eb000470 	bl	e03c <CRYPTO_cbc128_encrypt>
}
    ce78:	e3a00001 	mov	r0, #1
    ce7c:	e28dd008 	add	sp, sp, #8
    ce80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000ce84 <aes_init_key>:
{
    ce84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ce88:	e1a06000 	mov	r6, r0
    ce8c:	e24dd008 	sub	sp, sp, #8
    ce90:	e1a08003 	mov	r8, r3
    ce94:	e1a07001 	mov	r7, r1
    mode = EVP_CIPHER_CTX_mode(ctx);
    ce98:	e3a04007 	mov	r4, #7
    EVP_AES_KEY *dat = EVP_C_DATA(EVP_AES_KEY,ctx);
    ce9c:	eb000199 	bl	d508 <EVP_CIPHER_CTX_get_cipher_data>
    cea0:	e1a05000 	mov	r5, r0
    mode = EVP_CIPHER_CTX_mode(ctx);
    cea4:	e1a00006 	mov	r0, r6
    cea8:	eb000190 	bl	d4f0 <EVP_CIPHER_CTX_cipher>
    ceac:	e340400f 	movt	r4, #15
    ceb0:	eb000192 	bl	d500 <EVP_CIPHER_flags>
    ceb4:	e0044000 	and	r4, r4, r0
                                      EVP_CIPHER_CTX_key_length(ctx) * 8,
    ceb8:	e1a00006 	mov	r0, r6
    if ((mode == EVP_CIPH_ECB_MODE || mode == EVP_CIPH_CBC_MODE)
    cebc:	e2443001 	sub	r3, r4, #1
        && !enc) {
    cec0:	e3530001 	cmp	r3, #1
    cec4:	93580000 	cmpls	r8, #0
    cec8:	0a00001a 	beq	cf38 <aes_init_key+0xb4>
        ret = AES_set_encrypt_key(key, EVP_CIPHER_CTX_key_length(ctx) * 8,
    cecc:	eb000198 	bl	d534 <EVP_CIPHER_CTX_key_length>
    ced0:	e1a02005 	mov	r2, r5
    ced4:	e1a01180 	lsl	r1, r0, #3
    ced8:	e1a00007 	mov	r0, r7
    cedc:	ebfff90f 	bl	b320 <AES_set_encrypt_key>
            (cbc128_f) AES_cbc_encrypt : NULL;
    cee0:	e30b32f4 	movw	r3, #45812	; 0xb2f4
    cee4:	e3540002 	cmp	r4, #2
        dat->block = (block128_f) AES_encrypt;
    cee8:	e30b29b4 	movw	r2, #47540	; 0xb9b4
            (cbc128_f) AES_cbc_encrypt : NULL;
    ceec:	e3403000 	movt	r3, #0
        dat->block = (block128_f) AES_encrypt;
    cef0:	e3402000 	movt	r2, #0
            (cbc128_f) AES_cbc_encrypt : NULL;
    cef4:	13a03000 	movne	r3, #0
        dat->block = (block128_f) AES_encrypt;
    cef8:	e1c52ff8 	strd	r2, [r5, #248]	; 0xf8
    if (ret < 0) {
    cefc:	e3500000 	cmp	r0, #0
    return 1;
    cf00:	a3a00001 	movge	r0, #1
    if (ret < 0) {
    cf04:	ba000001 	blt	cf10 <aes_init_key+0x8c>
}
    cf08:	e28dd008 	add	sp, sp, #8
    cf0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        EVPerr(EVP_F_AES_INIT_KEY, EVP_R_AES_KEY_SETUP_FAILED);
    cf10:	e3a04000 	mov	r4, #0
    cf14:	e3a0208f 	mov	r2, #143	; 0x8f
    cf18:	e58d4000 	str	r4, [sp]
    cf1c:	e1a03004 	mov	r3, r4
    cf20:	e3a01085 	mov	r1, #133	; 0x85
    cf24:	e3a00006 	mov	r0, #6
    cf28:	ebffff4b 	bl	cc5c <ERR_put_error>
        return 0;
    cf2c:	e1a00004 	mov	r0, r4
}
    cf30:	e28dd008 	add	sp, sp, #8
    cf34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                                      EVP_CIPHER_CTX_key_length(ctx) * 8,
    cf38:	eb00017d 	bl	d534 <EVP_CIPHER_CTX_key_length>
            ret = AES_set_decrypt_key(key,
    cf3c:	e1a02005 	mov	r2, r5
    cf40:	e1a01180 	lsl	r1, r0, #3
    cf44:	e1a00007 	mov	r0, r7
    cf48:	ebfffa11 	bl	b794 <AES_set_decrypt_key>
                (cbc128_f) AES_cbc_encrypt : NULL;
    cf4c:	e30b32f4 	movw	r3, #45812	; 0xb2f4
    cf50:	e3540002 	cmp	r4, #2
            dat->block = (block128_f) AES_decrypt;
    cf54:	e30b2eb4 	movw	r2, #48820	; 0xbeb4
                (cbc128_f) AES_cbc_encrypt : NULL;
    cf58:	e3403000 	movt	r3, #0
            dat->block = (block128_f) AES_decrypt;
    cf5c:	e3402000 	movt	r2, #0
                (cbc128_f) AES_cbc_encrypt : NULL;
    cf60:	13a03000 	movne	r3, #0
            dat->block = (block128_f) AES_decrypt;
    cf64:	e1c52ff8 	strd	r2, [r5, #248]	; 0xf8
            dat->stream.cbc = mode == EVP_CIPH_CBC_MODE ?
    cf68:	eaffffe3 	b	cefc <aes_init_key+0x78>

0000cf6c <EVP_aes_128_cbc>:
                              dat->block);
    EVP_CIPHER_CTX_set_num(ctx, num);
    return 1;
}

BLOCK_CIPHER_generic_pack(NID_aes, 128, 0)
    cf6c:	e3020714 	movw	r0, #10004	; 0x2714
    cf70:	e3400001 	movt	r0, #1
    cf74:	e12fff1e 	bx	lr

0000cf78 <EVP_CIPHER_CTX_reset>:
#include <openssl/engine.h>
#include "crypto/evp.h"
#include "evp_local.h"

int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c)
{
    cf78:	e92d4010 	push	{r4, lr}
    if (c == NULL)
    cf7c:	e2504000 	subs	r4, r0, #0
    cf80:	0a000019 	beq	cfec <EVP_CIPHER_CTX_reset+0x74>
        return 1;
    if (c->cipher != NULL) {
    cf84:	e5943000 	ldr	r3, [r4]
    cf88:	e3530000 	cmp	r3, #0
    cf8c:	0a000019 	beq	cff8 <EVP_CIPHER_CTX_reset+0x80>
        if (c->cipher->cleanup && !c->cipher->cleanup(c))
    cf90:	e593301c 	ldr	r3, [r3, #28]
    cf94:	e3530000 	cmp	r3, #0
    cf98:	0a000002 	beq	cfa8 <EVP_CIPHER_CTX_reset+0x30>
    cf9c:	e12fff33 	blx	r3
    cfa0:	e3500000 	cmp	r0, #0
    cfa4:	08bd8010 	popeq	{r4, pc}
            return 0;
        /* Cleanse cipher context data */
        if (c->cipher_data && c->cipher->ctx_size)
    cfa8:	e5940060 	ldr	r0, [r4, #96]	; 0x60
    cfac:	e3500000 	cmp	r0, #0
    cfb0:	0a000003 	beq	cfc4 <EVP_CIPHER_CTX_reset+0x4c>
    cfb4:	e5943000 	ldr	r3, [r4]
    cfb8:	e5931020 	ldr	r1, [r3, #32]
    cfbc:	e3510000 	cmp	r1, #0
    cfc0:	1a00000b 	bne	cff4 <EVP_CIPHER_CTX_reset+0x7c>
            OPENSSL_cleanse(c->cipher_data, c->cipher->ctx_size);
    }
    OPENSSL_free(c->cipher_data);
    cfc4:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    cfc8:	e3a02000 	mov	r2, #0
    cfcc:	e3401000 	movt	r1, #0
    cfd0:	eb0003c8 	bl	def8 <CRYPTO_free>
#ifndef OPENSSL_NO_ENGINE
    ENGINE_finish(c->engine);
#endif
    memset(c, 0, sizeof(*c));
    cfd4:	e1a00004 	mov	r0, r4
    cfd8:	e3a0208c 	mov	r2, #140	; 0x8c
    cfdc:	e3a01000 	mov	r1, #0
    cfe0:	eb000a60 	bl	f968 <memset>
    cfe4:	e3a00001 	mov	r0, #1
    cfe8:	e8bd8010 	pop	{r4, pc}
        return 1;
    cfec:	e3a00001 	mov	r0, #1
    return 1;
}
    cff0:	e8bd8010 	pop	{r4, pc}
            OPENSSL_cleanse(c->cipher_data, c->cipher->ctx_size);
    cff4:	eb0003fe 	bl	dff4 <OPENSSL_cleanse>
    cff8:	e5940060 	ldr	r0, [r4, #96]	; 0x60
    cffc:	eafffff0 	b	cfc4 <EVP_CIPHER_CTX_reset+0x4c>

0000d000 <EVP_CIPHER_CTX_new>:

EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void)
{
    return OPENSSL_zalloc(sizeof(EVP_CIPHER_CTX));
    d000:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d004:	e3a02000 	mov	r2, #0
    d008:	e3401000 	movt	r1, #0
    d00c:	e3a0008c 	mov	r0, #140	; 0x8c
    d010:	ea0003de 	b	df90 <CRYPTO_zalloc>

0000d014 <EVP_CIPHER_CTX_free>:
}

void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx)
{
    d014:	e92d4010 	push	{r4, lr}
    d018:	e1a04000 	mov	r4, r0
    EVP_CIPHER_CTX_reset(ctx);
    d01c:	ebffffd5 	bl	cf78 <EVP_CIPHER_CTX_reset>
    OPENSSL_free(ctx);
    d020:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d024:	e1a00004 	mov	r0, r4
    d028:	e3401000 	movt	r1, #0
    d02c:	e3a02000 	mov	r2, #0
}
    d030:	e8bd4010 	pop	{r4, lr}
    OPENSSL_free(ctx);
    d034:	ea0003af 	b	def8 <CRYPTO_free>

0000d038 <EVP_CIPHER_CTX_ctrl>:
        ctx->flags |= EVP_CIPH_NO_PADDING;
    return 1;
}

int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
{
    d038:	e92d4010 	push	{r4, lr}
    d03c:	e24dd008 	sub	sp, sp, #8
    int ret;

    if (!ctx->cipher) {
    d040:	e5904000 	ldr	r4, [r0]
    d044:	e3540000 	cmp	r4, #0
    d048:	0a000011 	beq	d094 <EVP_CIPHER_CTX_ctrl+0x5c>
        EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_NO_CIPHER_SET);
        return 0;
    }

    if (!ctx->cipher->ctrl) {
    d04c:	e594402c 	ldr	r4, [r4, #44]	; 0x2c
    d050:	e3540000 	cmp	r4, #0
    d054:	0a000017 	beq	d0b8 <EVP_CIPHER_CTX_ctrl+0x80>
        EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_NOT_IMPLEMENTED);
        return 0;
    }

    ret = ctx->cipher->ctrl(ctx, type, arg, ptr);
    d058:	e12fff34 	blx	r4
    if (ret == -1) {
    d05c:	e3700001 	cmn	r0, #1
    d060:	0a000001 	beq	d06c <EVP_CIPHER_CTX_ctrl+0x34>
        EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL,
               EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED);
        return 0;
    }
    return ret;
}
    d064:	e28dd008 	add	sp, sp, #8
    d068:	e8bd8010 	pop	{r4, pc}
        EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL,
    d06c:	e3a04000 	mov	r4, #0
    d070:	e3a02085 	mov	r2, #133	; 0x85
    d074:	e58d4000 	str	r4, [sp]
    d078:	e1a03004 	mov	r3, r4
    d07c:	e3a0107c 	mov	r1, #124	; 0x7c
    d080:	e3a00006 	mov	r0, #6
    d084:	ebfffef4 	bl	cc5c <ERR_put_error>
        return 0;
    d088:	e1a00004 	mov	r0, r4
}
    d08c:	e28dd008 	add	sp, sp, #8
    d090:	e8bd8010 	pop	{r4, pc}
        EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_NO_CIPHER_SET);
    d094:	e58d4000 	str	r4, [sp]
    d098:	e1a03004 	mov	r3, r4
    d09c:	e3a02083 	mov	r2, #131	; 0x83
    d0a0:	e3a0107c 	mov	r1, #124	; 0x7c
    d0a4:	e3a00006 	mov	r0, #6
    d0a8:	ebfffeeb 	bl	cc5c <ERR_put_error>
        return 0;
    d0ac:	e1a00004 	mov	r0, r4
}
    d0b0:	e28dd008 	add	sp, sp, #8
    d0b4:	e8bd8010 	pop	{r4, pc}
        EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_NOT_IMPLEMENTED);
    d0b8:	e3a00006 	mov	r0, #6
    d0bc:	e58d4000 	str	r4, [sp]
    d0c0:	e1a03004 	mov	r3, r4
    d0c4:	e3a02084 	mov	r2, #132	; 0x84
    d0c8:	e3a0107c 	mov	r1, #124	; 0x7c
    d0cc:	ebfffee2 	bl	cc5c <ERR_put_error>
    d0d0:	e1a00004 	mov	r0, r4
    d0d4:	eaffffe2 	b	d064 <EVP_CIPHER_CTX_ctrl+0x2c>

0000d0d8 <EVP_CipherInit_ex>:
{
    d0d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d0dc:	e24dd008 	sub	sp, sp, #8
    d0e0:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    d0e4:	e1a04000 	mov	r4, r0
    d0e8:	e1a06001 	mov	r6, r1
    d0ec:	e1a07003 	mov	r7, r3
    if (enc == -1)
    d0f0:	e3750001 	cmn	r5, #1
        enc = ctx->encrypt;
    d0f4:	05905008 	ldreq	r5, [r0, #8]
    if (enc == -1)
    d0f8:	0a000002 	beq	d108 <EVP_CipherInit_ex+0x30>
        if (enc)
    d0fc:	e2955000 	adds	r5, r5, #0
    d100:	13a05001 	movne	r5, #1
        ctx->encrypt = enc;
    d104:	e5805008 	str	r5, [r0, #8]
    if (cipher) {
    d108:	e3560000 	cmp	r6, #0
    d10c:	e5943000 	ldr	r3, [r4]
    d110:	0a00005b 	beq	d284 <EVP_CipherInit_ex+0x1ac>
        if (ctx->cipher) {
    d114:	e3530000 	cmp	r3, #0
    d118:	0a000004 	beq	d130 <EVP_CipherInit_ex+0x58>
            unsigned long flags = ctx->flags;
    d11c:	e594805c 	ldr	r8, [r4, #92]	; 0x5c
            EVP_CIPHER_CTX_reset(ctx);
    d120:	e1a00004 	mov	r0, r4
    d124:	ebffff93 	bl	cf78 <EVP_CIPHER_CTX_reset>
            ctx->encrypt = enc;
    d128:	e5845008 	str	r5, [r4, #8]
            ctx->flags = flags;
    d12c:	e584805c 	str	r8, [r4, #92]	; 0x5c
        if (ctx->cipher->ctx_size) {
    d130:	e5960020 	ldr	r0, [r6, #32]
        ctx->cipher = cipher;
    d134:	e5846000 	str	r6, [r4]
        if (ctx->cipher->ctx_size) {
    d138:	e3500000 	cmp	r0, #0
            ctx->cipher_data = NULL;
    d13c:	01a03006 	moveq	r3, r6
    d140:	05840060 	streq	r0, [r4, #96]	; 0x60
        if (ctx->cipher->ctx_size) {
    d144:	1a00003c 	bne	d23c <EVP_CipherInit_ex+0x164>
        if (ctx->cipher->flags & EVP_CIPH_CTRL_INIT) {
    d148:	e5930010 	ldr	r0, [r3, #16]
        ctx->flags &= EVP_CIPHER_CTX_FLAG_WRAP_ALLOW;
    d14c:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
        ctx->key_len = cipher->key_len;
    d150:	e5961008 	ldr	r1, [r6, #8]
        if (ctx->cipher->flags & EVP_CIPH_CTRL_INIT) {
    d154:	e3100040 	tst	r0, #64	; 0x40
        ctx->flags &= EVP_CIPHER_CTX_FLAG_WRAP_ALLOW;
    d158:	e2022001 	and	r2, r2, #1
        ctx->key_len = cipher->key_len;
    d15c:	e5841058 	str	r1, [r4, #88]	; 0x58
        ctx->flags &= EVP_CIPHER_CTX_FLAG_WRAP_ALLOW;
    d160:	e584205c 	str	r2, [r4, #92]	; 0x5c
        if (ctx->cipher->flags & EVP_CIPH_CTRL_INIT) {
    d164:	1a00003d 	bne	d260 <EVP_CipherInit_ex+0x188>
    OPENSSL_assert(ctx->cipher->block_size == 1
    d168:	e5932004 	ldr	r2, [r3, #4]
    d16c:	e2423008 	sub	r3, r2, #8
    d170:	e3c33008 	bic	r3, r3, #8
    d174:	e3520001 	cmp	r2, #1
    d178:	13530000 	cmpne	r3, #0
    d17c:	1a000090 	bne	d3c4 <EVP_CipherInit_ex+0x2ec>
    if (!(ctx->flags & EVP_CIPHER_CTX_FLAG_WRAP_ALLOW)
    d180:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    d184:	e2136001 	ands	r6, r3, #1
    d188:	0a00001a 	beq	d1f8 <EVP_CipherInit_ex+0x120>
    if (!(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ctx)) & EVP_CIPH_CUSTOM_IV)) {
    d18c:	e1a00004 	mov	r0, r4
    d190:	eb0000d6 	bl	d4f0 <EVP_CIPHER_CTX_cipher>
    d194:	eb0000d9 	bl	d500 <EVP_CIPHER_flags>
    d198:	e3100010 	tst	r0, #16
    d19c:	0a000041 	beq	d2a8 <EVP_CipherInit_ex+0x1d0>
    if (key || (ctx->cipher->flags & EVP_CIPH_ALWAYS_CALL_INIT)) {
    d1a0:	e3570000 	cmp	r7, #0
    d1a4:	e5943000 	ldr	r3, [r4]
    d1a8:	0a000081 	beq	d3b4 <EVP_CipherInit_ex+0x2dc>
        if (!ctx->cipher->init(ctx, key, iv, enc))
    d1ac:	e5936014 	ldr	r6, [r3, #20]
    d1b0:	e1a01007 	mov	r1, r7
    d1b4:	e1a03005 	mov	r3, r5
    d1b8:	e59d2020 	ldr	r2, [sp, #32]
    d1bc:	e1a00004 	mov	r0, r4
    d1c0:	e12fff36 	blx	r6
    d1c4:	e2506000 	subs	r6, r0, #0
    d1c8:	0a000007 	beq	d1ec <EVP_CipherInit_ex+0x114>
    d1cc:	e5943000 	ldr	r3, [r4]
    ctx->block_mask = ctx->cipher->block_size - 1;
    d1d0:	e5933004 	ldr	r3, [r3, #4]
    return 1;
    d1d4:	e3a06001 	mov	r6, #1
    ctx->buf_len = 0;
    d1d8:	e3a02000 	mov	r2, #0
    d1dc:	e584200c 	str	r2, [r4, #12]
    ctx->block_mask = ctx->cipher->block_size - 1;
    d1e0:	e2433001 	sub	r3, r3, #1
    ctx->final_used = 0;
    d1e4:	e5842064 	str	r2, [r4, #100]	; 0x64
    ctx->block_mask = ctx->cipher->block_size - 1;
    d1e8:	e5843068 	str	r3, [r4, #104]	; 0x68
}
    d1ec:	e1a00006 	mov	r0, r6
    d1f0:	e28dd008 	add	sp, sp, #8
    d1f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        && EVP_CIPHER_CTX_mode(ctx) == EVP_CIPH_WRAP_MODE) {
    d1f8:	e1a00004 	mov	r0, r4
    d1fc:	eb0000bb 	bl	d4f0 <EVP_CIPHER_CTX_cipher>
    d200:	eb0000be 	bl	d500 <EVP_CIPHER_flags>
    d204:	e3a03007 	mov	r3, #7
    d208:	e3a02002 	mov	r2, #2
    d20c:	e340300f 	movt	r3, #15
    d210:	e3402001 	movt	r2, #1
    d214:	e0000003 	and	r0, r0, r3
    d218:	e1500002 	cmp	r0, r2
    d21c:	1affffda 	bne	d18c <EVP_CipherInit_ex+0xb4>
        EVPerr(EVP_F_EVP_CIPHERINIT_EX, EVP_R_WRAP_MODE_NOT_ALLOWED);
    d220:	e58d6000 	str	r6, [sp]
    d224:	e1a03006 	mov	r3, r6
    d228:	e3a020aa 	mov	r2, #170	; 0xaa
    d22c:	e3a0107b 	mov	r1, #123	; 0x7b
    d230:	e3a00006 	mov	r0, #6
    d234:	ebfffe88 	bl	cc5c <ERR_put_error>
        return 0;
    d238:	eaffffeb 	b	d1ec <EVP_CipherInit_ex+0x114>
            ctx->cipher_data = OPENSSL_zalloc(ctx->cipher->ctx_size);
    d23c:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d240:	e3a02000 	mov	r2, #0
    d244:	e3401000 	movt	r1, #0
    d248:	eb000350 	bl	df90 <CRYPTO_zalloc>
            if (ctx->cipher_data == NULL) {
    d24c:	e3500000 	cmp	r0, #0
            ctx->cipher_data = OPENSSL_zalloc(ctx->cipher->ctx_size);
    d250:	e5840060 	str	r0, [r4, #96]	; 0x60
            if (ctx->cipher_data == NULL) {
    d254:	0a00004d 	beq	d390 <EVP_CipherInit_ex+0x2b8>
    d258:	e5943000 	ldr	r3, [r4]
    d25c:	eaffffb9 	b	d148 <EVP_CipherInit_ex+0x70>
            if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_INIT, 0, NULL)) {
    d260:	e3a03000 	mov	r3, #0
    d264:	e1a00004 	mov	r0, r4
    d268:	e1a02003 	mov	r2, r3
    d26c:	e1a01003 	mov	r1, r3
    d270:	ebffff70 	bl	d038 <EVP_CIPHER_CTX_ctrl>
    d274:	e2506000 	subs	r6, r0, #0
    d278:	0a000019 	beq	d2e4 <EVP_CipherInit_ex+0x20c>
    d27c:	e5943000 	ldr	r3, [r4]
    d280:	eaffffb8 	b	d168 <EVP_CipherInit_ex+0x90>
    } else if (!ctx->cipher) {
    d284:	e3530000 	cmp	r3, #0
    d288:	1affffb6 	bne	d168 <EVP_CipherInit_ex+0x90>
        EVPerr(EVP_F_EVP_CIPHERINIT_EX, EVP_R_NO_CIPHER_SET);
    d28c:	e58d6000 	str	r6, [sp]
    d290:	e1a03006 	mov	r3, r6
    d294:	e3a02083 	mov	r2, #131	; 0x83
    d298:	e3a0107b 	mov	r1, #123	; 0x7b
    d29c:	e3a00006 	mov	r0, #6
    d2a0:	ebfffe6d 	bl	cc5c <ERR_put_error>
        return 0;
    d2a4:	eaffffd0 	b	d1ec <EVP_CipherInit_ex+0x114>
        switch (EVP_CIPHER_CTX_mode(ctx)) {
    d2a8:	e1a00004 	mov	r0, r4
    d2ac:	eb00008f 	bl	d4f0 <EVP_CIPHER_CTX_cipher>
    d2b0:	eb000092 	bl	d500 <EVP_CIPHER_flags>
    d2b4:	e3a03007 	mov	r3, #7
    d2b8:	e340300f 	movt	r3, #15
    d2bc:	e0000003 	and	r0, r0, r3
    d2c0:	e3500005 	cmp	r0, #5
    d2c4:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    d2c8:	ea000049 	b	d3f4 <EVP_CipherInit_ex+0x31c>
    d2cc:	0000d1a0 	.word	0x0000d1a0
    d2d0:	0000d1a0 	.word	0x0000d1a0
    d2d4:	0000d30c 	.word	0x0000d30c
    d2d8:	0000d304 	.word	0x0000d304
    d2dc:	0000d304 	.word	0x0000d304
    d2e0:	0000d360 	.word	0x0000d360
                ctx->cipher = NULL;
    d2e4:	e5846000 	str	r6, [r4]
                EVPerr(EVP_F_EVP_CIPHERINIT_EX, EVP_R_INITIALIZATION_ERROR);
    d2e8:	e1a03006 	mov	r3, r6
    d2ec:	e58d6000 	str	r6, [sp]
    d2f0:	e3a02086 	mov	r2, #134	; 0x86
    d2f4:	e3a0107b 	mov	r1, #123	; 0x7b
    d2f8:	e3a00006 	mov	r0, #6
    d2fc:	ebfffe56 	bl	cc5c <ERR_put_error>
                return 0;
    d300:	eaffffb9 	b	d1ec <EVP_CipherInit_ex+0x114>
            ctx->num = 0;
    d304:	e3a03000 	mov	r3, #0
    d308:	e5843050 	str	r3, [r4, #80]	; 0x50
            OPENSSL_assert(EVP_CIPHER_CTX_iv_length(ctx) <=
    d30c:	e1a00004 	mov	r0, r4
    d310:	eb00007e 	bl	d510 <EVP_CIPHER_CTX_iv_length>
    d314:	e3500010 	cmp	r0, #16
    d318:	ca00002f 	bgt	d3dc <EVP_CipherInit_ex+0x304>
            if (iv)
    d31c:	e59d3020 	ldr	r3, [sp, #32]
    d320:	e2846010 	add	r6, r4, #16
    d324:	e3530000 	cmp	r3, #0
    d328:	0a000005 	beq	d344 <EVP_CipherInit_ex+0x26c>
                memcpy(ctx->oiv, iv, EVP_CIPHER_CTX_iv_length(ctx));
    d32c:	e1a00004 	mov	r0, r4
    d330:	eb000076 	bl	d510 <EVP_CIPHER_CTX_iv_length>
    d334:	e59d1020 	ldr	r1, [sp, #32]
    d338:	e1a02000 	mov	r2, r0
    d33c:	e1a00006 	mov	r0, r6
    d340:	eb00094d 	bl	f87c <memcpy>
            memcpy(ctx->iv, ctx->oiv, EVP_CIPHER_CTX_iv_length(ctx));
    d344:	e1a00004 	mov	r0, r4
    d348:	eb000070 	bl	d510 <EVP_CIPHER_CTX_iv_length>
    d34c:	e1a01006 	mov	r1, r6
    d350:	e1a02000 	mov	r2, r0
    d354:	e2840020 	add	r0, r4, #32
    d358:	eb000947 	bl	f87c <memcpy>
            break;
    d35c:	eaffff8f 	b	d1a0 <EVP_CipherInit_ex+0xc8>
            if (iv)
    d360:	e59d3020 	ldr	r3, [sp, #32]
    d364:	e3530000 	cmp	r3, #0
            ctx->num = 0;
    d368:	e3a03000 	mov	r3, #0
    d36c:	e5843050 	str	r3, [r4, #80]	; 0x50
            if (iv)
    d370:	0affff8a 	beq	d1a0 <EVP_CipherInit_ex+0xc8>
                memcpy(ctx->iv, iv, EVP_CIPHER_CTX_iv_length(ctx));
    d374:	e1a00004 	mov	r0, r4
    d378:	eb000064 	bl	d510 <EVP_CIPHER_CTX_iv_length>
    d37c:	e59d1020 	ldr	r1, [sp, #32]
    d380:	e1a02000 	mov	r2, r0
    d384:	e2840020 	add	r0, r4, #32
    d388:	eb00093b 	bl	f87c <memcpy>
    d38c:	eaffff83 	b	d1a0 <EVP_CipherInit_ex+0xc8>
                ctx->cipher = NULL;
    d390:	e5840000 	str	r0, [r4]
                EVPerr(EVP_F_EVP_CIPHERINIT_EX, ERR_R_MALLOC_FAILURE);
    d394:	e1a03000 	mov	r3, r0
    d398:	e58d0000 	str	r0, [sp]
    d39c:	e3a02041 	mov	r2, #65	; 0x41
    d3a0:	e3a0107b 	mov	r1, #123	; 0x7b
    d3a4:	e3a00006 	mov	r0, #6
                return 0;
    d3a8:	e1a06003 	mov	r6, r3
                EVPerr(EVP_F_EVP_CIPHERINIT_EX, ERR_R_MALLOC_FAILURE);
    d3ac:	ebfffe2a 	bl	cc5c <ERR_put_error>
                return 0;
    d3b0:	eaffff8d 	b	d1ec <EVP_CipherInit_ex+0x114>
    if (key || (ctx->cipher->flags & EVP_CIPH_ALWAYS_CALL_INIT)) {
    d3b4:	e5932010 	ldr	r2, [r3, #16]
    d3b8:	e3120020 	tst	r2, #32
    d3bc:	0affff83 	beq	d1d0 <EVP_CipherInit_ex+0xf8>
    d3c0:	eaffff79 	b	d1ac <EVP_CipherInit_ex+0xd4>
    OPENSSL_assert(ctx->cipher->block_size == 1
    d3c4:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d3c8:	e3020748 	movw	r0, #10056	; 0x2748
    d3cc:	e3401000 	movt	r1, #0
    d3d0:	e3400001 	movt	r0, #1
    d3d4:	e3a02000 	mov	r2, #0
    d3d8:	ebfffd9e 	bl	ca58 <OPENSSL_die>
            OPENSSL_assert(EVP_CIPHER_CTX_iv_length(ctx) <=
    d3dc:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d3e0:	e30207b8 	movw	r0, #10168	; 0x27b8
    d3e4:	e3401000 	movt	r1, #0
    d3e8:	e3400001 	movt	r0, #1
    d3ec:	e3a02000 	mov	r2, #0
    d3f0:	ebfffd98 	bl	ca58 <OPENSSL_die>
            return 0;
    d3f4:	e3a06000 	mov	r6, #0
    d3f8:	eaffff7b 	b	d1ec <EVP_CipherInit_ex+0x114>

0000d3fc <EVP_EncryptInit_ex>:
{
    d3fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d400:	e24dd00c 	sub	sp, sp, #12
    d404:	e59dc010 	ldr	ip, [sp, #16]
    return EVP_CipherInit_ex(ctx, cipher, impl, key, iv, 1);
    d408:	e3a0e001 	mov	lr, #1
    d40c:	e88d5000 	stm	sp, {ip, lr}
    d410:	ebffff30 	bl	d0d8 <EVP_CipherInit_ex>
}
    d414:	e28dd00c 	add	sp, sp, #12
    d418:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000d41c <EVP_CIPHER_CTX_set_key_length>:
    if (c->cipher->flags & EVP_CIPH_CUSTOM_KEY_LENGTH)
    d41c:	e5902000 	ldr	r2, [r0]
    d420:	e5922010 	ldr	r2, [r2, #16]
    d424:	e3120080 	tst	r2, #128	; 0x80
    d428:	1a000015 	bne	d484 <EVP_CIPHER_CTX_set_key_length+0x68>
    d42c:	e1a03000 	mov	r3, r0
    if (c->key_len == keylen)
    d430:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    d434:	e1500001 	cmp	r0, r1
    d438:	0a00000f 	beq	d47c <EVP_CIPHER_CTX_set_key_length+0x60>
    if ((keylen > 0) && (c->cipher->flags & EVP_CIPH_VARIABLE_LENGTH)) {
    d43c:	e3510000 	cmp	r1, #0
    d440:	da000001 	ble	d44c <EVP_CIPHER_CTX_set_key_length+0x30>
    d444:	e3120008 	tst	r2, #8
    d448:	1a000011 	bne	d494 <EVP_CIPHER_CTX_set_key_length+0x78>
{
    d44c:	e92d4010 	push	{r4, lr}
    EVPerr(EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH, EVP_R_INVALID_KEY_LENGTH);
    d450:	e3a04000 	mov	r4, #0
{
    d454:	e24dd008 	sub	sp, sp, #8
    EVPerr(EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH, EVP_R_INVALID_KEY_LENGTH);
    d458:	e3a02082 	mov	r2, #130	; 0x82
    d45c:	e1a03004 	mov	r3, r4
    d460:	e3a0107a 	mov	r1, #122	; 0x7a
    d464:	e58d4000 	str	r4, [sp]
    d468:	e3a00006 	mov	r0, #6
    d46c:	ebfffdfa 	bl	cc5c <ERR_put_error>
    return 0;
    d470:	e1a00004 	mov	r0, r4
}
    d474:	e28dd008 	add	sp, sp, #8
    d478:	e8bd8010 	pop	{r4, pc}
        return 1;
    d47c:	e3a00001 	mov	r0, #1
}
    d480:	e12fff1e 	bx	lr
        return EVP_CIPHER_CTX_ctrl(c, EVP_CTRL_SET_KEY_LENGTH, keylen, NULL);
    d484:	e1a02001 	mov	r2, r1
    d488:	e3a03000 	mov	r3, #0
    d48c:	e3a01001 	mov	r1, #1
    d490:	eafffee8 	b	d038 <EVP_CIPHER_CTX_ctrl>
        c->key_len = keylen;
    d494:	e5831058 	str	r1, [r3, #88]	; 0x58
        return 1;
    d498:	e3a00001 	mov	r0, #1
    d49c:	e12fff1e 	bx	lr

0000d4a0 <EVP_CIPHER_CTX_iv_length.part.0>:
int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)
{
    return cipher->iv_len;
}

int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
    d4a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d4a4:	e24dd00c 	sub	sp, sp, #12
{
    int i, rv;

    if ((EVP_CIPHER_flags(ctx->cipher) & EVP_CIPH_CUSTOM_IV_LENGTH) != 0) {
        rv = EVP_CIPHER_CTX_ctrl((EVP_CIPHER_CTX *)ctx, EVP_CTRL_GET_IVLEN,
    d4a8:	e28d3004 	add	r3, sp, #4
    d4ac:	e3a02000 	mov	r2, #0
    d4b0:	e3a01025 	mov	r1, #37	; 0x25
    d4b4:	ebfffedf 	bl	d038 <EVP_CIPHER_CTX_ctrl>
                                 0, &i);
        return (rv == 1) ? i : -1;
    d4b8:	e3500001 	cmp	r0, #1
    d4bc:	059d0004 	ldreq	r0, [sp, #4]
    d4c0:	13e00000 	mvnne	r0, #0
    }
    return ctx->cipher->iv_len;
}
    d4c4:	e28dd00c 	add	sp, sp, #12
    d4c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000d4cc <EVP_CIPHER_CTX_block_size>:
    return ctx->cipher->block_size;
    d4cc:	e5903000 	ldr	r3, [r0]
}
    d4d0:	e5930004 	ldr	r0, [r3, #4]
    d4d4:	e12fff1e 	bx	lr

0000d4d8 <EVP_Cipher>:
    return ctx->cipher->do_cipher(ctx, out, in, inl);
    d4d8:	e590c000 	ldr	ip, [r0]
{
    d4dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    return ctx->cipher->do_cipher(ctx, out, in, inl);
    d4e0:	e59ce018 	ldr	lr, [ip, #24]
    d4e4:	e1a0c00e 	mov	ip, lr
}
    d4e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    return ctx->cipher->do_cipher(ctx, out, in, inl);
    d4ec:	e12fff1c 	bx	ip

0000d4f0 <EVP_CIPHER_CTX_cipher>:
}
    d4f0:	e5900000 	ldr	r0, [r0]
    d4f4:	e12fff1e 	bx	lr

0000d4f8 <EVP_CIPHER_CTX_encrypting>:
}
    d4f8:	e5900008 	ldr	r0, [r0, #8]
    d4fc:	e12fff1e 	bx	lr

0000d500 <EVP_CIPHER_flags>:
}
    d500:	e5900010 	ldr	r0, [r0, #16]
    d504:	e12fff1e 	bx	lr

0000d508 <EVP_CIPHER_CTX_get_cipher_data>:
}
    d508:	e5900060 	ldr	r0, [r0, #96]	; 0x60
    d50c:	e12fff1e 	bx	lr

0000d510 <EVP_CIPHER_CTX_iv_length>:
    if ((EVP_CIPHER_flags(ctx->cipher) & EVP_CIPH_CUSTOM_IV_LENGTH) != 0) {
    d510:	e5903000 	ldr	r3, [r0]
    d514:	e5932010 	ldr	r2, [r3, #16]
    d518:	e3120b02 	tst	r2, #2048	; 0x800
    d51c:	1a000001 	bne	d528 <EVP_CIPHER_CTX_iv_length+0x18>
}
    d520:	e593000c 	ldr	r0, [r3, #12]
    d524:	e12fff1e 	bx	lr
    d528:	eaffffdc 	b	d4a0 <EVP_CIPHER_CTX_iv_length.part.0>

0000d52c <EVP_CIPHER_CTX_iv_noconst>:
    d52c:	e2800020 	add	r0, r0, #32
    d530:	e12fff1e 	bx	lr

0000d534 <EVP_CIPHER_CTX_key_length>:
}

int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)
{
    return ctx->key_len;
}
    d534:	e5900058 	ldr	r0, [r0, #88]	; 0x58
    d538:	e12fff1e 	bx	lr

0000d53c <do_ex_data_init_ossl_>:
static CRYPTO_RWLOCK *ex_data_lock = NULL;
static CRYPTO_ONCE ex_data_init = CRYPTO_ONCE_STATIC_INIT;

DEFINE_RUN_ONCE_STATIC(do_ex_data_init)
{
    if (!OPENSSL_init_crypto(0, NULL))
    d53c:	e3a02000 	mov	r2, #0
DEFINE_RUN_ONCE_STATIC(do_ex_data_init)
    d540:	e92d4010 	push	{r4, lr}
    if (!OPENSSL_init_crypto(0, NULL))
    d544:	e3a00000 	mov	r0, #0
    d548:	e3a01000 	mov	r1, #0
    d54c:	eb000133 	bl	da20 <OPENSSL_init_crypto>
    d550:	e2502000 	subs	r2, r0, #0
    d554:	0a000005 	beq	d570 <do_ex_data_init_ossl_+0x34>
        return 0;
    ex_data_lock = CRYPTO_THREAD_lock_new();
    d558:	eb0003a4 	bl	e3f0 <CRYPTO_THREAD_lock_new>
    return ex_data_lock != NULL;
    d55c:	e2902000 	adds	r2, r0, #0
    ex_data_lock = CRYPTO_THREAD_lock_new();
    d560:	e303344c 	movw	r3, #13388	; 0x344c
    return ex_data_lock != NULL;
    d564:	13a02001 	movne	r2, #1
    ex_data_lock = CRYPTO_THREAD_lock_new();
    d568:	e3403001 	movt	r3, #1
    d56c:	e5830000 	str	r0, [r3]
DEFINE_RUN_ONCE_STATIC(do_ex_data_init)
    d570:	e3033404 	movw	r3, #13316	; 0x3404
    d574:	e3403001 	movt	r3, #1
    d578:	e5832000 	str	r2, [r3]
    d57c:	e8bd8010 	pop	{r4, pc}

0000d580 <get_and_lock>:
 */
static EX_CALLBACKS *get_and_lock(int class_index)
{
    EX_CALLBACKS *ip;

    if (class_index < 0 || class_index >= CRYPTO_EX_INDEX__COUNT) {
    d580:	e350000f 	cmp	r0, #15
{
    d584:	e92d4010 	push	{r4, lr}
        CRYPTOerr(CRYPTO_F_GET_AND_LOCK, ERR_R_PASSED_INVALID_ARGUMENT);
    d588:	83a03000 	movhi	r3, #0
{
    d58c:	e24dd008 	sub	sp, sp, #8
        CRYPTOerr(CRYPTO_F_GET_AND_LOCK, ERR_R_PASSED_INVALID_ARGUMENT);
    d590:	83a02007 	movhi	r2, #7
    if (class_index < 0 || class_index >= CRYPTO_EX_INDEX__COUNT) {
    d594:	8a00001a 	bhi	d604 <get_and_lock+0x84>
    d598:	e1a04000 	mov	r4, r0
        return NULL;
    }

    if (!RUN_ONCE(&ex_data_init, do_ex_data_init)) {
    d59c:	e30d153c 	movw	r1, #54588	; 0xd53c
    d5a0:	e3030448 	movw	r0, #13384	; 0x3448
    d5a4:	e3401000 	movt	r1, #0
    d5a8:	e3400001 	movt	r0, #1
    d5ac:	eb0003aa 	bl	e45c <CRYPTO_THREAD_run_once>
    d5b0:	e3500000 	cmp	r0, #0
    d5b4:	0a000010 	beq	d5fc <get_and_lock+0x7c>
    d5b8:	e3033404 	movw	r3, #13316	; 0x3404
    d5bc:	e3403001 	movt	r3, #1
    d5c0:	e5933000 	ldr	r3, [r3]
    d5c4:	e3530000 	cmp	r3, #0
    d5c8:	0a00000b 	beq	d5fc <get_and_lock+0x7c>
        CRYPTOerr(CRYPTO_F_GET_AND_LOCK, ERR_R_MALLOC_FAILURE);
        return NULL;
    }

    if (ex_data_lock == NULL) {
    d5cc:	e303344c 	movw	r3, #13388	; 0x344c
    d5d0:	e3403001 	movt	r3, #1
    d5d4:	e5930000 	ldr	r0, [r3]
    d5d8:	e3500000 	cmp	r0, #0
    d5dc:	0a000010 	beq	d624 <get_and_lock+0xa4>
         * ignore this operation. We just treat it as an error.
         */
         return NULL;
    }

    ip = &ex_data[class_index];
    d5e0:	e3032408 	movw	r2, #13320	; 0x3408
    d5e4:	e3402001 	movt	r2, #1
    d5e8:	e0824104 	add	r4, r2, r4, lsl #2
    CRYPTO_THREAD_write_lock(ex_data_lock);
    d5ec:	eb000389 	bl	e418 <CRYPTO_THREAD_write_lock>
    return ip;
}
    d5f0:	e1a00004 	mov	r0, r4
    d5f4:	e28dd008 	add	sp, sp, #8
    d5f8:	e8bd8010 	pop	{r4, pc}
        CRYPTOerr(CRYPTO_F_GET_AND_LOCK, ERR_R_MALLOC_FAILURE);
    d5fc:	e3a03000 	mov	r3, #0
    d600:	e3a02041 	mov	r2, #65	; 0x41
        return NULL;
    d604:	e1a04003 	mov	r4, r3
        CRYPTOerr(CRYPTO_F_GET_AND_LOCK, ERR_R_MALLOC_FAILURE);
    d608:	e58d3000 	str	r3, [sp]
    d60c:	e3a01071 	mov	r1, #113	; 0x71
    d610:	e3a0000f 	mov	r0, #15
    d614:	ebfffd90 	bl	cc5c <ERR_put_error>
}
    d618:	e1a00004 	mov	r0, r4
    d61c:	e28dd008 	add	sp, sp, #8
    d620:	e8bd8010 	pop	{r4, pc}
         return NULL;
    d624:	e1a04000 	mov	r4, r0
    d628:	eafffff0 	b	d5f0 <get_and_lock+0x70>

0000d62c <CRYPTO_get_ex_data>:
 * For a given CRYPTO_EX_DATA_ variable, get the value corresponding to a
 * particular index in the class used by this variable
 */
void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)
{
    if (ad->sk == NULL || idx >= sk_void_num(ad->sk))
    d62c:	e5903000 	ldr	r3, [r0]
    d630:	e3530000 	cmp	r3, #0
    d634:	0a00000c 	beq	d66c <CRYPTO_get_ex_data+0x40>
{
    d638:	e92d4070 	push	{r4, r5, r6, lr}
    d63c:	e1a05001 	mov	r5, r1
    d640:	e1a04000 	mov	r4, r0
# define CRYPTO_MEM_CHECK_DISABLE 0x3   /* Control only */

struct crypto_ex_data_st {
    STACK_OF(void) *sk;
};
DEFINE_STACK_OF(void)
    d644:	e1a00003 	mov	r0, r3
    d648:	eb000357 	bl	e3ac <OPENSSL_sk_num>
    if (ad->sk == NULL || idx >= sk_void_num(ad->sk))
    d64c:	e1550000 	cmp	r5, r0
    d650:	aa000003 	bge	d664 <CRYPTO_get_ex_data+0x38>
    d654:	e1a01005 	mov	r1, r5
    d658:	e5940000 	ldr	r0, [r4]
        return NULL;
    return sk_void_value(ad->sk, idx);
}
    d65c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d660:	ea000355 	b	e3bc <OPENSSL_sk_value>
    d664:	e3a00000 	mov	r0, #0
    d668:	e8bd8070 	pop	{r4, r5, r6, pc}
    d66c:	e3a00000 	mov	r0, #0
    d670:	e12fff1e 	bx	lr

0000d674 <CRYPTO_free_ex_data>:
{
    d674:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d678:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    d67c:	e1a0b001 	mov	fp, r1
    d680:	e1a07002 	mov	r7, r2
    if ((ip = get_and_lock(class_index)) == NULL)
    d684:	ebffffbd 	bl	d580 <get_and_lock>
    d688:	e2509000 	subs	r9, r0, #0
    d68c:	0a000042 	beq	d79c <CRYPTO_free_ex_data+0x128>

#endif

typedef struct ex_callback_st EX_CALLBACK;

DEFINE_STACK_OF(EX_CALLBACK)
    d690:	e5990000 	ldr	r0, [r9]
    d694:	eb000344 	bl	e3ac <OPENSSL_sk_num>
    if (mx > 0) {
    d698:	e2508000 	subs	r8, r0, #0
    d69c:	da000034 	ble	d774 <CRYPTO_free_ex_data+0x100>
        if (mx < (int)OSSL_NELEM(stack))
    d6a0:	e3580009 	cmp	r8, #9
            storage = stack;
    d6a4:	d28d3010 	addle	r3, sp, #16
    d6a8:	d58d300c 	strle	r3, [sp, #12]
    d6ac:	d1a06003 	movle	r6, r3
        if (mx < (int)OSSL_NELEM(stack))
    d6b0:	ca000043 	bgt	d7c4 <CRYPTO_free_ex_data+0x150>
    d6b4:	e2465004 	sub	r5, r6, #4
{
    d6b8:	e3a04000 	mov	r4, #0
    d6bc:	e1a01004 	mov	r1, r4
    d6c0:	e5990000 	ldr	r0, [r9]
            for (i = 0; i < mx; i++)
    d6c4:	e2844001 	add	r4, r4, #1
    d6c8:	eb00033b 	bl	e3bc <OPENSSL_sk_value>
    d6cc:	e1540008 	cmp	r4, r8
                storage[i] = sk_EX_CALLBACK_value(ip->meth, i);
    d6d0:	e5a50004 	str	r0, [r5, #4]!
            for (i = 0; i < mx; i++)
    d6d4:	1afffff8 	bne	d6bc <CRYPTO_free_ex_data+0x48>
    CRYPTO_THREAD_unlock(ex_data_lock);
    d6d8:	e303a44c 	movw	sl, #13388	; 0x344c
    for (i = 0; i < mx; i++) {
    d6dc:	e3a04000 	mov	r4, #0
    CRYPTO_THREAD_unlock(ex_data_lock);
    d6e0:	e340a001 	movt	sl, #1
    d6e4:	e59a0000 	ldr	r0, [sl]
    d6e8:	eb00034f 	bl	e42c <CRYPTO_THREAD_unlock>
    d6ec:	ea000015 	b	d748 <CRYPTO_free_ex_data+0xd4>
            f = storage[i];
    d6f0:	e7965104 	ldr	r5, [r6, r4, lsl #2]
        if (f != NULL && f->free_func != NULL) {
    d6f4:	e3550000 	cmp	r5, #0
    d6f8:	0a00000f 	beq	d73c <CRYPTO_free_ex_data+0xc8>
    d6fc:	e595300c 	ldr	r3, [r5, #12]
            ptr = CRYPTO_get_ex_data(ad, i);
    d700:	e1a01004 	mov	r1, r4
    d704:	e1a00007 	mov	r0, r7
        if (f != NULL && f->free_func != NULL) {
    d708:	e3530000 	cmp	r3, #0
    d70c:	0a00000a 	beq	d73c <CRYPTO_free_ex_data+0xc8>
            ptr = CRYPTO_get_ex_data(ad, i);
    d710:	ebffffc5 	bl	d62c <CRYPTO_get_ex_data>
            f->free_func(obj, ptr, ad, i, f->argl, f->argp);
    d714:	e595c004 	ldr	ip, [r5, #4]
    d718:	e1a01000 	mov	r1, r0
    d71c:	e1a03004 	mov	r3, r4
    d720:	e1a02007 	mov	r2, r7
    d724:	e1a0000b 	mov	r0, fp
    d728:	e58dc004 	str	ip, [sp, #4]
    d72c:	e595c000 	ldr	ip, [r5]
    d730:	e58dc000 	str	ip, [sp]
    d734:	e595500c 	ldr	r5, [r5, #12]
    d738:	e12fff35 	blx	r5
    for (i = 0; i < mx; i++) {
    d73c:	e2844001 	add	r4, r4, #1
    d740:	e1540008 	cmp	r4, r8
    d744:	0a00001a 	beq	d7b4 <CRYPTO_free_ex_data+0x140>
        if (storage != NULL)
    d748:	e3560000 	cmp	r6, #0
    d74c:	1affffe7 	bne	d6f0 <CRYPTO_free_ex_data+0x7c>
            CRYPTO_THREAD_write_lock(ex_data_lock);
    d750:	e59a0000 	ldr	r0, [sl]
    d754:	eb00032f 	bl	e418 <CRYPTO_THREAD_write_lock>
    d758:	e1a01004 	mov	r1, r4
    d75c:	e5990000 	ldr	r0, [r9]
    d760:	eb000315 	bl	e3bc <OPENSSL_sk_value>
    d764:	e1a05000 	mov	r5, r0
            CRYPTO_THREAD_unlock(ex_data_lock);
    d768:	e59a0000 	ldr	r0, [sl]
    d76c:	eb00032e 	bl	e42c <CRYPTO_THREAD_unlock>
    d770:	eaffffdf 	b	d6f4 <CRYPTO_free_ex_data+0x80>
    CRYPTO_THREAD_unlock(ex_data_lock);
    d774:	e303344c 	movw	r3, #13388	; 0x344c
    EX_CALLBACK **storage = NULL;
    d778:	e3a06000 	mov	r6, #0
    CRYPTO_THREAD_unlock(ex_data_lock);
    d77c:	e3403001 	movt	r3, #1
    d780:	e5930000 	ldr	r0, [r3]
    d784:	eb000328 	bl	e42c <CRYPTO_THREAD_unlock>
        OPENSSL_free(storage);
    d788:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d78c:	e1a00006 	mov	r0, r6
    d790:	e3401000 	movt	r1, #0
    d794:	e3a02000 	mov	r2, #0
    d798:	eb0001d6 	bl	def8 <CRYPTO_free>
    d79c:	e5970000 	ldr	r0, [r7]
    d7a0:	eb0002fe 	bl	e3a0 <OPENSSL_sk_free>
    ad->sk = NULL;
    d7a4:	e3a03000 	mov	r3, #0
    d7a8:	e5873000 	str	r3, [r7]
}
    d7ac:	e28dd03c 	add	sp, sp, #60	; 0x3c
    d7b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (storage != stack)
    d7b4:	e59d300c 	ldr	r3, [sp, #12]
    d7b8:	e1560003 	cmp	r6, r3
    d7bc:	0afffff6 	beq	d79c <CRYPTO_free_ex_data+0x128>
    d7c0:	eafffff0 	b	d788 <CRYPTO_free_ex_data+0x114>
            storage = OPENSSL_malloc(sizeof(*storage) * mx);
    d7c4:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d7c8:	e3a02000 	mov	r2, #0
    d7cc:	e3401000 	movt	r1, #0
    d7d0:	e1a00108 	lsl	r0, r8, #2
    d7d4:	eb0001d5 	bl	df30 <CRYPTO_malloc>
        if (storage != NULL)
    d7d8:	e2506000 	subs	r6, r0, #0
    d7dc:	e28d3010 	add	r3, sp, #16
    d7e0:	e58d300c 	str	r3, [sp, #12]
    d7e4:	0affffbb 	beq	d6d8 <CRYPTO_free_ex_data+0x64>
    d7e8:	eaffffb1 	b	d6b4 <CRYPTO_free_ex_data+0x40>

0000d7ec <ossl_init_register_atexit_ossl_>:
    OPENSSL_cleanup();
    return 0;
}
#endif

DEFINE_RUN_ONCE_STATIC(ossl_init_register_atexit)
    d7ec:	e3033498 	movw	r3, #13464	; 0x3498
    d7f0:	e3a02001 	mov	r2, #1
    d7f4:	e3403001 	movt	r3, #1
    d7f8:	e5832000 	str	r2, [r3]
    d7fc:	e12fff1e 	bx	lr

0000d800 <ossl_init_load_crypto_nodelete_ossl_>:
    /* Do nothing in this case */
    return 1;
}

static CRYPTO_ONCE load_crypto_nodelete = CRYPTO_ONCE_STATIC_INIT;
DEFINE_RUN_ONCE_STATIC(ossl_init_load_crypto_nodelete)
    d800:	e3033490 	movw	r3, #13456	; 0x3490
    d804:	e3a02001 	mov	r2, #1
    d808:	e3403001 	movt	r3, #1
    d80c:	e5832000 	str	r2, [r3]
    d810:	e12fff1e 	bx	lr

0000d814 <ossl_init_load_crypto_strings_ossl_>:
    return 1;
}

static CRYPTO_ONCE load_crypto_strings = CRYPTO_ONCE_STATIC_INIT;
static int load_crypto_strings_inited = 0;
DEFINE_RUN_ONCE_STATIC(ossl_init_load_crypto_strings)
    d814:	e3033494 	movw	r3, #13460	; 0x3494
    d818:	e3a02001 	mov	r2, #1
    d81c:	e3403001 	movt	r3, #1
    d820:	e5832000 	str	r2, [r3]
    d824:	e12fff1e 	bx	lr

0000d828 <ossl_init_add_all_ciphers_ossl_>:
    /* Do nothing in this case */
    return 1;
}

static CRYPTO_ONCE add_all_ciphers = CRYPTO_ONCE_STATIC_INIT;
DEFINE_RUN_ONCE_STATIC(ossl_init_add_all_ciphers)
    d828:	e303347c 	movw	r3, #13436	; 0x347c
    d82c:	e3a02001 	mov	r2, #1
    d830:	e3403001 	movt	r3, #1
    d834:	e5832000 	str	r2, [r3]
    d838:	e12fff1e 	bx	lr

0000d83c <ossl_init_add_all_digests_ossl_>:
    /* Do nothing */
    return 1;
}

static CRYPTO_ONCE add_all_digests = CRYPTO_ONCE_STATIC_INIT;
DEFINE_RUN_ONCE_STATIC(ossl_init_add_all_digests)
    d83c:	e3033480 	movw	r3, #13440	; 0x3480
    d840:	e3a02001 	mov	r2, #1
    d844:	e3403001 	movt	r3, #1
    d848:	e5832000 	str	r2, [r3]
    d84c:	e12fff1e 	bx	lr

0000d850 <ossl_init_thread_stop>:
    return 1;
}
#endif

static void ossl_init_thread_stop(struct thread_local_inits_st *locals)
{
    d850:	e92d4010 	push	{r4, lr}
    /* Can't do much about this */
    if (locals == NULL)
    d854:	e2504000 	subs	r4, r0, #0
    d858:	08bd8010 	popeq	{r4, pc}
        return;

    if (locals->async) {
    d85c:	e5943000 	ldr	r3, [r4]
    d860:	e3530000 	cmp	r3, #0
    d864:	1a000012 	bne	d8b4 <ossl_init_thread_stop+0x64>
                        "async_delete_thread_state()\n");
#endif
        async_delete_thread_state();
    }

    if (locals->err_state) {
    d868:	e5943004 	ldr	r3, [r4, #4]
    d86c:	e3530000 	cmp	r3, #0
    d870:	1a00000a 	bne	d8a0 <ossl_init_thread_stop+0x50>
                        "err_delete_thread_state()\n");
#endif
        err_delete_thread_state();
    }

    if (locals->rand) {
    d874:	e5943008 	ldr	r3, [r4, #8]
    d878:	e3530000 	cmp	r3, #0
    d87c:	1a000005 	bne	d898 <ossl_init_thread_stop+0x48>
                        "drbg_delete_thread_state()\n");
#endif
        drbg_delete_thread_state();
    }

    OPENSSL_free(locals);
    d880:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    d884:	e1a00004 	mov	r0, r4
    d888:	e3401000 	movt	r1, #0
    d88c:	e3a02000 	mov	r2, #0
}
    d890:	e8bd4010 	pop	{r4, lr}
    OPENSSL_free(locals);
    d894:	ea000197 	b	def8 <CRYPTO_free>
        drbg_delete_thread_state();
    d898:	eb000277 	bl	e27c <drbg_delete_thread_state>
    d89c:	eafffff7 	b	d880 <ossl_init_thread_stop+0x30>
        err_delete_thread_state();
    d8a0:	ebfffc97 	bl	cb04 <err_delete_thread_state>
    if (locals->rand) {
    d8a4:	e5943008 	ldr	r3, [r4, #8]
    d8a8:	e3530000 	cmp	r3, #0
    d8ac:	0afffff3 	beq	d880 <ossl_init_thread_stop+0x30>
    d8b0:	eafffff8 	b	d898 <ossl_init_thread_stop+0x48>
        async_delete_thread_state();
    d8b4:	ebfffad5 	bl	c410 <async_delete_thread_state>
    if (locals->err_state) {
    d8b8:	e5943004 	ldr	r3, [r4, #4]
    d8bc:	e3530000 	cmp	r3, #0
    d8c0:	0affffeb 	beq	d874 <ossl_init_thread_stop+0x24>
    d8c4:	eafffff5 	b	d8a0 <ossl_init_thread_stop+0x50>

0000d8c8 <ossl_init_thread_destructor>:
    ossl_init_thread_stop((struct thread_local_inits_st *)local);
    d8c8:	eaffffe0 	b	d850 <ossl_init_thread_stop>

0000d8cc <ossl_init_async_ossl_>:
DEFINE_RUN_ONCE_STATIC(ossl_init_async)
    d8cc:	e92d4010 	push	{r4, lr}
    if (!async_init())
    d8d0:	ebfffab9 	bl	c3bc <async_init>
    d8d4:	e3500000 	cmp	r0, #0
    async_inited = 1;
    d8d8:	1303345c 	movwne	r3, #13404	; 0x345c
    d8dc:	13a02001 	movne	r2, #1
    d8e0:	13403001 	movtne	r3, #1
    return 1;
    d8e4:	11a00002 	movne	r0, r2
    async_inited = 1;
    d8e8:	15832000 	strne	r2, [r3]
DEFINE_RUN_ONCE_STATIC(ossl_init_async)
    d8ec:	e3033484 	movw	r3, #13444	; 0x3484
    d8f0:	e3403001 	movt	r3, #1
    d8f4:	e5830000 	str	r0, [r3]
    d8f8:	e8bd8010 	pop	{r4, pc}

0000d8fc <ossl_init_config_ossl_>:
    int ret = openssl_config_int(conf_settings);
    d8fc:	e3033468 	movw	r3, #13416	; 0x3468
DEFINE_RUN_ONCE_STATIC(ossl_init_config)
    d900:	e92d4010 	push	{r4, lr}
    int ret = openssl_config_int(conf_settings);
    d904:	e3403001 	movt	r3, #1
    d908:	e5930000 	ldr	r0, [r3]
    d90c:	ebfffc3f 	bl	ca10 <openssl_config_int>
DEFINE_RUN_ONCE_STATIC(ossl_init_config)
    d910:	e303348c 	movw	r3, #13452	; 0x348c
    d914:	e3403001 	movt	r3, #1
    d918:	e5830000 	str	r0, [r3]
    d91c:	e8bd8010 	pop	{r4, pc}

0000d920 <ossl_init_no_config_ossl_>:
DEFINE_RUN_ONCE_STATIC_ALT(ossl_init_no_config, ossl_init_config)
    d920:	e92d4010 	push	{r4, lr}
    openssl_no_config_int();
    d924:	ebfffc45 	bl	ca40 <openssl_no_config_int>
DEFINE_RUN_ONCE_STATIC_ALT(ossl_init_no_config, ossl_init_config)
    d928:	e303348c 	movw	r3, #13452	; 0x348c
    d92c:	e3a02001 	mov	r2, #1
    d930:	e3403001 	movt	r3, #1
    d934:	e5832000 	str	r2, [r3]
    d938:	e8bd8010 	pop	{r4, pc}

0000d93c <ossl_init_base_ossl_>:
DEFINE_RUN_ONCE_STATIC(ossl_init_base)
    d93c:	e92d4030 	push	{r4, r5, lr}
    if (!CRYPTO_THREAD_init_local(&key, ossl_init_thread_destructor))
    d940:	e30d18c8 	movw	r1, #55496	; 0xd8c8
DEFINE_RUN_ONCE_STATIC(ossl_init_base)
    d944:	e24dd00c 	sub	sp, sp, #12
    if (!CRYPTO_THREAD_init_local(&key, ossl_init_thread_destructor))
    d948:	e3401000 	movt	r1, #0
    d94c:	e28d0004 	add	r0, sp, #4
    d950:	eb0002cd 	bl	e48c <CRYPTO_THREAD_init_local>
    d954:	e3500000 	cmp	r0, #0
    d958:	1a000004 	bne	d970 <ossl_init_base_ossl_+0x34>
DEFINE_RUN_ONCE_STATIC(ossl_init_base)
    d95c:	e3033488 	movw	r3, #13448	; 0x3488
    d960:	e3403001 	movt	r3, #1
    d964:	e5830000 	str	r0, [r3]
    d968:	e28dd00c 	add	sp, sp, #12
    d96c:	e8bd8030 	pop	{r4, r5, pc}
    if ((init_lock = CRYPTO_THREAD_lock_new()) == NULL)
    d970:	eb00029e 	bl	e3f0 <CRYPTO_THREAD_lock_new>
    d974:	e3035470 	movw	r5, #13424	; 0x3470
    d978:	e3500000 	cmp	r0, #0
    d97c:	e3405001 	movt	r5, #1
    d980:	e1a04000 	mov	r4, r0
    d984:	e5850000 	str	r0, [r5]
    d988:	0a00000a 	beq	d9b8 <ossl_init_base_ossl_+0x7c>
    OPENSSL_cpuid_setup();
    d98c:	ebfffc30 	bl	ca54 <OPENSSL_cpuid_setup>
    destructor_key.value = key;
    d990:	e59d0004 	ldr	r0, [sp, #4]
    d994:	e3032088 	movw	r2, #12424	; 0x3088
    base_inited = 1;
    d998:	e3033464 	movw	r3, #13412	; 0x3464
    d99c:	e3a01001 	mov	r1, #1
    destructor_key.value = key;
    d9a0:	e3402001 	movt	r2, #1
    base_inited = 1;
    d9a4:	e3403001 	movt	r3, #1
    destructor_key.value = key;
    d9a8:	e5820000 	str	r0, [r2]
    return 1;
    d9ac:	e1a00001 	mov	r0, r1
    base_inited = 1;
    d9b0:	e5831000 	str	r1, [r3]
    d9b4:	eaffffe8 	b	d95c <ossl_init_base_ossl_+0x20>
    CRYPTO_THREAD_lock_free(init_lock);
    d9b8:	eb0002a0 	bl	e440 <CRYPTO_THREAD_lock_free>
    CRYPTO_THREAD_cleanup_local(&key);
    d9bc:	e28d0004 	add	r0, sp, #4
    init_lock = NULL;
    d9c0:	e5854000 	str	r4, [r5]
    CRYPTO_THREAD_cleanup_local(&key);
    d9c4:	eb0002d0 	bl	e50c <CRYPTO_THREAD_cleanup_local>
    return 0;
    d9c8:	e1a00004 	mov	r0, r4
    d9cc:	eaffffe2 	b	d95c <ossl_init_base_ossl_+0x20>

0000d9d0 <ossl_init_no_add_all_digests_ossl_>:
    d9d0:	e3033480 	movw	r3, #13440	; 0x3480
    d9d4:	e3a02001 	mov	r2, #1
    d9d8:	e3403001 	movt	r3, #1
    d9dc:	e5832000 	str	r2, [r3]
    d9e0:	e12fff1e 	bx	lr

0000d9e4 <ossl_init_no_register_atexit_ossl_>:
    d9e4:	e3033498 	movw	r3, #13464	; 0x3498
    d9e8:	e3a02001 	mov	r2, #1
    d9ec:	e3403001 	movt	r3, #1
    d9f0:	e5832000 	str	r2, [r3]
    d9f4:	e12fff1e 	bx	lr

0000d9f8 <ossl_init_no_load_crypto_strings_ossl_>:
    d9f8:	e3033494 	movw	r3, #13460	; 0x3494
    d9fc:	e3a02001 	mov	r2, #1
    da00:	e3403001 	movt	r3, #1
    da04:	e5832000 	str	r2, [r3]
    da08:	e12fff1e 	bx	lr

0000da0c <ossl_init_no_add_all_ciphers_ossl_>:
    da0c:	e303347c 	movw	r3, #13436	; 0x347c
    da10:	e3a02001 	mov	r2, #1
    da14:	e3403001 	movt	r3, #1
    da18:	e5832000 	str	r2, [r3]
    da1c:	e12fff1e 	bx	lr

0000da20 <OPENSSL_init_crypto>:
 * called prior to any threads making calls to any OpenSSL functions,
 * i.e. passing a non-null settings value is assumed to be single-threaded.
 */
int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
{
    if (stopped) {
    da20:	e30334a0 	movw	r3, #13472	; 0x34a0
{
    da24:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    if (stopped) {
    da28:	e3403001 	movt	r3, #1
{
    da2c:	e24dd00c 	sub	sp, sp, #12
    da30:	e1a05000 	mov	r5, r0
    if (stopped) {
    da34:	e5934000 	ldr	r4, [r3]
    da38:	e3540000 	cmp	r4, #0
    da3c:	0a000012 	beq	da8c <OPENSSL_init_crypto+0x6c>
        if (!(opts & OPENSSL_INIT_BASE_ONLY))
    da40:	e3a01000 	mov	r1, #0
    da44:	e2002701 	and	r2, r0, #262144	; 0x40000
    da48:	e1a03001 	mov	r3, r1
    da4c:	e1923003 	orrs	r3, r2, r3
    da50:	0a000003 	beq	da64 <OPENSSL_init_crypto+0x44>
            CRYPTOerr(CRYPTO_F_OPENSSL_INIT_CRYPTO, ERR_R_INIT_FAIL);
        return 0;
    da54:	e3a04000 	mov	r4, #0
            && !RUN_ONCE(&zlib, ossl_init_zlib))
        return 0;
#endif

    return 1;
}
    da58:	e1a00004 	mov	r0, r4
    da5c:	e28dd00c 	add	sp, sp, #12
    da60:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
            CRYPTOerr(CRYPTO_F_OPENSSL_INIT_CRYPTO, ERR_R_INIT_FAIL);
    da64:	e1a03001 	mov	r3, r1
    da68:	e58d1000 	str	r1, [sp]
        return 0;
    da6c:	e1a04003 	mov	r4, r3
            CRYPTOerr(CRYPTO_F_OPENSSL_INIT_CRYPTO, ERR_R_INIT_FAIL);
    da70:	e3a02046 	mov	r2, #70	; 0x46
    da74:	e3a01074 	mov	r1, #116	; 0x74
    da78:	e3a0000f 	mov	r0, #15
    da7c:	ebfffc76 	bl	cc5c <ERR_put_error>
}
    da80:	e1a00004 	mov	r0, r4
    da84:	e28dd00c 	add	sp, sp, #12
    da88:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    if (!RUN_ONCE(&base, ossl_init_base))
    da8c:	e30d193c 	movw	r1, #55612	; 0xd93c
    da90:	e3030460 	movw	r0, #13408	; 0x3460
    da94:	e3401000 	movt	r1, #0
    da98:	e3400001 	movt	r0, #1
    da9c:	e1a06002 	mov	r6, r2
    daa0:	eb00026d 	bl	e45c <CRYPTO_THREAD_run_once>
    daa4:	e3500000 	cmp	r0, #0
    daa8:	0affffe9 	beq	da54 <OPENSSL_init_crypto+0x34>
    daac:	e3033488 	movw	r3, #13448	; 0x3488
    dab0:	e3403001 	movt	r3, #1
    dab4:	e5933000 	ldr	r3, [r3]
    dab8:	e3530000 	cmp	r3, #0
    dabc:	0affffe4 	beq	da54 <OPENSSL_init_crypto+0x34>
    if (opts & OPENSSL_INIT_BASE_ONLY)
    dac0:	e2052701 	and	r2, r5, #262144	; 0x40000
    dac4:	e1a03004 	mov	r3, r4
    dac8:	e1923003 	orrs	r3, r2, r3
    dacc:	1a000044 	bne	dbe4 <OPENSSL_init_crypto+0x1c4>
    if ((opts & OPENSSL_INIT_NO_ATEXIT) != 0) {
    dad0:	e2052702 	and	r2, r5, #524288	; 0x80000
    dad4:	e1a03004 	mov	r3, r4
    dad8:	e1923003 	orrs	r3, r2, r3
    dadc:	1a000042 	bne	dbec <OPENSSL_init_crypto+0x1cc>
    } else if (!RUN_ONCE(&register_atexit, ossl_init_register_atexit)) {
    dae0:	e30d17ec 	movw	r1, #55276	; 0xd7ec
    dae4:	e303049c 	movw	r0, #13468	; 0x349c
    dae8:	e3401000 	movt	r1, #0
    daec:	e3400001 	movt	r0, #1
    daf0:	eb000259 	bl	e45c <CRYPTO_THREAD_run_once>
    daf4:	e3500000 	cmp	r0, #0
    daf8:	0affffd5 	beq	da54 <OPENSSL_init_crypto+0x34>
    dafc:	e3033498 	movw	r3, #13464	; 0x3498
    db00:	e3403001 	movt	r3, #1
    db04:	e5933000 	ldr	r3, [r3]
    db08:	e3530000 	cmp	r3, #0
    db0c:	0affffd0 	beq	da54 <OPENSSL_init_crypto+0x34>
    if (!RUN_ONCE(&load_crypto_nodelete, ossl_init_load_crypto_nodelete))
    db10:	e30d1800 	movw	r1, #55296	; 0xd800
    db14:	e3030474 	movw	r0, #13428	; 0x3474
    db18:	e3401000 	movt	r1, #0
    db1c:	e3400001 	movt	r0, #1
    db20:	eb00024d 	bl	e45c <CRYPTO_THREAD_run_once>
    db24:	e3500000 	cmp	r0, #0
    db28:	0affffc9 	beq	da54 <OPENSSL_init_crypto+0x34>
    db2c:	e3033490 	movw	r3, #13456	; 0x3490
    db30:	e3403001 	movt	r3, #1
    db34:	e5933000 	ldr	r3, [r3]
    db38:	e3530000 	cmp	r3, #0
    db3c:	0affffc4 	beq	da54 <OPENSSL_init_crypto+0x34>
    if ((opts & OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS)
    db40:	e2052001 	and	r2, r5, #1
    db44:	e3a03000 	mov	r3, #0
    db48:	e1923003 	orrs	r3, r2, r3
    db4c:	1a00002e 	bne	dc0c <OPENSSL_init_crypto+0x1ec>
    if ((opts & OPENSSL_INIT_LOAD_CRYPTO_STRINGS)
    db50:	e2052002 	and	r2, r5, #2
    db54:	e3a03000 	mov	r3, #0
    db58:	e1923003 	orrs	r3, r2, r3
    db5c:	1a000037 	bne	dc40 <OPENSSL_init_crypto+0x220>
    if ((opts & OPENSSL_INIT_NO_ADD_ALL_CIPHERS)
    db60:	e2052010 	and	r2, r5, #16
    db64:	e3a03000 	mov	r3, #0
    db68:	e1923003 	orrs	r3, r2, r3
    db6c:	1a000040 	bne	dc74 <OPENSSL_init_crypto+0x254>
    if ((opts & OPENSSL_INIT_ADD_ALL_CIPHERS)
    db70:	e2052004 	and	r2, r5, #4
    db74:	e3a03000 	mov	r3, #0
    db78:	e1923003 	orrs	r3, r2, r3
    db7c:	1a000049 	bne	dca8 <OPENSSL_init_crypto+0x288>
    if ((opts & OPENSSL_INIT_NO_ADD_ALL_DIGESTS)
    db80:	e2052020 	and	r2, r5, #32
    db84:	e3a03000 	mov	r3, #0
    db88:	e1923003 	orrs	r3, r2, r3
    db8c:	1a000052 	bne	dcdc <OPENSSL_init_crypto+0x2bc>
    if ((opts & OPENSSL_INIT_ADD_ALL_DIGESTS)
    db90:	e2052008 	and	r2, r5, #8
    db94:	e3a03000 	mov	r3, #0
    db98:	e1923003 	orrs	r3, r2, r3
    db9c:	1a00005b 	bne	dd10 <OPENSSL_init_crypto+0x2f0>
    if ((opts & OPENSSL_INIT_ATFORK)
    dba0:	e2052802 	and	r2, r5, #131072	; 0x20000
    dba4:	e3a03000 	mov	r3, #0
    dba8:	e1923003 	orrs	r3, r2, r3
    dbac:	1a000064 	bne	dd44 <OPENSSL_init_crypto+0x324>
    if ((opts & OPENSSL_INIT_NO_LOAD_CONFIG)
    dbb0:	e2052080 	and	r2, r5, #128	; 0x80
    dbb4:	e3a03000 	mov	r3, #0
    dbb8:	e1923003 	orrs	r3, r2, r3
    dbbc:	1a000064 	bne	dd54 <OPENSSL_init_crypto+0x334>
    if (opts & OPENSSL_INIT_LOAD_CONFIG) {
    dbc0:	e3a09000 	mov	r9, #0
    dbc4:	e2052040 	and	r2, r5, #64	; 0x40
    dbc8:	e1a03009 	mov	r3, r9
    dbcc:	e1923003 	orrs	r3, r2, r3
    dbd0:	1a000079 	bne	ddbc <OPENSSL_init_crypto+0x39c>
    if ((opts & OPENSSL_INIT_ASYNC)
    dbd4:	e2052c01 	and	r2, r5, #256	; 0x100
    dbd8:	e3a03000 	mov	r3, #0
    dbdc:	e1923003 	orrs	r3, r2, r3
    dbe0:	1a000068 	bne	dd88 <OPENSSL_init_crypto+0x368>
        return 1;
    dbe4:	e3a04001 	mov	r4, #1
    dbe8:	eaffff9a 	b	da58 <OPENSSL_init_crypto+0x38>
        if (!RUN_ONCE_ALT(&register_atexit, ossl_init_no_register_atexit,
    dbec:	e30d19e4 	movw	r1, #55780	; 0xd9e4
    dbf0:	e303049c 	movw	r0, #13468	; 0x349c
    dbf4:	e3401000 	movt	r1, #0
    dbf8:	e3400001 	movt	r0, #1
    dbfc:	eb000216 	bl	e45c <CRYPTO_THREAD_run_once>
    dc00:	e3500000 	cmp	r0, #0
    dc04:	1affffbc 	bne	dafc <OPENSSL_init_crypto+0xdc>
    dc08:	eaffff91 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE_ALT(&load_crypto_strings,
    dc0c:	e30d19f8 	movw	r1, #55800	; 0xd9f8
    dc10:	e3030478 	movw	r0, #13432	; 0x3478
    dc14:	e3401000 	movt	r1, #0
    dc18:	e3400001 	movt	r0, #1
    dc1c:	eb00020e 	bl	e45c <CRYPTO_THREAD_run_once>
    dc20:	e3500000 	cmp	r0, #0
    dc24:	0affff8a 	beq	da54 <OPENSSL_init_crypto+0x34>
    dc28:	e3033494 	movw	r3, #13460	; 0x3494
    dc2c:	e3403001 	movt	r3, #1
    dc30:	e5933000 	ldr	r3, [r3]
    dc34:	e3530000 	cmp	r3, #0
    dc38:	1affffc4 	bne	db50 <OPENSSL_init_crypto+0x130>
    dc3c:	eaffff84 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE(&load_crypto_strings, ossl_init_load_crypto_strings))
    dc40:	e30d1814 	movw	r1, #55316	; 0xd814
    dc44:	e3030478 	movw	r0, #13432	; 0x3478
    dc48:	e3401000 	movt	r1, #0
    dc4c:	e3400001 	movt	r0, #1
    dc50:	eb000201 	bl	e45c <CRYPTO_THREAD_run_once>
    dc54:	e3500000 	cmp	r0, #0
    dc58:	0affff7d 	beq	da54 <OPENSSL_init_crypto+0x34>
    dc5c:	e3033494 	movw	r3, #13460	; 0x3494
    dc60:	e3403001 	movt	r3, #1
    dc64:	e5933000 	ldr	r3, [r3]
    dc68:	e3530000 	cmp	r3, #0
    dc6c:	1affffbb 	bne	db60 <OPENSSL_init_crypto+0x140>
    dc70:	eaffff77 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE_ALT(&add_all_ciphers, ossl_init_no_add_all_ciphers,
    dc74:	e30d1a0c 	movw	r1, #55820	; 0xda0c
    dc78:	e3030450 	movw	r0, #13392	; 0x3450
    dc7c:	e3401000 	movt	r1, #0
    dc80:	e3400001 	movt	r0, #1
    dc84:	eb0001f4 	bl	e45c <CRYPTO_THREAD_run_once>
    dc88:	e3500000 	cmp	r0, #0
    dc8c:	0affff70 	beq	da54 <OPENSSL_init_crypto+0x34>
    dc90:	e303347c 	movw	r3, #13436	; 0x347c
    dc94:	e3403001 	movt	r3, #1
    dc98:	e5933000 	ldr	r3, [r3]
    dc9c:	e3530000 	cmp	r3, #0
    dca0:	1affffb2 	bne	db70 <OPENSSL_init_crypto+0x150>
    dca4:	eaffff6a 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE(&add_all_ciphers, ossl_init_add_all_ciphers))
    dca8:	e30d1828 	movw	r1, #55336	; 0xd828
    dcac:	e3030450 	movw	r0, #13392	; 0x3450
    dcb0:	e3401000 	movt	r1, #0
    dcb4:	e3400001 	movt	r0, #1
    dcb8:	eb0001e7 	bl	e45c <CRYPTO_THREAD_run_once>
    dcbc:	e3500000 	cmp	r0, #0
    dcc0:	0affff63 	beq	da54 <OPENSSL_init_crypto+0x34>
    dcc4:	e303347c 	movw	r3, #13436	; 0x347c
    dcc8:	e3403001 	movt	r3, #1
    dccc:	e5933000 	ldr	r3, [r3]
    dcd0:	e3530000 	cmp	r3, #0
    dcd4:	1affffa9 	bne	db80 <OPENSSL_init_crypto+0x160>
    dcd8:	eaffff5d 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE_ALT(&add_all_digests, ossl_init_no_add_all_digests,
    dcdc:	e30d19d0 	movw	r1, #55760	; 0xd9d0
    dce0:	e3030454 	movw	r0, #13396	; 0x3454
    dce4:	e3401000 	movt	r1, #0
    dce8:	e3400001 	movt	r0, #1
    dcec:	eb0001da 	bl	e45c <CRYPTO_THREAD_run_once>
    dcf0:	e3500000 	cmp	r0, #0
    dcf4:	0affff56 	beq	da54 <OPENSSL_init_crypto+0x34>
    dcf8:	e3033480 	movw	r3, #13440	; 0x3480
    dcfc:	e3403001 	movt	r3, #1
    dd00:	e5933000 	ldr	r3, [r3]
    dd04:	e3530000 	cmp	r3, #0
    dd08:	1affffa0 	bne	db90 <OPENSSL_init_crypto+0x170>
    dd0c:	eaffff50 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE(&add_all_digests, ossl_init_add_all_digests))
    dd10:	e30d183c 	movw	r1, #55356	; 0xd83c
    dd14:	e3030454 	movw	r0, #13396	; 0x3454
    dd18:	e3401000 	movt	r1, #0
    dd1c:	e3400001 	movt	r0, #1
    dd20:	eb0001cd 	bl	e45c <CRYPTO_THREAD_run_once>
    dd24:	e3500000 	cmp	r0, #0
    dd28:	0affff49 	beq	da54 <OPENSSL_init_crypto+0x34>
    dd2c:	e3033480 	movw	r3, #13440	; 0x3480
    dd30:	e3403001 	movt	r3, #1
    dd34:	e5933000 	ldr	r3, [r3]
    dd38:	e3530000 	cmp	r3, #0
    dd3c:	1affff97 	bne	dba0 <OPENSSL_init_crypto+0x180>
    dd40:	eaffff43 	b	da54 <OPENSSL_init_crypto+0x34>
            && !openssl_init_fork_handlers())
    dd44:	eb0001f4 	bl	e51c <openssl_init_fork_handlers>
    dd48:	e3500000 	cmp	r0, #0
    dd4c:	1affff97 	bne	dbb0 <OPENSSL_init_crypto+0x190>
    dd50:	eaffff3f 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE_ALT(&config, ossl_init_no_config, ossl_init_config))
    dd54:	e30d1920 	movw	r1, #55584	; 0xd920
    dd58:	e303046c 	movw	r0, #13420	; 0x346c
    dd5c:	e3401000 	movt	r1, #0
    dd60:	e3400001 	movt	r0, #1
    dd64:	eb0001bc 	bl	e45c <CRYPTO_THREAD_run_once>
    dd68:	e3500000 	cmp	r0, #0
    dd6c:	0affff38 	beq	da54 <OPENSSL_init_crypto+0x34>
    dd70:	e303348c 	movw	r3, #13452	; 0x348c
    dd74:	e3403001 	movt	r3, #1
    dd78:	e5933000 	ldr	r3, [r3]
    dd7c:	e3530000 	cmp	r3, #0
    dd80:	1affff8e 	bne	dbc0 <OPENSSL_init_crypto+0x1a0>
    dd84:	eaffff32 	b	da54 <OPENSSL_init_crypto+0x34>
            && !RUN_ONCE(&async, ossl_init_async))
    dd88:	e30d18cc 	movw	r1, #55500	; 0xd8cc
    dd8c:	e3030458 	movw	r0, #13400	; 0x3458
    dd90:	e3401000 	movt	r1, #0
    dd94:	e3400001 	movt	r0, #1
    dd98:	eb0001af 	bl	e45c <CRYPTO_THREAD_run_once>
    dd9c:	e3500000 	cmp	r0, #0
    dda0:	0affff2b 	beq	da54 <OPENSSL_init_crypto+0x34>
    dda4:	e3033484 	movw	r3, #13444	; 0x3484
    dda8:	e3403001 	movt	r3, #1
    ddac:	e5934000 	ldr	r4, [r3]
    ddb0:	e2944000 	adds	r4, r4, #0
    ddb4:	13a04001 	movne	r4, #1
    ddb8:	eaffff26 	b	da58 <OPENSSL_init_crypto+0x38>
        CRYPTO_THREAD_write_lock(init_lock);
    ddbc:	e3038470 	movw	r8, #13424	; 0x3470
        conf_settings = settings;
    ddc0:	e3037468 	movw	r7, #13416	; 0x3468
        CRYPTO_THREAD_write_lock(init_lock);
    ddc4:	e3408001 	movt	r8, #1
        conf_settings = settings;
    ddc8:	e3407001 	movt	r7, #1
        CRYPTO_THREAD_write_lock(init_lock);
    ddcc:	e5980000 	ldr	r0, [r8]
    ddd0:	eb000190 	bl	e418 <CRYPTO_THREAD_write_lock>
        ret = RUN_ONCE(&config, ossl_init_config);
    ddd4:	e30d18fc 	movw	r1, #55548	; 0xd8fc
    ddd8:	e303046c 	movw	r0, #13420	; 0x346c
    dddc:	e3401000 	movt	r1, #0
    dde0:	e3400001 	movt	r0, #1
        conf_settings = settings;
    dde4:	e5876000 	str	r6, [r7]
        ret = RUN_ONCE(&config, ossl_init_config);
    dde8:	eb00019b 	bl	e45c <CRYPTO_THREAD_run_once>
    ddec:	e2504000 	subs	r4, r0, #0
    ddf0:	0a000008 	beq	de18 <OPENSSL_init_crypto+0x3f8>
    ddf4:	e303348c 	movw	r3, #13452	; 0x348c
        CRYPTO_THREAD_unlock(init_lock);
    ddf8:	e5980000 	ldr	r0, [r8]
        ret = RUN_ONCE(&config, ossl_init_config);
    ddfc:	e3403001 	movt	r3, #1
        conf_settings = NULL;
    de00:	e5879000 	str	r9, [r7]
        ret = RUN_ONCE(&config, ossl_init_config);
    de04:	e5934000 	ldr	r4, [r3]
        CRYPTO_THREAD_unlock(init_lock);
    de08:	eb000187 	bl	e42c <CRYPTO_THREAD_unlock>
        if (ret <= 0)
    de0c:	e3540000 	cmp	r4, #0
    de10:	caffff6f 	bgt	dbd4 <OPENSSL_init_crypto+0x1b4>
    de14:	eaffff0e 	b	da54 <OPENSSL_init_crypto+0x34>
        CRYPTO_THREAD_unlock(init_lock);
    de18:	e5980000 	ldr	r0, [r8]
        conf_settings = NULL;
    de1c:	e5874000 	str	r4, [r7]
        CRYPTO_THREAD_unlock(init_lock);
    de20:	eb000181 	bl	e42c <CRYPTO_THREAD_unlock>
    de24:	eaffff0b 	b	da58 <OPENSSL_init_crypto+0x38>

0000de28 <ossl_init_thread_start>:
{
    de28:	e92d4070 	push	{r4, r5, r6, lr}
    if (!OPENSSL_init_crypto(0, NULL))
    de2c:	e3a02000 	mov	r2, #0
{
    de30:	e1a05000 	mov	r5, r0
    if (!OPENSSL_init_crypto(0, NULL))
    de34:	e3a01000 	mov	r1, #0
    de38:	e3a00000 	mov	r0, #0
    de3c:	ebfffef7 	bl	da20 <OPENSSL_init_crypto>
    de40:	e3500000 	cmp	r0, #0
    de44:	1a000002 	bne	de54 <ossl_init_thread_start+0x2c>
        return 0;
    de48:	e3a04000 	mov	r4, #0
}
    de4c:	e1a00004 	mov	r0, r4
    de50:	e8bd8070 	pop	{r4, r5, r6, pc}
    struct thread_local_inits_st *local =
    de54:	e3030088 	movw	r0, #12424	; 0x3088
    de58:	e3400001 	movt	r0, #1
    de5c:	eb00019b 	bl	e4d0 <CRYPTO_THREAD_get_local>
        if (local == NULL
    de60:	e2506000 	subs	r6, r0, #0
    de64:	0a000010 	beq	deac <ossl_init_thread_start+0x84>
    if (opts & OPENSSL_INIT_THREAD_ASYNC) {
    de68:	e3a03001 	mov	r3, #1
    de6c:	e3a01000 	mov	r1, #0
    de70:	e0050003 	and	r0, r5, r3
        locals->rand = 1;
    de74:	e3a04001 	mov	r4, #1
    if (opts & OPENSSL_INIT_THREAD_ASYNC) {
    de78:	e1902001 	orrs	r2, r0, r1
    if (opts & OPENSSL_INIT_THREAD_ERR_STATE) {
    de7c:	e2050002 	and	r0, r5, #2
    de80:	e3a01000 	mov	r1, #0
        locals->async = 1;
    de84:	15863000 	strne	r3, [r6]
    if (opts & OPENSSL_INIT_THREAD_ERR_STATE) {
    de88:	e1903001 	orrs	r3, r0, r1
    if (opts & OPENSSL_INIT_THREAD_RAND) {
    de8c:	e2050004 	and	r0, r5, #4
        locals->err_state = 1;
    de90:	13a03001 	movne	r3, #1
    if (opts & OPENSSL_INIT_THREAD_RAND) {
    de94:	e3a01000 	mov	r1, #0
        locals->err_state = 1;
    de98:	15863004 	strne	r3, [r6, #4]
    if (opts & OPENSSL_INIT_THREAD_RAND) {
    de9c:	e1903001 	orrs	r3, r0, r1
        locals->rand = 1;
    dea0:	15864008 	strne	r4, [r6, #8]
}
    dea4:	e1a00004 	mov	r0, r4
    dea8:	e8bd8070 	pop	{r4, r5, r6, pc}
            && (local = OPENSSL_zalloc(sizeof(*local))) != NULL
    deac:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    deb0:	e1a02006 	mov	r2, r6
    deb4:	e3401000 	movt	r1, #0
    deb8:	e3a0000c 	mov	r0, #12
    debc:	eb000033 	bl	df90 <CRYPTO_zalloc>
    dec0:	e2506000 	subs	r6, r0, #0
    dec4:	0affffdf 	beq	de48 <ossl_init_thread_start+0x20>
            && !CRYPTO_THREAD_set_local(&destructor_key.value, local)) {
    dec8:	e3030088 	movw	r0, #12424	; 0x3088
    decc:	e1a01006 	mov	r1, r6
    ded0:	e3400001 	movt	r0, #1
    ded4:	eb000184 	bl	e4ec <CRYPTO_THREAD_set_local>
    ded8:	e2504000 	subs	r4, r0, #0
    dedc:	1affffe1 	bne	de68 <ossl_init_thread_start+0x40>
            OPENSSL_free(local);
    dee0:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    dee4:	e1a00006 	mov	r0, r6
    dee8:	e3401000 	movt	r1, #0
    deec:	e1a02004 	mov	r2, r4
    def0:	eb000000 	bl	def8 <CRYPTO_free>
    def4:	eaffffd4 	b	de4c <ossl_init_thread_start+0x24>

0000def8 <CRYPTO_free>:
}

void CRYPTO_free(void *str, const char *file, int line)
{
    INCREMENT(free_count);
    if (free_impl != NULL && free_impl != &CRYPTO_free) {
    def8:	e303c090 	movw	ip, #12432	; 0x3090
{
    defc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (free_impl != NULL && free_impl != &CRYPTO_free) {
    df00:	e340c001 	movt	ip, #1
    df04:	e30d3ef8 	movw	r3, #57080	; 0xdef8
    df08:	e3403000 	movt	r3, #0
    df0c:	e59ce000 	ldr	lr, [ip]
    df10:	e35e0000 	cmp	lr, #0
    df14:	115e0003 	cmpne	lr, r3
    df18:	0a000002 	beq	df28 <CRYPTO_free+0x30>
        free_impl(str, file, line);
    df1c:	e1a0300e 	mov	r3, lr
        free(str);
    }
#else
    free(str);
#endif
}
    df20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
        free_impl(str, file, line);
    df24:	e12fff13 	bx	r3
}
    df28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    free(str);
    df2c:	eafff257 	b	a890 <free>

0000df30 <CRYPTO_malloc>:
    if (malloc_impl != NULL && malloc_impl != CRYPTO_malloc)
    df30:	e303c094 	movw	ip, #12436	; 0x3094
{
    df34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (malloc_impl != NULL && malloc_impl != CRYPTO_malloc)
    df38:	e340c001 	movt	ip, #1
    df3c:	e30d3f30 	movw	r3, #57136	; 0xdf30
    df40:	e3403000 	movt	r3, #0
    df44:	e59ce000 	ldr	lr, [ip]
    df48:	e05e3003 	subs	r3, lr, r3
    df4c:	13a03001 	movne	r3, #1
    df50:	e35e0000 	cmp	lr, #0
    df54:	03a03000 	moveq	r3, #0
    df58:	e3530000 	cmp	r3, #0
    df5c:	0a000002 	beq	df6c <CRYPTO_malloc+0x3c>
        return malloc_impl(num, file, line);
    df60:	e1a0300e 	mov	r3, lr
}
    df64:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
        return malloc_impl(num, file, line);
    df68:	e12fff13 	bx	r3
    if (num == 0)
    df6c:	e3500000 	cmp	r0, #0
    df70:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    if (allow_customize) {
    df74:	e303208c 	movw	r2, #12428	; 0x308c
}
    df78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    if (allow_customize) {
    df7c:	e3402001 	movt	r2, #1
    df80:	e5921000 	ldr	r1, [r2]
    df84:	e3510000 	cmp	r1, #0
        allow_customize = 0;
    df88:	15823000 	strne	r3, [r2]
    ret = malloc(num);
    df8c:	eaffec69 	b	9138 <malloc>

0000df90 <CRYPTO_zalloc>:
{
    df90:	e92d4070 	push	{r4, r5, r6, lr}
    df94:	e1a05000 	mov	r5, r0
    void *ret = CRYPTO_malloc(num, file, line);
    df98:	ebffffe4 	bl	df30 <CRYPTO_malloc>
    if (ret != NULL)
    df9c:	e2504000 	subs	r4, r0, #0
    dfa0:	0a000002 	beq	dfb0 <CRYPTO_zalloc+0x20>
        memset(ret, 0, num);
    dfa4:	e1a02005 	mov	r2, r5
    dfa8:	e3a01000 	mov	r1, #0
    dfac:	eb00066d 	bl	f968 <memset>
}
    dfb0:	e1a00004 	mov	r0, r4
    dfb4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dfb8 <CRYPTO_clear_free>:

void CRYPTO_clear_free(void *str, size_t num, const char *file, int line)
{
    if (str == NULL)
    dfb8:	e250c000 	subs	ip, r0, #0
    dfbc:	012fff1e 	bxeq	lr
        return;
    if (num)
    dfc0:	e3510000 	cmp	r1, #0
{
    dfc4:	e92d4070 	push	{r4, r5, r6, lr}
    dfc8:	e1a06003 	mov	r6, r3
    dfcc:	e1a05002 	mov	r5, r2
    dfd0:	e1a0400c 	mov	r4, ip
    if (num)
    dfd4:	1a000004 	bne	dfec <CRYPTO_clear_free+0x34>
        OPENSSL_cleanse(str, num);
    CRYPTO_free(str, file, line);
    dfd8:	e1a02006 	mov	r2, r6
    dfdc:	e1a01005 	mov	r1, r5
    dfe0:	e1a00004 	mov	r0, r4
}
    dfe4:	e8bd4070 	pop	{r4, r5, r6, lr}
    CRYPTO_free(str, file, line);
    dfe8:	eaffffc2 	b	def8 <CRYPTO_free>
        OPENSSL_cleanse(str, num);
    dfec:	eb000000 	bl	dff4 <OPENSSL_cleanse>
    dff0:	eafffff8 	b	dfd8 <CRYPTO_clear_free+0x20>

0000dff4 <OPENSSL_cleanse>:

static volatile memset_t memset_func = memset;

void OPENSSL_cleanse(void *ptr, size_t len)
{
    memset_func(ptr, 0, len);
    dff4:	e3033098 	movw	r3, #12440	; 0x3098
    dff8:	e1a02001 	mov	r2, r1
    dffc:	e3403001 	movt	r3, #1
    e000:	e3a01000 	mov	r1, #0
    e004:	e5933000 	ldr	r3, [r3]
    e008:	e12fff13 	bx	r3

0000e00c <CRYPTO_secure_clear_free>:
    CLEAR(ptr, actual_size);
    secure_mem_used -= actual_size;
    sh_free(ptr);
    CRYPTO_THREAD_unlock(sec_malloc_lock);
#else
    if (ptr == NULL)
    e00c:	e250c000 	subs	ip, r0, #0
    e010:	012fff1e 	bxeq	lr
{
    e014:	e92d4070 	push	{r4, r5, r6, lr}
    e018:	e1a05002 	mov	r5, r2
    e01c:	e1a06003 	mov	r6, r3
    e020:	e1a0400c 	mov	r4, ip
        return;
    OPENSSL_cleanse(ptr, num);
    e024:	ebfffff2 	bl	dff4 <OPENSSL_cleanse>
    CRYPTO_free(ptr, file, line);
    e028:	e1a02006 	mov	r2, r6
    e02c:	e1a01005 	mov	r1, r5
    e030:	e1a00004 	mov	r0, r4
#endif /* OPENSSL_SECURE_MEMORY */
}
    e034:	e8bd4070 	pop	{r4, r5, r6, lr}
    CRYPTO_free(ptr, file, line);
    e038:	eaffffae 	b	def8 <CRYPTO_free>

0000e03c <CRYPTO_cbc128_encrypt>:
                           unsigned char ivec[16], block128_f block)
{
    size_t n;
    const unsigned char *iv = ivec;

    if (len == 0)
    e03c:	e3520000 	cmp	r2, #0
{
    e040:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e044:	e24dd00c 	sub	sp, sp, #12
    e048:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
    e04c:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
    if (len == 0)
    e050:	0a000031 	beq	e11c <CRYPTO_cbc128_encrypt+0xe0>
    e054:	e1a06003 	mov	r6, r3
    e058:	e2409001 	sub	r9, r0, #1
    const unsigned char *iv = ivec;
    e05c:	e1a0c008 	mov	ip, r8
    if (len == 0)
    e060:	e1a04002 	mov	r4, r2
    e064:	e1a05001 	mov	r5, r1
    e068:	e58d1004 	str	r1, [sp, #4]
    e06c:	e58d2000 	str	r2, [sp]
    e070:	e24ca001 	sub	sl, ip, #1
    e074:	e245e001 	sub	lr, r5, #1
    e078:	e1a00009 	mov	r0, r9
            out += 16;
        }
    }
#endif
    while (len) {
        for (n = 0; n < 16 && n < len; ++n)
    e07c:	e3a01000 	mov	r1, #0
    e080:	ea000000 	b	e088 <CRYPTO_cbc128_encrypt+0x4c>
    e084:	e1a01003 	mov	r1, r3
            out[n] = in[n] ^ iv[n];
    e088:	e5f02001 	ldrb	r2, [r0, #1]!
        for (n = 0; n < 16 && n < len; ++n)
    e08c:	e2813001 	add	r3, r1, #1
            out[n] = in[n] ^ iv[n];
    e090:	e5fab001 	ldrb	fp, [sl, #1]!
        for (n = 0; n < 16 && n < len; ++n)
    e094:	e353000f 	cmp	r3, #15
    e098:	91530004 	cmpls	r3, r4
            out[n] = in[n] ^ iv[n];
    e09c:	e022200b 	eor	r2, r2, fp
    e0a0:	e5ee2001 	strb	r2, [lr, #1]!
        for (n = 0; n < 16 && n < len; ++n)
    e0a4:	3afffff6 	bcc	e084 <CRYPTO_cbc128_encrypt+0x48>
        for (; n < 16; ++n)
    e0a8:	e353000f 	cmp	r3, #15
    e0ac:	8a000006 	bhi	e0cc <CRYPTO_cbc128_encrypt+0x90>
    e0b0:	e08cc001 	add	ip, ip, r1
    e0b4:	e0851001 	add	r1, r5, r1
    e0b8:	e2833001 	add	r3, r3, #1
            out[n] = iv[n];
    e0bc:	e5fc2001 	ldrb	r2, [ip, #1]!
        for (; n < 16; ++n)
    e0c0:	e3530010 	cmp	r3, #16
            out[n] = iv[n];
    e0c4:	e5e12001 	strb	r2, [r1, #1]!
        for (; n < 16; ++n)
    e0c8:	1afffffa 	bne	e0b8 <CRYPTO_cbc128_encrypt+0x7c>
        (*block) (out, out, key);
    e0cc:	e1a02006 	mov	r2, r6
    e0d0:	e1a01005 	mov	r1, r5
    e0d4:	e1a00005 	mov	r0, r5
    e0d8:	e2899010 	add	r9, r9, #16
    e0dc:	e12fff37 	blx	r7
        iv = out;
        if (len <= 16)
    e0e0:	e3540010 	cmp	r4, #16
            break;
        len -= 16;
        in += 16;
        out += 16;
    e0e4:	81a0c005 	movhi	ip, r5
        len -= 16;
    e0e8:	82444010 	subhi	r4, r4, #16
        out += 16;
    e0ec:	82855010 	addhi	r5, r5, #16
    e0f0:	8affffde 	bhi	e070 <CRYPTO_cbc128_encrypt+0x34>
    }
    memcpy(ivec, iv, 16);
    e0f4:	e59d3000 	ldr	r3, [sp]
    e0f8:	e1a00008 	mov	r0, r8
    e0fc:	e3a02010 	mov	r2, #16
    e100:	e2431001 	sub	r1, r3, #1
    e104:	e59d3004 	ldr	r3, [sp, #4]
    e108:	e3c1100f 	bic	r1, r1, #15
    e10c:	e0831001 	add	r1, r3, r1
}
    e110:	e28dd00c 	add	sp, sp, #12
    e114:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memcpy(ivec, iv, 16);
    e118:	ea0005d7 	b	f87c <memcpy>
}
    e11c:	e28dd00c 	add	sp, sp, #12
    e120:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e124 <CRYPTO_cbc128_decrypt>:
    union {
        size_t t[16 / sizeof(size_t)];
        unsigned char c[16];
    } tmp;

    if (len == 0)
    e124:	e3520000 	cmp	r2, #0
    e128:	012fff1e 	bxeq	lr
{
    e12c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e130:	e24dd01c 	sub	sp, sp, #28
    e134:	e1a06003 	mov	r6, r3
    e138:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    e13c:	e2418001 	sub	r8, r1, #1
    if (len == 0)
    e140:	e1a04002 	mov	r4, r2
    e144:	e1a05000 	mov	r5, r0
    e148:	e58d0004 	str	r0, [sp, #4]
    e14c:	e2437001 	sub	r7, r3, #1
    e150:	e58d2000 	str	r2, [sp]
        }
    }
#endif
    while (len) {
        unsigned char c;
        (*block) (in, tmp.c, key);
    e154:	e28d1008 	add	r1, sp, #8
    e158:	e1a02006 	mov	r2, r6
    e15c:	e1a00005 	mov	r0, r5
    e160:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    e164:	e12fff33 	blx	r3
    e168:	e2459001 	sub	r9, r5, #1
    e16c:	e28de008 	add	lr, sp, #8
    e170:	e1a01007 	mov	r1, r7
    e174:	e1a0c008 	mov	ip, r8
        for (n = 0; n < 16 && n < len; ++n) {
    e178:	e3a0a000 	mov	sl, #0
    e17c:	ea000000 	b	e184 <CRYPTO_cbc128_decrypt+0x60>
    e180:	e1a0a000 	mov	sl, r0
            c = in[n];
            out[n] = tmp.c[n] ^ ivec[n];
    e184:	e5f1b001 	ldrb	fp, [r1, #1]!
        for (n = 0; n < 16 && n < len; ++n) {
    e188:	e28a0001 	add	r0, sl, #1
            out[n] = tmp.c[n] ^ ivec[n];
    e18c:	e4de3001 	ldrb	r3, [lr], #1
        for (n = 0; n < 16 && n < len; ++n) {
    e190:	e350000f 	cmp	r0, #15
    e194:	91500004 	cmpls	r0, r4
            c = in[n];
    e198:	e5f92001 	ldrb	r2, [r9, #1]!
            out[n] = tmp.c[n] ^ ivec[n];
    e19c:	e023300b 	eor	r3, r3, fp
    e1a0:	e5ec3001 	strb	r3, [ip, #1]!
            ivec[n] = c;
    e1a4:	e5c12000 	strb	r2, [r1]
        for (n = 0; n < 16 && n < len; ++n) {
    e1a8:	3afffff4 	bcc	e180 <CRYPTO_cbc128_decrypt+0x5c>
        }
        if (len <= 16) {
    e1ac:	e3540010 	cmp	r4, #16
    e1b0:	e2888010 	add	r8, r8, #16
            for (; n < 16; ++n)
                ivec[n] = in[n];
            break;
        }
        len -= 16;
    e1b4:	82444010 	subhi	r4, r4, #16
        in += 16;
    e1b8:	82855010 	addhi	r5, r5, #16
    e1bc:	8affffe4 	bhi	e154 <CRYPTO_cbc128_decrypt+0x30>
    e1c0:	e59d3000 	ldr	r3, [sp]
            for (; n < 16; ++n)
    e1c4:	e3500010 	cmp	r0, #16
    e1c8:	e2432001 	sub	r2, r3, #1
    e1cc:	e59d3004 	ldr	r3, [sp, #4]
    e1d0:	e3c2200f 	bic	r2, r2, #15
    e1d4:	e0832002 	add	r2, r3, r2
    e1d8:	0a000007 	beq	e1fc <CRYPTO_cbc128_decrypt+0xd8>
    e1dc:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    e1e0:	e082300a 	add	r3, r2, sl
    e1e4:	e282200f 	add	r2, r2, #15
    e1e8:	e081a00a 	add	sl, r1, sl
                ivec[n] = in[n];
    e1ec:	e5f31001 	ldrb	r1, [r3, #1]!
            for (; n < 16; ++n)
    e1f0:	e1530002 	cmp	r3, r2
                ivec[n] = in[n];
    e1f4:	e5ea1001 	strb	r1, [sl, #1]!
            for (; n < 16; ++n)
    e1f8:	1afffffb 	bne	e1ec <CRYPTO_cbc128_decrypt+0xc8>
        out += 16;
    }
}
    e1fc:	e28dd01c 	add	sp, sp, #28
    e200:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e204 <RAND_DRBG_free>:

/*
 * Uninstantiate |drbg| and free all memory.
 */
void RAND_DRBG_free(RAND_DRBG *drbg)
{
    e204:	e92d4070 	push	{r4, r5, r6, lr}
    if (drbg == NULL)
    e208:	e2504000 	subs	r4, r0, #0
    e20c:	08bd8070 	popeq	{r4, r5, r6, pc}
        return;

    if (drbg->meth != NULL)
    e210:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    e214:	e3530000 	cmp	r3, #0
    e218:	0a000001 	beq	e224 <RAND_DRBG_free+0x20>
        drbg->meth->uninstantiate(drbg);
    e21c:	e593300c 	ldr	r3, [r3, #12]
    e220:	e12fff33 	blx	r3
    rand_pool_free(drbg->adin_pool);
    e224:	e594001c 	ldr	r0, [r4, #28]
    CRYPTO_THREAD_lock_free(drbg->lock);
    e228:	e1a05004 	mov	r5, r4
    rand_pool_free(drbg->adin_pool);
    e22c:	eb000028 	bl	e2d4 <rand_pool_free>
    CRYPTO_THREAD_lock_free(drbg->lock);
    e230:	e4950060 	ldr	r0, [r5], #96	; 0x60
    e234:	eb000081 	bl	e440 <CRYPTO_THREAD_lock_free>
    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_DRBG, drbg, &drbg->ex_data);
    e238:	e3a0000f 	mov	r0, #15
    e23c:	e1a01004 	mov	r1, r4
    e240:	e1a02005 	mov	r2, r5
    e244:	ebfffd0a 	bl	d674 <CRYPTO_free_ex_data>

    if (drbg->secure)
    e248:	e5943008 	ldr	r3, [r4, #8]
        OPENSSL_secure_clear_free(drbg, sizeof(*drbg));
    e24c:	e30f2fc4 	movw	r2, #65476	; 0xffc4
    e250:	e1a00004 	mov	r0, r4
    e254:	e3402000 	movt	r2, #0
    if (drbg->secure)
    e258:	e3530000 	cmp	r3, #0
    e25c:	1a000002 	bne	e26c <RAND_DRBG_free+0x68>
    else
        OPENSSL_clear_free(drbg, sizeof(*drbg));
    e260:	e3a010fc 	mov	r1, #252	; 0xfc
}
    e264:	e8bd4070 	pop	{r4, r5, r6, lr}
        OPENSSL_clear_free(drbg, sizeof(*drbg));
    e268:	eaffff52 	b	dfb8 <CRYPTO_clear_free>
        OPENSSL_secure_clear_free(drbg, sizeof(*drbg));
    e26c:	e3a03000 	mov	r3, #0
    e270:	e3a010fc 	mov	r1, #252	; 0xfc
}
    e274:	e8bd4070 	pop	{r4, r5, r6, lr}
        OPENSSL_secure_clear_free(drbg, sizeof(*drbg));
    e278:	eaffff63 	b	e00c <CRYPTO_secure_clear_free>

0000e27c <drbg_delete_thread_state>:
        CRYPTO_THREAD_cleanup_local(&public_drbg);
    }
}

void drbg_delete_thread_state(void)
{
    e27c:	e92d4070 	push	{r4, r5, r6, lr}
    RAND_DRBG *drbg;

    drbg = CRYPTO_THREAD_get_local(&public_drbg);
    e280:	e30354a8 	movw	r5, #13480	; 0x34a8
    e284:	e3405001 	movt	r5, #1
    CRYPTO_THREAD_set_local(&public_drbg, NULL);
    RAND_DRBG_free(drbg);

    drbg = CRYPTO_THREAD_get_local(&private_drbg);
    e288:	e30344a4 	movw	r4, #13476	; 0x34a4
    drbg = CRYPTO_THREAD_get_local(&public_drbg);
    e28c:	e1a00005 	mov	r0, r5
    drbg = CRYPTO_THREAD_get_local(&private_drbg);
    e290:	e3404001 	movt	r4, #1
    drbg = CRYPTO_THREAD_get_local(&public_drbg);
    e294:	eb00008d 	bl	e4d0 <CRYPTO_THREAD_get_local>
    CRYPTO_THREAD_set_local(&public_drbg, NULL);
    e298:	e3a01000 	mov	r1, #0
    drbg = CRYPTO_THREAD_get_local(&public_drbg);
    e29c:	e1a06000 	mov	r6, r0
    CRYPTO_THREAD_set_local(&public_drbg, NULL);
    e2a0:	e1a00005 	mov	r0, r5
    e2a4:	eb000090 	bl	e4ec <CRYPTO_THREAD_set_local>
    RAND_DRBG_free(drbg);
    e2a8:	e1a00006 	mov	r0, r6
    e2ac:	ebffffd4 	bl	e204 <RAND_DRBG_free>
    drbg = CRYPTO_THREAD_get_local(&private_drbg);
    e2b0:	e1a00004 	mov	r0, r4
    e2b4:	eb000085 	bl	e4d0 <CRYPTO_THREAD_get_local>
    CRYPTO_THREAD_set_local(&private_drbg, NULL);
    e2b8:	e3a01000 	mov	r1, #0
    drbg = CRYPTO_THREAD_get_local(&private_drbg);
    e2bc:	e1a05000 	mov	r5, r0
    CRYPTO_THREAD_set_local(&private_drbg, NULL);
    e2c0:	e1a00004 	mov	r0, r4
    e2c4:	eb000088 	bl	e4ec <CRYPTO_THREAD_set_local>
    RAND_DRBG_free(drbg);
    e2c8:	e1a00005 	mov	r0, r5
}
    e2cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    RAND_DRBG_free(drbg);
    e2d0:	eaffffcb 	b	e204 <RAND_DRBG_free>

0000e2d4 <rand_pool_free>:

/*
 * Free |pool|, securely erasing its buffer.
 */
void rand_pool_free(RAND_POOL *pool)
{
    e2d4:	e92d4010 	push	{r4, lr}
    if (pool == NULL)
    e2d8:	e2504000 	subs	r4, r0, #0
    e2dc:	08bd8010 	popeq	{r4, pc}
     * Although it would be advisable from a cryptographical viewpoint,
     * we are not allowed to clear attached buffers, since they are passed
     * to rand_pool_attach() as `const unsigned char*`.
     * (see corresponding comment in rand_pool_attach()).
     */
    if (!pool->attached) {
    e2e0:	e5943008 	ldr	r3, [r4, #8]
    e2e4:	e3530000 	cmp	r3, #0
    e2e8:	1a000007 	bne	e30c <rand_pool_free+0x38>
        if (pool->secure)
    e2ec:	e594c00c 	ldr	ip, [r4, #12]
            OPENSSL_secure_clear_free(pool->buffer, pool->alloc_len);
    e2f0:	e30f2fc4 	movw	r2, #65476	; 0xffc4
    e2f4:	e5940000 	ldr	r0, [r4]
    e2f8:	e5941018 	ldr	r1, [r4, #24]
        if (pool->secure)
    e2fc:	e35c0000 	cmp	ip, #0
    e300:	0a000007 	beq	e324 <rand_pool_free+0x50>
            OPENSSL_secure_clear_free(pool->buffer, pool->alloc_len);
    e304:	e3402000 	movt	r2, #0
    e308:	ebffff3f 	bl	e00c <CRYPTO_secure_clear_free>
        else
            OPENSSL_clear_free(pool->buffer, pool->alloc_len);
    }

    OPENSSL_free(pool);
    e30c:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    e310:	e1a00004 	mov	r0, r4
    e314:	e3401000 	movt	r1, #0
    e318:	e3a02000 	mov	r2, #0
}
    e31c:	e8bd4010 	pop	{r4, lr}
    OPENSSL_free(pool);
    e320:	eafffef4 	b	def8 <CRYPTO_free>
            OPENSSL_clear_free(pool->buffer, pool->alloc_len);
    e324:	e1a0300c 	mov	r3, ip
    e328:	e3402000 	movt	r2, #0
    e32c:	ebffff21 	bl	dfb8 <CRYPTO_clear_free>
    e330:	eafffff5 	b	e30c <rand_pool_free+0x38>

0000e334 <OPENSSL_sk_free.part.2>:
        if (st->data[i] != NULL)
            func((char *)st->data[i]);
    OPENSSL_sk_free(st);
}

void OPENSSL_sk_free(OPENSSL_STACK *st)
    e334:	e92d4070 	push	{r4, r5, r6, lr}
{
    if (st == NULL)
        return;
    OPENSSL_free(st->data);
    e338:	e30f4fc4 	movw	r4, #65476	; 0xffc4
    e33c:	e3404000 	movt	r4, #0
void OPENSSL_sk_free(OPENSSL_STACK *st)
    e340:	e1a05000 	mov	r5, r0
    OPENSSL_free(st->data);
    e344:	e1a01004 	mov	r1, r4
    e348:	e3a02000 	mov	r2, #0
    e34c:	e5900004 	ldr	r0, [r0, #4]
    e350:	ebfffee8 	bl	def8 <CRYPTO_free>
    OPENSSL_free(st);
    e354:	e1a01004 	mov	r1, r4
    e358:	e1a00005 	mov	r0, r5
    e35c:	e3a02000 	mov	r2, #0
}
    e360:	e8bd4070 	pop	{r4, r5, r6, lr}
    OPENSSL_free(st);
    e364:	eafffee3 	b	def8 <CRYPTO_free>

0000e368 <OPENSSL_sk_pop>:
    if (st == NULL || st->num == 0)
    e368:	e2502000 	subs	r2, r0, #0
    e36c:	0a000009 	beq	e398 <OPENSSL_sk_pop+0x30>
    e370:	e5923000 	ldr	r3, [r2]
    e374:	e3530000 	cmp	r3, #0
    e378:	0a000004 	beq	e390 <OPENSSL_sk_pop+0x28>
    const void *ret = st->data[loc];
    e37c:	e5921004 	ldr	r1, [r2, #4]
    return internal_delete(st, st->num - 1);
    e380:	e2433001 	sub	r3, r3, #1
    const void *ret = st->data[loc];
    e384:	e7910103 	ldr	r0, [r1, r3, lsl #2]
    st->num--;
    e388:	e5823000 	str	r3, [r2]
    return internal_delete(st, st->num - 1);
    e38c:	e12fff1e 	bx	lr
        return NULL;
    e390:	e1a00003 	mov	r0, r3
}
    e394:	e12fff1e 	bx	lr
        return NULL;
    e398:	e1a00002 	mov	r0, r2
    e39c:	e12fff1e 	bx	lr

0000e3a0 <OPENSSL_sk_free>:
    if (st == NULL)
    e3a0:	e3500000 	cmp	r0, #0
    e3a4:	012fff1e 	bxeq	lr
    e3a8:	eaffffe1 	b	e334 <OPENSSL_sk_free.part.2>

0000e3ac <OPENSSL_sk_num>:

int OPENSSL_sk_num(const OPENSSL_STACK *st)
{
    return st == NULL ? -1 : st->num;
    e3ac:	e3500000 	cmp	r0, #0
    e3b0:	15900000 	ldrne	r0, [r0]
    e3b4:	03e00000 	mvneq	r0, #0
}
    e3b8:	e12fff1e 	bx	lr

0000e3bc <OPENSSL_sk_value>:

void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)
{
    if (st == NULL || i < 0 || i >= st->num)
    e3bc:	e3500000 	cmp	r0, #0
    e3c0:	11a03fa1 	lsrne	r3, r1, #31
    e3c4:	03a03001 	moveq	r3, #1
    e3c8:	e3530000 	cmp	r3, #0
    e3cc:	1a000005 	bne	e3e8 <OPENSSL_sk_value+0x2c>
    e3d0:	e5902000 	ldr	r2, [r0]
    e3d4:	e1520001 	cmp	r2, r1
    e3d8:	da000002 	ble	e3e8 <OPENSSL_sk_value+0x2c>
        return NULL;
    return (void *)st->data[i];
    e3dc:	e5903004 	ldr	r3, [r0, #4]
    e3e0:	e7930101 	ldr	r0, [r3, r1, lsl #2]
    e3e4:	e12fff1e 	bx	lr
        return NULL;
    e3e8:	e3a00000 	mov	r0, #0
    e3ec:	e12fff1e 	bx	lr

0000e3f0 <CRYPTO_THREAD_lock_new>:

CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
{
    CRYPTO_RWLOCK *lock;

    if ((lock = OPENSSL_zalloc(sizeof(unsigned int))) == NULL) {
    e3f0:	e30f1fc4 	movw	r1, #65476	; 0xffc4
{
    e3f4:	e92d4010 	push	{r4, lr}
    if ((lock = OPENSSL_zalloc(sizeof(unsigned int))) == NULL) {
    e3f8:	e3a02000 	mov	r2, #0
    e3fc:	e3401000 	movt	r1, #0
    e400:	e3a00004 	mov	r0, #4
    e404:	ebfffee1 	bl	df90 <CRYPTO_zalloc>
    e408:	e3500000 	cmp	r0, #0
        /* Don't set error, to avoid recursion blowup. */
        return NULL;
    }

    *(unsigned int *)lock = 1;
    e40c:	13a03001 	movne	r3, #1
    e410:	15803000 	strne	r3, [r0]

    return lock;
}
    e414:	e8bd8010 	pop	{r4, pc}

0000e418 <CRYPTO_THREAD_write_lock>:
    e418:	e5900000 	ldr	r0, [r0]
    e41c:	e2400001 	sub	r0, r0, #1
    e420:	e16f0f10 	clz	r0, r0
    e424:	e1a002a0 	lsr	r0, r0, #5
    e428:	e12fff1e 	bx	lr

0000e42c <CRYPTO_THREAD_unlock>:
    e42c:	e5900000 	ldr	r0, [r0]
    e430:	e2400001 	sub	r0, r0, #1
    e434:	e16f0f10 	clz	r0, r0
    e438:	e1a002a0 	lsr	r0, r0, #5
    e43c:	e12fff1e 	bx	lr

0000e440 <CRYPTO_THREAD_lock_free>:
        return 0;
    return 1;
}

void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
    if (lock == NULL)
    e440:	e2503000 	subs	r3, r0, #0
    e444:	012fff1e 	bxeq	lr
        return;

    *(unsigned int *)lock = 0;
    e448:	e3a02000 	mov	r2, #0
    OPENSSL_free(lock);
    e44c:	e30f1fc4 	movw	r1, #65476	; 0xffc4
    *(unsigned int *)lock = 0;
    e450:	e5832000 	str	r2, [r3]
    OPENSSL_free(lock);
    e454:	e3401000 	movt	r1, #0
    e458:	eafffea6 	b	def8 <CRYPTO_free>

0000e45c <CRYPTO_THREAD_run_once>:
    return;
}

int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
{
    if (*once != 0)
    e45c:	e5903000 	ldr	r3, [r0]
    e460:	e3530000 	cmp	r3, #0
    e464:	1a000006 	bne	e484 <CRYPTO_THREAD_run_once+0x28>
{
    e468:	e92d4010 	push	{r4, lr}
    e46c:	e1a04000 	mov	r4, r0
        return 1;

    init();
    e470:	e12fff31 	blx	r1
    *once = 1;
    e474:	e3a03001 	mov	r3, #1

    return 1;
}
    e478:	e3a00001 	mov	r0, #1
    *once = 1;
    e47c:	e5843000 	str	r3, [r4]
}
    e480:	e8bd8010 	pop	{r4, pc}
    e484:	e3a00001 	mov	r0, #1
    e488:	e12fff1e 	bx	lr

0000e48c <CRYPTO_THREAD_init_local>:

int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
{
    static unsigned int thread_local_key = 0;

    if (thread_local_key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)
    e48c:	e30334ac 	movw	r3, #13484	; 0x34ac
    e490:	e3403001 	movt	r3, #1
    e494:	e5932000 	ldr	r2, [r3]
    e498:	e35200ff 	cmp	r2, #255	; 0xff
    e49c:	8a000009 	bhi	e4c8 <CRYPTO_THREAD_init_local+0x3c>
        return 0;

    *key = thread_local_key++;

    thread_local_storage[*key] = NULL;
    e4a0:	e30314b0 	movw	r1, #13488	; 0x34b0
{
    e4a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    thread_local_storage[*key] = NULL;
    e4a8:	e3401001 	movt	r1, #1
    e4ac:	e3a0e000 	mov	lr, #0
    *key = thread_local_key++;
    e4b0:	e282c001 	add	ip, r2, #1
    e4b4:	e5802000 	str	r2, [r0]

    return 1;
    e4b8:	e3a00001 	mov	r0, #1
    thread_local_storage[*key] = NULL;
    e4bc:	e781e102 	str	lr, [r1, r2, lsl #2]
    *key = thread_local_key++;
    e4c0:	e583c000 	str	ip, [r3]
}
    e4c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
        return 0;
    e4c8:	e3a00000 	mov	r0, #0
}
    e4cc:	e12fff1e 	bx	lr

0000e4d0 <CRYPTO_THREAD_get_local>:

void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
{
    if (*key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)
    e4d0:	e5902000 	ldr	r2, [r0]
    e4d4:	e35200ff 	cmp	r2, #255	; 0xff
        return NULL;

    return thread_local_storage[*key];
    e4d8:	930334b0 	movwls	r3, #13488	; 0x34b0
    e4dc:	93403001 	movtls	r3, #1
    e4e0:	97930102 	ldrls	r0, [r3, r2, lsl #2]
        return NULL;
    e4e4:	83a00000 	movhi	r0, #0
}
    e4e8:	e12fff1e 	bx	lr

0000e4ec <CRYPTO_THREAD_set_local>:

int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
{
    if (*key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)
    e4ec:	e5903000 	ldr	r3, [r0]
    e4f0:	e35300ff 	cmp	r3, #255	; 0xff
        return 0;

    thread_local_storage[*key] = val;
    e4f4:	930324b0 	movwls	r2, #13488	; 0x34b0

    return 1;
    e4f8:	93a00001 	movls	r0, #1
    thread_local_storage[*key] = val;
    e4fc:	93402001 	movtls	r2, #1
        return 0;
    e500:	83a00000 	movhi	r0, #0
    thread_local_storage[*key] = val;
    e504:	97821103 	strls	r1, [r2, r3, lsl #2]
}
    e508:	e12fff1e 	bx	lr

0000e50c <CRYPTO_THREAD_cleanup_local>:

int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
{
    *key = OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX + 1;
    e50c:	e3003101 	movw	r3, #257	; 0x101
    e510:	e5803000 	str	r3, [r0]
    return 1;
}
    e514:	e3a00001 	mov	r0, #1
    e518:	e12fff1e 	bx	lr

0000e51c <openssl_init_fork_handlers>:
}

int openssl_init_fork_handlers(void)
{
    return 0;
}
    e51c:	e3a00000 	mov	r0, #0
    e520:	e12fff1e 	bx	lr

0000e524 <__geterrno>:
static int _errno;

int *__geterrno(void)
{
    return &_errno;
}
    e524:	e30308b0 	movw	r0, #14512	; 0x38b0
    e528:	e3400001 	movt	r0, #1
    e52c:	e12fff1e 	bx	lr

0000e530 <longlong_to_string>:
#define LEFTFORMATFLAG 0x00000800
#define LEADZEROFLAG   0x00001000
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
    e530:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e534:	e1a08000 	mov	r8, r0
    e538:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    e53c:	e1a04002 	mov	r4, r2
    e540:	e1a05003 	mov	r5, r3
    e544:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
	size_t pos = len;
	int negative = 0;

	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    e548:	e219ab01 	ands	sl, r9, #1024	; 0x400
    e54c:	0a000003 	beq	e560 <longlong_to_string+0x30>
    e550:	e3520000 	cmp	r2, #0
    e554:	e2d53000 	sbcs	r3, r5, #0
	int negative = 0;
    e558:	a3a0a000 	movge	sl, #0
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    e55c:	ba000030 	blt	e624 <longlong_to_string+0xf4>
	}

	buf[--pos] = 0;

	/* only do the math if the number is >= 10 */
	while (n >= 10) {
    e560:	e3550000 	cmp	r5, #0
	buf[--pos] = 0;
    e564:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
    e568:	03540009 	cmpeq	r4, #9
	buf[--pos] = 0;
    e56c:	e3a03000 	mov	r3, #0
    e570:	e088b007 	add	fp, r8, r7
    e574:	e7c83007 	strb	r3, [r8, r7]
	while (n >= 10) {
    e578:	9a000012 	bls	e5c8 <longlong_to_string+0x98>
		int digit = n % 10;
    e57c:	e1a00004 	mov	r0, r4
    e580:	e1a01005 	mov	r1, r5
    e584:	e3a0200a 	mov	r2, #10
    e588:	e3a03000 	mov	r3, #0
    e58c:	fa00061f 	blx	fe10 <__aeabi_uldivmod>

		n /= 10;
    e590:	e1a00004 	mov	r0, r4
		int digit = n % 10;
    e594:	e1a06002 	mov	r6, r2
		n /= 10;
    e598:	e1a01005 	mov	r1, r5
    e59c:	e3a0200a 	mov	r2, #10
    e5a0:	e3a03000 	mov	r3, #0

		buf[--pos] = digit + '0';
    e5a4:	e2866030 	add	r6, r6, #48	; 0x30
		n /= 10;
    e5a8:	fa000618 	blx	fe10 <__aeabi_uldivmod>
	while (n >= 10) {
    e5ac:	e3510000 	cmp	r1, #0
		buf[--pos] = digit + '0';
    e5b0:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
    e5b4:	03500009 	cmpeq	r0, #9
		n /= 10;
    e5b8:	e1a04000 	mov	r4, r0
    e5bc:	e1a05001 	mov	r5, r1
		buf[--pos] = digit + '0';
    e5c0:	e56b6001 	strb	r6, [fp, #-1]!
	while (n >= 10) {
    e5c4:	8affffec 	bhi	e57c <longlong_to_string+0x4c>
	}
	buf[--pos] = n + '0';

	if (negative)
    e5c8:	e35a0000 	cmp	sl, #0
	buf[--pos] = n + '0';
    e5cc:	e2477001 	sub	r7, r7, #1
    e5d0:	e2844030 	add	r4, r4, #48	; 0x30
    e5d4:	e0880007 	add	r0, r8, r7
    e5d8:	e7c84007 	strb	r4, [r8, r7]
	if (negative)
    e5dc:	1a00000c 	bne	e614 <longlong_to_string+0xe4>
		*signchar = '-';
	else if ((flag & SHOWSIGNFLAG))
    e5e0:	e3190c02 	tst	r9, #512	; 0x200
    e5e4:	1a000006 	bne	e604 <longlong_to_string+0xd4>
		*signchar = '+';
	else if ((flag & BLANKPOSFLAG))
    e5e8:	e3190a02 	tst	r9, #8192	; 0x2000
		*signchar = ' ';
    e5ec:	159d2030 	ldrne	r2, [sp, #48]	; 0x30
    e5f0:	13a03020 	movne	r3, #32
	else
		*signchar = '\0';
    e5f4:	059d3030 	ldreq	r3, [sp, #48]	; 0x30
		*signchar = ' ';
    e5f8:	15c23000 	strbne	r3, [r2]
		*signchar = '\0';
    e5fc:	05c3a000 	strbeq	sl, [r3]

	return &buf[pos];
}
    e600:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '+';
    e604:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    e608:	e3a0302b 	mov	r3, #43	; 0x2b
    e60c:	e5c23000 	strb	r3, [r2]
    e610:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '-';
    e614:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    e618:	e3a0302d 	mov	r3, #45	; 0x2d
    e61c:	e5c23000 	strb	r3, [r2]
    e620:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n = -n;
    e624:	e2724000 	rsbs	r4, r2, #0
		negative = 1;
    e628:	e3a0a001 	mov	sl, #1
		n = -n;
    e62c:	e2e55000 	rsc	r5, r5, #0
    e630:	eaffffca 	b	e560 <longlong_to_string+0x30>

0000e634 <exponent_to_string>:
__NO_INLINE static size_t exponent_to_string(char *buf, int32_t exponent)
{
	size_t pos = 0;

	/* handle sign */
	if (exponent < 0) {
    e634:	e3510000 	cmp	r1, #0
{
    e638:	e92d4070 	push	{r4, r5, r6, lr}
		OUT('-');
		exponent = -exponent;
    e63c:	b2611000 	rsblt	r1, r1, #0
		OUT('-');
    e640:	b3a0302d 	movlt	r3, #45	; 0x2d
	} else {
		OUT('+');
    e644:	a3a0302b 	movge	r3, #43	; 0x2b
	}

	/* see how far we need to bump into the string to print from the right */
	if (exponent >= 1000) pos += 4;
    e648:	e3510ffa 	cmp	r1, #1000	; 0x3e8
{
    e64c:	e1a0e000 	mov	lr, r0
		OUT('+');
    e650:	e5c03000 	strb	r3, [r0]
	if (exponent >= 1000) pos += 4;
    e654:	a3a00005 	movge	r0, #5
    e658:	aa000002 	bge	e668 <exponent_to_string+0x34>
	else if (exponent >= 100) pos += 3;
    e65c:	e3510063 	cmp	r1, #99	; 0x63
    e660:	c3a00004 	movgt	r0, #4
    e664:	da00000f 	ble	e6a8 <exponent_to_string+0x74>
	else pos++;

	/* print decimal string, from the right */
	uint i = pos;
	do {
		uint digit = (uint32_t)exponent % 10;
    e668:	e30c5ccd 	movw	r5, #52429	; 0xcccd

		buf[--i] = digit + '0';

		exponent /= 10;
    e66c:	e3064667 	movw	r4, #26215	; 0x6667
    e670:	e08ee000 	add	lr, lr, r0
		uint digit = (uint32_t)exponent % 10;
    e674:	e34c5ccc 	movt	r5, #52428	; 0xcccc
		exponent /= 10;
    e678:	e3464666 	movt	r4, #26214	; 0x6666
		uint digit = (uint32_t)exponent % 10;
    e67c:	e0832195 	umull	r2, r3, r5, r1
		exponent /= 10;
    e680:	e1a02fc1 	asr	r2, r1, #31
    e684:	e0cc6194 	smull	r6, ip, r4, r1
		uint digit = (uint32_t)exponent % 10;
    e688:	e1a031a3 	lsr	r3, r3, #3
    e68c:	e0833103 	add	r3, r3, r3, lsl #2
    e690:	e0413083 	sub	r3, r1, r3, lsl #1
	} while (exponent != 0);
    e694:	e072114c 	rsbs	r1, r2, ip, asr #2
		buf[--i] = digit + '0';
    e698:	e2833030 	add	r3, r3, #48	; 0x30
    e69c:	e56e3001 	strb	r3, [lr, #-1]!
	} while (exponent != 0);
    e6a0:	1afffff5 	bne	e67c <exponent_to_string+0x48>
    e6a4:	e8bd8070 	pop	{r4, r5, r6, pc}
	else pos++;
    e6a8:	e3510009 	cmp	r1, #9
    e6ac:	c3a00003 	movgt	r0, #3
    e6b0:	d3a00002 	movle	r0, #2
    e6b4:	eaffffeb 	b	e668 <exponent_to_string+0x34>

0000e6b8 <_vsnprintf_output>:
	size_t len;
	size_t pos;
};

static int _vsnprintf_output(const char *str, size_t len, void *state)
{
    e6b8:	e92d4010 	push	{r4, lr}
	struct _output_args *args = state;

	size_t count = 0;
	while (count < len && *str) {
    e6bc:	e251e000 	subs	lr, r1, #0
    e6c0:	0a000016 	beq	e720 <_vsnprintf_output+0x68>
    e6c4:	e5d01000 	ldrb	r1, [r0]
    e6c8:	e3510000 	cmp	r1, #0
    e6cc:	0a000011 	beq	e718 <_vsnprintf_output+0x60>
    e6d0:	e24ee001 	sub	lr, lr, #1
	size_t count = 0;
    e6d4:	e3a01000 	mov	r1, #0
    e6d8:	e080e00e 	add	lr, r0, lr
    e6dc:	ea000002 	b	e6ec <_vsnprintf_output+0x34>
	while (count < len && *str) {
    e6e0:	e5f03001 	ldrb	r3, [r0, #1]!
    e6e4:	e3530000 	cmp	r3, #0
    e6e8:	0a00000a 	beq	e718 <_vsnprintf_output+0x60>
		if (args->pos < args->len) {
    e6ec:	e5923008 	ldr	r3, [r2, #8]
			args->outstr[args->pos++] = *str;
		}

		str++;
		count++;
    e6f0:	e2811001 	add	r1, r1, #1
		if (args->pos < args->len) {
    e6f4:	e592c004 	ldr	ip, [r2, #4]
			args->outstr[args->pos++] = *str;
    e6f8:	e2834001 	add	r4, r3, #1
		if (args->pos < args->len) {
    e6fc:	e153000c 	cmp	r3, ip
			args->outstr[args->pos++] = *str;
    e700:	35824008 	strcc	r4, [r2, #8]
    e704:	3592c000 	ldrcc	ip, [r2]
    e708:	35d04000 	ldrbcc	r4, [r0]
    e70c:	37cc4003 	strbcc	r4, [ip, r3]
	while (count < len && *str) {
    e710:	e150000e 	cmp	r0, lr
    e714:	1afffff1 	bne	e6e0 <_vsnprintf_output+0x28>
    e718:	e1a00001 	mov	r0, r1
	}

	return count;
}
    e71c:	e8bd8010 	pop	{r4, pc}
	while (count < len && *str) {
    e720:	e1a0000e 	mov	r0, lr
    e724:	e8bd8010 	pop	{r4, pc}

0000e728 <double_to_hexstring.isra.0>:
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    e728:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    e72c:	e3a06000 	mov	r6, #0
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    e730:	ec532b10 	vmov	r2, r3, d0
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    e734:	e3a07000 	mov	r7, #0
	if (neg) {
    e738:	e1520006 	cmp	r2, r6
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    e73c:	e1a05000 	mov	r5, r0
	if (neg) {
    e740:	e0d30007 	sbcs	r0, r3, r7
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    e744:	e7ea2a53 	ubfx	r2, r3, #20, #11
		OUT('-');
    e748:	b3a0002d 	movlt	r0, #45	; 0x2d
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    e74c:	e7f37053 	ubfx	r7, r3, #0, #20
		OUT('-');
    e750:	b5c50000 	strblt	r0, [r5]
	if (exponent == 0x7ff) {
    e754:	e30007ff 	movw	r0, #2047	; 0x7ff
		OUT('-');
    e758:	b3a03001 	movlt	r3, #1
	size_t pos = 0;
    e75c:	a3a03000 	movge	r3, #0
	if (exponent == 0x7ff) {
    e760:	e1520000 	cmp	r2, r0
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    e764:	e24dd014 	sub	sp, sp, #20
    e768:	e2011c01 	and	r1, r1, #256	; 0x100
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    e76c:	ee106a10 	vmov	r6, s0
    e770:	e58d1004 	str	r1, [sp, #4]
	if (exponent == 0x7ff) {
    e774:	0a000028 	beq	e81c <double_to_hexstring.isra.0+0xf4>
	} else if (exponent == 0) {
    e778:	e3520000 	cmp	r2, #0
    e77c:	1a000015 	bne	e7d8 <double_to_hexstring.isra.0+0xb0>
		if (fraction == 0) {
    e780:	e1962007 	orrs	r2, r6, r7
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    e784:	e59d2004 	ldr	r2, [sp, #4]
		if (fraction == 0) {
    e788:	1a000040 	bne	e890 <double_to_hexstring.isra.0+0x168>
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    e78c:	e3520000 	cmp	r2, #0
    e790:	1a0000c3 	bne	eaa4 <double_to_hexstring.isra.0+0x37c>
    e794:	e0850003 	add	r0, r5, r3
    e798:	e59fc334 	ldr	ip, [pc, #820]	; ead4 <double_to_hexstring.isra.0+0x3ac>
    e79c:	e3a02078 	mov	r2, #120	; 0x78
    e7a0:	e3a01030 	mov	r1, #48	; 0x30
    e7a4:	ea000000 	b	e7ac <double_to_hexstring.isra.0+0x84>
    e7a8:	e5fc2001 	ldrb	r2, [ip, #1]!
    e7ac:	e3520000 	cmp	r2, #0
    e7b0:	e4c01001 	strb	r1, [r0], #1
    e7b4:	e2833001 	add	r3, r3, #1
    e7b8:	e1a01002 	mov	r1, r2
    e7bc:	1afffff9 	bne	e7a8 <double_to_hexstring.isra.0+0x80>
    e7c0:	e0853003 	add	r3, r5, r3
	buf[pos] = 0;
    e7c4:	e3a02000 	mov	r2, #0
}
    e7c8:	e1a00005 	mov	r0, r5
	buf[pos] = 0;
    e7cc:	e5c32000 	strb	r2, [r3]
}
    e7d0:	e28dd014 	add	sp, sp, #20
    e7d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    e7d8:	e59d1004 	ldr	r1, [sp, #4]
		int exponent_signed = exponent - 1023;
    e7dc:	e2422fff 	sub	r2, r2, #1020	; 0x3fc
    e7e0:	e2422003 	sub	r2, r2, #3
    e7e4:	e58d200c 	str	r2, [sp, #12]
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    e7e8:	e3510000 	cmp	r1, #0
    e7ec:	0a000034 	beq	e8c4 <double_to_hexstring.isra.0+0x19c>
    e7f0:	e59fc2e0 	ldr	ip, [pc, #736]	; ead8 <double_to_hexstring.isra.0+0x3b0>
    e7f4:	e0850003 	add	r0, r5, r3
    e7f8:	e3a02058 	mov	r2, #88	; 0x58
    e7fc:	e3a01030 	mov	r1, #48	; 0x30
    e800:	e3520000 	cmp	r2, #0
    e804:	e4c01001 	strb	r1, [r0], #1
    e808:	e2833001 	add	r3, r3, #1
    e80c:	e1a01002 	mov	r1, r2
    e810:	0a000036 	beq	e8f0 <double_to_hexstring.isra.0+0x1c8>
    e814:	e5fc2001 	ldrb	r2, [ip, #1]!
    e818:	eafffff8 	b	e800 <double_to_hexstring.isra.0+0xd8>
		if (fraction == 0) {
    e81c:	e1962007 	orrs	r2, r6, r7
    e820:	1a00000c 	bne	e858 <double_to_hexstring.isra.0+0x130>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    e824:	e3510000 	cmp	r1, #0
    e828:	1a000087 	bne	ea4c <double_to_hexstring.isra.0+0x324>
    e82c:	e59fc2a8 	ldr	ip, [pc, #680]	; eadc <double_to_hexstring.isra.0+0x3b4>
    e830:	e0850003 	add	r0, r5, r3
    e834:	e3a0206e 	mov	r2, #110	; 0x6e
    e838:	e3a01069 	mov	r1, #105	; 0x69
    e83c:	e3520000 	cmp	r2, #0
    e840:	e4c01001 	strb	r1, [r0], #1
    e844:	e2833001 	add	r3, r3, #1
    e848:	e1a01002 	mov	r1, r2
    e84c:	0affffdb 	beq	e7c0 <double_to_hexstring.isra.0+0x98>
    e850:	e5fc2001 	ldrb	r2, [ip, #1]!
    e854:	eafffff8 	b	e83c <double_to_hexstring.isra.0+0x114>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    e858:	e59d2004 	ldr	r2, [sp, #4]
    e85c:	e3520000 	cmp	r2, #0
    e860:	1a00006e 	bne	ea20 <double_to_hexstring.isra.0+0x2f8>
    e864:	e59fc274 	ldr	ip, [pc, #628]	; eae0 <double_to_hexstring.isra.0+0x3b8>
    e868:	e0850003 	add	r0, r5, r3
    e86c:	e3a02061 	mov	r2, #97	; 0x61
    e870:	e3a0106e 	mov	r1, #110	; 0x6e
    e874:	e3520000 	cmp	r2, #0
    e878:	e4c01001 	strb	r1, [r0], #1
    e87c:	e2833001 	add	r3, r3, #1
    e880:	e1a01002 	mov	r1, r2
    e884:	0affffcd 	beq	e7c0 <double_to_hexstring.isra.0+0x98>
    e888:	e5fc2001 	ldrb	r2, [ip, #1]!
    e88c:	eafffff8 	b	e874 <double_to_hexstring.isra.0+0x14c>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    e890:	e3520000 	cmp	r2, #0
    e894:	1a000077 	bne	ea78 <double_to_hexstring.isra.0+0x350>
    e898:	e59fc244 	ldr	ip, [pc, #580]	; eae4 <double_to_hexstring.isra.0+0x3bc>
    e89c:	e0850003 	add	r0, r5, r3
    e8a0:	e3a02065 	mov	r2, #101	; 0x65
    e8a4:	e3a01064 	mov	r1, #100	; 0x64
    e8a8:	e3520000 	cmp	r2, #0
    e8ac:	e4c01001 	strb	r1, [r0], #1
    e8b0:	e2833001 	add	r3, r3, #1
    e8b4:	e1a01002 	mov	r1, r2
    e8b8:	0affffc0 	beq	e7c0 <double_to_hexstring.isra.0+0x98>
    e8bc:	e5fc2001 	ldrb	r2, [ip, #1]!
    e8c0:	eafffff8 	b	e8a8 <double_to_hexstring.isra.0+0x180>
    e8c4:	e59fc21c 	ldr	ip, [pc, #540]	; eae8 <double_to_hexstring.isra.0+0x3c0>
    e8c8:	e0850003 	add	r0, r5, r3
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    e8cc:	e3a02078 	mov	r2, #120	; 0x78
    e8d0:	e3a01030 	mov	r1, #48	; 0x30
    e8d4:	e3520000 	cmp	r2, #0
    e8d8:	e4c01001 	strb	r1, [r0], #1
    e8dc:	e2833001 	add	r3, r3, #1
    e8e0:	e1a01002 	mov	r1, r2
    e8e4:	0a000049 	beq	ea10 <double_to_hexstring.isra.0+0x2e8>
    e8e8:	e5fc2001 	ldrb	r2, [ip, #1]!
    e8ec:	eafffff8 	b	e8d4 <double_to_hexstring.isra.0+0x1ac>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    e8f0:	e302288c 	movw	r2, #10380	; 0x288c
    e8f4:	e3402001 	movt	r2, #1
    e8f8:	e58d2008 	str	r2, [sp, #8]
		bool output_dot = false;
    e8fc:	e3a0a000 	mov	sl, #0
		for (int i = 52 - 4; i >= 0; i -= 4) {
    e900:	e3a01030 	mov	r1, #48	; 0x30
		int zero_count = 0;
    e904:	e1a0c00a 	mov	ip, sl
					OUT('0');
    e908:	e1a0e001 	mov	lr, r1
    e90c:	ea000002 	b	e91c <double_to_hexstring.isra.0+0x1f4>
		for (int i = 52 - 4; i >= 0; i -= 4) {
    e910:	e2411004 	sub	r1, r1, #4
    e914:	e3710004 	cmn	r1, #4
    e918:	0a00002d 	beq	e9d4 <double_to_hexstring.isra.0+0x2ac>
			uint digit = (fraction >> i) & 0xf;
    e91c:	e1a02136 	lsr	r2, r6, r1
    e920:	e2610020 	rsb	r0, r1, #32
    e924:	e2418020 	sub	r8, r1, #32
    e928:	e1822017 	orr	r2, r2, r7, lsl r0
    e92c:	e2834001 	add	r4, r3, #1
    e930:	e0850004 	add	r0, r5, r4
    e934:	e1822837 	orr	r2, r2, r7, lsr r8
    e938:	e0859003 	add	r9, r5, r3
			if (digit == 0) {
    e93c:	e212200f 	ands	r2, r2, #15
				zero_count++;
    e940:	028cc001 	addeq	ip, ip, #1
			if (digit == 0) {
    e944:	0afffff1 	beq	e910 <double_to_hexstring.isra.0+0x1e8>
				if (!output_dot) {
    e948:	e35a0000 	cmp	sl, #0
    e94c:	e283a002 	add	sl, r3, #2
    e950:	e085b00a 	add	fp, r5, sl
    e954:	1a000008 	bne	e97c <double_to_hexstring.isra.0+0x254>
    e958:	e2838003 	add	r8, r3, #3
					OUT('.');
    e95c:	e3a0302e 	mov	r3, #46	; 0x2e
    e960:	e5c93000 	strb	r3, [r9]
    e964:	e1a03004 	mov	r3, r4
    e968:	e1a09000 	mov	r9, r0
    e96c:	e1a0400a 	mov	r4, sl
    e970:	e1a0000b 	mov	r0, fp
    e974:	e1a0a008 	mov	sl, r8
    e978:	e085b008 	add	fp, r5, r8
				while (zero_count > 0) {
    e97c:	e35c0000 	cmp	ip, #0
    e980:	0a00001c 	beq	e9f8 <double_to_hexstring.isra.0+0x2d0>
    e984:	e085400c 	add	r4, r5, ip
    e988:	e0850003 	add	r0, r5, r3
    e98c:	e0844003 	add	r4, r4, r3
					OUT('0');
    e990:	e4c0e001 	strb	lr, [r0], #1
				while (zero_count > 0) {
    e994:	e1540000 	cmp	r4, r0
    e998:	1afffffc 	bne	e990 <double_to_hexstring.isra.0+0x268>
    e99c:	e08cc003 	add	ip, ip, r3
    e9a0:	e28c3001 	add	r3, ip, #1
    e9a4:	e28c4002 	add	r4, ip, #2
    e9a8:	e0859003 	add	r9, r5, r3
    e9ac:	e085800c 	add	r8, r5, ip
    e9b0:	e0850004 	add	r0, r5, r4
				buf[pos++] = table[digit];
    e9b4:	e59dc008 	ldr	ip, [sp, #8]
		for (int i = 52 - 4; i >= 0; i -= 4) {
    e9b8:	e2411004 	sub	r1, r1, #4
    e9bc:	e3710004 	cmn	r1, #4
				buf[pos++] = table[digit];
    e9c0:	e3a0a001 	mov	sl, #1
    e9c4:	e7dc2002 	ldrb	r2, [ip, r2]
    e9c8:	e3a0c000 	mov	ip, #0
    e9cc:	e5c82000 	strb	r2, [r8]
		for (int i = 52 - 4; i >= 0; i -= 4) {
    e9d0:	1affffd1 	bne	e91c <double_to_hexstring.isra.0+0x1f4>
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    e9d4:	e59d3004 	ldr	r3, [sp, #4]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    e9d8:	e59d100c 	ldr	r1, [sp, #12]
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    e9dc:	e3530000 	cmp	r3, #0
    e9e0:	03a03070 	moveq	r3, #112	; 0x70
    e9e4:	13a03050 	movne	r3, #80	; 0x50
    e9e8:	e5c93000 	strb	r3, [r9]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    e9ec:	ebffff10 	bl	e634 <exponent_to_string>
    e9f0:	e0803004 	add	r3, r0, r4
    e9f4:	eaffff71 	b	e7c0 <double_to_hexstring.isra.0+0x98>
				while (zero_count > 0) {
    e9f8:	e1a08009 	mov	r8, r9
    e9fc:	e1a03004 	mov	r3, r4
    ea00:	e1a09000 	mov	r9, r0
    ea04:	e1a0400a 	mov	r4, sl
    ea08:	e1a0000b 	mov	r0, fp
    ea0c:	eaffffe8 	b	e9b4 <double_to_hexstring.isra.0+0x28c>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    ea10:	e302287c 	movw	r2, #10364	; 0x287c
    ea14:	e3402001 	movt	r2, #1
    ea18:	e58d2008 	str	r2, [sp, #8]
    ea1c:	eaffffb6 	b	e8fc <double_to_hexstring.isra.0+0x1d4>
    ea20:	e59fc0c4 	ldr	ip, [pc, #196]	; eaec <double_to_hexstring.isra.0+0x3c4>
    ea24:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    ea28:	e3a02041 	mov	r2, #65	; 0x41
    ea2c:	e3a0104e 	mov	r1, #78	; 0x4e
    ea30:	e3520000 	cmp	r2, #0
    ea34:	e4c01001 	strb	r1, [r0], #1
    ea38:	e2833001 	add	r3, r3, #1
    ea3c:	e1a01002 	mov	r1, r2
    ea40:	0affff5e 	beq	e7c0 <double_to_hexstring.isra.0+0x98>
    ea44:	e5fc2001 	ldrb	r2, [ip, #1]!
    ea48:	eafffff8 	b	ea30 <double_to_hexstring.isra.0+0x308>
    ea4c:	e59fc09c 	ldr	ip, [pc, #156]	; eaf0 <double_to_hexstring.isra.0+0x3c8>
    ea50:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    ea54:	e3a0204e 	mov	r2, #78	; 0x4e
    ea58:	e3a01049 	mov	r1, #73	; 0x49
    ea5c:	e3520000 	cmp	r2, #0
    ea60:	e4c01001 	strb	r1, [r0], #1
    ea64:	e2833001 	add	r3, r3, #1
    ea68:	e1a01002 	mov	r1, r2
    ea6c:	0affff53 	beq	e7c0 <double_to_hexstring.isra.0+0x98>
    ea70:	e5fc2001 	ldrb	r2, [ip, #1]!
    ea74:	eafffff8 	b	ea5c <double_to_hexstring.isra.0+0x334>
    ea78:	e59fc074 	ldr	ip, [pc, #116]	; eaf4 <double_to_hexstring.isra.0+0x3cc>
    ea7c:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    ea80:	e3a02045 	mov	r2, #69	; 0x45
    ea84:	e3a01044 	mov	r1, #68	; 0x44
    ea88:	e3520000 	cmp	r2, #0
    ea8c:	e4c01001 	strb	r1, [r0], #1
    ea90:	e2833001 	add	r3, r3, #1
    ea94:	e1a01002 	mov	r1, r2
    ea98:	0affff48 	beq	e7c0 <double_to_hexstring.isra.0+0x98>
    ea9c:	e5fc2001 	ldrb	r2, [ip, #1]!
    eaa0:	eafffff8 	b	ea88 <double_to_hexstring.isra.0+0x360>
    eaa4:	e59fc04c 	ldr	ip, [pc, #76]	; eaf8 <double_to_hexstring.isra.0+0x3d0>
    eaa8:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    eaac:	e3a02058 	mov	r2, #88	; 0x58
    eab0:	e3a01030 	mov	r1, #48	; 0x30
    eab4:	ea000000 	b	eabc <double_to_hexstring.isra.0+0x394>
    eab8:	e5fc2001 	ldrb	r2, [ip, #1]!
    eabc:	e3520000 	cmp	r2, #0
    eac0:	e4c01001 	strb	r1, [r0], #1
    eac4:	e2833001 	add	r3, r3, #1
    eac8:	e1a01002 	mov	r1, r2
    eacc:	1afffff9 	bne	eab8 <double_to_hexstring.isra.0+0x390>
    ead0:	eaffff3a 	b	e7c0 <double_to_hexstring.isra.0+0x98>
    ead4:	00012849 	.word	0x00012849
    ead8:	00012865 	.word	0x00012865
    eadc:	00012839 	.word	0x00012839
    eae0:	00012841 	.word	0x00012841
    eae4:	00012859 	.word	0x00012859
    eae8:	00012861 	.word	0x00012861
    eaec:	00012845 	.word	0x00012845
    eaf0:	0001283d 	.word	0x0001283d
    eaf4:	0001285d 	.word	0x0001285d
    eaf8:	00012851 	.word	0x00012851

0000eafc <longlong_to_hexstring.constprop.1>:
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    eafc:	e92d4010 	push	{r4, lr}
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    eb00:	e302187c 	movw	r1, #10364	; 0x287c
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    eb04:	e59dc008 	ldr	ip, [sp, #8]
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    eb08:	e3401001 	movt	r1, #1
    eb0c:	e302488c 	movw	r4, #10380	; 0x288c
    eb10:	e3404001 	movt	r4, #1
    eb14:	e31c0c01 	tst	ip, #256	; 0x100
    eb18:	e280c01e 	add	ip, r0, #30
    eb1c:	01a04001 	moveq	r4, r1
	buf[--pos] = 0;
    eb20:	e3a01000 	mov	r1, #0
    eb24:	e5c0101f 	strb	r1, [r0, #31]
		u /= 16;
    eb28:	e1a01222 	lsr	r1, r2, #4
    eb2c:	e1a00223 	lsr	r0, r3, #4
    eb30:	e1811e03 	orr	r1, r1, r3, lsl #28
		unsigned int digit = u % 16;
    eb34:	e202e00f 	and	lr, r2, #15
		u /= 16;
    eb38:	e1a03000 	mov	r3, r0
    eb3c:	e1a02001 	mov	r2, r1
		buf[--pos] = table[digit];
    eb40:	e7d4100e 	ldrb	r1, [r4, lr]
	} while (u != 0);
    eb44:	e192e003 	orrs	lr, r2, r3
		buf[--pos] = table[digit];
    eb48:	e1a0000c 	mov	r0, ip
    eb4c:	e44c1001 	strb	r1, [ip], #-1
	} while (u != 0);
    eb50:	1afffff4 	bne	eb28 <longlong_to_hexstring.constprop.1+0x2c>
    eb54:	e8bd8010 	pop	{r4, pc}

0000eb58 <double_to_string.constprop.2>:
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    eb58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    eb5c:	e1a0a000 	mov	sl, r0
    eb60:	ec576b10 	vmov	r6, r7, d0
    eb64:	e24dd018 	sub	sp, sp, #24
	if (neg) {
    eb68:	e3560000 	cmp	r6, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    eb6c:	e1a03007 	mov	r3, r7
	if (neg) {
    eb70:	e2d72000 	sbcs	r2, r7, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    eb74:	e7ea2a57 	ubfx	r2, r7, #20, #11
		OUT('-');
    eb78:	b3a0302d 	movlt	r3, #45	; 0x2d
	bool neg = !!(u.i & (1ULL << 63));
    eb7c:	e1a05007 	mov	r5, r7
		OUT('-');
    eb80:	b5c03000 	strblt	r3, [r0]
	if (exponent == 0x7ff) {
    eb84:	e30007ff 	movw	r0, #2047	; 0x7ff
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    eb88:	e7f39057 	ubfx	r9, r7, #0, #20
		OUT('-');
    eb8c:	b3a03001 	movlt	r3, #1
		d = -d;
    eb90:	b2277102 	eorlt	r7, r7, #-2147483648	; 0x80000000
	size_t pos = 0;
    eb94:	a3a03000 	movge	r3, #0
	if (exponent == 0x7ff) {
    eb98:	e1520000 	cmp	r2, r0
	bool neg = !!(u.i & (1ULL << 63));
    eb9c:	ee104a10 	vmov	r4, s0
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    eba0:	ee108a10 	vmov	r8, s0
	if (exponent == 0x7ff) {
    eba4:	0a000024 	beq	ec3c <double_to_string.constprop.2+0xe4>
	} else if (exponent == 0) {
    eba8:	e3520000 	cmp	r2, #0
    ebac:	1a00000e 	bne	ebec <double_to_string.constprop.2+0x94>
		if (fraction == 0) {
    ebb0:	e1982009 	orrs	r2, r8, r9
    ebb4:	0a00003f 	beq	ecb8 <double_to_string.constprop.2+0x160>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    ebb8:	e3110c01 	tst	r1, #256	; 0x100
    ebbc:	1a00008f 	bne	ee00 <double_to_string.constprop.2+0x2a8>
    ebc0:	e59fc2e0 	ldr	ip, [pc, #736]	; eea8 <double_to_string.constprop.2+0x350>
    ebc4:	e08a0003 	add	r0, sl, r3
    ebc8:	e3a02065 	mov	r2, #101	; 0x65
    ebcc:	e3a01064 	mov	r1, #100	; 0x64
    ebd0:	e3520000 	cmp	r2, #0
    ebd4:	e4c01001 	strb	r1, [r0], #1
    ebd8:	e2833001 	add	r3, r3, #1
    ebdc:	e1a01002 	mov	r1, r2
    ebe0:	0a000010 	beq	ec28 <double_to_string.constprop.2+0xd0>
    ebe4:	e5fc2001 	ldrb	r2, [ip, #1]!
    ebe8:	eafffff8 	b	ebd0 <double_to_string.constprop.2+0x78>
		if (exponent_signed < -52 || exponent_signed > 52) {
    ebec:	e2420ff2 	sub	r0, r2, #968	; 0x3c8
    ebf0:	e2400003 	sub	r0, r0, #3
    ebf4:	e3500068 	cmp	r0, #104	; 0x68
    ebf8:	9a00003a 	bls	ece8 <double_to_string.constprop.2+0x190>
    ebfc:	e59fc2a8 	ldr	ip, [pc, #680]	; eeac <double_to_string.constprop.2+0x354>
    ec00:	e08a0003 	add	r0, sl, r3
    ec04:	e3a02072 	mov	r2, #114	; 0x72
			OUTSTR("<range>");
    ec08:	e3a0103c 	mov	r1, #60	; 0x3c
    ec0c:	ea000000 	b	ec14 <double_to_string.constprop.2+0xbc>
    ec10:	e5fc2001 	ldrb	r2, [ip, #1]!
    ec14:	e3520000 	cmp	r2, #0
    ec18:	e4c01001 	strb	r1, [r0], #1
    ec1c:	e2833001 	add	r3, r3, #1
    ec20:	e1a01002 	mov	r1, r2
    ec24:	1afffff9 	bne	ec10 <double_to_string.constprop.2+0xb8>
	buf[pos] = 0;
    ec28:	e1a0000a 	mov	r0, sl
    ec2c:	e3a02000 	mov	r2, #0
    ec30:	e7ca2003 	strb	r2, [sl, r3]
}
    ec34:	e28dd018 	add	sp, sp, #24
    ec38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		if (fraction == 0) {
    ec3c:	e1982009 	orrs	r2, r8, r9
    ec40:	e2011c01 	and	r1, r1, #256	; 0x100
    ec44:	1a00000d 	bne	ec80 <double_to_string.constprop.2+0x128>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    ec48:	e3510000 	cmp	r1, #0
    ec4c:	1a00005f 	bne	edd0 <double_to_string.constprop.2+0x278>
    ec50:	e08a0003 	add	r0, sl, r3
    ec54:	e59fc254 	ldr	ip, [pc, #596]	; eeb0 <double_to_string.constprop.2+0x358>
    ec58:	e3a0206e 	mov	r2, #110	; 0x6e
    ec5c:	e3a01069 	mov	r1, #105	; 0x69
    ec60:	ea000000 	b	ec68 <double_to_string.constprop.2+0x110>
    ec64:	e5fc2001 	ldrb	r2, [ip, #1]!
    ec68:	e3520000 	cmp	r2, #0
    ec6c:	e4c01001 	strb	r1, [r0], #1
    ec70:	e2833001 	add	r3, r3, #1
    ec74:	e1a01002 	mov	r1, r2
    ec78:	1afffff9 	bne	ec64 <double_to_string.constprop.2+0x10c>
    ec7c:	eaffffe9 	b	ec28 <double_to_string.constprop.2+0xd0>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    ec80:	e3510000 	cmp	r1, #0
    ec84:	1a000045 	bne	eda0 <double_to_string.constprop.2+0x248>
    ec88:	e08a0003 	add	r0, sl, r3
    ec8c:	e59fc220 	ldr	ip, [pc, #544]	; eeb4 <double_to_string.constprop.2+0x35c>
    ec90:	e3a02061 	mov	r2, #97	; 0x61
    ec94:	e3a0106e 	mov	r1, #110	; 0x6e
    ec98:	ea000000 	b	eca0 <double_to_string.constprop.2+0x148>
    ec9c:	e5fc2001 	ldrb	r2, [ip, #1]!
    eca0:	e3520000 	cmp	r2, #0
    eca4:	e4c01001 	strb	r1, [r0], #1
    eca8:	e2833001 	add	r3, r3, #1
    ecac:	e1a01002 	mov	r1, r2
    ecb0:	1afffff9 	bne	ec9c <double_to_string.constprop.2+0x144>
    ecb4:	eaffffdb 	b	ec28 <double_to_string.constprop.2+0xd0>
    ecb8:	e59fc1f8 	ldr	ip, [pc, #504]	; eeb8 <double_to_string.constprop.2+0x360>
    ecbc:	e08a0003 	add	r0, sl, r3
		if (fraction == 0) {
    ecc0:	e3a0202e 	mov	r2, #46	; 0x2e
			OUTSTR("0.000000");
    ecc4:	e3a01030 	mov	r1, #48	; 0x30
    ecc8:	ea000000 	b	ecd0 <double_to_string.constprop.2+0x178>
    eccc:	e5fc2001 	ldrb	r2, [ip, #1]!
    ecd0:	e3520000 	cmp	r2, #0
    ecd4:	e4c01001 	strb	r1, [r0], #1
    ecd8:	e2833001 	add	r3, r3, #1
    ecdc:	e1a01002 	mov	r1, r2
    ece0:	1afffff9 	bne	eccc <double_to_string.constprop.2+0x174>
    ece4:	eaffffcf 	b	ec28 <double_to_string.constprop.2+0xd0>
    ece8:	e28ac018 	add	ip, sl, #24
				OUTREV('0');
    ecec:	e3a00030 	mov	r0, #48	; 0x30
			OUTREV(0);
    ecf0:	e3a0e000 	mov	lr, #0
    ecf4:	e1a0300a 	mov	r3, sl
    ecf8:	e5e3e01f 	strb	lr, [r3, #31]!
				OUTREV('0');
    ecfc:	e5630001 	strb	r0, [r3, #-1]!
			for (int i = 0; i <= 6; i++)
    ed00:	e153000c 	cmp	r3, ip
    ed04:	1afffffc 	bne	ecfc <double_to_string.constprop.2+0x1a4>
		int exponent_signed = exponent - 1023;
    ed08:	e2423fff 	sub	r3, r2, #1020	; 0x3fc
    ed0c:	e2433003 	sub	r3, r3, #3
			if (exponent_signed >= 0) {
    ed10:	e3530000 	cmp	r3, #0
				OUTREV('0');
    ed14:	b3a09017 	movlt	r9, #23
    ed18:	b5ca0017 	strblt	r0, [sl, #23]
			if (exponent_signed >= 0) {
    ed1c:	aa000042 	bge	ee2c <double_to_string.constprop.2+0x2d4>
				uint32_t frac = ((d - u) * 1000000) + .5;
    ed20:	ed9f6b5e 	vldr	d6, [pc, #376]	; eea0 <double_to_string.constprop.2+0x348>
			buf[decimal_spot] = '.';
    ed24:	e3a0302e 	mov	r3, #46	; 0x2e
				uint32_t frac = ((d - u) * 1000000) + .5;
    ed28:	eeb67b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    ed2c:	ec476b15 	vmov	d5, r6, r7
			buf[decimal_spot] = '.';
    ed30:	e5ca3020 	strb	r3, [sl, #32]
				uint32_t frac = ((d - u) * 1000000) + .5;
    ed34:	ee057b06 	vmla.f64	d7, d5, d6
    ed38:	eefc7bc7 	vcvt.u32.f64	s15, d7
    ed3c:	ee171a90 	vmov	r1, s15
				while (frac != 0) {
    ed40:	e3510000 	cmp	r1, #0
    ed44:	0a00000a 	beq	ed74 <double_to_string.constprop.2+0x21c>
					uint digit = frac % 10;
    ed48:	e30ccccd 	movw	ip, #52429	; 0xcccd
    ed4c:	e28a0027 	add	r0, sl, #39	; 0x27
    ed50:	e34ccccc 	movt	ip, #52428	; 0xcccc
    ed54:	e083219c 	umull	r2, r3, ip, r1
    ed58:	e1a031a3 	lsr	r3, r3, #3
    ed5c:	e0832103 	add	r2, r3, r3, lsl #2
    ed60:	e0412082 	sub	r2, r1, r2, lsl #1
				while (frac != 0) {
    ed64:	e2531000 	subs	r1, r3, #0
					buf[--i] = digit + '0';
    ed68:	e2823030 	add	r3, r2, #48	; 0x30
    ed6c:	e5603001 	strb	r3, [r0, #-1]!
				while (frac != 0) {
    ed70:	1afffff7 	bne	ed54 <double_to_string.constprop.2+0x1fc>
			if (neg)
    ed74:	e3540000 	cmp	r4, #0
    ed78:	e2d53000 	sbcs	r3, r5, #0
    ed7c:	a08a0009 	addge	r0, sl, r9
    ed80:	aaffffab 	bge	ec34 <double_to_string.constprop.2+0xdc>
				OUTREV('-');
    ed84:	e3590000 	cmp	r9, #0
    ed88:	12490001 	subne	r0, r9, #1
    ed8c:	13a0302d 	movne	r3, #45	; 0x2d
    ed90:	17ca3000 	strbne	r3, [sl, r0]
    ed94:	01a0000a 	moveq	r0, sl
    ed98:	108a0000 	addne	r0, sl, r0
    ed9c:	eaffffa4 	b	ec34 <double_to_string.constprop.2+0xdc>
    eda0:	e59fc114 	ldr	ip, [pc, #276]	; eebc <double_to_string.constprop.2+0x364>
    eda4:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    eda8:	e3a02041 	mov	r2, #65	; 0x41
    edac:	e3a0104e 	mov	r1, #78	; 0x4e
    edb0:	ea000000 	b	edb8 <double_to_string.constprop.2+0x260>
    edb4:	e5fc2001 	ldrb	r2, [ip, #1]!
    edb8:	e3520000 	cmp	r2, #0
    edbc:	e4c01001 	strb	r1, [r0], #1
    edc0:	e2833001 	add	r3, r3, #1
    edc4:	e1a01002 	mov	r1, r2
    edc8:	1afffff9 	bne	edb4 <double_to_string.constprop.2+0x25c>
    edcc:	eaffff95 	b	ec28 <double_to_string.constprop.2+0xd0>
    edd0:	e59fc0e8 	ldr	ip, [pc, #232]	; eec0 <double_to_string.constprop.2+0x368>
    edd4:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    edd8:	e3a0204e 	mov	r2, #78	; 0x4e
    eddc:	e3a01049 	mov	r1, #73	; 0x49
    ede0:	ea000000 	b	ede8 <double_to_string.constprop.2+0x290>
    ede4:	e5fc2001 	ldrb	r2, [ip, #1]!
    ede8:	e3520000 	cmp	r2, #0
    edec:	e4c01001 	strb	r1, [r0], #1
    edf0:	e2833001 	add	r3, r3, #1
    edf4:	e1a01002 	mov	r1, r2
    edf8:	1afffff9 	bne	ede4 <double_to_string.constprop.2+0x28c>
    edfc:	eaffff89 	b	ec28 <double_to_string.constprop.2+0xd0>
    ee00:	e59fc0bc 	ldr	ip, [pc, #188]	; eec4 <double_to_string.constprop.2+0x36c>
    ee04:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    ee08:	e3a02045 	mov	r2, #69	; 0x45
    ee0c:	e3a01044 	mov	r1, #68	; 0x44
    ee10:	e3520000 	cmp	r2, #0
    ee14:	e4c01001 	strb	r1, [r0], #1
    ee18:	e2833001 	add	r3, r3, #1
    ee1c:	e1a01002 	mov	r1, r2
    ee20:	0affff80 	beq	ec28 <double_to_string.constprop.2+0xd0>
    ee24:	e5fc2001 	ldrb	r2, [ip, #1]!
    ee28:	eafffff8 	b	ee10 <double_to_string.constprop.2+0x2b8>
				u >>= (52 - exponent_signed);
    ee2c:	e2633034 	rsb	r3, r3, #52	; 0x34
				u |= (1ULL<<52);
    ee30:	e3892601 	orr	r2, r9, #1048576	; 0x100000
				u >>= (52 - exponent_signed);
    ee34:	e1a08338 	lsr	r8, r8, r3
    ee38:	e263c020 	rsb	ip, r3, #32
    ee3c:	e2430020 	sub	r0, r3, #32
    ee40:	e1a09332 	lsr	r9, r2, r3
    ee44:	e1888c12 	orr	r8, r8, r2, lsl ip
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    ee48:	e58d1004 	str	r1, [sp, #4]
				u |= (1ULL<<52);
    ee4c:	e3a0c000 	mov	ip, #0
				u >>= (52 - exponent_signed);
    ee50:	e1888032 	orr	r8, r8, r2, lsr r0
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    ee54:	e28d1018 	add	r1, sp, #24
    ee58:	e3a00019 	mov	r0, #25
    ee5c:	e561c001 	strb	ip, [r1, #-1]!
    ee60:	e1a03009 	mov	r3, r9
    ee64:	e1a02008 	mov	r2, r8
    ee68:	e58d1008 	str	r1, [sp, #8]
    ee6c:	e58d0000 	str	r0, [sp]
    ee70:	e1a0000a 	mov	r0, sl
    ee74:	ebfffdad 	bl	e530 <longlong_to_string>
    ee78:	e1a01009 	mov	r1, r9
				pos = s - buf;
    ee7c:	e040900a 	sub	r9, r0, sl
    ee80:	e1a00008 	mov	r0, r8
    ee84:	fa0003c6 	blx	fda4 <__aeabi_ul2d>
    ee88:	ec476b17 	vmov	d7, r6, r7
    ee8c:	ec410b16 	vmov	d6, r0, r1
    ee90:	ee377b46 	vsub.f64	d7, d7, d6
    ee94:	ec576b17 	vmov	r6, r7, d7
    ee98:	eaffffa0 	b	ed20 <double_to_string.constprop.2+0x1c8>
    ee9c:	e320f000 	nop	{0}
    eea0:	00000000 	.word	0x00000000
    eea4:	412e8480 	.word	0x412e8480
    eea8:	00012859 	.word	0x00012859
    eeac:	00012875 	.word	0x00012875
    eeb0:	00012839 	.word	0x00012839
    eeb4:	00012841 	.word	0x00012841
    eeb8:	00012869 	.word	0x00012869
    eebc:	00012845 	.word	0x00012845
    eec0:	0001283d 	.word	0x0001283d
    eec4:	0001285d 	.word	0x0001285d

0000eec8 <_printf_engine>:
		str[wlen] = '\0';
	return wlen;
}

int _printf_engine(_printf_engine_output_func out, void *state, const char *fmt, va_list ap)
{
    eec8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
				if (s == 0)
					s = "<null>";
    eecc:	e302c830 	movw	ip, #10288	; 0x2830
{
    eed0:	e1a0b000 	mov	fp, r0
	size_t chars_written = 0;
    eed4:	e3a06000 	mov	r6, #0
{
    eed8:	e1a07001 	mov	r7, r1
    eedc:	e1a00002 	mov	r0, r2
    eee0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
					s = "<null>";
    eee4:	e340c001 	movt	ip, #1
{
    eee8:	e58d3010 	str	r3, [sp, #16]
					s = "<null>";
    eeec:	e58dc014 	str	ip, [sp, #20]
		while ((c = *fmt++) != 0) {
    eef0:	e5d01000 	ldrb	r1, [r0]
		signchar = '\0';
    eef4:	e3a03000 	mov	r3, #0
		while ((c = *fmt++) != 0) {
    eef8:	e2804001 	add	r4, r0, #1
		signchar = '\0';
    eefc:	e5cd3027 	strb	r3, [sp, #39]	; 0x27
		while ((c = *fmt++) != 0) {
    ef00:	e3510000 	cmp	r1, #0
    ef04:	0a000008 	beq	ef2c <_printf_engine+0x64>
			if (c == '%')
    ef08:	e3510025 	cmp	r1, #37	; 0x25
    ef0c:	1a000002 	bne	ef1c <_printf_engine+0x54>
    ef10:	ea00000c 	b	ef48 <_printf_engine+0x80>
    ef14:	e3530025 	cmp	r3, #37	; 0x25
    ef18:	0a00000b 	beq	ef4c <_printf_engine+0x84>
    ef1c:	e0441000 	sub	r1, r4, r0
		while ((c = *fmt++) != 0) {
    ef20:	e4d43001 	ldrb	r3, [r4], #1
    ef24:	e3530000 	cmp	r3, #0
    ef28:	1afffff9 	bne	ef14 <_printf_engine+0x4c>
		OUTPUT_STRING(s, string_len);
    ef2c:	e1a02007 	mov	r2, r7
    ef30:	e12fff3b 	blx	fp
    ef34:	e2503000 	subs	r3, r0, #0
    ef38:	aa00006c 	bge	f0f0 <_printf_engine+0x228>
#undef OUTPUT_STRING
#undef OUTPUT_CHAR

exit:
	return (err < 0) ? err : (int)chars_written;
}
    ef3c:	e1a00003 	mov	r0, r3
    ef40:	e28dd04c 	add	sp, sp, #76	; 0x4c
    ef44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		string_len = 0;
    ef48:	e3a01000 	mov	r1, #0
		OUTPUT_STRING(s, string_len);
    ef4c:	e1a02007 	mov	r2, r7
    ef50:	e12fff3b 	blx	fp
    ef54:	e2503000 	subs	r3, r0, #0
    ef58:	bafffff7 	blt	ef3c <_printf_engine+0x74>
		format_num = 0;
    ef5c:	e3a05000 	mov	r5, #0
		OUTPUT_STRING(s, string_len);
    ef60:	e0866003 	add	r6, r6, r3
		flags = 0;
    ef64:	e1a0a005 	mov	sl, r5
		c = *fmt++;
    ef68:	e4d49001 	ldrb	r9, [r4], #1
		if (c == 0)
    ef6c:	e3590000 	cmp	r9, #0
    ef70:	0a00005f 	beq	f0f4 <_printf_engine+0x22c>
		switch (c) {
    ef74:	e2493020 	sub	r3, r9, #32
    ef78:	e353005a 	cmp	r3, #90	; 0x5a
    ef7c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ef80:	ea000163 	b	f514 <_printf_engine+0x64c>
    ef84:	0000f3d0 	.word	0x0000f3d0
    ef88:	0000f514 	.word	0x0000f514
    ef8c:	0000f514 	.word	0x0000f514
    ef90:	0000f398 	.word	0x0000f398
    ef94:	0000f514 	.word	0x0000f514
    ef98:	0000f3a0 	.word	0x0000f3a0
    ef9c:	0000f514 	.word	0x0000f514
    efa0:	0000f514 	.word	0x0000f514
    efa4:	0000f514 	.word	0x0000f514
    efa8:	0000f514 	.word	0x0000f514
    efac:	0000f514 	.word	0x0000f514
    efb0:	0000f3d8 	.word	0x0000f3d8
    efb4:	0000f514 	.word	0x0000f514
    efb8:	0000f3e0 	.word	0x0000f3e0
    efbc:	0000ef68 	.word	0x0000ef68
    efc0:	0000f514 	.word	0x0000f514
    efc4:	0000f3e8 	.word	0x0000f3e8
    efc8:	0000f3e8 	.word	0x0000f3e8
    efcc:	0000f3e8 	.word	0x0000f3e8
    efd0:	0000f3e8 	.word	0x0000f3e8
    efd4:	0000f3e8 	.word	0x0000f3e8
    efd8:	0000f3e8 	.word	0x0000f3e8
    efdc:	0000f3e8 	.word	0x0000f3e8
    efe0:	0000f3e8 	.word	0x0000f3e8
    efe4:	0000f3e8 	.word	0x0000f3e8
    efe8:	0000f3e8 	.word	0x0000f3e8
    efec:	0000f514 	.word	0x0000f514
    eff0:	0000f514 	.word	0x0000f514
    eff4:	0000f514 	.word	0x0000f514
    eff8:	0000f514 	.word	0x0000f514
    effc:	0000f514 	.word	0x0000f514
    f000:	0000f514 	.word	0x0000f514
    f004:	0000f514 	.word	0x0000f514
    f008:	0000f2f4 	.word	0x0000f2f4
    f00c:	0000f514 	.word	0x0000f514
    f010:	0000f514 	.word	0x0000f514
    f014:	0000f514 	.word	0x0000f514
    f018:	0000f514 	.word	0x0000f514
    f01c:	0000f25c 	.word	0x0000f25c
    f020:	0000f514 	.word	0x0000f514
    f024:	0000f514 	.word	0x0000f514
    f028:	0000f514 	.word	0x0000f514
    f02c:	0000f514 	.word	0x0000f514
    f030:	0000f514 	.word	0x0000f514
    f034:	0000f514 	.word	0x0000f514
    f038:	0000f514 	.word	0x0000f514
    f03c:	0000f514 	.word	0x0000f514
    f040:	0000f514 	.word	0x0000f514
    f044:	0000f514 	.word	0x0000f514
    f048:	0000f514 	.word	0x0000f514
    f04c:	0000f514 	.word	0x0000f514
    f050:	0000f514 	.word	0x0000f514
    f054:	0000f514 	.word	0x0000f514
    f058:	0000f514 	.word	0x0000f514
    f05c:	0000f514 	.word	0x0000f514
    f060:	0000f514 	.word	0x0000f514
    f064:	0000f4d0 	.word	0x0000f4d0
    f068:	0000f514 	.word	0x0000f514
    f06c:	0000f514 	.word	0x0000f514
    f070:	0000f514 	.word	0x0000f514
    f074:	0000f514 	.word	0x0000f514
    f078:	0000f514 	.word	0x0000f514
    f07c:	0000f514 	.word	0x0000f514
    f080:	0000f514 	.word	0x0000f514
    f084:	0000f514 	.word	0x0000f514
    f088:	0000f2f8 	.word	0x0000f2f8
    f08c:	0000f514 	.word	0x0000f514
    f090:	0000f404 	.word	0x0000f404
    f094:	0000f43c 	.word	0x0000f43c
    f098:	0000f514 	.word	0x0000f514
    f09c:	0000f260 	.word	0x0000f260
    f0a0:	0000f514 	.word	0x0000f514
    f0a4:	0000f47c 	.word	0x0000f47c
    f0a8:	0000f43c 	.word	0x0000f43c
    f0ac:	0000f4e8 	.word	0x0000f4e8
    f0b0:	0000f514 	.word	0x0000f514
    f0b4:	0000f46c 	.word	0x0000f46c
    f0b8:	0000f514 	.word	0x0000f514
    f0bc:	0000f324 	.word	0x0000f324
    f0c0:	0000f514 	.word	0x0000f514
    f0c4:	0000f104 	.word	0x0000f104
    f0c8:	0000f514 	.word	0x0000f514
    f0cc:	0000f514 	.word	0x0000f514
    f0d0:	0000f4f0 	.word	0x0000f4f0
    f0d4:	0000f4e0 	.word	0x0000f4e0
    f0d8:	0000f48c 	.word	0x0000f48c
    f0dc:	0000f514 	.word	0x0000f514
    f0e0:	0000f514 	.word	0x0000f514
    f0e4:	0000f108 	.word	0x0000f108
    f0e8:	0000f514 	.word	0x0000f514
    f0ec:	0000f390 	.word	0x0000f390
		OUTPUT_STRING(s, string_len);
    f0f0:	e0866003 	add	r6, r6, r3
	return (err < 0) ? err : (int)chars_written;
    f0f4:	e1a03006 	mov	r3, r6
}
    f0f8:	e1a00003 	mov	r0, r3
    f0fc:	e28dd04c 	add	sp, sp, #76	; 0x4c
    f100:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= LONGFLAG | ALTFLAG;
    f104:	e38aa081 	orr	sl, sl, #129	; 0x81
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    f108:	e31a0002 	tst	sl, #2
    f10c:	0a00008f 	beq	f350 <_printf_engine+0x488>
    f110:	e59d3010 	ldr	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f114:	e2833007 	add	r3, r3, #7
    f118:	e3c33007 	bic	r3, r3, #7
    f11c:	e2832008 	add	r2, r3, #8
    f120:	e58d2010 	str	r2, [sp, #16]
    f124:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    f128:	e58da000 	str	sl, [sp]
    f12c:	e28d0028 	add	r0, sp, #40	; 0x28
    f130:	ebfffe71 	bl	eafc <longlong_to_hexstring.constprop.1>
				if (flags & ALTFLAG) {
    f134:	e31a0080 	tst	sl, #128	; 0x80
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    f138:	e1a09000 	mov	r9, r0
				if (flags & ALTFLAG) {
    f13c:	0a000051 	beq	f288 <_printf_engine+0x3c0>
					OUTPUT_CHAR('0');
    f140:	e3a03030 	mov	r3, #48	; 0x30
    f144:	e28d8048 	add	r8, sp, #72	; 0x48
    f148:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    f14c:	e1a02007 	mov	r2, r7
    f150:	e1a00008 	mov	r0, r8
    f154:	e3a01001 	mov	r1, #1
    f158:	e12fff3b 	blx	fp
    f15c:	e2503000 	subs	r3, r0, #0
    f160:	baffff75 	blt	ef3c <_printf_engine+0x74>
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    f164:	e31a0c01 	tst	sl, #256	; 0x100
    f168:	e1a00008 	mov	r0, r8
    f16c:	03a0c078 	moveq	ip, #120	; 0x78
    f170:	13a0c058 	movne	ip, #88	; 0x58
    f174:	e1a02007 	mov	r2, r7
    f178:	e3a01001 	mov	r1, #1
    f17c:	e5cdc024 	strb	ip, [sp, #36]	; 0x24
					OUTPUT_CHAR('0');
    f180:	e0836006 	add	r6, r3, r6
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    f184:	e12fff3b 	blx	fp
    f188:	e2503000 	subs	r3, r0, #0
    f18c:	baffff6a 	blt	ef3c <_printf_engine+0x74>
		if (flags & LEFTFORMATFLAG) {
    f190:	e31a0b02 	tst	sl, #2048	; 0x800
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    f194:	e0836006 	add	r6, r3, r6
			OUTPUT_STRING(s, SIZE_MAX);
    f198:	e1a00009 	mov	r0, r9
		if (flags & LEFTFORMATFLAG) {
    f19c:	1a00003c 	bne	f294 <_printf_engine+0x3cc>
    f1a0:	e20a8a01 	and	r8, sl, #4096	; 0x1000
    f1a4:	e58d8018 	str	r8, [sp, #24]
			string_len = strlen(s);
    f1a8:	eb000217 	bl	fa0c <strlen>
			if (signchar != '\0' && format_num > 0)
    f1ac:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
			string_len = strlen(s);
    f1b0:	e1a0a000 	mov	sl, r0
			if (signchar != '\0' && format_num > 0)
    f1b4:	e3530000 	cmp	r3, #0
    f1b8:	0a000070 	beq	f380 <_printf_engine+0x4b8>
    f1bc:	e3550000 	cmp	r5, #0
    f1c0:	0a000102 	beq	f5d0 <_printf_engine+0x708>
			if (flags & LEADZEROFLAG && signchar != '\0')
    f1c4:	e3580000 	cmp	r8, #0
				format_num--;
    f1c8:	e2455001 	sub	r5, r5, #1
			if (flags & LEADZEROFLAG && signchar != '\0')
    f1cc:	0a00016c 	beq	f784 <_printf_engine+0x8bc>
				OUTPUT_CHAR(signchar);
    f1d0:	e28d8048 	add	r8, sp, #72	; 0x48
    f1d4:	e1a02007 	mov	r2, r7
    f1d8:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    f1dc:	e3a01001 	mov	r1, #1
    f1e0:	e1a00008 	mov	r0, r8
    f1e4:	e12fff3b 	blx	fp
    f1e8:	e2503000 	subs	r3, r0, #0
    f1ec:	baffff52 	blt	ef3c <_printf_engine+0x74>
			for (; format_num > string_len; format_num--)
    f1f0:	e15a0005 	cmp	sl, r5
				OUTPUT_CHAR(signchar);
    f1f4:	e0866003 	add	r6, r6, r3
			for (; format_num > string_len; format_num--)
    f1f8:	2a0000e7 	bcs	f59c <_printf_engine+0x6d4>
    f1fc:	e59d3018 	ldr	r3, [sp, #24]
    f200:	e58d401c 	str	r4, [sp, #28]
    f204:	e1a0400a 	mov	r4, sl
    f208:	e1a0a008 	mov	sl, r8
    f20c:	e3530000 	cmp	r3, #0
    f210:	13a03030 	movne	r3, #48	; 0x30
    f214:	03a03020 	moveq	r3, #32
    f218:	e1a08003 	mov	r8, r3
    f21c:	ea000001 	b	f228 <_printf_engine+0x360>
    f220:	e1540005 	cmp	r4, r5
    f224:	0a0000cc 	beq	f55c <_printf_engine+0x694>
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    f228:	e1a02007 	mov	r2, r7
    f22c:	e3a01001 	mov	r1, #1
    f230:	e1a0000a 	mov	r0, sl
    f234:	e5cd8024 	strb	r8, [sp, #36]	; 0x24
    f238:	e12fff3b 	blx	fp
    f23c:	e3500000 	cmp	r0, #0
			for (; format_num > string_len; format_num--)
    f240:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    f244:	e0866000 	add	r6, r6, r0
    f248:	aafffff4 	bge	f220 <_printf_engine+0x358>
    f24c:	e1a03000 	mov	r3, r0
}
    f250:	e1a00003 	mov	r0, r3
    f254:	e28dd04c 	add	sp, sp, #76	; 0x4c
    f258:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= CAPSFLAG;
    f25c:	e38aac01 	orr	sl, sl, #256	; 0x100
				double d = va_arg(ap, double);
    f260:	e59d3010 	ldr	r3, [sp, #16]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    f264:	e1a0100a 	mov	r1, sl
    f268:	e28d0028 	add	r0, sp, #40	; 0x28
				double d = va_arg(ap, double);
    f26c:	e2833007 	add	r3, r3, #7
    f270:	e3c33007 	bic	r3, r3, #7
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    f274:	ed930b00 	vldr	d0, [r3]
				double d = va_arg(ap, double);
    f278:	e2833008 	add	r3, r3, #8
    f27c:	e58d3010 	str	r3, [sp, #16]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    f280:	ebfffe34 	bl	eb58 <double_to_string.constprop.2>
    f284:	e1a09000 	mov	r9, r0
		if (flags & LEFTFORMATFLAG) {
    f288:	e31a0b02 	tst	sl, #2048	; 0x800
			OUTPUT_STRING(s, SIZE_MAX);
    f28c:	e1a00009 	mov	r0, r9
		if (flags & LEFTFORMATFLAG) {
    f290:	0affffc2 	beq	f1a0 <_printf_engine+0x2d8>
			OUTPUT_STRING(s, SIZE_MAX);
    f294:	e1a02007 	mov	r2, r7
    f298:	e3e01000 	mvn	r1, #0
    f29c:	e12fff3b 	blx	fp
    f2a0:	e2503000 	subs	r3, r0, #0
    f2a4:	baffff24 	blt	ef3c <_printf_engine+0x74>
			for (; format_num > written; format_num--)
    f2a8:	e1530005 	cmp	r3, r5
			OUTPUT_STRING(s, SIZE_MAX);
    f2ac:	e1a09003 	mov	r9, r3
    f2b0:	e0866003 	add	r6, r6, r3
			for (; format_num > written; format_num--)
    f2b4:	2a000023 	bcs	f348 <_printf_engine+0x480>
    f2b8:	e28d8024 	add	r8, sp, #36	; 0x24
				OUTPUT_CHAR(' ');
    f2bc:	e3a0a020 	mov	sl, #32
    f2c0:	ea000001 	b	f2cc <_printf_engine+0x404>
			for (; format_num > written; format_num--)
    f2c4:	e1590005 	cmp	r9, r5
    f2c8:	0a00001e 	beq	f348 <_printf_engine+0x480>
				OUTPUT_CHAR(' ');
    f2cc:	e1a02007 	mov	r2, r7
    f2d0:	e3a01001 	mov	r1, #1
    f2d4:	e1a00008 	mov	r0, r8
    f2d8:	e5cda024 	strb	sl, [sp, #36]	; 0x24
    f2dc:	e12fff3b 	blx	fp
    f2e0:	e3500000 	cmp	r0, #0
			for (; format_num > written; format_num--)
    f2e4:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(' ');
    f2e8:	e0866000 	add	r6, r6, r0
    f2ec:	aafffff4 	bge	f2c4 <_printf_engine+0x3fc>
    f2f0:	eaffffd5 	b	f24c <_printf_engine+0x384>
				flags |= CAPSFLAG;
    f2f4:	e38aac01 	orr	sl, sl, #256	; 0x100
				double d = va_arg(ap, double);
    f2f8:	e59d3010 	ldr	r3, [sp, #16]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    f2fc:	e1a0100a 	mov	r1, sl
    f300:	e28d0028 	add	r0, sp, #40	; 0x28
				double d = va_arg(ap, double);
    f304:	e2833007 	add	r3, r3, #7
    f308:	e3c33007 	bic	r3, r3, #7
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    f30c:	ed930b00 	vldr	d0, [r3]
				double d = va_arg(ap, double);
    f310:	e2833008 	add	r3, r3, #8
    f314:	e58d3010 	str	r3, [sp, #16]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    f318:	ebfffd02 	bl	e728 <double_to_hexstring.isra.0>
    f31c:	e1a09000 	mov	r9, r0
				goto _output_string;
    f320:	eaffffd8 	b	f288 <_printf_engine+0x3c0>
				ptr = va_arg(ap, void *);
    f324:	e59d3010 	ldr	r3, [sp, #16]
				if (flags & LONGLONGFLAG)
    f328:	e31a0002 	tst	sl, #2
				ptr = va_arg(ap, void *);
    f32c:	e2832004 	add	r2, r3, #4
    f330:	e5933000 	ldr	r3, [r3]
				if (flags & LONGLONGFLAG)
    f334:	0a0000c3 	beq	f648 <_printf_engine+0x780>
				ptr = va_arg(ap, void *);
    f338:	e58d2010 	str	r2, [sp, #16]
					*(long long *)ptr = chars_written;
    f33c:	e3a02000 	mov	r2, #0
    f340:	e5836000 	str	r6, [r3]
    f344:	e5832004 	str	r2, [r3, #4]
				ptr = va_arg(ap, void *);
    f348:	e1a00004 	mov	r0, r4
    f34c:	eafffee7 	b	eef0 <_printf_engine+0x28>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f350:	e31a0001 	tst	sl, #1
    f354:	1a000097 	bne	f5b8 <_printf_engine+0x6f0>
    f358:	e31a0008 	tst	sl, #8
    f35c:	1a0000c6 	bne	f67c <_printf_engine+0x7b4>
    f360:	e31a0004 	tst	sl, #4
    f364:	0a0000d6 	beq	f6c4 <_printf_engine+0x7fc>
    f368:	e59d1010 	ldr	r1, [sp, #16]
    f36c:	e3a03000 	mov	r3, #0
    f370:	e1d120b0 	ldrh	r2, [r1]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    f374:	e2811004 	add	r1, r1, #4
    f378:	e58d1010 	str	r1, [sp, #16]
    f37c:	eaffff69 	b	f128 <_printf_engine+0x260>
			for (; format_num > string_len; format_num--)
    f380:	e1550000 	cmp	r5, r0
    f384:	9a000075 	bls	f560 <_printf_engine+0x698>
    f388:	e28d8024 	add	r8, sp, #36	; 0x24
    f38c:	eaffff9a 	b	f1fc <_printf_engine+0x334>
				flags |= SIZETFLAG;
    f390:	e38aa010 	orr	sl, sl, #16
				goto next_format;
    f394:	eafffef3 	b	ef68 <_printf_engine+0xa0>
				flags |= ALTFLAG;
    f398:	e38aa080 	orr	sl, sl, #128	; 0x80
				goto next_format;
    f39c:	eafffef1 	b	ef68 <_printf_engine+0xa0>
				OUTPUT_CHAR('%');
    f3a0:	e3a03025 	mov	r3, #37	; 0x25
    f3a4:	e28d8048 	add	r8, sp, #72	; 0x48
    f3a8:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    f3ac:	e1a02007 	mov	r2, r7
    f3b0:	e1a00008 	mov	r0, r8
    f3b4:	e3a01001 	mov	r1, #1
    f3b8:	e12fff3b 	blx	fp
    f3bc:	e2503000 	subs	r3, r0, #0
    f3c0:	bafffedd 	blt	ef3c <_printf_engine+0x74>
				OUTPUT_CHAR(c);
    f3c4:	e0836006 	add	r6, r3, r6
				ptr = va_arg(ap, void *);
    f3c8:	e1a00004 	mov	r0, r4
    f3cc:	eafffec7 	b	eef0 <_printf_engine+0x28>
				flags |= BLANKPOSFLAG;
    f3d0:	e38aaa02 	orr	sl, sl, #8192	; 0x2000
				goto next_format;
    f3d4:	eafffee3 	b	ef68 <_printf_engine+0xa0>
				flags |= SHOWSIGNFLAG;
    f3d8:	e38aac02 	orr	sl, sl, #512	; 0x200
				goto next_format;
    f3dc:	eafffee1 	b	ef68 <_printf_engine+0xa0>
				flags |= LEFTFORMATFLAG;
    f3e0:	e38aab02 	orr	sl, sl, #2048	; 0x800
				goto next_format;
    f3e4:	eafffedf 	b	ef68 <_printf_engine+0xa0>
				if (c == '0' && format_num == 0)
    f3e8:	e3590030 	cmp	r9, #48	; 0x30
    f3ec:	03550000 	cmpeq	r5, #0
				format_num *= 10;
    f3f0:	e0855105 	add	r5, r5, r5, lsl #2
				format_num += c - '0';
    f3f4:	e2499030 	sub	r9, r9, #48	; 0x30
					flags |= LEADZEROFLAG;
    f3f8:	038aaa01 	orreq	sl, sl, #4096	; 0x1000
				format_num += c - '0';
    f3fc:	e0895085 	add	r5, r9, r5, lsl #1
				goto next_format;
    f400:	eafffed8 	b	ef68 <_printf_engine+0xa0>
				uc = va_arg(ap, unsigned int);
    f404:	e59d5010 	ldr	r5, [sp, #16]
    f408:	e28d8048 	add	r8, sp, #72	; 0x48
				OUTPUT_CHAR(uc);
    f40c:	e1a02007 	mov	r2, r7
    f410:	e3a01001 	mov	r1, #1
				uc = va_arg(ap, unsigned int);
    f414:	e5953000 	ldr	r3, [r5]
    f418:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
				OUTPUT_CHAR(uc);
    f41c:	e1a00008 	mov	r0, r8
    f420:	e12fff3b 	blx	fp
    f424:	e2503000 	subs	r3, r0, #0
    f428:	bafffec3 	blt	ef3c <_printf_engine+0x74>
				uc = va_arg(ap, unsigned int);
    f42c:	e2852004 	add	r2, r5, #4
				OUTPUT_CHAR(uc);
    f430:	e0866003 	add	r6, r6, r3
				uc = va_arg(ap, unsigned int);
    f434:	e58d2010 	str	r2, [sp, #16]
				break;
    f438:	eaffffc2 	b	f348 <_printf_engine+0x480>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f43c:	e31a0002 	tst	sl, #2
    f440:	1a000066 	bne	f5e0 <_printf_engine+0x718>
    f444:	e31a0001 	tst	sl, #1
    f448:	1a000097 	bne	f6ac <_printf_engine+0x7e4>
    f44c:	e31a0008 	tst	sl, #8
    f450:	0a0000a4 	beq	f6e8 <_printf_engine+0x820>
    f454:	e59d1010 	ldr	r1, [sp, #16]
    f458:	e1d120d0 	ldrsb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    f45c:	e2811004 	add	r1, r1, #4
    f460:	e58d1010 	str	r1, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f464:	e1a03fc2 	asr	r3, r2, #31
    f468:	ea000062 	b	f5f8 <_printf_engine+0x730>
				if (flags & LONGFLAG)
    f46c:	e31a0001 	tst	sl, #1
					flags |= LONGLONGFLAG;
    f470:	138aa002 	orrne	sl, sl, #2
				flags |= LONGFLAG;
    f474:	e38aa001 	orr	sl, sl, #1
				goto next_format;
    f478:	eafffeba 	b	ef68 <_printf_engine+0xa0>
				if (flags & HALFFLAG)
    f47c:	e31a0004 	tst	sl, #4
					flags |= HALFHALFFLAG;
    f480:	138aa008 	orrne	sl, sl, #8
				flags |= HALFFLAG;
    f484:	e38aa004 	orr	sl, sl, #4
				goto next_format;
    f488:	eafffeb6 	b	ef68 <_printf_engine+0xa0>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    f48c:	e31a0002 	tst	sl, #2
    f490:	0a000062 	beq	f620 <_printf_engine+0x758>
    f494:	e59d3010 	ldr	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f498:	e2833007 	add	r3, r3, #7
    f49c:	e3c33007 	bic	r3, r3, #7
    f4a0:	e2832008 	add	r2, r3, #8
    f4a4:	e58d2010 	str	r2, [sp, #16]
    f4a8:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    f4ac:	e28d0027 	add	r0, sp, #39	; 0x27
    f4b0:	e3a01020 	mov	r1, #32
    f4b4:	e58d0008 	str	r0, [sp, #8]
    f4b8:	e28d0028 	add	r0, sp, #40	; 0x28
    f4bc:	e58da004 	str	sl, [sp, #4]
    f4c0:	e58d1000 	str	r1, [sp]
    f4c4:	ebfffc19 	bl	e530 <longlong_to_string>
    f4c8:	e1a09000 	mov	r9, r0
				goto _output_string;
    f4cc:	eaffff6d 	b	f288 <_printf_engine+0x3c0>
				flags |= CAPSFLAG;
    f4d0:	e38aac01 	orr	sl, sl, #256	; 0x100
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    f4d4:	e31a0002 	tst	sl, #2
    f4d8:	0affff9c 	beq	f350 <_printf_engine+0x488>
    f4dc:	eaffff0b 	b	f110 <_printf_engine+0x248>
				flags |= PTRDIFFFLAG;
    f4e0:	e38aa040 	orr	sl, sl, #64	; 0x40
				goto next_format;
    f4e4:	eafffe9f 	b	ef68 <_printf_engine+0xa0>
				flags |= INTMAXFLAG;
    f4e8:	e38aa020 	orr	sl, sl, #32
				goto next_format;
    f4ec:	eafffe9d 	b	ef68 <_printf_engine+0xa0>
				s = va_arg(ap, const char *);
    f4f0:	e59d3010 	ldr	r3, [sp, #16]
				flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
    f4f4:	e3caaa01 	bic	sl, sl, #4096	; 0x1000
				s = va_arg(ap, const char *);
    f4f8:	e5939000 	ldr	r9, [r3]
    f4fc:	e2833004 	add	r3, r3, #4
    f500:	e58d3010 	str	r3, [sp, #16]
					s = "<null>";
    f504:	e59d3014 	ldr	r3, [sp, #20]
    f508:	e3590000 	cmp	r9, #0
    f50c:	01a09003 	moveq	r9, r3
				goto _output_string;
    f510:	eaffff5c 	b	f288 <_printf_engine+0x3c0>
				OUTPUT_CHAR('%');
    f514:	e3a03025 	mov	r3, #37	; 0x25
    f518:	e28d8048 	add	r8, sp, #72	; 0x48
    f51c:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    f520:	e1a02007 	mov	r2, r7
    f524:	e1a00008 	mov	r0, r8
    f528:	e3a01001 	mov	r1, #1
    f52c:	e12fff3b 	blx	fp
    f530:	e2505000 	subs	r5, r0, #0
    f534:	ba000090 	blt	f77c <_printf_engine+0x8b4>
				OUTPUT_CHAR(c);
    f538:	e1a00008 	mov	r0, r8
    f53c:	e1a02007 	mov	r2, r7
    f540:	e3a01001 	mov	r1, #1
    f544:	e5cd9024 	strb	r9, [sp, #36]	; 0x24
    f548:	e12fff3b 	blx	fp
    f54c:	e2503000 	subs	r3, r0, #0
    f550:	bafffe79 	blt	ef3c <_printf_engine+0x74>
				OUTPUT_CHAR('%');
    f554:	e0856006 	add	r6, r5, r6
    f558:	eaffff99 	b	f3c4 <_printf_engine+0x4fc>
    f55c:	e59d401c 	ldr	r4, [sp, #28]
			if (!(flags & LEADZEROFLAG) && signchar != '\0')
    f560:	e59d3018 	ldr	r3, [sp, #24]
    f564:	e3530000 	cmp	r3, #0
    f568:	1a00000b 	bne	f59c <_printf_engine+0x6d4>
    f56c:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
    f570:	e3530000 	cmp	r3, #0
    f574:	0a000008 	beq	f59c <_printf_engine+0x6d4>
				OUTPUT_CHAR(signchar);
    f578:	e28d8048 	add	r8, sp, #72	; 0x48
    f57c:	e1a02007 	mov	r2, r7
    f580:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    f584:	e3a01001 	mov	r1, #1
    f588:	e1a00008 	mov	r0, r8
    f58c:	e12fff3b 	blx	fp
    f590:	e2503000 	subs	r3, r0, #0
    f594:	bafffe68 	blt	ef3c <_printf_engine+0x74>
    f598:	e0866003 	add	r6, r6, r3
			OUTPUT_STRING(s, SIZE_MAX);
    f59c:	e1a00009 	mov	r0, r9
    f5a0:	e1a02007 	mov	r2, r7
    f5a4:	e3e01000 	mvn	r1, #0
    f5a8:	e12fff3b 	blx	fp
    f5ac:	e2503000 	subs	r3, r0, #0
    f5b0:	bafffe61 	blt	ef3c <_printf_engine+0x74>
    f5b4:	eaffff82 	b	f3c4 <_printf_engine+0x4fc>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f5b8:	e59d3010 	ldr	r3, [sp, #16]
    f5bc:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    f5c0:	e2833004 	add	r3, r3, #4
    f5c4:	e58d3010 	str	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f5c8:	e3a03000 	mov	r3, #0
    f5cc:	eafffed5 	b	f128 <_printf_engine+0x260>
			if (flags & LEADZEROFLAG && signchar != '\0')
    f5d0:	e59d2018 	ldr	r2, [sp, #24]
    f5d4:	e3520000 	cmp	r2, #0
    f5d8:	1afffefc 	bne	f1d0 <_printf_engine+0x308>
    f5dc:	eaffffe5 	b	f578 <_printf_engine+0x6b0>
				    (flags & INTMAXFLAG) ? va_arg(ap, intmax_t) :
    f5e0:	e59d3010 	ldr	r3, [sp, #16]
    f5e4:	e2833007 	add	r3, r3, #7
    f5e8:	e3c33007 	bic	r3, r3, #7
    f5ec:	e2832008 	add	r2, r3, #8
    f5f0:	e58d2010 	str	r2, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f5f4:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    f5f8:	e28d0027 	add	r0, sp, #39	; 0x27
    f5fc:	e3a01020 	mov	r1, #32
				flags |= SIGNEDFLAG;
    f600:	e38aab01 	orr	sl, sl, #1024	; 0x400
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    f604:	e58d0008 	str	r0, [sp, #8]
    f608:	e58da004 	str	sl, [sp, #4]
    f60c:	e28d0028 	add	r0, sp, #40	; 0x28
    f610:	e58d1000 	str	r1, [sp]
    f614:	ebfffbc5 	bl	e530 <longlong_to_string>
    f618:	e1a09000 	mov	r9, r0
				goto _output_string;
    f61c:	eaffff19 	b	f288 <_printf_engine+0x3c0>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f620:	e31a0001 	tst	sl, #1
    f624:	1a00001a 	bne	f694 <_printf_engine+0x7cc>
    f628:	e31a0008 	tst	sl, #8
    f62c:	0a000035 	beq	f708 <_printf_engine+0x840>
    f630:	e59d1010 	ldr	r1, [sp, #16]
    f634:	e3a03000 	mov	r3, #0
    f638:	e5d12000 	ldrb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    f63c:	e2811004 	add	r1, r1, #4
    f640:	e58d1010 	str	r1, [sp, #16]
    f644:	eaffff98 	b	f4ac <_printf_engine+0x5e4>
				else if (flags & LONGFLAG)
    f648:	e31a0001 	tst	sl, #1
    f64c:	1a000007 	bne	f670 <_printf_engine+0x7a8>
				else if (flags & HALFHALFFLAG)
    f650:	e31a0008 	tst	sl, #8
					*(signed char *)ptr = chars_written;
    f654:	15c36000 	strbne	r6, [r3]
				ptr = va_arg(ap, void *);
    f658:	158d2010 	strne	r2, [sp, #16]
				else if (flags & HALFHALFFLAG)
    f65c:	1affff39 	bne	f348 <_printf_engine+0x480>
				else if (flags & HALFFLAG)
    f660:	e31a0004 	tst	sl, #4
					*(short *)ptr = chars_written;
    f664:	11c360b0 	strhne	r6, [r3]
				ptr = va_arg(ap, void *);
    f668:	158d2010 	strne	r2, [sp, #16]
				else if (flags & HALFFLAG)
    f66c:	1affff35 	bne	f348 <_printf_engine+0x480>
					*(int *)ptr = chars_written;
    f670:	e5836000 	str	r6, [r3]
				ptr = va_arg(ap, void *);
    f674:	e58d2010 	str	r2, [sp, #16]
    f678:	eaffff32 	b	f348 <_printf_engine+0x480>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f67c:	e59d1010 	ldr	r1, [sp, #16]
    f680:	e3a03000 	mov	r3, #0
    f684:	e5d12000 	ldrb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    f688:	e2811004 	add	r1, r1, #4
    f68c:	e58d1010 	str	r1, [sp, #16]
    f690:	eafffea4 	b	f128 <_printf_engine+0x260>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f694:	e59d3010 	ldr	r3, [sp, #16]
    f698:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    f69c:	e2833004 	add	r3, r3, #4
    f6a0:	e58d3010 	str	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f6a4:	e3a03000 	mov	r3, #0
    f6a8:	eaffff7f 	b	f4ac <_printf_engine+0x5e4>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f6ac:	e59d3010 	ldr	r3, [sp, #16]
    f6b0:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
    f6b4:	e2833004 	add	r3, r3, #4
    f6b8:	e58d3010 	str	r3, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f6bc:	e1a03fc2 	asr	r3, r2, #31
    f6c0:	eaffffcc 	b	f5f8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f6c4:	e31a0010 	tst	sl, #16
    f6c8:	1affffba 	bne	f5b8 <_printf_engine+0x6f0>
    f6cc:	e31a0020 	tst	sl, #32
    f6d0:	e59d3010 	ldr	r3, [sp, #16]
    f6d4:	1afffe8e 	bne	f114 <_printf_engine+0x24c>
    f6d8:	e4932004 	ldr	r2, [r3], #4
    f6dc:	e58d3010 	str	r3, [sp, #16]
    f6e0:	e3a03000 	mov	r3, #0
    f6e4:	eafffe8f 	b	f128 <_printf_engine+0x260>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f6e8:	e31a0004 	tst	sl, #4
    f6ec:	0a00000d 	beq	f728 <_printf_engine+0x860>
    f6f0:	e59d1010 	ldr	r1, [sp, #16]
    f6f4:	e1d120f0 	ldrsh	r2, [r1]
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    f6f8:	e2811004 	add	r1, r1, #4
    f6fc:	e58d1010 	str	r1, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f700:	e1a03fc2 	asr	r3, r2, #31
    f704:	eaffffbb 	b	f5f8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f708:	e31a0004 	tst	sl, #4
    f70c:	0a000011 	beq	f758 <_printf_engine+0x890>
    f710:	e59d1010 	ldr	r1, [sp, #16]
    f714:	e3a03000 	mov	r3, #0
    f718:	e1d120b0 	ldrh	r2, [r1]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    f71c:	e2811004 	add	r1, r1, #4
    f720:	e58d1010 	str	r1, [sp, #16]
    f724:	eaffff60 	b	f4ac <_printf_engine+0x5e4>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f728:	e31a0010 	tst	sl, #16
    f72c:	1affffde 	bne	f6ac <_printf_engine+0x7e4>
    f730:	e31a0020 	tst	sl, #32
    f734:	1affffa9 	bne	f5e0 <_printf_engine+0x718>
    f738:	e59d2010 	ldr	r2, [sp, #16]
    f73c:	e31a0040 	tst	sl, #64	; 0x40
    f740:	e2823004 	add	r3, r2, #4
    f744:	059d2010 	ldreq	r2, [sp, #16]
    f748:	e5922000 	ldr	r2, [r2]
				    va_arg(ap, int);
    f74c:	e58d3010 	str	r3, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    f750:	e1a03fc2 	asr	r3, r2, #31
    f754:	eaffffa7 	b	f5f8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    f758:	e31a0010 	tst	sl, #16
    f75c:	1affffcc 	bne	f694 <_printf_engine+0x7cc>
    f760:	e31a0020 	tst	sl, #32
    f764:	e59d3010 	ldr	r3, [sp, #16]
    f768:	1affff4a 	bne	f498 <_printf_engine+0x5d0>
    f76c:	e4932004 	ldr	r2, [r3], #4
    f770:	e58d3010 	str	r3, [sp, #16]
    f774:	e3a03000 	mov	r3, #0
    f778:	eaffff4b 	b	f4ac <_printf_engine+0x5e4>
				OUTPUT_CHAR('%');
    f77c:	e1a03005 	mov	r3, r5
    f780:	eafffded 	b	ef3c <_printf_engine+0x74>
			for (; format_num > string_len; format_num--)
    f784:	e1500005 	cmp	r0, r5
    f788:	3afffefe 	bcc	f388 <_printf_engine+0x4c0>
    f78c:	eaffff77 	b	f570 <_printf_engine+0x6a8>

0000f790 <vsnprintf>:
{
    f790:	e92d4070 	push	{r4, r5, r6, lr}
    f794:	e1a04000 	mov	r4, r0
    f798:	e24dd010 	sub	sp, sp, #16
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    f79c:	e30e06b8 	movw	r0, #59064	; 0xe6b8
{
    f7a0:	e1a05001 	mov	r5, r1
	args.pos = 0;
    f7a4:	e3a06000 	mov	r6, #0
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    f7a8:	e28d1004 	add	r1, sp, #4
    f7ac:	e3400000 	movt	r0, #0
	args.len = len;
    f7b0:	e1cd40f4 	strd	r4, [sp, #4]
	args.pos = 0;
    f7b4:	e58d600c 	str	r6, [sp, #12]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    f7b8:	ebfffdc2 	bl	eec8 <_printf_engine>
	if (args.pos >= len)
    f7bc:	e59d300c 	ldr	r3, [sp, #12]
    f7c0:	e1530005 	cmp	r3, r5
		str[len-1] = '\0';
    f7c4:	20844005 	addcs	r4, r4, r5
		str[wlen] = '\0';
    f7c8:	37c46000 	strbcc	r6, [r4, r0]
		str[len-1] = '\0';
    f7cc:	25446001 	strbcs	r6, [r4, #-1]
}
    f7d0:	e28dd010 	add	sp, sp, #16
    f7d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f7d8 <sprintf>:
{
    f7d8:	e92d000e 	push	{r1, r2, r3}
	return vsnprintf(str, INT_MAX, fmt, ap);
    f7dc:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
{
    f7e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f7e4:	e24dd008 	sub	sp, sp, #8
	va_start(ap, fmt);
    f7e8:	e28dc010 	add	ip, sp, #16
	return vsnprintf(str, INT_MAX, fmt, ap);
    f7ec:	e1a0300c 	mov	r3, ip
    f7f0:	e59d200c 	ldr	r2, [sp, #12]
	va_start(ap, fmt);
    f7f4:	e58dc004 	str	ip, [sp, #4]
	return vsnprintf(str, INT_MAX, fmt, ap);
    f7f8:	ebffffe4 	bl	f790 <vsnprintf>
}
    f7fc:	e28dd008 	add	sp, sp, #8
    f800:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    f804:	e28dd00c 	add	sp, sp, #12
    f808:	e12fff1e 	bx	lr

0000f80c <rand>:
	randseed ^= enp;
}

int rand(void)
{
	return (randseed = randseed * 1664525 + 1013904223);
    f80c:	e303309c 	movw	r3, #12444	; 0x309c
    f810:	e306160d 	movw	r1, #26125	; 0x660d
    f814:	e3403001 	movt	r3, #1
    f818:	e30f235f 	movw	r2, #62303	; 0xf35f
    f81c:	e5930000 	ldr	r0, [r3]
    f820:	e3401019 	movt	r1, #25
    f824:	e3432c6e 	movt	r2, #15470	; 0x3c6e
    f828:	e0202091 	mla	r0, r1, r0, r2
    f82c:	e5830000 	str	r0, [r3]
}
    f830:	e12fff1e 	bx	lr

0000f834 <vfprintf>:
	return getc(stdin);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
	return fp->vfprintf(fp->ctx, fmt, ap);
    f834:	e5903010 	ldr	r3, [r0, #16]
    f838:	e5900000 	ldr	r0, [r0]
    f83c:	e12fff13 	bx	r3

0000f840 <fprintf>:
}

int fprintf(FILE *fp, const char *fmt, ...)
{
    f840:	e92d000e 	push	{r1, r2, r3}
    f844:	e92d4010 	push	{r4, lr}
    f848:	e24dd00c 	sub	sp, sp, #12
	va_list ap;
	int err;

	va_start(ap, fmt);
    f84c:	e28d3018 	add	r3, sp, #24
	return fp->vfprintf(fp->ctx, fmt, ap);
    f850:	e1a02003 	mov	r2, r3
    f854:	e5904010 	ldr	r4, [r0, #16]
    f858:	e59d1014 	ldr	r1, [sp, #20]
    f85c:	e5900000 	ldr	r0, [r0]
	va_start(ap, fmt);
    f860:	e58d3004 	str	r3, [sp, #4]
	return fp->vfprintf(fp->ctx, fmt, ap);
    f864:	e12fff34 	blx	r4
	err = vfprintf(fp, fmt, ap);
	va_end(ap);
	return err;
}
    f868:	e28dd00c 	add	sp, sp, #12
    f86c:	e8bd4010 	pop	{r4, lr}
    f870:	e28dd00c 	add	sp, sp, #12
    f874:	e12fff1e 	bx	lr

0000f878 <raise>:
#endif

/* needed by some piece of EABI */
void raise(void)
{
}
    f878:	e12fff1e 	bx	lr

0000f87c <memcpy>:
{
	char *d = (char *)dest;
	const char *s = (const char *)src;
	int len;

	if (count == 0 || dest == src)
    f87c:	e040c001 	sub	ip, r0, r1
    f880:	e3520000 	cmp	r2, #0
    f884:	e16fcf1c 	clz	ip, ip
    f888:	e1a0c2ac 	lsr	ip, ip, #5
    f88c:	03a0c001 	moveq	ip, #1
    f890:	e35c0000 	cmp	ip, #0
    f894:	112fff1e 	bxne	lr
		return dest;

	if (((long)d | (long)s) & lmask) {
    f898:	e1803001 	orr	r3, r0, r1
{
    f89c:	e92d4030 	push	{r4, r5, lr}
	if (((long)d | (long)s) & lmask) {
    f8a0:	e3130003 	tst	r3, #3
    f8a4:	1a000015 	bne	f900 <memcpy+0x84>
    f8a8:	e1a0c122 	lsr	ip, r2, #2
    f8ac:	e1a03000 	mov	r3, r0
    f8b0:	e2022003 	and	r2, r2, #3

		count -= len;
		for (; len > 0; len--)
			*d++ = *s++;
	}
	for (len = count / lsize; len > 0; len--) {
    f8b4:	e35c0000 	cmp	ip, #0
    f8b8:	0a000028 	beq	f960 <memcpy+0xe4>
    f8bc:	e1a0e10c 	lsl	lr, ip, #2
    f8c0:	e2414004 	sub	r4, r1, #4
    f8c4:	e083c00e 	add	ip, r3, lr
		*(word *)d = *(word *)s;
    f8c8:	e5b45004 	ldr	r5, [r4, #4]!
    f8cc:	e4835004 	str	r5, [r3], #4
	for (len = count / lsize; len > 0; len--) {
    f8d0:	e153000c 	cmp	r3, ip
    f8d4:	1afffffb 	bne	f8c8 <memcpy+0x4c>
    f8d8:	e081100e 	add	r1, r1, lr
		d += lsize;
		s += lsize;
	}
	for (len = count & lmask; len > 0; len--)
    f8dc:	e3520000 	cmp	r2, #0
    f8e0:	08bd8030 	popeq	{r4, r5, pc}
    f8e4:	e24cc001 	sub	ip, ip, #1
    f8e8:	e0812002 	add	r2, r1, r2
		*d++ = *s++;
    f8ec:	e4d13001 	ldrb	r3, [r1], #1
	for (len = count & lmask; len > 0; len--)
    f8f0:	e1520001 	cmp	r2, r1
		*d++ = *s++;
    f8f4:	e5ec3001 	strb	r3, [ip, #1]!
	for (len = count & lmask; len > 0; len--)
    f8f8:	1afffffb 	bne	f8ec <memcpy+0x70>
    f8fc:	e8bd8030 	pop	{r4, r5, pc}
		if ((((long)d ^ (long)s) & lmask) || (count < lsize))
    f900:	e0203001 	eor	r3, r0, r1
    f904:	e2133003 	ands	r3, r3, #3
    f908:	13a03001 	movne	r3, #1
    f90c:	e3520003 	cmp	r2, #3
    f910:	93833001 	orrls	r3, r3, #1
    f914:	e3530000 	cmp	r3, #0
    f918:	0a00000a 	beq	f948 <memcpy+0xcc>
		for (; len > 0; len--)
    f91c:	e2523000 	subs	r3, r2, #0
    f920:	d8bd8030 	pople	{r4, r5, pc}
    f924:	e1a0200c 	mov	r2, ip
    f928:	e240e001 	sub	lr, r0, #1
    f92c:	e0815003 	add	r5, r1, r3
			*d++ = *s++;
    f930:	e4d14001 	ldrb	r4, [r1], #1
		for (; len > 0; len--)
    f934:	e1510005 	cmp	r1, r5
			*d++ = *s++;
    f938:	e5ee4001 	strb	r4, [lr, #1]!
		for (; len > 0; len--)
    f93c:	1afffffb 	bne	f930 <memcpy+0xb4>
    f940:	e0803003 	add	r3, r0, r3
    f944:	eaffffda 	b	f8b4 <memcpy+0x38>
			len = lsize - ((long)d & lmask); // move the ptrs up to a word boundary
    f948:	e2003003 	and	r3, r0, #3
    f94c:	e2633004 	rsb	r3, r3, #4
    f950:	e0422003 	sub	r2, r2, r3
    f954:	e1a0c122 	lsr	ip, r2, #2
    f958:	e2022003 	and	r2, r2, #3
    f95c:	eafffff1 	b	f928 <memcpy+0xac>
	for (len = count / lsize; len > 0; len--) {
    f960:	e1a0c003 	mov	ip, r3
    f964:	eaffffdc 	b	f8dc <memcpy+0x60>

0000f968 <memset>:

void *
memset(void *s, int c, size_t count)
{
	char *xs = (char *) s;
	size_t len = (-(size_t)s) & (sizeof(size_t)-1);
    f968:	e2603000 	rsb	r3, r0, #0
    f96c:	e2033003 	and	r3, r3, #3
	size_t cc = c & 0xff;

	if ( count > len ) {
    f970:	e1530002 	cmp	r3, r2
    f974:	2a00001b 	bcs	f9e8 <memset+0x80>
{
    f978:	e92d4010 	push	{r4, lr}
	size_t cc = c & 0xff;
    f97c:	e6ef4071 	uxtb	r4, r1
		cc |= cc << 16;
		if (sizeof(size_t) == 8)
			cc |= (uint64_t)cc << 32; // should be optimized out on 32 bit machines

		// write to non-aligned memory byte-wise
		for ( ; len > 0; len-- )
    f980:	e3530000 	cmp	r3, #0
		cc |= cc << 8;
    f984:	e184e404 	orr	lr, r4, r4, lsl #8
		count -= len;
    f988:	e0422003 	sub	r2, r2, r3
	char *xs = (char *) s;
    f98c:	01a03000 	moveq	r3, r0
		cc |= cc << 16;
    f990:	e18ee80e 	orr	lr, lr, lr, lsl #16
		for ( ; len > 0; len-- )
    f994:	0a000004 	beq	f9ac <memset+0x44>
    f998:	e080c003 	add	ip, r0, r3
	char *xs = (char *) s;
    f99c:	e1a03000 	mov	r3, r0
			*xs++ = c;
    f9a0:	e4c34001 	strb	r4, [r3], #1
		for ( ; len > 0; len-- )
    f9a4:	e15c0003 	cmp	ip, r3
    f9a8:	1afffffc 	bne	f9a0 <memset+0x38>

		// write to aligned memory dword-wise
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    f9ac:	e1b0c122 	lsrs	ip, r2, #2
    f9b0:	0a000003 	beq	f9c4 <memset+0x5c>
    f9b4:	e083c10c 	add	ip, r3, ip, lsl #2
			*((size_t *)xs) = (size_t)cc;
    f9b8:	e483e004 	str	lr, [r3], #4
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    f9bc:	e15c0003 	cmp	ip, r3
    f9c0:	1afffffc 	bne	f9b8 <memset+0x50>
			xs += sizeof(size_t);
		}

		count &= sizeof(size_t)-1;
    f9c4:	e2022003 	and	r2, r2, #3
	}

	// write remaining bytes
	for ( ; count > 0; count-- )
    f9c8:	e3520000 	cmp	r2, #0
    f9cc:	08bd8010 	popeq	{r4, pc}
    f9d0:	e6ef1071 	uxtb	r1, r1
    f9d4:	e0832002 	add	r2, r3, r2
		*xs++ = c;
    f9d8:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    f9dc:	e1520003 	cmp	r2, r3
    f9e0:	1afffffc 	bne	f9d8 <memset+0x70>
    f9e4:	e8bd8010 	pop	{r4, pc}
    f9e8:	e3520000 	cmp	r2, #0
	char *xs = (char *) s;
    f9ec:	e1a03000 	mov	r3, r0
	for ( ; count > 0; count-- )
    f9f0:	012fff1e 	bxeq	lr
    f9f4:	e6ef1071 	uxtb	r1, r1
    f9f8:	e0802002 	add	r2, r0, r2
		*xs++ = c;
    f9fc:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    fa00:	e1520003 	cmp	r2, r3
    fa04:	1afffffc 	bne	f9fc <memset+0x94>
    fa08:	e12fff1e 	bx	lr

0000fa0c <strlen>:
strlen(char const *s)
{
	size_t i;

	i= 0;
	while (s[i]) {
    fa0c:	e5d03000 	ldrb	r3, [r0]
    fa10:	e3530000 	cmp	r3, #0
    fa14:	0a000006 	beq	fa34 <strlen+0x28>
    fa18:	e1a03000 	mov	r3, r0
	i= 0;
    fa1c:	e3a00000 	mov	r0, #0
	while (s[i]) {
    fa20:	e5f32001 	ldrb	r2, [r3, #1]!
		i+= 1;
    fa24:	e2800001 	add	r0, r0, #1
	while (s[i]) {
    fa28:	e3520000 	cmp	r2, #0
    fa2c:	1afffffb 	bne	fa20 <strlen+0x14>
    fa30:	e12fff1e 	bx	lr
	i= 0;
    fa34:	e1a00003 	mov	r0, r3
	}

	return i;
}
    fa38:	e12fff1e 	bx	lr

0000fa3c <strnlen>:
size_t
strnlen(char const *s, size_t count)
{
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
    fa3c:	e3510000 	cmp	r1, #0
    fa40:	0a000010 	beq	fa88 <strnlen+0x4c>
    fa44:	e5d03000 	ldrb	r3, [r0]
    fa48:	e3530000 	cmp	r3, #0
    fa4c:	0a00000f 	beq	fa90 <strnlen+0x54>
    fa50:	e0801001 	add	r1, r0, r1
    fa54:	e2803001 	add	r3, r0, #1
    fa58:	ea000003 	b	fa6c <strnlen+0x30>
    fa5c:	e5d3c000 	ldrb	ip, [r3]
    fa60:	e35c0000 	cmp	ip, #0
    fa64:	0a000005 	beq	fa80 <strnlen+0x44>
    fa68:	e1a03002 	mov	r3, r2
    fa6c:	e1510003 	cmp	r1, r3
    fa70:	e2832001 	add	r2, r3, #1
    fa74:	1afffff8 	bne	fa5c <strnlen+0x20>
    fa78:	e0410000 	sub	r0, r1, r0
    fa7c:	e12fff1e 	bx	lr
    fa80:	e0430000 	sub	r0, r3, r0
    fa84:	e12fff1e 	bx	lr
    fa88:	e1a00001 	mov	r0, r1
    fa8c:	e12fff1e 	bx	lr
    fa90:	e1a00003 	mov	r0, r3
		;
	return sc - s;
}
    fa94:	e12fff1e 	bx	lr

0000fa98 <__aeabi_drsub>:
    fa98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    fa9c:	e002      	b.n	faa4 <__adddf3>
    fa9e:	bf00      	nop

0000faa0 <__aeabi_dsub>:
    faa0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000faa4 <__adddf3>:
    faa4:	b530      	push	{r4, r5, lr}
    faa6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    faaa:	ea4f 0543 	mov.w	r5, r3, lsl #1
    faae:	ea94 0f05 	teq	r4, r5
    fab2:	bf08      	it	eq
    fab4:	ea90 0f02 	teqeq	r0, r2
    fab8:	bf1f      	itttt	ne
    faba:	ea54 0c00 	orrsne.w	ip, r4, r0
    fabe:	ea55 0c02 	orrsne.w	ip, r5, r2
    fac2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    fac6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    faca:	f000 80e2 	beq.w	fc92 <__adddf3+0x1ee>
    face:	ea4f 5454 	mov.w	r4, r4, lsr #21
    fad2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    fad6:	bfb8      	it	lt
    fad8:	426d      	neglt	r5, r5
    fada:	dd0c      	ble.n	faf6 <__adddf3+0x52>
    fadc:	442c      	add	r4, r5
    fade:	ea80 0202 	eor.w	r2, r0, r2
    fae2:	ea81 0303 	eor.w	r3, r1, r3
    fae6:	ea82 0000 	eor.w	r0, r2, r0
    faea:	ea83 0101 	eor.w	r1, r3, r1
    faee:	ea80 0202 	eor.w	r2, r0, r2
    faf2:	ea81 0303 	eor.w	r3, r1, r3
    faf6:	2d36      	cmp	r5, #54	; 0x36
    faf8:	bf88      	it	hi
    fafa:	bd30      	pophi	{r4, r5, pc}
    fafc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    fb00:	ea4f 3101 	mov.w	r1, r1, lsl #12
    fb04:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    fb08:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    fb0c:	d002      	beq.n	fb14 <__adddf3+0x70>
    fb0e:	4240      	negs	r0, r0
    fb10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fb14:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    fb18:	ea4f 3303 	mov.w	r3, r3, lsl #12
    fb1c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    fb20:	d002      	beq.n	fb28 <__adddf3+0x84>
    fb22:	4252      	negs	r2, r2
    fb24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    fb28:	ea94 0f05 	teq	r4, r5
    fb2c:	f000 80a7 	beq.w	fc7e <__adddf3+0x1da>
    fb30:	f1a4 0401 	sub.w	r4, r4, #1
    fb34:	f1d5 0e20 	rsbs	lr, r5, #32
    fb38:	db0d      	blt.n	fb56 <__adddf3+0xb2>
    fb3a:	fa02 fc0e 	lsl.w	ip, r2, lr
    fb3e:	fa22 f205 	lsr.w	r2, r2, r5
    fb42:	1880      	adds	r0, r0, r2
    fb44:	f141 0100 	adc.w	r1, r1, #0
    fb48:	fa03 f20e 	lsl.w	r2, r3, lr
    fb4c:	1880      	adds	r0, r0, r2
    fb4e:	fa43 f305 	asr.w	r3, r3, r5
    fb52:	4159      	adcs	r1, r3
    fb54:	e00e      	b.n	fb74 <__adddf3+0xd0>
    fb56:	f1a5 0520 	sub.w	r5, r5, #32
    fb5a:	f10e 0e20 	add.w	lr, lr, #32
    fb5e:	2a01      	cmp	r2, #1
    fb60:	fa03 fc0e 	lsl.w	ip, r3, lr
    fb64:	bf28      	it	cs
    fb66:	f04c 0c02 	orrcs.w	ip, ip, #2
    fb6a:	fa43 f305 	asr.w	r3, r3, r5
    fb6e:	18c0      	adds	r0, r0, r3
    fb70:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    fb74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fb78:	d507      	bpl.n	fb8a <__adddf3+0xe6>
    fb7a:	f04f 0e00 	mov.w	lr, #0
    fb7e:	f1dc 0c00 	rsbs	ip, ip, #0
    fb82:	eb7e 0000 	sbcs.w	r0, lr, r0
    fb86:	eb6e 0101 	sbc.w	r1, lr, r1
    fb8a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    fb8e:	d31b      	bcc.n	fbc8 <__adddf3+0x124>
    fb90:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    fb94:	d30c      	bcc.n	fbb0 <__adddf3+0x10c>
    fb96:	0849      	lsrs	r1, r1, #1
    fb98:	ea5f 0030 	movs.w	r0, r0, rrx
    fb9c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    fba0:	f104 0401 	add.w	r4, r4, #1
    fba4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    fba8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    fbac:	f080 809a 	bcs.w	fce4 <__adddf3+0x240>
    fbb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    fbb4:	bf08      	it	eq
    fbb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    fbba:	f150 0000 	adcs.w	r0, r0, #0
    fbbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    fbc2:	ea41 0105 	orr.w	r1, r1, r5
    fbc6:	bd30      	pop	{r4, r5, pc}
    fbc8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    fbcc:	4140      	adcs	r0, r0
    fbce:	eb41 0101 	adc.w	r1, r1, r1
    fbd2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    fbd6:	f1a4 0401 	sub.w	r4, r4, #1
    fbda:	d1e9      	bne.n	fbb0 <__adddf3+0x10c>
    fbdc:	f091 0f00 	teq	r1, #0
    fbe0:	bf04      	itt	eq
    fbe2:	4601      	moveq	r1, r0
    fbe4:	2000      	moveq	r0, #0
    fbe6:	fab1 f381 	clz	r3, r1
    fbea:	bf08      	it	eq
    fbec:	3320      	addeq	r3, #32
    fbee:	f1a3 030b 	sub.w	r3, r3, #11
    fbf2:	f1b3 0220 	subs.w	r2, r3, #32
    fbf6:	da0c      	bge.n	fc12 <__adddf3+0x16e>
    fbf8:	320c      	adds	r2, #12
    fbfa:	dd08      	ble.n	fc0e <__adddf3+0x16a>
    fbfc:	f102 0c14 	add.w	ip, r2, #20
    fc00:	f1c2 020c 	rsb	r2, r2, #12
    fc04:	fa01 f00c 	lsl.w	r0, r1, ip
    fc08:	fa21 f102 	lsr.w	r1, r1, r2
    fc0c:	e00c      	b.n	fc28 <__adddf3+0x184>
    fc0e:	f102 0214 	add.w	r2, r2, #20
    fc12:	bfd8      	it	le
    fc14:	f1c2 0c20 	rsble	ip, r2, #32
    fc18:	fa01 f102 	lsl.w	r1, r1, r2
    fc1c:	fa20 fc0c 	lsr.w	ip, r0, ip
    fc20:	bfdc      	itt	le
    fc22:	ea41 010c 	orrle.w	r1, r1, ip
    fc26:	4090      	lslle	r0, r2
    fc28:	1ae4      	subs	r4, r4, r3
    fc2a:	bfa2      	ittt	ge
    fc2c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    fc30:	4329      	orrge	r1, r5
    fc32:	bd30      	popge	{r4, r5, pc}
    fc34:	ea6f 0404 	mvn.w	r4, r4
    fc38:	3c1f      	subs	r4, #31
    fc3a:	da1c      	bge.n	fc76 <__adddf3+0x1d2>
    fc3c:	340c      	adds	r4, #12
    fc3e:	dc0e      	bgt.n	fc5e <__adddf3+0x1ba>
    fc40:	f104 0414 	add.w	r4, r4, #20
    fc44:	f1c4 0220 	rsb	r2, r4, #32
    fc48:	fa20 f004 	lsr.w	r0, r0, r4
    fc4c:	fa01 f302 	lsl.w	r3, r1, r2
    fc50:	ea40 0003 	orr.w	r0, r0, r3
    fc54:	fa21 f304 	lsr.w	r3, r1, r4
    fc58:	ea45 0103 	orr.w	r1, r5, r3
    fc5c:	bd30      	pop	{r4, r5, pc}
    fc5e:	f1c4 040c 	rsb	r4, r4, #12
    fc62:	f1c4 0220 	rsb	r2, r4, #32
    fc66:	fa20 f002 	lsr.w	r0, r0, r2
    fc6a:	fa01 f304 	lsl.w	r3, r1, r4
    fc6e:	ea40 0003 	orr.w	r0, r0, r3
    fc72:	4629      	mov	r1, r5
    fc74:	bd30      	pop	{r4, r5, pc}
    fc76:	fa21 f004 	lsr.w	r0, r1, r4
    fc7a:	4629      	mov	r1, r5
    fc7c:	bd30      	pop	{r4, r5, pc}
    fc7e:	f094 0f00 	teq	r4, #0
    fc82:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    fc86:	bf06      	itte	eq
    fc88:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    fc8c:	3401      	addeq	r4, #1
    fc8e:	3d01      	subne	r5, #1
    fc90:	e74e      	b.n	fb30 <__adddf3+0x8c>
    fc92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    fc96:	bf18      	it	ne
    fc98:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    fc9c:	d029      	beq.n	fcf2 <__adddf3+0x24e>
    fc9e:	ea94 0f05 	teq	r4, r5
    fca2:	bf08      	it	eq
    fca4:	ea90 0f02 	teqeq	r0, r2
    fca8:	d005      	beq.n	fcb6 <__adddf3+0x212>
    fcaa:	ea54 0c00 	orrs.w	ip, r4, r0
    fcae:	bf04      	itt	eq
    fcb0:	4619      	moveq	r1, r3
    fcb2:	4610      	moveq	r0, r2
    fcb4:	bd30      	pop	{r4, r5, pc}
    fcb6:	ea91 0f03 	teq	r1, r3
    fcba:	bf1e      	ittt	ne
    fcbc:	2100      	movne	r1, #0
    fcbe:	2000      	movne	r0, #0
    fcc0:	bd30      	popne	{r4, r5, pc}
    fcc2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    fcc6:	d105      	bne.n	fcd4 <__adddf3+0x230>
    fcc8:	0040      	lsls	r0, r0, #1
    fcca:	4149      	adcs	r1, r1
    fccc:	bf28      	it	cs
    fcce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    fcd2:	bd30      	pop	{r4, r5, pc}
    fcd4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    fcd8:	bf3c      	itt	cc
    fcda:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    fcde:	bd30      	popcc	{r4, r5, pc}
    fce0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fce4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    fce8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    fcec:	f04f 0000 	mov.w	r0, #0
    fcf0:	bd30      	pop	{r4, r5, pc}
    fcf2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    fcf6:	bf1a      	itte	ne
    fcf8:	4619      	movne	r1, r3
    fcfa:	4610      	movne	r0, r2
    fcfc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    fd00:	bf1c      	itt	ne
    fd02:	460b      	movne	r3, r1
    fd04:	4602      	movne	r2, r0
    fd06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    fd0a:	bf06      	itte	eq
    fd0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    fd10:	ea91 0f03 	teqeq	r1, r3
    fd14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    fd18:	bd30      	pop	{r4, r5, pc}
    fd1a:	bf00      	nop

0000fd1c <__aeabi_ui2d>:
    fd1c:	f090 0f00 	teq	r0, #0
    fd20:	bf04      	itt	eq
    fd22:	2100      	moveq	r1, #0
    fd24:	4770      	bxeq	lr
    fd26:	b530      	push	{r4, r5, lr}
    fd28:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fd2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fd30:	f04f 0500 	mov.w	r5, #0
    fd34:	f04f 0100 	mov.w	r1, #0
    fd38:	e750      	b.n	fbdc <__adddf3+0x138>
    fd3a:	bf00      	nop

0000fd3c <__aeabi_i2d>:
    fd3c:	f090 0f00 	teq	r0, #0
    fd40:	bf04      	itt	eq
    fd42:	2100      	moveq	r1, #0
    fd44:	4770      	bxeq	lr
    fd46:	b530      	push	{r4, r5, lr}
    fd48:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fd4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fd50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    fd54:	bf48      	it	mi
    fd56:	4240      	negmi	r0, r0
    fd58:	f04f 0100 	mov.w	r1, #0
    fd5c:	e73e      	b.n	fbdc <__adddf3+0x138>
    fd5e:	bf00      	nop

0000fd60 <__aeabi_f2d>:
    fd60:	0042      	lsls	r2, r0, #1
    fd62:	ea4f 01e2 	mov.w	r1, r2, asr #3
    fd66:	ea4f 0131 	mov.w	r1, r1, rrx
    fd6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    fd6e:	bf1f      	itttt	ne
    fd70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    fd74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    fd78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    fd7c:	4770      	bxne	lr
    fd7e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    fd82:	bf08      	it	eq
    fd84:	4770      	bxeq	lr
    fd86:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    fd8a:	bf04      	itt	eq
    fd8c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    fd90:	4770      	bxeq	lr
    fd92:	b530      	push	{r4, r5, lr}
    fd94:	f44f 7460 	mov.w	r4, #896	; 0x380
    fd98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    fd9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fda0:	e71c      	b.n	fbdc <__adddf3+0x138>
    fda2:	bf00      	nop

0000fda4 <__aeabi_ul2d>:
    fda4:	ea50 0201 	orrs.w	r2, r0, r1
    fda8:	bf08      	it	eq
    fdaa:	4770      	bxeq	lr
    fdac:	b530      	push	{r4, r5, lr}
    fdae:	f04f 0500 	mov.w	r5, #0
    fdb2:	e00a      	b.n	fdca <__aeabi_l2d+0x16>

0000fdb4 <__aeabi_l2d>:
    fdb4:	ea50 0201 	orrs.w	r2, r0, r1
    fdb8:	bf08      	it	eq
    fdba:	4770      	bxeq	lr
    fdbc:	b530      	push	{r4, r5, lr}
    fdbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    fdc2:	d502      	bpl.n	fdca <__aeabi_l2d+0x16>
    fdc4:	4240      	negs	r0, r0
    fdc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fdca:	f44f 6480 	mov.w	r4, #1024	; 0x400
    fdce:	f104 0432 	add.w	r4, r4, #50	; 0x32
    fdd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    fdd6:	f43f aed8 	beq.w	fb8a <__adddf3+0xe6>
    fdda:	f04f 0203 	mov.w	r2, #3
    fdde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    fde2:	bf18      	it	ne
    fde4:	3203      	addne	r2, #3
    fde6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    fdea:	bf18      	it	ne
    fdec:	3203      	addne	r2, #3
    fdee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    fdf2:	f1c2 0320 	rsb	r3, r2, #32
    fdf6:	fa00 fc03 	lsl.w	ip, r0, r3
    fdfa:	fa20 f002 	lsr.w	r0, r0, r2
    fdfe:	fa01 fe03 	lsl.w	lr, r1, r3
    fe02:	ea40 000e 	orr.w	r0, r0, lr
    fe06:	fa21 f102 	lsr.w	r1, r1, r2
    fe0a:	4414      	add	r4, r2
    fe0c:	e6bd      	b.n	fb8a <__adddf3+0xe6>
    fe0e:	bf00      	nop

0000fe10 <__aeabi_uldivmod>:
    fe10:	b953      	cbnz	r3, fe28 <__aeabi_uldivmod+0x18>
    fe12:	b94a      	cbnz	r2, fe28 <__aeabi_uldivmod+0x18>
    fe14:	2900      	cmp	r1, #0
    fe16:	bf08      	it	eq
    fe18:	2800      	cmpeq	r0, #0
    fe1a:	bf1c      	itt	ne
    fe1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    fe20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    fe24:	f000 b80c 	b.w	fe40 <__aeabi_idiv0>
    fe28:	f1ad 0c08 	sub.w	ip, sp, #8
    fe2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    fe30:	f000 f80c 	bl	fe4c <__udivmoddi4>
    fe34:	f8dd e004 	ldr.w	lr, [sp, #4]
    fe38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fe3c:	b004      	add	sp, #16
    fe3e:	4770      	bx	lr

0000fe40 <__aeabi_idiv0>:
    fe40:	b502      	push	{r1, lr}
    fe42:	f04f 0008 	mov.w	r0, #8
    fe46:	f7ff ed18 	blx	f878 <raise>
    fe4a:	bd02      	pop	{r1, pc}

0000fe4c <__udivmoddi4>:
    fe4c:	4299      	cmp	r1, r3
    fe4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe52:	bf08      	it	eq
    fe54:	4290      	cmpeq	r0, r2
    fe56:	4604      	mov	r4, r0
    fe58:	bf38      	it	cc
    fe5a:	2000      	movcc	r0, #0
    fe5c:	460d      	mov	r5, r1
    fe5e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    fe62:	bf38      	it	cc
    fe64:	4601      	movcc	r1, r0
    fe66:	d368      	bcc.n	ff3a <__udivmoddi4+0xee>
    fe68:	4692      	mov	sl, r2
    fe6a:	469b      	mov	fp, r3
    fe6c:	fab3 fc83 	clz	ip, r3
    fe70:	2b00      	cmp	r3, #0
    fe72:	d06d      	beq.n	ff50 <__udivmoddi4+0x104>
    fe74:	fab5 f185 	clz	r1, r5
    fe78:	2d00      	cmp	r5, #0
    fe7a:	d065      	beq.n	ff48 <__udivmoddi4+0xfc>
    fe7c:	ebac 0c01 	sub.w	ip, ip, r1
    fe80:	f1ac 0820 	sub.w	r8, ip, #32
    fe84:	fa0b f70c 	lsl.w	r7, fp, ip
    fe88:	fa0a f108 	lsl.w	r1, sl, r8
    fe8c:	f1cc 0920 	rsb	r9, ip, #32
    fe90:	fa2a f309 	lsr.w	r3, sl, r9
    fe94:	fa0a f60c 	lsl.w	r6, sl, ip
    fe98:	430f      	orrs	r7, r1
    fe9a:	431f      	orrs	r7, r3
    fe9c:	42bd      	cmp	r5, r7
    fe9e:	bf08      	it	eq
    fea0:	42b4      	cmpeq	r4, r6
    fea2:	bf3c      	itt	cc
    fea4:	2000      	movcc	r0, #0
    fea6:	4601      	movcc	r1, r0
    fea8:	d30a      	bcc.n	fec0 <__udivmoddi4+0x74>
    feaa:	2001      	movs	r0, #1
    feac:	1ba4      	subs	r4, r4, r6
    feae:	fa00 f108 	lsl.w	r1, r0, r8
    feb2:	fa20 f309 	lsr.w	r3, r0, r9
    feb6:	fa00 f00c 	lsl.w	r0, r0, ip
    feba:	eb65 0507 	sbc.w	r5, r5, r7
    febe:	4319      	orrs	r1, r3
    fec0:	f1bc 0f00 	cmp.w	ip, #0
    fec4:	d039      	beq.n	ff3a <__udivmoddi4+0xee>
    fec6:	087f      	lsrs	r7, r7, #1
    fec8:	ea4f 0636 	mov.w	r6, r6, rrx
    fecc:	4662      	mov	r2, ip
    fece:	e00a      	b.n	fee6 <__udivmoddi4+0x9a>
    fed0:	1ba3      	subs	r3, r4, r6
    fed2:	eb65 0a07 	sbc.w	sl, r5, r7
    fed6:	18db      	adds	r3, r3, r3
    fed8:	eb4a 0a0a 	adc.w	sl, sl, sl
    fedc:	1c5c      	adds	r4, r3, #1
    fede:	f14a 0500 	adc.w	r5, sl, #0
    fee2:	3a01      	subs	r2, #1
    fee4:	d007      	beq.n	fef6 <__udivmoddi4+0xaa>
    fee6:	42bd      	cmp	r5, r7
    fee8:	bf08      	it	eq
    feea:	42b4      	cmpeq	r4, r6
    feec:	d2f0      	bcs.n	fed0 <__udivmoddi4+0x84>
    feee:	1924      	adds	r4, r4, r4
    fef0:	416d      	adcs	r5, r5
    fef2:	3a01      	subs	r2, #1
    fef4:	d1f7      	bne.n	fee6 <__udivmoddi4+0x9a>
    fef6:	fa24 f30c 	lsr.w	r3, r4, ip
    fefa:	fa05 f909 	lsl.w	r9, r5, r9
    fefe:	fa25 f20c 	lsr.w	r2, r5, ip
    ff02:	fa25 f808 	lsr.w	r8, r5, r8
    ff06:	1900      	adds	r0, r0, r4
    ff08:	ea43 0309 	orr.w	r3, r3, r9
    ff0c:	ea43 0408 	orr.w	r4, r3, r8
    ff10:	eb45 0101 	adc.w	r1, r5, r1
    ff14:	4615      	mov	r5, r2
    ff16:	f1ac 0220 	sub.w	r2, ip, #32
    ff1a:	fa05 f30c 	lsl.w	r3, r5, ip
    ff1e:	fa04 f60c 	lsl.w	r6, r4, ip
    ff22:	fa04 f202 	lsl.w	r2, r4, r2
    ff26:	f1cc 0c20 	rsb	ip, ip, #32
    ff2a:	fa24 fc0c 	lsr.w	ip, r4, ip
    ff2e:	4313      	orrs	r3, r2
    ff30:	1b80      	subs	r0, r0, r6
    ff32:	ea43 030c 	orr.w	r3, r3, ip
    ff36:	eb61 0103 	sbc.w	r1, r1, r3
    ff3a:	f1be 0f00 	cmp.w	lr, #0
    ff3e:	d001      	beq.n	ff44 <__udivmoddi4+0xf8>
    ff40:	e9ce 4500 	strd	r4, r5, [lr]
    ff44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff48:	fab4 f184 	clz	r1, r4
    ff4c:	3120      	adds	r1, #32
    ff4e:	e795      	b.n	fe7c <__udivmoddi4+0x30>
    ff50:	fab2 fc82 	clz	ip, r2
    ff54:	fab5 f185 	clz	r1, r5
    ff58:	f10c 0c20 	add.w	ip, ip, #32
    ff5c:	2d00      	cmp	r5, #0
    ff5e:	d18d      	bne.n	fe7c <__udivmoddi4+0x30>
    ff60:	e7f2      	b.n	ff48 <__udivmoddi4+0xfc>
    ff62:	bf00      	nop
