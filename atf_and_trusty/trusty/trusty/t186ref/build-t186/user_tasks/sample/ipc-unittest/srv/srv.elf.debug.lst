
t186ref/build-t186/user_tasks/sample/ipc-unittest/srv/srv.syms.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <exit>:
/* HACK: needed temporarily until the syscalls file gets the
 * __NO_RETURN annotation */
__NO_RETURN long exit_group (void);

__NO_RETURN void exit(int status)
{
    8000:	e92d4010 	push	{r4, lr}
	__cxa_finalize();
    8004:	eb0003ed 	bl	8fc0 <__cxa_finalize>
	exit_group();
    8008:	eb000d11 	bl	b454 <exit_group>

0000800c <main>:

/*
 *  Main entry point of service task
 */
int main(void)
{
    800c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	TLOGI ("Init unittest services!!!\n");
    8010:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8014:	e30c8f10 	movw	r8, #53008	; 0xcf10
    8018:	e30d1248 	movw	r1, #53832	; 0xd248
    801c:	e30e4024 	movw	r4, #57380	; 0xe024
    8020:	e3408000 	movt	r8, #0
{
    8024:	e24dd018 	sub	sp, sp, #24
	TLOGI ("Init unittest services!!!\n");
    8028:	e3402000 	movt	r2, #0
    802c:	e3401000 	movt	r1, #0
    8030:	e3003149 	movw	r3, #329	; 0x149
    8034:	e59f0188 	ldr	r0, [pc, #392]	; 81c4 <main+0x1b8>
    8038:	e1a05008 	mov	r5, r8
    803c:	e3404000 	movt	r4, #0
	for (uint i = 0; i < countof(_services); i++) {
    8040:	e3a06000 	mov	r6, #0
	TLOGI ("Init unittest services!!!\n");
    8044:	eb0011ed 	bl	c800 <fprintf>
		int rc = _create_service(&_services[i], &_srv_states[i]);
    8048:	e1a01004 	mov	r1, r4
    804c:	e1a00005 	mov	r0, r5
    8050:	eb0000a5 	bl	82ec <_create_service>
		if (rc < 0) {
    8054:	e2507000 	subs	r7, r0, #0
    8058:	e2855020 	add	r5, r5, #32
    805c:	e2844014 	add	r4, r4, #20
    8060:	ba000020 	blt	80e8 <main+0xdc>
	for (uint i = 0; i < countof(_services); i++) {
    8064:	e2866001 	add	r6, r6, #1
    8068:	e3560009 	cmp	r6, #9
    806c:	1afffff5 	bne	8048 <main+0x3c>
	TLOGI("no handler for event (0x%x) with handle %d\n",
    8070:	e59f514c 	ldr	r5, [pc, #332]	; 81c4 <main+0x1b8>
    8074:	e30c4eb0 	movw	r4, #52912	; 0xceb0
    8078:	e30d6330 	movw	r6, #54064	; 0xd330
    807c:	e3404000 	movt	r4, #0
    8080:	e3406000 	movt	r6, #0
		return -1;
	}

	/* handle events */
	while (!stopped) {
		event.handle = INVALID_IPC_HANDLE;
    8084:	e3e02000 	mvn	r2, #0
		event.event  = 0;
    8088:	e3a03000 	mov	r3, #0
		event.cookie = NULL;
		rc = wait_any(&event, -1);
    808c:	e1a01002 	mov	r1, r2
    8090:	e28d000c 	add	r0, sp, #12
		event.event  = 0;
    8094:	e1cd20fc 	strd	r2, [sp, #12]
		event.cookie = NULL;
    8098:	e58d3014 	str	r3, [sp, #20]
		rc = wait_any(&event, -1);
    809c:	eb000d04 	bl	b4b4 <wait_any>
		if (rc < 0) {
    80a0:	e3500000 	cmp	r0, #0
    80a4:	ba000025 	blt	8140 <main+0x134>
			TLOGI("wait_any failed (%d)", rc);
			continue;
		}
		if (rc == NO_ERROR) { /* got an event */
    80a8:	1afffff5 	bne	8084 <main+0x78>
	if (ev->event == IPC_HANDLE_POLL_NONE) {
    80ac:	e59d2010 	ldr	r2, [sp, #16]
    80b0:	e3520000 	cmp	r2, #0
    80b4:	0a000029 	beq	8160 <main+0x154>
	if (ev->handle == INVALID_IPC_HANDLE) {
    80b8:	e59d300c 	ldr	r3, [sp, #12]
    80bc:	e3730001 	cmn	r3, #1
    80c0:	0a000037 	beq	81a4 <main+0x198>
	struct tipc_event_handler *handler = ev->cookie;
    80c4:	e59d1014 	ldr	r1, [sp, #20]
	if (handler && handler->proc) {
    80c8:	e3510000 	cmp	r1, #0
    80cc:	0a00002a 	beq	817c <main+0x170>
    80d0:	e5911000 	ldr	r1, [r1]
    80d4:	e3510000 	cmp	r1, #0
    80d8:	0a000027 	beq	817c <main+0x170>
		handler->proc(ev);
    80dc:	e28d000c 	add	r0, sp, #12
    80e0:	e12fff31 	blx	r1
    80e4:	eaffffe6 	b	8084 <main+0x78>
			TLOGI("Failed (%d) to create service %s\n",
    80e8:	e7983286 	ldr	r3, [r8, r6, lsl #5]
    80ec:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    80f0:	e30d126c 	movw	r1, #53868	; 0xd26c
    80f4:	e58d7000 	str	r7, [sp]
    80f8:	e3402000 	movt	r2, #0
    80fc:	e3401000 	movt	r1, #0
    8100:	e58d3004 	str	r3, [sp, #4]
    8104:	e300314f 	movw	r3, #335	; 0x14f
    8108:	e59f00b4 	ldr	r0, [pc, #180]	; 81c4 <main+0x1b8>
    810c:	eb0011bb 	bl	c800 <fprintf>
		TLOGI("Failed (%d) to init service", rc);
    8110:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8114:	e30d1298 	movw	r1, #53912	; 0xd298
    8118:	e3402000 	movt	r2, #0
    811c:	e3401000 	movt	r1, #0
    8120:	e3003365 	movw	r3, #869	; 0x365
    8124:	e58d7000 	str	r7, [sp]
    8128:	e59f0094 	ldr	r0, [pc, #148]	; 81c4 <main+0x1b8>
    812c:	eb0011b3 	bl	c800 <fprintf>
		kill_services();
    8130:	eb00005b 	bl	82a4 <kill_services>
		}
	}

	kill_services();
	return 0;
}
    8134:	e3e00000 	mvn	r0, #0
    8138:	e28dd018 	add	sp, sp, #24
    813c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			TLOGI("wait_any failed (%d)", rc);
    8140:	e30d12bc 	movw	r1, #53948	; 0xd2bc
    8144:	e58d0000 	str	r0, [sp]
    8148:	e3401000 	movt	r1, #0
    814c:	e3003371 	movw	r3, #881	; 0x371
    8150:	e1a02004 	mov	r2, r4
    8154:	e1a00005 	mov	r0, r5
    8158:	eb0011a8 	bl	c800 <fprintf>
			continue;
    815c:	eaffffc8 	b	8084 <main+0x78>
		TLOGI("got an empty event\n");
    8160:	e30d12dc 	movw	r1, #53980	; 0xd2dc
    8164:	e300333f 	movw	r3, #831	; 0x33f
    8168:	e3401000 	movt	r1, #0
    816c:	e1a02004 	mov	r2, r4
    8170:	e1a00005 	mov	r0, r5
    8174:	eb0011a1 	bl	c800 <fprintf>
    8178:	eaffffc1 	b	8084 <main+0x78>
	TLOGI("no handler for event (0x%x) with handle %d\n",
    817c:	e58d3004 	str	r3, [sp, #4]
    8180:	e1a01006 	mov	r1, r6
    8184:	e58d2000 	str	r2, [sp]
    8188:	e3a03fd5 	mov	r3, #852	; 0x354
    818c:	e1a02004 	mov	r2, r4
    8190:	e1a00005 	mov	r0, r5
    8194:	eb001199 	bl	c800 <fprintf>
	close(ev->handle);
    8198:	e59d000c 	ldr	r0, [sp, #12]
    819c:	eb000cbb 	bl	b490 <close>
    81a0:	eaffffb7 	b	8084 <main+0x78>
		TLOGI("got an event (0x%x) with invalid handle (%d)",
    81a4:	e30d12f8 	movw	r1, #54008	; 0xd2f8
    81a8:	e1cd20f0 	strd	r2, [sp]
    81ac:	e3401000 	movt	r1, #0
    81b0:	e3003346 	movw	r3, #838	; 0x346
    81b4:	e1a02004 	mov	r2, r4
    81b8:	e1a00005 	mov	r0, r5
    81bc:	eb00118f 	bl	c800 <fprintf>
    81c0:	eaffffaf 	b	8084 <main+0x78>
    81c4:	0000e104 	.word	0x0000e104

000081c8 <__guard_setup>:

#include <rand.h>

unsigned int __stack_chk_guard = 0xaff;

static void __attribute__((constructor)) __guard_setup (void){
    81c8:	e92d4010 	push	{r4, lr}
        /* 
         * included for future use. rand.h must be seeded and -fstack_protector must be disabled in
         * stack contexts preceeding this call.
         */
  	if ( __stack_chk_guard == 0U )
    81cc:	e30e4134 	movw	r4, #57652	; 0xe134
    81d0:	e3404000 	movt	r4, #0
    81d4:	e5943000 	ldr	r3, [r4]
    81d8:	e3530000 	cmp	r3, #0
    81dc:	18bd8010 	popne	{r4, pc}
  		__stack_chk_guard = rand();
    81e0:	eb001179 	bl	c7cc <rand>
    81e4:	e5840000 	str	r0, [r4]
}
    81e8:	e8bd8010 	pop	{r4, pc}

000081ec <_destroy_service>:
{
    81ec:	e92d4010 	push	{r4, lr}
	if (!state) {
    81f0:	e2504000 	subs	r4, r0, #0
{
    81f4:	e24dd008 	sub	sp, sp, #8
	if (!state) {
    81f8:	0a000014 	beq	8250 <_destroy_service+0x64>
	if (state->priv) {
    81fc:	e5940008 	ldr	r0, [r4, #8]
    8200:	e3500000 	cmp	r0, #0
    8204:	0a000002 	beq	8214 <_destroy_service+0x28>
		free(state->priv);
    8208:	eb000a02 	bl	aa18 <free>
		state->priv = NULL;
    820c:	e3a03000 	mov	r3, #0
    8210:	e5843008 	str	r3, [r4, #8]
	if (state->port != INVALID_IPC_HANDLE) {
    8214:	e5940004 	ldr	r0, [r4, #4]
    8218:	e3700001 	cmn	r0, #1
    821c:	1a000005 	bne	8238 <_destroy_service+0x4c>
	state->service = NULL;
    8220:	e3a03000 	mov	r3, #0
    8224:	e5843000 	str	r3, [r4]
	state->handler.proc = NULL;
    8228:	e584300c 	str	r3, [r4, #12]
	state->handler.priv = NULL;
    822c:	e5843010 	str	r3, [r4, #16]
}
    8230:	e28dd008 	add	sp, sp, #8
    8234:	e8bd8010 	pop	{r4, pc}
		int rc = close(state->port);
    8238:	eb000c94 	bl	b490 <close>
		if (rc != NO_ERROR) {
    823c:	e3500000 	cmp	r0, #0
    8240:	1a00000b 	bne	8274 <_destroy_service+0x88>
		state->port = INVALID_IPC_HANDLE;
    8244:	e3e03000 	mvn	r3, #0
    8248:	e5843004 	str	r3, [r4, #4]
    824c:	eafffff3 	b	8220 <_destroy_service+0x34>
		TLOGI("non-null state expected\n");
    8250:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8254:	e30c1ec4 	movw	r1, #52932	; 0xcec4
    8258:	e3402000 	movt	r2, #0
    825c:	e3401000 	movt	r1, #0
    8260:	e3a030d9 	mov	r3, #217	; 0xd9
    8264:	e59f0034 	ldr	r0, [pc, #52]	; 82a0 <_destroy_service+0xb4>
}
    8268:	e28dd008 	add	sp, sp, #8
    826c:	e8bd4010 	pop	{r4, lr}
		TLOGI("non-null state expected\n");
    8270:	ea001162 	b	c800 <fprintf>
			TLOGI("Failed (%d) to close port %d\n",
    8274:	e5943004 	ldr	r3, [r4, #4]
    8278:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    827c:	e30c1ee8 	movw	r1, #52968	; 0xcee8
    8280:	e58d0000 	str	r0, [sp]
    8284:	e3402000 	movt	r2, #0
    8288:	e3401000 	movt	r1, #0
    828c:	e58d3004 	str	r3, [sp, #4]
    8290:	e3a030e8 	mov	r3, #232	; 0xe8
    8294:	e59f0004 	ldr	r0, [pc, #4]	; 82a0 <_destroy_service+0xb4>
    8298:	eb001158 	bl	c800 <fprintf>
    829c:	eaffffe8 	b	8244 <_destroy_service+0x58>
    82a0:	0000e104 	.word	0x0000e104

000082a4 <kill_services>:
{
    82a4:	e92d4070 	push	{r4, r5, r6, lr}
	TLOGI ("Terminating unittest services\n");
    82a8:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    82ac:	e30e4024 	movw	r4, #57380	; 0xe024
    82b0:	e30d1220 	movw	r1, #53792	; 0xd220
    82b4:	e3404000 	movt	r4, #0
    82b8:	e3402000 	movt	r2, #0
    82bc:	e3401000 	movt	r1, #0
    82c0:	e3a03f4f 	mov	r3, #316	; 0x13c
    82c4:	e59f001c 	ldr	r0, [pc, #28]	; 82e8 <kill_services+0x44>
    82c8:	e28450b4 	add	r5, r4, #180	; 0xb4
    82cc:	eb00114b 	bl	c800 <fprintf>
		_destroy_service(&_srv_states[i]);
    82d0:	e1a00004 	mov	r0, r4
    82d4:	e2844014 	add	r4, r4, #20
    82d8:	ebffffc3 	bl	81ec <_destroy_service>
	for (uint i = 0; i < countof(_services); i++) {
    82dc:	e1540005 	cmp	r4, r5
    82e0:	1afffffa 	bne	82d0 <kill_services+0x2c>
    82e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    82e8:	0000e104 	.word	0x0000e104

000082ec <_create_service>:
	if (!srv || !state) {
    82ec:	e16f3f11 	clz	r3, r1
    82f0:	e3500000 	cmp	r0, #0
    82f4:	e1a032a3 	lsr	r3, r3, #5
{
    82f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	if (!srv || !state) {
    82fc:	03a07001 	moveq	r7, #1
    8300:	11a07003 	movne	r7, r3
{
    8304:	e24dd00c 	sub	sp, sp, #12
	if (!srv || !state) {
    8308:	e3570000 	cmp	r7, #0
    830c:	1a00003a 	bne	83fc <_create_service+0x110>
	int rc = port_create(srv->name, srv->msg_num, srv->msg_size,
    8310:	e1c020d8 	ldrd	r2, [r0, #8]
    8314:	e1a04000 	mov	r4, r0
    8318:	e1a05001 	mov	r5, r1
    831c:	e1c000d0 	ldrd	r0, [r0]
    8320:	eb000c51 	bl	b46c <port_create>
	if (rc < 0) {
    8324:	e2506000 	subs	r6, r0, #0
    8328:	ba000017 	blt	838c <_create_service+0xa0>
	if (srv->port_state_size) {
    832c:	e5941010 	ldr	r1, [r4, #16]
	state->port = (handle_t)rc;
    8330:	e1a00006 	mov	r0, r6
	state->handler.proc = srv->port_handler;
    8334:	e5943018 	ldr	r3, [r4, #24]
	state->port = (handle_t)rc;
    8338:	e5856004 	str	r6, [r5, #4]
	if (srv->port_state_size) {
    833c:	e3510000 	cmp	r1, #0
	state->handler.priv = state;
    8340:	e5855010 	str	r5, [r5, #16]
	state->handler.proc = srv->port_handler;
    8344:	e585300c 	str	r3, [r5, #12]
	state->service = srv;
    8348:	e5854000 	str	r4, [r5]
	state->priv = NULL;
    834c:	e5857008 	str	r7, [r5, #8]
	if (srv->port_state_size) {
    8350:	0a000005 	beq	836c <_create_service+0x80>
		state->priv = calloc(1, srv->port_state_size);
    8354:	e3a00001 	mov	r0, #1
    8358:	eb000b7f 	bl	b15c <calloc>
		if (!state->priv) {
    835c:	e3500000 	cmp	r0, #0
		state->priv = calloc(1, srv->port_state_size);
    8360:	e5850008 	str	r0, [r5, #8]
		if (!state->priv) {
    8364:	0a000022 	beq	83f4 <_create_service+0x108>
    8368:	e5950004 	ldr	r0, [r5, #4]
	rc = set_cookie(state->port, &state->handler);
    836c:	e285100c 	add	r1, r5, #12
    8370:	eb000c49 	bl	b49c <set_cookie>
	if (rc < 0) {
    8374:	e2506000 	subs	r6, r0, #0
	return NO_ERROR;
    8378:	a3a06000 	movge	r6, #0
	if (rc < 0) {
    837c:	ba00000d 	blt	83b8 <_create_service+0xcc>
}
    8380:	e1a00006 	mov	r0, r6
    8384:	e28dd00c 	add	sp, sp, #12
    8388:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		TLOGI("Failed (%d) to create port\n", rc);
    838c:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8390:	e30c1e5c 	movw	r1, #52828	; 0xce5c
    8394:	e58d6000 	str	r6, [sp]
    8398:	e3402000 	movt	r2, #0
    839c:	e3401000 	movt	r1, #0
    83a0:	e3003103 	movw	r3, #259	; 0x103
    83a4:	e59f0074 	ldr	r0, [pc, #116]	; 8420 <_create_service+0x134>
    83a8:	eb001114 	bl	c800 <fprintf>
}
    83ac:	e1a00006 	mov	r0, r6
    83b0:	e28dd00c 	add	sp, sp, #12
    83b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		TLOGI("Failed (%d) to set cookie on port %d\n",
    83b8:	e5953004 	ldr	r3, [r5, #4]
    83bc:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    83c0:	e30c1e80 	movw	r1, #52864	; 0xce80
    83c4:	e58d6000 	str	r6, [sp]
    83c8:	e3402000 	movt	r2, #0
    83cc:	e3401000 	movt	r1, #0
    83d0:	e58d3004 	str	r3, [sp, #4]
    83d4:	e300311b 	movw	r3, #283	; 0x11b
    83d8:	e59f0040 	ldr	r0, [pc, #64]	; 8420 <_create_service+0x134>
    83dc:	eb001107 	bl	c800 <fprintf>
	_destroy_service(state);
    83e0:	e1a00005 	mov	r0, r5
    83e4:	ebffff80 	bl	81ec <_destroy_service>
}
    83e8:	e1a00006 	mov	r0, r6
    83ec:	e28dd00c 	add	sp, sp, #12
    83f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			rc = ERR_NO_MEMORY;
    83f4:	e3e06004 	mvn	r6, #4
    83f8:	eafffff8 	b	83e0 <_create_service+0xf4>
		TLOGI("null services specified\n");
    83fc:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8400:	e30c1e38 	movw	r1, #52792	; 0xce38
    8404:	e3402000 	movt	r2, #0
    8408:	e3401000 	movt	r1, #0
    840c:	e3a030fb 	mov	r3, #251	; 0xfb
    8410:	e59f0008 	ldr	r0, [pc, #8]	; 8420 <_create_service+0x134>
    8414:	eb0010f9 	bl	c800 <fprintf>
		return ERR_INVALID_ARGS;
    8418:	e3e06007 	mvn	r6, #7
    841c:	eaffffd7 	b	8380 <_create_service+0x94>
    8420:	0000e104 	.word	0x0000e104

00008424 <datasink_handle_chan>:
	if ((ev->event & IPC_HANDLE_POLL_ERROR) ||
    8424:	e5903004 	ldr	r3, [r0, #4]
{
    8428:	e92d4010 	push	{r4, lr}
    842c:	e1a04000 	mov	r4, r0
    8430:	e24dd010 	sub	sp, sp, #16
	if ((ev->event & IPC_HANDLE_POLL_ERROR) ||
    8434:	e3130012 	tst	r3, #18
    8438:	1a000021 	bne	84c4 <datasink_handle_chan+0xa0>
	if (ev->event & IPC_HANDLE_POLL_MSG) {
    843c:	e3130008 	tst	r3, #8
    8440:	1a00000b 	bne	8474 <datasink_handle_chan+0x50>
	if (ev->event & IPC_HANDLE_POLL_HUP) {
    8444:	e3130004 	tst	r3, #4
    8448:	1a000019 	bne	84b4 <datasink_handle_chan+0x90>
}
    844c:	e28dd010 	add	sp, sp, #16
    8450:	e8bd8010 	pop	{r4, pc}
		if (rc != NO_ERROR) {
    8454:	e3500000 	cmp	r0, #0
    8458:	e5943000 	ldr	r3, [r4]
    845c:	1a00000b 	bne	8490 <datasink_handle_chan+0x6c>
		rc = put_msg(ev->handle, inf.id);
    8460:	e1a00003 	mov	r0, r3
    8464:	e59d100c 	ldr	r1, [sp, #12]
    8468:	eb000c1a 	bl	b4d8 <put_msg>
		if (rc != NO_ERROR) {
    846c:	e3500000 	cmp	r0, #0
    8470:	1a000021 	bne	84fc <datasink_handle_chan+0xd8>
		rc = get_msg(ev->handle, &inf);
    8474:	e28d1008 	add	r1, sp, #8
    8478:	e5940000 	ldr	r0, [r4]
    847c:	eb000c0f 	bl	b4c0 <get_msg>
		if (rc == ERR_NO_MSG)
    8480:	e3700004 	cmn	r0, #4
    8484:	1afffff2 	bne	8454 <datasink_handle_chan+0x30>
    8488:	e5943004 	ldr	r3, [r4, #4]
    848c:	eaffffec 	b	8444 <datasink_handle_chan+0x20>
			TLOGI("failed (%d) to get_msg for chan (%d)\n",
    8490:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8494:	e30d10d0 	movw	r1, #53456	; 0xd0d0
    8498:	e58d3004 	str	r3, [sp, #4]
    849c:	e3402000 	movt	r2, #0
    84a0:	e58d0000 	str	r0, [sp]
    84a4:	e3401000 	movt	r1, #0
    84a8:	e3003215 	movw	r3, #533	; 0x215
    84ac:	e59f0074 	ldr	r0, [pc, #116]	; 8528 <datasink_handle_chan+0x104>
    84b0:	eb0010d2 	bl	c800 <fprintf>
			close(ev->handle);
    84b4:	e5940000 	ldr	r0, [r4]
    84b8:	eb000bf4 	bl	b490 <close>
}
    84bc:	e28dd010 	add	sp, sp, #16
    84c0:	e8bd8010 	pop	{r4, pc}
		TLOGI("error event (0x%x) for chan (%d)\n",
    84c4:	e5900000 	ldr	r0, [r0]
    84c8:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    84cc:	e30d10a4 	movw	r1, #53412	; 0xd0a4
    84d0:	e58d3000 	str	r3, [sp]
    84d4:	e3402000 	movt	r2, #0
    84d8:	e3401000 	movt	r1, #0
    84dc:	e58d0004 	str	r0, [sp, #4]
    84e0:	e300322e 	movw	r3, #558	; 0x22e
    84e4:	e59f003c 	ldr	r0, [pc, #60]	; 8528 <datasink_handle_chan+0x104>
    84e8:	eb0010c4 	bl	c800 <fprintf>
		close(ev->handle);
    84ec:	e5940000 	ldr	r0, [r4]
    84f0:	eb000be6 	bl	b490 <close>
}
    84f4:	e28dd010 	add	sp, sp, #16
    84f8:	e8bd8010 	pop	{r4, pc}
			TLOGI("failed (%d) to putt_msg for chan (%d)\n",
    84fc:	e5943000 	ldr	r3, [r4]
    8500:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8504:	e30d1100 	movw	r1, #53504	; 0xd100
    8508:	e58d0000 	str	r0, [sp]
    850c:	e3402000 	movt	r2, #0
    8510:	e3401000 	movt	r1, #0
    8514:	e58d3004 	str	r3, [sp, #4]
    8518:	e300321d 	movw	r3, #541	; 0x21d
    851c:	e59f0004 	ldr	r0, [pc, #4]	; 8528 <datasink_handle_chan+0x104>
    8520:	eb0010b6 	bl	c800 <fprintf>
    8524:	eaffffe2 	b	84b4 <datasink_handle_chan+0x90>
    8528:	0000e104 	.word	0x0000e104

0000852c <restart_service>:
{
    852c:	e92d4070 	push	{r4, r5, r6, lr}
	if (!state) {
    8530:	e2504000 	subs	r4, r0, #0
    8534:	0a000005 	beq	8550 <restart_service+0x24>
	const struct tipc_srv *srv = state->service;
    8538:	e5945000 	ldr	r5, [r4]
	_destroy_service(state);
    853c:	ebffff2a 	bl	81ec <_destroy_service>
	return _create_service(srv, state);
    8540:	e1a01004 	mov	r1, r4
    8544:	e1a00005 	mov	r0, r5
}
    8548:	e8bd4070 	pop	{r4, r5, r6, lr}
	return _create_service(srv, state);
    854c:	eaffff66 	b	82ec <_create_service>
		TLOGI("non-null state expected\n");
    8550:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8554:	e30c1ec4 	movw	r1, #52932	; 0xcec4
    8558:	e3402000 	movt	r2, #0
    855c:	e3401000 	movt	r1, #0
    8560:	e300312e 	movw	r3, #302	; 0x12e
    8564:	e59f0008 	ldr	r0, [pc, #8]	; 8574 <restart_service+0x48>
    8568:	eb0010a4 	bl	c800 <fprintf>
}
    856c:	e3e00007 	mvn	r0, #7
    8570:	e8bd8070 	pop	{r4, r5, r6, pc}
    8574:	0000e104 	.word	0x0000e104

00008578 <handle_port_errors>:
	    (ev->event & IPC_HANDLE_POLL_MSG) ||
    8578:	e590c004 	ldr	ip, [r0, #4]
	if ((ev->event & IPC_HANDLE_POLL_ERROR) ||
    857c:	e21c301e 	ands	r3, ip, #30
    8580:	1a000001 	bne	858c <handle_port_errors+0x14>
	return false;
    8584:	e1a00003 	mov	r0, r3
}
    8588:	e12fff1e 	bx	lr
		TLOGI("error event (0x%x) for port (%d)\n",
    858c:	e5903000 	ldr	r3, [r0]
    8590:	e30c2eb0 	movw	r2, #52912	; 0xceb0
{
    8594:	e92d4010 	push	{r4, lr}
		TLOGI("error event (0x%x) for port (%d)\n",
    8598:	e30d11f4 	movw	r1, #53748	; 0xd1f4
{
    859c:	e24dd008 	sub	sp, sp, #8
    85a0:	e1a04000 	mov	r4, r0
		TLOGI("error event (0x%x) for port (%d)\n",
    85a4:	e3402000 	movt	r2, #0
    85a8:	e3401000 	movt	r1, #0
    85ac:	e58dc000 	str	ip, [sp]
    85b0:	e58d3004 	str	r3, [sp, #4]
    85b4:	e3003162 	movw	r3, #354	; 0x162
    85b8:	e59f0018 	ldr	r0, [pc, #24]	; 85d8 <handle_port_errors+0x60>
    85bc:	eb00108f 	bl	c800 <fprintf>
	return containerof(ev->cookie, struct tipc_srv_state, handler);
    85c0:	e5940008 	ldr	r0, [r4, #8]
		restart_service(get_srv_state(ev));
    85c4:	e240000c 	sub	r0, r0, #12
    85c8:	ebffffd7 	bl	852c <restart_service>
		return true;
    85cc:	e3a00001 	mov	r0, #1
}
    85d0:	e28dd008 	add	sp, sp, #8
    85d4:	e8bd8010 	pop	{r4, pc}
    85d8:	0000e104 	.word	0x0000e104

000085dc <uuid_handle_port>:
{
    85dc:	e92d4070 	push	{r4, r5, r6, lr}
    85e0:	e24dd030 	sub	sp, sp, #48	; 0x30
    85e4:	e1a04000 	mov	r4, r0
	if (handle_port_errors(ev))
    85e8:	ebffffe2 	bl	8578 <handle_port_errors>
    85ec:	e2505000 	subs	r5, r0, #0
    85f0:	1a000002 	bne	8600 <uuid_handle_port+0x24>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    85f4:	e5943004 	ldr	r3, [r4, #4]
    85f8:	e3130001 	tst	r3, #1
    85fc:	1a000001 	bne	8608 <uuid_handle_port+0x2c>
}
    8600:	e28dd030 	add	sp, sp, #48	; 0x30
    8604:	e8bd8070 	pop	{r4, r5, r6, pc}
		int rc = accept(ev->handle, &peer_uuid);
    8608:	e5940000 	ldr	r0, [r4]
    860c:	e28d1020 	add	r1, sp, #32
    8610:	eb000b9b 	bl	b484 <accept>
		if (rc < 0) {
    8614:	e2506000 	subs	r6, r0, #0
    8618:	ba000010 	blt	8660 <uuid_handle_port+0x84>
		iov.len  = sizeof(peer_uuid);
    861c:	e3a0c010 	mov	ip, #16
		iov.base = &peer_uuid;
    8620:	e28d3020 	add	r3, sp, #32
		msg.num_iov = 1;
    8624:	e3a02001 	mov	r2, #1
		iov.base = &peer_uuid;
    8628:	e58d3008 	str	r3, [sp, #8]
		rc = send_msg(chan, &msg);
    862c:	e08d100c 	add	r1, sp, ip
		msg.iov     = &iov;
    8630:	e28d3008 	add	r3, sp, #8
		msg.num_handles = 0;
    8634:	e58d5018 	str	r5, [sp, #24]
		msg.handles  = NULL;
    8638:	e58d501c 	str	r5, [sp, #28]
		iov.len  = sizeof(peer_uuid);
    863c:	e58dc00c 	str	ip, [sp, #12]
		msg.iov     = &iov;
    8640:	e1cd21f0 	strd	r2, [sp, #16]
		rc = send_msg(chan, &msg);
    8644:	eb000ba6 	bl	b4e4 <send_msg>
		if (rc < 0) {
    8648:	e3500000 	cmp	r0, #0
    864c:	ba00000e 	blt	868c <uuid_handle_port+0xb0>
		close(chan);
    8650:	e1a00006 	mov	r0, r6
    8654:	eb000b8d 	bl	b490 <close>
}
    8658:	e28dd030 	add	sp, sp, #48	; 0x30
    865c:	e8bd8070 	pop	{r4, r5, r6, pc}
			TLOGI("failed (%d) to accept on port %d\n",
    8660:	e5943000 	ldr	r3, [r4]
    8664:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8668:	e30d14c4 	movw	r1, #54468	; 0xd4c4
    866c:	e58d6000 	str	r6, [sp]
    8670:	e3402000 	movt	r2, #0
    8674:	e3401000 	movt	r1, #0
    8678:	e58d3004 	str	r3, [sp, #4]
    867c:	e300331d 	movw	r3, #797	; 0x31d
    8680:	e59f002c 	ldr	r0, [pc, #44]	; 86b4 <uuid_handle_port+0xd8>
    8684:	eb00105d 	bl	c800 <fprintf>
			return;
    8688:	eaffffdc 	b	8600 <uuid_handle_port+0x24>
			TLOGI("failed (%d) to send_msg for chan (%d)\n",
    868c:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8690:	e30d14f0 	movw	r1, #54512	; 0xd4f0
    8694:	e58d0000 	str	r0, [sp]
    8698:	e3402000 	movt	r2, #0
    869c:	e58d6004 	str	r6, [sp, #4]
    86a0:	e3401000 	movt	r1, #0
    86a4:	e3a03fcb 	mov	r3, #812	; 0x32c
    86a8:	e59f0004 	ldr	r0, [pc, #4]	; 86b4 <uuid_handle_port+0xd8>
    86ac:	eb001053 	bl	c800 <fprintf>
    86b0:	eaffffe6 	b	8650 <uuid_handle_port+0x74>
    86b4:	0000e104 	.word	0x0000e104

000086b8 <echo_handle_port>:
	const struct tipc_srv *srv = get_srv_state(ev)->service;
    86b8:	e5903008 	ldr	r3, [r0, #8]
{
    86bc:	e92d4070 	push	{r4, r5, r6, lr}
    86c0:	e24dd018 	sub	sp, sp, #24
    86c4:	e1a04000 	mov	r4, r0
	const struct tipc_srv *srv = get_srv_state(ev)->service;
    86c8:	e513500c 	ldr	r5, [r3, #-12]
	if (handle_port_errors(ev))
    86cc:	ebffffa9 	bl	8578 <handle_port_errors>
    86d0:	e3500000 	cmp	r0, #0
    86d4:	1a000002 	bne	86e4 <echo_handle_port+0x2c>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    86d8:	e5943004 	ldr	r3, [r4, #4]
    86dc:	e3130001 	tst	r3, #1
    86e0:	1a000001 	bne	86ec <echo_handle_port+0x34>
}
    86e4:	e28dd018 	add	sp, sp, #24
    86e8:	e8bd8070 	pop	{r4, r5, r6, pc}
		int rc = accept(ev->handle, &peer_uuid);
    86ec:	e28d1008 	add	r1, sp, #8
    86f0:	e5940000 	ldr	r0, [r4]
    86f4:	eb000b62 	bl	b484 <accept>
		if (rc < 0) {
    86f8:	e2506000 	subs	r6, r0, #0
    86fc:	ba00001e 	blt	877c <echo_handle_port+0xc4>
		chan_st = calloc(1, sizeof(struct echo_chan_state) +
    8700:	e5951004 	ldr	r1, [r5, #4]
    8704:	e3a00001 	mov	r0, #1
    8708:	e2811003 	add	r1, r1, #3
    870c:	e1a01181 	lsl	r1, r1, #3
    8710:	eb000a91 	bl	b15c <calloc>
		if (!chan_st) {
    8714:	e2504000 	subs	r4, r0, #0
    8718:	0a000022 	beq	87a8 <echo_handle_port+0xf0>
		chan_st->msg_max_num  = srv->msg_num;
    871c:	e5952004 	ldr	r2, [r5, #4]
		rc = set_cookie(chan, &chan_st->handler);
    8720:	e1a01004 	mov	r1, r4
		chan_st->handler.proc = srv->chan_handler;
    8724:	e595301c 	ldr	r3, [r5, #28]
		rc = set_cookie(chan, &chan_st->handler);
    8728:	e1a00006 	mov	r0, r6
		chan_st->handler.priv = chan_st;
    872c:	e5844004 	str	r4, [r4, #4]
		chan_st->msg_max_num  = srv->msg_num;
    8730:	e5842008 	str	r2, [r4, #8]
		chan_st->handler.proc = srv->chan_handler;
    8734:	e5843000 	str	r3, [r4]
		rc = set_cookie(chan, &chan_st->handler);
    8738:	eb000b57 	bl	b49c <set_cookie>
		if (rc) {
    873c:	e3500000 	cmp	r0, #0
    8740:	0affffe7 	beq	86e4 <echo_handle_port+0x2c>
			TLOGI("failed (%d) to set_cookie on chan %d\n",
    8744:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8748:	e30d11c4 	movw	r1, #53700	; 0xd1c4
    874c:	e3402000 	movt	r2, #0
    8750:	e58d0000 	str	r0, [sp]
    8754:	e3401000 	movt	r1, #0
    8758:	e30032ff 	movw	r3, #767	; 0x2ff
    875c:	e58d6004 	str	r6, [sp, #4]
    8760:	e59f0070 	ldr	r0, [pc, #112]	; 87d8 <echo_handle_port+0x120>
    8764:	eb001025 	bl	c800 <fprintf>
			free(chan_st);
    8768:	e1a00004 	mov	r0, r4
    876c:	eb0008a9 	bl	aa18 <free>
			close(chan);
    8770:	e1a00006 	mov	r0, r6
    8774:	eb000b45 	bl	b490 <close>
			return;
    8778:	eaffffd9 	b	86e4 <echo_handle_port+0x2c>
			TLOGI("failed (%d) to accept on port %d\n",
    877c:	e5943000 	ldr	r3, [r4]
    8780:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8784:	e30d14c4 	movw	r1, #54468	; 0xd4c4
    8788:	e58d6000 	str	r6, [sp]
    878c:	e3402000 	movt	r2, #0
    8790:	e3401000 	movt	r1, #0
    8794:	e58d3004 	str	r3, [sp, #4]
    8798:	e3a03fba 	mov	r3, #744	; 0x2e8
    879c:	e59f0034 	ldr	r0, [pc, #52]	; 87d8 <echo_handle_port+0x120>
    87a0:	eb001016 	bl	c800 <fprintf>
			return;
    87a4:	eaffffce 	b	86e4 <echo_handle_port+0x2c>
			TLOGI("failed (%d) to callocate state for chan %d\n",
    87a8:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    87ac:	e30d1190 	movw	r1, #53648	; 0xd190
    87b0:	e58d6004 	str	r6, [sp, #4]
    87b4:	e3402000 	movt	r2, #0
    87b8:	e58d6000 	str	r6, [sp]
    87bc:	e3401000 	movt	r1, #0
    87c0:	e30032f1 	movw	r3, #753	; 0x2f1
    87c4:	e59f000c 	ldr	r0, [pc, #12]	; 87d8 <echo_handle_port+0x120>
    87c8:	eb00100c 	bl	c800 <fprintf>
			close(chan);
    87cc:	e1a00006 	mov	r0, r6
    87d0:	eb000b2e 	bl	b490 <close>
			return;
    87d4:	eaffffc2 	b	86e4 <echo_handle_port+0x2c>
    87d8:	0000e104 	.word	0x0000e104

000087dc <datasink_handle_port>:
{
    87dc:	e92d4030 	push	{r4, r5, lr}
    87e0:	e24dd01c 	sub	sp, sp, #28
    87e4:	e1a04000 	mov	r4, r0
	if (handle_port_errors(ev))
    87e8:	ebffff62 	bl	8578 <handle_port_errors>
    87ec:	e3500000 	cmp	r0, #0
    87f0:	1a000002 	bne	8800 <datasink_handle_port+0x24>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    87f4:	e5943004 	ldr	r3, [r4, #4]
    87f8:	e3130001 	tst	r3, #1
    87fc:	1a000001 	bne	8808 <datasink_handle_port+0x2c>
}
    8800:	e28dd01c 	add	sp, sp, #28
    8804:	e8bd8030 	pop	{r4, r5, pc}
		int rc = accept(ev->handle, &peer_uuid);
    8808:	e28d1008 	add	r1, sp, #8
    880c:	e5940000 	ldr	r0, [r4]
    8810:	eb000b1b 	bl	b484 <accept>
		if (rc < 0) {
    8814:	e2505000 	subs	r5, r0, #0
    8818:	ba00000e 	blt	8858 <datasink_handle_port+0x7c>
		rc = set_cookie(chan, &_datasink_chan_handler);
    881c:	e30e101c 	movw	r1, #57372	; 0xe01c
    8820:	e3401000 	movt	r1, #0
    8824:	eb000b1c 	bl	b49c <set_cookie>
		if (rc) {
    8828:	e3500000 	cmp	r0, #0
    882c:	0afffff3 	beq	8800 <datasink_handle_port+0x24>
			TLOGI("failed (%d) to set_cookie on chan %d\n",
    8830:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8834:	e30d11c4 	movw	r1, #53700	; 0xd1c4
    8838:	e58d0000 	str	r0, [sp]
    883c:	e3402000 	movt	r2, #0
    8840:	e58d5004 	str	r5, [sp, #4]
    8844:	e3401000 	movt	r1, #0
    8848:	e3a03f96 	mov	r3, #600	; 0x258
    884c:	e59f0030 	ldr	r0, [pc, #48]	; 8884 <datasink_handle_port+0xa8>
    8850:	eb000fea 	bl	c800 <fprintf>
    8854:	eaffffe9 	b	8800 <datasink_handle_port+0x24>
			TLOGI("failed (%d) to accept on port %d\n",
    8858:	e5943000 	ldr	r3, [r4]
    885c:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8860:	e30d14c4 	movw	r1, #54468	; 0xd4c4
    8864:	e58d5000 	str	r5, [sp]
    8868:	e3402000 	movt	r2, #0
    886c:	e3401000 	movt	r1, #0
    8870:	e58d3004 	str	r3, [sp, #4]
    8874:	e3a03e25 	mov	r3, #592	; 0x250
    8878:	e59f0004 	ldr	r0, [pc, #4]	; 8884 <datasink_handle_port+0xa8>
    887c:	eb000fdf 	bl	c800 <fprintf>
			return;
    8880:	eaffffde 	b	8800 <datasink_handle_port+0x24>
    8884:	0000e104 	.word	0x0000e104

00008888 <closer3_handle_port>:
	struct closer3_state *st = get_srv_state(ev)->priv;
    8888:	e5903008 	ldr	r3, [r0, #8]
{
    888c:	e92d4070 	push	{r4, r5, r6, lr}
    8890:	e24dd018 	sub	sp, sp, #24
    8894:	e1a04000 	mov	r4, r0
	struct closer3_state *st = get_srv_state(ev)->priv;
    8898:	e5135004 	ldr	r5, [r3, #-4]
	if (handle_port_errors(ev))
    889c:	ebffff35 	bl	8578 <handle_port_errors>
    88a0:	e2506000 	subs	r6, r0, #0
    88a4:	1a000002 	bne	88b4 <closer3_handle_port+0x2c>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    88a8:	e5943004 	ldr	r3, [r4, #4]
    88ac:	e3130001 	tst	r3, #1
    88b0:	1a000001 	bne	88bc <closer3_handle_port+0x34>
}
    88b4:	e28dd018 	add	sp, sp, #24
    88b8:	e8bd8070 	pop	{r4, r5, r6, pc}
		int rc = accept(ev->handle, &peer_uuid);
    88bc:	e5940000 	ldr	r0, [r4]
    88c0:	e28d1008 	add	r1, sp, #8
    88c4:	eb000aee 	bl	b484 <accept>
		if (rc < 0) {
    88c8:	e2503000 	subs	r3, r0, #0
    88cc:	ba00001b 	blt	8940 <closer3_handle_port+0xb8>
		st->chans[st->chan_cnt++] = (handle_t) rc;
    88d0:	e5952010 	ldr	r2, [r5, #16]
		set_cookie((handle_t)rc, &_datasink_chan_handler);
    88d4:	e30e101c 	movw	r1, #57372	; 0xe01c
    88d8:	e3401000 	movt	r1, #0
		st->chans[st->chan_cnt++] = (handle_t) rc;
    88dc:	e282c001 	add	ip, r2, #1
    88e0:	e585c010 	str	ip, [r5, #16]
    88e4:	e7853102 	str	r3, [r5, r2, lsl #2]
		set_cookie((handle_t)rc, &_datasink_chan_handler);
    88e8:	eb000aeb 	bl	b49c <set_cookie>
		if (st->chan_cnt == countof(st->chans)) {
    88ec:	e5953010 	ldr	r3, [r5, #16]
    88f0:	e3530004 	cmp	r3, #4
    88f4:	1affffee 	bne	88b4 <closer3_handle_port+0x2c>
			nanosleep (0, 0, 100 * MSEC);
    88f8:	e28f3068 	add	r3, pc, #104	; 0x68
    88fc:	e1c320d0 	ldrd	r2, [r3]
    8900:	e1a01006 	mov	r1, r6
    8904:	e1a00006 	mov	r0, r6
    8908:	eb000ad4 	bl	b460 <nanosleep>
			for (uint i = 0; i < st->chan_cnt; i++ )
    890c:	e5953010 	ldr	r3, [r5, #16]
    8910:	e3530000 	cmp	r3, #0
    8914:	0a000006 	beq	8934 <closer3_handle_port+0xac>
    8918:	e2454004 	sub	r4, r5, #4
				close(st->chans[i]);
    891c:	e5b40004 	ldr	r0, [r4, #4]!
			for (uint i = 0; i < st->chan_cnt; i++ )
    8920:	e2866001 	add	r6, r6, #1
				close(st->chans[i]);
    8924:	eb000ad9 	bl	b490 <close>
			for (uint i = 0; i < st->chan_cnt; i++ )
    8928:	e5953010 	ldr	r3, [r5, #16]
    892c:	e1530006 	cmp	r3, r6
    8930:	8afffff9 	bhi	891c <closer3_handle_port+0x94>
			st->chan_cnt = 0;
    8934:	e3a03000 	mov	r3, #0
    8938:	e5853010 	str	r3, [r5, #16]
    893c:	eaffffdc 	b	88b4 <closer3_handle_port+0x2c>
			TLOGI("accept failed (%d)\n", rc);
    8940:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8944:	e30d1058 	movw	r1, #53336	; 0xd058
    8948:	e58d3000 	str	r3, [sp]
    894c:	e3402000 	movt	r2, #0
    8950:	e3401000 	movt	r1, #0
    8954:	e30031ed 	movw	r3, #493	; 0x1ed
    8958:	e59f0010 	ldr	r0, [pc, #16]	; 8970 <closer3_handle_port+0xe8>
    895c:	eb000fa7 	bl	c800 <fprintf>
			return;
    8960:	eaffffd3 	b	88b4 <closer3_handle_port+0x2c>
    8964:	e320f000 	nop	{0}
    8968:	05f5e100 	.word	0x05f5e100
    896c:	00000000 	.word	0x00000000
    8970:	0000e104 	.word	0x0000e104
    8974:	00000000 	.word	0x00000000

00008978 <closer1_handle_port>:
	struct closer1_state *st = get_srv_state(ev)->priv;
    8978:	e5903008 	ldr	r3, [r0, #8]
{
    897c:	e92d4070 	push	{r4, r5, r6, lr}
    8980:	e24dd018 	sub	sp, sp, #24
    8984:	e1a04000 	mov	r4, r0
	struct closer1_state *st = get_srv_state(ev)->priv;
    8988:	e5135004 	ldr	r5, [r3, #-4]
	if (handle_port_errors(ev))
    898c:	ebfffef9 	bl	8578 <handle_port_errors>
    8990:	e2506000 	subs	r6, r0, #0
    8994:	1a000002 	bne	89a4 <closer1_handle_port+0x2c>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8998:	e5943004 	ldr	r3, [r4, #4]
    899c:	e3130001 	tst	r3, #1
    89a0:	1a000001 	bne	89ac <closer1_handle_port+0x34>
}
    89a4:	e28dd018 	add	sp, sp, #24
    89a8:	e8bd8070 	pop	{r4, r5, r6, pc}
		st->conn_cnt++;
    89ac:	e5953000 	ldr	r3, [r5]
		int rc = accept(ev->handle, &peer_uuid);
    89b0:	e28d1008 	add	r1, sp, #8
    89b4:	e5940000 	ldr	r0, [r4]
		st->conn_cnt++;
    89b8:	e2833001 	add	r3, r3, #1
    89bc:	e5853000 	str	r3, [r5]
		int rc = accept(ev->handle, &peer_uuid);
    89c0:	eb000aaf 	bl	b484 <accept>
		if (rc < 0) {
    89c4:	e2504000 	subs	r4, r0, #0
    89c8:	ba000016 	blt	8a28 <closer1_handle_port+0xb0>
		if (st->conn_cnt & 1) {
    89cc:	e5953000 	ldr	r3, [r5]
    89d0:	e3130001 	tst	r3, #1
    89d4:	1a00000d 	bne	8a10 <closer1_handle_port+0x98>
		rc = close(chan);
    89d8:	e1a00004 	mov	r0, r4
    89dc:	eb000aab 	bl	b490 <close>
		if (rc != NO_ERROR) {
    89e0:	e3500000 	cmp	r0, #0
    89e4:	0affffee 	beq	89a4 <closer1_handle_port+0x2c>
			TLOGI("Failed (%d) to close chan %d\n", rc, chan);
    89e8:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    89ec:	e30d1030 	movw	r1, #53296	; 0xd030
    89f0:	e58d0000 	str	r0, [sp]
    89f4:	e3402000 	movt	r2, #0
    89f8:	e58d4004 	str	r4, [sp, #4]
    89fc:	e3401000 	movt	r1, #0
    8a00:	e30031c5 	movw	r3, #453	; 0x1c5
    8a04:	e59f004c 	ldr	r0, [pc, #76]	; 8a58 <closer1_handle_port+0xe0>
    8a08:	eb000f7c 	bl	c800 <fprintf>
    8a0c:	eaffffe4 	b	89a4 <closer1_handle_port+0x2c>
			nanosleep (0, 0, 100 * MSEC);
    8a10:	e28f3038 	add	r3, pc, #56	; 0x38
    8a14:	e1c320d0 	ldrd	r2, [r3]
    8a18:	e1a01006 	mov	r1, r6
    8a1c:	e1a00006 	mov	r0, r6
    8a20:	eb000a8e 	bl	b460 <nanosleep>
    8a24:	eaffffeb 	b	89d8 <closer1_handle_port+0x60>
			TLOGI("accept failed (%d)\n", rc);
    8a28:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8a2c:	e30d1058 	movw	r1, #53336	; 0xd058
    8a30:	e58d4000 	str	r4, [sp]
    8a34:	e3402000 	movt	r2, #0
    8a38:	e3401000 	movt	r1, #0
    8a3c:	e30031b9 	movw	r3, #441	; 0x1b9
    8a40:	e59f0010 	ldr	r0, [pc, #16]	; 8a58 <closer1_handle_port+0xe0>
    8a44:	eb000f6d 	bl	c800 <fprintf>
			return;
    8a48:	eaffffd5 	b	89a4 <closer1_handle_port+0x2c>
    8a4c:	e320f000 	nop	{0}
    8a50:	05f5e100 	.word	0x05f5e100
    8a54:	00000000 	.word	0x00000000
    8a58:	0000e104 	.word	0x0000e104
    8a5c:	00000000 	.word	0x00000000

00008a60 <closer2_handle_port>:
	struct closer2_state *st = get_srv_state(ev)->priv;
    8a60:	e5903008 	ldr	r3, [r0, #8]
{
    8a64:	e92d4070 	push	{r4, r5, r6, lr}
    8a68:	e1a04000 	mov	r4, r0
	struct closer2_state *st = get_srv_state(ev)->priv;
    8a6c:	e5135004 	ldr	r5, [r3, #-4]
	if (handle_port_errors(ev))
    8a70:	ebfffec0 	bl	8578 <handle_port_errors>
    8a74:	e2501000 	subs	r1, r0, #0
    8a78:	18bd8070 	popne	{r4, r5, r6, pc}
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8a7c:	e5943004 	ldr	r3, [r4, #4]
    8a80:	e3130001 	tst	r3, #1
    8a84:	08bd8070 	popeq	{r4, r5, r6, pc}
		st->conn_cnt++;
    8a88:	e5953000 	ldr	r3, [r5]
    8a8c:	e2833001 	add	r3, r3, #1
		if (st->conn_cnt & 1) {
    8a90:	e3130001 	tst	r3, #1
		st->conn_cnt++;
    8a94:	e5853000 	str	r3, [r5]
		if (st->conn_cnt & 1) {
    8a98:	1a000003 	bne	8aac <closer2_handle_port+0x4c>
	return containerof(ev->cookie, struct tipc_srv_state, handler);
    8a9c:	e5940008 	ldr	r0, [r4, #8]
}
    8aa0:	e8bd4070 	pop	{r4, r5, r6, lr}
		restart_service(get_srv_state(ev));
    8aa4:	e240000c 	sub	r0, r0, #12
    8aa8:	eafffe9f 	b	852c <restart_service>
			nanosleep (0, 0, 100 * MSEC);
    8aac:	e28f300c 	add	r3, pc, #12
    8ab0:	e1c320d0 	ldrd	r2, [r3]
    8ab4:	eb000a69 	bl	b460 <nanosleep>
    8ab8:	eafffff7 	b	8a9c <closer2_handle_port+0x3c>
    8abc:	e320f000 	nop	{0}
    8ac0:	05f5e100 	.word	0x05f5e100
    8ac4:	00000000 	.word	0x00000000

00008ac8 <echo_handle_chan>:
	if (ev->event & IPC_HANDLE_POLL_ERROR) {
    8ac8:	e5903004 	ldr	r3, [r0, #4]
{
    8acc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ad0:	e1a05000 	mov	r5, r0
    8ad4:	e24dd020 	sub	sp, sp, #32
	if (ev->event & IPC_HANDLE_POLL_ERROR) {
    8ad8:	e3130002 	tst	r3, #2
    8adc:	1a000054 	bne	8c34 <echo_handle_chan+0x16c>
	if (ev->event & (IPC_HANDLE_POLL_MSG |
    8ae0:	e3130018 	tst	r3, #24
    8ae4:	1a000007 	bne	8b08 <echo_handle_chan+0x40>
	if (ev->event & IPC_HANDLE_POLL_HUP) {
    8ae8:	e3130004 	tst	r3, #4
    8aec:	0a000003 	beq	8b00 <echo_handle_chan+0x38>
	free(ev->cookie);
    8af0:	e5950008 	ldr	r0, [r5, #8]
    8af4:	eb0007c7 	bl	aa18 <free>
	close(ev->handle);
    8af8:	e5950000 	ldr	r0, [r5]
    8afc:	eb000a63 	bl	b490 <close>
}
    8b00:	e28dd020 	add	sp, sp, #32
    8b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	return _echo_handle_msg(ev, false);
    8b08:	e5904008 	ldr	r4, [r0, #8]
    8b0c:	e594100c 	ldr	r1, [r4, #12]
    8b10:	e5942008 	ldr	r2, [r4, #8]
    8b14:	ea000011 	b	8b60 <echo_handle_chan+0x98>
		rc = get_msg(ev->handle, &st->msg_queue[st->msg_next_w]);
    8b18:	e5941014 	ldr	r1, [r4, #20]
    8b1c:	e5950000 	ldr	r0, [r5]
    8b20:	e2811003 	add	r1, r1, #3
    8b24:	e0841181 	add	r1, r4, r1, lsl #3
    8b28:	eb000a64 	bl	b4c0 <get_msg>
		if (rc == ERR_NO_MSG)
    8b2c:	e3700004 	cmn	r0, #4
    8b30:	0a00004a 	beq	8c60 <echo_handle_chan+0x198>
		if (rc != NO_ERROR) {
    8b34:	e3500000 	cmp	r0, #0
    8b38:	1a00004a 	bne	8c68 <echo_handle_chan+0x1a0>
		st->msg_next_w++;
    8b3c:	e5943014 	ldr	r3, [r4, #20]
		st->msg_cnt++;
    8b40:	e594100c 	ldr	r1, [r4, #12]
		if (st->msg_next_w == st->msg_max_num)
    8b44:	e5942008 	ldr	r2, [r4, #8]
		st->msg_next_w++;
    8b48:	e2833001 	add	r3, r3, #1
		st->msg_cnt++;
    8b4c:	e2811001 	add	r1, r1, #1
		st->msg_next_w++;
    8b50:	e5843014 	str	r3, [r4, #20]
		if (st->msg_next_w == st->msg_max_num)
    8b54:	e1530002 	cmp	r3, r2
		st->msg_cnt++;
    8b58:	e584100c 	str	r1, [r4, #12]
			st->msg_next_w = 0;
    8b5c:	05840014 	streq	r0, [r4, #20]
	while (st->msg_cnt != st->msg_max_num) {
    8b60:	e1510002 	cmp	r1, r2
    8b64:	1affffeb 	bne	8b18 <echo_handle_chan+0x50>
		iov.base = echo_msg_buf;
    8b68:	e30e6158 	movw	r6, #57688	; 0xe158
		iov.len  = sizeof(echo_msg_buf);
    8b6c:	e3a08a01 	mov	r8, #4096	; 0x1000
		iov.base = echo_msg_buf;
    8b70:	e3406000 	movt	r6, #0
		msg.num_iov = 1;
    8b74:	e3a07001 	mov	r7, #1
    8b78:	ea000026 	b	8c18 <echo_handle_chan+0x150>
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8b7c:	e5941010 	ldr	r1, [r4, #16]
		msg.iov     = &iov;
    8b80:	e28d0008 	add	r0, sp, #8
    8b84:	e58d0014 	str	r0, [sp, #20]
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8b88:	e5950000 	ldr	r0, [r5]
		iov.base = echo_msg_buf;
    8b8c:	e58d6008 	str	r6, [sp, #8]
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8b90:	e0841181 	add	r1, r4, r1, lsl #3
		iov.len  = sizeof(echo_msg_buf);
    8b94:	e58d800c 	str	r8, [sp, #12]
		msg.num_iov = 1;
    8b98:	e58d7010 	str	r7, [sp, #16]
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8b9c:	e591101c 	ldr	r1, [r1, #28]
		msg.num_handles = 0;
    8ba0:	e58dc018 	str	ip, [sp, #24]
		msg.handles  = NULL;
    8ba4:	e58dc01c 	str	ip, [sp, #28]
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8ba8:	eb000a47 	bl	b4cc <read_msg>
		if (rc < 0) {
    8bac:	e2503000 	subs	r3, r0, #0
		rc = send_msg(ev->handle, &msg);
    8bb0:	e28d1010 	add	r1, sp, #16
			TLOGI("failed (%d) to read_msg for chan (%d)\n",
    8bb4:	e5950000 	ldr	r0, [r5]
		if (rc < 0) {
    8bb8:	ba000040 	blt	8cc0 <echo_handle_chan+0x1f8>
		iov.len = (size_t) rc;
    8bbc:	e58d300c 	str	r3, [sp, #12]
		rc = send_msg(ev->handle, &msg);
    8bc0:	eb000a47 	bl	b4e4 <send_msg>
		if (rc == ERR_NOT_ENOUGH_BUFFER)
    8bc4:	e3700009 	cmn	r0, #9
    8bc8:	0a000017 	beq	8c2c <echo_handle_chan+0x164>
		if (rc < 0) {
    8bcc:	e3500000 	cmp	r0, #0
    8bd0:	e595c000 	ldr	ip, [r5]
    8bd4:	ba000043 	blt	8ce8 <echo_handle_chan+0x220>
		rc = put_msg(ev->handle, st->msg_queue[st->msg_next_r].id);
    8bd8:	e5943010 	ldr	r3, [r4, #16]
    8bdc:	e1a0000c 	mov	r0, ip
    8be0:	e0843183 	add	r3, r4, r3, lsl #3
    8be4:	e593101c 	ldr	r1, [r3, #28]
    8be8:	eb000a3a 	bl	b4d8 <put_msg>
		if (rc != NO_ERROR) {
    8bec:	e3500000 	cmp	r0, #0
    8bf0:	1a000046 	bne	8d10 <echo_handle_chan+0x248>
		st->msg_next_r++;
    8bf4:	e5943010 	ldr	r3, [r4, #16]
		if (st->msg_next_r == st->msg_max_num)
    8bf8:	e5942008 	ldr	r2, [r4, #8]
		st->msg_cnt--;
    8bfc:	e594100c 	ldr	r1, [r4, #12]
		st->msg_next_r++;
    8c00:	e2833001 	add	r3, r3, #1
		if (st->msg_next_r == st->msg_max_num)
    8c04:	e1530002 	cmp	r3, r2
		st->msg_next_r++;
    8c08:	e5843010 	str	r3, [r4, #16]
		st->msg_cnt--;
    8c0c:	e2411001 	sub	r1, r1, #1
    8c10:	e584100c 	str	r1, [r4, #12]
		if (st->msg_next_r == st->msg_max_num)
    8c14:	0a000048 	beq	8d3c <echo_handle_chan+0x274>
		msg.num_handles = 0;
    8c18:	e3a0c000 	mov	ip, #0
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8c1c:	e28d3010 	add	r3, sp, #16
	while (st->msg_cnt) {
    8c20:	e151000c 	cmp	r1, ip
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8c24:	e1a0200c 	mov	r2, ip
	while (st->msg_cnt) {
    8c28:	1affffd3 	bne	8b7c <echo_handle_chan+0xb4>
    8c2c:	e5953004 	ldr	r3, [r5, #4]
    8c30:	eaffffac 	b	8ae8 <echo_handle_chan+0x20>
		TLOGI("error event (0x%x) for chan (%d)\n",
    8c34:	e5900000 	ldr	r0, [r0]
    8c38:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8c3c:	e30d10a4 	movw	r1, #53412	; 0xd0a4
    8c40:	e58d3000 	str	r3, [sp]
    8c44:	e3402000 	movt	r2, #0
    8c48:	e3401000 	movt	r1, #0
    8c4c:	e58d0004 	str	r0, [sp, #4]
    8c50:	e30032bd 	movw	r3, #701	; 0x2bd
    8c54:	e59f00e8 	ldr	r0, [pc, #232]	; 8d44 <echo_handle_chan+0x27c>
    8c58:	eb000ee8 	bl	c800 <fprintf>
		goto close_it;
    8c5c:	eaffffa3 	b	8af0 <echo_handle_chan+0x28>
    8c60:	e594100c 	ldr	r1, [r4, #12]
    8c64:	eaffffbf 	b	8b68 <echo_handle_chan+0xa0>
			TLOGI("failed (%d) to get_msg for chan (%d)\n",
    8c68:	e5953000 	ldr	r3, [r5]
    8c6c:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8c70:	e30d10d0 	movw	r1, #53456	; 0xd0d0
    8c74:	e58d0000 	str	r0, [sp]
    8c78:	e3402000 	movt	r2, #0
    8c7c:	e3401000 	movt	r1, #0
    8c80:	e58d3004 	str	r3, [sp, #4]
    8c84:	e3a03e27 	mov	r3, #624	; 0x270
    8c88:	e59f00b4 	ldr	r0, [pc, #180]	; 8d44 <echo_handle_chan+0x27c>
    8c8c:	eb000edb 	bl	c800 <fprintf>
			TLOGI("error event (0x%x) for chan (%d)\n",
    8c90:	e5953000 	ldr	r3, [r5]
    8c94:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8c98:	e5950004 	ldr	r0, [r5, #4]
    8c9c:	e30d10a4 	movw	r1, #53412	; 0xd0a4
    8ca0:	e3402000 	movt	r2, #0
    8ca4:	e3401000 	movt	r1, #0
    8ca8:	e58d3004 	str	r3, [sp, #4]
    8cac:	e30032c5 	movw	r3, #709	; 0x2c5
    8cb0:	e58d0000 	str	r0, [sp]
    8cb4:	e59f0088 	ldr	r0, [pc, #136]	; 8d44 <echo_handle_chan+0x27c>
    8cb8:	eb000ed0 	bl	c800 <fprintf>
			goto close_it;
    8cbc:	eaffff8b 	b	8af0 <echo_handle_chan+0x28>
			TLOGI("failed (%d) to read_msg for chan (%d)\n",
    8cc0:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8cc4:	e30d1130 	movw	r1, #53552	; 0xd130
    8cc8:	e58d3000 	str	r3, [sp]
    8ccc:	e3402000 	movt	r2, #0
    8cd0:	e58d0004 	str	r0, [sp, #4]
    8cd4:	e3401000 	movt	r1, #0
    8cd8:	e3a03fa2 	mov	r3, #648	; 0x288
    8cdc:	e59f0060 	ldr	r0, [pc, #96]	; 8d44 <echo_handle_chan+0x27c>
    8ce0:	eb000ec6 	bl	c800 <fprintf>
    8ce4:	eaffffe9 	b	8c90 <echo_handle_chan+0x1c8>
			TLOGI("failed (%d) to send_msg for chan (%d)\n",
    8ce8:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8cec:	e30d14f0 	movw	r1, #54512	; 0xd4f0
    8cf0:	e58d0000 	str	r0, [sp]
    8cf4:	e3402000 	movt	r2, #0
    8cf8:	e58dc004 	str	ip, [sp, #4]
    8cfc:	e3401000 	movt	r1, #0
    8d00:	e300329b 	movw	r3, #667	; 0x29b
    8d04:	e59f0038 	ldr	r0, [pc, #56]	; 8d44 <echo_handle_chan+0x27c>
    8d08:	eb000ebc 	bl	c800 <fprintf>
    8d0c:	eaffffdf 	b	8c90 <echo_handle_chan+0x1c8>
			TLOGI("failed (%d) to put_msg for chan (%d)\n",
    8d10:	e5953000 	ldr	r3, [r5]
    8d14:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8d18:	e30d1160 	movw	r1, #53600	; 0xd160
    8d1c:	e58d0000 	str	r0, [sp]
    8d20:	e3402000 	movt	r2, #0
    8d24:	e3401000 	movt	r1, #0
    8d28:	e58d3004 	str	r3, [sp, #4]
    8d2c:	e30032a3 	movw	r3, #675	; 0x2a3
    8d30:	e59f000c 	ldr	r0, [pc, #12]	; 8d44 <echo_handle_chan+0x27c>
    8d34:	eb000eb1 	bl	c800 <fprintf>
    8d38:	eaffffd4 	b	8c90 <echo_handle_chan+0x1c8>
			st->msg_next_r = 0;
    8d3c:	e5840010 	str	r0, [r4, #16]
    8d40:	eaffff8b 	b	8b74 <echo_handle_chan+0xac>
    8d44:	0000e104 	.word	0x0000e104

00008d48 <sync_connect>:
{
    8d48:	e92d4030 	push	{r4, r5, lr}
    8d4c:	e1a05001 	mov	r5, r1
    8d50:	e24dd014 	sub	sp, sp, #20
	rc = connect(path, IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    8d54:	e3a01003 	mov	r1, #3
    8d58:	eb0009c6 	bl	b478 <connect>
	if (rc >= 0) {
    8d5c:	e2504000 	subs	r4, r0, #0
    8d60:	ba00000a 	blt	8d90 <sync_connect+0x48>
		rc = wait(chan, &evt, timeout);
    8d64:	e1a02005 	mov	r2, r5
    8d68:	e28d1004 	add	r1, sp, #4
    8d6c:	eb0009cd 	bl	b4a8 <wait>
		if (rc == 0) {
    8d70:	e2503000 	subs	r3, r0, #0
		chan = (handle_t) rc;
    8d74:	e1a00004 	mov	r0, r4
		if (rc == 0) {
    8d78:	1a000007 	bne	8d9c <sync_connect+0x54>
			if (evt.handle == chan) {
    8d7c:	e59d3004 	ldr	r3, [sp, #4]
    8d80:	e1530004 	cmp	r3, r4
			rc = ERR_BAD_STATE;
    8d84:	13e0401e 	mvnne	r4, #30
			if (evt.handle == chan) {
    8d88:	0a000005 	beq	8da4 <sync_connect+0x5c>
		close(chan);
    8d8c:	eb0009bf 	bl	b490 <close>
}
    8d90:	e1a00004 	mov	r0, r4
    8d94:	e28dd014 	add	sp, sp, #20
    8d98:	e8bd8030 	pop	{r4, r5, pc}
    8d9c:	e1a04003 	mov	r4, r3
    8da0:	eafffff9 	b	8d8c <sync_connect+0x44>
				if (evt.event & IPC_HANDLE_POLL_READY)
    8da4:	e59d3008 	ldr	r3, [sp, #8]
    8da8:	e3130001 	tst	r3, #1
    8dac:	1afffff7 	bne	8d90 <sync_connect+0x48>
				if (evt.event & IPC_HANDLE_POLL_HUP)
    8db0:	e3130004 	tst	r3, #4
					rc = ERR_CHANNEL_CLOSED;
    8db4:	03e0401e 	mvneq	r4, #30
    8db8:	13e0400e 	mvnne	r4, #14
    8dbc:	eafffff2 	b	8d8c <sync_connect+0x44>

00008dc0 <connect_handle_port>:
{
    8dc0:	e92d4070 	push	{r4, r5, r6, lr}
    8dc4:	e24dd058 	sub	sp, sp, #88	; 0x58
    8dc8:	e1a04000 	mov	r4, r0
	if (handle_port_errors(ev))
    8dcc:	ebfffde9 	bl	8578 <handle_port_errors>
    8dd0:	e3500000 	cmp	r0, #0
    8dd4:	1a000002 	bne	8de4 <connect_handle_port+0x24>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8dd8:	e5943004 	ldr	r3, [r4, #4]
    8ddc:	e3130001 	tst	r3, #1
    8de0:	1a000001 	bne	8dec <connect_handle_port+0x2c>
}
    8de4:	e28dd058 	add	sp, sp, #88	; 0x58
    8de8:	e8bd8070 	pop	{r4, r5, r6, pc}
		int rc = accept(ev->handle, &peer_uuid);
    8dec:	e5940000 	ldr	r0, [r4]
    8df0:	e28d1008 	add	r1, sp, #8
    8df4:	eb0009a2 	bl	b484 <accept>
		if (rc < 0 && rc != ERR_CHANNEL_CLOSED) {
    8df8:	e290200f 	adds	r2, r0, #15
    8dfc:	13a02001 	movne	r2, #1
    8e00:	e0122fa0 	ands	r2, r2, r0, lsr #31
    8e04:	1a000015 	bne	8e60 <connect_handle_port+0xa0>
		if (rc >= 0) {
    8e08:	e3500000 	cmp	r0, #0
    8e0c:	ba000000 	blt	8e14 <connect_handle_port+0x54>
			close ((handle_t)rc);
    8e10:	eb00099e 	bl	b490 <close>
			sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    8e14:	e30d6074 	movw	r6, #53364	; 0xd074
    8e18:	e30d5090 	movw	r5, #53392	; 0xd090
    8e1c:	e3406000 	movt	r6, #0
    8e20:	e3405000 	movt	r5, #0
{
    8e24:	e3a04002 	mov	r4, #2
			sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    8e28:	e1a03004 	mov	r3, r4
    8e2c:	e1a02006 	mov	r2, r6
    8e30:	e1a01005 	mov	r1, r5
    8e34:	e28d0018 	add	r0, sp, #24
    8e38:	eb000e56 	bl	c798 <sprintf>
			rc = sync_connect(path, 1000);
    8e3c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    8e40:	e28d0018 	add	r0, sp, #24
    8e44:	ebffffbf 	bl	8d48 <sync_connect>
		for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    8e48:	e2844001 	add	r4, r4, #1
			close(rc);
    8e4c:	eb00098f 	bl	b490 <close>
		for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    8e50:	e3540080 	cmp	r4, #128	; 0x80
    8e54:	1afffff3 	bne	8e28 <connect_handle_port+0x68>
}
    8e58:	e28dd058 	add	sp, sp, #88	; 0x58
    8e5c:	e8bd8070 	pop	{r4, r5, r6, pc}
			TLOGI("accept failed (%d)\n", rc);
    8e60:	e30c2eb0 	movw	r2, #52912	; 0xceb0
    8e64:	e30d1058 	movw	r1, #53336	; 0xd058
    8e68:	e58d0000 	str	r0, [sp]
    8e6c:	e3402000 	movt	r2, #0
    8e70:	e3401000 	movt	r1, #0
    8e74:	e3a03f66 	mov	r3, #408	; 0x198
    8e78:	e59f0004 	ldr	r0, [pc, #4]	; 8e84 <connect_handle_port+0xc4>
    8e7c:	eb000e5f 	bl	c800 <fprintf>
    8e80:	eaffffd7 	b	8de4 <connect_handle_port+0x24>
    8e84:	0000e104 	.word	0x0000e104

00008e88 <_start>:

__attribute__ ((section (".bss")))
void *__dso_handle = (void *) 0;

/* Arguments are supplied in memory pointed by r0 */
void _start(void *args) {
    8e88:	e92d4800 	push	{fp, lr}
    8e8c:	e28db004 	add	fp, sp, #4
    8e90:	e24dd018 	sub	sp, sp, #24
    8e94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  structors_array_t array;
  array.preinit_array = &__PREINIT_ARRAY__;
    8e98:	e30e3000 	movw	r3, #57344	; 0xe000
    8e9c:	e3403000 	movt	r3, #0
    8ea0:	e50b3010 	str	r3, [fp, #-16]
  array.init_array = &__INIT_ARRAY__;
    8ea4:	e30e3008 	movw	r3, #57352	; 0xe008
    8ea8:	e3403000 	movt	r3, #0
    8eac:	e50b300c 	str	r3, [fp, #-12]
  array.fini_array = (&__FINI_ARRAY__)[0] ? &__FINI_ARRAY__ : 0;
    8eb0:	e30e3014 	movw	r3, #57364	; 0xe014
    8eb4:	e3403000 	movt	r3, #0
    8eb8:	e5933000 	ldr	r3, [r3]
    8ebc:	e3530000 	cmp	r3, #0
    8ec0:	0a000002 	beq	8ed0 <_start+0x48>
    8ec4:	e30e3014 	movw	r3, #57364	; 0xe014
    8ec8:	e3403000 	movt	r3, #0
    8ecc:	ea000000 	b	8ed4 <_start+0x4c>
    8ed0:	e3a03000 	mov	r3, #0
    8ed4:	e50b3008 	str	r3, [fp, #-8]

  __libc_init(args, &main, &array);
    8ed8:	e24b3010 	sub	r3, fp, #16
    8edc:	e1a02003 	mov	r2, r3
    8ee0:	e308100c 	movw	r1, #32780	; 0x800c
    8ee4:	e3401000 	movt	r1, #0
    8ee8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    8eec:	eb000922 	bl	b37c <__libc_init>

00008ef0 <abort>:

#include <stdlib.h>
#include <trusty_std.h>

void abort(void)
{
    8ef0:	e92d4010 	push	{r4, lr}
	exit(1);
    8ef4:	e3a00001 	mov	r0, #1
    8ef8:	ebfffc40 	bl	8000 <exit>

00008efc <__cxa_atexit>:
 *
 *	http://www.codesourcery.com/cxx-abi/abi.html#dso-dtor
 */
int
__cxa_atexit(void (*func)(void *), void *arg)
{
    8efc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct atexit *p = __atexit;
    8f00:	e30f5458 	movw	r5, #62552	; 0xf458
    8f04:	e3405000 	movt	r5, #0
{
    8f08:	e1a07000 	mov	r7, r0
    8f0c:	e1a06001 	mov	r6, r1
	struct atexit *p = __atexit;
    8f10:	e5954000 	ldr	r4, [r5]
	struct atexit_fn *fnp;
	int size = 64;
	int ret = -1;

	if (p != NULL) {
    8f14:	e3540000 	cmp	r4, #0
    8f18:	0a000004 	beq	8f30 <__cxa_atexit+0x34>
		if (p->ind + 1 >= p->max)
    8f1c:	e5943004 	ldr	r3, [r4, #4]
    8f20:	e5941008 	ldr	r1, [r4, #8]
    8f24:	e2832001 	add	r2, r3, #1
    8f28:	e1520001 	cmp	r2, r1
    8f2c:	ba000014 	blt	8f84 <__cxa_atexit+0x88>
			p = NULL;
	}
	if (p == NULL) {
		p = malloc(size);
    8f30:	e3a00040 	mov	r0, #64	; 0x40
    8f34:	eb0000e1 	bl	92c0 <malloc>
		if (!p)
    8f38:	e2504000 	subs	r4, r0, #0
    8f3c:	0a00001d 	beq	8fb8 <__cxa_atexit+0xbc>
			goto done;
		if (__atexit == NULL) {
    8f40:	e5951000 	ldr	r1, [r5]
    8f44:	e3510000 	cmp	r1, #0
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
			p->ind = 1;
		} else
			p->ind = 0;
    8f48:	13a03000 	movne	r3, #0
    8f4c:	15843004 	strne	r3, [r4, #4]
		if (__atexit == NULL) {
    8f50:	0a000011 	beq	8f9c <__cxa_atexit+0xa0>
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
		    sizeof(p->fns[0]);
		p->next = __atexit;
		__atexit = p;
		if (__atexit_invalid)
    8f54:	e30e20d8 	movw	r2, #57560	; 0xe0d8
		p->next = __atexit;
    8f58:	e5841000 	str	r1, [r4]
		if (__atexit_invalid)
    8f5c:	e3402000 	movt	r2, #0
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
    8f60:	e3a01006 	mov	r1, #6
		if (__atexit_invalid)
    8f64:	e5923000 	ldr	r3, [r2]
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
    8f68:	e5841008 	str	r1, [r4, #8]
		__atexit = p;
    8f6c:	e5854000 	str	r4, [r5]
		if (__atexit_invalid)
    8f70:	e3530000 	cmp	r3, #0
    8f74:	e5943004 	ldr	r3, [r4, #4]
			__atexit_invalid = 0;
    8f78:	13a01000 	movne	r1, #0
    8f7c:	15821000 	strne	r1, [r2]
    8f80:	e2832001 	add	r2, r3, #1
    8f84:	e0843183 	add	r3, r4, r3, lsl #3
	}
	fnp = &p->fns[p->ind++];
    8f88:	e5842004 	str	r2, [r4, #4]
	fnp->fn_ptr.cxa_func = func;
	fnp->fn_arg = arg;
	ret = 0;
    8f8c:	e3a00000 	mov	r0, #0
	fnp->fn_ptr.cxa_func = func;
    8f90:	e583700c 	str	r7, [r3, #12]
	fnp->fn_arg = arg;
    8f94:	e5836010 	str	r6, [r3, #16]
    8f98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
    8f9c:	e3a02008 	mov	r2, #8
    8fa0:	e284000c 	add	r0, r4, #12
    8fa4:	eb000e24 	bl	c83c <memset>
			p->ind = 1;
    8fa8:	e3a03001 	mov	r3, #1
    8fac:	e5951000 	ldr	r1, [r5]
    8fb0:	e5843004 	str	r3, [r4, #4]
    8fb4:	eaffffe6 	b	8f54 <__cxa_atexit+0x58>
	int ret = -1;
    8fb8:	e3e00000 	mvn	r0, #0
done:
	return (ret);
}
    8fbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008fc0 <__cxa_finalize>:
	struct atexit *p, *q;
	struct atexit_fn fn;
	int n;
	static int call_depth;

	if (__atexit_invalid)
    8fc0:	e30e30d8 	movw	r3, #57560	; 0xe0d8
{
    8fc4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if (__atexit_invalid)
    8fc8:	e3403000 	movt	r3, #0
    8fcc:	e5936000 	ldr	r6, [r3]
    8fd0:	e3560000 	cmp	r6, #0
    8fd4:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		return;

	call_depth++;

	for (p = __atexit; p != NULL; p = p->next) {
    8fd8:	e30f9458 	movw	r9, #62552	; 0xf458
	call_depth++;
    8fdc:	e30f8158 	movw	r8, #61784	; 0xf158
	for (p = __atexit; p != NULL; p = p->next) {
    8fe0:	e3409000 	movt	r9, #0
	call_depth++;
    8fe4:	e3408000 	movt	r8, #0
	for (p = __atexit; p != NULL; p = p->next) {
    8fe8:	e5997000 	ldr	r7, [r9]
	call_depth++;
    8fec:	e5983000 	ldr	r3, [r8]
	for (p = __atexit; p != NULL; p = p->next) {
    8ff0:	e3570000 	cmp	r7, #0
	call_depth++;
    8ff4:	e2833001 	add	r3, r3, #1
    8ff8:	e5883000 	str	r3, [r8]
	for (p = __atexit; p != NULL; p = p->next) {
    8ffc:	0a00000f 	beq	9040 <__cxa_finalize+0x80>
		for (n = p->ind; --n >= 0;) {
    9000:	e5975004 	ldr	r5, [r7, #4]
    9004:	e0874185 	add	r4, r7, r5, lsl #3
    9008:	ea000006 	b	9028 <__cxa_finalize+0x68>
			if (p->fns[n].fn_ptr.cxa_func == NULL)
    900c:	e5943004 	ldr	r3, [r4, #4]
    9010:	e3530000 	cmp	r3, #0
    9014:	0a000002 	beq	9024 <__cxa_finalize+0x64>

			/*
			 * Mark handler as having been already called to avoid
			 * dupes and loops, then call the appropriate function.
			 */
			fn = p->fns[n];
    9018:	e5940008 	ldr	r0, [r4, #8]
			p->fns[n].fn_ptr.cxa_func = NULL;
    901c:	e5846004 	str	r6, [r4, #4]
                        (*fn.fn_ptr.cxa_func)(fn.fn_arg);
    9020:	e12fff33 	blx	r3
    9024:	e2444008 	sub	r4, r4, #8
		for (n = p->ind; --n >= 0;) {
    9028:	e2555001 	subs	r5, r5, #1
    902c:	5afffff6 	bpl	900c <__cxa_finalize+0x4c>
	for (p = __atexit; p != NULL; p = p->next) {
    9030:	e5977000 	ldr	r7, [r7]
    9034:	e3570000 	cmp	r7, #0
    9038:	1afffff0 	bne	9000 <__cxa_finalize+0x40>
    903c:	e5983000 	ldr	r3, [r8]
	/*
	 * If called via exit(), unmap the pages since we have now run
	 * all the handlers.  We defer this until calldepth == 0 so that
	 * we don't unmap things prematurely if called recursively.
	 */
	if (--call_depth == 0) {
    9040:	e2433001 	sub	r3, r3, #1
    9044:	e3530000 	cmp	r3, #0
    9048:	e5883000 	str	r3, [r8]
    904c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		for (p = __atexit; p != NULL; ) {
    9050:	e5990000 	ldr	r0, [r9]
    9054:	e3500000 	cmp	r0, #0
    9058:	0a000003 	beq	906c <__cxa_finalize+0xac>
			q = p;
			p = p->next;
    905c:	e5904000 	ldr	r4, [r0]
			free(q);
    9060:	eb00066c 	bl	aa18 <free>
		for (p = __atexit; p != NULL; ) {
    9064:	e2540000 	subs	r0, r4, #0
    9068:	1afffffb 	bne	905c <__cxa_finalize+0x9c>
		}
		__atexit = NULL;
    906c:	e3a03000 	mov	r3, #0
    9070:	e5893000 	str	r3, [r9]
	}
}
    9074:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00009078 <sbrk>:

static char *__libc_brk;

#define SBRK_ALIGN	32
static void *sbrk(ptrdiff_t increment)
{
    9078:	e92d4070 	push	{r4, r5, r6, lr}
	char *new_brk;
	char *start;
	char *end;

	if (!__libc_brk)
    907c:	e30f615c 	movw	r6, #61788	; 0xf15c
    9080:	e3406000 	movt	r6, #0
{
    9084:	e1a04000 	mov	r4, r0
	if (!__libc_brk)
    9088:	e5960000 	ldr	r0, [r6]
    908c:	e3500000 	cmp	r0, #0
    9090:	0a00000b 	beq	90c4 <sbrk+0x4c>
		__libc_brk = (char *)brk(0);

	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    9094:	e280001f 	add	r0, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    9098:	e284401f 	add	r4, r4, #31
	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    909c:	e3c0501f 	bic	r5, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    90a0:	e3c4401f 	bic	r4, r4, #31
    90a4:	e0854004 	add	r4, r5, r4

	new_brk = (char *)brk((uint32_t)end);
    90a8:	e1a00004 	mov	r0, r4
    90ac:	eb0008e5 	bl	b448 <brk>
	if (new_brk < end)
    90b0:	e1540000 	cmp	r4, r0
		return (void *)-1;
    90b4:	83e05000 	mvnhi	r5, #0

	__libc_brk = new_brk;
    90b8:	95860000 	strls	r0, [r6]
	return start;
}
    90bc:	e1a00005 	mov	r0, r5
    90c0:	e8bd8070 	pop	{r4, r5, r6, pc}
		__libc_brk = (char *)brk(0);
    90c4:	eb0008df 	bl	b448 <brk>
    90c8:	e5860000 	str	r0, [r6]
    90cc:	eafffff0 	b	9094 <sbrk+0x1c>

000090d0 <init_mparams.part.2>:
static void post_fork_parent(void) { RELEASE_LOCK(&(gm)->mutex); }
static void post_fork_child(void)  { INITIAL_LOCK(&(gm)->mutex); }
#endif /* LOCK_AT_FORK */

/* Initialize mparams */
static int init_mparams(void) {
    90d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
      magic = (size_t)&magic ^ (size_t)0x55555555U;
#else
      magic = (size_t)(time(0) ^ (size_t)0x55555555U);
#endif
      magic |= (size_t)8U;    /* ensure nonzero */
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    90d4:	e3052550 	movw	r2, #21840	; 0x5550
static int init_mparams(void) {
    90d8:	e24dd00c 	sub	sp, sp, #12
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    90dc:	e3452555 	movt	r2, #21845	; 0x5555
      magic = (size_t)&magic ^ (size_t)0x55555555U;
    90e0:	e1a0100d 	mov	r1, sp
    mparams.granularity = gsize;
    90e4:	e30f3338 	movw	r3, #62264	; 0xf338
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    90e8:	e0222001 	eor	r2, r2, r1
    mparams.granularity = gsize;
    90ec:	e3403000 	movt	r3, #0
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    90f0:	e3822008 	orr	r2, r2, #8
    gm->mflags = mparams.default_mflags;
    90f4:	e30f1160 	movw	r1, #61792	; 0xf160
    mparams.granularity = gsize;
    90f8:	e3a00a01 	mov	r0, #4096	; 0x1000
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    90fc:	e3e0e000 	mvn	lr, #0
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    9100:	e3a0c602 	mov	ip, #2097152	; 0x200000
    gm->mflags = mparams.default_mflags;
    9104:	e3401000 	movt	r1, #0
      /* Until memory modes commonly available, use volatile-write */
      (*(volatile size_t *)(&(mparams.magic))) = magic;
    9108:	e5832000 	str	r2, [r3]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    910c:	e3a02000 	mov	r2, #0
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    9110:	e583e00c 	str	lr, [r3, #12]
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    9114:	e583c010 	str	ip, [r3, #16]
    mparams.granularity = gsize;
    9118:	e5830008 	str	r0, [r3, #8]
    mparams.page_size = psize;
    911c:	e5830004 	str	r0, [r3, #4]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    9120:	e5832014 	str	r2, [r3, #20]
    gm->mflags = mparams.default_mflags;
    9124:	e58121bc 	str	r2, [r1, #444]	; 0x1bc
    }
  }

  RELEASE_MALLOC_GLOBAL_LOCK();
  return 1;
}
    9128:	e28dd00c 	add	sp, sp, #12
    912c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009130 <sys_trim.constprop.7>:
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
                       (size_t) nsegs : (size_t) MAX_RELEASE_CHECK_RATE);
  return released;
}

static int sys_trim(mstate m, size_t pad) {
    9130:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  size_t released = 0;
  ensure_initialization();
    9134:	e30f5338 	movw	r5, #62264	; 0xf338
    9138:	e3405000 	movt	r5, #0
static int sys_trim(mstate m, size_t pad) {
    913c:	e1a04000 	mov	r4, r0
  ensure_initialization();
    9140:	e5953000 	ldr	r3, [r5]
    9144:	e3530000 	cmp	r3, #0
    9148:	0a000030 	beq	9210 <sys_trim.constprop.7+0xe0>
  if (pad < MAX_REQUEST && is_initialized(m)) {
    914c:	e3740041 	cmn	r4, #65	; 0x41
    9150:	8a00002c 	bhi	9208 <sys_trim.constprop.7+0xd8>
    9154:	e30f6160 	movw	r6, #61792	; 0xf160
    9158:	e3406000 	movt	r6, #0
    915c:	e5962018 	ldr	r2, [r6, #24]
    9160:	e3520000 	cmp	r2, #0
    9164:	0a000027 	beq	9208 <sys_trim.constprop.7+0xd8>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */

    if (m->topsize > pad) {
    9168:	e596100c 	ldr	r1, [r6, #12]
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
    916c:	e2840028 	add	r0, r4, #40	; 0x28
    if (m->topsize > pad) {
    9170:	e1500001 	cmp	r0, r1
    9174:	2a000020 	bcs	91fc <sys_trim.constprop.7+0xcc>
  msegmentptr sp = &m->seg;
    9178:	e2864d07 	add	r4, r6, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
    917c:	e5943000 	ldr	r3, [r4]
    9180:	e1520003 	cmp	r2, r3
    9184:	3a000003 	bcc	9198 <sys_trim.constprop.7+0x68>
    9188:	e594c004 	ldr	ip, [r4, #4]
    918c:	e083300c 	add	r3, r3, ip
    9190:	e1520003 	cmp	r2, r3
    9194:	3a000004 	bcc	91ac <sys_trim.constprop.7+0x7c>
    if ((sp = sp->next) == 0)
    9198:	e5944008 	ldr	r4, [r4, #8]
    919c:	e3540000 	cmp	r4, #0
    91a0:	1afffff5 	bne	917c <sys_trim.constprop.7+0x4c>
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
    91a4:	e594300c 	ldr	r3, [r4, #12]
    91a8:	e7f000f0 	udf	#0
    91ac:	e594300c 	ldr	r3, [r4, #12]
    91b0:	e3130008 	tst	r3, #8
    91b4:	1a000010 	bne	91fc <sys_trim.constprop.7+0xcc>
      size_t unit = mparams.granularity;
    91b8:	e5953008 	ldr	r3, [r5, #8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    91bc:	e0817003 	add	r7, r1, r3
    91c0:	e2477001 	sub	r7, r7, #1
    91c4:	e0477000 	sub	r7, r7, r0
    91c8:	e737f317 	udiv	r7, r7, r3
    91cc:	e2477001 	sub	r7, r7, #1
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
          ACQUIRE_MALLOC_GLOBAL_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
    91d0:	e3a00000 	mov	r0, #0
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    91d4:	e0070793 	mul	r7, r3, r7
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
    91d8:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
    91dc:	82637102 	rsbhi	r7, r3, #-2147483648	; 0x80000000
            char* old_br = (char*)(CALL_MORECORE(0));
    91e0:	ebffffa4 	bl	9078 <sbrk>
            if (old_br == sp->base + sp->size) {
    91e4:	e1c420d0 	ldrd	r2, [r4]
            char* old_br = (char*)(CALL_MORECORE(0));
    91e8:	e1a08000 	mov	r8, r0
            if (old_br == sp->base + sp->size) {
    91ec:	e0833002 	add	r3, r3, r2
    91f0:	e1500003 	cmp	r0, r3
    91f4:	0a00000b 	beq	9228 <sys_trim.constprop.7+0xf8>
    91f8:	e596100c 	ldr	r1, [r6, #12]
    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0 && m->topsize > m->trim_check)
    91fc:	e596301c 	ldr	r3, [r6, #28]
    9200:	e1530001 	cmp	r3, r1
    9204:	3a000003 	bcc	9218 <sys_trim.constprop.7+0xe8>
  size_t offset = align_offset(chunk2mem(p));
    9208:	e3a00000 	mov	r0, #0
    920c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9210:	ebffffae 	bl	90d0 <init_mparams.part.2>
    9214:	eaffffcc 	b	914c <sys_trim.constprop.7+0x1c>
      m->trim_check = MAX_SIZE_T;
    9218:	e3e03000 	mvn	r3, #0
    921c:	e3a00000 	mov	r0, #0
    9220:	e586301c 	str	r3, [r6, #28]
  }

  return (released != 0)? 1 : 0;
}
    9224:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              char* rel_br = (char*)(CALL_MORECORE(-extra));
    9228:	e2670000 	rsb	r0, r7, #0
    922c:	ebffff91 	bl	9078 <sbrk>
    9230:	e1a07000 	mov	r7, r0
              char* new_br = (char*)(CALL_MORECORE(0));
    9234:	e3a00000 	mov	r0, #0
    9238:	ebffff8e 	bl	9078 <sbrk>
              if (rel_br != CMFAIL && new_br < old_br)
    923c:	e3770001 	cmn	r7, #1
    9240:	11580000 	cmpne	r8, r0
    9244:	9affffeb 	bls	91f8 <sys_trim.constprop.7+0xc8>
      if (released != 0) {
    9248:	e0588000 	subs	r8, r8, r0
    924c:	0affffe9 	beq	91f8 <sys_trim.constprop.7+0xc8>
        init_top(m, m->top, m->topsize - released);
    9250:	e5962018 	ldr	r2, [r6, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9254:	e3a0e028 	mov	lr, #40	; 0x28
        sp->size -= released;
    9258:	e594c004 	ldr	ip, [r4, #4]
        init_top(m, m->top, m->topsize - released);
    925c:	e596100c 	ldr	r1, [r6, #12]
  size_t offset = align_offset(chunk2mem(p));
    9260:	e2823008 	add	r3, r2, #8
        m->footprint -= released;
    9264:	e59601b0 	ldr	r0, [r6, #432]	; 0x1b0
  size_t offset = align_offset(chunk2mem(p));
    9268:	e3130007 	tst	r3, #7
        sp->size -= released;
    926c:	e04cc008 	sub	ip, ip, r8
  size_t offset = align_offset(chunk2mem(p));
    9270:	12633000 	rsbne	r3, r3, #0
        sp->size -= released;
    9274:	e584c004 	str	ip, [r4, #4]
  size_t offset = align_offset(chunk2mem(p));
    9278:	12033007 	andne	r3, r3, #7
        m->footprint -= released;
    927c:	e0400008 	sub	r0, r0, r8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9280:	e595c010 	ldr	ip, [r5, #16]
        init_top(m, m->top, m->topsize - released);
    9284:	e0418008 	sub	r8, r1, r8
  size_t offset = align_offset(chunk2mem(p));
    9288:	01a03008 	moveq	r3, r8
    928c:	10821003 	addne	r1, r2, r3
    9290:	10483003 	subne	r3, r8, r3
    9294:	01a01002 	moveq	r1, r2
  p->head = psize | PINUSE_BIT;
    9298:	e3834001 	orr	r4, r3, #1
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    929c:	e0822008 	add	r2, r2, r8
        m->footprint -= released;
    92a0:	e58601b0 	str	r0, [r6, #432]	; 0x1b0
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    92a4:	e3a00001 	mov	r0, #1
  m->top = p;
    92a8:	e5861018 	str	r1, [r6, #24]
  m->topsize = psize;
    92ac:	e586300c 	str	r3, [r6, #12]
  p->head = psize | PINUSE_BIT;
    92b0:	e5814004 	str	r4, [r1, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    92b4:	e582e004 	str	lr, [r2, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    92b8:	e586c01c 	str	ip, [r6, #28]
    92bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000092c0 <malloc>:
#endif

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
    92c0:	e35000f4 	cmp	r0, #244	; 0xf4
void* dlmalloc(size_t bytes) {
    92c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92c8:	e24dd00c 	sub	sp, sp, #12
    if (bytes <= MAX_SMALL_REQUEST) {
    92cc:	8a00002d 	bhi	9388 <malloc+0xc8>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
      idx = small_index(nb);
      smallbits = gm->smallmap >> idx;
    92d0:	e30f6160 	movw	r6, #61792	; 0xf160
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    92d4:	e350000a 	cmp	r0, #10
      smallbits = gm->smallmap >> idx;
    92d8:	e3406000 	movt	r6, #0
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    92dc:	8280400b 	addhi	r4, r0, #11
      smallbits = gm->smallmap >> idx;
    92e0:	e596c000 	ldr	ip, [r6]
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    92e4:	83c44007 	bichi	r4, r4, #7
    92e8:	81a021a4 	lsrhi	r2, r4, #3
    92ec:	93a02002 	movls	r2, #2
    92f0:	93a04010 	movls	r4, #16
      smallbits = gm->smallmap >> idx;
    92f4:	e1a0323c 	lsr	r3, ip, r2

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
    92f8:	e3130003 	tst	r3, #3
    92fc:	0a00004a 	beq	942c <malloc+0x16c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
    9300:	e1e03003 	mvn	r3, r3
    9304:	e2033001 	and	r3, r3, #1
    9308:	e0833002 	add	r3, r3, r2
        b = smallbin_at(gm, idx);
    930c:	e0861183 	add	r1, r6, r3, lsl #3
    9310:	e2811028 	add	r1, r1, #40	; 0x28
        p = b->fd;
    9314:	e5910008 	ldr	r0, [r1, #8]
        assert(chunksize(p) == small_index2size(idx));
    9318:	e5902004 	ldr	r2, [r0, #4]
    931c:	e3c22007 	bic	r2, r2, #7
    9320:	e1520183 	cmp	r2, r3, lsl #3
    9324:	1a0001c0 	bne	9a2c <malloc+0x76c>
        unlink_first_small_chunk(gm, b, p, idx);
    9328:	e1510000 	cmp	r1, r0
    932c:	e590e008 	ldr	lr, [r0, #8]
    9330:	0a0001bd 	beq	9a2c <malloc+0x76c>
    9334:	e150000e 	cmp	r0, lr
    9338:	0a0001bb 	beq	9a2c <malloc+0x76c>
    933c:	e151000e 	cmp	r1, lr
    9340:	0a00017d 	beq	993c <malloc+0x67c>
    9344:	e5963010 	ldr	r3, [r6, #16]
    9348:	e153000e 	cmp	r3, lr
    934c:	8a0001b6 	bhi	9a2c <malloc+0x76c>
    9350:	e59e300c 	ldr	r3, [lr, #12]
    9354:	e1530000 	cmp	r3, r0
    9358:	1a0001b3 	bne	9a2c <malloc+0x76c>
    935c:	e58e100c 	str	r1, [lr, #12]
    9360:	e581e008 	str	lr, [r1, #8]
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    9364:	e3823003 	orr	r3, r2, #3
    9368:	e0802002 	add	r2, r0, r2
    936c:	e5803004 	str	r3, [r0, #4]
        mem = chunk2mem(p);
    9370:	e2800008 	add	r0, r0, #8
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    9374:	e5923004 	ldr	r3, [r2, #4]
    9378:	e3833001 	orr	r3, r3, #1
    937c:	e5823004 	str	r3, [r2, #4]
    POSTACTION(gm);
    return mem;
  }

  return 0;
}
    9380:	e28dd00c 	add	sp, sp, #12
    9384:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9388:	e30f6160 	movw	r6, #61792	; 0xf160
    else if (bytes >= MAX_REQUEST)
    938c:	e3700041 	cmn	r0, #65	; 0x41
    9390:	e3406000 	movt	r6, #0
    9394:	e5961008 	ldr	r1, [r6, #8]
    9398:	9a00000d 	bls	93d4 <malloc+0x114>
    if (nb <= gm->dvsize) {
    939c:	e3710001 	cmn	r1, #1
    93a0:	1a000086 	bne	95c0 <malloc+0x300>
      mchunkptr p = gm->dv;
    93a4:	e5960014 	ldr	r0, [r6, #20]
    93a8:	e2402001 	sub	r2, r0, #1
        gm->dvsize = 0;
    93ac:	e3a03000 	mov	r3, #0
    93b0:	e5863008 	str	r3, [r6, #8]
        gm->dv = 0;
    93b4:	e5863014 	str	r3, [r6, #20]
        set_inuse_and_pinuse(gm, p, dvs);
    93b8:	e5801004 	str	r1, [r0, #4]
    93bc:	e5923004 	ldr	r3, [r2, #4]
    93c0:	e3833001 	orr	r3, r3, #1
    93c4:	e5823004 	str	r3, [r2, #4]
      mem = chunk2mem(p);
    93c8:	e2800008 	add	r0, r0, #8
}
    93cc:	e28dd00c 	add	sp, sp, #12
    93d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    93d4:	e596c004 	ldr	ip, [r6, #4]
      nb = pad_request(bytes);
    93d8:	e280400b 	add	r4, r0, #11
    93dc:	e3c44007 	bic	r4, r4, #7
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    93e0:	e35c0000 	cmp	ip, #0
    93e4:	1a0000d3 	bne	9738 <malloc+0x478>
    if (nb <= gm->dvsize) {
    93e8:	e1540001 	cmp	r4, r1
    93ec:	9a000065 	bls	9588 <malloc+0x2c8>
    else if (nb < gm->topsize) { /* Split top */
    93f0:	e596300c 	ldr	r3, [r6, #12]
    93f4:	e1530004 	cmp	r3, r4
    93f8:	9a000580 	bls	aa00 <malloc+0x1740>
      mchunkptr p = m->top;
    93fc:	e5962018 	ldr	r2, [r6, #24]
      size_t rsize = m->topsize -= nb;
    9400:	e0433004 	sub	r3, r3, r4
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    9404:	e3841003 	orr	r1, r4, #3
      r->head = rsize | PINUSE_BIT;
    9408:	e383c001 	orr	ip, r3, #1
      size_t rsize = m->topsize -= nb;
    940c:	e586300c 	str	r3, [r6, #12]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    9410:	e0824004 	add	r4, r2, r4
      return chunk2mem(p);
    9414:	e2820008 	add	r0, r2, #8
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    9418:	e5864018 	str	r4, [r6, #24]
      r->head = rsize | PINUSE_BIT;
    941c:	e584c004 	str	ip, [r4, #4]
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    9420:	e5821004 	str	r1, [r2, #4]
}
    9424:	e28dd00c 	add	sp, sp, #12
    9428:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (nb > gm->dvsize) {
    942c:	e5961008 	ldr	r1, [r6, #8]
    9430:	e1510004 	cmp	r1, r4
    9434:	2a000053 	bcs	9588 <malloc+0x2c8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
    9438:	e3530000 	cmp	r3, #0
    943c:	0a00017c 	beq	9a34 <malloc+0x774>
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
    9440:	e3a0e001 	mov	lr, #1
    9444:	e1a0021e 	lsl	r0, lr, r2
    9448:	e1a05e10 	lsl	r5, r0, lr
    944c:	e2650000 	rsb	r0, r5, #0
    9450:	e1800005 	orr	r0, r0, r5
    9454:	e0002213 	and	r2, r0, r3, lsl r2
          binmap_t leastbit = least_bit(leftbits);
    9458:	e2623000 	rsb	r3, r2, #0
    945c:	e0033002 	and	r3, r3, r2
          compute_bit2idx(leastbit, i);
    9460:	e2433001 	sub	r3, r3, #1
    9464:	e1a02623 	lsr	r2, r3, #12
    9468:	e2022010 	and	r2, r2, #16
    946c:	e1a03233 	lsr	r3, r3, r2
    9470:	e1a002a3 	lsr	r0, r3, #5
    9474:	e2000008 	and	r0, r0, #8
    9478:	e1a03033 	lsr	r3, r3, r0
    947c:	e1822000 	orr	r2, r2, r0
    9480:	e1a00123 	lsr	r0, r3, #2
    9484:	e2000004 	and	r0, r0, #4
    9488:	e1a03033 	lsr	r3, r3, r0
    948c:	e0822000 	add	r2, r2, r0
    9490:	e1a00e33 	lsr	r0, r3, lr
    9494:	e2000002 	and	r0, r0, #2
    9498:	e1a03033 	lsr	r3, r3, r0
    949c:	e0822000 	add	r2, r2, r0
    94a0:	e7e000d3 	ubfx	r0, r3, #1, #1
    94a4:	e0822000 	add	r2, r2, r0
    94a8:	e0823033 	add	r3, r2, r3, lsr r0
          b = smallbin_at(gm, i);
    94ac:	e0862183 	add	r2, r6, r3, lsl #3
    94b0:	e2822028 	add	r2, r2, #40	; 0x28
          p = b->fd;
    94b4:	e5920008 	ldr	r0, [r2, #8]
          assert(chunksize(p) == small_index2size(i));
    94b8:	e5907004 	ldr	r7, [r0, #4]
    94bc:	e3c77007 	bic	r7, r7, #7
    94c0:	e1570183 	cmp	r7, r3, lsl #3
    94c4:	1a000158 	bne	9a2c <malloc+0x76c>
          unlink_first_small_chunk(gm, b, p, i);
    94c8:	e1520000 	cmp	r2, r0
    94cc:	e5905008 	ldr	r5, [r0, #8]
    94d0:	0a000155 	beq	9a2c <malloc+0x76c>
    94d4:	e1500005 	cmp	r0, r5
    94d8:	0a000153 	beq	9a2c <malloc+0x76c>
    94dc:	e1520005 	cmp	r2, r5
    94e0:	01cc331e 	biceq	r3, ip, lr, lsl r3
    94e4:	05863000 	streq	r3, [r6]
    94e8:	0a000007 	beq	950c <malloc+0x24c>
    94ec:	e5963010 	ldr	r3, [r6, #16]
    94f0:	e1530005 	cmp	r3, r5
    94f4:	8a00014c 	bhi	9a2c <malloc+0x76c>
    94f8:	e595300c 	ldr	r3, [r5, #12]
    94fc:	e1530000 	cmp	r3, r0
    9500:	1a000149 	bne	9a2c <malloc+0x76c>
    9504:	e585200c 	str	r2, [r5, #12]
    9508:	e5825008 	str	r5, [r2, #8]
          rsize = small_index2size(i) - nb;
    950c:	e047c004 	sub	ip, r7, r4
            replace_dv(gm, r, rsize);
    9510:	e3510000 	cmp	r1, #0
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9514:	e3842003 	orr	r2, r4, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
    9518:	e38c3001 	orr	r3, ip, #1
            r = chunk_plus_offset(p, nb);
    951c:	e0804004 	add	r4, r0, r4
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9520:	e5802004 	str	r2, [r0, #4]
            replace_dv(gm, r, rsize);
    9524:	e1a0e1a1 	lsr	lr, r1, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
    9528:	e5843004 	str	r3, [r4, #4]
    952c:	e780c007 	str	ip, [r0, r7]
            replace_dv(gm, r, rsize);
    9530:	0a000010 	beq	9578 <malloc+0x2b8>
    9534:	e086318e 	add	r3, r6, lr, lsl #3
    9538:	e351000f 	cmp	r1, #15
    953c:	e5962014 	ldr	r2, [r6, #20]
    9540:	e2833028 	add	r3, r3, #40	; 0x28
    9544:	9a000138 	bls	9a2c <malloc+0x76c>
    9548:	e3a01001 	mov	r1, #1
    954c:	e5965000 	ldr	r5, [r6]
    9550:	e1a01e11 	lsl	r1, r1, lr
    9554:	e1150001 	tst	r5, r1
    9558:	1a000367 	bne	a2fc <malloc+0x103c>
    955c:	e1a0e003 	mov	lr, r3
    9560:	e1851001 	orr	r1, r5, r1
    9564:	e5861000 	str	r1, [r6]
    9568:	e5832008 	str	r2, [r3, #8]
    956c:	e58e200c 	str	r2, [lr, #12]
    9570:	e582e008 	str	lr, [r2, #8]
    9574:	e582300c 	str	r3, [r2, #12]
    9578:	e586c008 	str	ip, [r6, #8]
          mem = chunk2mem(p);
    957c:	e2800008 	add	r0, r0, #8
            replace_dv(gm, r, rsize);
    9580:	e5864014 	str	r4, [r6, #20]
          goto postaction;
    9584:	eaffff7d 	b	9380 <malloc+0xc0>
      size_t rsize = gm->dvsize - nb;
    9588:	e0413004 	sub	r3, r1, r4
      mchunkptr p = gm->dv;
    958c:	e5960014 	ldr	r0, [r6, #20]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
    9590:	e353000f 	cmp	r3, #15
    9594:	e0802001 	add	r2, r0, r1
    9598:	9a00035c 	bls	a310 <malloc+0x1050>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    959c:	e0802004 	add	r2, r0, r4
        set_size_and_pinuse_of_free_chunk(r, rsize);
    95a0:	e383c001 	orr	ip, r3, #1
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    95a4:	e3844003 	orr	r4, r4, #3
        gm->dvsize = rsize;
    95a8:	e5863008 	str	r3, [r6, #8]
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    95ac:	e5862014 	str	r2, [r6, #20]
        set_size_and_pinuse_of_free_chunk(r, rsize);
    95b0:	e582c004 	str	ip, [r2, #4]
    95b4:	e7803001 	str	r3, [r0, r1]
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    95b8:	e5804004 	str	r4, [r0, #4]
    95bc:	eaffff81 	b	93c8 <malloc+0x108>
  ensure_initialization();
    95c0:	e30f8338 	movw	r8, #62264	; 0xf338
    95c4:	e3408000 	movt	r8, #0
    95c8:	e5983000 	ldr	r3, [r8]
    95cc:	e3530000 	cmp	r3, #0
    95d0:	1a00010d 	bne	9a0c <malloc+0x74c>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    95d4:	e3e04000 	mvn	r4, #0
    95d8:	ebfffebc 	bl	90d0 <init_mparams.part.2>
  asize = granularity_align(nb + SYS_ALLOC_PADDING);
    95dc:	e5987008 	ldr	r7, [r8, #8]
    95e0:	e287c02f 	add	ip, r7, #47	; 0x2f
    95e4:	e2670000 	rsb	r0, r7, #0
    95e8:	e084a00c 	add	sl, r4, ip
    95ec:	e00aa000 	and	sl, sl, r0
  if (asize <= nb)
    95f0:	e15a0004 	cmp	sl, r4
    95f4:	9a000104 	bls	9a0c <malloc+0x74c>
  if (m->footprint_limit != 0) {
    95f8:	e59621b8 	ldr	r2, [r6, #440]	; 0x1b8
    95fc:	e3520000 	cmp	r2, #0
    9600:	0a000008 	beq	9628 <malloc+0x368>
    size_t fp = m->footprint + asize;
    9604:	e59631b0 	ldr	r3, [r6, #432]	; 0x1b0
    9608:	e08a1003 	add	r1, sl, r3
    if (fp <= m->footprint || fp > m->footprint_limit)
    960c:	e1530001 	cmp	r3, r1
    9610:	33a03000 	movcc	r3, #0
    9614:	23a03001 	movcs	r3, #1
    9618:	e1520001 	cmp	r2, r1
    961c:	33833001 	orrcc	r3, r3, #1
    9620:	e3530000 	cmp	r3, #0
    9624:	1a0000f8 	bne	9a0c <malloc+0x74c>
  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
    9628:	e596e1bc 	ldr	lr, [r6, #444]	; 0x1bc
    962c:	e31e0004 	tst	lr, #4
    9630:	0a0000c5 	beq	994c <malloc+0x68c>
    if (asize < HALF_MAX_SIZE_T) {
    9634:	e37a010a 	cmn	sl, #-2147483646	; 0x80000002
    9638:	8a0000f3 	bhi	9a0c <malloc+0x74c>
      br = (char*)(CALL_MORECORE(asize));
    963c:	e1a0000a 	mov	r0, sl
    9640:	ebfffe8c 	bl	9078 <sbrk>
    9644:	e1a05000 	mov	r5, r0
      end = (char*)(CALL_MORECORE(0));
    9648:	e3a00000 	mov	r0, #0
    964c:	ebfffe89 	bl	9078 <sbrk>
      if (br != CMFAIL && end != CMFAIL && br < end) {
    9650:	e3700001 	cmn	r0, #1
    9654:	13750001 	cmnne	r5, #1
    9658:	13a03001 	movne	r3, #1
    965c:	03a03000 	moveq	r3, #0
    9660:	e1550000 	cmp	r5, r0
    9664:	23a03000 	movcs	r3, #0
    9668:	32033001 	andcc	r3, r3, #1
    966c:	e3530000 	cmp	r3, #0
    9670:	0a0000e5 	beq	9a0c <malloc+0x74c>
        size_t ssize = end - br;
    9674:	e0407005 	sub	r7, r0, r5
        if (ssize > nb + TOP_FOOT_SIZE) {
    9678:	e2843028 	add	r3, r4, #40	; 0x28
    967c:	e1570003 	cmp	r7, r3
    9680:	9a0000e1 	bls	9a0c <malloc+0x74c>
  if (tbase != CMFAIL) {
    9684:	e3750001 	cmn	r5, #1
    9688:	0a0000df 	beq	9a0c <malloc+0x74c>
    if ((m->footprint += tsize) > m->max_footprint)
    968c:	e59631b0 	ldr	r3, [r6, #432]	; 0x1b0
    9690:	e59621b4 	ldr	r2, [r6, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
    9694:	e596e018 	ldr	lr, [r6, #24]
    if ((m->footprint += tsize) > m->max_footprint)
    9698:	e0873003 	add	r3, r7, r3
    969c:	e1530002 	cmp	r3, r2
    96a0:	e58631b0 	str	r3, [r6, #432]	; 0x1b0
      m->max_footprint = m->footprint;
    96a4:	858631b4 	strhi	r3, [r6, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
    96a8:	e35e0000 	cmp	lr, #0
      msegmentptr sp = &m->seg;
    96ac:	159f2fe0 	ldrne	r2, [pc, #4064]	; a694 <malloc+0x13d4>
    96b0:	11a03002 	movne	r3, r2
    if (!is_initialized(m)) { /* first-time initialization */
    96b4:	0a000264 	beq	a04c <malloc+0xd8c>
      while (sp != 0 && tbase != sp->base + sp->size)
    96b8:	e5931000 	ldr	r1, [r3]
    96bc:	e5930004 	ldr	r0, [r3, #4]
    96c0:	e081c000 	add	ip, r1, r0
    96c4:	e15c0005 	cmp	ip, r5
    96c8:	0a0001a1 	beq	9d54 <malloc+0xa94>
        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    96cc:	e5933008 	ldr	r3, [r3, #8]
      while (sp != 0 && tbase != sp->base + sp->size)
    96d0:	e3530000 	cmp	r3, #0
    96d4:	1afffff7 	bne	96b8 <malloc+0x3f8>
        if (tbase < m->least_addr)
    96d8:	e5963010 	ldr	r3, [r6, #16]
    96dc:	e0850007 	add	r0, r5, r7
    96e0:	e1530005 	cmp	r3, r5
  size_t offset = align_offset(chunk2mem(p));
    96e4:	e59f3fa8 	ldr	r3, [pc, #4008]	; a694 <malloc+0x13d4>
          m->least_addr = tbase;
    96e8:	85865010 	strhi	r5, [r6, #16]
        while (sp != 0 && sp->base != tbase + tsize)
    96ec:	e5931000 	ldr	r1, [r3]
    96f0:	e1510000 	cmp	r1, r0
    96f4:	0a000159 	beq	9c60 <malloc+0x9a0>
          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    96f8:	e5933008 	ldr	r3, [r3, #8]
        while (sp != 0 && sp->base != tbase + tsize)
    96fc:	e3530000 	cmp	r3, #0
    9700:	1afffff9 	bne	96ec <malloc+0x42c>
            !is_extern_segment(sp) &&
    9704:	e59f3f88 	ldr	r3, [pc, #3976]	; a694 <malloc+0x13d4>
    if (addr >= sp->base && addr < sp->base + sp->size)
    9708:	e5931000 	ldr	r1, [r3]
    970c:	e15e0001 	cmp	lr, r1
    9710:	3a000003 	bcc	9724 <malloc+0x464>
    9714:	e5930004 	ldr	r0, [r3, #4]
    9718:	e0811000 	add	r1, r1, r0
    971c:	e15e0001 	cmp	lr, r1
    9720:	3a0001aa 	bcc	9dd0 <malloc+0xb10>
    if ((sp = sp->next) == 0)
    9724:	e5933008 	ldr	r3, [r3, #8]
    9728:	e3530000 	cmp	r3, #0
    972c:	1afffff5 	bne	9708 <malloc+0x448>
  char* old_end = oldsp->base + oldsp->size;
    9730:	e5933000 	ldr	r3, [r3]
    9734:	e7f000f0 	udf	#0
  compute_tree_index(nb, idx);
    9738:	e1b08424 	lsrs	r8, r4, #8
  size_t rsize = -nb; /* Unsigned negation */
    973c:	e2647000 	rsb	r7, r4, #0
  compute_tree_index(nb, idx);
    9740:	1a00013e 	bne	9c40 <malloc+0x980>
  if ((t = *treebin_at(m, idx)) != 0) {
    9744:	e5963130 	ldr	r3, [r6, #304]	; 0x130
    9748:	e3530000 	cmp	r3, #0
    974c:	01a09007 	moveq	r9, r7
    9750:	03e08001 	mvneq	r8, #1
    9754:	0a0001f6 	beq	9f34 <malloc+0xc74>
    9758:	e3a0e019 	mov	lr, #25
    975c:	e1a0ee14 	lsl	lr, r4, lr
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    9760:	e3a05000 	mov	r5, #0
  tchunkptr v = 0;
    9764:	e1a00005 	mov	r0, r5
    9768:	ea000000 	b	9770 <malloc+0x4b0>
      sizebits <<= 1;
    976c:	e1a0e08e 	lsl	lr, lr, #1
      size_t trem = chunksize(t) - nb;
    9770:	e5939004 	ldr	r9, [r3, #4]
    9774:	e3c99007 	bic	r9, r9, #7
    9778:	e0499004 	sub	r9, r9, r4
      if (trem < rsize) {
    977c:	e1590007 	cmp	r9, r7
    9780:	2a000003 	bcs	9794 <malloc+0x4d4>
        if ((rsize = trem) == 0)
    9784:	e3590000 	cmp	r9, #0
    9788:	0a000270 	beq	a150 <malloc+0xe90>
    978c:	e1a07009 	mov	r7, r9
    9790:	e1a00003 	mov	r0, r3
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    9794:	e1a02fae 	lsr	r2, lr, #31
      rt = t->child[1];
    9798:	e5939014 	ldr	r9, [r3, #20]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    979c:	e2822004 	add	r2, r2, #4
    97a0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
      if (rt != 0 && rt != t)
    97a4:	e3590000 	cmp	r9, #0
    97a8:	11590003 	cmpne	r9, r3
    97ac:	11a05009 	movne	r5, r9
      if (t == 0) {
    97b0:	e3530000 	cmp	r3, #0
    97b4:	1affffec 	bne	976c <malloc+0x4ac>
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    97b8:	e3550000 	cmp	r5, #0
    97bc:	03500000 	cmpeq	r0, #0
    97c0:	0a0001d8 	beq	9f28 <malloc+0xc68>
  while (t != 0) { /* find smallest of tree or subtree */
    97c4:	e3550000 	cmp	r5, #0
    97c8:	e1a09007 	mov	r9, r7
    97cc:	11a03005 	movne	r3, r5
    97d0:	1a000001 	bne	97dc <malloc+0x51c>
    97d4:	ea00000c 	b	980c <malloc+0x54c>
    97d8:	e1a0300e 	mov	r3, lr
    size_t trem = chunksize(t) - nb;
    97dc:	e5932004 	ldr	r2, [r3, #4]
    t = leftmost_child(t);
    97e0:	e593e010 	ldr	lr, [r3, #16]
    size_t trem = chunksize(t) - nb;
    97e4:	e3c22007 	bic	r2, r2, #7
    97e8:	e0422004 	sub	r2, r2, r4
    if (trem < rsize) {
    97ec:	e1520009 	cmp	r2, r9
    97f0:	31a09002 	movcc	r9, r2
    97f4:	31a00003 	movcc	r0, r3
    t = leftmost_child(t);
    97f8:	e35e0000 	cmp	lr, #0
    97fc:	1afffff5 	bne	97d8 <malloc+0x518>
    9800:	e593e014 	ldr	lr, [r3, #20]
  while (t != 0) { /* find smallest of tree or subtree */
    9804:	e35e0000 	cmp	lr, #0
    9808:	1afffff2 	bne	97d8 <malloc+0x518>
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
    980c:	e3500000 	cmp	r0, #0
    9810:	0afffef4 	beq	93e8 <malloc+0x128>
    9814:	e0413004 	sub	r3, r1, r4
    9818:	e1530009 	cmp	r3, r9
    981c:	9afffef1 	bls	93e8 <malloc+0x128>
    if (RTCHECK(ok_address(m, v))) { /* split */
    9820:	e5965010 	ldr	r5, [r6, #16]
    9824:	e1550000 	cmp	r5, r0
    9828:	8a00007f 	bhi	9a2c <malloc+0x76c>
      assert(chunksize(v) == rsize + nb);
    982c:	e590e004 	ldr	lr, [r0, #4]
    9830:	e0843009 	add	r3, r4, r9
      mchunkptr r = chunk_plus_offset(v, nb);
    9834:	e0807004 	add	r7, r0, r4
      assert(chunksize(v) == rsize + nb);
    9838:	e3cee007 	bic	lr, lr, #7
    983c:	e15e0003 	cmp	lr, r3
    9840:	1a000079 	bne	9a2c <malloc+0x76c>
      if (RTCHECK(ok_next(v, r))) {
    9844:	e1570000 	cmp	r7, r0
    9848:	9a000077 	bls	9a2c <malloc+0x76c>
        unlink_large_chunk(m, v);
    984c:	e590200c 	ldr	r2, [r0, #12]
    9850:	e5908018 	ldr	r8, [r0, #24]
    9854:	e1520000 	cmp	r2, r0
    9858:	0a000254 	beq	a1b0 <malloc+0xef0>
    985c:	e5903008 	ldr	r3, [r0, #8]
    9860:	e1550003 	cmp	r5, r3
    9864:	8a000070 	bhi	9a2c <malloc+0x76c>
    9868:	e593100c 	ldr	r1, [r3, #12]
    986c:	e1510000 	cmp	r1, r0
    9870:	1a00006d 	bne	9a2c <malloc+0x76c>
    9874:	e5921008 	ldr	r1, [r2, #8]
    9878:	e1510000 	cmp	r1, r0
    987c:	1a00006a 	bne	9a2c <malloc+0x76c>
    9880:	e583200c 	str	r2, [r3, #12]
    9884:	e5823008 	str	r3, [r2, #8]
    9888:	e3580000 	cmp	r8, #0
    988c:	0a00001e 	beq	990c <malloc+0x64c>
    9890:	e590301c 	ldr	r3, [r0, #28]
    9894:	e283304c 	add	r3, r3, #76	; 0x4c
    9898:	e7961103 	ldr	r1, [r6, r3, lsl #2]
    989c:	e1510000 	cmp	r1, r0
    98a0:	07862103 	streq	r2, [r6, r3, lsl #2]
    98a4:	0a000007 	beq	98c8 <malloc+0x608>
    98a8:	e1550008 	cmp	r5, r8
    98ac:	8a00005e 	bhi	9a2c <malloc+0x76c>
    98b0:	e5983010 	ldr	r3, [r8, #16]
    98b4:	e1530000 	cmp	r3, r0
    98b8:	05882010 	streq	r2, [r8, #16]
    98bc:	15882014 	strne	r2, [r8, #20]
    98c0:	e3520000 	cmp	r2, #0
    98c4:	0a000010 	beq	990c <malloc+0x64c>
    98c8:	e1550002 	cmp	r5, r2
    98cc:	8a000056 	bhi	9a2c <malloc+0x76c>
    98d0:	e5903010 	ldr	r3, [r0, #16]
    98d4:	e5828018 	str	r8, [r2, #24]
    98d8:	e3530000 	cmp	r3, #0
    98dc:	0a000003 	beq	98f0 <malloc+0x630>
    98e0:	e1550003 	cmp	r5, r3
    98e4:	8a000050 	bhi	9a2c <malloc+0x76c>
    98e8:	e5823010 	str	r3, [r2, #16]
    98ec:	e5832018 	str	r2, [r3, #24]
    98f0:	e5903014 	ldr	r3, [r0, #20]
    98f4:	e3530000 	cmp	r3, #0
    98f8:	0a000003 	beq	990c <malloc+0x64c>
    98fc:	e1550003 	cmp	r5, r3
    9900:	8a000049 	bhi	9a2c <malloc+0x76c>
    9904:	e5823014 	str	r3, [r2, #20]
    9908:	e5832018 	str	r2, [r3, #24]
        if (rsize < MIN_CHUNK_SIZE)
    990c:	e359000f 	cmp	r9, #15
    9910:	8a000210 	bhi	a158 <malloc+0xe98>
          set_inuse_and_pinuse(m, v, (rsize + nb));
    9914:	e080200e 	add	r2, r0, lr
    9918:	e38ee003 	orr	lr, lr, #3
    991c:	e5923004 	ldr	r3, [r2, #4]
    9920:	e580e004 	str	lr, [r0, #4]
    9924:	e3833001 	orr	r3, r3, #1
    9928:	e5823004 	str	r3, [r2, #4]
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    992c:	e2900008 	adds	r0, r0, #8
    9930:	1afffe92 	bne	9380 <malloc+0xc0>
    9934:	e5961008 	ldr	r1, [r6, #8]
    9938:	eafffeaa 	b	93e8 <malloc+0x128>
        unlink_first_small_chunk(gm, b, p, idx);
    993c:	e3a01001 	mov	r1, #1
    9940:	e1cc3311 	bic	r3, ip, r1, lsl r3
    9944:	e5863000 	str	r3, [r6]
    9948:	eafffe85 	b	9364 <malloc+0xa4>
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
    994c:	e5961018 	ldr	r1, [r6, #24]
    9950:	e3510000 	cmp	r1, #0
    9954:	0a00000a 	beq	9984 <malloc+0x6c4>
  msegmentptr sp = &m->seg;
    9958:	e59f9d34 	ldr	r9, [pc, #3380]	; a694 <malloc+0x13d4>
    if (addr >= sp->base && addr < sp->base + sp->size)
    995c:	e5993000 	ldr	r3, [r9]
    9960:	e1510003 	cmp	r1, r3
    9964:	3a000003 	bcc	9978 <malloc+0x6b8>
    9968:	e5992004 	ldr	r2, [r9, #4]
    996c:	e0833002 	add	r3, r3, r2
    9970:	e1510003 	cmp	r1, r3
    9974:	3a00018b 	bcc	9fa8 <malloc+0xce8>
    if ((sp = sp->next) == 0)
    9978:	e5999008 	ldr	r9, [r9, #8]
    997c:	e3590000 	cmp	r9, #0
    9980:	1afffff5 	bne	995c <malloc+0x69c>
      char* base = (char*)CALL_MORECORE(0);
    9984:	e3a00000 	mov	r0, #0
    9988:	ebfffdba 	bl	9078 <sbrk>
      if (base != CMFAIL) {
    998c:	e3700001 	cmn	r0, #1
      char* base = (char*)CALL_MORECORE(0);
    9990:	e1a09000 	mov	r9, r0
      if (base != CMFAIL) {
    9994:	0a000017 	beq	99f8 <malloc+0x738>
        if (!is_page_aligned(base))
    9998:	e5982004 	ldr	r2, [r8, #4]
    999c:	e2423001 	sub	r3, r2, #1
    99a0:	e1100003 	tst	r0, r3
          ssize += (page_align((size_t)base) - (size_t)base);
    99a4:	10837000 	addne	r7, r3, r0
    99a8:	12622000 	rsbne	r2, r2, #0
    99ac:	104a3000 	subne	r3, sl, r0
    99b0:	10077002 	andne	r7, r7, r2
    99b4:	10877003 	addne	r7, r7, r3
        if (!is_page_aligned(base))
    99b8:	01a0700a 	moveq	r7, sl
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    99bc:	e1570004 	cmp	r7, r4
    99c0:	83a03001 	movhi	r3, #1
    99c4:	93a03000 	movls	r3, #0
    99c8:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
    99cc:	83a03000 	movhi	r3, #0
    99d0:	e3530000 	cmp	r3, #0
    99d4:	0a000007 	beq	99f8 <malloc+0x738>
            (m->footprint_limit == 0 ||
    99d8:	e59631b8 	ldr	r3, [r6, #440]	; 0x1b8
        fp = m->footprint + ssize; /* recheck limits */
    99dc:	e59621b0 	ldr	r2, [r6, #432]	; 0x1b0
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    99e0:	e3530000 	cmp	r3, #0
    99e4:	0a000324 	beq	a67c <malloc+0x13bc>
        fp = m->footprint + ssize; /* recheck limits */
    99e8:	e0821007 	add	r1, r2, r7
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    99ec:	e1510003 	cmp	r1, r3
    99f0:	91520001 	cmpls	r2, r1
    99f4:	3a000320 	bcc	a67c <malloc+0x13bc>
    99f8:	e596e1bc 	ldr	lr, [r6, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
    99fc:	e37a010a 	cmn	sl, #-2147483646	; 0x80000002
        disable_contiguous(m); /* Don't try contiguous path in the future */
    9a00:	e38ee004 	orr	lr, lr, #4
    9a04:	e586e1bc 	str	lr, [r6, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
    9a08:	9affff0b 	bls	963c <malloc+0x37c>
    return 0; /* wraparound */
    9a0c:	e3a00000 	mov	r0, #0
    9a10:	eafffe5a 	b	9380 <malloc+0xc0>
      unlink_chunk(m, oldfirst, nsize);
    9a14:	e5968010 	ldr	r8, [r6, #16]
    9a18:	e15c0008 	cmp	ip, r8
    9a1c:	3a000002 	bcc	9a2c <malloc+0x76c>
    9a20:	e59c800c 	ldr	r8, [ip, #12]
    9a24:	e1580001 	cmp	r8, r1
    9a28:	0a000331 	beq	a6f4 <malloc+0x1434>
        assert(chunksize(p) == small_index2size(idx));
    9a2c:	e3e00000 	mvn	r0, #0
    9a30:	ebfff972 	bl	8000 <exit>
        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
    9a34:	e5965004 	ldr	r5, [r6, #4]
    9a38:	e3550000 	cmp	r5, #0
    9a3c:	0afffe6b 	beq	93f0 <malloc+0x130>
  binmap_t leastbit = least_bit(m->treemap);
    9a40:	e2653000 	rsb	r3, r5, #0
    9a44:	e0033005 	and	r3, r3, r5
  compute_bit2idx(leastbit, i);
    9a48:	e2433001 	sub	r3, r3, #1
    9a4c:	e1a02623 	lsr	r2, r3, #12
    9a50:	e2022010 	and	r2, r2, #16
    9a54:	e1a03233 	lsr	r3, r3, r2
    9a58:	e1a002a3 	lsr	r0, r3, #5
    9a5c:	e2000008 	and	r0, r0, #8
    9a60:	e1a03033 	lsr	r3, r3, r0
    9a64:	e1822000 	orr	r2, r2, r0
    9a68:	e1a00123 	lsr	r0, r3, #2
    9a6c:	e2000004 	and	r0, r0, #4
    9a70:	e1a03033 	lsr	r3, r3, r0
    9a74:	e0822000 	add	r2, r2, r0
    9a78:	e1a000a3 	lsr	r0, r3, #1
    9a7c:	e2000002 	and	r0, r0, #2
    9a80:	e1a03033 	lsr	r3, r3, r0
    9a84:	e0822000 	add	r2, r2, r0
    9a88:	e7e000d3 	ubfx	r0, r3, #1, #1
  v = t = *treebin_at(m, i);
    9a8c:	e0822000 	add	r2, r2, r0
    9a90:	e0823033 	add	r3, r2, r3, lsr r0
    9a94:	e283304c 	add	r3, r3, #76	; 0x4c
    9a98:	e7967103 	ldr	r7, [r6, r3, lsl #2]
  rsize = chunksize(t) - nb;
    9a9c:	e597e004 	ldr	lr, [r7, #4]
    9aa0:	e1a00007 	mov	r0, r7
    9aa4:	e3cee007 	bic	lr, lr, #7
    9aa8:	e04ee004 	sub	lr, lr, r4
    9aac:	ea000006 	b	9acc <malloc+0x80c>
    size_t trem = chunksize(t) - nb;
    9ab0:	e5923004 	ldr	r3, [r2, #4]
    if (trem < rsize) {
    9ab4:	e1a07002 	mov	r7, r2
    size_t trem = chunksize(t) - nb;
    9ab8:	e3c33007 	bic	r3, r3, #7
    9abc:	e0433004 	sub	r3, r3, r4
    if (trem < rsize) {
    9ac0:	e153000e 	cmp	r3, lr
    9ac4:	31a0e003 	movcc	lr, r3
    9ac8:	31a00002 	movcc	r0, r2
  while ((t = leftmost_child(t)) != 0) {
    9acc:	e5972010 	ldr	r2, [r7, #16]
    9ad0:	e3520000 	cmp	r2, #0
    9ad4:	1afffff5 	bne	9ab0 <malloc+0x7f0>
    9ad8:	e5972014 	ldr	r2, [r7, #20]
    9adc:	e3520000 	cmp	r2, #0
    9ae0:	1afffff2 	bne	9ab0 <malloc+0x7f0>
  if (RTCHECK(ok_address(m, v))) {
    9ae4:	e596a010 	ldr	sl, [r6, #16]
    9ae8:	e15a0000 	cmp	sl, r0
    9aec:	8affffce 	bhi	9a2c <malloc+0x76c>
    assert(chunksize(v) == rsize + nb);
    9af0:	e5908004 	ldr	r8, [r0, #4]
    9af4:	e084300e 	add	r3, r4, lr
    mchunkptr r = chunk_plus_offset(v, nb);
    9af8:	e0809004 	add	r9, r0, r4
    assert(chunksize(v) == rsize + nb);
    9afc:	e3c88007 	bic	r8, r8, #7
    9b00:	e1580003 	cmp	r8, r3
    9b04:	1affffc8 	bne	9a2c <malloc+0x76c>
    if (RTCHECK(ok_next(v, r))) {
    9b08:	e1590000 	cmp	r9, r0
    9b0c:	9affffc6 	bls	9a2c <malloc+0x76c>
      unlink_large_chunk(m, v);
    9b10:	e590700c 	ldr	r7, [r0, #12]
    9b14:	e590b018 	ldr	fp, [r0, #24]
    9b18:	e1570000 	cmp	r7, r0
    9b1c:	0a000248 	beq	a444 <malloc+0x1184>
    9b20:	e5903008 	ldr	r3, [r0, #8]
    9b24:	e15a0003 	cmp	sl, r3
    9b28:	8affffbf 	bhi	9a2c <malloc+0x76c>
    9b2c:	e593200c 	ldr	r2, [r3, #12]
    9b30:	e1520000 	cmp	r2, r0
    9b34:	1affffbc 	bne	9a2c <malloc+0x76c>
    9b38:	e5972008 	ldr	r2, [r7, #8]
    9b3c:	e1520000 	cmp	r2, r0
    9b40:	1affffb9 	bne	9a2c <malloc+0x76c>
    9b44:	e583700c 	str	r7, [r3, #12]
    9b48:	e5873008 	str	r3, [r7, #8]
    9b4c:	e35b0000 	cmp	fp, #0
    9b50:	0a00001e 	beq	9bd0 <malloc+0x910>
    9b54:	e590301c 	ldr	r3, [r0, #28]
    9b58:	e283304c 	add	r3, r3, #76	; 0x4c
    9b5c:	e7962103 	ldr	r2, [r6, r3, lsl #2]
    9b60:	e1520000 	cmp	r2, r0
    9b64:	07867103 	streq	r7, [r6, r3, lsl #2]
    9b68:	0a000007 	beq	9b8c <malloc+0x8cc>
    9b6c:	e15a000b 	cmp	sl, fp
    9b70:	8affffad 	bhi	9a2c <malloc+0x76c>
    9b74:	e59b3010 	ldr	r3, [fp, #16]
    9b78:	e1530000 	cmp	r3, r0
    9b7c:	058b7010 	streq	r7, [fp, #16]
    9b80:	158b7014 	strne	r7, [fp, #20]
    9b84:	e3570000 	cmp	r7, #0
    9b88:	0a000010 	beq	9bd0 <malloc+0x910>
    9b8c:	e15a0007 	cmp	sl, r7
    9b90:	8affffa5 	bhi	9a2c <malloc+0x76c>
    9b94:	e5903010 	ldr	r3, [r0, #16]
    9b98:	e587b018 	str	fp, [r7, #24]
    9b9c:	e3530000 	cmp	r3, #0
    9ba0:	0a000003 	beq	9bb4 <malloc+0x8f4>
    9ba4:	e15a0003 	cmp	sl, r3
    9ba8:	8affff9f 	bhi	9a2c <malloc+0x76c>
    9bac:	e5873010 	str	r3, [r7, #16]
    9bb0:	e5837018 	str	r7, [r3, #24]
    9bb4:	e5903014 	ldr	r3, [r0, #20]
    9bb8:	e3530000 	cmp	r3, #0
    9bbc:	0a000003 	beq	9bd0 <malloc+0x910>
    9bc0:	e15a0003 	cmp	sl, r3
    9bc4:	8affff98 	bhi	9a2c <malloc+0x76c>
    9bc8:	e5873014 	str	r3, [r7, #20]
    9bcc:	e5837018 	str	r7, [r3, #24]
      if (rsize < MIN_CHUNK_SIZE)
    9bd0:	e35e000f 	cmp	lr, #15
    9bd4:	9a000213 	bls	a428 <malloc+0x1168>
        replace_dv(m, r, rsize);
    9bd8:	e3510000 	cmp	r1, #0
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    9bdc:	e3842003 	orr	r2, r4, #3
        set_size_and_pinuse_of_free_chunk(r, rsize);
    9be0:	e38e3001 	orr	r3, lr, #1
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    9be4:	e5802004 	str	r2, [r0, #4]
        set_size_and_pinuse_of_free_chunk(r, rsize);
    9be8:	e5893004 	str	r3, [r9, #4]
    9bec:	e789e00e 	str	lr, [r9, lr]
        replace_dv(m, r, rsize);
    9bf0:	0a00000f 	beq	9c34 <malloc+0x974>
    9bf4:	e1a051a1 	lsr	r5, r1, #3
    9bf8:	e351000f 	cmp	r1, #15
    9bfc:	e5961014 	ldr	r1, [r6, #20]
    9c00:	e0863185 	add	r3, r6, r5, lsl #3
    9c04:	e2833028 	add	r3, r3, #40	; 0x28
    9c08:	9affff87 	bls	9a2c <malloc+0x76c>
    9c0c:	e3a02001 	mov	r2, #1
    9c10:	e1a02512 	lsl	r2, r2, r5
    9c14:	e11c0002 	tst	ip, r2
    9c18:	1a0002f3 	bne	a7ec <malloc+0x152c>
    9c1c:	e18cc002 	orr	ip, ip, r2
    9c20:	e1a02003 	mov	r2, r3
    9c24:	e586c000 	str	ip, [r6]
    9c28:	e5831008 	str	r1, [r3, #8]
    9c2c:	e582100c 	str	r1, [r2, #12]
    9c30:	e1c120f8 	strd	r2, [r1, #8]
    9c34:	e586e008 	str	lr, [r6, #8]
    9c38:	e5869014 	str	r9, [r6, #20]
    9c3c:	eaffff3a 	b	992c <malloc+0x66c>
  compute_tree_index(nb, idx);
    9c40:	e3580801 	cmp	r8, #65536	; 0x10000
    9c44:	3a000123 	bcc	a0d8 <malloc+0xe18>
  if ((t = *treebin_at(m, idx)) != 0) {
    9c48:	e59631ac 	ldr	r3, [r6, #428]	; 0x1ac
    9c4c:	e3530000 	cmp	r3, #0
    9c50:	11a0e004 	movne	lr, r4
  compute_tree_index(nb, idx);
    9c54:	13a0801f 	movne	r8, #31
  if ((t = *treebin_at(m, idx)) != 0) {
    9c58:	1afffec0 	bne	9760 <malloc+0x4a0>
    9c5c:	eafffde1 	b	93e8 <malloc+0x128>
            !is_extern_segment(sp) &&
    9c60:	e593000c 	ldr	r0, [r3, #12]
    9c64:	e3100008 	tst	r0, #8
    9c68:	1afffea5 	bne	9704 <malloc+0x444>
          sp->size += tsize;
    9c6c:	e5930004 	ldr	r0, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    9c70:	e2852008 	add	r2, r5, #8
    9c74:	e3120007 	tst	r2, #7
          sp->base = tbase;
    9c78:	e5835000 	str	r5, [r3]
          sp->size += tsize;
    9c7c:	e0807007 	add	r7, r0, r7
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    9c80:	e3840003 	orr	r0, r4, #3
          sp->size += tsize;
    9c84:	e5837004 	str	r7, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    9c88:	12623000 	rsbne	r3, r2, #0
    9c8c:	12033007 	andne	r3, r3, #7
    9c90:	10855003 	addne	r5, r5, r3
  mchunkptr oldfirst = align_as_chunk(oldbase);
    9c94:	e2813008 	add	r3, r1, #8
    9c98:	e3130007 	tst	r3, #7
  mchunkptr q = chunk_plus_offset(p, nb);
    9c9c:	e0852004 	add	r2, r5, r4
  mchunkptr oldfirst = align_as_chunk(oldbase);
    9ca0:	12633000 	rsbne	r3, r3, #0
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    9ca4:	e5850004 	str	r0, [r5, #4]
  mchunkptr oldfirst = align_as_chunk(oldbase);
    9ca8:	12033007 	andne	r3, r3, #7
    9cac:	10811003 	addne	r1, r1, r3
  assert((char*)oldfirst > (char*)q);
    9cb0:	e1520001 	cmp	r2, r1
  size_t psize = (char*)oldfirst - (char*)p;
    9cb4:	e0413005 	sub	r3, r1, r5
  size_t qsize = psize - nb;
    9cb8:	e0434004 	sub	r4, r3, r4
  assert((char*)oldfirst > (char*)q);
    9cbc:	2affff5a 	bcs	9a2c <malloc+0x76c>
  assert(pinuse(oldfirst));
    9cc0:	e5913004 	ldr	r3, [r1, #4]
    9cc4:	e3130001 	tst	r3, #1
    9cc8:	0affff57 	beq	9a2c <malloc+0x76c>
  assert(qsize >= MIN_CHUNK_SIZE);
    9ccc:	e354000f 	cmp	r4, #15
    9cd0:	9affff55 	bls	9a2c <malloc+0x76c>
  if (oldfirst == m->top) {
    9cd4:	e15e0001 	cmp	lr, r1
    9cd8:	0a000221 	beq	a564 <malloc+0x12a4>
  else if (oldfirst == m->dv) {
    9cdc:	e5960014 	ldr	r0, [r6, #20]
    9ce0:	e1500001 	cmp	r0, r1
    9ce4:	0a00026c 	beq	a69c <malloc+0x13dc>
    if (!is_inuse(oldfirst)) {
    9ce8:	e2030003 	and	r0, r3, #3
    9cec:	e3500001 	cmp	r0, #1
    9cf0:	0a000271 	beq	a6bc <malloc+0x13fc>
    insert_chunk(m, q, qsize);
    9cf4:	e1a001a4 	lsr	r0, r4, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    9cf8:	e3c33001 	bic	r3, r3, #1
    9cfc:	e5813004 	str	r3, [r1, #4]
    9d00:	e3843001 	orr	r3, r4, #1
    insert_chunk(m, q, qsize);
    9d04:	e350001f 	cmp	r0, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    9d08:	e5823004 	str	r3, [r2, #4]
    9d0c:	e5814000 	str	r4, [r1]
    insert_chunk(m, q, qsize);
    9d10:	8a00021a 	bhi	a580 <malloc+0x12c0>
    9d14:	e0863180 	add	r3, r6, r0, lsl #3
    9d18:	e2833028 	add	r3, r3, #40	; 0x28
    9d1c:	e3a01001 	mov	r1, #1
    9d20:	e596c000 	ldr	ip, [r6]
    9d24:	e1a00011 	lsl	r0, r1, r0
    9d28:	e11c0000 	tst	ip, r0
    9d2c:	1a000293 	bne	a780 <malloc+0x14c0>
    9d30:	e1a01003 	mov	r1, r3
    9d34:	e18c0000 	orr	r0, ip, r0
    9d38:	e5860000 	str	r0, [r6]
    9d3c:	e5832008 	str	r2, [r3, #8]
    9d40:	e581200c 	str	r2, [r1, #12]
    9d44:	e5821008 	str	r1, [r2, #8]
    9d48:	e582300c 	str	r3, [r2, #12]
  return chunk2mem(p);
    9d4c:	e2850008 	add	r0, r5, #8
    9d50:	eafffd8a 	b	9380 <malloc+0xc0>
          !is_extern_segment(sp) &&
    9d54:	e593c00c 	ldr	ip, [r3, #12]
    9d58:	e31c0008 	tst	ip, #8
    9d5c:	1afffe5d 	bne	96d8 <malloc+0x418>
          (sp->sflags & USE_MMAP_BIT) == mmap_flag &&
    9d60:	e15e0001 	cmp	lr, r1
    9d64:	3afffe5b 	bcc	96d8 <malloc+0x418>
          segment_holds(sp, m->top)) { /* append */
    9d68:	e15e0005 	cmp	lr, r5
    9d6c:	2afffe59 	bcs	96d8 <malloc+0x418>
  size_t offset = align_offset(chunk2mem(p));
    9d70:	e28e1008 	add	r1, lr, #8
        init_top(m, m->top, m->topsize + tsize);
    9d74:	e596200c 	ldr	r2, [r6, #12]
  size_t offset = align_offset(chunk2mem(p));
    9d78:	e3110007 	tst	r1, #7
        sp->size += tsize;
    9d7c:	e0800007 	add	r0, r0, r7
    9d80:	e5830004 	str	r0, [r3, #4]
  size_t offset = align_offset(chunk2mem(p));
    9d84:	12613000 	rsbne	r3, r1, #0
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9d88:	e5980010 	ldr	r0, [r8, #16]
        init_top(m, m->top, m->topsize + tsize);
    9d8c:	e0877002 	add	r7, r7, r2
  size_t offset = align_offset(chunk2mem(p));
    9d90:	12033007 	andne	r3, r3, #7
    9d94:	01a03007 	moveq	r3, r7
    9d98:	108e1003 	addne	r1, lr, r3
    9d9c:	01a0100e 	moveq	r1, lr
    9da0:	10473003 	subne	r3, r7, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9da4:	e08e7007 	add	r7, lr, r7
  p->head = psize | PINUSE_BIT;
    9da8:	e3832001 	orr	r2, r3, #1
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9dac:	e3a0c028 	mov	ip, #40	; 0x28
  m->top = p;
    9db0:	e5861018 	str	r1, [r6, #24]
  m->topsize = psize;
    9db4:	e586300c 	str	r3, [r6, #12]
  p->head = psize | PINUSE_BIT;
    9db8:	e5812004 	str	r2, [r1, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9dbc:	e587c004 	str	ip, [r7, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9dc0:	e586001c 	str	r0, [r6, #28]
    if (nb < m->topsize) { /* Allocate from new or extended top space */
    9dc4:	e1540003 	cmp	r4, r3
    9dc8:	3afffd8b 	bcc	93fc <malloc+0x13c>
    9dcc:	eaffff0e 	b	9a0c <malloc+0x74c>
  size_t offset = align_offset(chunk2mem(rawsp));
    9dd0:	e2413027 	sub	r3, r1, #39	; 0x27
    9dd4:	e1a0c001 	mov	ip, r1
    9dd8:	e3130007 	tst	r3, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9ddc:	e5988010 	ldr	r8, [r8, #16]
  size_t offset = align_offset(chunk2mem(rawsp));
    9de0:	12639000 	rsbne	r9, r3, #0
    9de4:	03e0902e 	mvneq	r9, #46	; 0x2e
    9de8:	12099007 	andne	r9, r9, #7
  size_t offset = align_offset(chunk2mem(p));
    9dec:	e2853008 	add	r3, r5, #8
    9df0:	1249902f 	subne	r9, r9, #47	; 0x2f
  char* asp = rawsp + offset;
    9df4:	e0819009 	add	r9, r1, r9
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
    9df8:	e28e1010 	add	r1, lr, #16
    9dfc:	e1590001 	cmp	r9, r1
    9e00:	31a0900e 	movcc	r9, lr
  size_t offset = align_offset(chunk2mem(p));
    9e04:	e3130007 	tst	r3, #7
    9e08:	12633000 	rsbne	r3, r3, #0
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    9e0c:	e2891008 	add	r1, r9, #8
  size_t offset = align_offset(chunk2mem(p));
    9e10:	12033007 	andne	r3, r3, #7
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    9e14:	e58d1000 	str	r1, [sp]
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    9e18:	e2471028 	sub	r1, r7, #40	; 0x28
    9e1c:	10850003 	addne	r0, r5, r3
  size_t offset = align_offset(chunk2mem(p));
    9e20:	01a03001 	moveq	r3, r1
    9e24:	10413003 	subne	r3, r1, r3
  assert(is_aligned(ss));
    9e28:	e289a008 	add	sl, r9, #8
  size_t offset = align_offset(chunk2mem(p));
    9e2c:	01a00005 	moveq	r0, r5
  m->topsize = psize;
    9e30:	e586300c 	str	r3, [r6, #12]
  assert(is_aligned(ss));
    9e34:	e21ab007 	ands	fp, sl, #7
  p->head = psize | PINUSE_BIT;
    9e38:	e3833001 	orr	r3, r3, #1
  m->top = p;
    9e3c:	e5860018 	str	r0, [r6, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9e40:	e0851001 	add	r1, r5, r1
  p->head = psize | PINUSE_BIT;
    9e44:	e5803004 	str	r3, [r0, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9e48:	e3a03028 	mov	r3, #40	; 0x28
  assert(is_aligned(ss));
    9e4c:	e1a0a00b 	mov	sl, fp
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9e50:	e5813004 	str	r3, [r1, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9e54:	e586801c 	str	r8, [r6, #28]
  assert(is_aligned(ss));
    9e58:	1afffef3 	bne	9a2c <malloc+0x76c>
  *ss = m->seg; /* Push current record */
    9e5c:	e892000f 	ldm	r2, {r0, r1, r2, r3}
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    9e60:	e3a0b01b 	mov	fp, #27
    9e64:	e289801c 	add	r8, r9, #28
  int nfences = 0;
    9e68:	e58da004 	str	sl, [sp, #4]
    9e6c:	e58da000 	str	sl, [sp]
  *ss = m->seg; /* Push current record */
    9e70:	e289a008 	add	sl, r9, #8
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    9e74:	e589b004 	str	fp, [r9, #4]
    p->head = FENCEPOST_HEAD;
    9e78:	e3a0b007 	mov	fp, #7
  *ss = m->seg; /* Push current record */
    9e7c:	e88a000f 	stm	sl, {r0, r1, r2, r3}
  m->seg.sflags = mmapped;
    9e80:	e59d3004 	ldr	r3, [sp, #4]
  m->seg.next = ss;
    9e84:	e586a1c8 	str	sl, [r6, #456]	; 0x1c8
    9e88:	e1a0a003 	mov	sl, r3
  m->seg.base = tbase;
    9e8c:	e58651c0 	str	r5, [r6, #448]	; 0x1c0
  m->seg.size = tsize;
    9e90:	e58671c4 	str	r7, [r6, #452]	; 0x1c4
  m->seg.sflags = mmapped;
    9e94:	e58631cc 	str	r3, [r6, #460]	; 0x1cc
    p->head = FENCEPOST_HEAD;
    9e98:	e488b004 	str	fp, [r8], #4
    if ((char*)(&(nextp->head)) < old_end)
    9e9c:	e15c0008 	cmp	ip, r8
    ++nfences;
    9ea0:	e28aa001 	add	sl, sl, #1
    if ((char*)(&(nextp->head)) < old_end)
    9ea4:	8afffffb 	bhi	9e98 <malloc+0xbd8>
  assert(nfences >= 2);
    9ea8:	e35a0001 	cmp	sl, #1
    9eac:	0afffede 	beq	9a2c <malloc+0x76c>
  if (csp != old_top) {
    9eb0:	e15e0009 	cmp	lr, r9
    9eb4:	0a000117 	beq	a318 <malloc+0x1058>
    size_t psize = csp - old_top;
    9eb8:	e049100e 	sub	r1, r9, lr
    set_free_with_pinuse(q, psize, tn);
    9ebc:	e5993004 	ldr	r3, [r9, #4]
    insert_chunk(m, q, psize);
    9ec0:	e1a021a1 	lsr	r2, r1, #3
    set_free_with_pinuse(q, psize, tn);
    9ec4:	e3810001 	orr	r0, r1, #1
    insert_chunk(m, q, psize);
    9ec8:	e352001f 	cmp	r2, #31
    set_free_with_pinuse(q, psize, tn);
    9ecc:	e3c33001 	bic	r3, r3, #1
    9ed0:	e5893004 	str	r3, [r9, #4]
    9ed4:	e58e0004 	str	r0, [lr, #4]
    9ed8:	e5891000 	str	r1, [r9]
    insert_chunk(m, q, psize);
    9edc:	8a0000c5 	bhi	a1f8 <malloc+0xf38>
    9ee0:	e0863182 	add	r3, r6, r2, lsl #3
    9ee4:	e351000f 	cmp	r1, #15
    9ee8:	e2833028 	add	r3, r3, #40	; 0x28
    9eec:	9afffece 	bls	9a2c <malloc+0x76c>
    9ef0:	e3a01001 	mov	r1, #1
    9ef4:	e5960000 	ldr	r0, [r6]
    9ef8:	e1a02211 	lsl	r2, r1, r2
    9efc:	e1100002 	tst	r0, r2
    9f00:	1a000135 	bne	a3dc <malloc+0x111c>
    9f04:	e1a01003 	mov	r1, r3
    9f08:	e1802002 	orr	r2, r0, r2
    9f0c:	e5862000 	str	r2, [r6]
    9f10:	e583e008 	str	lr, [r3, #8]
    9f14:	e581e00c 	str	lr, [r1, #12]
    9f18:	e58e300c 	str	r3, [lr, #12]
    9f1c:	e58e1008 	str	r1, [lr, #8]
    9f20:	e596300c 	ldr	r3, [r6, #12]
    9f24:	eaffffa6 	b	9dc4 <malloc+0xb04>
    9f28:	e3e03001 	mvn	r3, #1
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    9f2c:	e1a09007 	mov	r9, r7
    9f30:	e1a08813 	lsl	r8, r3, r8
    if (leftbits != 0) {
    9f34:	e01c8008 	ands	r8, ip, r8
    9f38:	0afffd2a 	beq	93e8 <malloc+0x128>
      binmap_t leastbit = least_bit(leftbits);
    9f3c:	e2683000 	rsb	r3, r8, #0
    9f40:	e0033008 	and	r3, r3, r8
      compute_bit2idx(leastbit, i);
    9f44:	e2433001 	sub	r3, r3, #1
    9f48:	e1a02623 	lsr	r2, r3, #12
    9f4c:	e2022010 	and	r2, r2, #16
    9f50:	e1a03233 	lsr	r3, r3, r2
    9f54:	e1a002a3 	lsr	r0, r3, #5
    9f58:	e2000008 	and	r0, r0, #8
    9f5c:	e1a03033 	lsr	r3, r3, r0
    9f60:	e1822000 	orr	r2, r2, r0
    9f64:	e1a00123 	lsr	r0, r3, #2
    9f68:	e2000004 	and	r0, r0, #4
    9f6c:	e1a03033 	lsr	r3, r3, r0
    9f70:	e0822000 	add	r2, r2, r0
    9f74:	e1a000a3 	lsr	r0, r3, #1
    9f78:	e2000002 	and	r0, r0, #2
    9f7c:	e1a03033 	lsr	r3, r3, r0
    9f80:	e0822000 	add	r2, r2, r0
    9f84:	e7e000d3 	ubfx	r0, r3, #1, #1
      t = *treebin_at(m, i);
    9f88:	e0822000 	add	r2, r2, r0
    9f8c:	e0823033 	add	r3, r2, r3, lsr r0
    9f90:	e283304c 	add	r3, r3, #76	; 0x4c
    9f94:	e7963103 	ldr	r3, [r6, r3, lsl #2]
  while (t != 0) { /* find smallest of tree or subtree */
    9f98:	e3530000 	cmp	r3, #0
    9f9c:	13a00000 	movne	r0, #0
    9fa0:	1afffe0d 	bne	97dc <malloc+0x51c>
    9fa4:	eafffd0f 	b	93e8 <malloc+0x128>
      ssize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
    9fa8:	e596700c 	ldr	r7, [r6, #12]
    9fac:	e04c7007 	sub	r7, ip, r7
    9fb0:	e0877004 	add	r7, r7, r4
    9fb4:	e0077000 	and	r7, r7, r0
      if (ssize < HALF_MAX_SIZE_T &&
    9fb8:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
    9fbc:	8afffe8e 	bhi	99fc <malloc+0x73c>
    9fc0:	e1a00007 	mov	r0, r7
    9fc4:	ebfffc2b 	bl	9078 <sbrk>
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    9fc8:	e5992000 	ldr	r2, [r9]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9fcc:	e3700001 	cmn	r0, #1
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    9fd0:	e5991004 	ldr	r1, [r9, #4]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9fd4:	13a03000 	movne	r3, #0
    9fd8:	03a03001 	moveq	r3, #1
      if (ssize < HALF_MAX_SIZE_T &&
    9fdc:	e1a05000 	mov	r5, r0
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    9fe0:	e0822001 	add	r2, r2, r1
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9fe4:	e1500002 	cmp	r0, r2
    9fe8:	13833001 	orrne	r3, r3, #1
    9fec:	e3530000 	cmp	r3, #0
    9ff0:	0afffda5 	beq	968c <malloc+0x3cc>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
    9ff4:	e3750001 	cmn	r5, #1
    9ff8:	0afffe7e 	beq	99f8 <malloc+0x738>
            ssize < nb + SYS_ALLOC_PADDING) {
    9ffc:	e2843030 	add	r3, r4, #48	; 0x30
        if (ssize < HALF_MAX_SIZE_T &&
    a000:	e1530007 	cmp	r3, r7
    a004:	9afffda0 	bls	968c <malloc+0x3cc>
          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);
    a008:	e5983008 	ldr	r3, [r8, #8]
    a00c:	e267b000 	rsb	fp, r7, #0
    a010:	e283902f 	add	r9, r3, #47	; 0x2f
    a014:	e2633000 	rsb	r3, r3, #0
    a018:	e0899004 	add	r9, r9, r4
    a01c:	e0499007 	sub	r9, r9, r7
    a020:	e0099003 	and	r9, r9, r3
          if (esize < HALF_MAX_SIZE_T) {
    a024:	e379010a 	cmn	r9, #-2147483646	; 0x80000002
    a028:	8afffd97 	bhi	968c <malloc+0x3cc>
            char* end = (char*)CALL_MORECORE(esize);
    a02c:	e1a00009 	mov	r0, r9
    a030:	ebfffc10 	bl	9078 <sbrk>
            if (end != CMFAIL)
    a034:	e3700001 	cmn	r0, #1
              ssize += esize;
    a038:	10877009 	addne	r7, r7, r9
            if (end != CMFAIL)
    a03c:	1afffd92 	bne	968c <malloc+0x3cc>
              (void) CALL_MORECORE(-ssize);
    a040:	e1a0000b 	mov	r0, fp
    a044:	ebfffc0b 	bl	9078 <sbrk>
    a048:	eafffe6a 	b	99f8 <malloc+0x738>
      if (m->least_addr == 0 || tbase < m->least_addr)
    a04c:	e5962010 	ldr	r2, [r6, #16]
      m->seg.sflags = mmap_flag;
    a050:	e3a00000 	mov	r0, #0
      m->magic = mparams.magic;
    a054:	e598c000 	ldr	ip, [r8]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    a058:	e3e01000 	mvn	r1, #0
      m->seg.base = tbase;
    a05c:	e58651c0 	str	r5, [r6, #448]	; 0x1c0
      if (m->least_addr == 0 || tbase < m->least_addr)
    a060:	e1520005 	cmp	r2, r5
      m->seg.size = tsize;
    a064:	e58671c4 	str	r7, [r6, #452]	; 0x1c4
      if (m->least_addr == 0 || tbase < m->least_addr)
    a068:	93a03000 	movls	r3, #0
    a06c:	83a03001 	movhi	r3, #1
    a070:	e3520000 	cmp	r2, #0
      m->magic = mparams.magic;
    a074:	e586c024 	str	ip, [r6, #36]	; 0x24
      if (m->least_addr == 0 || tbase < m->least_addr)
    a078:	03a03001 	moveq	r3, #1
      m->seg.sflags = mmap_flag;
    a07c:	e58601cc 	str	r0, [r6, #460]	; 0x1cc
      if (m->least_addr == 0 || tbase < m->least_addr)
    a080:	e3530000 	cmp	r3, #0
    a084:	e59f360c 	ldr	r3, [pc, #1548]	; a698 <malloc+0x13d8>
        m->least_addr = tbase;
    a088:	15865010 	strne	r5, [r6, #16]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    a08c:	e5861020 	str	r1, [r6, #32]
    a090:	e2832c01 	add	r2, r3, #256	; 0x100
    bin->fd = bin->bk = bin;
    a094:	e583300c 	str	r3, [r3, #12]
    a098:	e5833008 	str	r3, [r3, #8]
    a09c:	e2833008 	add	r3, r3, #8
  for (i = 0; i < NSMALLBINS; ++i) {
    a0a0:	e1520003 	cmp	r2, r3
    a0a4:	1afffffa 	bne	a094 <malloc+0xdd4>
  size_t offset = align_offset(chunk2mem(p));
    a0a8:	e2853008 	add	r3, r5, #8
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    a0ac:	e2477028 	sub	r7, r7, #40	; 0x28
  size_t offset = align_offset(chunk2mem(p));
    a0b0:	e3130007 	tst	r3, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a0b4:	e5980010 	ldr	r0, [r8, #16]
  size_t offset = align_offset(chunk2mem(p));
    a0b8:	12633000 	rsbne	r3, r3, #0
    a0bc:	01a03007 	moveq	r3, r7
    a0c0:	12033007 	andne	r3, r3, #7
    a0c4:	01a01005 	moveq	r1, r5
    a0c8:	10851003 	addne	r1, r5, r3
    a0cc:	10473003 	subne	r3, r7, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a0d0:	e0857007 	add	r7, r5, r7
    a0d4:	eaffff33 	b	9da8 <malloc+0xae8>
  compute_tree_index(nb, idx);
    a0d8:	e2483c01 	sub	r3, r8, #256	; 0x100
    a0dc:	e1a03823 	lsr	r3, r3, #16
    a0e0:	e2033008 	and	r3, r3, #8
    a0e4:	e1a08318 	lsl	r8, r8, r3
    a0e8:	e2482a01 	sub	r2, r8, #4096	; 0x1000
    a0ec:	e1a02822 	lsr	r2, r2, #16
    a0f0:	e2022004 	and	r2, r2, #4
    a0f4:	e1a08218 	lsl	r8, r8, r2
    a0f8:	e1833002 	orr	r3, r3, r2
    a0fc:	e2482901 	sub	r2, r8, #16384	; 0x4000
    a100:	e1a02822 	lsr	r2, r2, #16
    a104:	e2022002 	and	r2, r2, #2
    a108:	e1a08218 	lsl	r8, r8, r2
    a10c:	e0833002 	add	r3, r3, r2
    a110:	e06387a8 	rsb	r8, r3, r8, lsr #15
    a114:	e2883015 	add	r3, r8, #21
    a118:	e288800e 	add	r8, r8, #14
    a11c:	e1a03334 	lsr	r3, r4, r3
    a120:	e2033001 	and	r3, r3, #1
    a124:	e0838088 	add	r8, r3, r8, lsl #1
  if ((t = *treebin_at(m, idx)) != 0) {
    a128:	e288304c 	add	r3, r8, #76	; 0x4c
    a12c:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    a130:	e3530000 	cmp	r3, #0
    a134:	0affff7b 	beq	9f28 <malloc+0xc68>
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    a138:	e358001f 	cmp	r8, #31
    a13c:	01a0e004 	moveq	lr, r4
    a140:	0afffd86 	beq	9760 <malloc+0x4a0>
    a144:	e1a0e0a8 	lsr	lr, r8, #1
    a148:	e26ee019 	rsb	lr, lr, #25
    a14c:	eafffd82 	b	975c <malloc+0x49c>
        if ((rsize = trem) == 0)
    a150:	e1a00003 	mov	r0, r3
    a154:	eafffda0 	b	97dc <malloc+0x51c>
          insert_chunk(m, r, rsize);
    a158:	e1a031a9 	lsr	r3, r9, #3
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    a15c:	e3842003 	orr	r2, r4, #3
    a160:	e5802004 	str	r2, [r0, #4]
          set_size_and_pinuse_of_free_chunk(r, rsize);
    a164:	e3892001 	orr	r2, r9, #1
          insert_chunk(m, r, rsize);
    a168:	e353001f 	cmp	r3, #31
          set_size_and_pinuse_of_free_chunk(r, rsize);
    a16c:	e5872004 	str	r2, [r7, #4]
    a170:	e7879009 	str	r9, [r7, r9]
          insert_chunk(m, r, rsize);
    a174:	8a000069 	bhi	a320 <malloc+0x1060>
    a178:	e3a02001 	mov	r2, #1
    a17c:	e5961000 	ldr	r1, [r6]
    a180:	e1a02312 	lsl	r2, r2, r3
    a184:	e0863183 	add	r3, r6, r3, lsl #3
    a188:	e1110002 	tst	r1, r2
    a18c:	e2833028 	add	r3, r3, #40	; 0x28
    a190:	1a0000e5 	bne	a52c <malloc+0x126c>
    a194:	e1811002 	orr	r1, r1, r2
    a198:	e1a02003 	mov	r2, r3
    a19c:	e5861000 	str	r1, [r6]
    a1a0:	e5837008 	str	r7, [r3, #8]
    a1a4:	e582700c 	str	r7, [r2, #12]
    a1a8:	e1c720f8 	strd	r2, [r7, #8]
    a1ac:	eafffdde 	b	992c <malloc+0x66c>
        unlink_large_chunk(m, v);
    a1b0:	e5901014 	ldr	r1, [r0, #20]
    a1b4:	e3510000 	cmp	r1, #0
    a1b8:	12803014 	addne	r3, r0, #20
    a1bc:	0a000094 	beq	a414 <malloc+0x1154>
    a1c0:	e1a0c003 	mov	ip, r3
    a1c4:	e1a03001 	mov	r3, r1
    a1c8:	e1a02001 	mov	r2, r1
    a1cc:	e5b31014 	ldr	r1, [r3, #20]!
    a1d0:	e3510000 	cmp	r1, #0
    a1d4:	1afffff9 	bne	a1c0 <malloc+0xf00>
    a1d8:	e1a03002 	mov	r3, r2
    a1dc:	e5b31010 	ldr	r1, [r3, #16]!
    a1e0:	e3510000 	cmp	r1, #0
    a1e4:	1afffff5 	bne	a1c0 <malloc+0xf00>
    a1e8:	e155000c 	cmp	r5, ip
    a1ec:	8afffe0e 	bhi	9a2c <malloc+0x76c>
    a1f0:	e58c1000 	str	r1, [ip]
    a1f4:	eafffda3 	b	9888 <malloc+0x5c8>
    insert_chunk(m, q, psize);
    a1f8:	e1a03421 	lsr	r3, r1, #8
    a1fc:	e3530801 	cmp	r3, #65536	; 0x10000
    a200:	2a000070 	bcs	a3c8 <malloc+0x1108>
    a204:	e2430c01 	sub	r0, r3, #256	; 0x100
    a208:	e3a02001 	mov	r2, #1
    a20c:	e1a00820 	lsr	r0, r0, #16
    a210:	e2000008 	and	r0, r0, #8
    a214:	e1a03013 	lsl	r3, r3, r0
    a218:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    a21c:	e1a0c82c 	lsr	ip, ip, #16
    a220:	e20cc004 	and	ip, ip, #4
    a224:	e1a03c13 	lsl	r3, r3, ip
    a228:	e180000c 	orr	r0, r0, ip
    a22c:	e243c901 	sub	ip, r3, #16384	; 0x4000
    a230:	e1a0c82c 	lsr	ip, ip, #16
    a234:	e20cc002 	and	ip, ip, #2
    a238:	e1a03c13 	lsl	r3, r3, ip
    a23c:	e080000c 	add	r0, r0, ip
    a240:	e06007a3 	rsb	r0, r0, r3, lsr #15
    a244:	e2803015 	add	r3, r0, #21
    a248:	e280000e 	add	r0, r0, #14
    a24c:	e1a03331 	lsr	r3, r1, r3
    a250:	e0033002 	and	r3, r3, r2
    a254:	e0833210 	add	r3, r3, r0, lsl r2
    a258:	e283704c 	add	r7, r3, #76	; 0x4c
    a25c:	e1a02312 	lsl	r2, r2, r3
    a260:	e1a05107 	lsl	r5, r7, #2
    a264:	e596c004 	ldr	ip, [r6, #4]
    a268:	e3a00000 	mov	r0, #0
    a26c:	e58e301c 	str	r3, [lr, #28]
    a270:	e58e0014 	str	r0, [lr, #20]
    a274:	e112000c 	tst	r2, ip
    a278:	e58e0010 	str	r0, [lr, #16]
    a27c:	0a00005b 	beq	a3f0 <malloc+0x1130>
    a280:	e353001f 	cmp	r3, #31
    a284:	e7960107 	ldr	r0, [r6, r7, lsl #2]
    a288:	11a020a3 	lsrne	r2, r3, #1
    a28c:	01a02001 	moveq	r2, r1
    a290:	12622019 	rsbne	r2, r2, #25
    a294:	11a02211 	lslne	r2, r1, r2
    a298:	ea000006 	b	a2b8 <malloc+0xff8>
    a29c:	e1a03fa2 	lsr	r3, r2, #31
    a2a0:	e1a02082 	lsl	r2, r2, #1
    a2a4:	e2833004 	add	r3, r3, #4
    a2a8:	e790c103 	ldr	ip, [r0, r3, lsl #2]
    a2ac:	e35c0000 	cmp	ip, #0
    a2b0:	0a0000a1 	beq	a53c <malloc+0x127c>
    a2b4:	e1a0000c 	mov	r0, ip
    a2b8:	e5903004 	ldr	r3, [r0, #4]
    a2bc:	e3c33007 	bic	r3, r3, #7
    a2c0:	e1510003 	cmp	r1, r3
    a2c4:	1afffff4 	bne	a29c <malloc+0xfdc>
    a2c8:	e5903008 	ldr	r3, [r0, #8]
    a2cc:	e5962010 	ldr	r2, [r6, #16]
    a2d0:	e1530002 	cmp	r3, r2
    a2d4:	21500002 	cmpcs	r0, r2
    a2d8:	3afffdd3 	bcc	9a2c <malloc+0x76c>
    a2dc:	e3a02000 	mov	r2, #0
    a2e0:	e583e00c 	str	lr, [r3, #12]
    a2e4:	e580e008 	str	lr, [r0, #8]
    a2e8:	e58e3008 	str	r3, [lr, #8]
    a2ec:	e58e000c 	str	r0, [lr, #12]
    a2f0:	e58e2018 	str	r2, [lr, #24]
    a2f4:	e596300c 	ldr	r3, [r6, #12]
    a2f8:	eafffeb1 	b	9dc4 <malloc+0xb04>
            replace_dv(gm, r, rsize);
    a2fc:	e593e008 	ldr	lr, [r3, #8]
    a300:	e5961010 	ldr	r1, [r6, #16]
    a304:	e15e0001 	cmp	lr, r1
    a308:	2afffc96 	bcs	9568 <malloc+0x2a8>
    a30c:	eafffdc6 	b	9a2c <malloc+0x76c>
    a310:	e3811003 	orr	r1, r1, #3
    a314:	eafffc24 	b	93ac <malloc+0xec>
    a318:	e596300c 	ldr	r3, [r6, #12]
    a31c:	eafffea8 	b	9dc4 <malloc+0xb04>
          insert_chunk(m, r, rsize);
    a320:	e1a03429 	lsr	r3, r9, #8
    a324:	e3530801 	cmp	r3, #65536	; 0x10000
    a328:	2a00007a 	bcs	a518 <malloc+0x1258>
    a32c:	e2431c01 	sub	r1, r3, #256	; 0x100
    a330:	e3a02001 	mov	r2, #1
    a334:	e1a01821 	lsr	r1, r1, #16
    a338:	e2011008 	and	r1, r1, #8
    a33c:	e1a03113 	lsl	r3, r3, r1
    a340:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    a344:	e1a0c82c 	lsr	ip, ip, #16
    a348:	e20cc004 	and	ip, ip, #4
    a34c:	e1a03c13 	lsl	r3, r3, ip
    a350:	e181100c 	orr	r1, r1, ip
    a354:	e243c901 	sub	ip, r3, #16384	; 0x4000
    a358:	e1a0c82c 	lsr	ip, ip, #16
    a35c:	e20cc002 	and	ip, ip, #2
    a360:	e1a03c13 	lsl	r3, r3, ip
    a364:	e081100c 	add	r1, r1, ip
    a368:	e06117a3 	rsb	r1, r1, r3, lsr #15
    a36c:	e2813015 	add	r3, r1, #21
    a370:	e281100e 	add	r1, r1, #14
    a374:	e1a03339 	lsr	r3, r9, r3
    a378:	e0033002 	and	r3, r3, r2
    a37c:	e0833211 	add	r3, r3, r1, lsl r2
    a380:	e283804c 	add	r8, r3, #76	; 0x4c
    a384:	e1a02312 	lsl	r2, r2, r3
    a388:	e1a0e108 	lsl	lr, r8, #2
    a38c:	e5961004 	ldr	r1, [r6, #4]
    a390:	e3a0c000 	mov	ip, #0
    a394:	e587301c 	str	r3, [r7, #28]
    a398:	e587c014 	str	ip, [r7, #20]
    a39c:	e1110002 	tst	r1, r2
    a3a0:	e587c010 	str	ip, [r7, #16]
    a3a4:	1a00003e 	bne	a4a4 <malloc+0x11e4>
    a3a8:	e1811002 	orr	r1, r1, r2
    a3ac:	e086e00e 	add	lr, r6, lr
    a3b0:	e7867108 	str	r7, [r6, r8, lsl #2]
    a3b4:	e5861004 	str	r1, [r6, #4]
    a3b8:	e587e018 	str	lr, [r7, #24]
    a3bc:	e587700c 	str	r7, [r7, #12]
    a3c0:	e5877008 	str	r7, [r7, #8]
    a3c4:	eafffd58 	b	992c <malloc+0x66c>
    insert_chunk(m, q, psize);
    a3c8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    a3cc:	e3a05f6b 	mov	r5, #428	; 0x1ac
    a3d0:	e3a0301f 	mov	r3, #31
    a3d4:	e3a0706b 	mov	r7, #107	; 0x6b
    a3d8:	eaffffa1 	b	a264 <malloc+0xfa4>
    a3dc:	e5931008 	ldr	r1, [r3, #8]
    a3e0:	e5962010 	ldr	r2, [r6, #16]
    a3e4:	e1510002 	cmp	r1, r2
    a3e8:	2afffec8 	bcs	9f10 <malloc+0xc50>
    a3ec:	eafffd8e 	b	9a2c <malloc+0x76c>
    a3f0:	e182200c 	orr	r2, r2, ip
    a3f4:	e0865005 	add	r5, r6, r5
    a3f8:	e786e107 	str	lr, [r6, r7, lsl #2]
    a3fc:	e596300c 	ldr	r3, [r6, #12]
    a400:	e5862004 	str	r2, [r6, #4]
    a404:	e58e5018 	str	r5, [lr, #24]
    a408:	e58ee00c 	str	lr, [lr, #12]
    a40c:	e58ee008 	str	lr, [lr, #8]
    a410:	eafffe6b 	b	9dc4 <malloc+0xb04>
        unlink_large_chunk(m, v);
    a414:	e5901010 	ldr	r1, [r0, #16]
    a418:	e3510000 	cmp	r1, #0
    a41c:	0a0000e4 	beq	a7b4 <malloc+0x14f4>
    a420:	e2803010 	add	r3, r0, #16
    a424:	eaffff65 	b	a1c0 <malloc+0xf00>
        set_inuse_and_pinuse(m, v, (rsize + nb));
    a428:	e0802008 	add	r2, r0, r8
    a42c:	e3888003 	orr	r8, r8, #3
    a430:	e5923004 	ldr	r3, [r2, #4]
    a434:	e5808004 	str	r8, [r0, #4]
    a438:	e3833001 	orr	r3, r3, #1
    a43c:	e5823004 	str	r3, [r2, #4]
    a440:	eafffd39 	b	992c <malloc+0x66c>
      unlink_large_chunk(m, v);
    a444:	e5903014 	ldr	r3, [r0, #20]
    a448:	e3530000 	cmp	r3, #0
    a44c:	12802014 	addne	r2, r0, #20
    a450:	0a0000e9 	beq	a7fc <malloc+0x153c>
  rsize = chunksize(t) - nb;
    a454:	e1a07003 	mov	r7, r3
    a458:	e1a05002 	mov	r5, r2
      unlink_large_chunk(m, v);
    a45c:	e1a03007 	mov	r3, r7
    a460:	e5b32014 	ldr	r2, [r3, #20]!
    a464:	e3520000 	cmp	r2, #0
    a468:	0a000005 	beq	a484 <malloc+0x11c4>
    a46c:	e1a07002 	mov	r7, r2
    a470:	e1a05003 	mov	r5, r3
    a474:	e1a03007 	mov	r3, r7
    a478:	e5b32014 	ldr	r2, [r3, #20]!
    a47c:	e3520000 	cmp	r2, #0
    a480:	1afffff9 	bne	a46c <malloc+0x11ac>
    a484:	e1a02007 	mov	r2, r7
    a488:	e5b23010 	ldr	r3, [r2, #16]!
    a48c:	e3530000 	cmp	r3, #0
    a490:	1affffef 	bne	a454 <malloc+0x1194>
    a494:	e15a0005 	cmp	sl, r5
    a498:	8afffd63 	bhi	9a2c <malloc+0x76c>
    a49c:	e5853000 	str	r3, [r5]
    a4a0:	eafffda9 	b	9b4c <malloc+0x88c>
          insert_chunk(m, r, rsize);
    a4a4:	e353001f 	cmp	r3, #31
    a4a8:	e7961108 	ldr	r1, [r6, r8, lsl #2]
    a4ac:	11a020a3 	lsrne	r2, r3, #1
    a4b0:	01a02009 	moveq	r2, r9
    a4b4:	12622019 	rsbne	r2, r2, #25
    a4b8:	11a02219 	lslne	r2, r9, r2
    a4bc:	ea000006 	b	a4dc <malloc+0x121c>
    a4c0:	e1a03fa2 	lsr	r3, r2, #31
    a4c4:	e1a02082 	lsl	r2, r2, #1
    a4c8:	e2833004 	add	r3, r3, #4
    a4cc:	e791c103 	ldr	ip, [r1, r3, lsl #2]
    a4d0:	e35c0000 	cmp	ip, #0
    a4d4:	0a00009c 	beq	a74c <malloc+0x148c>
    a4d8:	e1a0100c 	mov	r1, ip
    a4dc:	e5913004 	ldr	r3, [r1, #4]
    a4e0:	e3c33007 	bic	r3, r3, #7
    a4e4:	e1530009 	cmp	r3, r9
    a4e8:	1afffff4 	bne	a4c0 <malloc+0x1200>
    a4ec:	e5913008 	ldr	r3, [r1, #8]
    a4f0:	e1550001 	cmp	r5, r1
    a4f4:	91550003 	cmpls	r5, r3
    a4f8:	8afffd4b 	bhi	9a2c <malloc+0x76c>
    a4fc:	e3a02000 	mov	r2, #0
    a500:	e583700c 	str	r7, [r3, #12]
    a504:	e5817008 	str	r7, [r1, #8]
    a508:	e5873008 	str	r3, [r7, #8]
    a50c:	e587100c 	str	r1, [r7, #12]
    a510:	e5872018 	str	r2, [r7, #24]
    a514:	eafffd04 	b	992c <malloc+0x66c>
    a518:	e3a0ef6b 	mov	lr, #428	; 0x1ac
    a51c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    a520:	e3a0301f 	mov	r3, #31
    a524:	e3a0806b 	mov	r8, #107	; 0x6b
    a528:	eaffff97 	b	a38c <malloc+0x10cc>
    a52c:	e5932008 	ldr	r2, [r3, #8]
    a530:	e1550002 	cmp	r5, r2
    a534:	9affff19 	bls	a1a0 <malloc+0xee0>
    a538:	eafffd3b 	b	9a2c <malloc+0x76c>
    insert_chunk(m, q, psize);
    a53c:	e5961010 	ldr	r1, [r6, #16]
    a540:	e0802103 	add	r2, r0, r3, lsl #2
    a544:	e1510002 	cmp	r1, r2
    a548:	8afffd37 	bhi	9a2c <malloc+0x76c>
    a54c:	e780e103 	str	lr, [r0, r3, lsl #2]
    a550:	e596300c 	ldr	r3, [r6, #12]
    a554:	e58e0018 	str	r0, [lr, #24]
    a558:	e58ee00c 	str	lr, [lr, #12]
    a55c:	e58ee008 	str	lr, [lr, #8]
    a560:	eafffe17 	b	9dc4 <malloc+0xb04>
    size_t tsize = m->topsize += qsize;
    a564:	e596300c 	ldr	r3, [r6, #12]
    m->top = q;
    a568:	e5862018 	str	r2, [r6, #24]
    size_t tsize = m->topsize += qsize;
    a56c:	e0844003 	add	r4, r4, r3
    q->head = tsize | PINUSE_BIT;
    a570:	e3843001 	orr	r3, r4, #1
    size_t tsize = m->topsize += qsize;
    a574:	e586400c 	str	r4, [r6, #12]
    q->head = tsize | PINUSE_BIT;
    a578:	e5823004 	str	r3, [r2, #4]
    a57c:	eafffdf2 	b	9d4c <malloc+0xa8c>
    insert_chunk(m, q, qsize);
    a580:	e1a01424 	lsr	r1, r4, #8
    a584:	e3510801 	cmp	r1, #65536	; 0x10000
    a588:	2a000077 	bcs	a76c <malloc+0x14ac>
    a58c:	e2413c01 	sub	r3, r1, #256	; 0x100
    a590:	e3a00001 	mov	r0, #1
    a594:	e1a03823 	lsr	r3, r3, #16
    a598:	e2033008 	and	r3, r3, #8
    a59c:	e1a01311 	lsl	r1, r1, r3
    a5a0:	e241ca01 	sub	ip, r1, #4096	; 0x1000
    a5a4:	e1a0c82c 	lsr	ip, ip, #16
    a5a8:	e20cc004 	and	ip, ip, #4
    a5ac:	e1a01c11 	lsl	r1, r1, ip
    a5b0:	e183300c 	orr	r3, r3, ip
    a5b4:	e241c901 	sub	ip, r1, #16384	; 0x4000
    a5b8:	e1a0c82c 	lsr	ip, ip, #16
    a5bc:	e20cc002 	and	ip, ip, #2
    a5c0:	e1a01c11 	lsl	r1, r1, ip
    a5c4:	e083300c 	add	r3, r3, ip
    a5c8:	e06337a1 	rsb	r3, r3, r1, lsr #15
    a5cc:	e2831015 	add	r1, r3, #21
    a5d0:	e283300e 	add	r3, r3, #14
    a5d4:	e1a01134 	lsr	r1, r4, r1
    a5d8:	e0011000 	and	r1, r1, r0
    a5dc:	e0811013 	add	r1, r1, r3, lsl r0
    a5e0:	e281e04c 	add	lr, r1, #76	; 0x4c
    a5e4:	e1a00110 	lsl	r0, r0, r1
    a5e8:	e1a0710e 	lsl	r7, lr, #2
    a5ec:	e596c004 	ldr	ip, [r6, #4]
    a5f0:	e3a03000 	mov	r3, #0
    a5f4:	e582101c 	str	r1, [r2, #28]
    a5f8:	e5823014 	str	r3, [r2, #20]
    a5fc:	e110000c 	tst	r0, ip
    a600:	e5823010 	str	r3, [r2, #16]
    a604:	0a000062 	beq	a794 <malloc+0x14d4>
    a608:	e351001f 	cmp	r1, #31
    a60c:	e796010e 	ldr	r0, [r6, lr, lsl #2]
    a610:	11a030a1 	lsrne	r3, r1, #1
    a614:	12633019 	rsbne	r3, r3, #25
    a618:	e1a01314 	lsl	r1, r4, r3
    a61c:	ea000006 	b	a63c <malloc+0x137c>
    a620:	e1a03fa1 	lsr	r3, r1, #31
    a624:	e1a01081 	lsl	r1, r1, #1
    a628:	e2833004 	add	r3, r3, #4
    a62c:	e790c103 	ldr	ip, [r0, r3, lsl #2]
    a630:	e35c0000 	cmp	ip, #0
    a634:	0a0000a8 	beq	a8dc <malloc+0x161c>
    a638:	e1a0000c 	mov	r0, ip
    a63c:	e5903004 	ldr	r3, [r0, #4]
    a640:	e3c33007 	bic	r3, r3, #7
    a644:	e1540003 	cmp	r4, r3
    a648:	1afffff4 	bne	a620 <malloc+0x1360>
    a64c:	e5961010 	ldr	r1, [r6, #16]
    a650:	e5903008 	ldr	r3, [r0, #8]
    a654:	e1530001 	cmp	r3, r1
    a658:	21500001 	cmpcs	r0, r1
    a65c:	3afffcf2 	bcc	9a2c <malloc+0x76c>
    a660:	e3a01000 	mov	r1, #0
    a664:	e583200c 	str	r2, [r3, #12]
    a668:	e5802008 	str	r2, [r0, #8]
    a66c:	e5823008 	str	r3, [r2, #8]
    a670:	e582000c 	str	r0, [r2, #12]
    a674:	e5821018 	str	r1, [r2, #24]
    a678:	eafffdb3 	b	9d4c <malloc+0xa8c>
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    a67c:	e1a00007 	mov	r0, r7
    a680:	ebfffa7c 	bl	9078 <sbrk>
    a684:	e1590000 	cmp	r9, r0
    a688:	e1a05000 	mov	r5, r0
    a68c:	1afffe58 	bne	9ff4 <malloc+0xd34>
    a690:	eafffbfd 	b	968c <malloc+0x3cc>
    a694:	0000f320 	.word	0x0000f320
    a698:	0000f188 	.word	0x0000f188
    size_t dsize = m->dvsize += qsize;
    a69c:	e5963008 	ldr	r3, [r6, #8]
    m->dv = q;
    a6a0:	e5862014 	str	r2, [r6, #20]
    size_t dsize = m->dvsize += qsize;
    a6a4:	e0844003 	add	r4, r4, r3
    set_size_and_pinuse_of_free_chunk(q, dsize);
    a6a8:	e3843001 	orr	r3, r4, #1
    size_t dsize = m->dvsize += qsize;
    a6ac:	e5864008 	str	r4, [r6, #8]
    set_size_and_pinuse_of_free_chunk(q, dsize);
    a6b0:	e5823004 	str	r3, [r2, #4]
    a6b4:	e7824004 	str	r4, [r2, r4]
    a6b8:	eafffda3 	b	9d4c <malloc+0xa8c>
      size_t nsize = chunksize(oldfirst);
    a6bc:	e3c33007 	bic	r3, r3, #7
    a6c0:	e591000c 	ldr	r0, [r1, #12]
      unlink_chunk(m, oldfirst, nsize);
    a6c4:	e1a0e1a3 	lsr	lr, r3, #3
    a6c8:	e35e001f 	cmp	lr, #31
    a6cc:	8a00004f 	bhi	a810 <malloc+0x1550>
    a6d0:	e1500001 	cmp	r0, r1
    a6d4:	e591c008 	ldr	ip, [r1, #8]
    a6d8:	0afffcd3 	beq	9a2c <malloc+0x76c>
    a6dc:	e15c0001 	cmp	ip, r1
    a6e0:	0afffcd1 	beq	9a2c <malloc+0x76c>
    a6e4:	e086718e 	add	r7, r6, lr, lsl #3
    a6e8:	e2877028 	add	r7, r7, #40	; 0x28
    a6ec:	e15c0007 	cmp	ip, r7
    a6f0:	1afffcc7 	bne	9a14 <malloc+0x754>
    a6f4:	e15c0000 	cmp	ip, r0
    a6f8:	0a0000a2 	beq	a988 <malloc+0x16c8>
    a6fc:	e1570000 	cmp	r7, r0
    a700:	1a0000b7 	bne	a9e4 <malloc+0x1724>
    a704:	e58c000c 	str	r0, [ip, #12]
    a708:	e580c008 	str	ip, [r0, #8]
      qsize += nsize;
    a70c:	e0844003 	add	r4, r4, r3
      oldfirst = chunk_plus_offset(oldfirst, nsize);
    a710:	e0811003 	add	r1, r1, r3
    set_free_with_pinuse(q, qsize, oldfirst);
    a714:	e5913004 	ldr	r3, [r1, #4]
    insert_chunk(m, q, qsize);
    a718:	e1a001a4 	lsr	r0, r4, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    a71c:	e384c001 	orr	ip, r4, #1
    insert_chunk(m, q, qsize);
    a720:	e350001f 	cmp	r0, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    a724:	e3c33001 	bic	r3, r3, #1
    a728:	e5813004 	str	r3, [r1, #4]
    a72c:	e582c004 	str	ip, [r2, #4]
    a730:	e7824004 	str	r4, [r2, r4]
    insert_chunk(m, q, qsize);
    a734:	8affff91 	bhi	a580 <malloc+0x12c0>
    a738:	e0863180 	add	r3, r6, r0, lsl #3
    a73c:	e354000f 	cmp	r4, #15
    a740:	e2833028 	add	r3, r3, #40	; 0x28
    a744:	8afffd74 	bhi	9d1c <malloc+0xa5c>
    a748:	eafffcb7 	b	9a2c <malloc+0x76c>
          insert_chunk(m, r, rsize);
    a74c:	e0812103 	add	r2, r1, r3, lsl #2
    a750:	e1550002 	cmp	r5, r2
    a754:	8afffcb4 	bhi	9a2c <malloc+0x76c>
    a758:	e7817103 	str	r7, [r1, r3, lsl #2]
    a75c:	e5871018 	str	r1, [r7, #24]
    a760:	e587700c 	str	r7, [r7, #12]
    a764:	e5877008 	str	r7, [r7, #8]
    a768:	eafffc6f 	b	992c <malloc+0x66c>
    insert_chunk(m, q, qsize);
    a76c:	e3a07f6b 	mov	r7, #428	; 0x1ac
    a770:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
    a774:	e3a0101f 	mov	r1, #31
    a778:	e3a0e06b 	mov	lr, #107	; 0x6b
    a77c:	eaffff9a 	b	a5ec <malloc+0x132c>
    a780:	e5960010 	ldr	r0, [r6, #16]
    a784:	e5931008 	ldr	r1, [r3, #8]
    a788:	e1510000 	cmp	r1, r0
    a78c:	2afffd6a 	bcs	9d3c <malloc+0xa7c>
    a790:	eafffca5 	b	9a2c <malloc+0x76c>
    a794:	e180000c 	orr	r0, r0, ip
    a798:	e0867007 	add	r7, r6, r7
    a79c:	e786210e 	str	r2, [r6, lr, lsl #2]
    a7a0:	e5860004 	str	r0, [r6, #4]
    a7a4:	e5827018 	str	r7, [r2, #24]
    a7a8:	e582200c 	str	r2, [r2, #12]
    a7ac:	e5822008 	str	r2, [r2, #8]
    a7b0:	eafffd65 	b	9d4c <malloc+0xa8c>
        unlink_large_chunk(m, v);
    a7b4:	e3580000 	cmp	r8, #0
    a7b8:	0afffc53 	beq	990c <malloc+0x64c>
    a7bc:	e590101c 	ldr	r1, [r0, #28]
    a7c0:	e281304c 	add	r3, r1, #76	; 0x4c
    a7c4:	e7962103 	ldr	r2, [r6, r3, lsl #2]
    a7c8:	e1520000 	cmp	r2, r0
    a7cc:	13a02000 	movne	r2, #0
    a7d0:	1afffc34 	bne	98a8 <malloc+0x5e8>
    a7d4:	e3a08001 	mov	r8, #1
    a7d8:	e3a02000 	mov	r2, #0
    a7dc:	e1ccc118 	bic	ip, ip, r8, lsl r1
    a7e0:	e7862103 	str	r2, [r6, r3, lsl #2]
    a7e4:	e586c004 	str	ip, [r6, #4]
    a7e8:	eafffc47 	b	990c <malloc+0x64c>
        replace_dv(m, r, rsize);
    a7ec:	e5932008 	ldr	r2, [r3, #8]
    a7f0:	e15a0002 	cmp	sl, r2
    a7f4:	9afffd0b 	bls	9c28 <malloc+0x968>
    a7f8:	eafffc8b 	b	9a2c <malloc+0x76c>
      unlink_large_chunk(m, v);
    a7fc:	e5903010 	ldr	r3, [r0, #16]
    a800:	e3530000 	cmp	r3, #0
    a804:	0a00003d 	beq	a900 <malloc+0x1640>
    a808:	e2802010 	add	r2, r0, #16
    a80c:	eaffff10 	b	a454 <malloc+0x1194>
      unlink_chunk(m, oldfirst, nsize);
    a810:	e1500001 	cmp	r0, r1
    a814:	e5918018 	ldr	r8, [r1, #24]
    a818:	0a000046 	beq	a938 <malloc+0x1678>
    a81c:	e591c008 	ldr	ip, [r1, #8]
    a820:	e596e010 	ldr	lr, [r6, #16]
    a824:	e15c000e 	cmp	ip, lr
    a828:	3afffc7f 	bcc	9a2c <malloc+0x76c>
    a82c:	e59ce00c 	ldr	lr, [ip, #12]
    a830:	e15e0001 	cmp	lr, r1
    a834:	1afffc7c 	bne	9a2c <malloc+0x76c>
    a838:	e5907008 	ldr	r7, [r0, #8]
    a83c:	e15e0007 	cmp	lr, r7
    a840:	1afffc79 	bne	9a2c <malloc+0x76c>
    a844:	e58c000c 	str	r0, [ip, #12]
    a848:	e580c008 	str	ip, [r0, #8]
    a84c:	e3580000 	cmp	r8, #0
    a850:	0affffad 	beq	a70c <malloc+0x144c>
    a854:	e591c01c 	ldr	ip, [r1, #28]
    a858:	e28cc04c 	add	ip, ip, #76	; 0x4c
    a85c:	e796e10c 	ldr	lr, [r6, ip, lsl #2]
    a860:	e15e0001 	cmp	lr, r1
    a864:	0786010c 	streq	r0, [r6, ip, lsl #2]
    a868:	0a000008 	beq	a890 <malloc+0x15d0>
    a86c:	e596c010 	ldr	ip, [r6, #16]
    a870:	e158000c 	cmp	r8, ip
    a874:	3afffc6c 	bcc	9a2c <malloc+0x76c>
    a878:	e598c010 	ldr	ip, [r8, #16]
    a87c:	e15c0001 	cmp	ip, r1
    a880:	05880010 	streq	r0, [r8, #16]
    a884:	15880014 	strne	r0, [r8, #20]
    a888:	e3500000 	cmp	r0, #0
    a88c:	0affff9e 	beq	a70c <malloc+0x144c>
    a890:	e596e010 	ldr	lr, [r6, #16]
    a894:	e150000e 	cmp	r0, lr
    a898:	3afffc63 	bcc	9a2c <malloc+0x76c>
    a89c:	e591c010 	ldr	ip, [r1, #16]
    a8a0:	e5808018 	str	r8, [r0, #24]
    a8a4:	e35c0000 	cmp	ip, #0
    a8a8:	0a000003 	beq	a8bc <malloc+0x15fc>
    a8ac:	e15e000c 	cmp	lr, ip
    a8b0:	8afffc5d 	bhi	9a2c <malloc+0x76c>
    a8b4:	e580c010 	str	ip, [r0, #16]
    a8b8:	e58c0018 	str	r0, [ip, #24]
    a8bc:	e591c014 	ldr	ip, [r1, #20]
    a8c0:	e35c0000 	cmp	ip, #0
    a8c4:	0affff90 	beq	a70c <malloc+0x144c>
    a8c8:	e15e000c 	cmp	lr, ip
    a8cc:	8afffc56 	bhi	9a2c <malloc+0x76c>
    a8d0:	e580c014 	str	ip, [r0, #20]
    a8d4:	e58c0018 	str	r0, [ip, #24]
    a8d8:	eaffff8b 	b	a70c <malloc+0x144c>
    insert_chunk(m, q, qsize);
    a8dc:	e596c010 	ldr	ip, [r6, #16]
    a8e0:	e0801103 	add	r1, r0, r3, lsl #2
    a8e4:	e15c0001 	cmp	ip, r1
    a8e8:	8afffc4f 	bhi	9a2c <malloc+0x76c>
    a8ec:	e7802103 	str	r2, [r0, r3, lsl #2]
    a8f0:	e5820018 	str	r0, [r2, #24]
    a8f4:	e582200c 	str	r2, [r2, #12]
    a8f8:	e5822008 	str	r2, [r2, #8]
    a8fc:	eafffd12 	b	9d4c <malloc+0xa8c>
      unlink_large_chunk(m, v);
    a900:	e35b0000 	cmp	fp, #0
    a904:	0afffcb1 	beq	9bd0 <malloc+0x910>
    a908:	e590201c 	ldr	r2, [r0, #28]
    a90c:	e282304c 	add	r3, r2, #76	; 0x4c
    a910:	e7967103 	ldr	r7, [r6, r3, lsl #2]
    a914:	e1500007 	cmp	r0, r7
    a918:	13a07000 	movne	r7, #0
    a91c:	1afffc92 	bne	9b6c <malloc+0x8ac>
    a920:	e3a0b001 	mov	fp, #1
    a924:	e3a07000 	mov	r7, #0
    a928:	e1c5521b 	bic	r5, r5, fp, lsl r2
    a92c:	e7867103 	str	r7, [r6, r3, lsl #2]
    a930:	e5865004 	str	r5, [r6, #4]
    a934:	eafffca5 	b	9bd0 <malloc+0x910>
      unlink_chunk(m, oldfirst, nsize);
    a938:	e5910014 	ldr	r0, [r1, #20]
    a93c:	e281c014 	add	ip, r1, #20
    a940:	e3500000 	cmp	r0, #0
    a944:	0a000014 	beq	a99c <malloc+0x16dc>
  size_t offset = align_offset(chunk2mem(p));
    a948:	e1a0e000 	mov	lr, r0
      unlink_chunk(m, oldfirst, nsize);
    a94c:	e1a0700c 	mov	r7, ip
    a950:	e1a0c00e 	mov	ip, lr
    a954:	e1a0000e 	mov	r0, lr
    a958:	e5bce014 	ldr	lr, [ip, #20]!
    a95c:	e35e0000 	cmp	lr, #0
    a960:	1afffff9 	bne	a94c <malloc+0x168c>
    a964:	e1a0c000 	mov	ip, r0
    a968:	e5bce010 	ldr	lr, [ip, #16]!
    a96c:	e35e0000 	cmp	lr, #0
    a970:	1afffff5 	bne	a94c <malloc+0x168c>
    a974:	e596c010 	ldr	ip, [r6, #16]
    a978:	e15c0007 	cmp	ip, r7
    a97c:	8afffc2a 	bhi	9a2c <malloc+0x76c>
    a980:	e587e000 	str	lr, [r7]
    a984:	eaffffb0 	b	a84c <malloc+0x158c>
    a988:	e5960000 	ldr	r0, [r6]
    a98c:	e3a0c001 	mov	ip, #1
    a990:	e1c0ee1c 	bic	lr, r0, ip, lsl lr
    a994:	e586e000 	str	lr, [r6]
    a998:	eaffff5b 	b	a70c <malloc+0x144c>
    a99c:	e5910010 	ldr	r0, [r1, #16]
    a9a0:	e281c010 	add	ip, r1, #16
    a9a4:	e3500000 	cmp	r0, #0
    a9a8:	1affffe6 	bne	a948 <malloc+0x1688>
    a9ac:	e3580000 	cmp	r8, #0
    a9b0:	0affff55 	beq	a70c <malloc+0x144c>
    a9b4:	e591c01c 	ldr	ip, [r1, #28]
    a9b8:	e28ce04c 	add	lr, ip, #76	; 0x4c
    a9bc:	e796710e 	ldr	r7, [r6, lr, lsl #2]
    a9c0:	e1570001 	cmp	r7, r1
    a9c4:	1affffa8 	bne	a86c <malloc+0x15ac>
    a9c8:	e5960004 	ldr	r0, [r6, #4]
    a9cc:	e3a07001 	mov	r7, #1
    a9d0:	e3a08000 	mov	r8, #0
    a9d4:	e786810e 	str	r8, [r6, lr, lsl #2]
    a9d8:	e1c00c17 	bic	r0, r0, r7, lsl ip
    a9dc:	e5860004 	str	r0, [r6, #4]
    a9e0:	eaffff49 	b	a70c <malloc+0x144c>
    a9e4:	e596e010 	ldr	lr, [r6, #16]
    a9e8:	e15e0000 	cmp	lr, r0
    a9ec:	8afffc0e 	bhi	9a2c <malloc+0x76c>
    a9f0:	e590e008 	ldr	lr, [r0, #8]
    a9f4:	e15e0001 	cmp	lr, r1
    a9f8:	0affff41 	beq	a704 <malloc+0x1444>
    a9fc:	eafffc0a 	b	9a2c <malloc+0x76c>
  ensure_initialization();
    aa00:	e30f8338 	movw	r8, #62264	; 0xf338
    aa04:	e3408000 	movt	r8, #0
    aa08:	e5983000 	ldr	r3, [r8]
    aa0c:	e3530000 	cmp	r3, #0
    aa10:	1afffaf1 	bne	95dc <malloc+0x31c>
    aa14:	eafffaef 	b	95d8 <malloc+0x318>

0000aa18 <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
    aa18:	e3500000 	cmp	r0, #0
    aa1c:	012fff1e 	bxeq	lr
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    aa20:	e30f1160 	movw	r1, #61792	; 0xf160
void dlfree(void* mem) {
    aa24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    aa28:	e3401000 	movt	r1, #0
    mchunkptr p  = mem2chunk(mem);
    aa2c:	e2402008 	sub	r2, r0, #8
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    aa30:	e591e010 	ldr	lr, [r1, #16]
    aa34:	e15e0002 	cmp	lr, r2
    aa38:	8a00004a 	bhi	ab68 <free+0x150>
    aa3c:	e5103004 	ldr	r3, [r0, #-4]
    aa40:	e2034003 	and	r4, r3, #3
    aa44:	e3540001 	cmp	r4, #1
    aa48:	0a000046 	beq	ab68 <free+0x150>
        size_t psize = chunksize(p);
        mchunkptr next = chunk_plus_offset(p, psize);
        if (!pinuse(p)) {
    aa4c:	e3130001 	tst	r3, #1
        size_t psize = chunksize(p);
    aa50:	e3c33007 	bic	r3, r3, #7
        mchunkptr next = chunk_plus_offset(p, psize);
    aa54:	e082c003 	add	ip, r2, r3
        if (!pinuse(p)) {
    aa58:	0a00001f 	beq	aadc <free+0xc4>
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
    aa5c:	e152000c 	cmp	r2, ip
    aa60:	2a000040 	bcs	ab68 <free+0x150>
    aa64:	e59c0004 	ldr	r0, [ip, #4]
    aa68:	e3100001 	tst	r0, #1
    aa6c:	0a00003d 	beq	ab68 <free+0x150>
          if (!cinuse(next)) {  /* consolidate forward */
    aa70:	e2104002 	ands	r4, r0, #2
    aa74:	0a00003d 	beq	ab70 <free+0x158>
                goto postaction;
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
    aa78:	e3c00001 	bic	r0, r0, #1
    aa7c:	e383e001 	orr	lr, r3, #1
    aa80:	e58c0004 	str	r0, [ip, #4]
    aa84:	e582e004 	str	lr, [r2, #4]
    aa88:	e7823003 	str	r3, [r2, r3]

          if (is_small(psize)) {
    aa8c:	e1a001a3 	lsr	r0, r3, #3
    aa90:	e350001f 	cmp	r0, #31
    aa94:	8a00007e 	bhi	ac94 <free+0x27c>
            insert_small_chunk(fm, p, psize);
    aa98:	e353000f 	cmp	r3, #15
    aa9c:	e0813180 	add	r3, r1, r0, lsl #3
    aaa0:	e2833028 	add	r3, r3, #40	; 0x28
    aaa4:	9a000078 	bls	ac8c <free+0x274>
    aaa8:	e3a0c001 	mov	ip, #1
    aaac:	e591e000 	ldr	lr, [r1]
    aab0:	e1a0001c 	lsl	r0, ip, r0
    aab4:	e11e0000 	tst	lr, r0
    aab8:	1a00006f 	bne	ac7c <free+0x264>
    aabc:	e1a0c003 	mov	ip, r3
    aac0:	e18e0000 	orr	r0, lr, r0
    aac4:	e5810000 	str	r0, [r1]
    aac8:	e5832008 	str	r2, [r3, #8]
    aacc:	e58c200c 	str	r2, [ip, #12]
    aad0:	e582c008 	str	ip, [r2, #8]
    aad4:	e582300c 	str	r3, [r2, #12]
    aad8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
          if (is_mmapped(p)) {
    aadc:	e3540000 	cmp	r4, #0
    aae0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
          size_t prevsize = p->prev_foot;
    aae4:	e5104008 	ldr	r4, [r0, #-8]
            mchunkptr prev = chunk_minus_offset(p, prevsize);
    aae8:	e0422004 	sub	r2, r2, r4
            psize += prevsize;
    aaec:	e0833004 	add	r3, r3, r4
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
    aaf0:	e15e0002 	cmp	lr, r2
    aaf4:	8a00001b 	bhi	ab68 <free+0x150>
              if (p != fm->dv) {
    aaf8:	e5910014 	ldr	r0, [r1, #20]
    aafc:	e1500002 	cmp	r0, r2
    ab00:	0a00011b 	beq	af74 <free+0x55c>
                unlink_chunk(fm, p, prevsize);
    ab04:	e1a061a4 	lsr	r6, r4, #3
    ab08:	e592000c 	ldr	r0, [r2, #12]
    ab0c:	e356001f 	cmp	r6, #31
    ab10:	8a000079 	bhi	acfc <free+0x2e4>
    ab14:	e1500002 	cmp	r0, r2
    ab18:	e5925008 	ldr	r5, [r2, #8]
    ab1c:	0a00005a 	beq	ac8c <free+0x274>
    ab20:	e1520005 	cmp	r2, r5
    ab24:	0a000058 	beq	ac8c <free+0x274>
    ab28:	e5927004 	ldr	r7, [r2, #4]
    ab2c:	e3c44007 	bic	r4, r4, #7
    ab30:	e3c77007 	bic	r7, r7, #7
    ab34:	e1570004 	cmp	r7, r4
    ab38:	1a000053 	bne	ac8c <free+0x274>
    ab3c:	e0814186 	add	r4, r1, r6, lsl #3
    ab40:	e2844028 	add	r4, r4, #40	; 0x28
    ab44:	e1540005 	cmp	r4, r5
    ab48:	1a0000d6 	bne	aea8 <free+0x490>
    ab4c:	e1500005 	cmp	r0, r5
    ab50:	0a000125 	beq	afec <free+0x5d4>
    ab54:	e1540000 	cmp	r4, r0
    ab58:	1a000155 	bne	b0b4 <free+0x69c>
    ab5c:	e585000c 	str	r0, [r5, #12]
    ab60:	e5805008 	str	r5, [r0, #8]
    ab64:	eaffffbc 	b	aa5c <free+0x44>
          }
          goto postaction;
        }
      }
    erroraction:
      USAGE_ERROR_ACTION(fm, p);
    ab68:	e3e00000 	mvn	r0, #0
    ab6c:	ebfff523 	bl	8000 <exit>
            if (next == fm->top) {
    ab70:	e5916018 	ldr	r6, [r1, #24]
    ab74:	e5915014 	ldr	r5, [r1, #20]
    ab78:	e156000c 	cmp	r6, ip
    ab7c:	0a0000ed 	beq	af38 <free+0x520>
            else if (next == fm->dv) {
    ab80:	e155000c 	cmp	r5, ip
    ab84:	0a000105 	beq	afa0 <free+0x588>
              size_t nsize = chunksize(next);
    ab88:	e3c00007 	bic	r0, r0, #7
    ab8c:	e59c400c 	ldr	r4, [ip, #12]
              unlink_chunk(fm, next, nsize);
    ab90:	e1a061a0 	lsr	r6, r0, #3
              psize += nsize;
    ab94:	e0833000 	add	r3, r3, r0
              unlink_chunk(fm, next, nsize);
    ab98:	e356001f 	cmp	r6, #31
    ab9c:	9a000086 	bls	adbc <free+0x3a4>
    aba0:	e154000c 	cmp	r4, ip
    aba4:	e59c8018 	ldr	r8, [ip, #24]
    aba8:	0a000114 	beq	b000 <free+0x5e8>
    abac:	e59c0008 	ldr	r0, [ip, #8]
    abb0:	e15e0000 	cmp	lr, r0
    abb4:	8a000034 	bhi	ac8c <free+0x274>
    abb8:	e590500c 	ldr	r5, [r0, #12]
    abbc:	e155000c 	cmp	r5, ip
    abc0:	1a000031 	bne	ac8c <free+0x274>
    abc4:	e5945008 	ldr	r5, [r4, #8]
    abc8:	e155000c 	cmp	r5, ip
    abcc:	1a00002e 	bne	ac8c <free+0x274>
    abd0:	e580400c 	str	r4, [r0, #12]
    abd4:	e5840008 	str	r0, [r4, #8]
    abd8:	e3580000 	cmp	r8, #0
    abdc:	0a000100 	beq	afe4 <free+0x5cc>
    abe0:	e59c001c 	ldr	r0, [ip, #28]
    abe4:	e280004c 	add	r0, r0, #76	; 0x4c
    abe8:	e7915100 	ldr	r5, [r1, r0, lsl #2]
    abec:	e155000c 	cmp	r5, ip
    abf0:	07814100 	streq	r4, [r1, r0, lsl #2]
    abf4:	0a000007 	beq	ac18 <free+0x200>
    abf8:	e15e0008 	cmp	lr, r8
    abfc:	8a000022 	bhi	ac8c <free+0x274>
    ac00:	e5980010 	ldr	r0, [r8, #16]
    ac04:	e150000c 	cmp	r0, ip
    ac08:	05884010 	streq	r4, [r8, #16]
    ac0c:	15884014 	strne	r4, [r8, #20]
    ac10:	e3540000 	cmp	r4, #0
    ac14:	0a0000f2 	beq	afe4 <free+0x5cc>
    ac18:	e15e0004 	cmp	lr, r4
    ac1c:	8a00001a 	bhi	ac8c <free+0x274>
    ac20:	e59c0010 	ldr	r0, [ip, #16]
    ac24:	e5848018 	str	r8, [r4, #24]
    ac28:	e3500000 	cmp	r0, #0
    ac2c:	0a000003 	beq	ac40 <free+0x228>
    ac30:	e15e0000 	cmp	lr, r0
    ac34:	8a000014 	bhi	ac8c <free+0x274>
    ac38:	e5840010 	str	r0, [r4, #16]
    ac3c:	e5804018 	str	r4, [r0, #24]
    ac40:	e59c0014 	ldr	r0, [ip, #20]
    ac44:	e3500000 	cmp	r0, #0
    ac48:	0a0000e5 	beq	afe4 <free+0x5cc>
    ac4c:	e15e0000 	cmp	lr, r0
    ac50:	8a00000d 	bhi	ac8c <free+0x274>
    ac54:	e5915014 	ldr	r5, [r1, #20]
    ac58:	e5840014 	str	r0, [r4, #20]
    ac5c:	e5804018 	str	r4, [r0, #24]
              if (p == fm->dv) {
    ac60:	e1520005 	cmp	r2, r5
              set_size_and_pinuse_of_free_chunk(p, psize);
    ac64:	e3830001 	orr	r0, r3, #1
    ac68:	e5820004 	str	r0, [r2, #4]
    ac6c:	e7823003 	str	r3, [r2, r3]
              if (p == fm->dv) {
    ac70:	1affff85 	bne	aa8c <free+0x74>
                fm->dvsize = psize;
    ac74:	e5813008 	str	r3, [r1, #8]
                goto postaction;
    ac78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_small_chunk(fm, p, psize);
    ac7c:	e5911010 	ldr	r1, [r1, #16]
    ac80:	e593c008 	ldr	ip, [r3, #8]
    ac84:	e15c0001 	cmp	ip, r1
    ac88:	2affff8e 	bcs	aac8 <free+0xb0>
                unlink_chunk(fm, p, prevsize);
    ac8c:	e3e00000 	mvn	r0, #0
    ac90:	ebfff4da 	bl	8000 <exit>
            insert_large_chunk(fm, tp, psize);
    ac94:	e1a0c423 	lsr	ip, r3, #8
    ac98:	e35c0801 	cmp	ip, #65536	; 0x10000
    ac9c:	3a000056 	bcc	adfc <free+0x3e4>
    aca0:	e3a0e102 	mov	lr, #-2147483648	; 0x80000000
    aca4:	e3a05f6b 	mov	r5, #428	; 0x1ac
    aca8:	e3a0001f 	mov	r0, #31
    acac:	e3a0606b 	mov	r6, #107	; 0x6b
    acb0:	e5914004 	ldr	r4, [r1, #4]
    acb4:	e3a0c000 	mov	ip, #0
    acb8:	e582001c 	str	r0, [r2, #28]
    acbc:	e582c014 	str	ip, [r2, #20]
    acc0:	e11e0004 	tst	lr, r4
    acc4:	e582c010 	str	ip, [r2, #16]
    acc8:	1a00007c 	bne	aec0 <free+0x4a8>
    accc:	e18ee004 	orr	lr, lr, r4
    acd0:	e0813005 	add	r3, r1, r5
    acd4:	e7812106 	str	r2, [r1, r6, lsl #2]
    acd8:	e581e004 	str	lr, [r1, #4]
    acdc:	e5823018 	str	r3, [r2, #24]
    ace0:	e582200c 	str	r2, [r2, #12]
    ace4:	e5822008 	str	r2, [r2, #8]
            if (--fm->release_checks == 0)
    ace8:	e5913020 	ldr	r3, [r1, #32]
    acec:	e2533001 	subs	r3, r3, #1
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
    acf0:	03e03000 	mvneq	r3, #0
    acf4:	e5813020 	str	r3, [r1, #32]
    }
  }
#if !FOOTERS
#undef fm
#endif /* FOOTERS */
}
    acf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                unlink_chunk(fm, p, prevsize);
    acfc:	e1500002 	cmp	r0, r2
    ad00:	e5927018 	ldr	r7, [r2, #24]
    ad04:	0a000055 	beq	ae60 <free+0x448>
    ad08:	e5924008 	ldr	r4, [r2, #8]
    ad0c:	e15e0004 	cmp	lr, r4
    ad10:	8affffdd 	bhi	ac8c <free+0x274>
    ad14:	e594500c 	ldr	r5, [r4, #12]
    ad18:	e1550002 	cmp	r5, r2
    ad1c:	1affffda 	bne	ac8c <free+0x274>
    ad20:	e5905008 	ldr	r5, [r0, #8]
    ad24:	e1550002 	cmp	r5, r2
    ad28:	1affffd7 	bne	ac8c <free+0x274>
    ad2c:	e584000c 	str	r0, [r4, #12]
    ad30:	e5804008 	str	r4, [r0, #8]
    ad34:	e3570000 	cmp	r7, #0
    ad38:	0affff47 	beq	aa5c <free+0x44>
    ad3c:	e592401c 	ldr	r4, [r2, #28]
    ad40:	e284404c 	add	r4, r4, #76	; 0x4c
    ad44:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    ad48:	e1550002 	cmp	r5, r2
    ad4c:	07810104 	streq	r0, [r1, r4, lsl #2]
    ad50:	0a000007 	beq	ad74 <free+0x35c>
    ad54:	e15e0007 	cmp	lr, r7
    ad58:	8affffcb 	bhi	ac8c <free+0x274>
    ad5c:	e5974010 	ldr	r4, [r7, #16]
    ad60:	e1540002 	cmp	r4, r2
    ad64:	05870010 	streq	r0, [r7, #16]
    ad68:	15870014 	strne	r0, [r7, #20]
    ad6c:	e3500000 	cmp	r0, #0
    ad70:	0affff39 	beq	aa5c <free+0x44>
    ad74:	e15e0000 	cmp	lr, r0
    ad78:	8affffc3 	bhi	ac8c <free+0x274>
    ad7c:	e5924010 	ldr	r4, [r2, #16]
    ad80:	e5807018 	str	r7, [r0, #24]
    ad84:	e3540000 	cmp	r4, #0
    ad88:	0a000003 	beq	ad9c <free+0x384>
    ad8c:	e15e0004 	cmp	lr, r4
    ad90:	8affffbd 	bhi	ac8c <free+0x274>
    ad94:	e5804010 	str	r4, [r0, #16]
    ad98:	e5840018 	str	r0, [r4, #24]
    ad9c:	e5924014 	ldr	r4, [r2, #20]
    ada0:	e3540000 	cmp	r4, #0
    ada4:	0affff2c 	beq	aa5c <free+0x44>
    ada8:	e15e0004 	cmp	lr, r4
    adac:	8affffb6 	bhi	ac8c <free+0x274>
    adb0:	e5804014 	str	r4, [r0, #20]
    adb4:	e5840018 	str	r0, [r4, #24]
    adb8:	eaffff27 	b	aa5c <free+0x44>
              unlink_chunk(fm, next, nsize);
    adbc:	e154000c 	cmp	r4, ip
    adc0:	e59c0008 	ldr	r0, [ip, #8]
    adc4:	0affffb0 	beq	ac8c <free+0x274>
    adc8:	e15c0000 	cmp	ip, r0
    adcc:	0affffae 	beq	ac8c <free+0x274>
    add0:	e0817186 	add	r7, r1, r6, lsl #3
    add4:	e2877028 	add	r7, r7, #40	; 0x28
    add8:	e1570000 	cmp	r7, r0
    addc:	1a0000a9 	bne	b088 <free+0x670>
    ade0:	e1540000 	cmp	r4, r0
    ade4:	0a00009d 	beq	b060 <free+0x648>
    ade8:	e1540007 	cmp	r4, r7
    adec:	1a0000b6 	bne	b0cc <free+0x6b4>
    adf0:	e580400c 	str	r4, [r0, #12]
    adf4:	e5840008 	str	r0, [r4, #8]
    adf8:	eaffff98 	b	ac60 <free+0x248>
            insert_large_chunk(fm, tp, psize);
    adfc:	e24c0c01 	sub	r0, ip, #256	; 0x100
    ae00:	e3a0e001 	mov	lr, #1
    ae04:	e1a00820 	lsr	r0, r0, #16
    ae08:	e2000008 	and	r0, r0, #8
    ae0c:	e1a0401c 	lsl	r4, ip, r0
    ae10:	e244ca01 	sub	ip, r4, #4096	; 0x1000
    ae14:	e1a0c82c 	lsr	ip, ip, #16
    ae18:	e20cc004 	and	ip, ip, #4
    ae1c:	e1a04c14 	lsl	r4, r4, ip
    ae20:	e180c00c 	orr	ip, r0, ip
    ae24:	e2440901 	sub	r0, r4, #16384	; 0x4000
    ae28:	e1a00820 	lsr	r0, r0, #16
    ae2c:	e2000002 	and	r0, r0, #2
    ae30:	e1a04014 	lsl	r4, r4, r0
    ae34:	e08cc000 	add	ip, ip, r0
    ae38:	e06cc7a4 	rsb	ip, ip, r4, lsr #15
    ae3c:	e28c0015 	add	r0, ip, #21
    ae40:	e28cc00e 	add	ip, ip, #14
    ae44:	e1a00033 	lsr	r0, r3, r0
    ae48:	e000000e 	and	r0, r0, lr
    ae4c:	e0800e1c 	add	r0, r0, ip, lsl lr
    ae50:	e280604c 	add	r6, r0, #76	; 0x4c
    ae54:	e1a0e01e 	lsl	lr, lr, r0
    ae58:	e1a05106 	lsl	r5, r6, #2
    ae5c:	eaffff93 	b	acb0 <free+0x298>
                unlink_chunk(fm, p, prevsize);
    ae60:	e5925014 	ldr	r5, [r2, #20]
    ae64:	e3550000 	cmp	r5, #0
    ae68:	12824014 	addne	r4, r2, #20
    ae6c:	0a000080 	beq	b074 <free+0x65c>
    ae70:	e1a06004 	mov	r6, r4
    ae74:	e1a04005 	mov	r4, r5
    ae78:	e1a00005 	mov	r0, r5
    ae7c:	e5b45014 	ldr	r5, [r4, #20]!
    ae80:	e3550000 	cmp	r5, #0
    ae84:	1afffff9 	bne	ae70 <free+0x458>
    ae88:	e1a04000 	mov	r4, r0
    ae8c:	e5b45010 	ldr	r5, [r4, #16]!
    ae90:	e3550000 	cmp	r5, #0
    ae94:	1afffff5 	bne	ae70 <free+0x458>
    ae98:	e15e0006 	cmp	lr, r6
    ae9c:	8affff7a 	bhi	ac8c <free+0x274>
    aea0:	e5865000 	str	r5, [r6]
    aea4:	eaffffa2 	b	ad34 <free+0x31c>
    aea8:	e15e0005 	cmp	lr, r5
    aeac:	8affff76 	bhi	ac8c <free+0x274>
    aeb0:	e595700c 	ldr	r7, [r5, #12]
    aeb4:	e1570002 	cmp	r7, r2
    aeb8:	0affff23 	beq	ab4c <free+0x134>
    aebc:	eaffff72 	b	ac8c <free+0x274>
            insert_large_chunk(fm, tp, psize);
    aec0:	e350001f 	cmp	r0, #31
    aec4:	e791e106 	ldr	lr, [r1, r6, lsl #2]
    aec8:	11a0c0a0 	lsrne	ip, r0, #1
    aecc:	01a0c003 	moveq	ip, r3
    aed0:	126cc019 	rsbne	ip, ip, #25
    aed4:	11a0cc13 	lslne	ip, r3, ip
    aed8:	ea000006 	b	aef8 <free+0x4e0>
    aedc:	e1a00fac 	lsr	r0, ip, #31
    aee0:	e1a0c08c 	lsl	ip, ip, #1
    aee4:	e2800004 	add	r0, r0, #4
    aee8:	e79e4100 	ldr	r4, [lr, r0, lsl #2]
    aeec:	e3540000 	cmp	r4, #0
    aef0:	0a000032 	beq	afc0 <free+0x5a8>
    aef4:	e1a0e004 	mov	lr, r4
    aef8:	e59e0004 	ldr	r0, [lr, #4]
    aefc:	e3c00007 	bic	r0, r0, #7
    af00:	e1500003 	cmp	r0, r3
    af04:	1afffff4 	bne	aedc <free+0x4c4>
    af08:	e59e3008 	ldr	r3, [lr, #8]
    af0c:	e5910010 	ldr	r0, [r1, #16]
    af10:	e1500003 	cmp	r0, r3
    af14:	9150000e 	cmpls	r0, lr
    af18:	8affff5b 	bhi	ac8c <free+0x274>
    af1c:	e3a00000 	mov	r0, #0
    af20:	e583200c 	str	r2, [r3, #12]
    af24:	e58e2008 	str	r2, [lr, #8]
    af28:	e5823008 	str	r3, [r2, #8]
    af2c:	e582e00c 	str	lr, [r2, #12]
    af30:	e5820018 	str	r0, [r2, #24]
    af34:	eaffff6b 	b	ace8 <free+0x2d0>
              size_t tsize = fm->topsize += psize;
    af38:	e591000c 	ldr	r0, [r1, #12]
              if (p == fm->dv) {
    af3c:	e1520005 	cmp	r2, r5
              fm->top = p;
    af40:	e5812018 	str	r2, [r1, #24]
              size_t tsize = fm->topsize += psize;
    af44:	e0833000 	add	r3, r3, r0
              p->head = tsize | PINUSE_BIT;
    af48:	e3830001 	orr	r0, r3, #1
              size_t tsize = fm->topsize += psize;
    af4c:	e581300c 	str	r3, [r1, #12]
              p->head = tsize | PINUSE_BIT;
    af50:	e5820004 	str	r0, [r2, #4]
              if (should_trim(fm, tsize))
    af54:	e591201c 	ldr	r2, [r1, #28]
                fm->dv = 0;
    af58:	05814014 	streq	r4, [r1, #20]
                fm->dvsize = 0;
    af5c:	05814008 	streq	r4, [r1, #8]
              if (should_trim(fm, tsize))
    af60:	e1530002 	cmp	r3, r2
    af64:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
                sys_trim(fm, 0);
    af68:	e3a00000 	mov	r0, #0
}
    af6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
                sys_trim(fm, 0);
    af70:	eafff86e 	b	9130 <sys_trim.constprop.7>
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
    af74:	e59c4004 	ldr	r4, [ip, #4]
    af78:	e2045003 	and	r5, r4, #3
    af7c:	e3550003 	cmp	r5, #3
    af80:	1afffeb5 	bne	aa5c <free+0x44>
                set_free_with_pinuse(p, psize, next);
    af84:	e3c44001 	bic	r4, r4, #1
    af88:	e3832001 	orr	r2, r3, #1
                fm->dvsize = psize;
    af8c:	e5813008 	str	r3, [r1, #8]
                set_free_with_pinuse(p, psize, next);
    af90:	e58c4004 	str	r4, [ip, #4]
    af94:	e5802004 	str	r2, [r0, #4]
    af98:	e58c3000 	str	r3, [ip]
                goto postaction;
    af9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              size_t dsize = fm->dvsize += psize;
    afa0:	e5910008 	ldr	r0, [r1, #8]
              fm->dv = p;
    afa4:	e5812014 	str	r2, [r1, #20]
              size_t dsize = fm->dvsize += psize;
    afa8:	e0833000 	add	r3, r3, r0
              set_size_and_pinuse_of_free_chunk(p, dsize);
    afac:	e3830001 	orr	r0, r3, #1
              size_t dsize = fm->dvsize += psize;
    afb0:	e5813008 	str	r3, [r1, #8]
              set_size_and_pinuse_of_free_chunk(p, dsize);
    afb4:	e5820004 	str	r0, [r2, #4]
    afb8:	e7823003 	str	r3, [r2, r3]
              goto postaction;
    afbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_large_chunk(fm, tp, psize);
    afc0:	e591c010 	ldr	ip, [r1, #16]
    afc4:	e08e3100 	add	r3, lr, r0, lsl #2
    afc8:	e15c0003 	cmp	ip, r3
    afcc:	8affff2e 	bhi	ac8c <free+0x274>
    afd0:	e78e2100 	str	r2, [lr, r0, lsl #2]
    afd4:	e582e018 	str	lr, [r2, #24]
    afd8:	e582200c 	str	r2, [r2, #12]
    afdc:	e5822008 	str	r2, [r2, #8]
    afe0:	eaffff40 	b	ace8 <free+0x2d0>
    afe4:	e5915014 	ldr	r5, [r1, #20]
    afe8:	eaffff1c 	b	ac60 <free+0x248>
                unlink_chunk(fm, p, prevsize);
    afec:	e5910000 	ldr	r0, [r1]
    aff0:	e3a04001 	mov	r4, #1
    aff4:	e1c06614 	bic	r6, r0, r4, lsl r6
    aff8:	e5816000 	str	r6, [r1]
    affc:	eafffe96 	b	aa5c <free+0x44>
              unlink_chunk(fm, next, nsize);
    b000:	e59c7014 	ldr	r7, [ip, #20]
    b004:	e3570000 	cmp	r7, #0
    b008:	128c0014 	addne	r0, ip, #20
    b00c:	0a000023 	beq	b0a0 <free+0x688>
                unlink_chunk(fm, p, prevsize);
    b010:	e1a04007 	mov	r4, r7
    b014:	e1a06000 	mov	r6, r0
              unlink_chunk(fm, next, nsize);
    b018:	e1a00004 	mov	r0, r4
    b01c:	e5b05014 	ldr	r5, [r0, #20]!
    b020:	e3550000 	cmp	r5, #0
    b024:	0a000005 	beq	b040 <free+0x628>
    b028:	e1a04005 	mov	r4, r5
    b02c:	e1a06000 	mov	r6, r0
    b030:	e1a00004 	mov	r0, r4
    b034:	e5b05014 	ldr	r5, [r0, #20]!
    b038:	e3550000 	cmp	r5, #0
    b03c:	1afffff9 	bne	b028 <free+0x610>
    b040:	e1a00004 	mov	r0, r4
    b044:	e5b07010 	ldr	r7, [r0, #16]!
    b048:	e3570000 	cmp	r7, #0
    b04c:	1affffef 	bne	b010 <free+0x5f8>
    b050:	e15e0006 	cmp	lr, r6
    b054:	8affff0c 	bhi	ac8c <free+0x274>
    b058:	e5867000 	str	r7, [r6]
    b05c:	eafffedd 	b	abd8 <free+0x1c0>
    b060:	e5910000 	ldr	r0, [r1]
    b064:	e3a0c001 	mov	ip, #1
    b068:	e1c0661c 	bic	r6, r0, ip, lsl r6
    b06c:	e5816000 	str	r6, [r1]
    b070:	eafffefa 	b	ac60 <free+0x248>
                unlink_chunk(fm, p, prevsize);
    b074:	e5925010 	ldr	r5, [r2, #16]
    b078:	e3550000 	cmp	r5, #0
    b07c:	0a000018 	beq	b0e4 <free+0x6cc>
    b080:	e2824010 	add	r4, r2, #16
    b084:	eaffff79 	b	ae70 <free+0x458>
              unlink_chunk(fm, next, nsize);
    b088:	e15e0000 	cmp	lr, r0
    b08c:	8afffefe 	bhi	ac8c <free+0x274>
    b090:	e590800c 	ldr	r8, [r0, #12]
    b094:	e158000c 	cmp	r8, ip
    b098:	0affff50 	beq	ade0 <free+0x3c8>
    b09c:	eafffefa 	b	ac8c <free+0x274>
    b0a0:	e59c7010 	ldr	r7, [ip, #16]
    b0a4:	e3570000 	cmp	r7, #0
    b0a8:	0a00001b 	beq	b11c <free+0x704>
    b0ac:	e28c0010 	add	r0, ip, #16
    b0b0:	eaffffd6 	b	b010 <free+0x5f8>
                unlink_chunk(fm, p, prevsize);
    b0b4:	e15e0000 	cmp	lr, r0
    b0b8:	8afffef3 	bhi	ac8c <free+0x274>
    b0bc:	e5904008 	ldr	r4, [r0, #8]
    b0c0:	e1540002 	cmp	r4, r2
    b0c4:	0afffea4 	beq	ab5c <free+0x144>
    b0c8:	eafffeef 	b	ac8c <free+0x274>
              unlink_chunk(fm, next, nsize);
    b0cc:	e15e0004 	cmp	lr, r4
    b0d0:	8afffeed 	bhi	ac8c <free+0x274>
    b0d4:	e594e008 	ldr	lr, [r4, #8]
    b0d8:	e15e000c 	cmp	lr, ip
    b0dc:	0affff43 	beq	adf0 <free+0x3d8>
    b0e0:	eafffee9 	b	ac8c <free+0x274>
                unlink_chunk(fm, p, prevsize);
    b0e4:	e3570000 	cmp	r7, #0
    b0e8:	0afffe5b 	beq	aa5c <free+0x44>
    b0ec:	e592401c 	ldr	r4, [r2, #28]
    b0f0:	e284804c 	add	r8, r4, #76	; 0x4c
    b0f4:	e7910108 	ldr	r0, [r1, r8, lsl #2]
    b0f8:	e1500002 	cmp	r0, r2
    b0fc:	11a00005 	movne	r0, r5
    b100:	1affff13 	bne	ad54 <free+0x33c>
    b104:	e5910004 	ldr	r0, [r1, #4]
    b108:	e3a06001 	mov	r6, #1
    b10c:	e7815108 	str	r5, [r1, r8, lsl #2]
    b110:	e1c00416 	bic	r0, r0, r6, lsl r4
    b114:	e5810004 	str	r0, [r1, #4]
    b118:	eafffe4f 	b	aa5c <free+0x44>
              unlink_chunk(fm, next, nsize);
    b11c:	e3580000 	cmp	r8, #0
    b120:	0afffece 	beq	ac60 <free+0x248>
    b124:	e59c401c 	ldr	r4, [ip, #28]
    b128:	e284504c 	add	r5, r4, #76	; 0x4c
    b12c:	e7910105 	ldr	r0, [r1, r5, lsl #2]
    b130:	e150000c 	cmp	r0, ip
    b134:	13a04000 	movne	r4, #0
    b138:	1afffeae 	bne	abf8 <free+0x1e0>
    b13c:	e5910004 	ldr	r0, [r1, #4]
    b140:	e3a0c001 	mov	ip, #1
    b144:	e3a0e000 	mov	lr, #0
    b148:	e781e105 	str	lr, [r1, r5, lsl #2]
    b14c:	e5915014 	ldr	r5, [r1, #20]
    b150:	e1c0041c 	bic	r0, r0, ip, lsl r4
    b154:	e5810004 	str	r0, [r1, #4]
    b158:	eafffec0 	b	ac60 <free+0x248>

0000b15c <calloc>:

void* dlcalloc(size_t n_elements, size_t elem_size) {
    b15c:	e92d4070 	push	{r4, r5, r6, lr}
  void* mem;
  size_t req = 0;
  if (n_elements != 0) {
    b160:	e2504000 	subs	r4, r0, #0
    b164:	0a000006 	beq	b184 <calloc+0x28>
    req = n_elements * elem_size;
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    b168:	e1843001 	orr	r3, r4, r1
    req = n_elements * elem_size;
    b16c:	e0020491 	mul	r2, r1, r4
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    b170:	e1a03823 	lsr	r3, r3, #16
    b174:	e1a03803 	lsl	r3, r3, #16
    b178:	e3530000 	cmp	r3, #0
    req = n_elements * elem_size;
    b17c:	01a04002 	moveq	r4, r2
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    b180:	1a00000d 	bne	b1bc <calloc+0x60>
        (req / n_elements != elem_size))
      req = MAX_SIZE_T; /* force downstream failure on overflow */
  }
  mem = dlmalloc(req);
    b184:	e1a00004 	mov	r0, r4
    b188:	ebfff84c 	bl	92c0 <malloc>
  if (mem != 0 && calloc_must_clear(mem2chunk(mem)))
    b18c:	e2505000 	subs	r5, r0, #0
    b190:	0a000002 	beq	b1a0 <calloc+0x44>
    b194:	e5153004 	ldr	r3, [r5, #-4]
    b198:	e3130003 	tst	r3, #3
    b19c:	1a000001 	bne	b1a8 <calloc+0x4c>
    memset(mem, 0, req);
  return mem;
}
    b1a0:	e1a00005 	mov	r0, r5
    b1a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    memset(mem, 0, req);
    b1a8:	e1a02004 	mov	r2, r4
    b1ac:	e3a01000 	mov	r1, #0
    b1b0:	eb0005a1 	bl	c83c <memset>
}
    b1b4:	e1a00005 	mov	r0, r5
    b1b8:	e8bd8070 	pop	{r4, r5, r6, pc}
        (req / n_elements != elem_size))
    b1bc:	e734f412 	udiv	r4, r2, r4
      req = MAX_SIZE_T; /* force downstream failure on overflow */
    b1c0:	e1540001 	cmp	r4, r1
    b1c4:	01a04002 	moveq	r4, r2
    b1c8:	13e04000 	mvnne	r4, #0
    b1cc:	eaffffec 	b	b184 <calloc+0x28>

0000b1d0 <_stdio_fgetc>:
}

static int _stdio_fgetc(void *ctx)
{
	return (unsigned char)0xff;
}
    b1d0:	e3a000ff 	mov	r0, #255	; 0xff
    b1d4:	e12fff1e 	bx	lr

0000b1d8 <_stdio_vfprintf>:
	return buffered_write(ctx, str, strnlen(str, len));
}

static int _stdio_vfprintf(void *ctx, const char *fmt, va_list ap)
{
	return _printf_engine(_output_func, ctx, fmt, ap);
    b1d8:	e1a03002 	mov	r3, r2
    b1dc:	e1a02001 	mov	r2, r1
    b1e0:	e1a01000 	mov	r1, r0
    b1e4:	e30b02ac 	movw	r0, #45740	; 0xb2ac
    b1e8:	e3400000 	movt	r0, #0
    b1ec:	ea000325 	b	be88 <_printf_engine>

0000b1f0 <_stdio_fputc>:
{
    b1f0:	e92d4010 	push	{r4, lr}
	buffered_put(fctx->buffer, fctx->fd, (char)c);
    b1f4:	e6ef1071 	uxtb	r1, r1
    b1f8:	e8900011 	ldm	r0, {r0, r4}
	buffer->data[buffer->pos++] = c;
    b1fc:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    b200:	e2832001 	add	r2, r3, #1
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b204:	e351000a 	cmp	r1, #10
    b208:	13520080 	cmpne	r2, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    b20c:	e5842080 	str	r2, [r4, #128]	; 0x80
    b210:	e7c41003 	strb	r1, [r4, r3]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b214:	1a000003 	bne	b228 <_stdio_fputc+0x38>
		result = write(fd, buffer->data, buffer->pos);
    b218:	e1a01004 	mov	r1, r4
    b21c:	eb000086 	bl	b43c <write>
		buffer->pos = 0;
    b220:	e3a03000 	mov	r3, #0
    b224:	e5843080 	str	r3, [r4, #128]	; 0x80
}
    b228:	e3e00102 	mvn	r0, #-2147483648	; 0x80000000
    b22c:	e8bd8010 	pop	{r4, pc}

0000b230 <buffered_write.part.0>:
static int buffered_write(struct file_context *ctx, const char *str, size_t sz)
    b230:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < sz; i++) {
    b234:	e2528000 	subs	r8, r2, #0
    b238:	0a000019 	beq	b2a4 <buffered_write.part.0+0x74>
    b23c:	e2489001 	sub	r9, r8, #1
    b240:	e1a06000 	mov	r6, r0
    b244:	e2415001 	sub	r5, r1, #1
    b248:	e0819009 	add	r9, r1, r9
		buffer->pos = 0;
    b24c:	e3a07000 	mov	r7, #0
    b250:	ea000001 	b	b25c <buffered_write.part.0+0x2c>
	for (i = 0; i < sz; i++) {
    b254:	e1550009 	cmp	r5, r9
    b258:	0a000011 	beq	b2a4 <buffered_write.part.0+0x74>
		int result = buffered_put(ctx->buffer, ctx->fd, str[i]);
    b25c:	e5964004 	ldr	r4, [r6, #4]
    b260:	e5f5e001 	ldrb	lr, [r5, #1]!
    b264:	e5960000 	ldr	r0, [r6]
	buffer->data[buffer->pos++] = c;
    b268:	e594c080 	ldr	ip, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
    b26c:	e1a01004 	mov	r1, r4
	buffer->data[buffer->pos++] = c;
    b270:	e28c3001 	add	r3, ip, #1
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b274:	e35e000a 	cmp	lr, #10
    b278:	13530080 	cmpne	r3, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    b27c:	e5843080 	str	r3, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
    b280:	e1a02003 	mov	r2, r3
	buffer->data[buffer->pos++] = c;
    b284:	e7c4e00c 	strb	lr, [r4, ip]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    b288:	1afffff1 	bne	b254 <buffered_write.part.0+0x24>
		result = write(fd, buffer->data, buffer->pos);
    b28c:	eb00006a 	bl	b43c <write>
		if (result < 0) {
    b290:	e3500000 	cmp	r0, #0
		buffer->pos = 0;
    b294:	e5847080 	str	r7, [r4, #128]	; 0x80
		if (result < 0) {
    b298:	b8bd87f0 	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < sz; i++) {
    b29c:	e1550009 	cmp	r5, r9
    b2a0:	1affffed 	bne	b25c <buffered_write.part.0+0x2c>
	return sz;
    b2a4:	e1a00008 	mov	r0, r8
}
    b2a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000b2ac <_output_func>:
{
    b2ac:	e92d4070 	push	{r4, r5, r6, lr}
    b2b0:	e1a04002 	mov	r4, r2
    b2b4:	e1a05000 	mov	r5, r0
	return buffered_write(ctx, str, strnlen(str, len));
    b2b8:	eb000594 	bl	c910 <strnlen>
	if (!ctx->buffer) {
    b2bc:	e5943004 	ldr	r3, [r4, #4]
    b2c0:	e3530000 	cmp	r3, #0
    b2c4:	0a000004 	beq	b2dc <_output_func+0x30>
    b2c8:	e1a02000 	mov	r2, r0
    b2cc:	e1a01005 	mov	r1, r5
    b2d0:	e1a00004 	mov	r0, r4
}
    b2d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    b2d8:	eaffffd4 	b	b230 <buffered_write.part.0>
    b2dc:	e3e00007 	mvn	r0, #7
    b2e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b2e4 <_stdio_fputs>:
{
    b2e4:	e92d4070 	push	{r4, r5, r6, lr}
    b2e8:	e1a04000 	mov	r4, r0
	return buffered_write(fctx, s, strlen(s));
    b2ec:	e1a00001 	mov	r0, r1
{
    b2f0:	e1a05001 	mov	r5, r1
	return buffered_write(fctx, s, strlen(s));
    b2f4:	eb000579 	bl	c8e0 <strlen>
	if (!ctx->buffer) {
    b2f8:	e5943004 	ldr	r3, [r4, #4]
    b2fc:	e3530000 	cmp	r3, #0
    b300:	0a000004 	beq	b318 <_stdio_fputs+0x34>
    b304:	e1a02000 	mov	r2, r0
    b308:	e1a01005 	mov	r1, r5
    b30c:	e1a00004 	mov	r0, r4
}
    b310:	e8bd4070 	pop	{r4, r5, r6, lr}
    b314:	eaffffc5 	b	b230 <buffered_write.part.0>
    b318:	e3e00007 	mvn	r0, #7
    b31c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b320 <__libc_fini>:
 * of the executable, if any.
 *
 * 'fini_array' points to a list of function addresses. The first
 * entry in the list has value -1, the last one has value 0.
 */
void __libc_fini(void* array) {
    b320:	e92d4070 	push	{r4, r5, r6, lr}
  void** fini_array = (void **)array;
  const size_t minus1 = ~(size_t)0; /* ensure proper sign extension */

  /* Sanity check - first entry must be -1 */
  if (array == NULL || (size_t)fini_array[0] != minus1) {
    b324:	e2505000 	subs	r5, r0, #0
    b328:	08bd8070 	popeq	{r4, r5, r6, pc}
    b32c:	e5953000 	ldr	r3, [r5]
    b330:	e3730001 	cmn	r3, #1
    b334:	18bd8070 	popne	{r4, r5, r6, pc}
  /* skip over it */
  fini_array += 1;

  /* Count the number of destructors. */
  int count = 0;
  while (fini_array[count] != NULL) {
    b338:	e5952004 	ldr	r2, [r5, #4]
  fini_array += 1;
    b33c:	e2853004 	add	r3, r5, #4
  while (fini_array[count] != NULL) {
    b340:	e3520000 	cmp	r2, #0
    b344:	08bd8070 	popeq	{r4, r5, r6, pc}
  int count = 0;
    b348:	e3a04000 	mov	r4, #0
  while (fini_array[count] != NULL) {
    b34c:	e5b32004 	ldr	r2, [r3, #4]!
    ++count;
    b350:	e2844001 	add	r4, r4, #1
  while (fini_array[count] != NULL) {
    b354:	e3520000 	cmp	r2, #0
    b358:	1afffffb 	bne	b34c <__libc_fini+0x2c>
    b35c:	e0854104 	add	r4, r5, r4, lsl #2
  }

  /* Now call each destructor in reverse order. */
  while (count > 0) {
    void (*func)(void) = (void (*)(void)) fini_array[--count];
    b360:	e4143004 	ldr	r3, [r4], #-4

    /* Sanity check, any -1 in the list is ignored */
    if ((size_t)func == minus1) {
    b364:	e3730001 	cmn	r3, #1
    b368:	0a000000 	beq	b370 <__libc_fini+0x50>
      continue;
    }

    func();
    b36c:	e12fff33 	blx	r3
  while (count > 0) {
    b370:	e1550004 	cmp	r5, r4
    b374:	1afffff9 	bne	b360 <__libc_fini+0x40>
    b378:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b37c <__libc_init>:
{
    b37c:	e92d4010 	push	{r4, lr}
    b380:	e1a05002 	mov	r5, r2
	call_array(structors->preinit_array);
    b384:	e5924000 	ldr	r4, [r2]
{
    b388:	e1a06001 	mov	r6, r1
  while (*++list) {
    b38c:	e5943004 	ldr	r3, [r4, #4]
    b390:	e3530000 	cmp	r3, #0
    b394:	0a000004 	beq	b3ac <__libc_init+0x30>
    b398:	e2844004 	add	r4, r4, #4
    (*list)();
    b39c:	e12fff33 	blx	r3
  while (*++list) {
    b3a0:	e5b43004 	ldr	r3, [r4, #4]!
    b3a4:	e3530000 	cmp	r3, #0
    b3a8:	1afffffb 	bne	b39c <__libc_init+0x20>
	call_array(structors->init_array);
    b3ac:	e5954004 	ldr	r4, [r5, #4]
  while (*++list) {
    b3b0:	e5943004 	ldr	r3, [r4, #4]
    b3b4:	e2844004 	add	r4, r4, #4
    b3b8:	e3530000 	cmp	r3, #0
    b3bc:	0a000003 	beq	b3d0 <__libc_init+0x54>
    (*list)();
    b3c0:	e12fff33 	blx	r3
  while (*++list) {
    b3c4:	e5b43004 	ldr	r3, [r4, #4]!
    b3c8:	e3530000 	cmp	r3, #0
    b3cc:	1afffffb 	bne	b3c0 <__libc_init+0x44>
	if (structors->fini_array != NULL) {
    b3d0:	e5951008 	ldr	r1, [r5, #8]
    b3d4:	e3510000 	cmp	r1, #0
    b3d8:	1a000004 	bne	b3f0 <__libc_init+0x74>
	exit(slingshot(0, NULL, NULL));
    b3dc:	e3a02000 	mov	r2, #0
    b3e0:	e1a01002 	mov	r1, r2
    b3e4:	e1a00002 	mov	r0, r2
    b3e8:	e12fff36 	blx	r6
    b3ec:	ebfff303 	bl	8000 <exit>
		ret = __cxa_atexit(__libc_fini, structors->fini_array);
    b3f0:	e30b0320 	movw	r0, #45856	; 0xb320
    b3f4:	e3400000 	movt	r0, #0
    b3f8:	ebfff6bf 	bl	8efc <__cxa_atexit>
		if (ret)
    b3fc:	e3500000 	cmp	r0, #0
    b400:	0afffff5 	beq	b3dc <__libc_init+0x60>
			__libc_fatal("__cxa_atexit failed\n");
    b404:	e30d0520 	movw	r0, #54560	; 0xd520
    b408:	e3400000 	movt	r0, #0
    b40c:	ebffffff 	bl	b410 <__libc_fatal>

0000b410 <__libc_fatal>:
    __libc_log_fatal(format, args);
    va_end(args);
}

void __libc_fatal(const char* format, ...)
{
    b410:	e92d000f 	push	{r0, r1, r2, r3}
    b414:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b418:	e24dd00c 	sub	sp, sp, #12
    va_list args;
    va_start(args, format);
    b41c:	e28d3014 	add	r3, sp, #20
    vfprintf(stderr, format, args);
    b420:	e1a02003 	mov	r2, r3
    b424:	e59d1010 	ldr	r1, [sp, #16]
    b428:	e59f0008 	ldr	r0, [pc, #8]	; b438 <__libc_fatal+0x28>
    va_start(args, format);
    b42c:	e58d3004 	str	r3, [sp, #4]
    vfprintf(stderr, format, args);
    b430:	eb0004ef 	bl	c7f4 <vfprintf>
    __libc_log_fatal(format, args);
    va_end(args);
    abort();
    b434:	ebfff6ad 	bl	8ef0 <abort>
    b438:	0000e104 	.word	0x0000e104

0000b43c <write>:
#include <asm.h>
#include <trusty_syscalls.h>

.section .text.write
FUNCTION(write)
    ldr     r12, =__NR_write
    b43c:	e3a0c001 	mov	ip, #1
    swi     #0
    b440:	ef000000 	svc	0x00000000
    bx      lr
    b444:	e12fff1e 	bx	lr

0000b448 <brk>:

.section .text.brk
FUNCTION(brk)
    ldr     r12, =__NR_brk
    b448:	e3a0c002 	mov	ip, #2
    swi     #0
    b44c:	ef000000 	svc	0x00000000
    bx      lr
    b450:	e12fff1e 	bx	lr

0000b454 <exit_group>:

.section .text.exit_group
FUNCTION(exit_group)
    ldr     r12, =__NR_exit_group
    b454:	e3a0c003 	mov	ip, #3
    swi     #0
    b458:	ef000000 	svc	0x00000000
    bx      lr
    b45c:	e12fff1e 	bx	lr

0000b460 <nanosleep>:
    swi     #0
    bx      lr

.section .text.nanosleep
FUNCTION(nanosleep)
    ldr     r12, =__NR_nanosleep
    b460:	e3a0c006 	mov	ip, #6
    swi     #0
    b464:	ef000000 	svc	0x00000000
    bx      lr
    b468:	e12fff1e 	bx	lr

0000b46c <port_create>:
    swi     #0
    bx      lr

.section .text.port_create
FUNCTION(port_create)
    ldr     r12, =__NR_port_create
    b46c:	e3a0c010 	mov	ip, #16
    swi     #0
    b470:	ef000000 	svc	0x00000000
    bx      lr
    b474:	e12fff1e 	bx	lr

0000b478 <connect>:

.section .text.connect
FUNCTION(connect)
    ldr     r12, =__NR_connect
    b478:	e3a0c011 	mov	ip, #17
    swi     #0
    b47c:	ef000000 	svc	0x00000000
    bx      lr
    b480:	e12fff1e 	bx	lr

0000b484 <accept>:

.section .text.accept
FUNCTION(accept)
    ldr     r12, =__NR_accept
    b484:	e3a0c012 	mov	ip, #18
    swi     #0
    b488:	ef000000 	svc	0x00000000
    bx      lr
    b48c:	e12fff1e 	bx	lr

0000b490 <close>:

.section .text.close
FUNCTION(close)
    ldr     r12, =__NR_close
    b490:	e3a0c013 	mov	ip, #19
    swi     #0
    b494:	ef000000 	svc	0x00000000
    bx      lr
    b498:	e12fff1e 	bx	lr

0000b49c <set_cookie>:

.section .text.set_cookie
FUNCTION(set_cookie)
    ldr     r12, =__NR_set_cookie
    b49c:	e3a0c014 	mov	ip, #20
    swi     #0
    b4a0:	ef000000 	svc	0x00000000
    bx      lr
    b4a4:	e12fff1e 	bx	lr

0000b4a8 <wait>:

.section .text.wait
FUNCTION(wait)
    ldr     r12, =__NR_wait
    b4a8:	e3a0c018 	mov	ip, #24
    swi     #0
    b4ac:	ef000000 	svc	0x00000000
    bx      lr
    b4b0:	e12fff1e 	bx	lr

0000b4b4 <wait_any>:

.section .text.wait_any
FUNCTION(wait_any)
    ldr     r12, =__NR_wait_any
    b4b4:	e3a0c019 	mov	ip, #25
    swi     #0
    b4b8:	ef000000 	svc	0x00000000
    bx      lr
    b4bc:	e12fff1e 	bx	lr

0000b4c0 <get_msg>:

.section .text.get_msg
FUNCTION(get_msg)
    ldr     r12, =__NR_get_msg
    b4c0:	e3a0c020 	mov	ip, #32
    swi     #0
    b4c4:	ef000000 	svc	0x00000000
    bx      lr
    b4c8:	e12fff1e 	bx	lr

0000b4cc <read_msg>:

.section .text.read_msg
FUNCTION(read_msg)
    ldr     r12, =__NR_read_msg
    b4cc:	e3a0c021 	mov	ip, #33	; 0x21
    swi     #0
    b4d0:	ef000000 	svc	0x00000000
    bx      lr
    b4d4:	e12fff1e 	bx	lr

0000b4d8 <put_msg>:

.section .text.put_msg
FUNCTION(put_msg)
    ldr     r12, =__NR_put_msg
    b4d8:	e3a0c022 	mov	ip, #34	; 0x22
    swi     #0
    b4dc:	ef000000 	svc	0x00000000
    bx      lr
    b4e0:	e12fff1e 	bx	lr

0000b4e4 <send_msg>:

.section .text.send_msg
FUNCTION(send_msg)
    ldr     r12, =__NR_send_msg
    b4e4:	e3a0c023 	mov	ip, #35	; 0x23
    swi     #0
    b4e8:	ef000000 	svc	0x00000000
    bx      lr
    b4ec:	e12fff1e 	bx	lr

0000b4f0 <longlong_to_string>:
#define LEFTFORMATFLAG 0x00000800
#define LEADZEROFLAG   0x00001000
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
    b4f0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4f4:	e1a08000 	mov	r8, r0
    b4f8:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    b4fc:	e1a04002 	mov	r4, r2
    b500:	e1a05003 	mov	r5, r3
    b504:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
	size_t pos = len;
	int negative = 0;

	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    b508:	e219ab01 	ands	sl, r9, #1024	; 0x400
    b50c:	0a000003 	beq	b520 <longlong_to_string+0x30>
    b510:	e3520000 	cmp	r2, #0
    b514:	e2d53000 	sbcs	r3, r5, #0
	int negative = 0;
    b518:	a3a0a000 	movge	sl, #0
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    b51c:	ba000030 	blt	b5e4 <longlong_to_string+0xf4>
	}

	buf[--pos] = 0;

	/* only do the math if the number is >= 10 */
	while (n >= 10) {
    b520:	e3550000 	cmp	r5, #0
	buf[--pos] = 0;
    b524:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
    b528:	03540009 	cmpeq	r4, #9
	buf[--pos] = 0;
    b52c:	e3a03000 	mov	r3, #0
    b530:	e088b007 	add	fp, r8, r7
    b534:	e7c83007 	strb	r3, [r8, r7]
	while (n >= 10) {
    b538:	9a000012 	bls	b588 <longlong_to_string+0x98>
		int digit = n % 10;
    b53c:	e1a00004 	mov	r0, r4
    b540:	e1a01005 	mov	r1, r5
    b544:	e3a0200a 	mov	r2, #10
    b548:	e3a03000 	mov	r3, #0
    b54c:	fa0005e4 	blx	cce4 <__aeabi_uldivmod>

		n /= 10;
    b550:	e1a00004 	mov	r0, r4
		int digit = n % 10;
    b554:	e1a06002 	mov	r6, r2
		n /= 10;
    b558:	e1a01005 	mov	r1, r5
    b55c:	e3a0200a 	mov	r2, #10
    b560:	e3a03000 	mov	r3, #0

		buf[--pos] = digit + '0';
    b564:	e2866030 	add	r6, r6, #48	; 0x30
		n /= 10;
    b568:	fa0005dd 	blx	cce4 <__aeabi_uldivmod>
	while (n >= 10) {
    b56c:	e3510000 	cmp	r1, #0
		buf[--pos] = digit + '0';
    b570:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
    b574:	03500009 	cmpeq	r0, #9
		n /= 10;
    b578:	e1a04000 	mov	r4, r0
    b57c:	e1a05001 	mov	r5, r1
		buf[--pos] = digit + '0';
    b580:	e56b6001 	strb	r6, [fp, #-1]!
	while (n >= 10) {
    b584:	8affffec 	bhi	b53c <longlong_to_string+0x4c>
	}
	buf[--pos] = n + '0';

	if (negative)
    b588:	e35a0000 	cmp	sl, #0
	buf[--pos] = n + '0';
    b58c:	e2477001 	sub	r7, r7, #1
    b590:	e2844030 	add	r4, r4, #48	; 0x30
    b594:	e0880007 	add	r0, r8, r7
    b598:	e7c84007 	strb	r4, [r8, r7]
	if (negative)
    b59c:	1a00000c 	bne	b5d4 <longlong_to_string+0xe4>
		*signchar = '-';
	else if ((flag & SHOWSIGNFLAG))
    b5a0:	e3190c02 	tst	r9, #512	; 0x200
    b5a4:	1a000006 	bne	b5c4 <longlong_to_string+0xd4>
		*signchar = '+';
	else if ((flag & BLANKPOSFLAG))
    b5a8:	e3190a02 	tst	r9, #8192	; 0x2000
		*signchar = ' ';
    b5ac:	159d2030 	ldrne	r2, [sp, #48]	; 0x30
    b5b0:	13a03020 	movne	r3, #32
	else
		*signchar = '\0';
    b5b4:	059d3030 	ldreq	r3, [sp, #48]	; 0x30
		*signchar = ' ';
    b5b8:	15c23000 	strbne	r3, [r2]
		*signchar = '\0';
    b5bc:	05c3a000 	strbeq	sl, [r3]

	return &buf[pos];
}
    b5c0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '+';
    b5c4:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    b5c8:	e3a0302b 	mov	r3, #43	; 0x2b
    b5cc:	e5c23000 	strb	r3, [r2]
    b5d0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '-';
    b5d4:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    b5d8:	e3a0302d 	mov	r3, #45	; 0x2d
    b5dc:	e5c23000 	strb	r3, [r2]
    b5e0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n = -n;
    b5e4:	e2724000 	rsbs	r4, r2, #0
		negative = 1;
    b5e8:	e3a0a001 	mov	sl, #1
		n = -n;
    b5ec:	e2e55000 	rsc	r5, r5, #0
    b5f0:	eaffffca 	b	b520 <longlong_to_string+0x30>

0000b5f4 <exponent_to_string>:
__NO_INLINE static size_t exponent_to_string(char *buf, int32_t exponent)
{
	size_t pos = 0;

	/* handle sign */
	if (exponent < 0) {
    b5f4:	e3510000 	cmp	r1, #0
{
    b5f8:	e92d4070 	push	{r4, r5, r6, lr}
		OUT('-');
		exponent = -exponent;
    b5fc:	b2611000 	rsblt	r1, r1, #0
		OUT('-');
    b600:	b3a0302d 	movlt	r3, #45	; 0x2d
	} else {
		OUT('+');
    b604:	a3a0302b 	movge	r3, #43	; 0x2b
	}

	/* see how far we need to bump into the string to print from the right */
	if (exponent >= 1000) pos += 4;
    b608:	e3510ffa 	cmp	r1, #1000	; 0x3e8
{
    b60c:	e1a0e000 	mov	lr, r0
		OUT('+');
    b610:	e5c03000 	strb	r3, [r0]
	if (exponent >= 1000) pos += 4;
    b614:	a3a00005 	movge	r0, #5
    b618:	aa000002 	bge	b628 <exponent_to_string+0x34>
	else if (exponent >= 100) pos += 3;
    b61c:	e3510063 	cmp	r1, #99	; 0x63
    b620:	c3a00004 	movgt	r0, #4
    b624:	da00000f 	ble	b668 <exponent_to_string+0x74>
	else pos++;

	/* print decimal string, from the right */
	uint i = pos;
	do {
		uint digit = (uint32_t)exponent % 10;
    b628:	e30c5ccd 	movw	r5, #52429	; 0xcccd

		buf[--i] = digit + '0';

		exponent /= 10;
    b62c:	e3064667 	movw	r4, #26215	; 0x6667
    b630:	e08ee000 	add	lr, lr, r0
		uint digit = (uint32_t)exponent % 10;
    b634:	e34c5ccc 	movt	r5, #52428	; 0xcccc
		exponent /= 10;
    b638:	e3464666 	movt	r4, #26214	; 0x6666
		uint digit = (uint32_t)exponent % 10;
    b63c:	e0832195 	umull	r2, r3, r5, r1
		exponent /= 10;
    b640:	e1a02fc1 	asr	r2, r1, #31
    b644:	e0cc6194 	smull	r6, ip, r4, r1
		uint digit = (uint32_t)exponent % 10;
    b648:	e1a031a3 	lsr	r3, r3, #3
    b64c:	e0833103 	add	r3, r3, r3, lsl #2
    b650:	e0413083 	sub	r3, r1, r3, lsl #1
	} while (exponent != 0);
    b654:	e072114c 	rsbs	r1, r2, ip, asr #2
		buf[--i] = digit + '0';
    b658:	e2833030 	add	r3, r3, #48	; 0x30
    b65c:	e56e3001 	strb	r3, [lr, #-1]!
	} while (exponent != 0);
    b660:	1afffff5 	bne	b63c <exponent_to_string+0x48>
    b664:	e8bd8070 	pop	{r4, r5, r6, pc}
	else pos++;
    b668:	e3510009 	cmp	r1, #9
    b66c:	c3a00003 	movgt	r0, #3
    b670:	d3a00002 	movle	r0, #2
    b674:	eaffffeb 	b	b628 <exponent_to_string+0x34>

0000b678 <_vsnprintf_output>:
	size_t len;
	size_t pos;
};

static int _vsnprintf_output(const char *str, size_t len, void *state)
{
    b678:	e92d4010 	push	{r4, lr}
	struct _output_args *args = state;

	size_t count = 0;
	while (count < len && *str) {
    b67c:	e251e000 	subs	lr, r1, #0
    b680:	0a000016 	beq	b6e0 <_vsnprintf_output+0x68>
    b684:	e5d01000 	ldrb	r1, [r0]
    b688:	e3510000 	cmp	r1, #0
    b68c:	0a000011 	beq	b6d8 <_vsnprintf_output+0x60>
    b690:	e24ee001 	sub	lr, lr, #1
	size_t count = 0;
    b694:	e3a01000 	mov	r1, #0
    b698:	e080e00e 	add	lr, r0, lr
    b69c:	ea000002 	b	b6ac <_vsnprintf_output+0x34>
	while (count < len && *str) {
    b6a0:	e5f03001 	ldrb	r3, [r0, #1]!
    b6a4:	e3530000 	cmp	r3, #0
    b6a8:	0a00000a 	beq	b6d8 <_vsnprintf_output+0x60>
		if (args->pos < args->len) {
    b6ac:	e5923008 	ldr	r3, [r2, #8]
			args->outstr[args->pos++] = *str;
		}

		str++;
		count++;
    b6b0:	e2811001 	add	r1, r1, #1
		if (args->pos < args->len) {
    b6b4:	e592c004 	ldr	ip, [r2, #4]
			args->outstr[args->pos++] = *str;
    b6b8:	e2834001 	add	r4, r3, #1
		if (args->pos < args->len) {
    b6bc:	e153000c 	cmp	r3, ip
			args->outstr[args->pos++] = *str;
    b6c0:	35824008 	strcc	r4, [r2, #8]
    b6c4:	3592c000 	ldrcc	ip, [r2]
    b6c8:	35d04000 	ldrbcc	r4, [r0]
    b6cc:	37cc4003 	strbcc	r4, [ip, r3]
	while (count < len && *str) {
    b6d0:	e150000e 	cmp	r0, lr
    b6d4:	1afffff1 	bne	b6a0 <_vsnprintf_output+0x28>
    b6d8:	e1a00001 	mov	r0, r1
	}

	return count;
}
    b6dc:	e8bd8010 	pop	{r4, pc}
	while (count < len && *str) {
    b6e0:	e1a0000e 	mov	r0, lr
    b6e4:	e8bd8010 	pop	{r4, pc}

0000b6e8 <double_to_hexstring.isra.0>:
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    b6e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    b6ec:	e3a06000 	mov	r6, #0
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    b6f0:	ec532b10 	vmov	r2, r3, d0
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    b6f4:	e3a07000 	mov	r7, #0
	if (neg) {
    b6f8:	e1520006 	cmp	r2, r6
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    b6fc:	e1a05000 	mov	r5, r0
	if (neg) {
    b700:	e0d30007 	sbcs	r0, r3, r7
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    b704:	e7ea2a53 	ubfx	r2, r3, #20, #11
		OUT('-');
    b708:	b3a0002d 	movlt	r0, #45	; 0x2d
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    b70c:	e7f37053 	ubfx	r7, r3, #0, #20
		OUT('-');
    b710:	b5c50000 	strblt	r0, [r5]
	if (exponent == 0x7ff) {
    b714:	e30007ff 	movw	r0, #2047	; 0x7ff
		OUT('-');
    b718:	b3a03001 	movlt	r3, #1
	size_t pos = 0;
    b71c:	a3a03000 	movge	r3, #0
	if (exponent == 0x7ff) {
    b720:	e1520000 	cmp	r2, r0
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    b724:	e24dd014 	sub	sp, sp, #20
    b728:	e2011c01 	and	r1, r1, #256	; 0x100
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    b72c:	ee106a10 	vmov	r6, s0
    b730:	e58d1004 	str	r1, [sp, #4]
	if (exponent == 0x7ff) {
    b734:	0a000028 	beq	b7dc <double_to_hexstring.isra.0+0xf4>
	} else if (exponent == 0) {
    b738:	e3520000 	cmp	r2, #0
    b73c:	1a000015 	bne	b798 <double_to_hexstring.isra.0+0xb0>
		if (fraction == 0) {
    b740:	e1962007 	orrs	r2, r6, r7
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    b744:	e59d2004 	ldr	r2, [sp, #4]
		if (fraction == 0) {
    b748:	1a000040 	bne	b850 <double_to_hexstring.isra.0+0x168>
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    b74c:	e3520000 	cmp	r2, #0
    b750:	1a0000c3 	bne	ba64 <double_to_hexstring.isra.0+0x37c>
    b754:	e0850003 	add	r0, r5, r3
    b758:	e59fc334 	ldr	ip, [pc, #820]	; ba94 <double_to_hexstring.isra.0+0x3ac>
    b75c:	e3a02078 	mov	r2, #120	; 0x78
    b760:	e3a01030 	mov	r1, #48	; 0x30
    b764:	ea000000 	b	b76c <double_to_hexstring.isra.0+0x84>
    b768:	e5fc2001 	ldrb	r2, [ip, #1]!
    b76c:	e3520000 	cmp	r2, #0
    b770:	e4c01001 	strb	r1, [r0], #1
    b774:	e2833001 	add	r3, r3, #1
    b778:	e1a01002 	mov	r1, r2
    b77c:	1afffff9 	bne	b768 <double_to_hexstring.isra.0+0x80>
    b780:	e0853003 	add	r3, r5, r3
	buf[pos] = 0;
    b784:	e3a02000 	mov	r2, #0
}
    b788:	e1a00005 	mov	r0, r5
	buf[pos] = 0;
    b78c:	e5c32000 	strb	r2, [r3]
}
    b790:	e28dd014 	add	sp, sp, #20
    b794:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    b798:	e59d1004 	ldr	r1, [sp, #4]
		int exponent_signed = exponent - 1023;
    b79c:	e2422fff 	sub	r2, r2, #1020	; 0x3fc
    b7a0:	e2422003 	sub	r2, r2, #3
    b7a4:	e58d200c 	str	r2, [sp, #12]
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    b7a8:	e3510000 	cmp	r1, #0
    b7ac:	0a000034 	beq	b884 <double_to_hexstring.isra.0+0x19c>
    b7b0:	e59fc2e0 	ldr	ip, [pc, #736]	; ba98 <double_to_hexstring.isra.0+0x3b0>
    b7b4:	e0850003 	add	r0, r5, r3
    b7b8:	e3a02058 	mov	r2, #88	; 0x58
    b7bc:	e3a01030 	mov	r1, #48	; 0x30
    b7c0:	e3520000 	cmp	r2, #0
    b7c4:	e4c01001 	strb	r1, [r0], #1
    b7c8:	e2833001 	add	r3, r3, #1
    b7cc:	e1a01002 	mov	r1, r2
    b7d0:	0a000036 	beq	b8b0 <double_to_hexstring.isra.0+0x1c8>
    b7d4:	e5fc2001 	ldrb	r2, [ip, #1]!
    b7d8:	eafffff8 	b	b7c0 <double_to_hexstring.isra.0+0xd8>
		if (fraction == 0) {
    b7dc:	e1962007 	orrs	r2, r6, r7
    b7e0:	1a00000c 	bne	b818 <double_to_hexstring.isra.0+0x130>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    b7e4:	e3510000 	cmp	r1, #0
    b7e8:	1a000087 	bne	ba0c <double_to_hexstring.isra.0+0x324>
    b7ec:	e59fc2a8 	ldr	ip, [pc, #680]	; ba9c <double_to_hexstring.isra.0+0x3b4>
    b7f0:	e0850003 	add	r0, r5, r3
    b7f4:	e3a0206e 	mov	r2, #110	; 0x6e
    b7f8:	e3a01069 	mov	r1, #105	; 0x69
    b7fc:	e3520000 	cmp	r2, #0
    b800:	e4c01001 	strb	r1, [r0], #1
    b804:	e2833001 	add	r3, r3, #1
    b808:	e1a01002 	mov	r1, r2
    b80c:	0affffdb 	beq	b780 <double_to_hexstring.isra.0+0x98>
    b810:	e5fc2001 	ldrb	r2, [ip, #1]!
    b814:	eafffff8 	b	b7fc <double_to_hexstring.isra.0+0x114>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    b818:	e59d2004 	ldr	r2, [sp, #4]
    b81c:	e3520000 	cmp	r2, #0
    b820:	1a00006e 	bne	b9e0 <double_to_hexstring.isra.0+0x2f8>
    b824:	e59fc274 	ldr	ip, [pc, #628]	; baa0 <double_to_hexstring.isra.0+0x3b8>
    b828:	e0850003 	add	r0, r5, r3
    b82c:	e3a02061 	mov	r2, #97	; 0x61
    b830:	e3a0106e 	mov	r1, #110	; 0x6e
    b834:	e3520000 	cmp	r2, #0
    b838:	e4c01001 	strb	r1, [r0], #1
    b83c:	e2833001 	add	r3, r3, #1
    b840:	e1a01002 	mov	r1, r2
    b844:	0affffcd 	beq	b780 <double_to_hexstring.isra.0+0x98>
    b848:	e5fc2001 	ldrb	r2, [ip, #1]!
    b84c:	eafffff8 	b	b834 <double_to_hexstring.isra.0+0x14c>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    b850:	e3520000 	cmp	r2, #0
    b854:	1a000077 	bne	ba38 <double_to_hexstring.isra.0+0x350>
    b858:	e59fc244 	ldr	ip, [pc, #580]	; baa4 <double_to_hexstring.isra.0+0x3bc>
    b85c:	e0850003 	add	r0, r5, r3
    b860:	e3a02065 	mov	r2, #101	; 0x65
    b864:	e3a01064 	mov	r1, #100	; 0x64
    b868:	e3520000 	cmp	r2, #0
    b86c:	e4c01001 	strb	r1, [r0], #1
    b870:	e2833001 	add	r3, r3, #1
    b874:	e1a01002 	mov	r1, r2
    b878:	0affffc0 	beq	b780 <double_to_hexstring.isra.0+0x98>
    b87c:	e5fc2001 	ldrb	r2, [ip, #1]!
    b880:	eafffff8 	b	b868 <double_to_hexstring.isra.0+0x180>
    b884:	e59fc21c 	ldr	ip, [pc, #540]	; baa8 <double_to_hexstring.isra.0+0x3c0>
    b888:	e0850003 	add	r0, r5, r3
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    b88c:	e3a02078 	mov	r2, #120	; 0x78
    b890:	e3a01030 	mov	r1, #48	; 0x30
    b894:	e3520000 	cmp	r2, #0
    b898:	e4c01001 	strb	r1, [r0], #1
    b89c:	e2833001 	add	r3, r3, #1
    b8a0:	e1a01002 	mov	r1, r2
    b8a4:	0a000049 	beq	b9d0 <double_to_hexstring.isra.0+0x2e8>
    b8a8:	e5fc2001 	ldrb	r2, [ip, #1]!
    b8ac:	eafffff8 	b	b894 <double_to_hexstring.isra.0+0x1ac>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    b8b0:	e30d2594 	movw	r2, #54676	; 0xd594
    b8b4:	e3402000 	movt	r2, #0
    b8b8:	e58d2008 	str	r2, [sp, #8]
		bool output_dot = false;
    b8bc:	e3a0a000 	mov	sl, #0
		for (int i = 52 - 4; i >= 0; i -= 4) {
    b8c0:	e3a01030 	mov	r1, #48	; 0x30
		int zero_count = 0;
    b8c4:	e1a0c00a 	mov	ip, sl
					OUT('0');
    b8c8:	e1a0e001 	mov	lr, r1
    b8cc:	ea000002 	b	b8dc <double_to_hexstring.isra.0+0x1f4>
		for (int i = 52 - 4; i >= 0; i -= 4) {
    b8d0:	e2411004 	sub	r1, r1, #4
    b8d4:	e3710004 	cmn	r1, #4
    b8d8:	0a00002d 	beq	b994 <double_to_hexstring.isra.0+0x2ac>
			uint digit = (fraction >> i) & 0xf;
    b8dc:	e1a02136 	lsr	r2, r6, r1
    b8e0:	e2610020 	rsb	r0, r1, #32
    b8e4:	e2418020 	sub	r8, r1, #32
    b8e8:	e1822017 	orr	r2, r2, r7, lsl r0
    b8ec:	e2834001 	add	r4, r3, #1
    b8f0:	e0850004 	add	r0, r5, r4
    b8f4:	e1822837 	orr	r2, r2, r7, lsr r8
    b8f8:	e0859003 	add	r9, r5, r3
			if (digit == 0) {
    b8fc:	e212200f 	ands	r2, r2, #15
				zero_count++;
    b900:	028cc001 	addeq	ip, ip, #1
			if (digit == 0) {
    b904:	0afffff1 	beq	b8d0 <double_to_hexstring.isra.0+0x1e8>
				if (!output_dot) {
    b908:	e35a0000 	cmp	sl, #0
    b90c:	e283a002 	add	sl, r3, #2
    b910:	e085b00a 	add	fp, r5, sl
    b914:	1a000008 	bne	b93c <double_to_hexstring.isra.0+0x254>
    b918:	e2838003 	add	r8, r3, #3
					OUT('.');
    b91c:	e3a0302e 	mov	r3, #46	; 0x2e
    b920:	e5c93000 	strb	r3, [r9]
    b924:	e1a03004 	mov	r3, r4
    b928:	e1a09000 	mov	r9, r0
    b92c:	e1a0400a 	mov	r4, sl
    b930:	e1a0000b 	mov	r0, fp
    b934:	e1a0a008 	mov	sl, r8
    b938:	e085b008 	add	fp, r5, r8
				while (zero_count > 0) {
    b93c:	e35c0000 	cmp	ip, #0
    b940:	0a00001c 	beq	b9b8 <double_to_hexstring.isra.0+0x2d0>
    b944:	e085400c 	add	r4, r5, ip
    b948:	e0850003 	add	r0, r5, r3
    b94c:	e0844003 	add	r4, r4, r3
					OUT('0');
    b950:	e4c0e001 	strb	lr, [r0], #1
				while (zero_count > 0) {
    b954:	e1540000 	cmp	r4, r0
    b958:	1afffffc 	bne	b950 <double_to_hexstring.isra.0+0x268>
    b95c:	e08cc003 	add	ip, ip, r3
    b960:	e28c3001 	add	r3, ip, #1
    b964:	e28c4002 	add	r4, ip, #2
    b968:	e0859003 	add	r9, r5, r3
    b96c:	e085800c 	add	r8, r5, ip
    b970:	e0850004 	add	r0, r5, r4
				buf[pos++] = table[digit];
    b974:	e59dc008 	ldr	ip, [sp, #8]
		for (int i = 52 - 4; i >= 0; i -= 4) {
    b978:	e2411004 	sub	r1, r1, #4
    b97c:	e3710004 	cmn	r1, #4
				buf[pos++] = table[digit];
    b980:	e3a0a001 	mov	sl, #1
    b984:	e7dc2002 	ldrb	r2, [ip, r2]
    b988:	e3a0c000 	mov	ip, #0
    b98c:	e5c82000 	strb	r2, [r8]
		for (int i = 52 - 4; i >= 0; i -= 4) {
    b990:	1affffd1 	bne	b8dc <double_to_hexstring.isra.0+0x1f4>
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    b994:	e59d3004 	ldr	r3, [sp, #4]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    b998:	e59d100c 	ldr	r1, [sp, #12]
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    b99c:	e3530000 	cmp	r3, #0
    b9a0:	03a03070 	moveq	r3, #112	; 0x70
    b9a4:	13a03050 	movne	r3, #80	; 0x50
    b9a8:	e5c93000 	strb	r3, [r9]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    b9ac:	ebffff10 	bl	b5f4 <exponent_to_string>
    b9b0:	e0803004 	add	r3, r0, r4
    b9b4:	eaffff71 	b	b780 <double_to_hexstring.isra.0+0x98>
				while (zero_count > 0) {
    b9b8:	e1a08009 	mov	r8, r9
    b9bc:	e1a03004 	mov	r3, r4
    b9c0:	e1a09000 	mov	r9, r0
    b9c4:	e1a0400a 	mov	r4, sl
    b9c8:	e1a0000b 	mov	r0, fp
    b9cc:	eaffffe8 	b	b974 <double_to_hexstring.isra.0+0x28c>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    b9d0:	e30d2584 	movw	r2, #54660	; 0xd584
    b9d4:	e3402000 	movt	r2, #0
    b9d8:	e58d2008 	str	r2, [sp, #8]
    b9dc:	eaffffb6 	b	b8bc <double_to_hexstring.isra.0+0x1d4>
    b9e0:	e59fc0c4 	ldr	ip, [pc, #196]	; baac <double_to_hexstring.isra.0+0x3c4>
    b9e4:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    b9e8:	e3a02041 	mov	r2, #65	; 0x41
    b9ec:	e3a0104e 	mov	r1, #78	; 0x4e
    b9f0:	e3520000 	cmp	r2, #0
    b9f4:	e4c01001 	strb	r1, [r0], #1
    b9f8:	e2833001 	add	r3, r3, #1
    b9fc:	e1a01002 	mov	r1, r2
    ba00:	0affff5e 	beq	b780 <double_to_hexstring.isra.0+0x98>
    ba04:	e5fc2001 	ldrb	r2, [ip, #1]!
    ba08:	eafffff8 	b	b9f0 <double_to_hexstring.isra.0+0x308>
    ba0c:	e59fc09c 	ldr	ip, [pc, #156]	; bab0 <double_to_hexstring.isra.0+0x3c8>
    ba10:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    ba14:	e3a0204e 	mov	r2, #78	; 0x4e
    ba18:	e3a01049 	mov	r1, #73	; 0x49
    ba1c:	e3520000 	cmp	r2, #0
    ba20:	e4c01001 	strb	r1, [r0], #1
    ba24:	e2833001 	add	r3, r3, #1
    ba28:	e1a01002 	mov	r1, r2
    ba2c:	0affff53 	beq	b780 <double_to_hexstring.isra.0+0x98>
    ba30:	e5fc2001 	ldrb	r2, [ip, #1]!
    ba34:	eafffff8 	b	ba1c <double_to_hexstring.isra.0+0x334>
    ba38:	e59fc074 	ldr	ip, [pc, #116]	; bab4 <double_to_hexstring.isra.0+0x3cc>
    ba3c:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    ba40:	e3a02045 	mov	r2, #69	; 0x45
    ba44:	e3a01044 	mov	r1, #68	; 0x44
    ba48:	e3520000 	cmp	r2, #0
    ba4c:	e4c01001 	strb	r1, [r0], #1
    ba50:	e2833001 	add	r3, r3, #1
    ba54:	e1a01002 	mov	r1, r2
    ba58:	0affff48 	beq	b780 <double_to_hexstring.isra.0+0x98>
    ba5c:	e5fc2001 	ldrb	r2, [ip, #1]!
    ba60:	eafffff8 	b	ba48 <double_to_hexstring.isra.0+0x360>
    ba64:	e59fc04c 	ldr	ip, [pc, #76]	; bab8 <double_to_hexstring.isra.0+0x3d0>
    ba68:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    ba6c:	e3a02058 	mov	r2, #88	; 0x58
    ba70:	e3a01030 	mov	r1, #48	; 0x30
    ba74:	ea000000 	b	ba7c <double_to_hexstring.isra.0+0x394>
    ba78:	e5fc2001 	ldrb	r2, [ip, #1]!
    ba7c:	e3520000 	cmp	r2, #0
    ba80:	e4c01001 	strb	r1, [r0], #1
    ba84:	e2833001 	add	r3, r3, #1
    ba88:	e1a01002 	mov	r1, r2
    ba8c:	1afffff9 	bne	ba78 <double_to_hexstring.isra.0+0x390>
    ba90:	eaffff3a 	b	b780 <double_to_hexstring.isra.0+0x98>
    ba94:	0000d551 	.word	0x0000d551
    ba98:	0000d56d 	.word	0x0000d56d
    ba9c:	0000d541 	.word	0x0000d541
    baa0:	0000d549 	.word	0x0000d549
    baa4:	0000d561 	.word	0x0000d561
    baa8:	0000d569 	.word	0x0000d569
    baac:	0000d54d 	.word	0x0000d54d
    bab0:	0000d545 	.word	0x0000d545
    bab4:	0000d565 	.word	0x0000d565
    bab8:	0000d559 	.word	0x0000d559

0000babc <longlong_to_hexstring.constprop.1>:
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    babc:	e92d4010 	push	{r4, lr}
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    bac0:	e30d1584 	movw	r1, #54660	; 0xd584
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    bac4:	e59dc008 	ldr	ip, [sp, #8]
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    bac8:	e3401000 	movt	r1, #0
    bacc:	e30d4594 	movw	r4, #54676	; 0xd594
    bad0:	e3404000 	movt	r4, #0
    bad4:	e31c0c01 	tst	ip, #256	; 0x100
    bad8:	e280c01e 	add	ip, r0, #30
    badc:	01a04001 	moveq	r4, r1
	buf[--pos] = 0;
    bae0:	e3a01000 	mov	r1, #0
    bae4:	e5c0101f 	strb	r1, [r0, #31]
		u /= 16;
    bae8:	e1a01222 	lsr	r1, r2, #4
    baec:	e1a00223 	lsr	r0, r3, #4
    baf0:	e1811e03 	orr	r1, r1, r3, lsl #28
		unsigned int digit = u % 16;
    baf4:	e202e00f 	and	lr, r2, #15
		u /= 16;
    baf8:	e1a03000 	mov	r3, r0
    bafc:	e1a02001 	mov	r2, r1
		buf[--pos] = table[digit];
    bb00:	e7d4100e 	ldrb	r1, [r4, lr]
	} while (u != 0);
    bb04:	e192e003 	orrs	lr, r2, r3
		buf[--pos] = table[digit];
    bb08:	e1a0000c 	mov	r0, ip
    bb0c:	e44c1001 	strb	r1, [ip], #-1
	} while (u != 0);
    bb10:	1afffff4 	bne	bae8 <longlong_to_hexstring.constprop.1+0x2c>
    bb14:	e8bd8010 	pop	{r4, pc}

0000bb18 <double_to_string.constprop.2>:
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    bb18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bb1c:	e1a0a000 	mov	sl, r0
    bb20:	ec576b10 	vmov	r6, r7, d0
    bb24:	e24dd018 	sub	sp, sp, #24
	if (neg) {
    bb28:	e3560000 	cmp	r6, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    bb2c:	e1a03007 	mov	r3, r7
	if (neg) {
    bb30:	e2d72000 	sbcs	r2, r7, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    bb34:	e7ea2a57 	ubfx	r2, r7, #20, #11
		OUT('-');
    bb38:	b3a0302d 	movlt	r3, #45	; 0x2d
	bool neg = !!(u.i & (1ULL << 63));
    bb3c:	e1a05007 	mov	r5, r7
		OUT('-');
    bb40:	b5c03000 	strblt	r3, [r0]
	if (exponent == 0x7ff) {
    bb44:	e30007ff 	movw	r0, #2047	; 0x7ff
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    bb48:	e7f39057 	ubfx	r9, r7, #0, #20
		OUT('-');
    bb4c:	b3a03001 	movlt	r3, #1
		d = -d;
    bb50:	b2277102 	eorlt	r7, r7, #-2147483648	; 0x80000000
	size_t pos = 0;
    bb54:	a3a03000 	movge	r3, #0
	if (exponent == 0x7ff) {
    bb58:	e1520000 	cmp	r2, r0
	bool neg = !!(u.i & (1ULL << 63));
    bb5c:	ee104a10 	vmov	r4, s0
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    bb60:	ee108a10 	vmov	r8, s0
	if (exponent == 0x7ff) {
    bb64:	0a000024 	beq	bbfc <double_to_string.constprop.2+0xe4>
	} else if (exponent == 0) {
    bb68:	e3520000 	cmp	r2, #0
    bb6c:	1a00000e 	bne	bbac <double_to_string.constprop.2+0x94>
		if (fraction == 0) {
    bb70:	e1982009 	orrs	r2, r8, r9
    bb74:	0a00003f 	beq	bc78 <double_to_string.constprop.2+0x160>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    bb78:	e3110c01 	tst	r1, #256	; 0x100
    bb7c:	1a00008f 	bne	bdc0 <double_to_string.constprop.2+0x2a8>
    bb80:	e59fc2e0 	ldr	ip, [pc, #736]	; be68 <double_to_string.constprop.2+0x350>
    bb84:	e08a0003 	add	r0, sl, r3
    bb88:	e3a02065 	mov	r2, #101	; 0x65
    bb8c:	e3a01064 	mov	r1, #100	; 0x64
    bb90:	e3520000 	cmp	r2, #0
    bb94:	e4c01001 	strb	r1, [r0], #1
    bb98:	e2833001 	add	r3, r3, #1
    bb9c:	e1a01002 	mov	r1, r2
    bba0:	0a000010 	beq	bbe8 <double_to_string.constprop.2+0xd0>
    bba4:	e5fc2001 	ldrb	r2, [ip, #1]!
    bba8:	eafffff8 	b	bb90 <double_to_string.constprop.2+0x78>
		if (exponent_signed < -52 || exponent_signed > 52) {
    bbac:	e2420ff2 	sub	r0, r2, #968	; 0x3c8
    bbb0:	e2400003 	sub	r0, r0, #3
    bbb4:	e3500068 	cmp	r0, #104	; 0x68
    bbb8:	9a00003a 	bls	bca8 <double_to_string.constprop.2+0x190>
    bbbc:	e59fc2a8 	ldr	ip, [pc, #680]	; be6c <double_to_string.constprop.2+0x354>
    bbc0:	e08a0003 	add	r0, sl, r3
    bbc4:	e3a02072 	mov	r2, #114	; 0x72
			OUTSTR("<range>");
    bbc8:	e3a0103c 	mov	r1, #60	; 0x3c
    bbcc:	ea000000 	b	bbd4 <double_to_string.constprop.2+0xbc>
    bbd0:	e5fc2001 	ldrb	r2, [ip, #1]!
    bbd4:	e3520000 	cmp	r2, #0
    bbd8:	e4c01001 	strb	r1, [r0], #1
    bbdc:	e2833001 	add	r3, r3, #1
    bbe0:	e1a01002 	mov	r1, r2
    bbe4:	1afffff9 	bne	bbd0 <double_to_string.constprop.2+0xb8>
	buf[pos] = 0;
    bbe8:	e1a0000a 	mov	r0, sl
    bbec:	e3a02000 	mov	r2, #0
    bbf0:	e7ca2003 	strb	r2, [sl, r3]
}
    bbf4:	e28dd018 	add	sp, sp, #24
    bbf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		if (fraction == 0) {
    bbfc:	e1982009 	orrs	r2, r8, r9
    bc00:	e2011c01 	and	r1, r1, #256	; 0x100
    bc04:	1a00000d 	bne	bc40 <double_to_string.constprop.2+0x128>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    bc08:	e3510000 	cmp	r1, #0
    bc0c:	1a00005f 	bne	bd90 <double_to_string.constprop.2+0x278>
    bc10:	e08a0003 	add	r0, sl, r3
    bc14:	e59fc254 	ldr	ip, [pc, #596]	; be70 <double_to_string.constprop.2+0x358>
    bc18:	e3a0206e 	mov	r2, #110	; 0x6e
    bc1c:	e3a01069 	mov	r1, #105	; 0x69
    bc20:	ea000000 	b	bc28 <double_to_string.constprop.2+0x110>
    bc24:	e5fc2001 	ldrb	r2, [ip, #1]!
    bc28:	e3520000 	cmp	r2, #0
    bc2c:	e4c01001 	strb	r1, [r0], #1
    bc30:	e2833001 	add	r3, r3, #1
    bc34:	e1a01002 	mov	r1, r2
    bc38:	1afffff9 	bne	bc24 <double_to_string.constprop.2+0x10c>
    bc3c:	eaffffe9 	b	bbe8 <double_to_string.constprop.2+0xd0>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    bc40:	e3510000 	cmp	r1, #0
    bc44:	1a000045 	bne	bd60 <double_to_string.constprop.2+0x248>
    bc48:	e08a0003 	add	r0, sl, r3
    bc4c:	e59fc220 	ldr	ip, [pc, #544]	; be74 <double_to_string.constprop.2+0x35c>
    bc50:	e3a02061 	mov	r2, #97	; 0x61
    bc54:	e3a0106e 	mov	r1, #110	; 0x6e
    bc58:	ea000000 	b	bc60 <double_to_string.constprop.2+0x148>
    bc5c:	e5fc2001 	ldrb	r2, [ip, #1]!
    bc60:	e3520000 	cmp	r2, #0
    bc64:	e4c01001 	strb	r1, [r0], #1
    bc68:	e2833001 	add	r3, r3, #1
    bc6c:	e1a01002 	mov	r1, r2
    bc70:	1afffff9 	bne	bc5c <double_to_string.constprop.2+0x144>
    bc74:	eaffffdb 	b	bbe8 <double_to_string.constprop.2+0xd0>
    bc78:	e59fc1f8 	ldr	ip, [pc, #504]	; be78 <double_to_string.constprop.2+0x360>
    bc7c:	e08a0003 	add	r0, sl, r3
		if (fraction == 0) {
    bc80:	e3a0202e 	mov	r2, #46	; 0x2e
			OUTSTR("0.000000");
    bc84:	e3a01030 	mov	r1, #48	; 0x30
    bc88:	ea000000 	b	bc90 <double_to_string.constprop.2+0x178>
    bc8c:	e5fc2001 	ldrb	r2, [ip, #1]!
    bc90:	e3520000 	cmp	r2, #0
    bc94:	e4c01001 	strb	r1, [r0], #1
    bc98:	e2833001 	add	r3, r3, #1
    bc9c:	e1a01002 	mov	r1, r2
    bca0:	1afffff9 	bne	bc8c <double_to_string.constprop.2+0x174>
    bca4:	eaffffcf 	b	bbe8 <double_to_string.constprop.2+0xd0>
    bca8:	e28ac018 	add	ip, sl, #24
				OUTREV('0');
    bcac:	e3a00030 	mov	r0, #48	; 0x30
			OUTREV(0);
    bcb0:	e3a0e000 	mov	lr, #0
    bcb4:	e1a0300a 	mov	r3, sl
    bcb8:	e5e3e01f 	strb	lr, [r3, #31]!
				OUTREV('0');
    bcbc:	e5630001 	strb	r0, [r3, #-1]!
			for (int i = 0; i <= 6; i++)
    bcc0:	e153000c 	cmp	r3, ip
    bcc4:	1afffffc 	bne	bcbc <double_to_string.constprop.2+0x1a4>
		int exponent_signed = exponent - 1023;
    bcc8:	e2423fff 	sub	r3, r2, #1020	; 0x3fc
    bccc:	e2433003 	sub	r3, r3, #3
			if (exponent_signed >= 0) {
    bcd0:	e3530000 	cmp	r3, #0
				OUTREV('0');
    bcd4:	b3a09017 	movlt	r9, #23
    bcd8:	b5ca0017 	strblt	r0, [sl, #23]
			if (exponent_signed >= 0) {
    bcdc:	aa000042 	bge	bdec <double_to_string.constprop.2+0x2d4>
				uint32_t frac = ((d - u) * 1000000) + .5;
    bce0:	ed9f6b5e 	vldr	d6, [pc, #376]	; be60 <double_to_string.constprop.2+0x348>
			buf[decimal_spot] = '.';
    bce4:	e3a0302e 	mov	r3, #46	; 0x2e
				uint32_t frac = ((d - u) * 1000000) + .5;
    bce8:	eeb67b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    bcec:	ec476b15 	vmov	d5, r6, r7
			buf[decimal_spot] = '.';
    bcf0:	e5ca3020 	strb	r3, [sl, #32]
				uint32_t frac = ((d - u) * 1000000) + .5;
    bcf4:	ee057b06 	vmla.f64	d7, d5, d6
    bcf8:	eefc7bc7 	vcvt.u32.f64	s15, d7
    bcfc:	ee171a90 	vmov	r1, s15
				while (frac != 0) {
    bd00:	e3510000 	cmp	r1, #0
    bd04:	0a00000a 	beq	bd34 <double_to_string.constprop.2+0x21c>
					uint digit = frac % 10;
    bd08:	e30ccccd 	movw	ip, #52429	; 0xcccd
    bd0c:	e28a0027 	add	r0, sl, #39	; 0x27
    bd10:	e34ccccc 	movt	ip, #52428	; 0xcccc
    bd14:	e083219c 	umull	r2, r3, ip, r1
    bd18:	e1a031a3 	lsr	r3, r3, #3
    bd1c:	e0832103 	add	r2, r3, r3, lsl #2
    bd20:	e0412082 	sub	r2, r1, r2, lsl #1
				while (frac != 0) {
    bd24:	e2531000 	subs	r1, r3, #0
					buf[--i] = digit + '0';
    bd28:	e2823030 	add	r3, r2, #48	; 0x30
    bd2c:	e5603001 	strb	r3, [r0, #-1]!
				while (frac != 0) {
    bd30:	1afffff7 	bne	bd14 <double_to_string.constprop.2+0x1fc>
			if (neg)
    bd34:	e3540000 	cmp	r4, #0
    bd38:	e2d53000 	sbcs	r3, r5, #0
    bd3c:	a08a0009 	addge	r0, sl, r9
    bd40:	aaffffab 	bge	bbf4 <double_to_string.constprop.2+0xdc>
				OUTREV('-');
    bd44:	e3590000 	cmp	r9, #0
    bd48:	12490001 	subne	r0, r9, #1
    bd4c:	13a0302d 	movne	r3, #45	; 0x2d
    bd50:	17ca3000 	strbne	r3, [sl, r0]
    bd54:	01a0000a 	moveq	r0, sl
    bd58:	108a0000 	addne	r0, sl, r0
    bd5c:	eaffffa4 	b	bbf4 <double_to_string.constprop.2+0xdc>
    bd60:	e59fc114 	ldr	ip, [pc, #276]	; be7c <double_to_string.constprop.2+0x364>
    bd64:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    bd68:	e3a02041 	mov	r2, #65	; 0x41
    bd6c:	e3a0104e 	mov	r1, #78	; 0x4e
    bd70:	ea000000 	b	bd78 <double_to_string.constprop.2+0x260>
    bd74:	e5fc2001 	ldrb	r2, [ip, #1]!
    bd78:	e3520000 	cmp	r2, #0
    bd7c:	e4c01001 	strb	r1, [r0], #1
    bd80:	e2833001 	add	r3, r3, #1
    bd84:	e1a01002 	mov	r1, r2
    bd88:	1afffff9 	bne	bd74 <double_to_string.constprop.2+0x25c>
    bd8c:	eaffff95 	b	bbe8 <double_to_string.constprop.2+0xd0>
    bd90:	e59fc0e8 	ldr	ip, [pc, #232]	; be80 <double_to_string.constprop.2+0x368>
    bd94:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    bd98:	e3a0204e 	mov	r2, #78	; 0x4e
    bd9c:	e3a01049 	mov	r1, #73	; 0x49
    bda0:	ea000000 	b	bda8 <double_to_string.constprop.2+0x290>
    bda4:	e5fc2001 	ldrb	r2, [ip, #1]!
    bda8:	e3520000 	cmp	r2, #0
    bdac:	e4c01001 	strb	r1, [r0], #1
    bdb0:	e2833001 	add	r3, r3, #1
    bdb4:	e1a01002 	mov	r1, r2
    bdb8:	1afffff9 	bne	bda4 <double_to_string.constprop.2+0x28c>
    bdbc:	eaffff89 	b	bbe8 <double_to_string.constprop.2+0xd0>
    bdc0:	e59fc0bc 	ldr	ip, [pc, #188]	; be84 <double_to_string.constprop.2+0x36c>
    bdc4:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    bdc8:	e3a02045 	mov	r2, #69	; 0x45
    bdcc:	e3a01044 	mov	r1, #68	; 0x44
    bdd0:	e3520000 	cmp	r2, #0
    bdd4:	e4c01001 	strb	r1, [r0], #1
    bdd8:	e2833001 	add	r3, r3, #1
    bddc:	e1a01002 	mov	r1, r2
    bde0:	0affff80 	beq	bbe8 <double_to_string.constprop.2+0xd0>
    bde4:	e5fc2001 	ldrb	r2, [ip, #1]!
    bde8:	eafffff8 	b	bdd0 <double_to_string.constprop.2+0x2b8>
				u >>= (52 - exponent_signed);
    bdec:	e2633034 	rsb	r3, r3, #52	; 0x34
				u |= (1ULL<<52);
    bdf0:	e3892601 	orr	r2, r9, #1048576	; 0x100000
				u >>= (52 - exponent_signed);
    bdf4:	e1a08338 	lsr	r8, r8, r3
    bdf8:	e263c020 	rsb	ip, r3, #32
    bdfc:	e2430020 	sub	r0, r3, #32
    be00:	e1a09332 	lsr	r9, r2, r3
    be04:	e1888c12 	orr	r8, r8, r2, lsl ip
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    be08:	e58d1004 	str	r1, [sp, #4]
				u |= (1ULL<<52);
    be0c:	e3a0c000 	mov	ip, #0
				u >>= (52 - exponent_signed);
    be10:	e1888032 	orr	r8, r8, r2, lsr r0
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    be14:	e28d1018 	add	r1, sp, #24
    be18:	e3a00019 	mov	r0, #25
    be1c:	e561c001 	strb	ip, [r1, #-1]!
    be20:	e1a03009 	mov	r3, r9
    be24:	e1a02008 	mov	r2, r8
    be28:	e58d1008 	str	r1, [sp, #8]
    be2c:	e58d0000 	str	r0, [sp]
    be30:	e1a0000a 	mov	r0, sl
    be34:	ebfffdad 	bl	b4f0 <longlong_to_string>
    be38:	e1a01009 	mov	r1, r9
				pos = s - buf;
    be3c:	e040900a 	sub	r9, r0, sl
    be40:	e1a00008 	mov	r0, r8
    be44:	fa00038b 	blx	cc78 <__aeabi_ul2d>
    be48:	ec476b17 	vmov	d7, r6, r7
    be4c:	ec410b16 	vmov	d6, r0, r1
    be50:	ee377b46 	vsub.f64	d7, d7, d6
    be54:	ec576b17 	vmov	r6, r7, d7
    be58:	eaffffa0 	b	bce0 <double_to_string.constprop.2+0x1c8>
    be5c:	e320f000 	nop	{0}
    be60:	00000000 	.word	0x00000000
    be64:	412e8480 	.word	0x412e8480
    be68:	0000d561 	.word	0x0000d561
    be6c:	0000d57d 	.word	0x0000d57d
    be70:	0000d541 	.word	0x0000d541
    be74:	0000d549 	.word	0x0000d549
    be78:	0000d571 	.word	0x0000d571
    be7c:	0000d54d 	.word	0x0000d54d
    be80:	0000d545 	.word	0x0000d545
    be84:	0000d565 	.word	0x0000d565

0000be88 <_printf_engine>:
		str[wlen] = '\0';
	return wlen;
}

int _printf_engine(_printf_engine_output_func out, void *state, const char *fmt, va_list ap)
{
    be88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
				if (s == 0)
					s = "<null>";
    be8c:	e30dc538 	movw	ip, #54584	; 0xd538
{
    be90:	e1a0b000 	mov	fp, r0
	size_t chars_written = 0;
    be94:	e3a06000 	mov	r6, #0
{
    be98:	e1a07001 	mov	r7, r1
    be9c:	e1a00002 	mov	r0, r2
    bea0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
					s = "<null>";
    bea4:	e340c000 	movt	ip, #0
{
    bea8:	e58d3010 	str	r3, [sp, #16]
					s = "<null>";
    beac:	e58dc014 	str	ip, [sp, #20]
		while ((c = *fmt++) != 0) {
    beb0:	e5d01000 	ldrb	r1, [r0]
		signchar = '\0';
    beb4:	e3a03000 	mov	r3, #0
		while ((c = *fmt++) != 0) {
    beb8:	e2804001 	add	r4, r0, #1
		signchar = '\0';
    bebc:	e5cd3027 	strb	r3, [sp, #39]	; 0x27
		while ((c = *fmt++) != 0) {
    bec0:	e3510000 	cmp	r1, #0
    bec4:	0a000008 	beq	beec <_printf_engine+0x64>
			if (c == '%')
    bec8:	e3510025 	cmp	r1, #37	; 0x25
    becc:	1a000002 	bne	bedc <_printf_engine+0x54>
    bed0:	ea00000c 	b	bf08 <_printf_engine+0x80>
    bed4:	e3530025 	cmp	r3, #37	; 0x25
    bed8:	0a00000b 	beq	bf0c <_printf_engine+0x84>
    bedc:	e0441000 	sub	r1, r4, r0
		while ((c = *fmt++) != 0) {
    bee0:	e4d43001 	ldrb	r3, [r4], #1
    bee4:	e3530000 	cmp	r3, #0
    bee8:	1afffff9 	bne	bed4 <_printf_engine+0x4c>
		OUTPUT_STRING(s, string_len);
    beec:	e1a02007 	mov	r2, r7
    bef0:	e12fff3b 	blx	fp
    bef4:	e2503000 	subs	r3, r0, #0
    bef8:	aa00006c 	bge	c0b0 <_printf_engine+0x228>
#undef OUTPUT_STRING
#undef OUTPUT_CHAR

exit:
	return (err < 0) ? err : (int)chars_written;
}
    befc:	e1a00003 	mov	r0, r3
    bf00:	e28dd04c 	add	sp, sp, #76	; 0x4c
    bf04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		string_len = 0;
    bf08:	e3a01000 	mov	r1, #0
		OUTPUT_STRING(s, string_len);
    bf0c:	e1a02007 	mov	r2, r7
    bf10:	e12fff3b 	blx	fp
    bf14:	e2503000 	subs	r3, r0, #0
    bf18:	bafffff7 	blt	befc <_printf_engine+0x74>
		format_num = 0;
    bf1c:	e3a05000 	mov	r5, #0
		OUTPUT_STRING(s, string_len);
    bf20:	e0866003 	add	r6, r6, r3
		flags = 0;
    bf24:	e1a0a005 	mov	sl, r5
		c = *fmt++;
    bf28:	e4d49001 	ldrb	r9, [r4], #1
		if (c == 0)
    bf2c:	e3590000 	cmp	r9, #0
    bf30:	0a00005f 	beq	c0b4 <_printf_engine+0x22c>
		switch (c) {
    bf34:	e2493020 	sub	r3, r9, #32
    bf38:	e353005a 	cmp	r3, #90	; 0x5a
    bf3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bf40:	ea000163 	b	c4d4 <_printf_engine+0x64c>
    bf44:	0000c390 	.word	0x0000c390
    bf48:	0000c4d4 	.word	0x0000c4d4
    bf4c:	0000c4d4 	.word	0x0000c4d4
    bf50:	0000c358 	.word	0x0000c358
    bf54:	0000c4d4 	.word	0x0000c4d4
    bf58:	0000c360 	.word	0x0000c360
    bf5c:	0000c4d4 	.word	0x0000c4d4
    bf60:	0000c4d4 	.word	0x0000c4d4
    bf64:	0000c4d4 	.word	0x0000c4d4
    bf68:	0000c4d4 	.word	0x0000c4d4
    bf6c:	0000c4d4 	.word	0x0000c4d4
    bf70:	0000c398 	.word	0x0000c398
    bf74:	0000c4d4 	.word	0x0000c4d4
    bf78:	0000c3a0 	.word	0x0000c3a0
    bf7c:	0000bf28 	.word	0x0000bf28
    bf80:	0000c4d4 	.word	0x0000c4d4
    bf84:	0000c3a8 	.word	0x0000c3a8
    bf88:	0000c3a8 	.word	0x0000c3a8
    bf8c:	0000c3a8 	.word	0x0000c3a8
    bf90:	0000c3a8 	.word	0x0000c3a8
    bf94:	0000c3a8 	.word	0x0000c3a8
    bf98:	0000c3a8 	.word	0x0000c3a8
    bf9c:	0000c3a8 	.word	0x0000c3a8
    bfa0:	0000c3a8 	.word	0x0000c3a8
    bfa4:	0000c3a8 	.word	0x0000c3a8
    bfa8:	0000c3a8 	.word	0x0000c3a8
    bfac:	0000c4d4 	.word	0x0000c4d4
    bfb0:	0000c4d4 	.word	0x0000c4d4
    bfb4:	0000c4d4 	.word	0x0000c4d4
    bfb8:	0000c4d4 	.word	0x0000c4d4
    bfbc:	0000c4d4 	.word	0x0000c4d4
    bfc0:	0000c4d4 	.word	0x0000c4d4
    bfc4:	0000c4d4 	.word	0x0000c4d4
    bfc8:	0000c2b4 	.word	0x0000c2b4
    bfcc:	0000c4d4 	.word	0x0000c4d4
    bfd0:	0000c4d4 	.word	0x0000c4d4
    bfd4:	0000c4d4 	.word	0x0000c4d4
    bfd8:	0000c4d4 	.word	0x0000c4d4
    bfdc:	0000c21c 	.word	0x0000c21c
    bfe0:	0000c4d4 	.word	0x0000c4d4
    bfe4:	0000c4d4 	.word	0x0000c4d4
    bfe8:	0000c4d4 	.word	0x0000c4d4
    bfec:	0000c4d4 	.word	0x0000c4d4
    bff0:	0000c4d4 	.word	0x0000c4d4
    bff4:	0000c4d4 	.word	0x0000c4d4
    bff8:	0000c4d4 	.word	0x0000c4d4
    bffc:	0000c4d4 	.word	0x0000c4d4
    c000:	0000c4d4 	.word	0x0000c4d4
    c004:	0000c4d4 	.word	0x0000c4d4
    c008:	0000c4d4 	.word	0x0000c4d4
    c00c:	0000c4d4 	.word	0x0000c4d4
    c010:	0000c4d4 	.word	0x0000c4d4
    c014:	0000c4d4 	.word	0x0000c4d4
    c018:	0000c4d4 	.word	0x0000c4d4
    c01c:	0000c4d4 	.word	0x0000c4d4
    c020:	0000c4d4 	.word	0x0000c4d4
    c024:	0000c490 	.word	0x0000c490
    c028:	0000c4d4 	.word	0x0000c4d4
    c02c:	0000c4d4 	.word	0x0000c4d4
    c030:	0000c4d4 	.word	0x0000c4d4
    c034:	0000c4d4 	.word	0x0000c4d4
    c038:	0000c4d4 	.word	0x0000c4d4
    c03c:	0000c4d4 	.word	0x0000c4d4
    c040:	0000c4d4 	.word	0x0000c4d4
    c044:	0000c4d4 	.word	0x0000c4d4
    c048:	0000c2b8 	.word	0x0000c2b8
    c04c:	0000c4d4 	.word	0x0000c4d4
    c050:	0000c3c4 	.word	0x0000c3c4
    c054:	0000c3fc 	.word	0x0000c3fc
    c058:	0000c4d4 	.word	0x0000c4d4
    c05c:	0000c220 	.word	0x0000c220
    c060:	0000c4d4 	.word	0x0000c4d4
    c064:	0000c43c 	.word	0x0000c43c
    c068:	0000c3fc 	.word	0x0000c3fc
    c06c:	0000c4a8 	.word	0x0000c4a8
    c070:	0000c4d4 	.word	0x0000c4d4
    c074:	0000c42c 	.word	0x0000c42c
    c078:	0000c4d4 	.word	0x0000c4d4
    c07c:	0000c2e4 	.word	0x0000c2e4
    c080:	0000c4d4 	.word	0x0000c4d4
    c084:	0000c0c4 	.word	0x0000c0c4
    c088:	0000c4d4 	.word	0x0000c4d4
    c08c:	0000c4d4 	.word	0x0000c4d4
    c090:	0000c4b0 	.word	0x0000c4b0
    c094:	0000c4a0 	.word	0x0000c4a0
    c098:	0000c44c 	.word	0x0000c44c
    c09c:	0000c4d4 	.word	0x0000c4d4
    c0a0:	0000c4d4 	.word	0x0000c4d4
    c0a4:	0000c0c8 	.word	0x0000c0c8
    c0a8:	0000c4d4 	.word	0x0000c4d4
    c0ac:	0000c350 	.word	0x0000c350
		OUTPUT_STRING(s, string_len);
    c0b0:	e0866003 	add	r6, r6, r3
	return (err < 0) ? err : (int)chars_written;
    c0b4:	e1a03006 	mov	r3, r6
}
    c0b8:	e1a00003 	mov	r0, r3
    c0bc:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c0c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= LONGFLAG | ALTFLAG;
    c0c4:	e38aa081 	orr	sl, sl, #129	; 0x81
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    c0c8:	e31a0002 	tst	sl, #2
    c0cc:	0a00008f 	beq	c310 <_printf_engine+0x488>
    c0d0:	e59d3010 	ldr	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c0d4:	e2833007 	add	r3, r3, #7
    c0d8:	e3c33007 	bic	r3, r3, #7
    c0dc:	e2832008 	add	r2, r3, #8
    c0e0:	e58d2010 	str	r2, [sp, #16]
    c0e4:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    c0e8:	e58da000 	str	sl, [sp]
    c0ec:	e28d0028 	add	r0, sp, #40	; 0x28
    c0f0:	ebfffe71 	bl	babc <longlong_to_hexstring.constprop.1>
				if (flags & ALTFLAG) {
    c0f4:	e31a0080 	tst	sl, #128	; 0x80
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    c0f8:	e1a09000 	mov	r9, r0
				if (flags & ALTFLAG) {
    c0fc:	0a000051 	beq	c248 <_printf_engine+0x3c0>
					OUTPUT_CHAR('0');
    c100:	e3a03030 	mov	r3, #48	; 0x30
    c104:	e28d8048 	add	r8, sp, #72	; 0x48
    c108:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    c10c:	e1a02007 	mov	r2, r7
    c110:	e1a00008 	mov	r0, r8
    c114:	e3a01001 	mov	r1, #1
    c118:	e12fff3b 	blx	fp
    c11c:	e2503000 	subs	r3, r0, #0
    c120:	baffff75 	blt	befc <_printf_engine+0x74>
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    c124:	e31a0c01 	tst	sl, #256	; 0x100
    c128:	e1a00008 	mov	r0, r8
    c12c:	03a0c078 	moveq	ip, #120	; 0x78
    c130:	13a0c058 	movne	ip, #88	; 0x58
    c134:	e1a02007 	mov	r2, r7
    c138:	e3a01001 	mov	r1, #1
    c13c:	e5cdc024 	strb	ip, [sp, #36]	; 0x24
					OUTPUT_CHAR('0');
    c140:	e0836006 	add	r6, r3, r6
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    c144:	e12fff3b 	blx	fp
    c148:	e2503000 	subs	r3, r0, #0
    c14c:	baffff6a 	blt	befc <_printf_engine+0x74>
		if (flags & LEFTFORMATFLAG) {
    c150:	e31a0b02 	tst	sl, #2048	; 0x800
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    c154:	e0836006 	add	r6, r3, r6
			OUTPUT_STRING(s, SIZE_MAX);
    c158:	e1a00009 	mov	r0, r9
		if (flags & LEFTFORMATFLAG) {
    c15c:	1a00003c 	bne	c254 <_printf_engine+0x3cc>
    c160:	e20a8a01 	and	r8, sl, #4096	; 0x1000
    c164:	e58d8018 	str	r8, [sp, #24]
			string_len = strlen(s);
    c168:	eb0001dc 	bl	c8e0 <strlen>
			if (signchar != '\0' && format_num > 0)
    c16c:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
			string_len = strlen(s);
    c170:	e1a0a000 	mov	sl, r0
			if (signchar != '\0' && format_num > 0)
    c174:	e3530000 	cmp	r3, #0
    c178:	0a000070 	beq	c340 <_printf_engine+0x4b8>
    c17c:	e3550000 	cmp	r5, #0
    c180:	0a000102 	beq	c590 <_printf_engine+0x708>
			if (flags & LEADZEROFLAG && signchar != '\0')
    c184:	e3580000 	cmp	r8, #0
				format_num--;
    c188:	e2455001 	sub	r5, r5, #1
			if (flags & LEADZEROFLAG && signchar != '\0')
    c18c:	0a00016c 	beq	c744 <_printf_engine+0x8bc>
				OUTPUT_CHAR(signchar);
    c190:	e28d8048 	add	r8, sp, #72	; 0x48
    c194:	e1a02007 	mov	r2, r7
    c198:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    c19c:	e3a01001 	mov	r1, #1
    c1a0:	e1a00008 	mov	r0, r8
    c1a4:	e12fff3b 	blx	fp
    c1a8:	e2503000 	subs	r3, r0, #0
    c1ac:	baffff52 	blt	befc <_printf_engine+0x74>
			for (; format_num > string_len; format_num--)
    c1b0:	e15a0005 	cmp	sl, r5
				OUTPUT_CHAR(signchar);
    c1b4:	e0866003 	add	r6, r6, r3
			for (; format_num > string_len; format_num--)
    c1b8:	2a0000e7 	bcs	c55c <_printf_engine+0x6d4>
    c1bc:	e59d3018 	ldr	r3, [sp, #24]
    c1c0:	e58d401c 	str	r4, [sp, #28]
    c1c4:	e1a0400a 	mov	r4, sl
    c1c8:	e1a0a008 	mov	sl, r8
    c1cc:	e3530000 	cmp	r3, #0
    c1d0:	13a03030 	movne	r3, #48	; 0x30
    c1d4:	03a03020 	moveq	r3, #32
    c1d8:	e1a08003 	mov	r8, r3
    c1dc:	ea000001 	b	c1e8 <_printf_engine+0x360>
    c1e0:	e1540005 	cmp	r4, r5
    c1e4:	0a0000cc 	beq	c51c <_printf_engine+0x694>
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    c1e8:	e1a02007 	mov	r2, r7
    c1ec:	e3a01001 	mov	r1, #1
    c1f0:	e1a0000a 	mov	r0, sl
    c1f4:	e5cd8024 	strb	r8, [sp, #36]	; 0x24
    c1f8:	e12fff3b 	blx	fp
    c1fc:	e3500000 	cmp	r0, #0
			for (; format_num > string_len; format_num--)
    c200:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    c204:	e0866000 	add	r6, r6, r0
    c208:	aafffff4 	bge	c1e0 <_printf_engine+0x358>
    c20c:	e1a03000 	mov	r3, r0
}
    c210:	e1a00003 	mov	r0, r3
    c214:	e28dd04c 	add	sp, sp, #76	; 0x4c
    c218:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= CAPSFLAG;
    c21c:	e38aac01 	orr	sl, sl, #256	; 0x100
				double d = va_arg(ap, double);
    c220:	e59d3010 	ldr	r3, [sp, #16]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    c224:	e1a0100a 	mov	r1, sl
    c228:	e28d0028 	add	r0, sp, #40	; 0x28
				double d = va_arg(ap, double);
    c22c:	e2833007 	add	r3, r3, #7
    c230:	e3c33007 	bic	r3, r3, #7
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    c234:	ed930b00 	vldr	d0, [r3]
				double d = va_arg(ap, double);
    c238:	e2833008 	add	r3, r3, #8
    c23c:	e58d3010 	str	r3, [sp, #16]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    c240:	ebfffe34 	bl	bb18 <double_to_string.constprop.2>
    c244:	e1a09000 	mov	r9, r0
		if (flags & LEFTFORMATFLAG) {
    c248:	e31a0b02 	tst	sl, #2048	; 0x800
			OUTPUT_STRING(s, SIZE_MAX);
    c24c:	e1a00009 	mov	r0, r9
		if (flags & LEFTFORMATFLAG) {
    c250:	0affffc2 	beq	c160 <_printf_engine+0x2d8>
			OUTPUT_STRING(s, SIZE_MAX);
    c254:	e1a02007 	mov	r2, r7
    c258:	e3e01000 	mvn	r1, #0
    c25c:	e12fff3b 	blx	fp
    c260:	e2503000 	subs	r3, r0, #0
    c264:	baffff24 	blt	befc <_printf_engine+0x74>
			for (; format_num > written; format_num--)
    c268:	e1530005 	cmp	r3, r5
			OUTPUT_STRING(s, SIZE_MAX);
    c26c:	e1a09003 	mov	r9, r3
    c270:	e0866003 	add	r6, r6, r3
			for (; format_num > written; format_num--)
    c274:	2a000023 	bcs	c308 <_printf_engine+0x480>
    c278:	e28d8024 	add	r8, sp, #36	; 0x24
				OUTPUT_CHAR(' ');
    c27c:	e3a0a020 	mov	sl, #32
    c280:	ea000001 	b	c28c <_printf_engine+0x404>
			for (; format_num > written; format_num--)
    c284:	e1590005 	cmp	r9, r5
    c288:	0a00001e 	beq	c308 <_printf_engine+0x480>
				OUTPUT_CHAR(' ');
    c28c:	e1a02007 	mov	r2, r7
    c290:	e3a01001 	mov	r1, #1
    c294:	e1a00008 	mov	r0, r8
    c298:	e5cda024 	strb	sl, [sp, #36]	; 0x24
    c29c:	e12fff3b 	blx	fp
    c2a0:	e3500000 	cmp	r0, #0
			for (; format_num > written; format_num--)
    c2a4:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(' ');
    c2a8:	e0866000 	add	r6, r6, r0
    c2ac:	aafffff4 	bge	c284 <_printf_engine+0x3fc>
    c2b0:	eaffffd5 	b	c20c <_printf_engine+0x384>
				flags |= CAPSFLAG;
    c2b4:	e38aac01 	orr	sl, sl, #256	; 0x100
				double d = va_arg(ap, double);
    c2b8:	e59d3010 	ldr	r3, [sp, #16]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    c2bc:	e1a0100a 	mov	r1, sl
    c2c0:	e28d0028 	add	r0, sp, #40	; 0x28
				double d = va_arg(ap, double);
    c2c4:	e2833007 	add	r3, r3, #7
    c2c8:	e3c33007 	bic	r3, r3, #7
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    c2cc:	ed930b00 	vldr	d0, [r3]
				double d = va_arg(ap, double);
    c2d0:	e2833008 	add	r3, r3, #8
    c2d4:	e58d3010 	str	r3, [sp, #16]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    c2d8:	ebfffd02 	bl	b6e8 <double_to_hexstring.isra.0>
    c2dc:	e1a09000 	mov	r9, r0
				goto _output_string;
    c2e0:	eaffffd8 	b	c248 <_printf_engine+0x3c0>
				ptr = va_arg(ap, void *);
    c2e4:	e59d3010 	ldr	r3, [sp, #16]
				if (flags & LONGLONGFLAG)
    c2e8:	e31a0002 	tst	sl, #2
				ptr = va_arg(ap, void *);
    c2ec:	e2832004 	add	r2, r3, #4
    c2f0:	e5933000 	ldr	r3, [r3]
				if (flags & LONGLONGFLAG)
    c2f4:	0a0000c3 	beq	c608 <_printf_engine+0x780>
				ptr = va_arg(ap, void *);
    c2f8:	e58d2010 	str	r2, [sp, #16]
					*(long long *)ptr = chars_written;
    c2fc:	e3a02000 	mov	r2, #0
    c300:	e5836000 	str	r6, [r3]
    c304:	e5832004 	str	r2, [r3, #4]
				ptr = va_arg(ap, void *);
    c308:	e1a00004 	mov	r0, r4
    c30c:	eafffee7 	b	beb0 <_printf_engine+0x28>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c310:	e31a0001 	tst	sl, #1
    c314:	1a000097 	bne	c578 <_printf_engine+0x6f0>
    c318:	e31a0008 	tst	sl, #8
    c31c:	1a0000c6 	bne	c63c <_printf_engine+0x7b4>
    c320:	e31a0004 	tst	sl, #4
    c324:	0a0000d6 	beq	c684 <_printf_engine+0x7fc>
    c328:	e59d1010 	ldr	r1, [sp, #16]
    c32c:	e3a03000 	mov	r3, #0
    c330:	e1d120b0 	ldrh	r2, [r1]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    c334:	e2811004 	add	r1, r1, #4
    c338:	e58d1010 	str	r1, [sp, #16]
    c33c:	eaffff69 	b	c0e8 <_printf_engine+0x260>
			for (; format_num > string_len; format_num--)
    c340:	e1550000 	cmp	r5, r0
    c344:	9a000075 	bls	c520 <_printf_engine+0x698>
    c348:	e28d8024 	add	r8, sp, #36	; 0x24
    c34c:	eaffff9a 	b	c1bc <_printf_engine+0x334>
				flags |= SIZETFLAG;
    c350:	e38aa010 	orr	sl, sl, #16
				goto next_format;
    c354:	eafffef3 	b	bf28 <_printf_engine+0xa0>
				flags |= ALTFLAG;
    c358:	e38aa080 	orr	sl, sl, #128	; 0x80
				goto next_format;
    c35c:	eafffef1 	b	bf28 <_printf_engine+0xa0>
				OUTPUT_CHAR('%');
    c360:	e3a03025 	mov	r3, #37	; 0x25
    c364:	e28d8048 	add	r8, sp, #72	; 0x48
    c368:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    c36c:	e1a02007 	mov	r2, r7
    c370:	e1a00008 	mov	r0, r8
    c374:	e3a01001 	mov	r1, #1
    c378:	e12fff3b 	blx	fp
    c37c:	e2503000 	subs	r3, r0, #0
    c380:	bafffedd 	blt	befc <_printf_engine+0x74>
				OUTPUT_CHAR(c);
    c384:	e0836006 	add	r6, r3, r6
				ptr = va_arg(ap, void *);
    c388:	e1a00004 	mov	r0, r4
    c38c:	eafffec7 	b	beb0 <_printf_engine+0x28>
				flags |= BLANKPOSFLAG;
    c390:	e38aaa02 	orr	sl, sl, #8192	; 0x2000
				goto next_format;
    c394:	eafffee3 	b	bf28 <_printf_engine+0xa0>
				flags |= SHOWSIGNFLAG;
    c398:	e38aac02 	orr	sl, sl, #512	; 0x200
				goto next_format;
    c39c:	eafffee1 	b	bf28 <_printf_engine+0xa0>
				flags |= LEFTFORMATFLAG;
    c3a0:	e38aab02 	orr	sl, sl, #2048	; 0x800
				goto next_format;
    c3a4:	eafffedf 	b	bf28 <_printf_engine+0xa0>
				if (c == '0' && format_num == 0)
    c3a8:	e3590030 	cmp	r9, #48	; 0x30
    c3ac:	03550000 	cmpeq	r5, #0
				format_num *= 10;
    c3b0:	e0855105 	add	r5, r5, r5, lsl #2
				format_num += c - '0';
    c3b4:	e2499030 	sub	r9, r9, #48	; 0x30
					flags |= LEADZEROFLAG;
    c3b8:	038aaa01 	orreq	sl, sl, #4096	; 0x1000
				format_num += c - '0';
    c3bc:	e0895085 	add	r5, r9, r5, lsl #1
				goto next_format;
    c3c0:	eafffed8 	b	bf28 <_printf_engine+0xa0>
				uc = va_arg(ap, unsigned int);
    c3c4:	e59d5010 	ldr	r5, [sp, #16]
    c3c8:	e28d8048 	add	r8, sp, #72	; 0x48
				OUTPUT_CHAR(uc);
    c3cc:	e1a02007 	mov	r2, r7
    c3d0:	e3a01001 	mov	r1, #1
				uc = va_arg(ap, unsigned int);
    c3d4:	e5953000 	ldr	r3, [r5]
    c3d8:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
				OUTPUT_CHAR(uc);
    c3dc:	e1a00008 	mov	r0, r8
    c3e0:	e12fff3b 	blx	fp
    c3e4:	e2503000 	subs	r3, r0, #0
    c3e8:	bafffec3 	blt	befc <_printf_engine+0x74>
				uc = va_arg(ap, unsigned int);
    c3ec:	e2852004 	add	r2, r5, #4
				OUTPUT_CHAR(uc);
    c3f0:	e0866003 	add	r6, r6, r3
				uc = va_arg(ap, unsigned int);
    c3f4:	e58d2010 	str	r2, [sp, #16]
				break;
    c3f8:	eaffffc2 	b	c308 <_printf_engine+0x480>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c3fc:	e31a0002 	tst	sl, #2
    c400:	1a000066 	bne	c5a0 <_printf_engine+0x718>
    c404:	e31a0001 	tst	sl, #1
    c408:	1a000097 	bne	c66c <_printf_engine+0x7e4>
    c40c:	e31a0008 	tst	sl, #8
    c410:	0a0000a4 	beq	c6a8 <_printf_engine+0x820>
    c414:	e59d1010 	ldr	r1, [sp, #16]
    c418:	e1d120d0 	ldrsb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    c41c:	e2811004 	add	r1, r1, #4
    c420:	e58d1010 	str	r1, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c424:	e1a03fc2 	asr	r3, r2, #31
    c428:	ea000062 	b	c5b8 <_printf_engine+0x730>
				if (flags & LONGFLAG)
    c42c:	e31a0001 	tst	sl, #1
					flags |= LONGLONGFLAG;
    c430:	138aa002 	orrne	sl, sl, #2
				flags |= LONGFLAG;
    c434:	e38aa001 	orr	sl, sl, #1
				goto next_format;
    c438:	eafffeba 	b	bf28 <_printf_engine+0xa0>
				if (flags & HALFFLAG)
    c43c:	e31a0004 	tst	sl, #4
					flags |= HALFHALFFLAG;
    c440:	138aa008 	orrne	sl, sl, #8
				flags |= HALFFLAG;
    c444:	e38aa004 	orr	sl, sl, #4
				goto next_format;
    c448:	eafffeb6 	b	bf28 <_printf_engine+0xa0>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    c44c:	e31a0002 	tst	sl, #2
    c450:	0a000062 	beq	c5e0 <_printf_engine+0x758>
    c454:	e59d3010 	ldr	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c458:	e2833007 	add	r3, r3, #7
    c45c:	e3c33007 	bic	r3, r3, #7
    c460:	e2832008 	add	r2, r3, #8
    c464:	e58d2010 	str	r2, [sp, #16]
    c468:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    c46c:	e28d0027 	add	r0, sp, #39	; 0x27
    c470:	e3a01020 	mov	r1, #32
    c474:	e58d0008 	str	r0, [sp, #8]
    c478:	e28d0028 	add	r0, sp, #40	; 0x28
    c47c:	e58da004 	str	sl, [sp, #4]
    c480:	e58d1000 	str	r1, [sp]
    c484:	ebfffc19 	bl	b4f0 <longlong_to_string>
    c488:	e1a09000 	mov	r9, r0
				goto _output_string;
    c48c:	eaffff6d 	b	c248 <_printf_engine+0x3c0>
				flags |= CAPSFLAG;
    c490:	e38aac01 	orr	sl, sl, #256	; 0x100
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    c494:	e31a0002 	tst	sl, #2
    c498:	0affff9c 	beq	c310 <_printf_engine+0x488>
    c49c:	eaffff0b 	b	c0d0 <_printf_engine+0x248>
				flags |= PTRDIFFFLAG;
    c4a0:	e38aa040 	orr	sl, sl, #64	; 0x40
				goto next_format;
    c4a4:	eafffe9f 	b	bf28 <_printf_engine+0xa0>
				flags |= INTMAXFLAG;
    c4a8:	e38aa020 	orr	sl, sl, #32
				goto next_format;
    c4ac:	eafffe9d 	b	bf28 <_printf_engine+0xa0>
				s = va_arg(ap, const char *);
    c4b0:	e59d3010 	ldr	r3, [sp, #16]
				flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
    c4b4:	e3caaa01 	bic	sl, sl, #4096	; 0x1000
				s = va_arg(ap, const char *);
    c4b8:	e5939000 	ldr	r9, [r3]
    c4bc:	e2833004 	add	r3, r3, #4
    c4c0:	e58d3010 	str	r3, [sp, #16]
					s = "<null>";
    c4c4:	e59d3014 	ldr	r3, [sp, #20]
    c4c8:	e3590000 	cmp	r9, #0
    c4cc:	01a09003 	moveq	r9, r3
				goto _output_string;
    c4d0:	eaffff5c 	b	c248 <_printf_engine+0x3c0>
				OUTPUT_CHAR('%');
    c4d4:	e3a03025 	mov	r3, #37	; 0x25
    c4d8:	e28d8048 	add	r8, sp, #72	; 0x48
    c4dc:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    c4e0:	e1a02007 	mov	r2, r7
    c4e4:	e1a00008 	mov	r0, r8
    c4e8:	e3a01001 	mov	r1, #1
    c4ec:	e12fff3b 	blx	fp
    c4f0:	e2505000 	subs	r5, r0, #0
    c4f4:	ba000090 	blt	c73c <_printf_engine+0x8b4>
				OUTPUT_CHAR(c);
    c4f8:	e1a00008 	mov	r0, r8
    c4fc:	e1a02007 	mov	r2, r7
    c500:	e3a01001 	mov	r1, #1
    c504:	e5cd9024 	strb	r9, [sp, #36]	; 0x24
    c508:	e12fff3b 	blx	fp
    c50c:	e2503000 	subs	r3, r0, #0
    c510:	bafffe79 	blt	befc <_printf_engine+0x74>
				OUTPUT_CHAR('%');
    c514:	e0856006 	add	r6, r5, r6
    c518:	eaffff99 	b	c384 <_printf_engine+0x4fc>
    c51c:	e59d401c 	ldr	r4, [sp, #28]
			if (!(flags & LEADZEROFLAG) && signchar != '\0')
    c520:	e59d3018 	ldr	r3, [sp, #24]
    c524:	e3530000 	cmp	r3, #0
    c528:	1a00000b 	bne	c55c <_printf_engine+0x6d4>
    c52c:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
    c530:	e3530000 	cmp	r3, #0
    c534:	0a000008 	beq	c55c <_printf_engine+0x6d4>
				OUTPUT_CHAR(signchar);
    c538:	e28d8048 	add	r8, sp, #72	; 0x48
    c53c:	e1a02007 	mov	r2, r7
    c540:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    c544:	e3a01001 	mov	r1, #1
    c548:	e1a00008 	mov	r0, r8
    c54c:	e12fff3b 	blx	fp
    c550:	e2503000 	subs	r3, r0, #0
    c554:	bafffe68 	blt	befc <_printf_engine+0x74>
    c558:	e0866003 	add	r6, r6, r3
			OUTPUT_STRING(s, SIZE_MAX);
    c55c:	e1a00009 	mov	r0, r9
    c560:	e1a02007 	mov	r2, r7
    c564:	e3e01000 	mvn	r1, #0
    c568:	e12fff3b 	blx	fp
    c56c:	e2503000 	subs	r3, r0, #0
    c570:	bafffe61 	blt	befc <_printf_engine+0x74>
    c574:	eaffff82 	b	c384 <_printf_engine+0x4fc>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c578:	e59d3010 	ldr	r3, [sp, #16]
    c57c:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    c580:	e2833004 	add	r3, r3, #4
    c584:	e58d3010 	str	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c588:	e3a03000 	mov	r3, #0
    c58c:	eafffed5 	b	c0e8 <_printf_engine+0x260>
			if (flags & LEADZEROFLAG && signchar != '\0')
    c590:	e59d2018 	ldr	r2, [sp, #24]
    c594:	e3520000 	cmp	r2, #0
    c598:	1afffefc 	bne	c190 <_printf_engine+0x308>
    c59c:	eaffffe5 	b	c538 <_printf_engine+0x6b0>
				    (flags & INTMAXFLAG) ? va_arg(ap, intmax_t) :
    c5a0:	e59d3010 	ldr	r3, [sp, #16]
    c5a4:	e2833007 	add	r3, r3, #7
    c5a8:	e3c33007 	bic	r3, r3, #7
    c5ac:	e2832008 	add	r2, r3, #8
    c5b0:	e58d2010 	str	r2, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c5b4:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    c5b8:	e28d0027 	add	r0, sp, #39	; 0x27
    c5bc:	e3a01020 	mov	r1, #32
				flags |= SIGNEDFLAG;
    c5c0:	e38aab01 	orr	sl, sl, #1024	; 0x400
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    c5c4:	e58d0008 	str	r0, [sp, #8]
    c5c8:	e58da004 	str	sl, [sp, #4]
    c5cc:	e28d0028 	add	r0, sp, #40	; 0x28
    c5d0:	e58d1000 	str	r1, [sp]
    c5d4:	ebfffbc5 	bl	b4f0 <longlong_to_string>
    c5d8:	e1a09000 	mov	r9, r0
				goto _output_string;
    c5dc:	eaffff19 	b	c248 <_printf_engine+0x3c0>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c5e0:	e31a0001 	tst	sl, #1
    c5e4:	1a00001a 	bne	c654 <_printf_engine+0x7cc>
    c5e8:	e31a0008 	tst	sl, #8
    c5ec:	0a000035 	beq	c6c8 <_printf_engine+0x840>
    c5f0:	e59d1010 	ldr	r1, [sp, #16]
    c5f4:	e3a03000 	mov	r3, #0
    c5f8:	e5d12000 	ldrb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    c5fc:	e2811004 	add	r1, r1, #4
    c600:	e58d1010 	str	r1, [sp, #16]
    c604:	eaffff98 	b	c46c <_printf_engine+0x5e4>
				else if (flags & LONGFLAG)
    c608:	e31a0001 	tst	sl, #1
    c60c:	1a000007 	bne	c630 <_printf_engine+0x7a8>
				else if (flags & HALFHALFFLAG)
    c610:	e31a0008 	tst	sl, #8
					*(signed char *)ptr = chars_written;
    c614:	15c36000 	strbne	r6, [r3]
				ptr = va_arg(ap, void *);
    c618:	158d2010 	strne	r2, [sp, #16]
				else if (flags & HALFHALFFLAG)
    c61c:	1affff39 	bne	c308 <_printf_engine+0x480>
				else if (flags & HALFFLAG)
    c620:	e31a0004 	tst	sl, #4
					*(short *)ptr = chars_written;
    c624:	11c360b0 	strhne	r6, [r3]
				ptr = va_arg(ap, void *);
    c628:	158d2010 	strne	r2, [sp, #16]
				else if (flags & HALFFLAG)
    c62c:	1affff35 	bne	c308 <_printf_engine+0x480>
					*(int *)ptr = chars_written;
    c630:	e5836000 	str	r6, [r3]
				ptr = va_arg(ap, void *);
    c634:	e58d2010 	str	r2, [sp, #16]
    c638:	eaffff32 	b	c308 <_printf_engine+0x480>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c63c:	e59d1010 	ldr	r1, [sp, #16]
    c640:	e3a03000 	mov	r3, #0
    c644:	e5d12000 	ldrb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    c648:	e2811004 	add	r1, r1, #4
    c64c:	e58d1010 	str	r1, [sp, #16]
    c650:	eafffea4 	b	c0e8 <_printf_engine+0x260>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c654:	e59d3010 	ldr	r3, [sp, #16]
    c658:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    c65c:	e2833004 	add	r3, r3, #4
    c660:	e58d3010 	str	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c664:	e3a03000 	mov	r3, #0
    c668:	eaffff7f 	b	c46c <_printf_engine+0x5e4>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c66c:	e59d3010 	ldr	r3, [sp, #16]
    c670:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
    c674:	e2833004 	add	r3, r3, #4
    c678:	e58d3010 	str	r3, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c67c:	e1a03fc2 	asr	r3, r2, #31
    c680:	eaffffcc 	b	c5b8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c684:	e31a0010 	tst	sl, #16
    c688:	1affffba 	bne	c578 <_printf_engine+0x6f0>
    c68c:	e31a0020 	tst	sl, #32
    c690:	e59d3010 	ldr	r3, [sp, #16]
    c694:	1afffe8e 	bne	c0d4 <_printf_engine+0x24c>
    c698:	e4932004 	ldr	r2, [r3], #4
    c69c:	e58d3010 	str	r3, [sp, #16]
    c6a0:	e3a03000 	mov	r3, #0
    c6a4:	eafffe8f 	b	c0e8 <_printf_engine+0x260>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c6a8:	e31a0004 	tst	sl, #4
    c6ac:	0a00000d 	beq	c6e8 <_printf_engine+0x860>
    c6b0:	e59d1010 	ldr	r1, [sp, #16]
    c6b4:	e1d120f0 	ldrsh	r2, [r1]
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    c6b8:	e2811004 	add	r1, r1, #4
    c6bc:	e58d1010 	str	r1, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c6c0:	e1a03fc2 	asr	r3, r2, #31
    c6c4:	eaffffbb 	b	c5b8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c6c8:	e31a0004 	tst	sl, #4
    c6cc:	0a000011 	beq	c718 <_printf_engine+0x890>
    c6d0:	e59d1010 	ldr	r1, [sp, #16]
    c6d4:	e3a03000 	mov	r3, #0
    c6d8:	e1d120b0 	ldrh	r2, [r1]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    c6dc:	e2811004 	add	r1, r1, #4
    c6e0:	e58d1010 	str	r1, [sp, #16]
    c6e4:	eaffff60 	b	c46c <_printf_engine+0x5e4>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c6e8:	e31a0010 	tst	sl, #16
    c6ec:	1affffde 	bne	c66c <_printf_engine+0x7e4>
    c6f0:	e31a0020 	tst	sl, #32
    c6f4:	1affffa9 	bne	c5a0 <_printf_engine+0x718>
    c6f8:	e59d2010 	ldr	r2, [sp, #16]
    c6fc:	e31a0040 	tst	sl, #64	; 0x40
    c700:	e2823004 	add	r3, r2, #4
    c704:	059d2010 	ldreq	r2, [sp, #16]
    c708:	e5922000 	ldr	r2, [r2]
				    va_arg(ap, int);
    c70c:	e58d3010 	str	r3, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c710:	e1a03fc2 	asr	r3, r2, #31
    c714:	eaffffa7 	b	c5b8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c718:	e31a0010 	tst	sl, #16
    c71c:	1affffcc 	bne	c654 <_printf_engine+0x7cc>
    c720:	e31a0020 	tst	sl, #32
    c724:	e59d3010 	ldr	r3, [sp, #16]
    c728:	1affff4a 	bne	c458 <_printf_engine+0x5d0>
    c72c:	e4932004 	ldr	r2, [r3], #4
    c730:	e58d3010 	str	r3, [sp, #16]
    c734:	e3a03000 	mov	r3, #0
    c738:	eaffff4b 	b	c46c <_printf_engine+0x5e4>
				OUTPUT_CHAR('%');
    c73c:	e1a03005 	mov	r3, r5
    c740:	eafffded 	b	befc <_printf_engine+0x74>
			for (; format_num > string_len; format_num--)
    c744:	e1500005 	cmp	r0, r5
    c748:	3afffefe 	bcc	c348 <_printf_engine+0x4c0>
    c74c:	eaffff77 	b	c530 <_printf_engine+0x6a8>

0000c750 <vsnprintf>:
{
    c750:	e92d4070 	push	{r4, r5, r6, lr}
    c754:	e1a04000 	mov	r4, r0
    c758:	e24dd010 	sub	sp, sp, #16
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    c75c:	e30b0678 	movw	r0, #46712	; 0xb678
{
    c760:	e1a05001 	mov	r5, r1
	args.pos = 0;
    c764:	e3a06000 	mov	r6, #0
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    c768:	e28d1004 	add	r1, sp, #4
    c76c:	e3400000 	movt	r0, #0
	args.len = len;
    c770:	e1cd40f4 	strd	r4, [sp, #4]
	args.pos = 0;
    c774:	e58d600c 	str	r6, [sp, #12]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    c778:	ebfffdc2 	bl	be88 <_printf_engine>
	if (args.pos >= len)
    c77c:	e59d300c 	ldr	r3, [sp, #12]
    c780:	e1530005 	cmp	r3, r5
		str[len-1] = '\0';
    c784:	20844005 	addcs	r4, r4, r5
		str[wlen] = '\0';
    c788:	37c46000 	strbcc	r6, [r4, r0]
		str[len-1] = '\0';
    c78c:	25446001 	strbcs	r6, [r4, #-1]
}
    c790:	e28dd010 	add	sp, sp, #16
    c794:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c798 <sprintf>:
{
    c798:	e92d000e 	push	{r1, r2, r3}
	return vsnprintf(str, INT_MAX, fmt, ap);
    c79c:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
{
    c7a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c7a4:	e24dd008 	sub	sp, sp, #8
	va_start(ap, fmt);
    c7a8:	e28dc010 	add	ip, sp, #16
	return vsnprintf(str, INT_MAX, fmt, ap);
    c7ac:	e1a0300c 	mov	r3, ip
    c7b0:	e59d200c 	ldr	r2, [sp, #12]
	va_start(ap, fmt);
    c7b4:	e58dc004 	str	ip, [sp, #4]
	return vsnprintf(str, INT_MAX, fmt, ap);
    c7b8:	ebffffe4 	bl	c750 <vsnprintf>
}
    c7bc:	e28dd008 	add	sp, sp, #8
    c7c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c7c4:	e28dd00c 	add	sp, sp, #12
    c7c8:	e12fff1e 	bx	lr

0000c7cc <rand>:
	randseed ^= enp;
}

int rand(void)
{
	return (randseed = randseed * 1664525 + 1013904223);
    c7cc:	e30e3130 	movw	r3, #57648	; 0xe130
    c7d0:	e306160d 	movw	r1, #26125	; 0x660d
    c7d4:	e3403000 	movt	r3, #0
    c7d8:	e30f235f 	movw	r2, #62303	; 0xf35f
    c7dc:	e5930000 	ldr	r0, [r3]
    c7e0:	e3401019 	movt	r1, #25
    c7e4:	e3432c6e 	movt	r2, #15470	; 0x3c6e
    c7e8:	e0202091 	mla	r0, r1, r0, r2
    c7ec:	e5830000 	str	r0, [r3]
}
    c7f0:	e12fff1e 	bx	lr

0000c7f4 <vfprintf>:
	return getc(stdin);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
	return fp->vfprintf(fp->ctx, fmt, ap);
    c7f4:	e5903010 	ldr	r3, [r0, #16]
    c7f8:	e5900000 	ldr	r0, [r0]
    c7fc:	e12fff13 	bx	r3

0000c800 <fprintf>:
}

int fprintf(FILE *fp, const char *fmt, ...)
{
    c800:	e92d000e 	push	{r1, r2, r3}
    c804:	e92d4010 	push	{r4, lr}
    c808:	e24dd00c 	sub	sp, sp, #12
	va_list ap;
	int err;

	va_start(ap, fmt);
    c80c:	e28d3018 	add	r3, sp, #24
	return fp->vfprintf(fp->ctx, fmt, ap);
    c810:	e1a02003 	mov	r2, r3
    c814:	e5904010 	ldr	r4, [r0, #16]
    c818:	e59d1014 	ldr	r1, [sp, #20]
    c81c:	e5900000 	ldr	r0, [r0]
	va_start(ap, fmt);
    c820:	e58d3004 	str	r3, [sp, #4]
	return fp->vfprintf(fp->ctx, fmt, ap);
    c824:	e12fff34 	blx	r4
	err = vfprintf(fp, fmt, ap);
	va_end(ap);
	return err;
}
    c828:	e28dd00c 	add	sp, sp, #12
    c82c:	e8bd4010 	pop	{r4, lr}
    c830:	e28dd00c 	add	sp, sp, #12
    c834:	e12fff1e 	bx	lr

0000c838 <raise>:
#endif

/* needed by some piece of EABI */
void raise(void)
{
}
    c838:	e12fff1e 	bx	lr

0000c83c <memset>:

void *
memset(void *s, int c, size_t count)
{
	char *xs = (char *) s;
	size_t len = (-(size_t)s) & (sizeof(size_t)-1);
    c83c:	e2603000 	rsb	r3, r0, #0
    c840:	e2033003 	and	r3, r3, #3
	size_t cc = c & 0xff;

	if ( count > len ) {
    c844:	e1530002 	cmp	r3, r2
    c848:	2a00001b 	bcs	c8bc <memset+0x80>
{
    c84c:	e92d4010 	push	{r4, lr}
	size_t cc = c & 0xff;
    c850:	e6ef4071 	uxtb	r4, r1
		cc |= cc << 16;
		if (sizeof(size_t) == 8)
			cc |= (uint64_t)cc << 32; // should be optimized out on 32 bit machines

		// write to non-aligned memory byte-wise
		for ( ; len > 0; len-- )
    c854:	e3530000 	cmp	r3, #0
		cc |= cc << 8;
    c858:	e184e404 	orr	lr, r4, r4, lsl #8
		count -= len;
    c85c:	e0422003 	sub	r2, r2, r3
	char *xs = (char *) s;
    c860:	01a03000 	moveq	r3, r0
		cc |= cc << 16;
    c864:	e18ee80e 	orr	lr, lr, lr, lsl #16
		for ( ; len > 0; len-- )
    c868:	0a000004 	beq	c880 <memset+0x44>
    c86c:	e080c003 	add	ip, r0, r3
	char *xs = (char *) s;
    c870:	e1a03000 	mov	r3, r0
			*xs++ = c;
    c874:	e4c34001 	strb	r4, [r3], #1
		for ( ; len > 0; len-- )
    c878:	e15c0003 	cmp	ip, r3
    c87c:	1afffffc 	bne	c874 <memset+0x38>

		// write to aligned memory dword-wise
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    c880:	e1b0c122 	lsrs	ip, r2, #2
    c884:	0a000003 	beq	c898 <memset+0x5c>
    c888:	e083c10c 	add	ip, r3, ip, lsl #2
			*((size_t *)xs) = (size_t)cc;
    c88c:	e483e004 	str	lr, [r3], #4
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    c890:	e15c0003 	cmp	ip, r3
    c894:	1afffffc 	bne	c88c <memset+0x50>
			xs += sizeof(size_t);
		}

		count &= sizeof(size_t)-1;
    c898:	e2022003 	and	r2, r2, #3
	}

	// write remaining bytes
	for ( ; count > 0; count-- )
    c89c:	e3520000 	cmp	r2, #0
    c8a0:	08bd8010 	popeq	{r4, pc}
    c8a4:	e6ef1071 	uxtb	r1, r1
    c8a8:	e0832002 	add	r2, r3, r2
		*xs++ = c;
    c8ac:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    c8b0:	e1520003 	cmp	r2, r3
    c8b4:	1afffffc 	bne	c8ac <memset+0x70>
    c8b8:	e8bd8010 	pop	{r4, pc}
    c8bc:	e3520000 	cmp	r2, #0
	char *xs = (char *) s;
    c8c0:	e1a03000 	mov	r3, r0
	for ( ; count > 0; count-- )
    c8c4:	012fff1e 	bxeq	lr
    c8c8:	e6ef1071 	uxtb	r1, r1
    c8cc:	e0802002 	add	r2, r0, r2
		*xs++ = c;
    c8d0:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    c8d4:	e1520003 	cmp	r2, r3
    c8d8:	1afffffc 	bne	c8d0 <memset+0x94>
    c8dc:	e12fff1e 	bx	lr

0000c8e0 <strlen>:
strlen(char const *s)
{
	size_t i;

	i= 0;
	while (s[i]) {
    c8e0:	e5d03000 	ldrb	r3, [r0]
    c8e4:	e3530000 	cmp	r3, #0
    c8e8:	0a000006 	beq	c908 <strlen+0x28>
    c8ec:	e1a03000 	mov	r3, r0
	i= 0;
    c8f0:	e3a00000 	mov	r0, #0
	while (s[i]) {
    c8f4:	e5f32001 	ldrb	r2, [r3, #1]!
		i+= 1;
    c8f8:	e2800001 	add	r0, r0, #1
	while (s[i]) {
    c8fc:	e3520000 	cmp	r2, #0
    c900:	1afffffb 	bne	c8f4 <strlen+0x14>
    c904:	e12fff1e 	bx	lr
	i= 0;
    c908:	e1a00003 	mov	r0, r3
	}

	return i;
}
    c90c:	e12fff1e 	bx	lr

0000c910 <strnlen>:
size_t
strnlen(char const *s, size_t count)
{
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
    c910:	e3510000 	cmp	r1, #0
    c914:	0a000010 	beq	c95c <strnlen+0x4c>
    c918:	e5d03000 	ldrb	r3, [r0]
    c91c:	e3530000 	cmp	r3, #0
    c920:	0a00000f 	beq	c964 <strnlen+0x54>
    c924:	e0801001 	add	r1, r0, r1
    c928:	e2803001 	add	r3, r0, #1
    c92c:	ea000003 	b	c940 <strnlen+0x30>
    c930:	e5d3c000 	ldrb	ip, [r3]
    c934:	e35c0000 	cmp	ip, #0
    c938:	0a000005 	beq	c954 <strnlen+0x44>
    c93c:	e1a03002 	mov	r3, r2
    c940:	e1510003 	cmp	r1, r3
    c944:	e2832001 	add	r2, r3, #1
    c948:	1afffff8 	bne	c930 <strnlen+0x20>
    c94c:	e0410000 	sub	r0, r1, r0
    c950:	e12fff1e 	bx	lr
    c954:	e0430000 	sub	r0, r3, r0
    c958:	e12fff1e 	bx	lr
    c95c:	e1a00001 	mov	r0, r1
    c960:	e12fff1e 	bx	lr
    c964:	e1a00003 	mov	r0, r3
		;
	return sc - s;
}
    c968:	e12fff1e 	bx	lr

0000c96c <__aeabi_drsub>:
    c96c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c970:	e002      	b.n	c978 <__adddf3>
    c972:	bf00      	nop

0000c974 <__aeabi_dsub>:
    c974:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c978 <__adddf3>:
    c978:	b530      	push	{r4, r5, lr}
    c97a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c97e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c982:	ea94 0f05 	teq	r4, r5
    c986:	bf08      	it	eq
    c988:	ea90 0f02 	teqeq	r0, r2
    c98c:	bf1f      	itttt	ne
    c98e:	ea54 0c00 	orrsne.w	ip, r4, r0
    c992:	ea55 0c02 	orrsne.w	ip, r5, r2
    c996:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c99a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c99e:	f000 80e2 	beq.w	cb66 <__adddf3+0x1ee>
    c9a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c9a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c9aa:	bfb8      	it	lt
    c9ac:	426d      	neglt	r5, r5
    c9ae:	dd0c      	ble.n	c9ca <__adddf3+0x52>
    c9b0:	442c      	add	r4, r5
    c9b2:	ea80 0202 	eor.w	r2, r0, r2
    c9b6:	ea81 0303 	eor.w	r3, r1, r3
    c9ba:	ea82 0000 	eor.w	r0, r2, r0
    c9be:	ea83 0101 	eor.w	r1, r3, r1
    c9c2:	ea80 0202 	eor.w	r2, r0, r2
    c9c6:	ea81 0303 	eor.w	r3, r1, r3
    c9ca:	2d36      	cmp	r5, #54	; 0x36
    c9cc:	bf88      	it	hi
    c9ce:	bd30      	pophi	{r4, r5, pc}
    c9d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c9d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c9d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c9dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c9e0:	d002      	beq.n	c9e8 <__adddf3+0x70>
    c9e2:	4240      	negs	r0, r0
    c9e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c9e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c9ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c9f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c9f4:	d002      	beq.n	c9fc <__adddf3+0x84>
    c9f6:	4252      	negs	r2, r2
    c9f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c9fc:	ea94 0f05 	teq	r4, r5
    ca00:	f000 80a7 	beq.w	cb52 <__adddf3+0x1da>
    ca04:	f1a4 0401 	sub.w	r4, r4, #1
    ca08:	f1d5 0e20 	rsbs	lr, r5, #32
    ca0c:	db0d      	blt.n	ca2a <__adddf3+0xb2>
    ca0e:	fa02 fc0e 	lsl.w	ip, r2, lr
    ca12:	fa22 f205 	lsr.w	r2, r2, r5
    ca16:	1880      	adds	r0, r0, r2
    ca18:	f141 0100 	adc.w	r1, r1, #0
    ca1c:	fa03 f20e 	lsl.w	r2, r3, lr
    ca20:	1880      	adds	r0, r0, r2
    ca22:	fa43 f305 	asr.w	r3, r3, r5
    ca26:	4159      	adcs	r1, r3
    ca28:	e00e      	b.n	ca48 <__adddf3+0xd0>
    ca2a:	f1a5 0520 	sub.w	r5, r5, #32
    ca2e:	f10e 0e20 	add.w	lr, lr, #32
    ca32:	2a01      	cmp	r2, #1
    ca34:	fa03 fc0e 	lsl.w	ip, r3, lr
    ca38:	bf28      	it	cs
    ca3a:	f04c 0c02 	orrcs.w	ip, ip, #2
    ca3e:	fa43 f305 	asr.w	r3, r3, r5
    ca42:	18c0      	adds	r0, r0, r3
    ca44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ca48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ca4c:	d507      	bpl.n	ca5e <__adddf3+0xe6>
    ca4e:	f04f 0e00 	mov.w	lr, #0
    ca52:	f1dc 0c00 	rsbs	ip, ip, #0
    ca56:	eb7e 0000 	sbcs.w	r0, lr, r0
    ca5a:	eb6e 0101 	sbc.w	r1, lr, r1
    ca5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ca62:	d31b      	bcc.n	ca9c <__adddf3+0x124>
    ca64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ca68:	d30c      	bcc.n	ca84 <__adddf3+0x10c>
    ca6a:	0849      	lsrs	r1, r1, #1
    ca6c:	ea5f 0030 	movs.w	r0, r0, rrx
    ca70:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ca74:	f104 0401 	add.w	r4, r4, #1
    ca78:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ca7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ca80:	f080 809a 	bcs.w	cbb8 <__adddf3+0x240>
    ca84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ca88:	bf08      	it	eq
    ca8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ca8e:	f150 0000 	adcs.w	r0, r0, #0
    ca92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ca96:	ea41 0105 	orr.w	r1, r1, r5
    ca9a:	bd30      	pop	{r4, r5, pc}
    ca9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    caa0:	4140      	adcs	r0, r0
    caa2:	eb41 0101 	adc.w	r1, r1, r1
    caa6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    caaa:	f1a4 0401 	sub.w	r4, r4, #1
    caae:	d1e9      	bne.n	ca84 <__adddf3+0x10c>
    cab0:	f091 0f00 	teq	r1, #0
    cab4:	bf04      	itt	eq
    cab6:	4601      	moveq	r1, r0
    cab8:	2000      	moveq	r0, #0
    caba:	fab1 f381 	clz	r3, r1
    cabe:	bf08      	it	eq
    cac0:	3320      	addeq	r3, #32
    cac2:	f1a3 030b 	sub.w	r3, r3, #11
    cac6:	f1b3 0220 	subs.w	r2, r3, #32
    caca:	da0c      	bge.n	cae6 <__adddf3+0x16e>
    cacc:	320c      	adds	r2, #12
    cace:	dd08      	ble.n	cae2 <__adddf3+0x16a>
    cad0:	f102 0c14 	add.w	ip, r2, #20
    cad4:	f1c2 020c 	rsb	r2, r2, #12
    cad8:	fa01 f00c 	lsl.w	r0, r1, ip
    cadc:	fa21 f102 	lsr.w	r1, r1, r2
    cae0:	e00c      	b.n	cafc <__adddf3+0x184>
    cae2:	f102 0214 	add.w	r2, r2, #20
    cae6:	bfd8      	it	le
    cae8:	f1c2 0c20 	rsble	ip, r2, #32
    caec:	fa01 f102 	lsl.w	r1, r1, r2
    caf0:	fa20 fc0c 	lsr.w	ip, r0, ip
    caf4:	bfdc      	itt	le
    caf6:	ea41 010c 	orrle.w	r1, r1, ip
    cafa:	4090      	lslle	r0, r2
    cafc:	1ae4      	subs	r4, r4, r3
    cafe:	bfa2      	ittt	ge
    cb00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    cb04:	4329      	orrge	r1, r5
    cb06:	bd30      	popge	{r4, r5, pc}
    cb08:	ea6f 0404 	mvn.w	r4, r4
    cb0c:	3c1f      	subs	r4, #31
    cb0e:	da1c      	bge.n	cb4a <__adddf3+0x1d2>
    cb10:	340c      	adds	r4, #12
    cb12:	dc0e      	bgt.n	cb32 <__adddf3+0x1ba>
    cb14:	f104 0414 	add.w	r4, r4, #20
    cb18:	f1c4 0220 	rsb	r2, r4, #32
    cb1c:	fa20 f004 	lsr.w	r0, r0, r4
    cb20:	fa01 f302 	lsl.w	r3, r1, r2
    cb24:	ea40 0003 	orr.w	r0, r0, r3
    cb28:	fa21 f304 	lsr.w	r3, r1, r4
    cb2c:	ea45 0103 	orr.w	r1, r5, r3
    cb30:	bd30      	pop	{r4, r5, pc}
    cb32:	f1c4 040c 	rsb	r4, r4, #12
    cb36:	f1c4 0220 	rsb	r2, r4, #32
    cb3a:	fa20 f002 	lsr.w	r0, r0, r2
    cb3e:	fa01 f304 	lsl.w	r3, r1, r4
    cb42:	ea40 0003 	orr.w	r0, r0, r3
    cb46:	4629      	mov	r1, r5
    cb48:	bd30      	pop	{r4, r5, pc}
    cb4a:	fa21 f004 	lsr.w	r0, r1, r4
    cb4e:	4629      	mov	r1, r5
    cb50:	bd30      	pop	{r4, r5, pc}
    cb52:	f094 0f00 	teq	r4, #0
    cb56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    cb5a:	bf06      	itte	eq
    cb5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    cb60:	3401      	addeq	r4, #1
    cb62:	3d01      	subne	r5, #1
    cb64:	e74e      	b.n	ca04 <__adddf3+0x8c>
    cb66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cb6a:	bf18      	it	ne
    cb6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cb70:	d029      	beq.n	cbc6 <__adddf3+0x24e>
    cb72:	ea94 0f05 	teq	r4, r5
    cb76:	bf08      	it	eq
    cb78:	ea90 0f02 	teqeq	r0, r2
    cb7c:	d005      	beq.n	cb8a <__adddf3+0x212>
    cb7e:	ea54 0c00 	orrs.w	ip, r4, r0
    cb82:	bf04      	itt	eq
    cb84:	4619      	moveq	r1, r3
    cb86:	4610      	moveq	r0, r2
    cb88:	bd30      	pop	{r4, r5, pc}
    cb8a:	ea91 0f03 	teq	r1, r3
    cb8e:	bf1e      	ittt	ne
    cb90:	2100      	movne	r1, #0
    cb92:	2000      	movne	r0, #0
    cb94:	bd30      	popne	{r4, r5, pc}
    cb96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    cb9a:	d105      	bne.n	cba8 <__adddf3+0x230>
    cb9c:	0040      	lsls	r0, r0, #1
    cb9e:	4149      	adcs	r1, r1
    cba0:	bf28      	it	cs
    cba2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cba6:	bd30      	pop	{r4, r5, pc}
    cba8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    cbac:	bf3c      	itt	cc
    cbae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    cbb2:	bd30      	popcc	{r4, r5, pc}
    cbb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cbb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    cbbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cbc0:	f04f 0000 	mov.w	r0, #0
    cbc4:	bd30      	pop	{r4, r5, pc}
    cbc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cbca:	bf1a      	itte	ne
    cbcc:	4619      	movne	r1, r3
    cbce:	4610      	movne	r0, r2
    cbd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cbd4:	bf1c      	itt	ne
    cbd6:	460b      	movne	r3, r1
    cbd8:	4602      	movne	r2, r0
    cbda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cbde:	bf06      	itte	eq
    cbe0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cbe4:	ea91 0f03 	teqeq	r1, r3
    cbe8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cbec:	bd30      	pop	{r4, r5, pc}
    cbee:	bf00      	nop

0000cbf0 <__aeabi_ui2d>:
    cbf0:	f090 0f00 	teq	r0, #0
    cbf4:	bf04      	itt	eq
    cbf6:	2100      	moveq	r1, #0
    cbf8:	4770      	bxeq	lr
    cbfa:	b530      	push	{r4, r5, lr}
    cbfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cc00:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cc04:	f04f 0500 	mov.w	r5, #0
    cc08:	f04f 0100 	mov.w	r1, #0
    cc0c:	e750      	b.n	cab0 <__adddf3+0x138>
    cc0e:	bf00      	nop

0000cc10 <__aeabi_i2d>:
    cc10:	f090 0f00 	teq	r0, #0
    cc14:	bf04      	itt	eq
    cc16:	2100      	moveq	r1, #0
    cc18:	4770      	bxeq	lr
    cc1a:	b530      	push	{r4, r5, lr}
    cc1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cc20:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cc24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cc28:	bf48      	it	mi
    cc2a:	4240      	negmi	r0, r0
    cc2c:	f04f 0100 	mov.w	r1, #0
    cc30:	e73e      	b.n	cab0 <__adddf3+0x138>
    cc32:	bf00      	nop

0000cc34 <__aeabi_f2d>:
    cc34:	0042      	lsls	r2, r0, #1
    cc36:	ea4f 01e2 	mov.w	r1, r2, asr #3
    cc3a:	ea4f 0131 	mov.w	r1, r1, rrx
    cc3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    cc42:	bf1f      	itttt	ne
    cc44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cc48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cc4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cc50:	4770      	bxne	lr
    cc52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    cc56:	bf08      	it	eq
    cc58:	4770      	bxeq	lr
    cc5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    cc5e:	bf04      	itt	eq
    cc60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    cc64:	4770      	bxeq	lr
    cc66:	b530      	push	{r4, r5, lr}
    cc68:	f44f 7460 	mov.w	r4, #896	; 0x380
    cc6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cc70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cc74:	e71c      	b.n	cab0 <__adddf3+0x138>
    cc76:	bf00      	nop

0000cc78 <__aeabi_ul2d>:
    cc78:	ea50 0201 	orrs.w	r2, r0, r1
    cc7c:	bf08      	it	eq
    cc7e:	4770      	bxeq	lr
    cc80:	b530      	push	{r4, r5, lr}
    cc82:	f04f 0500 	mov.w	r5, #0
    cc86:	e00a      	b.n	cc9e <__aeabi_l2d+0x16>

0000cc88 <__aeabi_l2d>:
    cc88:	ea50 0201 	orrs.w	r2, r0, r1
    cc8c:	bf08      	it	eq
    cc8e:	4770      	bxeq	lr
    cc90:	b530      	push	{r4, r5, lr}
    cc92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cc96:	d502      	bpl.n	cc9e <__aeabi_l2d+0x16>
    cc98:	4240      	negs	r0, r0
    cc9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cc9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cca2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cca6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    ccaa:	f43f aed8 	beq.w	ca5e <__adddf3+0xe6>
    ccae:	f04f 0203 	mov.w	r2, #3
    ccb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ccb6:	bf18      	it	ne
    ccb8:	3203      	addne	r2, #3
    ccba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ccbe:	bf18      	it	ne
    ccc0:	3203      	addne	r2, #3
    ccc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    ccc6:	f1c2 0320 	rsb	r3, r2, #32
    ccca:	fa00 fc03 	lsl.w	ip, r0, r3
    ccce:	fa20 f002 	lsr.w	r0, r0, r2
    ccd2:	fa01 fe03 	lsl.w	lr, r1, r3
    ccd6:	ea40 000e 	orr.w	r0, r0, lr
    ccda:	fa21 f102 	lsr.w	r1, r1, r2
    ccde:	4414      	add	r4, r2
    cce0:	e6bd      	b.n	ca5e <__adddf3+0xe6>
    cce2:	bf00      	nop

0000cce4 <__aeabi_uldivmod>:
    cce4:	b953      	cbnz	r3, ccfc <__aeabi_uldivmod+0x18>
    cce6:	b94a      	cbnz	r2, ccfc <__aeabi_uldivmod+0x18>
    cce8:	2900      	cmp	r1, #0
    ccea:	bf08      	it	eq
    ccec:	2800      	cmpeq	r0, #0
    ccee:	bf1c      	itt	ne
    ccf0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    ccf4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ccf8:	f000 b80c 	b.w	cd14 <__aeabi_idiv0>
    ccfc:	f1ad 0c08 	sub.w	ip, sp, #8
    cd00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cd04:	f000 f80c 	bl	cd20 <__udivmoddi4>
    cd08:	f8dd e004 	ldr.w	lr, [sp, #4]
    cd0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cd10:	b004      	add	sp, #16
    cd12:	4770      	bx	lr

0000cd14 <__aeabi_idiv0>:
    cd14:	b502      	push	{r1, lr}
    cd16:	f04f 0008 	mov.w	r0, #8
    cd1a:	f7ff ed8e 	blx	c838 <raise>
    cd1e:	bd02      	pop	{r1, pc}

0000cd20 <__udivmoddi4>:
    cd20:	4299      	cmp	r1, r3
    cd22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd26:	bf08      	it	eq
    cd28:	4290      	cmpeq	r0, r2
    cd2a:	4604      	mov	r4, r0
    cd2c:	bf38      	it	cc
    cd2e:	2000      	movcc	r0, #0
    cd30:	460d      	mov	r5, r1
    cd32:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    cd36:	bf38      	it	cc
    cd38:	4601      	movcc	r1, r0
    cd3a:	d368      	bcc.n	ce0e <__udivmoddi4+0xee>
    cd3c:	4692      	mov	sl, r2
    cd3e:	469b      	mov	fp, r3
    cd40:	fab3 fc83 	clz	ip, r3
    cd44:	2b00      	cmp	r3, #0
    cd46:	d06d      	beq.n	ce24 <__udivmoddi4+0x104>
    cd48:	fab5 f185 	clz	r1, r5
    cd4c:	2d00      	cmp	r5, #0
    cd4e:	d065      	beq.n	ce1c <__udivmoddi4+0xfc>
    cd50:	ebac 0c01 	sub.w	ip, ip, r1
    cd54:	f1ac 0820 	sub.w	r8, ip, #32
    cd58:	fa0b f70c 	lsl.w	r7, fp, ip
    cd5c:	fa0a f108 	lsl.w	r1, sl, r8
    cd60:	f1cc 0920 	rsb	r9, ip, #32
    cd64:	fa2a f309 	lsr.w	r3, sl, r9
    cd68:	fa0a f60c 	lsl.w	r6, sl, ip
    cd6c:	430f      	orrs	r7, r1
    cd6e:	431f      	orrs	r7, r3
    cd70:	42bd      	cmp	r5, r7
    cd72:	bf08      	it	eq
    cd74:	42b4      	cmpeq	r4, r6
    cd76:	bf3c      	itt	cc
    cd78:	2000      	movcc	r0, #0
    cd7a:	4601      	movcc	r1, r0
    cd7c:	d30a      	bcc.n	cd94 <__udivmoddi4+0x74>
    cd7e:	2001      	movs	r0, #1
    cd80:	1ba4      	subs	r4, r4, r6
    cd82:	fa00 f108 	lsl.w	r1, r0, r8
    cd86:	fa20 f309 	lsr.w	r3, r0, r9
    cd8a:	fa00 f00c 	lsl.w	r0, r0, ip
    cd8e:	eb65 0507 	sbc.w	r5, r5, r7
    cd92:	4319      	orrs	r1, r3
    cd94:	f1bc 0f00 	cmp.w	ip, #0
    cd98:	d039      	beq.n	ce0e <__udivmoddi4+0xee>
    cd9a:	087f      	lsrs	r7, r7, #1
    cd9c:	ea4f 0636 	mov.w	r6, r6, rrx
    cda0:	4662      	mov	r2, ip
    cda2:	e00a      	b.n	cdba <__udivmoddi4+0x9a>
    cda4:	1ba3      	subs	r3, r4, r6
    cda6:	eb65 0a07 	sbc.w	sl, r5, r7
    cdaa:	18db      	adds	r3, r3, r3
    cdac:	eb4a 0a0a 	adc.w	sl, sl, sl
    cdb0:	1c5c      	adds	r4, r3, #1
    cdb2:	f14a 0500 	adc.w	r5, sl, #0
    cdb6:	3a01      	subs	r2, #1
    cdb8:	d007      	beq.n	cdca <__udivmoddi4+0xaa>
    cdba:	42bd      	cmp	r5, r7
    cdbc:	bf08      	it	eq
    cdbe:	42b4      	cmpeq	r4, r6
    cdc0:	d2f0      	bcs.n	cda4 <__udivmoddi4+0x84>
    cdc2:	1924      	adds	r4, r4, r4
    cdc4:	416d      	adcs	r5, r5
    cdc6:	3a01      	subs	r2, #1
    cdc8:	d1f7      	bne.n	cdba <__udivmoddi4+0x9a>
    cdca:	fa24 f30c 	lsr.w	r3, r4, ip
    cdce:	fa05 f909 	lsl.w	r9, r5, r9
    cdd2:	fa25 f20c 	lsr.w	r2, r5, ip
    cdd6:	fa25 f808 	lsr.w	r8, r5, r8
    cdda:	1900      	adds	r0, r0, r4
    cddc:	ea43 0309 	orr.w	r3, r3, r9
    cde0:	ea43 0408 	orr.w	r4, r3, r8
    cde4:	eb45 0101 	adc.w	r1, r5, r1
    cde8:	4615      	mov	r5, r2
    cdea:	f1ac 0220 	sub.w	r2, ip, #32
    cdee:	fa05 f30c 	lsl.w	r3, r5, ip
    cdf2:	fa04 f60c 	lsl.w	r6, r4, ip
    cdf6:	fa04 f202 	lsl.w	r2, r4, r2
    cdfa:	f1cc 0c20 	rsb	ip, ip, #32
    cdfe:	fa24 fc0c 	lsr.w	ip, r4, ip
    ce02:	4313      	orrs	r3, r2
    ce04:	1b80      	subs	r0, r0, r6
    ce06:	ea43 030c 	orr.w	r3, r3, ip
    ce0a:	eb61 0103 	sbc.w	r1, r1, r3
    ce0e:	f1be 0f00 	cmp.w	lr, #0
    ce12:	d001      	beq.n	ce18 <__udivmoddi4+0xf8>
    ce14:	e9ce 4500 	strd	r4, r5, [lr]
    ce18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce1c:	fab4 f184 	clz	r1, r4
    ce20:	3120      	adds	r1, #32
    ce22:	e795      	b.n	cd50 <__udivmoddi4+0x30>
    ce24:	fab2 fc82 	clz	ip, r2
    ce28:	fab5 f185 	clz	r1, r5
    ce2c:	f10c 0c20 	add.w	ip, ip, #32
    ce30:	2d00      	cmp	r5, #0
    ce32:	d18d      	bne.n	cd50 <__udivmoddi4+0x30>
    ce34:	e7f2      	b.n	ce1c <__udivmoddi4+0xfc>
    ce36:	bf00      	nop
